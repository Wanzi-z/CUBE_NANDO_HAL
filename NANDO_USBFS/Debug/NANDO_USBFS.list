
NANDO_USBFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139b8  08004190  08004190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  08017b48  08017b48  00014b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d00  08018d00  000168e8  2**0
                  CONTENTS
  4 .ARM          00000008  08018d00  08018d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d08  08018d08  000168e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018d08  08018d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018d10  08018d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000008e8  20000000  08018d14  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000168e8  2**0
                  CONTENTS
 10 .bss          00006e34  200008e8  200008e8  000168e8  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  2000771c  2000771c  000168e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000168e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021315  00000000  00000000  00016918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006336  00000000  00000000  00037c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140a  00000000  00000000  0003fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029636  00000000  00000000  00040e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026f5b  00000000  00000000  0006a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7680  00000000  00000000  000913bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00168a3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ce4  00000000  00000000  00168a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  00170764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	@ (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	@ (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200008e8 	.word	0x200008e8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08017b30 	.word	0x08017b30

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	@ (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	@ (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200008ec 	.word	0x200008ec
 80041cc:	08017b30 	.word	0x08017b30

080041d0 <strlen>:
 80041d0:	4603      	mov	r3, r0
 80041d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	d1fb      	bne.n	80041d2 <strlen+0x2>
 80041da:	1a18      	subs	r0, r3, r0
 80041dc:	3801      	subs	r0, #1
 80041de:	4770      	bx	lr

080041e0 <memchr>:
 80041e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80041e4:	2a10      	cmp	r2, #16
 80041e6:	db2b      	blt.n	8004240 <memchr+0x60>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	d008      	beq.n	8004200 <memchr+0x20>
 80041ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041f2:	3a01      	subs	r2, #1
 80041f4:	428b      	cmp	r3, r1
 80041f6:	d02d      	beq.n	8004254 <memchr+0x74>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	b342      	cbz	r2, 8004250 <memchr+0x70>
 80041fe:	d1f6      	bne.n	80041ee <memchr+0xe>
 8004200:	b4f0      	push	{r4, r5, r6, r7}
 8004202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800420a:	f022 0407 	bic.w	r4, r2, #7
 800420e:	f07f 0700 	mvns.w	r7, #0
 8004212:	2300      	movs	r3, #0
 8004214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004218:	3c08      	subs	r4, #8
 800421a:	ea85 0501 	eor.w	r5, r5, r1
 800421e:	ea86 0601 	eor.w	r6, r6, r1
 8004222:	fa85 f547 	uadd8	r5, r5, r7
 8004226:	faa3 f587 	sel	r5, r3, r7
 800422a:	fa86 f647 	uadd8	r6, r6, r7
 800422e:	faa5 f687 	sel	r6, r5, r7
 8004232:	b98e      	cbnz	r6, 8004258 <memchr+0x78>
 8004234:	d1ee      	bne.n	8004214 <memchr+0x34>
 8004236:	bcf0      	pop	{r4, r5, r6, r7}
 8004238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800423c:	f002 0207 	and.w	r2, r2, #7
 8004240:	b132      	cbz	r2, 8004250 <memchr+0x70>
 8004242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004246:	3a01      	subs	r2, #1
 8004248:	ea83 0301 	eor.w	r3, r3, r1
 800424c:	b113      	cbz	r3, 8004254 <memchr+0x74>
 800424e:	d1f8      	bne.n	8004242 <memchr+0x62>
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr
 8004254:	3801      	subs	r0, #1
 8004256:	4770      	bx	lr
 8004258:	2d00      	cmp	r5, #0
 800425a:	bf06      	itte	eq
 800425c:	4635      	moveq	r5, r6
 800425e:	3803      	subeq	r0, #3
 8004260:	3807      	subne	r0, #7
 8004262:	f015 0f01 	tst.w	r5, #1
 8004266:	d107      	bne.n	8004278 <memchr+0x98>
 8004268:	3001      	adds	r0, #1
 800426a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800426e:	bf02      	ittt	eq
 8004270:	3001      	addeq	r0, #1
 8004272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8004276:	3001      	addeq	r0, #1
 8004278:	bcf0      	pop	{r4, r5, r6, r7}
 800427a:	3801      	subs	r0, #1
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <__aeabi_drsub>:
 8004280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004284:	e002      	b.n	800428c <__adddf3>
 8004286:	bf00      	nop

08004288 <__aeabi_dsub>:
 8004288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800428c <__adddf3>:
 800428c:	b530      	push	{r4, r5, lr}
 800428e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004296:	ea94 0f05 	teq	r4, r5
 800429a:	bf08      	it	eq
 800429c:	ea90 0f02 	teqeq	r0, r2
 80042a0:	bf1f      	itttt	ne
 80042a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80042a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80042aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80042ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042b2:	f000 80e2 	beq.w	800447a <__adddf3+0x1ee>
 80042b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042be:	bfb8      	it	lt
 80042c0:	426d      	neglt	r5, r5
 80042c2:	dd0c      	ble.n	80042de <__adddf3+0x52>
 80042c4:	442c      	add	r4, r5
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	ea82 0000 	eor.w	r0, r2, r0
 80042d2:	ea83 0101 	eor.w	r1, r3, r1
 80042d6:	ea80 0202 	eor.w	r2, r0, r2
 80042da:	ea81 0303 	eor.w	r3, r1, r3
 80042de:	2d36      	cmp	r5, #54	@ 0x36
 80042e0:	bf88      	it	hi
 80042e2:	bd30      	pophi	{r4, r5, pc}
 80042e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80042e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80042f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042f4:	d002      	beq.n	80042fc <__adddf3+0x70>
 80042f6:	4240      	negs	r0, r0
 80042f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8004300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004308:	d002      	beq.n	8004310 <__adddf3+0x84>
 800430a:	4252      	negs	r2, r2
 800430c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004310:	ea94 0f05 	teq	r4, r5
 8004314:	f000 80a7 	beq.w	8004466 <__adddf3+0x1da>
 8004318:	f1a4 0401 	sub.w	r4, r4, #1
 800431c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004320:	db0d      	blt.n	800433e <__adddf3+0xb2>
 8004322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004326:	fa22 f205 	lsr.w	r2, r2, r5
 800432a:	1880      	adds	r0, r0, r2
 800432c:	f141 0100 	adc.w	r1, r1, #0
 8004330:	fa03 f20e 	lsl.w	r2, r3, lr
 8004334:	1880      	adds	r0, r0, r2
 8004336:	fa43 f305 	asr.w	r3, r3, r5
 800433a:	4159      	adcs	r1, r3
 800433c:	e00e      	b.n	800435c <__adddf3+0xd0>
 800433e:	f1a5 0520 	sub.w	r5, r5, #32
 8004342:	f10e 0e20 	add.w	lr, lr, #32
 8004346:	2a01      	cmp	r2, #1
 8004348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800434c:	bf28      	it	cs
 800434e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004352:	fa43 f305 	asr.w	r3, r3, r5
 8004356:	18c0      	adds	r0, r0, r3
 8004358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800435c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004360:	d507      	bpl.n	8004372 <__adddf3+0xe6>
 8004362:	f04f 0e00 	mov.w	lr, #0
 8004366:	f1dc 0c00 	rsbs	ip, ip, #0
 800436a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800436e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004376:	d31b      	bcc.n	80043b0 <__adddf3+0x124>
 8004378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800437c:	d30c      	bcc.n	8004398 <__adddf3+0x10c>
 800437e:	0849      	lsrs	r1, r1, #1
 8004380:	ea5f 0030 	movs.w	r0, r0, rrx
 8004384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004388:	f104 0401 	add.w	r4, r4, #1
 800438c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004394:	f080 809a 	bcs.w	80044cc <__adddf3+0x240>
 8004398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800439c:	bf08      	it	eq
 800439e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80043a2:	f150 0000 	adcs.w	r0, r0, #0
 80043a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80043aa:	ea41 0105 	orr.w	r1, r1, r5
 80043ae:	bd30      	pop	{r4, r5, pc}
 80043b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043b4:	4140      	adcs	r0, r0
 80043b6:	eb41 0101 	adc.w	r1, r1, r1
 80043ba:	3c01      	subs	r4, #1
 80043bc:	bf28      	it	cs
 80043be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80043c2:	d2e9      	bcs.n	8004398 <__adddf3+0x10c>
 80043c4:	f091 0f00 	teq	r1, #0
 80043c8:	bf04      	itt	eq
 80043ca:	4601      	moveq	r1, r0
 80043cc:	2000      	moveq	r0, #0
 80043ce:	fab1 f381 	clz	r3, r1
 80043d2:	bf08      	it	eq
 80043d4:	3320      	addeq	r3, #32
 80043d6:	f1a3 030b 	sub.w	r3, r3, #11
 80043da:	f1b3 0220 	subs.w	r2, r3, #32
 80043de:	da0c      	bge.n	80043fa <__adddf3+0x16e>
 80043e0:	320c      	adds	r2, #12
 80043e2:	dd08      	ble.n	80043f6 <__adddf3+0x16a>
 80043e4:	f102 0c14 	add.w	ip, r2, #20
 80043e8:	f1c2 020c 	rsb	r2, r2, #12
 80043ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80043f0:	fa21 f102 	lsr.w	r1, r1, r2
 80043f4:	e00c      	b.n	8004410 <__adddf3+0x184>
 80043f6:	f102 0214 	add.w	r2, r2, #20
 80043fa:	bfd8      	it	le
 80043fc:	f1c2 0c20 	rsble	ip, r2, #32
 8004400:	fa01 f102 	lsl.w	r1, r1, r2
 8004404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004408:	bfdc      	itt	le
 800440a:	ea41 010c 	orrle.w	r1, r1, ip
 800440e:	4090      	lslle	r0, r2
 8004410:	1ae4      	subs	r4, r4, r3
 8004412:	bfa2      	ittt	ge
 8004414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004418:	4329      	orrge	r1, r5
 800441a:	bd30      	popge	{r4, r5, pc}
 800441c:	ea6f 0404 	mvn.w	r4, r4
 8004420:	3c1f      	subs	r4, #31
 8004422:	da1c      	bge.n	800445e <__adddf3+0x1d2>
 8004424:	340c      	adds	r4, #12
 8004426:	dc0e      	bgt.n	8004446 <__adddf3+0x1ba>
 8004428:	f104 0414 	add.w	r4, r4, #20
 800442c:	f1c4 0220 	rsb	r2, r4, #32
 8004430:	fa20 f004 	lsr.w	r0, r0, r4
 8004434:	fa01 f302 	lsl.w	r3, r1, r2
 8004438:	ea40 0003 	orr.w	r0, r0, r3
 800443c:	fa21 f304 	lsr.w	r3, r1, r4
 8004440:	ea45 0103 	orr.w	r1, r5, r3
 8004444:	bd30      	pop	{r4, r5, pc}
 8004446:	f1c4 040c 	rsb	r4, r4, #12
 800444a:	f1c4 0220 	rsb	r2, r4, #32
 800444e:	fa20 f002 	lsr.w	r0, r0, r2
 8004452:	fa01 f304 	lsl.w	r3, r1, r4
 8004456:	ea40 0003 	orr.w	r0, r0, r3
 800445a:	4629      	mov	r1, r5
 800445c:	bd30      	pop	{r4, r5, pc}
 800445e:	fa21 f004 	lsr.w	r0, r1, r4
 8004462:	4629      	mov	r1, r5
 8004464:	bd30      	pop	{r4, r5, pc}
 8004466:	f094 0f00 	teq	r4, #0
 800446a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800446e:	bf06      	itte	eq
 8004470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004474:	3401      	addeq	r4, #1
 8004476:	3d01      	subne	r5, #1
 8004478:	e74e      	b.n	8004318 <__adddf3+0x8c>
 800447a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800447e:	bf18      	it	ne
 8004480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004484:	d029      	beq.n	80044da <__adddf3+0x24e>
 8004486:	ea94 0f05 	teq	r4, r5
 800448a:	bf08      	it	eq
 800448c:	ea90 0f02 	teqeq	r0, r2
 8004490:	d005      	beq.n	800449e <__adddf3+0x212>
 8004492:	ea54 0c00 	orrs.w	ip, r4, r0
 8004496:	bf04      	itt	eq
 8004498:	4619      	moveq	r1, r3
 800449a:	4610      	moveq	r0, r2
 800449c:	bd30      	pop	{r4, r5, pc}
 800449e:	ea91 0f03 	teq	r1, r3
 80044a2:	bf1e      	ittt	ne
 80044a4:	2100      	movne	r1, #0
 80044a6:	2000      	movne	r0, #0
 80044a8:	bd30      	popne	{r4, r5, pc}
 80044aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80044ae:	d105      	bne.n	80044bc <__adddf3+0x230>
 80044b0:	0040      	lsls	r0, r0, #1
 80044b2:	4149      	adcs	r1, r1
 80044b4:	bf28      	it	cs
 80044b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80044c0:	bf3c      	itt	cc
 80044c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80044c6:	bd30      	popcc	{r4, r5, pc}
 80044c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80044cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80044d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	bd30      	pop	{r4, r5, pc}
 80044da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044de:	bf1a      	itte	ne
 80044e0:	4619      	movne	r1, r3
 80044e2:	4610      	movne	r0, r2
 80044e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044e8:	bf1c      	itt	ne
 80044ea:	460b      	movne	r3, r1
 80044ec:	4602      	movne	r2, r0
 80044ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044f2:	bf06      	itte	eq
 80044f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044f8:	ea91 0f03 	teqeq	r1, r3
 80044fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8004500:	bd30      	pop	{r4, r5, pc}
 8004502:	bf00      	nop

08004504 <__aeabi_ui2d>:
 8004504:	f090 0f00 	teq	r0, #0
 8004508:	bf04      	itt	eq
 800450a:	2100      	moveq	r1, #0
 800450c:	4770      	bxeq	lr
 800450e:	b530      	push	{r4, r5, lr}
 8004510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004518:	f04f 0500 	mov.w	r5, #0
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	e750      	b.n	80043c4 <__adddf3+0x138>
 8004522:	bf00      	nop

08004524 <__aeabi_i2d>:
 8004524:	f090 0f00 	teq	r0, #0
 8004528:	bf04      	itt	eq
 800452a:	2100      	moveq	r1, #0
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800453c:	bf48      	it	mi
 800453e:	4240      	negmi	r0, r0
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	e73e      	b.n	80043c4 <__adddf3+0x138>
 8004546:	bf00      	nop

08004548 <__aeabi_f2d>:
 8004548:	0042      	lsls	r2, r0, #1
 800454a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800454e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004556:	bf1f      	itttt	ne
 8004558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800455c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004564:	4770      	bxne	lr
 8004566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800456a:	bf08      	it	eq
 800456c:	4770      	bxeq	lr
 800456e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004572:	bf04      	itt	eq
 8004574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004578:	4770      	bxeq	lr
 800457a:	b530      	push	{r4, r5, lr}
 800457c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004588:	e71c      	b.n	80043c4 <__adddf3+0x138>
 800458a:	bf00      	nop

0800458c <__aeabi_ul2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f04f 0500 	mov.w	r5, #0
 800459a:	e00a      	b.n	80045b2 <__aeabi_l2d+0x16>

0800459c <__aeabi_l2d>:
 800459c:	ea50 0201 	orrs.w	r2, r0, r1
 80045a0:	bf08      	it	eq
 80045a2:	4770      	bxeq	lr
 80045a4:	b530      	push	{r4, r5, lr}
 80045a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80045aa:	d502      	bpl.n	80045b2 <__aeabi_l2d+0x16>
 80045ac:	4240      	negs	r0, r0
 80045ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80045b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80045ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045be:	f43f aed8 	beq.w	8004372 <__adddf3+0xe6>
 80045c2:	f04f 0203 	mov.w	r2, #3
 80045c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ca:	bf18      	it	ne
 80045cc:	3203      	addne	r2, #3
 80045ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045d2:	bf18      	it	ne
 80045d4:	3203      	addne	r2, #3
 80045d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045da:	f1c2 0320 	rsb	r3, r2, #32
 80045de:	fa00 fc03 	lsl.w	ip, r0, r3
 80045e2:	fa20 f002 	lsr.w	r0, r0, r2
 80045e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045ea:	ea40 000e 	orr.w	r0, r0, lr
 80045ee:	fa21 f102 	lsr.w	r1, r1, r2
 80045f2:	4414      	add	r4, r2
 80045f4:	e6bd      	b.n	8004372 <__adddf3+0xe6>
 80045f6:	bf00      	nop

080045f8 <__aeabi_dmul>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80045fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004606:	bf1d      	ittte	ne
 8004608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800460c:	ea94 0f0c 	teqne	r4, ip
 8004610:	ea95 0f0c 	teqne	r5, ip
 8004614:	f000 f8de 	bleq	80047d4 <__aeabi_dmul+0x1dc>
 8004618:	442c      	add	r4, r5
 800461a:	ea81 0603 	eor.w	r6, r1, r3
 800461e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800462a:	bf18      	it	ne
 800462c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004638:	d038      	beq.n	80046ac <__aeabi_dmul+0xb4>
 800463a:	fba0 ce02 	umull	ip, lr, r0, r2
 800463e:	f04f 0500 	mov.w	r5, #0
 8004642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800464a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800464e:	f04f 0600 	mov.w	r6, #0
 8004652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004656:	f09c 0f00 	teq	ip, #0
 800465a:	bf18      	it	ne
 800465c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800466c:	d204      	bcs.n	8004678 <__aeabi_dmul+0x80>
 800466e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004672:	416d      	adcs	r5, r5
 8004674:	eb46 0606 	adc.w	r6, r6, r6
 8004678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800467c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800468c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004690:	bf88      	it	hi
 8004692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004696:	d81e      	bhi.n	80046d6 <__aeabi_dmul+0xde>
 8004698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800469c:	bf08      	it	eq
 800469e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80046a2:	f150 0000 	adcs.w	r0, r0, #0
 80046a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80046b0:	ea46 0101 	orr.w	r1, r6, r1
 80046b4:	ea40 0002 	orr.w	r0, r0, r2
 80046b8:	ea81 0103 	eor.w	r1, r1, r3
 80046bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046c0:	bfc2      	ittt	gt
 80046c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ca:	bd70      	popgt	{r4, r5, r6, pc}
 80046cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80046d0:	f04f 0e00 	mov.w	lr, #0
 80046d4:	3c01      	subs	r4, #1
 80046d6:	f300 80ab 	bgt.w	8004830 <__aeabi_dmul+0x238>
 80046da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80046de:	bfde      	ittt	le
 80046e0:	2000      	movle	r0, #0
 80046e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80046e6:	bd70      	pople	{r4, r5, r6, pc}
 80046e8:	f1c4 0400 	rsb	r4, r4, #0
 80046ec:	3c20      	subs	r4, #32
 80046ee:	da35      	bge.n	800475c <__aeabi_dmul+0x164>
 80046f0:	340c      	adds	r4, #12
 80046f2:	dc1b      	bgt.n	800472c <__aeabi_dmul+0x134>
 80046f4:	f104 0414 	add.w	r4, r4, #20
 80046f8:	f1c4 0520 	rsb	r5, r4, #32
 80046fc:	fa00 f305 	lsl.w	r3, r0, r5
 8004700:	fa20 f004 	lsr.w	r0, r0, r4
 8004704:	fa01 f205 	lsl.w	r2, r1, r5
 8004708:	ea40 0002 	orr.w	r0, r0, r2
 800470c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8004710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004718:	fa21 f604 	lsr.w	r6, r1, r4
 800471c:	eb42 0106 	adc.w	r1, r2, r6
 8004720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004724:	bf08      	it	eq
 8004726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	f1c4 040c 	rsb	r4, r4, #12
 8004730:	f1c4 0520 	rsb	r5, r4, #32
 8004734:	fa00 f304 	lsl.w	r3, r0, r4
 8004738:	fa20 f005 	lsr.w	r0, r0, r5
 800473c:	fa01 f204 	lsl.w	r2, r1, r4
 8004740:	ea40 0002 	orr.w	r0, r0, r2
 8004744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800474c:	f141 0100 	adc.w	r1, r1, #0
 8004750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004754:	bf08      	it	eq
 8004756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	f1c4 0520 	rsb	r5, r4, #32
 8004760:	fa00 f205 	lsl.w	r2, r0, r5
 8004764:	ea4e 0e02 	orr.w	lr, lr, r2
 8004768:	fa20 f304 	lsr.w	r3, r0, r4
 800476c:	fa01 f205 	lsl.w	r2, r1, r5
 8004770:	ea43 0302 	orr.w	r3, r3, r2
 8004774:	fa21 f004 	lsr.w	r0, r1, r4
 8004778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800477c:	fa21 f204 	lsr.w	r2, r1, r4
 8004780:	ea20 0002 	bic.w	r0, r0, r2
 8004784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800478c:	bf08      	it	eq
 800478e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f094 0f00 	teq	r4, #0
 8004798:	d10f      	bne.n	80047ba <__aeabi_dmul+0x1c2>
 800479a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800479e:	0040      	lsls	r0, r0, #1
 80047a0:	eb41 0101 	adc.w	r1, r1, r1
 80047a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80047a8:	bf08      	it	eq
 80047aa:	3c01      	subeq	r4, #1
 80047ac:	d0f7      	beq.n	800479e <__aeabi_dmul+0x1a6>
 80047ae:	ea41 0106 	orr.w	r1, r1, r6
 80047b2:	f095 0f00 	teq	r5, #0
 80047b6:	bf18      	it	ne
 80047b8:	4770      	bxne	lr
 80047ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80047be:	0052      	lsls	r2, r2, #1
 80047c0:	eb43 0303 	adc.w	r3, r3, r3
 80047c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80047c8:	bf08      	it	eq
 80047ca:	3d01      	subeq	r5, #1
 80047cc:	d0f7      	beq.n	80047be <__aeabi_dmul+0x1c6>
 80047ce:	ea43 0306 	orr.w	r3, r3, r6
 80047d2:	4770      	bx	lr
 80047d4:	ea94 0f0c 	teq	r4, ip
 80047d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047dc:	bf18      	it	ne
 80047de:	ea95 0f0c 	teqne	r5, ip
 80047e2:	d00c      	beq.n	80047fe <__aeabi_dmul+0x206>
 80047e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047e8:	bf18      	it	ne
 80047ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047ee:	d1d1      	bne.n	8004794 <__aeabi_dmul+0x19c>
 80047f0:	ea81 0103 	eor.w	r1, r1, r3
 80047f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80047f8:	f04f 0000 	mov.w	r0, #0
 80047fc:	bd70      	pop	{r4, r5, r6, pc}
 80047fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004802:	bf06      	itte	eq
 8004804:	4610      	moveq	r0, r2
 8004806:	4619      	moveq	r1, r3
 8004808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800480c:	d019      	beq.n	8004842 <__aeabi_dmul+0x24a>
 800480e:	ea94 0f0c 	teq	r4, ip
 8004812:	d102      	bne.n	800481a <__aeabi_dmul+0x222>
 8004814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004818:	d113      	bne.n	8004842 <__aeabi_dmul+0x24a>
 800481a:	ea95 0f0c 	teq	r5, ip
 800481e:	d105      	bne.n	800482c <__aeabi_dmul+0x234>
 8004820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004824:	bf1c      	itt	ne
 8004826:	4610      	movne	r0, r2
 8004828:	4619      	movne	r1, r3
 800482a:	d10a      	bne.n	8004842 <__aeabi_dmul+0x24a>
 800482c:	ea81 0103 	eor.w	r1, r1, r3
 8004830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800483c:	f04f 0000 	mov.w	r0, #0
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800484a:	bd70      	pop	{r4, r5, r6, pc}

0800484c <__aeabi_ddiv>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800485a:	bf1d      	ittte	ne
 800485c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004860:	ea94 0f0c 	teqne	r4, ip
 8004864:	ea95 0f0c 	teqne	r5, ip
 8004868:	f000 f8a7 	bleq	80049ba <__aeabi_ddiv+0x16e>
 800486c:	eba4 0405 	sub.w	r4, r4, r5
 8004870:	ea81 0e03 	eor.w	lr, r1, r3
 8004874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800487c:	f000 8088 	beq.w	8004990 <__aeabi_ddiv+0x144>
 8004880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800488c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800489c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80048a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80048a4:	429d      	cmp	r5, r3
 80048a6:	bf08      	it	eq
 80048a8:	4296      	cmpeq	r6, r2
 80048aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80048ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80048b2:	d202      	bcs.n	80048ba <__aeabi_ddiv+0x6e>
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ba:	1ab6      	subs	r6, r6, r2
 80048bc:	eb65 0503 	sbc.w	r5, r5, r3
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80048ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80048ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80048d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048d6:	bf22      	ittt	cs
 80048d8:	1ab6      	subcs	r6, r6, r2
 80048da:	4675      	movcs	r5, lr
 80048dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ee:	bf22      	ittt	cs
 80048f0:	1ab6      	subcs	r6, r6, r2
 80048f2:	4675      	movcs	r5, lr
 80048f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80048fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8004902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004906:	bf22      	ittt	cs
 8004908:	1ab6      	subcs	r6, r6, r2
 800490a:	4675      	movcs	r5, lr
 800490c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	ea4f 0232 	mov.w	r2, r2, rrx
 8004916:	ebb6 0e02 	subs.w	lr, r6, r2
 800491a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800491e:	bf22      	ittt	cs
 8004920:	1ab6      	subcs	r6, r6, r2
 8004922:	4675      	movcs	r5, lr
 8004924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004928:	ea55 0e06 	orrs.w	lr, r5, r6
 800492c:	d018      	beq.n	8004960 <__aeabi_ddiv+0x114>
 800492e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800493a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800493e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800494a:	d1c0      	bne.n	80048ce <__aeabi_ddiv+0x82>
 800494c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004950:	d10b      	bne.n	800496a <__aeabi_ddiv+0x11e>
 8004952:	ea41 0100 	orr.w	r1, r1, r0
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800495e:	e7b6      	b.n	80048ce <__aeabi_ddiv+0x82>
 8004960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004964:	bf04      	itt	eq
 8004966:	4301      	orreq	r1, r0
 8004968:	2000      	moveq	r0, #0
 800496a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800496e:	bf88      	it	hi
 8004970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004974:	f63f aeaf 	bhi.w	80046d6 <__aeabi_dmul+0xde>
 8004978:	ebb5 0c03 	subs.w	ip, r5, r3
 800497c:	bf04      	itt	eq
 800497e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004986:	f150 0000 	adcs.w	r0, r0, #0
 800498a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800499c:	bfc2      	ittt	gt
 800499e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80049a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80049a6:	bd70      	popgt	{r4, r5, r6, pc}
 80049a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80049ac:	f04f 0e00 	mov.w	lr, #0
 80049b0:	3c01      	subs	r4, #1
 80049b2:	e690      	b.n	80046d6 <__aeabi_dmul+0xde>
 80049b4:	ea45 0e06 	orr.w	lr, r5, r6
 80049b8:	e68d      	b.n	80046d6 <__aeabi_dmul+0xde>
 80049ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049be:	ea94 0f0c 	teq	r4, ip
 80049c2:	bf08      	it	eq
 80049c4:	ea95 0f0c 	teqeq	r5, ip
 80049c8:	f43f af3b 	beq.w	8004842 <__aeabi_dmul+0x24a>
 80049cc:	ea94 0f0c 	teq	r4, ip
 80049d0:	d10a      	bne.n	80049e8 <__aeabi_ddiv+0x19c>
 80049d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049d6:	f47f af34 	bne.w	8004842 <__aeabi_dmul+0x24a>
 80049da:	ea95 0f0c 	teq	r5, ip
 80049de:	f47f af25 	bne.w	800482c <__aeabi_dmul+0x234>
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	e72c      	b.n	8004842 <__aeabi_dmul+0x24a>
 80049e8:	ea95 0f0c 	teq	r5, ip
 80049ec:	d106      	bne.n	80049fc <__aeabi_ddiv+0x1b0>
 80049ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049f2:	f43f aefd 	beq.w	80047f0 <__aeabi_dmul+0x1f8>
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	e722      	b.n	8004842 <__aeabi_dmul+0x24a>
 80049fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004a00:	bf18      	it	ne
 8004a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004a06:	f47f aec5 	bne.w	8004794 <__aeabi_dmul+0x19c>
 8004a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8004a0e:	f47f af0d 	bne.w	800482c <__aeabi_dmul+0x234>
 8004a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a16:	f47f aeeb 	bne.w	80047f0 <__aeabi_dmul+0x1f8>
 8004a1a:	e712      	b.n	8004842 <__aeabi_dmul+0x24a>

08004a1c <__gedf2>:
 8004a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a20:	e006      	b.n	8004a30 <__cmpdf2+0x4>
 8004a22:	bf00      	nop

08004a24 <__ledf2>:
 8004a24:	f04f 0c01 	mov.w	ip, #1
 8004a28:	e002      	b.n	8004a30 <__cmpdf2+0x4>
 8004a2a:	bf00      	nop

08004a2c <__cmpdf2>:
 8004a2c:	f04f 0c01 	mov.w	ip, #1
 8004a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a40:	bf18      	it	ne
 8004a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a46:	d01b      	beq.n	8004a80 <__cmpdf2+0x54>
 8004a48:	b001      	add	sp, #4
 8004a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a4e:	bf0c      	ite	eq
 8004a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a54:	ea91 0f03 	teqne	r1, r3
 8004a58:	bf02      	ittt	eq
 8004a5a:	ea90 0f02 	teqeq	r0, r2
 8004a5e:	2000      	moveq	r0, #0
 8004a60:	4770      	bxeq	lr
 8004a62:	f110 0f00 	cmn.w	r0, #0
 8004a66:	ea91 0f03 	teq	r1, r3
 8004a6a:	bf58      	it	pl
 8004a6c:	4299      	cmppl	r1, r3
 8004a6e:	bf08      	it	eq
 8004a70:	4290      	cmpeq	r0, r2
 8004a72:	bf2c      	ite	cs
 8004a74:	17d8      	asrcs	r0, r3, #31
 8004a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a7a:	f040 0001 	orr.w	r0, r0, #1
 8004a7e:	4770      	bx	lr
 8004a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a88:	d102      	bne.n	8004a90 <__cmpdf2+0x64>
 8004a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a8e:	d107      	bne.n	8004aa0 <__cmpdf2+0x74>
 8004a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a98:	d1d6      	bne.n	8004a48 <__cmpdf2+0x1c>
 8004a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a9e:	d0d3      	beq.n	8004a48 <__cmpdf2+0x1c>
 8004aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_cdrcmple>:
 8004aa8:	4684      	mov	ip, r0
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4662      	mov	r2, ip
 8004aae:	468c      	mov	ip, r1
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4663      	mov	r3, ip
 8004ab4:	e000      	b.n	8004ab8 <__aeabi_cdcmpeq>
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_cdcmpeq>:
 8004ab8:	b501      	push	{r0, lr}
 8004aba:	f7ff ffb7 	bl	8004a2c <__cmpdf2>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	bf48      	it	mi
 8004ac2:	f110 0f00 	cmnmi.w	r0, #0
 8004ac6:	bd01      	pop	{r0, pc}

08004ac8 <__aeabi_dcmpeq>:
 8004ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004acc:	f7ff fff4 	bl	8004ab8 <__aeabi_cdcmpeq>
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2001      	moveq	r0, #1
 8004ad4:	2000      	movne	r0, #0
 8004ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ada:	bf00      	nop

08004adc <__aeabi_dcmplt>:
 8004adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae0:	f7ff ffea 	bl	8004ab8 <__aeabi_cdcmpeq>
 8004ae4:	bf34      	ite	cc
 8004ae6:	2001      	movcc	r0, #1
 8004ae8:	2000      	movcs	r0, #0
 8004aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aee:	bf00      	nop

08004af0 <__aeabi_dcmple>:
 8004af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004af4:	f7ff ffe0 	bl	8004ab8 <__aeabi_cdcmpeq>
 8004af8:	bf94      	ite	ls
 8004afa:	2001      	movls	r0, #1
 8004afc:	2000      	movhi	r0, #0
 8004afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b02:	bf00      	nop

08004b04 <__aeabi_dcmpge>:
 8004b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b08:	f7ff ffce 	bl	8004aa8 <__aeabi_cdrcmple>
 8004b0c:	bf94      	ite	ls
 8004b0e:	2001      	movls	r0, #1
 8004b10:	2000      	movhi	r0, #0
 8004b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b16:	bf00      	nop

08004b18 <__aeabi_dcmpgt>:
 8004b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b1c:	f7ff ffc4 	bl	8004aa8 <__aeabi_cdrcmple>
 8004b20:	bf34      	ite	cc
 8004b22:	2001      	movcc	r0, #1
 8004b24:	2000      	movcs	r0, #0
 8004b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b2a:	bf00      	nop

08004b2c <__aeabi_dcmpun>:
 8004b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b34:	d102      	bne.n	8004b3c <__aeabi_dcmpun+0x10>
 8004b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004b3a:	d10a      	bne.n	8004b52 <__aeabi_dcmpun+0x26>
 8004b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b44:	d102      	bne.n	8004b4c <__aeabi_dcmpun+0x20>
 8004b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b4a:	d102      	bne.n	8004b52 <__aeabi_dcmpun+0x26>
 8004b4c:	f04f 0000 	mov.w	r0, #0
 8004b50:	4770      	bx	lr
 8004b52:	f04f 0001 	mov.w	r0, #1
 8004b56:	4770      	bx	lr

08004b58 <__aeabi_d2iz>:
 8004b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8004b60:	d215      	bcs.n	8004b8e <__aeabi_d2iz+0x36>
 8004b62:	d511      	bpl.n	8004b88 <__aeabi_d2iz+0x30>
 8004b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8004b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b6c:	d912      	bls.n	8004b94 <__aeabi_d2iz+0x3c>
 8004b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8004b82:	bf18      	it	ne
 8004b84:	4240      	negne	r0, r0
 8004b86:	4770      	bx	lr
 8004b88:	f04f 0000 	mov.w	r0, #0
 8004b8c:	4770      	bx	lr
 8004b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004b92:	d105      	bne.n	8004ba0 <__aeabi_d2iz+0x48>
 8004b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004b98:	bf08      	it	eq
 8004b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004b9e:	4770      	bx	lr
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <__aeabi_uldivmod>:
 8004ba8:	b953      	cbnz	r3, 8004bc0 <__aeabi_uldivmod+0x18>
 8004baa:	b94a      	cbnz	r2, 8004bc0 <__aeabi_uldivmod+0x18>
 8004bac:	2900      	cmp	r1, #0
 8004bae:	bf08      	it	eq
 8004bb0:	2800      	cmpeq	r0, #0
 8004bb2:	bf1c      	itt	ne
 8004bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8004bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8004bbc:	f000 b96a 	b.w	8004e94 <__aeabi_idiv0>
 8004bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bc8:	f000 f806 	bl	8004bd8 <__udivmoddi4>
 8004bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd4:	b004      	add	sp, #16
 8004bd6:	4770      	bx	lr

08004bd8 <__udivmoddi4>:
 8004bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	9d08      	ldr	r5, [sp, #32]
 8004bde:	460c      	mov	r4, r1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d14e      	bne.n	8004c82 <__udivmoddi4+0xaa>
 8004be4:	4694      	mov	ip, r2
 8004be6:	458c      	cmp	ip, r1
 8004be8:	4686      	mov	lr, r0
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	d962      	bls.n	8004cb6 <__udivmoddi4+0xde>
 8004bf0:	b14a      	cbz	r2, 8004c06 <__udivmoddi4+0x2e>
 8004bf2:	f1c2 0320 	rsb	r3, r2, #32
 8004bf6:	4091      	lsls	r1, r2
 8004bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8004bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c00:	4319      	orrs	r1, r3
 8004c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8004c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004c0a:	fa1f f68c 	uxth.w	r6, ip
 8004c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8004c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004c16:	fb07 1114 	mls	r1, r7, r4, r1
 8004c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c1e:	fb04 f106 	mul.w	r1, r4, r6
 8004c22:	4299      	cmp	r1, r3
 8004c24:	d90a      	bls.n	8004c3c <__udivmoddi4+0x64>
 8004c26:	eb1c 0303 	adds.w	r3, ip, r3
 8004c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8004c2e:	f080 8112 	bcs.w	8004e56 <__udivmoddi4+0x27e>
 8004c32:	4299      	cmp	r1, r3
 8004c34:	f240 810f 	bls.w	8004e56 <__udivmoddi4+0x27e>
 8004c38:	3c02      	subs	r4, #2
 8004c3a:	4463      	add	r3, ip
 8004c3c:	1a59      	subs	r1, r3, r1
 8004c3e:	fa1f f38e 	uxth.w	r3, lr
 8004c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8004c46:	fb07 1110 	mls	r1, r7, r0, r1
 8004c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c4e:	fb00 f606 	mul.w	r6, r0, r6
 8004c52:	429e      	cmp	r6, r3
 8004c54:	d90a      	bls.n	8004c6c <__udivmoddi4+0x94>
 8004c56:	eb1c 0303 	adds.w	r3, ip, r3
 8004c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8004c5e:	f080 80fc 	bcs.w	8004e5a <__udivmoddi4+0x282>
 8004c62:	429e      	cmp	r6, r3
 8004c64:	f240 80f9 	bls.w	8004e5a <__udivmoddi4+0x282>
 8004c68:	4463      	add	r3, ip
 8004c6a:	3802      	subs	r0, #2
 8004c6c:	1b9b      	subs	r3, r3, r6
 8004c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8004c72:	2100      	movs	r1, #0
 8004c74:	b11d      	cbz	r5, 8004c7e <__udivmoddi4+0xa6>
 8004c76:	40d3      	lsrs	r3, r2
 8004c78:	2200      	movs	r2, #0
 8004c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d905      	bls.n	8004c92 <__udivmoddi4+0xba>
 8004c86:	b10d      	cbz	r5, 8004c8c <__udivmoddi4+0xb4>
 8004c88:	e9c5 0100 	strd	r0, r1, [r5]
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4608      	mov	r0, r1
 8004c90:	e7f5      	b.n	8004c7e <__udivmoddi4+0xa6>
 8004c92:	fab3 f183 	clz	r1, r3
 8004c96:	2900      	cmp	r1, #0
 8004c98:	d146      	bne.n	8004d28 <__udivmoddi4+0x150>
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	d302      	bcc.n	8004ca4 <__udivmoddi4+0xcc>
 8004c9e:	4290      	cmp	r0, r2
 8004ca0:	f0c0 80f0 	bcc.w	8004e84 <__udivmoddi4+0x2ac>
 8004ca4:	1a86      	subs	r6, r0, r2
 8004ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8004caa:	2001      	movs	r0, #1
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	d0e6      	beq.n	8004c7e <__udivmoddi4+0xa6>
 8004cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8004cb4:	e7e3      	b.n	8004c7e <__udivmoddi4+0xa6>
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	f040 8090 	bne.w	8004ddc <__udivmoddi4+0x204>
 8004cbc:	eba1 040c 	sub.w	r4, r1, ip
 8004cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004cc4:	fa1f f78c 	uxth.w	r7, ip
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8004cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8004cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004cda:	fb07 f006 	mul.w	r0, r7, r6
 8004cde:	4298      	cmp	r0, r3
 8004ce0:	d908      	bls.n	8004cf4 <__udivmoddi4+0x11c>
 8004ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8004ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8004cea:	d202      	bcs.n	8004cf2 <__udivmoddi4+0x11a>
 8004cec:	4298      	cmp	r0, r3
 8004cee:	f200 80cd 	bhi.w	8004e8c <__udivmoddi4+0x2b4>
 8004cf2:	4626      	mov	r6, r4
 8004cf4:	1a1c      	subs	r4, r3, r0
 8004cf6:	fa1f f38e 	uxth.w	r3, lr
 8004cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8004cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8004d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004d06:	fb00 f707 	mul.w	r7, r0, r7
 8004d0a:	429f      	cmp	r7, r3
 8004d0c:	d908      	bls.n	8004d20 <__udivmoddi4+0x148>
 8004d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8004d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8004d16:	d202      	bcs.n	8004d1e <__udivmoddi4+0x146>
 8004d18:	429f      	cmp	r7, r3
 8004d1a:	f200 80b0 	bhi.w	8004e7e <__udivmoddi4+0x2a6>
 8004d1e:	4620      	mov	r0, r4
 8004d20:	1bdb      	subs	r3, r3, r7
 8004d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004d26:	e7a5      	b.n	8004c74 <__udivmoddi4+0x9c>
 8004d28:	f1c1 0620 	rsb	r6, r1, #32
 8004d2c:	408b      	lsls	r3, r1
 8004d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8004d32:	431f      	orrs	r7, r3
 8004d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8004d38:	fa04 f301 	lsl.w	r3, r4, r1
 8004d3c:	ea43 030c 	orr.w	r3, r3, ip
 8004d40:	40f4      	lsrs	r4, r6
 8004d42:	fa00 f801 	lsl.w	r8, r0, r1
 8004d46:	0c38      	lsrs	r0, r7, #16
 8004d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8004d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8004d50:	fa1f fc87 	uxth.w	ip, r7
 8004d54:	fb00 441e 	mls	r4, r0, lr, r4
 8004d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8004d60:	45a1      	cmp	r9, r4
 8004d62:	fa02 f201 	lsl.w	r2, r2, r1
 8004d66:	d90a      	bls.n	8004d7e <__udivmoddi4+0x1a6>
 8004d68:	193c      	adds	r4, r7, r4
 8004d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8004d6e:	f080 8084 	bcs.w	8004e7a <__udivmoddi4+0x2a2>
 8004d72:	45a1      	cmp	r9, r4
 8004d74:	f240 8081 	bls.w	8004e7a <__udivmoddi4+0x2a2>
 8004d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8004d7c:	443c      	add	r4, r7
 8004d7e:	eba4 0409 	sub.w	r4, r4, r9
 8004d82:	fa1f f983 	uxth.w	r9, r3
 8004d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8004d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8004d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8004d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8004d96:	45a4      	cmp	ip, r4
 8004d98:	d907      	bls.n	8004daa <__udivmoddi4+0x1d2>
 8004d9a:	193c      	adds	r4, r7, r4
 8004d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8004da0:	d267      	bcs.n	8004e72 <__udivmoddi4+0x29a>
 8004da2:	45a4      	cmp	ip, r4
 8004da4:	d965      	bls.n	8004e72 <__udivmoddi4+0x29a>
 8004da6:	3b02      	subs	r3, #2
 8004da8:	443c      	add	r4, r7
 8004daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8004dae:	fba0 9302 	umull	r9, r3, r0, r2
 8004db2:	eba4 040c 	sub.w	r4, r4, ip
 8004db6:	429c      	cmp	r4, r3
 8004db8:	46ce      	mov	lr, r9
 8004dba:	469c      	mov	ip, r3
 8004dbc:	d351      	bcc.n	8004e62 <__udivmoddi4+0x28a>
 8004dbe:	d04e      	beq.n	8004e5e <__udivmoddi4+0x286>
 8004dc0:	b155      	cbz	r5, 8004dd8 <__udivmoddi4+0x200>
 8004dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8004dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8004dca:	fa04 f606 	lsl.w	r6, r4, r6
 8004dce:	40cb      	lsrs	r3, r1
 8004dd0:	431e      	orrs	r6, r3
 8004dd2:	40cc      	lsrs	r4, r1
 8004dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	e750      	b.n	8004c7e <__udivmoddi4+0xa6>
 8004ddc:	f1c2 0320 	rsb	r3, r2, #32
 8004de0:	fa20 f103 	lsr.w	r1, r0, r3
 8004de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8004de8:	fa24 f303 	lsr.w	r3, r4, r3
 8004dec:	4094      	lsls	r4, r2
 8004dee:	430c      	orrs	r4, r1
 8004df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8004df8:	fa1f f78c 	uxth.w	r7, ip
 8004dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8004e00:	fb08 3110 	mls	r1, r8, r0, r3
 8004e04:	0c23      	lsrs	r3, r4, #16
 8004e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004e0a:	fb00 f107 	mul.w	r1, r0, r7
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	d908      	bls.n	8004e24 <__udivmoddi4+0x24c>
 8004e12:	eb1c 0303 	adds.w	r3, ip, r3
 8004e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8004e1a:	d22c      	bcs.n	8004e76 <__udivmoddi4+0x29e>
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	d92a      	bls.n	8004e76 <__udivmoddi4+0x29e>
 8004e20:	3802      	subs	r0, #2
 8004e22:	4463      	add	r3, ip
 8004e24:	1a5b      	subs	r3, r3, r1
 8004e26:	b2a4      	uxth	r4, r4
 8004e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8004e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8004e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004e34:	fb01 f307 	mul.w	r3, r1, r7
 8004e38:	42a3      	cmp	r3, r4
 8004e3a:	d908      	bls.n	8004e4e <__udivmoddi4+0x276>
 8004e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8004e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8004e44:	d213      	bcs.n	8004e6e <__udivmoddi4+0x296>
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d911      	bls.n	8004e6e <__udivmoddi4+0x296>
 8004e4a:	3902      	subs	r1, #2
 8004e4c:	4464      	add	r4, ip
 8004e4e:	1ae4      	subs	r4, r4, r3
 8004e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004e54:	e739      	b.n	8004cca <__udivmoddi4+0xf2>
 8004e56:	4604      	mov	r4, r0
 8004e58:	e6f0      	b.n	8004c3c <__udivmoddi4+0x64>
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	e706      	b.n	8004c6c <__udivmoddi4+0x94>
 8004e5e:	45c8      	cmp	r8, r9
 8004e60:	d2ae      	bcs.n	8004dc0 <__udivmoddi4+0x1e8>
 8004e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8004e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8004e6a:	3801      	subs	r0, #1
 8004e6c:	e7a8      	b.n	8004dc0 <__udivmoddi4+0x1e8>
 8004e6e:	4631      	mov	r1, r6
 8004e70:	e7ed      	b.n	8004e4e <__udivmoddi4+0x276>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e799      	b.n	8004daa <__udivmoddi4+0x1d2>
 8004e76:	4630      	mov	r0, r6
 8004e78:	e7d4      	b.n	8004e24 <__udivmoddi4+0x24c>
 8004e7a:	46d6      	mov	lr, sl
 8004e7c:	e77f      	b.n	8004d7e <__udivmoddi4+0x1a6>
 8004e7e:	4463      	add	r3, ip
 8004e80:	3802      	subs	r0, #2
 8004e82:	e74d      	b.n	8004d20 <__udivmoddi4+0x148>
 8004e84:	4606      	mov	r6, r0
 8004e86:	4623      	mov	r3, r4
 8004e88:	4608      	mov	r0, r1
 8004e8a:	e70f      	b.n	8004cac <__udivmoddi4+0xd4>
 8004e8c:	3e02      	subs	r6, #2
 8004e8e:	4463      	add	r3, ip
 8004e90:	e730      	b.n	8004cf4 <__udivmoddi4+0x11c>
 8004e92:	bf00      	nop

08004e94 <__aeabi_idiv0>:
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <HAL_FSMC_MspInit+0x98>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d139      	bne.n	8004f28 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_FSMC_MspInit+0x98>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <HAL_FSMC_MspInit+0x9c>)
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f34 <HAL_FSMC_MspInit+0x9c>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6393      	str	r3, [r2, #56]	@ 0x38
 8004eca:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <HAL_FSMC_MspInit+0x9c>)
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004ed6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8004eda:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	2302      	movs	r3, #2
 8004ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004ee8:	230c      	movs	r3, #12
 8004eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4811      	ldr	r0, [pc, #68]	@ (8004f38 <HAL_FSMC_MspInit+0xa0>)
 8004ef2:	f001 fa13 	bl	800631c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004ef6:	f64d 73f3 	movw	r3, #57331	@ 0xdff3
 8004efa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efc:	2302      	movs	r3, #2
 8004efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f04:	2303      	movs	r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004f08:	230c      	movs	r3, #12
 8004f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	4619      	mov	r1, r3
 8004f10:	480a      	ldr	r0, [pc, #40]	@ (8004f3c <HAL_FSMC_MspInit+0xa4>)
 8004f12:	f001 fa03 	bl	800631c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8004f16:	2200      	movs	r2, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2030      	movs	r0, #48	@ 0x30
 8004f1c:	f000 fe4f 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004f20:	2030      	movs	r0, #48	@ 0x30
 8004f22:	f000 fe68 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
 8004f26:	e000      	b.n	8004f2a <HAL_FSMC_MspInit+0x92>
    return;
 8004f28:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000944 	.word	0x20000944
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40020c00 	.word	0x40020c00

08004f40 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004f48:	f7ff ffa6 	bl	8004e98 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	@ 0x30
 8004f58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5a:	f107 031c 	add.w	r3, r7, #28
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	605a      	str	r2, [r3, #4]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
 8004f6e:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f72:	4a4f      	ldr	r2, [pc, #316]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f74:	f043 0310 	orr.w	r3, r3, #16
 8004f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	4b49      	ldr	r3, [pc, #292]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8e:	4a48      	ldr	r2, [pc, #288]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f96:	4b46      	ldr	r3, [pc, #280]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004faa:	4a41      	ldr	r2, [pc, #260]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fce:	4b38      	ldr	r3, [pc, #224]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4b34      	ldr	r3, [pc, #208]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	4a33      	ldr	r2, [pc, #204]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fea:	4b31      	ldr	r3, [pc, #196]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8005000:	f043 0308 	orr.w	r3, r3, #8
 8005004:	6313      	str	r3, [r2, #48]	@ 0x30
 8005006:	4b2a      	ldr	r3, [pc, #168]	@ (80050b0 <MX_GPIO_Init+0x15c>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8005012:	2200      	movs	r2, #0
 8005014:	2140      	movs	r1, #64	@ 0x40
 8005016:	4827      	ldr	r0, [pc, #156]	@ (80050b4 <MX_GPIO_Init+0x160>)
 8005018:	f001 fc18 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8005022:	4825      	ldr	r0, [pc, #148]	@ (80050b8 <MX_GPIO_Init+0x164>)
 8005024:	f001 fc12 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800502e:	4823      	ldr	r0, [pc, #140]	@ (80050bc <MX_GPIO_Init+0x168>)
 8005030:	f001 fc0c 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8005034:	2340      	movs	r3, #64	@ 0x40
 8005036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005038:	2301      	movs	r3, #1
 800503a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503c:	2300      	movs	r3, #0
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005040:	2300      	movs	r3, #0
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8005044:	f107 031c 	add.w	r3, r7, #28
 8005048:	4619      	mov	r1, r3
 800504a:	481a      	ldr	r0, [pc, #104]	@ (80050b4 <MX_GPIO_Init+0x160>)
 800504c:	f001 f966 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8005050:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005056:	2301      	movs	r3, #1
 8005058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505e:	2300      	movs	r3, #0
 8005060:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005062:	f107 031c 	add.w	r3, r7, #28
 8005066:	4619      	mov	r1, r3
 8005068:	4813      	ldr	r0, [pc, #76]	@ (80050b8 <MX_GPIO_Init+0x164>)
 800506a:	f001 f957 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800506e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005074:	2300      	movs	r3, #0
 8005076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005078:	2302      	movs	r3, #2
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 031c 	add.w	r3, r7, #28
 8005080:	4619      	mov	r1, r3
 8005082:	480f      	ldr	r0, [pc, #60]	@ (80050c0 <MX_GPIO_Init+0x16c>)
 8005084:	f001 f94a 	bl	800631c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8005088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800508c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800508e:	2301      	movs	r3, #1
 8005090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005092:	2301      	movs	r3, #1
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005096:	2303      	movs	r3, #3
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800509a:	f107 031c 	add.w	r3, r7, #28
 800509e:	4619      	mov	r1, r3
 80050a0:	4806      	ldr	r0, [pc, #24]	@ (80050bc <MX_GPIO_Init+0x168>)
 80050a2:	f001 f93b 	bl	800631c <HAL_GPIO_Init>

}
 80050a6:	bf00      	nop
 80050a8:	3730      	adds	r7, #48	@ 0x30
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40020800 	.word	0x40020800
 80050bc:	40020000 	.word	0x40020000
 80050c0:	40020400 	.word	0x40020400

080050c4 <_write>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 5);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	2305      	movs	r3, #5
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4803      	ldr	r0, [pc, #12]	@ (80050e8 <_write+0x24>)
 80050da:	f004 fb8c 	bl	80097f6 <HAL_UART_Transmit>
    return len;
 80050de:	687b      	ldr	r3, [r7, #4]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200009c4 	.word	0x200009c4

080050ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050f0:	f000 fba0 	bl	8005834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80050f4:	f000 f852 	bl	800519c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050f8:	f7ff ff2c 	bl	8004f54 <MX_GPIO_Init>
  MX_RTC_Init();
 80050fc:	f000 f8c2 	bl	8005284 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8005100:	f000 faf2 	bl	80056e8 <MX_USART1_UART_Init>
//  MX_USB_DEVICE_Init();
//  MX_FSMC_Init();
//  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  printf("\r\n NANDO programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 8005104:	2300      	movs	r3, #0
 8005106:	2205      	movs	r2, #5
 8005108:	2103      	movs	r1, #3
 800510a:	481c      	ldr	r0, [pc, #112]	@ (800517c <main+0x90>)
 800510c:	f00e f858 	bl	80131c0 <printf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 8005110:	f009 fdc4 	bl	800ec9c <is_external_clock_avail>
 8005114:	4603      	mov	r3, r0
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <main+0x3a>
  printf("External clock not detected. Fallback to internal clock.\r\n");
 8005120:	4817      	ldr	r0, [pc, #92]	@ (8005180 <main+0x94>)
 8005122:	f00e f8a5 	bl	8013270 <puts>

  printf("JTAG init...");
 8005126:	4817      	ldr	r0, [pc, #92]	@ (8005184 <main+0x98>)
 8005128:	f00e f84a 	bl	80131c0 <printf>
  jtag_init();
 800512c:	f00a fb48 	bl	800f7c0 <jtag_init>
  printf("done.\r\n");
 8005130:	4815      	ldr	r0, [pc, #84]	@ (8005188 <main+0x9c>)
 8005132:	f00e f89d 	bl	8013270 <puts>

  printf("LED init...");
 8005136:	4815      	ldr	r0, [pc, #84]	@ (800518c <main+0xa0>)
 8005138:	f00e f842 	bl	80131c0 <printf>
  led_init();
 800513c:	f00a fb4a 	bl	800f7d4 <led_init>
  printf("done.\r\n");
 8005140:	4811      	ldr	r0, [pc, #68]	@ (8005188 <main+0x9c>)
 8005142:	f00e f895 	bl	8013270 <puts>

  printf("USB init...");
 8005146:	4812      	ldr	r0, [pc, #72]	@ (8005190 <main+0xa4>)
 8005148:	f00e f83a 	bl	80131c0 <printf>
  MX_USB_DEVICE_Init();
 800514c:	f008 fed2 	bl	800def4 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 8005150:	480d      	ldr	r0, [pc, #52]	@ (8005188 <main+0x9c>)
 8005152:	f00e f88d 	bl	8013270 <puts>

  printf("CDC init...");
 8005156:	480f      	ldr	r0, [pc, #60]	@ (8005194 <main+0xa8>)
 8005158:	f00e f832 	bl	80131c0 <printf>
  cdc_init();
 800515c:	f009 fc60 	bl	800ea20 <cdc_init>
  printf("done.\r\n");
 8005160:	4809      	ldr	r0, [pc, #36]	@ (8005188 <main+0x9c>)
 8005162:	f00e f885 	bl	8013270 <puts>

  printf("Programmer init...");
 8005166:	480c      	ldr	r0, [pc, #48]	@ (8005198 <main+0xac>)
 8005168:	f00e f82a 	bl	80131c0 <printf>
  np_init();
 800516c:	f00c fe78 	bl	8011e60 <np_init>
  printf("done.\r\n");
 8005170:	4805      	ldr	r0, [pc, #20]	@ (8005188 <main+0x9c>)
 8005172:	f00e f87d 	bl	8013270 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

	np_handler();
 8005176:	f00c fe83 	bl	8011e80 <np_handler>
 800517a:	e7fc      	b.n	8005176 <main+0x8a>
 800517c:	08017b48 	.word	0x08017b48
 8005180:	08017b6c 	.word	0x08017b6c
 8005184:	08017ba8 	.word	0x08017ba8
 8005188:	08017bb8 	.word	0x08017bb8
 800518c:	08017bc0 	.word	0x08017bc0
 8005190:	08017bcc 	.word	0x08017bcc
 8005194:	08017bd8 	.word	0x08017bd8
 8005198:	08017be4 	.word	0x08017be4

0800519c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b094      	sub	sp, #80	@ 0x50
 80051a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051a2:	f107 0320 	add.w	r3, r7, #32
 80051a6:	2230      	movs	r2, #48	@ 0x30
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f00e f8ab 	bl	8013306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051b0:	f107 030c 	add.w	r3, r7, #12
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	609a      	str	r2, [r3, #8]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051c0:	2300      	movs	r3, #0
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005270 <SystemClock_Config+0xd4>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <SystemClock_Config+0xd4>)
 80051ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80051d0:	4b27      	ldr	r3, [pc, #156]	@ (8005270 <SystemClock_Config+0xd4>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051dc:	2300      	movs	r3, #0
 80051de:	607b      	str	r3, [r7, #4]
 80051e0:	4b24      	ldr	r3, [pc, #144]	@ (8005274 <SystemClock_Config+0xd8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a23      	ldr	r2, [pc, #140]	@ (8005274 <SystemClock_Config+0xd8>)
 80051e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b21      	ldr	r3, [pc, #132]	@ (8005274 <SystemClock_Config+0xd8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80051f8:	2309      	movs	r3, #9
 80051fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005202:	2301      	movs	r3, #1
 8005204:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005206:	2302      	movs	r3, #2
 8005208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800520a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005210:	2305      	movs	r3, #5
 8005212:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005214:	23a8      	movs	r3, #168	@ 0xa8
 8005216:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005218:	2302      	movs	r3, #2
 800521a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800521c:	2307      	movs	r3, #7
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005220:	f107 0320 	add.w	r3, r7, #32
 8005224:	4618      	mov	r0, r3
 8005226:	f002 fea7 	bl	8007f78 <HAL_RCC_OscConfig>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005230:	f000 f822 	bl	8005278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005234:	230f      	movs	r3, #15
 8005236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005238:	2302      	movs	r3, #2
 800523a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005240:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800524a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800524c:	f107 030c 	add.w	r3, r7, #12
 8005250:	2105      	movs	r1, #5
 8005252:	4618      	mov	r0, r3
 8005254:	f003 f908 	bl	8008468 <HAL_RCC_ClockConfig>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800525e:	f000 f80b 	bl	8005278 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8005262:	f003 f9e7 	bl	8008634 <HAL_RCC_EnableCSS>
}
 8005266:	bf00      	nop
 8005268:	3750      	adds	r7, #80	@ 0x50
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	40007000 	.word	0x40007000

08005278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800527c:	b672      	cpsid	i
}
 800527e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <Error_Handler+0x8>

08005284 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005298:	2300      	movs	r3, #0
 800529a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800529c:	4b24      	ldr	r3, [pc, #144]	@ (8005330 <MX_RTC_Init+0xac>)
 800529e:	4a25      	ldr	r2, [pc, #148]	@ (8005334 <MX_RTC_Init+0xb0>)
 80052a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80052a2:	4b23      	ldr	r3, [pc, #140]	@ (8005330 <MX_RTC_Init+0xac>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80052a8:	4b21      	ldr	r3, [pc, #132]	@ (8005330 <MX_RTC_Init+0xac>)
 80052aa:	227f      	movs	r2, #127	@ 0x7f
 80052ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80052ae:	4b20      	ldr	r3, [pc, #128]	@ (8005330 <MX_RTC_Init+0xac>)
 80052b0:	22ff      	movs	r2, #255	@ 0xff
 80052b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80052b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <MX_RTC_Init+0xac>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80052ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005330 <MX_RTC_Init+0xac>)
 80052bc:	2200      	movs	r2, #0
 80052be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <MX_RTC_Init+0xac>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80052c6:	481a      	ldr	r0, [pc, #104]	@ (8005330 <MX_RTC_Init+0xac>)
 80052c8:	f003 fbb8 	bl	8008a3c <HAL_RTC_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80052d2:	f7ff ffd1 	bl	8005278 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80052da:	2300      	movs	r3, #0
 80052dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80052de:	2300      	movs	r3, #0
 80052e0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	2201      	movs	r2, #1
 80052ee:	4619      	mov	r1, r3
 80052f0:	480f      	ldr	r0, [pc, #60]	@ (8005330 <MX_RTC_Init+0xac>)
 80052f2:	f003 fc26 	bl	8008b42 <HAL_RTC_SetTime>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80052fc:	f7ff ffbc 	bl	8005278 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005300:	2301      	movs	r3, #1
 8005302:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005304:	2301      	movs	r3, #1
 8005306:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8005308:	2301      	movs	r3, #1
 800530a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800530c:	2300      	movs	r3, #0
 800530e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005310:	463b      	mov	r3, r7
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	4806      	ldr	r0, [pc, #24]	@ (8005330 <MX_RTC_Init+0xac>)
 8005318:	f003 fcad 	bl	8008c76 <HAL_RTC_SetDate>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8005322:	f7ff ffa9 	bl	8005278 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000948 	.word	0x20000948
 8005334:	40002800 	.word	0x40002800

08005338 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005340:	f107 0308 	add.w	r3, r7, #8
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <HAL_RTC_MspInit+0x4c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d111      	bne.n	800537c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005358:	2302      	movs	r3, #2
 800535a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800535c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005360:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4618      	mov	r0, r3
 8005368:	f003 fa86 	bl	8008878 <HAL_RCCEx_PeriphCLKConfig>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005372:	f7ff ff81 	bl	8005278 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005376:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <HAL_RTC_MspInit+0x50>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800537c:	bf00      	nop
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40002800 	.word	0x40002800
 8005388:	42470e3c 	.word	0x42470e3c

0800538c <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	@ 0x28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005394:	f107 0314 	add.w	r3, r7, #20
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	605a      	str	r2, [r3, #4]
 800539e:	609a      	str	r2, [r3, #8]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2c      	ldr	r2, [pc, #176]	@ (800545c <HAL_SPI_MspInit+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d151      	bne.n	8005452 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80053bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80053be:	4b28      	ldr	r3, [pc, #160]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c6:	613b      	str	r3, [r7, #16]
 80053c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4b24      	ldr	r3, [pc, #144]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	4a23      	ldr	r2, [pc, #140]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053da:	4b21      	ldr	r3, [pc, #132]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005460 <HAL_SPI_MspInit+0xd4>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	60bb      	str	r3, [r7, #8]
 8005400:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005402:	23c0      	movs	r3, #192	@ 0xc0
 8005404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005406:	2302      	movs	r3, #2
 8005408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540e:	2303      	movs	r3, #3
 8005410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005412:	2305      	movs	r3, #5
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	4619      	mov	r1, r3
 800541c:	4811      	ldr	r0, [pc, #68]	@ (8005464 <HAL_SPI_MspInit+0xd8>)
 800541e:	f000 ff7d 	bl	800631c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8005422:	2308      	movs	r3, #8
 8005424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005426:	2302      	movs	r3, #2
 8005428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800542a:	2302      	movs	r3, #2
 800542c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542e:	2303      	movs	r3, #3
 8005430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005432:	2305      	movs	r3, #5
 8005434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8005436:	f107 0314 	add.w	r3, r7, #20
 800543a:	4619      	mov	r1, r3
 800543c:	480a      	ldr	r0, [pc, #40]	@ (8005468 <HAL_SPI_MspInit+0xdc>)
 800543e:	f000 ff6d 	bl	800631c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8005442:	2200      	movs	r2, #0
 8005444:	2100      	movs	r1, #0
 8005446:	2023      	movs	r0, #35	@ 0x23
 8005448:	f000 fbb9 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800544c:	2023      	movs	r0, #35	@ 0x23
 800544e:	f000 fbd2 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005452:	bf00      	nop
 8005454:	3728      	adds	r7, #40	@ 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40013000 	.word	0x40013000
 8005460:	40023800 	.word	0x40023800
 8005464:	40020000 	.word	0x40020000
 8005468:	40020400 	.word	0x40020400

0800546c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <HAL_MspInit+0x4c>)
 8005478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547a:	4a0f      	ldr	r2, [pc, #60]	@ (80054b8 <HAL_MspInit+0x4c>)
 800547c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005480:	6453      	str	r3, [r2, #68]	@ 0x44
 8005482:	4b0d      	ldr	r3, [pc, #52]	@ (80054b8 <HAL_MspInit+0x4c>)
 8005484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_MspInit+0x4c>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a08      	ldr	r2, [pc, #32]	@ (80054b8 <HAL_MspInit+0x4c>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <HAL_MspInit+0x4c>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800

080054bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80054c0:	f003 f9be 	bl	8008840 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <NMI_Handler+0x8>

080054c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <HardFault_Handler+0x4>

080054d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054d4:	bf00      	nop
 80054d6:	e7fd      	b.n	80054d4 <MemManage_Handler+0x4>

080054d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <BusFault_Handler+0x4>

080054e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <UsageFault_Handler+0x4>

080054e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80054ec:	bf00      	nop
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005516:	f000 f9df 	bl	80058d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005524:	4802      	ldr	r0, [pc, #8]	@ (8005530 <SPI1_IRQHandler+0x10>)
 8005526:	f003 ff05 	bl	8009334 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000968 	.word	0x20000968

08005534 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005538:	4802      	ldr	r0, [pc, #8]	@ (8005544 <USART1_IRQHandler+0x10>)
 800553a:	f004 f9e7 	bl	800990c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200009c4 	.word	0x200009c4

08005548 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 800554c:	4802      	ldr	r0, [pc, #8]	@ (8005558 <FSMC_IRQHandler+0x10>)
 800554e:	f001 f9e4 	bl	800691a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000904 	.word	0x20000904

0800555c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005560:	4802      	ldr	r0, [pc, #8]	@ (800556c <OTG_FS_IRQHandler+0x10>)
 8005562:	f001 fbfc 	bl	8006d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20001f10 	.word	0x20001f10

08005570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return 1;
 8005574:	2301      	movs	r3, #1
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_kill>:

int _kill(int pid, int sig)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800558a:	f00d ff0b 	bl	80133a4 <__errno>
 800558e:	4603      	mov	r3, r0
 8005590:	2216      	movs	r2, #22
 8005592:	601a      	str	r2, [r3, #0]
  return -1;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_exit>:

void _exit (int status)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055a8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ffe7 	bl	8005580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <_exit+0x12>

080055b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e00a      	b.n	80055de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055c8:	f3af 8000 	nop.w
 80055cc:	4601      	mov	r1, r0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	60ba      	str	r2, [r7, #8]
 80055d4:	b2ca      	uxtb	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3301      	adds	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	dbf0      	blt.n	80055c8 <_read+0x12>
  }

  return len;
 80055e6:	687b      	ldr	r3, [r7, #4]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005618:	605a      	str	r2, [r3, #4]
  return 0;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <_isatty>:

int _isatty(int file)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005660:	4a14      	ldr	r2, [pc, #80]	@ (80056b4 <_sbrk+0x5c>)
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <_sbrk+0x60>)
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800566c:	4b13      	ldr	r3, [pc, #76]	@ (80056bc <_sbrk+0x64>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005674:	4b11      	ldr	r3, [pc, #68]	@ (80056bc <_sbrk+0x64>)
 8005676:	4a12      	ldr	r2, [pc, #72]	@ (80056c0 <_sbrk+0x68>)
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800567a:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <_sbrk+0x64>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	d207      	bcs.n	8005698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005688:	f00d fe8c 	bl	80133a4 <__errno>
 800568c:	4603      	mov	r3, r0
 800568e:	220c      	movs	r2, #12
 8005690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	e009      	b.n	80056ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005698:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <_sbrk+0x64>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800569e:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <_sbrk+0x64>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4413      	add	r3, r2
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <_sbrk+0x64>)
 80056a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20020000 	.word	0x20020000
 80056b8:	00004000 	.word	0x00004000
 80056bc:	200009c0 	.word	0x200009c0
 80056c0:	20007720 	.word	0x20007720

080056c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <SystemInit+0x20>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	4a05      	ldr	r2, [pc, #20]	@ (80056e4 <SystemInit+0x20>)
 80056d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056d8:	bf00      	nop
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	e000ed00 	.word	0xe000ed00

080056e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 80056ee:	4a13      	ldr	r2, [pc, #76]	@ (800573c <MX_USART1_UART_Init+0x54>)
 80056f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056f2:	4b11      	ldr	r3, [pc, #68]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 80056f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005700:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 8005702:	2200      	movs	r2, #0
 8005704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005706:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800570c:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 800570e:	220c      	movs	r2, #12
 8005710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005718:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800571e:	2200      	movs	r2, #0
 8005720:	2100      	movs	r1, #0
 8005722:	4805      	ldr	r0, [pc, #20]	@ (8005738 <MX_USART1_UART_Init+0x50>)
 8005724:	f003 fff4 	bl	8009710 <HAL_MultiProcessor_Init>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800572e:	f7ff fda3 	bl	8005278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200009c4 	.word	0x200009c4
 800573c:	40011000 	.word	0x40011000

08005740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	@ 0x28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_UART_MspInit+0x94>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d134      	bne.n	80057cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	4b1c      	ldr	r3, [pc, #112]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 800576c:	f043 0310 	orr.w	r3, r3, #16
 8005770:	6453      	str	r3, [r2, #68]	@ 0x44
 8005772:	4b19      	ldr	r3, [pc, #100]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	613b      	str	r3, [r7, #16]
 800577c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	4b15      	ldr	r3, [pc, #84]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	4a14      	ldr	r2, [pc, #80]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6313      	str	r3, [r2, #48]	@ 0x30
 800578e:	4b12      	ldr	r3, [pc, #72]	@ (80057d8 <HAL_UART_MspInit+0x98>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800579a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800579e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a0:	2302      	movs	r3, #2
 80057a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a8:	2303      	movs	r3, #3
 80057aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057ac:	2307      	movs	r3, #7
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4619      	mov	r1, r3
 80057b6:	4809      	ldr	r0, [pc, #36]	@ (80057dc <HAL_UART_MspInit+0x9c>)
 80057b8:	f000 fdb0 	bl	800631c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80057bc:	2200      	movs	r2, #0
 80057be:	2100      	movs	r1, #0
 80057c0:	2025      	movs	r0, #37	@ 0x25
 80057c2:	f000 f9fc 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057c6:	2025      	movs	r0, #37	@ 0x25
 80057c8:	f000 fa15 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80057cc:	bf00      	nop
 80057ce:	3728      	adds	r7, #40	@ 0x28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40011000 	.word	0x40011000
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40020000 	.word	0x40020000

080057e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80057e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005818 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80057e4:	f7ff ff6e 	bl	80056c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057e8:	480c      	ldr	r0, [pc, #48]	@ (800581c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80057ea:	490d      	ldr	r1, [pc, #52]	@ (8005820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80057ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80057ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057f0:	e002      	b.n	80057f8 <LoopCopyDataInit>

080057f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057f6:	3304      	adds	r3, #4

080057f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057fc:	d3f9      	bcc.n	80057f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005800:	4c0a      	ldr	r4, [pc, #40]	@ (800582c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005804:	e001      	b.n	800580a <LoopFillZerobss>

08005806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005808:	3204      	adds	r2, #4

0800580a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800580a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800580c:	d3fb      	bcc.n	8005806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800580e:	f00d fdcf 	bl	80133b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005812:	f7ff fc6b 	bl	80050ec <main>
  bx  lr    
 8005816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800581c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005820:	200008e8 	.word	0x200008e8
  ldr r2, =_sidata
 8005824:	08018d14 	.word	0x08018d14
  ldr r2, =_sbss
 8005828:	200008e8 	.word	0x200008e8
  ldr r4, =_ebss
 800582c:	2000771c 	.word	0x2000771c

08005830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005830:	e7fe      	b.n	8005830 <ADC_IRQHandler>
	...

08005834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005838:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <HAL_Init+0x40>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0d      	ldr	r2, [pc, #52]	@ (8005874 <HAL_Init+0x40>)
 800583e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_Init+0x40>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0a      	ldr	r2, [pc, #40]	@ (8005874 <HAL_Init+0x40>)
 800584a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800584e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005850:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <HAL_Init+0x40>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a07      	ldr	r2, [pc, #28]	@ (8005874 <HAL_Init+0x40>)
 8005856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800585a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800585c:	2003      	movs	r0, #3
 800585e:	f000 f9a3 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005862:	200f      	movs	r0, #15
 8005864:	f000 f808 	bl	8005878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005868:	f7ff fe00 	bl	800546c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023c00 	.word	0x40023c00

08005878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005880:	4b12      	ldr	r3, [pc, #72]	@ (80058cc <HAL_InitTick+0x54>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <HAL_InitTick+0x58>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	4619      	mov	r1, r3
 800588a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800588e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f9c9 	bl	8005c2e <HAL_SYSTICK_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00e      	b.n	80058c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b0f      	cmp	r3, #15
 80058aa:	d80a      	bhi.n	80058c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058ac:	2200      	movs	r2, #0
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	f000 f983 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80058b8:	4a06      	ldr	r2, [pc, #24]	@ (80058d4 <HAL_InitTick+0x5c>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	20000000 	.word	0x20000000
 80058d0:	20000008 	.word	0x20000008
 80058d4:	20000004 	.word	0x20000004

080058d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058dc:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <HAL_IncTick+0x20>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_IncTick+0x24>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	4a04      	ldr	r2, [pc, #16]	@ (80058fc <HAL_IncTick+0x24>)
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000008 	.word	0x20000008
 80058fc:	20000a0c 	.word	0x20000a0c

08005900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  return uwTick;
 8005904:	4b03      	ldr	r3, [pc, #12]	@ (8005914 <HAL_GetTick+0x14>)
 8005906:	681b      	ldr	r3, [r3, #0]
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000a0c 	.word	0x20000a0c

08005918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005920:	f7ff ffee 	bl	8005900 <HAL_GetTick>
 8005924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d005      	beq.n	800593e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005932:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <HAL_Delay+0x44>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800593e:	bf00      	nop
 8005940:	f7ff ffde 	bl	8005900 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d8f7      	bhi.n	8005940 <HAL_Delay+0x28>
  {
  }
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000008 	.word	0x20000008

08005960 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a04      	ldr	r2, [pc, #16]	@ (800597c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6053      	str	r3, [r2, #4]
}
 8005970:	bf00      	nop
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e0042000 	.word	0xe0042000

08005980 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005984:	4b05      	ldr	r3, [pc, #20]	@ (800599c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a04      	ldr	r2, [pc, #16]	@ (800599c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800598a:	f043 0302 	orr.w	r3, r3, #2
 800598e:	6053      	str	r3, [r2, #4]
}
 8005990:	bf00      	nop
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e0042000 	.word	0xe0042000

080059a0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4a04      	ldr	r2, [pc, #16]	@ (80059bc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80059aa:	f043 0304 	orr.w	r3, r3, #4
 80059ae:	6053      	str	r3, [r2, #4]
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	e0042000 	.word	0xe0042000

080059c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059dc:	4013      	ands	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f2:	4a04      	ldr	r2, [pc, #16]	@ (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	60d3      	str	r3, [r2, #12]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a0c:	4b04      	ldr	r3, [pc, #16]	@ (8005a20 <__NVIC_GetPriorityGrouping+0x18>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 0307 	and.w	r3, r3, #7
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db0b      	blt.n	8005a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	4907      	ldr	r1, [pc, #28]	@ (8005a5c <__NVIC_EnableIRQ+0x38>)
 8005a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2001      	movs	r0, #1
 8005a46:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e100 	.word	0xe000e100

08005a60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	db12      	blt.n	8005a98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	f003 021f 	and.w	r2, r3, #31
 8005a78:	490a      	ldr	r1, [pc, #40]	@ (8005aa4 <__NVIC_DisableIRQ+0x44>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2001      	movs	r0, #1
 8005a82:	fa00 f202 	lsl.w	r2, r0, r2
 8005a86:	3320      	adds	r3, #32
 8005a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a8c:	f3bf 8f4f 	dsb	sy
}
 8005a90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a92:	f3bf 8f6f 	isb	sy
}
 8005a96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	@ (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	@ (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	@ 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	@ 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff05 	bl	80059c0 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd0:	f7ff ff1a 	bl	8005a08 <__NVIC_GetPriorityGrouping>
 8005bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff8e 	bl	8005afc <NVIC_EncodePriority>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff5d 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff0d 	bl	8005a24 <__NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff1d 	bl	8005a60 <__NVIC_DisableIRQ>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff94 	bl	8005b64 <SysTick_Config>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7ff fe54 	bl	8005900 <HAL_GetTick>
 8005c58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d008      	beq.n	8005c78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2280      	movs	r2, #128	@ 0x80
 8005c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e052      	b.n	8005d1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0216 	bic.w	r2, r2, #22
 8005c86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <HAL_DMA_Abort+0x62>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0208 	bic.w	r2, r2, #8
 8005cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0201 	bic.w	r2, r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cc8:	e013      	b.n	8005cf2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cca:	f7ff fe19 	bl	8005900 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b05      	cmp	r3, #5
 8005cd6:	d90c      	bls.n	8005cf2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e015      	b.n	8005d1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e4      	bne.n	8005cca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	223f      	movs	r2, #63	@ 0x3f
 8005d06:	409a      	lsls	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d004      	beq.n	8005d44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2280      	movs	r2, #128	@ 0x80
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e00c      	b.n	8005d5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2205      	movs	r2, #5
 8005d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0201 	bic.w	r2, r2, #1
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d7e:	4b23      	ldr	r3, [pc, #140]	@ (8005e0c <HAL_FLASH_Program+0xa0>)
 8005d80:	7e1b      	ldrb	r3, [r3, #24]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_FLASH_Program+0x1e>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e03b      	b.n	8005e02 <HAL_FLASH_Program+0x96>
 8005d8a:	4b20      	ldr	r3, [pc, #128]	@ (8005e0c <HAL_FLASH_Program+0xa0>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005d94:	f000 f870 	bl	8005e78 <FLASH_WaitForLastOperation>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d12b      	bne.n	8005dfa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005da8:	783b      	ldrb	r3, [r7, #0]
 8005daa:	4619      	mov	r1, r3
 8005dac:	68b8      	ldr	r0, [r7, #8]
 8005dae:	f000 f91b 	bl	8005fe8 <FLASH_Program_Byte>
 8005db2:	e016      	b.n	8005de2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005dba:	883b      	ldrh	r3, [r7, #0]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f000 f8ee 	bl	8005fa0 <FLASH_Program_HalfWord>
 8005dc4:	e00d      	b.n	8005de2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d105      	bne.n	8005dd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	68b8      	ldr	r0, [r7, #8]
 8005dd2:	f000 f8c3 	bl	8005f5c <FLASH_Program_Word>
 8005dd6:	e004      	b.n	8005de2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ddc:	68b8      	ldr	r0, [r7, #8]
 8005dde:	f000 f88b 	bl	8005ef8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005de2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005de6:	f000 f847 	bl	8005e78 <FLASH_WaitForLastOperation>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005dee:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <HAL_FLASH_Program+0xa4>)
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	4a07      	ldr	r2, [pc, #28]	@ (8005e10 <HAL_FLASH_Program+0xa4>)
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dfa:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <HAL_FLASH_Program+0xa0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000a10 	.word	0x20000a10
 8005e10:	40023c00 	.word	0x40023c00

08005e14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da0b      	bge.n	8005e3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e26:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e28:	4a09      	ldr	r2, [pc, #36]	@ (8005e50 <HAL_FLASH_Unlock+0x3c>)
 8005e2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e2c:	4b07      	ldr	r3, [pc, #28]	@ (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e2e:	4a09      	ldr	r2, [pc, #36]	@ (8005e54 <HAL_FLASH_Unlock+0x40>)
 8005e30:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005e32:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da01      	bge.n	8005e3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40023c00 	.word	0x40023c00
 8005e50:	45670123 	.word	0x45670123
 8005e54:	cdef89ab 	.word	0xcdef89ab

08005e58 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_FLASH_Lock+0x1c>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	4a04      	ldr	r2, [pc, #16]	@ (8005e74 <HAL_FLASH_Lock+0x1c>)
 8005e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e66:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	40023c00 	.word	0x40023c00

08005e78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e84:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef0 <FLASH_WaitForLastOperation+0x78>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005e8a:	f7ff fd39 	bl	8005900 <HAL_GetTick>
 8005e8e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005e90:	e010      	b.n	8005eb4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d00c      	beq.n	8005eb4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <FLASH_WaitForLastOperation+0x38>
 8005ea0:	f7ff fd2e 	bl	8005900 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d201      	bcs.n	8005eb4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e019      	b.n	8005ee8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef4 <FLASH_WaitForLastOperation+0x7c>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e8      	bne.n	8005e92 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef4 <FLASH_WaitForLastOperation+0x7c>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ecc:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <FLASH_WaitForLastOperation+0x7c>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005ed2:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <FLASH_WaitForLastOperation+0x7c>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005ede:	f000 f8a5 	bl	800602c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
  
}  
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000a10 	.word	0x20000a10
 8005ef4:	40023c00 	.word	0x40023c00

08005ef8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f04:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	4a13      	ldr	r2, [pc, #76]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	4a10      	ldr	r2, [pc, #64]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f16:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	4a0d      	ldr	r2, [pc, #52]	@ (8005f58 <FLASH_Program_DoubleWord+0x60>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005f2e:	f3bf 8f6f 	isb	sy
}
 8005f32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	000a      	movs	r2, r1
 8005f42:	2300      	movs	r3, #0
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	3104      	adds	r1, #4
 8005f48:	4613      	mov	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40023c00 	.word	0x40023c00

08005f5c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f66:	4b0d      	ldr	r3, [pc, #52]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005f72:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	4a09      	ldr	r2, [pc, #36]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005f7e:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4a06      	ldr	r2, [pc, #24]	@ (8005f9c <FLASH_Program_Word+0x40>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40023c00 	.word	0x40023c00

08005fa0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005fac:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005fc4:	4b07      	ldr	r3, [pc, #28]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	4a06      	ldr	r2, [pc, #24]	@ (8005fe4 <FLASH_Program_HalfWord+0x44>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	801a      	strh	r2, [r3, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40023c00 	.word	0x40023c00

08005fe8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8006028 <FLASH_Program_Byte+0x40>)
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8006028 <FLASH_Program_Byte+0x40>)
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ffe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006000:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <FLASH_Program_Byte+0x40>)
 8006002:	4a09      	ldr	r2, [pc, #36]	@ (8006028 <FLASH_Program_Byte+0x40>)
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006008:	4b07      	ldr	r3, [pc, #28]	@ (8006028 <FLASH_Program_Byte+0x40>)
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4a06      	ldr	r2, [pc, #24]	@ (8006028 <FLASH_Program_Byte+0x40>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	701a      	strb	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40023c00 	.word	0x40023c00

0800602c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006030:	4b27      	ldr	r3, [pc, #156]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800603c:	4b25      	ldr	r3, [pc, #148]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f043 0310 	orr.w	r3, r3, #16
 8006044:	4a23      	ldr	r2, [pc, #140]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 8006046:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006048:	4b21      	ldr	r3, [pc, #132]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 800604a:	2210      	movs	r2, #16
 800604c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800604e:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d008      	beq.n	800606c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800605a:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 8006064:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006066:	4b1a      	ldr	r3, [pc, #104]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 8006068:	2220      	movs	r2, #32
 800606a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800606c:	4b18      	ldr	r3, [pc, #96]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d008      	beq.n	800608a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006078:	4b16      	ldr	r3, [pc, #88]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	4a14      	ldr	r2, [pc, #80]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 8006082:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006084:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 8006086:	2240      	movs	r2, #64	@ 0x40
 8006088:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800608a:	4b11      	ldr	r3, [pc, #68]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b00      	cmp	r3, #0
 8006094:	d008      	beq.n	80060a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006096:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f043 0302 	orr.w	r3, r3, #2
 800609e:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 80060a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80060a2:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 80060a4:	2280      	movs	r2, #128	@ 0x80
 80060a6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80060b4:	4b07      	ldr	r3, [pc, #28]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f043 0320 	orr.w	r3, r3, #32
 80060bc:	4a05      	ldr	r2, [pc, #20]	@ (80060d4 <FLASH_SetErrorCode+0xa8>)
 80060be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80060c0:	4b03      	ldr	r3, [pc, #12]	@ (80060d0 <FLASH_SetErrorCode+0xa4>)
 80060c2:	2202      	movs	r2, #2
 80060c4:	60da      	str	r2, [r3, #12]
  }
}
 80060c6:	bf00      	nop
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40023c00 	.word	0x40023c00
 80060d4:	20000a10 	.word	0x20000a10

080060d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80060ea:	4b31      	ldr	r3, [pc, #196]	@ (80061b0 <HAL_FLASHEx_Erase+0xd8>)
 80060ec:	7e1b      	ldrb	r3, [r3, #24]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_FLASHEx_Erase+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e058      	b.n	80061a8 <HAL_FLASHEx_Erase+0xd0>
 80060f6:	4b2e      	ldr	r3, [pc, #184]	@ (80061b0 <HAL_FLASHEx_Erase+0xd8>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80060fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006100:	f7ff feba 	bl	8005e78 <FLASH_WaitForLastOperation>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d148      	bne.n	80061a0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d115      	bne.n	800614a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4619      	mov	r1, r3
 800612a:	4610      	mov	r0, r2
 800612c:	f000 f844 	bl	80061b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006130:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006134:	f7ff fea0 	bl	8005e78 <FLASH_WaitForLastOperation>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800613c:	4b1d      	ldr	r3, [pc, #116]	@ (80061b4 <HAL_FLASHEx_Erase+0xdc>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <HAL_FLASHEx_Erase+0xdc>)
 8006142:	f023 0304 	bic.w	r3, r3, #4
 8006146:	6113      	str	r3, [r2, #16]
 8006148:	e028      	b.n	800619c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	e01c      	b.n	800618c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	4619      	mov	r1, r3
 800615a:	68b8      	ldr	r0, [r7, #8]
 800615c:	f000 f850 	bl	8006200 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006160:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006164:	f7ff fe88 	bl	8005e78 <FLASH_WaitForLastOperation>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800616c:	4b11      	ldr	r3, [pc, #68]	@ (80061b4 <HAL_FLASHEx_Erase+0xdc>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4a10      	ldr	r2, [pc, #64]	@ (80061b4 <HAL_FLASHEx_Erase+0xdc>)
 8006172:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8006176:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	601a      	str	r2, [r3, #0]
          break;
 8006184:	e00a      	b.n	800619c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3301      	adds	r3, #1
 800618a:	60bb      	str	r3, [r7, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4413      	add	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d3da      	bcc.n	8006152 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800619c:	f000 f878 	bl	8006290 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061a0:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <HAL_FLASHEx_Erase+0xd8>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	761a      	strb	r2, [r3, #24]

  return status;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000a10 	.word	0x20000a10
 80061b4:	40023c00 	.word	0x40023c00

080061b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	6039      	str	r1, [r7, #0]
 80061c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061c4:	4b0d      	ldr	r3, [pc, #52]	@ (80061fc <FLASH_MassErase+0x44>)
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	4a0c      	ldr	r2, [pc, #48]	@ (80061fc <FLASH_MassErase+0x44>)
 80061ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80061d0:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <FLASH_MassErase+0x44>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	4a09      	ldr	r2, [pc, #36]	@ (80061fc <FLASH_MassErase+0x44>)
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <FLASH_MassErase+0x44>)
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	4313      	orrs	r3, r2
 80061e6:	4a05      	ldr	r2, [pc, #20]	@ (80061fc <FLASH_MassErase+0x44>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ec:	6113      	str	r3, [r2, #16]
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40023c00 	.word	0x40023c00

08006200 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e010      	b.n	800623e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d103      	bne.n	800622a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	e009      	b.n	800623e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d103      	bne.n	8006238 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006230:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	e002      	b.n	800623e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006238:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800623c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800623e:	4b13      	ldr	r3, [pc, #76]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4a12      	ldr	r2, [pc, #72]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006248:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	490f      	ldr	r1, [pc, #60]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006256:	4b0d      	ldr	r3, [pc, #52]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4a0c      	ldr	r2, [pc, #48]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 800625c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006260:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006262:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4313      	orrs	r3, r2
 800626c:	4a07      	ldr	r2, [pc, #28]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 800626e:	f043 0302 	orr.w	r3, r3, #2
 8006272:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006274:	4b05      	ldr	r3, [pc, #20]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	4a04      	ldr	r2, [pc, #16]	@ (800628c <FLASH_Erase_Sector+0x8c>)
 800627a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800627e:	6113      	str	r3, [r2, #16]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40023c00 	.word	0x40023c00

08006290 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006294:	4b20      	ldr	r3, [pc, #128]	@ (8006318 <FLASH_FlushCaches+0x88>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800629c:	2b00      	cmp	r3, #0
 800629e:	d017      	beq.n	80062d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80062a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062a6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80062ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a16      	ldr	r2, [pc, #88]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062c4:	4b14      	ldr	r3, [pc, #80]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a13      	ldr	r2, [pc, #76]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80062ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80062d0:	4b11      	ldr	r3, [pc, #68]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80062dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80062e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b08      	ldr	r3, [pc, #32]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a07      	ldr	r2, [pc, #28]	@ (8006318 <FLASH_FlushCaches+0x88>)
 80062fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006300:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <FLASH_FlushCaches+0x88>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a04      	ldr	r2, [pc, #16]	@ (8006318 <FLASH_FlushCaches+0x88>)
 8006306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800630a:	6013      	str	r3, [r2, #0]
  }
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40023c00 	.word	0x40023c00

0800631c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800631c:	b480      	push	{r7}
 800631e:	b089      	sub	sp, #36	@ 0x24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e16b      	b.n	8006610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	f040 815a 	bne.w	800660a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d005      	beq.n	800636e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800636a:	2b02      	cmp	r3, #2
 800636c:	d130      	bne.n	80063d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 0201 	and.w	r2, r3, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d017      	beq.n	800640c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d123      	bne.n	8006460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	08da      	lsrs	r2, r3, #3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3208      	adds	r2, #8
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	220f      	movs	r2, #15
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	08da      	lsrs	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3208      	adds	r2, #8
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	2203      	movs	r2, #3
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80b4 	beq.w	800660a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	4b60      	ldr	r3, [pc, #384]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80064b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006628 <HAL_GPIO_Init+0x30c>)
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064be:	4a5b      	ldr	r2, [pc, #364]	@ (800662c <HAL_GPIO_Init+0x310>)
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	089b      	lsrs	r3, r3, #2
 80064c4:	3302      	adds	r3, #2
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	220f      	movs	r2, #15
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4013      	ands	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a52      	ldr	r2, [pc, #328]	@ (8006630 <HAL_GPIO_Init+0x314>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d02b      	beq.n	8006542 <HAL_GPIO_Init+0x226>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a51      	ldr	r2, [pc, #324]	@ (8006634 <HAL_GPIO_Init+0x318>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d025      	beq.n	800653e <HAL_GPIO_Init+0x222>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a50      	ldr	r2, [pc, #320]	@ (8006638 <HAL_GPIO_Init+0x31c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01f      	beq.n	800653a <HAL_GPIO_Init+0x21e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a4f      	ldr	r2, [pc, #316]	@ (800663c <HAL_GPIO_Init+0x320>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d019      	beq.n	8006536 <HAL_GPIO_Init+0x21a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a4e      	ldr	r2, [pc, #312]	@ (8006640 <HAL_GPIO_Init+0x324>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <HAL_GPIO_Init+0x216>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4d      	ldr	r2, [pc, #308]	@ (8006644 <HAL_GPIO_Init+0x328>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00d      	beq.n	800652e <HAL_GPIO_Init+0x212>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a4c      	ldr	r2, [pc, #304]	@ (8006648 <HAL_GPIO_Init+0x32c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <HAL_GPIO_Init+0x20e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a4b      	ldr	r2, [pc, #300]	@ (800664c <HAL_GPIO_Init+0x330>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d101      	bne.n	8006526 <HAL_GPIO_Init+0x20a>
 8006522:	2307      	movs	r3, #7
 8006524:	e00e      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006526:	2308      	movs	r3, #8
 8006528:	e00c      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800652a:	2306      	movs	r3, #6
 800652c:	e00a      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800652e:	2305      	movs	r3, #5
 8006530:	e008      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006532:	2304      	movs	r3, #4
 8006534:	e006      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006536:	2303      	movs	r3, #3
 8006538:	e004      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800653a:	2302      	movs	r3, #2
 800653c:	e002      	b.n	8006544 <HAL_GPIO_Init+0x228>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <HAL_GPIO_Init+0x228>
 8006542:	2300      	movs	r3, #0
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	f002 0203 	and.w	r2, r2, #3
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	4093      	lsls	r3, r2
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006554:	4935      	ldr	r1, [pc, #212]	@ (800662c <HAL_GPIO_Init+0x310>)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	089b      	lsrs	r3, r3, #2
 800655a:	3302      	adds	r3, #2
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	43db      	mvns	r3, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4013      	ands	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006586:	4a32      	ldr	r2, [pc, #200]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800658c:	4b30      	ldr	r3, [pc, #192]	@ (8006650 <HAL_GPIO_Init+0x334>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065b0:	4a27      	ldr	r2, [pc, #156]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065b6:	4b26      	ldr	r3, [pc, #152]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	43db      	mvns	r3, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_GPIO_Init+0x334>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006604:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <HAL_GPIO_Init+0x334>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	2b0f      	cmp	r3, #15
 8006614:	f67f ae90 	bls.w	8006338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	@ 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40023800 	.word	0x40023800
 800662c:	40013800 	.word	0x40013800
 8006630:	40020000 	.word	0x40020000
 8006634:	40020400 	.word	0x40020400
 8006638:	40020800 	.word	0x40020800
 800663c:	40020c00 	.word	0x40020c00
 8006640:	40021000 	.word	0x40021000
 8006644:	40021400 	.word	0x40021400
 8006648:	40021800 	.word	0x40021800
 800664c:	40021c00 	.word	0x40021c00
 8006650:	40013c00 	.word	0x40013c00

08006654 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e0cd      	b.n	800680c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006670:	2201      	movs	r2, #1
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4013      	ands	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	f040 80bd 	bne.w	8006806 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800668c:	4a65      	ldr	r2, [pc, #404]	@ (8006824 <HAL_GPIO_DeInit+0x1d0>)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f003 0303 	and.w	r3, r3, #3
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	220f      	movs	r2, #15
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	4013      	ands	r3, r2
 80066ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006828 <HAL_GPIO_DeInit+0x1d4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d02b      	beq.n	800670e <HAL_GPIO_DeInit+0xba>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a5c      	ldr	r2, [pc, #368]	@ (800682c <HAL_GPIO_DeInit+0x1d8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d025      	beq.n	800670a <HAL_GPIO_DeInit+0xb6>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006830 <HAL_GPIO_DeInit+0x1dc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d01f      	beq.n	8006706 <HAL_GPIO_DeInit+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006834 <HAL_GPIO_DeInit+0x1e0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d019      	beq.n	8006702 <HAL_GPIO_DeInit+0xae>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a59      	ldr	r2, [pc, #356]	@ (8006838 <HAL_GPIO_DeInit+0x1e4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_GPIO_DeInit+0xaa>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a58      	ldr	r2, [pc, #352]	@ (800683c <HAL_GPIO_DeInit+0x1e8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00d      	beq.n	80066fa <HAL_GPIO_DeInit+0xa6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a57      	ldr	r2, [pc, #348]	@ (8006840 <HAL_GPIO_DeInit+0x1ec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d007      	beq.n	80066f6 <HAL_GPIO_DeInit+0xa2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a56      	ldr	r2, [pc, #344]	@ (8006844 <HAL_GPIO_DeInit+0x1f0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d101      	bne.n	80066f2 <HAL_GPIO_DeInit+0x9e>
 80066ee:	2307      	movs	r3, #7
 80066f0:	e00e      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 80066f2:	2308      	movs	r3, #8
 80066f4:	e00c      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 80066f6:	2306      	movs	r3, #6
 80066f8:	e00a      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 80066fa:	2305      	movs	r3, #5
 80066fc:	e008      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 80066fe:	2304      	movs	r3, #4
 8006700:	e006      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 8006702:	2303      	movs	r3, #3
 8006704:	e004      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 8006706:	2302      	movs	r3, #2
 8006708:	e002      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_GPIO_DeInit+0xbc>
 800670e:	2300      	movs	r3, #0
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	f002 0203 	and.w	r2, r2, #3
 8006716:	0092      	lsls	r2, r2, #2
 8006718:	4093      	lsls	r3, r2
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d132      	bne.n	8006786 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006720:	4b49      	ldr	r3, [pc, #292]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	43db      	mvns	r3, r3
 8006728:	4947      	ldr	r1, [pc, #284]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 800672a:	4013      	ands	r3, r2
 800672c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800672e:	4b46      	ldr	r3, [pc, #280]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	43db      	mvns	r3, r3
 8006736:	4944      	ldr	r1, [pc, #272]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 8006738:	4013      	ands	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800673c:	4b42      	ldr	r3, [pc, #264]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	43db      	mvns	r3, r3
 8006744:	4940      	ldr	r1, [pc, #256]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 8006746:	4013      	ands	r3, r2
 8006748:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800674a:	4b3f      	ldr	r3, [pc, #252]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	43db      	mvns	r3, r3
 8006752:	493d      	ldr	r1, [pc, #244]	@ (8006848 <HAL_GPIO_DeInit+0x1f4>)
 8006754:	4013      	ands	r3, r2
 8006756:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	220f      	movs	r2, #15
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006768:	4a2e      	ldr	r2, [pc, #184]	@ (8006824 <HAL_GPIO_DeInit+0x1d0>)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	089b      	lsrs	r3, r3, #2
 800676e:	3302      	adds	r3, #2
 8006770:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	43da      	mvns	r2, r3
 8006778:	482a      	ldr	r0, [pc, #168]	@ (8006824 <HAL_GPIO_DeInit+0x1d0>)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	089b      	lsrs	r3, r3, #2
 800677e:	400a      	ands	r2, r1
 8006780:	3302      	adds	r3, #2
 8006782:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	2103      	movs	r1, #3
 8006790:	fa01 f303 	lsl.w	r3, r1, r3
 8006794:	43db      	mvns	r3, r3
 8006796:	401a      	ands	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	08da      	lsrs	r2, r3, #3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3208      	adds	r2, #8
 80067a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	220f      	movs	r2, #15
 80067b2:	fa02 f303 	lsl.w	r3, r2, r3
 80067b6:	43db      	mvns	r3, r3
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	08d2      	lsrs	r2, r2, #3
 80067bc:	4019      	ands	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3208      	adds	r2, #8
 80067c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	2103      	movs	r1, #3
 80067d0:	fa01 f303 	lsl.w	r3, r1, r3
 80067d4:	43db      	mvns	r3, r3
 80067d6:	401a      	ands	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	2101      	movs	r1, #1
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	fa01 f303 	lsl.w	r3, r1, r3
 80067e8:	43db      	mvns	r3, r3
 80067ea:	401a      	ands	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	2103      	movs	r1, #3
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	43db      	mvns	r3, r3
 8006800:	401a      	ands	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	3301      	adds	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	f67f af2e 	bls.w	8006670 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40013800 	.word	0x40013800
 8006828:	40020000 	.word	0x40020000
 800682c:	40020400 	.word	0x40020400
 8006830:	40020800 	.word	0x40020800
 8006834:	40020c00 	.word	0x40020c00
 8006838:	40021000 	.word	0x40021000
 800683c:	40021400 	.word	0x40021400
 8006840:	40021800 	.word	0x40021800
 8006844:	40021c00 	.word	0x40021c00
 8006848:	40013c00 	.word	0x40013c00

0800684c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
 8006858:	4613      	mov	r3, r2
 800685a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800685c:	787b      	ldrb	r3, [r7, #1]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006868:	e003      	b.n	8006872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800686a:	887b      	ldrh	r3, [r7, #2]
 800686c:	041a      	lsls	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	619a      	str	r2, [r3, #24]
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e03e      	b.n	8006912 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7fe fb49 	bl	8004f40 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f003 ff4d 	bl	800a758 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	f003 ff91 	bl	800a7f0 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	f003 ffbe 	bl	800a85a <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d108      	bne.n	80068f8 <HAL_NAND_Init+0x7a>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 0204 	orr.w	r2, r2, #4
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e007      	b.n	8006908 <HAL_NAND_Init+0x8a>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0204 	orr.w	r2, r2, #4
 8006906:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif /* (FMC_Bank2_3) || (FSMC_Bank2_3) */

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b10      	cmp	r3, #16
 8006928:	d10a      	bne.n	8006940 <HAL_NAND_IRQHandler+0x26>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e009      	b.n	8006954 <HAL_NAND_IRQHandler+0x3a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	bf0c      	ite	eq
 800694e:	2301      	moveq	r3, #1
 8006950:	2300      	movne	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d017      	beq.n	8006988 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8b2 	bl	8006ac2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b10      	cmp	r3, #16
 8006964:	d108      	bne.n	8006978 <HAL_NAND_IRQHandler+0x5e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	e007      	b.n	8006988 <HAL_NAND_IRQHandler+0x6e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	625a      	str	r2, [r3, #36]	@ 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b10      	cmp	r3, #16
 800698e:	d10a      	bne.n	80069a6 <HAL_NAND_IRQHandler+0x8c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b02      	cmp	r3, #2
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	e009      	b.n	80069ba <HAL_NAND_IRQHandler+0xa0>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f87f 	bl	8006ac2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d108      	bne.n	80069de <HAL_NAND_IRQHandler+0xc4>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0202 	bic.w	r2, r2, #2
 80069da:	605a      	str	r2, [r3, #4]
 80069dc:	e007      	b.n	80069ee <HAL_NAND_IRQHandler+0xd4>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0202 	bic.w	r2, r2, #2
 80069ec:	625a      	str	r2, [r3, #36]	@ 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d10a      	bne.n	8006a0c <HAL_NAND_IRQHandler+0xf2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	e009      	b.n	8006a20 <HAL_NAND_IRQHandler+0x106>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	f003 0304 	and.w	r3, r3, #4
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d017      	beq.n	8006a54 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f84c 	bl	8006ac2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d108      	bne.n	8006a44 <HAL_NAND_IRQHandler+0x12a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0204 	bic.w	r2, r2, #4
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	e007      	b.n	8006a54 <HAL_NAND_IRQHandler+0x13a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0204 	bic.w	r2, r2, #4
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d10a      	bne.n	8006a72 <HAL_NAND_IRQHandler+0x158>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	e009      	b.n	8006a86 <HAL_NAND_IRQHandler+0x16c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7c:	2b40      	cmp	r3, #64	@ 0x40
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d017      	beq.n	8006aba <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f819 	bl	8006ac2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d108      	bne.n	8006aaa <HAL_NAND_IRQHandler+0x190>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aa6:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8006aa8:	e007      	b.n	8006aba <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ab8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af02      	add	r7, sp, #8
 8006adc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e101      	b.n	8006cec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f007 fc18 	bl	800e338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b16:	d102      	bne.n	8006b1e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f003 ffe5 	bl	800aaf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7c1a      	ldrb	r2, [r3, #16]
 8006b30:	f88d 2000 	strb.w	r2, [sp]
 8006b34:	3304      	adds	r3, #4
 8006b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b38:	f003 fec4 	bl	800a8c4 <USB_CoreInit>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0ce      	b.n	8006cec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f003 ffdd 	bl	800ab14 <USB_SetCurrentMode>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d005      	beq.n	8006b6c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0bf      	b.n	8006cec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
 8006b70:	e04a      	b.n	8006c08 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b72:	7bfa      	ldrb	r2, [r7, #15]
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3315      	adds	r3, #21
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b86:	7bfa      	ldrb	r2, [r7, #15]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3314      	adds	r3, #20
 8006b96:	7bfa      	ldrb	r2, [r7, #15]
 8006b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b9a:	7bfa      	ldrb	r2, [r7, #15]
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	b298      	uxth	r0, r3
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	332e      	adds	r3, #46	@ 0x2e
 8006bae:	4602      	mov	r2, r0
 8006bb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006bb2:	7bfa      	ldrb	r2, [r7, #15]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3318      	adds	r3, #24
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bc6:	7bfa      	ldrb	r2, [r7, #15]
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	331c      	adds	r3, #28
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3320      	adds	r3, #32
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bee:	7bfa      	ldrb	r2, [r7, #15]
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	3324      	adds	r3, #36	@ 0x24
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	3301      	adds	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	791b      	ldrb	r3, [r3, #4]
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3af      	bcc.n	8006b72 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	e044      	b.n	8006ca2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c18:	7bfa      	ldrb	r2, [r7, #15]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c44:	7bfa      	ldrb	r2, [r7, #15]
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	440b      	add	r3, r1
 8006c52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c5a:	7bfa      	ldrb	r2, [r7, #15]
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d3b5      	bcc.n	8006c18 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	7c1a      	ldrb	r2, [r3, #16]
 8006cb4:	f88d 2000 	strb.w	r2, [sp]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cbc:	f003 ff76 	bl	800abac <USB_DevInit>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e00c      	b.n	8006cec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f004 ffba 	bl	800bc5e <USB_DevDisconnect>

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_PCD_Start+0x1c>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e022      	b.n	8006d56 <HAL_PCD_Start+0x62>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d105      	bne.n	8006d38 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f003 fec7 	bl	800aad0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f004 ff68 	bl	800bc1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d5e:	b590      	push	{r4, r7, lr}
 8006d60:	b08d      	sub	sp, #52	@ 0x34
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f005 f826 	bl	800bdc6 <USB_GetMode>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 848c 	bne.w	800769a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f004 ff8a 	bl	800bca0 <USB_ReadInterrupts>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8482 	beq.w	8007698 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f004 ff77 	bl	800bca0 <USB_ReadInterrupts>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d107      	bne.n	8006dcc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f002 0202 	and.w	r2, r2, #2
 8006dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f004 ff65 	bl	800bca0 <USB_ReadInterrupts>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d161      	bne.n	8006ea4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0210 	bic.w	r2, r2, #16
 8006dee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	0c5b      	lsrs	r3, r3, #17
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d124      	bne.n	8006e66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d035      	beq.n	8006e94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6a38      	ldr	r0, [r7, #32]
 8006e3c:	f004 fd9c 	bl	800b978 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	091b      	lsrs	r3, r3, #4
 8006e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e4c:	441a      	add	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	695a      	ldr	r2, [r3, #20]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e5e:	441a      	add	r2, r3
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	615a      	str	r2, [r3, #20]
 8006e64:	e016      	b.n	8006e94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	0c5b      	lsrs	r3, r3, #17
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d110      	bne.n	8006e94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e78:	2208      	movs	r2, #8
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6a38      	ldr	r0, [r7, #32]
 8006e7e:	f004 fd7b 	bl	800b978 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8e:	441a      	add	r2, r3
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0210 	orr.w	r2, r2, #16
 8006ea2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f004 fef9 	bl	800bca0 <USB_ReadInterrupts>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006eb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006eb8:	f040 80a7 	bne.w	800700a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f004 fefe 	bl	800bcc6 <USB_ReadDevAllOutEpInterrupt>
 8006eca:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006ecc:	e099      	b.n	8007002 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 808e 	beq.w	8006ff6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f004 ff22 	bl	800bd2e <USB_ReadDevOutEPInterrupt>
 8006eea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	2301      	movs	r3, #1
 8006f06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fea2 	bl	8007c54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0308 	and.w	r3, r3, #8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	461a      	mov	r2, r3
 8006f28:	2308      	movs	r3, #8
 8006f2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 ff78 	bl	8007e24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d030      	beq.n	8006fbc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f62:	2b80      	cmp	r3, #128	@ 0x80
 8006f64:	d109      	bne.n	8006f7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f007 facd 	bl	800e544 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2302      	movs	r3, #2
 8006fba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d008      	beq.n	8006fd8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006ff4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	085b      	lsrs	r3, r3, #1
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f af62 	bne.w	8006ece <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f004 fe46 	bl	800bca0 <USB_ReadInterrupts>
 8007014:	4603      	mov	r3, r0
 8007016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800701a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800701e:	f040 80db 	bne.w	80071d8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f004 fe67 	bl	800bcfa <USB_ReadDevAllInEpInterrupt>
 800702c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007032:	e0cd      	b.n	80071d0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80c2 	beq.w	80071c4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f004 fe8d 	bl	800bd6a <USB_ReadDevInEPInterrupt>
 8007050:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b00      	cmp	r3, #0
 800705a:	d057      	beq.n	800710c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	43db      	mvns	r3, r3
 8007076:	69f9      	ldr	r1, [r7, #28]
 8007078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800707c:	4013      	ands	r3, r2
 800707e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	461a      	mov	r2, r3
 800708e:	2301      	movs	r3, #1
 8007090:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	799b      	ldrb	r3, [r3, #6]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d132      	bne.n	8007100 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800709e:	4613      	mov	r3, r2
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	3320      	adds	r3, #32
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4403      	add	r3, r0
 80070ba:	331c      	adds	r3, #28
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4419      	add	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4403      	add	r3, r0
 80070ce:	3320      	adds	r3, #32
 80070d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80070d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d113      	bne.n	8007100 <HAL_PCD_IRQHandler+0x3a2>
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	3324      	adds	r3, #36	@ 0x24
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d108      	bne.n	8007100 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070f8:	461a      	mov	r2, r3
 80070fa:	2101      	movs	r1, #1
 80070fc:	f004 fe94 	bl	800be28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	b2db      	uxtb	r3, r3
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f007 f997 	bl	800e43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f003 0308 	and.w	r3, r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007122:	461a      	mov	r2, r3
 8007124:	2308      	movs	r3, #8
 8007126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b00      	cmp	r3, #0
 8007130:	d008      	beq.n	8007144 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800713e:	461a      	mov	r2, r3
 8007140:	2310      	movs	r3, #16
 8007142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800715a:	461a      	mov	r2, r3
 800715c:	2340      	movs	r3, #64	@ 0x40
 800715e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d023      	beq.n	80071b2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800716a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800716c:	6a38      	ldr	r0, [r7, #32]
 800716e:	f003 fe81 	bl	800ae74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007174:	4613      	mov	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	3310      	adds	r3, #16
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	78db      	ldrb	r3, [r3, #3]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d108      	bne.n	80071a0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	b2db      	uxtb	r3, r3
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f007 f9e4 	bl	800e568 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	2302      	movs	r3, #2
 80071b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80071bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fcbb 	bl	8007b3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	3301      	adds	r3, #1
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80071d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f47f af2e 	bne.w	8007034 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f004 fd5f 	bl	800bca0 <USB_ReadInterrupts>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ec:	d122      	bne.n	8007234 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007208:	2b01      	cmp	r3, #1
 800720a:	d108      	bne.n	800721e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fea2 	bl	8007f60 <HAL_PCDEx_LPM_Callback>
 800721c:	e002      	b.n	8007224 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f007 f982 	bl	800e528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f004 fd31 	bl	800bca0 <USB_ReadInterrupts>
 800723e:	4603      	mov	r3, r0
 8007240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007248:	d112      	bne.n	8007270 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d102      	bne.n	8007260 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f007 f93e 	bl	800e4dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695a      	ldr	r2, [r3, #20]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800726e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f004 fd13 	bl	800bca0 <USB_ReadInterrupts>
 800727a:	4603      	mov	r3, r0
 800727c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007284:	f040 80b7 	bne.w	80073f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2110      	movs	r1, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f003 fde6 	bl	800ae74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072ac:	e046      	b.n	800733c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80072e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80072e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ee:	461a      	mov	r2, r3
 80072f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007314:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007330:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007334:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	3301      	adds	r3, #1
 800733a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	791b      	ldrb	r3, [r3, #4]
 8007340:	461a      	mov	r2, r3
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	4293      	cmp	r3, r2
 8007346:	d3b2      	bcc.n	80072ae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007356:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800735a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	7bdb      	ldrb	r3, [r3, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d016      	beq.n	8007392 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007374:	f043 030b 	orr.w	r3, r3, #11
 8007378:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800738a:	f043 030b 	orr.w	r3, r3, #11
 800738e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007390:	e015      	b.n	80073be <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80073a4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80073a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073b8:	f043 030b 	orr.w	r3, r3, #11
 80073bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073cc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80073e0:	461a      	mov	r2, r3
 80073e2:	f004 fd21 	bl	800be28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	695a      	ldr	r2, [r3, #20]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80073f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f004 fc50 	bl	800bca0 <USB_ReadInterrupts>
 8007400:	4603      	mov	r3, r0
 8007402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740a:	d123      	bne.n	8007454 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f004 fce6 	bl	800bde2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4618      	mov	r0, r3
 800741c:	f003 fda3 	bl	800af66 <USB_GetDevSpeed>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681c      	ldr	r4, [r3, #0]
 800742c:	f001 f9d4 	bl	80087d8 <HAL_RCC_GetHCLKFreq>
 8007430:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007436:	461a      	mov	r2, r3
 8007438:	4620      	mov	r0, r4
 800743a:	f003 faa7 	bl	800a98c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f007 f823 	bl	800e48a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695a      	ldr	r2, [r3, #20]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007452:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f004 fc21 	bl	800bca0 <USB_ReadInterrupts>
 800745e:	4603      	mov	r3, r0
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b08      	cmp	r3, #8
 8007466:	d10a      	bne.n	800747e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f007 f800 	bl	800e46e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f002 0208 	and.w	r2, r2, #8
 800747c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f004 fc0c 	bl	800bca0 <USB_ReadInterrupts>
 8007488:	4603      	mov	r3, r0
 800748a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748e:	2b80      	cmp	r3, #128	@ 0x80
 8007490:	d123      	bne.n	80074da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800749e:	2301      	movs	r3, #1
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a2:	e014      	b.n	80074ce <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a8:	4613      	mov	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	440b      	add	r3, r1
 80074b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d105      	bne.n	80074c8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb08 	bl	8007ad8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	3301      	adds	r3, #1
 80074cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	791b      	ldrb	r3, [r3, #4]
 80074d2:	461a      	mov	r2, r3
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d3e4      	bcc.n	80074a4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f004 fbde 	bl	800bca0 <USB_ReadInterrupts>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ee:	d13c      	bne.n	800756a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074f0:	2301      	movs	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f4:	e02b      	b.n	800754e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3318      	adds	r3, #24
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d115      	bne.n	8007548 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800751c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800751e:	2b00      	cmp	r3, #0
 8007520:	da12      	bge.n	8007548 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007526:	4613      	mov	r3, r2
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3317      	adds	r3, #23
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fac8 	bl	8007ad8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	791b      	ldrb	r3, [r3, #4]
 8007552:	461a      	mov	r2, r3
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	4293      	cmp	r3, r2
 8007558:	d3cd      	bcc.n	80074f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695a      	ldr	r2, [r3, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f004 fb96 	bl	800bca0 <USB_ReadInterrupts>
 8007574:	4603      	mov	r3, r0
 8007576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800757a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800757e:	d156      	bne.n	800762e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007580:	2301      	movs	r3, #1
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
 8007584:	e045      	b.n	8007612 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d12e      	bne.n	800760c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da2b      	bge.n	800760c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80075c0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d121      	bne.n	800760c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075cc:	4613      	mov	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80075da:	2201      	movs	r2, #1
 80075dc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007608:	6053      	str	r3, [r2, #4]
            break;
 800760a:	e008      	b.n	800761e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	3301      	adds	r3, #1
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	791b      	ldrb	r3, [r3, #4]
 8007616:	461a      	mov	r2, r3
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	4293      	cmp	r3, r2
 800761c:	d3b3      	bcc.n	8007586 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800762c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f004 fb34 	bl	800bca0 <USB_ReadInterrupts>
 8007638:	4603      	mov	r3, r0
 800763a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007642:	d10a      	bne.n	800765a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f006 ffa1 	bl	800e58c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695a      	ldr	r2, [r3, #20]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f004 fb1e 	bl	800bca0 <USB_ReadInterrupts>
 8007664:	4603      	mov	r3, r0
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d115      	bne.n	800769a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f006 ff91 	bl	800e5a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6859      	ldr	r1, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	e000      	b.n	800769a <HAL_PCD_IRQHandler+0x93c>
      return;
 8007698:	bf00      	nop
    }
  }
}
 800769a:	3734      	adds	r7, #52	@ 0x34
 800769c:	46bd      	mov	sp, r7
 800769e:	bd90      	pop	{r4, r7, pc}

080076a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d101      	bne.n	80076ba <HAL_PCD_SetAddress+0x1a>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e012      	b.n	80076e0 <HAL_PCD_SetAddress+0x40>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f004 fa7d 	bl	800bbd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	70fb      	strb	r3, [r7, #3]
 80076fa:	460b      	mov	r3, r1
 80076fc:	803b      	strh	r3, [r7, #0]
 80076fe:	4613      	mov	r3, r2
 8007700:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800770a:	2b00      	cmp	r3, #0
 800770c:	da0f      	bge.n	800772e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	f003 020f 	and.w	r2, r3, #15
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	3310      	adds	r3, #16
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	3304      	adds	r3, #4
 8007724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	705a      	strb	r2, [r3, #1]
 800772c:	e00f      	b.n	800774e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 020f 	and.w	r2, r3, #15
 8007734:	4613      	mov	r3, r2
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	3304      	adds	r3, #4
 8007746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800775a:	883a      	ldrh	r2, [r7, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	78ba      	ldrb	r2, [r7, #2]
 8007764:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d004      	beq.n	8007778 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007778:	78bb      	ldrb	r3, [r7, #2]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d102      	bne.n	8007784 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <HAL_PCD_EP_Open+0xaa>
 800778e:	2302      	movs	r3, #2
 8007790:	e00e      	b.n	80077b0 <HAL_PCD_EP_Open+0xc8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f003 fc05 	bl	800afb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80077ae:	7afb      	ldrb	r3, [r7, #11]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	da0f      	bge.n	80077ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	f003 020f 	and.w	r2, r3, #15
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	3310      	adds	r3, #16
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4413      	add	r3, r2
 80077e0:	3304      	adds	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	705a      	strb	r2, [r3, #1]
 80077ea:	e00f      	b.n	800780c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	f003 020f 	and.w	r2, r3, #15
 80077f2:	4613      	mov	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	3304      	adds	r3, #4
 8007804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_PCD_EP_Close+0x6e>
 8007822:	2302      	movs	r3, #2
 8007824:	e00e      	b.n	8007844 <HAL_PCD_EP_Close+0x8c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	4618      	mov	r0, r3
 8007836:	f003 fc43 	bl	800b0c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	607a      	str	r2, [r7, #4]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	460b      	mov	r3, r1
 800785a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	f003 020f 	and.w	r2, r3, #15
 8007862:	4613      	mov	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	3304      	adds	r3, #4
 8007874:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2200      	movs	r2, #0
 800788c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	b2da      	uxtb	r2, r3
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	799b      	ldrb	r3, [r3, #6]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d102      	bne.n	80078a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	799b      	ldrb	r3, [r3, #6]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6979      	ldr	r1, [r7, #20]
 80078b4:	f003 fce0 	bl	800b278 <USB_EPStartXfer>

  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80078e4:	681b      	ldr	r3, [r3, #0]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b086      	sub	sp, #24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	460b      	mov	r3, r1
 8007900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	4613      	mov	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3310      	adds	r3, #16
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2201      	movs	r2, #1
 8007930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	b2da      	uxtb	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	799b      	ldrb	r3, [r3, #6]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d102      	bne.n	800794c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	799b      	ldrb	r3, [r3, #6]
 8007954:	461a      	mov	r2, r3
 8007956:	6979      	ldr	r1, [r7, #20]
 8007958:	f003 fc8e 	bl	800b278 <USB_EPStartXfer>

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3718      	adds	r7, #24
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	7912      	ldrb	r2, [r2, #4]
 800797c:	4293      	cmp	r3, r2
 800797e:	d901      	bls.n	8007984 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e04f      	b.n	8007a24 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0f      	bge.n	80079ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	f003 020f 	and.w	r2, r3, #15
 8007992:	4613      	mov	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2201      	movs	r2, #1
 80079a8:	705a      	strb	r2, [r3, #1]
 80079aa:	e00d      	b.n	80079c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	3304      	adds	r3, #4
 80079c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2201      	movs	r2, #1
 80079cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_PCD_EP_SetStall+0x82>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e01d      	b.n	8007a24 <HAL_PCD_EP_SetStall+0xbe>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68f9      	ldr	r1, [r7, #12]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f004 f816 	bl	800ba28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7999      	ldrb	r1, [r3, #6]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a14:	461a      	mov	r2, r3
 8007a16:	f004 fa07 	bl	800be28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	7912      	ldrb	r2, [r2, #4]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d901      	bls.n	8007a4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e042      	b.n	8007ad0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	da0f      	bge.n	8007a72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	3310      	adds	r3, #16
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	705a      	strb	r2, [r3, #1]
 8007a70:	e00f      	b.n	8007a92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	f003 020f 	and.w	r2, r3, #15
 8007a78:	4613      	mov	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_PCD_EP_ClrStall+0x86>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e00e      	b.n	8007ad0 <HAL_PCD_EP_ClrStall+0xa4>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f004 f81f 	bl	800bb04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	da0c      	bge.n	8007b06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	f003 020f 	and.w	r2, r3, #15
 8007af2:	4613      	mov	r3, r2
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	3310      	adds	r3, #16
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4413      	add	r3, r2
 8007b00:	3304      	adds	r3, #4
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e00c      	b.n	8007b20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68f9      	ldr	r1, [r7, #12]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f003 fe3e 	bl	800b7a8 <USB_EPStopXfer>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b08a      	sub	sp, #40	@ 0x28
 8007b3e:	af02      	add	r7, sp, #8
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	3310      	adds	r3, #16
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3304      	adds	r3, #4
 8007b60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	695a      	ldr	r2, [r3, #20]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d901      	bls.n	8007b72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e06b      	b.n	8007c4a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	3303      	adds	r3, #3
 8007b92:	089b      	lsrs	r3, r3, #2
 8007b94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b96:	e02a      	b.n	8007bee <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	69fa      	ldr	r2, [r7, #28]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d902      	bls.n	8007bb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	3303      	adds	r3, #3
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68d9      	ldr	r1, [r3, #12]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6978      	ldr	r0, [r7, #20]
 8007bd2:	f003 fe93 	bl	800b8fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	695a      	ldr	r2, [r3, #20]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	441a      	add	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d809      	bhi.n	8007c18 <PCD_WriteEmptyTxFifo+0xde>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	695a      	ldr	r2, [r3, #20]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d203      	bcs.n	8007c18 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1bf      	bne.n	8007b98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d811      	bhi.n	8007c48 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c30:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	6939      	ldr	r1, [r7, #16]
 8007c40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c44:	4013      	ands	r3, r2
 8007c46:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	333c      	adds	r3, #60	@ 0x3c
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	799b      	ldrb	r3, [r3, #6]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d17b      	bne.n	8007d82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f003 0308 	and.w	r3, r3, #8
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d015      	beq.n	8007cc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	4a61      	ldr	r2, [pc, #388]	@ (8007e1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	f240 80b9 	bls.w	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80b3 	beq.w	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cbc:	6093      	str	r3, [r2, #8]
 8007cbe:	e0a7      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2320      	movs	r3, #32
 8007cda:	6093      	str	r3, [r2, #8]
 8007cdc:	e098      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f040 8093 	bne.w	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4a4b      	ldr	r2, [pc, #300]	@ (8007e1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d90f      	bls.n	8007d12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d08:	461a      	mov	r2, r3
 8007d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d0e:	6093      	str	r3, [r2, #8]
 8007d10:	e07e      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	3304      	adds	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	0159      	lsls	r1, r3, #5
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	440b      	add	r3, r1
 8007d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d114      	bne.n	8007d74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d109      	bne.n	8007d66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2101      	movs	r1, #1
 8007d60:	f004 f862 	bl	800be28 <USB_EP0_OutStart>
 8007d64:	e006      	b.n	8007d74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	441a      	add	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f006 fb42 	bl	800e404 <HAL_PCD_DataOutStageCallback>
 8007d80:	e046      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d124      	bne.n	8007dd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00a      	beq.n	8007daa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da0:	461a      	mov	r2, r3
 8007da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007da6:	6093      	str	r3, [r2, #8]
 8007da8:	e032      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2320      	movs	r3, #32
 8007dc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f006 fb19 	bl	800e404 <HAL_PCD_DataOutStageCallback>
 8007dd2:	e01d      	b.n	8007e10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d114      	bne.n	8007e04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	4613      	mov	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d108      	bne.n	8007e04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	2100      	movs	r1, #0
 8007e00:	f004 f812 	bl	800be28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f006 fafa 	bl	800e404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	4f54300a 	.word	0x4f54300a
 8007e20:	4f54310a 	.word	0x4f54310a

08007e24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	333c      	adds	r3, #60	@ 0x3c
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a15      	ldr	r2, [pc, #84]	@ (8007eac <PCD_EP_OutSetupPacket_int+0x88>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d90e      	bls.n	8007e78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d009      	beq.n	8007e78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	015a      	lsls	r2, r3, #5
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e70:	461a      	mov	r2, r3
 8007e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f006 fab1 	bl	800e3e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	@ (8007eac <PCD_EP_OutSetupPacket_int+0x88>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d90c      	bls.n	8007ea0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	799b      	ldrb	r3, [r3, #6]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d108      	bne.n	8007ea0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	f003 ffc4 	bl	800be28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	4f54300a 	.word	0x4f54300a

08007eb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007ece:	883b      	ldrh	r3, [r7, #0]
 8007ed0:	0419      	lsls	r1, r3, #16
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8007edc:	e028      	b.n	8007f30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	0c1b      	lsrs	r3, r3, #16
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
 8007ef0:	e00d      	b.n	8007f0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	3340      	adds	r3, #64	@ 0x40
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	73fb      	strb	r3, [r7, #15]
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d3ec      	bcc.n	8007ef2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f18:	883b      	ldrh	r3, [r7, #0]
 8007f1a:	0418      	lsls	r0, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4302      	orrs	r2, r0
 8007f28:	3340      	adds	r3, #64	@ 0x40
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b083      	sub	sp, #12
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	887a      	ldrh	r2, [r7, #2]
 8007f50:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e267      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d075      	beq.n	8008082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f96:	4b88      	ldr	r3, [pc, #544]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 030c 	and.w	r3, r3, #12
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d00c      	beq.n	8007fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fa2:	4b85      	ldr	r3, [pc, #532]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d112      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fae:	4b82      	ldr	r3, [pc, #520]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fba:	d10b      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d05b      	beq.n	8008080 <HAL_RCC_OscConfig+0x108>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d157      	bne.n	8008080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e242      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fdc:	d106      	bne.n	8007fec <HAL_RCC_OscConfig+0x74>
 8007fde:	4b76      	ldr	r3, [pc, #472]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a75      	ldr	r2, [pc, #468]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e01d      	b.n	8008028 <HAL_RCC_OscConfig+0xb0>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ff4:	d10c      	bne.n	8008010 <HAL_RCC_OscConfig+0x98>
 8007ff6:	4b70      	ldr	r3, [pc, #448]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8007ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	4b6d      	ldr	r3, [pc, #436]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a6c      	ldr	r2, [pc, #432]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	e00b      	b.n	8008028 <HAL_RCC_OscConfig+0xb0>
 8008010:	4b69      	ldr	r3, [pc, #420]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a68      	ldr	r2, [pc, #416]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	4b66      	ldr	r3, [pc, #408]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a65      	ldr	r2, [pc, #404]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d013      	beq.n	8008058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008030:	f7fd fc66 	bl	8005900 <HAL_GetTick>
 8008034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008038:	f7fd fc62 	bl	8005900 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b64      	cmp	r3, #100	@ 0x64
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e207      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804a:	4b5b      	ldr	r3, [pc, #364]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f0      	beq.n	8008038 <HAL_RCC_OscConfig+0xc0>
 8008056:	e014      	b.n	8008082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008058:	f7fd fc52 	bl	8005900 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008060:	f7fd fc4e 	bl	8005900 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b64      	cmp	r3, #100	@ 0x64
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e1f3      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008072:	4b51      	ldr	r3, [pc, #324]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1f0      	bne.n	8008060 <HAL_RCC_OscConfig+0xe8>
 800807e:	e000      	b.n	8008082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d063      	beq.n	8008156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800808e:	4b4a      	ldr	r3, [pc, #296]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f003 030c 	and.w	r3, r3, #12
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800809a:	4b47      	ldr	r3, [pc, #284]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d11c      	bne.n	80080e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080a6:	4b44      	ldr	r3, [pc, #272]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d116      	bne.n	80080e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080b2:	4b41      	ldr	r3, [pc, #260]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d005      	beq.n	80080ca <HAL_RCC_OscConfig+0x152>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d001      	beq.n	80080ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e1c7      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ca:	4b3b      	ldr	r3, [pc, #236]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	4937      	ldr	r1, [pc, #220]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080de:	e03a      	b.n	8008156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d020      	beq.n	800812a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080e8:	4b34      	ldr	r3, [pc, #208]	@ (80081bc <HAL_RCC_OscConfig+0x244>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ee:	f7fd fc07 	bl	8005900 <HAL_GetTick>
 80080f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f4:	e008      	b.n	8008108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080f6:	f7fd fc03 	bl	8005900 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e1a8      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008108:	4b2b      	ldr	r3, [pc, #172]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d0f0      	beq.n	80080f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008114:	4b28      	ldr	r3, [pc, #160]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	4925      	ldr	r1, [pc, #148]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 8008124:	4313      	orrs	r3, r2
 8008126:	600b      	str	r3, [r1, #0]
 8008128:	e015      	b.n	8008156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800812a:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <HAL_RCC_OscConfig+0x244>)
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008130:	f7fd fbe6 	bl	8005900 <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008138:	f7fd fbe2 	bl	8005900 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e187      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800814a:	4b1b      	ldr	r3, [pc, #108]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1f0      	bne.n	8008138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d036      	beq.n	80081d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d016      	beq.n	8008198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800816a:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <HAL_RCC_OscConfig+0x248>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008170:	f7fd fbc6 	bl	8005900 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008178:	f7fd fbc2 	bl	8005900 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e167      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800818a:	4b0b      	ldr	r3, [pc, #44]	@ (80081b8 <HAL_RCC_OscConfig+0x240>)
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f0      	beq.n	8008178 <HAL_RCC_OscConfig+0x200>
 8008196:	e01b      	b.n	80081d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008198:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <HAL_RCC_OscConfig+0x248>)
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800819e:	f7fd fbaf 	bl	8005900 <HAL_GetTick>
 80081a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a4:	e00e      	b.n	80081c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081a6:	f7fd fbab 	bl	8005900 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d907      	bls.n	80081c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e150      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
 80081b8:	40023800 	.word	0x40023800
 80081bc:	42470000 	.word	0x42470000
 80081c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081c4:	4b88      	ldr	r3, [pc, #544]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80081c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ea      	bne.n	80081a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8097 	beq.w	800830c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081e2:	4b81      	ldr	r3, [pc, #516]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10f      	bne.n	800820e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	4b7d      	ldr	r3, [pc, #500]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	4a7c      	ldr	r2, [pc, #496]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80081f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80081fe:	4b7a      	ldr	r3, [pc, #488]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008206:	60bb      	str	r3, [r7, #8]
 8008208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800820a:	2301      	movs	r3, #1
 800820c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820e:	4b77      	ldr	r3, [pc, #476]	@ (80083ec <HAL_RCC_OscConfig+0x474>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008216:	2b00      	cmp	r3, #0
 8008218:	d118      	bne.n	800824c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800821a:	4b74      	ldr	r3, [pc, #464]	@ (80083ec <HAL_RCC_OscConfig+0x474>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a73      	ldr	r2, [pc, #460]	@ (80083ec <HAL_RCC_OscConfig+0x474>)
 8008220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008226:	f7fd fb6b 	bl	8005900 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800822c:	e008      	b.n	8008240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800822e:	f7fd fb67 	bl	8005900 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e10c      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008240:	4b6a      	ldr	r3, [pc, #424]	@ (80083ec <HAL_RCC_OscConfig+0x474>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0f0      	beq.n	800822e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d106      	bne.n	8008262 <HAL_RCC_OscConfig+0x2ea>
 8008254:	4b64      	ldr	r3, [pc, #400]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008258:	4a63      	ldr	r2, [pc, #396]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008260:	e01c      	b.n	800829c <HAL_RCC_OscConfig+0x324>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b05      	cmp	r3, #5
 8008268:	d10c      	bne.n	8008284 <HAL_RCC_OscConfig+0x30c>
 800826a:	4b5f      	ldr	r3, [pc, #380]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	4a5e      	ldr	r2, [pc, #376]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008270:	f043 0304 	orr.w	r3, r3, #4
 8008274:	6713      	str	r3, [r2, #112]	@ 0x70
 8008276:	4b5c      	ldr	r3, [pc, #368]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827a:	4a5b      	ldr	r2, [pc, #364]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	6713      	str	r3, [r2, #112]	@ 0x70
 8008282:	e00b      	b.n	800829c <HAL_RCC_OscConfig+0x324>
 8008284:	4b58      	ldr	r3, [pc, #352]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008288:	4a57      	ldr	r2, [pc, #348]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008290:	4b55      	ldr	r3, [pc, #340]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008294:	4a54      	ldr	r2, [pc, #336]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008296:	f023 0304 	bic.w	r3, r3, #4
 800829a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d015      	beq.n	80082d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a4:	f7fd fb2c 	bl	8005900 <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082aa:	e00a      	b.n	80082c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ac:	f7fd fb28 	bl	8005900 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e0cb      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c2:	4b49      	ldr	r3, [pc, #292]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0ee      	beq.n	80082ac <HAL_RCC_OscConfig+0x334>
 80082ce:	e014      	b.n	80082fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d0:	f7fd fb16 	bl	8005900 <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d8:	f7fd fb12 	bl	8005900 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e0b5      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ee:	4b3e      	ldr	r3, [pc, #248]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1ee      	bne.n	80082d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d105      	bne.n	800830c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008300:	4b39      	ldr	r3, [pc, #228]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008304:	4a38      	ldr	r2, [pc, #224]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800830a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80a1 	beq.w	8008458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008316:	4b34      	ldr	r3, [pc, #208]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 030c 	and.w	r3, r3, #12
 800831e:	2b08      	cmp	r3, #8
 8008320:	d05c      	beq.n	80083dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d141      	bne.n	80083ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832a:	4b31      	ldr	r3, [pc, #196]	@ (80083f0 <HAL_RCC_OscConfig+0x478>)
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008330:	f7fd fae6 	bl	8005900 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008338:	f7fd fae2 	bl	8005900 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b02      	cmp	r3, #2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e087      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800834a:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f0      	bne.n	8008338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	019b      	lsls	r3, r3, #6
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	3b01      	subs	r3, #1
 8008370:	041b      	lsls	r3, r3, #16
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	061b      	lsls	r3, r3, #24
 800837a:	491b      	ldr	r1, [pc, #108]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 800837c:	4313      	orrs	r3, r2
 800837e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008380:	4b1b      	ldr	r3, [pc, #108]	@ (80083f0 <HAL_RCC_OscConfig+0x478>)
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008386:	f7fd fabb 	bl	8005900 <HAL_GetTick>
 800838a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800838c:	e008      	b.n	80083a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800838e:	f7fd fab7 	bl	8005900 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e05c      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083a0:	4b11      	ldr	r3, [pc, #68]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f0      	beq.n	800838e <HAL_RCC_OscConfig+0x416>
 80083ac:	e054      	b.n	8008458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ae:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <HAL_RCC_OscConfig+0x478>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b4:	f7fd faa4 	bl	8005900 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083bc:	f7fd faa0 	bl	8005900 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e045      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <HAL_RCC_OscConfig+0x470>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f0      	bne.n	80083bc <HAL_RCC_OscConfig+0x444>
 80083da:	e03d      	b.n	8008458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d107      	bne.n	80083f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e038      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40007000 	.word	0x40007000
 80083f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008464 <HAL_RCC_OscConfig+0x4ec>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d028      	beq.n	8008454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800840c:	429a      	cmp	r2, r3
 800840e:	d121      	bne.n	8008454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800841a:	429a      	cmp	r2, r3
 800841c:	d11a      	bne.n	8008454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008424:	4013      	ands	r3, r2
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800842a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800842c:	4293      	cmp	r3, r2
 800842e:	d111      	bne.n	8008454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	3b01      	subs	r3, #1
 800843e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	d107      	bne.n	8008454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d001      	beq.n	8008458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40023800 	.word	0x40023800

08008468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e0cc      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800847c:	4b68      	ldr	r3, [pc, #416]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d90c      	bls.n	80084a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848a:	4b65      	ldr	r3, [pc, #404]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008492:	4b63      	ldr	r3, [pc, #396]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d001      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0b8      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d020      	beq.n	80084f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084bc:	4b59      	ldr	r3, [pc, #356]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	4a58      	ldr	r2, [pc, #352]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0308 	and.w	r3, r3, #8
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084d4:	4b53      	ldr	r3, [pc, #332]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	4a52      	ldr	r2, [pc, #328]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084e0:	4b50      	ldr	r3, [pc, #320]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	494d      	ldr	r1, [pc, #308]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d044      	beq.n	8008588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d107      	bne.n	8008516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008506:	4b47      	ldr	r3, [pc, #284]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d119      	bne.n	8008546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e07f      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d003      	beq.n	8008526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008522:	2b03      	cmp	r3, #3
 8008524:	d107      	bne.n	8008536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008526:	4b3f      	ldr	r3, [pc, #252]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e06f      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008536:	4b3b      	ldr	r3, [pc, #236]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e067      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008546:	4b37      	ldr	r3, [pc, #220]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f023 0203 	bic.w	r2, r3, #3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	4934      	ldr	r1, [pc, #208]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	4313      	orrs	r3, r2
 8008556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008558:	f7fd f9d2 	bl	8005900 <HAL_GetTick>
 800855c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855e:	e00a      	b.n	8008576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008560:	f7fd f9ce 	bl	8005900 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e04f      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008576:	4b2b      	ldr	r3, [pc, #172]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 020c 	and.w	r2, r3, #12
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	429a      	cmp	r2, r3
 8008586:	d1eb      	bne.n	8008560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008588:	4b25      	ldr	r3, [pc, #148]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d20c      	bcs.n	80085b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b22      	ldr	r3, [pc, #136]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	b2d2      	uxtb	r2, r2
 800859c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b20      	ldr	r3, [pc, #128]	@ (8008620 <HAL_RCC_ClockConfig+0x1b8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d001      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e032      	b.n	8008616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0304 	and.w	r3, r3, #4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d008      	beq.n	80085ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085bc:	4b19      	ldr	r3, [pc, #100]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4916      	ldr	r1, [pc, #88]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085da:	4b12      	ldr	r3, [pc, #72]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	490e      	ldr	r1, [pc, #56]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085ee:	f000 f82d 	bl	800864c <HAL_RCC_GetSysClockFreq>
 80085f2:	4602      	mov	r2, r0
 80085f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008624 <HAL_RCC_ClockConfig+0x1bc>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	091b      	lsrs	r3, r3, #4
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	490a      	ldr	r1, [pc, #40]	@ (8008628 <HAL_RCC_ClockConfig+0x1c0>)
 8008600:	5ccb      	ldrb	r3, [r1, r3]
 8008602:	fa22 f303 	lsr.w	r3, r2, r3
 8008606:	4a09      	ldr	r2, [pc, #36]	@ (800862c <HAL_RCC_ClockConfig+0x1c4>)
 8008608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800860a:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <HAL_RCC_ClockConfig+0x1c8>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd f932 	bl	8005878 <HAL_InitTick>

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	40023c00 	.word	0x40023c00
 8008624:	40023800 	.word	0x40023800
 8008628:	08018958 	.word	0x08018958
 800862c:	20000000 	.word	0x20000000
 8008630:	20000004 	.word	0x20000004

08008634 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8008638:	4b03      	ldr	r3, [pc, #12]	@ (8008648 <HAL_RCC_EnableCSS+0x14>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	4247004c 	.word	0x4247004c

0800864c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800864c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008650:	b090      	sub	sp, #64	@ 0x40
 8008652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
 8008658:	2300      	movs	r3, #0
 800865a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865c:	2300      	movs	r3, #0
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008664:	4b59      	ldr	r3, [pc, #356]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f003 030c 	and.w	r3, r3, #12
 800866c:	2b08      	cmp	r3, #8
 800866e:	d00d      	beq.n	800868c <HAL_RCC_GetSysClockFreq+0x40>
 8008670:	2b08      	cmp	r3, #8
 8008672:	f200 80a1 	bhi.w	80087b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <HAL_RCC_GetSysClockFreq+0x34>
 800867a:	2b04      	cmp	r3, #4
 800867c:	d003      	beq.n	8008686 <HAL_RCC_GetSysClockFreq+0x3a>
 800867e:	e09b      	b.n	80087b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008680:	4b53      	ldr	r3, [pc, #332]	@ (80087d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008682:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008684:	e09b      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008686:	4b53      	ldr	r3, [pc, #332]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008688:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800868a:	e098      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800868c:	4b4f      	ldr	r3, [pc, #316]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008696:	4b4d      	ldr	r3, [pc, #308]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d028      	beq.n	80086f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086a2:	4b4a      	ldr	r3, [pc, #296]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	099b      	lsrs	r3, r3, #6
 80086a8:	2200      	movs	r2, #0
 80086aa:	623b      	str	r3, [r7, #32]
 80086ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80086b4:	2100      	movs	r1, #0
 80086b6:	4b47      	ldr	r3, [pc, #284]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80086b8:	fb03 f201 	mul.w	r2, r3, r1
 80086bc:	2300      	movs	r3, #0
 80086be:	fb00 f303 	mul.w	r3, r0, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	4a43      	ldr	r2, [pc, #268]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80086c6:	fba0 1202 	umull	r1, r2, r0, r2
 80086ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086cc:	460a      	mov	r2, r1
 80086ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80086d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086d2:	4413      	add	r3, r2
 80086d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	2200      	movs	r2, #0
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	61fa      	str	r2, [r7, #28]
 80086de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80086e6:	f7fc fa5f 	bl	8004ba8 <__aeabi_uldivmod>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4613      	mov	r3, r2
 80086f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086f2:	e053      	b.n	800879c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086f4:	4b35      	ldr	r3, [pc, #212]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	099b      	lsrs	r3, r3, #6
 80086fa:	2200      	movs	r2, #0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	617a      	str	r2, [r7, #20]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008706:	f04f 0b00 	mov.w	fp, #0
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	f04f 0000 	mov.w	r0, #0
 8008712:	f04f 0100 	mov.w	r1, #0
 8008716:	0159      	lsls	r1, r3, #5
 8008718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800871c:	0150      	lsls	r0, r2, #5
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	ebb2 080a 	subs.w	r8, r2, sl
 8008726:	eb63 090b 	sbc.w	r9, r3, fp
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	f04f 0300 	mov.w	r3, #0
 8008732:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008736:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800873a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800873e:	ebb2 0408 	subs.w	r4, r2, r8
 8008742:	eb63 0509 	sbc.w	r5, r3, r9
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	00eb      	lsls	r3, r5, #3
 8008750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008754:	00e2      	lsls	r2, r4, #3
 8008756:	4614      	mov	r4, r2
 8008758:	461d      	mov	r5, r3
 800875a:	eb14 030a 	adds.w	r3, r4, sl
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	eb45 030b 	adc.w	r3, r5, fp
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008772:	4629      	mov	r1, r5
 8008774:	028b      	lsls	r3, r1, #10
 8008776:	4621      	mov	r1, r4
 8008778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800877c:	4621      	mov	r1, r4
 800877e:	028a      	lsls	r2, r1, #10
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	2200      	movs	r2, #0
 8008788:	60bb      	str	r3, [r7, #8]
 800878a:	60fa      	str	r2, [r7, #12]
 800878c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008790:	f7fc fa0a 	bl	8004ba8 <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4613      	mov	r3, r2
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800879c:	4b0b      	ldr	r3, [pc, #44]	@ (80087cc <HAL_RCC_GetSysClockFreq+0x180>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	3301      	adds	r3, #1
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80087ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087b6:	e002      	b.n	80087be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087b8:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80087ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80087bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3740      	adds	r7, #64	@ 0x40
 80087c4:	46bd      	mov	sp, r7
 80087c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ca:	bf00      	nop
 80087cc:	40023800 	.word	0x40023800
 80087d0:	00f42400 	.word	0x00f42400
 80087d4:	00989680 	.word	0x00989680

080087d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087dc:	4b03      	ldr	r3, [pc, #12]	@ (80087ec <HAL_RCC_GetHCLKFreq+0x14>)
 80087de:	681b      	ldr	r3, [r3, #0]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20000000 	.word	0x20000000

080087f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087f4:	f7ff fff0 	bl	80087d8 <HAL_RCC_GetHCLKFreq>
 80087f8:	4602      	mov	r2, r0
 80087fa:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	0a9b      	lsrs	r3, r3, #10
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	4903      	ldr	r1, [pc, #12]	@ (8008814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008806:	5ccb      	ldrb	r3, [r1, r3]
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40023800 	.word	0x40023800
 8008814:	08018968 	.word	0x08018968

08008818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800881c:	f7ff ffdc 	bl	80087d8 <HAL_RCC_GetHCLKFreq>
 8008820:	4602      	mov	r2, r0
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	0b5b      	lsrs	r3, r3, #13
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	4903      	ldr	r1, [pc, #12]	@ (800883c <HAL_RCC_GetPCLK2Freq+0x24>)
 800882e:	5ccb      	ldrb	r3, [r1, r3]
 8008830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008834:	4618      	mov	r0, r3
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40023800 	.word	0x40023800
 800883c:	08018968 	.word	0x08018968

08008840 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008844:	4b06      	ldr	r3, [pc, #24]	@ (8008860 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884c:	2b80      	cmp	r3, #128	@ 0x80
 800884e:	d104      	bne.n	800885a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008850:	f000 f80a 	bl	8008868 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008854:	4b03      	ldr	r3, [pc, #12]	@ (8008864 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008856:	2280      	movs	r2, #128	@ 0x80
 8008858:	701a      	strb	r2, [r3, #0]
  }
}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	40023800 	.word	0x40023800
 8008864:	4002380e 	.word	0x4002380e

08008868 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
	...

08008878 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800889c:	2b00      	cmp	r3, #0
 800889e:	d035      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088a0:	4b62      	ldr	r3, [pc, #392]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088a6:	f7fd f82b 	bl	8005900 <HAL_GetTick>
 80088aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088ac:	e008      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ae:	f7fd f827 	bl	8005900 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0b0      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088c0:	4b5b      	ldr	r3, [pc, #364]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f0      	bne.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	019a      	lsls	r2, r3, #6
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	071b      	lsls	r3, r3, #28
 80088d8:	4955      	ldr	r1, [pc, #340]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088e0:	4b52      	ldr	r3, [pc, #328]	@ (8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088e6:	f7fd f80b 	bl	8005900 <HAL_GetTick>
 80088ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ec:	e008      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80088ee:	f7fd f807 	bl	8005900 <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d901      	bls.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e090      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008900:	4b4b      	ldr	r3, [pc, #300]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0f0      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8083 	beq.w	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	4b44      	ldr	r3, [pc, #272]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	4a43      	ldr	r2, [pc, #268]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008928:	6413      	str	r3, [r2, #64]	@ 0x40
 800892a:	4b41      	ldr	r3, [pc, #260]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008936:	4b3f      	ldr	r3, [pc, #252]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a3e      	ldr	r2, [pc, #248]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800893c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008940:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008942:	f7fc ffdd 	bl	8005900 <HAL_GetTick>
 8008946:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008948:	e008      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800894a:	f7fc ffd9 	bl	8005900 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2b02      	cmp	r3, #2
 8008956:	d901      	bls.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e062      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800895c:	4b35      	ldr	r3, [pc, #212]	@ (8008a34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d0f0      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008968:	4b31      	ldr	r3, [pc, #196]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008970:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02f      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	d028      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008986:	4b2a      	ldr	r3, [pc, #168]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800898e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008990:	4b29      	ldr	r3, [pc, #164]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008996:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800899c:	4a24      	ldr	r2, [pc, #144]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089a2:	4b23      	ldr	r3, [pc, #140]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d114      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80089ae:	f7fc ffa7 	bl	8005900 <HAL_GetTick>
 80089b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b4:	e00a      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b6:	f7fc ffa3 	bl	8005900 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d901      	bls.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e02a      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089cc:	4b18      	ldr	r3, [pc, #96]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d0:	f003 0302 	and.w	r3, r3, #2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0ee      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089e4:	d10d      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80089e6:	4b12      	ldr	r3, [pc, #72]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80089f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089fa:	490d      	ldr	r1, [pc, #52]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	608b      	str	r3, [r1, #8]
 8008a00:	e005      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008a02:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4a0a      	ldr	r2, [pc, #40]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a08:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008a0c:	6093      	str	r3, [r2, #8]
 8008a0e:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1a:	4905      	ldr	r1, [pc, #20]	@ (8008a30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	42470068 	.word	0x42470068
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40007000 	.word	0x40007000
 8008a38:	42470e40 	.word	0x42470e40

08008a3c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e073      	b.n	8008b3a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7f5b      	ldrb	r3, [r3, #29]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7fc fc68 	bl	8005338 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0310 	and.w	r3, r3, #16
 8008a78:	2b10      	cmp	r3, #16
 8008a7a:	d055      	beq.n	8008b28 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	22ca      	movs	r2, #202	@ 0xca
 8008a82:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2253      	movs	r2, #83	@ 0x53
 8008a8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f99d 	bl	8008dcc <RTC_EnterInitMode>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d12c      	bne.n	8008af6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008aaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6899      	ldr	r1, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	431a      	orrs	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	68d2      	ldr	r2, [r2, #12]
 8008ad6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6919      	ldr	r1, [r3, #16]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	041a      	lsls	r2, r3, #16
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f9a4 	bl	8008e3a <RTC_ExitInitMode>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d110      	bne.n	8008b1e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b0a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	22ff      	movs	r2, #255	@ 0xff
 8008b24:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b26:	e001      	b.n	8008b2c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b42:	b590      	push	{r4, r7, lr}
 8008b44:	b087      	sub	sp, #28
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	7f1b      	ldrb	r3, [r3, #28]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <HAL_RTC_SetTime+0x1c>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e087      	b.n	8008c6e <HAL_RTC_SetTime+0x12c>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2202      	movs	r2, #2
 8008b68:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d126      	bne.n	8008bbe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f97b 	bl	8008e84 <RTC_ByteToBcd2>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 f974 	bl	8008e84 <RTC_ByteToBcd2>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ba0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f96c 	bl	8008e84 <RTC_ByteToBcd2>
 8008bac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008bae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	78db      	ldrb	r3, [r3, #3]
 8008bb6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]
 8008bbc:	e018      	b.n	8008bf0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bde:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008be4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	78db      	ldrb	r3, [r3, #3]
 8008bea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	22ca      	movs	r2, #202	@ 0xca
 8008bf6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2253      	movs	r2, #83	@ 0x53
 8008bfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f000 f8e3 	bl	8008dcc <RTC_EnterInitMode>
 8008c06:	4603      	mov	r3, r0
 8008c08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008c0a:	7cfb      	ldrb	r3, [r7, #19]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d120      	bne.n	8008c52 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008c1a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008c1e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6899      	ldr	r1, [r3, #8]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 f8f6 	bl	8008e3a <RTC_ExitInitMode>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008c52:	7cfb      	ldrb	r3, [r7, #19]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d102      	bne.n	8008c5e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	22ff      	movs	r2, #255	@ 0xff
 8008c64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]

  return status;
 8008c6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}

08008c76 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c76:	b590      	push	{r4, r7, lr}
 8008c78:	b087      	sub	sp, #28
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	7f1b      	ldrb	r3, [r3, #28]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d101      	bne.n	8008c92 <HAL_RTC_SetDate+0x1c>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	e071      	b.n	8008d76 <HAL_RTC_SetDate+0x100>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10e      	bne.n	8008cc2 <HAL_RTC_SetDate+0x4c>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	f003 0310 	and.w	r3, r3, #16
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d008      	beq.n	8008cc2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	f023 0310 	bic.w	r3, r3, #16
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	330a      	adds	r3, #10
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d11c      	bne.n	8008d02 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	78db      	ldrb	r3, [r3, #3]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 f8d9 	bl	8008e84 <RTC_ByteToBcd2>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f8d2 	bl	8008e84 <RTC_ByteToBcd2>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ce4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	789b      	ldrb	r3, [r3, #2]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 f8ca 	bl	8008e84 <RTC_ByteToBcd2>
 8008cf0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008cf2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	e00e      	b.n	8008d20 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	78db      	ldrb	r3, [r3, #3]
 8008d06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	785b      	ldrb	r3, [r3, #1]
 8008d0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008d14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	22ca      	movs	r2, #202	@ 0xca
 8008d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2253      	movs	r2, #83	@ 0x53
 8008d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f84b 	bl	8008dcc <RTC_EnterInitMode>
 8008d36:	4603      	mov	r3, r0
 8008d38:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d3a:	7cfb      	ldrb	r3, [r7, #19]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10c      	bne.n	8008d5a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008d4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008d4e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f872 	bl	8008e3a <RTC_ExitInitMode>
 8008d56:	4603      	mov	r3, r0
 8008d58:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d5a:	7cfb      	ldrb	r3, [r7, #19]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	22ff      	movs	r2, #255	@ 0xff
 8008d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	771a      	strb	r2, [r3, #28]

  return status;
 8008d74:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd90      	pop	{r4, r7, pc}
	...

08008d80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0d      	ldr	r2, [pc, #52]	@ (8008dc8 <HAL_RTC_WaitForSynchro+0x48>)
 8008d92:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d94:	f7fc fdb4 	bl	8005900 <HAL_GetTick>
 8008d98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d9a:	e009      	b.n	8008db0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d9c:	f7fc fdb0 	bl	8005900 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008daa:	d901      	bls.n	8008db0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e007      	b.n	8008dc0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0ee      	beq.n	8008d9c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	00017f5f 	.word	0x00017f5f

08008dcc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d122      	bne.n	8008e30 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008df8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dfa:	f7fc fd81 	bl	8005900 <HAL_GetTick>
 8008dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008e00:	e00c      	b.n	8008e1c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e02:	f7fc fd7d 	bl	8005900 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e10:	d904      	bls.n	8008e1c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2204      	movs	r2, #4
 8008e16:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <RTC_EnterInitMode+0x64>
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d1e8      	bne.n	8008e02 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e54:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff8b 	bl	8008d80 <HAL_RTC_WaitForSynchro>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2204      	movs	r2, #4
 8008e74:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008e92:	e005      	b.n	8008ea0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	3b0a      	subs	r3, #10
 8008e9e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b09      	cmp	r3, #9
 8008ea4:	d8f6      	bhi.n	8008e94 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	011b      	lsls	r3, r3, #4
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	b2db      	uxtb	r3, r3
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e07b      	b.n	8008fca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d108      	bne.n	8008eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ee2:	d009      	beq.n	8008ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	61da      	str	r2, [r3, #28]
 8008eea:	e005      	b.n	8008ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fc fa3a 	bl	800538c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7c:	ea42 0103 	orr.w	r1, r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	f003 0104 	and.w	r1, r3, #4
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	f003 0210 	and.w	r2, r3, #16
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08c      	sub	sp, #48	@ 0x30
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
 8008fde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x26>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e198      	b.n	800932a <HAL_SPI_TransmitReceive+0x358>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009000:	f7fc fc7e 	bl	8005900 <HAL_GetTick>
 8009004:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800900c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009016:	887b      	ldrh	r3, [r7, #2]
 8009018:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800901a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800901e:	2b01      	cmp	r3, #1
 8009020:	d00f      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x70>
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009028:	d107      	bne.n	800903a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d103      	bne.n	800903a <HAL_SPI_TransmitReceive+0x68>
 8009032:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009036:	2b04      	cmp	r3, #4
 8009038:	d003      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800903a:	2302      	movs	r3, #2
 800903c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009040:	e16d      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d005      	beq.n	8009054 <HAL_SPI_TransmitReceive+0x82>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <HAL_SPI_TransmitReceive+0x82>
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800905a:	e160      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b04      	cmp	r3, #4
 8009066:	d003      	beq.n	8009070 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2205      	movs	r2, #5
 800906c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	887a      	ldrh	r2, [r7, #2]
 8009080:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	887a      	ldrh	r2, [r7, #2]
 8009086:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	887a      	ldrh	r2, [r7, #2]
 8009092:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	887a      	ldrh	r2, [r7, #2]
 8009098:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b40      	cmp	r3, #64	@ 0x40
 80090b2:	d007      	beq.n	80090c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090cc:	d17c      	bne.n	80091c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x10a>
 80090d6:	8b7b      	ldrh	r3, [r7, #26]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d16a      	bne.n	80091b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e0:	881a      	ldrh	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ec:	1c9a      	adds	r2, r3, #2
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009100:	e057      	b.n	80091b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 0302 	and.w	r3, r3, #2
 800910c:	2b02      	cmp	r3, #2
 800910e:	d11b      	bne.n	8009148 <HAL_SPI_TransmitReceive+0x176>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009114:	b29b      	uxth	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d016      	beq.n	8009148 <HAL_SPI_TransmitReceive+0x176>
 800911a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911c:	2b01      	cmp	r3, #1
 800911e:	d113      	bne.n	8009148 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009124:	881a      	ldrh	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009130:	1c9a      	adds	r2, r3, #2
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800913a:	b29b      	uxth	r3, r3
 800913c:	3b01      	subs	r3, #1
 800913e:	b29a      	uxth	r2, r3
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b01      	cmp	r3, #1
 8009154:	d119      	bne.n	800918a <HAL_SPI_TransmitReceive+0x1b8>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800915a:	b29b      	uxth	r3, r3
 800915c:	2b00      	cmp	r3, #0
 800915e:	d014      	beq.n	800918a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916a:	b292      	uxth	r2, r2
 800916c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009172:	1c9a      	adds	r2, r3, #2
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	b29a      	uxth	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009186:	2301      	movs	r3, #1
 8009188:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800918a:	f7fc fbb9 	bl	8005900 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009196:	429a      	cmp	r2, r3
 8009198:	d80b      	bhi.n	80091b2 <HAL_SPI_TransmitReceive+0x1e0>
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d007      	beq.n	80091b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80091b0:	e0b5      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1a2      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x130>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d19d      	bne.n	8009102 <HAL_SPI_TransmitReceive+0x130>
 80091c6:	e080      	b.n	80092ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <HAL_SPI_TransmitReceive+0x204>
 80091d0:	8b7b      	ldrh	r3, [r7, #26]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d16f      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	7812      	ldrb	r2, [r2, #0]
 80091e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091fc:	e05b      	b.n	80092b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d11c      	bne.n	8009246 <HAL_SPI_TransmitReceive+0x274>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009210:	b29b      	uxth	r3, r3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d017      	beq.n	8009246 <HAL_SPI_TransmitReceive+0x274>
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d114      	bne.n	8009246 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	330c      	adds	r3, #12
 8009226:	7812      	ldrb	r2, [r2, #0]
 8009228:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b01      	cmp	r3, #1
 8009252:	d119      	bne.n	8009288 <HAL_SPI_TransmitReceive+0x2b6>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d014      	beq.n	8009288 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009270:	1c5a      	adds	r2, r3, #1
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009284:	2301      	movs	r3, #1
 8009286:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009288:	f7fc fb3a 	bl	8005900 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009294:	429a      	cmp	r2, r3
 8009296:	d803      	bhi.n	80092a0 <HAL_SPI_TransmitReceive+0x2ce>
 8009298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d102      	bne.n	80092a6 <HAL_SPI_TransmitReceive+0x2d4>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d107      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80092b4:	e033      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d19e      	bne.n	80091fe <HAL_SPI_TransmitReceive+0x22c>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d199      	bne.n	80091fe <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f9ca 	bl	8009668 <SPI_EndRxTxTransaction>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80092e6:	e01a      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10a      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092f0:	2300      	movs	r3, #0
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009314:	e003      	b.n	800931e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800932a:	4618      	mov	r0, r3
 800932c:	3730      	adds	r7, #48	@ 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
	...

08009334 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10e      	bne.n	8009374 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800935c:	2b00      	cmp	r3, #0
 800935e:	d009      	beq.n	8009374 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	4798      	blx	r3
    return;
 8009372:	e0ce      	b.n	8009512 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <HAL_SPI_IRQHandler+0x5e>
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
    return;
 8009390:	e0bf      	b.n	8009512 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <HAL_SPI_IRQHandler+0x7e>
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 80b0 	beq.w	8009512 <HAL_SPI_IRQHandler+0x1de>
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80aa 	beq.w	8009512 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d023      	beq.n	8009410 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d011      	beq.n	80093f8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d8:	f043 0204 	orr.w	r2, r3, #4
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	e00b      	b.n	8009410 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	613b      	str	r3, [r7, #16]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	693b      	ldr	r3, [r7, #16]
        return;
 800940e:	e080      	b.n	8009512 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d014      	beq.n	8009444 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f043 0201 	orr.w	r2, r3, #1
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00c      	beq.n	8009468 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009452:	f043 0208 	orr.w	r2, r3, #8
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800945a:	2300      	movs	r3, #0
 800945c:	60bb      	str	r3, [r7, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946c:	2b00      	cmp	r3, #0
 800946e:	d04f      	beq.n	8009510 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800947e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d104      	bne.n	800949c <HAL_SPI_IRQHandler+0x168>
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d034      	beq.n	8009506 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0203 	bic.w	r2, r2, #3
 80094aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d011      	beq.n	80094d8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b8:	4a17      	ldr	r2, [pc, #92]	@ (8009518 <HAL_SPI_IRQHandler+0x1e4>)
 80094ba:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fc fc30 	bl	8005d26 <HAL_DMA_Abort_IT>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d016      	beq.n	800950e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e4:	4a0c      	ldr	r2, [pc, #48]	@ (8009518 <HAL_SPI_IRQHandler+0x1e4>)
 80094e6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fc fc1a 	bl	8005d26 <HAL_DMA_Abort_IT>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8009504:	e003      	b.n	800950e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f808 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800950c:	e000      	b.n	8009510 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800950e:	bf00      	nop
    return;
 8009510:	bf00      	nop
  }
}
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	08009531 	.word	0x08009531

0800951c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2200      	movs	r2, #0
 8009548:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff ffe6 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009568:	f7fc f9ca 	bl	8005900 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4413      	add	r3, r2
 8009576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009578:	f7fc f9c2 	bl	8005900 <HAL_GetTick>
 800957c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800957e:	4b39      	ldr	r3, [pc, #228]	@ (8009664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	015b      	lsls	r3, r3, #5
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	fb02 f303 	mul.w	r3, r2, r3
 800958c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800958e:	e054      	b.n	800963a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d050      	beq.n	800963a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009598:	f7fc f9b2 	bl	8005900 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d902      	bls.n	80095ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d13d      	bne.n	800962a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095c6:	d111      	bne.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d0:	d004      	beq.n	80095dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095da:	d107      	bne.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095f4:	d10f      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e017      	b.n	800965a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	3b01      	subs	r3, #1
 8009638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4013      	ands	r3, r2
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	429a      	cmp	r2, r3
 8009648:	bf0c      	ite	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	2300      	movne	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	429a      	cmp	r2, r3
 8009656:	d19b      	bne.n	8009590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000000 	.word	0x20000000

08009668 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	2102      	movs	r1, #2
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7ff ff6a 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968e:	f043 0220 	orr.w	r2, r3, #32
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e032      	b.n	8009700 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800969a:	4b1b      	ldr	r3, [pc, #108]	@ (8009708 <SPI_EndRxTxTransaction+0xa0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a1b      	ldr	r2, [pc, #108]	@ (800970c <SPI_EndRxTxTransaction+0xa4>)
 80096a0:	fba2 2303 	umull	r2, r3, r2, r3
 80096a4:	0d5b      	lsrs	r3, r3, #21
 80096a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
 80096ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096b8:	d112      	bne.n	80096e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2180      	movs	r1, #128	@ 0x80
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff ff47 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d016      	beq.n	80096fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e00f      	b.n	8009700 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d0f2      	beq.n	80096e0 <SPI_EndRxTxTransaction+0x78>
 80096fa:	e000      	b.n	80096fe <SPI_EndRxTxTransaction+0x96>
        break;
 80096fc:	bf00      	nop
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	20000000 	.word	0x20000000
 800970c:	165e9f81 	.word	0x165e9f81

08009710 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	460b      	mov	r3, r1
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e062      	b.n	80097ee <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7fb ffff 	bl	8005740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2224      	movs	r2, #36	@ 0x24
 8009746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fd88 	bl	800a270 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	691a      	ldr	r2, [r3, #16]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800976e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800977e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 020f 	bic.w	r2, r2, #15
 800978e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6919      	ldr	r1, [r3, #16]
 8009796:	7afa      	ldrb	r2, [r7, #11]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097ae:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68d9      	ldr	r1, [r3, #12]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	430a      	orrs	r2, r1
 80097be:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2220      	movs	r2, #32
 80097da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2220      	movs	r2, #32
 80097e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b08a      	sub	sp, #40	@ 0x28
 80097fa:	af02      	add	r7, sp, #8
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	603b      	str	r3, [r7, #0]
 8009802:	4613      	mov	r3, r2
 8009804:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b20      	cmp	r3, #32
 8009814:	d175      	bne.n	8009902 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <HAL_UART_Transmit+0x2c>
 800981c:	88fb      	ldrh	r3, [r7, #6]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e06e      	b.n	8009904 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2221      	movs	r2, #33	@ 0x21
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009834:	f7fc f864 	bl	8005900 <HAL_GetTick>
 8009838:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	88fa      	ldrh	r2, [r7, #6]
 800983e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	88fa      	ldrh	r2, [r7, #6]
 8009844:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800984e:	d108      	bne.n	8009862 <HAL_UART_Transmit+0x6c>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d104      	bne.n	8009862 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	61bb      	str	r3, [r7, #24]
 8009860:	e003      	b.n	800986a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800986a:	e02e      	b.n	80098ca <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2200      	movs	r2, #0
 8009874:	2180      	movs	r1, #128	@ 0x80
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fb04 	bl	8009e84 <UART_WaitOnFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e03a      	b.n	8009904 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	3302      	adds	r3, #2
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	e007      	b.n	80098bc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	3301      	adds	r3, #1
 80098ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1cb      	bne.n	800986c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2200      	movs	r2, #0
 80098dc:	2140      	movs	r1, #64	@ 0x40
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 fad0 	bl	8009e84 <UART_WaitOnFlagUntilTimeout>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2220      	movs	r2, #32
 80098ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e006      	b.n	8009904 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	e000      	b.n	8009904 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009902:	2302      	movs	r3, #2
  }
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b0ba      	sub	sp, #232	@ 0xe8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009932:	2300      	movs	r3, #0
 8009934:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009938:	2300      	movs	r3, #0
 800993a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800993e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800994a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10f      	bne.n	8009972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_UART_IRQHandler+0x66>
 800995e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fbc2 	bl	800a0f4 <UART_Receive_IT>
      return;
 8009970:	e25b      	b.n	8009e2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80de 	beq.w	8009b38 <HAL_UART_IRQHandler+0x22c>
 800997c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d106      	bne.n	8009996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800998c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 80d1 	beq.w	8009b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00b      	beq.n	80099ba <HAL_UART_IRQHandler+0xae>
 80099a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b2:	f043 0201 	orr.w	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <HAL_UART_IRQHandler+0xd2>
 80099c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d005      	beq.n	80099de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d6:	f043 0202 	orr.w	r2, r3, #2
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <HAL_UART_IRQHandler+0xf6>
 80099ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099fa:	f043 0204 	orr.w	r2, r3, #4
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a06:	f003 0308 	and.w	r3, r3, #8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d011      	beq.n	8009a32 <HAL_UART_IRQHandler+0x126>
 8009a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2a:	f043 0208 	orr.w	r2, r3, #8
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 81f2 	beq.w	8009e20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <HAL_UART_IRQHandler+0x14e>
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb4d 	bl	800a0f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a64:	2b40      	cmp	r3, #64	@ 0x40
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <HAL_UART_IRQHandler+0x17a>
 8009a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d04f      	beq.n	8009b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fa55 	bl	8009f36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a96:	2b40      	cmp	r3, #64	@ 0x40
 8009a98:	d141      	bne.n	8009b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3314      	adds	r3, #20
 8009aa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ad6:	e841 2300 	strex	r3, r2, [r1]
 8009ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1d9      	bne.n	8009a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d013      	beq.n	8009b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af2:	4a7e      	ldr	r2, [pc, #504]	@ (8009cec <HAL_UART_IRQHandler+0x3e0>)
 8009af4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fc f913 	bl	8005d26 <HAL_DMA_Abort_IT>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d016      	beq.n	8009b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009b10:	4610      	mov	r0, r2
 8009b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b14:	e00e      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f99e 	bl	8009e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1c:	e00a      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f99a 	bl	8009e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b24:	e006      	b.n	8009b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f996 	bl	8009e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009b32:	e175      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b34:	bf00      	nop
    return;
 8009b36:	e173      	b.n	8009e20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	f040 814f 	bne.w	8009de0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b46:	f003 0310 	and.w	r3, r3, #16
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8148 	beq.w	8009de0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b54:	f003 0310 	and.w	r3, r3, #16
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 8141 	beq.w	8009de0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60bb      	str	r3, [r7, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	60bb      	str	r3, [r7, #8]
 8009b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7e:	2b40      	cmp	r3, #64	@ 0x40
 8009b80:	f040 80b6 	bne.w	8009cf0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 8145 	beq.w	8009e24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	f080 813e 	bcs.w	8009e24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009bae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bba:	f000 8088 	beq.w	8009cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bcc:	e853 3f00 	ldrex	r3, [r3]
 8009bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	330c      	adds	r3, #12
 8009be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1d9      	bne.n	8009bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3314      	adds	r3, #20
 8009c10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3314      	adds	r3, #20
 8009c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009c2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e1      	bne.n	8009c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e3      	bne.n	8009c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	330c      	adds	r3, #12
 8009c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c9e:	f023 0310 	bic.w	r3, r3, #16
 8009ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009cb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009cb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009cb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e3      	bne.n	8009c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fb ffbc 	bl	8005c46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f8c1 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cea:	e09b      	b.n	8009e24 <HAL_UART_IRQHandler+0x518>
 8009cec:	08009ffd 	.word	0x08009ffd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 808e 	beq.w	8009e28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 8089 	beq.w	8009e28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	330c      	adds	r3, #12
 8009d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	330c      	adds	r3, #12
 8009d36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009d3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d42:	e841 2300 	strex	r3, r2, [r1]
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1e3      	bne.n	8009d16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3314      	adds	r3, #20
 8009d54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	f023 0301 	bic.w	r3, r3, #1
 8009d64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3314      	adds	r3, #20
 8009d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e3      	bne.n	8009d4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	330c      	adds	r3, #12
 8009d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f023 0310 	bic.w	r3, r3, #16
 8009daa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	330c      	adds	r3, #12
 8009db4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009db8:	61fa      	str	r2, [r7, #28]
 8009dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	69b9      	ldr	r1, [r7, #24]
 8009dbe:	69fa      	ldr	r2, [r7, #28]
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e3      	bne.n	8009d94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f847 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009dde:	e023      	b.n	8009e28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <HAL_UART_IRQHandler+0x4f4>
 8009dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d003      	beq.n	8009e00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f913 	bl	800a024 <UART_Transmit_IT>
    return;
 8009dfe:	e014      	b.n	8009e2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00e      	beq.n	8009e2a <HAL_UART_IRQHandler+0x51e>
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d008      	beq.n	8009e2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f953 	bl	800a0c4 <UART_EndTransmit_IT>
    return;
 8009e1e:	e004      	b.n	8009e2a <HAL_UART_IRQHandler+0x51e>
    return;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <HAL_UART_IRQHandler+0x51e>
      return;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <HAL_UART_IRQHandler+0x51e>
      return;
 8009e28:	bf00      	nop
  }
}
 8009e2a:	37e8      	adds	r7, #232	@ 0xe8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	4613      	mov	r3, r2
 8009e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e94:	e03b      	b.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9c:	d037      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e9e:	f7fb fd2f 	bl	8005900 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	6a3a      	ldr	r2, [r7, #32]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d302      	bcc.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e03a      	b.n	8009f2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f003 0304 	and.w	r3, r3, #4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d023      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b80      	cmp	r3, #128	@ 0x80
 8009eca:	d020      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b40      	cmp	r3, #64	@ 0x40
 8009ed0:	d01d      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d116      	bne.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f81d 	bl	8009f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2208      	movs	r2, #8
 8009f00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e00f      	b.n	8009f2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	4013      	ands	r3, r2
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	bf0c      	ite	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	2300      	movne	r3, #0
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	461a      	mov	r2, r3
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d0b4      	beq.n	8009e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b095      	sub	sp, #84	@ 0x54
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	330c      	adds	r3, #12
 8009f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3314      	adds	r3, #20
 8009f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3314      	adds	r3, #20
 8009f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e5      	bne.n	8009f72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d119      	bne.n	8009fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	330c      	adds	r3, #12
 8009fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	e853 3f00 	ldrex	r3, [r3]
 8009fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f023 0310 	bic.w	r3, r3, #16
 8009fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	330c      	adds	r3, #12
 8009fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fce:	61ba      	str	r2, [r7, #24]
 8009fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6979      	ldr	r1, [r7, #20]
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	613b      	str	r3, [r7, #16]
   return(result);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e5      	bne.n	8009fae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009ff0:	bf00      	nop
 8009ff2:	3754      	adds	r7, #84	@ 0x54
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff ff1e 	bl	8009e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a032:	b2db      	uxtb	r3, r3
 800a034:	2b21      	cmp	r3, #33	@ 0x21
 800a036:	d13e      	bne.n	800a0b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a040:	d114      	bne.n	800a06c <UART_Transmit_IT+0x48>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d110      	bne.n	800a06c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a05e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	1c9a      	adds	r2, r3, #2
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]
 800a06a:	e008      	b.n	800a07e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	1c59      	adds	r1, r3, #1
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6211      	str	r1, [r2, #32]
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b29b      	uxth	r3, r3
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	4619      	mov	r1, r3
 800a08c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10f      	bne.n	800a0b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e000      	b.n	800a0b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a0b6:	2302      	movs	r3, #2
  }
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fea3 	bl	8009e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08c      	sub	sp, #48	@ 0x30
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b22      	cmp	r3, #34	@ 0x22
 800a106:	f040 80ae 	bne.w	800a266 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a112:	d117      	bne.n	800a144 <UART_Receive_IT+0x50>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d113      	bne.n	800a144 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a11c:	2300      	movs	r3, #0
 800a11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a124:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a132:	b29a      	uxth	r2, r3
 800a134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a136:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13c:	1c9a      	adds	r2, r3, #2
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	629a      	str	r2, [r3, #40]	@ 0x28
 800a142:	e026      	b.n	800a192 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a156:	d007      	beq.n	800a168 <UART_Receive_IT+0x74>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <UART_Receive_IT+0x82>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	e008      	b.n	800a188 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a182:	b2da      	uxtb	r2, r3
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a196:	b29b      	uxth	r3, r3
 800a198:	3b01      	subs	r3, #1
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d15d      	bne.n	800a262 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 0220 	bic.w	r2, r2, #32
 800a1b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	695a      	ldr	r2, [r3, #20]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 0201 	bic.w	r2, r2, #1
 800a1d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d135      	bne.n	800a258 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	330c      	adds	r3, #12
 800a1f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	e853 3f00 	ldrex	r3, [r3]
 800a200:	613b      	str	r3, [r7, #16]
   return(result);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f023 0310 	bic.w	r3, r3, #16
 800a208:	627b      	str	r3, [r7, #36]	@ 0x24
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	330c      	adds	r3, #12
 800a210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a212:	623a      	str	r2, [r7, #32]
 800a214:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	69f9      	ldr	r1, [r7, #28]
 800a218:	6a3a      	ldr	r2, [r7, #32]
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e5      	bne.n	800a1f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0310 	and.w	r3, r3, #16
 800a230:	2b10      	cmp	r3, #16
 800a232:	d10a      	bne.n	800a24a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60fb      	str	r3, [r7, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fe0b 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
 800a256:	e002      	b.n	800a25e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff fdf3 	bl	8009e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	e002      	b.n	800a268 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	e000      	b.n	800a268 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a266:	2302      	movs	r3, #2
  }
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3730      	adds	r7, #48	@ 0x30
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a274:	b0c0      	sub	sp, #256	@ 0x100
 800a276:	af00      	add	r7, sp, #0
 800a278:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28c:	68d9      	ldr	r1, [r3, #12]
 800a28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	ea40 0301 	orr.w	r3, r0, r1
 800a298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a29e:	689a      	ldr	r2, [r3, #8]
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a2c8:	f021 010c 	bic.w	r1, r1, #12
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2ea:	6999      	ldr	r1, [r3, #24]
 800a2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	ea40 0301 	orr.w	r3, r0, r1
 800a2f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	4b8f      	ldr	r3, [pc, #572]	@ (800a53c <UART_SetConfig+0x2cc>)
 800a300:	429a      	cmp	r2, r3
 800a302:	d005      	beq.n	800a310 <UART_SetConfig+0xa0>
 800a304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	4b8d      	ldr	r3, [pc, #564]	@ (800a540 <UART_SetConfig+0x2d0>)
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d104      	bne.n	800a31a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a310:	f7fe fa82 	bl	8008818 <HAL_RCC_GetPCLK2Freq>
 800a314:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a318:	e003      	b.n	800a322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a31a:	f7fe fa69 	bl	80087f0 <HAL_RCC_GetPCLK1Freq>
 800a31e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a32c:	f040 810c 	bne.w	800a548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a334:	2200      	movs	r2, #0
 800a336:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a33a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a33e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	1891      	adds	r1, r2, r2
 800a348:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a34a:	415b      	adcs	r3, r3
 800a34c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a34e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a352:	4621      	mov	r1, r4
 800a354:	eb12 0801 	adds.w	r8, r2, r1
 800a358:	4629      	mov	r1, r5
 800a35a:	eb43 0901 	adc.w	r9, r3, r1
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	f04f 0300 	mov.w	r3, #0
 800a366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a36a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a36e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a372:	4690      	mov	r8, r2
 800a374:	4699      	mov	r9, r3
 800a376:	4623      	mov	r3, r4
 800a378:	eb18 0303 	adds.w	r3, r8, r3
 800a37c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a380:	462b      	mov	r3, r5
 800a382:	eb49 0303 	adc.w	r3, r9, r3
 800a386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a38a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a396:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a39a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a39e:	460b      	mov	r3, r1
 800a3a0:	18db      	adds	r3, r3, r3
 800a3a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	eb42 0303 	adc.w	r3, r2, r3
 800a3aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a3b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a3b4:	f7fa fbf8 	bl	8004ba8 <__aeabi_uldivmod>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4b61      	ldr	r3, [pc, #388]	@ (800a544 <UART_SetConfig+0x2d4>)
 800a3be:	fba3 2302 	umull	r2, r3, r3, r2
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	011c      	lsls	r4, r3, #4
 800a3c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a3d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	1891      	adds	r1, r2, r2
 800a3de:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a3e0:	415b      	adcs	r3, r3
 800a3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a408:	4692      	mov	sl, r2
 800a40a:	469b      	mov	fp, r3
 800a40c:	4643      	mov	r3, r8
 800a40e:	eb1a 0303 	adds.w	r3, sl, r3
 800a412:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a416:	464b      	mov	r3, r9
 800a418:	eb4b 0303 	adc.w	r3, fp, r3
 800a41c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a42c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a434:	460b      	mov	r3, r1
 800a436:	18db      	adds	r3, r3, r3
 800a438:	643b      	str	r3, [r7, #64]	@ 0x40
 800a43a:	4613      	mov	r3, r2
 800a43c:	eb42 0303 	adc.w	r3, r2, r3
 800a440:	647b      	str	r3, [r7, #68]	@ 0x44
 800a442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a44a:	f7fa fbad 	bl	8004ba8 <__aeabi_uldivmod>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4611      	mov	r1, r2
 800a454:	4b3b      	ldr	r3, [pc, #236]	@ (800a544 <UART_SetConfig+0x2d4>)
 800a456:	fba3 2301 	umull	r2, r3, r3, r1
 800a45a:	095b      	lsrs	r3, r3, #5
 800a45c:	2264      	movs	r2, #100	@ 0x64
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
 800a462:	1acb      	subs	r3, r1, r3
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a46a:	4b36      	ldr	r3, [pc, #216]	@ (800a544 <UART_SetConfig+0x2d4>)
 800a46c:	fba3 2302 	umull	r2, r3, r3, r2
 800a470:	095b      	lsrs	r3, r3, #5
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a478:	441c      	add	r4, r3
 800a47a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a47e:	2200      	movs	r2, #0
 800a480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a484:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a48c:	4642      	mov	r2, r8
 800a48e:	464b      	mov	r3, r9
 800a490:	1891      	adds	r1, r2, r2
 800a492:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a494:	415b      	adcs	r3, r3
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a49c:	4641      	mov	r1, r8
 800a49e:	1851      	adds	r1, r2, r1
 800a4a0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	414b      	adcs	r3, r1
 800a4a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a8:	f04f 0200 	mov.w	r2, #0
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	00cb      	lsls	r3, r1, #3
 800a4b8:	4651      	mov	r1, sl
 800a4ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4be:	4651      	mov	r1, sl
 800a4c0:	00ca      	lsls	r2, r1, #3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	189b      	adds	r3, r3, r2
 800a4cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4d0:	464b      	mov	r3, r9
 800a4d2:	460a      	mov	r2, r1
 800a4d4:	eb42 0303 	adc.w	r3, r2, r3
 800a4d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a4ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	18db      	adds	r3, r3, r3
 800a4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	eb42 0303 	adc.w	r3, r2, r3
 800a4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a506:	f7fa fb4f 	bl	8004ba8 <__aeabi_uldivmod>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <UART_SetConfig+0x2d4>)
 800a510:	fba3 1302 	umull	r1, r3, r3, r2
 800a514:	095b      	lsrs	r3, r3, #5
 800a516:	2164      	movs	r1, #100	@ 0x64
 800a518:	fb01 f303 	mul.w	r3, r1, r3
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	00db      	lsls	r3, r3, #3
 800a520:	3332      	adds	r3, #50	@ 0x32
 800a522:	4a08      	ldr	r2, [pc, #32]	@ (800a544 <UART_SetConfig+0x2d4>)
 800a524:	fba2 2303 	umull	r2, r3, r2, r3
 800a528:	095b      	lsrs	r3, r3, #5
 800a52a:	f003 0207 	and.w	r2, r3, #7
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4422      	add	r2, r4
 800a536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a538:	e106      	b.n	800a748 <UART_SetConfig+0x4d8>
 800a53a:	bf00      	nop
 800a53c:	40011000 	.word	0x40011000
 800a540:	40011400 	.word	0x40011400
 800a544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a54c:	2200      	movs	r2, #0
 800a54e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a552:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a55a:	4642      	mov	r2, r8
 800a55c:	464b      	mov	r3, r9
 800a55e:	1891      	adds	r1, r2, r2
 800a560:	6239      	str	r1, [r7, #32]
 800a562:	415b      	adcs	r3, r3
 800a564:	627b      	str	r3, [r7, #36]	@ 0x24
 800a566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a56a:	4641      	mov	r1, r8
 800a56c:	1854      	adds	r4, r2, r1
 800a56e:	4649      	mov	r1, r9
 800a570:	eb43 0501 	adc.w	r5, r3, r1
 800a574:	f04f 0200 	mov.w	r2, #0
 800a578:	f04f 0300 	mov.w	r3, #0
 800a57c:	00eb      	lsls	r3, r5, #3
 800a57e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a582:	00e2      	lsls	r2, r4, #3
 800a584:	4614      	mov	r4, r2
 800a586:	461d      	mov	r5, r3
 800a588:	4643      	mov	r3, r8
 800a58a:	18e3      	adds	r3, r4, r3
 800a58c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a590:	464b      	mov	r3, r9
 800a592:	eb45 0303 	adc.w	r3, r5, r3
 800a596:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a5aa:	f04f 0200 	mov.w	r2, #0
 800a5ae:	f04f 0300 	mov.w	r3, #0
 800a5b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	008b      	lsls	r3, r1, #2
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	008a      	lsls	r2, r1, #2
 800a5c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a5c8:	f7fa faee 	bl	8004ba8 <__aeabi_uldivmod>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4b60      	ldr	r3, [pc, #384]	@ (800a754 <UART_SetConfig+0x4e4>)
 800a5d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	011c      	lsls	r4, r3, #4
 800a5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a5e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	1891      	adds	r1, r2, r2
 800a5f2:	61b9      	str	r1, [r7, #24]
 800a5f4:	415b      	adcs	r3, r3
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	1851      	adds	r1, r2, r1
 800a600:	6139      	str	r1, [r7, #16]
 800a602:	4649      	mov	r1, r9
 800a604:	414b      	adcs	r3, r1
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a614:	4659      	mov	r1, fp
 800a616:	00cb      	lsls	r3, r1, #3
 800a618:	4651      	mov	r1, sl
 800a61a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a61e:	4651      	mov	r1, sl
 800a620:	00ca      	lsls	r2, r1, #3
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	4603      	mov	r3, r0
 800a628:	4642      	mov	r2, r8
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a630:	464b      	mov	r3, r9
 800a632:	460a      	mov	r2, r1
 800a634:	eb42 0303 	adc.w	r3, r2, r3
 800a638:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a646:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a654:	4649      	mov	r1, r9
 800a656:	008b      	lsls	r3, r1, #2
 800a658:	4641      	mov	r1, r8
 800a65a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a65e:	4641      	mov	r1, r8
 800a660:	008a      	lsls	r2, r1, #2
 800a662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a666:	f7fa fa9f 	bl	8004ba8 <__aeabi_uldivmod>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4611      	mov	r1, r2
 800a670:	4b38      	ldr	r3, [pc, #224]	@ (800a754 <UART_SetConfig+0x4e4>)
 800a672:	fba3 2301 	umull	r2, r3, r3, r1
 800a676:	095b      	lsrs	r3, r3, #5
 800a678:	2264      	movs	r2, #100	@ 0x64
 800a67a:	fb02 f303 	mul.w	r3, r2, r3
 800a67e:	1acb      	subs	r3, r1, r3
 800a680:	011b      	lsls	r3, r3, #4
 800a682:	3332      	adds	r3, #50	@ 0x32
 800a684:	4a33      	ldr	r2, [pc, #204]	@ (800a754 <UART_SetConfig+0x4e4>)
 800a686:	fba2 2303 	umull	r2, r3, r2, r3
 800a68a:	095b      	lsrs	r3, r3, #5
 800a68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a690:	441c      	add	r4, r3
 800a692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a696:	2200      	movs	r2, #0
 800a698:	673b      	str	r3, [r7, #112]	@ 0x70
 800a69a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a69c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	1891      	adds	r1, r2, r2
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	415b      	adcs	r3, r3
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	1851      	adds	r1, r2, r1
 800a6b4:	6039      	str	r1, [r7, #0]
 800a6b6:	4649      	mov	r1, r9
 800a6b8:	414b      	adcs	r3, r1
 800a6ba:	607b      	str	r3, [r7, #4]
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6c8:	4659      	mov	r1, fp
 800a6ca:	00cb      	lsls	r3, r1, #3
 800a6cc:	4651      	mov	r1, sl
 800a6ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6d2:	4651      	mov	r1, sl
 800a6d4:	00ca      	lsls	r2, r1, #3
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4603      	mov	r3, r0
 800a6dc:	4642      	mov	r2, r8
 800a6de:	189b      	adds	r3, r3, r2
 800a6e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a6e2:	464b      	mov	r3, r9
 800a6e4:	460a      	mov	r2, r1
 800a6e6:	eb42 0303 	adc.w	r3, r2, r3
 800a6ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6f6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a6f8:	f04f 0200 	mov.w	r2, #0
 800a6fc:	f04f 0300 	mov.w	r3, #0
 800a700:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a704:	4649      	mov	r1, r9
 800a706:	008b      	lsls	r3, r1, #2
 800a708:	4641      	mov	r1, r8
 800a70a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a70e:	4641      	mov	r1, r8
 800a710:	008a      	lsls	r2, r1, #2
 800a712:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a716:	f7fa fa47 	bl	8004ba8 <__aeabi_uldivmod>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4b0d      	ldr	r3, [pc, #52]	@ (800a754 <UART_SetConfig+0x4e4>)
 800a720:	fba3 1302 	umull	r1, r3, r3, r2
 800a724:	095b      	lsrs	r3, r3, #5
 800a726:	2164      	movs	r1, #100	@ 0x64
 800a728:	fb01 f303 	mul.w	r3, r1, r3
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	3332      	adds	r3, #50	@ 0x32
 800a732:	4a08      	ldr	r2, [pc, #32]	@ (800a754 <UART_SetConfig+0x4e4>)
 800a734:	fba2 2303 	umull	r2, r3, r2, r3
 800a738:	095b      	lsrs	r3, r3, #5
 800a73a:	f003 020f 	and.w	r2, r3, #15
 800a73e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4422      	add	r2, r4
 800a746:	609a      	str	r2, [r3, #8]
}
 800a748:	bf00      	nop
 800a74a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a74e:	46bd      	mov	sp, r7
 800a750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a754:	51eb851f 	.word	0x51eb851f

0800a758 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b10      	cmp	r3, #16
 800a768:	d11c      	bne.n	800a7a4 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	4b1f      	ldr	r3, [pc, #124]	@ (800a7ec <FSMC_NAND_Init+0x94>)
 800a770:	4013      	ands	r3, r2
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	6851      	ldr	r1, [r2, #4]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	6892      	ldr	r2, [r2, #8]
 800a77a:	4311      	orrs	r1, r2
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	68d2      	ldr	r2, [r2, #12]
 800a780:	4311      	orrs	r1, r2
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	6912      	ldr	r2, [r2, #16]
 800a786:	4311      	orrs	r1, r2
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	6952      	ldr	r2, [r2, #20]
 800a78c:	0252      	lsls	r2, r2, #9
 800a78e:	4311      	orrs	r1, r2
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	6992      	ldr	r2, [r2, #24]
 800a794:	0352      	lsls	r2, r2, #13
 800a796:	430a      	orrs	r2, r1
 800a798:	4313      	orrs	r3, r2
 800a79a:	f043 0208 	orr.w	r2, r3, #8
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e01b      	b.n	800a7dc <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a1a      	ldr	r2, [r3, #32]
 800a7a8:	4b10      	ldr	r3, [pc, #64]	@ (800a7ec <FSMC_NAND_Init+0x94>)
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	6851      	ldr	r1, [r2, #4]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	6892      	ldr	r2, [r2, #8]
 800a7b4:	4311      	orrs	r1, r2
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	68d2      	ldr	r2, [r2, #12]
 800a7ba:	4311      	orrs	r1, r2
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	6912      	ldr	r2, [r2, #16]
 800a7c0:	4311      	orrs	r1, r2
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	6952      	ldr	r2, [r2, #20]
 800a7c6:	0252      	lsls	r2, r2, #9
 800a7c8:	4311      	orrs	r1, r2
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6992      	ldr	r2, [r2, #24]
 800a7ce:	0352      	lsls	r2, r2, #13
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	f043 0208 	orr.w	r2, r3, #8
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	fff00181 	.word	0xfff00181

0800a7f0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b10      	cmp	r3, #16
 800a800:	d112      	bne.n	800a828 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	431a      	orrs	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	041b      	lsls	r3, r3, #16
 800a818:	431a      	orrs	r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	061b      	lsls	r3, r3, #24
 800a820:	431a      	orrs	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	609a      	str	r2, [r3, #8]
 800a826:	e011      	b.n	800a84c <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	431a      	orrs	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	041b      	lsls	r3, r3, #16
 800a83e:	431a      	orrs	r2, r3
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	061b      	lsls	r3, r3, #24
 800a846:	431a      	orrs	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	629a      	str	r2, [r3, #40]	@ 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b10      	cmp	r3, #16
 800a86a:	d112      	bne.n	800a892 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	021b      	lsls	r3, r3, #8
 800a87a:	431a      	orrs	r2, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	041b      	lsls	r3, r3, #16
 800a882:	431a      	orrs	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	061b      	lsls	r3, r3, #24
 800a88a:	431a      	orrs	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	60da      	str	r2, [r3, #12]
 800a890:	e011      	b.n	800a8b6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	021b      	lsls	r3, r3, #8
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	041b      	lsls	r3, r3, #16
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	061b      	lsls	r3, r3, #24
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b084      	sub	sp, #16
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	f107 001c 	add.w	r0, r7, #28
 800a8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d123      	bne.n	800a926 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a8f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d105      	bne.n	800a91a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f001 fae2 	bl	800bee4 <USB_CoreReset>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]
 800a924:	e01b      	b.n	800a95e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f001 fad6 	bl	800bee4 <USB_CoreReset>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a93c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a940:	2b00      	cmp	r3, #0
 800a942:	d106      	bne.n	800a952 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a948:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a950:	e005      	b.n	800a95e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a956:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a95e:	7fbb      	ldrb	r3, [r7, #30]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d10b      	bne.n	800a97c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f043 0206 	orr.w	r2, r3, #6
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f043 0220 	orr.w	r2, r3, #32
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a988:	b004      	add	sp, #16
 800a98a:	4770      	bx	lr

0800a98c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d165      	bne.n	800aa6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	4a41      	ldr	r2, [pc, #260]	@ (800aaa8 <USB_SetTurnaroundTime+0x11c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d906      	bls.n	800a9b6 <USB_SetTurnaroundTime+0x2a>
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	4a40      	ldr	r2, [pc, #256]	@ (800aaac <USB_SetTurnaroundTime+0x120>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d202      	bcs.n	800a9b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a9b0:	230f      	movs	r3, #15
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e062      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	4a3c      	ldr	r2, [pc, #240]	@ (800aaac <USB_SetTurnaroundTime+0x120>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d306      	bcc.n	800a9cc <USB_SetTurnaroundTime+0x40>
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	4a3b      	ldr	r2, [pc, #236]	@ (800aab0 <USB_SetTurnaroundTime+0x124>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d202      	bcs.n	800a9cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a9c6:	230e      	movs	r3, #14
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	e057      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4a38      	ldr	r2, [pc, #224]	@ (800aab0 <USB_SetTurnaroundTime+0x124>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d306      	bcc.n	800a9e2 <USB_SetTurnaroundTime+0x56>
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	4a37      	ldr	r2, [pc, #220]	@ (800aab4 <USB_SetTurnaroundTime+0x128>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d202      	bcs.n	800a9e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a9dc:	230d      	movs	r3, #13
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	e04c      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4a33      	ldr	r2, [pc, #204]	@ (800aab4 <USB_SetTurnaroundTime+0x128>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d306      	bcc.n	800a9f8 <USB_SetTurnaroundTime+0x6c>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4a32      	ldr	r2, [pc, #200]	@ (800aab8 <USB_SetTurnaroundTime+0x12c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d802      	bhi.n	800a9f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	617b      	str	r3, [r7, #20]
 800a9f6:	e041      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4a2f      	ldr	r2, [pc, #188]	@ (800aab8 <USB_SetTurnaroundTime+0x12c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d906      	bls.n	800aa0e <USB_SetTurnaroundTime+0x82>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	4a2e      	ldr	r2, [pc, #184]	@ (800aabc <USB_SetTurnaroundTime+0x130>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d802      	bhi.n	800aa0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa08:	230b      	movs	r3, #11
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	e036      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4a2a      	ldr	r2, [pc, #168]	@ (800aabc <USB_SetTurnaroundTime+0x130>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d906      	bls.n	800aa24 <USB_SetTurnaroundTime+0x98>
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	4a29      	ldr	r2, [pc, #164]	@ (800aac0 <USB_SetTurnaroundTime+0x134>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d802      	bhi.n	800aa24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa1e:	230a      	movs	r3, #10
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	e02b      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4a26      	ldr	r2, [pc, #152]	@ (800aac0 <USB_SetTurnaroundTime+0x134>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d906      	bls.n	800aa3a <USB_SetTurnaroundTime+0xae>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4a25      	ldr	r2, [pc, #148]	@ (800aac4 <USB_SetTurnaroundTime+0x138>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d202      	bcs.n	800aa3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aa34:	2309      	movs	r3, #9
 800aa36:	617b      	str	r3, [r7, #20]
 800aa38:	e020      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4a21      	ldr	r2, [pc, #132]	@ (800aac4 <USB_SetTurnaroundTime+0x138>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d306      	bcc.n	800aa50 <USB_SetTurnaroundTime+0xc4>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	4a20      	ldr	r2, [pc, #128]	@ (800aac8 <USB_SetTurnaroundTime+0x13c>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d802      	bhi.n	800aa50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e015      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4a1d      	ldr	r2, [pc, #116]	@ (800aac8 <USB_SetTurnaroundTime+0x13c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d906      	bls.n	800aa66 <USB_SetTurnaroundTime+0xda>
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4a1c      	ldr	r2, [pc, #112]	@ (800aacc <USB_SetTurnaroundTime+0x140>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d202      	bcs.n	800aa66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aa60:	2307      	movs	r3, #7
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	e00a      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aa66:	2306      	movs	r3, #6
 800aa68:	617b      	str	r3, [r7, #20]
 800aa6a:	e007      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d102      	bne.n	800aa78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aa72:	2309      	movs	r3, #9
 800aa74:	617b      	str	r3, [r7, #20]
 800aa76:	e001      	b.n	800aa7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aa78:	2309      	movs	r3, #9
 800aa7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	029b      	lsls	r3, r3, #10
 800aa90:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aa94:	431a      	orrs	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	00d8acbf 	.word	0x00d8acbf
 800aaac:	00e4e1c0 	.word	0x00e4e1c0
 800aab0:	00f42400 	.word	0x00f42400
 800aab4:	01067380 	.word	0x01067380
 800aab8:	011a499f 	.word	0x011a499f
 800aabc:	01312cff 	.word	0x01312cff
 800aac0:	014ca43f 	.word	0x014ca43f
 800aac4:	016e3600 	.word	0x016e3600
 800aac8:	01a6ab1f 	.word	0x01a6ab1f
 800aacc:	01e84800 	.word	0x01e84800

0800aad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f043 0201 	orr.w	r2, r3, #1
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	f023 0201 	bic.w	r2, r3, #1
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d115      	bne.n	800ab62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab42:	200a      	movs	r0, #10
 800ab44:	f7fa fee8 	bl	8005918 <HAL_Delay>
      ms += 10U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	330a      	adds	r3, #10
 800ab4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 f939 	bl	800bdc6 <USB_GetMode>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d01e      	beq.n	800ab98 <USB_SetCurrentMode+0x84>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab5e:	d9f0      	bls.n	800ab42 <USB_SetCurrentMode+0x2e>
 800ab60:	e01a      	b.n	800ab98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab62:	78fb      	ldrb	r3, [r7, #3]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d115      	bne.n	800ab94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab74:	200a      	movs	r0, #10
 800ab76:	f7fa fecf 	bl	8005918 <HAL_Delay>
      ms += 10U;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	330a      	adds	r3, #10
 800ab7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 f920 	bl	800bdc6 <USB_GetMode>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <USB_SetCurrentMode+0x84>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab90:	d9f0      	bls.n	800ab74 <USB_SetCurrentMode+0x60>
 800ab92:	e001      	b.n	800ab98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e005      	b.n	800aba4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ab9c:	d101      	bne.n	800aba2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abac:	b084      	sub	sp, #16
 800abae:	b580      	push	{r7, lr}
 800abb0:	b086      	sub	sp, #24
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abc6:	2300      	movs	r3, #0
 800abc8:	613b      	str	r3, [r7, #16]
 800abca:	e009      	b.n	800abe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	3340      	adds	r3, #64	@ 0x40
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3301      	adds	r3, #1
 800abde:	613b      	str	r3, [r7, #16]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2b0e      	cmp	r3, #14
 800abe4:	d9f2      	bls.n	800abcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800abe6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abea:	2b00      	cmp	r3, #0
 800abec:	d11c      	bne.n	800ac28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abfc:	f043 0302 	orr.w	r3, r3, #2
 800ac00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac12:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac26:	e00b      	b.n	800ac40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac38:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac46:	461a      	mov	r2, r3
 800ac48:	2300      	movs	r3, #0
 800ac4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d10d      	bne.n	800ac70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f968 	bl	800af34 <USB_SetDevSpeed>
 800ac64:	e008      	b.n	800ac78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac66:	2101      	movs	r1, #1
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f963 	bl	800af34 <USB_SetDevSpeed>
 800ac6e:	e003      	b.n	800ac78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac70:	2103      	movs	r1, #3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f95e 	bl	800af34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac78:	2110      	movs	r1, #16
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f8fa 	bl	800ae74 <USB_FlushTxFifo>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f924 	bl	800aed8 <USB_FlushRxFifo>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca0:	461a      	mov	r2, r3
 800aca2:	2300      	movs	r3, #0
 800aca4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acac:	461a      	mov	r2, r3
 800acae:	2300      	movs	r3, #0
 800acb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb8:	461a      	mov	r2, r3
 800acba:	2300      	movs	r3, #0
 800acbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
 800acc2:	e043      	b.n	800ad4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acda:	d118      	bne.n	800ad0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d10a      	bne.n	800acf8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acee:	461a      	mov	r2, r3
 800acf0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	e013      	b.n	800ad20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad04:	461a      	mov	r2, r3
 800ad06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e008      	b.n	800ad20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad50:	461a      	mov	r2, r3
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d3b5      	bcc.n	800acc4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	e043      	b.n	800ade6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	015a      	lsls	r2, r3, #5
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4413      	add	r3, r2
 800ad66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad74:	d118      	bne.n	800ada8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10a      	bne.n	800ad92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	e013      	b.n	800adba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	e008      	b.n	800adba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb4:	461a      	mov	r2, r3
 800adb6:	2300      	movs	r3, #0
 800adb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc6:	461a      	mov	r2, r3
 800adc8:	2300      	movs	r3, #0
 800adca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add8:	461a      	mov	r2, r3
 800adda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800adde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3301      	adds	r3, #1
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800adea:	461a      	mov	r2, r3
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	4293      	cmp	r3, r2
 800adf0:	d3b5      	bcc.n	800ad5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d105      	bne.n	800ae28 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	f043 0210 	orr.w	r2, r3, #16
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	699a      	ldr	r2, [r3, #24]
 800ae2c:	4b10      	ldr	r3, [pc, #64]	@ (800ae70 <USB_DevInit+0x2c4>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	f043 0208 	orr.w	r2, r3, #8
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d107      	bne.n	800ae60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae58:	f043 0304 	orr.w	r3, r3, #4
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae6c:	b004      	add	sp, #16
 800ae6e:	4770      	bx	lr
 800ae70:	803c3800 	.word	0x803c3800

0800ae74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae8e:	d901      	bls.n	800ae94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e01b      	b.n	800aecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	daf2      	bge.n	800ae82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	019b      	lsls	r3, r3, #6
 800aea4:	f043 0220 	orr.w	r2, r3, #32
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeb8:	d901      	bls.n	800aebe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e006      	b.n	800aecc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	f003 0320 	and.w	r3, r3, #32
 800aec6:	2b20      	cmp	r3, #32
 800aec8:	d0f0      	beq.n	800aeac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aee0:	2300      	movs	r3, #0
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aef0:	d901      	bls.n	800aef6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e018      	b.n	800af28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	daf2      	bge.n	800aee4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2210      	movs	r2, #16
 800af06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af14:	d901      	bls.n	800af1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e006      	b.n	800af28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	f003 0310 	and.w	r3, r3, #16
 800af22:	2b10      	cmp	r3, #16
 800af24:	d0f0      	beq.n	800af08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	78fb      	ldrb	r3, [r7, #3]
 800af4e:	68f9      	ldr	r1, [r7, #12]
 800af50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af54:	4313      	orrs	r3, r2
 800af56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800af66:	b480      	push	{r7}
 800af68:	b087      	sub	sp, #28
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	f003 0306 	and.w	r3, r3, #6
 800af7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d102      	bne.n	800af8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800af86:	2300      	movs	r3, #0
 800af88:	75fb      	strb	r3, [r7, #23]
 800af8a:	e00a      	b.n	800afa2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d002      	beq.n	800af98 <USB_GetDevSpeed+0x32>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b06      	cmp	r3, #6
 800af96:	d102      	bne.n	800af9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800af98:	2302      	movs	r3, #2
 800af9a:	75fb      	strb	r3, [r7, #23]
 800af9c:	e001      	b.n	800afa2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800af9e:	230f      	movs	r3, #15
 800afa0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d13a      	bne.n	800b042 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afd2:	69da      	ldr	r2, [r3, #28]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	2101      	movs	r1, #1
 800afde:	fa01 f303 	lsl.w	r3, r1, r3
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	68f9      	ldr	r1, [r7, #12]
 800afe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afea:	4313      	orrs	r3, r2
 800afec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d155      	bne.n	800b0b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b020:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	059b      	lsls	r3, r3, #22
 800b026:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b028:	4313      	orrs	r3, r2
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b03a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	e036      	b.n	800b0b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b048:	69da      	ldr	r2, [r3, #28]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	f003 030f 	and.w	r3, r3, #15
 800b052:	2101      	movs	r1, #1
 800b054:	fa01 f303 	lsl.w	r3, r1, r3
 800b058:	041b      	lsls	r3, r3, #16
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b060:	4313      	orrs	r3, r2
 800b062:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d11a      	bne.n	800b0b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	791b      	ldrb	r3, [r3, #4]
 800b094:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b096:	430b      	orrs	r3, r1
 800b098:	4313      	orrs	r3, r2
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	0151      	lsls	r1, r2, #5
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	440a      	add	r2, r1
 800b0a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
	...

0800b0c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	785b      	ldrb	r3, [r3, #1]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d161      	bne.n	800b1a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	015a      	lsls	r2, r3, #5
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b0ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b0f2:	d11f      	bne.n	800b134 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b10e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b112:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b132:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b13a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	f003 030f 	and.w	r3, r3, #15
 800b144:	2101      	movs	r1, #1
 800b146:	fa01 f303 	lsl.w	r3, r1, r3
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	43db      	mvns	r3, r3
 800b14e:	68f9      	ldr	r1, [r7, #12]
 800b150:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b154:	4013      	ands	r3, r2
 800b156:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b15e:	69da      	ldr	r2, [r3, #28]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	2101      	movs	r1, #1
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	b29b      	uxth	r3, r3
 800b170:	43db      	mvns	r3, r3
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b178:	4013      	ands	r3, r2
 800b17a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	0159      	lsls	r1, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	440b      	add	r3, r1
 800b192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b196:	4619      	mov	r1, r3
 800b198:	4b35      	ldr	r3, [pc, #212]	@ (800b270 <USB_DeactivateEndpoint+0x1b0>)
 800b19a:	4013      	ands	r3, r2
 800b19c:	600b      	str	r3, [r1, #0]
 800b19e:	e060      	b.n	800b262 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1b6:	d11f      	bne.n	800b1f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 030f 	and.w	r3, r3, #15
 800b208:	2101      	movs	r1, #1
 800b20a:	fa01 f303 	lsl.w	r3, r1, r3
 800b20e:	041b      	lsls	r3, r3, #16
 800b210:	43db      	mvns	r3, r3
 800b212:	68f9      	ldr	r1, [r7, #12]
 800b214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b218:	4013      	ands	r3, r2
 800b21a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b222:	69da      	ldr	r2, [r3, #28]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	2101      	movs	r1, #1
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	43db      	mvns	r3, r3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b23c:	4013      	ands	r3, r2
 800b23e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	0159      	lsls	r1, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	440b      	add	r3, r1
 800b256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b25a:	4619      	mov	r1, r3
 800b25c:	4b05      	ldr	r3, [pc, #20]	@ (800b274 <USB_DeactivateEndpoint+0x1b4>)
 800b25e:	4013      	ands	r3, r2
 800b260:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	ec337800 	.word	0xec337800
 800b274:	eff37800 	.word	0xeff37800

0800b278 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08a      	sub	sp, #40	@ 0x28
 800b27c:	af02      	add	r7, sp, #8
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	4613      	mov	r3, r2
 800b284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b01      	cmp	r3, #1
 800b296:	f040 817a 	bne.w	800b58e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d132      	bne.n	800b308 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	015a      	lsls	r2, r3, #5
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2ae:	691b      	ldr	r3, [r3, #16]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	0151      	lsls	r1, r2, #5
 800b2b4:	69fa      	ldr	r2, [r7, #28]
 800b2b6:	440a      	add	r2, r1
 800b2b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	69ba      	ldr	r2, [r7, #24]
 800b2d6:	0151      	lsls	r1, r2, #5
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	440a      	add	r2, r1
 800b2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	69ba      	ldr	r2, [r7, #24]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	69fa      	ldr	r2, [r7, #28]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b300:	0cdb      	lsrs	r3, r3, #19
 800b302:	04db      	lsls	r3, r3, #19
 800b304:	6113      	str	r3, [r2, #16]
 800b306:	e092      	b.n	800b42e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	69ba      	ldr	r2, [r7, #24]
 800b318:	0151      	lsls	r1, r2, #5
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	440a      	add	r2, r1
 800b31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b322:	0cdb      	lsrs	r3, r3, #19
 800b324:	04db      	lsls	r3, r3, #19
 800b326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	0151      	lsls	r1, r2, #5
 800b33a:	69fa      	ldr	r2, [r7, #28]
 800b33c:	440a      	add	r2, r1
 800b33e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b342:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b346:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b34a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d11a      	bne.n	800b388 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	691a      	ldr	r2, [r3, #16]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d903      	bls.n	800b366 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	689a      	ldr	r2, [r3, #8]
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	0151      	lsls	r1, r2, #5
 800b378:	69fa      	ldr	r2, [r7, #28]
 800b37a:	440a      	add	r2, r1
 800b37c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b380:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b384:	6113      	str	r3, [r2, #16]
 800b386:	e01b      	b.n	800b3c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b394:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6919      	ldr	r1, [r3, #16]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	440b      	add	r3, r1
 800b3a0:	1e59      	subs	r1, r3, #1
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b3ac:	4ba2      	ldr	r3, [pc, #648]	@ (800b638 <USB_EPStartXfer+0x3c0>)
 800b3ae:	400b      	ands	r3, r1
 800b3b0:	69b9      	ldr	r1, [r7, #24]
 800b3b2:	0148      	lsls	r0, r1, #5
 800b3b4:	69f9      	ldr	r1, [r7, #28]
 800b3b6:	4401      	add	r1, r0
 800b3b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3cc:	691a      	ldr	r2, [r3, #16]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3d6:	69b9      	ldr	r1, [r7, #24]
 800b3d8:	0148      	lsls	r0, r1, #5
 800b3da:	69f9      	ldr	r1, [r7, #28]
 800b3dc:	4401      	add	r1, r0
 800b3de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	791b      	ldrb	r3, [r3, #4]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d11f      	bne.n	800b42e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b408:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b40c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	0151      	lsls	r1, r2, #5
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	440a      	add	r2, r1
 800b424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b428:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b42c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d14b      	bne.n	800b4cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	69db      	ldr	r3, [r3, #28]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d009      	beq.n	800b450 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b448:	461a      	mov	r2, r3
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	791b      	ldrb	r3, [r3, #4]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d128      	bne.n	800b4aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b464:	2b00      	cmp	r3, #0
 800b466:	d110      	bne.n	800b48a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69ba      	ldr	r2, [r7, #24]
 800b478:	0151      	lsls	r1, r2, #5
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	440a      	add	r2, r1
 800b47e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b482:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	e00f      	b.n	800b4aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	69ba      	ldr	r2, [r7, #24]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	69fa      	ldr	r2, [r7, #28]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	69fa      	ldr	r2, [r7, #28]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	e165      	b.n	800b798 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	0151      	lsls	r1, r2, #5
 800b4de:	69fa      	ldr	r2, [r7, #28]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	791b      	ldrb	r3, [r3, #4]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d015      	beq.n	800b520 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 814d 	beq.w	800b798 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	f003 030f 	and.w	r3, r3, #15
 800b50e:	2101      	movs	r1, #1
 800b510:	fa01 f303 	lsl.w	r3, r1, r3
 800b514:	69f9      	ldr	r1, [r7, #28]
 800b516:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b51a:	4313      	orrs	r3, r2
 800b51c:	634b      	str	r3, [r1, #52]	@ 0x34
 800b51e:	e13b      	b.n	800b798 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d110      	bne.n	800b552 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b54a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b54e:	6013      	str	r3, [r2, #0]
 800b550:	e00f      	b.n	800b572 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	0151      	lsls	r1, r2, #5
 800b564:	69fa      	ldr	r2, [r7, #28]
 800b566:	440a      	add	r2, r1
 800b568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b56c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b570:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	68d9      	ldr	r1, [r3, #12]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	781a      	ldrb	r2, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	b298      	uxth	r0, r3
 800b580:	79fb      	ldrb	r3, [r7, #7]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	4603      	mov	r3, r0
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f000 f9b8 	bl	800b8fc <USB_WritePacket>
 800b58c:	e104      	b.n	800b798 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	4413      	add	r3, r2
 800b596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	0151      	lsls	r1, r2, #5
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	440a      	add	r2, r1
 800b5a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5a8:	0cdb      	lsrs	r3, r3, #19
 800b5aa:	04db      	lsls	r3, r3, #19
 800b5ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	0151      	lsls	r1, r2, #5
 800b5c0:	69fa      	ldr	r2, [r7, #28]
 800b5c2:	440a      	add	r2, r1
 800b5c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b5cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b5d0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d131      	bne.n	800b63c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5fc:	691a      	ldr	r2, [r3, #16]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b606:	69b9      	ldr	r1, [r7, #24]
 800b608:	0148      	lsls	r0, r1, #5
 800b60a:	69f9      	ldr	r1, [r7, #28]
 800b60c:	4401      	add	r1, r0
 800b60e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b612:	4313      	orrs	r3, r2
 800b614:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	69fa      	ldr	r2, [r7, #28]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b630:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b634:	6113      	str	r3, [r2, #16]
 800b636:	e061      	b.n	800b6fc <USB_EPStartXfer+0x484>
 800b638:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	691b      	ldr	r3, [r3, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d123      	bne.n	800b68c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	691a      	ldr	r2, [r3, #16]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b65a:	69b9      	ldr	r1, [r7, #24]
 800b65c:	0148      	lsls	r0, r1, #5
 800b65e:	69f9      	ldr	r1, [r7, #28]
 800b660:	4401      	add	r1, r0
 800b662:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b666:	4313      	orrs	r3, r2
 800b668:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	0151      	lsls	r1, r2, #5
 800b67c:	69fa      	ldr	r2, [r7, #28]
 800b67e:	440a      	add	r2, r1
 800b680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b688:	6113      	str	r3, [r2, #16]
 800b68a:	e037      	b.n	800b6fc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	4413      	add	r3, r2
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	8afa      	ldrh	r2, [r7, #22]
 800b6a8:	fb03 f202 	mul.w	r2, r3, r2
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	8afb      	ldrh	r3, [r7, #22]
 800b6c0:	04d9      	lsls	r1, r3, #19
 800b6c2:	4b38      	ldr	r3, [pc, #224]	@ (800b7a4 <USB_EPStartXfer+0x52c>)
 800b6c4:	400b      	ands	r3, r1
 800b6c6:	69b9      	ldr	r1, [r7, #24]
 800b6c8:	0148      	lsls	r0, r1, #5
 800b6ca:	69f9      	ldr	r1, [r7, #28]
 800b6cc:	4401      	add	r1, r0
 800b6ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ec:	69b9      	ldr	r1, [r7, #24]
 800b6ee:	0148      	lsls	r0, r1, #5
 800b6f0:	69f9      	ldr	r1, [r7, #28]
 800b6f2:	4401      	add	r1, r0
 800b6f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d10d      	bne.n	800b71e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	68d9      	ldr	r1, [r3, #12]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71a:	460a      	mov	r2, r1
 800b71c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	791b      	ldrb	r3, [r3, #4]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d128      	bne.n	800b778 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d110      	bne.n	800b758 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	e00f      	b.n	800b778 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b792:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	1ff80000 	.word	0x1ff80000

0800b7a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d14a      	bne.n	800b85c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7de:	f040 8086 	bne.w	800b8ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	7812      	ldrb	r2, [r2, #0]
 800b7f6:	0151      	lsls	r1, r2, #5
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	440a      	add	r2, r1
 800b7fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b800:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b804:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	7812      	ldrb	r2, [r2, #0]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b836:	4293      	cmp	r3, r2
 800b838:	d902      	bls.n	800b840 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
          break;
 800b83e:	e056      	b.n	800b8ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b858:	d0e7      	beq.n	800b82a <USB_EPStopXfer+0x82>
 800b85a:	e048      	b.n	800b8ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	015a      	lsls	r2, r3, #5
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	4413      	add	r3, r2
 800b866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b874:	d13b      	bne.n	800b8ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	7812      	ldrb	r2, [r2, #0]
 800b88a:	0151      	lsls	r1, r2, #5
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	440a      	add	r2, r1
 800b890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b894:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b898:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d902      	bls.n	800b8d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b8d2:	e00c      	b.n	800b8ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	015a      	lsls	r2, r3, #5
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	4413      	add	r3, r2
 800b8de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8ec:	d0e7      	beq.n	800b8be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	371c      	adds	r7, #28
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b089      	sub	sp, #36	@ 0x24
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	4611      	mov	r1, r2
 800b908:	461a      	mov	r2, r3
 800b90a:	460b      	mov	r3, r1
 800b90c:	71fb      	strb	r3, [r7, #7]
 800b90e:	4613      	mov	r3, r2
 800b910:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b91a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d123      	bne.n	800b96a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b922:	88bb      	ldrh	r3, [r7, #4]
 800b924:	3303      	adds	r3, #3
 800b926:	089b      	lsrs	r3, r3, #2
 800b928:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b92a:	2300      	movs	r3, #0
 800b92c:	61bb      	str	r3, [r7, #24]
 800b92e:	e018      	b.n	800b962 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	031a      	lsls	r2, r3, #12
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	4413      	add	r3, r2
 800b938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b93c:	461a      	mov	r2, r3
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	3301      	adds	r3, #1
 800b948:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	3301      	adds	r3, #1
 800b94e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	3301      	adds	r3, #1
 800b954:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	3301      	adds	r3, #1
 800b95a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	3301      	adds	r3, #1
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	429a      	cmp	r2, r3
 800b968:	d3e2      	bcc.n	800b930 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3724      	adds	r7, #36	@ 0x24
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b978:	b480      	push	{r7}
 800b97a:	b08b      	sub	sp, #44	@ 0x2c
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b98e:	88fb      	ldrh	r3, [r7, #6]
 800b990:	089b      	lsrs	r3, r3, #2
 800b992:	b29b      	uxth	r3, r3
 800b994:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b996:	88fb      	ldrh	r3, [r7, #6]
 800b998:	f003 0303 	and.w	r3, r3, #3
 800b99c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b99e:	2300      	movs	r3, #0
 800b9a0:	623b      	str	r3, [r7, #32]
 800b9a2:	e014      	b.n	800b9ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	3301      	adds	r3, #1
 800b9ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	3301      	adds	r3, #1
 800b9c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	6a3a      	ldr	r2, [r7, #32]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d3e6      	bcc.n	800b9a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b9d6:	8bfb      	ldrh	r3, [r7, #30]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01e      	beq.n	800ba1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f107 0310 	add.w	r3, r7, #16
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	701a      	strb	r2, [r3, #0]
      i++;
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	3301      	adds	r3, #1
 800ba06:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ba0e:	8bfb      	ldrh	r3, [r7, #30]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba14:	8bfb      	ldrh	r3, [r7, #30]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1ea      	bne.n	800b9f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	372c      	adds	r7, #44	@ 0x2c
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	785b      	ldrb	r3, [r3, #1]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d12c      	bne.n	800ba9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	db12      	blt.n	800ba7c <USB_EPSetStall+0x54>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00f      	beq.n	800ba7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	68fa      	ldr	r2, [r7, #12]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	e02b      	b.n	800baf6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	db12      	blt.n	800bad6 <USB_EPSetStall+0xae>
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00f      	beq.n	800bad6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	0151      	lsls	r1, r2, #5
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	440a      	add	r2, r1
 800bacc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bad0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bad4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	0151      	lsls	r1, r2, #5
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	440a      	add	r2, r1
 800baec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800baf4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	785b      	ldrb	r3, [r3, #1]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d128      	bne.n	800bb72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	0151      	lsls	r1, r2, #5
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	440a      	add	r2, r1
 800bb36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	791b      	ldrb	r3, [r3, #4]
 800bb44:	2b03      	cmp	r3, #3
 800bb46:	d003      	beq.n	800bb50 <USB_EPClearStall+0x4c>
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	791b      	ldrb	r3, [r3, #4]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d138      	bne.n	800bbc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	0151      	lsls	r1, r2, #5
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	440a      	add	r2, r1
 800bb66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	e027      	b.n	800bbc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	0151      	lsls	r1, r2, #5
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	440a      	add	r2, r1
 800bb88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	791b      	ldrb	r3, [r3, #4]
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d003      	beq.n	800bba2 <USB_EPClearStall+0x9e>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	791b      	ldrb	r3, [r3, #4]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	d10f      	bne.n	800bbc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bbf2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	78fb      	ldrb	r3, [r7, #3]
 800bbfe:	011b      	lsls	r3, r3, #4
 800bc00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bc04:	68f9      	ldr	r1, [r7, #12]
 800bc06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc36:	f023 0303 	bic.w	r3, r3, #3
 800bc3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc4a:	f023 0302 	bic.w	r3, r3, #2
 800bc4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc78:	f023 0303 	bic.w	r3, r3, #3
 800bc7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc8c:	f043 0302 	orr.w	r3, r3, #2
 800bc90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b085      	sub	sp, #20
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	4013      	ands	r3, r2
 800bce8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	0c1b      	lsrs	r3, r3, #16
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b085      	sub	sp, #20
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	b29b      	uxth	r3, r3
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b085      	sub	sp, #20
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd3e:	78fb      	ldrb	r3, [r7, #3]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	4013      	ands	r3, r2
 800bd5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b087      	sub	sp, #28
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	f003 030f 	and.w	r3, r3, #15
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9a:	01db      	lsls	r3, r3, #7
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bda4:	78fb      	ldrb	r3, [r7, #3]
 800bda6:	015a      	lsls	r2, r3, #5
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	4413      	add	r3, r2
 800bdac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdc6:	b480      	push	{r7}
 800bdc8:	b083      	sub	sp, #12
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	f003 0301 	and.w	r3, r3, #1
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800be00:	f023 0307 	bic.w	r3, r3, #7
 800be04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800be28:	b480      	push	{r7}
 800be2a:	b087      	sub	sp, #28
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	460b      	mov	r3, r1
 800be32:	607a      	str	r2, [r7, #4]
 800be34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	333c      	adds	r3, #60	@ 0x3c
 800be3e:	3304      	adds	r3, #4
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	4a26      	ldr	r2, [pc, #152]	@ (800bee0 <USB_EP0_OutStart+0xb8>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d90a      	bls.n	800be62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be5c:	d101      	bne.n	800be62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e037      	b.n	800bed2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be68:	461a      	mov	r2, r3
 800be6a:	2300      	movs	r3, #0
 800be6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be90:	f043 0318 	orr.w	r3, r3, #24
 800be94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	697a      	ldr	r2, [r7, #20]
 800bea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bea4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bea8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800beaa:	7afb      	ldrb	r3, [r7, #11]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d10f      	bne.n	800bed0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb6:	461a      	mov	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bece:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	4f54300a 	.word	0x4f54300a

0800bee4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	3301      	adds	r3, #1
 800bef4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800befc:	d901      	bls.n	800bf02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e01b      	b.n	800bf3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	daf2      	bge.n	800bef0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	f043 0201 	orr.w	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf26:	d901      	bls.n	800bf2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e006      	b.n	800bf3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d0f0      	beq.n	800bf1a <USB_CoreReset+0x36>

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bf58:	f002 fcbe 	bl	800e8d8 <USBD_static_malloc>
 800bf5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d109      	bne.n	800bf78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	32b0      	adds	r2, #176	@ 0xb0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bf74:	2302      	movs	r3, #2
 800bf76:	e0d4      	b.n	800c122 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bf78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f007 f9c1 	bl	8013306 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32b0      	adds	r2, #176	@ 0xb0
 800bf8e:	68f9      	ldr	r1, [r7, #12]
 800bf90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	32b0      	adds	r2, #176	@ 0xb0
 800bf9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7c1b      	ldrb	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d138      	bne.n	800c022 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfb0:	4b5e      	ldr	r3, [pc, #376]	@ (800c12c <USBD_CDC_Init+0x1e4>)
 800bfb2:	7819      	ldrb	r1, [r3, #0]
 800bfb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfb8:	2202      	movs	r2, #2
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f002 fb69 	bl	800e692 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bfc0:	4b5a      	ldr	r3, [pc, #360]	@ (800c12c <USBD_CDC_Init+0x1e4>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	f003 020f 	and.w	r2, r3, #15
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	440b      	add	r3, r1
 800bfd4:	3324      	adds	r3, #36	@ 0x24
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bfda:	4b55      	ldr	r3, [pc, #340]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800bfdc:	7819      	ldrb	r1, [r3, #0]
 800bfde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f002 fb54 	bl	800e692 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bfea:	4b51      	ldr	r3, [pc, #324]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	f003 020f 	and.w	r2, r3, #15
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	4613      	mov	r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	440b      	add	r3, r1
 800bffe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c002:	2201      	movs	r2, #1
 800c004:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c006:	4b4b      	ldr	r3, [pc, #300]	@ (800c134 <USBD_CDC_Init+0x1ec>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	f003 020f 	and.w	r2, r3, #15
 800c00e:	6879      	ldr	r1, [r7, #4]
 800c010:	4613      	mov	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	440b      	add	r3, r1
 800c01a:	3326      	adds	r3, #38	@ 0x26
 800c01c:	2210      	movs	r2, #16
 800c01e:	801a      	strh	r2, [r3, #0]
 800c020:	e035      	b.n	800c08e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c022:	4b42      	ldr	r3, [pc, #264]	@ (800c12c <USBD_CDC_Init+0x1e4>)
 800c024:	7819      	ldrb	r1, [r3, #0]
 800c026:	2340      	movs	r3, #64	@ 0x40
 800c028:	2202      	movs	r2, #2
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f002 fb31 	bl	800e692 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c030:	4b3e      	ldr	r3, [pc, #248]	@ (800c12c <USBD_CDC_Init+0x1e4>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 020f 	and.w	r2, r3, #15
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	440b      	add	r3, r1
 800c044:	3324      	adds	r3, #36	@ 0x24
 800c046:	2201      	movs	r2, #1
 800c048:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c04a:	4b39      	ldr	r3, [pc, #228]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800c04c:	7819      	ldrb	r1, [r3, #0]
 800c04e:	2340      	movs	r3, #64	@ 0x40
 800c050:	2202      	movs	r2, #2
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f002 fb1d 	bl	800e692 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c058:	4b35      	ldr	r3, [pc, #212]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f003 020f 	and.w	r2, r3, #15
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	440b      	add	r3, r1
 800c06c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c070:	2201      	movs	r2, #1
 800c072:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c074:	4b2f      	ldr	r3, [pc, #188]	@ (800c134 <USBD_CDC_Init+0x1ec>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f003 020f 	and.w	r2, r3, #15
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	440b      	add	r3, r1
 800c088:	3326      	adds	r3, #38	@ 0x26
 800c08a:	2210      	movs	r2, #16
 800c08c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c08e:	4b29      	ldr	r3, [pc, #164]	@ (800c134 <USBD_CDC_Init+0x1ec>)
 800c090:	7819      	ldrb	r1, [r3, #0]
 800c092:	2308      	movs	r3, #8
 800c094:	2203      	movs	r2, #3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f002 fafb 	bl	800e692 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c09c:	4b25      	ldr	r3, [pc, #148]	@ (800c134 <USBD_CDC_Init+0x1ec>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 020f 	and.w	r2, r3, #15
 800c0a4:	6879      	ldr	r1, [r7, #4]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	440b      	add	r3, r1
 800c0b0:	3324      	adds	r3, #36	@ 0x24
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	33b0      	adds	r3, #176	@ 0xb0
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	e018      	b.n	800c122 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7c1b      	ldrb	r3, [r3, #16]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c0f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800c0fa:	7819      	ldrb	r1, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f002 fbb2 	bl	800e870 <USBD_LL_PrepareReceive>
 800c10c:	e008      	b.n	800c120 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c10e:	4b08      	ldr	r3, [pc, #32]	@ (800c130 <USBD_CDC_Init+0x1e8>)
 800c110:	7819      	ldrb	r1, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c118:	2340      	movs	r3, #64	@ 0x40
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f002 fba8 	bl	800e870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20000093 	.word	0x20000093
 800c130:	20000094 	.word	0x20000094
 800c134:	20000095 	.word	0x20000095

0800c138 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c144:	4b3a      	ldr	r3, [pc, #232]	@ (800c230 <USBD_CDC_DeInit+0xf8>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f002 fac7 	bl	800e6de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c150:	4b37      	ldr	r3, [pc, #220]	@ (800c230 <USBD_CDC_DeInit+0xf8>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	f003 020f 	and.w	r2, r3, #15
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	4613      	mov	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	440b      	add	r3, r1
 800c164:	3324      	adds	r3, #36	@ 0x24
 800c166:	2200      	movs	r2, #0
 800c168:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c16a:	4b32      	ldr	r3, [pc, #200]	@ (800c234 <USBD_CDC_DeInit+0xfc>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	4619      	mov	r1, r3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f002 fab4 	bl	800e6de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c176:	4b2f      	ldr	r3, [pc, #188]	@ (800c234 <USBD_CDC_DeInit+0xfc>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	f003 020f 	and.w	r2, r3, #15
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c18e:	2200      	movs	r2, #0
 800c190:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c192:	4b29      	ldr	r3, [pc, #164]	@ (800c238 <USBD_CDC_DeInit+0x100>)
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f002 faa0 	bl	800e6de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c19e:	4b26      	ldr	r3, [pc, #152]	@ (800c238 <USBD_CDC_DeInit+0x100>)
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	f003 020f 	and.w	r2, r3, #15
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3324      	adds	r3, #36	@ 0x24
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800c238 <USBD_CDC_DeInit+0x100>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	f003 020f 	and.w	r2, r3, #15
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	440b      	add	r3, r1
 800c1cc:	3326      	adds	r3, #38	@ 0x26
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	32b0      	adds	r2, #176	@ 0xb0
 800c1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01f      	beq.n	800c224 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	33b0      	adds	r3, #176	@ 0xb0
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	32b0      	adds	r2, #176	@ 0xb0
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	4618      	mov	r0, r3
 800c208:	f002 fb74 	bl	800e8f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32b0      	adds	r2, #176	@ 0xb0
 800c216:	2100      	movs	r1, #0
 800c218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000093 	.word	0x20000093
 800c234:	20000094 	.word	0x20000094
 800c238:	20000095 	.word	0x20000095

0800c23c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	32b0      	adds	r2, #176	@ 0xb0
 800c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c254:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c256:	2300      	movs	r3, #0
 800c258:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c25a:	2300      	movs	r3, #0
 800c25c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e0bf      	b.n	800c3ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c274:	2b00      	cmp	r3, #0
 800c276:	d050      	beq.n	800c31a <USBD_CDC_Setup+0xde>
 800c278:	2b20      	cmp	r3, #32
 800c27a:	f040 80af 	bne.w	800c3dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	88db      	ldrh	r3, [r3, #6]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d03a      	beq.n	800c2fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	b25b      	sxtb	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	da1b      	bge.n	800c2c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	33b0      	adds	r3, #176	@ 0xb0
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	683a      	ldr	r2, [r7, #0]
 800c2a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	88d2      	ldrh	r2, [r2, #6]
 800c2ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	88db      	ldrh	r3, [r3, #6]
 800c2b2:	2b07      	cmp	r3, #7
 800c2b4:	bf28      	it	cs
 800c2b6:	2307      	movcs	r3, #7
 800c2b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	89fa      	ldrh	r2, [r7, #14]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f001 fd87 	bl	800ddd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c2c6:	e090      	b.n	800c3ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	785a      	ldrb	r2, [r3, #1]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	88db      	ldrh	r3, [r3, #6]
 800c2d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800c2d8:	d803      	bhi.n	800c2e2 <USBD_CDC_Setup+0xa6>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	88db      	ldrh	r3, [r3, #6]
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	e000      	b.n	800c2e4 <USBD_CDC_Setup+0xa8>
 800c2e2:	2240      	movs	r2, #64	@ 0x40
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c2ea:	6939      	ldr	r1, [r7, #16]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f001 fd99 	bl	800de2c <USBD_CtlPrepareRx>
      break;
 800c2fa:	e076      	b.n	800c3ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	33b0      	adds	r3, #176	@ 0xb0
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	7850      	ldrb	r0, [r2, #1]
 800c312:	2200      	movs	r2, #0
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	4798      	blx	r3
      break;
 800c318:	e067      	b.n	800c3ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	785b      	ldrb	r3, [r3, #1]
 800c31e:	2b0b      	cmp	r3, #11
 800c320:	d851      	bhi.n	800c3c6 <USBD_CDC_Setup+0x18a>
 800c322:	a201      	add	r2, pc, #4	@ (adr r2, 800c328 <USBD_CDC_Setup+0xec>)
 800c324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c328:	0800c359 	.word	0x0800c359
 800c32c:	0800c3d5 	.word	0x0800c3d5
 800c330:	0800c3c7 	.word	0x0800c3c7
 800c334:	0800c3c7 	.word	0x0800c3c7
 800c338:	0800c3c7 	.word	0x0800c3c7
 800c33c:	0800c3c7 	.word	0x0800c3c7
 800c340:	0800c3c7 	.word	0x0800c3c7
 800c344:	0800c3c7 	.word	0x0800c3c7
 800c348:	0800c3c7 	.word	0x0800c3c7
 800c34c:	0800c3c7 	.word	0x0800c3c7
 800c350:	0800c383 	.word	0x0800c383
 800c354:	0800c3ad 	.word	0x0800c3ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b03      	cmp	r3, #3
 800c362:	d107      	bne.n	800c374 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c364:	f107 030a 	add.w	r3, r7, #10
 800c368:	2202      	movs	r2, #2
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 fd31 	bl	800ddd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c372:	e032      	b.n	800c3da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f001 fcbb 	bl	800dcf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c37c:	2303      	movs	r3, #3
 800c37e:	75fb      	strb	r3, [r7, #23]
          break;
 800c380:	e02b      	b.n	800c3da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d107      	bne.n	800c39e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c38e:	f107 030d 	add.w	r3, r7, #13
 800c392:	2201      	movs	r2, #1
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f001 fd1c 	bl	800ddd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c39c:	e01d      	b.n	800c3da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f001 fca6 	bl	800dcf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3a6:	2303      	movs	r3, #3
 800c3a8:	75fb      	strb	r3, [r7, #23]
          break;
 800c3aa:	e016      	b.n	800c3da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b03      	cmp	r3, #3
 800c3b6:	d00f      	beq.n	800c3d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3b8:	6839      	ldr	r1, [r7, #0]
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f001 fc99 	bl	800dcf2 <USBD_CtlError>
            ret = USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c3c4:	e008      	b.n	800c3d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f001 fc92 	bl	800dcf2 <USBD_CtlError>
          ret = USBD_FAIL;
 800c3ce:	2303      	movs	r3, #3
 800c3d0:	75fb      	strb	r3, [r7, #23]
          break;
 800c3d2:	e002      	b.n	800c3da <USBD_CDC_Setup+0x19e>
          break;
 800c3d4:	bf00      	nop
 800c3d6:	e008      	b.n	800c3ea <USBD_CDC_Setup+0x1ae>
          break;
 800c3d8:	bf00      	nop
      }
      break;
 800c3da:	e006      	b.n	800c3ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 fc87 	bl	800dcf2 <USBD_CtlError>
      ret = USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c3e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c406:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	32b0      	adds	r2, #176	@ 0xb0
 800c412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e065      	b.n	800c4ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	32b0      	adds	r2, #176	@ 0xb0
 800c428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	f003 020f 	and.w	r2, r3, #15
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	440b      	add	r3, r1
 800c440:	3318      	adds	r3, #24
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d02f      	beq.n	800c4a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c448:	78fb      	ldrb	r3, [r7, #3]
 800c44a:	f003 020f 	and.w	r2, r3, #15
 800c44e:	6879      	ldr	r1, [r7, #4]
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	440b      	add	r3, r1
 800c45a:	3318      	adds	r3, #24
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	78fb      	ldrb	r3, [r7, #3]
 800c460:	f003 010f 	and.w	r1, r3, #15
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	460b      	mov	r3, r1
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	440b      	add	r3, r1
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4403      	add	r3, r0
 800c470:	331c      	adds	r3, #28
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	fbb2 f1f3 	udiv	r1, r2, r3
 800c478:	fb01 f303 	mul.w	r3, r1, r3
 800c47c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d112      	bne.n	800c4a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	f003 020f 	and.w	r2, r3, #15
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4613      	mov	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	440b      	add	r3, r1
 800c494:	3318      	adds	r3, #24
 800c496:	2200      	movs	r2, #0
 800c498:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c49a:	78f9      	ldrb	r1, [r7, #3]
 800c49c:	2300      	movs	r3, #0
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f002 f9c4 	bl	800e82e <USBD_LL_Transmit>
 800c4a6:	e01f      	b.n	800c4e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	33b0      	adds	r3, #176	@ 0xb0
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d010      	beq.n	800c4e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	33b0      	adds	r3, #176	@ 0xb0
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c4e4:	78fa      	ldrb	r2, [r7, #3]
 800c4e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	32b0      	adds	r2, #176	@ 0xb0
 800c508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	32b0      	adds	r2, #176	@ 0xb0
 800c518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	e01a      	b.n	800c55a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c524:	78fb      	ldrb	r3, [r7, #3]
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f002 f9c2 	bl	800e8b2 <USBD_LL_GetRxDataSize>
 800c52e:	4602      	mov	r2, r0
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	33b0      	adds	r3, #176	@ 0xb0
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c554:	4611      	mov	r1, r2
 800c556:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b084      	sub	sp, #16
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	32b0      	adds	r2, #176	@ 0xb0
 800c574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c578:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c580:	2303      	movs	r3, #3
 800c582:	e024      	b.n	800c5ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	33b0      	adds	r3, #176	@ 0xb0
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d019      	beq.n	800c5cc <USBD_CDC_EP0_RxReady+0x6a>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c59e:	2bff      	cmp	r3, #255	@ 0xff
 800c5a0:	d014      	beq.n	800c5cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	33b0      	adds	r3, #176	@ 0xb0
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	685b      	ldr	r3, [r3, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	22ff      	movs	r2, #255	@ 0xff
 800c5c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c5e0:	2182      	movs	r1, #130	@ 0x82
 800c5e2:	4818      	ldr	r0, [pc, #96]	@ (800c644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5e4:	f000 fd4f 	bl	800d086 <USBD_GetEpDesc>
 800c5e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	4815      	ldr	r0, [pc, #84]	@ (800c644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5ee:	f000 fd4a 	bl	800d086 <USBD_GetEpDesc>
 800c5f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c5f4:	2181      	movs	r1, #129	@ 0x81
 800c5f6:	4813      	ldr	r0, [pc, #76]	@ (800c644 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c5f8:	f000 fd45 	bl	800d086 <USBD_GetEpDesc>
 800c5fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	2210      	movs	r2, #16
 800c608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2200      	movs	r2, #0
 800c614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c618:	711a      	strb	r2, [r3, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d006      	beq.n	800c632 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c62c:	711a      	strb	r2, [r3, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2243      	movs	r2, #67	@ 0x43
 800c636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c638:	4b02      	ldr	r3, [pc, #8]	@ (800c644 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000050 	.word	0x20000050

0800c648 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c650:	2182      	movs	r1, #130	@ 0x82
 800c652:	4818      	ldr	r0, [pc, #96]	@ (800c6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c654:	f000 fd17 	bl	800d086 <USBD_GetEpDesc>
 800c658:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c65a:	2101      	movs	r1, #1
 800c65c:	4815      	ldr	r0, [pc, #84]	@ (800c6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c65e:	f000 fd12 	bl	800d086 <USBD_GetEpDesc>
 800c662:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c664:	2181      	movs	r1, #129	@ 0x81
 800c666:	4813      	ldr	r0, [pc, #76]	@ (800c6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c668:	f000 fd0d 	bl	800d086 <USBD_GetEpDesc>
 800c66c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2210      	movs	r2, #16
 800c678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d006      	beq.n	800c68e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2200      	movs	r2, #0
 800c684:	711a      	strb	r2, [r3, #4]
 800c686:	2200      	movs	r2, #0
 800c688:	f042 0202 	orr.w	r2, r2, #2
 800c68c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d006      	beq.n	800c6a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	711a      	strb	r2, [r3, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f042 0202 	orr.w	r2, r2, #2
 800c6a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2243      	movs	r2, #67	@ 0x43
 800c6a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6a8:	4b02      	ldr	r3, [pc, #8]	@ (800c6b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20000050 	.word	0x20000050

0800c6b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6c0:	2182      	movs	r1, #130	@ 0x82
 800c6c2:	4818      	ldr	r0, [pc, #96]	@ (800c724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6c4:	f000 fcdf 	bl	800d086 <USBD_GetEpDesc>
 800c6c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	4815      	ldr	r0, [pc, #84]	@ (800c724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6ce:	f000 fcda 	bl	800d086 <USBD_GetEpDesc>
 800c6d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6d4:	2181      	movs	r1, #129	@ 0x81
 800c6d6:	4813      	ldr	r0, [pc, #76]	@ (800c724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6d8:	f000 fcd5 	bl	800d086 <USBD_GetEpDesc>
 800c6dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d002      	beq.n	800c6ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	2210      	movs	r2, #16
 800c6e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d006      	beq.n	800c6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6f8:	711a      	strb	r2, [r3, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d006      	beq.n	800c712 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c70c:	711a      	strb	r2, [r3, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2243      	movs	r2, #67	@ 0x43
 800c716:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c718:	4b02      	ldr	r3, [pc, #8]	@ (800c724 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	20000050 	.word	0x20000050

0800c728 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	220a      	movs	r2, #10
 800c734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c736:	4b03      	ldr	r3, [pc, #12]	@ (800c744 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	2000000c 	.word	0x2000000c

0800c748 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c758:	2303      	movs	r3, #3
 800c75a:	e009      	b.n	800c770 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	33b0      	adds	r3, #176	@ 0xb0
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	32b0      	adds	r2, #176	@ 0xb0
 800c792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c796:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	e008      	b.n	800c7b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	371c      	adds	r7, #28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	32b0      	adds	r2, #176	@ 0xb0
 800c7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e004      	b.n	800c7ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
	...

0800c7fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	32b0      	adds	r2, #176	@ 0xb0
 800c80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c812:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c814:	2301      	movs	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c81e:	2303      	movs	r3, #3
 800c820:	e025      	b.n	800c86e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d11f      	bne.n	800c86c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2201      	movs	r2, #1
 800c830:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c834:	4b10      	ldr	r3, [pc, #64]	@ (800c878 <USBD_CDC_TransmitPacket+0x7c>)
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	f003 020f 	and.w	r2, r3, #15
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4613      	mov	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4403      	add	r3, r0
 800c84e:	3318      	adds	r3, #24
 800c850:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c852:	4b09      	ldr	r3, [pc, #36]	@ (800c878 <USBD_CDC_TransmitPacket+0x7c>)
 800c854:	7819      	ldrb	r1, [r3, #0]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f001 ffe3 	bl	800e82e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c868:	2300      	movs	r3, #0
 800c86a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	20000093 	.word	0x20000093

0800c87c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	32b0      	adds	r2, #176	@ 0xb0
 800c88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c892:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	32b0      	adds	r2, #176	@ 0xb0
 800c89e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e018      	b.n	800c8dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	7c1b      	ldrb	r3, [r3, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800c8e4 <USBD_CDC_ReceivePacket+0x68>)
 800c8b4:	7819      	ldrb	r1, [r3, #0]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 ffd5 	bl	800e870 <USBD_LL_PrepareReceive>
 800c8c6:	e008      	b.n	800c8da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8c8:	4b06      	ldr	r3, [pc, #24]	@ (800c8e4 <USBD_CDC_ReceivePacket+0x68>)
 800c8ca:	7819      	ldrb	r1, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8d2:	2340      	movs	r3, #64	@ 0x40
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f001 ffcb 	bl	800e870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	20000094 	.word	0x20000094

0800c8e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e01f      	b.n	800c940 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	79fa      	ldrb	r2, [r7, #7]
 800c932:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f001 fe45 	bl	800e5c4 <USBD_LL_Init>
 800c93a:	4603      	mov	r3, r0
 800c93c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e025      	b.n	800c9ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	32ae      	adds	r2, #174	@ 0xae
 800c972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00f      	beq.n	800c99c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	32ae      	adds	r2, #174	@ 0xae
 800c986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98c:	f107 020e 	add.w	r2, r7, #14
 800c990:	4610      	mov	r0, r2
 800c992:	4798      	blx	r3
 800c994:	4602      	mov	r2, r0
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 fe4d 	bl	800e65c <USBD_LL_Start>
 800c9c2:	4603      	mov	r3, r0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c9d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	370c      	adds	r7, #12
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b084      	sub	sp, #16
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d009      	beq.n	800ca10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	78fa      	ldrb	r2, [r7, #3]
 800ca06:	4611      	mov	r1, r2
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	4798      	blx	r3
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b084      	sub	sp, #16
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	460b      	mov	r3, r1
 800ca24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	78fa      	ldrb	r2, [r7, #3]
 800ca34:	4611      	mov	r1, r2
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	4798      	blx	r3
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca40:	2303      	movs	r3, #3
 800ca42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca5e:	6839      	ldr	r1, [r7, #0]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f001 f90c 	bl	800dc7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ca74:	461a      	mov	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca82:	f003 031f 	and.w	r3, r3, #31
 800ca86:	2b02      	cmp	r3, #2
 800ca88:	d01a      	beq.n	800cac0 <USBD_LL_SetupStage+0x72>
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d822      	bhi.n	800cad4 <USBD_LL_SetupStage+0x86>
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <USBD_LL_SetupStage+0x4a>
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d00a      	beq.n	800caac <USBD_LL_SetupStage+0x5e>
 800ca96:	e01d      	b.n	800cad4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fb63 	bl	800d16c <USBD_StdDevReq>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73fb      	strb	r3, [r7, #15]
      break;
 800caaa:	e020      	b.n	800caee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fbcb 	bl	800d250 <USBD_StdItfReq>
 800caba:	4603      	mov	r3, r0
 800cabc:	73fb      	strb	r3, [r7, #15]
      break;
 800cabe:	e016      	b.n	800caee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cac6:	4619      	mov	r1, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fc2d 	bl	800d328 <USBD_StdEPReq>
 800cace:	4603      	mov	r3, r0
 800cad0:	73fb      	strb	r3, [r7, #15]
      break;
 800cad2:	e00c      	b.n	800caee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cada:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f001 fe1a 	bl	800e71c <USBD_LL_StallEP>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
      break;
 800caec:	bf00      	nop
  }

  return ret;
 800caee:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	460b      	mov	r3, r1
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cb0a:	7afb      	ldrb	r3, [r7, #11]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d16e      	bne.n	800cbee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	f040 8098 	bne.w	800cc54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d913      	bls.n	800cb58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	4293      	cmp	r3, r2
 800cb48:	bf28      	it	cs
 800cb4a:	4613      	movcs	r3, r2
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f001 f988 	bl	800de66 <USBD_CtlContinueRx>
 800cb56:	e07d      	b.n	800cc54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb5e:	f003 031f 	and.w	r3, r3, #31
 800cb62:	2b02      	cmp	r3, #2
 800cb64:	d014      	beq.n	800cb90 <USBD_LL_DataOutStage+0x98>
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d81d      	bhi.n	800cba6 <USBD_LL_DataOutStage+0xae>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <USBD_LL_DataOutStage+0x7c>
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d003      	beq.n	800cb7a <USBD_LL_DataOutStage+0x82>
 800cb72:	e018      	b.n	800cba6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	75bb      	strb	r3, [r7, #22]
            break;
 800cb78:	e018      	b.n	800cbac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	4619      	mov	r1, r3
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 fa64 	bl	800d052 <USBD_CoreFindIF>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75bb      	strb	r3, [r7, #22]
            break;
 800cb8e:	e00d      	b.n	800cbac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	4619      	mov	r1, r3
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f000 fa66 	bl	800d06c <USBD_CoreFindEP>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75bb      	strb	r3, [r7, #22]
            break;
 800cba4:	e002      	b.n	800cbac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	75bb      	strb	r3, [r7, #22]
            break;
 800cbaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbac:	7dbb      	ldrb	r3, [r7, #22]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d119      	bne.n	800cbe6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d113      	bne.n	800cbe6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cbbe:	7dba      	ldrb	r2, [r7, #22]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	32ae      	adds	r2, #174	@ 0xae
 800cbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00b      	beq.n	800cbe6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cbce:	7dba      	ldrb	r2, [r7, #22]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cbd6:	7dba      	ldrb	r2, [r7, #22]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	32ae      	adds	r2, #174	@ 0xae
 800cbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f001 f94e 	bl	800de88 <USBD_CtlSendStatus>
 800cbec:	e032      	b.n	800cc54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cbee:	7afb      	ldrb	r3, [r7, #11]
 800cbf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f000 fa37 	bl	800d06c <USBD_CoreFindEP>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc02:	7dbb      	ldrb	r3, [r7, #22]
 800cc04:	2bff      	cmp	r3, #255	@ 0xff
 800cc06:	d025      	beq.n	800cc54 <USBD_LL_DataOutStage+0x15c>
 800cc08:	7dbb      	ldrb	r3, [r7, #22]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d122      	bne.n	800cc54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d117      	bne.n	800cc4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc1a:	7dba      	ldrb	r2, [r7, #22]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	32ae      	adds	r2, #174	@ 0xae
 800cc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00f      	beq.n	800cc4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cc2a:	7dba      	ldrb	r2, [r7, #22]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc32:	7dba      	ldrb	r2, [r7, #22]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	32ae      	adds	r2, #174	@ 0xae
 800cc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	7afa      	ldrb	r2, [r7, #11]
 800cc40:	4611      	mov	r1, r2
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	4798      	blx	r3
 800cc46:	4603      	mov	r3, r0
 800cc48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc4a:	7dfb      	ldrb	r3, [r7, #23]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	e000      	b.n	800cc56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b086      	sub	sp, #24
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	460b      	mov	r3, r1
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d16f      	bne.n	800cd52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3314      	adds	r3, #20
 800cc76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d15a      	bne.n	800cd38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	689a      	ldr	r2, [r3, #8]
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d914      	bls.n	800ccb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	1ad2      	subs	r2, r2, r3
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	461a      	mov	r2, r3
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f001 f8b0 	bl	800de0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccaa:	2300      	movs	r3, #0
 800ccac:	2200      	movs	r2, #0
 800ccae:	2100      	movs	r1, #0
 800ccb0:	68f8      	ldr	r0, [r7, #12]
 800ccb2:	f001 fddd 	bl	800e870 <USBD_LL_PrepareReceive>
 800ccb6:	e03f      	b.n	800cd38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	68da      	ldr	r2, [r3, #12]
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d11c      	bne.n	800ccfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d316      	bcc.n	800ccfe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d20f      	bcs.n	800ccfe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ccde:	2200      	movs	r2, #0
 800cce0:	2100      	movs	r1, #0
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f001 f891 	bl	800de0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f001 fdba 	bl	800e870 <USBD_LL_PrepareReceive>
 800ccfc:	e01c      	b.n	800cd38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d10f      	bne.n	800cd2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd2a:	2180      	movs	r1, #128	@ 0x80
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	f001 fcf5 	bl	800e71c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f001 f8bb 	bl	800deae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d03a      	beq.n	800cdb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff fe42 	bl	800c9cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cd50:	e032      	b.n	800cdb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cd52:	7afb      	ldrb	r3, [r7, #11]
 800cd54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 f985 	bl	800d06c <USBD_CoreFindEP>
 800cd62:	4603      	mov	r3, r0
 800cd64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
 800cd68:	2bff      	cmp	r3, #255	@ 0xff
 800cd6a:	d025      	beq.n	800cdb8 <USBD_LL_DataInStage+0x15a>
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d122      	bne.n	800cdb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d11c      	bne.n	800cdb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cd7e:	7dfa      	ldrb	r2, [r7, #23]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	32ae      	adds	r2, #174	@ 0xae
 800cd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d014      	beq.n	800cdb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cd8e:	7dfa      	ldrb	r2, [r7, #23]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cd96:	7dfa      	ldrb	r2, [r7, #23]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	32ae      	adds	r2, #174	@ 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	7afa      	ldrb	r2, [r7, #11]
 800cda4:	4611      	mov	r1, r2
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	4798      	blx	r3
 800cdaa:	4603      	mov	r3, r0
 800cdac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdae:	7dbb      	ldrb	r3, [r7, #22]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cdb4:	7dbb      	ldrb	r3, [r7, #22]
 800cdb6:	e000      	b.n	800cdba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d014      	beq.n	800ce28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00e      	beq.n	800ce28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	6852      	ldr	r2, [r2, #4]
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	4611      	mov	r1, r2
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	4798      	blx	r3
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d001      	beq.n	800ce28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce24:	2303      	movs	r3, #3
 800ce26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce28:	2340      	movs	r3, #64	@ 0x40
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 fc2f 	bl	800e692 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2240      	movs	r2, #64	@ 0x40
 800ce40:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce44:	2340      	movs	r3, #64	@ 0x40
 800ce46:	2200      	movs	r2, #0
 800ce48:	2180      	movs	r1, #128	@ 0x80
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f001 fc21 	bl	800e692 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2240      	movs	r2, #64	@ 0x40
 800ce5a:	621a      	str	r2, [r3, #32]

  return ret;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce66:	b480      	push	{r7}
 800ce68:	b083      	sub	sp, #12
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	78fa      	ldrb	r2, [r7, #3]
 800ce76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ce86:	b480      	push	{r7}
 800ce88:	b083      	sub	sp, #12
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	d006      	beq.n	800cea8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2204      	movs	r2, #4
 800ceac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cebe:	b480      	push	{r7}
 800cec0:	b083      	sub	sp, #12
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b04      	cmp	r3, #4
 800ced0:	d106      	bne.n	800cee0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d110      	bne.n	800cf24 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00b      	beq.n	800cf24 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d005      	beq.n	800cf24 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf1e:	69db      	ldr	r3, [r3, #28]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3708      	adds	r7, #8
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
 800cf36:	460b      	mov	r3, r1
 800cf38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	32ae      	adds	r2, #174	@ 0xae
 800cf44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e01c      	b.n	800cf8a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	2b03      	cmp	r3, #3
 800cf5a:	d115      	bne.n	800cf88 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	32ae      	adds	r2, #174	@ 0xae
 800cf66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6a:	6a1b      	ldr	r3, [r3, #32]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	32ae      	adds	r2, #174	@ 0xae
 800cf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	78fa      	ldrb	r2, [r7, #3]
 800cf82:	4611      	mov	r1, r2
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	32ae      	adds	r2, #174	@ 0xae
 800cfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e01c      	b.n	800cfee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b03      	cmp	r3, #3
 800cfbe:	d115      	bne.n	800cfec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	32ae      	adds	r2, #174	@ 0xae
 800cfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00b      	beq.n	800cfec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	32ae      	adds	r2, #174	@ 0xae
 800cfde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe4:	78fa      	ldrb	r2, [r7, #3]
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3708      	adds	r7, #8
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cff6:	b480      	push	{r7}
 800cff8:	b083      	sub	sp, #12
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00e      	beq.n	800d048 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	6852      	ldr	r2, [r2, #4]
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	4611      	mov	r1, r2
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d044:	2303      	movs	r3, #3
 800d046:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d052:	b480      	push	{r7}
 800d054:	b083      	sub	sp, #12
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	460b      	mov	r3, r1
 800d05c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d05e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d060:	4618      	mov	r0, r3
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	460b      	mov	r3, r1
 800d076:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d078:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b086      	sub	sp, #24
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d09a:	2300      	movs	r3, #0
 800d09c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	885b      	ldrh	r3, [r3, #2]
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	7812      	ldrb	r2, [r2, #0]
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d91f      	bls.n	800d0ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d0b2:	e013      	b.n	800d0dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d0b4:	f107 030a 	add.w	r3, r7, #10
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6978      	ldr	r0, [r7, #20]
 800d0bc:	f000 f81b 	bl	800d0f6 <USBD_GetNextDesc>
 800d0c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	785b      	ldrb	r3, [r3, #1]
 800d0c6:	2b05      	cmp	r3, #5
 800d0c8:	d108      	bne.n	800d0dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	789b      	ldrb	r3, [r3, #2]
 800d0d2:	78fa      	ldrb	r2, [r7, #3]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d008      	beq.n	800d0ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	885b      	ldrh	r3, [r3, #2]
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	897b      	ldrh	r3, [r7, #10]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d8e5      	bhi.n	800d0b4 <USBD_GetEpDesc+0x2e>
 800d0e8:	e000      	b.n	800d0ec <USBD_GetEpDesc+0x66>
          break;
 800d0ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d0ec:	693b      	ldr	r3, [r7, #16]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	881b      	ldrh	r3, [r3, #0]
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	7812      	ldrb	r2, [r2, #0]
 800d10c:	4413      	add	r3, r2
 800d10e:	b29a      	uxth	r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d120:	68fb      	ldr	r3, [r7, #12]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d12e:	b480      	push	{r7}
 800d130:	b087      	sub	sp, #28
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	3301      	adds	r3, #1
 800d144:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d14c:	8a3b      	ldrh	r3, [r7, #16]
 800d14e:	021b      	lsls	r3, r3, #8
 800d150:	b21a      	sxth	r2, r3
 800d152:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d156:	4313      	orrs	r3, r2
 800d158:	b21b      	sxth	r3, r3
 800d15a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d15c:	89fb      	ldrh	r3, [r7, #14]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d182:	2b40      	cmp	r3, #64	@ 0x40
 800d184:	d005      	beq.n	800d192 <USBD_StdDevReq+0x26>
 800d186:	2b40      	cmp	r3, #64	@ 0x40
 800d188:	d857      	bhi.n	800d23a <USBD_StdDevReq+0xce>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00f      	beq.n	800d1ae <USBD_StdDevReq+0x42>
 800d18e:	2b20      	cmp	r3, #32
 800d190:	d153      	bne.n	800d23a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	32ae      	adds	r2, #174	@ 0xae
 800d19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	4798      	blx	r3
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d1ac:	e04a      	b.n	800d244 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	785b      	ldrb	r3, [r3, #1]
 800d1b2:	2b09      	cmp	r3, #9
 800d1b4:	d83b      	bhi.n	800d22e <USBD_StdDevReq+0xc2>
 800d1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <USBD_StdDevReq+0x50>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d211 	.word	0x0800d211
 800d1c0:	0800d225 	.word	0x0800d225
 800d1c4:	0800d22f 	.word	0x0800d22f
 800d1c8:	0800d21b 	.word	0x0800d21b
 800d1cc:	0800d22f 	.word	0x0800d22f
 800d1d0:	0800d1ef 	.word	0x0800d1ef
 800d1d4:	0800d1e5 	.word	0x0800d1e5
 800d1d8:	0800d22f 	.word	0x0800d22f
 800d1dc:	0800d207 	.word	0x0800d207
 800d1e0:	0800d1f9 	.word	0x0800d1f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa3c 	bl	800d664 <USBD_GetDescriptor>
          break;
 800d1ec:	e024      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fba1 	bl	800d938 <USBD_SetAddress>
          break;
 800d1f6:	e01f      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fbe0 	bl	800d9c0 <USBD_SetConfig>
 800d200:	4603      	mov	r3, r0
 800d202:	73fb      	strb	r3, [r7, #15]
          break;
 800d204:	e018      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fc83 	bl	800db14 <USBD_GetConfig>
          break;
 800d20e:	e013      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fcb4 	bl	800db80 <USBD_GetStatus>
          break;
 800d218:	e00e      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fce3 	bl	800dbe8 <USBD_SetFeature>
          break;
 800d222:	e009      	b.n	800d238 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 fd07 	bl	800dc3a <USBD_ClrFeature>
          break;
 800d22c:	e004      	b.n	800d238 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fd5e 	bl	800dcf2 <USBD_CtlError>
          break;
 800d236:	bf00      	nop
      }
      break;
 800d238:	e004      	b.n	800d244 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fd58 	bl	800dcf2 <USBD_CtlError>
      break;
 800d242:	bf00      	nop
  }

  return ret;
 800d244:	7bfb      	ldrb	r3, [r7, #15]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop

0800d250 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d266:	2b40      	cmp	r3, #64	@ 0x40
 800d268:	d005      	beq.n	800d276 <USBD_StdItfReq+0x26>
 800d26a:	2b40      	cmp	r3, #64	@ 0x40
 800d26c:	d852      	bhi.n	800d314 <USBD_StdItfReq+0xc4>
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <USBD_StdItfReq+0x26>
 800d272:	2b20      	cmp	r3, #32
 800d274:	d14e      	bne.n	800d314 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	3b01      	subs	r3, #1
 800d280:	2b02      	cmp	r3, #2
 800d282:	d840      	bhi.n	800d306 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	889b      	ldrh	r3, [r3, #4]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d836      	bhi.n	800d2fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	889b      	ldrh	r3, [r3, #4]
 800d292:	b2db      	uxtb	r3, r3
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fedb 	bl	800d052 <USBD_CoreFindIF>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2a0:	7bbb      	ldrb	r3, [r7, #14]
 800d2a2:	2bff      	cmp	r3, #255	@ 0xff
 800d2a4:	d01d      	beq.n	800d2e2 <USBD_StdItfReq+0x92>
 800d2a6:	7bbb      	ldrb	r3, [r7, #14]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d11a      	bne.n	800d2e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d2ac:	7bba      	ldrb	r2, [r7, #14]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	32ae      	adds	r2, #174	@ 0xae
 800d2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00f      	beq.n	800d2dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d2bc:	7bba      	ldrb	r2, [r7, #14]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2c4:	7bba      	ldrb	r2, [r7, #14]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	32ae      	adds	r2, #174	@ 0xae
 800d2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d2da:	e004      	b.n	800d2e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d2dc:	2303      	movs	r3, #3
 800d2de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d2e0:	e001      	b.n	800d2e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d110      	bne.n	800d310 <USBD_StdItfReq+0xc0>
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10d      	bne.n	800d310 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fdc7 	bl	800de88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d2fa:	e009      	b.n	800d310 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fcf7 	bl	800dcf2 <USBD_CtlError>
          break;
 800d304:	e004      	b.n	800d310 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fcf2 	bl	800dcf2 <USBD_CtlError>
          break;
 800d30e:	e000      	b.n	800d312 <USBD_StdItfReq+0xc2>
          break;
 800d310:	bf00      	nop
      }
      break;
 800d312:	e004      	b.n	800d31e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fceb 	bl	800dcf2 <USBD_CtlError>
      break;
 800d31c:	bf00      	nop
  }

  return ret;
 800d31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	889b      	ldrh	r3, [r3, #4]
 800d33a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d344:	2b40      	cmp	r3, #64	@ 0x40
 800d346:	d007      	beq.n	800d358 <USBD_StdEPReq+0x30>
 800d348:	2b40      	cmp	r3, #64	@ 0x40
 800d34a:	f200 817f 	bhi.w	800d64c <USBD_StdEPReq+0x324>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d02a      	beq.n	800d3a8 <USBD_StdEPReq+0x80>
 800d352:	2b20      	cmp	r3, #32
 800d354:	f040 817a 	bne.w	800d64c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d358:	7bbb      	ldrb	r3, [r7, #14]
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fe85 	bl	800d06c <USBD_CoreFindEP>
 800d362:	4603      	mov	r3, r0
 800d364:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d366:	7b7b      	ldrb	r3, [r7, #13]
 800d368:	2bff      	cmp	r3, #255	@ 0xff
 800d36a:	f000 8174 	beq.w	800d656 <USBD_StdEPReq+0x32e>
 800d36e:	7b7b      	ldrb	r3, [r7, #13]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f040 8170 	bne.w	800d656 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d376:	7b7a      	ldrb	r2, [r7, #13]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d37e:	7b7a      	ldrb	r2, [r7, #13]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	32ae      	adds	r2, #174	@ 0xae
 800d384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f000 8163 	beq.w	800d656 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d390:	7b7a      	ldrb	r2, [r7, #13]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	32ae      	adds	r2, #174	@ 0xae
 800d396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	4798      	blx	r3
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3a6:	e156      	b.n	800d656 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	785b      	ldrb	r3, [r3, #1]
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d008      	beq.n	800d3c2 <USBD_StdEPReq+0x9a>
 800d3b0:	2b03      	cmp	r3, #3
 800d3b2:	f300 8145 	bgt.w	800d640 <USBD_StdEPReq+0x318>
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 809b 	beq.w	800d4f2 <USBD_StdEPReq+0x1ca>
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d03c      	beq.n	800d43a <USBD_StdEPReq+0x112>
 800d3c0:	e13e      	b.n	800d640 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d002      	beq.n	800d3d4 <USBD_StdEPReq+0xac>
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d016      	beq.n	800d400 <USBD_StdEPReq+0xd8>
 800d3d2:	e02c      	b.n	800d42e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00d      	beq.n	800d3f6 <USBD_StdEPReq+0xce>
 800d3da:	7bbb      	ldrb	r3, [r7, #14]
 800d3dc:	2b80      	cmp	r3, #128	@ 0x80
 800d3de:	d00a      	beq.n	800d3f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 f999 	bl	800e71c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3ea:	2180      	movs	r1, #128	@ 0x80
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f001 f995 	bl	800e71c <USBD_LL_StallEP>
 800d3f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3f4:	e020      	b.n	800d438 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d3f6:	6839      	ldr	r1, [r7, #0]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fc7a 	bl	800dcf2 <USBD_CtlError>
              break;
 800d3fe:	e01b      	b.n	800d438 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	885b      	ldrh	r3, [r3, #2]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10e      	bne.n	800d426 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d408:	7bbb      	ldrb	r3, [r7, #14]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00b      	beq.n	800d426 <USBD_StdEPReq+0xfe>
 800d40e:	7bbb      	ldrb	r3, [r7, #14]
 800d410:	2b80      	cmp	r3, #128	@ 0x80
 800d412:	d008      	beq.n	800d426 <USBD_StdEPReq+0xfe>
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	88db      	ldrh	r3, [r3, #6]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d41c:	7bbb      	ldrb	r3, [r7, #14]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f001 f97b 	bl	800e71c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fd2e 	bl	800de88 <USBD_CtlSendStatus>

              break;
 800d42c:	e004      	b.n	800d438 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fc5e 	bl	800dcf2 <USBD_CtlError>
              break;
 800d436:	bf00      	nop
          }
          break;
 800d438:	e107      	b.n	800d64a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b02      	cmp	r3, #2
 800d444:	d002      	beq.n	800d44c <USBD_StdEPReq+0x124>
 800d446:	2b03      	cmp	r3, #3
 800d448:	d016      	beq.n	800d478 <USBD_StdEPReq+0x150>
 800d44a:	e04b      	b.n	800d4e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00d      	beq.n	800d46e <USBD_StdEPReq+0x146>
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	2b80      	cmp	r3, #128	@ 0x80
 800d456:	d00a      	beq.n	800d46e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f001 f95d 	bl	800e71c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d462:	2180      	movs	r1, #128	@ 0x80
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f001 f959 	bl	800e71c <USBD_LL_StallEP>
 800d46a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d46c:	e040      	b.n	800d4f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d46e:	6839      	ldr	r1, [r7, #0]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fc3e 	bl	800dcf2 <USBD_CtlError>
              break;
 800d476:	e03b      	b.n	800d4f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	885b      	ldrh	r3, [r3, #2]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d136      	bne.n	800d4ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d486:	2b00      	cmp	r3, #0
 800d488:	d004      	beq.n	800d494 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d48a:	7bbb      	ldrb	r3, [r7, #14]
 800d48c:	4619      	mov	r1, r3
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f001 f963 	bl	800e75a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fcf7 	bl	800de88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d49a:	7bbb      	ldrb	r3, [r7, #14]
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7ff fde4 	bl	800d06c <USBD_CoreFindEP>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4a8:	7b7b      	ldrb	r3, [r7, #13]
 800d4aa:	2bff      	cmp	r3, #255	@ 0xff
 800d4ac:	d01f      	beq.n	800d4ee <USBD_StdEPReq+0x1c6>
 800d4ae:	7b7b      	ldrb	r3, [r7, #13]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d11c      	bne.n	800d4ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d4b4:	7b7a      	ldrb	r2, [r7, #13]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d4bc:	7b7a      	ldrb	r2, [r7, #13]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	32ae      	adds	r2, #174	@ 0xae
 800d4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d010      	beq.n	800d4ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d4cc:	7b7a      	ldrb	r2, [r7, #13]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	32ae      	adds	r2, #174	@ 0xae
 800d4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	4798      	blx	r3
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d4e2:	e004      	b.n	800d4ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fc03 	bl	800dcf2 <USBD_CtlError>
              break;
 800d4ec:	e000      	b.n	800d4f0 <USBD_StdEPReq+0x1c8>
              break;
 800d4ee:	bf00      	nop
          }
          break;
 800d4f0:	e0ab      	b.n	800d64a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d002      	beq.n	800d504 <USBD_StdEPReq+0x1dc>
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d032      	beq.n	800d568 <USBD_StdEPReq+0x240>
 800d502:	e097      	b.n	800d634 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d007      	beq.n	800d51a <USBD_StdEPReq+0x1f2>
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	2b80      	cmp	r3, #128	@ 0x80
 800d50e:	d004      	beq.n	800d51a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d510:	6839      	ldr	r1, [r7, #0]
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fbed 	bl	800dcf2 <USBD_CtlError>
                break;
 800d518:	e091      	b.n	800d63e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d51a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	da0b      	bge.n	800d53a <USBD_StdEPReq+0x212>
 800d522:	7bbb      	ldrb	r3, [r7, #14]
 800d524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	3310      	adds	r3, #16
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4413      	add	r3, r2
 800d536:	3304      	adds	r3, #4
 800d538:	e00b      	b.n	800d552 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d540:	4613      	mov	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	4413      	add	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	4413      	add	r3, r2
 800d550:	3304      	adds	r3, #4
 800d552:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2200      	movs	r2, #0
 800d558:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2202      	movs	r2, #2
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fc37 	bl	800ddd4 <USBD_CtlSendData>
              break;
 800d566:	e06a      	b.n	800d63e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	da11      	bge.n	800d594 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d570:	7bbb      	ldrb	r3, [r7, #14]
 800d572:	f003 020f 	and.w	r2, r3, #15
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	440b      	add	r3, r1
 800d582:	3324      	adds	r3, #36	@ 0x24
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d117      	bne.n	800d5ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fbb0 	bl	800dcf2 <USBD_CtlError>
                  break;
 800d592:	e054      	b.n	800d63e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d594:	7bbb      	ldrb	r3, [r7, #14]
 800d596:	f003 020f 	and.w	r2, r3, #15
 800d59a:	6879      	ldr	r1, [r7, #4]
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	440b      	add	r3, r1
 800d5a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d104      	bne.n	800d5ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fb9d 	bl	800dcf2 <USBD_CtlError>
                  break;
 800d5b8:	e041      	b.n	800d63e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da0b      	bge.n	800d5da <USBD_StdEPReq+0x2b2>
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
 800d5c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	3310      	adds	r3, #16
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	e00b      	b.n	800d5f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d5da:	7bbb      	ldrb	r3, [r7, #14]
 800d5dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <USBD_StdEPReq+0x2d8>
 800d5fa:	7bbb      	ldrb	r3, [r7, #14]
 800d5fc:	2b80      	cmp	r3, #128	@ 0x80
 800d5fe:	d103      	bne.n	800d608 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2200      	movs	r2, #0
 800d604:	601a      	str	r2, [r3, #0]
 800d606:	e00e      	b.n	800d626 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	4619      	mov	r1, r3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f001 f8c3 	bl	800e798 <USBD_LL_IsStallEP>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2201      	movs	r2, #1
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e002      	b.n	800d626 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2202      	movs	r2, #2
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 fbd1 	bl	800ddd4 <USBD_CtlSendData>
              break;
 800d632:	e004      	b.n	800d63e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fb5b 	bl	800dcf2 <USBD_CtlError>
              break;
 800d63c:	bf00      	nop
          }
          break;
 800d63e:	e004      	b.n	800d64a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fb55 	bl	800dcf2 <USBD_CtlError>
          break;
 800d648:	bf00      	nop
      }
      break;
 800d64a:	e005      	b.n	800d658 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fb4f 	bl	800dcf2 <USBD_CtlError>
      break;
 800d654:	e000      	b.n	800d658 <USBD_StdEPReq+0x330>
      break;
 800d656:	bf00      	nop
  }

  return ret;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d672:	2300      	movs	r3, #0
 800d674:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	0a1b      	lsrs	r3, r3, #8
 800d680:	b29b      	uxth	r3, r3
 800d682:	3b01      	subs	r3, #1
 800d684:	2b06      	cmp	r3, #6
 800d686:	f200 8128 	bhi.w	800d8da <USBD_GetDescriptor+0x276>
 800d68a:	a201      	add	r2, pc, #4	@ (adr r2, 800d690 <USBD_GetDescriptor+0x2c>)
 800d68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d690:	0800d6ad 	.word	0x0800d6ad
 800d694:	0800d6c5 	.word	0x0800d6c5
 800d698:	0800d705 	.word	0x0800d705
 800d69c:	0800d8db 	.word	0x0800d8db
 800d6a0:	0800d8db 	.word	0x0800d8db
 800d6a4:	0800d87b 	.word	0x0800d87b
 800d6a8:	0800d8a7 	.word	0x0800d8a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7c12      	ldrb	r2, [r2, #16]
 800d6b8:	f107 0108 	add.w	r1, r7, #8
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
 800d6c0:	60f8      	str	r0, [r7, #12]
      break;
 800d6c2:	e112      	b.n	800d8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	7c1b      	ldrb	r3, [r3, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10d      	bne.n	800d6e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6d4:	f107 0208 	add.w	r2, r7, #8
 800d6d8:	4610      	mov	r0, r2
 800d6da:	4798      	blx	r3
 800d6dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d6e6:	e100      	b.n	800d8ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6f0:	f107 0208 	add.w	r2, r7, #8
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4798      	blx	r3
 800d6f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	2202      	movs	r2, #2
 800d700:	701a      	strb	r2, [r3, #0]
      break;
 800d702:	e0f2      	b.n	800d8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	885b      	ldrh	r3, [r3, #2]
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b05      	cmp	r3, #5
 800d70c:	f200 80ac 	bhi.w	800d868 <USBD_GetDescriptor+0x204>
 800d710:	a201      	add	r2, pc, #4	@ (adr r2, 800d718 <USBD_GetDescriptor+0xb4>)
 800d712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d716:	bf00      	nop
 800d718:	0800d731 	.word	0x0800d731
 800d71c:	0800d765 	.word	0x0800d765
 800d720:	0800d799 	.word	0x0800d799
 800d724:	0800d7cd 	.word	0x0800d7cd
 800d728:	0800d801 	.word	0x0800d801
 800d72c:	0800d835 	.word	0x0800d835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d00b      	beq.n	800d754 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	7c12      	ldrb	r2, [r2, #16]
 800d748:	f107 0108 	add.w	r1, r7, #8
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
 800d750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d752:	e091      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 facb 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d75c:	7afb      	ldrb	r3, [r7, #11]
 800d75e:	3301      	adds	r3, #1
 800d760:	72fb      	strb	r3, [r7, #11]
          break;
 800d762:	e089      	b.n	800d878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00b      	beq.n	800d788 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	7c12      	ldrb	r2, [r2, #16]
 800d77c:	f107 0108 	add.w	r1, r7, #8
 800d780:	4610      	mov	r0, r2
 800d782:	4798      	blx	r3
 800d784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d786:	e077      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 fab1 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d790:	7afb      	ldrb	r3, [r7, #11]
 800d792:	3301      	adds	r3, #1
 800d794:	72fb      	strb	r3, [r7, #11]
          break;
 800d796:	e06f      	b.n	800d878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00b      	beq.n	800d7bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	7c12      	ldrb	r2, [r2, #16]
 800d7b0:	f107 0108 	add.w	r1, r7, #8
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4798      	blx	r3
 800d7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ba:	e05d      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7bc:	6839      	ldr	r1, [r7, #0]
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 fa97 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ca:	e055      	b.n	800d878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00b      	beq.n	800d7f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7de:	691b      	ldr	r3, [r3, #16]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	7c12      	ldrb	r2, [r2, #16]
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	4798      	blx	r3
 800d7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ee:	e043      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fa7d 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d7f8:	7afb      	ldrb	r3, [r7, #11]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7fe:	e03b      	b.n	800d878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d806:	695b      	ldr	r3, [r3, #20]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d812:	695b      	ldr	r3, [r3, #20]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	7c12      	ldrb	r2, [r2, #16]
 800d818:	f107 0108 	add.w	r1, r7, #8
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d822:	e029      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 fa63 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d82c:	7afb      	ldrb	r3, [r7, #11]
 800d82e:	3301      	adds	r3, #1
 800d830:	72fb      	strb	r3, [r7, #11]
          break;
 800d832:	e021      	b.n	800d878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d846:	699b      	ldr	r3, [r3, #24]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	7c12      	ldrb	r2, [r2, #16]
 800d84c:	f107 0108 	add.w	r1, r7, #8
 800d850:	4610      	mov	r0, r2
 800d852:	4798      	blx	r3
 800d854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d856:	e00f      	b.n	800d878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fa49 	bl	800dcf2 <USBD_CtlError>
            err++;
 800d860:	7afb      	ldrb	r3, [r7, #11]
 800d862:	3301      	adds	r3, #1
 800d864:	72fb      	strb	r3, [r7, #11]
          break;
 800d866:	e007      	b.n	800d878 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 fa41 	bl	800dcf2 <USBD_CtlError>
          err++;
 800d870:	7afb      	ldrb	r3, [r7, #11]
 800d872:	3301      	adds	r3, #1
 800d874:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d876:	bf00      	nop
      }
      break;
 800d878:	e037      	b.n	800d8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	7c1b      	ldrb	r3, [r3, #16]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d109      	bne.n	800d896 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d88a:	f107 0208 	add.w	r2, r7, #8
 800d88e:	4610      	mov	r0, r2
 800d890:	4798      	blx	r3
 800d892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d894:	e029      	b.n	800d8ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fa2a 	bl	800dcf2 <USBD_CtlError>
        err++;
 800d89e:	7afb      	ldrb	r3, [r7, #11]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	72fb      	strb	r3, [r7, #11]
      break;
 800d8a4:	e021      	b.n	800d8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	7c1b      	ldrb	r3, [r3, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10d      	bne.n	800d8ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8b6:	f107 0208 	add.w	r2, r7, #8
 800d8ba:	4610      	mov	r0, r2
 800d8bc:	4798      	blx	r3
 800d8be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	2207      	movs	r2, #7
 800d8c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8c8:	e00f      	b.n	800d8ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8ca:	6839      	ldr	r1, [r7, #0]
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 fa10 	bl	800dcf2 <USBD_CtlError>
        err++;
 800d8d2:	7afb      	ldrb	r3, [r7, #11]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8d8:	e007      	b.n	800d8ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fa08 	bl	800dcf2 <USBD_CtlError>
      err++;
 800d8e2:	7afb      	ldrb	r3, [r7, #11]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d8e8:	bf00      	nop
  }

  if (err != 0U)
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d11e      	bne.n	800d92e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	88db      	ldrh	r3, [r3, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d016      	beq.n	800d926 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d8f8:	893b      	ldrh	r3, [r7, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00e      	beq.n	800d91c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	88da      	ldrh	r2, [r3, #6]
 800d902:	893b      	ldrh	r3, [r7, #8]
 800d904:	4293      	cmp	r3, r2
 800d906:	bf28      	it	cs
 800d908:	4613      	movcs	r3, r2
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d90e:	893b      	ldrh	r3, [r7, #8]
 800d910:	461a      	mov	r2, r3
 800d912:	68f9      	ldr	r1, [r7, #12]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa5d 	bl	800ddd4 <USBD_CtlSendData>
 800d91a:	e009      	b.n	800d930 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d91c:	6839      	ldr	r1, [r7, #0]
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f9e7 	bl	800dcf2 <USBD_CtlError>
 800d924:	e004      	b.n	800d930 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 faae 	bl	800de88 <USBD_CtlSendStatus>
 800d92c:	e000      	b.n	800d930 <USBD_GetDescriptor+0x2cc>
    return;
 800d92e:	bf00      	nop
  }
}
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop

0800d938 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	889b      	ldrh	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d131      	bne.n	800d9ae <USBD_SetAddress+0x76>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	88db      	ldrh	r3, [r3, #6]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d12d      	bne.n	800d9ae <USBD_SetAddress+0x76>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	885b      	ldrh	r3, [r3, #2]
 800d956:	2b7f      	cmp	r3, #127	@ 0x7f
 800d958:	d829      	bhi.n	800d9ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	885b      	ldrh	r3, [r3, #2]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d964:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b03      	cmp	r3, #3
 800d970:	d104      	bne.n	800d97c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d972:	6839      	ldr	r1, [r7, #0]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f9bc 	bl	800dcf2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d97a:	e01d      	b.n	800d9b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	7bfa      	ldrb	r2, [r7, #15]
 800d980:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d984:	7bfb      	ldrb	r3, [r7, #15]
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 ff31 	bl	800e7f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fa7a 	bl	800de88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d994:	7bfb      	ldrb	r3, [r7, #15]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d004      	beq.n	800d9a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2202      	movs	r2, #2
 800d99e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a2:	e009      	b.n	800d9b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ac:	e004      	b.n	800d9b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f99e 	bl	800dcf2 <USBD_CtlError>
  }
}
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	885b      	ldrh	r3, [r3, #2]
 800d9d2:	b2da      	uxtb	r2, r3
 800d9d4:	4b4e      	ldr	r3, [pc, #312]	@ (800db10 <USBD_SetConfig+0x150>)
 800d9d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d9d8:	4b4d      	ldr	r3, [pc, #308]	@ (800db10 <USBD_SetConfig+0x150>)
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d905      	bls.n	800d9ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 f985 	bl	800dcf2 <USBD_CtlError>
    return USBD_FAIL;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e08c      	b.n	800db06 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d002      	beq.n	800d9fe <USBD_SetConfig+0x3e>
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d029      	beq.n	800da50 <USBD_SetConfig+0x90>
 800d9fc:	e075      	b.n	800daea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d9fe:	4b44      	ldr	r3, [pc, #272]	@ (800db10 <USBD_SetConfig+0x150>)
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d020      	beq.n	800da48 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da06:	4b42      	ldr	r3, [pc, #264]	@ (800db10 <USBD_SetConfig+0x150>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da10:	4b3f      	ldr	r3, [pc, #252]	@ (800db10 <USBD_SetConfig+0x150>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	4619      	mov	r1, r3
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7fe ffe3 	bl	800c9e2 <USBD_SetClassConfig>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da20:	7bfb      	ldrb	r3, [r7, #15]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d008      	beq.n	800da38 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f962 	bl	800dcf2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2202      	movs	r2, #2
 800da32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da36:	e065      	b.n	800db04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 fa25 	bl	800de88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2203      	movs	r2, #3
 800da42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da46:	e05d      	b.n	800db04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fa1d 	bl	800de88 <USBD_CtlSendStatus>
      break;
 800da4e:	e059      	b.n	800db04 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800da50:	4b2f      	ldr	r3, [pc, #188]	@ (800db10 <USBD_SetConfig+0x150>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d112      	bne.n	800da7e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800da60:	4b2b      	ldr	r3, [pc, #172]	@ (800db10 <USBD_SetConfig+0x150>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	461a      	mov	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da6a:	4b29      	ldr	r3, [pc, #164]	@ (800db10 <USBD_SetConfig+0x150>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7fe ffd2 	bl	800ca1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fa06 	bl	800de88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da7c:	e042      	b.n	800db04 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800da7e:	4b24      	ldr	r3, [pc, #144]	@ (800db10 <USBD_SetConfig+0x150>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	461a      	mov	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d02a      	beq.n	800dae2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	b2db      	uxtb	r3, r3
 800da92:	4619      	mov	r1, r3
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7fe ffc0 	bl	800ca1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800da9a:	4b1d      	ldr	r3, [pc, #116]	@ (800db10 <USBD_SetConfig+0x150>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800daa4:	4b1a      	ldr	r3, [pc, #104]	@ (800db10 <USBD_SetConfig+0x150>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	4619      	mov	r1, r3
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7fe ff99 	bl	800c9e2 <USBD_SetClassConfig>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00f      	beq.n	800dada <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 f918 	bl	800dcf2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7fe ffa5 	bl	800ca1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dad8:	e014      	b.n	800db04 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f9d4 	bl	800de88 <USBD_CtlSendStatus>
      break;
 800dae0:	e010      	b.n	800db04 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f9d0 	bl	800de88 <USBD_CtlSendStatus>
      break;
 800dae8:	e00c      	b.n	800db04 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800daea:	6839      	ldr	r1, [r7, #0]
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f900 	bl	800dcf2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800daf2:	4b07      	ldr	r3, [pc, #28]	@ (800db10 <USBD_SetConfig+0x150>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	4619      	mov	r1, r3
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7fe ff8e 	bl	800ca1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dafe:	2303      	movs	r3, #3
 800db00:	73fb      	strb	r3, [r7, #15]
      break;
 800db02:	bf00      	nop
  }

  return ret;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	20000a30 	.word	0x20000a30

0800db14 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	88db      	ldrh	r3, [r3, #6]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d004      	beq.n	800db30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db26:	6839      	ldr	r1, [r7, #0]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f8e2 	bl	800dcf2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db2e:	e023      	b.n	800db78 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db36:	b2db      	uxtb	r3, r3
 800db38:	2b02      	cmp	r3, #2
 800db3a:	dc02      	bgt.n	800db42 <USBD_GetConfig+0x2e>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dc03      	bgt.n	800db48 <USBD_GetConfig+0x34>
 800db40:	e015      	b.n	800db6e <USBD_GetConfig+0x5a>
 800db42:	2b03      	cmp	r3, #3
 800db44:	d00b      	beq.n	800db5e <USBD_GetConfig+0x4a>
 800db46:	e012      	b.n	800db6e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3308      	adds	r3, #8
 800db52:	2201      	movs	r2, #1
 800db54:	4619      	mov	r1, r3
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 f93c 	bl	800ddd4 <USBD_CtlSendData>
        break;
 800db5c:	e00c      	b.n	800db78 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	3304      	adds	r3, #4
 800db62:	2201      	movs	r2, #1
 800db64:	4619      	mov	r1, r3
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f934 	bl	800ddd4 <USBD_CtlSendData>
        break;
 800db6c:	e004      	b.n	800db78 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 f8be 	bl	800dcf2 <USBD_CtlError>
        break;
 800db76:	bf00      	nop
}
 800db78:	bf00      	nop
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db90:	b2db      	uxtb	r3, r3
 800db92:	3b01      	subs	r3, #1
 800db94:	2b02      	cmp	r3, #2
 800db96:	d81e      	bhi.n	800dbd6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	88db      	ldrh	r3, [r3, #6]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d004      	beq.n	800dbaa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f8a5 	bl	800dcf2 <USBD_CtlError>
        break;
 800dba8:	e01a      	b.n	800dbe0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d005      	beq.n	800dbc6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f043 0202 	orr.w	r2, r3, #2
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	330c      	adds	r3, #12
 800dbca:	2202      	movs	r2, #2
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f900 	bl	800ddd4 <USBD_CtlSendData>
      break;
 800dbd4:	e004      	b.n	800dbe0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f88a 	bl	800dcf2 <USBD_CtlError>
      break;
 800dbde:	bf00      	nop
  }
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	885b      	ldrh	r3, [r3, #2]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d107      	bne.n	800dc0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f940 	bl	800de88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc08:	e013      	b.n	800dc32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	885b      	ldrh	r3, [r3, #2]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d10b      	bne.n	800dc2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	889b      	ldrh	r3, [r3, #4]
 800dc16:	0a1b      	lsrs	r3, r3, #8
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f930 	bl	800de88 <USBD_CtlSendStatus>
}
 800dc28:	e003      	b.n	800dc32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f860 	bl	800dcf2 <USBD_CtlError>
}
 800dc32:	bf00      	nop
 800dc34:	3708      	adds	r7, #8
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b082      	sub	sp, #8
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d80b      	bhi.n	800dc6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	885b      	ldrh	r3, [r3, #2]
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d10c      	bne.n	800dc74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f910 	bl	800de88 <USBD_CtlSendStatus>
      }
      break;
 800dc68:	e004      	b.n	800dc74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dc6a:	6839      	ldr	r1, [r7, #0]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f840 	bl	800dcf2 <USBD_CtlError>
      break;
 800dc72:	e000      	b.n	800dc76 <USBD_ClrFeature+0x3c>
      break;
 800dc74:	bf00      	nop
  }
}
 800dc76:	bf00      	nop
 800dc78:	3708      	adds	r7, #8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	781a      	ldrb	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	3301      	adds	r3, #1
 800dc98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	781a      	ldrb	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	3301      	adds	r3, #1
 800dca6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f7ff fa40 	bl	800d12e <SWAPBYTE>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7ff fa33 	bl	800d12e <SWAPBYTE>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	461a      	mov	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f7ff fa26 	bl	800d12e <SWAPBYTE>
 800dce2:	4603      	mov	r3, r0
 800dce4:	461a      	mov	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	80da      	strh	r2, [r3, #6]
}
 800dcea:	bf00      	nop
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcfc:	2180      	movs	r1, #128	@ 0x80
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fd0c 	bl	800e71c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd04:	2100      	movs	r1, #0
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fd08 	bl	800e71c <USBD_LL_StallEP>
}
 800dd0c:	bf00      	nop
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd20:	2300      	movs	r3, #0
 800dd22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d036      	beq.n	800dd98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dd2e:	6938      	ldr	r0, [r7, #16]
 800dd30:	f000 f836 	bl	800dda0 <USBD_GetLen>
 800dd34:	4603      	mov	r3, r0
 800dd36:	3301      	adds	r3, #1
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	4413      	add	r3, r2
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	3301      	adds	r3, #1
 800dd52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4413      	add	r3, r2
 800dd5a:	2203      	movs	r2, #3
 800dd5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	3301      	adds	r3, #1
 800dd62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dd64:	e013      	b.n	800dd8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dd66:	7dfb      	ldrb	r3, [r7, #23]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	7812      	ldrb	r2, [r2, #0]
 800dd70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	3301      	adds	r3, #1
 800dd76:	613b      	str	r3, [r7, #16]
    idx++;
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	4413      	add	r3, r2
 800dd84:	2200      	movs	r2, #0
 800dd86:	701a      	strb	r2, [r3, #0]
    idx++;
 800dd88:	7dfb      	ldrb	r3, [r7, #23]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e7      	bne.n	800dd66 <USBD_GetString+0x52>
 800dd96:	e000      	b.n	800dd9a <USBD_GetString+0x86>
    return;
 800dd98:	bf00      	nop
  }
}
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ddb0:	e005      	b.n	800ddbe <USBD_GetLen+0x1e>
  {
    len++;
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d1f5      	bne.n	800ddb2 <USBD_GetLen+0x12>
  }

  return len;
 800ddc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2202      	movs	r2, #2
 800dde4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	f000 fd17 	bl	800e82e <USBD_LL_Transmit>

  return USBD_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b084      	sub	sp, #16
 800de0e:	af00      	add	r7, sp, #0
 800de10:	60f8      	str	r0, [r7, #12]
 800de12:	60b9      	str	r1, [r7, #8]
 800de14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68ba      	ldr	r2, [r7, #8]
 800de1a:	2100      	movs	r1, #0
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f000 fd06 	bl	800e82e <USBD_LL_Transmit>

  return USBD_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	60f8      	str	r0, [r7, #12]
 800de34:	60b9      	str	r1, [r7, #8]
 800de36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2203      	movs	r2, #3
 800de3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	2100      	movs	r1, #0
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 fd0a 	bl	800e870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b084      	sub	sp, #16
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	60f8      	str	r0, [r7, #12]
 800de6e:	60b9      	str	r1, [r7, #8]
 800de70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	2100      	movs	r1, #0
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 fcf9 	bl	800e870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3710      	adds	r7, #16
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2204      	movs	r2, #4
 800de94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800de98:	2300      	movs	r3, #0
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fcc5 	bl	800e82e <USBD_LL_Transmit>

  return USBD_OK;
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2205      	movs	r2, #5
 800deba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800debe:	2300      	movs	r3, #0
 800dec0:	2200      	movs	r2, #0
 800dec2:	2100      	movs	r1, #0
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 fcd3 	bl	800e870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 800dee0:	78fb      	ldrb	r3, [r7, #3]
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fce4 	bl	800e8b2 <USBD_LL_GetRxDataSize>
 800deea:	4603      	mov	r3, r0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800def8:	2200      	movs	r2, #0
 800defa:	4912      	ldr	r1, [pc, #72]	@ (800df44 <MX_USB_DEVICE_Init+0x50>)
 800defc:	4812      	ldr	r0, [pc, #72]	@ (800df48 <MX_USB_DEVICE_Init+0x54>)
 800defe:	f7fe fcf3 	bl	800c8e8 <USBD_Init>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df08:	f7f7 f9b6 	bl	8005278 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df0c:	490f      	ldr	r1, [pc, #60]	@ (800df4c <MX_USB_DEVICE_Init+0x58>)
 800df0e:	480e      	ldr	r0, [pc, #56]	@ (800df48 <MX_USB_DEVICE_Init+0x54>)
 800df10:	f7fe fd1a 	bl	800c948 <USBD_RegisterClass>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df1a:	f7f7 f9ad 	bl	8005278 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df1e:	490c      	ldr	r1, [pc, #48]	@ (800df50 <MX_USB_DEVICE_Init+0x5c>)
 800df20:	4809      	ldr	r0, [pc, #36]	@ (800df48 <MX_USB_DEVICE_Init+0x54>)
 800df22:	f7fe fc11 	bl	800c748 <USBD_CDC_RegisterInterface>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d001      	beq.n	800df30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df2c:	f7f7 f9a4 	bl	8005278 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df30:	4805      	ldr	r0, [pc, #20]	@ (800df48 <MX_USB_DEVICE_Init+0x54>)
 800df32:	f7fe fd3f 	bl	800c9b4 <USBD_Start>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d001      	beq.n	800df40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df3c:	f7f7 f99c 	bl	8005278 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df40:	bf00      	nop
 800df42:	bd80      	pop	{r7, pc}
 800df44:	200000ac 	.word	0x200000ac
 800df48:	20000a34 	.word	0x20000a34
 800df4c:	20000018 	.word	0x20000018
 800df50:	20000098 	.word	0x20000098

0800df54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df58:	2200      	movs	r2, #0
 800df5a:	4905      	ldr	r1, [pc, #20]	@ (800df70 <CDC_Init_FS+0x1c>)
 800df5c:	4805      	ldr	r0, [pc, #20]	@ (800df74 <CDC_Init_FS+0x20>)
 800df5e:	f7fe fc0d 	bl	800c77c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df62:	4905      	ldr	r1, [pc, #20]	@ (800df78 <CDC_Init_FS+0x24>)
 800df64:	4803      	ldr	r0, [pc, #12]	@ (800df74 <CDC_Init_FS+0x20>)
 800df66:	f7fe fc2b 	bl	800c7c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800df6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20001510 	.word	0x20001510
 800df74:	20000a34 	.word	0x20000a34
 800df78:	20000d10 	.word	0x20000d10

0800df7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800df7c:	b480      	push	{r7}
 800df7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800df80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800df82:	4618      	mov	r0, r3
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	71fb      	strb	r3, [r7, #7]
 800df98:	4613      	mov	r3, r2
 800df9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	2b23      	cmp	r3, #35	@ 0x23
 800dfa0:	d84a      	bhi.n	800e038 <CDC_Control_FS+0xac>
 800dfa2:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa8 <CDC_Control_FS+0x1c>)
 800dfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa8:	0800e039 	.word	0x0800e039
 800dfac:	0800e039 	.word	0x0800e039
 800dfb0:	0800e039 	.word	0x0800e039
 800dfb4:	0800e039 	.word	0x0800e039
 800dfb8:	0800e039 	.word	0x0800e039
 800dfbc:	0800e039 	.word	0x0800e039
 800dfc0:	0800e039 	.word	0x0800e039
 800dfc4:	0800e039 	.word	0x0800e039
 800dfc8:	0800e039 	.word	0x0800e039
 800dfcc:	0800e039 	.word	0x0800e039
 800dfd0:	0800e039 	.word	0x0800e039
 800dfd4:	0800e039 	.word	0x0800e039
 800dfd8:	0800e039 	.word	0x0800e039
 800dfdc:	0800e039 	.word	0x0800e039
 800dfe0:	0800e039 	.word	0x0800e039
 800dfe4:	0800e039 	.word	0x0800e039
 800dfe8:	0800e039 	.word	0x0800e039
 800dfec:	0800e039 	.word	0x0800e039
 800dff0:	0800e039 	.word	0x0800e039
 800dff4:	0800e039 	.word	0x0800e039
 800dff8:	0800e039 	.word	0x0800e039
 800dffc:	0800e039 	.word	0x0800e039
 800e000:	0800e039 	.word	0x0800e039
 800e004:	0800e039 	.word	0x0800e039
 800e008:	0800e039 	.word	0x0800e039
 800e00c:	0800e039 	.word	0x0800e039
 800e010:	0800e039 	.word	0x0800e039
 800e014:	0800e039 	.word	0x0800e039
 800e018:	0800e039 	.word	0x0800e039
 800e01c:	0800e039 	.word	0x0800e039
 800e020:	0800e039 	.word	0x0800e039
 800e024:	0800e039 	.word	0x0800e039
 800e028:	0800e039 	.word	0x0800e039
 800e02c:	0800e039 	.word	0x0800e039
 800e030:	0800e039 	.word	0x0800e039
 800e034:	0800e039 	.word	0x0800e039
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e038:	bf00      	nop
  }

  return (USBD_OK);
 800e03a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	370c      	adds	r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_OUT_Callback(Buf, *Len);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4619      	mov	r1, r3
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fd93 	bl	800eb84 <CDC_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e05e:	6879      	ldr	r1, [r7, #4]
 800e060:	4805      	ldr	r0, [pc, #20]	@ (800e078 <CDC_Receive_FS+0x30>)
 800e062:	f7fe fbad 	bl	800c7c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e066:	4804      	ldr	r0, [pc, #16]	@ (800e078 <CDC_Receive_FS+0x30>)
 800e068:	f7fe fc08 	bl	800c87c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e06c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20000a34 	.word	0x20000a34

0800e07c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 7 */
  CDC_IN_Callback();
 800e08c:	f000 fcd4 	bl	800ea38 <CDC_IN_Callback>

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e090:	4b17      	ldr	r3, [pc, #92]	@ (800e0f0 <CDC_Transmit_FS+0x74>)
 800e092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e096:	613b      	str	r3, [r7, #16]
  if (hcdc->TxState != 0){
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e01f      	b.n	800e0e6 <CDC_Transmit_FS+0x6a>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e0a6:	887b      	ldrh	r3, [r7, #2]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	6879      	ldr	r1, [r7, #4]
 800e0ac:	4810      	ldr	r0, [pc, #64]	@ (800e0f0 <CDC_Transmit_FS+0x74>)
 800e0ae:	f7fe fb65 	bl	800c77c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e0b2:	480f      	ldr	r0, [pc, #60]	@ (800e0f0 <CDC_Transmit_FS+0x74>)
 800e0b4:	f7fe fba2 	bl	800c7fc <USBD_CDC_TransmitPacket>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	75fb      	strb	r3, [r7, #23]

  uint32_t Timeout = HAL_GetTick();
 800e0bc:	f7f7 fc20 	bl	8005900 <HAL_GetTick>
 800e0c0:	60f8      	str	r0, [r7, #12]

	while(hcdc->TxState)
 800e0c2:	e006      	b.n	800e0d2 <CDC_Transmit_FS+0x56>
	{
		if(HAL_GetTick() - Timeout >=5)//超时
 800e0c4:	f7f7 fc1c 	bl	8005900 <HAL_GetTick>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	2b04      	cmp	r3, #4
 800e0d0:	d805      	bhi.n	800e0de <CDC_Transmit_FS+0x62>
	while(hcdc->TxState)
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1f3      	bne.n	800e0c4 <CDC_Transmit_FS+0x48>
 800e0dc:	e000      	b.n	800e0e0 <CDC_Transmit_FS+0x64>
		{
			break;
 800e0de:	bf00      	nop
		}
	}

  CDC_IN_Callback();
 800e0e0:	f000 fcaa 	bl	800ea38 <CDC_IN_Callback>
  /* USER CODE END 7 */
  return result;
 800e0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3718      	adds	r7, #24
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	20000a34 	.word	0x20000a34

0800e0f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	4613      	mov	r3, r2
 800e100:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	371c      	adds	r7, #28
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
	...

0800e118 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	6039      	str	r1, [r7, #0]
 800e122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2212      	movs	r2, #18
 800e128:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e12a:	4b03      	ldr	r3, [pc, #12]	@ (800e138 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr
 800e138:	200000c8 	.word	0x200000c8

0800e13c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	4603      	mov	r3, r0
 800e144:	6039      	str	r1, [r7, #0]
 800e146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2204      	movs	r2, #4
 800e14c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e14e:	4b03      	ldr	r3, [pc, #12]	@ (800e15c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e150:	4618      	mov	r0, r3
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	200000dc 	.word	0x200000dc

0800e160 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	4603      	mov	r3, r0
 800e168:	6039      	str	r1, [r7, #0]
 800e16a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d105      	bne.n	800e17e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	4907      	ldr	r1, [pc, #28]	@ (800e194 <USBD_FS_ProductStrDescriptor+0x34>)
 800e176:	4808      	ldr	r0, [pc, #32]	@ (800e198 <USBD_FS_ProductStrDescriptor+0x38>)
 800e178:	f7ff fdcc 	bl	800dd14 <USBD_GetString>
 800e17c:	e004      	b.n	800e188 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	4904      	ldr	r1, [pc, #16]	@ (800e194 <USBD_FS_ProductStrDescriptor+0x34>)
 800e182:	4805      	ldr	r0, [pc, #20]	@ (800e198 <USBD_FS_ProductStrDescriptor+0x38>)
 800e184:	f7ff fdc6 	bl	800dd14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e188:	4b02      	ldr	r3, [pc, #8]	@ (800e194 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20001d10 	.word	0x20001d10
 800e198:	08017bf8 	.word	0x08017bf8

0800e19c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	6039      	str	r1, [r7, #0]
 800e1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	4904      	ldr	r1, [pc, #16]	@ (800e1bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e1ac:	4804      	ldr	r0, [pc, #16]	@ (800e1c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e1ae:	f7ff fdb1 	bl	800dd14 <USBD_GetString>
  return USBD_StrDesc;
 800e1b2:	4b02      	ldr	r3, [pc, #8]	@ (800e1bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}
 800e1bc:	20001d10 	.word	0x20001d10
 800e1c0:	08017c10 	.word	0x08017c10

0800e1c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	6039      	str	r1, [r7, #0]
 800e1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	221a      	movs	r2, #26
 800e1d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e1d6:	f000 f843 	bl	800e260 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e1da:	4b02      	ldr	r3, [pc, #8]	@ (800e1e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	200000e0 	.word	0x200000e0

0800e1e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	6039      	str	r1, [r7, #0]
 800e1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	4907      	ldr	r1, [pc, #28]	@ (800e21c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1fe:	4808      	ldr	r0, [pc, #32]	@ (800e220 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e200:	f7ff fd88 	bl	800dd14 <USBD_GetString>
 800e204:	e004      	b.n	800e210 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	4904      	ldr	r1, [pc, #16]	@ (800e21c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e20a:	4805      	ldr	r0, [pc, #20]	@ (800e220 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e20c:	f7ff fd82 	bl	800dd14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e210:	4b02      	ldr	r3, [pc, #8]	@ (800e21c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20001d10 	.word	0x20001d10
 800e220:	08017c24 	.word	0x08017c24

0800e224 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	4603      	mov	r3, r0
 800e22c:	6039      	str	r1, [r7, #0]
 800e22e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d105      	bne.n	800e242 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	4907      	ldr	r1, [pc, #28]	@ (800e258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e23a:	4808      	ldr	r0, [pc, #32]	@ (800e25c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e23c:	f7ff fd6a 	bl	800dd14 <USBD_GetString>
 800e240:	e004      	b.n	800e24c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e242:	683a      	ldr	r2, [r7, #0]
 800e244:	4904      	ldr	r1, [pc, #16]	@ (800e258 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e246:	4805      	ldr	r0, [pc, #20]	@ (800e25c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e248:	f7ff fd64 	bl	800dd14 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e24c:	4b02      	ldr	r3, [pc, #8]	@ (800e258 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20001d10 	.word	0x20001d10
 800e25c:	08017c30 	.word	0x08017c30

0800e260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e266:	4b0f      	ldr	r3, [pc, #60]	@ (800e2a4 <Get_SerialNum+0x44>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e26c:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a8 <Get_SerialNum+0x48>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e272:	4b0e      	ldr	r3, [pc, #56]	@ (800e2ac <Get_SerialNum+0x4c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4413      	add	r3, r2
 800e27e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d009      	beq.n	800e29a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e286:	2208      	movs	r2, #8
 800e288:	4909      	ldr	r1, [pc, #36]	@ (800e2b0 <Get_SerialNum+0x50>)
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 f814 	bl	800e2b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e290:	2204      	movs	r2, #4
 800e292:	4908      	ldr	r1, [pc, #32]	@ (800e2b4 <Get_SerialNum+0x54>)
 800e294:	68b8      	ldr	r0, [r7, #8]
 800e296:	f000 f80f 	bl	800e2b8 <IntToUnicode>
  }
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	1fff7a10 	.word	0x1fff7a10
 800e2a8:	1fff7a14 	.word	0x1fff7a14
 800e2ac:	1fff7a18 	.word	0x1fff7a18
 800e2b0:	200000e2 	.word	0x200000e2
 800e2b4:	200000f2 	.word	0x200000f2

0800e2b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	4613      	mov	r3, r2
 800e2c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]
 800e2ce:	e027      	b.n	800e320 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	0f1b      	lsrs	r3, r3, #28
 800e2d4:	2b09      	cmp	r3, #9
 800e2d6:	d80b      	bhi.n	800e2f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	0f1b      	lsrs	r3, r3, #28
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	440b      	add	r3, r1
 800e2e8:	3230      	adds	r2, #48	@ 0x30
 800e2ea:	b2d2      	uxtb	r2, r2
 800e2ec:	701a      	strb	r2, [r3, #0]
 800e2ee:	e00a      	b.n	800e306 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	0f1b      	lsrs	r3, r3, #28
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	440b      	add	r3, r1
 800e300:	3237      	adds	r2, #55	@ 0x37
 800e302:	b2d2      	uxtb	r2, r2
 800e304:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	011b      	lsls	r3, r3, #4
 800e30a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	005b      	lsls	r3, r3, #1
 800e310:	3301      	adds	r3, #1
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	4413      	add	r3, r2
 800e316:	2200      	movs	r2, #0
 800e318:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e31a:	7dfb      	ldrb	r3, [r7, #23]
 800e31c:	3301      	adds	r3, #1
 800e31e:	75fb      	strb	r3, [r7, #23]
 800e320:	7dfa      	ldrb	r2, [r7, #23]
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	429a      	cmp	r2, r3
 800e326:	d3d3      	bcc.n	800e2d0 <IntToUnicode+0x18>
  }
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	371c      	adds	r7, #28
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr
	...

0800e338 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08a      	sub	sp, #40	@ 0x28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e340:	f107 0314 	add.w	r3, r7, #20
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]
 800e348:	605a      	str	r2, [r3, #4]
 800e34a:	609a      	str	r2, [r3, #8]
 800e34c:	60da      	str	r2, [r3, #12]
 800e34e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e358:	d13a      	bne.n	800e3d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e35a:	2300      	movs	r3, #0
 800e35c:	613b      	str	r3, [r7, #16]
 800e35e:	4b1e      	ldr	r3, [pc, #120]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e362:	4a1d      	ldr	r2, [pc, #116]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e364:	f043 0301 	orr.w	r3, r3, #1
 800e368:	6313      	str	r3, [r2, #48]	@ 0x30
 800e36a:	4b1b      	ldr	r3, [pc, #108]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e36c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	613b      	str	r3, [r7, #16]
 800e374:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e376:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e37a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e37c:	2302      	movs	r3, #2
 800e37e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e380:	2300      	movs	r3, #0
 800e382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e384:	2303      	movs	r3, #3
 800e386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e388:	230a      	movs	r3, #10
 800e38a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e38c:	f107 0314 	add.w	r3, r7, #20
 800e390:	4619      	mov	r1, r3
 800e392:	4812      	ldr	r0, [pc, #72]	@ (800e3dc <HAL_PCD_MspInit+0xa4>)
 800e394:	f7f7 ffc2 	bl	800631c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e398:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e39a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e39c:	4a0e      	ldr	r2, [pc, #56]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3a2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	60fb      	str	r3, [r7, #12]
 800e3a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e3ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e3b2:	6453      	str	r3, [r2, #68]	@ 0x44
 800e3b4:	4b08      	ldr	r3, [pc, #32]	@ (800e3d8 <HAL_PCD_MspInit+0xa0>)
 800e3b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3bc:	60fb      	str	r3, [r7, #12]
 800e3be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2107      	movs	r1, #7
 800e3c4:	2043      	movs	r0, #67	@ 0x43
 800e3c6:	f7f7 fbfa 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e3ca:	2043      	movs	r0, #67	@ 0x43
 800e3cc:	f7f7 fc13 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e3d0:	bf00      	nop
 800e3d2:	3728      	adds	r7, #40	@ 0x28
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	40023800 	.word	0x40023800
 800e3dc:	40020000 	.word	0x40020000

0800e3e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7fe fb29 	bl	800ca4e <USBD_LL_SetupStage>
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e416:	78fa      	ldrb	r2, [r7, #3]
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	4413      	add	r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	440b      	add	r3, r1
 800e424:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	4619      	mov	r1, r3
 800e42e:	f7fe fb63 	bl	800caf8 <USBD_LL_DataOutStage>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e44c:	78fa      	ldrb	r2, [r7, #3]
 800e44e:	6879      	ldr	r1, [r7, #4]
 800e450:	4613      	mov	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	4413      	add	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	440b      	add	r3, r1
 800e45a:	3320      	adds	r3, #32
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	78fb      	ldrb	r3, [r7, #3]
 800e460:	4619      	mov	r1, r3
 800e462:	f7fe fbfc 	bl	800cc5e <USBD_LL_DataInStage>
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b082      	sub	sp, #8
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fd36 	bl	800ceee <USBD_LL_SOF>
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b084      	sub	sp, #16
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e492:	2301      	movs	r3, #1
 800e494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	79db      	ldrb	r3, [r3, #7]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73fb      	strb	r3, [r7, #15]
 800e4a2:	e008      	b.n	800e4b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	79db      	ldrb	r3, [r3, #7]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d102      	bne.n	800e4b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	73fb      	strb	r3, [r7, #15]
 800e4b0:	e001      	b.n	800e4b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e4b2:	f7f6 fee1 	bl	8005278 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4bc:	7bfa      	ldrb	r2, [r7, #15]
 800e4be:	4611      	mov	r1, r2
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fcd0 	bl	800ce66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fc78 	bl	800cdc2 <USBD_LL_Reset>
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe fccb 	bl	800ce86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	6812      	ldr	r2, [r2, #0]
 800e4fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	7adb      	ldrb	r3, [r3, #11]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d005      	beq.n	800e51c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e510:	4b04      	ldr	r3, [pc, #16]	@ (800e524 <HAL_PCD_SuspendCallback+0x48>)
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	4a03      	ldr	r2, [pc, #12]	@ (800e524 <HAL_PCD_SuspendCallback+0x48>)
 800e516:	f043 0306 	orr.w	r3, r3, #6
 800e51a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	e000ed00 	.word	0xe000ed00

0800e528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe fcc1 	bl	800cebe <USBD_LL_Resume>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	460b      	mov	r3, r1
 800e54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e556:	78fa      	ldrb	r2, [r7, #3]
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fd19 	bl	800cf92 <USBD_LL_IsoOUTIncomplete>
}
 800e560:	bf00      	nop
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e57a:	78fa      	ldrb	r2, [r7, #3]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fcd5 	bl	800cf2e <USBD_LL_IsoINIncomplete>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe fd2b 	bl	800cff6 <USBD_LL_DevConnected>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fd28 	bl	800d00c <USBD_LL_DevDisconnected>
}
 800e5bc:	bf00      	nop
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d13c      	bne.n	800e64e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e5d4:	4a20      	ldr	r2, [pc, #128]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a1e      	ldr	r2, [pc, #120]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e5ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5ee:	2204      	movs	r2, #4
 800e5f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5f2:	4b19      	ldr	r3, [pc, #100]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5f4:	2202      	movs	r2, #2
 800e5f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5f8:	4b17      	ldr	r3, [pc, #92]	@ (800e658 <USBD_LL_Init+0x94>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5fe:	4b16      	ldr	r3, [pc, #88]	@ (800e658 <USBD_LL_Init+0x94>)
 800e600:	2202      	movs	r2, #2
 800e602:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e604:	4b14      	ldr	r3, [pc, #80]	@ (800e658 <USBD_LL_Init+0x94>)
 800e606:	2201      	movs	r2, #1
 800e608:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e60a:	4b13      	ldr	r3, [pc, #76]	@ (800e658 <USBD_LL_Init+0x94>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e610:	4b11      	ldr	r3, [pc, #68]	@ (800e658 <USBD_LL_Init+0x94>)
 800e612:	2200      	movs	r2, #0
 800e614:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e616:	4b10      	ldr	r3, [pc, #64]	@ (800e658 <USBD_LL_Init+0x94>)
 800e618:	2200      	movs	r2, #0
 800e61a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e61c:	4b0e      	ldr	r3, [pc, #56]	@ (800e658 <USBD_LL_Init+0x94>)
 800e61e:	2200      	movs	r2, #0
 800e620:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e622:	480d      	ldr	r0, [pc, #52]	@ (800e658 <USBD_LL_Init+0x94>)
 800e624:	f7f8 fa57 	bl	8006ad6 <HAL_PCD_Init>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e62e:	f7f6 fe23 	bl	8005278 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e632:	2180      	movs	r1, #128	@ 0x80
 800e634:	4808      	ldr	r0, [pc, #32]	@ (800e658 <USBD_LL_Init+0x94>)
 800e636:	f7f9 fc82 	bl	8007f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e63a:	2240      	movs	r2, #64	@ 0x40
 800e63c:	2100      	movs	r1, #0
 800e63e:	4806      	ldr	r0, [pc, #24]	@ (800e658 <USBD_LL_Init+0x94>)
 800e640:	f7f9 fc36 	bl	8007eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e644:	2280      	movs	r2, #128	@ 0x80
 800e646:	2101      	movs	r1, #1
 800e648:	4803      	ldr	r0, [pc, #12]	@ (800e658 <USBD_LL_Init+0x94>)
 800e64a:	f7f9 fc31 	bl	8007eb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	20001f10 	.word	0x20001f10

0800e65c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e672:	4618      	mov	r0, r3
 800e674:	f7f8 fb3e 	bl	8006cf4 <HAL_PCD_Start>
 800e678:	4603      	mov	r3, r0
 800e67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
 800e67e:	4618      	mov	r0, r3
 800e680:	f000 f942 	bl	800e908 <USBD_Get_USB_Status>
 800e684:	4603      	mov	r3, r0
 800e686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e688:	7bbb      	ldrb	r3, [r7, #14]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b084      	sub	sp, #16
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	4608      	mov	r0, r1
 800e69c:	4611      	mov	r1, r2
 800e69e:	461a      	mov	r2, r3
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	70fb      	strb	r3, [r7, #3]
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	70bb      	strb	r3, [r7, #2]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6ba:	78bb      	ldrb	r3, [r7, #2]
 800e6bc:	883a      	ldrh	r2, [r7, #0]
 800e6be:	78f9      	ldrb	r1, [r7, #3]
 800e6c0:	f7f9 f812 	bl	80076e8 <HAL_PCD_EP_Open>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f000 f91c 	bl	800e908 <USBD_Get_USB_Status>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b084      	sub	sp, #16
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6f8:	78fa      	ldrb	r2, [r7, #3]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7f9 f85b 	bl	80077b8 <HAL_PCD_EP_Close>
 800e702:	4603      	mov	r3, r0
 800e704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e706:	7bfb      	ldrb	r3, [r7, #15]
 800e708:	4618      	mov	r0, r3
 800e70a:	f000 f8fd 	bl	800e908 <USBD_Get_USB_Status>
 800e70e:	4603      	mov	r3, r0
 800e710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e712:	7bbb      	ldrb	r3, [r7, #14]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	460b      	mov	r3, r1
 800e726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e736:	78fa      	ldrb	r2, [r7, #3]
 800e738:	4611      	mov	r1, r2
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7f9 f913 	bl	8007966 <HAL_PCD_EP_SetStall>
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	4618      	mov	r0, r3
 800e748:	f000 f8de 	bl	800e908 <USBD_Get_USB_Status>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e750:	7bbb      	ldrb	r3, [r7, #14]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	460b      	mov	r3, r1
 800e764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e774:	78fa      	ldrb	r2, [r7, #3]
 800e776:	4611      	mov	r1, r2
 800e778:	4618      	mov	r0, r3
 800e77a:	f7f9 f957 	bl	8007a2c <HAL_PCD_EP_ClrStall>
 800e77e:	4603      	mov	r3, r0
 800e780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e782:	7bfb      	ldrb	r3, [r7, #15]
 800e784:	4618      	mov	r0, r3
 800e786:	f000 f8bf 	bl	800e908 <USBD_Get_USB_Status>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e78e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e790:	4618      	mov	r0, r3
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	da0b      	bge.n	800e7cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e7ba:	68f9      	ldr	r1, [r7, #12]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	00db      	lsls	r3, r3, #3
 800e7c0:	4413      	add	r3, r2
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	440b      	add	r3, r1
 800e7c6:	3316      	adds	r3, #22
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	e00b      	b.n	800e7e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7cc:	78fb      	ldrb	r3, [r7, #3]
 800e7ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e7d2:	68f9      	ldr	r1, [r7, #12]
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	00db      	lsls	r3, r3, #3
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	440b      	add	r3, r1
 800e7de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e7e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e80a:	78fa      	ldrb	r2, [r7, #3]
 800e80c:	4611      	mov	r1, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f8 ff46 	bl	80076a0 <HAL_PCD_SetAddress>
 800e814:	4603      	mov	r3, r0
 800e816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 f874 	bl	800e908 <USBD_Get_USB_Status>
 800e820:	4603      	mov	r3, r0
 800e822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e824:	7bbb      	ldrb	r3, [r7, #14]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b086      	sub	sp, #24
 800e832:	af00      	add	r7, sp, #0
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
 800e83a:	460b      	mov	r3, r1
 800e83c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e842:	2300      	movs	r3, #0
 800e844:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e84c:	7af9      	ldrb	r1, [r7, #11]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	f7f9 f84e 	bl	80078f2 <HAL_PCD_EP_Transmit>
 800e856:	4603      	mov	r3, r0
 800e858:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f000 f853 	bl	800e908 <USBD_Get_USB_Status>
 800e862:	4603      	mov	r3, r0
 800e864:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e866:	7dbb      	ldrb	r3, [r7, #22]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	607a      	str	r2, [r7, #4]
 800e87a:	603b      	str	r3, [r7, #0]
 800e87c:	460b      	mov	r3, r1
 800e87e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e880:	2300      	movs	r3, #0
 800e882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e88e:	7af9      	ldrb	r1, [r7, #11]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	f7f8 ffda 	bl	800784c <HAL_PCD_EP_Receive>
 800e898:	4603      	mov	r3, r0
 800e89a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 f832 	bl	800e908 <USBD_Get_USB_Status>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8c4:	78fa      	ldrb	r2, [r7, #3]
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f8 fffa 	bl	80078c2 <HAL_PCD_EP_GetRxCount>
 800e8ce:	4603      	mov	r3, r0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8e0:	4b03      	ldr	r3, [pc, #12]	@ (800e8f0 <USBD_static_malloc+0x18>)
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	200023f4 	.word	0x200023f4

0800e8f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]

}
 800e8fc:	bf00      	nop
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4603      	mov	r3, r0
 800e910:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b03      	cmp	r3, #3
 800e91a:	d817      	bhi.n	800e94c <USBD_Get_USB_Status+0x44>
 800e91c:	a201      	add	r2, pc, #4	@ (adr r2, 800e924 <USBD_Get_USB_Status+0x1c>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e935 	.word	0x0800e935
 800e928:	0800e93b 	.word	0x0800e93b
 800e92c:	0800e941 	.word	0x0800e941
 800e930:	0800e947 	.word	0x0800e947
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	73fb      	strb	r3, [r7, #15]
    break;
 800e938:	e00b      	b.n	800e952 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e93a:	2303      	movs	r3, #3
 800e93c:	73fb      	strb	r3, [r7, #15]
    break;
 800e93e:	e008      	b.n	800e952 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e940:	2301      	movs	r3, #1
 800e942:	73fb      	strb	r3, [r7, #15]
    break;
 800e944:	e005      	b.n	800e952 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e946:	2303      	movs	r3, #3
 800e948:	73fb      	strb	r3, [r7, #15]
    break;
 800e94a:	e002      	b.n	800e952 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e94c:	2303      	movs	r3, #3
 800e94e:	73fb      	strb	r3, [r7, #15]
    break;
 800e950:	bf00      	nop
  }
  return usb_status;
 800e952:	7bfb      	ldrb	r3, [r7, #15]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3714      	adds	r7, #20
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 800e96a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e96e:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 800e970:	f000 f988 	bl	800ec84 <CDC_IsPacketSent>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d117      	bne.n	800e9aa <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 800e97a:	4816      	ldr	r0, [pc, #88]	@ (800e9d4 <cdc_send+0x74>)
 800e97c:	f004 fc78 	bl	8013270 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 800e980:	bf00      	nop
 800e982:	f000 f97f 	bl	800ec84 <CDC_IsPacketSent>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d105      	bne.n	800e998 <cdc_send+0x38>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3b01      	subs	r3, #1
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1f4      	bne.n	800e982 <cdc_send+0x22>
        if (!timeout)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d105      	bne.n	800e9aa <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 800e99e:	480e      	ldr	r0, [pc, #56]	@ (800e9d8 <cdc_send+0x78>)
 800e9a0:	f004 fc66 	bl	8013270 <puts>
            return -1;                                          // 返回错误代码
 800e9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a8:	e00f      	b.n	800e9ca <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f941 	bl	800ec38 <CDC_Send_DATA>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d105      	bne.n	800e9c8 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 800e9bc:	4807      	ldr	r0, [pc, #28]	@ (800e9dc <cdc_send+0x7c>)
 800e9be:	f004 fc57 	bl	8013270 <puts>
        return -1;                                              // 返回错误代码
 800e9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c6:	e000      	b.n	800e9ca <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	08017c40 	.word	0x08017c40
 800e9d8:	08017c5c 	.word	0x08017c5c
 800e9dc:	08017c88 	.word	0x08017c88

0800e9e0 <cdc_send_ready>:

static int cdc_send_ready()
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 800e9e4:	f000 f94e 	bl	800ec84 <CDC_IsPacketSent>
 800e9e8:	4603      	mov	r3, r0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f82a 	bl	800ea50 <USB_Data_Peek>
 800e9fc:	4603      	mov	r3, r0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <cdc_consume>:

static void cdc_consume()
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b082      	sub	sp, #8
 800ea0a:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 800ea0c:	1d3b      	adds	r3, r7, #4
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 f84e 	bl	800eab0 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 800ea14:	f000 f8ac 	bl	800eb70 <USB_DataRx_Sched>
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 800ea24:	4803      	ldr	r0, [pc, #12]	@ (800ea34 <cdc_init+0x14>)
 800ea26:	f003 fa37 	bl	8011e98 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 800ea2a:	f000 f921 	bl	800ec70 <CDC_Receive_DATA>
}
 800ea2e:	bf00      	nop
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	200000fc 	.word	0x200000fc

0800ea38 <CDC_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void CDC_IN_Callback(void)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
  packet_sent = 1;
 800ea3c:	4b03      	ldr	r3, [pc, #12]	@ (800ea4c <CDC_IN_Callback+0x14>)
 800ea3e:	2201      	movs	r2, #1
 800ea40:	601a      	str	r2, [r3, #0]
}
 800ea42:	bf00      	nop
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	20000110 	.word	0x20000110

0800ea50 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  if (!size)
 800ea58:	4b12      	ldr	r3, [pc, #72]	@ (800eaa4 <USB_Data_Peek+0x54>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <USB_Data_Peek+0x16>
    return 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	e017      	b.n	800ea96 <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 800ea66:	4b10      	ldr	r3, [pc, #64]	@ (800eaa8 <USB_Data_Peek+0x58>)
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	4613      	mov	r3, r2
 800ea70:	011b      	lsls	r3, r3, #4
 800ea72:	4413      	add	r3, r2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4a0d      	ldr	r2, [pc, #52]	@ (800eaac <USB_Data_Peek+0x5c>)
 800ea78:	441a      	add	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 800ea7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa8 <USB_Data_Peek+0x58>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4619      	mov	r1, r3
 800ea86:	4a09      	ldr	r2, [pc, #36]	@ (800eaac <USB_Data_Peek+0x5c>)
 800ea88:	460b      	mov	r3, r1
 800ea8a:	011b      	lsls	r3, r3, #4
 800ea8c:	440b      	add	r3, r1
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	3340      	adds	r3, #64	@ 0x40
 800ea94:	681b      	ldr	r3, [r3, #0]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop
 800eaa4:	20002f21 	.word	0x20002f21
 800eaa8:	20002f20 	.word	0x20002f20
 800eaac:	20002618 	.word	0x20002618

0800eab0 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 800eab8:	4b21      	ldr	r3, [pc, #132]	@ (800eb40 <USB_Data_Get+0x90>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <USB_Data_Get+0x16>
    return 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	e036      	b.n	800eb34 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 800eac6:	4b1f      	ldr	r3, [pc, #124]	@ (800eb44 <USB_Data_Get+0x94>)
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	461a      	mov	r2, r3
 800eace:	4613      	mov	r3, r2
 800ead0:	011b      	lsls	r3, r3, #4
 800ead2:	4413      	add	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4a1c      	ldr	r2, [pc, #112]	@ (800eb48 <USB_Data_Get+0x98>)
 800ead8:	441a      	add	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 800eade:	4b19      	ldr	r3, [pc, #100]	@ (800eb44 <USB_Data_Get+0x94>)
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	4619      	mov	r1, r3
 800eae6:	4a18      	ldr	r2, [pc, #96]	@ (800eb48 <USB_Data_Get+0x98>)
 800eae8:	460b      	mov	r3, r1
 800eaea:	011b      	lsls	r3, r3, #4
 800eaec:	440b      	add	r3, r1
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	4413      	add	r3, r2
 800eaf2:	3340      	adds	r3, #64	@ 0x40
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 800eaf8:	4b12      	ldr	r3, [pc, #72]	@ (800eb44 <USB_Data_Get+0x94>)
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	1c5a      	adds	r2, r3, #1
 800eb00:	4b12      	ldr	r3, [pc, #72]	@ (800eb4c <USB_Data_Get+0x9c>)
 800eb02:	fb83 1302 	smull	r1, r3, r3, r2
 800eb06:	1119      	asrs	r1, r3, #4
 800eb08:	17d3      	asrs	r3, r2, #31
 800eb0a:	1ac9      	subs	r1, r1, r3
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	011b      	lsls	r3, r3, #4
 800eb10:	440b      	add	r3, r1
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	1ad1      	subs	r1, r2, r3
 800eb16:	b2ca      	uxtb	r2, r1
 800eb18:	4b0a      	ldr	r3, [pc, #40]	@ (800eb44 <USB_Data_Get+0x94>)
 800eb1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb1c:	b672      	cpsid	i
}
 800eb1e:	bf00      	nop
  __disable_irq();
  size--;
 800eb20:	4b07      	ldr	r3, [pc, #28]	@ (800eb40 <USB_Data_Get+0x90>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	3b01      	subs	r3, #1
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	4b05      	ldr	r3, [pc, #20]	@ (800eb40 <USB_Data_Get+0x90>)
 800eb2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800eb2e:	b662      	cpsie	i
}
 800eb30:	bf00      	nop
  __enable_irq();

  return len;
 800eb32:	68fb      	ldr	r3, [r7, #12]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3714      	adds	r7, #20
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	20002f21 	.word	0x20002f21
 800eb44:	20002f20 	.word	0x20002f20
 800eb48:	20002618 	.word	0x20002618
 800eb4c:	78787879 	.word	0x78787879

0800eb50 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 800eb54:	4b04      	ldr	r3, [pc, #16]	@ (800eb68 <USB_DataRx_Sched_Internal+0x18>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b21      	cmp	r3, #33	@ 0x21
 800eb5c:	d802      	bhi.n	800eb64 <USB_DataRx_Sched_Internal+0x14>
//	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 800eb5e:	4803      	ldr	r0, [pc, #12]	@ (800eb6c <USB_DataRx_Sched_Internal+0x1c>)
 800eb60:	f7ff f9a5 	bl	800deae <USBD_CtlReceiveStatus>
}
 800eb64:	bf00      	nop
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	20002f21 	.word	0x20002f21
 800eb6c:	20000a34 	.word	0x20000a34

0800eb70 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800eb74:	b672      	cpsid	i
}
 800eb76:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 800eb78:	f7ff ffea 	bl	800eb50 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 800eb7c:	b662      	cpsie	i
}
 800eb7e:	bf00      	nop
  __enable_irq();
}
 800eb80:	bf00      	nop
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <CDC_OUT_Callback>:

// CDC接收数据回调函数
void CDC_OUT_Callback(uint8_t **Buf,uint32_t *Len)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
//	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
	Receive_length = USBD_GetRxCount(&hUsbDeviceFS, CDC_OUT_EP);
 800eb8e:	2101      	movs	r1, #1
 800eb90:	4823      	ldr	r0, [pc, #140]	@ (800ec20 <CDC_OUT_Callback+0x9c>)
 800eb92:	f7ff f99f 	bl	800ded4 <USBD_GetRxCount>
 800eb96:	4603      	mov	r3, r0
 800eb98:	4a22      	ldr	r2, [pc, #136]	@ (800ec24 <CDC_OUT_Callback+0xa0>)
 800eb9a:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 800eb9c:	4b22      	ldr	r3, [pc, #136]	@ (800ec28 <CDC_OUT_Callback+0xa4>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b21      	cmp	r3, #33	@ 0x21
 800eba4:	d838      	bhi.n	800ec18 <CDC_OUT_Callback+0x94>
    {
        tail = (tail + 1) % CIRC_BUF_SIZE;
 800eba6:	4b21      	ldr	r3, [pc, #132]	@ (800ec2c <CDC_OUT_Callback+0xa8>)
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	1c5a      	adds	r2, r3, #1
 800ebae:	4b20      	ldr	r3, [pc, #128]	@ (800ec30 <CDC_OUT_Callback+0xac>)
 800ebb0:	fb83 1302 	smull	r1, r3, r3, r2
 800ebb4:	1119      	asrs	r1, r3, #4
 800ebb6:	17d3      	asrs	r3, r2, #31
 800ebb8:	1ac9      	subs	r1, r1, r3
 800ebba:	460b      	mov	r3, r1
 800ebbc:	011b      	lsls	r3, r3, #4
 800ebbe:	440b      	add	r3, r1
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	1ad1      	subs	r1, r2, r3
 800ebc4:	b2ca      	uxtb	r2, r1
 800ebc6:	4b19      	ldr	r3, [pc, #100]	@ (800ec2c <CDC_OUT_Callback+0xa8>)
 800ebc8:	701a      	strb	r2, [r3, #0]
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 800ebca:	4b18      	ldr	r3, [pc, #96]	@ (800ec2c <CDC_OUT_Callback+0xa8>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	011b      	lsls	r3, r3, #4
 800ebd6:	4413      	add	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4a16      	ldr	r2, [pc, #88]	@ (800ec34 <CDC_OUT_Callback+0xb0>)
 800ebdc:	4413      	add	r3, r2
 800ebde:	4a11      	ldr	r2, [pc, #68]	@ (800ec24 <CDC_OUT_Callback+0xa0>)
 800ebe0:	6812      	ldr	r2, [r2, #0]
 800ebe2:	6879      	ldr	r1, [r7, #4]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f004 fc0b 	bl	8013400 <memcpy>
        circ_buf[tail].len = Receive_length;
 800ebea:	4b10      	ldr	r3, [pc, #64]	@ (800ec2c <CDC_OUT_Callback+0xa8>)
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ec24 <CDC_OUT_Callback+0xa0>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	490f      	ldr	r1, [pc, #60]	@ (800ec34 <CDC_OUT_Callback+0xb0>)
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	011b      	lsls	r3, r3, #4
 800ebfc:	4403      	add	r3, r0
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	440b      	add	r3, r1
 800ec02:	3340      	adds	r3, #64	@ 0x40
 800ec04:	601a      	str	r2, [r3, #0]
        size++;
 800ec06:	4b08      	ldr	r3, [pc, #32]	@ (800ec28 <CDC_OUT_Callback+0xa4>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	4b05      	ldr	r3, [pc, #20]	@ (800ec28 <CDC_OUT_Callback+0xa4>)
 800ec12:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 800ec14:	f7ff ff9c 	bl	800eb50 <USB_DataRx_Sched_Internal>
    }
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	20000a34 	.word	0x20000a34
 800ec24:	20002614 	.word	0x20002614
 800ec28:	20002f21 	.word	0x20002f21
 800ec2c:	2000010c 	.word	0x2000010c
 800ec30:	78787879 	.word	0x78787879
 800ec34:	20002618 	.word	0x20002618

0800ec38 <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	460b      	mov	r3, r1
 800ec42:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= CDC_DATA_FS_MAX_PACKET_SIZE)
 800ec44:	78fb      	ldrb	r3, [r7, #3]
 800ec46:	2b40      	cmp	r3, #64	@ 0x40
 800ec48:	d80a      	bhi.n	800ec60 <CDC_Send_DATA+0x28>
  {
	  packet_sent = 0;
 800ec4a:	4b08      	ldr	r3, [pc, #32]	@ (800ec6c <CDC_Send_DATA+0x34>)
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]
//	  CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
	  CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
 800ec50:	78fb      	ldrb	r3, [r7, #3]
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	4619      	mov	r1, r3
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7ff fa10 	bl	800e07c <CDC_Transmit_FS>
  else
  {
    return 0;
  }

  return 1;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e000      	b.n	800ec62 <CDC_Send_DATA+0x2a>
    return 0;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000110 	.word	0x20000110

0800ec70 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	af00      	add	r7, sp, #0
//    USBD_CtlReceiveStatus(&hUsbDeviceHS);
	USBD_CtlReceiveStatus(&hUsbDeviceFS);
 800ec74:	4802      	ldr	r0, [pc, #8]	@ (800ec80 <CDC_Receive_DATA+0x10>)
 800ec76:	f7ff f91a 	bl	800deae <USBD_CtlReceiveStatus>
  return 1 ;
 800ec7a:	2301      	movs	r3, #1
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20000a34 	.word	0x20000a34

0800ec84 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 800ec84:	b480      	push	{r7}
 800ec86:	af00      	add	r7, sp, #0
  return packet_sent;
 800ec88:	4b03      	ldr	r3, [pc, #12]	@ (800ec98 <CDC_IsPacketSent+0x14>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	20000110 	.word	0x20000110

0800ec9c <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 800ec9c:	b480      	push	{r7}
 800ec9e:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 800eca0:	4b06      	ldr	r3, [pc, #24]	@ (800ecbc <is_external_clock_avail+0x20>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bf14      	ite	ne
 800ecac:	2301      	movne	r3, #1
 800ecae:	2300      	moveq	r3, #0
 800ecb0:	b2db      	uxtb	r3, r3
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	40023800 	.word	0x40023800

0800ecc0 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b088      	sub	sp, #32
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 800ecc8:	f7f7 f8a4 	bl	8005e14 <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 800eccc:	2300      	movs	r3, #0
 800ecce:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 800ecd8:	2302      	movs	r3, #2
 800ecda:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 800ecdc:	f107 0308 	add.w	r3, r7, #8
 800ece0:	2100      	movs	r1, #0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f7 f9f8 	bl	80060d8 <HAL_FLASHEx_Erase>
 800ece8:	4603      	mov	r3, r0
 800ecea:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 800ecec:	f7f7 f8b4 	bl	8005e58 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 800ecf0:	7ffb      	ldrb	r3, [r7, #31]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d002      	beq.n	800ecfc <flash_page_erase+0x3c>
 800ecf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfa:	e000      	b.n	800ecfe <flash_page_erase+0x3e>
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3720      	adds	r7, #32
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 800ed06:	b5b0      	push	{r4, r5, r7, lr}
 800ed08:	b088      	sub	sp, #32
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	607a      	str	r2, [r7, #4]
    int ret = -1;
 800ed12:	f04f 33ff 	mov.w	r3, #4294967295
 800ed16:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 800ed18:	f7f7 f87c 	bl	8005e14 <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	61bb      	str	r3, [r7, #24]
 800ed20:	e017      	b.n	800ed52 <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 800ed22:	68ba      	ldr	r2, [r7, #8]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	4413      	add	r3, r2
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	461c      	mov	r4, r3
 800ed32:	4615      	mov	r5, r2
 800ed34:	4622      	mov	r2, r4
 800ed36:	462b      	mov	r3, r5
 800ed38:	68f9      	ldr	r1, [r7, #12]
 800ed3a:	2002      	movs	r0, #2
 800ed3c:	f7f7 f816 	bl	8005d6c <HAL_FLASH_Program>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10c      	bne.n	800ed60 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	3304      	adds	r3, #4
 800ed4a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 800ed4c:	69bb      	ldr	r3, [r7, #24]
 800ed4e:	3304      	adds	r3, #4
 800ed50:	61bb      	str	r3, [r7, #24]
 800ed52:	69ba      	ldr	r2, [r7, #24]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d3e3      	bcc.n	800ed22 <flash_write+0x1c>
    }

    ret = data_len;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	61fb      	str	r3, [r7, #28]
 800ed5e:	e000      	b.n	800ed62 <flash_write+0x5c>
            goto Exit;
 800ed60:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 800ed62:	f7f7 f879 	bl	8005e58 <HAL_FLASH_Lock>

    return ret;
 800ed66:	69fb      	ldr	r3, [r7, #28]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3720      	adds	r7, #32
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bdb0      	pop	{r4, r5, r7, pc}

0800ed70 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b087      	sub	sp, #28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	617b      	str	r3, [r7, #20]
 800ed80:	e00c      	b.n	800ed9c <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	4413      	add	r3, r2
 800ed88:	4619      	mov	r1, r3
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	4413      	add	r3, r2
 800ed90:	780a      	ldrb	r2, [r1, #0]
 800ed92:	b2d2      	uxtb	r2, r2
 800ed94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	697a      	ldr	r2, [r7, #20]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d3ee      	bcc.n	800ed82 <flash_read+0x12>
    }

    return i;
 800eda4:	697b      	ldr	r3, [r7, #20]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
	...

0800edb4 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edba:	1d3b      	adds	r3, r7, #4
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	605a      	str	r2, [r3, #4]
 800edc2:	609a      	str	r2, [r3, #8]
 800edc4:	60da      	str	r2, [r3, #12]
 800edc6:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 800edc8:	4b20      	ldr	r3, [pc, #128]	@ (800ee4c <nand_gpio_init+0x98>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d139      	bne.n	800ee44 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 800edd0:	4b1e      	ldr	r3, [pc, #120]	@ (800ee4c <nand_gpio_init+0x98>)
 800edd2:	2201      	movs	r2, #1
 800edd4:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 800edd6:	2300      	movs	r3, #0
 800edd8:	603b      	str	r3, [r7, #0]
 800edda:	4b1d      	ldr	r3, [pc, #116]	@ (800ee50 <nand_gpio_init+0x9c>)
 800eddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edde:	4a1c      	ldr	r2, [pc, #112]	@ (800ee50 <nand_gpio_init+0x9c>)
 800ede0:	f043 0301 	orr.w	r3, r3, #1
 800ede4:	6393      	str	r3, [r2, #56]	@ 0x38
 800ede6:	4b1a      	ldr	r3, [pc, #104]	@ (800ee50 <nand_gpio_init+0x9c>)
 800ede8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	603b      	str	r3, [r7, #0]
 800edf0:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800edf2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800edf6:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edf8:	2302      	movs	r3, #2
 800edfa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee00:	2303      	movs	r3, #3
 800ee02:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800ee04:	230c      	movs	r3, #12
 800ee06:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ee08:	1d3b      	adds	r3, r7, #4
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4811      	ldr	r0, [pc, #68]	@ (800ee54 <nand_gpio_init+0xa0>)
 800ee0e:	f7f7 fa85 	bl	800631c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ee12:	f64d 73f3 	movw	r3, #57331	@ 0xdff3
 800ee16:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee18:	2302      	movs	r3, #2
 800ee1a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee20:	2303      	movs	r3, #3
 800ee22:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800ee24:	230c      	movs	r3, #12
 800ee26:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ee28:	1d3b      	adds	r3, r7, #4
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	480a      	ldr	r0, [pc, #40]	@ (800ee58 <nand_gpio_init+0xa4>)
 800ee2e:	f7f7 fa75 	bl	800631c <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 800ee32:	2200      	movs	r2, #0
 800ee34:	2100      	movs	r1, #0
 800ee36:	2030      	movs	r0, #48	@ 0x30
 800ee38:	f7f6 fec1 	bl	8005bbe <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 800ee3c:	2030      	movs	r0, #48	@ 0x30
 800ee3e:	f7f6 feda 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
 800ee42:	e000      	b.n	800ee46 <nand_gpio_init+0x92>
	    return;
 800ee44:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 800ee46:	3718      	adds	r7, #24
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	20002f3c 	.word	0x20002f3c
 800ee50:	40023800 	.word	0x40023800
 800ee54:	40021000 	.word	0x40021000
 800ee58:	40020c00 	.word	0x40020c00

0800ee5c <nand_fsmc_init>:


static void nand_fsmc_init()
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08a      	sub	sp, #40	@ 0x28
 800ee60:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800ee62:	f107 0318 	add.w	r3, r7, #24
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
 800ee6a:	605a      	str	r2, [r3, #4]
 800ee6c:	609a      	str	r2, [r3, #8]
 800ee6e:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800ee70:	f107 0308 	add.w	r3, r7, #8
 800ee74:	2200      	movs	r2, #0
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	605a      	str	r2, [r3, #4]
 800ee7a:	609a      	str	r2, [r3, #8]
 800ee7c:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 800ee7e:	4b29      	ldr	r3, [pc, #164]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee80:	4a29      	ldr	r2, [pc, #164]	@ (800ef28 <nand_fsmc_init+0xcc>)
 800ee82:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800ee84:	4b27      	ldr	r3, [pc, #156]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee86:	2210      	movs	r2, #16
 800ee88:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 800ee8a:	4b26      	ldr	r3, [pc, #152]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800ee90:	4b24      	ldr	r3, [pc, #144]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 800ee96:	4b23      	ldr	r3, [pc, #140]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 800ee9c:	4b21      	ldr	r3, [pc, #132]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 800eea2:	4b22      	ldr	r3, [pc, #136]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eea4:	791b      	ldrb	r3, [r3, #4]
 800eea6:	461a      	mov	r2, r3
 800eea8:	4b1e      	ldr	r3, [pc, #120]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800eeaa:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 800eeac:	4b1f      	ldr	r3, [pc, #124]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eeae:	795b      	ldrb	r3, [r3, #5]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800eeb4:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 800eeb6:	4b1d      	ldr	r3, [pc, #116]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 800eebc:	4b1b      	ldr	r3, [pc, #108]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 800eec2:	4b1a      	ldr	r3, [pc, #104]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eec4:	789b      	ldrb	r3, [r3, #2]
 800eec6:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 800eec8:	4b18      	ldr	r3, [pc, #96]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eeca:	78db      	ldrb	r3, [r3, #3]
 800eecc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 800eece:	4b17      	ldr	r3, [pc, #92]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 800eed4:	4b15      	ldr	r3, [pc, #84]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eed6:	785b      	ldrb	r3, [r3, #1]
 800eed8:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 800eeda:	4b14      	ldr	r3, [pc, #80]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eedc:	789b      	ldrb	r3, [r3, #2]
 800eede:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 800eee0:	4b12      	ldr	r3, [pc, #72]	@ (800ef2c <nand_fsmc_init+0xd0>)
 800eee2:	78db      	ldrb	r3, [r3, #3]
 800eee4:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800eee6:	f107 0208 	add.w	r2, r7, #8
 800eeea:	f107 0318 	add.w	r3, r7, #24
 800eeee:	4619      	mov	r1, r3
 800eef0:	480c      	ldr	r0, [pc, #48]	@ (800ef24 <nand_fsmc_init+0xc8>)
 800eef2:	f7f7 fcc4 	bl	800687e <HAL_NAND_Init>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 800eefc:	f7f6 f9bc 	bl	8005278 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 800ef00:	2300      	movs	r3, #0
 800ef02:	607b      	str	r3, [r7, #4]
 800ef04:	4b0a      	ldr	r3, [pc, #40]	@ (800ef30 <nand_fsmc_init+0xd4>)
 800ef06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef08:	4a09      	ldr	r2, [pc, #36]	@ (800ef30 <nand_fsmc_init+0xd4>)
 800ef0a:	f043 0301 	orr.w	r3, r3, #1
 800ef0e:	6393      	str	r3, [r2, #56]	@ 0x38
 800ef10:	4b07      	ldr	r3, [pc, #28]	@ (800ef30 <nand_fsmc_init+0xd4>)
 800ef12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef14:	f003 0301 	and.w	r3, r3, #1
 800ef18:	607b      	str	r3, [r7, #4]
 800ef1a:	687b      	ldr	r3, [r7, #4]
}
 800ef1c:	bf00      	nop
 800ef1e:	3728      	adds	r7, #40	@ 0x28
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	20000904 	.word	0x20000904
 800ef28:	a0000060 	.word	0xa0000060
 800ef2c:	20002f24 	.word	0x20002f24
 800ef30:	40023800 	.word	0x40023800

0800ef34 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 800ef38:	4b42      	ldr	r3, [pc, #264]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4842      	ldr	r0, [pc, #264]	@ (800f048 <nand_print_fsmc_info+0x114>)
 800ef40:	f004 f93e 	bl	80131c0 <printf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 800ef44:	4b3f      	ldr	r3, [pc, #252]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef46:	785b      	ldrb	r3, [r3, #1]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	4840      	ldr	r0, [pc, #256]	@ (800f04c <nand_print_fsmc_info+0x118>)
 800ef4c:	f004 f938 	bl	80131c0 <printf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 800ef50:	4b3c      	ldr	r3, [pc, #240]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef52:	789b      	ldrb	r3, [r3, #2]
 800ef54:	4619      	mov	r1, r3
 800ef56:	483e      	ldr	r0, [pc, #248]	@ (800f050 <nand_print_fsmc_info+0x11c>)
 800ef58:	f004 f932 	bl	80131c0 <printf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 800ef5c:	4b39      	ldr	r3, [pc, #228]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef5e:	78db      	ldrb	r3, [r3, #3]
 800ef60:	4619      	mov	r1, r3
 800ef62:	483c      	ldr	r0, [pc, #240]	@ (800f054 <nand_print_fsmc_info+0x120>)
 800ef64:	f004 f92c 	bl	80131c0 <printf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 800ef68:	4b36      	ldr	r3, [pc, #216]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef6a:	791b      	ldrb	r3, [r3, #4]
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	483a      	ldr	r0, [pc, #232]	@ (800f058 <nand_print_fsmc_info+0x124>)
 800ef70:	f004 f926 	bl	80131c0 <printf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 800ef74:	4b33      	ldr	r3, [pc, #204]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef76:	795b      	ldrb	r3, [r3, #5]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	4838      	ldr	r0, [pc, #224]	@ (800f05c <nand_print_fsmc_info+0x128>)
 800ef7c:	f004 f920 	bl	80131c0 <printf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 800ef80:	4b30      	ldr	r3, [pc, #192]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef82:	799b      	ldrb	r3, [r3, #6]
 800ef84:	4619      	mov	r1, r3
 800ef86:	4836      	ldr	r0, [pc, #216]	@ (800f060 <nand_print_fsmc_info+0x12c>)
 800ef88:	f004 f91a 	bl	80131c0 <printf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 800ef8c:	4b2d      	ldr	r3, [pc, #180]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef8e:	79db      	ldrb	r3, [r3, #7]
 800ef90:	4619      	mov	r1, r3
 800ef92:	4834      	ldr	r0, [pc, #208]	@ (800f064 <nand_print_fsmc_info+0x130>)
 800ef94:	f004 f914 	bl	80131c0 <printf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 800ef98:	4b2a      	ldr	r3, [pc, #168]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800ef9a:	7a1b      	ldrb	r3, [r3, #8]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4832      	ldr	r0, [pc, #200]	@ (800f068 <nand_print_fsmc_info+0x134>)
 800efa0:	f004 f90e 	bl	80131c0 <printf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 800efa4:	4b27      	ldr	r3, [pc, #156]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efa6:	7a5b      	ldrb	r3, [r3, #9]
 800efa8:	4619      	mov	r1, r3
 800efaa:	4830      	ldr	r0, [pc, #192]	@ (800f06c <nand_print_fsmc_info+0x138>)
 800efac:	f004 f908 	bl	80131c0 <printf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 800efb0:	4b24      	ldr	r3, [pc, #144]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efb2:	7a9b      	ldrb	r3, [r3, #10]
 800efb4:	4619      	mov	r1, r3
 800efb6:	482e      	ldr	r0, [pc, #184]	@ (800f070 <nand_print_fsmc_info+0x13c>)
 800efb8:	f004 f902 	bl	80131c0 <printf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 800efbc:	4b21      	ldr	r3, [pc, #132]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efbe:	7adb      	ldrb	r3, [r3, #11]
 800efc0:	4619      	mov	r1, r3
 800efc2:	482c      	ldr	r0, [pc, #176]	@ (800f074 <nand_print_fsmc_info+0x140>)
 800efc4:	f004 f8fc 	bl	80131c0 <printf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 800efc8:	4b1e      	ldr	r3, [pc, #120]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efca:	7b1b      	ldrb	r3, [r3, #12]
 800efcc:	4619      	mov	r1, r3
 800efce:	482a      	ldr	r0, [pc, #168]	@ (800f078 <nand_print_fsmc_info+0x144>)
 800efd0:	f004 f8f6 	bl	80131c0 <printf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 800efd4:	4b1b      	ldr	r3, [pc, #108]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efd6:	7b5b      	ldrb	r3, [r3, #13]
 800efd8:	4619      	mov	r1, r3
 800efda:	4828      	ldr	r0, [pc, #160]	@ (800f07c <nand_print_fsmc_info+0x148>)
 800efdc:	f004 f8f0 	bl	80131c0 <printf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 800efe0:	4b18      	ldr	r3, [pc, #96]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efe2:	7b9b      	ldrb	r3, [r3, #14]
 800efe4:	4619      	mov	r1, r3
 800efe6:	4826      	ldr	r0, [pc, #152]	@ (800f080 <nand_print_fsmc_info+0x14c>)
 800efe8:	f004 f8ea 	bl	80131c0 <printf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 800efec:	4b15      	ldr	r3, [pc, #84]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800efee:	7bdb      	ldrb	r3, [r3, #15]
 800eff0:	4619      	mov	r1, r3
 800eff2:	4824      	ldr	r0, [pc, #144]	@ (800f084 <nand_print_fsmc_info+0x150>)
 800eff4:	f004 f8e4 	bl	80131c0 <printf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 800eff8:	4b12      	ldr	r3, [pc, #72]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800effa:	7c1b      	ldrb	r3, [r3, #16]
 800effc:	4619      	mov	r1, r3
 800effe:	4822      	ldr	r0, [pc, #136]	@ (800f088 <nand_print_fsmc_info+0x154>)
 800f000:	f004 f8de 	bl	80131c0 <printf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 800f004:	4b0f      	ldr	r3, [pc, #60]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800f006:	7c5b      	ldrb	r3, [r3, #17]
 800f008:	4619      	mov	r1, r3
 800f00a:	4820      	ldr	r0, [pc, #128]	@ (800f08c <nand_print_fsmc_info+0x158>)
 800f00c:	f004 f8d8 	bl	80131c0 <printf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 800f010:	4b0c      	ldr	r3, [pc, #48]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800f012:	7c9b      	ldrb	r3, [r3, #18]
 800f014:	4619      	mov	r1, r3
 800f016:	481e      	ldr	r0, [pc, #120]	@ (800f090 <nand_print_fsmc_info+0x15c>)
 800f018:	f004 f8d2 	bl	80131c0 <printf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 800f01c:	4b09      	ldr	r3, [pc, #36]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800f01e:	7cdb      	ldrb	r3, [r3, #19]
 800f020:	4619      	mov	r1, r3
 800f022:	481c      	ldr	r0, [pc, #112]	@ (800f094 <nand_print_fsmc_info+0x160>)
 800f024:	f004 f8cc 	bl	80131c0 <printf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 800f028:	4b06      	ldr	r3, [pc, #24]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800f02a:	7d1b      	ldrb	r3, [r3, #20]
 800f02c:	4619      	mov	r1, r3
 800f02e:	481a      	ldr	r0, [pc, #104]	@ (800f098 <nand_print_fsmc_info+0x164>)
 800f030:	f004 f8c6 	bl	80131c0 <printf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 800f034:	4b03      	ldr	r3, [pc, #12]	@ (800f044 <nand_print_fsmc_info+0x110>)
 800f036:	7d5b      	ldrb	r3, [r3, #21]
 800f038:	4619      	mov	r1, r3
 800f03a:	4818      	ldr	r0, [pc, #96]	@ (800f09c <nand_print_fsmc_info+0x168>)
 800f03c:	f004 f8c0 	bl	80131c0 <printf>
}
 800f040:	bf00      	nop
 800f042:	bd80      	pop	{r7, pc}
 800f044:	20002f24 	.word	0x20002f24
 800f048:	08017ca4 	.word	0x08017ca4
 800f04c:	08017cb8 	.word	0x08017cb8
 800f050:	08017cd0 	.word	0x08017cd0
 800f054:	08017ce8 	.word	0x08017ce8
 800f058:	08017d00 	.word	0x08017d00
 800f05c:	08017d18 	.word	0x08017d18
 800f060:	08017d2c 	.word	0x08017d2c
 800f064:	08017d40 	.word	0x08017d40
 800f068:	08017d54 	.word	0x08017d54
 800f06c:	08017d6c 	.word	0x08017d6c
 800f070:	08017d84 	.word	0x08017d84
 800f074:	08017da0 	.word	0x08017da0
 800f078:	08017db8 	.word	0x08017db8
 800f07c:	08017dcc 	.word	0x08017dcc
 800f080:	08017de4 	.word	0x08017de4
 800f084:	08017dfc 	.word	0x08017dfc
 800f088:	08017e14 	.word	0x08017e14
 800f08c:	08017e2c 	.word	0x08017e2c
 800f090:	08017e44 	.word	0x08017e44
 800f094:	08017e60 	.word	0x08017e60
 800f098:	08017e7c 	.word	0x08017e7c
 800f09c:	08017e94 	.word	0x08017e94

0800f0a0 <nand_reset>:

static void nand_reset()
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 800f0a4:	4b04      	ldr	r3, [pc, #16]	@ (800f0b8 <nand_reset+0x18>)
 800f0a6:	4a05      	ldr	r2, [pc, #20]	@ (800f0bc <nand_reset+0x1c>)
 800f0a8:	7b12      	ldrb	r2, [r2, #12]
 800f0aa:	701a      	strb	r2, [r3, #0]
}
 800f0ac:	bf00      	nop
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	70010000 	.word	0x70010000
 800f0bc:	20002f24 	.word	0x20002f24

0800f0c0 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 800f0c0:	b5b0      	push	{r4, r5, r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b15      	cmp	r3, #21
 800f0ce:	d802      	bhi.n	800f0d6 <nand_init+0x16>
        return -1;
 800f0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d4:	e015      	b.n	800f102 <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 800f0d6:	4a0d      	ldr	r2, [pc, #52]	@ (800f10c <nand_init+0x4c>)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4614      	mov	r4, r2
 800f0dc:	461d      	mov	r5, r3
 800f0de:	6828      	ldr	r0, [r5, #0]
 800f0e0:	6869      	ldr	r1, [r5, #4]
 800f0e2:	68aa      	ldr	r2, [r5, #8]
 800f0e4:	68eb      	ldr	r3, [r5, #12]
 800f0e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0e8:	6928      	ldr	r0, [r5, #16]
 800f0ea:	6020      	str	r0, [r4, #0]
 800f0ec:	8aab      	ldrh	r3, [r5, #20]
 800f0ee:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 800f0f0:	f7ff fe60 	bl	800edb4 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 800f0f4:	f7ff feb2 	bl	800ee5c <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 800f0f8:	f7ff ff1c 	bl	800ef34 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 800f0fc:	f7ff ffd0 	bl	800f0a0 <nand_reset>

    return 0;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3708      	adds	r7, #8
 800f106:	46bd      	mov	sp, r7
 800f108:	bdb0      	pop	{r4, r5, r7, pc}
 800f10a:	bf00      	nop
 800f10c:	20002f24 	.word	0x20002f24

0800f110 <nand_uninit>:

static void nand_uninit()
{
 800f110:	b480      	push	{r7}
 800f112:	af00      	add	r7, sp, #0
    //TODO
}
 800f114:	bf00      	nop
 800f116:	46bd      	mov	sp, r7
 800f118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11c:	4770      	bx	lr
	...

0800f120 <nand_read_status>:

static uint32_t nand_read_status()
{
 800f120:	b480      	push	{r7}
 800f122:	b083      	sub	sp, #12
 800f124:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 800f126:	4b11      	ldr	r3, [pc, #68]	@ (800f16c <nand_read_status+0x4c>)
 800f128:	4a11      	ldr	r2, [pc, #68]	@ (800f170 <nand_read_status+0x50>)
 800f12a:	7c52      	ldrb	r2, [r2, #17]
 800f12c:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 800f12e:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	b2db      	uxtb	r3, r3
 800f136:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	f003 0301 	and.w	r3, r3, #1
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 800f142:	2302      	movs	r3, #2
 800f144:	607b      	str	r3, [r7, #4]
 800f146:	e009      	b.n	800f15c <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 800f152:	2300      	movs	r3, #0
 800f154:	607b      	str	r3, [r7, #4]
 800f156:	e001      	b.n	800f15c <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 800f158:	2301      	movs	r3, #1
 800f15a:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 800f15c:	687b      	ldr	r3, [r7, #4]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	370c      	adds	r7, #12
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	70010000 	.word	0x70010000
 800f170:	20002f24 	.word	0x20002f24

0800f174 <nand_get_status>:

static uint32_t nand_get_status()
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b082      	sub	sp, #8
 800f178:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 800f17a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f17e:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 800f180:	f7ff ffce 	bl	800f120 <nand_read_status>
 800f184:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 800f186:	e005      	b.n	800f194 <nand_get_status+0x20>
    {
        status = nand_read_status();
 800f188:	f7ff ffca 	bl	800f120 <nand_read_status>
 800f18c:	6078      	str	r0, [r7, #4]
        timeout --;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	3b01      	subs	r3, #1
 800f192:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d102      	bne.n	800f1a0 <nand_get_status+0x2c>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1f3      	bne.n	800f188 <nand_get_status+0x14>
    }

    if (!timeout)
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 800f1aa:	687b      	ldr	r3, [r7, #4]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 800f1c0:	4b17      	ldr	r3, [pc, #92]	@ (800f220 <nand_read_id+0x6c>)
 800f1c2:	4a18      	ldr	r2, [pc, #96]	@ (800f224 <nand_read_id+0x70>)
 800f1c4:	7ad2      	ldrb	r2, [r2, #11]
 800f1c6:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f1c8:	4b17      	ldr	r3, [pc, #92]	@ (800f228 <nand_read_id+0x74>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 800f1ce:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	0a1b      	lsrs	r3, r3, #8
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	0c1b      	lsrs	r3, r3, #16
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	0e1b      	lsrs	r3, r3, #24
 800f1f6:	b2da      	uxtb	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 800f1fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f22c <nand_read_id+0x78>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	b2da      	uxtb	r2, r3
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	0a1b      	lsrs	r3, r3, #8
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	715a      	strb	r2, [r3, #5]
}
 800f214:	bf00      	nop
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr
 800f220:	70010000 	.word	0x70010000
 800f224:	20002f24 	.word	0x20002f24
 800f228:	70020000 	.word	0x70020000
 800f22c:	70000004 	.word	0x70000004

0800f230 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 800f23c:	4b4c      	ldr	r3, [pc, #304]	@ (800f370 <nand_write_page_async+0x140>)
 800f23e:	4a4d      	ldr	r2, [pc, #308]	@ (800f374 <nand_write_page_async+0x144>)
 800f240:	7b52      	ldrb	r2, [r2, #13]
 800f242:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 800f244:	4b4b      	ldr	r3, [pc, #300]	@ (800f374 <nand_write_page_async+0x144>)
 800f246:	79db      	ldrb	r3, [r3, #7]
 800f248:	3b01      	subs	r3, #1
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d82c      	bhi.n	800f2a8 <nand_write_page_async+0x78>
 800f24e:	a201      	add	r2, pc, #4	@ (adr r2, 800f254 <nand_write_page_async+0x24>)
 800f250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f254:	0800f265 	.word	0x0800f265
 800f258:	0800f26d 	.word	0x0800f26d
 800f25c:	0800f27b 	.word	0x0800f27b
 800f260:	0800f28f 	.word	0x0800f28f
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f264:	4b44      	ldr	r3, [pc, #272]	@ (800f378 <nand_write_page_async+0x148>)
 800f266:	2200      	movs	r2, #0
 800f268:	701a      	strb	r2, [r3, #0]
        break;
 800f26a:	e01e      	b.n	800f2aa <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f26c:	4b42      	ldr	r3, [pc, #264]	@ (800f378 <nand_write_page_async+0x148>)
 800f26e:	2200      	movs	r2, #0
 800f270:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f272:	4b41      	ldr	r3, [pc, #260]	@ (800f378 <nand_write_page_async+0x148>)
 800f274:	2200      	movs	r2, #0
 800f276:	701a      	strb	r2, [r3, #0]
        break;
 800f278:	e017      	b.n	800f2aa <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f27a:	4b3f      	ldr	r3, [pc, #252]	@ (800f378 <nand_write_page_async+0x148>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f280:	4b3d      	ldr	r3, [pc, #244]	@ (800f378 <nand_write_page_async+0x148>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f286:	4b3c      	ldr	r3, [pc, #240]	@ (800f378 <nand_write_page_async+0x148>)
 800f288:	2200      	movs	r2, #0
 800f28a:	701a      	strb	r2, [r3, #0]
        break;
 800f28c:	e00d      	b.n	800f2aa <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f28e:	4b3a      	ldr	r3, [pc, #232]	@ (800f378 <nand_write_page_async+0x148>)
 800f290:	2200      	movs	r2, #0
 800f292:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f294:	4b38      	ldr	r3, [pc, #224]	@ (800f378 <nand_write_page_async+0x148>)
 800f296:	2200      	movs	r2, #0
 800f298:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f29a:	4b37      	ldr	r3, [pc, #220]	@ (800f378 <nand_write_page_async+0x148>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 800f2a0:	4b35      	ldr	r3, [pc, #212]	@ (800f378 <nand_write_page_async+0x148>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	701a      	strb	r2, [r3, #0]
        break;
 800f2a6:	e000      	b.n	800f2aa <nand_write_page_async+0x7a>
    default:
        break;
 800f2a8:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 800f2aa:	4b32      	ldr	r3, [pc, #200]	@ (800f374 <nand_write_page_async+0x144>)
 800f2ac:	799b      	ldrb	r3, [r3, #6]
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d83d      	bhi.n	800f330 <nand_write_page_async+0x100>
 800f2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f2bc <nand_write_page_async+0x8c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f2d7 	.word	0x0800f2d7
 800f2c4:	0800f2eb 	.word	0x0800f2eb
 800f2c8:	0800f309 	.word	0x0800f309
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f2cc:	4b2a      	ldr	r3, [pc, #168]	@ (800f378 <nand_write_page_async+0x148>)
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	b2d2      	uxtb	r2, r2
 800f2d2:	701a      	strb	r2, [r3, #0]
        break;
 800f2d4:	e02d      	b.n	800f332 <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f2d6:	4b28      	ldr	r3, [pc, #160]	@ (800f378 <nand_write_page_async+0x148>)
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	b2d2      	uxtb	r2, r2
 800f2dc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	0a1a      	lsrs	r2, r3, #8
 800f2e2:	4b25      	ldr	r3, [pc, #148]	@ (800f378 <nand_write_page_async+0x148>)
 800f2e4:	b2d2      	uxtb	r2, r2
 800f2e6:	701a      	strb	r2, [r3, #0]
        break;
 800f2e8:	e023      	b.n	800f332 <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f2ea:	4b23      	ldr	r3, [pc, #140]	@ (800f378 <nand_write_page_async+0x148>)
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	b2d2      	uxtb	r2, r2
 800f2f0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	0a1a      	lsrs	r2, r3, #8
 800f2f6:	4b20      	ldr	r3, [pc, #128]	@ (800f378 <nand_write_page_async+0x148>)
 800f2f8:	b2d2      	uxtb	r2, r2
 800f2fa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	0c1a      	lsrs	r2, r3, #16
 800f300:	4b1d      	ldr	r3, [pc, #116]	@ (800f378 <nand_write_page_async+0x148>)
 800f302:	b2d2      	uxtb	r2, r2
 800f304:	701a      	strb	r2, [r3, #0]
        break;
 800f306:	e014      	b.n	800f332 <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f308:	4b1b      	ldr	r3, [pc, #108]	@ (800f378 <nand_write_page_async+0x148>)
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	b2d2      	uxtb	r2, r2
 800f30e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	0a1a      	lsrs	r2, r3, #8
 800f314:	4b18      	ldr	r3, [pc, #96]	@ (800f378 <nand_write_page_async+0x148>)
 800f316:	b2d2      	uxtb	r2, r2
 800f318:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	0c1a      	lsrs	r2, r3, #16
 800f31e:	4b16      	ldr	r3, [pc, #88]	@ (800f378 <nand_write_page_async+0x148>)
 800f320:	b2d2      	uxtb	r2, r2
 800f322:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	0e1a      	lsrs	r2, r3, #24
 800f328:	4b13      	ldr	r3, [pc, #76]	@ (800f378 <nand_write_page_async+0x148>)
 800f32a:	b2d2      	uxtb	r2, r2
 800f32c:	701a      	strb	r2, [r3, #0]
        break;
 800f32e:	e000      	b.n	800f332 <nand_write_page_async+0x102>
    default:
        break;
 800f330:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 800f332:	2300      	movs	r3, #0
 800f334:	617b      	str	r3, [r7, #20]
 800f336:	e009      	b.n	800f34c <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	4413      	add	r3, r2
 800f33e:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	3301      	adds	r3, #1
 800f34a:	617b      	str	r3, [r7, #20]
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	429a      	cmp	r2, r3
 800f352:	d3f1      	bcc.n	800f338 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 800f354:	4b07      	ldr	r3, [pc, #28]	@ (800f374 <nand_write_page_async+0x144>)
 800f356:	7b9b      	ldrb	r3, [r3, #14]
 800f358:	2bff      	cmp	r3, #255	@ 0xff
 800f35a:	d003      	beq.n	800f364 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 800f35c:	4b04      	ldr	r3, [pc, #16]	@ (800f370 <nand_write_page_async+0x140>)
 800f35e:	4a05      	ldr	r2, [pc, #20]	@ (800f374 <nand_write_page_async+0x144>)
 800f360:	7b92      	ldrb	r2, [r2, #14]
 800f362:	701a      	strb	r2, [r3, #0]
}
 800f364:	bf00      	nop
 800f366:	371c      	adds	r7, #28
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	70010000 	.word	0x70010000
 800f374:	20002f24 	.word	0x20002f24
 800f378:	70020000 	.word	0x70020000

0800f37c <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
 800f388:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 800f38a:	4b55      	ldr	r3, [pc, #340]	@ (800f4e0 <nand_read_data+0x164>)
 800f38c:	4a55      	ldr	r2, [pc, #340]	@ (800f4e4 <nand_read_data+0x168>)
 800f38e:	7a12      	ldrb	r2, [r2, #8]
 800f390:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 800f392:	4b54      	ldr	r3, [pc, #336]	@ (800f4e4 <nand_read_data+0x168>)
 800f394:	79db      	ldrb	r3, [r3, #7]
 800f396:	3b01      	subs	r3, #1
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d83c      	bhi.n	800f416 <nand_read_data+0x9a>
 800f39c:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a4 <nand_read_data+0x28>)
 800f39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a2:	bf00      	nop
 800f3a4:	0800f3b5 	.word	0x0800f3b5
 800f3a8:	0800f3bf 	.word	0x0800f3bf
 800f3ac:	0800f3d3 	.word	0x0800f3d3
 800f3b0:	0800f3f1 	.word	0x0800f3f1
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800f3b4:	4b4c      	ldr	r3, [pc, #304]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	b2d2      	uxtb	r2, r2
 800f3ba:	701a      	strb	r2, [r3, #0]
        break;
 800f3bc:	e02c      	b.n	800f418 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800f3be:	4b4a      	ldr	r3, [pc, #296]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	b2d2      	uxtb	r2, r2
 800f3c4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	0a1a      	lsrs	r2, r3, #8
 800f3ca:	4b47      	ldr	r3, [pc, #284]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	701a      	strb	r2, [r3, #0]
        break;
 800f3d0:	e022      	b.n	800f418 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800f3d2:	4b45      	ldr	r3, [pc, #276]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	b2d2      	uxtb	r2, r2
 800f3d8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	0a1a      	lsrs	r2, r3, #8
 800f3de:	4b42      	ldr	r3, [pc, #264]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	0c1a      	lsrs	r2, r3, #16
 800f3e8:	4b3f      	ldr	r3, [pc, #252]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3ea:	b2d2      	uxtb	r2, r2
 800f3ec:	701a      	strb	r2, [r3, #0]
        break;
 800f3ee:	e013      	b.n	800f418 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 800f3f0:	4b3d      	ldr	r3, [pc, #244]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	b2d2      	uxtb	r2, r2
 800f3f6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	0a1a      	lsrs	r2, r3, #8
 800f3fc:	4b3a      	ldr	r3, [pc, #232]	@ (800f4e8 <nand_read_data+0x16c>)
 800f3fe:	b2d2      	uxtb	r2, r2
 800f400:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	0c1a      	lsrs	r2, r3, #16
 800f406:	4b38      	ldr	r3, [pc, #224]	@ (800f4e8 <nand_read_data+0x16c>)
 800f408:	b2d2      	uxtb	r2, r2
 800f40a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	0e1a      	lsrs	r2, r3, #24
 800f410:	4b35      	ldr	r3, [pc, #212]	@ (800f4e8 <nand_read_data+0x16c>)
 800f412:	b2d2      	uxtb	r2, r2
 800f414:	701a      	strb	r2, [r3, #0]
    default:
        break;
 800f416:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 800f418:	4b32      	ldr	r3, [pc, #200]	@ (800f4e4 <nand_read_data+0x168>)
 800f41a:	799b      	ldrb	r3, [r3, #6]
 800f41c:	3b01      	subs	r3, #1
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d83c      	bhi.n	800f49c <nand_read_data+0x120>
 800f422:	a201      	add	r2, pc, #4	@ (adr r2, 800f428 <nand_read_data+0xac>)
 800f424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f428:	0800f439 	.word	0x0800f439
 800f42c:	0800f443 	.word	0x0800f443
 800f430:	0800f457 	.word	0x0800f457
 800f434:	0800f475 	.word	0x0800f475
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f438:	4b2b      	ldr	r3, [pc, #172]	@ (800f4e8 <nand_read_data+0x16c>)
 800f43a:	68ba      	ldr	r2, [r7, #8]
 800f43c:	b2d2      	uxtb	r2, r2
 800f43e:	701a      	strb	r2, [r3, #0]
        break;
 800f440:	e02d      	b.n	800f49e <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f442:	4b29      	ldr	r3, [pc, #164]	@ (800f4e8 <nand_read_data+0x16c>)
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	b2d2      	uxtb	r2, r2
 800f448:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	0a1a      	lsrs	r2, r3, #8
 800f44e:	4b26      	ldr	r3, [pc, #152]	@ (800f4e8 <nand_read_data+0x16c>)
 800f450:	b2d2      	uxtb	r2, r2
 800f452:	701a      	strb	r2, [r3, #0]
        break;
 800f454:	e023      	b.n	800f49e <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f456:	4b24      	ldr	r3, [pc, #144]	@ (800f4e8 <nand_read_data+0x16c>)
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	0a1a      	lsrs	r2, r3, #8
 800f462:	4b21      	ldr	r3, [pc, #132]	@ (800f4e8 <nand_read_data+0x16c>)
 800f464:	b2d2      	uxtb	r2, r2
 800f466:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	0c1a      	lsrs	r2, r3, #16
 800f46c:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e8 <nand_read_data+0x16c>)
 800f46e:	b2d2      	uxtb	r2, r2
 800f470:	701a      	strb	r2, [r3, #0]
        break;
 800f472:	e014      	b.n	800f49e <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 800f474:	4b1c      	ldr	r3, [pc, #112]	@ (800f4e8 <nand_read_data+0x16c>)
 800f476:	68ba      	ldr	r2, [r7, #8]
 800f478:	b2d2      	uxtb	r2, r2
 800f47a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	0a1a      	lsrs	r2, r3, #8
 800f480:	4b19      	ldr	r3, [pc, #100]	@ (800f4e8 <nand_read_data+0x16c>)
 800f482:	b2d2      	uxtb	r2, r2
 800f484:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	0c1a      	lsrs	r2, r3, #16
 800f48a:	4b17      	ldr	r3, [pc, #92]	@ (800f4e8 <nand_read_data+0x16c>)
 800f48c:	b2d2      	uxtb	r2, r2
 800f48e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	0e1a      	lsrs	r2, r3, #24
 800f494:	4b14      	ldr	r3, [pc, #80]	@ (800f4e8 <nand_read_data+0x16c>)
 800f496:	b2d2      	uxtb	r2, r2
 800f498:	701a      	strb	r2, [r3, #0]
        break;
 800f49a:	e000      	b.n	800f49e <nand_read_data+0x122>
    default:
        break;
 800f49c:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 800f49e:	4b11      	ldr	r3, [pc, #68]	@ (800f4e4 <nand_read_data+0x168>)
 800f4a0:	7a5b      	ldrb	r3, [r3, #9]
 800f4a2:	2bff      	cmp	r3, #255	@ 0xff
 800f4a4:	d003      	beq.n	800f4ae <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 800f4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e0 <nand_read_data+0x164>)
 800f4a8:	4a0e      	ldr	r2, [pc, #56]	@ (800f4e4 <nand_read_data+0x168>)
 800f4aa:	7a52      	ldrb	r2, [r2, #9]
 800f4ac:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	617b      	str	r3, [r7, #20]
 800f4b2:	e00a      	b.n	800f4ca <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 800f4b4:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	4413      	add	r3, r2
 800f4be:	780a      	ldrb	r2, [r1, #0]
 800f4c0:	b2d2      	uxtb	r2, r2
 800f4c2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	617b      	str	r3, [r7, #20]
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d3f0      	bcc.n	800f4b4 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 800f4d2:	f7ff fe4f 	bl	800f174 <nand_get_status>
 800f4d6:	4603      	mov	r3, r0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	70010000 	.word	0x70010000
 800f4e4:	20002f24 	.word	0x20002f24
 800f4e8:	70020000 	.word	0x70020000

0800f4ec <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	68b9      	ldr	r1, [r7, #8]
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f7ff ff3c 	bl	800f37c <nand_read_data>
 800f504:	4603      	mov	r3, r0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
	...

0800f510 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	607a      	str	r2, [r7, #4]
 800f51c:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 800f51e:	4b54      	ldr	r3, [pc, #336]	@ (800f670 <nand_read_spare_data+0x160>)
 800f520:	7a9b      	ldrb	r3, [r3, #10]
 800f522:	2bff      	cmp	r3, #255	@ 0xff
 800f524:	d101      	bne.n	800f52a <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 800f526:	2304      	movs	r3, #4
 800f528:	e09e      	b.n	800f668 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 800f52a:	4b52      	ldr	r3, [pc, #328]	@ (800f674 <nand_read_spare_data+0x164>)
 800f52c:	4a50      	ldr	r2, [pc, #320]	@ (800f670 <nand_read_spare_data+0x160>)
 800f52e:	7a92      	ldrb	r2, [r2, #10]
 800f530:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 800f532:	4b4f      	ldr	r3, [pc, #316]	@ (800f670 <nand_read_spare_data+0x160>)
 800f534:	79db      	ldrb	r3, [r3, #7]
 800f536:	3b01      	subs	r3, #1
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d83c      	bhi.n	800f5b6 <nand_read_spare_data+0xa6>
 800f53c:	a201      	add	r2, pc, #4	@ (adr r2, 800f544 <nand_read_spare_data+0x34>)
 800f53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f542:	bf00      	nop
 800f544:	0800f555 	.word	0x0800f555
 800f548:	0800f55f 	.word	0x0800f55f
 800f54c:	0800f573 	.word	0x0800f573
 800f550:	0800f591 	.word	0x0800f591
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 800f554:	4b48      	ldr	r3, [pc, #288]	@ (800f678 <nand_read_spare_data+0x168>)
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	b2d2      	uxtb	r2, r2
 800f55a:	701a      	strb	r2, [r3, #0]
        break;
 800f55c:	e02c      	b.n	800f5b8 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 800f55e:	4b46      	ldr	r3, [pc, #280]	@ (800f678 <nand_read_spare_data+0x168>)
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	b2d2      	uxtb	r2, r2
 800f564:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	0a1a      	lsrs	r2, r3, #8
 800f56a:	4b43      	ldr	r3, [pc, #268]	@ (800f678 <nand_read_spare_data+0x168>)
 800f56c:	b2d2      	uxtb	r2, r2
 800f56e:	701a      	strb	r2, [r3, #0]
        break;
 800f570:	e022      	b.n	800f5b8 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 800f572:	4b41      	ldr	r3, [pc, #260]	@ (800f678 <nand_read_spare_data+0x168>)
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	0a1a      	lsrs	r2, r3, #8
 800f57e:	4b3e      	ldr	r3, [pc, #248]	@ (800f678 <nand_read_spare_data+0x168>)
 800f580:	b2d2      	uxtb	r2, r2
 800f582:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	0c1a      	lsrs	r2, r3, #16
 800f588:	4b3b      	ldr	r3, [pc, #236]	@ (800f678 <nand_read_spare_data+0x168>)
 800f58a:	b2d2      	uxtb	r2, r2
 800f58c:	701a      	strb	r2, [r3, #0]
        break;
 800f58e:	e013      	b.n	800f5b8 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 800f590:	4b39      	ldr	r3, [pc, #228]	@ (800f678 <nand_read_spare_data+0x168>)
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	b2d2      	uxtb	r2, r2
 800f596:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	0a1a      	lsrs	r2, r3, #8
 800f59c:	4b36      	ldr	r3, [pc, #216]	@ (800f678 <nand_read_spare_data+0x168>)
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	0c1a      	lsrs	r2, r3, #16
 800f5a6:	4b34      	ldr	r3, [pc, #208]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5a8:	b2d2      	uxtb	r2, r2
 800f5aa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	0e1a      	lsrs	r2, r3, #24
 800f5b0:	4b31      	ldr	r3, [pc, #196]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5b2:	b2d2      	uxtb	r2, r2
 800f5b4:	701a      	strb	r2, [r3, #0]
    default:
        break;
 800f5b6:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 800f5b8:	4b2d      	ldr	r3, [pc, #180]	@ (800f670 <nand_read_spare_data+0x160>)
 800f5ba:	799b      	ldrb	r3, [r3, #6]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	2b03      	cmp	r3, #3
 800f5c0:	d83c      	bhi.n	800f63c <nand_read_spare_data+0x12c>
 800f5c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f5c8 <nand_read_spare_data+0xb8>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5d9 	.word	0x0800f5d9
 800f5cc:	0800f5e3 	.word	0x0800f5e3
 800f5d0:	0800f5f7 	.word	0x0800f5f7
 800f5d4:	0800f615 	.word	0x0800f615
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f5d8:	4b27      	ldr	r3, [pc, #156]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	b2d2      	uxtb	r2, r2
 800f5de:	701a      	strb	r2, [r3, #0]
        break;
 800f5e0:	e02d      	b.n	800f63e <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f5e2:	4b25      	ldr	r3, [pc, #148]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	b2d2      	uxtb	r2, r2
 800f5e8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	0a1a      	lsrs	r2, r3, #8
 800f5ee:	4b22      	ldr	r3, [pc, #136]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5f0:	b2d2      	uxtb	r2, r2
 800f5f2:	701a      	strb	r2, [r3, #0]
        break;
 800f5f4:	e023      	b.n	800f63e <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f5f6:	4b20      	ldr	r3, [pc, #128]	@ (800f678 <nand_read_spare_data+0x168>)
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	b2d2      	uxtb	r2, r2
 800f5fc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	0a1a      	lsrs	r2, r3, #8
 800f602:	4b1d      	ldr	r3, [pc, #116]	@ (800f678 <nand_read_spare_data+0x168>)
 800f604:	b2d2      	uxtb	r2, r2
 800f606:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	0c1a      	lsrs	r2, r3, #16
 800f60c:	4b1a      	ldr	r3, [pc, #104]	@ (800f678 <nand_read_spare_data+0x168>)
 800f60e:	b2d2      	uxtb	r2, r2
 800f610:	701a      	strb	r2, [r3, #0]
        break;
 800f612:	e014      	b.n	800f63e <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f614:	4b18      	ldr	r3, [pc, #96]	@ (800f678 <nand_read_spare_data+0x168>)
 800f616:	68ba      	ldr	r2, [r7, #8]
 800f618:	b2d2      	uxtb	r2, r2
 800f61a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	0a1a      	lsrs	r2, r3, #8
 800f620:	4b15      	ldr	r3, [pc, #84]	@ (800f678 <nand_read_spare_data+0x168>)
 800f622:	b2d2      	uxtb	r2, r2
 800f624:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	0c1a      	lsrs	r2, r3, #16
 800f62a:	4b13      	ldr	r3, [pc, #76]	@ (800f678 <nand_read_spare_data+0x168>)
 800f62c:	b2d2      	uxtb	r2, r2
 800f62e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	0e1a      	lsrs	r2, r3, #24
 800f634:	4b10      	ldr	r3, [pc, #64]	@ (800f678 <nand_read_spare_data+0x168>)
 800f636:	b2d2      	uxtb	r2, r2
 800f638:	701a      	strb	r2, [r3, #0]
        break;
 800f63a:	e000      	b.n	800f63e <nand_read_spare_data+0x12e>
    default:
        break;
 800f63c:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 800f63e:	2300      	movs	r3, #0
 800f640:	617b      	str	r3, [r7, #20]
 800f642:	e00a      	b.n	800f65a <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 800f644:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	4413      	add	r3, r2
 800f64e:	780a      	ldrb	r2, [r1, #0]
 800f650:	b2d2      	uxtb	r2, r2
 800f652:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	3301      	adds	r3, #1
 800f658:	617b      	str	r3, [r7, #20]
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d3f0      	bcc.n	800f644 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 800f662:	f7ff fd87 	bl	800f174 <nand_get_status>
 800f666:	4603      	mov	r3, r0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	20002f24 	.word	0x20002f24
 800f674:	70010000 	.word	0x70010000
 800f678:	70020000 	.word	0x70020000

0800f67c <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 800f684:	4b2a      	ldr	r3, [pc, #168]	@ (800f730 <nand_erase_block+0xb4>)
 800f686:	4a2b      	ldr	r2, [pc, #172]	@ (800f734 <nand_erase_block+0xb8>)
 800f688:	7bd2      	ldrb	r2, [r2, #15]
 800f68a:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 800f68c:	4b29      	ldr	r3, [pc, #164]	@ (800f734 <nand_erase_block+0xb8>)
 800f68e:	799b      	ldrb	r3, [r3, #6]
 800f690:	3b01      	subs	r3, #1
 800f692:	2b03      	cmp	r3, #3
 800f694:	d83c      	bhi.n	800f710 <nand_erase_block+0x94>
 800f696:	a201      	add	r2, pc, #4	@ (adr r2, 800f69c <nand_erase_block+0x20>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f6ad 	.word	0x0800f6ad
 800f6a0:	0800f6b7 	.word	0x0800f6b7
 800f6a4:	0800f6cb 	.word	0x0800f6cb
 800f6a8:	0800f6e9 	.word	0x0800f6e9
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f6ac:	4b22      	ldr	r3, [pc, #136]	@ (800f738 <nand_erase_block+0xbc>)
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	b2d2      	uxtb	r2, r2
 800f6b2:	701a      	strb	r2, [r3, #0]
        break;
 800f6b4:	e02d      	b.n	800f712 <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f6b6:	4b20      	ldr	r3, [pc, #128]	@ (800f738 <nand_erase_block+0xbc>)
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	b2d2      	uxtb	r2, r2
 800f6bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	0a1a      	lsrs	r2, r3, #8
 800f6c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f738 <nand_erase_block+0xbc>)
 800f6c4:	b2d2      	uxtb	r2, r2
 800f6c6:	701a      	strb	r2, [r3, #0]
        break;
 800f6c8:	e023      	b.n	800f712 <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f738 <nand_erase_block+0xbc>)
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	b2d2      	uxtb	r2, r2
 800f6d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	0a1a      	lsrs	r2, r3, #8
 800f6d6:	4b18      	ldr	r3, [pc, #96]	@ (800f738 <nand_erase_block+0xbc>)
 800f6d8:	b2d2      	uxtb	r2, r2
 800f6da:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	0c1a      	lsrs	r2, r3, #16
 800f6e0:	4b15      	ldr	r3, [pc, #84]	@ (800f738 <nand_erase_block+0xbc>)
 800f6e2:	b2d2      	uxtb	r2, r2
 800f6e4:	701a      	strb	r2, [r3, #0]
        break;
 800f6e6:	e014      	b.n	800f712 <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 800f6e8:	4b13      	ldr	r3, [pc, #76]	@ (800f738 <nand_erase_block+0xbc>)
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	b2d2      	uxtb	r2, r2
 800f6ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	0a1a      	lsrs	r2, r3, #8
 800f6f4:	4b10      	ldr	r3, [pc, #64]	@ (800f738 <nand_erase_block+0xbc>)
 800f6f6:	b2d2      	uxtb	r2, r2
 800f6f8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	0c1a      	lsrs	r2, r3, #16
 800f6fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f738 <nand_erase_block+0xbc>)
 800f700:	b2d2      	uxtb	r2, r2
 800f702:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	0e1a      	lsrs	r2, r3, #24
 800f708:	4b0b      	ldr	r3, [pc, #44]	@ (800f738 <nand_erase_block+0xbc>)
 800f70a:	b2d2      	uxtb	r2, r2
 800f70c:	701a      	strb	r2, [r3, #0]
        break;
 800f70e:	e000      	b.n	800f712 <nand_erase_block+0x96>
    default:
        break;
 800f710:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 800f712:	4b08      	ldr	r3, [pc, #32]	@ (800f734 <nand_erase_block+0xb8>)
 800f714:	7c1b      	ldrb	r3, [r3, #16]
 800f716:	2bff      	cmp	r3, #255	@ 0xff
 800f718:	d003      	beq.n	800f722 <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 800f71a:	4b05      	ldr	r3, [pc, #20]	@ (800f730 <nand_erase_block+0xb4>)
 800f71c:	4a05      	ldr	r2, [pc, #20]	@ (800f734 <nand_erase_block+0xb8>)
 800f71e:	7c12      	ldrb	r2, [r2, #16]
 800f720:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 800f722:	f7ff fd27 	bl	800f174 <nand_get_status>
 800f726:	4603      	mov	r3, r0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	70010000 	.word	0x70010000
 800f734:	20002f24 	.word	0x20002f24
 800f738:	70020000 	.word	0x70020000

0800f73c <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
    return true;
 800f740:	2301      	movs	r3, #1
}
 800f742:	4618      	mov	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b085      	sub	sp, #20
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 800f756:	4b17      	ldr	r3, [pc, #92]	@ (800f7b4 <nand_enable_hw_ecc+0x68>)
 800f758:	7c9b      	ldrb	r3, [r3, #18]
 800f75a:	2bff      	cmp	r3, #255	@ 0xff
 800f75c:	d101      	bne.n	800f762 <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 800f75e:	2304      	movs	r3, #4
 800f760:	e021      	b.n	800f7a6 <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 800f762:	79fb      	ldrb	r3, [r7, #7]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <nand_enable_hw_ecc+0x22>
 800f768:	4b12      	ldr	r3, [pc, #72]	@ (800f7b4 <nand_enable_hw_ecc+0x68>)
 800f76a:	7d1b      	ldrb	r3, [r3, #20]
 800f76c:	e001      	b.n	800f772 <nand_enable_hw_ecc+0x26>
 800f76e:	4b11      	ldr	r3, [pc, #68]	@ (800f7b4 <nand_enable_hw_ecc+0x68>)
 800f770:	7d5b      	ldrb	r3, [r3, #21]
 800f772:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 800f774:	4b10      	ldr	r3, [pc, #64]	@ (800f7b8 <nand_enable_hw_ecc+0x6c>)
 800f776:	4a0f      	ldr	r2, [pc, #60]	@ (800f7b4 <nand_enable_hw_ecc+0x68>)
 800f778:	7c92      	ldrb	r2, [r2, #18]
 800f77a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 800f77c:	4b0f      	ldr	r3, [pc, #60]	@ (800f7bc <nand_enable_hw_ecc+0x70>)
 800f77e:	4a0d      	ldr	r2, [pc, #52]	@ (800f7b4 <nand_enable_hw_ecc+0x68>)
 800f780:	7cd2      	ldrb	r2, [r2, #19]
 800f782:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 800f784:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800f788:	7bfb      	ldrb	r3, [r7, #15]
 800f78a:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 800f78c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800f790:	2200      	movs	r2, #0
 800f792:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 800f794:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800f798:	2200      	movs	r2, #0
 800f79a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 800f79c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	701a      	strb	r2, [r3, #0]

    return 0;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	20002f24 	.word	0x20002f24
 800f7b8:	70010000 	.word	0x70010000
 800f7bc:	70020000 	.word	0x70020000

0800f7c0 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 800f7c4:	f7f6 f8cc 	bl	8005960 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 800f7c8:	f7f6 f8ea 	bl	80059a0 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 800f7cc:	f7f6 f8d8 	bl	8005980 <HAL_DBGMCU_EnableDBGStopMode>
}
 800f7d0:	bf00      	nop
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b088      	sub	sp, #32
 800f7d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7da:	f107 030c 	add.w	r3, r7, #12
 800f7de:	2200      	movs	r2, #0
 800f7e0:	601a      	str	r2, [r3, #0]
 800f7e2:	605a      	str	r2, [r3, #4]
 800f7e4:	609a      	str	r2, [r3, #8]
 800f7e6:	60da      	str	r2, [r3, #12]
 800f7e8:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	60bb      	str	r3, [r7, #8]
 800f7ee:	4b26      	ldr	r3, [pc, #152]	@ (800f888 <led_init+0xb4>)
 800f7f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7f2:	4a25      	ldr	r2, [pc, #148]	@ (800f888 <led_init+0xb4>)
 800f7f4:	f043 0310 	orr.w	r3, r3, #16
 800f7f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f7fa:	4b23      	ldr	r3, [pc, #140]	@ (800f888 <led_init+0xb4>)
 800f7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7fe:	f003 0310 	and.w	r3, r3, #16
 800f802:	60bb      	str	r3, [r7, #8]
 800f804:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 800f806:	2300      	movs	r3, #0
 800f808:	607b      	str	r3, [r7, #4]
 800f80a:	4b1f      	ldr	r3, [pc, #124]	@ (800f888 <led_init+0xb4>)
 800f80c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f80e:	4a1e      	ldr	r2, [pc, #120]	@ (800f888 <led_init+0xb4>)
 800f810:	f043 0304 	orr.w	r3, r3, #4
 800f814:	6313      	str	r3, [r2, #48]	@ 0x30
 800f816:	4b1c      	ldr	r3, [pc, #112]	@ (800f888 <led_init+0xb4>)
 800f818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f81a:	f003 0304 	and.w	r3, r3, #4
 800f81e:	607b      	str	r3, [r7, #4]
 800f820:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800f822:	2201      	movs	r2, #1
 800f824:	2140      	movs	r1, #64	@ 0x40
 800f826:	4819      	ldr	r0, [pc, #100]	@ (800f88c <led_init+0xb8>)
 800f828:	f7f7 f810 	bl	800684c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 800f82c:	2201      	movs	r2, #1
 800f82e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800f832:	4817      	ldr	r0, [pc, #92]	@ (800f890 <led_init+0xbc>)
 800f834:	f7f7 f80a 	bl	800684c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 800f838:	2340      	movs	r3, #64	@ 0x40
 800f83a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f83c:	2301      	movs	r3, #1
 800f83e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f840:	2300      	movs	r3, #0
 800f842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f844:	2300      	movs	r3, #0
 800f846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800f848:	f107 030c 	add.w	r3, r7, #12
 800f84c:	4619      	mov	r1, r3
 800f84e:	480f      	ldr	r0, [pc, #60]	@ (800f88c <led_init+0xb8>)
 800f850:	f7f6 fd64 	bl	800631c <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800f854:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800f858:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f85a:	2301      	movs	r3, #1
 800f85c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f862:	2300      	movs	r3, #0
 800f864:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f866:	f107 030c 	add.w	r3, r7, #12
 800f86a:	4619      	mov	r1, r3
 800f86c:	4808      	ldr	r0, [pc, #32]	@ (800f890 <led_init+0xbc>)
 800f86e:	f7f6 fd55 	bl	800631c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 800f872:	2200      	movs	r2, #0
 800f874:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800f878:	4805      	ldr	r0, [pc, #20]	@ (800f890 <led_init+0xbc>)
 800f87a:	f7f6 ffe7 	bl	800684c <HAL_GPIO_WritePin>
}
 800f87e:	bf00      	nop
 800f880:	3720      	adds	r7, #32
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	40023800 	.word	0x40023800
 800f88c:	40021000 	.word	0x40021000
 800f890:	40020800 	.word	0x40020800

0800f894 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	460b      	mov	r3, r1
 800f89e:	807b      	strh	r3, [r7, #2]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	707b      	strb	r3, [r7, #1]
    if (on)
 800f8a4:	787b      	ldrb	r3, [r7, #1]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d006      	beq.n	800f8b8 <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 800f8aa:	887b      	ldrh	r3, [r7, #2]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7f6 ffcb 	bl	800684c <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 800f8b6:	e005      	b.n	800f8c4 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 800f8b8:	887b      	ldrh	r3, [r7, #2]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7f6 ffc4 	bl	800684c <HAL_GPIO_WritePin>
}
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <led_wr_set>:

void led_wr_set(bool on)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 800f8d6:	79fb      	ldrb	r3, [r7, #7]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f8de:	4803      	ldr	r0, [pc, #12]	@ (800f8ec <led_wr_set+0x20>)
 800f8e0:	f7ff ffd8 	bl	800f894 <led_set>
}
 800f8e4:	bf00      	nop
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	40020800 	.word	0x40020800

0800f8f0 <led_rd_set>:

void led_rd_set(bool on)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 800f8fa:	79fb      	ldrb	r3, [r7, #7]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f902:	4803      	ldr	r0, [pc, #12]	@ (800f910 <led_rd_set+0x20>)
 800f904:	f7ff ffc6 	bl	800f894 <led_set>
}
 800f908:	bf00      	nop
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	40020800 	.word	0x40020800

0800f914 <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 800f914:	b580      	push	{r7, lr}
 800f916:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 800f918:	2250      	movs	r2, #80	@ 0x50
 800f91a:	2100      	movs	r1, #0
 800f91c:	4803      	ldr	r0, [pc, #12]	@ (800f92c <nand_bad_block_table_init+0x18>)
 800f91e:	f003 fcf2 	bl	8013306 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 800f922:	4b03      	ldr	r3, [pc, #12]	@ (800f930 <nand_bad_block_table_init+0x1c>)
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
}
 800f928:	bf00      	nop
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	20002f44 	.word	0x20002f44
 800f930:	20002f40 	.word	0x20002f40

0800f934 <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 800f93c:	4b0b      	ldr	r3, [pc, #44]	@ (800f96c <nand_bad_block_table_add+0x38>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b14      	cmp	r3, #20
 800f942:	d102      	bne.n	800f94a <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 800f944:	f04f 33ff 	mov.w	r3, #4294967295
 800f948:	e009      	b.n	800f95e <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 800f94a:	4b08      	ldr	r3, [pc, #32]	@ (800f96c <nand_bad_block_table_add+0x38>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	4906      	ldr	r1, [pc, #24]	@ (800f96c <nand_bad_block_table_add+0x38>)
 800f952:	600a      	str	r2, [r1, #0]
 800f954:	4906      	ldr	r1, [pc, #24]	@ (800f970 <nand_bad_block_table_add+0x3c>)
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	20002f40 	.word	0x20002f40
 800f970:	20002f44 	.word	0x20002f44

0800f974 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 800f97c:	2300      	movs	r3, #0
 800f97e:	60fb      	str	r3, [r7, #12]
 800f980:	e00b      	b.n	800f99a <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 800f982:	4a0c      	ldr	r2, [pc, #48]	@ (800f9b4 <nand_bad_block_table_lookup+0x40>)
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d101      	bne.n	800f994 <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 800f990:	2301      	movs	r3, #1
 800f992:	e008      	b.n	800f9a6 <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	3301      	adds	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	4b07      	ldr	r3, [pc, #28]	@ (800f9b8 <nand_bad_block_table_lookup+0x44>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d3ee      	bcc.n	800f982 <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3714      	adds	r7, #20
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	20002f44 	.word	0x20002f44
 800f9b8:	20002f40 	.word	0x20002f40

0800f9bc <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 800f9c4:	4b08      	ldr	r3, [pc, #32]	@ (800f9e8 <nand_bad_block_table_iter_alloc+0x2c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d101      	bne.n	800f9d0 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	e004      	b.n	800f9da <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 800f9d0:	4b06      	ldr	r3, [pc, #24]	@ (800f9ec <nand_bad_block_table_iter_alloc+0x30>)
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 800f9d8:	4b04      	ldr	r3, [pc, #16]	@ (800f9ec <nand_bad_block_table_iter_alloc+0x30>)
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	370c      	adds	r7, #12
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	20002f40 	.word	0x20002f40
 800f9ec:	20002f44 	.word	0x20002f44

0800f9f0 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d101      	bne.n	800fa08 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 800fa04:	2300      	movs	r3, #0
 800fa06:	e012      	b.n	800fa2e <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	4a0a      	ldr	r2, [pc, #40]	@ (800fa3c <nand_bad_block_table_iter_next+0x4c>)
 800fa12:	1a9b      	subs	r3, r3, r2
 800fa14:	109b      	asrs	r3, r3, #2
 800fa16:	461a      	mov	r2, r3
 800fa18:	4b09      	ldr	r3, [pc, #36]	@ (800fa40 <nand_bad_block_table_iter_next+0x50>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d301      	bcc.n	800fa24 <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 800fa20:	2300      	movs	r3, #0
 800fa22:	e004      	b.n	800fa2e <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 800fa2c:	68fb      	ldr	r3, [r7, #12]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr
 800fa3a:	bf00      	nop
 800fa3c:	20002f44 	.word	0x20002f44
 800fa40:	20002f40 	.word	0x20002f40

0800fa44 <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	703b      	strb	r3, [r7, #0]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 800fa52:	2302      	movs	r3, #2
 800fa54:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 800fa56:	4b08      	ldr	r3, [pc, #32]	@ (800fa78 <np_send_ok_status+0x34>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d006      	beq.n	800fa6c <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 800fa5e:	4b06      	ldr	r3, [pc, #24]	@ (800fa78 <np_send_ok_status+0x34>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	463a      	mov	r2, r7
 800fa66:	6879      	ldr	r1, [r7, #4]
 800fa68:	4610      	mov	r0, r2
 800fa6a:	4798      	blx	r3

    return 0;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20002f94 	.word	0x20002f94

0800fa7c <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b086      	sub	sp, #24
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	4603      	mov	r3, r0
 800fa84:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 800fa86:	4b0d      	ldr	r3, [pc, #52]	@ (800fabc <np_send_error+0x40>)
 800fa88:	881b      	ldrh	r3, [r3, #0]
 800fa8a:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 800fa8c:	8a3b      	ldrh	r3, [r7, #16]
 800fa8e:	81bb      	strh	r3, [r7, #12]
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 800fa94:	2303      	movs	r3, #3
 800fa96:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 800fa98:	4b09      	ldr	r3, [pc, #36]	@ (800fac0 <np_send_error+0x44>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 800faa0:	4b07      	ldr	r3, [pc, #28]	@ (800fac0 <np_send_error+0x44>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f107 020c 	add.w	r2, r7, #12
 800faaa:	6979      	ldr	r1, [r7, #20]
 800faac:	4610      	mov	r0, r2
 800faae:	4798      	blx	r3

    return 0;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3718      	adds	r7, #24
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	08017eac 	.word	0x08017eac
 800fac0:	20002f94 	.word	0x20002f94

0800fac4 <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08a      	sub	sp, #40	@ 0x28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 800fad2:	78fb      	ldrb	r3, [r7, #3]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d001      	beq.n	800fadc <np_send_bad_block_info+0x18>
 800fad8:	2304      	movs	r3, #4
 800fada:	e000      	b.n	800fade <np_send_bad_block_info+0x1a>
 800fadc:	2302      	movs	r3, #2
 800fade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 800fae2:	2301      	movs	r3, #1
 800fae4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800fae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800faec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 800faf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800faf2:	82bb      	strh	r3, [r7, #20]
 800faf4:	f107 0318 	add.w	r3, r7, #24
 800faf8:	3b02      	subs	r3, #2
 800fafa:	68ba      	ldr	r2, [r7, #8]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	605a      	str	r2, [r3, #4]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 800fb08:	4b09      	ldr	r3, [pc, #36]	@ (800fb30 <np_send_bad_block_info+0x6c>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f107 0214 	add.w	r2, r7, #20
 800fb12:	210e      	movs	r1, #14
 800fb14:	4610      	mov	r0, r2
 800fb16:	4798      	blx	r3
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <np_send_bad_block_info+0x60>
        return -1;
 800fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb22:	e000      	b.n	800fb26 <np_send_bad_block_info+0x62>

    return 0;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3728      	adds	r7, #40	@ 0x28
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20002f94 	.word	0x20002f94

0800fb34 <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 800fb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb7c <np_send_progress+0x48>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 800fb44:	8abb      	ldrh	r3, [r7, #20]
 800fb46:	813b      	strh	r3, [r7, #8]
 800fb48:	f107 0308 	add.w	r3, r7, #8
 800fb4c:	3302      	adds	r3, #2
 800fb4e:	683a      	ldr	r2, [r7, #0]
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 800fb56:	4b0a      	ldr	r3, [pc, #40]	@ (800fb80 <np_send_progress+0x4c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f107 0208 	add.w	r2, r7, #8
 800fb60:	210a      	movs	r1, #10
 800fb62:	4610      	mov	r0, r2
 800fb64:	4798      	blx	r3
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <np_send_progress+0x3e>
        return -1;
 800fb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb70:	e000      	b.n	800fb74 <np_send_progress+0x40>

    return 0;
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3718      	adds	r7, #24
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	08017eb0 	.word	0x08017eb0
 800fb80:	20002f94 	.word	0x20002f94

0800fb84 <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 800fb84:	b5b0      	push	{r4, r5, r7, lr}
 800fb86:	b08a      	sub	sp, #40	@ 0x28
 800fb88:	af04      	add	r7, sp, #16
 800fb8a:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 800fb90:	481d      	ldr	r0, [pc, #116]	@ (800fc08 <_np_cmd_nand_read_id+0x84>)
 800fb92:	f003 fb6d 	bl	8013270 <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 800fb96:	2300      	movs	r3, #0
 800fb98:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	3b02      	subs	r3, #2
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fbaa:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4b16      	ldr	r3, [pc, #88]	@ (800fc0c <_np_cmd_nand_read_id+0x88>)
 800fbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	f107 020c 	add.w	r2, r7, #12
 800fbbc:	3202      	adds	r2, #2
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 800fbc2:	4b13      	ldr	r3, [pc, #76]	@ (800fc10 <_np_cmd_nand_read_id+0x8c>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d007      	beq.n	800fbda <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 800fbca:	4b11      	ldr	r3, [pc, #68]	@ (800fc10 <_np_cmd_nand_read_id+0x8c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f107 020c 	add.w	r2, r7, #12
 800fbd4:	6979      	ldr	r1, [r7, #20]
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 800fbda:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 800fbdc:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 800fbde:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 800fbe0:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 800fbe2:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 800fbe4:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 800fbe6:	7c7b      	ldrb	r3, [r7, #17]
 800fbe8:	7cba      	ldrb	r2, [r7, #18]
 800fbea:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 800fbec:	9102      	str	r1, [sp, #8]
 800fbee:	9201      	str	r2, [sp, #4]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	462b      	mov	r3, r5
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	4601      	mov	r1, r0
 800fbf8:	4806      	ldr	r0, [pc, #24]	@ (800fc14 <_np_cmd_nand_read_id+0x90>)
 800fbfa:	f003 fae1 	bl	80131c0 <printf>

    return 0;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3718      	adds	r7, #24
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bdb0      	pop	{r4, r5, r7, pc}
 800fc08:	08017eb4 	.word	0x08017eb4
 800fc0c:	2000013c 	.word	0x2000013c
 800fc10:	20002f94 	.word	0x20002f94
 800fc14:	08017ec8 	.word	0x08017ec8

0800fc18 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 800fc20:	2001      	movs	r0, #1
 800fc22:	f7ff fe65 	bl	800f8f0 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f7ff ffac 	bl	800fb84 <_np_cmd_nand_read_id>
 800fc2c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 800fc2e:	2000      	movs	r0, #0
 800fc30:	f7ff fe5e 	bl	800f8f0 <led_rd_set>

    return ret;
 800fc34:	68fb      	ldr	r3, [r7, #12]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
	...

0800fc40 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 800fc40:	b5b0      	push	{r4, r5, r7, lr}
 800fc42:	b08a      	sub	sp, #40	@ 0x28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fc54:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	fb02 f303 	mul.w	r3, r2, r3
 800fc5e:	2200      	movs	r2, #0
 800fc60:	461c      	mov	r4, r3
 800fc62:	4615      	mov	r5, r2
 800fc64:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fc6e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
        prog->chip_info.bb_mark_off];
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800fc78:	f892 223c 	ldrb.w	r2, [r2, #572]	@ 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3338      	adds	r3, #56	@ 0x38
 800fc80:	68fa      	ldr	r2, [r7, #12]
 800fc82:	4413      	add	r3, r2
 800fc84:	3304      	adds	r3, #4
 800fc86:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fc8e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800fc92:	461a      	mov	r2, r3
 800fc94:	4b35      	ldr	r3, [pc, #212]	@ (800fd6c <np_read_bad_block_info_from_page+0x12c>)
 800fc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc9a:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fca2:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 800fca6:	461a      	mov	r2, r3
 800fca8:	2301      	movs	r3, #1
 800fcaa:	6879      	ldr	r1, [r7, #4]
 800fcac:	6978      	ldr	r0, [r7, #20]
 800fcae:	47a0      	blx	r4
 800fcb0:	6278      	str	r0, [r7, #36]	@ 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d11a      	bne.n	800fcee <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fcbe:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4b29      	ldr	r3, [pc, #164]	@ (800fd6c <np_read_bad_block_info_from_page+0x12c>)
 800fcc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	f102 003c 	add.w	r0, r2, #60	@ 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 800fcd2:	68fa      	ldr	r2, [r7, #12]
 800fcd4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800fcd8:	f8d2 1228 	ldr.w	r1, [r2, #552]	@ 0x228
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800fce2:	f8d2 2238 	ldr.w	r2, [r2, #568]	@ 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 800fce6:	440a      	add	r2, r1
 800fce8:	6879      	ldr	r1, [r7, #4]
 800fcea:	4798      	blx	r3
 800fcec:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    switch (status)
 800fcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf0:	2b03      	cmp	r3, #3
 800fcf2:	d010      	beq.n	800fd16 <np_read_bad_block_info_from_page+0xd6>
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d815      	bhi.n	800fd26 <np_read_bad_block_info_from_page+0xe6>
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d018      	beq.n	800fd32 <np_read_bad_block_info_from_page+0xf2>
 800fd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd02:	2b02      	cmp	r3, #2
 800fd04:	d10f      	bne.n	800fd26 <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 800fd06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fd0a:	4819      	ldr	r0, [pc, #100]	@ (800fd70 <np_read_bad_block_info_from_page+0x130>)
 800fd0c:	f003 fa58 	bl	80131c0 <printf>
            addr);
        return NP_ERR_NAND_RD;
 800fd10:	f06f 0367 	mvn.w	r3, #103	@ 0x67
 800fd14:	e025      	b.n	800fd62 <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 800fd16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fd1a:	4816      	ldr	r0, [pc, #88]	@ (800fd74 <np_read_bad_block_info_from_page+0x134>)
 800fd1c:	f003 fa50 	bl	80131c0 <printf>
        return NP_ERR_NAND_RD;
 800fd20:	f06f 0367 	mvn.w	r3, #103	@ 0x67
 800fd24:	e01d      	b.n	800fd62 <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 800fd26:	4814      	ldr	r0, [pc, #80]	@ (800fd78 <np_read_bad_block_info_from_page+0x138>)
 800fd28:	f003 faa2 	bl	8013270 <puts>
        return NP_ERR_NAND_RD;
 800fd2c:	f06f 0367 	mvn.w	r3, #103	@ 0x67
 800fd30:	e017      	b.n	800fd62 <np_read_bad_block_info_from_page+0x122>
        break;
 800fd32:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fd3a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800fd44:	f892 223c 	ldrb.w	r2, [r2, #572]	@ 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 800fd48:	4413      	add	r3, r2
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 800fd52:	2bff      	cmp	r3, #255	@ 0xff
 800fd54:	bf14      	ite	ne
 800fd56:	2301      	movne	r3, #1
 800fd58:	2300      	moveq	r3, #0
 800fd5a:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	701a      	strb	r2, [r3, #0]

    return 0;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3728      	adds	r7, #40	@ 0x28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bdb0      	pop	{r4, r5, r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	2000013c 	.word	0x2000013c
 800fd70:	08017ef4 	.word	0x08017ef4
 800fd74:	08017f28 	.word	0x08017f28
 800fd78:	08017f50 	.word	0x08017f50

0800fd7c <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 800fd7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800fd80:	b088      	sub	sp, #32
 800fd82:	af00      	add	r7, sp, #0
 800fd84:	6078      	str	r0, [r7, #4]
 800fd86:	460b      	mov	r3, r1
 800fd88:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fd90:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800fd94:	461a      	mov	r2, r3
 800fd96:	4b40      	ldr	r3, [pc, #256]	@ (800fe98 <_np_cmd_read_bad_blocks+0x11c>)
 800fd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd9c:	6a1b      	ldr	r3, [r3, #32]
 800fd9e:	4798      	blx	r3
 800fda0:	4603      	mov	r3, r0
 800fda2:	f083 0301 	eor.w	r3, r3, #1
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d16a      	bne.n	800fe82 <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 800fdb2:	3330      	adds	r3, #48	@ 0x30
 800fdb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fdbe:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	4698      	mov	r8, r3
 800fdc6:	4691      	mov	r9, r2
 800fdc8:	4642      	mov	r2, r8
 800fdca:	464b      	mov	r3, r9
 800fdcc:	f7f4 feec 	bl	8004ba8 <__aeabi_uldivmod>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fdde:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fde8:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800fdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf0:	617b      	str	r3, [r7, #20]

    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */
    // 遍历所有块
    for (block = 0; block < block_num; block++)
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	61fb      	str	r3, [r7, #28]
 800fdf6:	e03f      	b.n	800fe78 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	fb02 f303 	mul.w	r3, r2, r3
 800fe00:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 800fe02:	78fb      	ldrb	r3, [r7, #3]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d007      	beq.n	800fe18 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	461c      	mov	r4, r3
 800fe0e:	4615      	mov	r5, r2
 800fe10:	4620      	mov	r0, r4
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7ff fe8e 	bl	800fb34 <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 800fe18:	f107 030b 	add.w	r3, r7, #11
 800fe1c:	693a      	ldr	r2, [r7, #16]
 800fe1e:	69f9      	ldr	r1, [r7, #28]
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff ff0d 	bl	800fc40 <np_read_bad_block_info_from_page>
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	e02c      	b.n	800fe8c <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 800fe32:	7afb      	ldrb	r3, [r7, #11]
 800fe34:	f083 0301 	eor.w	r3, r3, #1
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00d      	beq.n	800fe5a <_np_cmd_read_bad_blocks+0xde>
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	1c5a      	adds	r2, r3, #1
 800fe42:	f107 030b 	add.w	r3, r7, #11
 800fe46:	69f9      	ldr	r1, [r7, #28]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff fef9 	bl	800fc40 <np_read_bad_block_info_from_page>
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d001      	beq.n	800fe5a <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	e018      	b.n	800fe8c <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 800fe5a:	7afb      	ldrb	r3, [r7, #11]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d008      	beq.n	800fe72 <_np_cmd_read_bad_blocks+0xf6>
 800fe60:	6938      	ldr	r0, [r7, #16]
 800fe62:	f7ff fd67 	bl	800f934 <nand_bad_block_table_add>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 800fe6c:	f06f 0370 	mvn.w	r3, #112	@ 0x70
 800fe70:	e00c      	b.n	800fe8c <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 800fe72:	69fb      	ldr	r3, [r7, #28]
 800fe74:	3301      	adds	r3, #1
 800fe76:	61fb      	str	r3, [r7, #28]
 800fe78:	69fa      	ldr	r2, [r7, #28]
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d3bb      	bcc.n	800fdf8 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 800fe80:	e000      	b.n	800fe84 <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 800fe82:	bf00      	nop
    prog->bb_is_read = 1;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	635a      	str	r2, [r3, #52]	@ 0x34

    return 0;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3720      	adds	r7, #32
 800fe90:	46bd      	mov	sp, r7
 800fe92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800fe96:	bf00      	nop
 800fe98:	2000013c 	.word	0x2000013c

0800fe9c <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800feac:	f8d1 1228 	ldr.w	r1, [r1, #552]	@ 0x228
 800feb0:	6838      	ldr	r0, [r7, #0]
 800feb2:	fb00 f101 	mul.w	r1, r0, r1
 800feb6:	2000      	movs	r0, #0
 800feb8:	460a      	mov	r2, r1
 800feba:	4603      	mov	r3, r0
 800febc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
//    DEBUG_PRINT("NAND erase at 0x%" PRIx64 "!\r\n", addr);

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fec6:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 800feca:	461a      	mov	r2, r3
 800fecc:	4b1b      	ldr	r3, [pc, #108]	@ (800ff3c <np_nand_erase+0xa0>)
 800fece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	6838      	ldr	r0, [r7, #0]
 800fed6:	4798      	blx	r3
 800fed8:	60f8      	str	r0, [r7, #12]
    switch (status)
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2b03      	cmp	r3, #3
 800fede:	d018      	beq.n	800ff12 <np_nand_erase+0x76>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	d81b      	bhi.n	800ff1e <np_nand_erase+0x82>
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d01e      	beq.n	800ff2a <np_nand_erase+0x8e>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d115      	bne.n	800ff1e <np_nand_erase+0x82>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800fef8:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800fefc:	2300      	movs	r3, #0
 800fefe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ff02:	f7ff fddf 	bl	800fac4 <np_send_bad_block_info>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d010      	beq.n	800ff2e <np_nand_erase+0x92>
            return -1;
 800ff0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff10:	e00f      	b.n	800ff32 <np_nand_erase+0x96>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND erase timeout at 0x%" PRIx64 "!\r\n", addr);
 800ff12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ff16:	480a      	ldr	r0, [pc, #40]	@ (800ff40 <np_nand_erase+0xa4>)
 800ff18:	f003 f952 	bl	80131c0 <printf>
        break;
 800ff1c:	e008      	b.n	800ff30 <np_nand_erase+0x94>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 800ff1e:	4809      	ldr	r0, [pc, #36]	@ (800ff44 <np_nand_erase+0xa8>)
 800ff20:	f003 f9a6 	bl	8013270 <puts>
        return -1;
 800ff24:	f04f 33ff 	mov.w	r3, #4294967295
 800ff28:	e003      	b.n	800ff32 <np_nand_erase+0x96>
        break;
 800ff2a:	bf00      	nop
 800ff2c:	e000      	b.n	800ff30 <np_nand_erase+0x94>
        break;
 800ff2e:	bf00      	nop
    }

    return 0;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	2000013c 	.word	0x2000013c
 800ff40:	08017f6c 	.word	0x08017f6c
 800ff44:	08017f50 	.word	0x08017f50

0800ff48 <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 800ff48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff4c:	b0ac      	sub	sp, #176	@ 0xb0
 800ff4e:	af04      	add	r7, sp, #16
 800ff50:	6578      	str	r0, [r7, #84]	@ 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 800ff52:	2300      	movs	r3, #0
 800ff54:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 800ff58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	2b11      	cmp	r3, #17
 800ff5e:	d808      	bhi.n	800ff72 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("Wrong buffer length for erase command %u \r\n",
 800ff60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	4619      	mov	r1, r3
 800ff66:	48b0      	ldr	r0, [pc, #704]	@ (8010228 <_np_cmd_nand_erase+0x2e0>)
 800ff68:	f003 f92a 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 800ff6c:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800ff70:	e1c0      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 800ff72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	677b      	str	r3, [r7, #116]	@ 0x74
    total_len = len = erase_cmd->len;
 800ff78:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800ff7a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 800ff7e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800ff82:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 800ff86:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800ff8a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    addr = erase_cmd->addr;
 800ff8e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800ff90:	f8d1 2001 	ldr.w	r2, [r1, #1]
 800ff94:	f8d1 3005 	ldr.w	r3, [r1, #5]
 800ff98:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 800ff9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff9e:	7c5b      	ldrb	r3, [r3, #17]
 800ffa0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	bf14      	ite	ne
 800ffaa:	2301      	movne	r3, #1
 800ffac:	2300      	moveq	r3, #0
 800ffae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 800ffb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ffb4:	7c5b      	ldrb	r3, [r3, #17]
 800ffb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bf14      	ite	ne
 800ffc0:	2301      	movne	r3, #1
 800ffc2:	2300      	moveq	r3, #0
 800ffc4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    DEBUG_PRINT("\r\n Erase at 0x%" PRIx64
 800ffc8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800ffcc:	e9cd 2300 	strd	r2, r3, [sp]
 800ffd0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ffd4:	4895      	ldr	r0, [pc, #596]	@ (801022c <_np_cmd_nand_erase+0x2e4>)
 800ffd6:	f003 f8f3 	bl	80131c0 <printf>
    		" 0x%" PRIx64 " bytes command \r\n", addr,len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 800ffda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffdc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ffe0:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 800ffe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffe6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ffea:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 800ffee:	fbb2 f3f3 	udiv	r3, r2, r3
 800fff2:	663b      	str	r3, [r7, #96]	@ 0x60

    if (inc_spare)
 800fff4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d03f      	beq.n	801007c <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 800fffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fffe:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010002:	3330      	adds	r3, #48	@ 0x30
 8010004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801000a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801000e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010012:	2200      	movs	r2, #0
 8010014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010016:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801001c:	f7f4 fdc4 	bl	8004ba8 <__aeabi_uldivmod>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4613      	mov	r3, r2
 8010026:	65fb      	str	r3, [r7, #92]	@ 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8010028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801002a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801002e:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
 8010032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010034:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010038:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 801003c:	4413      	add	r3, r2
 801003e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        block_size = pages_in_block * page_size;
 8010042:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010048:	fb02 f303 	mul.w	r3, r2, r3
 801004c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        total_size = (uint64_t)pages * page_size;
 801004e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010050:	2200      	movs	r2, #0
 8010052:	469a      	mov	sl, r3
 8010054:	4693      	mov	fp, r2
 8010056:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801005a:	2200      	movs	r2, #0
 801005c:	4698      	mov	r8, r3
 801005e:	4691      	mov	r9, r2
 8010060:	fb08 f20b 	mul.w	r2, r8, fp
 8010064:	fb0a f309 	mul.w	r3, sl, r9
 8010068:	4413      	add	r3, r2
 801006a:	fbaa 4508 	umull	r4, r5, sl, r8
 801006e:	442b      	add	r3, r5
 8010070:	461d      	mov	r5, r3
 8010072:	e9c7 4522 	strd	r4, r5, [r7, #136]	@ 0x88
 8010076:	e9c7 4522 	strd	r4, r5, [r7, #136]	@ 0x88
 801007a:	e014      	b.n	80100a6 <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 801007c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801007e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010082:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010086:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        block_size = prog->chip_info.block_size;
 801008a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801008c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010090:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8010094:	67fb      	str	r3, [r7, #124]	@ 0x7c
        total_size = prog->chip_info.total_size;
 8010096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010098:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 801009c:	3330      	adds	r3, #48	@ 0x30
 801009e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80100a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d00d      	beq.n	80100ca <_np_cmd_nand_erase+0x182>
 80100ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d109      	bne.n	80100ca <_np_cmd_nand_erase+0x182>
 80100b6:	2100      	movs	r1, #0
 80100b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80100ba:	f7ff fe5f 	bl	800fd7c <_np_cmd_read_bad_blocks>
 80100be:	65b8      	str	r0, [r7, #88]	@ 0x58
 80100c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <_np_cmd_nand_erase+0x182>
    	false)))
    {
        return ret;
 80100c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100c8:	e114      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 80100ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80100cc:	2200      	movs	r2, #0
 80100ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80100d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80100d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80100d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80100da:	f7f4 fd65 	bl	8004ba8 <__aeabi_uldivmod>
 80100de:	4313      	orrs	r3, r2
 80100e0:	d009      	beq.n	80100f6 <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 80100e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80100e4:	9300      	str	r3, [sp, #0]
 80100e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80100ea:	4851      	ldr	r0, [pc, #324]	@ (8010230 <_np_cmd_nand_erase+0x2e8>)
 80100ec:	f003 f868 	bl	80131c0 <printf>
                " is not aligned to block size %u \r\n", addr, block_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80100f0:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80100f4:	e0fe      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 80100f6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80100fa:	4313      	orrs	r3, r2
 80100fc:	d105      	bne.n	801010a <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("Length is 0\r\n");
 80100fe:	484d      	ldr	r0, [pc, #308]	@ (8010234 <_np_cmd_nand_erase+0x2ec>)
 8010100:	f003 f8b6 	bl	8013270 <puts>
        return NP_ERR_LEN_INVALID;
 8010104:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8010108:	e0f4      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 801010a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801010c:	2200      	movs	r2, #0
 801010e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010110:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010112:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8010116:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801011a:	f7f4 fd45 	bl	8004ba8 <__aeabi_uldivmod>
 801011e:	4313      	orrs	r3, r2
 8010120:	d009      	beq.n	8010136 <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8010122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801012a:	4843      	ldr	r0, [pc, #268]	@ (8010238 <_np_cmd_nand_erase+0x2f0>)
 801012c:	f003 f848 	bl	80131c0 <printf>
                " is not aligned to block size %u \r\n", len, block_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8010130:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 8010134:	e0de      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 8010136:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801013a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 801013e:	1884      	adds	r4, r0, r2
 8010140:	633c      	str	r4, [r7, #48]	@ 0x30
 8010142:	eb41 0303 	adc.w	r3, r1, r3
 8010146:	637b      	str	r3, [r7, #52]	@ 0x34
 8010148:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 801014c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8010150:	4621      	mov	r1, r4
 8010152:	428a      	cmp	r2, r1
 8010154:	4629      	mov	r1, r5
 8010156:	418b      	sbcs	r3, r1
 8010158:	d20f      	bcs.n	801017a <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("Erase address exceded 0x%" PRIx64 "+0x%" PRIx64
 801015a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 801015e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010162:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010166:	e9cd 2300 	strd	r2, r3, [sp]
 801016a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 801016e:	4833      	ldr	r0, [pc, #204]	@ (801023c <_np_cmd_nand_erase+0x2f4>)
 8010170:	f003 f826 	bl	80131c0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8010174:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8010178:	e0bc      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 801017a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801017e:	2200      	movs	r2, #0
 8010180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801018c:	f7f4 fd0c 	bl	8004ba8 <__aeabi_uldivmod>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4613      	mov	r3, r2
 8010196:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    while (len)
 801019a:	e0a3      	b.n	80102e4 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 801019c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80101a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80101a4:	4290      	cmp	r0, r2
 80101a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80101aa:	d30b      	bcc.n	80101c4 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("Erase address 0x%" PRIx64
 80101ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80101b0:	e9cd 2300 	strd	r2, r3, [sp]
 80101b4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80101b8:	4821      	ldr	r0, [pc, #132]	@ (8010240 <_np_cmd_nand_erase+0x2f8>)
 80101ba:	f003 f801 	bl	80131c0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80101be:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80101c2:	e097      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 80101c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d01b      	beq.n	8010204 <_np_cmd_nand_erase+0x2bc>
 80101cc:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80101d0:	f7ff fbd0 	bl	800f974 <nand_bad_block_table_lookup>
 80101d4:	4603      	mov	r3, r0
 80101d6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80101da:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d010      	beq.n	8010204 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 80101e2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80101e6:	4817      	ldr	r0, [pc, #92]	@ (8010244 <_np_cmd_nand_erase+0x2fc>)
 80101e8:	f002 ffea 	bl	80131c0 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 80101ec:	2301      	movs	r3, #1
 80101ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80101f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80101f4:	f7ff fc66 	bl	800fac4 <np_send_bad_block_info>
 80101f8:	4603      	mov	r3, r0
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <_np_cmd_nand_erase+0x2bc>
                return -1;
 80101fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010202:	e077      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8010204:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8010208:	f083 0301 	eor.w	r3, r3, #1
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01a      	beq.n	8010248 <_np_cmd_nand_erase+0x300>
 8010212:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8010216:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010218:	f7ff fe40 	bl	800fe9c <np_nand_erase>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d012      	beq.n	8010248 <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 8010222:	f06f 0368 	mvn.w	r3, #104	@ 0x68
 8010226:	e065      	b.n	80102f4 <_np_cmd_nand_erase+0x3ac>
 8010228:	08017f94 	.word	0x08017f94
 801022c:	08017fc8 	.word	0x08017fc8
 8010230:	08017ff4 	.word	0x08017ff4
 8010234:	08018030 	.word	0x08018030
 8010238:	08018044 	.word	0x08018044
 801023c:	0801807c 	.word	0x0801807c
 8010240:	080180c8 	.word	0x080180c8
 8010244:	08018104 	.word	0x08018104

        addr += block_size;
 8010248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801024a:	2200      	movs	r2, #0
 801024c:	623b      	str	r3, [r7, #32]
 801024e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010250:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8010254:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8010258:	4621      	mov	r1, r4
 801025a:	1851      	adds	r1, r2, r1
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	4629      	mov	r1, r5
 8010260:	414b      	adcs	r3, r1
 8010262:	60fb      	str	r3, [r7, #12]
 8010264:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010268:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
        page += pages_in_block;
 801026c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010272:	4413      	add	r3, r2
 8010274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8010278:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 801027c:	f083 0301 	eor.w	r3, r3, #1
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10e      	bne.n	80102a4 <_np_cmd_nand_erase+0x35c>
 8010286:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 801028a:	2b00      	cmp	r3, #0
 801028c:	d01d      	beq.n	80102ca <_np_cmd_nand_erase+0x382>
 801028e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8010290:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8010294:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8010298:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 801029c:	4299      	cmp	r1, r3
 801029e:	bf08      	it	eq
 80102a0:	4290      	cmpeq	r0, r2
 80102a2:	d112      	bne.n	80102ca <_np_cmd_nand_erase+0x382>
            len -= block_size;
 80102a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80102a6:	2200      	movs	r2, #0
 80102a8:	61bb      	str	r3, [r7, #24]
 80102aa:	61fa      	str	r2, [r7, #28]
 80102ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80102b0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80102b4:	4621      	mov	r1, r4
 80102b6:	1a51      	subs	r1, r2, r1
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	4629      	mov	r1, r5
 80102bc:	eb63 0301 	sbc.w	r3, r3, r1
 80102c0:	607b      	str	r3, [r7, #4]
 80102c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80102c6:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 80102ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80102ce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80102d2:	1a84      	subs	r4, r0, r2
 80102d4:	613c      	str	r4, [r7, #16]
 80102d6:	eb61 0303 	sbc.w	r3, r1, r3
 80102da:	617b      	str	r3, [r7, #20]
 80102dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80102e0:	f7ff fc28 	bl	800fb34 <np_send_progress>
    while (len)
 80102e4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80102e8:	4313      	orrs	r3, r2
 80102ea:	f47f af57 	bne.w	801019c <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 80102ee:	f7ff fba9 	bl	800fa44 <np_send_ok_status>
 80102f2:	4603      	mov	r3, r0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	37a0      	adds	r7, #160	@ 0xa0
 80102f8:	46bd      	mov	sp, r7
 80102fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102fe:	bf00      	nop

08010300 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 8010308:	2001      	movs	r0, #1
 801030a:	f7ff fadf 	bl	800f8cc <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f7ff fe1a 	bl	800ff48 <_np_cmd_nand_erase>
 8010314:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 8010316:	2000      	movs	r0, #0
 8010318:	f7ff fad8 	bl	800f8cc <led_wr_set>

    return ret;
 801031c:	68fb      	ldr	r3, [r7, #12]
}
 801031e:	4618      	mov	r0, r3
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
	...

08010328 <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b086      	sub	sp, #24
 801032c:	af00      	add	r7, sp, #0
 801032e:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8010332:	4b0f      	ldr	r3, [pc, #60]	@ (8010370 <np_send_write_ack+0x48>)
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8010338:	8abb      	ldrh	r3, [r7, #20]
 801033a:	813b      	strh	r3, [r7, #8]
 801033c:	f107 0308 	add.w	r3, r7, #8
 8010340:	3302      	adds	r3, #2
 8010342:	683a      	ldr	r2, [r7, #0]
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	687a      	ldr	r2, [r7, #4]
 8010348:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 801034a:	4b0a      	ldr	r3, [pc, #40]	@ (8010374 <np_send_write_ack+0x4c>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f107 0208 	add.w	r2, r7, #8
 8010354:	210a      	movs	r1, #10
 8010356:	4610      	mov	r0, r2
 8010358:	4798      	blx	r3
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d002      	beq.n	8010366 <np_send_write_ack+0x3e>
        return -1;
 8010360:	f04f 33ff 	mov.w	r3, #4294967295
 8010364:	e000      	b.n	8010368 <np_send_write_ack+0x40>

    return 0;
 8010366:	2300      	movs	r3, #0
}
 8010368:	4618      	mov	r0, r3
 801036a:	3718      	adds	r7, #24
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	08018124 	.word	0x08018124
 8010374:	20002f94 	.word	0x20002f94

08010378 <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 8010378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801037c:	b09a      	sub	sp, #104	@ 0x68
 801037e:	af04      	add	r7, sp, #16
 8010380:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8010382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	2b11      	cmp	r3, #17
 8010388:	d808      	bhi.n	801039c <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %u \r\n",
 801038a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	4619      	mov	r1, r3
 8010390:	489d      	ldr	r0, [pc, #628]	@ (8010608 <np_cmd_nand_write_start+0x290>)
 8010392:	f002 ff15 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8010396:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 801039a:	e184      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	657b      	str	r3, [r7, #84]	@ 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 80103a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103a8:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80103ac:	461a      	mov	r2, r3
 80103ae:	4b97      	ldr	r3, [pc, #604]	@ (801060c <np_cmd_nand_write_start+0x294>)
 80103b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d015      	beq.n	80103e6 <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 80103ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80103c0:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80103c4:	461a      	mov	r2, r3
 80103c6:	4b91      	ldr	r3, [pc, #580]	@ (801060c <np_cmd_nand_write_start+0x294>)
 80103c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103d0:	7c5b      	ldrb	r3, [r3, #17]
 80103d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80103d6:	b2db      	uxtb	r3, r3
 80103d8:	2b00      	cmp	r3, #0
 80103da:	bf14      	ite	ne
 80103dc:	2301      	movne	r3, #1
 80103de:	2300      	moveq	r3, #0
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	4618      	mov	r0, r3
 80103e4:	4790      	blx	r2

    addr = write_start_cmd->addr;
 80103e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80103e8:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80103ec:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80103f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    len = write_start_cmd->len;
 80103f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80103f6:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80103fa:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80103fe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    DEBUG_PRINT("\r\n Write at 0x%" PRIx64
 8010402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010406:	e9cd 2300 	strd	r2, r3, [sp]
 801040a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801040e:	4880      	ldr	r0, [pc, #512]	@ (8010610 <np_cmd_nand_write_start+0x298>)
 8010410:	f002 fed6 	bl	80131c0 <printf>
    		" 0x%" PRIx64 " bytes command \r\n", addr, len);

    if (write_start_cmd->flags.inc_spare)
 8010414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010416:	7c5b      	ldrb	r3, [r3, #17]
 8010418:	f003 0302 	and.w	r3, r3, #2
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d051      	beq.n	80104c6 <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8010422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010424:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010428:	3330      	adds	r3, #48	@ 0x30
 801042a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010430:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010434:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010438:	2200      	movs	r2, #0
 801043a:	623b      	str	r3, [r7, #32]
 801043c:	627a      	str	r2, [r7, #36]	@ 0x24
 801043e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010442:	f7f4 fbb1 	bl	8004ba8 <__aeabi_uldivmod>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	4613      	mov	r3, r2
 801044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pages_in_block = prog->chip_info.block_size /
 801044e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010450:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010454:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
            prog->chip_info.page_size;
 8010458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801045e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
        pages_in_block = prog->chip_info.block_size /
 8010462:	fbb2 f3f3 	udiv	r3, r2, r3
 8010466:	63bb      	str	r3, [r7, #56]	@ 0x38
        prog->page_size = prog->chip_info.page_size +
 8010468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801046e:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
            prog->chip_info.spare_size;
 8010472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010474:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010478:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
        prog->page_size = prog->chip_info.page_size +
 801047c:	441a      	add	r2, r3
 801047e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010480:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 8010482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010484:	6a1a      	ldr	r2, [r3, #32]
 8010486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010488:	fb03 f202 	mul.w	r2, r3, r2
 801048c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048e:	625a      	str	r2, [r3, #36]	@ 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8010490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010492:	2200      	movs	r2, #0
 8010494:	469a      	mov	sl, r3
 8010496:	4693      	mov	fp, r2
 8010498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049a:	6a1b      	ldr	r3, [r3, #32]
 801049c:	2200      	movs	r2, #0
 801049e:	61bb      	str	r3, [r7, #24]
 80104a0:	61fa      	str	r2, [r7, #28]
 80104a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80104a6:	4603      	mov	r3, r0
 80104a8:	fb03 f20b 	mul.w	r2, r3, fp
 80104ac:	460b      	mov	r3, r1
 80104ae:	fb0a f303 	mul.w	r3, sl, r3
 80104b2:	4413      	add	r3, r2
 80104b4:	4602      	mov	r2, r0
 80104b6:	fbaa 4502 	umull	r4, r5, sl, r2
 80104ba:	442b      	add	r3, r5
 80104bc:	461d      	mov	r5, r3
 80104be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c0:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 80104c4:	e016      	b.n	80104f4 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 80104c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80104cc:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
 80104d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d2:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 80104d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80104da:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80104de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e0:	625a      	str	r2, [r3, #36]	@ 0x24
        prog->total_size = prog->chip_info.total_size;
 80104e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e4:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 80104e8:	3330      	adds	r3, #48	@ 0x30
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80104f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 80104f4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80104f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80104fc:	eb10 0802 	adds.w	r8, r0, r2
 8010500:	eb41 0903 	adc.w	r9, r1, r3
 8010504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010506:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 801050a:	4542      	cmp	r2, r8
 801050c:	eb73 0309 	sbcs.w	r3, r3, r9
 8010510:	d210      	bcs.n	8010534 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 8010512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010514:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8010518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801051c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010520:	e9cd 2300 	strd	r2, r3, [sp]
 8010524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010528:	483a      	ldr	r0, [pc, #232]	@ (8010614 <np_cmd_nand_write_start+0x29c>)
 801052a:	f002 fe49 	bl	80131c0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 801052e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8010532:	e0b8      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 8010534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010536:	6a1b      	ldr	r3, [r3, #32]
 8010538:	2200      	movs	r2, #0
 801053a:	613b      	str	r3, [r7, #16]
 801053c:	617a      	str	r2, [r7, #20]
 801053e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8010542:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010546:	f7f4 fb2f 	bl	8004ba8 <__aeabi_uldivmod>
 801054a:	4313      	orrs	r3, r2
 801054c:	d00a      	beq.n	8010564 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 801054e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010558:	482f      	ldr	r0, [pc, #188]	@ (8010618 <np_cmd_nand_write_start+0x2a0>)
 801055a:	f002 fe31 	bl	80131c0 <printf>
            " is not aligned to page size %u \r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 801055e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8010562:	e0a0      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 8010564:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010568:	4313      	orrs	r3, r2
 801056a:	d105      	bne.n	8010578 <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("Length is 0\r\n");
 801056c:	482b      	ldr	r0, [pc, #172]	@ (801061c <np_cmd_nand_write_start+0x2a4>)
 801056e:	f002 fe7f 	bl	8013270 <puts>
        return NP_ERR_LEN_INVALID;
 8010572:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8010576:	e096      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	6a1b      	ldr	r3, [r3, #32]
 801057c:	2200      	movs	r2, #0
 801057e:	60bb      	str	r3, [r7, #8]
 8010580:	60fa      	str	r2, [r7, #12]
 8010582:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8010586:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801058a:	f7f4 fb0d 	bl	8004ba8 <__aeabi_uldivmod>
 801058e:	4313      	orrs	r3, r2
 8010590:	d00a      	beq.n	80105a8 <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8010592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010594:	6a1b      	ldr	r3, [r3, #32]
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801059c:	4820      	ldr	r0, [pc, #128]	@ (8010620 <np_cmd_nand_write_start+0x2a8>)
 801059e:	f002 fe0f 	bl	80131c0 <printf>
            " is not aligned to page size %u \r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80105a2:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 80105a6:	e07e      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 80105a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105aa:	7c5b      	ldrb	r3, [r3, #17]
 80105ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	461a      	mov	r2, r3
 80105b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 80105be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80105c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00d      	beq.n	80105e8 <np_cmd_nand_write_start+0x270>
 80105cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d109      	bne.n	80105e8 <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 80105d4:	2100      	movs	r1, #0
 80105d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105d8:	f7ff fbd0 	bl	800fd7c <_np_cmd_read_bad_blocks>
 80105dc:	6378      	str	r0, [r7, #52]	@ 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 80105de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d001      	beq.n	80105e8 <np_cmd_nand_write_start+0x270>
    {
        return ret;
 80105e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105e6:	e05e      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 80105e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ea:	6a1b      	ldr	r3, [r3, #32]
 80105ec:	f5b3 5f07 	cmp.w	r3, #8640	@ 0x21c0
 80105f0:	d91a      	bls.n	8010628 <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("Page size %u is more then buffer size %u \r\n",
 80105f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f4:	6a1b      	ldr	r3, [r3, #32]
 80105f6:	f44f 5207 	mov.w	r2, #8640	@ 0x21c0
 80105fa:	4619      	mov	r1, r3
 80105fc:	4809      	ldr	r0, [pc, #36]	@ (8010624 <np_cmd_nand_write_start+0x2ac>)
 80105fe:	f002 fddf 	bl	80131c0 <printf>
        		prog->page_size, sizeof(prog->page.buf));
        return NP_ERR_BUF_OVERFLOW;
 8010602:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 8010606:	e04e      	b.n	80106a6 <np_cmd_nand_write_start+0x32e>
 8010608:	08018128 	.word	0x08018128
 801060c:	2000013c 	.word	0x2000013c
 8010610:	08018164 	.word	0x08018164
 8010614:	08018190 	.word	0x08018190
 8010618:	080181d4 	.word	0x080181d4
 801061c:	08018030 	.word	0x08018030
 8010620:	0801820c 	.word	0x0801820c
 8010624:	08018244 	.word	0x08018244
    }

    // 设置写入相关的参数
    prog->addr = addr;
 8010628:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801062a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801062e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8010632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010634:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010638:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 801063c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063e:	2201      	movs	r2, #1
 8010640:	631a      	str	r2, [r3, #48]	@ 0x30

    prog->page.page = addr / prog->page_size;
 8010642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	2200      	movs	r2, #0
 8010648:	603b      	str	r3, [r7, #0]
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010650:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8010654:	f7f4 faa8 	bl	8004ba8 <__aeabi_uldivmod>
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010662:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
    prog->page.offset = 0;
 8010666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010668:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801066c:	461a      	mov	r2, r3
 801066e:	2300      	movs	r3, #0
 8010670:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    prog->bytes_written = 0;
 8010674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010676:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 801067a:	3310      	adds	r3, #16
 801067c:	4619      	mov	r1, r3
 801067e:	f04f 0200 	mov.w	r2, #0
 8010682:	f04f 0300 	mov.w	r3, #0
 8010686:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 801068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068c:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010690:	3310      	adds	r3, #16
 8010692:	4619      	mov	r1, r3
 8010694:	f04f 0200 	mov.w	r2, #0
 8010698:	f04f 0300 	mov.w	r3, #0
 801069c:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 80106a0:	f7ff f9d0 	bl	800fa44 <np_send_ok_status>
 80106a4:	4603      	mov	r3, r0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3758      	adds	r7, #88	@ 0x58
 80106aa:	46bd      	mov	sp, r7
 80106ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080106b0 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80106be:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80106c2:	461a      	mov	r2, r3
 80106c4:	4b37      	ldr	r3, [pc, #220]	@ (80107a4 <np_nand_handle_status+0xf4>)
 80106c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ca:	69db      	ldr	r3, [r3, #28]
 80106cc:	4798      	blx	r3
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d006      	beq.n	80106e2 <np_nand_handle_status+0x32>
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d84b      	bhi.n	8010770 <np_nand_handle_status+0xc0>
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d010      	beq.n	80106fe <np_nand_handle_status+0x4e>
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d01d      	beq.n	801071c <np_nand_handle_status+0x6c>
 80106e0:	e046      	b.n	8010770 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106ec:	2300      	movs	r3, #0
 80106ee:	f7ff f9e9 	bl	800fac4 <np_send_bad_block_info>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <np_nand_handle_status+0x4e>
            return -1;
 80106f8:	f04f 33ff 	mov.w	r3, #4294967295
 80106fc:	e04e      	b.n	801079c <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010704:	461a      	mov	r2, r3
 8010706:	2300      	movs	r3, #0
 8010708:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
        prog->nand_timeout = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010712:	461a      	mov	r2, r3
 8010714:	2300      	movs	r3, #0
 8010716:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
        break;
 801071a:	e03e      	b.n	801079a <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010722:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8010726:	3301      	adds	r3, #1
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801072e:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010738:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801073c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010740:	d12a      	bne.n	8010798 <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", prog->addr);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010748:	4817      	ldr	r0, [pc, #92]	@ (80107a8 <np_nand_handle_status+0xf8>)
 801074a:	f002 fd39 	bl	80131c0 <printf>
            prog->nand_wr_in_progress = 0;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010754:	461a      	mov	r2, r3
 8010756:	2300      	movs	r3, #0
 8010758:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
            prog->nand_timeout = 0;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010762:	461a      	mov	r2, r3
 8010764:	2300      	movs	r3, #0
 8010766:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
            return -1;
 801076a:	f04f 33ff 	mov.w	r3, #4294967295
 801076e:	e015      	b.n	801079c <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8010770:	480e      	ldr	r0, [pc, #56]	@ (80107ac <np_nand_handle_status+0xfc>)
 8010772:	f002 fd7d 	bl	8013270 <puts>
        prog->nand_wr_in_progress = 0;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801077c:	461a      	mov	r2, r3
 801077e:	2300      	movs	r3, #0
 8010780:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
        prog->nand_timeout = 0;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801078a:	461a      	mov	r2, r3
 801078c:	2300      	movs	r3, #0
 801078e:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
        return -1;
 8010792:	f04f 33ff 	mov.w	r3, #4294967295
 8010796:	e001      	b.n	801079c <np_nand_handle_status+0xec>
        break;
 8010798:	bf00      	nop
    }

    return 0;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	2000013c 	.word	0x2000013c
 80107a8:	08018278 	.word	0x08018278
 80107ac:	08017f50 	.word	0x08017f50

080107b0 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107be:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d012      	beq.n	80107ec <np_nand_write+0x3c>
    {
        DEBUG_PRINT("Wait for previous NAND write\r\n");
 80107c6:	481a      	ldr	r0, [pc, #104]	@ (8010830 <np_nand_write+0x80>)
 80107c8:	f002 fd52 	bl	8013270 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7ff ff6f 	bl	80106b0 <np_nand_handle_status>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d002      	beq.n	80107de <np_nand_write+0x2e>
                return -1;
 80107d8:	f04f 33ff 	mov.w	r3, #4294967295
 80107dc:	e023      	b.n	8010826 <np_nand_write+0x76>
        }
        while (prog->nand_wr_in_progress);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1ef      	bne.n	80107cc <np_nand_write+0x1c>
    }

//    DEBUG_PRINT("NAND write at 0x%" PRIx64 " %u bytes! \r\n", prog->addr, prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80107f2:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80107f6:	461a      	mov	r2, r3
 80107f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010834 <np_nand_write+0x84>)
 80107fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107fe:	699b      	ldr	r3, [r3, #24]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	f102 003c 	add.w	r0, r2, #60	@ 0x3c
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 801080c:	f8d2 11fc 	ldr.w	r1, [r2, #508]	@ 0x1fc
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	6a12      	ldr	r2, [r2, #32]
 8010814:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801081c:	461a      	mov	r2, r3
 801081e:	2301      	movs	r3, #1
 8010820:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    return 0;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3708      	adds	r7, #8
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	080182a0 	.word	0x080182a0
 8010834:	2000013c 	.word	0x2000013c

08010838 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 8010838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801083c:	b092      	sub	sp, #72	@ 0x48
 801083e:	af02      	add	r7, sp, #8
 8010840:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	2b01      	cmp	r3, #1
 8010848:	d808      	bhi.n	801085c <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 801084a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	4619      	mov	r1, r3
 8010850:	486e      	ldr	r0, [pc, #440]	@ (8010a0c <np_cmd_nand_write_data+0x1d4>)
 8010852:	f002 fcb5 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8010856:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 801085a:	e1a1      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 801085c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	63bb      	str	r3, [r7, #56]	@ 0x38
    len = write_data_cmd->len;
 8010862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010864:	785b      	ldrb	r3, [r3, #1]
 8010866:	637b      	str	r3, [r7, #52]	@ 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8010868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801086a:	3302      	adds	r3, #2
 801086c:	2b40      	cmp	r3, #64	@ 0x40
 801086e:	d906      	bls.n	801087e <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("Data size is wrong %u\r\n", len);
 8010870:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010872:	4867      	ldr	r0, [pc, #412]	@ (8010a10 <np_cmd_nand_write_data+0x1d8>)
 8010874:	f002 fca4 	bl	80131c0 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8010878:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 801087c:	e190      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 801087e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010880:	1c9a      	adds	r2, r3, #2
 8010882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	429a      	cmp	r2, r3
 8010888:	d00a      	beq.n	80108a0 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("Buffer len %u is bigger then command %u \r\n",
 801088a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088c:	6859      	ldr	r1, [r3, #4]
 801088e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010890:	3302      	adds	r3, #2
 8010892:	461a      	mov	r2, r3
 8010894:	485f      	ldr	r0, [pc, #380]	@ (8010a14 <np_cmd_nand_write_data+0x1dc>)
 8010896:	f002 fc93 	bl	80131c0 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 801089a:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 801089e:	e17f      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d105      	bne.n	80108b4 <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("Write address is not set\r\n");
 80108a8:	485b      	ldr	r0, [pc, #364]	@ (8010a18 <np_cmd_nand_write_data+0x1e0>)
 80108aa:	f002 fce1 	bl	8013270 <puts>
        return NP_ERR_ADDR_INVALID;
 80108ae:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80108b2:	e175      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80108be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108c0:	441a      	add	r2, r3
 80108c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d909      	bls.n	80108de <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 80108ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108cc:	6a1a      	ldr	r2, [r3, #32]
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80108d8:	1ad3      	subs	r3, r2, r3
 80108da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80108dc:	e001      	b.n	80108e2 <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 80108de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80108e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80108e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80108ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80108f2:	18d0      	adds	r0, r2, r3
 80108f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f6:	3302      	adds	r3, #2
 80108f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80108fa:	4619      	mov	r1, r3
 80108fc:	f002 fd80 	bl	8013400 <memcpy>
    prog->page.offset += write_len;
 8010900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010902:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010906:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801090a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801090c:	441a      	add	r2, r3
 801090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010910:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010914:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8010918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801091e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	6a1b      	ldr	r3, [r3, #32]
 8010926:	429a      	cmp	r2, r3
 8010928:	f040 80a2 	bne.w	8010a70 <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 801092c:	e038      	b.n	80109a0 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", prog->addr);
 801092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010930:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010934:	4839      	ldr	r0, [pc, #228]	@ (8010a1c <np_cmd_nand_write_data+0x1e4>)
 8010936:	f002 fc43 	bl	80131c0 <printf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 801093a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801093c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010944:	2301      	movs	r3, #1
 8010946:	f7ff f8bd 	bl	800fac4 <np_send_bad_block_info>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <np_cmd_nand_write_data+0x11e>
                return -1;
 8010950:	f04f 33ff 	mov.w	r3, #4294967295
 8010954:	e124      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 8010956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010958:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801095c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010960:	2200      	movs	r2, #0
 8010962:	623b      	str	r3, [r7, #32]
 8010964:	627a      	str	r2, [r7, #36]	@ 0x24
 8010966:	6a3b      	ldr	r3, [r7, #32]
 8010968:	18c3      	adds	r3, r0, r3
 801096a:	613b      	str	r3, [r7, #16]
 801096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096e:	eb41 0303 	adc.w	r3, r1, r3
 8010972:	617b      	str	r3, [r7, #20]
 8010974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801097a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 801097e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010980:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010984:	f8d3 11fc 	ldr.w	r1, [r3, #508]	@ 0x1fc
 8010988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098e:	6a1b      	ldr	r3, [r3, #32]
 8010990:	fbb2 f3f3 	udiv	r3, r2, r3
 8010994:	18ca      	adds	r2, r1, r3
 8010996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010998:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801099c:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80109a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80109a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d00a      	beq.n	80109c4 <np_cmd_nand_write_data+0x18c>
 80109ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80109b4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fe ffdb 	bl	800f974 <nand_bad_block_table_lookup>
 80109be:	4603      	mov	r3, r0
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d1b4      	bne.n	801092e <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 80109c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80109ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80109d0:	4290      	cmp	r0, r2
 80109d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80109d6:	d30f      	bcc.n	80109f8 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 80109d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109da:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80109de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80109e4:	e9cd 2300 	strd	r2, r3, [sp]
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	480c      	ldr	r0, [pc, #48]	@ (8010a20 <np_cmd_nand_write_data+0x1e8>)
 80109ee:	f002 fbe7 	bl	80131c0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", prog->addr,
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80109f2:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80109f6:	e0d3      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 80109f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109fa:	f7ff fed9 	bl	80107b0 <np_nand_write>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00f      	beq.n	8010a24 <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8010a04:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 8010a08:	e0ca      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
 8010a0a:	bf00      	nop
 8010a0c:	080182c0 	.word	0x080182c0
 8010a10:	080182f8 	.word	0x080182f8
 8010a14:	08018318 	.word	0x08018318
 8010a18:	0801834c 	.word	0x0801834c
 8010a1c:	08018104 	.word	0x08018104
 8010a20:	08018370 	.word	0x08018370

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8010a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8010a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a2c:	6a1b      	ldr	r3, [r3, #32]
 8010a2e:	2200      	movs	r2, #0
 8010a30:	61bb      	str	r3, [r7, #24]
 8010a32:	61fa      	str	r2, [r7, #28]
 8010a34:	69bb      	ldr	r3, [r7, #24]
 8010a36:	18c3      	adds	r3, r0, r3
 8010a38:	60bb      	str	r3, [r7, #8]
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	eb41 0303 	adc.w	r3, r1, r3
 8010a40:	60fb      	str	r3, [r7, #12]
 8010a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010a48:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8010a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010a52:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8010a56:	3301      	adds	r3, #1
 8010a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a5a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8010a5e:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
        prog->page.offset = 0;
 8010a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a64:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010a68:	461a      	mov	r2, r3
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8010a70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	633b      	str	r3, [r7, #48]	@ 0x30
    if (bytes_left)
 8010a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d016      	beq.n	8010aac <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8010a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a80:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8010a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a86:	1c9a      	adds	r2, r3, #2
 8010a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a8a:	4413      	add	r3, r2
 8010a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a8e:	4619      	mov	r1, r3
 8010a90:	f002 fcb6 	bl	8013400 <memcpy>
        prog->page.offset += bytes_left;
 8010a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010a9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa0:	4413      	add	r3, r2
 8010aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010aa4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8010aa8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8010aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aae:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010ab2:	3310      	adds	r3, #16
 8010ab4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ab8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010aba:	2000      	movs	r0, #0
 8010abc:	468a      	mov	sl, r1
 8010abe:	4683      	mov	fp, r0
 8010ac0:	eb12 010a 	adds.w	r1, r2, sl
 8010ac4:	6039      	str	r1, [r7, #0]
 8010ac6:	eb43 030b 	adc.w	r3, r3, fp
 8010aca:	607b      	str	r3, [r7, #4]
 8010acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ace:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010ad2:	3310      	adds	r3, #16
 8010ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010ad8:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8010adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ade:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010ae2:	3310      	adds	r3, #16
 8010ae4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aea:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010aee:	3310      	adds	r3, #16
 8010af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af4:	1a84      	subs	r4, r0, r2
 8010af6:	eb61 0503 	sbc.w	r5, r1, r3
 8010afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afc:	6a1b      	ldr	r3, [r3, #32]
 8010afe:	2200      	movs	r2, #0
 8010b00:	4698      	mov	r8, r3
 8010b02:	4691      	mov	r9, r2
 8010b04:	4544      	cmp	r4, r8
 8010b06:	eb75 0309 	sbcs.w	r3, r5, r9
 8010b0a:	d20c      	bcs.n	8010b26 <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8010b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b0e:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b12:	3310      	adds	r3, #16
 8010b14:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8010b1e:	4299      	cmp	r1, r3
 8010b20:	bf08      	it	eq
 8010b22:	4290      	cmpeq	r0, r2
 8010b24:	d11b      	bne.n	8010b5e <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8010b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b28:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b2c:	3310      	adds	r3, #16
 8010b2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b32:	4610      	mov	r0, r2
 8010b34:	4619      	mov	r1, r3
 8010b36:	f7ff fbf7 	bl	8010328 <np_send_write_ack>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <np_cmd_nand_write_data+0x30e>
            return -1;
 8010b40:	f04f 33ff 	mov.w	r3, #4294967295
 8010b44:	e02c      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8010b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b48:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b4c:	3310      	adds	r3, #16
 8010b4e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b54:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b58:	3310      	adds	r3, #16
 8010b5a:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8010b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b60:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b64:	3310      	adds	r3, #16
 8010b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b6c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010b70:	4290      	cmp	r0, r2
 8010b72:	eb71 0303 	sbcs.w	r3, r1, r3
 8010b76:	d212      	bcs.n	8010b9e <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8010b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7a:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010b7e:	3310      	adds	r3, #16
 8010b80:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8010b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b8a:	e9cd 2300 	strd	r2, r3, [sp]
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	4806      	ldr	r0, [pc, #24]	@ (8010bac <np_cmd_nand_write_data+0x374>)
 8010b94:	f002 fb14 	bl	80131c0 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8010b98:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 8010b9c:	e000      	b.n	8010ba0 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8010b9e:	2300      	movs	r3, #0
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3740      	adds	r7, #64	@ 0x40
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010baa:	bf00      	nop
 8010bac:	080183ac 	.word	0x080183ac

08010bb0 <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	631a      	str	r2, [r3, #48]	@ 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00b      	beq.n	8010be4 <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("Data of %u length was not written\r\n", prog->page.offset);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010bd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4806      	ldr	r0, [pc, #24]	@ (8010bf4 <np_cmd_nand_write_end+0x44>)
 8010bda:	f002 faf1 	bl	80131c0 <printf>
        return NP_ERR_NAND_WR;
 8010bde:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 8010be2:	e002      	b.n	8010bea <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8010be4:	f7fe ff2e 	bl	800fa44 <np_send_ok_status>
 8010be8:	4603      	mov	r3, r0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	080183ec 	.word	0x080183ec

08010bf8 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	2b05      	cmp	r3, #5
 8010c10:	d013      	beq.n	8010c3a <np_cmd_nand_write+0x42>
 8010c12:	2b05      	cmp	r3, #5
 8010c14:	dc19      	bgt.n	8010c4a <np_cmd_nand_write+0x52>
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d002      	beq.n	8010c20 <np_cmd_nand_write+0x28>
 8010c1a:	2b04      	cmp	r3, #4
 8010c1c:	d008      	beq.n	8010c30 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8010c1e:	e014      	b.n	8010c4a <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8010c20:	2001      	movs	r0, #1
 8010c22:	f7fe fe53 	bl	800f8cc <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff fba6 	bl	8010378 <np_cmd_nand_write_start>
 8010c2c:	60f8      	str	r0, [r7, #12]
        break;
 8010c2e:	e00d      	b.n	8010c4c <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f7ff fe01 	bl	8010838 <np_cmd_nand_write_data>
 8010c36:	60f8      	str	r0, [r7, #12]
        break;
 8010c38:	e008      	b.n	8010c4c <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8010c3a:	6878      	ldr	r0, [r7, #4]
 8010c3c:	f7ff ffb8 	bl	8010bb0 <np_cmd_nand_write_end>
 8010c40:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8010c42:	2000      	movs	r0, #0
 8010c44:	f7fe fe42 	bl	800f8cc <led_wr_set>
        break;
 8010c48:	e000      	b.n	8010c4c <np_cmd_nand_write+0x54>
        break;
 8010c4a:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	da02      	bge.n	8010c58 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8010c52:	2000      	movs	r0, #0
 8010c54:	f7fe fe3a 	bl	800f8cc <led_wr_set>

    return ret;
 8010c58:	68fb      	ldr	r3, [r7, #12]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
	...

08010c64 <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8010c6e:	607a      	str	r2, [r7, #4]
 8010c70:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8010c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010c78:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010cf0 <np_nand_read+0x8c>)
 8010c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8010c8e:	f8d2 11c0 	ldr.w	r1, [r2, #448]	@ 0x1c0
 8010c92:	683a      	ldr	r2, [r7, #0]
 8010c94:	4798      	blx	r3
 8010c96:	6178      	str	r0, [r7, #20]
    switch (status)
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	2b03      	cmp	r3, #3
 8010c9c:	d014      	beq.n	8010cc8 <np_nand_read+0x64>
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b03      	cmp	r3, #3
 8010ca2:	d817      	bhi.n	8010cd4 <np_nand_read+0x70>
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d01a      	beq.n	8010ce0 <np_nand_read+0x7c>
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d111      	bne.n	8010cd4 <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	6a3a      	ldr	r2, [r7, #32]
 8010cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010cb8:	f7fe ff04 	bl	800fac4 <np_send_bad_block_info>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d010      	beq.n	8010ce4 <np_nand_read+0x80>
            return -1;
 8010cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc6:	e00f      	b.n	8010ce8 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8010cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010ccc:	4809      	ldr	r0, [pc, #36]	@ (8010cf4 <np_nand_read+0x90>)
 8010cce:	f002 fa77 	bl	80131c0 <printf>
        break;
 8010cd2:	e008      	b.n	8010ce6 <np_nand_read+0x82>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8010cd4:	4808      	ldr	r0, [pc, #32]	@ (8010cf8 <np_nand_read+0x94>)
 8010cd6:	f002 facb 	bl	8013270 <puts>
        return -1;
 8010cda:	f04f 33ff 	mov.w	r3, #4294967295
 8010cde:	e003      	b.n	8010ce8 <np_nand_read+0x84>
        break;
 8010ce0:	bf00      	nop
 8010ce2:	e000      	b.n	8010ce6 <np_nand_read+0x82>
        break;
 8010ce4:	bf00      	nop
    }

    return 0;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3718      	adds	r7, #24
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	2000013c 	.word	0x2000013c
 8010cf4:	08017f28 	.word	0x08017f28
 8010cf8:	08017f50 	.word	0x08017f50

08010cfc <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8010cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d00:	b0b4      	sub	sp, #208	@ 0xd0
 8010d02:	af04      	add	r7, sp, #16
 8010d04:	6778      	str	r0, [r7, #116]	@ 0x74
    static np_page_t page;
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages, pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8010d06:	2302      	movs	r3, #2
 8010d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8010d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010d10:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8010d14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8010d18:	4bb9      	ldr	r3, [pc, #740]	@ (8011000 <_np_cmd_nand_read+0x304>)
 8010d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8010d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	2b11      	cmp	r3, #17
 8010d24:	d808      	bhi.n	8010d38 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("Wrong buffer length for read command %u\r\n", prog->rx_buf_len);
 8010d26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	48b5      	ldr	r0, [pc, #724]	@ (8011004 <_np_cmd_nand_read+0x308>)
 8010d2e:	f002 fa47 	bl	80131c0 <printf>
        return NP_ERR_LEN_INVALID;
 8010d32:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8010d36:	e283      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8010d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    addr = read_cmd->addr;
 8010d40:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8010d44:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8010d48:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8010d4c:	e9c7 232e 	strd	r2, r3, [r7, #184]	@ 0xb8
    len = read_cmd->len;
 8010d50:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8010d54:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8010d58:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8010d5c:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8010d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d64:	7c5b      	ldrb	r3, [r3, #17]
 8010d66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	bf14      	ite	ne
 8010d70:	2301      	movne	r3, #1
 8010d72:	2300      	moveq	r3, #0
 8010d74:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8010d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d7c:	7c5b      	ldrb	r3, [r3, #17]
 8010d7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	bf14      	ite	ne
 8010d88:	2301      	movne	r3, #1
 8010d8a:	2300      	moveq	r3, #0
 8010d8c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a

    DEBUG_PRINT("\r\n Read at 0x%" PRIx64
 8010d90:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8010d94:	e9cd 2300 	strd	r2, r3, [sp]
 8010d98:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8010d9c:	489a      	ldr	r0, [pc, #616]	@ (8011008 <_np_cmd_nand_read+0x30c>)
 8010d9e:	f002 fa0f 	bl	80131c0 <printf>
    		" 0x%" PRIx64 " bytes command \r\n", addr, len);

    if (inc_spare)
 8010da2:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d056      	beq.n	8010e58 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8010daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010dac:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010db0:	3330      	adds	r3, #48	@ 0x30
 8010db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010db8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010dbc:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010dc4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010dc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010dca:	f7f3 feed 	bl	8004ba8 <__aeabi_uldivmod>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        pages_in_block = prog->chip_info.block_size /
 8010dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010dda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010dde:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
            prog->chip_info.page_size;
 8010de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010de4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010de8:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
        pages_in_block = prog->chip_info.block_size /
 8010dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8010df4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010df6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010dfa:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
 8010dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010e04:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8010e08:	4413      	add	r3, r2
 8010e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        block_size = pages_in_block * page_size;
 8010e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e16:	fb02 f303 	mul.w	r3, r2, r3
 8010e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        total_size = (uint64_t)pages * page_size;
 8010e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e22:	2200      	movs	r2, #0
 8010e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8010e26:	667a      	str	r2, [r7, #100]	@ 0x64
 8010e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	4698      	mov	r8, r3
 8010e30:	4691      	mov	r9, r2
 8010e32:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8010e36:	460b      	mov	r3, r1
 8010e38:	fb08 f203 	mul.w	r2, r8, r3
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	fb03 f309 	mul.w	r3, r3, r9
 8010e42:	4413      	add	r3, r2
 8010e44:	4602      	mov	r2, r0
 8010e46:	fba2 4508 	umull	r4, r5, r2, r8
 8010e4a:	442b      	add	r3, r5
 8010e4c:	461d      	mov	r5, r3
 8010e4e:	e9c7 452a 	strd	r4, r5, [r7, #168]	@ 0xa8
 8010e52:	e9c7 452a 	strd	r4, r5, [r7, #168]	@ 0xa8
 8010e56:	e015      	b.n	8010e84 <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8010e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010e5e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8010e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        block_size = prog->chip_info.block_size;
 8010e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010e6c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8010e70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        total_size = prog->chip_info.total_size;
 8010e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e76:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8010e7a:	3330      	adds	r3, #48	@ 0x30
 8010e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e80:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    }

    if (addr + len > total_size)
 8010e84:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010e88:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8010e8c:	eb10 0a02 	adds.w	sl, r0, r2
 8010e90:	eb41 0b03 	adc.w	fp, r1, r3
 8010e94:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010e98:	4552      	cmp	r2, sl
 8010e9a:	eb73 030b 	sbcs.w	r3, r3, fp
 8010e9e:	d20f      	bcs.n	8010ec0 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64 "+0x%" PRIx64
 8010ea0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010ea8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8010eac:	e9cd 2300 	strd	r2, r3, [sp]
 8010eb0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8010eb4:	4855      	ldr	r0, [pc, #340]	@ (801100c <_np_cmd_nand_read+0x310>)
 8010eb6:	f002 f983 	bl	80131c0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8010eba:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8010ebe:	e1bf      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8010ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8010eca:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010ed2:	f7f3 fe69 	bl	8004ba8 <__aeabi_uldivmod>
 8010ed6:	4313      	orrs	r3, r2
 8010ed8:	d00a      	beq.n	8010ef0 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64
 8010eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8010ee4:	484a      	ldr	r0, [pc, #296]	@ (8011010 <_np_cmd_nand_read+0x314>)
 8010ee6:	f002 f96b 	bl	80131c0 <printf>
            " is not aligned to page size %u \r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8010eea:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8010eee:	e1a7      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8010ef0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	d105      	bne.n	8010f04 <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("Length is 0\r\n");
 8010ef8:	4846      	ldr	r0, [pc, #280]	@ (8011014 <_np_cmd_nand_read+0x318>)
 8010efa:	f002 f9b9 	bl	8013270 <puts>
        return NP_ERR_LEN_INVALID;
 8010efe:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8010f02:	e19d      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 8010f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010f08:	2200      	movs	r2, #0
 8010f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f0c:	657a      	str	r2, [r7, #84]	@ 0x54
 8010f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010f12:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010f16:	f7f3 fe47 	bl	8004ba8 <__aeabi_uldivmod>
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	d00a      	beq.n	8010f34 <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("Read length 0x%" PRIx64
 8010f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8010f28:	483b      	ldr	r0, [pc, #236]	@ (8011018 <_np_cmd_nand_read+0x31c>)
 8010f2a:	f002 f949 	bl	80131c0 <printf>
            " is not aligned to page size %u \r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8010f2e:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 8010f32:	e185      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8010f34:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00d      	beq.n	8010f58 <_np_cmd_nand_read+0x25c>
 8010f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d109      	bne.n	8010f58 <_np_cmd_nand_read+0x25c>
 8010f44:	2100      	movs	r1, #0
 8010f46:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8010f48:	f7fe ff18 	bl	800fd7c <_np_cmd_read_bad_blocks>
 8010f4c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010f4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 8010f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010f56:	e173      	b.n	8011240 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 8010f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010f66:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010f6a:	f7f3 fe1d 	bl	8004ba8 <__aeabi_uldivmod>
 8010f6e:	4602      	mov	r2, r0
 8010f70:	460b      	mov	r3, r1
 8010f72:	4b2a      	ldr	r3, [pc, #168]	@ (801101c <_np_cmd_nand_read+0x320>)
 8010f74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010f78:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    page.offset = 0;
 8010f7c:	4b27      	ldr	r3, [pc, #156]	@ (801101c <_np_cmd_nand_read+0x320>)
 8010f7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010f82:	461a      	mov	r2, r3
 8010f84:	2300      	movs	r3, #0
 8010f86:	f8c2 31c4 	str.w	r3, [r2, #452]	@ 0x1c4

    resp->code = NP_RESP_DATA;
 8010f8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010f8e:	2300      	movs	r3, #0
 8010f90:	7013      	strb	r3, [r2, #0]

    while (len)
 8010f92:	e14f      	b.n	8011234 <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 8010f94:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010f98:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010f9c:	4290      	cmp	r0, r2
 8010f9e:	eb71 0303 	sbcs.w	r3, r1, r3
 8010fa2:	d30b      	bcc.n	8010fbc <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("Read address 0x%" PRIx64
 8010fa4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8010fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8010fac:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8010fb0:	481b      	ldr	r0, [pc, #108]	@ (8011020 <_np_cmd_nand_read+0x324>)
 8010fb2:	f002 f905 	bl	80131c0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8010fb6:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8010fba:	e141      	b.n	8011240 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8010fbc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d076      	beq.n	80110b2 <_np_cmd_nand_read+0x3b6>
 8010fc4:	4b15      	ldr	r3, [pc, #84]	@ (801101c <_np_cmd_nand_read+0x320>)
 8010fc6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8010fca:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe fcd0 	bl	800f974 <nand_bad_block_table_lookup>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d06b      	beq.n	80110b2 <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 8010fda:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8010fde:	4811      	ldr	r0, [pc, #68]	@ (8011024 <_np_cmd_nand_read+0x328>)
 8010fe0:	f002 f8ee 	bl	80131c0 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8010fea:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8010fee:	f7fe fd69 	bl	800fac4 <np_send_bad_block_info>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d017      	beq.n	8011028 <_np_cmd_nand_read+0x32c>
                return -1;
 8010ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ffc:	e120      	b.n	8011240 <_np_cmd_nand_read+0x544>
 8010ffe:	bf00      	nop
 8011000:	200051e0 	.word	0x200051e0
 8011004:	08018418 	.word	0x08018418
 8011008:	0801844c 	.word	0x0801844c
 801100c:	08018478 	.word	0x08018478
 8011010:	080184bc 	.word	0x080184bc
 8011014:	08018030 	.word	0x08018030
 8011018:	080184fc 	.word	0x080184fc
 801101c:	20005220 	.word	0x20005220
 8011020:	08018538 	.word	0x08018538
 8011024:	08018104 	.word	0x08018104

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 8011028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801102c:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8011030:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8011034:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8011038:	428b      	cmp	r3, r1
 801103a:	bf08      	it	eq
 801103c:	4282      	cmpeq	r2, r0
 801103e:	d113      	bne.n	8011068 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 8011040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011044:	2200      	movs	r2, #0
 8011046:	643b      	str	r3, [r7, #64]	@ 0x40
 8011048:	647a      	str	r2, [r7, #68]	@ 0x44
 801104a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 801104e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011052:	4621      	mov	r1, r4
 8011054:	1a51      	subs	r1, r2, r1
 8011056:	61b9      	str	r1, [r7, #24]
 8011058:	4629      	mov	r1, r5
 801105a:	eb63 0301 	sbc.w	r3, r3, r1
 801105e:	61fb      	str	r3, [r7, #28]
 8011060:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8011064:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0
            addr += block_size;
 8011068:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801106c:	2200      	movs	r2, #0
 801106e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011070:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011072:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8011076:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801107a:	4621      	mov	r1, r4
 801107c:	1851      	adds	r1, r2, r1
 801107e:	6139      	str	r1, [r7, #16]
 8011080:	4629      	mov	r1, r5
 8011082:	414b      	adcs	r3, r1
 8011084:	617b      	str	r3, [r7, #20]
 8011086:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801108a:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
            page.page += block_size / page_size;
 801108e:	4b6f      	ldr	r3, [pc, #444]	@ (801124c <_np_cmd_nand_read+0x550>)
 8011090:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011094:	f8d3 11c0 	ldr.w	r1, [r3, #448]	@ 0x1c0
 8011098:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801109c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80110a4:	18ca      	adds	r2, r1, r3
 80110a6:	4b69      	ldr	r3, [pc, #420]	@ (801124c <_np_cmd_nand_read+0x550>)
 80110a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80110ac:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
            continue;
 80110b0:	e0c0      	b.n	8011234 <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 80110b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80110b4:	9301      	str	r3, [sp, #4]
 80110b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110c0:	4a62      	ldr	r2, [pc, #392]	@ (801124c <_np_cmd_nand_read+0x550>)
 80110c2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80110c6:	f7ff fdcd 	bl	8010c64 <np_nand_read>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d07e      	beq.n	80111ce <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 80110d0:	f06f 0367 	mvn.w	r3, #103	@ 0x67
 80110d4:	e0b4      	b.n	8011240 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 80110d6:	4b5d      	ldr	r3, [pc, #372]	@ (801124c <_np_cmd_nand_read+0x550>)
 80110d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80110dc:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80110e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110e4:	1a9a      	subs	r2, r3, r2
 80110e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d804      	bhi.n	80110f8 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 80110ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80110f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80110f6:	e009      	b.n	801110c <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 80110f8:	4b54      	ldr	r3, [pc, #336]	@ (801124c <_np_cmd_nand_read+0x550>)
 80110fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80110fe:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8011102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011106:	1a9b      	subs	r3, r3, r2
 8011108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

            if (send_len > len)
 801110c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011110:	2200      	movs	r2, #0
 8011112:	633b      	str	r3, [r7, #48]	@ 0x30
 8011114:	637a      	str	r2, [r7, #52]	@ 0x34
 8011116:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 801111a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801111e:	4621      	mov	r1, r4
 8011120:	428a      	cmp	r2, r1
 8011122:	4629      	mov	r1, r5
 8011124:	418b      	sbcs	r3, r1
 8011126:	d203      	bcs.n	8011130 <_np_cmd_nand_read+0x434>
                send_len = len;
 8011128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801112c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8011130:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011134:	1c98      	adds	r0, r3, #2
 8011136:	4b45      	ldr	r3, [pc, #276]	@ (801124c <_np_cmd_nand_read+0x550>)
 8011138:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801113c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8011140:	4b42      	ldr	r3, [pc, #264]	@ (801124c <_np_cmd_nand_read+0x550>)
 8011142:	4413      	add	r3, r2
 8011144:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011148:	4619      	mov	r1, r3
 801114a:	f002 f959 	bl	8013400 <memcpy>

            while (!np_comm_cb->send_ready());
 801114e:	bf00      	nop
 8011150:	4b3f      	ldr	r3, [pc, #252]	@ (8011250 <_np_cmd_nand_read+0x554>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	4798      	blx	r3
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d0f8      	beq.n	8011150 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 801115e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011168:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 801116a:	4b39      	ldr	r3, [pc, #228]	@ (8011250 <_np_cmd_nand_read+0x554>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681c      	ldr	r4, [r3, #0]
 8011170:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011178:	4413      	add	r3, r2
 801117a:	4619      	mov	r1, r3
 801117c:	4835      	ldr	r0, [pc, #212]	@ (8011254 <_np_cmd_nand_read+0x558>)
 801117e:	47a0      	blx	r4
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 8011186:	f04f 33ff 	mov.w	r3, #4294967295
 801118a:	e059      	b.n	8011240 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 801118c:	4b2f      	ldr	r3, [pc, #188]	@ (801124c <_np_cmd_nand_read+0x550>)
 801118e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011192:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8011196:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801119a:	441a      	add	r2, r3
 801119c:	4b2b      	ldr	r3, [pc, #172]	@ (801124c <_np_cmd_nand_read+0x550>)
 801119e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111a2:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
            len -= send_len;
 80111a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80111aa:	2200      	movs	r2, #0
 80111ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80111b0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80111b4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80111b8:	4621      	mov	r1, r4
 80111ba:	1a51      	subs	r1, r2, r1
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	4629      	mov	r1, r5
 80111c0:	eb63 0301 	sbc.w	r3, r3, r1
 80111c4:	60fb      	str	r3, [r7, #12]
 80111c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80111ca:	e9c7 342c 	strd	r3, r4, [r7, #176]	@ 0xb0
        while (page.offset < page_size && len)
 80111ce:	4b1f      	ldr	r3, [pc, #124]	@ (801124c <_np_cmd_nand_read+0x550>)
 80111d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80111d4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80111d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111dc:	4293      	cmp	r3, r2
 80111de:	d904      	bls.n	80111ea <_np_cmd_nand_read+0x4ee>
 80111e0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 80111e4:	4313      	orrs	r3, r2
 80111e6:	f47f af76 	bne.w	80110d6 <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 80111ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111ee:	2200      	movs	r2, #0
 80111f0:	623b      	str	r3, [r7, #32]
 80111f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80111f4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80111f8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80111fc:	4621      	mov	r1, r4
 80111fe:	1851      	adds	r1, r2, r1
 8011200:	6039      	str	r1, [r7, #0]
 8011202:	4629      	mov	r1, r5
 8011204:	414b      	adcs	r3, r1
 8011206:	607b      	str	r3, [r7, #4]
 8011208:	e9d7 3400 	ldrd	r3, r4, [r7]
 801120c:	e9c7 342e 	strd	r3, r4, [r7, #184]	@ 0xb8
        page.offset = 0;
 8011210:	4b0e      	ldr	r3, [pc, #56]	@ (801124c <_np_cmd_nand_read+0x550>)
 8011212:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011216:	461a      	mov	r2, r3
 8011218:	2300      	movs	r3, #0
 801121a:	f8c2 31c4 	str.w	r3, [r2, #452]	@ 0x1c4
        page.page++;
 801121e:	4b0b      	ldr	r3, [pc, #44]	@ (801124c <_np_cmd_nand_read+0x550>)
 8011220:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011224:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8011228:	1c5a      	adds	r2, r3, #1
 801122a:	4b08      	ldr	r3, [pc, #32]	@ (801124c <_np_cmd_nand_read+0x550>)
 801122c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011230:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    while (len)
 8011234:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8011238:	4313      	orrs	r3, r2
 801123a:	f47f aeab 	bne.w	8010f94 <_np_cmd_nand_read+0x298>

//        DEBUG_PRINT("NAND read at 0x%" PRIx64 " %u bytes! \r\n", addr, page_size);
    }

    return 0;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	37c0      	adds	r7, #192	@ 0xc0
 8011244:	46bd      	mov	sp, r7
 8011246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801124a:	bf00      	nop
 801124c:	20005220 	.word	0x20005220
 8011250:	20002f94 	.word	0x20002f94
 8011254:	200051e0 	.word	0x200051e0

08011258 <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 8011260:	2001      	movs	r0, #1
 8011262:	f7fe fb45 	bl	800f8f0 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7ff fd48 	bl	8010cfc <_np_cmd_nand_read>
 801126c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 801126e:	2000      	movs	r0, #0
 8011270:	f7fe fb3e 	bl	800f8f0 <led_rd_set>

    return ret;
 8011274:	68fb      	ldr	r3, [r7, #12]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 801127e:	b480      	push	{r7}
 8011280:	b083      	sub	sp, #12
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8011294:	f8c2 3228 	str.w	r3, [r2, #552]	@ 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80112a4:	f8c2 322c 	str.w	r3, [r2, #556]	@ 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	f8d1 200a 	ldr.w	r2, [r1, #10]
 80112ae:	f8d1 300e 	ldr.w	r3, [r1, #14]
 80112b2:	6839      	ldr	r1, [r7, #0]
 80112b4:	f501 5108 	add.w	r1, r1, #8704	@ 0x2200
 80112b8:	3130      	adds	r1, #48	@ 0x30
 80112ba:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80112ca:	f8c2 3238 	str.w	r3, [r2, #568]	@ 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	7d9a      	ldrb	r2, [r3, #22]
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80112d8:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
    prog->chip_is_conf = 1;
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	2201      	movs	r2, #1
 80112e0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80112e2:	bf00      	nop
 80112e4:	370c      	adds	r7, #12
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
	...

080112f0 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Page size: %u\r\n", prog->chip_info.page_size);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80112fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8011302:	4619      	mov	r1, r3
 8011304:	4815      	ldr	r0, [pc, #84]	@ (801135c <np_print_chip_info+0x6c>)
 8011306:	f001 ff5b 	bl	80131c0 <printf>
    DEBUG_PRINT("Block size: %u\r\n", prog->chip_info.block_size);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011310:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8011314:	4619      	mov	r1, r3
 8011316:	4812      	ldr	r0, [pc, #72]	@ (8011360 <np_print_chip_info+0x70>)
 8011318:	f001 ff52 	bl	80131c0 <printf>
    DEBUG_PRINT("Total size: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011322:	3330      	adds	r3, #48	@ 0x30
 8011324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011328:	480e      	ldr	r0, [pc, #56]	@ (8011364 <np_print_chip_info+0x74>)
 801132a:	f001 ff49 	bl	80131c0 <printf>
    DEBUG_PRINT("Spare size: %u\r\n", prog->chip_info.spare_size);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011334:	f8d3 3238 	ldr.w	r3, [r3, #568]	@ 0x238
 8011338:	4619      	mov	r1, r3
 801133a:	480b      	ldr	r0, [pc, #44]	@ (8011368 <np_print_chip_info+0x78>)
 801133c:	f001 ff40 	bl	80131c0 <printf>
    DEBUG_PRINT("Bad block mark offset: %d\r\n", prog->chip_info.bb_mark_off);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011346:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
 801134a:	4619      	mov	r1, r3
 801134c:	4807      	ldr	r0, [pc, #28]	@ (801136c <np_print_chip_info+0x7c>)
 801134e:	f001 ff37 	bl	80131c0 <printf>
}
 8011352:	bf00      	nop
 8011354:	3708      	adds	r7, #8
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	08018574 	.word	0x08018574
 8011360:	08018584 	.word	0x08018584
 8011364:	08018598 	.word	0x08018598
 8011368:	080185b0 	.word	0x080185b0
 801136c:	080185c4 	.word	0x080185c4

08011370 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("\r\nChip configure command\r\n");
 8011378:	4825      	ldr	r0, [pc, #148]	@ (8011410 <np_cmd_nand_conf+0xa0>)
 801137a:	f001 ff79 	bl	8013270 <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	2b16      	cmp	r3, #22
 8011384:	d808      	bhi.n	8011398 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("Wrong buffer length for configuration command %u\r\n",
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	4619      	mov	r1, r3
 801138c:	4821      	ldr	r0, [pc, #132]	@ (8011414 <np_cmd_nand_conf+0xa4>)
 801138e:	f001 ff17 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8011392:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8011396:	e036      	b.n	8011406 <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7ff ff6c 	bl	801127e <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff ffa2 	bl	80112f0 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	785a      	ldrb	r2, [r3, #1]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80113b6:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80113c0:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 80113c4:	461a      	mov	r2, r3
 80113c6:	4b14      	ldr	r3, [pc, #80]	@ (8011418 <np_cmd_nand_conf+0xa8>)
 80113c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 80113d8:	3a17      	subs	r2, #23
 80113da:	4611      	mov	r1, r2
 80113dc:	4798      	blx	r3
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d008      	beq.n	80113f6 <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("Wrong buffer length for hal configuration command %u\r\n",
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	4619      	mov	r1, r3
 80113ea:	480c      	ldr	r0, [pc, #48]	@ (801141c <np_cmd_nand_conf+0xac>)
 80113ec:	f001 fee8 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80113f0:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 80113f4:	e007      	b.n	8011406 <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 80113f6:	f7fe fa8d 	bl	800f914 <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	635a      	str	r2, [r3, #52]	@ 0x34

    return np_send_ok_status();
 8011400:	f7fe fb20 	bl	800fa44 <np_send_ok_status>
 8011404:	4603      	mov	r3, r0
}
 8011406:	4618      	mov	r0, r3
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	080185e0 	.word	0x080185e0
 8011414:	080185fc 	.word	0x080185fc
 8011418:	2000013c 	.word	0x2000013c
 801141c:	08018638 	.word	0x08018638

08011420 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 8011420:	b5b0      	push	{r4, r5, r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8011428:	f107 0308 	add.w	r3, r7, #8
 801142c:	4618      	mov	r0, r3
 801142e:	f7fe fac5 	bl	800f9bc <nand_bad_block_table_iter_alloc>
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	e021      	b.n	801147a <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801143c:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	fb02 f303 	mul.w	r3, r2, r3
 8011446:	2200      	movs	r2, #0
 8011448:	461c      	mov	r4, r3
 801144a:	4615      	mov	r5, r2
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011452:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8011456:	2300      	movs	r3, #0
 8011458:	4620      	mov	r0, r4
 801145a:	4629      	mov	r1, r5
 801145c:	f7fe fb32 	bl	800fac4 <np_send_bad_block_info>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d002      	beq.n	801146c <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 8011466:	f04f 33ff 	mov.w	r3, #4294967295
 801146a:	e00a      	b.n	8011482 <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 801146c:	f107 0308 	add.w	r3, r7, #8
 8011470:	4619      	mov	r1, r3
 8011472:	68f8      	ldr	r0, [r7, #12]
 8011474:	f7fe fabc 	bl	800f9f0 <nand_bad_block_table_iter_next>
 8011478:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d1da      	bne.n	8011436 <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bdb0      	pop	{r4, r5, r7, pc}

0801148a <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b084      	sub	sp, #16
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 8011492:	2001      	movs	r0, #1
 8011494:	f7fe fa2c 	bl	800f8f0 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 8011498:	f7fe fa3c 	bl	800f914 <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 801149c:	2101      	movs	r1, #1
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7fe fc6c 	bl	800fd7c <_np_cmd_read_bad_blocks>
 80114a4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80114a6:	2000      	movs	r0, #0
 80114a8:	f7fe fa22 	bl	800f8f0 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <np_cmd_read_bad_blocks+0x36>
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff ffb4 	bl	8011420 <np_send_bad_blocks>
 80114b8:	60f8      	str	r0, [r7, #12]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d001      	beq.n	80114c4 <np_cmd_read_bad_blocks+0x3a>
        return ret;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	e002      	b.n	80114ca <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 80114c4:	f7fe fabe 	bl	800fa44 <np_send_ok_status>
 80114c8:	4603      	mov	r3, r0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b086      	sub	sp, #24
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 80114dc:	2306      	movs	r3, #6
 80114de:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read version command\r\n");
 80114e0:	4810      	ldr	r0, [pc, #64]	@ (8011524 <np_cmd_version_get+0x50>)
 80114e2:	f001 fec5 	bl	8013270 <puts>

    resp.header.code = NP_RESP_DATA;
 80114e6:	2300      	movs	r3, #0
 80114e8:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	3b02      	subs	r3, #2
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 80114f4:	2303      	movs	r3, #3
 80114f6:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 80114f8:	2305      	movs	r3, #5
 80114fa:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 80114fc:	2300      	movs	r3, #0
 80114fe:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8011500:	4b09      	ldr	r3, [pc, #36]	@ (8011528 <np_cmd_version_get+0x54>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d007      	beq.n	8011518 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8011508:	4b07      	ldr	r3, [pc, #28]	@ (8011528 <np_cmd_version_get+0x54>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f107 020c 	add.w	r2, r7, #12
 8011512:	6979      	ldr	r1, [r7, #20]
 8011514:	4610      	mov	r0, r2
 8011516:	4798      	blx	r3

    return 0;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3718      	adds	r7, #24
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	08018678 	.word	0x08018678
 8011528:	20002f94 	.word	0x20002f94

0801152c <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8011534:	2201      	movs	r2, #1
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	4806      	ldr	r0, [pc, #24]	@ (8011554 <np_boot_config_read+0x28>)
 801153a:	f7fd fc19 	bl	800ed70 <flash_read>
 801153e:	4603      	mov	r3, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	da02      	bge.n	801154a <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 8011544:	f04f 33ff 	mov.w	r3, #4294967295
 8011548:	e000      	b.n	801154c <np_boot_config_read+0x20>
    }
    
    return 0;
 801154a:	2300      	movs	r3, #0
}
 801154c:	4618      	mov	r0, r3
 801154e:	3708      	adds	r7, #8
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	08003800 	.word	0x08003800

08011558 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8011560:	480c      	ldr	r0, [pc, #48]	@ (8011594 <np_boot_config_write+0x3c>)
 8011562:	f7fd fbad 	bl	800ecc0 <flash_page_erase>
 8011566:	4603      	mov	r3, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	da02      	bge.n	8011572 <np_boot_config_write+0x1a>
        return -1;
 801156c:	f04f 33ff 	mov.w	r3, #4294967295
 8011570:	e00b      	b.n	801158a <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8011572:	2201      	movs	r2, #1
 8011574:	6879      	ldr	r1, [r7, #4]
 8011576:	4807      	ldr	r0, [pc, #28]	@ (8011594 <np_boot_config_write+0x3c>)
 8011578:	f7fd fbc5 	bl	800ed06 <flash_write>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	da02      	bge.n	8011588 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 8011582:	f04f 33ff 	mov.w	r3, #4294967295
 8011586:	e000      	b.n	801158a <np_boot_config_write+0x32>
    }

    return 0;
 8011588:	2300      	movs	r3, #0
}
 801158a:	4618      	mov	r0, r3
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08003800 	.word	0x08003800

08011598 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 80115a0:	2303      	movs	r3, #3
 80115a2:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Get active image command\r\n");
 80115a4:	481c      	ldr	r0, [pc, #112]	@ (8011618 <np_cmd_active_image_get+0x80>)
 80115a6:	f001 fe63 	bl	8013270 <puts>

    if (prog->active_image == 0xff)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80115b0:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 80115b4:	2bff      	cmp	r3, #255	@ 0xff
 80115b6:	d110      	bne.n	80115da <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 80115b8:	f107 0310 	add.w	r3, r7, #16
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ffb5 	bl	801152c <np_boot_config_read>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d002      	beq.n	80115ce <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 80115c8:	f04f 33ff 	mov.w	r3, #4294967295
 80115cc:	e01f      	b.n	801160e <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 80115ce:	7c3a      	ldrb	r2, [r7, #16]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80115d6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    }

    resp.header.code = NP_RESP_DATA;
 80115da:	2300      	movs	r3, #0
 80115dc:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	3b02      	subs	r3, #2
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80115ee:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 80115f2:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 80115f4:	4b09      	ldr	r3, [pc, #36]	@ (801161c <np_cmd_active_image_get+0x84>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d007      	beq.n	801160c <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 80115fc:	4b07      	ldr	r3, [pc, #28]	@ (801161c <np_cmd_active_image_get+0x84>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f107 020c 	add.w	r2, r7, #12
 8011606:	6979      	ldr	r1, [r7, #20]
 8011608:	4610      	mov	r0, r2
 801160a:	4798      	blx	r3

    return 0;
 801160c:	2300      	movs	r3, #0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3718      	adds	r7, #24
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	08018690 	.word	0x08018690
 801161c:	20002f94 	.word	0x20002f94

08011620 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 8011620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011624:	b092      	sub	sp, #72	@ 0x48
 8011626:	af04      	add	r7, sp, #16
 8011628:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	2b11      	cmp	r3, #17
 8011630:	d808      	bhi.n	8011644 <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %u\r\n",
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	4619      	mov	r1, r3
 8011638:	4870      	ldr	r0, [pc, #448]	@ (80117fc <np_cmd_fw_update_start+0x1dc>)
 801163a:	f001 fdc1 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 801163e:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8011642:	e0d5      	b.n	80117f0 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	637b      	str	r3, [r7, #52]	@ 0x34
    addr = write_start_cmd->addr;
 801164a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801164c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8011650:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8011654:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    len = write_start_cmd->len;
 8011658:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801165a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 801165e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8011662:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("\r\n Write at 0x%" PRIx64
 8011666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801166a:	e9cd 2300 	strd	r2, r3, [sp]
 801166e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011672:	4863      	ldr	r0, [pc, #396]	@ (8011800 <np_cmd_fw_update_start+0x1e0>)
 8011674:	f001 fda4 	bl	80131c0 <printf>
    		" 0x%" PRIx64 " bytes command \r\n", addr, len);

    prog->base_addr = FLASH_START_ADDR;
 8011678:	69f9      	ldr	r1, [r7, #28]
 801167a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801167e:	f04f 0300 	mov.w	r3, #0
 8011682:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801168c:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 801168e:	69fb      	ldr	r3, [r7, #28]
 8011690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011694:	625a      	str	r2, [r3, #36]	@ 0x24
    prog->total_size = FLASH_SIZE;
 8011696:	69f9      	ldr	r1, [r7, #28]
 8011698:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801169c:	f04f 0300 	mov.w	r3, #0
 80116a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 80116a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80116a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116ac:	1884      	adds	r4, r0, r2
 80116ae:	eb41 0503 	adc.w	r5, r1, r3
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80116be:	eb10 0802 	adds.w	r8, r0, r2
 80116c2:	eb41 0903 	adc.w	r9, r1, r3
 80116c6:	45a0      	cmp	r8, r4
 80116c8:	eb79 0305 	sbcs.w	r3, r9, r5
 80116cc:	d217      	bcs.n	80116fe <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80116da:	eb10 0a02 	adds.w	sl, r0, r2
 80116de:	eb41 0b03 	adc.w	fp, r1, r3
 80116e2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80116e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80116ea:	e9cd 2300 	strd	r2, r3, [sp]
 80116ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80116f2:	4844      	ldr	r0, [pc, #272]	@ (8011804 <np_cmd_fw_update_start+0x1e4>)
 80116f4:	f001 fd64 	bl	80131c0 <printf>
            " is more then flash size 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 80116f8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80116fc:	e078      	b.n	80117f0 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	6a1b      	ldr	r3, [r3, #32]
 8011702:	2200      	movs	r2, #0
 8011704:	613b      	str	r3, [r7, #16]
 8011706:	617a      	str	r2, [r7, #20]
 8011708:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801170c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011710:	f7f3 fa4a 	bl	8004ba8 <__aeabi_uldivmod>
 8011714:	4313      	orrs	r3, r2
 8011716:	d00a      	beq.n	801172e <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	6a1b      	ldr	r3, [r3, #32]
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011722:	4839      	ldr	r0, [pc, #228]	@ (8011808 <np_cmd_fw_update_start+0x1e8>)
 8011724:	f001 fd4c 	bl	80131c0 <printf>
            " is not aligned to page size %u\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8011728:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 801172c:	e060      	b.n	80117f0 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 801172e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011732:	4313      	orrs	r3, r2
 8011734:	d105      	bne.n	8011742 <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("Length is 0\r\n");
 8011736:	4835      	ldr	r0, [pc, #212]	@ (801180c <np_cmd_fw_update_start+0x1ec>)
 8011738:	f001 fd9a 	bl	8013270 <puts>
        return NP_ERR_LEN_INVALID;
 801173c:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8011740:	e056      	b.n	80117f0 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	6a1b      	ldr	r3, [r3, #32]
 8011746:	2200      	movs	r2, #0
 8011748:	60bb      	str	r3, [r7, #8]
 801174a:	60fa      	str	r2, [r7, #12]
 801174c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011754:	f7f3 fa28 	bl	8004ba8 <__aeabi_uldivmod>
 8011758:	4313      	orrs	r3, r2
 801175a:	d00a      	beq.n	8011772 <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	6a1b      	ldr	r3, [r3, #32]
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011766:	482a      	ldr	r0, [pc, #168]	@ (8011810 <np_cmd_fw_update_start+0x1f0>)
 8011768:	f001 fd2a 	bl	80131c0 <printf>
            " is not aligned to page size %u\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 801176c:	f06f 036d 	mvn.w	r3, #109	@ 0x6d
 8011770:	e03e      	b.n	80117f0 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 8011772:	69f9      	ldr	r1, [r7, #28]
 8011774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011778:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 801177c:	69f9      	ldr	r1, [r7, #28]
 801177e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011782:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	2201      	movs	r2, #1
 801178a:	631a      	str	r2, [r3, #48]	@ 0x30

    prog->page.page = addr / prog->page_size;
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	6a1b      	ldr	r3, [r3, #32]
 8011790:	2200      	movs	r2, #0
 8011792:	603b      	str	r3, [r7, #0]
 8011794:	607a      	str	r2, [r7, #4]
 8011796:	e9d7 2300 	ldrd	r2, r3, [r7]
 801179a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801179e:	f7f3 fa03 	bl	8004ba8 <__aeabi_uldivmod>
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80117ac:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
    prog->page.offset = 0;
 80117b0:	69fb      	ldr	r3, [r7, #28]
 80117b2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80117b6:	461a      	mov	r2, r3
 80117b8:	2300      	movs	r3, #0
 80117ba:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    prog->bytes_written = 0;
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 80117c4:	3310      	adds	r3, #16
 80117c6:	4619      	mov	r1, r3
 80117c8:	f04f 0200 	mov.w	r2, #0
 80117cc:	f04f 0300 	mov.w	r3, #0
 80117d0:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 80117da:	3310      	adds	r3, #16
 80117dc:	4619      	mov	r1, r3
 80117de:	f04f 0200 	mov.w	r2, #0
 80117e2:	f04f 0300 	mov.w	r3, #0
 80117e6:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 80117ea:	f7fe f92b 	bl	800fa44 <np_send_ok_status>
 80117ee:	4603      	mov	r3, r0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3738      	adds	r7, #56	@ 0x38
 80117f4:	46bd      	mov	sp, r7
 80117f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117fa:	bf00      	nop
 80117fc:	080186ac 	.word	0x080186ac
 8011800:	08018164 	.word	0x08018164
 8011804:	080186e4 	.word	0x080186e4
 8011808:	08018728 	.word	0x08018728
 801180c:	08018030 	.word	0x08018030
 8011810:	08018760 	.word	0x08018760

08011814 <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 8011814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011818:	b0a7      	sub	sp, #156	@ 0x9c
 801181a:	af02      	add	r7, sp, #8
 801181c:	6778      	str	r0, [r7, #116]	@ 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 801181e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	2b01      	cmp	r3, #1
 8011824:	d808      	bhi.n	8011838 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 8011826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	4619      	mov	r1, r3
 801182c:	487c      	ldr	r0, [pc, #496]	@ (8011a20 <np_cmd_fw_update_data+0x20c>)
 801182e:	f001 fcc7 	bl	80131c0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8011832:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8011836:	e1d6      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8011838:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    len = write_data_cmd->len;
 8011840:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011844:	785b      	ldrb	r3, [r3, #1]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2200      	movs	r2, #0
 801184a:	60bb      	str	r3, [r7, #8]
 801184c:	60fa      	str	r2, [r7, #12]
 801184e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011852:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 8011856:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801185a:	1c94      	adds	r4, r2, #2
 801185c:	f143 0500 	adc.w	r5, r3, #0
 8011860:	2c41      	cmp	r4, #65	@ 0x41
 8011862:	f175 0300 	sbcs.w	r3, r5, #0
 8011866:	d307      	bcc.n	8011878 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("Data size is wrong 0x%" PRIx64 "\r\n", len);
 8011868:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801186c:	486d      	ldr	r0, [pc, #436]	@ (8011a24 <np_cmd_fw_update_data+0x210>)
 801186e:	f001 fca7 	bl	80131c0 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8011872:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 8011876:	e1b6      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8011878:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801187c:	f112 0802 	adds.w	r8, r2, #2
 8011880:	f143 0900 	adc.w	r9, r3, #0
 8011884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	2200      	movs	r2, #0
 801188a:	469a      	mov	sl, r3
 801188c:	4693      	mov	fp, r2
 801188e:	45d9      	cmp	r9, fp
 8011890:	bf08      	it	eq
 8011892:	45d0      	cmpeq	r8, sl
 8011894:	d010      	beq.n	80118b8 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("Buffer len 0x%u is bigger then command 0x%" PRIx64 "\r\n",
 8011896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011898:	6859      	ldr	r1, [r3, #4]
 801189a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801189e:	1c90      	adds	r0, r2, #2
 80118a0:	66b8      	str	r0, [r7, #104]	@ 0x68
 80118a2:	f143 0300 	adc.w	r3, r3, #0
 80118a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80118a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80118ac:	485e      	ldr	r0, [pc, #376]	@ (8011a28 <np_cmd_fw_update_data+0x214>)
 80118ae:	f001 fc87 	bl	80131c0 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 80118b2:	f06f 036a 	mvn.w	r3, #106	@ 0x6a
 80118b6:	e196      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 80118b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80118ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d105      	bne.n	80118cc <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("Write address is not set\r\n");
 80118c0:	485a      	ldr	r0, [pc, #360]	@ (8011a2c <np_cmd_fw_update_data+0x218>)
 80118c2:	f001 fcd5 	bl	8013270 <puts>
        return NP_ERR_ADDR_INVALID;
 80118c6:	f06f 0364 	mvn.w	r3, #100	@ 0x64
 80118ca:	e18c      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 80118cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80118ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80118d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80118d6:	2200      	movs	r2, #0
 80118d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80118da:	667a      	str	r2, [r7, #100]	@ 0x64
 80118dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80118e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80118e4:	4621      	mov	r1, r4
 80118e6:	1889      	adds	r1, r1, r2
 80118e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80118ea:	4629      	mov	r1, r5
 80118ec:	eb43 0101 	adc.w	r1, r3, r1
 80118f0:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80118f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80118f4:	6a1b      	ldr	r3, [r3, #32]
 80118f6:	2200      	movs	r2, #0
 80118f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80118fa:	657a      	str	r2, [r7, #84]	@ 0x54
 80118fc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8011900:	4623      	mov	r3, r4
 8011902:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8011906:	4602      	mov	r2, r0
 8011908:	4293      	cmp	r3, r2
 801190a:	462b      	mov	r3, r5
 801190c:	460a      	mov	r2, r1
 801190e:	4193      	sbcs	r3, r2
 8011910:	d20a      	bcs.n	8011928 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 8011912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011914:	6a1a      	ldr	r2, [r3, #32]
 8011916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011918:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801191c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011926:	e003      	b.n	8011930 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 8011928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801192c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8011930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011932:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8011936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011938:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801193c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011940:	18d0      	adds	r0, r2, r3
 8011942:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011946:	3302      	adds	r3, #2
 8011948:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801194c:	4619      	mov	r1, r3
 801194e:	f001 fd57 	bl	8013400 <memcpy>
    prog->page.offset += write_len;
 8011952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011954:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011958:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801195c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011960:	441a      	add	r2, r3
 8011962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011964:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011968:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    if (prog->page.offset == prog->page_size)
 801196c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801196e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011972:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011978:	6a1b      	ldr	r3, [r3, #32]
 801197a:	429a      	cmp	r2, r3
 801197c:	f040 8082 	bne.w	8011a84 <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8011980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011982:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8011986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011988:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801198c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801198e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8011992:	1886      	adds	r6, r0, r2
 8011994:	64be      	str	r6, [r7, #72]	@ 0x48
 8011996:	eb41 0303 	adc.w	r3, r1, r3
 801199a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801199c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80119a0:	460b      	mov	r3, r1
 80119a2:	429c      	cmp	r4, r3
 80119a4:	4613      	mov	r3, r2
 80119a6:	eb75 0303 	sbcs.w	r3, r5, r3
 80119aa:	d319      	bcc.n	80119e0 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 80119ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119ae:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80119b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80119b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119ba:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80119be:	1886      	adds	r6, r0, r2
 80119c0:	643e      	str	r6, [r7, #64]	@ 0x40
 80119c2:	eb41 0303 	adc.w	r3, r1, r3
 80119c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80119c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80119cc:	e9cd 2300 	strd	r2, r3, [sp]
 80119d0:	4622      	mov	r2, r4
 80119d2:	462b      	mov	r3, r5
 80119d4:	4816      	ldr	r0, [pc, #88]	@ (8011a30 <np_cmd_fw_update_data+0x21c>)
 80119d6:	f001 fbf3 	bl	80131c0 <printf>
                " is more then flash size 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80119da:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80119de:	e102      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 80119e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80119e6:	4613      	mov	r3, r2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fd f969 	bl	800ecc0 <flash_page_erase>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	da02      	bge.n	80119fa <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295
 80119f8:	e0f5      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 80119fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80119fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a00:	4610      	mov	r0, r2
 8011a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a04:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8011a08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a0a:	6a1b      	ldr	r3, [r3, #32]
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	f7fd f97a 	bl	800ed06 <flash_write>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	da0d      	bge.n	8011a34 <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8011a18:	f04f 33ff 	mov.w	r3, #4294967295
 8011a1c:	e0e3      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
 8011a1e:	bf00      	nop
 8011a20:	080182c0 	.word	0x080182c0
 8011a24:	08018798 	.word	0x08018798
 8011a28:	080187bc 	.word	0x080187bc
 8011a2c:	0801834c 	.word	0x0801834c
 8011a30:	080187f4 	.word	0x080187f4
        }

        prog->addr += prog->page_size;
 8011a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8011a3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a3c:	6a1b      	ldr	r3, [r3, #32]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011a42:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011a44:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011a48:	4623      	mov	r3, r4
 8011a4a:	18c3      	adds	r3, r0, r3
 8011a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a4e:	462b      	mov	r3, r5
 8011a50:	eb41 0303 	adc.w	r3, r1, r3
 8011a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8011a5c:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8011a60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a66:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011a6e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8011a72:	f8c2 31fc 	str.w	r3, [r2, #508]	@ 0x1fc
        prog->page.offset = 0;
 8011a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011a78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	2300      	movs	r3, #0
 8011a80:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    }

    bytes_left = len - write_len;
 8011a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a88:	2200      	movs	r2, #0
 8011a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a8e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8011a92:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8011a96:	4621      	mov	r1, r4
 8011a98:	1a51      	subs	r1, r2, r1
 8011a9a:	6039      	str	r1, [r7, #0]
 8011a9c:	4629      	mov	r1, r5
 8011a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8011aa2:	607b      	str	r3, [r7, #4]
 8011aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011aa8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    if (bytes_left)
 8011aac:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8011ab0:	4313      	orrs	r3, r2
 8011ab2:	d018      	beq.n	8011ae6 <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8011ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ab6:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8011aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011abe:	1c9a      	adds	r2, r3, #2
 8011ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011ac4:	4413      	add	r3, r2
 8011ac6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011ac8:	4619      	mov	r1, r3
 8011aca:	f001 fc99 	bl	8013400 <memcpy>
        prog->page.offset += bytes_left;
 8011ace:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ad0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011ad4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8011ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ada:	4413      	add	r3, r2
 8011adc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011ade:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8011ae2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    }

    prog->bytes_written += len;
 8011ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ae8:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011aec:	3310      	adds	r3, #16
 8011aee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011af2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8011af6:	1884      	adds	r4, r0, r2
 8011af8:	623c      	str	r4, [r7, #32]
 8011afa:	eb41 0303 	adc.w	r3, r1, r3
 8011afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b02:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b06:	3310      	adds	r3, #16
 8011b08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011b0c:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8011b10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b12:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b16:	3310      	adds	r3, #16
 8011b18:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011b1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b1e:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b22:	3310      	adds	r3, #16
 8011b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b28:	1a84      	subs	r4, r0, r2
 8011b2a:	61bc      	str	r4, [r7, #24]
 8011b2c:	eb61 0303 	sbc.w	r3, r1, r3
 8011b30:	61fb      	str	r3, [r7, #28]
 8011b32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b34:	6a1b      	ldr	r3, [r3, #32]
 8011b36:	2200      	movs	r2, #0
 8011b38:	613b      	str	r3, [r7, #16]
 8011b3a:	617a      	str	r2, [r7, #20]
 8011b3c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011b40:	4623      	mov	r3, r4
 8011b42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011b46:	4602      	mov	r2, r0
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	462b      	mov	r3, r5
 8011b4c:	460a      	mov	r2, r1
 8011b4e:	4193      	sbcs	r3, r2
 8011b50:	d20c      	bcs.n	8011b6c <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8011b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b54:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b58:	3310      	adds	r3, #16
 8011b5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b60:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8011b64:	4299      	cmp	r1, r3
 8011b66:	bf08      	it	eq
 8011b68:	4290      	cmpeq	r0, r2
 8011b6a:	d11b      	bne.n	8011ba4 <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8011b6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b6e:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b72:	3310      	adds	r3, #16
 8011b74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b78:	4610      	mov	r0, r2
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	f7fe fbd4 	bl	8010328 <np_send_write_ack>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d002      	beq.n	8011b8c <np_cmd_fw_update_data+0x378>
            return -1;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295
 8011b8a:	e02c      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8011b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b8e:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b92:	3310      	adds	r3, #16
 8011b94:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b9a:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011b9e:	3310      	adds	r3, #16
 8011ba0:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8011ba4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ba6:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011baa:	3310      	adds	r3, #16
 8011bac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011bb0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011bb2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8011bb6:	4290      	cmp	r0, r2
 8011bb8:	eb71 0303 	sbcs.w	r3, r1, r3
 8011bbc:	d212      	bcs.n	8011be4 <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8011bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011bc0:	f503 5308 	add.w	r3, r3, #8704	@ 0x2200
 8011bc4:	3310      	adds	r3, #16
 8011bc6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011bcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011bd0:	e9cd 2300 	strd	r2, r3, [sp]
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	4805      	ldr	r0, [pc, #20]	@ (8011bf0 <np_cmd_fw_update_data+0x3dc>)
 8011bda:	f001 faf1 	bl	80131c0 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8011bde:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 8011be2:	e000      	b.n	8011be6 <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3794      	adds	r7, #148	@ 0x94
 8011bea:	46bd      	mov	sp, r7
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	080183ac 	.word	0x080183ac

08011bf4 <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b084      	sub	sp, #16
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	631a      	str	r2, [r3, #48]	@ 0x30

    if (prog->page.offset)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00b      	beq.n	8011c28 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("Data of 0x%u length was not written\r\n",
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	481d      	ldr	r0, [pc, #116]	@ (8011c94 <np_cmd_fw_update_end+0xa0>)
 8011c1e:	f001 facf 	bl	80131c0 <printf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8011c22:	f06f 0366 	mvn.w	r3, #102	@ 0x66
 8011c26:	e030      	b.n	8011c8a <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8011c28:	f107 030c 	add.w	r3, r7, #12
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7ff fc7d 	bl	801152c <np_boot_config_read>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3c:	e025      	b.n	8011c8a <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c44:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8011c48:	2bff      	cmp	r3, #255	@ 0xff
 8011c4a:	d105      	bne.n	8011c58 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8011c4c:	7b3a      	ldrb	r2, [r7, #12]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c54:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011c5e:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	bf0c      	ite	eq
 8011c66:	2301      	moveq	r3, #1
 8011c68:	2300      	movne	r3, #0
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8011c6e:	f107 030c 	add.w	r3, r7, #12
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7ff fc70 	bl	8011558 <np_boot_config_write>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d002      	beq.n	8011c84 <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8011c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c82:	e002      	b.n	8011c8a <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8011c84:	f7fd fede 	bl	800fa44 <np_send_ok_status>
 8011c88:	4603      	mov	r3, r0
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	08018834 	.word	0x08018834

08011c98 <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	2b0c      	cmp	r3, #12
 8011cb0:	d013      	beq.n	8011cda <np_cmd_fw_update+0x42>
 8011cb2:	2b0c      	cmp	r3, #12
 8011cb4:	dc19      	bgt.n	8011cea <np_cmd_fw_update+0x52>
 8011cb6:	2b0a      	cmp	r3, #10
 8011cb8:	d002      	beq.n	8011cc0 <np_cmd_fw_update+0x28>
 8011cba:	2b0b      	cmp	r3, #11
 8011cbc:	d008      	beq.n	8011cd0 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8011cbe:	e014      	b.n	8011cea <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8011cc0:	2001      	movs	r0, #1
 8011cc2:	f7fd fe03 	bl	800f8cc <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7ff fcaa 	bl	8011620 <np_cmd_fw_update_start>
 8011ccc:	60f8      	str	r0, [r7, #12]
        break;
 8011cce:	e00d      	b.n	8011cec <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f7ff fd9f 	bl	8011814 <np_cmd_fw_update_data>
 8011cd6:	60f8      	str	r0, [r7, #12]
        break;
 8011cd8:	e008      	b.n	8011cec <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff ff8a 	bl	8011bf4 <np_cmd_fw_update_end>
 8011ce0:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	f7fd fdf2 	bl	800f8cc <led_wr_set>
        break;
 8011ce8:	e000      	b.n	8011cec <np_cmd_fw_update+0x54>
        break;
 8011cea:	bf00      	nop
    }

    if (ret < 0)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	da02      	bge.n	8011cf8 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	f7fd fdea 	bl	800f8cc <led_wr_set>

    return ret;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3710      	adds	r7, #16
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8011d02:	b480      	push	{r7}
 8011d04:	b083      	sub	sp, #12
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	4603      	mov	r3, r0
 8011d0a:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8011d0c:	79fb      	ldrb	r3, [r7, #7]
 8011d0e:	2b0c      	cmp	r3, #12
 8011d10:	bf94      	ite	ls
 8011d12:	2301      	movls	r3, #1
 8011d14:	2300      	movhi	r3, #0
 8011d16:	b2db      	uxtb	r3, r3
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr

08011d24 <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d108      	bne.n	8011d46 <np_cmd_handler+0x22>
    {
        ERROR_PRINT("Wrong buffer length for command %u\r\n", prog->rx_buf_len);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4823      	ldr	r0, [pc, #140]	@ (8011dc8 <np_cmd_handler+0xa4>)
 8011d3c:	f001 fa40 	bl	80131c0 <printf>
        return NP_ERR_LEN_INVALID;
 8011d40:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8011d44:	e03b      	b.n	8011dbe <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7ff ffd6 	bl	8011d02 <np_cmd_is_valid>
 8011d56:	4603      	mov	r3, r0
 8011d58:	f083 0301 	eor.w	r3, r3, #1
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d008      	beq.n	8011d74 <np_cmd_handler+0x50>
    {
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	4619      	mov	r1, r3
 8011d68:	4818      	ldr	r0, [pc, #96]	@ (8011dcc <np_cmd_handler+0xa8>)
 8011d6a:	f001 fa29 	bl	80131c0 <printf>
        return NP_ERR_CMD_INVALID;
 8011d6e:	f06f 036b 	mvn.w	r3, #107	@ 0x6b
 8011d72:	e024      	b.n	8011dbe <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d112      	bne.n	8011da2 <np_cmd_handler+0x7e>
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	4619      	mov	r1, r3
 8011d82:	4a13      	ldr	r2, [pc, #76]	@ (8011dd0 <np_cmd_handler+0xac>)
 8011d84:	460b      	mov	r3, r1
 8011d86:	005b      	lsls	r3, r3, #1
 8011d88:	440b      	add	r3, r1
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	4413      	add	r3, r2
 8011d8e:	3304      	adds	r3, #4
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d005      	beq.n	8011da2 <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("Chip is not configured\r\n");
 8011d96:	480f      	ldr	r0, [pc, #60]	@ (8011dd4 <np_cmd_handler+0xb0>)
 8011d98:	f001 fa6a 	bl	8013270 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8011d9c:	f06f 0369 	mvn.w	r3, #105	@ 0x69
 8011da0:	e00d      	b.n	8011dbe <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	4619      	mov	r1, r3
 8011da8:	4a09      	ldr	r2, [pc, #36]	@ (8011dd0 <np_cmd_handler+0xac>)
 8011daa:	460b      	mov	r3, r1
 8011dac:	005b      	lsls	r3, r3, #1
 8011dae:	440b      	add	r3, r1
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	4413      	add	r3, r2
 8011db4:	3308      	adds	r3, #8
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	4798      	blx	r3
 8011dbc:	4603      	mov	r3, r0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	08018864 	.word	0x08018864
 8011dcc:	08018890 	.word	0x08018890
 8011dd0:	20000148 	.word	0x20000148
 8011dd4:	080188b0 	.word	0x080188b0

08011dd8 <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8011de0:	4b12      	ldr	r3, [pc, #72]	@ (8011e2c <np_packet_handler+0x54>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	4610      	mov	r0, r2
 8011dea:	4798      	blx	r3
 8011dec:	4602      	mov	r2, r0
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d012      	beq.n	8011e20 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f7ff ff92 	bl	8011d24 <np_cmd_handler>
 8011e00:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8011e02:	4b0a      	ldr	r3, [pc, #40]	@ (8011e2c <np_packet_handler+0x54>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	4798      	blx	r3

        if (ret < 0)
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	dae7      	bge.n	8011de0 <np_packet_handler+0x8>
            np_send_error(-ret);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	425b      	negs	r3, r3
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7fd fe2f 	bl	800fa7c <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8011e1e:	e7df      	b.n	8011de0 <np_packet_handler+0x8>
            break;
 8011e20:	bf00      	nop
    }
    while (1);
}
 8011e22:	bf00      	nop
 8011e24:	3710      	adds	r7, #16
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}
 8011e2a:	bf00      	nop
 8011e2c:	20002f94 	.word	0x20002f94

08011e30 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e3e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d008      	beq.n	8011e58 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7fe fc32 	bl	80106b0 <np_nand_handle_status>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d002      	beq.n	8011e58 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8011e52:	2099      	movs	r0, #153	@ 0x99
 8011e54:	f7fd fe12 	bl	800fa7c <np_send_error>
    }
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <np_init>:

// NP 初始化函数
void np_init()
{
 8011e60:	b480      	push	{r7}
 8011e62:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8011e64:	4b05      	ldr	r3, [pc, #20]	@ (8011e7c <np_init+0x1c>)
 8011e66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8011e6a:	22ff      	movs	r2, #255	@ 0xff
 8011e6c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
}
 8011e70:	bf00      	nop
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	20002f98 	.word	0x20002f98

08011e80 <np_handler>:

// NP 处理函数
void np_handler()
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8011e84:	4803      	ldr	r0, [pc, #12]	@ (8011e94 <np_handler+0x14>)
 8011e86:	f7ff ffa7 	bl	8011dd8 <np_packet_handler>
    np_nand_handler(&prog);
 8011e8a:	4802      	ldr	r0, [pc, #8]	@ (8011e94 <np_handler+0x14>)
 8011e8c:	f7ff ffd0 	bl	8011e30 <np_nand_handler>
}
 8011e90:	bf00      	nop
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	20002f98 	.word	0x20002f98

08011e98 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8011ea0:	4a04      	ldr	r2, [pc, #16]	@ (8011eb4 <np_comm_register+0x1c>)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6013      	str	r3, [r2, #0]

    return 0;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	20002f94 	.word	0x20002f94

08011eb8 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af00      	add	r7, sp, #0
//	HAL_SPI_MspInit(&hspi1);
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ebe:	f107 030c 	add.w	r3, r7, #12
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	601a      	str	r2, [r3, #0]
 8011ec6:	605a      	str	r2, [r3, #4]
 8011ec8:	609a      	str	r2, [r3, #8]
 8011eca:	60da      	str	r2, [r3, #12]
 8011ecc:	611a      	str	r2, [r3, #16]

    /* 使能SPI外设时钟 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011ece:	2300      	movs	r3, #0
 8011ed0:	60bb      	str	r3, [r7, #8]
 8011ed2:	4b39      	ldr	r3, [pc, #228]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ed6:	4a38      	ldr	r2, [pc, #224]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8011ede:	4b36      	ldr	r3, [pc, #216]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011ee6:	60bb      	str	r3, [r7, #8]
 8011ee8:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011eea:	2300      	movs	r3, #0
 8011eec:	607b      	str	r3, [r7, #4]
 8011eee:	4b32      	ldr	r3, [pc, #200]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ef2:	4a31      	ldr	r2, [pc, #196]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011ef4:	f043 0301 	orr.w	r3, r3, #1
 8011ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8011efa:	4b2f      	ldr	r3, [pc, #188]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011efe:	f003 0301 	and.w	r3, r3, #1
 8011f02:	607b      	str	r3, [r7, #4]
 8011f04:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011f06:	2300      	movs	r3, #0
 8011f08:	603b      	str	r3, [r7, #0]
 8011f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011f10:	f043 0302 	orr.w	r3, r3, #2
 8011f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8011f16:	4b28      	ldr	r3, [pc, #160]	@ (8011fb8 <spi_flash_gpio_init+0x100>)
 8011f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	603b      	str	r3, [r7, #0]
 8011f20:	683b      	ldr	r3, [r7, #0]
    /*SPI1 GPIO Configuration*/
    /* 配置SPI SCK引脚 */
    GPIO_InitStruct.Pin = SPI_FLASH_SCK_PIN;
 8011f22:	2308      	movs	r3, #8
 8011f24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f26:	2302      	movs	r3, #2
 8011f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f2a:	2302      	movs	r3, #2
 8011f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f2e:	2303      	movs	r3, #3
 8011f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011f32:	2305      	movs	r3, #5
 8011f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011f36:	f107 030c 	add.w	r3, r7, #12
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	481f      	ldr	r0, [pc, #124]	@ (8011fbc <spi_flash_gpio_init+0x104>)
 8011f3e:	f7f4 f9ed 	bl	800631c <HAL_GPIO_Init>

    /* 配置SPI MISO引脚 */
    GPIO_InitStruct.Pin = SPI_FLASH_MOSI_PIN;
 8011f42:	2380      	movs	r3, #128	@ 0x80
 8011f44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f46:	2302      	movs	r3, #2
 8011f48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f4e:	2303      	movs	r3, #3
 8011f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011f52:	2305      	movs	r3, #5
 8011f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f56:	f107 030c 	add.w	r3, r7, #12
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4818      	ldr	r0, [pc, #96]	@ (8011fc0 <spi_flash_gpio_init+0x108>)
 8011f5e:	f7f4 f9dd 	bl	800631c <HAL_GPIO_Init>

    /* 配置SPI MOSI引脚 */
    GPIO_InitStruct.Pin = SPI_FLASH_MISO_PIN;
 8011f62:	2340      	movs	r3, #64	@ 0x40
 8011f64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f66:	2302      	movs	r3, #2
 8011f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f6e:	2303      	movs	r3, #3
 8011f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8011f72:	2305      	movs	r3, #5
 8011f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f76:	f107 030c 	add.w	r3, r7, #12
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	4810      	ldr	r0, [pc, #64]	@ (8011fc0 <spi_flash_gpio_init+0x108>)
 8011f7e:	f7f4 f9cd 	bl	800631c <HAL_GPIO_Init>

    /* 配置SPI CS引脚 */
    GPIO_InitStruct.Pin = SPI_FLASH_CS_PIN;
 8011f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f90:	2303      	movs	r3, #3
 8011f92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f94:	f107 030c 	add.w	r3, r7, #12
 8011f98:	4619      	mov	r1, r3
 8011f9a:	4809      	ldr	r0, [pc, #36]	@ (8011fc0 <spi_flash_gpio_init+0x108>)
 8011f9c:	f7f4 f9be 	bl	800631c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	2023      	movs	r0, #35	@ 0x23
 8011fa6:	f7f3 fe0a 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8011faa:	2023      	movs	r0, #35	@ 0x23
 8011fac:	f7f3 fe23 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8011fb0:	bf00      	nop
 8011fb2:	3720      	adds	r7, #32
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	40023800 	.word	0x40023800
 8011fbc:	40020400 	.word	0x40020400
 8011fc0:	40020000 	.word	0x40020000

08011fc4 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
//	HAL_SPI_MspDeInit(&hspi1);

    __HAL_RCC_SPI1_CLK_DISABLE();
 8011fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011ff8 <spi_flash_gpio_uninit+0x34>)
 8011fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8011ff8 <spi_flash_gpio_uninit+0x34>)
 8011fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011fd2:	6453      	str	r3, [r2, #68]	@ 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PA15    ------> SPI1_CS
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8011fd4:	21c0      	movs	r1, #192	@ 0xc0
 8011fd6:	4809      	ldr	r0, [pc, #36]	@ (8011ffc <spi_flash_gpio_uninit+0x38>)
 8011fd8:	f7f4 fb3c 	bl	8006654 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8011fdc:	2108      	movs	r1, #8
 8011fde:	4808      	ldr	r0, [pc, #32]	@ (8012000 <spi_flash_gpio_uninit+0x3c>)
 8011fe0:	f7f4 fb38 	bl	8006654 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN);
 8011fe4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011fe8:	4804      	ldr	r0, [pc, #16]	@ (8011ffc <spi_flash_gpio_uninit+0x38>)
 8011fea:	f7f4 fb33 	bl	8006654 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8011fee:	2023      	movs	r0, #35	@ 0x23
 8011ff0:	f7f3 fe0f 	bl	8005c12 <HAL_NVIC_DisableIRQ>
}
 8011ff4:	bf00      	nop
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	40023800 	.word	0x40023800
 8011ffc:	40020000 	.word	0x40020000
 8012000:	40020400 	.word	0x40020400

08012004 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8012004:	b580      	push	{r7, lr}
 8012006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8012008:	2200      	movs	r2, #0
 801200a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801200e:	4802      	ldr	r0, [pc, #8]	@ (8012018 <spi_flash_select_chip+0x14>)
 8012010:	f7f4 fc1c 	bl	800684c <HAL_GPIO_WritePin>
}
 8012014:	bf00      	nop
 8012016:	bd80      	pop	{r7, pc}
 8012018:	40020000 	.word	0x40020000

0801201c <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 801201c:	b580      	push	{r7, lr}
 801201e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8012020:	2201      	movs	r2, #1
 8012022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012026:	4802      	ldr	r0, [pc, #8]	@ (8012030 <spi_flash_deselect_chip+0x14>)
 8012028:	f7f4 fc10 	bl	800684c <HAL_GPIO_WritePin>
}
 801202c:	bf00      	nop
 801202e:	bd80      	pop	{r7, pc}
 8012030:	40020000 	.word	0x40020000

08012034 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 801203c:	4b1f      	ldr	r3, [pc, #124]	@ (80120bc <spi_flash_get_baud_rate_prescaler+0x88>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4a1f      	ldr	r2, [pc, #124]	@ (80120c0 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8012042:	fba2 2303 	umull	r2, r3, r2, r3
 8012046:	099b      	lsrs	r3, r3, #6
 8012048:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	085b      	lsrs	r3, r3, #1
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	429a      	cmp	r2, r3
 8012052:	d301      	bcc.n	8012058 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8012054:	2300      	movs	r3, #0
 8012056:	e02a      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	089b      	lsrs	r3, r3, #2
 801205c:	687a      	ldr	r2, [r7, #4]
 801205e:	429a      	cmp	r2, r3
 8012060:	d301      	bcc.n	8012066 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 8012062:	2308      	movs	r3, #8
 8012064:	e023      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	08db      	lsrs	r3, r3, #3
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	429a      	cmp	r2, r3
 801206e:	d301      	bcc.n	8012074 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8012070:	2310      	movs	r3, #16
 8012072:	e01c      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	091b      	lsrs	r3, r3, #4
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	429a      	cmp	r2, r3
 801207c:	d301      	bcc.n	8012082 <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 801207e:	2318      	movs	r3, #24
 8012080:	e015      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	095b      	lsrs	r3, r3, #5
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	429a      	cmp	r2, r3
 801208a:	d301      	bcc.n	8012090 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 801208c:	2320      	movs	r3, #32
 801208e:	e00e      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	099b      	lsrs	r3, r3, #6
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	429a      	cmp	r2, r3
 8012098:	d301      	bcc.n	801209e <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 801209a:	2328      	movs	r3, #40	@ 0x28
 801209c:	e007      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	09db      	lsrs	r3, r3, #7
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d301      	bcc.n	80120ac <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 80120a8:	2330      	movs	r3, #48	@ 0x30
 80120aa:	e000      	b.n	80120ae <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 80120ac:	2338      	movs	r3, #56	@ 0x38
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3714      	adds	r7, #20
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr
 80120ba:	bf00      	nop
 80120bc:	20000000 	.word	0x20000000
 80120c0:	10624dd3 	.word	0x10624dd3

080120c4 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 80120c4:	b590      	push	{r4, r7, lr}
 80120c6:	b083      	sub	sp, #12
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	2b0e      	cmp	r3, #14
 80120d2:	d802      	bhi.n	80120da <spi_flash_init+0x16>
        return -1; 
 80120d4:	f04f 33ff 	mov.w	r3, #4294967295
 80120d8:	e04f      	b.n	801217a <spi_flash_init+0xb6>
    spi_conf = *(spi_conf_t *)conf;
 80120da:	4b2a      	ldr	r3, [pc, #168]	@ (8012184 <spi_flash_init+0xc0>)
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	4614      	mov	r4, r2
 80120e0:	6820      	ldr	r0, [r4, #0]
 80120e2:	6861      	ldr	r1, [r4, #4]
 80120e4:	68a2      	ldr	r2, [r4, #8]
 80120e6:	c307      	stmia	r3!, {r0, r1, r2}
 80120e8:	89a2      	ldrh	r2, [r4, #12]
 80120ea:	7ba1      	ldrb	r1, [r4, #14]
 80120ec:	801a      	strh	r2, [r3, #0]
 80120ee:	460a      	mov	r2, r1
 80120f0:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 80120f2:	f7ff fee1 	bl	8011eb8 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80120f6:	f7ff ff91 	bl	801201c <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 80120fa:	4b23      	ldr	r3, [pc, #140]	@ (8012188 <spi_flash_init+0xc4>)
 80120fc:	4a23      	ldr	r2, [pc, #140]	@ (801218c <spi_flash_init+0xc8>)
 80120fe:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8012100:	4b21      	ldr	r3, [pc, #132]	@ (8012188 <spi_flash_init+0xc4>)
 8012102:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012106:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012108:	4b1f      	ldr	r3, [pc, #124]	@ (8012188 <spi_flash_init+0xc4>)
 801210a:	2200      	movs	r2, #0
 801210c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801210e:	4b1e      	ldr	r3, [pc, #120]	@ (8012188 <spi_flash_init+0xc4>)
 8012110:	2200      	movs	r2, #0
 8012112:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012114:	4b1c      	ldr	r3, [pc, #112]	@ (8012188 <spi_flash_init+0xc4>)
 8012116:	2200      	movs	r2, #0
 8012118:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801211a:	4b1b      	ldr	r3, [pc, #108]	@ (8012188 <spi_flash_init+0xc4>)
 801211c:	2200      	movs	r2, #0
 801211e:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8012120:	4b19      	ldr	r3, [pc, #100]	@ (8012188 <spi_flash_init+0xc4>)
 8012122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012126:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler =
    		spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8012128:	4b16      	ldr	r3, [pc, #88]	@ (8012184 <spi_flash_init+0xc0>)
 801212a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff ff80 	bl	8012034 <spi_flash_get_baud_rate_prescaler>
 8012134:	4603      	mov	r3, r0
 8012136:	461a      	mov	r2, r3
    hspi1.Init.BaudRatePrescaler =
 8012138:	4b13      	ldr	r3, [pc, #76]	@ (8012188 <spi_flash_init+0xc4>)
 801213a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801213c:	4b12      	ldr	r3, [pc, #72]	@ (8012188 <spi_flash_init+0xc4>)
 801213e:	2200      	movs	r2, #0
 8012140:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012142:	4b11      	ldr	r3, [pc, #68]	@ (8012188 <spi_flash_init+0xc4>)
 8012144:	2200      	movs	r2, #0
 8012146:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012148:	4b0f      	ldr	r3, [pc, #60]	@ (8012188 <spi_flash_init+0xc4>)
 801214a:	2200      	movs	r2, #0
 801214c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 801214e:	4b0e      	ldr	r3, [pc, #56]	@ (8012188 <spi_flash_init+0xc4>)
 8012150:	220a      	movs	r2, #10
 8012152:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012154:	480c      	ldr	r0, [pc, #48]	@ (8012188 <spi_flash_init+0xc4>)
 8012156:	f7f6 feb3 	bl	8008ec0 <HAL_SPI_Init>
 801215a:	4603      	mov	r3, r0
 801215c:	2b00      	cmp	r3, #0
 801215e:	d001      	beq.n	8012164 <spi_flash_init+0xa0>
    {
      Error_Handler();
 8012160:	f7f3 f88a 	bl	8005278 <Error_Handler>
    }

    /* 使能SPI */
    __HAL_SPI_ENABLE(&hspi1);
 8012164:	4b08      	ldr	r3, [pc, #32]	@ (8012188 <spi_flash_init+0xc4>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	4b07      	ldr	r3, [pc, #28]	@ (8012188 <spi_flash_init+0xc4>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012172:	601a      	str	r2, [r3, #0]

    spi_flash_chip_init();  // 初始化SPI Flash芯片
 8012174:	f000 f97a 	bl	801246c <spi_flash_chip_init>

    return 0;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	370c      	adds	r7, #12
 801217e:	46bd      	mov	sp, r7
 8012180:	bd90      	pop	{r4, r7, pc}
 8012182:	bf00      	nop
 8012184:	200073e8 	.word	0x200073e8
 8012188:	20000968 	.word	0x20000968
 801218c:	40013000 	.word	0x40013000

08012190 <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8012190:	b580      	push	{r7, lr}
 8012192:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 8012194:	f7ff ff16 	bl	8011fc4 <spi_flash_gpio_uninit>

    __HAL_SPI_DISABLE(&hspi1);
 8012198:	4b04      	ldr	r3, [pc, #16]	@ (80121ac <spi_flash_uninit+0x1c>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	4b03      	ldr	r3, [pc, #12]	@ (80121ac <spi_flash_uninit+0x1c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80121a6:	601a      	str	r2, [r3, #0]
}
 80121a8:	bf00      	nop
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	20000968 	.word	0x20000968

080121b0 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af02      	add	r7, sp, #8
 80121b6:	4603      	mov	r3, r0
 80121b8:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0x1000000;
 80121ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80121be:	60fb      	str	r3, [r7, #12]
  uint8_t rx_byte = 0;
 80121c0:	2300      	movs	r3, #0
 80121c2:	72bb      	strb	r3, [r7, #10]

//  HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout);
	HAL_StatusTypeDef 				status;
	if((status = HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout)) != HAL_OK )
 80121c4:	f107 020a 	add.w	r2, r7, #10
 80121c8:	1df9      	adds	r1, r7, #7
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	2301      	movs	r3, #1
 80121d0:	4811      	ldr	r0, [pc, #68]	@ (8012218 <spi_flash_send_byte+0x68>)
 80121d2:	f7f6 fefe 	bl	8008fd2 <HAL_SPI_TransmitReceive>
 80121d6:	4603      	mov	r3, r0
 80121d8:	72fb      	strb	r3, [r7, #11]
 80121da:	7afb      	ldrb	r3, [r7, #11]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d015      	beq.n	801220c <spi_flash_send_byte+0x5c>
	{
		if (status == HAL_ERROR)
 80121e0:	7afb      	ldrb	r3, [r7, #11]
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d103      	bne.n	80121ee <spi_flash_send_byte+0x3e>
	    {
		    printf("SPI transmission error!\n");
 80121e6:	480d      	ldr	r0, [pc, #52]	@ (801221c <spi_flash_send_byte+0x6c>)
 80121e8:	f001 f842 	bl	8013270 <puts>
 80121ec:	e00c      	b.n	8012208 <spi_flash_send_byte+0x58>
	    }
		else if (status == HAL_TIMEOUT)
 80121ee:	7afb      	ldrb	r3, [r7, #11]
 80121f0:	2b03      	cmp	r3, #3
 80121f2:	d103      	bne.n	80121fc <spi_flash_send_byte+0x4c>
		{
			 printf("SPI transmission timeout!\n");
 80121f4:	480a      	ldr	r0, [pc, #40]	@ (8012220 <spi_flash_send_byte+0x70>)
 80121f6:	f001 f83b 	bl	8013270 <puts>
 80121fa:	e005      	b.n	8012208 <spi_flash_send_byte+0x58>
		}
		else if (status == HAL_BUSY)
 80121fc:	7afb      	ldrb	r3, [r7, #11]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d102      	bne.n	8012208 <spi_flash_send_byte+0x58>
		{
			 printf("SPI is busy!\n");
 8012202:	4808      	ldr	r0, [pc, #32]	@ (8012224 <spi_flash_send_byte+0x74>)
 8012204:	f001 f834 	bl	8013270 <puts>
	    }
		return 0;
 8012208:	2300      	movs	r3, #0
 801220a:	e000      	b.n	801220e <spi_flash_send_byte+0x5e>
	}

  return rx_byte;
 801220c:	7abb      	ldrb	r3, [r7, #10]
}
 801220e:	4618      	mov	r0, r3
 8012210:	3710      	adds	r7, #16
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	20000968 	.word	0x20000968
 801221c:	080188d0 	.word	0x080188d0
 8012220:	080188e8 	.word	0x080188e8
 8012224:	08018904 	.word	0x08018904

08012228 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8012228:	b580      	push	{r7, lr}
 801222a:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 801222c:	20ff      	movs	r0, #255	@ 0xff
 801222e:	f7ff ffbf 	bl	80121b0 <spi_flash_send_byte>
 8012232:	4603      	mov	r3, r0
}
 8012234:	4618      	mov	r0, r3
 8012236:	bd80      	pop	{r7, pc}

08012238 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	4603      	mov	r3, r0
 8012240:	460a      	mov	r2, r1
 8012242:	71fb      	strb	r3, [r7, #7]
 8012244:	4613      	mov	r3, r2
 8012246:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8012248:	f7ff fedc 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_SET_FEATURE);  // 发送设置特征的操作码
 801224c:	201f      	movs	r0, #31
 801224e:	f7ff ffaf 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8012252:	79fb      	ldrb	r3, [r7, #7]
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff ffab 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 801225a:	79bb      	ldrb	r3, [r7, #6]
 801225c:	4618      	mov	r0, r3
 801225e:	f7ff ffa7 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8012262:	f7ff fedb 	bl	801201c <spi_flash_deselect_chip>
}
 8012266:	bf00      	nop
 8012268:	3708      	adds	r7, #8
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 801226e:	b580      	push	{r7, lr}
 8012270:	b082      	sub	sp, #8
 8012272:	af00      	add	r7, sp, #0
 8012274:	4603      	mov	r3, r0
 8012276:	6039      	str	r1, [r7, #0]
 8012278:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 801227a:	f7ff fec3 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_GET_FEATURE);  // 发送获取特征的操作码
 801227e:	200f      	movs	r0, #15
 8012280:	f7ff ff96 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8012284:	79fb      	ldrb	r3, [r7, #7]
 8012286:	4618      	mov	r0, r3
 8012288:	f7ff ff92 	bl	80121b0 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 801228c:	f7ff ffcc 	bl	8012228 <spi_flash_read_byte>
 8012290:	4603      	mov	r3, r0
 8012292:	461a      	mov	r2, r3
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8012298:	f7ff fec0 	bl	801201c <spi_flash_deselect_chip>
}
 801229c:	bf00      	nop
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 80122aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80122ae:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_ADDR_STATUS, &status);  // 获取状态
 80122b0:	1cfb      	adds	r3, r7, #3
 80122b2:	4619      	mov	r1, r3
 80122b4:	20c0      	movs	r0, #192	@ 0xc0
 80122b6:	f7ff ffda 	bl	801226e <spi_flash_get_feature>
    } while((status & _VAL_OIP) && timeout);
 80122ba:	78fb      	ldrb	r3, [r7, #3]
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d002      	beq.n	80122ca <spi_flash_read_status+0x26>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d1f2      	bne.n	80122b0 <spi_flash_read_status+0xc>

    if (!timeout)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d101      	bne.n	80122d4 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 80122d0:	2303      	movs	r3, #3
 80122d2:	e02b      	b.n	801232c <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 80122d4:	4b17      	ldr	r3, [pc, #92]	@ (8012334 <spi_flash_read_status+0x90>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b03      	cmp	r3, #3
 80122da:	d014      	beq.n	8012306 <spi_flash_read_status+0x62>
 80122dc:	2b03      	cmp	r3, #3
 80122de:	d81d      	bhi.n	801231c <spi_flash_read_status+0x78>
 80122e0:	2b01      	cmp	r3, #1
 80122e2:	d002      	beq.n	80122ea <spi_flash_read_status+0x46>
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d007      	beq.n	80122f8 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 80122e8:	e018      	b.n	801231c <spi_flash_read_status+0x78>
            if(status & _VAL_ERASE_FAIL)
 80122ea:	78fb      	ldrb	r3, [r7, #3]
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d015      	beq.n	8012320 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 80122f4:	2302      	movs	r3, #2
 80122f6:	e019      	b.n	801232c <spi_flash_read_status+0x88>
            if(status & _VAL_PROGRAM_FAIL)
 80122f8:	78fb      	ldrb	r3, [r7, #3]
 80122fa:	f003 0308 	and.w	r3, r3, #8
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d010      	beq.n	8012324 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 8012302:	2302      	movs	r3, #2
 8012304:	e012      	b.n	801232c <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 8012306:	4b0c      	ldr	r3, [pc, #48]	@ (8012338 <spi_flash_read_status+0x94>)
 8012308:	799a      	ldrb	r2, [r3, #6]
 801230a:	78fb      	ldrb	r3, [r7, #3]
 801230c:	4013      	ands	r3, r2
 801230e:	b2da      	uxtb	r2, r3
 8012310:	4b09      	ldr	r3, [pc, #36]	@ (8012338 <spi_flash_read_status+0x94>)
 8012312:	79db      	ldrb	r3, [r3, #7]
 8012314:	429a      	cmp	r2, r3
 8012316:	d107      	bne.n	8012328 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 8012318:	2302      	movs	r3, #2
 801231a:	e007      	b.n	801232c <spi_flash_read_status+0x88>
            break;
 801231c:	bf00      	nop
 801231e:	e004      	b.n	801232a <spi_flash_read_status+0x86>
            break;
 8012320:	bf00      	nop
 8012322:	e002      	b.n	801232a <spi_flash_read_status+0x86>
            break;
 8012324:	bf00      	nop
 8012326:	e000      	b.n	801232a <spi_flash_read_status+0x86>
            break;
 8012328:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 801232a:	2300      	movs	r3, #0
}
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	200073f8 	.word	0x200073f8
 8012338:	200073e8 	.word	0x200073e8

0801233c <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 8012344:	4b18      	ldr	r3, [pc, #96]	@ (80123a8 <spi_flash_select_die_cmd+0x6c>)
 8012346:	7a9b      	ldrb	r3, [r3, #10]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d002      	beq.n	8012352 <spi_flash_select_die_cmd+0x16>
 801234c:	2b02      	cmp	r3, #2
 801234e:	d00d      	beq.n	801236c <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8012350:	e026      	b.n	80123a0 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 8012352:	f7ff fe57 	bl	8012004 <spi_flash_select_chip>
        spi_flash_send_byte(_OP_DIE_SELECT);  // 发送选择芯片的指令
 8012356:	20c2      	movs	r0, #194	@ 0xc2
 8012358:	f7ff ff2a 	bl	80121b0 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	b2db      	uxtb	r3, r3
 8012360:	4618      	mov	r0, r3
 8012362:	f7ff ff25 	bl	80121b0 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8012366:	f7ff fe59 	bl	801201c <spi_flash_deselect_chip>
        break;
 801236a:	e019      	b.n	80123a0 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 801236c:	f107 030f 	add.w	r3, r7, #15
 8012370:	4619      	mov	r1, r3
 8012372:	20d0      	movs	r0, #208	@ 0xd0
 8012374:	f7ff ff7b 	bl	801226e <spi_flash_get_feature>
        if(die == 0) {
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d105      	bne.n	801238a <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 801237e:	7bfb      	ldrb	r3, [r7, #15]
 8012380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012384:	b2db      	uxtb	r3, r3
 8012386:	73fb      	strb	r3, [r7, #15]
 8012388:	e004      	b.n	8012394 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 801238a:	7bfb      	ldrb	r3, [r7, #15]
 801238c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012390:	b2db      	uxtb	r3, r3
 8012392:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8012394:	7bfb      	ldrb	r3, [r7, #15]
 8012396:	4619      	mov	r1, r3
 8012398:	20d0      	movs	r0, #208	@ 0xd0
 801239a:	f7ff ff4d 	bl	8012238 <spi_flash_set_feature>
        break;
 801239e:	bf00      	nop
    }
}
 80123a0:	bf00      	nop
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	200073e8 	.word	0x200073e8

080123ac <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 80123b4:	2300      	movs	r3, #0
 80123b6:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 80123b8:	4b0f      	ldr	r3, [pc, #60]	@ (80123f8 <spi_flash_select_die+0x4c>)
 80123ba:	7a9b      	ldrb	r3, [r3, #10]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d017      	beq.n	80123f0 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 80123c0:	4b0d      	ldr	r3, [pc, #52]	@ (80123f8 <spi_flash_select_die+0x4c>)
 80123c2:	7a5b      	ldrb	r3, [r3, #9]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d104      	bne.n	80123d2 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	0c1b      	lsrs	r3, r3, #16
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	60fb      	str	r3, [r7, #12]
 80123d0:	e003      	b.n	80123da <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	0c5b      	lsrs	r3, r3, #17
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 80123da:	4b08      	ldr	r3, [pc, #32]	@ (80123fc <spi_flash_select_die+0x50>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d005      	beq.n	80123f0 <spi_flash_select_die+0x44>
            current_die = die;
 80123e4:	4a05      	ldr	r2, [pc, #20]	@ (80123fc <spi_flash_select_die+0x50>)
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f7ff ffa6 	bl	801233c <spi_flash_select_die_cmd>
        }
    }
}
 80123f0:	bf00      	nop
 80123f2:	3710      	adds	r7, #16
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	200073e8 	.word	0x200073e8
 80123fc:	200073fc 	.word	0x200073fc

08012400 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8012408:	f7ff fdfc 	bl	8012004 <spi_flash_select_chip>

    spi_flash_send_byte(_OP_READ_ID);  // 发送读取 ID 的指令
 801240c:	209f      	movs	r0, #159	@ 0x9f
 801240e:	f7ff fecf 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8012412:	2000      	movs	r0, #0
 8012414:	f7ff fecc 	bl	80121b0 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 8012418:	f7ff ff06 	bl	8012228 <spi_flash_read_byte>
 801241c:	4603      	mov	r3, r0
 801241e:	461a      	mov	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8012424:	f7ff ff00 	bl	8012228 <spi_flash_read_byte>
 8012428:	4603      	mov	r3, r0
 801242a:	461a      	mov	r2, r3
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8012430:	f7ff fefa 	bl	8012228 <spi_flash_read_byte>
 8012434:	4603      	mov	r3, r0
 8012436:	461a      	mov	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 801243c:	f7ff fef4 	bl	8012228 <spi_flash_read_byte>
 8012440:	4603      	mov	r3, r0
 8012442:	461a      	mov	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8012448:	f7ff feee 	bl	8012228 <spi_flash_read_byte>
 801244c:	4603      	mov	r3, r0
 801244e:	461a      	mov	r2, r3
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8012454:	f7ff fee8 	bl	8012228 <spi_flash_read_byte>
 8012458:	4603      	mov	r3, r0
 801245a:	461a      	mov	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8012460:	f7ff fddc 	bl	801201c <spi_flash_deselect_chip>
}
 8012464:	bf00      	nop
 8012466:	3708      	adds	r7, #8
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 8012470:	4b19      	ldr	r3, [pc, #100]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 8012472:	7a9b      	ldrb	r3, [r3, #10]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d019      	beq.n	80124ac <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 8012478:	2000      	movs	r0, #0
 801247a:	f7ff ff5f 	bl	801233c <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 801247e:	4b16      	ldr	r3, [pc, #88]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 8012480:	791b      	ldrb	r3, [r3, #4]
 8012482:	2bff      	cmp	r3, #255	@ 0xff
 8012484:	d005      	beq.n	8012492 <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8012486:	4b14      	ldr	r3, [pc, #80]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 8012488:	791b      	ldrb	r3, [r3, #4]
 801248a:	4619      	mov	r1, r3
 801248c:	20b0      	movs	r0, #176	@ 0xb0
 801248e:	f7ff fed3 	bl	8012238 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 8012492:	4b11      	ldr	r3, [pc, #68]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 8012494:	795b      	ldrb	r3, [r3, #5]
 8012496:	2bff      	cmp	r3, #255	@ 0xff
 8012498:	d005      	beq.n	80124a6 <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 801249a:	4b0f      	ldr	r3, [pc, #60]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 801249c:	795b      	ldrb	r3, [r3, #5]
 801249e:	4619      	mov	r1, r3
 80124a0:	20a0      	movs	r0, #160	@ 0xa0
 80124a2:	f7ff fec9 	bl	8012238 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 80124a6:	2001      	movs	r0, #1
 80124a8:	f7ff ff48 	bl	801233c <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 80124ac:	4b0a      	ldr	r3, [pc, #40]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 80124ae:	791b      	ldrb	r3, [r3, #4]
 80124b0:	2bff      	cmp	r3, #255	@ 0xff
 80124b2:	d005      	beq.n	80124c0 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 80124b4:	4b08      	ldr	r3, [pc, #32]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 80124b6:	791b      	ldrb	r3, [r3, #4]
 80124b8:	4619      	mov	r1, r3
 80124ba:	20b0      	movs	r0, #176	@ 0xb0
 80124bc:	f7ff febc 	bl	8012238 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 80124c0:	4b05      	ldr	r3, [pc, #20]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 80124c2:	795b      	ldrb	r3, [r3, #5]
 80124c4:	2bff      	cmp	r3, #255	@ 0xff
 80124c6:	d005      	beq.n	80124d4 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 80124c8:	4b03      	ldr	r3, [pc, #12]	@ (80124d8 <spi_flash_chip_init+0x6c>)
 80124ca:	795b      	ldrb	r3, [r3, #5]
 80124cc:	4619      	mov	r1, r3
 80124ce:	20a0      	movs	r0, #160	@ 0xa0
 80124d0:	f7ff feb2 	bl	8012238 <spi_flash_set_feature>
}
 80124d4:	bf00      	nop
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	200073e8 	.word	0x200073e8

080124dc <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 80124e0:	f7ff fd90 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_WRITE_ENABLE);  // 发送写使能指令
 80124e4:	2006      	movs	r0, #6
 80124e6:	f7ff fe63 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 80124ea:	f7ff fd97 	bl	801201c <spi_flash_deselect_chip>
}
 80124ee:	bf00      	nop
 80124f0:	bd80      	pop	{r7, pc}
	...

080124f4 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b086      	sub	sp, #24
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8012500:	2300      	movs	r3, #0
 8012502:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8012504:	f7ff fd7e 	bl	8012004 <spi_flash_select_chip>

    spi_flash_send_byte(_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8012508:	2002      	movs	r0, #2
 801250a:	f7ff fe51 	bl	80121b0 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 801250e:	4b1f      	ldr	r3, [pc, #124]	@ (801258c <spi_flash_program_load+0x98>)
 8012510:	7a5b      	ldrb	r3, [r3, #9]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d018      	beq.n	8012548 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801251c:	2b00      	cmp	r3, #0
 801251e:	d009      	beq.n	8012534 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	0a1b      	lsrs	r3, r3, #8
 8012524:	b2db      	uxtb	r3, r3
 8012526:	f043 0310 	orr.w	r3, r3, #16
 801252a:	b2db      	uxtb	r3, r3
 801252c:	4618      	mov	r0, r3
 801252e:	f7ff fe3f 	bl	80121b0 <spi_flash_send_byte>
 8012532:	e00f      	b.n	8012554 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	0a1b      	lsrs	r3, r3, #8
 8012538:	b2db      	uxtb	r3, r3
 801253a:	f023 0310 	bic.w	r3, r3, #16
 801253e:	b2db      	uxtb	r3, r3
 8012540:	4618      	mov	r0, r3
 8012542:	f7ff fe35 	bl	80121b0 <spi_flash_send_byte>
 8012546:	e005      	b.n	8012554 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	0a1b      	lsrs	r3, r3, #8
 801254c:	b2db      	uxtb	r3, r3
 801254e:	4618      	mov	r0, r3
 8012550:	f7ff fe2e 	bl	80121b0 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	b2db      	uxtb	r3, r3
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff fe29 	bl	80121b0 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 801255e:	2300      	movs	r3, #0
 8012560:	617b      	str	r3, [r7, #20]
 8012562:	e009      	b.n	8012578 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	4413      	add	r3, r2
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	4618      	mov	r0, r3
 801256e:	f7ff fe1f 	bl	80121b0 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	3301      	adds	r3, #1
 8012576:	617b      	str	r3, [r7, #20]
 8012578:	697a      	ldr	r2, [r7, #20]
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	429a      	cmp	r2, r3
 801257e:	d3f1      	bcc.n	8012564 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8012580:	f7ff fd4c 	bl	801201c <spi_flash_deselect_chip>
}
 8012584:	bf00      	nop
 8012586:	3718      	adds	r7, #24
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	200073e8 	.word	0x200073e8

08012590 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 801259c:	68b8      	ldr	r0, [r7, #8]
 801259e:	f7ff ff05 	bl	80123ac <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 80125a2:	f7ff ff9b 	bl	80124dc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 80125a6:	f7ff fd2d 	bl	8012004 <spi_flash_select_chip>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 80125aa:	68ba      	ldr	r2, [r7, #8]
 80125ac:	6879      	ldr	r1, [r7, #4]
 80125ae:	68f8      	ldr	r0, [r7, #12]
 80125b0:	f7ff ffa0 	bl	80124f4 <spi_flash_program_load>

//    spi_flash_write_enable();  // 使能写入

    spi_flash_select_chip();  // 选择闪存芯片
 80125b4:	f7ff fd26 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 80125b8:	2010      	movs	r0, #16
 80125ba:	f7ff fdf9 	bl	80121b0 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 80125be:	4b0d      	ldr	r3, [pc, #52]	@ (80125f4 <spi_flash_write_page_async+0x64>)
 80125c0:	2202      	movs	r2, #2
 80125c2:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	0c1b      	lsrs	r3, r3, #16
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7ff fdf0 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	0a1b      	lsrs	r3, r3, #8
 80125d4:	b2db      	uxtb	r3, r3
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7ff fdea 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff fde5 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80125e6:	f7ff fd19 	bl	801201c <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 80125ea:	bf00      	nop
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	200073f8 	.word	0x200073f8

080125f8 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f7ff fed3 	bl	80123ac <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8012606:	f7ff fcfd 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_PAGE_READ);  // 发送页面读取命令
 801260a:	2013      	movs	r0, #19
 801260c:	f7ff fdd0 	bl	80121b0 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8012610:	4b0e      	ldr	r3, [pc, #56]	@ (801264c <spi_flash_load_page_into_cache+0x54>)
 8012612:	2203      	movs	r2, #3
 8012614:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	0c1b      	lsrs	r3, r3, #16
 801261a:	b2db      	uxtb	r3, r3
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff fdc7 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	0a1b      	lsrs	r3, r3, #8
 8012626:	b2db      	uxtb	r3, r3
 8012628:	4618      	mov	r0, r3
 801262a:	f7ff fdc1 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	b2db      	uxtb	r3, r3
 8012632:	4618      	mov	r0, r3
 8012634:	f7ff fdbc 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8012638:	f7ff fcf0 	bl	801201c <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 801263c:	f7ff fe32 	bl	80122a4 <spi_flash_read_status>
 8012640:	4603      	mov	r3, r0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3708      	adds	r7, #8
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	200073f8 	.word	0x200073f8

08012650 <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 8012650:	b590      	push	{r4, r7, lr}
 8012652:	b089      	sub	sp, #36	@ 0x24
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 801265c:	68b8      	ldr	r0, [r7, #8]
 801265e:	f7ff ffcb 	bl	80125f8 <spi_flash_load_page_into_cache>
 8012662:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8012668:	f7ff fccc 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 801266c:	2003      	movs	r0, #3
 801266e:	f7ff fd9f 	bl	80121b0 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8012672:	4b27      	ldr	r3, [pc, #156]	@ (8012710 <spi_flash_read_page+0xc0>)
 8012674:	7a1b      	ldrb	r3, [r3, #8]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d002      	beq.n	8012680 <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 801267a:	20ff      	movs	r0, #255	@ 0xff
 801267c:	f7ff fd98 	bl	80121b0 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 8012680:	4b23      	ldr	r3, [pc, #140]	@ (8012710 <spi_flash_read_page+0xc0>)
 8012682:	7a5b      	ldrb	r3, [r3, #9]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d018      	beq.n	80126ba <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801268e:	2b00      	cmp	r3, #0
 8012690:	d009      	beq.n	80126a6 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	0a1b      	lsrs	r3, r3, #8
 8012696:	b2db      	uxtb	r3, r3
 8012698:	f043 0310 	orr.w	r3, r3, #16
 801269c:	b2db      	uxtb	r3, r3
 801269e:	4618      	mov	r0, r3
 80126a0:	f7ff fd86 	bl	80121b0 <spi_flash_send_byte>
 80126a4:	e00f      	b.n	80126c6 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	0a1b      	lsrs	r3, r3, #8
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	f023 0310 	bic.w	r3, r3, #16
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7ff fd7c 	bl	80121b0 <spi_flash_send_byte>
 80126b8:	e005      	b.n	80126c6 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	0a1b      	lsrs	r3, r3, #8
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7ff fd75 	bl	80121b0 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7ff fd70 	bl	80121b0 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80126d0:	4b0f      	ldr	r3, [pc, #60]	@ (8012710 <spi_flash_read_page+0xc0>)
 80126d2:	7a1b      	ldrb	r3, [r3, #8]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d102      	bne.n	80126de <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80126d8:	20ff      	movs	r0, #255	@ 0xff
 80126da:	f7ff fd69 	bl	80121b0 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80126de:	2300      	movs	r3, #0
 80126e0:	61fb      	str	r3, [r7, #28]
 80126e2:	e009      	b.n	80126f8 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	18d4      	adds	r4, r2, r3
 80126ea:	f7ff fd9d 	bl	8012228 <spi_flash_read_byte>
 80126ee:	4603      	mov	r3, r0
 80126f0:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	3301      	adds	r3, #1
 80126f6:	61fb      	str	r3, [r7, #28]
 80126f8:	69fa      	ldr	r2, [r7, #28]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d3f1      	bcc.n	80126e4 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8012700:	f7ff fc8c 	bl	801201c <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8012704:	69bb      	ldr	r3, [r7, #24]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3724      	adds	r7, #36	@ 0x24
 801270a:	46bd      	mov	sp, r7
 801270c:	bd90      	pop	{r4, r7, pc}
 801270e:	bf00      	nop
 8012710:	200073e8 	.word	0x200073e8

08012714 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8012714:	b590      	push	{r4, r7, lr}
 8012716:	b087      	sub	sp, #28
 8012718:	af00      	add	r7, sp, #0
 801271a:	60f8      	str	r0, [r7, #12]
 801271c:	60b9      	str	r1, [r7, #8]
 801271e:	607a      	str	r2, [r7, #4]
 8012720:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 8012722:	68b8      	ldr	r0, [r7, #8]
 8012724:	f7ff fe42 	bl	80123ac <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8012728:	f7ff fc6c 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_PAGE_READ);  // 发送页面读取命令
 801272c:	2013      	movs	r0, #19
 801272e:	f7ff fd3f 	bl	80121b0 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 8012732:	4b38      	ldr	r3, [pc, #224]	@ (8012814 <spi_flash_read_spare_data+0x100>)
 8012734:	2204      	movs	r2, #4
 8012736:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	0c1b      	lsrs	r3, r3, #16
 801273c:	b2db      	uxtb	r3, r3
 801273e:	4618      	mov	r0, r3
 8012740:	f7ff fd36 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	0a1b      	lsrs	r3, r3, #8
 8012748:	b2db      	uxtb	r3, r3
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fd30 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	b2db      	uxtb	r3, r3
 8012754:	4618      	mov	r0, r3
 8012756:	f7ff fd2b 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 801275a:	f7ff fc5f 	bl	801201c <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 801275e:	f7ff fda1 	bl	80122a4 <spi_flash_read_status>
 8012762:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8012764:	f7ff fc4e 	bl	8012004 <spi_flash_select_chip>
    spi_flash_send_byte(_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8012768:	2003      	movs	r0, #3
 801276a:	f7ff fd21 	bl	80121b0 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 801276e:	4b2a      	ldr	r3, [pc, #168]	@ (8012818 <spi_flash_read_spare_data+0x104>)
 8012770:	7a1b      	ldrb	r3, [r3, #8]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d002      	beq.n	801277c <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8012776:	20ff      	movs	r0, #255	@ 0xff
 8012778:	f7ff fd1a 	bl	80121b0 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 801277c:	4b26      	ldr	r3, [pc, #152]	@ (8012818 <spi_flash_read_spare_data+0x104>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	4413      	add	r3, r2
 8012784:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8012786:	4b24      	ldr	r3, [pc, #144]	@ (8012818 <spi_flash_read_spare_data+0x104>)
 8012788:	7a5b      	ldrb	r3, [r3, #9]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d018      	beq.n	80127c0 <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012794:	2b00      	cmp	r3, #0
 8012796:	d009      	beq.n	80127ac <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	0a1b      	lsrs	r3, r3, #8
 801279c:	b2db      	uxtb	r3, r3
 801279e:	f043 0310 	orr.w	r3, r3, #16
 80127a2:	b2db      	uxtb	r3, r3
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7ff fd03 	bl	80121b0 <spi_flash_send_byte>
 80127aa:	e00f      	b.n	80127cc <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	0a1b      	lsrs	r3, r3, #8
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	f023 0310 	bic.w	r3, r3, #16
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ff fcf9 	bl	80121b0 <spi_flash_send_byte>
 80127be:	e005      	b.n	80127cc <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	0a1b      	lsrs	r3, r3, #8
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7ff fcf2 	bl	80121b0 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7ff fced 	bl	80121b0 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80127d6:	4b10      	ldr	r3, [pc, #64]	@ (8012818 <spi_flash_read_spare_data+0x104>)
 80127d8:	7a1b      	ldrb	r3, [r3, #8]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d102      	bne.n	80127e4 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80127de:	20ff      	movs	r0, #255	@ 0xff
 80127e0:	f7ff fce6 	bl	80121b0 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80127e4:	2300      	movs	r3, #0
 80127e6:	617b      	str	r3, [r7, #20]
 80127e8:	e009      	b.n	80127fe <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	18d4      	adds	r4, r2, r3
 80127f0:	f7ff fd1a 	bl	8012228 <spi_flash_read_byte>
 80127f4:	4603      	mov	r3, r0
 80127f6:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	3301      	adds	r3, #1
 80127fc:	617b      	str	r3, [r7, #20]
 80127fe:	697a      	ldr	r2, [r7, #20]
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	429a      	cmp	r2, r3
 8012804:	d3f1      	bcc.n	80127ea <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8012806:	f7ff fc09 	bl	801201c <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 801280a:	693b      	ldr	r3, [r7, #16]
}
 801280c:	4618      	mov	r0, r3
 801280e:	371c      	adds	r7, #28
 8012810:	46bd      	mov	sp, r7
 8012812:	bd90      	pop	{r4, r7, pc}
 8012814:	200073f8 	.word	0x200073f8
 8012818:	200073e8 	.word	0x200073e8

0801281c <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff fdc1 	bl	80123ac <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 801282a:	f7ff fe57 	bl	80124dc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 801282e:	f7ff fbe9 	bl	8012004 <spi_flash_select_chip>

    spi_flash_send_byte(_OP_BLOCK_ERASE);  // 发送块擦除命令
 8012832:	20d8      	movs	r0, #216	@ 0xd8
 8012834:	f7ff fcbc 	bl	80121b0 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8012838:	4b0e      	ldr	r3, [pc, #56]	@ (8012874 <spi_flash_erase_block+0x58>)
 801283a:	2201      	movs	r2, #1
 801283c:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	0c1b      	lsrs	r3, r3, #16
 8012842:	b2db      	uxtb	r3, r3
 8012844:	4618      	mov	r0, r3
 8012846:	f7ff fcb3 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	0a1b      	lsrs	r3, r3, #8
 801284e:	b2db      	uxtb	r3, r3
 8012850:	4618      	mov	r0, r3
 8012852:	f7ff fcad 	bl	80121b0 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	b2db      	uxtb	r3, r3
 801285a:	4618      	mov	r0, r3
 801285c:	f7ff fca8 	bl	80121b0 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8012860:	f7ff fbdc 	bl	801201c <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8012864:	f7ff fd1e 	bl	80122a4 <spi_flash_read_status>
 8012868:	4603      	mov	r3, r0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3708      	adds	r7, #8
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	200073f8 	.word	0x200073f8

08012878 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8012878:	b480      	push	{r7}
 801287a:	af00      	add	r7, sp, #0
    return true;
 801287c:	2301      	movs	r3, #1
}
 801287e:	4618      	mov	r0, r3
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <spi_flash_gpio_init>:
static spi_conf_t spi_conf;
extern SPI_HandleTypeDef hspi1;

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init()
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b088      	sub	sp, #32
 801288c:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801288e:	f107 030c 	add.w	r3, r7, #12
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	605a      	str	r2, [r3, #4]
 8012898:	609a      	str	r2, [r3, #8]
 801289a:	60da      	str	r2, [r3, #12]
 801289c:	611a      	str	r2, [r3, #16]

	    /* 使能SPI外设时钟 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 801289e:	2300      	movs	r3, #0
 80128a0:	60bb      	str	r3, [r7, #8]
 80128a2:	4b39      	ldr	r3, [pc, #228]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128a6:	4a38      	ldr	r2, [pc, #224]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80128ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80128ae:	4b36      	ldr	r3, [pc, #216]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80128b6:	60bb      	str	r3, [r7, #8]
 80128b8:	68bb      	ldr	r3, [r7, #8]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128ba:	2300      	movs	r3, #0
 80128bc:	607b      	str	r3, [r7, #4]
 80128be:	4b32      	ldr	r3, [pc, #200]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128c2:	4a31      	ldr	r2, [pc, #196]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128c4:	f043 0301 	orr.w	r3, r3, #1
 80128c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80128ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	607b      	str	r3, [r7, #4]
 80128d4:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80128d6:	2300      	movs	r3, #0
 80128d8:	603b      	str	r3, [r7, #0]
 80128da:	4b2b      	ldr	r3, [pc, #172]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128de:	4a2a      	ldr	r2, [pc, #168]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128e0:	f043 0302 	orr.w	r3, r3, #2
 80128e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80128e6:	4b28      	ldr	r3, [pc, #160]	@ (8012988 <spi_flash_gpio_init+0x100>)
 80128e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ea:	f003 0302 	and.w	r3, r3, #2
 80128ee:	603b      	str	r3, [r7, #0]
 80128f0:	683b      	ldr	r3, [r7, #0]
	    /*SPI1 GPIO Configuration*/
	    /* 配置SPI SCK引脚 */
	    GPIO_InitStruct.Pin = SPI_FLASH_SCK_PIN;
 80128f2:	2308      	movs	r3, #8
 80128f4:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128f6:	2302      	movs	r3, #2
 80128f8:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80128fa:	2302      	movs	r3, #2
 80128fc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80128fe:	2302      	movs	r3, #2
 8012900:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012902:	2305      	movs	r3, #5
 8012904:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012906:	f107 030c 	add.w	r3, r7, #12
 801290a:	4619      	mov	r1, r3
 801290c:	481f      	ldr	r0, [pc, #124]	@ (801298c <spi_flash_gpio_init+0x104>)
 801290e:	f7f3 fd05 	bl	800631c <HAL_GPIO_Init>

	    /* 配置SPI MISO引脚 */
	    GPIO_InitStruct.Pin = SPI_FLASH_MOSI_PIN;
 8012912:	2380      	movs	r3, #128	@ 0x80
 8012914:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012916:	2302      	movs	r3, #2
 8012918:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801291a:	2300      	movs	r3, #0
 801291c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801291e:	2302      	movs	r3, #2
 8012920:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012922:	2305      	movs	r3, #5
 8012924:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012926:	f107 030c 	add.w	r3, r7, #12
 801292a:	4619      	mov	r1, r3
 801292c:	4818      	ldr	r0, [pc, #96]	@ (8012990 <spi_flash_gpio_init+0x108>)
 801292e:	f7f3 fcf5 	bl	800631c <HAL_GPIO_Init>

	    /* 配置SPI MOSI引脚 */
	    GPIO_InitStruct.Pin = SPI_FLASH_MISO_PIN;
 8012932:	2340      	movs	r3, #64	@ 0x40
 8012934:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012936:	2302      	movs	r3, #2
 8012938:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801293a:	2300      	movs	r3, #0
 801293c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801293e:	2302      	movs	r3, #2
 8012940:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012942:	2305      	movs	r3, #5
 8012944:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012946:	f107 030c 	add.w	r3, r7, #12
 801294a:	4619      	mov	r1, r3
 801294c:	4810      	ldr	r0, [pc, #64]	@ (8012990 <spi_flash_gpio_init+0x108>)
 801294e:	f7f3 fce5 	bl	800631c <HAL_GPIO_Init>

	    /* 配置SPI CS引脚 */
	    GPIO_InitStruct.Pin = SPI_FLASH_CS_PIN;
 8012952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012956:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012958:	2301      	movs	r3, #1
 801295a:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801295c:	2301      	movs	r3, #1
 801295e:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012960:	2302      	movs	r3, #2
 8012962:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012964:	f107 030c 	add.w	r3, r7, #12
 8012968:	4619      	mov	r1, r3
 801296a:	4809      	ldr	r0, [pc, #36]	@ (8012990 <spi_flash_gpio_init+0x108>)
 801296c:	f7f3 fcd6 	bl	800631c <HAL_GPIO_Init>

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8012970:	2200      	movs	r2, #0
 8012972:	2100      	movs	r1, #0
 8012974:	2023      	movs	r0, #35	@ 0x23
 8012976:	f7f3 f922 	bl	8005bbe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801297a:	2023      	movs	r0, #35	@ 0x23
 801297c:	f7f3 f93b 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8012980:	bf00      	nop
 8012982:	3720      	adds	r7, #32
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	40023800 	.word	0x40023800
 801298c:	40020400 	.word	0x40020400
 8012990:	40020000 	.word	0x40020000

08012994 <spi_flash_gpio_uninit>:

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit()
{
 8012994:	b580      	push	{r7, lr}
 8012996:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI1_CLK_DISABLE();
 8012998:	4b0b      	ldr	r3, [pc, #44]	@ (80129c8 <spi_flash_gpio_uninit+0x34>)
 801299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801299c:	4a0a      	ldr	r2, [pc, #40]	@ (80129c8 <spi_flash_gpio_uninit+0x34>)
 801299e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80129a2:	6453      	str	r3, [r2, #68]	@ 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PA15    ------> SPI1_CS
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80129a4:	21c0      	movs	r1, #192	@ 0xc0
 80129a6:	4809      	ldr	r0, [pc, #36]	@ (80129cc <spi_flash_gpio_uninit+0x38>)
 80129a8:	f7f3 fe54 	bl	8006654 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 80129ac:	2108      	movs	r1, #8
 80129ae:	4808      	ldr	r0, [pc, #32]	@ (80129d0 <spi_flash_gpio_uninit+0x3c>)
 80129b0:	f7f3 fe50 	bl	8006654 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN);
 80129b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80129b8:	4804      	ldr	r0, [pc, #16]	@ (80129cc <spi_flash_gpio_uninit+0x38>)
 80129ba:	f7f3 fe4b 	bl	8006654 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80129be:	2023      	movs	r0, #35	@ 0x23
 80129c0:	f7f3 f927 	bl	8005c12 <HAL_NVIC_DisableIRQ>

}
 80129c4:	bf00      	nop
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	40023800 	.word	0x40023800
 80129cc:	40020000 	.word	0x40020000
 80129d0:	40020400 	.word	0x40020400

080129d4 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(GPIOA, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80129d8:	2200      	movs	r2, #0
 80129da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80129de:	4802      	ldr	r0, [pc, #8]	@ (80129e8 <spi_flash_select_chip+0x14>)
 80129e0:	f7f3 ff34 	bl	800684c <HAL_GPIO_WritePin>
}
 80129e4:	bf00      	nop
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	40020000 	.word	0x40020000

080129ec <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOA, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80129f0:	2201      	movs	r2, #1
 80129f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80129f6:	4802      	ldr	r0, [pc, #8]	@ (8012a00 <spi_flash_deselect_chip+0x14>)
 80129f8:	f7f3 ff28 	bl	800684c <HAL_GPIO_WritePin>
}
 80129fc:	bf00      	nop
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	40020000 	.word	0x40020000

08012a04 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8012a04:	b480      	push	{r7}
 8012a06:	b085      	sub	sp, #20
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8012a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8012a8c <spi_flash_get_baud_rate_prescaler+0x88>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a1f      	ldr	r2, [pc, #124]	@ (8012a90 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8012a12:	fba2 2303 	umull	r2, r3, r2, r3
 8012a16:	099b      	lsrs	r3, r3, #6
 8012a18:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	085b      	lsrs	r3, r3, #1
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d301      	bcc.n	8012a28 <spi_flash_get_baud_rate_prescaler+0x24>
         return SPI_BAUDRATEPRESCALER_2;
 8012a24:	2300      	movs	r3, #0
 8012a26:	e02a      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	089b      	lsrs	r3, r3, #2
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d301      	bcc.n	8012a36 <spi_flash_get_baud_rate_prescaler+0x32>
         return SPI_BAUDRATEPRESCALER_4;
 8012a32:	2308      	movs	r3, #8
 8012a34:	e023      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	08db      	lsrs	r3, r3, #3
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d301      	bcc.n	8012a44 <spi_flash_get_baud_rate_prescaler+0x40>
         return SPI_BAUDRATEPRESCALER_8;
 8012a40:	2310      	movs	r3, #16
 8012a42:	e01c      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	091b      	lsrs	r3, r3, #4
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d301      	bcc.n	8012a52 <spi_flash_get_baud_rate_prescaler+0x4e>
         return SPI_BAUDRATEPRESCALER_16;
 8012a4e:	2318      	movs	r3, #24
 8012a50:	e015      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	095b      	lsrs	r3, r3, #5
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d301      	bcc.n	8012a60 <spi_flash_get_baud_rate_prescaler+0x5c>
         return SPI_BAUDRATEPRESCALER_32;
 8012a5c:	2320      	movs	r3, #32
 8012a5e:	e00e      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	099b      	lsrs	r3, r3, #6
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d301      	bcc.n	8012a6e <spi_flash_get_baud_rate_prescaler+0x6a>
          return SPI_BAUDRATEPRESCALER_64;
 8012a6a:	2328      	movs	r3, #40	@ 0x28
 8012a6c:	e007      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	09db      	lsrs	r3, r3, #7
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d301      	bcc.n	8012a7c <spi_flash_get_baud_rate_prescaler+0x78>
          return SPI_BAUDRATEPRESCALER_128;
 8012a78:	2330      	movs	r3, #48	@ 0x30
 8012a7a:	e000      	b.n	8012a7e <spi_flash_get_baud_rate_prescaler+0x7a>
    else
          return SPI_BAUDRATEPRESCALER_256;
 8012a7c:	2338      	movs	r3, #56	@ 0x38
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3714      	adds	r7, #20
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop
 8012a8c:	20000000 	.word	0x20000000
 8012a90:	10624dd3 	.word	0x10624dd3

08012a94 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8012a94:	b590      	push	{r4, r7, lr}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	2b0c      	cmp	r3, #12
 8012aa2:	d802      	bhi.n	8012aaa <spi_flash_init+0x16>
        return -1;
 8012aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa8:	e04c      	b.n	8012b44 <spi_flash_init+0xb0>
    spi_conf = *(spi_conf_t *)conf;
 8012aaa:	4b28      	ldr	r3, [pc, #160]	@ (8012b4c <spi_flash_init+0xb8>)
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	4614      	mov	r4, r2
 8012ab0:	6820      	ldr	r0, [r4, #0]
 8012ab2:	6861      	ldr	r1, [r4, #4]
 8012ab4:	68a2      	ldr	r2, [r4, #8]
 8012ab6:	c307      	stmia	r3!, {r0, r1, r2}
 8012ab8:	7b22      	ldrb	r2, [r4, #12]
 8012aba:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init();
 8012abc:	f7ff fee4 	bl	8012888 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8012ac0:	f7ff ff94 	bl	80129ec <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8012ac4:	4b22      	ldr	r3, [pc, #136]	@ (8012b50 <spi_flash_init+0xbc>)
 8012ac6:	4a23      	ldr	r2, [pc, #140]	@ (8012b54 <spi_flash_init+0xc0>)
 8012ac8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8012aca:	4b21      	ldr	r3, [pc, #132]	@ (8012b50 <spi_flash_init+0xbc>)
 8012acc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8012ad0:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8012b50 <spi_flash_init+0xbc>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8012b50 <spi_flash_init+0xbc>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012ade:	4b1c      	ldr	r3, [pc, #112]	@ (8012b50 <spi_flash_init+0xbc>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8012ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8012b50 <spi_flash_init+0xbc>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8012aea:	4b19      	ldr	r3, [pc, #100]	@ (8012b50 <spi_flash_init+0xbc>)
 8012aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012af0:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler =
    		spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8012af2:	4b16      	ldr	r3, [pc, #88]	@ (8012b4c <spi_flash_init+0xb8>)
 8012af4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff ff83 	bl	8012a04 <spi_flash_get_baud_rate_prescaler>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
    hspi1.Init.BaudRatePrescaler =
 8012b02:	4b13      	ldr	r3, [pc, #76]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b04:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012b06:	4b12      	ldr	r3, [pc, #72]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012b0c:	4b10      	ldr	r3, [pc, #64]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b0e:	2200      	movs	r2, #0
 8012b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012b12:	4b0f      	ldr	r3, [pc, #60]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b14:	2200      	movs	r2, #0
 8012b16:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8012b18:	4b0d      	ldr	r3, [pc, #52]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b1a:	220a      	movs	r2, #10
 8012b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8012b1e:	480c      	ldr	r0, [pc, #48]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b20:	f7f6 f9ce 	bl	8008ec0 <HAL_SPI_Init>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <spi_flash_init+0x9a>
    {
      Error_Handler();
 8012b2a:	f7f2 fba5 	bl	8005278 <Error_Handler>
    }

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 8012b2e:	4b08      	ldr	r3, [pc, #32]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	4b06      	ldr	r3, [pc, #24]	@ (8012b50 <spi_flash_init+0xbc>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012b3c:	601a      	str	r2, [r3, #0]

    FLASH_Enable4ByteAddr();
 8012b3e:	f000 f96b 	bl	8012e18 <FLASH_Enable4ByteAddr>

     return 0;
 8012b42:	2300      	movs	r3, #0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	370c      	adds	r7, #12
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd90      	pop	{r4, r7, pc}
 8012b4c:	20007400 	.word	0x20007400
 8012b50:	20000968 	.word	0x20000968
 8012b54:	40013000 	.word	0x40013000

08012b58 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8012b5c:	4806      	ldr	r0, [pc, #24]	@ (8012b78 <spi_flash_uninit+0x20>)
 8012b5e:	f7ff ff19 	bl	8012994 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8012b62:	4b05      	ldr	r3, [pc, #20]	@ (8012b78 <spi_flash_uninit+0x20>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	4b03      	ldr	r3, [pc, #12]	@ (8012b78 <spi_flash_uninit+0x20>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8012b70:	601a      	str	r2, [r3, #0]
}
 8012b72:	bf00      	nop
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	20000968 	.word	0x20000968

08012b7c <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b086      	sub	sp, #24
 8012b80:	af02      	add	r7, sp, #8
 8012b82:	4603      	mov	r3, r0
 8012b84:	71fb      	strb	r3, [r7, #7]
/*	uint8_t RxData;
 	HAL_SPI_TransmitReceive_IT(&hspi1, &byte, &RxData, 1);
 	return RxData;*/
	uint8_t 						r_data = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef 				status;
	if((status = HAL_SPI_TransmitReceive(&hspi1, &byte, &r_data, 1, SPI_TIMEOUT)) != HAL_OK )
 8012b8a:	f107 020e 	add.w	r2, r7, #14
 8012b8e:	1df9      	adds	r1, r7, #7
 8012b90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012b94:	9300      	str	r3, [sp, #0]
 8012b96:	2301      	movs	r3, #1
 8012b98:	4811      	ldr	r0, [pc, #68]	@ (8012be0 <spi_flash_send_byte+0x64>)
 8012b9a:	f7f6 fa1a 	bl	8008fd2 <HAL_SPI_TransmitReceive>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	73fb      	strb	r3, [r7, #15]
 8012ba2:	7bfb      	ldrb	r3, [r7, #15]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d015      	beq.n	8012bd4 <spi_flash_send_byte+0x58>
	{
		if (status == HAL_ERROR)
 8012ba8:	7bfb      	ldrb	r3, [r7, #15]
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d103      	bne.n	8012bb6 <spi_flash_send_byte+0x3a>
	    {
		    printf("SPI transmission error!\n");
 8012bae:	480d      	ldr	r0, [pc, #52]	@ (8012be4 <spi_flash_send_byte+0x68>)
 8012bb0:	f000 fb5e 	bl	8013270 <puts>
 8012bb4:	e00c      	b.n	8012bd0 <spi_flash_send_byte+0x54>
	    }
		else if (status == HAL_TIMEOUT)
 8012bb6:	7bfb      	ldrb	r3, [r7, #15]
 8012bb8:	2b03      	cmp	r3, #3
 8012bba:	d103      	bne.n	8012bc4 <spi_flash_send_byte+0x48>
		{
			 printf("SPI transmission timeout!\n");
 8012bbc:	480a      	ldr	r0, [pc, #40]	@ (8012be8 <spi_flash_send_byte+0x6c>)
 8012bbe:	f000 fb57 	bl	8013270 <puts>
 8012bc2:	e005      	b.n	8012bd0 <spi_flash_send_byte+0x54>
		}
		else if (status == HAL_BUSY)
 8012bc4:	7bfb      	ldrb	r3, [r7, #15]
 8012bc6:	2b02      	cmp	r3, #2
 8012bc8:	d102      	bne.n	8012bd0 <spi_flash_send_byte+0x54>
		{
			 printf("SPI is busy!\n");
 8012bca:	4808      	ldr	r0, [pc, #32]	@ (8012bec <spi_flash_send_byte+0x70>)
 8012bcc:	f000 fb50 	bl	8013270 <puts>
	    }
		return 0;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	e000      	b.n	8012bd6 <spi_flash_send_byte+0x5a>
	}
	return r_data;
 8012bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	20000968 	.word	0x20000968
 8012be4:	08018914 	.word	0x08018914
 8012be8:	0801892c 	.word	0x0801892c
 8012bec:	08018948 	.word	0x08018948

08012bf0 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8012bf4:	20a5      	movs	r0, #165	@ 0xa5
 8012bf6:	f7ff ffc1 	bl	8012b7c <spi_flash_send_byte>
 8012bfa:	4603      	mov	r3, r0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <spi_flash_read_status>:

// 读取SPI Flash的状态寄存器值
static uint32_t spi_flash_read_status()
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_READY;
 8012c06:	2300      	movs	r3, #0
 8012c08:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8012c0a:	f7ff fee3 	bl	80129d4 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8012c0e:	4b16      	ldr	r3, [pc, #88]	@ (8012c68 <spi_flash_read_status+0x68>)
 8012c10:	799b      	ldrb	r3, [r3, #6]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff ffb2 	bl	8012b7c <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8012c18:	f7ff ffea 	bl	8012bf0 <spi_flash_read_byte>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8012c20:	4b11      	ldr	r3, [pc, #68]	@ (8012c68 <spi_flash_read_status+0x68>)
 8012c22:	7a1b      	ldrb	r3, [r3, #8]
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d10a      	bne.n	8012c3e <spi_flash_read_status+0x3e>
 8012c28:	78fb      	ldrb	r3, [r7, #3]
 8012c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8012c68 <spi_flash_read_status+0x68>)
 8012c2c:	79d2      	ldrb	r2, [r2, #7]
 8012c2e:	4113      	asrs	r3, r2
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d002      	beq.n	8012c3e <spi_flash_read_status+0x3e>
        flash_status = FLASH_BUSY;
 8012c38:	2301      	movs	r3, #1
 8012c3a:	607b      	str	r3, [r7, #4]
 8012c3c:	e00d      	b.n	8012c5a <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8012c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8012c68 <spi_flash_read_status+0x68>)
 8012c40:	7a1b      	ldrb	r3, [r3, #8]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d109      	bne.n	8012c5a <spi_flash_read_status+0x5a>
 8012c46:	78fb      	ldrb	r3, [r7, #3]
 8012c48:	4a07      	ldr	r2, [pc, #28]	@ (8012c68 <spi_flash_read_status+0x68>)
 8012c4a:	79d2      	ldrb	r2, [r2, #7]
 8012c4c:	4113      	asrs	r3, r2
 8012c4e:	f003 0301 	and.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d101      	bne.n	8012c5a <spi_flash_read_status+0x5a>
        flash_status = FLASH_BUSY;
 8012c56:	2301      	movs	r3, #1
 8012c58:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8012c5a:	f7ff fec7 	bl	80129ec <spi_flash_deselect_chip>

    return flash_status;
 8012c5e:	687b      	ldr	r3, [r7, #4]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3708      	adds	r7, #8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	20007400 	.word	0x20007400

08012c6c <spi_flash_get_status>:

// 获取SPI Flash的状态，等待操作完成或超时
static uint32_t spi_flash_get_status()
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8012c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012c76:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8012c78:	f7ff ffc2 	bl	8012c00 <spi_flash_read_status>
 8012c7c:	6078      	str	r0, [r7, #4]

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
 8012c7e:	e005      	b.n	8012c8c <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8012c80:	f7ff ffbe 	bl	8012c00 <spi_flash_read_status>
 8012c84:	6078      	str	r0, [r7, #4]
        timeout --;
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_BUSY && timeout)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d102      	bne.n	8012c98 <spi_flash_get_status+0x2c>
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1f3      	bne.n	8012c80 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d101      	bne.n	8012ca2 <spi_flash_get_status+0x36>
        status = FLASH_TIMEOUT;
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	607b      	str	r3, [r7, #4]

    return status;
 8012ca2:	687b      	ldr	r3, [r7, #4]
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3708      	adds	r7, #8
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <spi_flash_read_id>:

// 读取SPI Flash的ID
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8012cb4:	f7ff fe8e 	bl	80129d4 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8012cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8012d28 <spi_flash_read_id+0x7c>)
 8012cba:	789b      	ldrb	r3, [r3, #2]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff ff5d 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8012cc2:	20a5      	movs	r0, #165	@ 0xa5
 8012cc4:	f7ff ff5a 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8012cc8:	20a5      	movs	r0, #165	@ 0xa5
 8012cca:	f7ff ff57 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(0x00);
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f7ff ff54 	bl	8012b7c <spi_flash_send_byte>
    chip_id->maker_id  = spi_flash_read_byte();  // 读取厂商ID
 8012cd4:	f7ff ff8c 	bl	8012bf0 <spi_flash_read_byte>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	461a      	mov	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8012ce0:	f7ff ff86 	bl	8012bf0 <spi_flash_read_byte>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	705a      	strb	r2, [r3, #1]
    chip_id->third_id  = spi_flash_read_byte();  // 读取第三个ID
 8012cec:	f7ff ff80 	bl	8012bf0 <spi_flash_read_byte>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 8012cf8:	f7ff ff7a 	bl	8012bf0 <spi_flash_read_byte>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	461a      	mov	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id  = spi_flash_read_byte();
 8012d04:	f7ff ff74 	bl	8012bf0 <spi_flash_read_byte>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id  = spi_flash_read_byte();
 8012d10:	f7ff ff6e 	bl	8012bf0 <spi_flash_read_byte>
 8012d14:	4603      	mov	r3, r0
 8012d16:	461a      	mov	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 8012d1c:	f7ff fe66 	bl	80129ec <spi_flash_deselect_chip>
}
 8012d20:	bf00      	nop
 8012d22:	3708      	adds	r7, #8
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	20007400 	.word	0x20007400

08012d2c <norflash_read_sr>:
 *
 * @param       regno: 状态寄存器号，范:1~3
 * @retval      状态寄存器值
 */
uint8_t norflash_read_sr(uint8_t regno)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	4603      	mov	r3, r0
 8012d34:	71fb      	strb	r3, [r7, #7]
    uint8_t byte = 0, command = 0;
 8012d36:	2300      	movs	r3, #0
 8012d38:	73bb      	strb	r3, [r7, #14]
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	73fb      	strb	r3, [r7, #15]

    switch (regno)
 8012d3e:	79fb      	ldrb	r3, [r7, #7]
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	d00c      	beq.n	8012d5e <norflash_read_sr+0x32>
 8012d44:	2b03      	cmp	r3, #3
 8012d46:	dc0d      	bgt.n	8012d64 <norflash_read_sr+0x38>
 8012d48:	2b01      	cmp	r3, #1
 8012d4a:	d002      	beq.n	8012d52 <norflash_read_sr+0x26>
 8012d4c:	2b02      	cmp	r3, #2
 8012d4e:	d003      	beq.n	8012d58 <norflash_read_sr+0x2c>
 8012d50:	e008      	b.n	8012d64 <norflash_read_sr+0x38>
    {
        case 1:
            command = 0x05;  /* 读状态寄存器1指令 */
 8012d52:	2305      	movs	r3, #5
 8012d54:	73fb      	strb	r3, [r7, #15]
            break;
 8012d56:	e008      	b.n	8012d6a <norflash_read_sr+0x3e>

        case 2:
            command = 0x35;  /* 读状态寄存器2指令 */
 8012d58:	2335      	movs	r3, #53	@ 0x35
 8012d5a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d5c:	e005      	b.n	8012d6a <norflash_read_sr+0x3e>

        case 3:
            command = 0x15;  /* 读状态寄存器3指令 */
 8012d5e:	2315      	movs	r3, #21
 8012d60:	73fb      	strb	r3, [r7, #15]
            break;
 8012d62:	e002      	b.n	8012d6a <norflash_read_sr+0x3e>

        default:
            command = 0x05;
 8012d64:	2305      	movs	r3, #5
 8012d66:	73fb      	strb	r3, [r7, #15]
            break;
 8012d68:	bf00      	nop
    }

    spi_flash_select_chip();
 8012d6a:	f7ff fe33 	bl	80129d4 <spi_flash_select_chip>
    spi_flash_send_byte(command);      /* 发送读寄存器命令 */
 8012d6e:	7bfb      	ldrb	r3, [r7, #15]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7ff ff03 	bl	8012b7c <spi_flash_send_byte>
    byte = spi_flash_send_byte(0Xff);  /* 读取一个字节 */
 8012d76:	20ff      	movs	r0, #255	@ 0xff
 8012d78:	f7ff ff00 	bl	8012b7c <spi_flash_send_byte>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	73bb      	strb	r3, [r7, #14]
    spi_flash_deselect_chip();
 8012d80:	f7ff fe34 	bl	80129ec <spi_flash_deselect_chip>

    return byte;
 8012d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3710      	adds	r7, #16
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <norflash_write_sr>:
 * @param       regno: 状态寄存器号，范:1~3
 * @param       sr   : 要写入状态寄存器的值
 * @retval      无
 */
void norflash_write_sr(uint8_t regno, uint8_t sr)
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b084      	sub	sp, #16
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	4603      	mov	r3, r0
 8012d96:	460a      	mov	r2, r1
 8012d98:	71fb      	strb	r3, [r7, #7]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	71bb      	strb	r3, [r7, #6]
    uint8_t command = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	73fb      	strb	r3, [r7, #15]

    switch (regno)
 8012da2:	79fb      	ldrb	r3, [r7, #7]
 8012da4:	2b03      	cmp	r3, #3
 8012da6:	d00c      	beq.n	8012dc2 <norflash_write_sr+0x34>
 8012da8:	2b03      	cmp	r3, #3
 8012daa:	dc0d      	bgt.n	8012dc8 <norflash_write_sr+0x3a>
 8012dac:	2b01      	cmp	r3, #1
 8012dae:	d002      	beq.n	8012db6 <norflash_write_sr+0x28>
 8012db0:	2b02      	cmp	r3, #2
 8012db2:	d003      	beq.n	8012dbc <norflash_write_sr+0x2e>
 8012db4:	e008      	b.n	8012dc8 <norflash_write_sr+0x3a>
    {
        case 1:
            command = 0x01;  /* 写状态寄存器1指令 */
 8012db6:	2301      	movs	r3, #1
 8012db8:	73fb      	strb	r3, [r7, #15]
            break;
 8012dba:	e008      	b.n	8012dce <norflash_write_sr+0x40>

        case 2:
            command = 0x31;  /* 写状态寄存器2指令 */
 8012dbc:	2331      	movs	r3, #49	@ 0x31
 8012dbe:	73fb      	strb	r3, [r7, #15]
            break;
 8012dc0:	e005      	b.n	8012dce <norflash_write_sr+0x40>

        case 3:
            command = 0x11;  /* 写状态寄存器3指令 */
 8012dc2:	2311      	movs	r3, #17
 8012dc4:	73fb      	strb	r3, [r7, #15]
            break;
 8012dc6:	e002      	b.n	8012dce <norflash_write_sr+0x40>

        default:
            command = 0x01;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	73fb      	strb	r3, [r7, #15]
            break;
 8012dcc:	bf00      	nop
    }

    spi_flash_select_chip();
 8012dce:	f7ff fe01 	bl	80129d4 <spi_flash_select_chip>
    spi_flash_send_byte(command);  /* 发送读寄存器命令 */
 8012dd2:	7bfb      	ldrb	r3, [r7, #15]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff fed1 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(sr);       /* 写入一个字节 */
 8012dda:	79bb      	ldrb	r3, [r7, #6]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff fecd 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8012de2:	f7ff fe03 	bl	80129ec <spi_flash_deselect_chip>
}
 8012de6:	bf00      	nop
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <spi_flash_write_enable>:

// 启用SPI Flash的写使能
void spi_flash_write_enable()
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8012df4:	4b07      	ldr	r3, [pc, #28]	@ (8012e14 <spi_flash_write_enable+0x24>)
 8012df6:	791b      	ldrb	r3, [r3, #4]
 8012df8:	2bff      	cmp	r3, #255	@ 0xff
 8012dfa:	d009      	beq.n	8012e10 <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 8012dfc:	f7ff fdea 	bl	80129d4 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8012e00:	4b04      	ldr	r3, [pc, #16]	@ (8012e14 <spi_flash_write_enable+0x24>)
 8012e02:	791b      	ldrb	r3, [r3, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7ff feb9 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8012e0a:	f7ff fdef 	bl	80129ec <spi_flash_deselect_chip>
 8012e0e:	e000      	b.n	8012e12 <spi_flash_write_enable+0x22>
        return;
 8012e10:	bf00      	nop
}
 8012e12:	bd80      	pop	{r7, pc}
 8012e14:	20007400 	.word	0x20007400

08012e18 <FLASH_Enable4ByteAddr>:

void FLASH_Enable4ByteAddr()
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b082      	sub	sp, #8
 8012e1c:	af00      	add	r7, sp, #0
	uint8_t temp;
	    temp = norflash_read_sr(3);         /* 读取状态寄存器3，判断地址模式 */
 8012e1e:	2003      	movs	r0, #3
 8012e20:	f7ff ff84 	bl	8012d2c <norflash_read_sr>
 8012e24:	4603      	mov	r3, r0
 8012e26:	71fb      	strb	r3, [r7, #7]

	    if ((temp & 0X01) == 0)             /* 如果不是4字节地址模式,则进入4字节地址模式 */
 8012e28:	79fb      	ldrb	r3, [r7, #7]
 8012e2a:	f003 0301 	and.w	r3, r3, #1
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d111      	bne.n	8012e56 <FLASH_Enable4ByteAddr+0x3e>
	    {
	    	spi_flash_write_enable();        /* 写使能 */
 8012e32:	f7ff ffdd 	bl	8012df0 <spi_flash_write_enable>
	        temp |= 1 << 1;                 /* ADP=1, 上电4位地址模式 */
 8012e36:	79fb      	ldrb	r3, [r7, #7]
 8012e38:	f043 0302 	orr.w	r3, r3, #2
 8012e3c:	71fb      	strb	r3, [r7, #7]
	        norflash_write_sr(3, temp);     /* 写SR3 */
 8012e3e:	79fb      	ldrb	r3, [r7, #7]
 8012e40:	4619      	mov	r1, r3
 8012e42:	2003      	movs	r0, #3
 8012e44:	f7ff ffa3 	bl	8012d8e <norflash_write_sr>

	        spi_flash_select_chip();
 8012e48:	f7ff fdc4 	bl	80129d4 <spi_flash_select_chip>
	        spi_flash_send_byte(0xB7);    /* 使能4字节地址指令 */
 8012e4c:	20b7      	movs	r0, #183	@ 0xb7
 8012e4e:	f7ff fe95 	bl	8012b7c <spi_flash_send_byte>
	        spi_flash_deselect_chip();
 8012e52:	f7ff fdcb 	bl	80129ec <spi_flash_deselect_chip>
	    }
}
 8012e56:	bf00      	nop
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
	...

08012e60 <spi_flash_write_page_async>:

// 异步写入SPI Flash的一页数据
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page,
		uint32_t page_size)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b086      	sub	sp, #24
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 8012e6c:	f7ff ffc0 	bl	8012df0 <spi_flash_write_enable>

    spi_flash_select_chip();
 8012e70:	f7ff fdb0 	bl	80129d4 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8012e74:	4b1c      	ldr	r3, [pc, #112]	@ (8012ee8 <spi_flash_write_page_async+0x88>)
 8012e76:	78db      	ldrb	r3, [r3, #3]
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7ff fe7f 	bl	8012b7c <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8012e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee8 <spi_flash_write_page_async+0x88>)
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	461a      	mov	r2, r3
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	4093      	lsls	r3, r2
 8012e88:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_4th_CYCLE(page));
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	0e1b      	lsrs	r3, r3, #24
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7ff fe73 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	0c1b      	lsrs	r3, r3, #16
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fe6d 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	0a1b      	lsrs	r3, r3, #8
 8012ea6:	b2db      	uxtb	r3, r3
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7ff fe67 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7ff fe62 	bl	8012b7c <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8012eb8:	2300      	movs	r3, #0
 8012eba:	617b      	str	r3, [r7, #20]
 8012ebc:	e009      	b.n	8012ed2 <spi_flash_write_page_async+0x72>
        spi_flash_send_byte(buf[i]);
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7ff fe58 	bl	8012b7c <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	3301      	adds	r3, #1
 8012ed0:	617b      	str	r3, [r7, #20]
 8012ed2:	697a      	ldr	r2, [r7, #20]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d3f1      	bcc.n	8012ebe <spi_flash_write_page_async+0x5e>

    spi_flash_deselect_chip();
 8012eda:	f7ff fd87 	bl	80129ec <spi_flash_deselect_chip>
}
 8012ede:	bf00      	nop
 8012ee0:	3718      	adds	r7, #24
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
 8012ee6:	bf00      	nop
 8012ee8:	20007400 	.word	0x20007400

08012eec <spi_flash_read_data>:

// 从指定地址读取数据到缓冲区
static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
		uint32_t page_offset, uint32_t data_size)
{
 8012eec:	b590      	push	{r4, r7, lr}
 8012eee:	b087      	sub	sp, #28
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
 8012ef8:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8012efa:	4b20      	ldr	r3, [pc, #128]	@ (8012f7c <spi_flash_read_data+0x90>)
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	461a      	mov	r2, r3
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	4093      	lsls	r3, r2
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	4413      	add	r3, r2
 8012f08:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8012f0a:	f7ff fd63 	bl	80129d4 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 8012f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8012f7c <spi_flash_read_data+0x90>)
 8012f10:	785b      	ldrb	r3, [r3, #1]
 8012f12:	4618      	mov	r0, r3
 8012f14:	f7ff fe32 	bl	8012b7c <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_4th_CYCLE(addr));
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	0e1b      	lsrs	r3, r3, #24
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff fe2c 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	0c1b      	lsrs	r3, r3, #16
 8012f28:	b2db      	uxtb	r3, r3
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff fe26 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	0a1b      	lsrs	r3, r3, #8
 8012f34:	b2db      	uxtb	r3, r3
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7ff fe20 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	b2db      	uxtb	r3, r3
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7ff fe1b 	bl	8012b7c <spi_flash_send_byte>

    /* AT45DB要求在地址后写入虚拟字节 */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8012f46:	20a5      	movs	r0, #165	@ 0xa5
 8012f48:	f7ff fe18 	bl	8012b7c <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	617b      	str	r3, [r7, #20]
 8012f50:	e009      	b.n	8012f66 <spi_flash_read_data+0x7a>
        buf[i] = spi_flash_read_byte();
 8012f52:	68fa      	ldr	r2, [r7, #12]
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	18d4      	adds	r4, r2, r3
 8012f58:	f7ff fe4a 	bl	8012bf0 <spi_flash_read_byte>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	3301      	adds	r3, #1
 8012f64:	617b      	str	r3, [r7, #20]
 8012f66:	697a      	ldr	r2, [r7, #20]
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d3f1      	bcc.n	8012f52 <spi_flash_read_data+0x66>

    spi_flash_deselect_chip();
 8012f6e:	f7ff fd3d 	bl	80129ec <spi_flash_deselect_chip>

    return FLASH_READY;
 8012f72:	2300      	movs	r3, #0
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	371c      	adds	r7, #28
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd90      	pop	{r4, r7, pc}
 8012f7c:	20007400 	.word	0x20007400

08012f80 <spi_flash_read_page>:

// 从指定页读取数据到缓冲区
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
		uint32_t page_size)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f7ff ffaa 	bl	8012eec <spi_flash_read_data>
 8012f98:	4603      	mov	r3, r0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3710      	adds	r7, #16
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <spi_flash_read_spare_data>:

// 从指定页的偏移量读取备用数据到缓冲区
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
		uint32_t offset, uint32_t data_size)
{
 8012fa2:	b480      	push	{r7}
 8012fa4:	b085      	sub	sp, #20
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	60f8      	str	r0, [r7, #12]
 8012faa:	60b9      	str	r1, [r7, #8]
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 8012fb0:	2304      	movs	r3, #4
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <spi_flash_erase_block>:

// 擦除指定块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8012fc8:	4b17      	ldr	r3, [pc, #92]	@ (8013028 <spi_flash_erase_block+0x68>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	461a      	mov	r2, r3
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4093      	lsls	r3, r2
 8012fd2:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8012fd4:	f7ff ff0c 	bl	8012df0 <spi_flash_write_enable>

    spi_flash_select_chip();
 8012fd8:	f7ff fcfc 	bl	80129d4 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8012fdc:	4b12      	ldr	r3, [pc, #72]	@ (8013028 <spi_flash_erase_block+0x68>)
 8012fde:	795b      	ldrb	r3, [r3, #5]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff fdcb 	bl	8012b7c <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_4th_CYCLE(addr));
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	0e1b      	lsrs	r3, r3, #24
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7ff fdc5 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	0c1b      	lsrs	r3, r3, #16
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f7ff fdbf 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	0a1b      	lsrs	r3, r3, #8
 8013002:	b2db      	uxtb	r3, r3
 8013004:	4618      	mov	r0, r3
 8013006:	f7ff fdb9 	bl	8012b7c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	b2db      	uxtb	r3, r3
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff fdb4 	bl	8012b7c <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8013014:	f7ff fcea 	bl	80129ec <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8013018:	f7ff fe28 	bl	8012c6c <spi_flash_get_status>
 801301c:	4603      	mov	r3, r0
}
 801301e:	4618      	mov	r0, r3
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	20007400 	.word	0x20007400

0801302c <spi_flash_is_bb_supported>:

// 检查是否支持坏块管理
static inline bool spi_flash_is_bb_supported()
{
 801302c:	b480      	push	{r7}
 801302e:	af00      	add	r7, sp, #0
    return false;
 8013030:	2300      	movs	r3, #0
}
 8013032:	4618      	mov	r0, r3
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <std>:
 801303c:	2300      	movs	r3, #0
 801303e:	b510      	push	{r4, lr}
 8013040:	4604      	mov	r4, r0
 8013042:	e9c0 3300 	strd	r3, r3, [r0]
 8013046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801304a:	6083      	str	r3, [r0, #8]
 801304c:	8181      	strh	r1, [r0, #12]
 801304e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013050:	81c2      	strh	r2, [r0, #14]
 8013052:	6183      	str	r3, [r0, #24]
 8013054:	4619      	mov	r1, r3
 8013056:	2208      	movs	r2, #8
 8013058:	305c      	adds	r0, #92	@ 0x5c
 801305a:	f000 f954 	bl	8013306 <memset>
 801305e:	4b0d      	ldr	r3, [pc, #52]	@ (8013094 <std+0x58>)
 8013060:	6223      	str	r3, [r4, #32]
 8013062:	4b0d      	ldr	r3, [pc, #52]	@ (8013098 <std+0x5c>)
 8013064:	6263      	str	r3, [r4, #36]	@ 0x24
 8013066:	4b0d      	ldr	r3, [pc, #52]	@ (801309c <std+0x60>)
 8013068:	62a3      	str	r3, [r4, #40]	@ 0x28
 801306a:	4b0d      	ldr	r3, [pc, #52]	@ (80130a0 <std+0x64>)
 801306c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801306e:	4b0d      	ldr	r3, [pc, #52]	@ (80130a4 <std+0x68>)
 8013070:	61e4      	str	r4, [r4, #28]
 8013072:	429c      	cmp	r4, r3
 8013074:	d006      	beq.n	8013084 <std+0x48>
 8013076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801307a:	4294      	cmp	r4, r2
 801307c:	d002      	beq.n	8013084 <std+0x48>
 801307e:	33d0      	adds	r3, #208	@ 0xd0
 8013080:	429c      	cmp	r4, r3
 8013082:	d105      	bne.n	8013090 <std+0x54>
 8013084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801308c:	f000 b9b4 	b.w	80133f8 <__retarget_lock_init_recursive>
 8013090:	bd10      	pop	{r4, pc}
 8013092:	bf00      	nop
 8013094:	08013281 	.word	0x08013281
 8013098:	080132a3 	.word	0x080132a3
 801309c:	080132db 	.word	0x080132db
 80130a0:	080132ff 	.word	0x080132ff
 80130a4:	20007410 	.word	0x20007410

080130a8 <stdio_exit_handler>:
 80130a8:	4a02      	ldr	r2, [pc, #8]	@ (80130b4 <stdio_exit_handler+0xc>)
 80130aa:	4903      	ldr	r1, [pc, #12]	@ (80130b8 <stdio_exit_handler+0x10>)
 80130ac:	4803      	ldr	r0, [pc, #12]	@ (80130bc <stdio_exit_handler+0x14>)
 80130ae:	f000 b869 	b.w	8013184 <_fwalk_sglue>
 80130b2:	bf00      	nop
 80130b4:	20000234 	.word	0x20000234
 80130b8:	080159c5 	.word	0x080159c5
 80130bc:	20000248 	.word	0x20000248

080130c0 <cleanup_stdio>:
 80130c0:	6841      	ldr	r1, [r0, #4]
 80130c2:	4b0c      	ldr	r3, [pc, #48]	@ (80130f4 <cleanup_stdio+0x34>)
 80130c4:	4299      	cmp	r1, r3
 80130c6:	b510      	push	{r4, lr}
 80130c8:	4604      	mov	r4, r0
 80130ca:	d001      	beq.n	80130d0 <cleanup_stdio+0x10>
 80130cc:	f002 fc7a 	bl	80159c4 <_fclose_r>
 80130d0:	68a1      	ldr	r1, [r4, #8]
 80130d2:	4b09      	ldr	r3, [pc, #36]	@ (80130f8 <cleanup_stdio+0x38>)
 80130d4:	4299      	cmp	r1, r3
 80130d6:	d002      	beq.n	80130de <cleanup_stdio+0x1e>
 80130d8:	4620      	mov	r0, r4
 80130da:	f002 fc73 	bl	80159c4 <_fclose_r>
 80130de:	68e1      	ldr	r1, [r4, #12]
 80130e0:	4b06      	ldr	r3, [pc, #24]	@ (80130fc <cleanup_stdio+0x3c>)
 80130e2:	4299      	cmp	r1, r3
 80130e4:	d004      	beq.n	80130f0 <cleanup_stdio+0x30>
 80130e6:	4620      	mov	r0, r4
 80130e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130ec:	f002 bc6a 	b.w	80159c4 <_fclose_r>
 80130f0:	bd10      	pop	{r4, pc}
 80130f2:	bf00      	nop
 80130f4:	20007410 	.word	0x20007410
 80130f8:	20007478 	.word	0x20007478
 80130fc:	200074e0 	.word	0x200074e0

08013100 <global_stdio_init.part.0>:
 8013100:	b510      	push	{r4, lr}
 8013102:	4b0b      	ldr	r3, [pc, #44]	@ (8013130 <global_stdio_init.part.0+0x30>)
 8013104:	4c0b      	ldr	r4, [pc, #44]	@ (8013134 <global_stdio_init.part.0+0x34>)
 8013106:	4a0c      	ldr	r2, [pc, #48]	@ (8013138 <global_stdio_init.part.0+0x38>)
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	4620      	mov	r0, r4
 801310c:	2200      	movs	r2, #0
 801310e:	2104      	movs	r1, #4
 8013110:	f7ff ff94 	bl	801303c <std>
 8013114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013118:	2201      	movs	r2, #1
 801311a:	2109      	movs	r1, #9
 801311c:	f7ff ff8e 	bl	801303c <std>
 8013120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013124:	2202      	movs	r2, #2
 8013126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801312a:	2112      	movs	r1, #18
 801312c:	f7ff bf86 	b.w	801303c <std>
 8013130:	20007548 	.word	0x20007548
 8013134:	20007410 	.word	0x20007410
 8013138:	080130a9 	.word	0x080130a9

0801313c <__sfp_lock_acquire>:
 801313c:	4801      	ldr	r0, [pc, #4]	@ (8013144 <__sfp_lock_acquire+0x8>)
 801313e:	f000 b95d 	b.w	80133fc <__retarget_lock_acquire_recursive>
 8013142:	bf00      	nop
 8013144:	20007552 	.word	0x20007552

08013148 <__sfp_lock_release>:
 8013148:	4801      	ldr	r0, [pc, #4]	@ (8013150 <__sfp_lock_release+0x8>)
 801314a:	f000 b958 	b.w	80133fe <__retarget_lock_release_recursive>
 801314e:	bf00      	nop
 8013150:	20007552 	.word	0x20007552

08013154 <__sinit>:
 8013154:	b510      	push	{r4, lr}
 8013156:	4604      	mov	r4, r0
 8013158:	f7ff fff0 	bl	801313c <__sfp_lock_acquire>
 801315c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801315e:	b11b      	cbz	r3, 8013168 <__sinit+0x14>
 8013160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013164:	f7ff bff0 	b.w	8013148 <__sfp_lock_release>
 8013168:	4b04      	ldr	r3, [pc, #16]	@ (801317c <__sinit+0x28>)
 801316a:	6363      	str	r3, [r4, #52]	@ 0x34
 801316c:	4b04      	ldr	r3, [pc, #16]	@ (8013180 <__sinit+0x2c>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1f5      	bne.n	8013160 <__sinit+0xc>
 8013174:	f7ff ffc4 	bl	8013100 <global_stdio_init.part.0>
 8013178:	e7f2      	b.n	8013160 <__sinit+0xc>
 801317a:	bf00      	nop
 801317c:	080130c1 	.word	0x080130c1
 8013180:	20007548 	.word	0x20007548

08013184 <_fwalk_sglue>:
 8013184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013188:	4607      	mov	r7, r0
 801318a:	4688      	mov	r8, r1
 801318c:	4614      	mov	r4, r2
 801318e:	2600      	movs	r6, #0
 8013190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013194:	f1b9 0901 	subs.w	r9, r9, #1
 8013198:	d505      	bpl.n	80131a6 <_fwalk_sglue+0x22>
 801319a:	6824      	ldr	r4, [r4, #0]
 801319c:	2c00      	cmp	r4, #0
 801319e:	d1f7      	bne.n	8013190 <_fwalk_sglue+0xc>
 80131a0:	4630      	mov	r0, r6
 80131a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131a6:	89ab      	ldrh	r3, [r5, #12]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d907      	bls.n	80131bc <_fwalk_sglue+0x38>
 80131ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131b0:	3301      	adds	r3, #1
 80131b2:	d003      	beq.n	80131bc <_fwalk_sglue+0x38>
 80131b4:	4629      	mov	r1, r5
 80131b6:	4638      	mov	r0, r7
 80131b8:	47c0      	blx	r8
 80131ba:	4306      	orrs	r6, r0
 80131bc:	3568      	adds	r5, #104	@ 0x68
 80131be:	e7e9      	b.n	8013194 <_fwalk_sglue+0x10>

080131c0 <printf>:
 80131c0:	b40f      	push	{r0, r1, r2, r3}
 80131c2:	b507      	push	{r0, r1, r2, lr}
 80131c4:	4906      	ldr	r1, [pc, #24]	@ (80131e0 <printf+0x20>)
 80131c6:	ab04      	add	r3, sp, #16
 80131c8:	6808      	ldr	r0, [r1, #0]
 80131ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80131ce:	6881      	ldr	r1, [r0, #8]
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	f000 fc91 	bl	8013af8 <_vfprintf_r>
 80131d6:	b003      	add	sp, #12
 80131d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80131dc:	b004      	add	sp, #16
 80131de:	4770      	bx	lr
 80131e0:	20000240 	.word	0x20000240

080131e4 <_puts_r>:
 80131e4:	b530      	push	{r4, r5, lr}
 80131e6:	4605      	mov	r5, r0
 80131e8:	b089      	sub	sp, #36	@ 0x24
 80131ea:	4608      	mov	r0, r1
 80131ec:	460c      	mov	r4, r1
 80131ee:	f7f0 ffef 	bl	80041d0 <strlen>
 80131f2:	4b1e      	ldr	r3, [pc, #120]	@ (801326c <_puts_r+0x88>)
 80131f4:	9306      	str	r3, [sp, #24]
 80131f6:	2301      	movs	r3, #1
 80131f8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80131fc:	9307      	str	r3, [sp, #28]
 80131fe:	4418      	add	r0, r3
 8013200:	ab04      	add	r3, sp, #16
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	2302      	movs	r3, #2
 8013206:	9302      	str	r3, [sp, #8]
 8013208:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801320a:	68ac      	ldr	r4, [r5, #8]
 801320c:	9003      	str	r0, [sp, #12]
 801320e:	b913      	cbnz	r3, 8013216 <_puts_r+0x32>
 8013210:	4628      	mov	r0, r5
 8013212:	f7ff ff9f 	bl	8013154 <__sinit>
 8013216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013218:	07db      	lsls	r3, r3, #31
 801321a:	d405      	bmi.n	8013228 <_puts_r+0x44>
 801321c:	89a3      	ldrh	r3, [r4, #12]
 801321e:	0598      	lsls	r0, r3, #22
 8013220:	d402      	bmi.n	8013228 <_puts_r+0x44>
 8013222:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013224:	f000 f8ea 	bl	80133fc <__retarget_lock_acquire_recursive>
 8013228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322c:	0499      	lsls	r1, r3, #18
 801322e:	d406      	bmi.n	801323e <_puts_r+0x5a>
 8013230:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013234:	81a3      	strh	r3, [r4, #12]
 8013236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013238:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801323c:	6663      	str	r3, [r4, #100]	@ 0x64
 801323e:	4628      	mov	r0, r5
 8013240:	aa01      	add	r2, sp, #4
 8013242:	4621      	mov	r1, r4
 8013244:	f002 fcc2 	bl	8015bcc <__sfvwrite_r>
 8013248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801324a:	2800      	cmp	r0, #0
 801324c:	bf0c      	ite	eq
 801324e:	250a      	moveq	r5, #10
 8013250:	f04f 35ff 	movne.w	r5, #4294967295
 8013254:	07da      	lsls	r2, r3, #31
 8013256:	d405      	bmi.n	8013264 <_puts_r+0x80>
 8013258:	89a3      	ldrh	r3, [r4, #12]
 801325a:	059b      	lsls	r3, r3, #22
 801325c:	d402      	bmi.n	8013264 <_puts_r+0x80>
 801325e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013260:	f000 f8cd 	bl	80133fe <__retarget_lock_release_recursive>
 8013264:	4628      	mov	r0, r5
 8013266:	b009      	add	sp, #36	@ 0x24
 8013268:	bd30      	pop	{r4, r5, pc}
 801326a:	bf00      	nop
 801326c:	08018cfb 	.word	0x08018cfb

08013270 <puts>:
 8013270:	4b02      	ldr	r3, [pc, #8]	@ (801327c <puts+0xc>)
 8013272:	4601      	mov	r1, r0
 8013274:	6818      	ldr	r0, [r3, #0]
 8013276:	f7ff bfb5 	b.w	80131e4 <_puts_r>
 801327a:	bf00      	nop
 801327c:	20000240 	.word	0x20000240

08013280 <__sread>:
 8013280:	b510      	push	{r4, lr}
 8013282:	460c      	mov	r4, r1
 8013284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013288:	f000 f868 	bl	801335c <_read_r>
 801328c:	2800      	cmp	r0, #0
 801328e:	bfab      	itete	ge
 8013290:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8013292:	89a3      	ldrhlt	r3, [r4, #12]
 8013294:	181b      	addge	r3, r3, r0
 8013296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801329a:	bfac      	ite	ge
 801329c:	6523      	strge	r3, [r4, #80]	@ 0x50
 801329e:	81a3      	strhlt	r3, [r4, #12]
 80132a0:	bd10      	pop	{r4, pc}

080132a2 <__swrite>:
 80132a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a6:	461f      	mov	r7, r3
 80132a8:	898b      	ldrh	r3, [r1, #12]
 80132aa:	05db      	lsls	r3, r3, #23
 80132ac:	4605      	mov	r5, r0
 80132ae:	460c      	mov	r4, r1
 80132b0:	4616      	mov	r6, r2
 80132b2:	d505      	bpl.n	80132c0 <__swrite+0x1e>
 80132b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b8:	2302      	movs	r3, #2
 80132ba:	2200      	movs	r2, #0
 80132bc:	f000 f83c 	bl	8013338 <_lseek_r>
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	4632      	mov	r2, r6
 80132ce:	463b      	mov	r3, r7
 80132d0:	4628      	mov	r0, r5
 80132d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132d6:	f000 b853 	b.w	8013380 <_write_r>

080132da <__sseek>:
 80132da:	b510      	push	{r4, lr}
 80132dc:	460c      	mov	r4, r1
 80132de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132e2:	f000 f829 	bl	8013338 <_lseek_r>
 80132e6:	1c43      	adds	r3, r0, #1
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	bf15      	itete	ne
 80132ec:	6520      	strne	r0, [r4, #80]	@ 0x50
 80132ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80132f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80132f6:	81a3      	strheq	r3, [r4, #12]
 80132f8:	bf18      	it	ne
 80132fa:	81a3      	strhne	r3, [r4, #12]
 80132fc:	bd10      	pop	{r4, pc}

080132fe <__sclose>:
 80132fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013302:	f000 b809 	b.w	8013318 <_close_r>

08013306 <memset>:
 8013306:	4402      	add	r2, r0
 8013308:	4603      	mov	r3, r0
 801330a:	4293      	cmp	r3, r2
 801330c:	d100      	bne.n	8013310 <memset+0xa>
 801330e:	4770      	bx	lr
 8013310:	f803 1b01 	strb.w	r1, [r3], #1
 8013314:	e7f9      	b.n	801330a <memset+0x4>
	...

08013318 <_close_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4d06      	ldr	r5, [pc, #24]	@ (8013334 <_close_r+0x1c>)
 801331c:	2300      	movs	r3, #0
 801331e:	4604      	mov	r4, r0
 8013320:	4608      	mov	r0, r1
 8013322:	602b      	str	r3, [r5, #0]
 8013324:	f7f2 f964 	bl	80055f0 <_close>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_close_r+0x1a>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_close_r+0x1a>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	2000754c 	.word	0x2000754c

08013338 <_lseek_r>:
 8013338:	b538      	push	{r3, r4, r5, lr}
 801333a:	4d07      	ldr	r5, [pc, #28]	@ (8013358 <_lseek_r+0x20>)
 801333c:	4604      	mov	r4, r0
 801333e:	4608      	mov	r0, r1
 8013340:	4611      	mov	r1, r2
 8013342:	2200      	movs	r2, #0
 8013344:	602a      	str	r2, [r5, #0]
 8013346:	461a      	mov	r2, r3
 8013348:	f7f2 f979 	bl	800563e <_lseek>
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	d102      	bne.n	8013356 <_lseek_r+0x1e>
 8013350:	682b      	ldr	r3, [r5, #0]
 8013352:	b103      	cbz	r3, 8013356 <_lseek_r+0x1e>
 8013354:	6023      	str	r3, [r4, #0]
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	2000754c 	.word	0x2000754c

0801335c <_read_r>:
 801335c:	b538      	push	{r3, r4, r5, lr}
 801335e:	4d07      	ldr	r5, [pc, #28]	@ (801337c <_read_r+0x20>)
 8013360:	4604      	mov	r4, r0
 8013362:	4608      	mov	r0, r1
 8013364:	4611      	mov	r1, r2
 8013366:	2200      	movs	r2, #0
 8013368:	602a      	str	r2, [r5, #0]
 801336a:	461a      	mov	r2, r3
 801336c:	f7f2 f923 	bl	80055b6 <_read>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_read_r+0x1e>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	b103      	cbz	r3, 801337a <_read_r+0x1e>
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	2000754c 	.word	0x2000754c

08013380 <_write_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	@ (80133a0 <_write_r+0x20>)
 8013384:	4604      	mov	r4, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	602a      	str	r2, [r5, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7f1 fe98 	bl	80050c4 <_write>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_write_r+0x1e>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_write_r+0x1e>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	2000754c 	.word	0x2000754c

080133a4 <__errno>:
 80133a4:	4b01      	ldr	r3, [pc, #4]	@ (80133ac <__errno+0x8>)
 80133a6:	6818      	ldr	r0, [r3, #0]
 80133a8:	4770      	bx	lr
 80133aa:	bf00      	nop
 80133ac:	20000240 	.word	0x20000240

080133b0 <__libc_init_array>:
 80133b0:	b570      	push	{r4, r5, r6, lr}
 80133b2:	4d0d      	ldr	r5, [pc, #52]	@ (80133e8 <__libc_init_array+0x38>)
 80133b4:	4c0d      	ldr	r4, [pc, #52]	@ (80133ec <__libc_init_array+0x3c>)
 80133b6:	1b64      	subs	r4, r4, r5
 80133b8:	10a4      	asrs	r4, r4, #2
 80133ba:	2600      	movs	r6, #0
 80133bc:	42a6      	cmp	r6, r4
 80133be:	d109      	bne.n	80133d4 <__libc_init_array+0x24>
 80133c0:	4d0b      	ldr	r5, [pc, #44]	@ (80133f0 <__libc_init_array+0x40>)
 80133c2:	4c0c      	ldr	r4, [pc, #48]	@ (80133f4 <__libc_init_array+0x44>)
 80133c4:	f004 fbb4 	bl	8017b30 <_init>
 80133c8:	1b64      	subs	r4, r4, r5
 80133ca:	10a4      	asrs	r4, r4, #2
 80133cc:	2600      	movs	r6, #0
 80133ce:	42a6      	cmp	r6, r4
 80133d0:	d105      	bne.n	80133de <__libc_init_array+0x2e>
 80133d2:	bd70      	pop	{r4, r5, r6, pc}
 80133d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80133d8:	4798      	blx	r3
 80133da:	3601      	adds	r6, #1
 80133dc:	e7ee      	b.n	80133bc <__libc_init_array+0xc>
 80133de:	f855 3b04 	ldr.w	r3, [r5], #4
 80133e2:	4798      	blx	r3
 80133e4:	3601      	adds	r6, #1
 80133e6:	e7f2      	b.n	80133ce <__libc_init_array+0x1e>
 80133e8:	08018d08 	.word	0x08018d08
 80133ec:	08018d08 	.word	0x08018d08
 80133f0:	08018d08 	.word	0x08018d08
 80133f4:	08018d10 	.word	0x08018d10

080133f8 <__retarget_lock_init_recursive>:
 80133f8:	4770      	bx	lr

080133fa <__retarget_lock_close_recursive>:
 80133fa:	4770      	bx	lr

080133fc <__retarget_lock_acquire_recursive>:
 80133fc:	4770      	bx	lr

080133fe <__retarget_lock_release_recursive>:
 80133fe:	4770      	bx	lr

08013400 <memcpy>:
 8013400:	440a      	add	r2, r1
 8013402:	4291      	cmp	r1, r2
 8013404:	f100 33ff 	add.w	r3, r0, #4294967295
 8013408:	d100      	bne.n	801340c <memcpy+0xc>
 801340a:	4770      	bx	lr
 801340c:	b510      	push	{r4, lr}
 801340e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013416:	4291      	cmp	r1, r2
 8013418:	d1f9      	bne.n	801340e <memcpy+0xe>
 801341a:	bd10      	pop	{r4, pc}

0801341c <register_fini>:
 801341c:	4b02      	ldr	r3, [pc, #8]	@ (8013428 <register_fini+0xc>)
 801341e:	b113      	cbz	r3, 8013426 <register_fini+0xa>
 8013420:	4802      	ldr	r0, [pc, #8]	@ (801342c <register_fini+0x10>)
 8013422:	f000 b805 	b.w	8013430 <atexit>
 8013426:	4770      	bx	lr
 8013428:	00000000 	.word	0x00000000
 801342c:	08016075 	.word	0x08016075

08013430 <atexit>:
 8013430:	2300      	movs	r3, #0
 8013432:	4601      	mov	r1, r0
 8013434:	461a      	mov	r2, r3
 8013436:	4618      	mov	r0, r3
 8013438:	f002 be72 	b.w	8016120 <__register_exitproc>

0801343c <_malloc_trim_r>:
 801343c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013440:	4606      	mov	r6, r0
 8013442:	2008      	movs	r0, #8
 8013444:	4689      	mov	r9, r1
 8013446:	f002 fe29 	bl	801609c <sysconf>
 801344a:	4f24      	ldr	r7, [pc, #144]	@ (80134dc <_malloc_trim_r+0xa0>)
 801344c:	4680      	mov	r8, r0
 801344e:	4630      	mov	r0, r6
 8013450:	f000 fb44 	bl	8013adc <__malloc_lock>
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	685d      	ldr	r5, [r3, #4]
 8013458:	f025 0503 	bic.w	r5, r5, #3
 801345c:	f1a5 0411 	sub.w	r4, r5, #17
 8013460:	eba4 0409 	sub.w	r4, r4, r9
 8013464:	4444      	add	r4, r8
 8013466:	fbb4 f4f8 	udiv	r4, r4, r8
 801346a:	3c01      	subs	r4, #1
 801346c:	fb08 f404 	mul.w	r4, r8, r4
 8013470:	45a0      	cmp	r8, r4
 8013472:	dd05      	ble.n	8013480 <_malloc_trim_r+0x44>
 8013474:	4630      	mov	r0, r6
 8013476:	f000 fb37 	bl	8013ae8 <__malloc_unlock>
 801347a:	2000      	movs	r0, #0
 801347c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013480:	2100      	movs	r1, #0
 8013482:	4630      	mov	r0, r6
 8013484:	f002 fde6 	bl	8016054 <_sbrk_r>
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	442b      	add	r3, r5
 801348c:	4298      	cmp	r0, r3
 801348e:	d1f1      	bne.n	8013474 <_malloc_trim_r+0x38>
 8013490:	4261      	negs	r1, r4
 8013492:	4630      	mov	r0, r6
 8013494:	f002 fdde 	bl	8016054 <_sbrk_r>
 8013498:	3001      	adds	r0, #1
 801349a:	d110      	bne.n	80134be <_malloc_trim_r+0x82>
 801349c:	2100      	movs	r1, #0
 801349e:	4630      	mov	r0, r6
 80134a0:	f002 fdd8 	bl	8016054 <_sbrk_r>
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	1a83      	subs	r3, r0, r2
 80134a8:	2b0f      	cmp	r3, #15
 80134aa:	dde3      	ble.n	8013474 <_malloc_trim_r+0x38>
 80134ac:	490c      	ldr	r1, [pc, #48]	@ (80134e0 <_malloc_trim_r+0xa4>)
 80134ae:	6809      	ldr	r1, [r1, #0]
 80134b0:	1a40      	subs	r0, r0, r1
 80134b2:	490c      	ldr	r1, [pc, #48]	@ (80134e4 <_malloc_trim_r+0xa8>)
 80134b4:	f043 0301 	orr.w	r3, r3, #1
 80134b8:	6008      	str	r0, [r1, #0]
 80134ba:	6053      	str	r3, [r2, #4]
 80134bc:	e7da      	b.n	8013474 <_malloc_trim_r+0x38>
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	4a08      	ldr	r2, [pc, #32]	@ (80134e4 <_malloc_trim_r+0xa8>)
 80134c2:	1b2d      	subs	r5, r5, r4
 80134c4:	f045 0501 	orr.w	r5, r5, #1
 80134c8:	605d      	str	r5, [r3, #4]
 80134ca:	6813      	ldr	r3, [r2, #0]
 80134cc:	4630      	mov	r0, r6
 80134ce:	1b1b      	subs	r3, r3, r4
 80134d0:	6013      	str	r3, [r2, #0]
 80134d2:	f000 fb09 	bl	8013ae8 <__malloc_unlock>
 80134d6:	2001      	movs	r0, #1
 80134d8:	e7d0      	b.n	801347c <_malloc_trim_r+0x40>
 80134da:	bf00      	nop
 80134dc:	20000374 	.word	0x20000374
 80134e0:	2000036c 	.word	0x2000036c
 80134e4:	20007558 	.word	0x20007558

080134e8 <_free_r>:
 80134e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ea:	4604      	mov	r4, r0
 80134ec:	460f      	mov	r7, r1
 80134ee:	2900      	cmp	r1, #0
 80134f0:	f000 80b1 	beq.w	8013656 <_free_r+0x16e>
 80134f4:	f000 faf2 	bl	8013adc <__malloc_lock>
 80134f8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80134fc:	4d56      	ldr	r5, [pc, #344]	@ (8013658 <_free_r+0x170>)
 80134fe:	f022 0001 	bic.w	r0, r2, #1
 8013502:	f1a7 0308 	sub.w	r3, r7, #8
 8013506:	eb03 0c00 	add.w	ip, r3, r0
 801350a:	68a9      	ldr	r1, [r5, #8]
 801350c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8013510:	4561      	cmp	r1, ip
 8013512:	f026 0603 	bic.w	r6, r6, #3
 8013516:	f002 0201 	and.w	r2, r2, #1
 801351a:	d11b      	bne.n	8013554 <_free_r+0x6c>
 801351c:	4406      	add	r6, r0
 801351e:	b93a      	cbnz	r2, 8013530 <_free_r+0x48>
 8013520:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8013524:	1a9b      	subs	r3, r3, r2
 8013526:	4416      	add	r6, r2
 8013528:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801352c:	60ca      	str	r2, [r1, #12]
 801352e:	6091      	str	r1, [r2, #8]
 8013530:	f046 0201 	orr.w	r2, r6, #1
 8013534:	605a      	str	r2, [r3, #4]
 8013536:	60ab      	str	r3, [r5, #8]
 8013538:	4b48      	ldr	r3, [pc, #288]	@ (801365c <_free_r+0x174>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	42b3      	cmp	r3, r6
 801353e:	d804      	bhi.n	801354a <_free_r+0x62>
 8013540:	4b47      	ldr	r3, [pc, #284]	@ (8013660 <_free_r+0x178>)
 8013542:	4620      	mov	r0, r4
 8013544:	6819      	ldr	r1, [r3, #0]
 8013546:	f7ff ff79 	bl	801343c <_malloc_trim_r>
 801354a:	4620      	mov	r0, r4
 801354c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013550:	f000 baca 	b.w	8013ae8 <__malloc_unlock>
 8013554:	f8cc 6004 	str.w	r6, [ip, #4]
 8013558:	2a00      	cmp	r2, #0
 801355a:	d138      	bne.n	80135ce <_free_r+0xe6>
 801355c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8013560:	1a5b      	subs	r3, r3, r1
 8013562:	4408      	add	r0, r1
 8013564:	6899      	ldr	r1, [r3, #8]
 8013566:	f105 0708 	add.w	r7, r5, #8
 801356a:	42b9      	cmp	r1, r7
 801356c:	d031      	beq.n	80135d2 <_free_r+0xea>
 801356e:	68df      	ldr	r7, [r3, #12]
 8013570:	60cf      	str	r7, [r1, #12]
 8013572:	60b9      	str	r1, [r7, #8]
 8013574:	eb0c 0106 	add.w	r1, ip, r6
 8013578:	6849      	ldr	r1, [r1, #4]
 801357a:	07c9      	lsls	r1, r1, #31
 801357c:	d40b      	bmi.n	8013596 <_free_r+0xae>
 801357e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8013582:	4430      	add	r0, r6
 8013584:	bb3a      	cbnz	r2, 80135d6 <_free_r+0xee>
 8013586:	4e37      	ldr	r6, [pc, #220]	@ (8013664 <_free_r+0x17c>)
 8013588:	42b1      	cmp	r1, r6
 801358a:	d124      	bne.n	80135d6 <_free_r+0xee>
 801358c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8013590:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8013594:	2201      	movs	r2, #1
 8013596:	f040 0101 	orr.w	r1, r0, #1
 801359a:	6059      	str	r1, [r3, #4]
 801359c:	5018      	str	r0, [r3, r0]
 801359e:	2a00      	cmp	r2, #0
 80135a0:	d1d3      	bne.n	801354a <_free_r+0x62>
 80135a2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80135a6:	d21b      	bcs.n	80135e0 <_free_r+0xf8>
 80135a8:	08c2      	lsrs	r2, r0, #3
 80135aa:	2101      	movs	r1, #1
 80135ac:	0940      	lsrs	r0, r0, #5
 80135ae:	4081      	lsls	r1, r0
 80135b0:	6868      	ldr	r0, [r5, #4]
 80135b2:	3201      	adds	r2, #1
 80135b4:	4301      	orrs	r1, r0
 80135b6:	6069      	str	r1, [r5, #4]
 80135b8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80135bc:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80135c0:	3908      	subs	r1, #8
 80135c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80135c6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80135ca:	60c3      	str	r3, [r0, #12]
 80135cc:	e7bd      	b.n	801354a <_free_r+0x62>
 80135ce:	2200      	movs	r2, #0
 80135d0:	e7d0      	b.n	8013574 <_free_r+0x8c>
 80135d2:	2201      	movs	r2, #1
 80135d4:	e7ce      	b.n	8013574 <_free_r+0x8c>
 80135d6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80135da:	60ce      	str	r6, [r1, #12]
 80135dc:	60b1      	str	r1, [r6, #8]
 80135de:	e7da      	b.n	8013596 <_free_r+0xae>
 80135e0:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80135e4:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80135e8:	d214      	bcs.n	8013614 <_free_r+0x12c>
 80135ea:	0982      	lsrs	r2, r0, #6
 80135ec:	3238      	adds	r2, #56	@ 0x38
 80135ee:	1c51      	adds	r1, r2, #1
 80135f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80135f4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80135f8:	428e      	cmp	r6, r1
 80135fa:	d125      	bne.n	8013648 <_free_r+0x160>
 80135fc:	2001      	movs	r0, #1
 80135fe:	1092      	asrs	r2, r2, #2
 8013600:	fa00 f202 	lsl.w	r2, r0, r2
 8013604:	6868      	ldr	r0, [r5, #4]
 8013606:	4302      	orrs	r2, r0
 8013608:	606a      	str	r2, [r5, #4]
 801360a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801360e:	60b3      	str	r3, [r6, #8]
 8013610:	60cb      	str	r3, [r1, #12]
 8013612:	e79a      	b.n	801354a <_free_r+0x62>
 8013614:	2a14      	cmp	r2, #20
 8013616:	d801      	bhi.n	801361c <_free_r+0x134>
 8013618:	325b      	adds	r2, #91	@ 0x5b
 801361a:	e7e8      	b.n	80135ee <_free_r+0x106>
 801361c:	2a54      	cmp	r2, #84	@ 0x54
 801361e:	d802      	bhi.n	8013626 <_free_r+0x13e>
 8013620:	0b02      	lsrs	r2, r0, #12
 8013622:	326e      	adds	r2, #110	@ 0x6e
 8013624:	e7e3      	b.n	80135ee <_free_r+0x106>
 8013626:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801362a:	d802      	bhi.n	8013632 <_free_r+0x14a>
 801362c:	0bc2      	lsrs	r2, r0, #15
 801362e:	3277      	adds	r2, #119	@ 0x77
 8013630:	e7dd      	b.n	80135ee <_free_r+0x106>
 8013632:	f240 5154 	movw	r1, #1364	@ 0x554
 8013636:	428a      	cmp	r2, r1
 8013638:	bf9a      	itte	ls
 801363a:	0c82      	lsrls	r2, r0, #18
 801363c:	327c      	addls	r2, #124	@ 0x7c
 801363e:	227e      	movhi	r2, #126	@ 0x7e
 8013640:	e7d5      	b.n	80135ee <_free_r+0x106>
 8013642:	6889      	ldr	r1, [r1, #8]
 8013644:	428e      	cmp	r6, r1
 8013646:	d004      	beq.n	8013652 <_free_r+0x16a>
 8013648:	684a      	ldr	r2, [r1, #4]
 801364a:	f022 0203 	bic.w	r2, r2, #3
 801364e:	4282      	cmp	r2, r0
 8013650:	d8f7      	bhi.n	8013642 <_free_r+0x15a>
 8013652:	68ce      	ldr	r6, [r1, #12]
 8013654:	e7d9      	b.n	801360a <_free_r+0x122>
 8013656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013658:	20000374 	.word	0x20000374
 801365c:	20000370 	.word	0x20000370
 8013660:	20007588 	.word	0x20007588
 8013664:	2000037c 	.word	0x2000037c

08013668 <_malloc_r>:
 8013668:	f101 030b 	add.w	r3, r1, #11
 801366c:	2b16      	cmp	r3, #22
 801366e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013672:	4605      	mov	r5, r0
 8013674:	d906      	bls.n	8013684 <_malloc_r+0x1c>
 8013676:	f033 0707 	bics.w	r7, r3, #7
 801367a:	d504      	bpl.n	8013686 <_malloc_r+0x1e>
 801367c:	230c      	movs	r3, #12
 801367e:	602b      	str	r3, [r5, #0]
 8013680:	2400      	movs	r4, #0
 8013682:	e1a3      	b.n	80139cc <_malloc_r+0x364>
 8013684:	2710      	movs	r7, #16
 8013686:	42b9      	cmp	r1, r7
 8013688:	d8f8      	bhi.n	801367c <_malloc_r+0x14>
 801368a:	4628      	mov	r0, r5
 801368c:	f000 fa26 	bl	8013adc <__malloc_lock>
 8013690:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8013694:	4eaf      	ldr	r6, [pc, #700]	@ (8013954 <_malloc_r+0x2ec>)
 8013696:	d237      	bcs.n	8013708 <_malloc_r+0xa0>
 8013698:	f107 0208 	add.w	r2, r7, #8
 801369c:	4432      	add	r2, r6
 801369e:	f1a2 0108 	sub.w	r1, r2, #8
 80136a2:	6854      	ldr	r4, [r2, #4]
 80136a4:	428c      	cmp	r4, r1
 80136a6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80136aa:	d102      	bne.n	80136b2 <_malloc_r+0x4a>
 80136ac:	68d4      	ldr	r4, [r2, #12]
 80136ae:	42a2      	cmp	r2, r4
 80136b0:	d010      	beq.n	80136d4 <_malloc_r+0x6c>
 80136b2:	6863      	ldr	r3, [r4, #4]
 80136b4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80136b8:	f023 0303 	bic.w	r3, r3, #3
 80136bc:	60ca      	str	r2, [r1, #12]
 80136be:	4423      	add	r3, r4
 80136c0:	6091      	str	r1, [r2, #8]
 80136c2:	685a      	ldr	r2, [r3, #4]
 80136c4:	f042 0201 	orr.w	r2, r2, #1
 80136c8:	605a      	str	r2, [r3, #4]
 80136ca:	4628      	mov	r0, r5
 80136cc:	f000 fa0c 	bl	8013ae8 <__malloc_unlock>
 80136d0:	3408      	adds	r4, #8
 80136d2:	e17b      	b.n	80139cc <_malloc_r+0x364>
 80136d4:	3302      	adds	r3, #2
 80136d6:	6934      	ldr	r4, [r6, #16]
 80136d8:	499f      	ldr	r1, [pc, #636]	@ (8013958 <_malloc_r+0x2f0>)
 80136da:	428c      	cmp	r4, r1
 80136dc:	d077      	beq.n	80137ce <_malloc_r+0x166>
 80136de:	6862      	ldr	r2, [r4, #4]
 80136e0:	f022 0c03 	bic.w	ip, r2, #3
 80136e4:	ebac 0007 	sub.w	r0, ip, r7
 80136e8:	280f      	cmp	r0, #15
 80136ea:	dd48      	ble.n	801377e <_malloc_r+0x116>
 80136ec:	19e2      	adds	r2, r4, r7
 80136ee:	f040 0301 	orr.w	r3, r0, #1
 80136f2:	f047 0701 	orr.w	r7, r7, #1
 80136f6:	6067      	str	r7, [r4, #4]
 80136f8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80136fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8013700:	6053      	str	r3, [r2, #4]
 8013702:	f844 000c 	str.w	r0, [r4, ip]
 8013706:	e7e0      	b.n	80136ca <_malloc_r+0x62>
 8013708:	0a7b      	lsrs	r3, r7, #9
 801370a:	d02a      	beq.n	8013762 <_malloc_r+0xfa>
 801370c:	2b04      	cmp	r3, #4
 801370e:	d812      	bhi.n	8013736 <_malloc_r+0xce>
 8013710:	09bb      	lsrs	r3, r7, #6
 8013712:	3338      	adds	r3, #56	@ 0x38
 8013714:	1c5a      	adds	r2, r3, #1
 8013716:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801371a:	f1a2 0c08 	sub.w	ip, r2, #8
 801371e:	6854      	ldr	r4, [r2, #4]
 8013720:	4564      	cmp	r4, ip
 8013722:	d006      	beq.n	8013732 <_malloc_r+0xca>
 8013724:	6862      	ldr	r2, [r4, #4]
 8013726:	f022 0203 	bic.w	r2, r2, #3
 801372a:	1bd0      	subs	r0, r2, r7
 801372c:	280f      	cmp	r0, #15
 801372e:	dd1c      	ble.n	801376a <_malloc_r+0x102>
 8013730:	3b01      	subs	r3, #1
 8013732:	3301      	adds	r3, #1
 8013734:	e7cf      	b.n	80136d6 <_malloc_r+0x6e>
 8013736:	2b14      	cmp	r3, #20
 8013738:	d801      	bhi.n	801373e <_malloc_r+0xd6>
 801373a:	335b      	adds	r3, #91	@ 0x5b
 801373c:	e7ea      	b.n	8013714 <_malloc_r+0xac>
 801373e:	2b54      	cmp	r3, #84	@ 0x54
 8013740:	d802      	bhi.n	8013748 <_malloc_r+0xe0>
 8013742:	0b3b      	lsrs	r3, r7, #12
 8013744:	336e      	adds	r3, #110	@ 0x6e
 8013746:	e7e5      	b.n	8013714 <_malloc_r+0xac>
 8013748:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801374c:	d802      	bhi.n	8013754 <_malloc_r+0xec>
 801374e:	0bfb      	lsrs	r3, r7, #15
 8013750:	3377      	adds	r3, #119	@ 0x77
 8013752:	e7df      	b.n	8013714 <_malloc_r+0xac>
 8013754:	f240 5254 	movw	r2, #1364	@ 0x554
 8013758:	4293      	cmp	r3, r2
 801375a:	d804      	bhi.n	8013766 <_malloc_r+0xfe>
 801375c:	0cbb      	lsrs	r3, r7, #18
 801375e:	337c      	adds	r3, #124	@ 0x7c
 8013760:	e7d8      	b.n	8013714 <_malloc_r+0xac>
 8013762:	233f      	movs	r3, #63	@ 0x3f
 8013764:	e7d6      	b.n	8013714 <_malloc_r+0xac>
 8013766:	237e      	movs	r3, #126	@ 0x7e
 8013768:	e7d4      	b.n	8013714 <_malloc_r+0xac>
 801376a:	2800      	cmp	r0, #0
 801376c:	68e1      	ldr	r1, [r4, #12]
 801376e:	db04      	blt.n	801377a <_malloc_r+0x112>
 8013770:	68a3      	ldr	r3, [r4, #8]
 8013772:	60d9      	str	r1, [r3, #12]
 8013774:	608b      	str	r3, [r1, #8]
 8013776:	18a3      	adds	r3, r4, r2
 8013778:	e7a3      	b.n	80136c2 <_malloc_r+0x5a>
 801377a:	460c      	mov	r4, r1
 801377c:	e7d0      	b.n	8013720 <_malloc_r+0xb8>
 801377e:	2800      	cmp	r0, #0
 8013780:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8013784:	db07      	blt.n	8013796 <_malloc_r+0x12e>
 8013786:	44a4      	add	ip, r4
 8013788:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801378c:	f043 0301 	orr.w	r3, r3, #1
 8013790:	f8cc 3004 	str.w	r3, [ip, #4]
 8013794:	e799      	b.n	80136ca <_malloc_r+0x62>
 8013796:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801379a:	6870      	ldr	r0, [r6, #4]
 801379c:	f080 8095 	bcs.w	80138ca <_malloc_r+0x262>
 80137a0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80137a4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80137a8:	f04f 0c01 	mov.w	ip, #1
 80137ac:	3201      	adds	r2, #1
 80137ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 80137b2:	ea4c 0000 	orr.w	r0, ip, r0
 80137b6:	6070      	str	r0, [r6, #4]
 80137b8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80137bc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80137c0:	3808      	subs	r0, #8
 80137c2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80137c6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80137ca:	f8cc 400c 	str.w	r4, [ip, #12]
 80137ce:	1098      	asrs	r0, r3, #2
 80137d0:	2201      	movs	r2, #1
 80137d2:	4082      	lsls	r2, r0
 80137d4:	6870      	ldr	r0, [r6, #4]
 80137d6:	4290      	cmp	r0, r2
 80137d8:	d326      	bcc.n	8013828 <_malloc_r+0x1c0>
 80137da:	4210      	tst	r0, r2
 80137dc:	d106      	bne.n	80137ec <_malloc_r+0x184>
 80137de:	f023 0303 	bic.w	r3, r3, #3
 80137e2:	0052      	lsls	r2, r2, #1
 80137e4:	4210      	tst	r0, r2
 80137e6:	f103 0304 	add.w	r3, r3, #4
 80137ea:	d0fa      	beq.n	80137e2 <_malloc_r+0x17a>
 80137ec:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80137f0:	46c1      	mov	r9, r8
 80137f2:	469e      	mov	lr, r3
 80137f4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80137f8:	454c      	cmp	r4, r9
 80137fa:	f040 80b9 	bne.w	8013970 <_malloc_r+0x308>
 80137fe:	f10e 0e01 	add.w	lr, lr, #1
 8013802:	f01e 0f03 	tst.w	lr, #3
 8013806:	f109 0908 	add.w	r9, r9, #8
 801380a:	d1f3      	bne.n	80137f4 <_malloc_r+0x18c>
 801380c:	0798      	lsls	r0, r3, #30
 801380e:	f040 80e3 	bne.w	80139d8 <_malloc_r+0x370>
 8013812:	6873      	ldr	r3, [r6, #4]
 8013814:	ea23 0302 	bic.w	r3, r3, r2
 8013818:	6073      	str	r3, [r6, #4]
 801381a:	6870      	ldr	r0, [r6, #4]
 801381c:	0052      	lsls	r2, r2, #1
 801381e:	4290      	cmp	r0, r2
 8013820:	d302      	bcc.n	8013828 <_malloc_r+0x1c0>
 8013822:	2a00      	cmp	r2, #0
 8013824:	f040 80e5 	bne.w	80139f2 <_malloc_r+0x38a>
 8013828:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801382c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013830:	f023 0903 	bic.w	r9, r3, #3
 8013834:	45b9      	cmp	r9, r7
 8013836:	d304      	bcc.n	8013842 <_malloc_r+0x1da>
 8013838:	eba9 0207 	sub.w	r2, r9, r7
 801383c:	2a0f      	cmp	r2, #15
 801383e:	f300 8141 	bgt.w	8013ac4 <_malloc_r+0x45c>
 8013842:	4b46      	ldr	r3, [pc, #280]	@ (801395c <_malloc_r+0x2f4>)
 8013844:	6819      	ldr	r1, [r3, #0]
 8013846:	3110      	adds	r1, #16
 8013848:	4439      	add	r1, r7
 801384a:	2008      	movs	r0, #8
 801384c:	9101      	str	r1, [sp, #4]
 801384e:	f002 fc25 	bl	801609c <sysconf>
 8013852:	4a43      	ldr	r2, [pc, #268]	@ (8013960 <_malloc_r+0x2f8>)
 8013854:	9901      	ldr	r1, [sp, #4]
 8013856:	6813      	ldr	r3, [r2, #0]
 8013858:	3301      	adds	r3, #1
 801385a:	bf1f      	itttt	ne
 801385c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8013860:	1809      	addne	r1, r1, r0
 8013862:	4243      	negne	r3, r0
 8013864:	4019      	andne	r1, r3
 8013866:	4680      	mov	r8, r0
 8013868:	4628      	mov	r0, r5
 801386a:	9101      	str	r1, [sp, #4]
 801386c:	f002 fbf2 	bl	8016054 <_sbrk_r>
 8013870:	1c42      	adds	r2, r0, #1
 8013872:	eb0a 0b09 	add.w	fp, sl, r9
 8013876:	4604      	mov	r4, r0
 8013878:	f000 80f7 	beq.w	8013a6a <_malloc_r+0x402>
 801387c:	4583      	cmp	fp, r0
 801387e:	9901      	ldr	r1, [sp, #4]
 8013880:	4a37      	ldr	r2, [pc, #220]	@ (8013960 <_malloc_r+0x2f8>)
 8013882:	d902      	bls.n	801388a <_malloc_r+0x222>
 8013884:	45b2      	cmp	sl, r6
 8013886:	f040 80f0 	bne.w	8013a6a <_malloc_r+0x402>
 801388a:	4b36      	ldr	r3, [pc, #216]	@ (8013964 <_malloc_r+0x2fc>)
 801388c:	6818      	ldr	r0, [r3, #0]
 801388e:	45a3      	cmp	fp, r4
 8013890:	eb00 0e01 	add.w	lr, r0, r1
 8013894:	f8c3 e000 	str.w	lr, [r3]
 8013898:	f108 3cff 	add.w	ip, r8, #4294967295
 801389c:	f040 80ab 	bne.w	80139f6 <_malloc_r+0x38e>
 80138a0:	ea1b 0f0c 	tst.w	fp, ip
 80138a4:	f040 80a7 	bne.w	80139f6 <_malloc_r+0x38e>
 80138a8:	68b2      	ldr	r2, [r6, #8]
 80138aa:	4449      	add	r1, r9
 80138ac:	f041 0101 	orr.w	r1, r1, #1
 80138b0:	6051      	str	r1, [r2, #4]
 80138b2:	4a2d      	ldr	r2, [pc, #180]	@ (8013968 <_malloc_r+0x300>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	6811      	ldr	r1, [r2, #0]
 80138b8:	428b      	cmp	r3, r1
 80138ba:	bf88      	it	hi
 80138bc:	6013      	strhi	r3, [r2, #0]
 80138be:	4a2b      	ldr	r2, [pc, #172]	@ (801396c <_malloc_r+0x304>)
 80138c0:	6811      	ldr	r1, [r2, #0]
 80138c2:	428b      	cmp	r3, r1
 80138c4:	bf88      	it	hi
 80138c6:	6013      	strhi	r3, [r2, #0]
 80138c8:	e0cf      	b.n	8013a6a <_malloc_r+0x402>
 80138ca:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80138ce:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80138d2:	d218      	bcs.n	8013906 <_malloc_r+0x29e>
 80138d4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80138d8:	3238      	adds	r2, #56	@ 0x38
 80138da:	f102 0e01 	add.w	lr, r2, #1
 80138de:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80138e2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80138e6:	45f0      	cmp	r8, lr
 80138e8:	d12b      	bne.n	8013942 <_malloc_r+0x2da>
 80138ea:	1092      	asrs	r2, r2, #2
 80138ec:	f04f 0c01 	mov.w	ip, #1
 80138f0:	fa0c f202 	lsl.w	r2, ip, r2
 80138f4:	4302      	orrs	r2, r0
 80138f6:	6072      	str	r2, [r6, #4]
 80138f8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80138fc:	f8c8 4008 	str.w	r4, [r8, #8]
 8013900:	f8ce 400c 	str.w	r4, [lr, #12]
 8013904:	e763      	b.n	80137ce <_malloc_r+0x166>
 8013906:	2a14      	cmp	r2, #20
 8013908:	d801      	bhi.n	801390e <_malloc_r+0x2a6>
 801390a:	325b      	adds	r2, #91	@ 0x5b
 801390c:	e7e5      	b.n	80138da <_malloc_r+0x272>
 801390e:	2a54      	cmp	r2, #84	@ 0x54
 8013910:	d803      	bhi.n	801391a <_malloc_r+0x2b2>
 8013912:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8013916:	326e      	adds	r2, #110	@ 0x6e
 8013918:	e7df      	b.n	80138da <_malloc_r+0x272>
 801391a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801391e:	d803      	bhi.n	8013928 <_malloc_r+0x2c0>
 8013920:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8013924:	3277      	adds	r2, #119	@ 0x77
 8013926:	e7d8      	b.n	80138da <_malloc_r+0x272>
 8013928:	f240 5e54 	movw	lr, #1364	@ 0x554
 801392c:	4572      	cmp	r2, lr
 801392e:	bf9a      	itte	ls
 8013930:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8013934:	327c      	addls	r2, #124	@ 0x7c
 8013936:	227e      	movhi	r2, #126	@ 0x7e
 8013938:	e7cf      	b.n	80138da <_malloc_r+0x272>
 801393a:	f8de e008 	ldr.w	lr, [lr, #8]
 801393e:	45f0      	cmp	r8, lr
 8013940:	d005      	beq.n	801394e <_malloc_r+0x2e6>
 8013942:	f8de 2004 	ldr.w	r2, [lr, #4]
 8013946:	f022 0203 	bic.w	r2, r2, #3
 801394a:	4562      	cmp	r2, ip
 801394c:	d8f5      	bhi.n	801393a <_malloc_r+0x2d2>
 801394e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8013952:	e7d1      	b.n	80138f8 <_malloc_r+0x290>
 8013954:	20000374 	.word	0x20000374
 8013958:	2000037c 	.word	0x2000037c
 801395c:	20007588 	.word	0x20007588
 8013960:	2000036c 	.word	0x2000036c
 8013964:	20007558 	.word	0x20007558
 8013968:	20007584 	.word	0x20007584
 801396c:	20007580 	.word	0x20007580
 8013970:	6860      	ldr	r0, [r4, #4]
 8013972:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8013976:	f020 0003 	bic.w	r0, r0, #3
 801397a:	eba0 0a07 	sub.w	sl, r0, r7
 801397e:	f1ba 0f0f 	cmp.w	sl, #15
 8013982:	dd12      	ble.n	80139aa <_malloc_r+0x342>
 8013984:	68a3      	ldr	r3, [r4, #8]
 8013986:	19e2      	adds	r2, r4, r7
 8013988:	f047 0701 	orr.w	r7, r7, #1
 801398c:	6067      	str	r7, [r4, #4]
 801398e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8013992:	f8cc 3008 	str.w	r3, [ip, #8]
 8013996:	f04a 0301 	orr.w	r3, sl, #1
 801399a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801399e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80139a2:	6053      	str	r3, [r2, #4]
 80139a4:	f844 a000 	str.w	sl, [r4, r0]
 80139a8:	e68f      	b.n	80136ca <_malloc_r+0x62>
 80139aa:	f1ba 0f00 	cmp.w	sl, #0
 80139ae:	db11      	blt.n	80139d4 <_malloc_r+0x36c>
 80139b0:	4420      	add	r0, r4
 80139b2:	6843      	ldr	r3, [r0, #4]
 80139b4:	f043 0301 	orr.w	r3, r3, #1
 80139b8:	6043      	str	r3, [r0, #4]
 80139ba:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80139be:	4628      	mov	r0, r5
 80139c0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80139c4:	f8cc 3008 	str.w	r3, [ip, #8]
 80139c8:	f000 f88e 	bl	8013ae8 <__malloc_unlock>
 80139cc:	4620      	mov	r0, r4
 80139ce:	b003      	add	sp, #12
 80139d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d4:	4664      	mov	r4, ip
 80139d6:	e70f      	b.n	80137f8 <_malloc_r+0x190>
 80139d8:	f858 0908 	ldr.w	r0, [r8], #-8
 80139dc:	4540      	cmp	r0, r8
 80139de:	f103 33ff 	add.w	r3, r3, #4294967295
 80139e2:	f43f af13 	beq.w	801380c <_malloc_r+0x1a4>
 80139e6:	e718      	b.n	801381a <_malloc_r+0x1b2>
 80139e8:	3304      	adds	r3, #4
 80139ea:	0052      	lsls	r2, r2, #1
 80139ec:	4210      	tst	r0, r2
 80139ee:	d0fb      	beq.n	80139e8 <_malloc_r+0x380>
 80139f0:	e6fc      	b.n	80137ec <_malloc_r+0x184>
 80139f2:	4673      	mov	r3, lr
 80139f4:	e7fa      	b.n	80139ec <_malloc_r+0x384>
 80139f6:	6810      	ldr	r0, [r2, #0]
 80139f8:	3001      	adds	r0, #1
 80139fa:	bf1b      	ittet	ne
 80139fc:	eba4 0b0b 	subne.w	fp, r4, fp
 8013a00:	eb0b 020e 	addne.w	r2, fp, lr
 8013a04:	6014      	streq	r4, [r2, #0]
 8013a06:	601a      	strne	r2, [r3, #0]
 8013a08:	f014 0b07 	ands.w	fp, r4, #7
 8013a0c:	bf1a      	itte	ne
 8013a0e:	f1cb 0008 	rsbne	r0, fp, #8
 8013a12:	1824      	addne	r4, r4, r0
 8013a14:	4658      	moveq	r0, fp
 8013a16:	1862      	adds	r2, r4, r1
 8013a18:	ea02 010c 	and.w	r1, r2, ip
 8013a1c:	4480      	add	r8, r0
 8013a1e:	eba8 0801 	sub.w	r8, r8, r1
 8013a22:	ea08 080c 	and.w	r8, r8, ip
 8013a26:	4641      	mov	r1, r8
 8013a28:	4628      	mov	r0, r5
 8013a2a:	9201      	str	r2, [sp, #4]
 8013a2c:	f002 fb12 	bl	8016054 <_sbrk_r>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	9a01      	ldr	r2, [sp, #4]
 8013a34:	4b28      	ldr	r3, [pc, #160]	@ (8013ad8 <_malloc_r+0x470>)
 8013a36:	d107      	bne.n	8013a48 <_malloc_r+0x3e0>
 8013a38:	f1bb 0f00 	cmp.w	fp, #0
 8013a3c:	d023      	beq.n	8013a86 <_malloc_r+0x41e>
 8013a3e:	f1ab 0008 	sub.w	r0, fp, #8
 8013a42:	4410      	add	r0, r2
 8013a44:	f04f 0800 	mov.w	r8, #0
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	60b4      	str	r4, [r6, #8]
 8013a4c:	1b00      	subs	r0, r0, r4
 8013a4e:	4440      	add	r0, r8
 8013a50:	4442      	add	r2, r8
 8013a52:	f040 0001 	orr.w	r0, r0, #1
 8013a56:	45b2      	cmp	sl, r6
 8013a58:	601a      	str	r2, [r3, #0]
 8013a5a:	6060      	str	r0, [r4, #4]
 8013a5c:	f43f af29 	beq.w	80138b2 <_malloc_r+0x24a>
 8013a60:	f1b9 0f0f 	cmp.w	r9, #15
 8013a64:	d812      	bhi.n	8013a8c <_malloc_r+0x424>
 8013a66:	2301      	movs	r3, #1
 8013a68:	6063      	str	r3, [r4, #4]
 8013a6a:	68b3      	ldr	r3, [r6, #8]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	f023 0303 	bic.w	r3, r3, #3
 8013a72:	42bb      	cmp	r3, r7
 8013a74:	eba3 0207 	sub.w	r2, r3, r7
 8013a78:	d301      	bcc.n	8013a7e <_malloc_r+0x416>
 8013a7a:	2a0f      	cmp	r2, #15
 8013a7c:	dc22      	bgt.n	8013ac4 <_malloc_r+0x45c>
 8013a7e:	4628      	mov	r0, r5
 8013a80:	f000 f832 	bl	8013ae8 <__malloc_unlock>
 8013a84:	e5fc      	b.n	8013680 <_malloc_r+0x18>
 8013a86:	4610      	mov	r0, r2
 8013a88:	46d8      	mov	r8, fp
 8013a8a:	e7dd      	b.n	8013a48 <_malloc_r+0x3e0>
 8013a8c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8013a90:	f1a9 090c 	sub.w	r9, r9, #12
 8013a94:	f029 0907 	bic.w	r9, r9, #7
 8013a98:	f002 0201 	and.w	r2, r2, #1
 8013a9c:	ea42 0209 	orr.w	r2, r2, r9
 8013aa0:	f8ca 2004 	str.w	r2, [sl, #4]
 8013aa4:	2105      	movs	r1, #5
 8013aa6:	eb0a 0209 	add.w	r2, sl, r9
 8013aaa:	f1b9 0f0f 	cmp.w	r9, #15
 8013aae:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8013ab2:	f67f aefe 	bls.w	80138b2 <_malloc_r+0x24a>
 8013ab6:	f10a 0108 	add.w	r1, sl, #8
 8013aba:	4628      	mov	r0, r5
 8013abc:	f7ff fd14 	bl	80134e8 <_free_r>
 8013ac0:	4b05      	ldr	r3, [pc, #20]	@ (8013ad8 <_malloc_r+0x470>)
 8013ac2:	e6f6      	b.n	80138b2 <_malloc_r+0x24a>
 8013ac4:	68b4      	ldr	r4, [r6, #8]
 8013ac6:	f047 0301 	orr.w	r3, r7, #1
 8013aca:	4427      	add	r7, r4
 8013acc:	f042 0201 	orr.w	r2, r2, #1
 8013ad0:	6063      	str	r3, [r4, #4]
 8013ad2:	60b7      	str	r7, [r6, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
 8013ad6:	e5f8      	b.n	80136ca <_malloc_r+0x62>
 8013ad8:	20007558 	.word	0x20007558

08013adc <__malloc_lock>:
 8013adc:	4801      	ldr	r0, [pc, #4]	@ (8013ae4 <__malloc_lock+0x8>)
 8013ade:	f7ff bc8d 	b.w	80133fc <__retarget_lock_acquire_recursive>
 8013ae2:	bf00      	nop
 8013ae4:	20007550 	.word	0x20007550

08013ae8 <__malloc_unlock>:
 8013ae8:	4801      	ldr	r0, [pc, #4]	@ (8013af0 <__malloc_unlock+0x8>)
 8013aea:	f7ff bc88 	b.w	80133fe <__retarget_lock_release_recursive>
 8013aee:	bf00      	nop
 8013af0:	20007550 	.word	0x20007550
 8013af4:	00000000 	.word	0x00000000

08013af8 <_vfprintf_r>:
 8013af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afc:	b0d3      	sub	sp, #332	@ 0x14c
 8013afe:	468b      	mov	fp, r1
 8013b00:	4690      	mov	r8, r2
 8013b02:	461c      	mov	r4, r3
 8013b04:	461e      	mov	r6, r3
 8013b06:	9003      	str	r0, [sp, #12]
 8013b08:	f002 faa0 	bl	801604c <_localeconv_r>
 8013b0c:	6803      	ldr	r3, [r0, #0]
 8013b0e:	9316      	str	r3, [sp, #88]	@ 0x58
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7f0 fb5d 	bl	80041d0 <strlen>
 8013b16:	9b03      	ldr	r3, [sp, #12]
 8013b18:	900d      	str	r0, [sp, #52]	@ 0x34
 8013b1a:	b123      	cbz	r3, 8013b26 <_vfprintf_r+0x2e>
 8013b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b1e:	b913      	cbnz	r3, 8013b26 <_vfprintf_r+0x2e>
 8013b20:	9803      	ldr	r0, [sp, #12]
 8013b22:	f7ff fb17 	bl	8013154 <__sinit>
 8013b26:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8013b2a:	07da      	lsls	r2, r3, #31
 8013b2c:	d407      	bmi.n	8013b3e <_vfprintf_r+0x46>
 8013b2e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013b32:	059b      	lsls	r3, r3, #22
 8013b34:	d403      	bmi.n	8013b3e <_vfprintf_r+0x46>
 8013b36:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8013b3a:	f7ff fc5f 	bl	80133fc <__retarget_lock_acquire_recursive>
 8013b3e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8013b42:	049f      	lsls	r7, r3, #18
 8013b44:	d409      	bmi.n	8013b5a <_vfprintf_r+0x62>
 8013b46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013b4a:	f8ab 300c 	strh.w	r3, [fp, #12]
 8013b4e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8013b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013b56:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 8013b5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013b5e:	071d      	lsls	r5, r3, #28
 8013b60:	d502      	bpl.n	8013b68 <_vfprintf_r+0x70>
 8013b62:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013b66:	b9c3      	cbnz	r3, 8013b9a <_vfprintf_r+0xa2>
 8013b68:	9803      	ldr	r0, [sp, #12]
 8013b6a:	4659      	mov	r1, fp
 8013b6c:	f002 f97a 	bl	8015e64 <__swsetup_r>
 8013b70:	b198      	cbz	r0, 8013b9a <_vfprintf_r+0xa2>
 8013b72:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8013b76:	07d8      	lsls	r0, r3, #31
 8013b78:	d506      	bpl.n	8013b88 <_vfprintf_r+0x90>
 8013b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b80:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8013b82:	b053      	add	sp, #332	@ 0x14c
 8013b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b88:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013b8c:	0599      	lsls	r1, r3, #22
 8013b8e:	d4f4      	bmi.n	8013b7a <_vfprintf_r+0x82>
 8013b90:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8013b94:	f7ff fc33 	bl	80133fe <__retarget_lock_release_recursive>
 8013b98:	e7ef      	b.n	8013b7a <_vfprintf_r+0x82>
 8013b9a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8013b9e:	f003 021a 	and.w	r2, r3, #26
 8013ba2:	2a0a      	cmp	r2, #10
 8013ba4:	d116      	bne.n	8013bd4 <_vfprintf_r+0xdc>
 8013ba6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8013baa:	2a00      	cmp	r2, #0
 8013bac:	db12      	blt.n	8013bd4 <_vfprintf_r+0xdc>
 8013bae:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8013bb2:	07d2      	lsls	r2, r2, #31
 8013bb4:	d405      	bmi.n	8013bc2 <_vfprintf_r+0xca>
 8013bb6:	059b      	lsls	r3, r3, #22
 8013bb8:	d403      	bmi.n	8013bc2 <_vfprintf_r+0xca>
 8013bba:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8013bbe:	f7ff fc1e 	bl	80133fe <__retarget_lock_release_recursive>
 8013bc2:	9803      	ldr	r0, [sp, #12]
 8013bc4:	4623      	mov	r3, r4
 8013bc6:	4642      	mov	r2, r8
 8013bc8:	4659      	mov	r1, fp
 8013bca:	b053      	add	sp, #332	@ 0x14c
 8013bcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd0:	f001 b9be 	b.w	8014f50 <__sbprintf>
 8013bd4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8013e20 <_vfprintf_r+0x328>
 8013bd8:	2300      	movs	r3, #0
 8013bda:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8013bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013be2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8013be6:	ac29      	add	r4, sp, #164	@ 0xa4
 8013be8:	9426      	str	r4, [sp, #152]	@ 0x98
 8013bea:	9304      	str	r3, [sp, #16]
 8013bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bee:	9312      	str	r3, [sp, #72]	@ 0x48
 8013bf0:	9317      	str	r3, [sp, #92]	@ 0x5c
 8013bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013bf4:	4643      	mov	r3, r8
 8013bf6:	461d      	mov	r5, r3
 8013bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bfc:	b10a      	cbz	r2, 8013c02 <_vfprintf_r+0x10a>
 8013bfe:	2a25      	cmp	r2, #37	@ 0x25
 8013c00:	d1f9      	bne.n	8013bf6 <_vfprintf_r+0xfe>
 8013c02:	ebb5 0708 	subs.w	r7, r5, r8
 8013c06:	d00d      	beq.n	8013c24 <_vfprintf_r+0x12c>
 8013c08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8013c0a:	443b      	add	r3, r7
 8013c0c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8013c0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8013c10:	3301      	adds	r3, #1
 8013c12:	2b07      	cmp	r3, #7
 8013c14:	e9c4 8700 	strd	r8, r7, [r4]
 8013c18:	9327      	str	r3, [sp, #156]	@ 0x9c
 8013c1a:	dc75      	bgt.n	8013d08 <_vfprintf_r+0x210>
 8013c1c:	3408      	adds	r4, #8
 8013c1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c20:	443b      	add	r3, r7
 8013c22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013c24:	782b      	ldrb	r3, [r5, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f001 814f 	beq.w	8014eca <_vfprintf_r+0x13d2>
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	1c6b      	adds	r3, r5, #1
 8013c30:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8013c34:	f04f 39ff 	mov.w	r9, #4294967295
 8013c38:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c3a:	4615      	mov	r5, r2
 8013c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c40:	9206      	str	r2, [sp, #24]
 8013c42:	930c      	str	r3, [sp, #48]	@ 0x30
 8013c44:	9b06      	ldr	r3, [sp, #24]
 8013c46:	3b20      	subs	r3, #32
 8013c48:	2b5a      	cmp	r3, #90	@ 0x5a
 8013c4a:	f200 85aa 	bhi.w	80147a2 <_vfprintf_r+0xcaa>
 8013c4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013c52:	009d      	.short	0x009d
 8013c54:	05a805a8 	.word	0x05a805a8
 8013c58:	05a800a5 	.word	0x05a800a5
 8013c5c:	05a805a8 	.word	0x05a805a8
 8013c60:	05a80085 	.word	0x05a80085
 8013c64:	00a805a8 	.word	0x00a805a8
 8013c68:	05a800b2 	.word	0x05a800b2
 8013c6c:	00b400af 	.word	0x00b400af
 8013c70:	00ce05a8 	.word	0x00ce05a8
 8013c74:	00d100d1 	.word	0x00d100d1
 8013c78:	00d100d1 	.word	0x00d100d1
 8013c7c:	00d100d1 	.word	0x00d100d1
 8013c80:	00d100d1 	.word	0x00d100d1
 8013c84:	05a800d1 	.word	0x05a800d1
 8013c88:	05a805a8 	.word	0x05a805a8
 8013c8c:	05a805a8 	.word	0x05a805a8
 8013c90:	05a805a8 	.word	0x05a805a8
 8013c94:	05a80146 	.word	0x05a80146
 8013c98:	011a0107 	.word	0x011a0107
 8013c9c:	01460146 	.word	0x01460146
 8013ca0:	05a80146 	.word	0x05a80146
 8013ca4:	05a805a8 	.word	0x05a805a8
 8013ca8:	00e205a8 	.word	0x00e205a8
 8013cac:	05a805a8 	.word	0x05a805a8
 8013cb0:	05a804a3 	.word	0x05a804a3
 8013cb4:	05a805a8 	.word	0x05a805a8
 8013cb8:	05a804ed 	.word	0x05a804ed
 8013cbc:	05a8050e 	.word	0x05a8050e
 8013cc0:	053005a8 	.word	0x053005a8
 8013cc4:	05a805a8 	.word	0x05a805a8
 8013cc8:	05a805a8 	.word	0x05a805a8
 8013ccc:	05a805a8 	.word	0x05a805a8
 8013cd0:	05a805a8 	.word	0x05a805a8
 8013cd4:	05a80146 	.word	0x05a80146
 8013cd8:	011c0107 	.word	0x011c0107
 8013cdc:	01460146 	.word	0x01460146
 8013ce0:	00ed0146 	.word	0x00ed0146
 8013ce4:	0101011c 	.word	0x0101011c
 8013ce8:	00fa05a8 	.word	0x00fa05a8
 8013cec:	048705a8 	.word	0x048705a8
 8013cf0:	04dc04a5 	.word	0x04dc04a5
 8013cf4:	05a80101 	.word	0x05a80101
 8013cf8:	009b04ed 	.word	0x009b04ed
 8013cfc:	05a80510 	.word	0x05a80510
 8013d00:	006505a8 	.word	0x006505a8
 8013d04:	009b05a8 	.word	0x009b05a8
 8013d08:	9803      	ldr	r0, [sp, #12]
 8013d0a:	aa26      	add	r2, sp, #152	@ 0x98
 8013d0c:	4659      	mov	r1, fp
 8013d0e:	f001 f95f 	bl	8014fd0 <__sprint_r>
 8013d12:	2800      	cmp	r0, #0
 8013d14:	f040 814d 	bne.w	8013fb2 <_vfprintf_r+0x4ba>
 8013d18:	ac29      	add	r4, sp, #164	@ 0xa4
 8013d1a:	e780      	b.n	8013c1e <_vfprintf_r+0x126>
 8013d1c:	4b42      	ldr	r3, [pc, #264]	@ (8013e28 <_vfprintf_r+0x330>)
 8013d1e:	9319      	str	r3, [sp, #100]	@ 0x64
 8013d20:	f015 0320 	ands.w	r3, r5, #32
 8013d24:	f000 84c8 	beq.w	80146b8 <_vfprintf_r+0xbc0>
 8013d28:	3607      	adds	r6, #7
 8013d2a:	f026 0307 	bic.w	r3, r6, #7
 8013d2e:	461a      	mov	r2, r3
 8013d30:	685f      	ldr	r7, [r3, #4]
 8013d32:	f852 6b08 	ldr.w	r6, [r2], #8
 8013d36:	9207      	str	r2, [sp, #28]
 8013d38:	07eb      	lsls	r3, r5, #31
 8013d3a:	d50a      	bpl.n	8013d52 <_vfprintf_r+0x25a>
 8013d3c:	ea56 0307 	orrs.w	r3, r6, r7
 8013d40:	d007      	beq.n	8013d52 <_vfprintf_r+0x25a>
 8013d42:	2330      	movs	r3, #48	@ 0x30
 8013d44:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8013d48:	9b06      	ldr	r3, [sp, #24]
 8013d4a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8013d4e:	f045 0502 	orr.w	r5, r5, #2
 8013d52:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8013d56:	2302      	movs	r3, #2
 8013d58:	f000 bc2e 	b.w	80145b8 <_vfprintf_r+0xac0>
 8013d5c:	9803      	ldr	r0, [sp, #12]
 8013d5e:	f002 f975 	bl	801604c <_localeconv_r>
 8013d62:	6843      	ldr	r3, [r0, #4]
 8013d64:	9317      	str	r3, [sp, #92]	@ 0x5c
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7f0 fa32 	bl	80041d0 <strlen>
 8013d6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013d6e:	9803      	ldr	r0, [sp, #12]
 8013d70:	f002 f96c 	bl	801604c <_localeconv_r>
 8013d74:	6883      	ldr	r3, [r0, #8]
 8013d76:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013d7a:	b12b      	cbz	r3, 8013d88 <_vfprintf_r+0x290>
 8013d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d7e:	b11b      	cbz	r3, 8013d88 <_vfprintf_r+0x290>
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	b10b      	cbz	r3, 8013d88 <_vfprintf_r+0x290>
 8013d84:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8013d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013d8a:	e757      	b.n	8013c3c <_vfprintf_r+0x144>
 8013d8c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d1f9      	bne.n	8013d88 <_vfprintf_r+0x290>
 8013d94:	2320      	movs	r3, #32
 8013d96:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8013d9a:	e7f5      	b.n	8013d88 <_vfprintf_r+0x290>
 8013d9c:	f045 0501 	orr.w	r5, r5, #1
 8013da0:	e7f2      	b.n	8013d88 <_vfprintf_r+0x290>
 8013da2:	f856 3b04 	ldr.w	r3, [r6], #4
 8013da6:	930e      	str	r3, [sp, #56]	@ 0x38
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	daed      	bge.n	8013d88 <_vfprintf_r+0x290>
 8013dac:	425b      	negs	r3, r3
 8013dae:	930e      	str	r3, [sp, #56]	@ 0x38
 8013db0:	f045 0504 	orr.w	r5, r5, #4
 8013db4:	e7e8      	b.n	8013d88 <_vfprintf_r+0x290>
 8013db6:	232b      	movs	r3, #43	@ 0x2b
 8013db8:	e7ed      	b.n	8013d96 <_vfprintf_r+0x29e>
 8013dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dc0:	9206      	str	r2, [sp, #24]
 8013dc2:	2a2a      	cmp	r2, #42	@ 0x2a
 8013dc4:	d10f      	bne.n	8013de6 <_vfprintf_r+0x2ee>
 8013dc6:	f856 2b04 	ldr.w	r2, [r6], #4
 8013dca:	930c      	str	r3, [sp, #48]	@ 0x30
 8013dcc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8013dd0:	e7da      	b.n	8013d88 <_vfprintf_r+0x290>
 8013dd2:	fb01 2909 	mla	r9, r1, r9, r2
 8013dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dda:	9206      	str	r2, [sp, #24]
 8013ddc:	9a06      	ldr	r2, [sp, #24]
 8013dde:	3a30      	subs	r2, #48	@ 0x30
 8013de0:	2a09      	cmp	r2, #9
 8013de2:	d9f6      	bls.n	8013dd2 <_vfprintf_r+0x2da>
 8013de4:	e72d      	b.n	8013c42 <_vfprintf_r+0x14a>
 8013de6:	f04f 0900 	mov.w	r9, #0
 8013dea:	210a      	movs	r1, #10
 8013dec:	e7f6      	b.n	8013ddc <_vfprintf_r+0x2e4>
 8013dee:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8013df2:	e7c9      	b.n	8013d88 <_vfprintf_r+0x290>
 8013df4:	2200      	movs	r2, #0
 8013df6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013df8:	920e      	str	r2, [sp, #56]	@ 0x38
 8013dfa:	210a      	movs	r1, #10
 8013dfc:	9a06      	ldr	r2, [sp, #24]
 8013dfe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013e00:	3a30      	subs	r2, #48	@ 0x30
 8013e02:	fb01 2200 	mla	r2, r1, r0, r2
 8013e06:	920e      	str	r2, [sp, #56]	@ 0x38
 8013e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e0c:	9206      	str	r2, [sp, #24]
 8013e0e:	3a30      	subs	r2, #48	@ 0x30
 8013e10:	2a09      	cmp	r2, #9
 8013e12:	d9f3      	bls.n	8013dfc <_vfprintf_r+0x304>
 8013e14:	e715      	b.n	8013c42 <_vfprintf_r+0x14a>
 8013e16:	f045 0508 	orr.w	r5, r5, #8
 8013e1a:	e7b5      	b.n	8013d88 <_vfprintf_r+0x290>
 8013e1c:	f3af 8000 	nop.w
	...
 8013e28:	08018980 	.word	0x08018980
 8013e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e2e:	781b      	ldrb	r3, [r3, #0]
 8013e30:	2b68      	cmp	r3, #104	@ 0x68
 8013e32:	bf01      	itttt	eq
 8013e34:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8013e36:	3301      	addeq	r3, #1
 8013e38:	930c      	streq	r3, [sp, #48]	@ 0x30
 8013e3a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8013e3e:	bf18      	it	ne
 8013e40:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8013e44:	e7a0      	b.n	8013d88 <_vfprintf_r+0x290>
 8013e46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	2b6c      	cmp	r3, #108	@ 0x6c
 8013e4c:	d105      	bne.n	8013e5a <_vfprintf_r+0x362>
 8013e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013e50:	3301      	adds	r3, #1
 8013e52:	930c      	str	r3, [sp, #48]	@ 0x30
 8013e54:	f045 0520 	orr.w	r5, r5, #32
 8013e58:	e796      	b.n	8013d88 <_vfprintf_r+0x290>
 8013e5a:	f045 0510 	orr.w	r5, r5, #16
 8013e5e:	e793      	b.n	8013d88 <_vfprintf_r+0x290>
 8013e60:	4632      	mov	r2, r6
 8013e62:	f852 3b04 	ldr.w	r3, [r2], #4
 8013e66:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	9207      	str	r2, [sp, #28]
 8013e6e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8013e72:	469a      	mov	sl, r3
 8013e74:	f04f 0901 	mov.w	r9, #1
 8013e78:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e7a:	461f      	mov	r7, r3
 8013e7c:	9308      	str	r3, [sp, #32]
 8013e7e:	461e      	mov	r6, r3
 8013e80:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8013e84:	e1da      	b.n	801423c <_vfprintf_r+0x744>
 8013e86:	f045 0510 	orr.w	r5, r5, #16
 8013e8a:	06af      	lsls	r7, r5, #26
 8013e8c:	d512      	bpl.n	8013eb4 <_vfprintf_r+0x3bc>
 8013e8e:	3607      	adds	r6, #7
 8013e90:	f026 0307 	bic.w	r3, r6, #7
 8013e94:	461a      	mov	r2, r3
 8013e96:	685f      	ldr	r7, [r3, #4]
 8013e98:	f852 6b08 	ldr.w	r6, [r2], #8
 8013e9c:	9207      	str	r2, [sp, #28]
 8013e9e:	2f00      	cmp	r7, #0
 8013ea0:	da06      	bge.n	8013eb0 <_vfprintf_r+0x3b8>
 8013ea2:	4276      	negs	r6, r6
 8013ea4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8013ea8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8013eac:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e384      	b.n	80145be <_vfprintf_r+0xac6>
 8013eb4:	4633      	mov	r3, r6
 8013eb6:	06ee      	lsls	r6, r5, #27
 8013eb8:	f853 7b04 	ldr.w	r7, [r3], #4
 8013ebc:	9307      	str	r3, [sp, #28]
 8013ebe:	d502      	bpl.n	8013ec6 <_vfprintf_r+0x3ce>
 8013ec0:	463e      	mov	r6, r7
 8013ec2:	17ff      	asrs	r7, r7, #31
 8013ec4:	e7eb      	b.n	8013e9e <_vfprintf_r+0x3a6>
 8013ec6:	0668      	lsls	r0, r5, #25
 8013ec8:	d503      	bpl.n	8013ed2 <_vfprintf_r+0x3da>
 8013eca:	b23e      	sxth	r6, r7
 8013ecc:	f347 37c0 	sbfx	r7, r7, #15, #1
 8013ed0:	e7e5      	b.n	8013e9e <_vfprintf_r+0x3a6>
 8013ed2:	05a9      	lsls	r1, r5, #22
 8013ed4:	d5f4      	bpl.n	8013ec0 <_vfprintf_r+0x3c8>
 8013ed6:	b27e      	sxtb	r6, r7
 8013ed8:	f347 17c0 	sbfx	r7, r7, #7, #1
 8013edc:	e7df      	b.n	8013e9e <_vfprintf_r+0x3a6>
 8013ede:	3607      	adds	r6, #7
 8013ee0:	f026 0307 	bic.w	r3, r6, #7
 8013ee4:	ecb3 7b02 	vldmia	r3!, {d7}
 8013ee8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013eec:	9307      	str	r3, [sp, #28]
 8013eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ef2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013ef4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013ef8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013efa:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8013efe:	4b85      	ldr	r3, [pc, #532]	@ (8014114 <_vfprintf_r+0x61c>)
 8013f00:	f04f 32ff 	mov.w	r2, #4294967295
 8013f04:	f7f0 fe12 	bl	8004b2c <__aeabi_dcmpun>
 8013f08:	bb10      	cbnz	r0, 8013f50 <_vfprintf_r+0x458>
 8013f0a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8013f0e:	4b81      	ldr	r3, [pc, #516]	@ (8014114 <_vfprintf_r+0x61c>)
 8013f10:	f04f 32ff 	mov.w	r2, #4294967295
 8013f14:	f7f0 fdec 	bl	8004af0 <__aeabi_dcmple>
 8013f18:	b9d0      	cbnz	r0, 8013f50 <_vfprintf_r+0x458>
 8013f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013f1e:	2200      	movs	r2, #0
 8013f20:	2300      	movs	r3, #0
 8013f22:	f7f0 fddb 	bl	8004adc <__aeabi_dcmplt>
 8013f26:	b110      	cbz	r0, 8013f2e <_vfprintf_r+0x436>
 8013f28:	232d      	movs	r3, #45	@ 0x2d
 8013f2a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8013f2e:	4a7a      	ldr	r2, [pc, #488]	@ (8014118 <_vfprintf_r+0x620>)
 8013f30:	4b7a      	ldr	r3, [pc, #488]	@ (801411c <_vfprintf_r+0x624>)
 8013f32:	9906      	ldr	r1, [sp, #24]
 8013f34:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8013f38:	2947      	cmp	r1, #71	@ 0x47
 8013f3a:	bfd4      	ite	le
 8013f3c:	4690      	movle	r8, r2
 8013f3e:	4698      	movgt	r8, r3
 8013f40:	f04f 0a00 	mov.w	sl, #0
 8013f44:	f04f 0903 	mov.w	r9, #3
 8013f48:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8013f4c:	f000 bff8 	b.w	8014f40 <_vfprintf_r+0x1448>
 8013f50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8013f54:	4610      	mov	r0, r2
 8013f56:	4619      	mov	r1, r3
 8013f58:	f7f0 fde8 	bl	8004b2c <__aeabi_dcmpun>
 8013f5c:	4682      	mov	sl, r0
 8013f5e:	b140      	cbz	r0, 8013f72 <_vfprintf_r+0x47a>
 8013f60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013f62:	4a6f      	ldr	r2, [pc, #444]	@ (8014120 <_vfprintf_r+0x628>)
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	bfbc      	itt	lt
 8013f68:	232d      	movlt	r3, #45	@ 0x2d
 8013f6a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8013f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8014124 <_vfprintf_r+0x62c>)
 8013f70:	e7df      	b.n	8013f32 <_vfprintf_r+0x43a>
 8013f72:	9b06      	ldr	r3, [sp, #24]
 8013f74:	2b61      	cmp	r3, #97	@ 0x61
 8013f76:	d02e      	beq.n	8013fd6 <_vfprintf_r+0x4de>
 8013f78:	2b41      	cmp	r3, #65	@ 0x41
 8013f7a:	d12e      	bne.n	8013fda <_vfprintf_r+0x4e2>
 8013f7c:	2358      	movs	r3, #88	@ 0x58
 8013f7e:	2230      	movs	r2, #48	@ 0x30
 8013f80:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8013f84:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8013f88:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8013f8c:	f045 0502 	orr.w	r5, r5, #2
 8013f90:	f340 80ae 	ble.w	80140f0 <_vfprintf_r+0x5f8>
 8013f94:	9803      	ldr	r0, [sp, #12]
 8013f96:	f109 0101 	add.w	r1, r9, #1
 8013f9a:	f7ff fb65 	bl	8013668 <_malloc_r>
 8013f9e:	4680      	mov	r8, r0
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	f040 80aa 	bne.w	80140fa <_vfprintf_r+0x602>
 8013fa6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fae:	f8ab 300c 	strh.w	r3, [fp, #12]
 8013fb2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8013fb6:	07d9      	lsls	r1, r3, #31
 8013fb8:	d407      	bmi.n	8013fca <_vfprintf_r+0x4d2>
 8013fba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013fbe:	059a      	lsls	r2, r3, #22
 8013fc0:	d403      	bmi.n	8013fca <_vfprintf_r+0x4d2>
 8013fc2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8013fc6:	f7ff fa1a 	bl	80133fe <__retarget_lock_release_recursive>
 8013fca:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8013fce:	065b      	lsls	r3, r3, #25
 8013fd0:	f57f add6 	bpl.w	8013b80 <_vfprintf_r+0x88>
 8013fd4:	e5d1      	b.n	8013b7a <_vfprintf_r+0x82>
 8013fd6:	2378      	movs	r3, #120	@ 0x78
 8013fd8:	e7d1      	b.n	8013f7e <_vfprintf_r+0x486>
 8013fda:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013fde:	f000 808e 	beq.w	80140fe <_vfprintf_r+0x606>
 8013fe2:	9b06      	ldr	r3, [sp, #24]
 8013fe4:	f023 0320 	bic.w	r3, r3, #32
 8013fe8:	2b47      	cmp	r3, #71	@ 0x47
 8013fea:	d105      	bne.n	8013ff8 <_vfprintf_r+0x500>
 8013fec:	f1b9 0f00 	cmp.w	r9, #0
 8013ff0:	d102      	bne.n	8013ff8 <_vfprintf_r+0x500>
 8013ff2:	46ca      	mov	sl, r9
 8013ff4:	f04f 0901 	mov.w	r9, #1
 8013ff8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8013ffc:	9311      	str	r3, [sp, #68]	@ 0x44
 8013ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014000:	2b00      	cmp	r3, #0
 8014002:	da7f      	bge.n	8014104 <_vfprintf_r+0x60c>
 8014004:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014006:	9314      	str	r3, [sp, #80]	@ 0x50
 8014008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801400a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801400e:	9315      	str	r3, [sp, #84]	@ 0x54
 8014010:	232d      	movs	r3, #45	@ 0x2d
 8014012:	931c      	str	r3, [sp, #112]	@ 0x70
 8014014:	9b06      	ldr	r3, [sp, #24]
 8014016:	f023 0320 	bic.w	r3, r3, #32
 801401a:	2b41      	cmp	r3, #65	@ 0x41
 801401c:	9308      	str	r3, [sp, #32]
 801401e:	f040 81e7 	bne.w	80143f0 <_vfprintf_r+0x8f8>
 8014022:	a820      	add	r0, sp, #128	@ 0x80
 8014024:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8014028:	f002 f844 	bl	80160b4 <frexp>
 801402c:	2200      	movs	r2, #0
 801402e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014032:	ec51 0b10 	vmov	r0, r1, d0
 8014036:	f7f0 fadf 	bl	80045f8 <__aeabi_dmul>
 801403a:	4602      	mov	r2, r0
 801403c:	460b      	mov	r3, r1
 801403e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014042:	2200      	movs	r2, #0
 8014044:	2300      	movs	r3, #0
 8014046:	f7f0 fd3f 	bl	8004ac8 <__aeabi_dcmpeq>
 801404a:	b108      	cbz	r0, 8014050 <_vfprintf_r+0x558>
 801404c:	2301      	movs	r3, #1
 801404e:	9320      	str	r3, [sp, #128]	@ 0x80
 8014050:	4a35      	ldr	r2, [pc, #212]	@ (8014128 <_vfprintf_r+0x630>)
 8014052:	4b36      	ldr	r3, [pc, #216]	@ (801412c <_vfprintf_r+0x634>)
 8014054:	9906      	ldr	r1, [sp, #24]
 8014056:	2961      	cmp	r1, #97	@ 0x61
 8014058:	bf18      	it	ne
 801405a:	461a      	movne	r2, r3
 801405c:	9210      	str	r2, [sp, #64]	@ 0x40
 801405e:	f109 37ff 	add.w	r7, r9, #4294967295
 8014062:	4646      	mov	r6, r8
 8014064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014068:	4b31      	ldr	r3, [pc, #196]	@ (8014130 <_vfprintf_r+0x638>)
 801406a:	2200      	movs	r2, #0
 801406c:	f7f0 fac4 	bl	80045f8 <__aeabi_dmul>
 8014070:	4602      	mov	r2, r0
 8014072:	460b      	mov	r3, r1
 8014074:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014078:	f7f0 fd6e 	bl	8004b58 <__aeabi_d2iz>
 801407c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801407e:	f7f0 fa51 	bl	8004524 <__aeabi_i2d>
 8014082:	4602      	mov	r2, r0
 8014084:	460b      	mov	r3, r1
 8014086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801408a:	f7f0 f8fd 	bl	8004288 <__aeabi_dsub>
 801408e:	4602      	mov	r2, r0
 8014090:	460b      	mov	r3, r1
 8014092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014096:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801409a:	5c9b      	ldrb	r3, [r3, r2]
 801409c:	f806 3b01 	strb.w	r3, [r6], #1
 80140a0:	1c7a      	adds	r2, r7, #1
 80140a2:	d006      	beq.n	80140b2 <_vfprintf_r+0x5ba>
 80140a4:	1e7b      	subs	r3, r7, #1
 80140a6:	931d      	str	r3, [sp, #116]	@ 0x74
 80140a8:	2200      	movs	r2, #0
 80140aa:	2300      	movs	r3, #0
 80140ac:	f7f0 fd0c 	bl	8004ac8 <__aeabi_dcmpeq>
 80140b0:	b370      	cbz	r0, 8014110 <_vfprintf_r+0x618>
 80140b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140b6:	4b1f      	ldr	r3, [pc, #124]	@ (8014134 <_vfprintf_r+0x63c>)
 80140b8:	2200      	movs	r2, #0
 80140ba:	f7f0 fd2d 	bl	8004b18 <__aeabi_dcmpgt>
 80140be:	2800      	cmp	r0, #0
 80140c0:	d13a      	bne.n	8014138 <_vfprintf_r+0x640>
 80140c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80140c6:	4b1b      	ldr	r3, [pc, #108]	@ (8014134 <_vfprintf_r+0x63c>)
 80140c8:	2200      	movs	r2, #0
 80140ca:	f7f0 fcfd 	bl	8004ac8 <__aeabi_dcmpeq>
 80140ce:	b110      	cbz	r0, 80140d6 <_vfprintf_r+0x5de>
 80140d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80140d2:	07db      	lsls	r3, r3, #31
 80140d4:	d430      	bmi.n	8014138 <_vfprintf_r+0x640>
 80140d6:	4633      	mov	r3, r6
 80140d8:	19f1      	adds	r1, r6, r7
 80140da:	2030      	movs	r0, #48	@ 0x30
 80140dc:	1aca      	subs	r2, r1, r3
 80140de:	2a00      	cmp	r2, #0
 80140e0:	f280 8183 	bge.w	80143ea <_vfprintf_r+0x8f2>
 80140e4:	1c7b      	adds	r3, r7, #1
 80140e6:	3701      	adds	r7, #1
 80140e8:	bfb8      	it	lt
 80140ea:	2300      	movlt	r3, #0
 80140ec:	441e      	add	r6, r3
 80140ee:	e037      	b.n	8014160 <_vfprintf_r+0x668>
 80140f0:	f04f 0a00 	mov.w	sl, #0
 80140f4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80140f8:	e77e      	b.n	8013ff8 <_vfprintf_r+0x500>
 80140fa:	4682      	mov	sl, r0
 80140fc:	e77c      	b.n	8013ff8 <_vfprintf_r+0x500>
 80140fe:	f04f 0906 	mov.w	r9, #6
 8014102:	e779      	b.n	8013ff8 <_vfprintf_r+0x500>
 8014104:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8014108:	2300      	movs	r3, #0
 801410a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801410e:	e780      	b.n	8014012 <_vfprintf_r+0x51a>
 8014110:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8014112:	e7a7      	b.n	8014064 <_vfprintf_r+0x56c>
 8014114:	7fefffff 	.word	0x7fefffff
 8014118:	08018970 	.word	0x08018970
 801411c:	08018974 	.word	0x08018974
 8014120:	08018978 	.word	0x08018978
 8014124:	0801897c 	.word	0x0801897c
 8014128:	08018980 	.word	0x08018980
 801412c:	08018991 	.word	0x08018991
 8014130:	40300000 	.word	0x40300000
 8014134:	3fe00000 	.word	0x3fe00000
 8014138:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801413a:	9624      	str	r6, [sp, #144]	@ 0x90
 801413c:	7bd9      	ldrb	r1, [r3, #15]
 801413e:	2030      	movs	r0, #48	@ 0x30
 8014140:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8014142:	1e53      	subs	r3, r2, #1
 8014144:	9324      	str	r3, [sp, #144]	@ 0x90
 8014146:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801414a:	428b      	cmp	r3, r1
 801414c:	f000 814a 	beq.w	80143e4 <_vfprintf_r+0x8ec>
 8014150:	2b39      	cmp	r3, #57	@ 0x39
 8014152:	bf0b      	itete	eq
 8014154:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8014156:	3301      	addne	r3, #1
 8014158:	7a9b      	ldrbeq	r3, [r3, #10]
 801415a:	b2db      	uxtbne	r3, r3
 801415c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014160:	eba6 0308 	sub.w	r3, r6, r8
 8014164:	9304      	str	r3, [sp, #16]
 8014166:	9b08      	ldr	r3, [sp, #32]
 8014168:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801416a:	2b47      	cmp	r3, #71	@ 0x47
 801416c:	f040 8189 	bne.w	8014482 <_vfprintf_r+0x98a>
 8014170:	1cf1      	adds	r1, r6, #3
 8014172:	db02      	blt.n	801417a <_vfprintf_r+0x682>
 8014174:	45b1      	cmp	r9, r6
 8014176:	f280 81a7 	bge.w	80144c8 <_vfprintf_r+0x9d0>
 801417a:	9b06      	ldr	r3, [sp, #24]
 801417c:	3b02      	subs	r3, #2
 801417e:	9306      	str	r3, [sp, #24]
 8014180:	9906      	ldr	r1, [sp, #24]
 8014182:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8014186:	f021 0120 	bic.w	r1, r1, #32
 801418a:	2941      	cmp	r1, #65	@ 0x41
 801418c:	bf08      	it	eq
 801418e:	320f      	addeq	r2, #15
 8014190:	f106 33ff 	add.w	r3, r6, #4294967295
 8014194:	bf06      	itte	eq
 8014196:	b2d2      	uxtbeq	r2, r2
 8014198:	2101      	moveq	r1, #1
 801419a:	2100      	movne	r1, #0
 801419c:	2b00      	cmp	r3, #0
 801419e:	9320      	str	r3, [sp, #128]	@ 0x80
 80141a0:	bfb8      	it	lt
 80141a2:	f1c6 0301 	rsblt	r3, r6, #1
 80141a6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80141aa:	bfb4      	ite	lt
 80141ac:	222d      	movlt	r2, #45	@ 0x2d
 80141ae:	222b      	movge	r2, #43	@ 0x2b
 80141b0:	2b09      	cmp	r3, #9
 80141b2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80141b6:	f340 817a 	ble.w	80144ae <_vfprintf_r+0x9b6>
 80141ba:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80141be:	270a      	movs	r7, #10
 80141c0:	4602      	mov	r2, r0
 80141c2:	fbb3 f6f7 	udiv	r6, r3, r7
 80141c6:	fb07 3116 	mls	r1, r7, r6, r3
 80141ca:	3130      	adds	r1, #48	@ 0x30
 80141cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80141d0:	4619      	mov	r1, r3
 80141d2:	2963      	cmp	r1, #99	@ 0x63
 80141d4:	f100 30ff 	add.w	r0, r0, #4294967295
 80141d8:	4633      	mov	r3, r6
 80141da:	dcf1      	bgt.n	80141c0 <_vfprintf_r+0x6c8>
 80141dc:	3330      	adds	r3, #48	@ 0x30
 80141de:	1e91      	subs	r1, r2, #2
 80141e0:	f800 3c01 	strb.w	r3, [r0, #-1]
 80141e4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 80141e8:	460b      	mov	r3, r1
 80141ea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80141ee:	4283      	cmp	r3, r0
 80141f0:	f0c0 8158 	bcc.w	80144a4 <_vfprintf_r+0x9ac>
 80141f4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 80141f8:	1a9b      	subs	r3, r3, r2
 80141fa:	4281      	cmp	r1, r0
 80141fc:	bf88      	it	hi
 80141fe:	2300      	movhi	r3, #0
 8014200:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8014204:	441a      	add	r2, r3
 8014206:	ab22      	add	r3, sp, #136	@ 0x88
 8014208:	1ad3      	subs	r3, r2, r3
 801420a:	9a04      	ldr	r2, [sp, #16]
 801420c:	9318      	str	r3, [sp, #96]	@ 0x60
 801420e:	2a01      	cmp	r2, #1
 8014210:	eb03 0902 	add.w	r9, r3, r2
 8014214:	dc01      	bgt.n	801421a <_vfprintf_r+0x722>
 8014216:	07ea      	lsls	r2, r5, #31
 8014218:	d501      	bpl.n	801421e <_vfprintf_r+0x726>
 801421a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801421c:	4499      	add	r9, r3
 801421e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8014222:	2700      	movs	r7, #0
 8014224:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8014228:	9311      	str	r3, [sp, #68]	@ 0x44
 801422a:	9708      	str	r7, [sp, #32]
 801422c:	463e      	mov	r6, r7
 801422e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014230:	2b00      	cmp	r3, #0
 8014232:	f040 8191 	bne.w	8014558 <_vfprintf_r+0xa60>
 8014236:	2300      	movs	r3, #0
 8014238:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801423a:	9310      	str	r3, [sp, #64]	@ 0x40
 801423c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801423e:	454b      	cmp	r3, r9
 8014240:	bfb8      	it	lt
 8014242:	464b      	movlt	r3, r9
 8014244:	9311      	str	r3, [sp, #68]	@ 0x44
 8014246:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801424a:	b113      	cbz	r3, 8014252 <_vfprintf_r+0x75a>
 801424c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801424e:	3301      	adds	r3, #1
 8014250:	9311      	str	r3, [sp, #68]	@ 0x44
 8014252:	f015 0302 	ands.w	r3, r5, #2
 8014256:	931c      	str	r3, [sp, #112]	@ 0x70
 8014258:	bf1e      	ittt	ne
 801425a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801425c:	3302      	addne	r3, #2
 801425e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8014260:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8014264:	931d      	str	r3, [sp, #116]	@ 0x74
 8014266:	d122      	bne.n	80142ae <_vfprintf_r+0x7b6>
 8014268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801426a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801426c:	1a9b      	subs	r3, r3, r2
 801426e:	2b00      	cmp	r3, #0
 8014270:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014272:	dd1c      	ble.n	80142ae <_vfprintf_r+0x7b6>
 8014274:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014276:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801427a:	2810      	cmp	r0, #16
 801427c:	489f      	ldr	r0, [pc, #636]	@ (80144fc <_vfprintf_r+0xa04>)
 801427e:	6020      	str	r0, [r4, #0]
 8014280:	f102 0201 	add.w	r2, r2, #1
 8014284:	f104 0108 	add.w	r1, r4, #8
 8014288:	f300 8297 	bgt.w	80147ba <_vfprintf_r+0xcc2>
 801428c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801428e:	6060      	str	r0, [r4, #4]
 8014290:	4403      	add	r3, r0
 8014292:	2a07      	cmp	r2, #7
 8014294:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014298:	f340 82a4 	ble.w	80147e4 <_vfprintf_r+0xcec>
 801429c:	9803      	ldr	r0, [sp, #12]
 801429e:	aa26      	add	r2, sp, #152	@ 0x98
 80142a0:	4659      	mov	r1, fp
 80142a2:	f000 fe95 	bl	8014fd0 <__sprint_r>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	f040 85ed 	bne.w	8014e86 <_vfprintf_r+0x138e>
 80142ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80142ae:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80142b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80142b4:	b16a      	cbz	r2, 80142d2 <_vfprintf_r+0x7da>
 80142b6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 80142ba:	6022      	str	r2, [r4, #0]
 80142bc:	2201      	movs	r2, #1
 80142be:	4413      	add	r3, r2
 80142c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80142c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80142c4:	6062      	str	r2, [r4, #4]
 80142c6:	4413      	add	r3, r2
 80142c8:	2b07      	cmp	r3, #7
 80142ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80142cc:	f300 828c 	bgt.w	80147e8 <_vfprintf_r+0xcf0>
 80142d0:	3408      	adds	r4, #8
 80142d2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80142d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80142d6:	b162      	cbz	r2, 80142f2 <_vfprintf_r+0x7fa>
 80142d8:	aa1f      	add	r2, sp, #124	@ 0x7c
 80142da:	6022      	str	r2, [r4, #0]
 80142dc:	2202      	movs	r2, #2
 80142de:	4413      	add	r3, r2
 80142e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80142e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80142e4:	6062      	str	r2, [r4, #4]
 80142e6:	3301      	adds	r3, #1
 80142e8:	2b07      	cmp	r3, #7
 80142ea:	9327      	str	r3, [sp, #156]	@ 0x9c
 80142ec:	f300 8286 	bgt.w	80147fc <_vfprintf_r+0xd04>
 80142f0:	3408      	adds	r4, #8
 80142f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80142f4:	2b80      	cmp	r3, #128	@ 0x80
 80142f6:	d122      	bne.n	801433e <_vfprintf_r+0x846>
 80142f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80142fc:	1a9b      	subs	r3, r3, r2
 80142fe:	2b00      	cmp	r3, #0
 8014300:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014302:	dd1c      	ble.n	801433e <_vfprintf_r+0x846>
 8014304:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014306:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801430a:	2810      	cmp	r0, #16
 801430c:	487c      	ldr	r0, [pc, #496]	@ (8014500 <_vfprintf_r+0xa08>)
 801430e:	6020      	str	r0, [r4, #0]
 8014310:	f102 0201 	add.w	r2, r2, #1
 8014314:	f104 0108 	add.w	r1, r4, #8
 8014318:	f300 827a 	bgt.w	8014810 <_vfprintf_r+0xd18>
 801431c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801431e:	6060      	str	r0, [r4, #4]
 8014320:	4403      	add	r3, r0
 8014322:	2a07      	cmp	r2, #7
 8014324:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014328:	f340 8287 	ble.w	801483a <_vfprintf_r+0xd42>
 801432c:	9803      	ldr	r0, [sp, #12]
 801432e:	aa26      	add	r2, sp, #152	@ 0x98
 8014330:	4659      	mov	r1, fp
 8014332:	f000 fe4d 	bl	8014fd0 <__sprint_r>
 8014336:	2800      	cmp	r0, #0
 8014338:	f040 85a5 	bne.w	8014e86 <_vfprintf_r+0x138e>
 801433c:	ac29      	add	r4, sp, #164	@ 0xa4
 801433e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014340:	eba3 0309 	sub.w	r3, r3, r9
 8014344:	2b00      	cmp	r3, #0
 8014346:	9310      	str	r3, [sp, #64]	@ 0x40
 8014348:	dd1c      	ble.n	8014384 <_vfprintf_r+0x88c>
 801434a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801434c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8014350:	2810      	cmp	r0, #16
 8014352:	486b      	ldr	r0, [pc, #428]	@ (8014500 <_vfprintf_r+0xa08>)
 8014354:	6020      	str	r0, [r4, #0]
 8014356:	f102 0201 	add.w	r2, r2, #1
 801435a:	f104 0108 	add.w	r1, r4, #8
 801435e:	f300 826e 	bgt.w	801483e <_vfprintf_r+0xd46>
 8014362:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8014364:	6060      	str	r0, [r4, #4]
 8014366:	4403      	add	r3, r0
 8014368:	2a07      	cmp	r2, #7
 801436a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801436e:	f340 827b 	ble.w	8014868 <_vfprintf_r+0xd70>
 8014372:	9803      	ldr	r0, [sp, #12]
 8014374:	aa26      	add	r2, sp, #152	@ 0x98
 8014376:	4659      	mov	r1, fp
 8014378:	f000 fe2a 	bl	8014fd0 <__sprint_r>
 801437c:	2800      	cmp	r0, #0
 801437e:	f040 8582 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014382:	ac29      	add	r4, sp, #164	@ 0xa4
 8014384:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014386:	9310      	str	r3, [sp, #64]	@ 0x40
 8014388:	05e8      	lsls	r0, r5, #23
 801438a:	f100 8273 	bmi.w	8014874 <_vfprintf_r+0xd7c>
 801438e:	444b      	add	r3, r9
 8014390:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014392:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014394:	3301      	adds	r3, #1
 8014396:	2b07      	cmp	r3, #7
 8014398:	e9c4 8900 	strd	r8, r9, [r4]
 801439c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801439e:	f300 82af 	bgt.w	8014900 <_vfprintf_r+0xe08>
 80143a2:	3408      	adds	r4, #8
 80143a4:	0768      	lsls	r0, r5, #29
 80143a6:	f100 8550 	bmi.w	8014e4a <_vfprintf_r+0x1352>
 80143aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80143ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80143b0:	428a      	cmp	r2, r1
 80143b2:	bfac      	ite	ge
 80143b4:	189b      	addge	r3, r3, r2
 80143b6:	185b      	addlt	r3, r3, r1
 80143b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80143ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80143bc:	b13b      	cbz	r3, 80143ce <_vfprintf_r+0x8d6>
 80143be:	9803      	ldr	r0, [sp, #12]
 80143c0:	aa26      	add	r2, sp, #152	@ 0x98
 80143c2:	4659      	mov	r1, fp
 80143c4:	f000 fe04 	bl	8014fd0 <__sprint_r>
 80143c8:	2800      	cmp	r0, #0
 80143ca:	f040 855c 	bne.w	8014e86 <_vfprintf_r+0x138e>
 80143ce:	2300      	movs	r3, #0
 80143d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80143d2:	f1ba 0f00 	cmp.w	sl, #0
 80143d6:	f040 8572 	bne.w	8014ebe <_vfprintf_r+0x13c6>
 80143da:	9e07      	ldr	r6, [sp, #28]
 80143dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80143de:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80143e2:	e407      	b.n	8013bf4 <_vfprintf_r+0xfc>
 80143e4:	f802 0c01 	strb.w	r0, [r2, #-1]
 80143e8:	e6aa      	b.n	8014140 <_vfprintf_r+0x648>
 80143ea:	f803 0b01 	strb.w	r0, [r3], #1
 80143ee:	e675      	b.n	80140dc <_vfprintf_r+0x5e4>
 80143f0:	9b08      	ldr	r3, [sp, #32]
 80143f2:	2b46      	cmp	r3, #70	@ 0x46
 80143f4:	d005      	beq.n	8014402 <_vfprintf_r+0x90a>
 80143f6:	2b45      	cmp	r3, #69	@ 0x45
 80143f8:	d11a      	bne.n	8014430 <_vfprintf_r+0x938>
 80143fa:	f109 0601 	add.w	r6, r9, #1
 80143fe:	2102      	movs	r1, #2
 8014400:	e001      	b.n	8014406 <_vfprintf_r+0x90e>
 8014402:	464e      	mov	r6, r9
 8014404:	2103      	movs	r1, #3
 8014406:	ab24      	add	r3, sp, #144	@ 0x90
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	ab21      	add	r3, sp, #132	@ 0x84
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8014412:	ab20      	add	r3, sp, #128	@ 0x80
 8014414:	9803      	ldr	r0, [sp, #12]
 8014416:	4632      	mov	r2, r6
 8014418:	f001 ff4a 	bl	80162b0 <_dtoa_r>
 801441c:	9b08      	ldr	r3, [sp, #32]
 801441e:	2b47      	cmp	r3, #71	@ 0x47
 8014420:	4680      	mov	r8, r0
 8014422:	d119      	bne.n	8014458 <_vfprintf_r+0x960>
 8014424:	07e8      	lsls	r0, r5, #31
 8014426:	d405      	bmi.n	8014434 <_vfprintf_r+0x93c>
 8014428:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801442a:	eba3 0308 	sub.w	r3, r3, r8
 801442e:	e699      	b.n	8014164 <_vfprintf_r+0x66c>
 8014430:	464e      	mov	r6, r9
 8014432:	e7e4      	b.n	80143fe <_vfprintf_r+0x906>
 8014434:	eb08 0706 	add.w	r7, r8, r6
 8014438:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801443c:	2200      	movs	r2, #0
 801443e:	2300      	movs	r3, #0
 8014440:	f7f0 fb42 	bl	8004ac8 <__aeabi_dcmpeq>
 8014444:	b100      	cbz	r0, 8014448 <_vfprintf_r+0x950>
 8014446:	9724      	str	r7, [sp, #144]	@ 0x90
 8014448:	2230      	movs	r2, #48	@ 0x30
 801444a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801444c:	429f      	cmp	r7, r3
 801444e:	d9eb      	bls.n	8014428 <_vfprintf_r+0x930>
 8014450:	1c59      	adds	r1, r3, #1
 8014452:	9124      	str	r1, [sp, #144]	@ 0x90
 8014454:	701a      	strb	r2, [r3, #0]
 8014456:	e7f8      	b.n	801444a <_vfprintf_r+0x952>
 8014458:	9b08      	ldr	r3, [sp, #32]
 801445a:	2b46      	cmp	r3, #70	@ 0x46
 801445c:	eb00 0706 	add.w	r7, r0, r6
 8014460:	d1ea      	bne.n	8014438 <_vfprintf_r+0x940>
 8014462:	7803      	ldrb	r3, [r0, #0]
 8014464:	2b30      	cmp	r3, #48	@ 0x30
 8014466:	d109      	bne.n	801447c <_vfprintf_r+0x984>
 8014468:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801446c:	2200      	movs	r2, #0
 801446e:	2300      	movs	r3, #0
 8014470:	f7f0 fb2a 	bl	8004ac8 <__aeabi_dcmpeq>
 8014474:	b910      	cbnz	r0, 801447c <_vfprintf_r+0x984>
 8014476:	f1c6 0601 	rsb	r6, r6, #1
 801447a:	9620      	str	r6, [sp, #128]	@ 0x80
 801447c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801447e:	441f      	add	r7, r3
 8014480:	e7da      	b.n	8014438 <_vfprintf_r+0x940>
 8014482:	9b08      	ldr	r3, [sp, #32]
 8014484:	2b46      	cmp	r3, #70	@ 0x46
 8014486:	f47f ae7b 	bne.w	8014180 <_vfprintf_r+0x688>
 801448a:	f005 0301 	and.w	r3, r5, #1
 801448e:	2e00      	cmp	r6, #0
 8014490:	ea43 0309 	orr.w	r3, r3, r9
 8014494:	dd25      	ble.n	80144e2 <_vfprintf_r+0x9ea>
 8014496:	b37b      	cbz	r3, 80144f8 <_vfprintf_r+0xa00>
 8014498:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801449a:	18f3      	adds	r3, r6, r3
 801449c:	4499      	add	r9, r3
 801449e:	2366      	movs	r3, #102	@ 0x66
 80144a0:	9306      	str	r3, [sp, #24]
 80144a2:	e033      	b.n	801450c <_vfprintf_r+0xa14>
 80144a4:	f813 7b01 	ldrb.w	r7, [r3], #1
 80144a8:	f806 7f01 	strb.w	r7, [r6, #1]!
 80144ac:	e69f      	b.n	80141ee <_vfprintf_r+0x6f6>
 80144ae:	b941      	cbnz	r1, 80144c2 <_vfprintf_r+0x9ca>
 80144b0:	2230      	movs	r2, #48	@ 0x30
 80144b2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 80144b6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 80144ba:	3330      	adds	r3, #48	@ 0x30
 80144bc:	f802 3b01 	strb.w	r3, [r2], #1
 80144c0:	e6a1      	b.n	8014206 <_vfprintf_r+0x70e>
 80144c2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 80144c6:	e7f8      	b.n	80144ba <_vfprintf_r+0x9c2>
 80144c8:	9b04      	ldr	r3, [sp, #16]
 80144ca:	42b3      	cmp	r3, r6
 80144cc:	dd0d      	ble.n	80144ea <_vfprintf_r+0x9f2>
 80144ce:	9b04      	ldr	r3, [sp, #16]
 80144d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80144d2:	2e00      	cmp	r6, #0
 80144d4:	eb03 0902 	add.w	r9, r3, r2
 80144d8:	dc0c      	bgt.n	80144f4 <_vfprintf_r+0x9fc>
 80144da:	f1c6 0301 	rsb	r3, r6, #1
 80144de:	4499      	add	r9, r3
 80144e0:	e008      	b.n	80144f4 <_vfprintf_r+0x9fc>
 80144e2:	b17b      	cbz	r3, 8014504 <_vfprintf_r+0xa0c>
 80144e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144e6:	3301      	adds	r3, #1
 80144e8:	e7d8      	b.n	801449c <_vfprintf_r+0x9a4>
 80144ea:	07eb      	lsls	r3, r5, #31
 80144ec:	d521      	bpl.n	8014532 <_vfprintf_r+0xa3a>
 80144ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144f0:	eb06 0903 	add.w	r9, r6, r3
 80144f4:	2367      	movs	r3, #103	@ 0x67
 80144f6:	e7d3      	b.n	80144a0 <_vfprintf_r+0x9a8>
 80144f8:	46b1      	mov	r9, r6
 80144fa:	e7d0      	b.n	801449e <_vfprintf_r+0x9a6>
 80144fc:	080189b4 	.word	0x080189b4
 8014500:	080189a4 	.word	0x080189a4
 8014504:	2366      	movs	r3, #102	@ 0x66
 8014506:	9306      	str	r3, [sp, #24]
 8014508:	f04f 0901 	mov.w	r9, #1
 801450c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8014510:	9308      	str	r3, [sp, #32]
 8014512:	d01f      	beq.n	8014554 <_vfprintf_r+0xa5c>
 8014514:	2700      	movs	r7, #0
 8014516:	2e00      	cmp	r6, #0
 8014518:	9708      	str	r7, [sp, #32]
 801451a:	f77f ae88 	ble.w	801422e <_vfprintf_r+0x736>
 801451e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	2bff      	cmp	r3, #255	@ 0xff
 8014524:	d107      	bne.n	8014536 <_vfprintf_r+0xa3e>
 8014526:	9b08      	ldr	r3, [sp, #32]
 8014528:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801452a:	443b      	add	r3, r7
 801452c:	fb02 9903 	mla	r9, r2, r3, r9
 8014530:	e67d      	b.n	801422e <_vfprintf_r+0x736>
 8014532:	46b1      	mov	r9, r6
 8014534:	e7de      	b.n	80144f4 <_vfprintf_r+0x9fc>
 8014536:	42b3      	cmp	r3, r6
 8014538:	daf5      	bge.n	8014526 <_vfprintf_r+0xa2e>
 801453a:	1af6      	subs	r6, r6, r3
 801453c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	b133      	cbz	r3, 8014550 <_vfprintf_r+0xa58>
 8014542:	9b08      	ldr	r3, [sp, #32]
 8014544:	3301      	adds	r3, #1
 8014546:	9308      	str	r3, [sp, #32]
 8014548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801454a:	3301      	adds	r3, #1
 801454c:	9309      	str	r3, [sp, #36]	@ 0x24
 801454e:	e7e6      	b.n	801451e <_vfprintf_r+0xa26>
 8014550:	3701      	adds	r7, #1
 8014552:	e7e4      	b.n	801451e <_vfprintf_r+0xa26>
 8014554:	9f08      	ldr	r7, [sp, #32]
 8014556:	e66a      	b.n	801422e <_vfprintf_r+0x736>
 8014558:	232d      	movs	r3, #45	@ 0x2d
 801455a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801455e:	e66a      	b.n	8014236 <_vfprintf_r+0x73e>
 8014560:	06af      	lsls	r7, r5, #26
 8014562:	d507      	bpl.n	8014574 <_vfprintf_r+0xa7c>
 8014564:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014566:	6833      	ldr	r3, [r6, #0]
 8014568:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801456a:	17d2      	asrs	r2, r2, #31
 801456c:	e9c3 1200 	strd	r1, r2, [r3]
 8014570:	3604      	adds	r6, #4
 8014572:	e734      	b.n	80143de <_vfprintf_r+0x8e6>
 8014574:	06e8      	lsls	r0, r5, #27
 8014576:	d503      	bpl.n	8014580 <_vfprintf_r+0xa88>
 8014578:	6833      	ldr	r3, [r6, #0]
 801457a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801457c:	601a      	str	r2, [r3, #0]
 801457e:	e7f7      	b.n	8014570 <_vfprintf_r+0xa78>
 8014580:	0669      	lsls	r1, r5, #25
 8014582:	d503      	bpl.n	801458c <_vfprintf_r+0xa94>
 8014584:	6833      	ldr	r3, [r6, #0]
 8014586:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014588:	801a      	strh	r2, [r3, #0]
 801458a:	e7f1      	b.n	8014570 <_vfprintf_r+0xa78>
 801458c:	05aa      	lsls	r2, r5, #22
 801458e:	d5f3      	bpl.n	8014578 <_vfprintf_r+0xa80>
 8014590:	6833      	ldr	r3, [r6, #0]
 8014592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014594:	701a      	strb	r2, [r3, #0]
 8014596:	e7eb      	b.n	8014570 <_vfprintf_r+0xa78>
 8014598:	f045 0510 	orr.w	r5, r5, #16
 801459c:	f015 0320 	ands.w	r3, r5, #32
 80145a0:	d020      	beq.n	80145e4 <_vfprintf_r+0xaec>
 80145a2:	3607      	adds	r6, #7
 80145a4:	f026 0307 	bic.w	r3, r6, #7
 80145a8:	461a      	mov	r2, r3
 80145aa:	685f      	ldr	r7, [r3, #4]
 80145ac:	f852 6b08 	ldr.w	r6, [r2], #8
 80145b0:	9207      	str	r2, [sp, #28]
 80145b2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80145b6:	2300      	movs	r3, #0
 80145b8:	2200      	movs	r2, #0
 80145ba:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80145be:	f1b9 3fff 	cmp.w	r9, #4294967295
 80145c2:	f000 8491 	beq.w	8014ee8 <_vfprintf_r+0x13f0>
 80145c6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80145ca:	9208      	str	r2, [sp, #32]
 80145cc:	ea56 0207 	orrs.w	r2, r6, r7
 80145d0:	f040 848f 	bne.w	8014ef2 <_vfprintf_r+0x13fa>
 80145d4:	f1b9 0f00 	cmp.w	r9, #0
 80145d8:	f000 80db 	beq.w	8014792 <_vfprintf_r+0xc9a>
 80145dc:	2b01      	cmp	r3, #1
 80145de:	f040 848b 	bne.w	8014ef8 <_vfprintf_r+0x1400>
 80145e2:	e083      	b.n	80146ec <_vfprintf_r+0xbf4>
 80145e4:	4632      	mov	r2, r6
 80145e6:	f015 0710 	ands.w	r7, r5, #16
 80145ea:	f852 6b04 	ldr.w	r6, [r2], #4
 80145ee:	9207      	str	r2, [sp, #28]
 80145f0:	d001      	beq.n	80145f6 <_vfprintf_r+0xafe>
 80145f2:	461f      	mov	r7, r3
 80145f4:	e7dd      	b.n	80145b2 <_vfprintf_r+0xaba>
 80145f6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80145fa:	d001      	beq.n	8014600 <_vfprintf_r+0xb08>
 80145fc:	b2b6      	uxth	r6, r6
 80145fe:	e7d8      	b.n	80145b2 <_vfprintf_r+0xaba>
 8014600:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8014604:	d0d5      	beq.n	80145b2 <_vfprintf_r+0xaba>
 8014606:	b2f6      	uxtb	r6, r6
 8014608:	e7f3      	b.n	80145f2 <_vfprintf_r+0xafa>
 801460a:	4633      	mov	r3, r6
 801460c:	2278      	movs	r2, #120	@ 0x78
 801460e:	f853 6b04 	ldr.w	r6, [r3], #4
 8014612:	9307      	str	r3, [sp, #28]
 8014614:	f647 0330 	movw	r3, #30768	@ 0x7830
 8014618:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801461c:	4b93      	ldr	r3, [pc, #588]	@ (801486c <_vfprintf_r+0xd74>)
 801461e:	9319      	str	r3, [sp, #100]	@ 0x64
 8014620:	2700      	movs	r7, #0
 8014622:	f045 0502 	orr.w	r5, r5, #2
 8014626:	2302      	movs	r3, #2
 8014628:	9206      	str	r2, [sp, #24]
 801462a:	e7c5      	b.n	80145b8 <_vfprintf_r+0xac0>
 801462c:	4633      	mov	r3, r6
 801462e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014632:	f853 8b04 	ldr.w	r8, [r3], #4
 8014636:	9307      	str	r3, [sp, #28]
 8014638:	f04f 0600 	mov.w	r6, #0
 801463c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8014640:	d00f      	beq.n	8014662 <_vfprintf_r+0xb6a>
 8014642:	464a      	mov	r2, r9
 8014644:	4631      	mov	r1, r6
 8014646:	4640      	mov	r0, r8
 8014648:	f7ef fdca 	bl	80041e0 <memchr>
 801464c:	4682      	mov	sl, r0
 801464e:	2800      	cmp	r0, #0
 8014650:	f43f ac7a 	beq.w	8013f48 <_vfprintf_r+0x450>
 8014654:	eba0 0908 	sub.w	r9, r0, r8
 8014658:	46b2      	mov	sl, r6
 801465a:	9610      	str	r6, [sp, #64]	@ 0x40
 801465c:	4637      	mov	r7, r6
 801465e:	9608      	str	r6, [sp, #32]
 8014660:	e5ec      	b.n	801423c <_vfprintf_r+0x744>
 8014662:	4640      	mov	r0, r8
 8014664:	f7ef fdb4 	bl	80041d0 <strlen>
 8014668:	46b2      	mov	sl, r6
 801466a:	4681      	mov	r9, r0
 801466c:	e46c      	b.n	8013f48 <_vfprintf_r+0x450>
 801466e:	f045 0510 	orr.w	r5, r5, #16
 8014672:	f015 0320 	ands.w	r3, r5, #32
 8014676:	d009      	beq.n	801468c <_vfprintf_r+0xb94>
 8014678:	3607      	adds	r6, #7
 801467a:	f026 0307 	bic.w	r3, r6, #7
 801467e:	461a      	mov	r2, r3
 8014680:	685f      	ldr	r7, [r3, #4]
 8014682:	f852 6b08 	ldr.w	r6, [r2], #8
 8014686:	9207      	str	r2, [sp, #28]
 8014688:	2301      	movs	r3, #1
 801468a:	e795      	b.n	80145b8 <_vfprintf_r+0xac0>
 801468c:	4632      	mov	r2, r6
 801468e:	f015 0710 	ands.w	r7, r5, #16
 8014692:	f852 6b04 	ldr.w	r6, [r2], #4
 8014696:	9207      	str	r2, [sp, #28]
 8014698:	d001      	beq.n	801469e <_vfprintf_r+0xba6>
 801469a:	461f      	mov	r7, r3
 801469c:	e7f4      	b.n	8014688 <_vfprintf_r+0xb90>
 801469e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80146a2:	d001      	beq.n	80146a8 <_vfprintf_r+0xbb0>
 80146a4:	b2b6      	uxth	r6, r6
 80146a6:	e7ef      	b.n	8014688 <_vfprintf_r+0xb90>
 80146a8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80146ac:	d0ec      	beq.n	8014688 <_vfprintf_r+0xb90>
 80146ae:	b2f6      	uxtb	r6, r6
 80146b0:	e7f3      	b.n	801469a <_vfprintf_r+0xba2>
 80146b2:	4b6f      	ldr	r3, [pc, #444]	@ (8014870 <_vfprintf_r+0xd78>)
 80146b4:	f7ff bb33 	b.w	8013d1e <_vfprintf_r+0x226>
 80146b8:	4632      	mov	r2, r6
 80146ba:	f015 0710 	ands.w	r7, r5, #16
 80146be:	f852 6b04 	ldr.w	r6, [r2], #4
 80146c2:	9207      	str	r2, [sp, #28]
 80146c4:	d002      	beq.n	80146cc <_vfprintf_r+0xbd4>
 80146c6:	461f      	mov	r7, r3
 80146c8:	f7ff bb36 	b.w	8013d38 <_vfprintf_r+0x240>
 80146cc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80146d0:	d002      	beq.n	80146d8 <_vfprintf_r+0xbe0>
 80146d2:	b2b6      	uxth	r6, r6
 80146d4:	f7ff bb30 	b.w	8013d38 <_vfprintf_r+0x240>
 80146d8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80146dc:	f43f ab2c 	beq.w	8013d38 <_vfprintf_r+0x240>
 80146e0:	b2f6      	uxtb	r6, r6
 80146e2:	e7f0      	b.n	80146c6 <_vfprintf_r+0xbce>
 80146e4:	2e0a      	cmp	r6, #10
 80146e6:	f177 0300 	sbcs.w	r3, r7, #0
 80146ea:	d207      	bcs.n	80146fc <_vfprintf_r+0xc04>
 80146ec:	3630      	adds	r6, #48	@ 0x30
 80146ee:	b2f6      	uxtb	r6, r6
 80146f0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 80146f4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 80146f8:	f000 bc1a 	b.w	8014f30 <_vfprintf_r+0x1438>
 80146fc:	2300      	movs	r3, #0
 80146fe:	9304      	str	r3, [sp, #16]
 8014700:	9b08      	ldr	r3, [sp, #32]
 8014702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014706:	ad52      	add	r5, sp, #328	@ 0x148
 8014708:	9310      	str	r3, [sp, #64]	@ 0x40
 801470a:	220a      	movs	r2, #10
 801470c:	2300      	movs	r3, #0
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7f0 fa49 	bl	8004ba8 <__aeabi_uldivmod>
 8014716:	9b04      	ldr	r3, [sp, #16]
 8014718:	9011      	str	r0, [sp, #68]	@ 0x44
 801471a:	3301      	adds	r3, #1
 801471c:	9304      	str	r3, [sp, #16]
 801471e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014720:	3230      	adds	r2, #48	@ 0x30
 8014722:	468a      	mov	sl, r1
 8014724:	f105 38ff 	add.w	r8, r5, #4294967295
 8014728:	f805 2c01 	strb.w	r2, [r5, #-1]
 801472c:	b1d3      	cbz	r3, 8014764 <_vfprintf_r+0xc6c>
 801472e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014730:	9a04      	ldr	r2, [sp, #16]
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	429a      	cmp	r2, r3
 8014736:	d115      	bne.n	8014764 <_vfprintf_r+0xc6c>
 8014738:	2aff      	cmp	r2, #255	@ 0xff
 801473a:	d013      	beq.n	8014764 <_vfprintf_r+0xc6c>
 801473c:	2e0a      	cmp	r6, #10
 801473e:	f177 0300 	sbcs.w	r3, r7, #0
 8014742:	d30f      	bcc.n	8014764 <_vfprintf_r+0xc6c>
 8014744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014746:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014748:	eba8 0803 	sub.w	r8, r8, r3
 801474c:	461a      	mov	r2, r3
 801474e:	4640      	mov	r0, r8
 8014750:	f001 fc62 	bl	8016018 <strncpy>
 8014754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014756:	785b      	ldrb	r3, [r3, #1]
 8014758:	b11b      	cbz	r3, 8014762 <_vfprintf_r+0xc6a>
 801475a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801475c:	3301      	adds	r3, #1
 801475e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014760:	2300      	movs	r3, #0
 8014762:	9304      	str	r3, [sp, #16]
 8014764:	2e0a      	cmp	r6, #10
 8014766:	f177 0700 	sbcs.w	r7, r7, #0
 801476a:	f0c0 83e1 	bcc.w	8014f30 <_vfprintf_r+0x1438>
 801476e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014770:	4657      	mov	r7, sl
 8014772:	4645      	mov	r5, r8
 8014774:	e7c9      	b.n	801470a <_vfprintf_r+0xc12>
 8014776:	f006 030f 	and.w	r3, r6, #15
 801477a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801477c:	0936      	lsrs	r6, r6, #4
 801477e:	5cd3      	ldrb	r3, [r2, r3]
 8014780:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8014784:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8014788:	093f      	lsrs	r7, r7, #4
 801478a:	ea56 0307 	orrs.w	r3, r6, r7
 801478e:	d1f2      	bne.n	8014776 <_vfprintf_r+0xc7e>
 8014790:	e3ce      	b.n	8014f30 <_vfprintf_r+0x1438>
 8014792:	b91b      	cbnz	r3, 801479c <_vfprintf_r+0xca4>
 8014794:	07ed      	lsls	r5, r5, #31
 8014796:	d501      	bpl.n	801479c <_vfprintf_r+0xca4>
 8014798:	2630      	movs	r6, #48	@ 0x30
 801479a:	e7a9      	b.n	80146f0 <_vfprintf_r+0xbf8>
 801479c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80147a0:	e3c6      	b.n	8014f30 <_vfprintf_r+0x1438>
 80147a2:	9b06      	ldr	r3, [sp, #24]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f000 8390 	beq.w	8014eca <_vfprintf_r+0x13d2>
 80147aa:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80147ae:	2300      	movs	r3, #0
 80147b0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80147b4:	9607      	str	r6, [sp, #28]
 80147b6:	f7ff bb5c 	b.w	8013e72 <_vfprintf_r+0x37a>
 80147ba:	2010      	movs	r0, #16
 80147bc:	4403      	add	r3, r0
 80147be:	2a07      	cmp	r2, #7
 80147c0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80147c4:	6060      	str	r0, [r4, #4]
 80147c6:	dd08      	ble.n	80147da <_vfprintf_r+0xce2>
 80147c8:	9803      	ldr	r0, [sp, #12]
 80147ca:	aa26      	add	r2, sp, #152	@ 0x98
 80147cc:	4659      	mov	r1, fp
 80147ce:	f000 fbff 	bl	8014fd0 <__sprint_r>
 80147d2:	2800      	cmp	r0, #0
 80147d4:	f040 8357 	bne.w	8014e86 <_vfprintf_r+0x138e>
 80147d8:	a929      	add	r1, sp, #164	@ 0xa4
 80147da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80147dc:	3b10      	subs	r3, #16
 80147de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80147e0:	460c      	mov	r4, r1
 80147e2:	e547      	b.n	8014274 <_vfprintf_r+0x77c>
 80147e4:	460c      	mov	r4, r1
 80147e6:	e562      	b.n	80142ae <_vfprintf_r+0x7b6>
 80147e8:	9803      	ldr	r0, [sp, #12]
 80147ea:	aa26      	add	r2, sp, #152	@ 0x98
 80147ec:	4659      	mov	r1, fp
 80147ee:	f000 fbef 	bl	8014fd0 <__sprint_r>
 80147f2:	2800      	cmp	r0, #0
 80147f4:	f040 8347 	bne.w	8014e86 <_vfprintf_r+0x138e>
 80147f8:	ac29      	add	r4, sp, #164	@ 0xa4
 80147fa:	e56a      	b.n	80142d2 <_vfprintf_r+0x7da>
 80147fc:	9803      	ldr	r0, [sp, #12]
 80147fe:	aa26      	add	r2, sp, #152	@ 0x98
 8014800:	4659      	mov	r1, fp
 8014802:	f000 fbe5 	bl	8014fd0 <__sprint_r>
 8014806:	2800      	cmp	r0, #0
 8014808:	f040 833d 	bne.w	8014e86 <_vfprintf_r+0x138e>
 801480c:	ac29      	add	r4, sp, #164	@ 0xa4
 801480e:	e570      	b.n	80142f2 <_vfprintf_r+0x7fa>
 8014810:	2010      	movs	r0, #16
 8014812:	4403      	add	r3, r0
 8014814:	2a07      	cmp	r2, #7
 8014816:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801481a:	6060      	str	r0, [r4, #4]
 801481c:	dd08      	ble.n	8014830 <_vfprintf_r+0xd38>
 801481e:	9803      	ldr	r0, [sp, #12]
 8014820:	aa26      	add	r2, sp, #152	@ 0x98
 8014822:	4659      	mov	r1, fp
 8014824:	f000 fbd4 	bl	8014fd0 <__sprint_r>
 8014828:	2800      	cmp	r0, #0
 801482a:	f040 832c 	bne.w	8014e86 <_vfprintf_r+0x138e>
 801482e:	a929      	add	r1, sp, #164	@ 0xa4
 8014830:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014832:	3b10      	subs	r3, #16
 8014834:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014836:	460c      	mov	r4, r1
 8014838:	e564      	b.n	8014304 <_vfprintf_r+0x80c>
 801483a:	460c      	mov	r4, r1
 801483c:	e57f      	b.n	801433e <_vfprintf_r+0x846>
 801483e:	2010      	movs	r0, #16
 8014840:	4403      	add	r3, r0
 8014842:	2a07      	cmp	r2, #7
 8014844:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014848:	6060      	str	r0, [r4, #4]
 801484a:	dd08      	ble.n	801485e <_vfprintf_r+0xd66>
 801484c:	9803      	ldr	r0, [sp, #12]
 801484e:	aa26      	add	r2, sp, #152	@ 0x98
 8014850:	4659      	mov	r1, fp
 8014852:	f000 fbbd 	bl	8014fd0 <__sprint_r>
 8014856:	2800      	cmp	r0, #0
 8014858:	f040 8315 	bne.w	8014e86 <_vfprintf_r+0x138e>
 801485c:	a929      	add	r1, sp, #164	@ 0xa4
 801485e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014860:	3b10      	subs	r3, #16
 8014862:	9310      	str	r3, [sp, #64]	@ 0x40
 8014864:	460c      	mov	r4, r1
 8014866:	e570      	b.n	801434a <_vfprintf_r+0x852>
 8014868:	460c      	mov	r4, r1
 801486a:	e58b      	b.n	8014384 <_vfprintf_r+0x88c>
 801486c:	08018980 	.word	0x08018980
 8014870:	08018991 	.word	0x08018991
 8014874:	9b06      	ldr	r3, [sp, #24]
 8014876:	2b65      	cmp	r3, #101	@ 0x65
 8014878:	f340 8245 	ble.w	8014d06 <_vfprintf_r+0x120e>
 801487c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014880:	2200      	movs	r2, #0
 8014882:	2300      	movs	r3, #0
 8014884:	f7f0 f920 	bl	8004ac8 <__aeabi_dcmpeq>
 8014888:	2800      	cmp	r0, #0
 801488a:	d06a      	beq.n	8014962 <_vfprintf_r+0xe6a>
 801488c:	4b73      	ldr	r3, [pc, #460]	@ (8014a5c <_vfprintf_r+0xf64>)
 801488e:	6023      	str	r3, [r4, #0]
 8014890:	2301      	movs	r3, #1
 8014892:	6063      	str	r3, [r4, #4]
 8014894:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014896:	3301      	adds	r3, #1
 8014898:	9328      	str	r3, [sp, #160]	@ 0xa0
 801489a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801489c:	3301      	adds	r3, #1
 801489e:	2b07      	cmp	r3, #7
 80148a0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80148a2:	dc37      	bgt.n	8014914 <_vfprintf_r+0xe1c>
 80148a4:	3408      	adds	r4, #8
 80148a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80148a8:	9a04      	ldr	r2, [sp, #16]
 80148aa:	4293      	cmp	r3, r2
 80148ac:	db02      	blt.n	80148b4 <_vfprintf_r+0xdbc>
 80148ae:	07e9      	lsls	r1, r5, #31
 80148b0:	f57f ad78 	bpl.w	80143a4 <_vfprintf_r+0x8ac>
 80148b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80148b6:	6023      	str	r3, [r4, #0]
 80148b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80148ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80148bc:	6063      	str	r3, [r4, #4]
 80148be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80148c0:	4413      	add	r3, r2
 80148c2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80148c4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80148c6:	3301      	adds	r3, #1
 80148c8:	2b07      	cmp	r3, #7
 80148ca:	9327      	str	r3, [sp, #156]	@ 0x9c
 80148cc:	dc2c      	bgt.n	8014928 <_vfprintf_r+0xe30>
 80148ce:	3408      	adds	r4, #8
 80148d0:	9b04      	ldr	r3, [sp, #16]
 80148d2:	1e5e      	subs	r6, r3, #1
 80148d4:	2e00      	cmp	r6, #0
 80148d6:	f77f ad65 	ble.w	80143a4 <_vfprintf_r+0x8ac>
 80148da:	4f61      	ldr	r7, [pc, #388]	@ (8014a60 <_vfprintf_r+0xf68>)
 80148dc:	f04f 0810 	mov.w	r8, #16
 80148e0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80148e4:	2e10      	cmp	r6, #16
 80148e6:	f103 0301 	add.w	r3, r3, #1
 80148ea:	f104 0108 	add.w	r1, r4, #8
 80148ee:	6027      	str	r7, [r4, #0]
 80148f0:	dc24      	bgt.n	801493c <_vfprintf_r+0xe44>
 80148f2:	6066      	str	r6, [r4, #4]
 80148f4:	2b07      	cmp	r3, #7
 80148f6:	4416      	add	r6, r2
 80148f8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80148fc:	f340 82a2 	ble.w	8014e44 <_vfprintf_r+0x134c>
 8014900:	9803      	ldr	r0, [sp, #12]
 8014902:	aa26      	add	r2, sp, #152	@ 0x98
 8014904:	4659      	mov	r1, fp
 8014906:	f000 fb63 	bl	8014fd0 <__sprint_r>
 801490a:	2800      	cmp	r0, #0
 801490c:	f040 82bb 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014910:	ac29      	add	r4, sp, #164	@ 0xa4
 8014912:	e547      	b.n	80143a4 <_vfprintf_r+0x8ac>
 8014914:	9803      	ldr	r0, [sp, #12]
 8014916:	aa26      	add	r2, sp, #152	@ 0x98
 8014918:	4659      	mov	r1, fp
 801491a:	f000 fb59 	bl	8014fd0 <__sprint_r>
 801491e:	2800      	cmp	r0, #0
 8014920:	f040 82b1 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014924:	ac29      	add	r4, sp, #164	@ 0xa4
 8014926:	e7be      	b.n	80148a6 <_vfprintf_r+0xdae>
 8014928:	9803      	ldr	r0, [sp, #12]
 801492a:	aa26      	add	r2, sp, #152	@ 0x98
 801492c:	4659      	mov	r1, fp
 801492e:	f000 fb4f 	bl	8014fd0 <__sprint_r>
 8014932:	2800      	cmp	r0, #0
 8014934:	f040 82a7 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014938:	ac29      	add	r4, sp, #164	@ 0xa4
 801493a:	e7c9      	b.n	80148d0 <_vfprintf_r+0xdd8>
 801493c:	3210      	adds	r2, #16
 801493e:	2b07      	cmp	r3, #7
 8014940:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8014944:	f8c4 8004 	str.w	r8, [r4, #4]
 8014948:	dd08      	ble.n	801495c <_vfprintf_r+0xe64>
 801494a:	9803      	ldr	r0, [sp, #12]
 801494c:	aa26      	add	r2, sp, #152	@ 0x98
 801494e:	4659      	mov	r1, fp
 8014950:	f000 fb3e 	bl	8014fd0 <__sprint_r>
 8014954:	2800      	cmp	r0, #0
 8014956:	f040 8296 	bne.w	8014e86 <_vfprintf_r+0x138e>
 801495a:	a929      	add	r1, sp, #164	@ 0xa4
 801495c:	3e10      	subs	r6, #16
 801495e:	460c      	mov	r4, r1
 8014960:	e7be      	b.n	80148e0 <_vfprintf_r+0xde8>
 8014962:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014964:	2b00      	cmp	r3, #0
 8014966:	dc7d      	bgt.n	8014a64 <_vfprintf_r+0xf6c>
 8014968:	4b3c      	ldr	r3, [pc, #240]	@ (8014a5c <_vfprintf_r+0xf64>)
 801496a:	6023      	str	r3, [r4, #0]
 801496c:	2301      	movs	r3, #1
 801496e:	6063      	str	r3, [r4, #4]
 8014970:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014972:	3301      	adds	r3, #1
 8014974:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014976:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014978:	3301      	adds	r3, #1
 801497a:	2b07      	cmp	r3, #7
 801497c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801497e:	dc46      	bgt.n	8014a0e <_vfprintf_r+0xf16>
 8014980:	3408      	adds	r4, #8
 8014982:	9904      	ldr	r1, [sp, #16]
 8014984:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014986:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8014988:	430b      	orrs	r3, r1
 801498a:	f005 0101 	and.w	r1, r5, #1
 801498e:	430b      	orrs	r3, r1
 8014990:	f43f ad08 	beq.w	80143a4 <_vfprintf_r+0x8ac>
 8014994:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014996:	6023      	str	r3, [r4, #0]
 8014998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801499a:	6063      	str	r3, [r4, #4]
 801499c:	441a      	add	r2, r3
 801499e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80149a0:	9228      	str	r2, [sp, #160]	@ 0xa0
 80149a2:	3301      	adds	r3, #1
 80149a4:	2b07      	cmp	r3, #7
 80149a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80149a8:	dc3b      	bgt.n	8014a22 <_vfprintf_r+0xf2a>
 80149aa:	f104 0308 	add.w	r3, r4, #8
 80149ae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80149b0:	2e00      	cmp	r6, #0
 80149b2:	da1b      	bge.n	80149ec <_vfprintf_r+0xef4>
 80149b4:	4f2a      	ldr	r7, [pc, #168]	@ (8014a60 <_vfprintf_r+0xf68>)
 80149b6:	4276      	negs	r6, r6
 80149b8:	461a      	mov	r2, r3
 80149ba:	2410      	movs	r4, #16
 80149bc:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80149c0:	2e10      	cmp	r6, #16
 80149c2:	f101 0101 	add.w	r1, r1, #1
 80149c6:	f103 0308 	add.w	r3, r3, #8
 80149ca:	6017      	str	r7, [r2, #0]
 80149cc:	dc33      	bgt.n	8014a36 <_vfprintf_r+0xf3e>
 80149ce:	6056      	str	r6, [r2, #4]
 80149d0:	2907      	cmp	r1, #7
 80149d2:	4406      	add	r6, r0
 80149d4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 80149d8:	dd08      	ble.n	80149ec <_vfprintf_r+0xef4>
 80149da:	9803      	ldr	r0, [sp, #12]
 80149dc:	aa26      	add	r2, sp, #152	@ 0x98
 80149de:	4659      	mov	r1, fp
 80149e0:	f000 faf6 	bl	8014fd0 <__sprint_r>
 80149e4:	2800      	cmp	r0, #0
 80149e6:	f040 824e 	bne.w	8014e86 <_vfprintf_r+0x138e>
 80149ea:	ab29      	add	r3, sp, #164	@ 0xa4
 80149ec:	9a04      	ldr	r2, [sp, #16]
 80149ee:	9904      	ldr	r1, [sp, #16]
 80149f0:	605a      	str	r2, [r3, #4]
 80149f2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80149f4:	f8c3 8000 	str.w	r8, [r3]
 80149f8:	440a      	add	r2, r1
 80149fa:	9228      	str	r2, [sp, #160]	@ 0xa0
 80149fc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80149fe:	3201      	adds	r2, #1
 8014a00:	2a07      	cmp	r2, #7
 8014a02:	9227      	str	r2, [sp, #156]	@ 0x9c
 8014a04:	f73f af7c 	bgt.w	8014900 <_vfprintf_r+0xe08>
 8014a08:	f103 0408 	add.w	r4, r3, #8
 8014a0c:	e4ca      	b.n	80143a4 <_vfprintf_r+0x8ac>
 8014a0e:	9803      	ldr	r0, [sp, #12]
 8014a10:	aa26      	add	r2, sp, #152	@ 0x98
 8014a12:	4659      	mov	r1, fp
 8014a14:	f000 fadc 	bl	8014fd0 <__sprint_r>
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	f040 8234 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014a1e:	ac29      	add	r4, sp, #164	@ 0xa4
 8014a20:	e7af      	b.n	8014982 <_vfprintf_r+0xe8a>
 8014a22:	9803      	ldr	r0, [sp, #12]
 8014a24:	aa26      	add	r2, sp, #152	@ 0x98
 8014a26:	4659      	mov	r1, fp
 8014a28:	f000 fad2 	bl	8014fd0 <__sprint_r>
 8014a2c:	2800      	cmp	r0, #0
 8014a2e:	f040 822a 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014a32:	ab29      	add	r3, sp, #164	@ 0xa4
 8014a34:	e7bb      	b.n	80149ae <_vfprintf_r+0xeb6>
 8014a36:	3010      	adds	r0, #16
 8014a38:	2907      	cmp	r1, #7
 8014a3a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8014a3e:	6054      	str	r4, [r2, #4]
 8014a40:	dd08      	ble.n	8014a54 <_vfprintf_r+0xf5c>
 8014a42:	9803      	ldr	r0, [sp, #12]
 8014a44:	aa26      	add	r2, sp, #152	@ 0x98
 8014a46:	4659      	mov	r1, fp
 8014a48:	f000 fac2 	bl	8014fd0 <__sprint_r>
 8014a4c:	2800      	cmp	r0, #0
 8014a4e:	f040 821a 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014a52:	ab29      	add	r3, sp, #164	@ 0xa4
 8014a54:	3e10      	subs	r6, #16
 8014a56:	461a      	mov	r2, r3
 8014a58:	e7b0      	b.n	80149bc <_vfprintf_r+0xec4>
 8014a5a:	bf00      	nop
 8014a5c:	080189a2 	.word	0x080189a2
 8014a60:	080189a4 	.word	0x080189a4
 8014a64:	9b04      	ldr	r3, [sp, #16]
 8014a66:	4443      	add	r3, r8
 8014a68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014a6a:	9b04      	ldr	r3, [sp, #16]
 8014a6c:	42b3      	cmp	r3, r6
 8014a6e:	bfa8      	it	ge
 8014a70:	4633      	movge	r3, r6
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	4699      	mov	r9, r3
 8014a76:	dd0b      	ble.n	8014a90 <_vfprintf_r+0xf98>
 8014a78:	e9c4 8300 	strd	r8, r3, [r4]
 8014a7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014a7e:	444b      	add	r3, r9
 8014a80:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014a82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014a84:	3301      	adds	r3, #1
 8014a86:	2b07      	cmp	r3, #7
 8014a88:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014a8a:	f300 8089 	bgt.w	8014ba0 <_vfprintf_r+0x10a8>
 8014a8e:	3408      	adds	r4, #8
 8014a90:	f1b9 0f00 	cmp.w	r9, #0
 8014a94:	bfac      	ite	ge
 8014a96:	eba6 0309 	subge.w	r3, r6, r9
 8014a9a:	4633      	movlt	r3, r6
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	9306      	str	r3, [sp, #24]
 8014aa0:	dd1c      	ble.n	8014adc <_vfprintf_r+0xfe4>
 8014aa2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8014e08 <_vfprintf_r+0x1310>
 8014aa6:	9806      	ldr	r0, [sp, #24]
 8014aa8:	f8c4 9000 	str.w	r9, [r4]
 8014aac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8014ab0:	2810      	cmp	r0, #16
 8014ab2:	f102 0201 	add.w	r2, r2, #1
 8014ab6:	f104 0108 	add.w	r1, r4, #8
 8014aba:	dc7b      	bgt.n	8014bb4 <_vfprintf_r+0x10bc>
 8014abc:	4403      	add	r3, r0
 8014abe:	2a07      	cmp	r2, #7
 8014ac0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014ac4:	6060      	str	r0, [r4, #4]
 8014ac6:	f340 808a 	ble.w	8014bde <_vfprintf_r+0x10e6>
 8014aca:	9803      	ldr	r0, [sp, #12]
 8014acc:	aa26      	add	r2, sp, #152	@ 0x98
 8014ace:	4659      	mov	r1, fp
 8014ad0:	f000 fa7e 	bl	8014fd0 <__sprint_r>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	f040 81d6 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014ada:	ac29      	add	r4, sp, #164	@ 0xa4
 8014adc:	056a      	lsls	r2, r5, #21
 8014ade:	44b0      	add	r8, r6
 8014ae0:	d508      	bpl.n	8014af4 <_vfprintf_r+0xffc>
 8014ae2:	9b08      	ldr	r3, [sp, #32]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d17c      	bne.n	8014be2 <_vfprintf_r+0x10ea>
 8014ae8:	2f00      	cmp	r7, #0
 8014aea:	d17c      	bne.n	8014be6 <_vfprintf_r+0x10ee>
 8014aec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014aee:	4598      	cmp	r8, r3
 8014af0:	bf28      	it	cs
 8014af2:	4698      	movcs	r8, r3
 8014af4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014af6:	9a04      	ldr	r2, [sp, #16]
 8014af8:	4293      	cmp	r3, r2
 8014afa:	db01      	blt.n	8014b00 <_vfprintf_r+0x1008>
 8014afc:	07eb      	lsls	r3, r5, #31
 8014afe:	d50e      	bpl.n	8014b1e <_vfprintf_r+0x1026>
 8014b00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014b02:	6023      	str	r3, [r4, #0]
 8014b04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014b08:	6063      	str	r3, [r4, #4]
 8014b0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014b0c:	4413      	add	r3, r2
 8014b0e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014b10:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014b12:	3301      	adds	r3, #1
 8014b14:	2b07      	cmp	r3, #7
 8014b16:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014b18:	f300 80e1 	bgt.w	8014cde <_vfprintf_r+0x11e6>
 8014b1c:	3408      	adds	r4, #8
 8014b1e:	9b04      	ldr	r3, [sp, #16]
 8014b20:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8014b22:	1bdf      	subs	r7, r3, r7
 8014b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014b26:	eba3 0308 	sub.w	r3, r3, r8
 8014b2a:	429f      	cmp	r7, r3
 8014b2c:	bfa8      	it	ge
 8014b2e:	461f      	movge	r7, r3
 8014b30:	2f00      	cmp	r7, #0
 8014b32:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014b34:	dd0a      	ble.n	8014b4c <_vfprintf_r+0x1054>
 8014b36:	443b      	add	r3, r7
 8014b38:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014b3a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014b3c:	3301      	adds	r3, #1
 8014b3e:	2b07      	cmp	r3, #7
 8014b40:	e9c4 8700 	strd	r8, r7, [r4]
 8014b44:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014b46:	f300 80d4 	bgt.w	8014cf2 <_vfprintf_r+0x11fa>
 8014b4a:	3408      	adds	r4, #8
 8014b4c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014b4e:	9b04      	ldr	r3, [sp, #16]
 8014b50:	2f00      	cmp	r7, #0
 8014b52:	eba3 0606 	sub.w	r6, r3, r6
 8014b56:	bfa8      	it	ge
 8014b58:	1bf6      	subge	r6, r6, r7
 8014b5a:	2e00      	cmp	r6, #0
 8014b5c:	f77f ac22 	ble.w	80143a4 <_vfprintf_r+0x8ac>
 8014b60:	4fa9      	ldr	r7, [pc, #676]	@ (8014e08 <_vfprintf_r+0x1310>)
 8014b62:	f04f 0810 	mov.w	r8, #16
 8014b66:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8014b6a:	2e10      	cmp	r6, #16
 8014b6c:	f103 0301 	add.w	r3, r3, #1
 8014b70:	f104 0108 	add.w	r1, r4, #8
 8014b74:	6027      	str	r7, [r4, #0]
 8014b76:	f77f aebc 	ble.w	80148f2 <_vfprintf_r+0xdfa>
 8014b7a:	3210      	adds	r2, #16
 8014b7c:	2b07      	cmp	r3, #7
 8014b7e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8014b82:	f8c4 8004 	str.w	r8, [r4, #4]
 8014b86:	dd08      	ble.n	8014b9a <_vfprintf_r+0x10a2>
 8014b88:	9803      	ldr	r0, [sp, #12]
 8014b8a:	aa26      	add	r2, sp, #152	@ 0x98
 8014b8c:	4659      	mov	r1, fp
 8014b8e:	f000 fa1f 	bl	8014fd0 <__sprint_r>
 8014b92:	2800      	cmp	r0, #0
 8014b94:	f040 8177 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014b98:	a929      	add	r1, sp, #164	@ 0xa4
 8014b9a:	3e10      	subs	r6, #16
 8014b9c:	460c      	mov	r4, r1
 8014b9e:	e7e2      	b.n	8014b66 <_vfprintf_r+0x106e>
 8014ba0:	9803      	ldr	r0, [sp, #12]
 8014ba2:	aa26      	add	r2, sp, #152	@ 0x98
 8014ba4:	4659      	mov	r1, fp
 8014ba6:	f000 fa13 	bl	8014fd0 <__sprint_r>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	f040 816b 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014bb0:	ac29      	add	r4, sp, #164	@ 0xa4
 8014bb2:	e76d      	b.n	8014a90 <_vfprintf_r+0xf98>
 8014bb4:	2010      	movs	r0, #16
 8014bb6:	4403      	add	r3, r0
 8014bb8:	2a07      	cmp	r2, #7
 8014bba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014bbe:	6060      	str	r0, [r4, #4]
 8014bc0:	dd08      	ble.n	8014bd4 <_vfprintf_r+0x10dc>
 8014bc2:	9803      	ldr	r0, [sp, #12]
 8014bc4:	aa26      	add	r2, sp, #152	@ 0x98
 8014bc6:	4659      	mov	r1, fp
 8014bc8:	f000 fa02 	bl	8014fd0 <__sprint_r>
 8014bcc:	2800      	cmp	r0, #0
 8014bce:	f040 815a 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014bd2:	a929      	add	r1, sp, #164	@ 0xa4
 8014bd4:	9b06      	ldr	r3, [sp, #24]
 8014bd6:	3b10      	subs	r3, #16
 8014bd8:	9306      	str	r3, [sp, #24]
 8014bda:	460c      	mov	r4, r1
 8014bdc:	e763      	b.n	8014aa6 <_vfprintf_r+0xfae>
 8014bde:	460c      	mov	r4, r1
 8014be0:	e77c      	b.n	8014adc <_vfprintf_r+0xfe4>
 8014be2:	2f00      	cmp	r7, #0
 8014be4:	d04b      	beq.n	8014c7e <_vfprintf_r+0x1186>
 8014be6:	3f01      	subs	r7, #1
 8014be8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014bea:	6023      	str	r3, [r4, #0]
 8014bec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014bee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014bf0:	6063      	str	r3, [r4, #4]
 8014bf2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014bf4:	4413      	add	r3, r2
 8014bf6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014bf8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	2b07      	cmp	r3, #7
 8014bfe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014c00:	dc44      	bgt.n	8014c8c <_vfprintf_r+0x1194>
 8014c02:	3408      	adds	r4, #8
 8014c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c06:	f893 9000 	ldrb.w	r9, [r3]
 8014c0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014c0c:	eba3 0308 	sub.w	r3, r3, r8
 8014c10:	4599      	cmp	r9, r3
 8014c12:	bfa8      	it	ge
 8014c14:	4699      	movge	r9, r3
 8014c16:	f1b9 0f00 	cmp.w	r9, #0
 8014c1a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014c1c:	dd09      	ble.n	8014c32 <_vfprintf_r+0x113a>
 8014c1e:	444b      	add	r3, r9
 8014c20:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014c22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014c24:	3301      	adds	r3, #1
 8014c26:	2b07      	cmp	r3, #7
 8014c28:	e9c4 8900 	strd	r8, r9, [r4]
 8014c2c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014c2e:	dc37      	bgt.n	8014ca0 <_vfprintf_r+0x11a8>
 8014c30:	3408      	adds	r4, #8
 8014c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c34:	781e      	ldrb	r6, [r3, #0]
 8014c36:	f1b9 0f00 	cmp.w	r9, #0
 8014c3a:	bfa8      	it	ge
 8014c3c:	eba6 0609 	subge.w	r6, r6, r9
 8014c40:	2e00      	cmp	r6, #0
 8014c42:	dd18      	ble.n	8014c76 <_vfprintf_r+0x117e>
 8014c44:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8014c48:	486f      	ldr	r0, [pc, #444]	@ (8014e08 <_vfprintf_r+0x1310>)
 8014c4a:	6020      	str	r0, [r4, #0]
 8014c4c:	2e10      	cmp	r6, #16
 8014c4e:	f103 0301 	add.w	r3, r3, #1
 8014c52:	f104 0108 	add.w	r1, r4, #8
 8014c56:	dc2d      	bgt.n	8014cb4 <_vfprintf_r+0x11bc>
 8014c58:	6066      	str	r6, [r4, #4]
 8014c5a:	2b07      	cmp	r3, #7
 8014c5c:	4416      	add	r6, r2
 8014c5e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8014c62:	dd3a      	ble.n	8014cda <_vfprintf_r+0x11e2>
 8014c64:	9803      	ldr	r0, [sp, #12]
 8014c66:	aa26      	add	r2, sp, #152	@ 0x98
 8014c68:	4659      	mov	r1, fp
 8014c6a:	f000 f9b1 	bl	8014fd0 <__sprint_r>
 8014c6e:	2800      	cmp	r0, #0
 8014c70:	f040 8109 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014c74:	ac29      	add	r4, sp, #164	@ 0xa4
 8014c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	4498      	add	r8, r3
 8014c7c:	e731      	b.n	8014ae2 <_vfprintf_r+0xfea>
 8014c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c80:	3b01      	subs	r3, #1
 8014c82:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c84:	9b08      	ldr	r3, [sp, #32]
 8014c86:	3b01      	subs	r3, #1
 8014c88:	9308      	str	r3, [sp, #32]
 8014c8a:	e7ad      	b.n	8014be8 <_vfprintf_r+0x10f0>
 8014c8c:	9803      	ldr	r0, [sp, #12]
 8014c8e:	aa26      	add	r2, sp, #152	@ 0x98
 8014c90:	4659      	mov	r1, fp
 8014c92:	f000 f99d 	bl	8014fd0 <__sprint_r>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	f040 80f5 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014c9c:	ac29      	add	r4, sp, #164	@ 0xa4
 8014c9e:	e7b1      	b.n	8014c04 <_vfprintf_r+0x110c>
 8014ca0:	9803      	ldr	r0, [sp, #12]
 8014ca2:	aa26      	add	r2, sp, #152	@ 0x98
 8014ca4:	4659      	mov	r1, fp
 8014ca6:	f000 f993 	bl	8014fd0 <__sprint_r>
 8014caa:	2800      	cmp	r0, #0
 8014cac:	f040 80eb 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014cb0:	ac29      	add	r4, sp, #164	@ 0xa4
 8014cb2:	e7be      	b.n	8014c32 <_vfprintf_r+0x113a>
 8014cb4:	2010      	movs	r0, #16
 8014cb6:	4402      	add	r2, r0
 8014cb8:	2b07      	cmp	r3, #7
 8014cba:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8014cbe:	6060      	str	r0, [r4, #4]
 8014cc0:	dd08      	ble.n	8014cd4 <_vfprintf_r+0x11dc>
 8014cc2:	9803      	ldr	r0, [sp, #12]
 8014cc4:	aa26      	add	r2, sp, #152	@ 0x98
 8014cc6:	4659      	mov	r1, fp
 8014cc8:	f000 f982 	bl	8014fd0 <__sprint_r>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	f040 80da 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014cd2:	a929      	add	r1, sp, #164	@ 0xa4
 8014cd4:	3e10      	subs	r6, #16
 8014cd6:	460c      	mov	r4, r1
 8014cd8:	e7b4      	b.n	8014c44 <_vfprintf_r+0x114c>
 8014cda:	460c      	mov	r4, r1
 8014cdc:	e7cb      	b.n	8014c76 <_vfprintf_r+0x117e>
 8014cde:	9803      	ldr	r0, [sp, #12]
 8014ce0:	aa26      	add	r2, sp, #152	@ 0x98
 8014ce2:	4659      	mov	r1, fp
 8014ce4:	f000 f974 	bl	8014fd0 <__sprint_r>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	f040 80cc 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014cee:	ac29      	add	r4, sp, #164	@ 0xa4
 8014cf0:	e715      	b.n	8014b1e <_vfprintf_r+0x1026>
 8014cf2:	9803      	ldr	r0, [sp, #12]
 8014cf4:	aa26      	add	r2, sp, #152	@ 0x98
 8014cf6:	4659      	mov	r1, fp
 8014cf8:	f000 f96a 	bl	8014fd0 <__sprint_r>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	f040 80c2 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014d02:	ac29      	add	r4, sp, #164	@ 0xa4
 8014d04:	e722      	b.n	8014b4c <_vfprintf_r+0x1054>
 8014d06:	9904      	ldr	r1, [sp, #16]
 8014d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d0a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8014d0c:	2901      	cmp	r1, #1
 8014d0e:	f103 0301 	add.w	r3, r3, #1
 8014d12:	f102 0201 	add.w	r2, r2, #1
 8014d16:	f104 0608 	add.w	r6, r4, #8
 8014d1a:	dc02      	bgt.n	8014d22 <_vfprintf_r+0x122a>
 8014d1c:	07ef      	lsls	r7, r5, #31
 8014d1e:	f140 8086 	bpl.w	8014e2e <_vfprintf_r+0x1336>
 8014d22:	2101      	movs	r1, #1
 8014d24:	2a07      	cmp	r2, #7
 8014d26:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014d2a:	f8c4 8000 	str.w	r8, [r4]
 8014d2e:	6061      	str	r1, [r4, #4]
 8014d30:	dd08      	ble.n	8014d44 <_vfprintf_r+0x124c>
 8014d32:	9803      	ldr	r0, [sp, #12]
 8014d34:	aa26      	add	r2, sp, #152	@ 0x98
 8014d36:	4659      	mov	r1, fp
 8014d38:	f000 f94a 	bl	8014fd0 <__sprint_r>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	f040 80a2 	bne.w	8014e86 <_vfprintf_r+0x138e>
 8014d42:	ae29      	add	r6, sp, #164	@ 0xa4
 8014d44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d46:	6033      	str	r3, [r6, #0]
 8014d48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014d4c:	6073      	str	r3, [r6, #4]
 8014d4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014d50:	4413      	add	r3, r2
 8014d52:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014d54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014d56:	3301      	adds	r3, #1
 8014d58:	2b07      	cmp	r3, #7
 8014d5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014d5c:	dc33      	bgt.n	8014dc6 <_vfprintf_r+0x12ce>
 8014d5e:	3608      	adds	r6, #8
 8014d60:	9b04      	ldr	r3, [sp, #16]
 8014d62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014d66:	1e5c      	subs	r4, r3, #1
 8014d68:	2200      	movs	r2, #0
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 8014d70:	f7ef feaa 	bl	8004ac8 <__aeabi_dcmpeq>
 8014d74:	2800      	cmp	r0, #0
 8014d76:	d12f      	bne.n	8014dd8 <_vfprintf_r+0x12e0>
 8014d78:	f108 0201 	add.w	r2, r8, #1
 8014d7c:	e9c6 2400 	strd	r2, r4, [r6]
 8014d80:	9a04      	ldr	r2, [sp, #16]
 8014d82:	f109 0301 	add.w	r3, r9, #1
 8014d86:	3f01      	subs	r7, #1
 8014d88:	4417      	add	r7, r2
 8014d8a:	2b07      	cmp	r3, #7
 8014d8c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8014d90:	dd56      	ble.n	8014e40 <_vfprintf_r+0x1348>
 8014d92:	9803      	ldr	r0, [sp, #12]
 8014d94:	aa26      	add	r2, sp, #152	@ 0x98
 8014d96:	4659      	mov	r1, fp
 8014d98:	f000 f91a 	bl	8014fd0 <__sprint_r>
 8014d9c:	2800      	cmp	r0, #0
 8014d9e:	d172      	bne.n	8014e86 <_vfprintf_r+0x138e>
 8014da0:	ae29      	add	r6, sp, #164	@ 0xa4
 8014da2:	ab22      	add	r3, sp, #136	@ 0x88
 8014da4:	6033      	str	r3, [r6, #0]
 8014da6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014da8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014daa:	6073      	str	r3, [r6, #4]
 8014dac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014dae:	4413      	add	r3, r2
 8014db0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8014db2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8014db4:	3301      	adds	r3, #1
 8014db6:	2b07      	cmp	r3, #7
 8014db8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014dba:	f73f ada1 	bgt.w	8014900 <_vfprintf_r+0xe08>
 8014dbe:	f106 0408 	add.w	r4, r6, #8
 8014dc2:	f7ff baef 	b.w	80143a4 <_vfprintf_r+0x8ac>
 8014dc6:	9803      	ldr	r0, [sp, #12]
 8014dc8:	aa26      	add	r2, sp, #152	@ 0x98
 8014dca:	4659      	mov	r1, fp
 8014dcc:	f000 f900 	bl	8014fd0 <__sprint_r>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d158      	bne.n	8014e86 <_vfprintf_r+0x138e>
 8014dd4:	ae29      	add	r6, sp, #164	@ 0xa4
 8014dd6:	e7c3      	b.n	8014d60 <_vfprintf_r+0x1268>
 8014dd8:	9b04      	ldr	r3, [sp, #16]
 8014dda:	2b01      	cmp	r3, #1
 8014ddc:	dde1      	ble.n	8014da2 <_vfprintf_r+0x12aa>
 8014dde:	4f0a      	ldr	r7, [pc, #40]	@ (8014e08 <_vfprintf_r+0x1310>)
 8014de0:	f04f 0810 	mov.w	r8, #16
 8014de4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8014de8:	2c10      	cmp	r4, #16
 8014dea:	f103 0301 	add.w	r3, r3, #1
 8014dee:	f106 0108 	add.w	r1, r6, #8
 8014df2:	6037      	str	r7, [r6, #0]
 8014df4:	dc0a      	bgt.n	8014e0c <_vfprintf_r+0x1314>
 8014df6:	6074      	str	r4, [r6, #4]
 8014df8:	2b07      	cmp	r3, #7
 8014dfa:	4414      	add	r4, r2
 8014dfc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8014e00:	dcc7      	bgt.n	8014d92 <_vfprintf_r+0x129a>
 8014e02:	460e      	mov	r6, r1
 8014e04:	e7cd      	b.n	8014da2 <_vfprintf_r+0x12aa>
 8014e06:	bf00      	nop
 8014e08:	080189a4 	.word	0x080189a4
 8014e0c:	3210      	adds	r2, #16
 8014e0e:	2b07      	cmp	r3, #7
 8014e10:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8014e14:	f8c6 8004 	str.w	r8, [r6, #4]
 8014e18:	dd06      	ble.n	8014e28 <_vfprintf_r+0x1330>
 8014e1a:	9803      	ldr	r0, [sp, #12]
 8014e1c:	aa26      	add	r2, sp, #152	@ 0x98
 8014e1e:	4659      	mov	r1, fp
 8014e20:	f000 f8d6 	bl	8014fd0 <__sprint_r>
 8014e24:	bb78      	cbnz	r0, 8014e86 <_vfprintf_r+0x138e>
 8014e26:	a929      	add	r1, sp, #164	@ 0xa4
 8014e28:	3c10      	subs	r4, #16
 8014e2a:	460e      	mov	r6, r1
 8014e2c:	e7da      	b.n	8014de4 <_vfprintf_r+0x12ec>
 8014e2e:	2101      	movs	r1, #1
 8014e30:	2a07      	cmp	r2, #7
 8014e32:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8014e36:	f8c4 8000 	str.w	r8, [r4]
 8014e3a:	6061      	str	r1, [r4, #4]
 8014e3c:	ddb1      	ble.n	8014da2 <_vfprintf_r+0x12aa>
 8014e3e:	e7a8      	b.n	8014d92 <_vfprintf_r+0x129a>
 8014e40:	3608      	adds	r6, #8
 8014e42:	e7ae      	b.n	8014da2 <_vfprintf_r+0x12aa>
 8014e44:	460c      	mov	r4, r1
 8014e46:	f7ff baad 	b.w	80143a4 <_vfprintf_r+0x8ac>
 8014e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014e4e:	1a9d      	subs	r5, r3, r2
 8014e50:	2d00      	cmp	r5, #0
 8014e52:	f77f aaaa 	ble.w	80143aa <_vfprintf_r+0x8b2>
 8014e56:	4e3d      	ldr	r6, [pc, #244]	@ (8014f4c <_vfprintf_r+0x1454>)
 8014e58:	2710      	movs	r7, #16
 8014e5a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8014e5e:	2d10      	cmp	r5, #16
 8014e60:	f103 0301 	add.w	r3, r3, #1
 8014e64:	6026      	str	r6, [r4, #0]
 8014e66:	dc18      	bgt.n	8014e9a <_vfprintf_r+0x13a2>
 8014e68:	6065      	str	r5, [r4, #4]
 8014e6a:	2b07      	cmp	r3, #7
 8014e6c:	4415      	add	r5, r2
 8014e6e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8014e72:	f77f aa9a 	ble.w	80143aa <_vfprintf_r+0x8b2>
 8014e76:	9803      	ldr	r0, [sp, #12]
 8014e78:	aa26      	add	r2, sp, #152	@ 0x98
 8014e7a:	4659      	mov	r1, fp
 8014e7c:	f000 f8a8 	bl	8014fd0 <__sprint_r>
 8014e80:	2800      	cmp	r0, #0
 8014e82:	f43f aa92 	beq.w	80143aa <_vfprintf_r+0x8b2>
 8014e86:	f1ba 0f00 	cmp.w	sl, #0
 8014e8a:	f43f a892 	beq.w	8013fb2 <_vfprintf_r+0x4ba>
 8014e8e:	9803      	ldr	r0, [sp, #12]
 8014e90:	4651      	mov	r1, sl
 8014e92:	f7fe fb29 	bl	80134e8 <_free_r>
 8014e96:	f7ff b88c 	b.w	8013fb2 <_vfprintf_r+0x4ba>
 8014e9a:	3210      	adds	r2, #16
 8014e9c:	2b07      	cmp	r3, #7
 8014e9e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8014ea2:	6067      	str	r7, [r4, #4]
 8014ea4:	dc02      	bgt.n	8014eac <_vfprintf_r+0x13b4>
 8014ea6:	3408      	adds	r4, #8
 8014ea8:	3d10      	subs	r5, #16
 8014eaa:	e7d6      	b.n	8014e5a <_vfprintf_r+0x1362>
 8014eac:	9803      	ldr	r0, [sp, #12]
 8014eae:	aa26      	add	r2, sp, #152	@ 0x98
 8014eb0:	4659      	mov	r1, fp
 8014eb2:	f000 f88d 	bl	8014fd0 <__sprint_r>
 8014eb6:	2800      	cmp	r0, #0
 8014eb8:	d1e5      	bne.n	8014e86 <_vfprintf_r+0x138e>
 8014eba:	ac29      	add	r4, sp, #164	@ 0xa4
 8014ebc:	e7f4      	b.n	8014ea8 <_vfprintf_r+0x13b0>
 8014ebe:	9803      	ldr	r0, [sp, #12]
 8014ec0:	4651      	mov	r1, sl
 8014ec2:	f7fe fb11 	bl	80134e8 <_free_r>
 8014ec6:	f7ff ba88 	b.w	80143da <_vfprintf_r+0x8e2>
 8014eca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8014ecc:	b91b      	cbnz	r3, 8014ed6 <_vfprintf_r+0x13de>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8014ed2:	f7ff b86e 	b.w	8013fb2 <_vfprintf_r+0x4ba>
 8014ed6:	9803      	ldr	r0, [sp, #12]
 8014ed8:	aa26      	add	r2, sp, #152	@ 0x98
 8014eda:	4659      	mov	r1, fp
 8014edc:	f000 f878 	bl	8014fd0 <__sprint_r>
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	d0f4      	beq.n	8014ece <_vfprintf_r+0x13d6>
 8014ee4:	f7ff b865 	b.w	8013fb2 <_vfprintf_r+0x4ba>
 8014ee8:	ea56 0207 	orrs.w	r2, r6, r7
 8014eec:	9508      	str	r5, [sp, #32]
 8014eee:	f43f ab75 	beq.w	80145dc <_vfprintf_r+0xae4>
 8014ef2:	2b01      	cmp	r3, #1
 8014ef4:	f43f abf6 	beq.w	80146e4 <_vfprintf_r+0xbec>
 8014ef8:	2b02      	cmp	r3, #2
 8014efa:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8014efe:	f43f ac3a 	beq.w	8014776 <_vfprintf_r+0xc7e>
 8014f02:	f006 0307 	and.w	r3, r6, #7
 8014f06:	08f6      	lsrs	r6, r6, #3
 8014f08:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8014f0c:	08ff      	lsrs	r7, r7, #3
 8014f0e:	3330      	adds	r3, #48	@ 0x30
 8014f10:	ea56 0107 	orrs.w	r1, r6, r7
 8014f14:	4642      	mov	r2, r8
 8014f16:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8014f1a:	d1f2      	bne.n	8014f02 <_vfprintf_r+0x140a>
 8014f1c:	9908      	ldr	r1, [sp, #32]
 8014f1e:	07ce      	lsls	r6, r1, #31
 8014f20:	d506      	bpl.n	8014f30 <_vfprintf_r+0x1438>
 8014f22:	2b30      	cmp	r3, #48	@ 0x30
 8014f24:	d004      	beq.n	8014f30 <_vfprintf_r+0x1438>
 8014f26:	2330      	movs	r3, #48	@ 0x30
 8014f28:	f808 3c01 	strb.w	r3, [r8, #-1]
 8014f2c:	f1a2 0802 	sub.w	r8, r2, #2
 8014f30:	ab52      	add	r3, sp, #328	@ 0x148
 8014f32:	9d08      	ldr	r5, [sp, #32]
 8014f34:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8014f38:	f04f 0a00 	mov.w	sl, #0
 8014f3c:	eba3 0908 	sub.w	r9, r3, r8
 8014f40:	4657      	mov	r7, sl
 8014f42:	f8cd a020 	str.w	sl, [sp, #32]
 8014f46:	4656      	mov	r6, sl
 8014f48:	f7ff b978 	b.w	801423c <_vfprintf_r+0x744>
 8014f4c:	080189b4 	.word	0x080189b4

08014f50 <__sbprintf>:
 8014f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f52:	461f      	mov	r7, r3
 8014f54:	898b      	ldrh	r3, [r1, #12]
 8014f56:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8014f5a:	f023 0302 	bic.w	r3, r3, #2
 8014f5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f62:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8014f64:	9319      	str	r3, [sp, #100]	@ 0x64
 8014f66:	89cb      	ldrh	r3, [r1, #14]
 8014f68:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014f6c:	69cb      	ldr	r3, [r1, #28]
 8014f6e:	9307      	str	r3, [sp, #28]
 8014f70:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8014f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f74:	ab1a      	add	r3, sp, #104	@ 0x68
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	9304      	str	r3, [sp, #16]
 8014f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014f7e:	4615      	mov	r5, r2
 8014f80:	4606      	mov	r6, r0
 8014f82:	9302      	str	r3, [sp, #8]
 8014f84:	9305      	str	r3, [sp, #20]
 8014f86:	a816      	add	r0, sp, #88	@ 0x58
 8014f88:	2300      	movs	r3, #0
 8014f8a:	460c      	mov	r4, r1
 8014f8c:	9306      	str	r3, [sp, #24]
 8014f8e:	f7fe fa33 	bl	80133f8 <__retarget_lock_init_recursive>
 8014f92:	462a      	mov	r2, r5
 8014f94:	463b      	mov	r3, r7
 8014f96:	4669      	mov	r1, sp
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f7fe fdad 	bl	8013af8 <_vfprintf_r>
 8014f9e:	1e05      	subs	r5, r0, #0
 8014fa0:	db07      	blt.n	8014fb2 <__sbprintf+0x62>
 8014fa2:	4669      	mov	r1, sp
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f000 fdeb 	bl	8015b80 <_fflush_r>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	bf18      	it	ne
 8014fae:	f04f 35ff 	movne.w	r5, #4294967295
 8014fb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014fb6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8014fb8:	065b      	lsls	r3, r3, #25
 8014fba:	bf42      	ittt	mi
 8014fbc:	89a3      	ldrhmi	r3, [r4, #12]
 8014fbe:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8014fc2:	81a3      	strhmi	r3, [r4, #12]
 8014fc4:	f7fe fa19 	bl	80133fa <__retarget_lock_close_recursive>
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8014fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fd0 <__sprint_r>:
 8014fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd4:	6893      	ldr	r3, [r2, #8]
 8014fd6:	4680      	mov	r8, r0
 8014fd8:	460e      	mov	r6, r1
 8014fda:	4614      	mov	r4, r2
 8014fdc:	b343      	cbz	r3, 8015030 <__sprint_r+0x60>
 8014fde:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8014fe0:	049d      	lsls	r5, r3, #18
 8014fe2:	d522      	bpl.n	801502a <__sprint_r+0x5a>
 8014fe4:	6815      	ldr	r5, [r2, #0]
 8014fe6:	68a0      	ldr	r0, [r4, #8]
 8014fe8:	3508      	adds	r5, #8
 8014fea:	b928      	cbnz	r0, 8014ff8 <__sprint_r+0x28>
 8014fec:	2300      	movs	r3, #0
 8014fee:	60a3      	str	r3, [r4, #8]
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	6063      	str	r3, [r4, #4]
 8014ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ff8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8014ffc:	f04f 0900 	mov.w	r9, #0
 8015000:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8015004:	45ca      	cmp	sl, r9
 8015006:	dc05      	bgt.n	8015014 <__sprint_r+0x44>
 8015008:	68a3      	ldr	r3, [r4, #8]
 801500a:	f027 0703 	bic.w	r7, r7, #3
 801500e:	1bdb      	subs	r3, r3, r7
 8015010:	60a3      	str	r3, [r4, #8]
 8015012:	e7e8      	b.n	8014fe6 <__sprint_r+0x16>
 8015014:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8015018:	4632      	mov	r2, r6
 801501a:	4640      	mov	r0, r8
 801501c:	f000 ffb9 	bl	8015f92 <_fputwc_r>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d0e3      	beq.n	8014fec <__sprint_r+0x1c>
 8015024:	f109 0901 	add.w	r9, r9, #1
 8015028:	e7ec      	b.n	8015004 <__sprint_r+0x34>
 801502a:	f000 fdcf 	bl	8015bcc <__sfvwrite_r>
 801502e:	e7dd      	b.n	8014fec <__sprint_r+0x1c>
 8015030:	4618      	mov	r0, r3
 8015032:	e7dd      	b.n	8014ff0 <__sprint_r+0x20>

08015034 <_vfiprintf_r>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	b0bb      	sub	sp, #236	@ 0xec
 801503a:	460f      	mov	r7, r1
 801503c:	4693      	mov	fp, r2
 801503e:	461c      	mov	r4, r3
 8015040:	461d      	mov	r5, r3
 8015042:	9000      	str	r0, [sp, #0]
 8015044:	b118      	cbz	r0, 801504e <_vfiprintf_r+0x1a>
 8015046:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015048:	b90b      	cbnz	r3, 801504e <_vfiprintf_r+0x1a>
 801504a:	f7fe f883 	bl	8013154 <__sinit>
 801504e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015050:	07db      	lsls	r3, r3, #31
 8015052:	d405      	bmi.n	8015060 <_vfiprintf_r+0x2c>
 8015054:	89bb      	ldrh	r3, [r7, #12]
 8015056:	059e      	lsls	r6, r3, #22
 8015058:	d402      	bmi.n	8015060 <_vfiprintf_r+0x2c>
 801505a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801505c:	f7fe f9ce 	bl	80133fc <__retarget_lock_acquire_recursive>
 8015060:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8015064:	0498      	lsls	r0, r3, #18
 8015066:	d406      	bmi.n	8015076 <_vfiprintf_r+0x42>
 8015068:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801506c:	81bb      	strh	r3, [r7, #12]
 801506e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015070:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8015074:	667b      	str	r3, [r7, #100]	@ 0x64
 8015076:	89bb      	ldrh	r3, [r7, #12]
 8015078:	0719      	lsls	r1, r3, #28
 801507a:	d501      	bpl.n	8015080 <_vfiprintf_r+0x4c>
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	b9ab      	cbnz	r3, 80150ac <_vfiprintf_r+0x78>
 8015080:	9800      	ldr	r0, [sp, #0]
 8015082:	4639      	mov	r1, r7
 8015084:	f000 feee 	bl	8015e64 <__swsetup_r>
 8015088:	b180      	cbz	r0, 80150ac <_vfiprintf_r+0x78>
 801508a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801508c:	07da      	lsls	r2, r3, #31
 801508e:	d506      	bpl.n	801509e <_vfiprintf_r+0x6a>
 8015090:	f04f 33ff 	mov.w	r3, #4294967295
 8015094:	9303      	str	r3, [sp, #12]
 8015096:	9803      	ldr	r0, [sp, #12]
 8015098:	b03b      	add	sp, #236	@ 0xec
 801509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509e:	89bb      	ldrh	r3, [r7, #12]
 80150a0:	059b      	lsls	r3, r3, #22
 80150a2:	d4f5      	bmi.n	8015090 <_vfiprintf_r+0x5c>
 80150a4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80150a6:	f7fe f9aa 	bl	80133fe <__retarget_lock_release_recursive>
 80150aa:	e7f1      	b.n	8015090 <_vfiprintf_r+0x5c>
 80150ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80150b0:	f003 021a 	and.w	r2, r3, #26
 80150b4:	2a0a      	cmp	r2, #10
 80150b6:	d114      	bne.n	80150e2 <_vfiprintf_r+0xae>
 80150b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80150bc:	2a00      	cmp	r2, #0
 80150be:	db10      	blt.n	80150e2 <_vfiprintf_r+0xae>
 80150c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80150c2:	07d6      	lsls	r6, r2, #31
 80150c4:	d404      	bmi.n	80150d0 <_vfiprintf_r+0x9c>
 80150c6:	059d      	lsls	r5, r3, #22
 80150c8:	d402      	bmi.n	80150d0 <_vfiprintf_r+0x9c>
 80150ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80150cc:	f7fe f997 	bl	80133fe <__retarget_lock_release_recursive>
 80150d0:	9800      	ldr	r0, [sp, #0]
 80150d2:	4623      	mov	r3, r4
 80150d4:	465a      	mov	r2, fp
 80150d6:	4639      	mov	r1, r7
 80150d8:	b03b      	add	sp, #236	@ 0xec
 80150da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150de:	f000 bc31 	b.w	8015944 <__sbprintf>
 80150e2:	2300      	movs	r3, #0
 80150e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80150e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80150ec:	ae11      	add	r6, sp, #68	@ 0x44
 80150ee:	960e      	str	r6, [sp, #56]	@ 0x38
 80150f0:	9307      	str	r3, [sp, #28]
 80150f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80150f4:	9303      	str	r3, [sp, #12]
 80150f6:	465b      	mov	r3, fp
 80150f8:	461c      	mov	r4, r3
 80150fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150fe:	b10a      	cbz	r2, 8015104 <_vfiprintf_r+0xd0>
 8015100:	2a25      	cmp	r2, #37	@ 0x25
 8015102:	d1f9      	bne.n	80150f8 <_vfiprintf_r+0xc4>
 8015104:	ebb4 080b 	subs.w	r8, r4, fp
 8015108:	d00d      	beq.n	8015126 <_vfiprintf_r+0xf2>
 801510a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801510c:	4443      	add	r3, r8
 801510e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015112:	3301      	adds	r3, #1
 8015114:	2b07      	cmp	r3, #7
 8015116:	e9c6 b800 	strd	fp, r8, [r6]
 801511a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801511c:	dc75      	bgt.n	801520a <_vfiprintf_r+0x1d6>
 801511e:	3608      	adds	r6, #8
 8015120:	9b03      	ldr	r3, [sp, #12]
 8015122:	4443      	add	r3, r8
 8015124:	9303      	str	r3, [sp, #12]
 8015126:	7823      	ldrb	r3, [r4, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	f000 83cd 	beq.w	80158c8 <_vfiprintf_r+0x894>
 801512e:	2300      	movs	r3, #0
 8015130:	f04f 32ff 	mov.w	r2, #4294967295
 8015134:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8015138:	3401      	adds	r4, #1
 801513a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801513e:	469a      	mov	sl, r3
 8015140:	46a3      	mov	fp, r4
 8015142:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8015146:	f1a3 0220 	sub.w	r2, r3, #32
 801514a:	2a5a      	cmp	r2, #90	@ 0x5a
 801514c:	f200 8316 	bhi.w	801577c <_vfiprintf_r+0x748>
 8015150:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015154:	0314009a 	.word	0x0314009a
 8015158:	00a20314 	.word	0x00a20314
 801515c:	03140314 	.word	0x03140314
 8015160:	00820314 	.word	0x00820314
 8015164:	03140314 	.word	0x03140314
 8015168:	00af00a5 	.word	0x00af00a5
 801516c:	00ac0314 	.word	0x00ac0314
 8015170:	031400b1 	.word	0x031400b1
 8015174:	00d000cd 	.word	0x00d000cd
 8015178:	00d000d0 	.word	0x00d000d0
 801517c:	00d000d0 	.word	0x00d000d0
 8015180:	00d000d0 	.word	0x00d000d0
 8015184:	00d000d0 	.word	0x00d000d0
 8015188:	03140314 	.word	0x03140314
 801518c:	03140314 	.word	0x03140314
 8015190:	03140314 	.word	0x03140314
 8015194:	03140314 	.word	0x03140314
 8015198:	00f70314 	.word	0x00f70314
 801519c:	03140104 	.word	0x03140104
 80151a0:	03140314 	.word	0x03140314
 80151a4:	03140314 	.word	0x03140314
 80151a8:	03140314 	.word	0x03140314
 80151ac:	03140314 	.word	0x03140314
 80151b0:	01520314 	.word	0x01520314
 80151b4:	03140314 	.word	0x03140314
 80151b8:	019a0314 	.word	0x019a0314
 80151bc:	027a0314 	.word	0x027a0314
 80151c0:	03140314 	.word	0x03140314
 80151c4:	0314029a 	.word	0x0314029a
 80151c8:	03140314 	.word	0x03140314
 80151cc:	03140314 	.word	0x03140314
 80151d0:	03140314 	.word	0x03140314
 80151d4:	03140314 	.word	0x03140314
 80151d8:	00f70314 	.word	0x00f70314
 80151dc:	03140106 	.word	0x03140106
 80151e0:	03140314 	.word	0x03140314
 80151e4:	010600e0 	.word	0x010600e0
 80151e8:	031400f1 	.word	0x031400f1
 80151ec:	031400eb 	.word	0x031400eb
 80151f0:	01540132 	.word	0x01540132
 80151f4:	00f10189 	.word	0x00f10189
 80151f8:	019a0314 	.word	0x019a0314
 80151fc:	027c0098 	.word	0x027c0098
 8015200:	03140314 	.word	0x03140314
 8015204:	03140065 	.word	0x03140065
 8015208:	0098      	.short	0x0098
 801520a:	9800      	ldr	r0, [sp, #0]
 801520c:	aa0e      	add	r2, sp, #56	@ 0x38
 801520e:	4639      	mov	r1, r7
 8015210:	f7ff fede 	bl	8014fd0 <__sprint_r>
 8015214:	2800      	cmp	r0, #0
 8015216:	f040 8336 	bne.w	8015886 <_vfiprintf_r+0x852>
 801521a:	ae11      	add	r6, sp, #68	@ 0x44
 801521c:	e780      	b.n	8015120 <_vfiprintf_r+0xec>
 801521e:	4a99      	ldr	r2, [pc, #612]	@ (8015484 <_vfiprintf_r+0x450>)
 8015220:	9205      	str	r2, [sp, #20]
 8015222:	f01a 0220 	ands.w	r2, sl, #32
 8015226:	f000 8231 	beq.w	801568c <_vfiprintf_r+0x658>
 801522a:	3507      	adds	r5, #7
 801522c:	f025 0507 	bic.w	r5, r5, #7
 8015230:	46a8      	mov	r8, r5
 8015232:	686d      	ldr	r5, [r5, #4]
 8015234:	f858 4b08 	ldr.w	r4, [r8], #8
 8015238:	f01a 0f01 	tst.w	sl, #1
 801523c:	d009      	beq.n	8015252 <_vfiprintf_r+0x21e>
 801523e:	ea54 0205 	orrs.w	r2, r4, r5
 8015242:	bf1f      	itttt	ne
 8015244:	2230      	movne	r2, #48	@ 0x30
 8015246:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801524a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801524e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015252:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8015256:	e112      	b.n	801547e <_vfiprintf_r+0x44a>
 8015258:	9800      	ldr	r0, [sp, #0]
 801525a:	f000 fef7 	bl	801604c <_localeconv_r>
 801525e:	6843      	ldr	r3, [r0, #4]
 8015260:	9309      	str	r3, [sp, #36]	@ 0x24
 8015262:	4618      	mov	r0, r3
 8015264:	f7ee ffb4 	bl	80041d0 <strlen>
 8015268:	9007      	str	r0, [sp, #28]
 801526a:	9800      	ldr	r0, [sp, #0]
 801526c:	f000 feee 	bl	801604c <_localeconv_r>
 8015270:	6883      	ldr	r3, [r0, #8]
 8015272:	9306      	str	r3, [sp, #24]
 8015274:	9b07      	ldr	r3, [sp, #28]
 8015276:	b12b      	cbz	r3, 8015284 <_vfiprintf_r+0x250>
 8015278:	9b06      	ldr	r3, [sp, #24]
 801527a:	b11b      	cbz	r3, 8015284 <_vfiprintf_r+0x250>
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	b10b      	cbz	r3, 8015284 <_vfiprintf_r+0x250>
 8015280:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8015284:	465c      	mov	r4, fp
 8015286:	e75b      	b.n	8015140 <_vfiprintf_r+0x10c>
 8015288:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801528c:	2b00      	cmp	r3, #0
 801528e:	d1f9      	bne.n	8015284 <_vfiprintf_r+0x250>
 8015290:	2320      	movs	r3, #32
 8015292:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8015296:	e7f5      	b.n	8015284 <_vfiprintf_r+0x250>
 8015298:	f04a 0a01 	orr.w	sl, sl, #1
 801529c:	e7f2      	b.n	8015284 <_vfiprintf_r+0x250>
 801529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80152a2:	9302      	str	r3, [sp, #8]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	daed      	bge.n	8015284 <_vfiprintf_r+0x250>
 80152a8:	425b      	negs	r3, r3
 80152aa:	9302      	str	r3, [sp, #8]
 80152ac:	f04a 0a04 	orr.w	sl, sl, #4
 80152b0:	e7e8      	b.n	8015284 <_vfiprintf_r+0x250>
 80152b2:	232b      	movs	r3, #43	@ 0x2b
 80152b4:	e7ed      	b.n	8015292 <_vfiprintf_r+0x25e>
 80152b6:	465a      	mov	r2, fp
 80152b8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80152bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80152be:	d112      	bne.n	80152e6 <_vfiprintf_r+0x2b2>
 80152c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80152c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152c8:	9301      	str	r3, [sp, #4]
 80152ca:	4693      	mov	fp, r2
 80152cc:	e7da      	b.n	8015284 <_vfiprintf_r+0x250>
 80152ce:	9b01      	ldr	r3, [sp, #4]
 80152d0:	fb00 1303 	mla	r3, r0, r3, r1
 80152d4:	9301      	str	r3, [sp, #4]
 80152d6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80152da:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80152de:	2909      	cmp	r1, #9
 80152e0:	d9f5      	bls.n	80152ce <_vfiprintf_r+0x29a>
 80152e2:	4693      	mov	fp, r2
 80152e4:	e72f      	b.n	8015146 <_vfiprintf_r+0x112>
 80152e6:	2100      	movs	r1, #0
 80152e8:	9101      	str	r1, [sp, #4]
 80152ea:	200a      	movs	r0, #10
 80152ec:	e7f5      	b.n	80152da <_vfiprintf_r+0x2a6>
 80152ee:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80152f2:	e7c7      	b.n	8015284 <_vfiprintf_r+0x250>
 80152f4:	2100      	movs	r1, #0
 80152f6:	465a      	mov	r2, fp
 80152f8:	9102      	str	r1, [sp, #8]
 80152fa:	200a      	movs	r0, #10
 80152fc:	9902      	ldr	r1, [sp, #8]
 80152fe:	3b30      	subs	r3, #48	@ 0x30
 8015300:	fb00 3301 	mla	r3, r0, r1, r3
 8015304:	9302      	str	r3, [sp, #8]
 8015306:	f812 3b01 	ldrb.w	r3, [r2], #1
 801530a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 801530e:	2909      	cmp	r1, #9
 8015310:	d9f4      	bls.n	80152fc <_vfiprintf_r+0x2c8>
 8015312:	e7e6      	b.n	80152e2 <_vfiprintf_r+0x2ae>
 8015314:	f89b 3000 	ldrb.w	r3, [fp]
 8015318:	2b68      	cmp	r3, #104	@ 0x68
 801531a:	bf06      	itte	eq
 801531c:	f10b 0b01 	addeq.w	fp, fp, #1
 8015320:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8015324:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8015328:	e7ac      	b.n	8015284 <_vfiprintf_r+0x250>
 801532a:	f89b 3000 	ldrb.w	r3, [fp]
 801532e:	2b6c      	cmp	r3, #108	@ 0x6c
 8015330:	d104      	bne.n	801533c <_vfiprintf_r+0x308>
 8015332:	f10b 0b01 	add.w	fp, fp, #1
 8015336:	f04a 0a20 	orr.w	sl, sl, #32
 801533a:	e7a3      	b.n	8015284 <_vfiprintf_r+0x250>
 801533c:	f04a 0a10 	orr.w	sl, sl, #16
 8015340:	e7a0      	b.n	8015284 <_vfiprintf_r+0x250>
 8015342:	46a8      	mov	r8, r5
 8015344:	2400      	movs	r4, #0
 8015346:	f858 3b04 	ldr.w	r3, [r8], #4
 801534a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801534e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8015352:	2301      	movs	r3, #1
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801535a:	e0ab      	b.n	80154b4 <_vfiprintf_r+0x480>
 801535c:	f04a 0a10 	orr.w	sl, sl, #16
 8015360:	f01a 0f20 	tst.w	sl, #32
 8015364:	d011      	beq.n	801538a <_vfiprintf_r+0x356>
 8015366:	3507      	adds	r5, #7
 8015368:	f025 0507 	bic.w	r5, r5, #7
 801536c:	46a8      	mov	r8, r5
 801536e:	686d      	ldr	r5, [r5, #4]
 8015370:	f858 4b08 	ldr.w	r4, [r8], #8
 8015374:	2d00      	cmp	r5, #0
 8015376:	da06      	bge.n	8015386 <_vfiprintf_r+0x352>
 8015378:	4264      	negs	r4, r4
 801537a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801537e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8015382:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8015386:	2301      	movs	r3, #1
 8015388:	e048      	b.n	801541c <_vfiprintf_r+0x3e8>
 801538a:	46a8      	mov	r8, r5
 801538c:	f01a 0f10 	tst.w	sl, #16
 8015390:	f858 5b04 	ldr.w	r5, [r8], #4
 8015394:	d002      	beq.n	801539c <_vfiprintf_r+0x368>
 8015396:	462c      	mov	r4, r5
 8015398:	17ed      	asrs	r5, r5, #31
 801539a:	e7eb      	b.n	8015374 <_vfiprintf_r+0x340>
 801539c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80153a0:	d003      	beq.n	80153aa <_vfiprintf_r+0x376>
 80153a2:	b22c      	sxth	r4, r5
 80153a4:	f345 35c0 	sbfx	r5, r5, #15, #1
 80153a8:	e7e4      	b.n	8015374 <_vfiprintf_r+0x340>
 80153aa:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80153ae:	d0f2      	beq.n	8015396 <_vfiprintf_r+0x362>
 80153b0:	b26c      	sxtb	r4, r5
 80153b2:	f345 15c0 	sbfx	r5, r5, #7, #1
 80153b6:	e7dd      	b.n	8015374 <_vfiprintf_r+0x340>
 80153b8:	f01a 0f20 	tst.w	sl, #32
 80153bc:	d007      	beq.n	80153ce <_vfiprintf_r+0x39a>
 80153be:	9a03      	ldr	r2, [sp, #12]
 80153c0:	682b      	ldr	r3, [r5, #0]
 80153c2:	9903      	ldr	r1, [sp, #12]
 80153c4:	17d2      	asrs	r2, r2, #31
 80153c6:	e9c3 1200 	strd	r1, r2, [r3]
 80153ca:	3504      	adds	r5, #4
 80153cc:	e693      	b.n	80150f6 <_vfiprintf_r+0xc2>
 80153ce:	f01a 0f10 	tst.w	sl, #16
 80153d2:	d003      	beq.n	80153dc <_vfiprintf_r+0x3a8>
 80153d4:	682b      	ldr	r3, [r5, #0]
 80153d6:	9a03      	ldr	r2, [sp, #12]
 80153d8:	601a      	str	r2, [r3, #0]
 80153da:	e7f6      	b.n	80153ca <_vfiprintf_r+0x396>
 80153dc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80153e0:	d003      	beq.n	80153ea <_vfiprintf_r+0x3b6>
 80153e2:	682b      	ldr	r3, [r5, #0]
 80153e4:	9a03      	ldr	r2, [sp, #12]
 80153e6:	801a      	strh	r2, [r3, #0]
 80153e8:	e7ef      	b.n	80153ca <_vfiprintf_r+0x396>
 80153ea:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80153ee:	d0f1      	beq.n	80153d4 <_vfiprintf_r+0x3a0>
 80153f0:	682b      	ldr	r3, [r5, #0]
 80153f2:	9a03      	ldr	r2, [sp, #12]
 80153f4:	701a      	strb	r2, [r3, #0]
 80153f6:	e7e8      	b.n	80153ca <_vfiprintf_r+0x396>
 80153f8:	f04a 0a10 	orr.w	sl, sl, #16
 80153fc:	f01a 0320 	ands.w	r3, sl, #32
 8015400:	d01f      	beq.n	8015442 <_vfiprintf_r+0x40e>
 8015402:	3507      	adds	r5, #7
 8015404:	f025 0507 	bic.w	r5, r5, #7
 8015408:	46a8      	mov	r8, r5
 801540a:	686d      	ldr	r5, [r5, #4]
 801540c:	f858 4b08 	ldr.w	r4, [r8], #8
 8015410:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8015414:	2300      	movs	r3, #0
 8015416:	2200      	movs	r2, #0
 8015418:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801541c:	9a01      	ldr	r2, [sp, #4]
 801541e:	3201      	adds	r2, #1
 8015420:	f000 825f 	beq.w	80158e2 <_vfiprintf_r+0x8ae>
 8015424:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8015428:	9204      	str	r2, [sp, #16]
 801542a:	ea54 0205 	orrs.w	r2, r4, r5
 801542e:	f040 825e 	bne.w	80158ee <_vfiprintf_r+0x8ba>
 8015432:	9a01      	ldr	r2, [sp, #4]
 8015434:	2a00      	cmp	r2, #0
 8015436:	f000 8198 	beq.w	801576a <_vfiprintf_r+0x736>
 801543a:	2b01      	cmp	r3, #1
 801543c:	f040 825a 	bne.w	80158f4 <_vfiprintf_r+0x8c0>
 8015440:	e13b      	b.n	80156ba <_vfiprintf_r+0x686>
 8015442:	46a8      	mov	r8, r5
 8015444:	f01a 0510 	ands.w	r5, sl, #16
 8015448:	f858 4b04 	ldr.w	r4, [r8], #4
 801544c:	d001      	beq.n	8015452 <_vfiprintf_r+0x41e>
 801544e:	461d      	mov	r5, r3
 8015450:	e7de      	b.n	8015410 <_vfiprintf_r+0x3dc>
 8015452:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8015456:	d001      	beq.n	801545c <_vfiprintf_r+0x428>
 8015458:	b2a4      	uxth	r4, r4
 801545a:	e7d9      	b.n	8015410 <_vfiprintf_r+0x3dc>
 801545c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8015460:	d0d6      	beq.n	8015410 <_vfiprintf_r+0x3dc>
 8015462:	b2e4      	uxtb	r4, r4
 8015464:	e7f3      	b.n	801544e <_vfiprintf_r+0x41a>
 8015466:	46a8      	mov	r8, r5
 8015468:	f647 0330 	movw	r3, #30768	@ 0x7830
 801546c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8015470:	f858 4b04 	ldr.w	r4, [r8], #4
 8015474:	4b03      	ldr	r3, [pc, #12]	@ (8015484 <_vfiprintf_r+0x450>)
 8015476:	9305      	str	r3, [sp, #20]
 8015478:	2500      	movs	r5, #0
 801547a:	f04a 0a02 	orr.w	sl, sl, #2
 801547e:	2302      	movs	r3, #2
 8015480:	e7c9      	b.n	8015416 <_vfiprintf_r+0x3e2>
 8015482:	bf00      	nop
 8015484:	08018980 	.word	0x08018980
 8015488:	9b01      	ldr	r3, [sp, #4]
 801548a:	46a8      	mov	r8, r5
 801548c:	1c5c      	adds	r4, r3, #1
 801548e:	f04f 0500 	mov.w	r5, #0
 8015492:	f858 9b04 	ldr.w	r9, [r8], #4
 8015496:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801549a:	f000 80d0 	beq.w	801563e <_vfiprintf_r+0x60a>
 801549e:	461a      	mov	r2, r3
 80154a0:	4629      	mov	r1, r5
 80154a2:	4648      	mov	r0, r9
 80154a4:	f7ee fe9c 	bl	80041e0 <memchr>
 80154a8:	4604      	mov	r4, r0
 80154aa:	b118      	cbz	r0, 80154b4 <_vfiprintf_r+0x480>
 80154ac:	eba0 0309 	sub.w	r3, r0, r9
 80154b0:	9301      	str	r3, [sp, #4]
 80154b2:	462c      	mov	r4, r5
 80154b4:	9b01      	ldr	r3, [sp, #4]
 80154b6:	42a3      	cmp	r3, r4
 80154b8:	bfb8      	it	lt
 80154ba:	4623      	movlt	r3, r4
 80154bc:	9304      	str	r3, [sp, #16]
 80154be:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80154c2:	b113      	cbz	r3, 80154ca <_vfiprintf_r+0x496>
 80154c4:	9b04      	ldr	r3, [sp, #16]
 80154c6:	3301      	adds	r3, #1
 80154c8:	9304      	str	r3, [sp, #16]
 80154ca:	f01a 0302 	ands.w	r3, sl, #2
 80154ce:	9308      	str	r3, [sp, #32]
 80154d0:	bf1e      	ittt	ne
 80154d2:	9b04      	ldrne	r3, [sp, #16]
 80154d4:	3302      	addne	r3, #2
 80154d6:	9304      	strne	r3, [sp, #16]
 80154d8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80154dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80154de:	d11f      	bne.n	8015520 <_vfiprintf_r+0x4ec>
 80154e0:	9b02      	ldr	r3, [sp, #8]
 80154e2:	9a04      	ldr	r2, [sp, #16]
 80154e4:	1a9d      	subs	r5, r3, r2
 80154e6:	2d00      	cmp	r5, #0
 80154e8:	dd1a      	ble.n	8015520 <_vfiprintf_r+0x4ec>
 80154ea:	4ba9      	ldr	r3, [pc, #676]	@ (8015790 <_vfiprintf_r+0x75c>)
 80154ec:	6033      	str	r3, [r6, #0]
 80154ee:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80154f2:	2d10      	cmp	r5, #16
 80154f4:	f102 0201 	add.w	r2, r2, #1
 80154f8:	f106 0008 	add.w	r0, r6, #8
 80154fc:	f300 814e 	bgt.w	801579c <_vfiprintf_r+0x768>
 8015500:	6075      	str	r5, [r6, #4]
 8015502:	2a07      	cmp	r2, #7
 8015504:	4465      	add	r5, ip
 8015506:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801550a:	f340 815a 	ble.w	80157c2 <_vfiprintf_r+0x78e>
 801550e:	9800      	ldr	r0, [sp, #0]
 8015510:	aa0e      	add	r2, sp, #56	@ 0x38
 8015512:	4639      	mov	r1, r7
 8015514:	f7ff fd5c 	bl	8014fd0 <__sprint_r>
 8015518:	2800      	cmp	r0, #0
 801551a:	f040 81b4 	bne.w	8015886 <_vfiprintf_r+0x852>
 801551e:	ae11      	add	r6, sp, #68	@ 0x44
 8015520:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8015524:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8015528:	b161      	cbz	r1, 8015544 <_vfiprintf_r+0x510>
 801552a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801552e:	3301      	adds	r3, #1
 8015530:	6031      	str	r1, [r6, #0]
 8015532:	2101      	movs	r1, #1
 8015534:	440a      	add	r2, r1
 8015536:	2b07      	cmp	r3, #7
 8015538:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801553c:	6071      	str	r1, [r6, #4]
 801553e:	f300 8142 	bgt.w	80157c6 <_vfiprintf_r+0x792>
 8015542:	3608      	adds	r6, #8
 8015544:	9908      	ldr	r1, [sp, #32]
 8015546:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801554a:	b159      	cbz	r1, 8015564 <_vfiprintf_r+0x530>
 801554c:	a90d      	add	r1, sp, #52	@ 0x34
 801554e:	3301      	adds	r3, #1
 8015550:	6031      	str	r1, [r6, #0]
 8015552:	2102      	movs	r1, #2
 8015554:	440a      	add	r2, r1
 8015556:	2b07      	cmp	r3, #7
 8015558:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801555c:	6071      	str	r1, [r6, #4]
 801555e:	f300 813b 	bgt.w	80157d8 <_vfiprintf_r+0x7a4>
 8015562:	3608      	adds	r6, #8
 8015564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015566:	2b80      	cmp	r3, #128	@ 0x80
 8015568:	d11f      	bne.n	80155aa <_vfiprintf_r+0x576>
 801556a:	9b02      	ldr	r3, [sp, #8]
 801556c:	9a04      	ldr	r2, [sp, #16]
 801556e:	1a9d      	subs	r5, r3, r2
 8015570:	2d00      	cmp	r5, #0
 8015572:	dd1a      	ble.n	80155aa <_vfiprintf_r+0x576>
 8015574:	4b87      	ldr	r3, [pc, #540]	@ (8015794 <_vfiprintf_r+0x760>)
 8015576:	6033      	str	r3, [r6, #0]
 8015578:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801557c:	2d10      	cmp	r5, #16
 801557e:	f102 0201 	add.w	r2, r2, #1
 8015582:	f106 0008 	add.w	r0, r6, #8
 8015586:	f300 8130 	bgt.w	80157ea <_vfiprintf_r+0x7b6>
 801558a:	6075      	str	r5, [r6, #4]
 801558c:	2a07      	cmp	r2, #7
 801558e:	4465      	add	r5, ip
 8015590:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8015594:	f340 813c 	ble.w	8015810 <_vfiprintf_r+0x7dc>
 8015598:	9800      	ldr	r0, [sp, #0]
 801559a:	aa0e      	add	r2, sp, #56	@ 0x38
 801559c:	4639      	mov	r1, r7
 801559e:	f7ff fd17 	bl	8014fd0 <__sprint_r>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	f040 816f 	bne.w	8015886 <_vfiprintf_r+0x852>
 80155a8:	ae11      	add	r6, sp, #68	@ 0x44
 80155aa:	9b01      	ldr	r3, [sp, #4]
 80155ac:	1ae4      	subs	r4, r4, r3
 80155ae:	2c00      	cmp	r4, #0
 80155b0:	dd1a      	ble.n	80155e8 <_vfiprintf_r+0x5b4>
 80155b2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80155b6:	4877      	ldr	r0, [pc, #476]	@ (8015794 <_vfiprintf_r+0x760>)
 80155b8:	6030      	str	r0, [r6, #0]
 80155ba:	2c10      	cmp	r4, #16
 80155bc:	f103 0301 	add.w	r3, r3, #1
 80155c0:	f106 0108 	add.w	r1, r6, #8
 80155c4:	f300 8126 	bgt.w	8015814 <_vfiprintf_r+0x7e0>
 80155c8:	6074      	str	r4, [r6, #4]
 80155ca:	2b07      	cmp	r3, #7
 80155cc:	4414      	add	r4, r2
 80155ce:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80155d2:	f340 8130 	ble.w	8015836 <_vfiprintf_r+0x802>
 80155d6:	9800      	ldr	r0, [sp, #0]
 80155d8:	aa0e      	add	r2, sp, #56	@ 0x38
 80155da:	4639      	mov	r1, r7
 80155dc:	f7ff fcf8 	bl	8014fd0 <__sprint_r>
 80155e0:	2800      	cmp	r0, #0
 80155e2:	f040 8150 	bne.w	8015886 <_vfiprintf_r+0x852>
 80155e6:	ae11      	add	r6, sp, #68	@ 0x44
 80155e8:	9b01      	ldr	r3, [sp, #4]
 80155ea:	9a01      	ldr	r2, [sp, #4]
 80155ec:	6073      	str	r3, [r6, #4]
 80155ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80155f0:	f8c6 9000 	str.w	r9, [r6]
 80155f4:	4413      	add	r3, r2
 80155f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80155f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155fa:	3301      	adds	r3, #1
 80155fc:	2b07      	cmp	r3, #7
 80155fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015600:	f300 811b 	bgt.w	801583a <_vfiprintf_r+0x806>
 8015604:	f106 0308 	add.w	r3, r6, #8
 8015608:	f01a 0f04 	tst.w	sl, #4
 801560c:	f040 811d 	bne.w	801584a <_vfiprintf_r+0x816>
 8015610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015614:	9904      	ldr	r1, [sp, #16]
 8015616:	428a      	cmp	r2, r1
 8015618:	bfac      	ite	ge
 801561a:	189b      	addge	r3, r3, r2
 801561c:	185b      	addlt	r3, r3, r1
 801561e:	9303      	str	r3, [sp, #12]
 8015620:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015622:	b13b      	cbz	r3, 8015634 <_vfiprintf_r+0x600>
 8015624:	9800      	ldr	r0, [sp, #0]
 8015626:	aa0e      	add	r2, sp, #56	@ 0x38
 8015628:	4639      	mov	r1, r7
 801562a:	f7ff fcd1 	bl	8014fd0 <__sprint_r>
 801562e:	2800      	cmp	r0, #0
 8015630:	f040 8129 	bne.w	8015886 <_vfiprintf_r+0x852>
 8015634:	2300      	movs	r3, #0
 8015636:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015638:	4645      	mov	r5, r8
 801563a:	ae11      	add	r6, sp, #68	@ 0x44
 801563c:	e55b      	b.n	80150f6 <_vfiprintf_r+0xc2>
 801563e:	4648      	mov	r0, r9
 8015640:	f7ee fdc6 	bl	80041d0 <strlen>
 8015644:	9001      	str	r0, [sp, #4]
 8015646:	e734      	b.n	80154b2 <_vfiprintf_r+0x47e>
 8015648:	f04a 0a10 	orr.w	sl, sl, #16
 801564c:	f01a 0320 	ands.w	r3, sl, #32
 8015650:	d008      	beq.n	8015664 <_vfiprintf_r+0x630>
 8015652:	3507      	adds	r5, #7
 8015654:	f025 0507 	bic.w	r5, r5, #7
 8015658:	46a8      	mov	r8, r5
 801565a:	686d      	ldr	r5, [r5, #4]
 801565c:	f858 4b08 	ldr.w	r4, [r8], #8
 8015660:	2301      	movs	r3, #1
 8015662:	e6d8      	b.n	8015416 <_vfiprintf_r+0x3e2>
 8015664:	46a8      	mov	r8, r5
 8015666:	f01a 0510 	ands.w	r5, sl, #16
 801566a:	f858 4b04 	ldr.w	r4, [r8], #4
 801566e:	d001      	beq.n	8015674 <_vfiprintf_r+0x640>
 8015670:	461d      	mov	r5, r3
 8015672:	e7f5      	b.n	8015660 <_vfiprintf_r+0x62c>
 8015674:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8015678:	d001      	beq.n	801567e <_vfiprintf_r+0x64a>
 801567a:	b2a4      	uxth	r4, r4
 801567c:	e7f0      	b.n	8015660 <_vfiprintf_r+0x62c>
 801567e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8015682:	d0ed      	beq.n	8015660 <_vfiprintf_r+0x62c>
 8015684:	b2e4      	uxtb	r4, r4
 8015686:	e7f3      	b.n	8015670 <_vfiprintf_r+0x63c>
 8015688:	4a43      	ldr	r2, [pc, #268]	@ (8015798 <_vfiprintf_r+0x764>)
 801568a:	e5c9      	b.n	8015220 <_vfiprintf_r+0x1ec>
 801568c:	46a8      	mov	r8, r5
 801568e:	f01a 0510 	ands.w	r5, sl, #16
 8015692:	f858 4b04 	ldr.w	r4, [r8], #4
 8015696:	d001      	beq.n	801569c <_vfiprintf_r+0x668>
 8015698:	4615      	mov	r5, r2
 801569a:	e5cd      	b.n	8015238 <_vfiprintf_r+0x204>
 801569c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80156a0:	d001      	beq.n	80156a6 <_vfiprintf_r+0x672>
 80156a2:	b2a4      	uxth	r4, r4
 80156a4:	e5c8      	b.n	8015238 <_vfiprintf_r+0x204>
 80156a6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80156aa:	f43f adc5 	beq.w	8015238 <_vfiprintf_r+0x204>
 80156ae:	b2e4      	uxtb	r4, r4
 80156b0:	e7f2      	b.n	8015698 <_vfiprintf_r+0x664>
 80156b2:	2c0a      	cmp	r4, #10
 80156b4:	f175 0300 	sbcs.w	r3, r5, #0
 80156b8:	d206      	bcs.n	80156c8 <_vfiprintf_r+0x694>
 80156ba:	3430      	adds	r4, #48	@ 0x30
 80156bc:	b2e4      	uxtb	r4, r4
 80156be:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80156c2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80156c6:	e131      	b.n	801592c <_vfiprintf_r+0x8f8>
 80156c8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80156ca:	9308      	str	r3, [sp, #32]
 80156cc:	9b04      	ldr	r3, [sp, #16]
 80156ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80156d2:	f04f 0a00 	mov.w	sl, #0
 80156d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80156d8:	220a      	movs	r2, #10
 80156da:	2300      	movs	r3, #0
 80156dc:	4620      	mov	r0, r4
 80156de:	4629      	mov	r1, r5
 80156e0:	f7ef fa62 	bl	8004ba8 <__aeabi_uldivmod>
 80156e4:	460b      	mov	r3, r1
 80156e6:	9908      	ldr	r1, [sp, #32]
 80156e8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80156ea:	3230      	adds	r2, #48	@ 0x30
 80156ec:	f801 2c01 	strb.w	r2, [r1, #-1]
 80156f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80156f2:	f101 39ff 	add.w	r9, r1, #4294967295
 80156f6:	f10a 0a01 	add.w	sl, sl, #1
 80156fa:	b1e2      	cbz	r2, 8015736 <_vfiprintf_r+0x702>
 80156fc:	9a06      	ldr	r2, [sp, #24]
 80156fe:	7812      	ldrb	r2, [r2, #0]
 8015700:	4552      	cmp	r2, sl
 8015702:	d118      	bne.n	8015736 <_vfiprintf_r+0x702>
 8015704:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8015708:	d015      	beq.n	8015736 <_vfiprintf_r+0x702>
 801570a:	2c0a      	cmp	r4, #10
 801570c:	f175 0200 	sbcs.w	r2, r5, #0
 8015710:	d311      	bcc.n	8015736 <_vfiprintf_r+0x702>
 8015712:	9308      	str	r3, [sp, #32]
 8015714:	9b07      	ldr	r3, [sp, #28]
 8015716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015718:	eba9 0903 	sub.w	r9, r9, r3
 801571c:	461a      	mov	r2, r3
 801571e:	4648      	mov	r0, r9
 8015720:	f000 fc7a 	bl	8016018 <strncpy>
 8015724:	9b06      	ldr	r3, [sp, #24]
 8015726:	785a      	ldrb	r2, [r3, #1]
 8015728:	9b08      	ldr	r3, [sp, #32]
 801572a:	b172      	cbz	r2, 801574a <_vfiprintf_r+0x716>
 801572c:	9a06      	ldr	r2, [sp, #24]
 801572e:	3201      	adds	r2, #1
 8015730:	9206      	str	r2, [sp, #24]
 8015732:	f04f 0a00 	mov.w	sl, #0
 8015736:	2c0a      	cmp	r4, #10
 8015738:	f175 0500 	sbcs.w	r5, r5, #0
 801573c:	f0c0 80f6 	bcc.w	801592c <_vfiprintf_r+0x8f8>
 8015740:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8015742:	f8cd 9020 	str.w	r9, [sp, #32]
 8015746:	461d      	mov	r5, r3
 8015748:	e7c6      	b.n	80156d8 <_vfiprintf_r+0x6a4>
 801574a:	4692      	mov	sl, r2
 801574c:	e7f3      	b.n	8015736 <_vfiprintf_r+0x702>
 801574e:	f004 030f 	and.w	r3, r4, #15
 8015752:	9a05      	ldr	r2, [sp, #20]
 8015754:	0924      	lsrs	r4, r4, #4
 8015756:	5cd3      	ldrb	r3, [r2, r3]
 8015758:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801575c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8015760:	092d      	lsrs	r5, r5, #4
 8015762:	ea54 0305 	orrs.w	r3, r4, r5
 8015766:	d1f2      	bne.n	801574e <_vfiprintf_r+0x71a>
 8015768:	e0e0      	b.n	801592c <_vfiprintf_r+0x8f8>
 801576a:	b923      	cbnz	r3, 8015776 <_vfiprintf_r+0x742>
 801576c:	f01a 0f01 	tst.w	sl, #1
 8015770:	d001      	beq.n	8015776 <_vfiprintf_r+0x742>
 8015772:	2430      	movs	r4, #48	@ 0x30
 8015774:	e7a3      	b.n	80156be <_vfiprintf_r+0x68a>
 8015776:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801577a:	e0d7      	b.n	801592c <_vfiprintf_r+0x8f8>
 801577c:	2b00      	cmp	r3, #0
 801577e:	f000 80a3 	beq.w	80158c8 <_vfiprintf_r+0x894>
 8015782:	2400      	movs	r4, #0
 8015784:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8015788:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801578c:	46a8      	mov	r8, r5
 801578e:	e5e0      	b.n	8015352 <_vfiprintf_r+0x31e>
 8015790:	080189d4 	.word	0x080189d4
 8015794:	080189c4 	.word	0x080189c4
 8015798:	08018991 	.word	0x08018991
 801579c:	2110      	movs	r1, #16
 801579e:	6071      	str	r1, [r6, #4]
 80157a0:	2a07      	cmp	r2, #7
 80157a2:	4461      	add	r1, ip
 80157a4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80157a8:	dd08      	ble.n	80157bc <_vfiprintf_r+0x788>
 80157aa:	9800      	ldr	r0, [sp, #0]
 80157ac:	aa0e      	add	r2, sp, #56	@ 0x38
 80157ae:	4639      	mov	r1, r7
 80157b0:	f7ff fc0e 	bl	8014fd0 <__sprint_r>
 80157b4:	2800      	cmp	r0, #0
 80157b6:	d166      	bne.n	8015886 <_vfiprintf_r+0x852>
 80157b8:	4b60      	ldr	r3, [pc, #384]	@ (801593c <_vfiprintf_r+0x908>)
 80157ba:	a811      	add	r0, sp, #68	@ 0x44
 80157bc:	3d10      	subs	r5, #16
 80157be:	4606      	mov	r6, r0
 80157c0:	e694      	b.n	80154ec <_vfiprintf_r+0x4b8>
 80157c2:	4606      	mov	r6, r0
 80157c4:	e6ac      	b.n	8015520 <_vfiprintf_r+0x4ec>
 80157c6:	9800      	ldr	r0, [sp, #0]
 80157c8:	aa0e      	add	r2, sp, #56	@ 0x38
 80157ca:	4639      	mov	r1, r7
 80157cc:	f7ff fc00 	bl	8014fd0 <__sprint_r>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d158      	bne.n	8015886 <_vfiprintf_r+0x852>
 80157d4:	ae11      	add	r6, sp, #68	@ 0x44
 80157d6:	e6b5      	b.n	8015544 <_vfiprintf_r+0x510>
 80157d8:	9800      	ldr	r0, [sp, #0]
 80157da:	aa0e      	add	r2, sp, #56	@ 0x38
 80157dc:	4639      	mov	r1, r7
 80157de:	f7ff fbf7 	bl	8014fd0 <__sprint_r>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	d14f      	bne.n	8015886 <_vfiprintf_r+0x852>
 80157e6:	ae11      	add	r6, sp, #68	@ 0x44
 80157e8:	e6bc      	b.n	8015564 <_vfiprintf_r+0x530>
 80157ea:	2110      	movs	r1, #16
 80157ec:	6071      	str	r1, [r6, #4]
 80157ee:	2a07      	cmp	r2, #7
 80157f0:	4461      	add	r1, ip
 80157f2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80157f6:	dd08      	ble.n	801580a <_vfiprintf_r+0x7d6>
 80157f8:	9800      	ldr	r0, [sp, #0]
 80157fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80157fc:	4639      	mov	r1, r7
 80157fe:	f7ff fbe7 	bl	8014fd0 <__sprint_r>
 8015802:	2800      	cmp	r0, #0
 8015804:	d13f      	bne.n	8015886 <_vfiprintf_r+0x852>
 8015806:	4b4e      	ldr	r3, [pc, #312]	@ (8015940 <_vfiprintf_r+0x90c>)
 8015808:	a811      	add	r0, sp, #68	@ 0x44
 801580a:	3d10      	subs	r5, #16
 801580c:	4606      	mov	r6, r0
 801580e:	e6b2      	b.n	8015576 <_vfiprintf_r+0x542>
 8015810:	4606      	mov	r6, r0
 8015812:	e6ca      	b.n	80155aa <_vfiprintf_r+0x576>
 8015814:	2010      	movs	r0, #16
 8015816:	4402      	add	r2, r0
 8015818:	2b07      	cmp	r3, #7
 801581a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801581e:	6070      	str	r0, [r6, #4]
 8015820:	dd06      	ble.n	8015830 <_vfiprintf_r+0x7fc>
 8015822:	9800      	ldr	r0, [sp, #0]
 8015824:	aa0e      	add	r2, sp, #56	@ 0x38
 8015826:	4639      	mov	r1, r7
 8015828:	f7ff fbd2 	bl	8014fd0 <__sprint_r>
 801582c:	bb58      	cbnz	r0, 8015886 <_vfiprintf_r+0x852>
 801582e:	a911      	add	r1, sp, #68	@ 0x44
 8015830:	3c10      	subs	r4, #16
 8015832:	460e      	mov	r6, r1
 8015834:	e6bd      	b.n	80155b2 <_vfiprintf_r+0x57e>
 8015836:	460e      	mov	r6, r1
 8015838:	e6d6      	b.n	80155e8 <_vfiprintf_r+0x5b4>
 801583a:	9800      	ldr	r0, [sp, #0]
 801583c:	aa0e      	add	r2, sp, #56	@ 0x38
 801583e:	4639      	mov	r1, r7
 8015840:	f7ff fbc6 	bl	8014fd0 <__sprint_r>
 8015844:	b9f8      	cbnz	r0, 8015886 <_vfiprintf_r+0x852>
 8015846:	ab11      	add	r3, sp, #68	@ 0x44
 8015848:	e6de      	b.n	8015608 <_vfiprintf_r+0x5d4>
 801584a:	9a02      	ldr	r2, [sp, #8]
 801584c:	9904      	ldr	r1, [sp, #16]
 801584e:	1a54      	subs	r4, r2, r1
 8015850:	2c00      	cmp	r4, #0
 8015852:	f77f aedd 	ble.w	8015610 <_vfiprintf_r+0x5dc>
 8015856:	4d39      	ldr	r5, [pc, #228]	@ (801593c <_vfiprintf_r+0x908>)
 8015858:	2610      	movs	r6, #16
 801585a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 801585e:	2c10      	cmp	r4, #16
 8015860:	f102 0201 	add.w	r2, r2, #1
 8015864:	601d      	str	r5, [r3, #0]
 8015866:	dc1d      	bgt.n	80158a4 <_vfiprintf_r+0x870>
 8015868:	605c      	str	r4, [r3, #4]
 801586a:	2a07      	cmp	r2, #7
 801586c:	440c      	add	r4, r1
 801586e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8015872:	f77f aecd 	ble.w	8015610 <_vfiprintf_r+0x5dc>
 8015876:	9800      	ldr	r0, [sp, #0]
 8015878:	aa0e      	add	r2, sp, #56	@ 0x38
 801587a:	4639      	mov	r1, r7
 801587c:	f7ff fba8 	bl	8014fd0 <__sprint_r>
 8015880:	2800      	cmp	r0, #0
 8015882:	f43f aec5 	beq.w	8015610 <_vfiprintf_r+0x5dc>
 8015886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015888:	07d9      	lsls	r1, r3, #31
 801588a:	d405      	bmi.n	8015898 <_vfiprintf_r+0x864>
 801588c:	89bb      	ldrh	r3, [r7, #12]
 801588e:	059a      	lsls	r2, r3, #22
 8015890:	d402      	bmi.n	8015898 <_vfiprintf_r+0x864>
 8015892:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8015894:	f7fd fdb3 	bl	80133fe <__retarget_lock_release_recursive>
 8015898:	89bb      	ldrh	r3, [r7, #12]
 801589a:	065b      	lsls	r3, r3, #25
 801589c:	f57f abfb 	bpl.w	8015096 <_vfiprintf_r+0x62>
 80158a0:	f7ff bbf6 	b.w	8015090 <_vfiprintf_r+0x5c>
 80158a4:	3110      	adds	r1, #16
 80158a6:	2a07      	cmp	r2, #7
 80158a8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80158ac:	605e      	str	r6, [r3, #4]
 80158ae:	dc02      	bgt.n	80158b6 <_vfiprintf_r+0x882>
 80158b0:	3308      	adds	r3, #8
 80158b2:	3c10      	subs	r4, #16
 80158b4:	e7d1      	b.n	801585a <_vfiprintf_r+0x826>
 80158b6:	9800      	ldr	r0, [sp, #0]
 80158b8:	aa0e      	add	r2, sp, #56	@ 0x38
 80158ba:	4639      	mov	r1, r7
 80158bc:	f7ff fb88 	bl	8014fd0 <__sprint_r>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d1e0      	bne.n	8015886 <_vfiprintf_r+0x852>
 80158c4:	ab11      	add	r3, sp, #68	@ 0x44
 80158c6:	e7f4      	b.n	80158b2 <_vfiprintf_r+0x87e>
 80158c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80158ca:	b913      	cbnz	r3, 80158d2 <_vfiprintf_r+0x89e>
 80158cc:	2300      	movs	r3, #0
 80158ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80158d0:	e7d9      	b.n	8015886 <_vfiprintf_r+0x852>
 80158d2:	9800      	ldr	r0, [sp, #0]
 80158d4:	aa0e      	add	r2, sp, #56	@ 0x38
 80158d6:	4639      	mov	r1, r7
 80158d8:	f7ff fb7a 	bl	8014fd0 <__sprint_r>
 80158dc:	2800      	cmp	r0, #0
 80158de:	d0f5      	beq.n	80158cc <_vfiprintf_r+0x898>
 80158e0:	e7d1      	b.n	8015886 <_vfiprintf_r+0x852>
 80158e2:	ea54 0205 	orrs.w	r2, r4, r5
 80158e6:	f8cd a010 	str.w	sl, [sp, #16]
 80158ea:	f43f ada6 	beq.w	801543a <_vfiprintf_r+0x406>
 80158ee:	2b01      	cmp	r3, #1
 80158f0:	f43f aedf 	beq.w	80156b2 <_vfiprintf_r+0x67e>
 80158f4:	2b02      	cmp	r3, #2
 80158f6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80158fa:	f43f af28 	beq.w	801574e <_vfiprintf_r+0x71a>
 80158fe:	f004 0307 	and.w	r3, r4, #7
 8015902:	08e4      	lsrs	r4, r4, #3
 8015904:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8015908:	08ed      	lsrs	r5, r5, #3
 801590a:	3330      	adds	r3, #48	@ 0x30
 801590c:	ea54 0105 	orrs.w	r1, r4, r5
 8015910:	464a      	mov	r2, r9
 8015912:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8015916:	d1f2      	bne.n	80158fe <_vfiprintf_r+0x8ca>
 8015918:	9904      	ldr	r1, [sp, #16]
 801591a:	07c8      	lsls	r0, r1, #31
 801591c:	d506      	bpl.n	801592c <_vfiprintf_r+0x8f8>
 801591e:	2b30      	cmp	r3, #48	@ 0x30
 8015920:	d004      	beq.n	801592c <_vfiprintf_r+0x8f8>
 8015922:	2330      	movs	r3, #48	@ 0x30
 8015924:	f809 3c01 	strb.w	r3, [r9, #-1]
 8015928:	f1a2 0902 	sub.w	r9, r2, #2
 801592c:	ab3a      	add	r3, sp, #232	@ 0xe8
 801592e:	eba3 0309 	sub.w	r3, r3, r9
 8015932:	9c01      	ldr	r4, [sp, #4]
 8015934:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015938:	9301      	str	r3, [sp, #4]
 801593a:	e5bb      	b.n	80154b4 <_vfiprintf_r+0x480>
 801593c:	080189d4 	.word	0x080189d4
 8015940:	080189c4 	.word	0x080189c4

08015944 <__sbprintf>:
 8015944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015946:	461f      	mov	r7, r3
 8015948:	898b      	ldrh	r3, [r1, #12]
 801594a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 801594e:	f023 0302 	bic.w	r3, r3, #2
 8015952:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015956:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8015958:	9319      	str	r3, [sp, #100]	@ 0x64
 801595a:	89cb      	ldrh	r3, [r1, #14]
 801595c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015960:	69cb      	ldr	r3, [r1, #28]
 8015962:	9307      	str	r3, [sp, #28]
 8015964:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8015966:	9309      	str	r3, [sp, #36]	@ 0x24
 8015968:	ab1a      	add	r3, sp, #104	@ 0x68
 801596a:	9300      	str	r3, [sp, #0]
 801596c:	9304      	str	r3, [sp, #16]
 801596e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015972:	4615      	mov	r5, r2
 8015974:	4606      	mov	r6, r0
 8015976:	9302      	str	r3, [sp, #8]
 8015978:	9305      	str	r3, [sp, #20]
 801597a:	a816      	add	r0, sp, #88	@ 0x58
 801597c:	2300      	movs	r3, #0
 801597e:	460c      	mov	r4, r1
 8015980:	9306      	str	r3, [sp, #24]
 8015982:	f7fd fd39 	bl	80133f8 <__retarget_lock_init_recursive>
 8015986:	462a      	mov	r2, r5
 8015988:	463b      	mov	r3, r7
 801598a:	4669      	mov	r1, sp
 801598c:	4630      	mov	r0, r6
 801598e:	f7ff fb51 	bl	8015034 <_vfiprintf_r>
 8015992:	1e05      	subs	r5, r0, #0
 8015994:	db07      	blt.n	80159a6 <__sbprintf+0x62>
 8015996:	4669      	mov	r1, sp
 8015998:	4630      	mov	r0, r6
 801599a:	f000 f8f1 	bl	8015b80 <_fflush_r>
 801599e:	2800      	cmp	r0, #0
 80159a0:	bf18      	it	ne
 80159a2:	f04f 35ff 	movne.w	r5, #4294967295
 80159a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80159aa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80159ac:	065b      	lsls	r3, r3, #25
 80159ae:	bf42      	ittt	mi
 80159b0:	89a3      	ldrhmi	r3, [r4, #12]
 80159b2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80159b6:	81a3      	strhmi	r3, [r4, #12]
 80159b8:	f7fd fd1f 	bl	80133fa <__retarget_lock_close_recursive>
 80159bc:	4628      	mov	r0, r5
 80159be:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80159c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159c4 <_fclose_r>:
 80159c4:	b570      	push	{r4, r5, r6, lr}
 80159c6:	4605      	mov	r5, r0
 80159c8:	460c      	mov	r4, r1
 80159ca:	b1b1      	cbz	r1, 80159fa <_fclose_r+0x36>
 80159cc:	b118      	cbz	r0, 80159d6 <_fclose_r+0x12>
 80159ce:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80159d0:	b90b      	cbnz	r3, 80159d6 <_fclose_r+0x12>
 80159d2:	f7fd fbbf 	bl	8013154 <__sinit>
 80159d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80159d8:	07de      	lsls	r6, r3, #31
 80159da:	d405      	bmi.n	80159e8 <_fclose_r+0x24>
 80159dc:	89a3      	ldrh	r3, [r4, #12]
 80159de:	0598      	lsls	r0, r3, #22
 80159e0:	d402      	bmi.n	80159e8 <_fclose_r+0x24>
 80159e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159e4:	f7fd fd0a 	bl	80133fc <__retarget_lock_acquire_recursive>
 80159e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159ec:	b943      	cbnz	r3, 8015a00 <_fclose_r+0x3c>
 80159ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80159f0:	07d9      	lsls	r1, r3, #31
 80159f2:	d402      	bmi.n	80159fa <_fclose_r+0x36>
 80159f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80159f6:	f7fd fd02 	bl	80133fe <__retarget_lock_release_recursive>
 80159fa:	2600      	movs	r6, #0
 80159fc:	4630      	mov	r0, r6
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	4621      	mov	r1, r4
 8015a02:	4628      	mov	r0, r5
 8015a04:	f000 f834 	bl	8015a70 <__sflush_r>
 8015a08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015a0a:	4606      	mov	r6, r0
 8015a0c:	b133      	cbz	r3, 8015a1c <_fclose_r+0x58>
 8015a0e:	69e1      	ldr	r1, [r4, #28]
 8015a10:	4628      	mov	r0, r5
 8015a12:	4798      	blx	r3
 8015a14:	2800      	cmp	r0, #0
 8015a16:	bfb8      	it	lt
 8015a18:	f04f 36ff 	movlt.w	r6, #4294967295
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	061a      	lsls	r2, r3, #24
 8015a20:	d503      	bpl.n	8015a2a <_fclose_r+0x66>
 8015a22:	6921      	ldr	r1, [r4, #16]
 8015a24:	4628      	mov	r0, r5
 8015a26:	f7fd fd5f 	bl	80134e8 <_free_r>
 8015a2a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015a2c:	b141      	cbz	r1, 8015a40 <_fclose_r+0x7c>
 8015a2e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8015a32:	4299      	cmp	r1, r3
 8015a34:	d002      	beq.n	8015a3c <_fclose_r+0x78>
 8015a36:	4628      	mov	r0, r5
 8015a38:	f7fd fd56 	bl	80134e8 <_free_r>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015a42:	b121      	cbz	r1, 8015a4e <_fclose_r+0x8a>
 8015a44:	4628      	mov	r0, r5
 8015a46:	f7fd fd4f 	bl	80134e8 <_free_r>
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	6463      	str	r3, [r4, #68]	@ 0x44
 8015a4e:	f7fd fb75 	bl	801313c <__sfp_lock_acquire>
 8015a52:	2300      	movs	r3, #0
 8015a54:	81a3      	strh	r3, [r4, #12]
 8015a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a58:	07db      	lsls	r3, r3, #31
 8015a5a:	d402      	bmi.n	8015a62 <_fclose_r+0x9e>
 8015a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a5e:	f7fd fcce 	bl	80133fe <__retarget_lock_release_recursive>
 8015a62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a64:	f7fd fcc9 	bl	80133fa <__retarget_lock_close_recursive>
 8015a68:	f7fd fb6e 	bl	8013148 <__sfp_lock_release>
 8015a6c:	e7c6      	b.n	80159fc <_fclose_r+0x38>
	...

08015a70 <__sflush_r>:
 8015a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a74:	4605      	mov	r5, r0
 8015a76:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8015a7a:	0706      	lsls	r6, r0, #28
 8015a7c:	460c      	mov	r4, r1
 8015a7e:	d457      	bmi.n	8015b30 <__sflush_r+0xc0>
 8015a80:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8015a84:	818b      	strh	r3, [r1, #12]
 8015a86:	684b      	ldr	r3, [r1, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	dc02      	bgt.n	8015a92 <__sflush_r+0x22>
 8015a8c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	dd4c      	ble.n	8015b2c <__sflush_r+0xbc>
 8015a92:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015a94:	2e00      	cmp	r6, #0
 8015a96:	d049      	beq.n	8015b2c <__sflush_r+0xbc>
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8015a9e:	682f      	ldr	r7, [r5, #0]
 8015aa0:	69e1      	ldr	r1, [r4, #28]
 8015aa2:	602b      	str	r3, [r5, #0]
 8015aa4:	d034      	beq.n	8015b10 <__sflush_r+0xa0>
 8015aa6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8015aa8:	89a3      	ldrh	r3, [r4, #12]
 8015aaa:	0759      	lsls	r1, r3, #29
 8015aac:	d505      	bpl.n	8015aba <__sflush_r+0x4a>
 8015aae:	6863      	ldr	r3, [r4, #4]
 8015ab0:	1ad2      	subs	r2, r2, r3
 8015ab2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ab4:	b10b      	cbz	r3, 8015aba <__sflush_r+0x4a>
 8015ab6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015ab8:	1ad2      	subs	r2, r2, r3
 8015aba:	2300      	movs	r3, #0
 8015abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015abe:	69e1      	ldr	r1, [r4, #28]
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	47b0      	blx	r6
 8015ac4:	1c43      	adds	r3, r0, #1
 8015ac6:	d106      	bne.n	8015ad6 <__sflush_r+0x66>
 8015ac8:	682a      	ldr	r2, [r5, #0]
 8015aca:	2a1d      	cmp	r2, #29
 8015acc:	d848      	bhi.n	8015b60 <__sflush_r+0xf0>
 8015ace:	4b2b      	ldr	r3, [pc, #172]	@ (8015b7c <__sflush_r+0x10c>)
 8015ad0:	4113      	asrs	r3, r2
 8015ad2:	07de      	lsls	r6, r3, #31
 8015ad4:	d444      	bmi.n	8015b60 <__sflush_r+0xf0>
 8015ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ada:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8015ade:	81a2      	strh	r2, [r4, #12]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	6062      	str	r2, [r4, #4]
 8015ae4:	04d9      	lsls	r1, r3, #19
 8015ae6:	6922      	ldr	r2, [r4, #16]
 8015ae8:	6022      	str	r2, [r4, #0]
 8015aea:	d504      	bpl.n	8015af6 <__sflush_r+0x86>
 8015aec:	1c42      	adds	r2, r0, #1
 8015aee:	d101      	bne.n	8015af4 <__sflush_r+0x84>
 8015af0:	682b      	ldr	r3, [r5, #0]
 8015af2:	b903      	cbnz	r3, 8015af6 <__sflush_r+0x86>
 8015af4:	6520      	str	r0, [r4, #80]	@ 0x50
 8015af6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015af8:	602f      	str	r7, [r5, #0]
 8015afa:	b1b9      	cbz	r1, 8015b2c <__sflush_r+0xbc>
 8015afc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8015b00:	4299      	cmp	r1, r3
 8015b02:	d002      	beq.n	8015b0a <__sflush_r+0x9a>
 8015b04:	4628      	mov	r0, r5
 8015b06:	f7fd fcef 	bl	80134e8 <_free_r>
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8015b0e:	e00d      	b.n	8015b2c <__sflush_r+0xbc>
 8015b10:	2301      	movs	r3, #1
 8015b12:	4628      	mov	r0, r5
 8015b14:	47b0      	blx	r6
 8015b16:	4602      	mov	r2, r0
 8015b18:	1c50      	adds	r0, r2, #1
 8015b1a:	d1c5      	bne.n	8015aa8 <__sflush_r+0x38>
 8015b1c:	682b      	ldr	r3, [r5, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d0c2      	beq.n	8015aa8 <__sflush_r+0x38>
 8015b22:	2b1d      	cmp	r3, #29
 8015b24:	d001      	beq.n	8015b2a <__sflush_r+0xba>
 8015b26:	2b16      	cmp	r3, #22
 8015b28:	d11a      	bne.n	8015b60 <__sflush_r+0xf0>
 8015b2a:	602f      	str	r7, [r5, #0]
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	e01e      	b.n	8015b6e <__sflush_r+0xfe>
 8015b30:	690f      	ldr	r7, [r1, #16]
 8015b32:	2f00      	cmp	r7, #0
 8015b34:	d0fa      	beq.n	8015b2c <__sflush_r+0xbc>
 8015b36:	0783      	lsls	r3, r0, #30
 8015b38:	680e      	ldr	r6, [r1, #0]
 8015b3a:	bf08      	it	eq
 8015b3c:	694b      	ldreq	r3, [r1, #20]
 8015b3e:	600f      	str	r7, [r1, #0]
 8015b40:	bf18      	it	ne
 8015b42:	2300      	movne	r3, #0
 8015b44:	eba6 0807 	sub.w	r8, r6, r7
 8015b48:	608b      	str	r3, [r1, #8]
 8015b4a:	f1b8 0f00 	cmp.w	r8, #0
 8015b4e:	dded      	ble.n	8015b2c <__sflush_r+0xbc>
 8015b50:	69e1      	ldr	r1, [r4, #28]
 8015b52:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015b54:	4643      	mov	r3, r8
 8015b56:	463a      	mov	r2, r7
 8015b58:	4628      	mov	r0, r5
 8015b5a:	47b0      	blx	r6
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	dc08      	bgt.n	8015b72 <__sflush_r+0x102>
 8015b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b68:	81a3      	strh	r3, [r4, #12]
 8015b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b72:	4407      	add	r7, r0
 8015b74:	eba8 0800 	sub.w	r8, r8, r0
 8015b78:	e7e7      	b.n	8015b4a <__sflush_r+0xda>
 8015b7a:	bf00      	nop
 8015b7c:	dfbffffe 	.word	0xdfbffffe

08015b80 <_fflush_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	460c      	mov	r4, r1
 8015b84:	4605      	mov	r5, r0
 8015b86:	b118      	cbz	r0, 8015b90 <_fflush_r+0x10>
 8015b88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015b8a:	b90b      	cbnz	r3, 8015b90 <_fflush_r+0x10>
 8015b8c:	f7fd fae2 	bl	8013154 <__sinit>
 8015b90:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8015b94:	b1b8      	cbz	r0, 8015bc6 <_fflush_r+0x46>
 8015b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b98:	07db      	lsls	r3, r3, #31
 8015b9a:	d404      	bmi.n	8015ba6 <_fflush_r+0x26>
 8015b9c:	0581      	lsls	r1, r0, #22
 8015b9e:	d402      	bmi.n	8015ba6 <_fflush_r+0x26>
 8015ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ba2:	f7fd fc2b 	bl	80133fc <__retarget_lock_acquire_recursive>
 8015ba6:	4628      	mov	r0, r5
 8015ba8:	4621      	mov	r1, r4
 8015baa:	f7ff ff61 	bl	8015a70 <__sflush_r>
 8015bae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015bb0:	07da      	lsls	r2, r3, #31
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	d405      	bmi.n	8015bc2 <_fflush_r+0x42>
 8015bb6:	89a3      	ldrh	r3, [r4, #12]
 8015bb8:	059b      	lsls	r3, r3, #22
 8015bba:	d402      	bmi.n	8015bc2 <_fflush_r+0x42>
 8015bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015bbe:	f7fd fc1e 	bl	80133fe <__retarget_lock_release_recursive>
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	bd38      	pop	{r3, r4, r5, pc}
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	e7fb      	b.n	8015bc2 <_fflush_r+0x42>
	...

08015bcc <__sfvwrite_r>:
 8015bcc:	6893      	ldr	r3, [r2, #8]
 8015bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	460c      	mov	r4, r1
 8015bd6:	4691      	mov	r9, r2
 8015bd8:	b91b      	cbnz	r3, 8015be2 <__sfvwrite_r+0x16>
 8015bda:	2000      	movs	r0, #0
 8015bdc:	b003      	add	sp, #12
 8015bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be2:	898b      	ldrh	r3, [r1, #12]
 8015be4:	0718      	lsls	r0, r3, #28
 8015be6:	d550      	bpl.n	8015c8a <__sfvwrite_r+0xbe>
 8015be8:	690b      	ldr	r3, [r1, #16]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d04d      	beq.n	8015c8a <__sfvwrite_r+0xbe>
 8015bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bf2:	f8d9 8000 	ldr.w	r8, [r9]
 8015bf6:	f013 0702 	ands.w	r7, r3, #2
 8015bfa:	d16b      	bne.n	8015cd4 <__sfvwrite_r+0x108>
 8015bfc:	f013 0301 	ands.w	r3, r3, #1
 8015c00:	f000 809c 	beq.w	8015d3c <__sfvwrite_r+0x170>
 8015c04:	4638      	mov	r0, r7
 8015c06:	46ba      	mov	sl, r7
 8015c08:	46bb      	mov	fp, r7
 8015c0a:	f1bb 0f00 	cmp.w	fp, #0
 8015c0e:	f000 8103 	beq.w	8015e18 <__sfvwrite_r+0x24c>
 8015c12:	b950      	cbnz	r0, 8015c2a <__sfvwrite_r+0x5e>
 8015c14:	465a      	mov	r2, fp
 8015c16:	210a      	movs	r1, #10
 8015c18:	4650      	mov	r0, sl
 8015c1a:	f7ee fae1 	bl	80041e0 <memchr>
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	f000 8100 	beq.w	8015e24 <__sfvwrite_r+0x258>
 8015c24:	3001      	adds	r0, #1
 8015c26:	eba0 070a 	sub.w	r7, r0, sl
 8015c2a:	6820      	ldr	r0, [r4, #0]
 8015c2c:	6921      	ldr	r1, [r4, #16]
 8015c2e:	68a5      	ldr	r5, [r4, #8]
 8015c30:	6963      	ldr	r3, [r4, #20]
 8015c32:	455f      	cmp	r7, fp
 8015c34:	463a      	mov	r2, r7
 8015c36:	bf28      	it	cs
 8015c38:	465a      	movcs	r2, fp
 8015c3a:	4288      	cmp	r0, r1
 8015c3c:	f240 80f5 	bls.w	8015e2a <__sfvwrite_r+0x25e>
 8015c40:	441d      	add	r5, r3
 8015c42:	42aa      	cmp	r2, r5
 8015c44:	f340 80f1 	ble.w	8015e2a <__sfvwrite_r+0x25e>
 8015c48:	4651      	mov	r1, sl
 8015c4a:	462a      	mov	r2, r5
 8015c4c:	f000 f9ca 	bl	8015fe4 <memmove>
 8015c50:	6823      	ldr	r3, [r4, #0]
 8015c52:	442b      	add	r3, r5
 8015c54:	6023      	str	r3, [r4, #0]
 8015c56:	4621      	mov	r1, r4
 8015c58:	4630      	mov	r0, r6
 8015c5a:	f7ff ff91 	bl	8015b80 <_fflush_r>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d167      	bne.n	8015d32 <__sfvwrite_r+0x166>
 8015c62:	1b7f      	subs	r7, r7, r5
 8015c64:	f040 80f9 	bne.w	8015e5a <__sfvwrite_r+0x28e>
 8015c68:	4621      	mov	r1, r4
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	f7ff ff88 	bl	8015b80 <_fflush_r>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d15e      	bne.n	8015d32 <__sfvwrite_r+0x166>
 8015c74:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015c78:	1b5b      	subs	r3, r3, r5
 8015c7a:	44aa      	add	sl, r5
 8015c7c:	ebab 0b05 	sub.w	fp, fp, r5
 8015c80:	f8c9 3008 	str.w	r3, [r9, #8]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d1c0      	bne.n	8015c0a <__sfvwrite_r+0x3e>
 8015c88:	e7a7      	b.n	8015bda <__sfvwrite_r+0xe>
 8015c8a:	4621      	mov	r1, r4
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f000 f8e9 	bl	8015e64 <__swsetup_r>
 8015c92:	2800      	cmp	r0, #0
 8015c94:	d0ab      	beq.n	8015bee <__sfvwrite_r+0x22>
 8015c96:	f04f 30ff 	mov.w	r0, #4294967295
 8015c9a:	e79f      	b.n	8015bdc <__sfvwrite_r+0x10>
 8015c9c:	e9d8 a500 	ldrd	sl, r5, [r8]
 8015ca0:	f108 0808 	add.w	r8, r8, #8
 8015ca4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8015ca8:	69e1      	ldr	r1, [r4, #28]
 8015caa:	2d00      	cmp	r5, #0
 8015cac:	d0f6      	beq.n	8015c9c <__sfvwrite_r+0xd0>
 8015cae:	42bd      	cmp	r5, r7
 8015cb0:	462b      	mov	r3, r5
 8015cb2:	4652      	mov	r2, sl
 8015cb4:	bf28      	it	cs
 8015cb6:	463b      	movcs	r3, r7
 8015cb8:	4630      	mov	r0, r6
 8015cba:	47d8      	blx	fp
 8015cbc:	2800      	cmp	r0, #0
 8015cbe:	dd38      	ble.n	8015d32 <__sfvwrite_r+0x166>
 8015cc0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015cc4:	1a1b      	subs	r3, r3, r0
 8015cc6:	4482      	add	sl, r0
 8015cc8:	1a2d      	subs	r5, r5, r0
 8015cca:	f8c9 3008 	str.w	r3, [r9, #8]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1e8      	bne.n	8015ca4 <__sfvwrite_r+0xd8>
 8015cd2:	e782      	b.n	8015bda <__sfvwrite_r+0xe>
 8015cd4:	f04f 0a00 	mov.w	sl, #0
 8015cd8:	4f61      	ldr	r7, [pc, #388]	@ (8015e60 <__sfvwrite_r+0x294>)
 8015cda:	4655      	mov	r5, sl
 8015cdc:	e7e2      	b.n	8015ca4 <__sfvwrite_r+0xd8>
 8015cde:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8015ce2:	f108 0808 	add.w	r8, r8, #8
 8015ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cea:	6820      	ldr	r0, [r4, #0]
 8015cec:	68a2      	ldr	r2, [r4, #8]
 8015cee:	f1ba 0f00 	cmp.w	sl, #0
 8015cf2:	d0f4      	beq.n	8015cde <__sfvwrite_r+0x112>
 8015cf4:	0599      	lsls	r1, r3, #22
 8015cf6:	d563      	bpl.n	8015dc0 <__sfvwrite_r+0x1f4>
 8015cf8:	4552      	cmp	r2, sl
 8015cfa:	d836      	bhi.n	8015d6a <__sfvwrite_r+0x19e>
 8015cfc:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8015d00:	d033      	beq.n	8015d6a <__sfvwrite_r+0x19e>
 8015d02:	6921      	ldr	r1, [r4, #16]
 8015d04:	6965      	ldr	r5, [r4, #20]
 8015d06:	eba0 0b01 	sub.w	fp, r0, r1
 8015d0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d12:	f10b 0201 	add.w	r2, fp, #1
 8015d16:	106d      	asrs	r5, r5, #1
 8015d18:	4452      	add	r2, sl
 8015d1a:	4295      	cmp	r5, r2
 8015d1c:	bf38      	it	cc
 8015d1e:	4615      	movcc	r5, r2
 8015d20:	055b      	lsls	r3, r3, #21
 8015d22:	d53d      	bpl.n	8015da0 <__sfvwrite_r+0x1d4>
 8015d24:	4629      	mov	r1, r5
 8015d26:	4630      	mov	r0, r6
 8015d28:	f7fd fc9e 	bl	8013668 <_malloc_r>
 8015d2c:	b948      	cbnz	r0, 8015d42 <__sfvwrite_r+0x176>
 8015d2e:	230c      	movs	r3, #12
 8015d30:	6033      	str	r3, [r6, #0]
 8015d32:	89a3      	ldrh	r3, [r4, #12]
 8015d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d38:	81a3      	strh	r3, [r4, #12]
 8015d3a:	e7ac      	b.n	8015c96 <__sfvwrite_r+0xca>
 8015d3c:	461f      	mov	r7, r3
 8015d3e:	469a      	mov	sl, r3
 8015d40:	e7d1      	b.n	8015ce6 <__sfvwrite_r+0x11a>
 8015d42:	465a      	mov	r2, fp
 8015d44:	6921      	ldr	r1, [r4, #16]
 8015d46:	9001      	str	r0, [sp, #4]
 8015d48:	f7fd fb5a 	bl	8013400 <memcpy>
 8015d4c:	89a2      	ldrh	r2, [r4, #12]
 8015d4e:	9b01      	ldr	r3, [sp, #4]
 8015d50:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8015d54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8015d58:	81a2      	strh	r2, [r4, #12]
 8015d5a:	6123      	str	r3, [r4, #16]
 8015d5c:	6165      	str	r5, [r4, #20]
 8015d5e:	445b      	add	r3, fp
 8015d60:	eba5 050b 	sub.w	r5, r5, fp
 8015d64:	6023      	str	r3, [r4, #0]
 8015d66:	4652      	mov	r2, sl
 8015d68:	60a5      	str	r5, [r4, #8]
 8015d6a:	4552      	cmp	r2, sl
 8015d6c:	bf28      	it	cs
 8015d6e:	4652      	movcs	r2, sl
 8015d70:	6820      	ldr	r0, [r4, #0]
 8015d72:	9201      	str	r2, [sp, #4]
 8015d74:	4639      	mov	r1, r7
 8015d76:	f000 f935 	bl	8015fe4 <memmove>
 8015d7a:	68a3      	ldr	r3, [r4, #8]
 8015d7c:	9a01      	ldr	r2, [sp, #4]
 8015d7e:	1a9b      	subs	r3, r3, r2
 8015d80:	60a3      	str	r3, [r4, #8]
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	4413      	add	r3, r2
 8015d86:	4655      	mov	r5, sl
 8015d88:	6023      	str	r3, [r4, #0]
 8015d8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015d8e:	1b5b      	subs	r3, r3, r5
 8015d90:	442f      	add	r7, r5
 8015d92:	ebaa 0a05 	sub.w	sl, sl, r5
 8015d96:	f8c9 3008 	str.w	r3, [r9, #8]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d1a3      	bne.n	8015ce6 <__sfvwrite_r+0x11a>
 8015d9e:	e71c      	b.n	8015bda <__sfvwrite_r+0xe>
 8015da0:	462a      	mov	r2, r5
 8015da2:	4630      	mov	r0, r6
 8015da4:	f001 fb76 	bl	8017494 <_realloc_r>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2800      	cmp	r0, #0
 8015dac:	d1d5      	bne.n	8015d5a <__sfvwrite_r+0x18e>
 8015dae:	6921      	ldr	r1, [r4, #16]
 8015db0:	4630      	mov	r0, r6
 8015db2:	f7fd fb99 	bl	80134e8 <_free_r>
 8015db6:	89a3      	ldrh	r3, [r4, #12]
 8015db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015dbc:	81a3      	strh	r3, [r4, #12]
 8015dbe:	e7b6      	b.n	8015d2e <__sfvwrite_r+0x162>
 8015dc0:	6923      	ldr	r3, [r4, #16]
 8015dc2:	4283      	cmp	r3, r0
 8015dc4:	d302      	bcc.n	8015dcc <__sfvwrite_r+0x200>
 8015dc6:	6961      	ldr	r1, [r4, #20]
 8015dc8:	4551      	cmp	r1, sl
 8015dca:	d915      	bls.n	8015df8 <__sfvwrite_r+0x22c>
 8015dcc:	4552      	cmp	r2, sl
 8015dce:	bf28      	it	cs
 8015dd0:	4652      	movcs	r2, sl
 8015dd2:	4639      	mov	r1, r7
 8015dd4:	4615      	mov	r5, r2
 8015dd6:	f000 f905 	bl	8015fe4 <memmove>
 8015dda:	68a3      	ldr	r3, [r4, #8]
 8015ddc:	6822      	ldr	r2, [r4, #0]
 8015dde:	1b5b      	subs	r3, r3, r5
 8015de0:	442a      	add	r2, r5
 8015de2:	60a3      	str	r3, [r4, #8]
 8015de4:	6022      	str	r2, [r4, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d1cf      	bne.n	8015d8a <__sfvwrite_r+0x1be>
 8015dea:	4621      	mov	r1, r4
 8015dec:	4630      	mov	r0, r6
 8015dee:	f7ff fec7 	bl	8015b80 <_fflush_r>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d0c9      	beq.n	8015d8a <__sfvwrite_r+0x1be>
 8015df6:	e79c      	b.n	8015d32 <__sfvwrite_r+0x166>
 8015df8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015dfc:	4553      	cmp	r3, sl
 8015dfe:	bf28      	it	cs
 8015e00:	4653      	movcs	r3, sl
 8015e02:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8015e04:	fb93 f3f1 	sdiv	r3, r3, r1
 8015e08:	463a      	mov	r2, r7
 8015e0a:	434b      	muls	r3, r1
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	69e1      	ldr	r1, [r4, #28]
 8015e10:	47a8      	blx	r5
 8015e12:	1e05      	subs	r5, r0, #0
 8015e14:	dcb9      	bgt.n	8015d8a <__sfvwrite_r+0x1be>
 8015e16:	e78c      	b.n	8015d32 <__sfvwrite_r+0x166>
 8015e18:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8015e1c:	2000      	movs	r0, #0
 8015e1e:	f108 0808 	add.w	r8, r8, #8
 8015e22:	e6f2      	b.n	8015c0a <__sfvwrite_r+0x3e>
 8015e24:	f10b 0701 	add.w	r7, fp, #1
 8015e28:	e6ff      	b.n	8015c2a <__sfvwrite_r+0x5e>
 8015e2a:	4293      	cmp	r3, r2
 8015e2c:	dc08      	bgt.n	8015e40 <__sfvwrite_r+0x274>
 8015e2e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8015e30:	69e1      	ldr	r1, [r4, #28]
 8015e32:	4652      	mov	r2, sl
 8015e34:	4630      	mov	r0, r6
 8015e36:	47a8      	blx	r5
 8015e38:	1e05      	subs	r5, r0, #0
 8015e3a:	f73f af12 	bgt.w	8015c62 <__sfvwrite_r+0x96>
 8015e3e:	e778      	b.n	8015d32 <__sfvwrite_r+0x166>
 8015e40:	4651      	mov	r1, sl
 8015e42:	9201      	str	r2, [sp, #4]
 8015e44:	f000 f8ce 	bl	8015fe4 <memmove>
 8015e48:	9a01      	ldr	r2, [sp, #4]
 8015e4a:	68a3      	ldr	r3, [r4, #8]
 8015e4c:	1a9b      	subs	r3, r3, r2
 8015e4e:	60a3      	str	r3, [r4, #8]
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	4413      	add	r3, r2
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	4615      	mov	r5, r2
 8015e58:	e703      	b.n	8015c62 <__sfvwrite_r+0x96>
 8015e5a:	2001      	movs	r0, #1
 8015e5c:	e70a      	b.n	8015c74 <__sfvwrite_r+0xa8>
 8015e5e:	bf00      	nop
 8015e60:	7ffffc00 	.word	0x7ffffc00

08015e64 <__swsetup_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4b29      	ldr	r3, [pc, #164]	@ (8015f0c <__swsetup_r+0xa8>)
 8015e68:	4605      	mov	r5, r0
 8015e6a:	6818      	ldr	r0, [r3, #0]
 8015e6c:	460c      	mov	r4, r1
 8015e6e:	b118      	cbz	r0, 8015e78 <__swsetup_r+0x14>
 8015e70:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015e72:	b90b      	cbnz	r3, 8015e78 <__swsetup_r+0x14>
 8015e74:	f7fd f96e 	bl	8013154 <__sinit>
 8015e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e7c:	0719      	lsls	r1, r3, #28
 8015e7e:	d422      	bmi.n	8015ec6 <__swsetup_r+0x62>
 8015e80:	06da      	lsls	r2, r3, #27
 8015e82:	d407      	bmi.n	8015e94 <__swsetup_r+0x30>
 8015e84:	2209      	movs	r2, #9
 8015e86:	602a      	str	r2, [r5, #0]
 8015e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e8c:	81a3      	strh	r3, [r4, #12]
 8015e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8015e92:	e033      	b.n	8015efc <__swsetup_r+0x98>
 8015e94:	0758      	lsls	r0, r3, #29
 8015e96:	d512      	bpl.n	8015ebe <__swsetup_r+0x5a>
 8015e98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015e9a:	b141      	cbz	r1, 8015eae <__swsetup_r+0x4a>
 8015e9c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8015ea0:	4299      	cmp	r1, r3
 8015ea2:	d002      	beq.n	8015eaa <__swsetup_r+0x46>
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	f7fd fb1f 	bl	80134e8 <_free_r>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	6323      	str	r3, [r4, #48]	@ 0x30
 8015eae:	89a3      	ldrh	r3, [r4, #12]
 8015eb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015eb4:	81a3      	strh	r3, [r4, #12]
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	6063      	str	r3, [r4, #4]
 8015eba:	6923      	ldr	r3, [r4, #16]
 8015ebc:	6023      	str	r3, [r4, #0]
 8015ebe:	89a3      	ldrh	r3, [r4, #12]
 8015ec0:	f043 0308 	orr.w	r3, r3, #8
 8015ec4:	81a3      	strh	r3, [r4, #12]
 8015ec6:	6923      	ldr	r3, [r4, #16]
 8015ec8:	b94b      	cbnz	r3, 8015ede <__swsetup_r+0x7a>
 8015eca:	89a3      	ldrh	r3, [r4, #12]
 8015ecc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ed4:	d003      	beq.n	8015ede <__swsetup_r+0x7a>
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	4628      	mov	r0, r5
 8015eda:	f001 fccf 	bl	801787c <__smakebuf_r>
 8015ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ee2:	f013 0201 	ands.w	r2, r3, #1
 8015ee6:	d00a      	beq.n	8015efe <__swsetup_r+0x9a>
 8015ee8:	2200      	movs	r2, #0
 8015eea:	60a2      	str	r2, [r4, #8]
 8015eec:	6962      	ldr	r2, [r4, #20]
 8015eee:	4252      	negs	r2, r2
 8015ef0:	61a2      	str	r2, [r4, #24]
 8015ef2:	6922      	ldr	r2, [r4, #16]
 8015ef4:	b942      	cbnz	r2, 8015f08 <__swsetup_r+0xa4>
 8015ef6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015efa:	d1c5      	bne.n	8015e88 <__swsetup_r+0x24>
 8015efc:	bd38      	pop	{r3, r4, r5, pc}
 8015efe:	0799      	lsls	r1, r3, #30
 8015f00:	bf58      	it	pl
 8015f02:	6962      	ldrpl	r2, [r4, #20]
 8015f04:	60a2      	str	r2, [r4, #8]
 8015f06:	e7f4      	b.n	8015ef2 <__swsetup_r+0x8e>
 8015f08:	2000      	movs	r0, #0
 8015f0a:	e7f7      	b.n	8015efc <__swsetup_r+0x98>
 8015f0c:	20000240 	.word	0x20000240

08015f10 <__fputwc>:
 8015f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f14:	4680      	mov	r8, r0
 8015f16:	460f      	mov	r7, r1
 8015f18:	4614      	mov	r4, r2
 8015f1a:	f000 f891 	bl	8016040 <__locale_mb_cur_max>
 8015f1e:	2801      	cmp	r0, #1
 8015f20:	4605      	mov	r5, r0
 8015f22:	d11b      	bne.n	8015f5c <__fputwc+0x4c>
 8015f24:	1e7b      	subs	r3, r7, #1
 8015f26:	2bfe      	cmp	r3, #254	@ 0xfe
 8015f28:	d818      	bhi.n	8015f5c <__fputwc+0x4c>
 8015f2a:	f88d 7004 	strb.w	r7, [sp, #4]
 8015f2e:	2600      	movs	r6, #0
 8015f30:	f10d 0904 	add.w	r9, sp, #4
 8015f34:	42ae      	cmp	r6, r5
 8015f36:	d021      	beq.n	8015f7c <__fputwc+0x6c>
 8015f38:	68a3      	ldr	r3, [r4, #8]
 8015f3a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8015f3e:	3b01      	subs	r3, #1
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	60a3      	str	r3, [r4, #8]
 8015f44:	da04      	bge.n	8015f50 <__fputwc+0x40>
 8015f46:	69a2      	ldr	r2, [r4, #24]
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	db1b      	blt.n	8015f84 <__fputwc+0x74>
 8015f4c:	290a      	cmp	r1, #10
 8015f4e:	d019      	beq.n	8015f84 <__fputwc+0x74>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	1c5a      	adds	r2, r3, #1
 8015f54:	6022      	str	r2, [r4, #0]
 8015f56:	7019      	strb	r1, [r3, #0]
 8015f58:	3601      	adds	r6, #1
 8015f5a:	e7eb      	b.n	8015f34 <__fputwc+0x24>
 8015f5c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8015f60:	463a      	mov	r2, r7
 8015f62:	a901      	add	r1, sp, #4
 8015f64:	4640      	mov	r0, r8
 8015f66:	f001 fc4b 	bl	8017800 <_wcrtomb_r>
 8015f6a:	1c43      	adds	r3, r0, #1
 8015f6c:	4605      	mov	r5, r0
 8015f6e:	d1de      	bne.n	8015f2e <__fputwc+0x1e>
 8015f70:	89a3      	ldrh	r3, [r4, #12]
 8015f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f76:	81a3      	strh	r3, [r4, #12]
 8015f78:	f04f 37ff 	mov.w	r7, #4294967295
 8015f7c:	4638      	mov	r0, r7
 8015f7e:	b003      	add	sp, #12
 8015f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f84:	4622      	mov	r2, r4
 8015f86:	4640      	mov	r0, r8
 8015f88:	f001 fcb4 	bl	80178f4 <__swbuf_r>
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	d1e3      	bne.n	8015f58 <__fputwc+0x48>
 8015f90:	e7f2      	b.n	8015f78 <__fputwc+0x68>

08015f92 <_fputwc_r>:
 8015f92:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8015f94:	07db      	lsls	r3, r3, #31
 8015f96:	b570      	push	{r4, r5, r6, lr}
 8015f98:	4605      	mov	r5, r0
 8015f9a:	460e      	mov	r6, r1
 8015f9c:	4614      	mov	r4, r2
 8015f9e:	d405      	bmi.n	8015fac <_fputwc_r+0x1a>
 8015fa0:	8993      	ldrh	r3, [r2, #12]
 8015fa2:	0598      	lsls	r0, r3, #22
 8015fa4:	d402      	bmi.n	8015fac <_fputwc_r+0x1a>
 8015fa6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8015fa8:	f7fd fa28 	bl	80133fc <__retarget_lock_acquire_recursive>
 8015fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fb0:	0499      	lsls	r1, r3, #18
 8015fb2:	d406      	bmi.n	8015fc2 <_fputwc_r+0x30>
 8015fb4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015fb8:	81a3      	strh	r3, [r4, #12]
 8015fba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015fc0:	6663      	str	r3, [r4, #100]	@ 0x64
 8015fc2:	4622      	mov	r2, r4
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	4631      	mov	r1, r6
 8015fc8:	f7ff ffa2 	bl	8015f10 <__fputwc>
 8015fcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015fce:	07da      	lsls	r2, r3, #31
 8015fd0:	4605      	mov	r5, r0
 8015fd2:	d405      	bmi.n	8015fe0 <_fputwc_r+0x4e>
 8015fd4:	89a3      	ldrh	r3, [r4, #12]
 8015fd6:	059b      	lsls	r3, r3, #22
 8015fd8:	d402      	bmi.n	8015fe0 <_fputwc_r+0x4e>
 8015fda:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015fdc:	f7fd fa0f 	bl	80133fe <__retarget_lock_release_recursive>
 8015fe0:	4628      	mov	r0, r5
 8015fe2:	bd70      	pop	{r4, r5, r6, pc}

08015fe4 <memmove>:
 8015fe4:	4288      	cmp	r0, r1
 8015fe6:	b510      	push	{r4, lr}
 8015fe8:	eb01 0402 	add.w	r4, r1, r2
 8015fec:	d902      	bls.n	8015ff4 <memmove+0x10>
 8015fee:	4284      	cmp	r4, r0
 8015ff0:	4623      	mov	r3, r4
 8015ff2:	d807      	bhi.n	8016004 <memmove+0x20>
 8015ff4:	1e43      	subs	r3, r0, #1
 8015ff6:	42a1      	cmp	r1, r4
 8015ff8:	d008      	beq.n	801600c <memmove+0x28>
 8015ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016002:	e7f8      	b.n	8015ff6 <memmove+0x12>
 8016004:	4402      	add	r2, r0
 8016006:	4601      	mov	r1, r0
 8016008:	428a      	cmp	r2, r1
 801600a:	d100      	bne.n	801600e <memmove+0x2a>
 801600c:	bd10      	pop	{r4, pc}
 801600e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016016:	e7f7      	b.n	8016008 <memmove+0x24>

08016018 <strncpy>:
 8016018:	b510      	push	{r4, lr}
 801601a:	3901      	subs	r1, #1
 801601c:	4603      	mov	r3, r0
 801601e:	b132      	cbz	r2, 801602e <strncpy+0x16>
 8016020:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016024:	f803 4b01 	strb.w	r4, [r3], #1
 8016028:	3a01      	subs	r2, #1
 801602a:	2c00      	cmp	r4, #0
 801602c:	d1f7      	bne.n	801601e <strncpy+0x6>
 801602e:	441a      	add	r2, r3
 8016030:	2100      	movs	r1, #0
 8016032:	4293      	cmp	r3, r2
 8016034:	d100      	bne.n	8016038 <strncpy+0x20>
 8016036:	bd10      	pop	{r4, pc}
 8016038:	f803 1b01 	strb.w	r1, [r3], #1
 801603c:	e7f9      	b.n	8016032 <strncpy+0x1a>
	...

08016040 <__locale_mb_cur_max>:
 8016040:	4b01      	ldr	r3, [pc, #4]	@ (8016048 <__locale_mb_cur_max+0x8>)
 8016042:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8016046:	4770      	bx	lr
 8016048:	2000077c 	.word	0x2000077c

0801604c <_localeconv_r>:
 801604c:	4800      	ldr	r0, [pc, #0]	@ (8016050 <_localeconv_r+0x4>)
 801604e:	4770      	bx	lr
 8016050:	2000086c 	.word	0x2000086c

08016054 <_sbrk_r>:
 8016054:	b538      	push	{r3, r4, r5, lr}
 8016056:	4d06      	ldr	r5, [pc, #24]	@ (8016070 <_sbrk_r+0x1c>)
 8016058:	2300      	movs	r3, #0
 801605a:	4604      	mov	r4, r0
 801605c:	4608      	mov	r0, r1
 801605e:	602b      	str	r3, [r5, #0]
 8016060:	f7ef fafa 	bl	8005658 <_sbrk>
 8016064:	1c43      	adds	r3, r0, #1
 8016066:	d102      	bne.n	801606e <_sbrk_r+0x1a>
 8016068:	682b      	ldr	r3, [r5, #0]
 801606a:	b103      	cbz	r3, 801606e <_sbrk_r+0x1a>
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	bd38      	pop	{r3, r4, r5, pc}
 8016070:	2000754c 	.word	0x2000754c

08016074 <__libc_fini_array>:
 8016074:	b538      	push	{r3, r4, r5, lr}
 8016076:	4d07      	ldr	r5, [pc, #28]	@ (8016094 <__libc_fini_array+0x20>)
 8016078:	4c07      	ldr	r4, [pc, #28]	@ (8016098 <__libc_fini_array+0x24>)
 801607a:	1b64      	subs	r4, r4, r5
 801607c:	10a4      	asrs	r4, r4, #2
 801607e:	b91c      	cbnz	r4, 8016088 <__libc_fini_array+0x14>
 8016080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016084:	f001 bd5a 	b.w	8017b3c <_fini>
 8016088:	3c01      	subs	r4, #1
 801608a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801608e:	4798      	blx	r3
 8016090:	e7f5      	b.n	801607e <__libc_fini_array+0xa>
 8016092:	bf00      	nop
 8016094:	08018d10 	.word	0x08018d10
 8016098:	08018d14 	.word	0x08018d14

0801609c <sysconf>:
 801609c:	2808      	cmp	r0, #8
 801609e:	b508      	push	{r3, lr}
 80160a0:	d006      	beq.n	80160b0 <sysconf+0x14>
 80160a2:	f7fd f97f 	bl	80133a4 <__errno>
 80160a6:	2316      	movs	r3, #22
 80160a8:	6003      	str	r3, [r0, #0]
 80160aa:	f04f 30ff 	mov.w	r0, #4294967295
 80160ae:	bd08      	pop	{r3, pc}
 80160b0:	2080      	movs	r0, #128	@ 0x80
 80160b2:	e7fc      	b.n	80160ae <sysconf+0x12>

080160b4 <frexp>:
 80160b4:	b570      	push	{r4, r5, r6, lr}
 80160b6:	2100      	movs	r1, #0
 80160b8:	ec55 4b10 	vmov	r4, r5, d0
 80160bc:	6001      	str	r1, [r0, #0]
 80160be:	4915      	ldr	r1, [pc, #84]	@ (8016114 <frexp+0x60>)
 80160c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80160c4:	428a      	cmp	r2, r1
 80160c6:	4606      	mov	r6, r0
 80160c8:	462b      	mov	r3, r5
 80160ca:	d820      	bhi.n	801610e <frexp+0x5a>
 80160cc:	4621      	mov	r1, r4
 80160ce:	4311      	orrs	r1, r2
 80160d0:	d01d      	beq.n	801610e <frexp+0x5a>
 80160d2:	4911      	ldr	r1, [pc, #68]	@ (8016118 <frexp+0x64>)
 80160d4:	4029      	ands	r1, r5
 80160d6:	b961      	cbnz	r1, 80160f2 <frexp+0x3e>
 80160d8:	4b10      	ldr	r3, [pc, #64]	@ (801611c <frexp+0x68>)
 80160da:	2200      	movs	r2, #0
 80160dc:	4620      	mov	r0, r4
 80160de:	4629      	mov	r1, r5
 80160e0:	f7ee fa8a 	bl	80045f8 <__aeabi_dmul>
 80160e4:	460b      	mov	r3, r1
 80160e6:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80160ea:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80160ee:	4604      	mov	r4, r0
 80160f0:	6031      	str	r1, [r6, #0]
 80160f2:	6831      	ldr	r1, [r6, #0]
 80160f4:	1512      	asrs	r2, r2, #20
 80160f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80160fa:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 80160fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016102:	4411      	add	r1, r2
 8016104:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8016108:	6031      	str	r1, [r6, #0]
 801610a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801610e:	ec45 4b10 	vmov	d0, r4, r5
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	7fefffff 	.word	0x7fefffff
 8016118:	7ff00000 	.word	0x7ff00000
 801611c:	43500000 	.word	0x43500000

08016120 <__register_exitproc>:
 8016120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016124:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801619c <__register_exitproc+0x7c>
 8016128:	4606      	mov	r6, r0
 801612a:	f8da 0000 	ldr.w	r0, [sl]
 801612e:	4698      	mov	r8, r3
 8016130:	460f      	mov	r7, r1
 8016132:	4691      	mov	r9, r2
 8016134:	f7fd f962 	bl	80133fc <__retarget_lock_acquire_recursive>
 8016138:	4b16      	ldr	r3, [pc, #88]	@ (8016194 <__register_exitproc+0x74>)
 801613a:	681c      	ldr	r4, [r3, #0]
 801613c:	b90c      	cbnz	r4, 8016142 <__register_exitproc+0x22>
 801613e:	4c16      	ldr	r4, [pc, #88]	@ (8016198 <__register_exitproc+0x78>)
 8016140:	601c      	str	r4, [r3, #0]
 8016142:	6865      	ldr	r5, [r4, #4]
 8016144:	f8da 0000 	ldr.w	r0, [sl]
 8016148:	2d1f      	cmp	r5, #31
 801614a:	dd05      	ble.n	8016158 <__register_exitproc+0x38>
 801614c:	f7fd f957 	bl	80133fe <__retarget_lock_release_recursive>
 8016150:	f04f 30ff 	mov.w	r0, #4294967295
 8016154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016158:	b19e      	cbz	r6, 8016182 <__register_exitproc+0x62>
 801615a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801615e:	2201      	movs	r2, #1
 8016160:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8016164:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8016168:	40aa      	lsls	r2, r5
 801616a:	4313      	orrs	r3, r2
 801616c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8016170:	2e02      	cmp	r6, #2
 8016172:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8016176:	bf02      	ittt	eq
 8016178:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801617c:	4313      	orreq	r3, r2
 801617e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8016182:	1c6b      	adds	r3, r5, #1
 8016184:	3502      	adds	r5, #2
 8016186:	6063      	str	r3, [r4, #4]
 8016188:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801618c:	f7fd f937 	bl	80133fe <__retarget_lock_release_recursive>
 8016190:	2000      	movs	r0, #0
 8016192:	e7df      	b.n	8016154 <__register_exitproc+0x34>
 8016194:	20007554 	.word	0x20007554
 8016198:	2000758c 	.word	0x2000758c
 801619c:	20000368 	.word	0x20000368

080161a0 <quorem>:
 80161a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a4:	6903      	ldr	r3, [r0, #16]
 80161a6:	690c      	ldr	r4, [r1, #16]
 80161a8:	42a3      	cmp	r3, r4
 80161aa:	4607      	mov	r7, r0
 80161ac:	db7e      	blt.n	80162ac <quorem+0x10c>
 80161ae:	3c01      	subs	r4, #1
 80161b0:	f101 0814 	add.w	r8, r1, #20
 80161b4:	00a3      	lsls	r3, r4, #2
 80161b6:	f100 0514 	add.w	r5, r0, #20
 80161ba:	9300      	str	r3, [sp, #0]
 80161bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80161c0:	9301      	str	r3, [sp, #4]
 80161c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80161c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80161ca:	3301      	adds	r3, #1
 80161cc:	429a      	cmp	r2, r3
 80161ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80161d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80161d6:	d32e      	bcc.n	8016236 <quorem+0x96>
 80161d8:	f04f 0a00 	mov.w	sl, #0
 80161dc:	46c4      	mov	ip, r8
 80161de:	46ae      	mov	lr, r5
 80161e0:	46d3      	mov	fp, sl
 80161e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80161e6:	b298      	uxth	r0, r3
 80161e8:	fb06 a000 	mla	r0, r6, r0, sl
 80161ec:	0c02      	lsrs	r2, r0, #16
 80161ee:	0c1b      	lsrs	r3, r3, #16
 80161f0:	fb06 2303 	mla	r3, r6, r3, r2
 80161f4:	f8de 2000 	ldr.w	r2, [lr]
 80161f8:	b280      	uxth	r0, r0
 80161fa:	b292      	uxth	r2, r2
 80161fc:	1a12      	subs	r2, r2, r0
 80161fe:	445a      	add	r2, fp
 8016200:	f8de 0000 	ldr.w	r0, [lr]
 8016204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016208:	b29b      	uxth	r3, r3
 801620a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801620e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8016212:	b292      	uxth	r2, r2
 8016214:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016218:	45e1      	cmp	r9, ip
 801621a:	f84e 2b04 	str.w	r2, [lr], #4
 801621e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8016222:	d2de      	bcs.n	80161e2 <quorem+0x42>
 8016224:	9b00      	ldr	r3, [sp, #0]
 8016226:	58eb      	ldr	r3, [r5, r3]
 8016228:	b92b      	cbnz	r3, 8016236 <quorem+0x96>
 801622a:	9b01      	ldr	r3, [sp, #4]
 801622c:	3b04      	subs	r3, #4
 801622e:	429d      	cmp	r5, r3
 8016230:	461a      	mov	r2, r3
 8016232:	d32f      	bcc.n	8016294 <quorem+0xf4>
 8016234:	613c      	str	r4, [r7, #16]
 8016236:	4638      	mov	r0, r7
 8016238:	f001 f824 	bl	8017284 <__mcmp>
 801623c:	2800      	cmp	r0, #0
 801623e:	db25      	blt.n	801628c <quorem+0xec>
 8016240:	4629      	mov	r1, r5
 8016242:	2000      	movs	r0, #0
 8016244:	f858 2b04 	ldr.w	r2, [r8], #4
 8016248:	f8d1 c000 	ldr.w	ip, [r1]
 801624c:	fa1f fe82 	uxth.w	lr, r2
 8016250:	fa1f f38c 	uxth.w	r3, ip
 8016254:	eba3 030e 	sub.w	r3, r3, lr
 8016258:	4403      	add	r3, r0
 801625a:	0c12      	lsrs	r2, r2, #16
 801625c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8016260:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8016264:	b29b      	uxth	r3, r3
 8016266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801626a:	45c1      	cmp	r9, r8
 801626c:	f841 3b04 	str.w	r3, [r1], #4
 8016270:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016274:	d2e6      	bcs.n	8016244 <quorem+0xa4>
 8016276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801627a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801627e:	b922      	cbnz	r2, 801628a <quorem+0xea>
 8016280:	3b04      	subs	r3, #4
 8016282:	429d      	cmp	r5, r3
 8016284:	461a      	mov	r2, r3
 8016286:	d30b      	bcc.n	80162a0 <quorem+0x100>
 8016288:	613c      	str	r4, [r7, #16]
 801628a:	3601      	adds	r6, #1
 801628c:	4630      	mov	r0, r6
 801628e:	b003      	add	sp, #12
 8016290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016294:	6812      	ldr	r2, [r2, #0]
 8016296:	3b04      	subs	r3, #4
 8016298:	2a00      	cmp	r2, #0
 801629a:	d1cb      	bne.n	8016234 <quorem+0x94>
 801629c:	3c01      	subs	r4, #1
 801629e:	e7c6      	b.n	801622e <quorem+0x8e>
 80162a0:	6812      	ldr	r2, [r2, #0]
 80162a2:	3b04      	subs	r3, #4
 80162a4:	2a00      	cmp	r2, #0
 80162a6:	d1ef      	bne.n	8016288 <quorem+0xe8>
 80162a8:	3c01      	subs	r4, #1
 80162aa:	e7ea      	b.n	8016282 <quorem+0xe2>
 80162ac:	2000      	movs	r0, #0
 80162ae:	e7ee      	b.n	801628e <quorem+0xee>

080162b0 <_dtoa_r>:
 80162b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162b4:	b099      	sub	sp, #100	@ 0x64
 80162b6:	ed8d 0b02 	vstr	d0, [sp, #8]
 80162ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80162bc:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80162be:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80162c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80162c2:	ec55 4b10 	vmov	r4, r5, d0
 80162c6:	4683      	mov	fp, r0
 80162c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80162ca:	b149      	cbz	r1, 80162e0 <_dtoa_r+0x30>
 80162cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80162ce:	604a      	str	r2, [r1, #4]
 80162d0:	2301      	movs	r3, #1
 80162d2:	4093      	lsls	r3, r2
 80162d4:	608b      	str	r3, [r1, #8]
 80162d6:	f000 fdce 	bl	8016e76 <_Bfree>
 80162da:	2300      	movs	r3, #0
 80162dc:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 80162e0:	1e2b      	subs	r3, r5, #0
 80162e2:	bfb9      	ittee	lt
 80162e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80162e8:	9303      	strlt	r3, [sp, #12]
 80162ea:	2300      	movge	r3, #0
 80162ec:	6033      	strge	r3, [r6, #0]
 80162ee:	9f03      	ldr	r7, [sp, #12]
 80162f0:	4b97      	ldr	r3, [pc, #604]	@ (8016550 <_dtoa_r+0x2a0>)
 80162f2:	bfbc      	itt	lt
 80162f4:	2201      	movlt	r2, #1
 80162f6:	6032      	strlt	r2, [r6, #0]
 80162f8:	43bb      	bics	r3, r7
 80162fa:	d114      	bne.n	8016326 <_dtoa_r+0x76>
 80162fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80162fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016302:	6013      	str	r3, [r2, #0]
 8016304:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016308:	4323      	orrs	r3, r4
 801630a:	f000 854c 	beq.w	8016da6 <_dtoa_r+0xaf6>
 801630e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016310:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8016568 <_dtoa_r+0x2b8>
 8016314:	b11b      	cbz	r3, 801631e <_dtoa_r+0x6e>
 8016316:	f10a 0303 	add.w	r3, sl, #3
 801631a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	4650      	mov	r0, sl
 8016320:	b019      	add	sp, #100	@ 0x64
 8016322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016326:	ed9d 7b02 	vldr	d7, [sp, #8]
 801632a:	2200      	movs	r2, #0
 801632c:	ec51 0b17 	vmov	r0, r1, d7
 8016330:	2300      	movs	r3, #0
 8016332:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8016336:	f7ee fbc7 	bl	8004ac8 <__aeabi_dcmpeq>
 801633a:	4680      	mov	r8, r0
 801633c:	b150      	cbz	r0, 8016354 <_dtoa_r+0xa4>
 801633e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016340:	2301      	movs	r3, #1
 8016342:	6013      	str	r3, [r2, #0]
 8016344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016346:	b113      	cbz	r3, 801634e <_dtoa_r+0x9e>
 8016348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801634a:	4b82      	ldr	r3, [pc, #520]	@ (8016554 <_dtoa_r+0x2a4>)
 801634c:	6013      	str	r3, [r2, #0]
 801634e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801656c <_dtoa_r+0x2bc>
 8016352:	e7e4      	b.n	801631e <_dtoa_r+0x6e>
 8016354:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016358:	aa16      	add	r2, sp, #88	@ 0x58
 801635a:	a917      	add	r1, sp, #92	@ 0x5c
 801635c:	4658      	mov	r0, fp
 801635e:	f001 f841 	bl	80173e4 <__d2b>
 8016362:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8016366:	4681      	mov	r9, r0
 8016368:	2e00      	cmp	r6, #0
 801636a:	d077      	beq.n	801645c <_dtoa_r+0x1ac>
 801636c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801636e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8016372:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801637a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801637e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8016382:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8016386:	4619      	mov	r1, r3
 8016388:	2200      	movs	r2, #0
 801638a:	4b73      	ldr	r3, [pc, #460]	@ (8016558 <_dtoa_r+0x2a8>)
 801638c:	f7ed ff7c 	bl	8004288 <__aeabi_dsub>
 8016390:	a369      	add	r3, pc, #420	@ (adr r3, 8016538 <_dtoa_r+0x288>)
 8016392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016396:	f7ee f92f 	bl	80045f8 <__aeabi_dmul>
 801639a:	a369      	add	r3, pc, #420	@ (adr r3, 8016540 <_dtoa_r+0x290>)
 801639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a0:	f7ed ff74 	bl	800428c <__adddf3>
 80163a4:	4604      	mov	r4, r0
 80163a6:	4630      	mov	r0, r6
 80163a8:	460d      	mov	r5, r1
 80163aa:	f7ee f8bb 	bl	8004524 <__aeabi_i2d>
 80163ae:	a366      	add	r3, pc, #408	@ (adr r3, 8016548 <_dtoa_r+0x298>)
 80163b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b4:	f7ee f920 	bl	80045f8 <__aeabi_dmul>
 80163b8:	4602      	mov	r2, r0
 80163ba:	460b      	mov	r3, r1
 80163bc:	4620      	mov	r0, r4
 80163be:	4629      	mov	r1, r5
 80163c0:	f7ed ff64 	bl	800428c <__adddf3>
 80163c4:	4604      	mov	r4, r0
 80163c6:	460d      	mov	r5, r1
 80163c8:	f7ee fbc6 	bl	8004b58 <__aeabi_d2iz>
 80163cc:	2200      	movs	r2, #0
 80163ce:	4607      	mov	r7, r0
 80163d0:	2300      	movs	r3, #0
 80163d2:	4620      	mov	r0, r4
 80163d4:	4629      	mov	r1, r5
 80163d6:	f7ee fb81 	bl	8004adc <__aeabi_dcmplt>
 80163da:	b140      	cbz	r0, 80163ee <_dtoa_r+0x13e>
 80163dc:	4638      	mov	r0, r7
 80163de:	f7ee f8a1 	bl	8004524 <__aeabi_i2d>
 80163e2:	4622      	mov	r2, r4
 80163e4:	462b      	mov	r3, r5
 80163e6:	f7ee fb6f 	bl	8004ac8 <__aeabi_dcmpeq>
 80163ea:	b900      	cbnz	r0, 80163ee <_dtoa_r+0x13e>
 80163ec:	3f01      	subs	r7, #1
 80163ee:	2f16      	cmp	r7, #22
 80163f0:	d851      	bhi.n	8016496 <_dtoa_r+0x1e6>
 80163f2:	4b5a      	ldr	r3, [pc, #360]	@ (801655c <_dtoa_r+0x2ac>)
 80163f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80163f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016400:	f7ee fb6c 	bl	8004adc <__aeabi_dcmplt>
 8016404:	2800      	cmp	r0, #0
 8016406:	d048      	beq.n	801649a <_dtoa_r+0x1ea>
 8016408:	3f01      	subs	r7, #1
 801640a:	2300      	movs	r3, #0
 801640c:	9312      	str	r3, [sp, #72]	@ 0x48
 801640e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016410:	1b9b      	subs	r3, r3, r6
 8016412:	1e5a      	subs	r2, r3, #1
 8016414:	bf44      	itt	mi
 8016416:	f1c3 0801 	rsbmi	r8, r3, #1
 801641a:	2300      	movmi	r3, #0
 801641c:	9208      	str	r2, [sp, #32]
 801641e:	bf54      	ite	pl
 8016420:	f04f 0800 	movpl.w	r8, #0
 8016424:	9308      	strmi	r3, [sp, #32]
 8016426:	2f00      	cmp	r7, #0
 8016428:	db39      	blt.n	801649e <_dtoa_r+0x1ee>
 801642a:	9b08      	ldr	r3, [sp, #32]
 801642c:	970f      	str	r7, [sp, #60]	@ 0x3c
 801642e:	443b      	add	r3, r7
 8016430:	9308      	str	r3, [sp, #32]
 8016432:	2300      	movs	r3, #0
 8016434:	930a      	str	r3, [sp, #40]	@ 0x28
 8016436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016438:	2b09      	cmp	r3, #9
 801643a:	d865      	bhi.n	8016508 <_dtoa_r+0x258>
 801643c:	2b05      	cmp	r3, #5
 801643e:	bfc4      	itt	gt
 8016440:	3b04      	subgt	r3, #4
 8016442:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8016444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016446:	f1a3 0302 	sub.w	r3, r3, #2
 801644a:	bfcc      	ite	gt
 801644c:	2400      	movgt	r4, #0
 801644e:	2401      	movle	r4, #1
 8016450:	2b03      	cmp	r3, #3
 8016452:	d864      	bhi.n	801651e <_dtoa_r+0x26e>
 8016454:	e8df f003 	tbb	[pc, r3]
 8016458:	5635372a 	.word	0x5635372a
 801645c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8016460:	441e      	add	r6, r3
 8016462:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8016466:	2b20      	cmp	r3, #32
 8016468:	bfc1      	itttt	gt
 801646a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801646e:	409f      	lslgt	r7, r3
 8016470:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8016474:	fa24 f303 	lsrgt.w	r3, r4, r3
 8016478:	bfd6      	itet	le
 801647a:	f1c3 0320 	rsble	r3, r3, #32
 801647e:	ea47 0003 	orrgt.w	r0, r7, r3
 8016482:	fa04 f003 	lslle.w	r0, r4, r3
 8016486:	f7ee f83d 	bl	8004504 <__aeabi_ui2d>
 801648a:	2201      	movs	r2, #1
 801648c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8016490:	3e01      	subs	r6, #1
 8016492:	9214      	str	r2, [sp, #80]	@ 0x50
 8016494:	e777      	b.n	8016386 <_dtoa_r+0xd6>
 8016496:	2301      	movs	r3, #1
 8016498:	e7b8      	b.n	801640c <_dtoa_r+0x15c>
 801649a:	9012      	str	r0, [sp, #72]	@ 0x48
 801649c:	e7b7      	b.n	801640e <_dtoa_r+0x15e>
 801649e:	427b      	negs	r3, r7
 80164a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80164a2:	2300      	movs	r3, #0
 80164a4:	eba8 0807 	sub.w	r8, r8, r7
 80164a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80164aa:	e7c4      	b.n	8016436 <_dtoa_r+0x186>
 80164ac:	2300      	movs	r3, #0
 80164ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	dc36      	bgt.n	8016524 <_dtoa_r+0x274>
 80164b6:	2301      	movs	r3, #1
 80164b8:	9300      	str	r3, [sp, #0]
 80164ba:	9307      	str	r3, [sp, #28]
 80164bc:	461a      	mov	r2, r3
 80164be:	920e      	str	r2, [sp, #56]	@ 0x38
 80164c0:	e00b      	b.n	80164da <_dtoa_r+0x22a>
 80164c2:	2301      	movs	r3, #1
 80164c4:	e7f3      	b.n	80164ae <_dtoa_r+0x1fe>
 80164c6:	2300      	movs	r3, #0
 80164c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80164ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164cc:	18fb      	adds	r3, r7, r3
 80164ce:	9300      	str	r3, [sp, #0]
 80164d0:	3301      	adds	r3, #1
 80164d2:	2b01      	cmp	r3, #1
 80164d4:	9307      	str	r3, [sp, #28]
 80164d6:	bfb8      	it	lt
 80164d8:	2301      	movlt	r3, #1
 80164da:	2100      	movs	r1, #0
 80164dc:	2204      	movs	r2, #4
 80164de:	f102 0014 	add.w	r0, r2, #20
 80164e2:	4298      	cmp	r0, r3
 80164e4:	d922      	bls.n	801652c <_dtoa_r+0x27c>
 80164e6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 80164ea:	4658      	mov	r0, fp
 80164ec:	f000 fc9e 	bl	8016e2c <_Balloc>
 80164f0:	4682      	mov	sl, r0
 80164f2:	2800      	cmp	r0, #0
 80164f4:	d13c      	bne.n	8016570 <_dtoa_r+0x2c0>
 80164f6:	4b1a      	ldr	r3, [pc, #104]	@ (8016560 <_dtoa_r+0x2b0>)
 80164f8:	4602      	mov	r2, r0
 80164fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80164fe:	4819      	ldr	r0, [pc, #100]	@ (8016564 <_dtoa_r+0x2b4>)
 8016500:	f001 fa64 	bl	80179cc <__assert_func>
 8016504:	2301      	movs	r3, #1
 8016506:	e7df      	b.n	80164c8 <_dtoa_r+0x218>
 8016508:	2401      	movs	r4, #1
 801650a:	2300      	movs	r3, #0
 801650c:	9309      	str	r3, [sp, #36]	@ 0x24
 801650e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016510:	f04f 33ff 	mov.w	r3, #4294967295
 8016514:	9300      	str	r3, [sp, #0]
 8016516:	9307      	str	r3, [sp, #28]
 8016518:	2200      	movs	r2, #0
 801651a:	2312      	movs	r3, #18
 801651c:	e7cf      	b.n	80164be <_dtoa_r+0x20e>
 801651e:	2301      	movs	r3, #1
 8016520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016522:	e7f5      	b.n	8016510 <_dtoa_r+0x260>
 8016524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	9307      	str	r3, [sp, #28]
 801652a:	e7d6      	b.n	80164da <_dtoa_r+0x22a>
 801652c:	3101      	adds	r1, #1
 801652e:	0052      	lsls	r2, r2, #1
 8016530:	e7d5      	b.n	80164de <_dtoa_r+0x22e>
 8016532:	bf00      	nop
 8016534:	f3af 8000 	nop.w
 8016538:	636f4361 	.word	0x636f4361
 801653c:	3fd287a7 	.word	0x3fd287a7
 8016540:	8b60c8b3 	.word	0x8b60c8b3
 8016544:	3fc68a28 	.word	0x3fc68a28
 8016548:	509f79fb 	.word	0x509f79fb
 801654c:	3fd34413 	.word	0x3fd34413
 8016550:	7ff00000 	.word	0x7ff00000
 8016554:	080189a3 	.word	0x080189a3
 8016558:	3ff80000 	.word	0x3ff80000
 801655c:	08018af8 	.word	0x08018af8
 8016560:	080189fb 	.word	0x080189fb
 8016564:	08018a0c 	.word	0x08018a0c
 8016568:	080189f7 	.word	0x080189f7
 801656c:	080189a2 	.word	0x080189a2
 8016570:	9b07      	ldr	r3, [sp, #28]
 8016572:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8016576:	2b0e      	cmp	r3, #14
 8016578:	f200 80a4 	bhi.w	80166c4 <_dtoa_r+0x414>
 801657c:	2c00      	cmp	r4, #0
 801657e:	f000 80a1 	beq.w	80166c4 <_dtoa_r+0x414>
 8016582:	2f00      	cmp	r7, #0
 8016584:	dd33      	ble.n	80165ee <_dtoa_r+0x33e>
 8016586:	4bae      	ldr	r3, [pc, #696]	@ (8016840 <_dtoa_r+0x590>)
 8016588:	f007 020f 	and.w	r2, r7, #15
 801658c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016590:	ed93 7b00 	vldr	d7, [r3]
 8016594:	05f8      	lsls	r0, r7, #23
 8016596:	ed8d 7b04 	vstr	d7, [sp, #16]
 801659a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801659e:	d516      	bpl.n	80165ce <_dtoa_r+0x31e>
 80165a0:	4ba8      	ldr	r3, [pc, #672]	@ (8016844 <_dtoa_r+0x594>)
 80165a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80165a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80165aa:	f7ee f94f 	bl	800484c <__aeabi_ddiv>
 80165ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165b2:	f004 040f 	and.w	r4, r4, #15
 80165b6:	2603      	movs	r6, #3
 80165b8:	4da2      	ldr	r5, [pc, #648]	@ (8016844 <_dtoa_r+0x594>)
 80165ba:	b954      	cbnz	r4, 80165d2 <_dtoa_r+0x322>
 80165bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80165c4:	f7ee f942 	bl	800484c <__aeabi_ddiv>
 80165c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80165cc:	e028      	b.n	8016620 <_dtoa_r+0x370>
 80165ce:	2602      	movs	r6, #2
 80165d0:	e7f2      	b.n	80165b8 <_dtoa_r+0x308>
 80165d2:	07e1      	lsls	r1, r4, #31
 80165d4:	d508      	bpl.n	80165e8 <_dtoa_r+0x338>
 80165d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80165da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80165de:	f7ee f80b 	bl	80045f8 <__aeabi_dmul>
 80165e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80165e6:	3601      	adds	r6, #1
 80165e8:	1064      	asrs	r4, r4, #1
 80165ea:	3508      	adds	r5, #8
 80165ec:	e7e5      	b.n	80165ba <_dtoa_r+0x30a>
 80165ee:	f000 80d2 	beq.w	8016796 <_dtoa_r+0x4e6>
 80165f2:	427c      	negs	r4, r7
 80165f4:	4b92      	ldr	r3, [pc, #584]	@ (8016840 <_dtoa_r+0x590>)
 80165f6:	4d93      	ldr	r5, [pc, #588]	@ (8016844 <_dtoa_r+0x594>)
 80165f8:	f004 020f 	and.w	r2, r4, #15
 80165fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016608:	f7ed fff6 	bl	80045f8 <__aeabi_dmul>
 801660c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016610:	1124      	asrs	r4, r4, #4
 8016612:	2300      	movs	r3, #0
 8016614:	2602      	movs	r6, #2
 8016616:	2c00      	cmp	r4, #0
 8016618:	f040 80b2 	bne.w	8016780 <_dtoa_r+0x4d0>
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1d3      	bne.n	80165c8 <_dtoa_r+0x318>
 8016620:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016622:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016626:	2b00      	cmp	r3, #0
 8016628:	f000 80b7 	beq.w	801679a <_dtoa_r+0x4ea>
 801662c:	4b86      	ldr	r3, [pc, #536]	@ (8016848 <_dtoa_r+0x598>)
 801662e:	2200      	movs	r2, #0
 8016630:	4620      	mov	r0, r4
 8016632:	4629      	mov	r1, r5
 8016634:	f7ee fa52 	bl	8004adc <__aeabi_dcmplt>
 8016638:	2800      	cmp	r0, #0
 801663a:	f000 80ae 	beq.w	801679a <_dtoa_r+0x4ea>
 801663e:	9b07      	ldr	r3, [sp, #28]
 8016640:	2b00      	cmp	r3, #0
 8016642:	f000 80aa 	beq.w	801679a <_dtoa_r+0x4ea>
 8016646:	9b00      	ldr	r3, [sp, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	dd37      	ble.n	80166bc <_dtoa_r+0x40c>
 801664c:	1e7b      	subs	r3, r7, #1
 801664e:	9304      	str	r3, [sp, #16]
 8016650:	4620      	mov	r0, r4
 8016652:	4b7e      	ldr	r3, [pc, #504]	@ (801684c <_dtoa_r+0x59c>)
 8016654:	2200      	movs	r2, #0
 8016656:	4629      	mov	r1, r5
 8016658:	f7ed ffce 	bl	80045f8 <__aeabi_dmul>
 801665c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016660:	9c00      	ldr	r4, [sp, #0]
 8016662:	3601      	adds	r6, #1
 8016664:	4630      	mov	r0, r6
 8016666:	f7ed ff5d 	bl	8004524 <__aeabi_i2d>
 801666a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801666e:	f7ed ffc3 	bl	80045f8 <__aeabi_dmul>
 8016672:	4b77      	ldr	r3, [pc, #476]	@ (8016850 <_dtoa_r+0x5a0>)
 8016674:	2200      	movs	r2, #0
 8016676:	f7ed fe09 	bl	800428c <__adddf3>
 801667a:	4605      	mov	r5, r0
 801667c:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8016680:	2c00      	cmp	r4, #0
 8016682:	f040 808d 	bne.w	80167a0 <_dtoa_r+0x4f0>
 8016686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801668a:	4b72      	ldr	r3, [pc, #456]	@ (8016854 <_dtoa_r+0x5a4>)
 801668c:	2200      	movs	r2, #0
 801668e:	f7ed fdfb 	bl	8004288 <__aeabi_dsub>
 8016692:	4602      	mov	r2, r0
 8016694:	460b      	mov	r3, r1
 8016696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801669a:	462a      	mov	r2, r5
 801669c:	4633      	mov	r3, r6
 801669e:	f7ee fa3b 	bl	8004b18 <__aeabi_dcmpgt>
 80166a2:	2800      	cmp	r0, #0
 80166a4:	f040 828c 	bne.w	8016bc0 <_dtoa_r+0x910>
 80166a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80166ac:	462a      	mov	r2, r5
 80166ae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80166b2:	f7ee fa13 	bl	8004adc <__aeabi_dcmplt>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	f040 8129 	bne.w	801690e <_dtoa_r+0x65e>
 80166bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80166c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80166c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	f2c0 815b 	blt.w	8016982 <_dtoa_r+0x6d2>
 80166cc:	2f0e      	cmp	r7, #14
 80166ce:	f300 8158 	bgt.w	8016982 <_dtoa_r+0x6d2>
 80166d2:	4b5b      	ldr	r3, [pc, #364]	@ (8016840 <_dtoa_r+0x590>)
 80166d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80166d8:	ed93 7b00 	vldr	d7, [r3]
 80166dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166de:	2b00      	cmp	r3, #0
 80166e0:	ed8d 7b00 	vstr	d7, [sp]
 80166e4:	da03      	bge.n	80166ee <_dtoa_r+0x43e>
 80166e6:	9b07      	ldr	r3, [sp, #28]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	f340 8102 	ble.w	80168f2 <_dtoa_r+0x642>
 80166ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80166f2:	4656      	mov	r6, sl
 80166f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166f8:	4620      	mov	r0, r4
 80166fa:	4629      	mov	r1, r5
 80166fc:	f7ee f8a6 	bl	800484c <__aeabi_ddiv>
 8016700:	f7ee fa2a 	bl	8004b58 <__aeabi_d2iz>
 8016704:	4680      	mov	r8, r0
 8016706:	f7ed ff0d 	bl	8004524 <__aeabi_i2d>
 801670a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801670e:	f7ed ff73 	bl	80045f8 <__aeabi_dmul>
 8016712:	4602      	mov	r2, r0
 8016714:	460b      	mov	r3, r1
 8016716:	4620      	mov	r0, r4
 8016718:	4629      	mov	r1, r5
 801671a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801671e:	f7ed fdb3 	bl	8004288 <__aeabi_dsub>
 8016722:	f806 4b01 	strb.w	r4, [r6], #1
 8016726:	9d07      	ldr	r5, [sp, #28]
 8016728:	eba6 040a 	sub.w	r4, r6, sl
 801672c:	42a5      	cmp	r5, r4
 801672e:	4602      	mov	r2, r0
 8016730:	460b      	mov	r3, r1
 8016732:	f040 8118 	bne.w	8016966 <_dtoa_r+0x6b6>
 8016736:	f7ed fda9 	bl	800428c <__adddf3>
 801673a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801673e:	4604      	mov	r4, r0
 8016740:	460d      	mov	r5, r1
 8016742:	f7ee f9e9 	bl	8004b18 <__aeabi_dcmpgt>
 8016746:	2800      	cmp	r0, #0
 8016748:	f040 80fa 	bne.w	8016940 <_dtoa_r+0x690>
 801674c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016750:	4620      	mov	r0, r4
 8016752:	4629      	mov	r1, r5
 8016754:	f7ee f9b8 	bl	8004ac8 <__aeabi_dcmpeq>
 8016758:	b118      	cbz	r0, 8016762 <_dtoa_r+0x4b2>
 801675a:	f018 0f01 	tst.w	r8, #1
 801675e:	f040 80ef 	bne.w	8016940 <_dtoa_r+0x690>
 8016762:	4649      	mov	r1, r9
 8016764:	4658      	mov	r0, fp
 8016766:	f000 fb86 	bl	8016e76 <_Bfree>
 801676a:	2300      	movs	r3, #0
 801676c:	7033      	strb	r3, [r6, #0]
 801676e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016770:	3701      	adds	r7, #1
 8016772:	601f      	str	r7, [r3, #0]
 8016774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016776:	2b00      	cmp	r3, #0
 8016778:	f43f add1 	beq.w	801631e <_dtoa_r+0x6e>
 801677c:	601e      	str	r6, [r3, #0]
 801677e:	e5ce      	b.n	801631e <_dtoa_r+0x6e>
 8016780:	07e2      	lsls	r2, r4, #31
 8016782:	d505      	bpl.n	8016790 <_dtoa_r+0x4e0>
 8016784:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016788:	f7ed ff36 	bl	80045f8 <__aeabi_dmul>
 801678c:	3601      	adds	r6, #1
 801678e:	2301      	movs	r3, #1
 8016790:	1064      	asrs	r4, r4, #1
 8016792:	3508      	adds	r5, #8
 8016794:	e73f      	b.n	8016616 <_dtoa_r+0x366>
 8016796:	2602      	movs	r6, #2
 8016798:	e742      	b.n	8016620 <_dtoa_r+0x370>
 801679a:	9c07      	ldr	r4, [sp, #28]
 801679c:	9704      	str	r7, [sp, #16]
 801679e:	e761      	b.n	8016664 <_dtoa_r+0x3b4>
 80167a0:	4b27      	ldr	r3, [pc, #156]	@ (8016840 <_dtoa_r+0x590>)
 80167a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80167a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80167a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80167ac:	4454      	add	r4, sl
 80167ae:	2900      	cmp	r1, #0
 80167b0:	d054      	beq.n	801685c <_dtoa_r+0x5ac>
 80167b2:	4929      	ldr	r1, [pc, #164]	@ (8016858 <_dtoa_r+0x5a8>)
 80167b4:	2000      	movs	r0, #0
 80167b6:	f7ee f849 	bl	800484c <__aeabi_ddiv>
 80167ba:	4633      	mov	r3, r6
 80167bc:	462a      	mov	r2, r5
 80167be:	f7ed fd63 	bl	8004288 <__aeabi_dsub>
 80167c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80167c6:	4656      	mov	r6, sl
 80167c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167cc:	f7ee f9c4 	bl	8004b58 <__aeabi_d2iz>
 80167d0:	4605      	mov	r5, r0
 80167d2:	f7ed fea7 	bl	8004524 <__aeabi_i2d>
 80167d6:	4602      	mov	r2, r0
 80167d8:	460b      	mov	r3, r1
 80167da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167de:	f7ed fd53 	bl	8004288 <__aeabi_dsub>
 80167e2:	3530      	adds	r5, #48	@ 0x30
 80167e4:	4602      	mov	r2, r0
 80167e6:	460b      	mov	r3, r1
 80167e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80167ec:	f806 5b01 	strb.w	r5, [r6], #1
 80167f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80167f4:	f7ee f972 	bl	8004adc <__aeabi_dcmplt>
 80167f8:	2800      	cmp	r0, #0
 80167fa:	d172      	bne.n	80168e2 <_dtoa_r+0x632>
 80167fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016800:	4911      	ldr	r1, [pc, #68]	@ (8016848 <_dtoa_r+0x598>)
 8016802:	2000      	movs	r0, #0
 8016804:	f7ed fd40 	bl	8004288 <__aeabi_dsub>
 8016808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801680c:	f7ee f966 	bl	8004adc <__aeabi_dcmplt>
 8016810:	2800      	cmp	r0, #0
 8016812:	f040 8096 	bne.w	8016942 <_dtoa_r+0x692>
 8016816:	42a6      	cmp	r6, r4
 8016818:	f43f af50 	beq.w	80166bc <_dtoa_r+0x40c>
 801681c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8016820:	4b0a      	ldr	r3, [pc, #40]	@ (801684c <_dtoa_r+0x59c>)
 8016822:	2200      	movs	r2, #0
 8016824:	f7ed fee8 	bl	80045f8 <__aeabi_dmul>
 8016828:	4b08      	ldr	r3, [pc, #32]	@ (801684c <_dtoa_r+0x59c>)
 801682a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801682e:	2200      	movs	r2, #0
 8016830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016834:	f7ed fee0 	bl	80045f8 <__aeabi_dmul>
 8016838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801683c:	e7c4      	b.n	80167c8 <_dtoa_r+0x518>
 801683e:	bf00      	nop
 8016840:	08018af8 	.word	0x08018af8
 8016844:	08018ad0 	.word	0x08018ad0
 8016848:	3ff00000 	.word	0x3ff00000
 801684c:	40240000 	.word	0x40240000
 8016850:	401c0000 	.word	0x401c0000
 8016854:	40140000 	.word	0x40140000
 8016858:	3fe00000 	.word	0x3fe00000
 801685c:	4631      	mov	r1, r6
 801685e:	4628      	mov	r0, r5
 8016860:	f7ed feca 	bl	80045f8 <__aeabi_dmul>
 8016864:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016868:	9415      	str	r4, [sp, #84]	@ 0x54
 801686a:	4656      	mov	r6, sl
 801686c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016870:	f7ee f972 	bl	8004b58 <__aeabi_d2iz>
 8016874:	4605      	mov	r5, r0
 8016876:	f7ed fe55 	bl	8004524 <__aeabi_i2d>
 801687a:	4602      	mov	r2, r0
 801687c:	460b      	mov	r3, r1
 801687e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016882:	f7ed fd01 	bl	8004288 <__aeabi_dsub>
 8016886:	3530      	adds	r5, #48	@ 0x30
 8016888:	f806 5b01 	strb.w	r5, [r6], #1
 801688c:	4602      	mov	r2, r0
 801688e:	460b      	mov	r3, r1
 8016890:	42a6      	cmp	r6, r4
 8016892:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016896:	f04f 0200 	mov.w	r2, #0
 801689a:	d124      	bne.n	80168e6 <_dtoa_r+0x636>
 801689c:	4bac      	ldr	r3, [pc, #688]	@ (8016b50 <_dtoa_r+0x8a0>)
 801689e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80168a2:	f7ed fcf3 	bl	800428c <__adddf3>
 80168a6:	4602      	mov	r2, r0
 80168a8:	460b      	mov	r3, r1
 80168aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168ae:	f7ee f933 	bl	8004b18 <__aeabi_dcmpgt>
 80168b2:	2800      	cmp	r0, #0
 80168b4:	d145      	bne.n	8016942 <_dtoa_r+0x692>
 80168b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80168ba:	49a5      	ldr	r1, [pc, #660]	@ (8016b50 <_dtoa_r+0x8a0>)
 80168bc:	2000      	movs	r0, #0
 80168be:	f7ed fce3 	bl	8004288 <__aeabi_dsub>
 80168c2:	4602      	mov	r2, r0
 80168c4:	460b      	mov	r3, r1
 80168c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168ca:	f7ee f907 	bl	8004adc <__aeabi_dcmplt>
 80168ce:	2800      	cmp	r0, #0
 80168d0:	f43f aef4 	beq.w	80166bc <_dtoa_r+0x40c>
 80168d4:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80168d6:	1e73      	subs	r3, r6, #1
 80168d8:	9315      	str	r3, [sp, #84]	@ 0x54
 80168da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80168de:	2b30      	cmp	r3, #48	@ 0x30
 80168e0:	d0f8      	beq.n	80168d4 <_dtoa_r+0x624>
 80168e2:	9f04      	ldr	r7, [sp, #16]
 80168e4:	e73d      	b.n	8016762 <_dtoa_r+0x4b2>
 80168e6:	4b9b      	ldr	r3, [pc, #620]	@ (8016b54 <_dtoa_r+0x8a4>)
 80168e8:	f7ed fe86 	bl	80045f8 <__aeabi_dmul>
 80168ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80168f0:	e7bc      	b.n	801686c <_dtoa_r+0x5bc>
 80168f2:	d10c      	bne.n	801690e <_dtoa_r+0x65e>
 80168f4:	4b98      	ldr	r3, [pc, #608]	@ (8016b58 <_dtoa_r+0x8a8>)
 80168f6:	2200      	movs	r2, #0
 80168f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168fc:	f7ed fe7c 	bl	80045f8 <__aeabi_dmul>
 8016900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016904:	f7ee f8fe 	bl	8004b04 <__aeabi_dcmpge>
 8016908:	2800      	cmp	r0, #0
 801690a:	f000 8157 	beq.w	8016bbc <_dtoa_r+0x90c>
 801690e:	2400      	movs	r4, #0
 8016910:	4625      	mov	r5, r4
 8016912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016914:	43db      	mvns	r3, r3
 8016916:	9304      	str	r3, [sp, #16]
 8016918:	4656      	mov	r6, sl
 801691a:	2700      	movs	r7, #0
 801691c:	4621      	mov	r1, r4
 801691e:	4658      	mov	r0, fp
 8016920:	f000 faa9 	bl	8016e76 <_Bfree>
 8016924:	2d00      	cmp	r5, #0
 8016926:	d0dc      	beq.n	80168e2 <_dtoa_r+0x632>
 8016928:	b12f      	cbz	r7, 8016936 <_dtoa_r+0x686>
 801692a:	42af      	cmp	r7, r5
 801692c:	d003      	beq.n	8016936 <_dtoa_r+0x686>
 801692e:	4639      	mov	r1, r7
 8016930:	4658      	mov	r0, fp
 8016932:	f000 faa0 	bl	8016e76 <_Bfree>
 8016936:	4629      	mov	r1, r5
 8016938:	4658      	mov	r0, fp
 801693a:	f000 fa9c 	bl	8016e76 <_Bfree>
 801693e:	e7d0      	b.n	80168e2 <_dtoa_r+0x632>
 8016940:	9704      	str	r7, [sp, #16]
 8016942:	4633      	mov	r3, r6
 8016944:	461e      	mov	r6, r3
 8016946:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801694a:	2a39      	cmp	r2, #57	@ 0x39
 801694c:	d107      	bne.n	801695e <_dtoa_r+0x6ae>
 801694e:	459a      	cmp	sl, r3
 8016950:	d1f8      	bne.n	8016944 <_dtoa_r+0x694>
 8016952:	9a04      	ldr	r2, [sp, #16]
 8016954:	3201      	adds	r2, #1
 8016956:	9204      	str	r2, [sp, #16]
 8016958:	2230      	movs	r2, #48	@ 0x30
 801695a:	f88a 2000 	strb.w	r2, [sl]
 801695e:	781a      	ldrb	r2, [r3, #0]
 8016960:	3201      	adds	r2, #1
 8016962:	701a      	strb	r2, [r3, #0]
 8016964:	e7bd      	b.n	80168e2 <_dtoa_r+0x632>
 8016966:	4b7b      	ldr	r3, [pc, #492]	@ (8016b54 <_dtoa_r+0x8a4>)
 8016968:	2200      	movs	r2, #0
 801696a:	f7ed fe45 	bl	80045f8 <__aeabi_dmul>
 801696e:	2200      	movs	r2, #0
 8016970:	2300      	movs	r3, #0
 8016972:	4604      	mov	r4, r0
 8016974:	460d      	mov	r5, r1
 8016976:	f7ee f8a7 	bl	8004ac8 <__aeabi_dcmpeq>
 801697a:	2800      	cmp	r0, #0
 801697c:	f43f aeba 	beq.w	80166f4 <_dtoa_r+0x444>
 8016980:	e6ef      	b.n	8016762 <_dtoa_r+0x4b2>
 8016982:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016984:	2a00      	cmp	r2, #0
 8016986:	f000 80db 	beq.w	8016b40 <_dtoa_r+0x890>
 801698a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801698c:	2a01      	cmp	r2, #1
 801698e:	f300 80bf 	bgt.w	8016b10 <_dtoa_r+0x860>
 8016992:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016994:	2a00      	cmp	r2, #0
 8016996:	f000 80b7 	beq.w	8016b08 <_dtoa_r+0x858>
 801699a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801699e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80169a0:	4646      	mov	r6, r8
 80169a2:	9a08      	ldr	r2, [sp, #32]
 80169a4:	2101      	movs	r1, #1
 80169a6:	441a      	add	r2, r3
 80169a8:	4658      	mov	r0, fp
 80169aa:	4498      	add	r8, r3
 80169ac:	9208      	str	r2, [sp, #32]
 80169ae:	f000 fafd 	bl	8016fac <__i2b>
 80169b2:	4605      	mov	r5, r0
 80169b4:	b15e      	cbz	r6, 80169ce <_dtoa_r+0x71e>
 80169b6:	9b08      	ldr	r3, [sp, #32]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	dd08      	ble.n	80169ce <_dtoa_r+0x71e>
 80169bc:	42b3      	cmp	r3, r6
 80169be:	9a08      	ldr	r2, [sp, #32]
 80169c0:	bfa8      	it	ge
 80169c2:	4633      	movge	r3, r6
 80169c4:	eba8 0803 	sub.w	r8, r8, r3
 80169c8:	1af6      	subs	r6, r6, r3
 80169ca:	1ad3      	subs	r3, r2, r3
 80169cc:	9308      	str	r3, [sp, #32]
 80169ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80169d0:	b1f3      	cbz	r3, 8016a10 <_dtoa_r+0x760>
 80169d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	f000 80b7 	beq.w	8016b48 <_dtoa_r+0x898>
 80169da:	b18c      	cbz	r4, 8016a00 <_dtoa_r+0x750>
 80169dc:	4629      	mov	r1, r5
 80169de:	4622      	mov	r2, r4
 80169e0:	4658      	mov	r0, fp
 80169e2:	f000 fba3 	bl	801712c <__pow5mult>
 80169e6:	464a      	mov	r2, r9
 80169e8:	4601      	mov	r1, r0
 80169ea:	4605      	mov	r5, r0
 80169ec:	4658      	mov	r0, fp
 80169ee:	f000 faf3 	bl	8016fd8 <__multiply>
 80169f2:	4649      	mov	r1, r9
 80169f4:	9004      	str	r0, [sp, #16]
 80169f6:	4658      	mov	r0, fp
 80169f8:	f000 fa3d 	bl	8016e76 <_Bfree>
 80169fc:	9b04      	ldr	r3, [sp, #16]
 80169fe:	4699      	mov	r9, r3
 8016a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016a02:	1b1a      	subs	r2, r3, r4
 8016a04:	d004      	beq.n	8016a10 <_dtoa_r+0x760>
 8016a06:	4649      	mov	r1, r9
 8016a08:	4658      	mov	r0, fp
 8016a0a:	f000 fb8f 	bl	801712c <__pow5mult>
 8016a0e:	4681      	mov	r9, r0
 8016a10:	2101      	movs	r1, #1
 8016a12:	4658      	mov	r0, fp
 8016a14:	f000 faca 	bl	8016fac <__i2b>
 8016a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	f000 81cc 	beq.w	8016dba <_dtoa_r+0xb0a>
 8016a22:	461a      	mov	r2, r3
 8016a24:	4601      	mov	r1, r0
 8016a26:	4658      	mov	r0, fp
 8016a28:	f000 fb80 	bl	801712c <__pow5mult>
 8016a2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	4604      	mov	r4, r0
 8016a32:	f300 8095 	bgt.w	8016b60 <_dtoa_r+0x8b0>
 8016a36:	9b02      	ldr	r3, [sp, #8]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	f040 8087 	bne.w	8016b4c <_dtoa_r+0x89c>
 8016a3e:	9b03      	ldr	r3, [sp, #12]
 8016a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	f040 8089 	bne.w	8016b5c <_dtoa_r+0x8ac>
 8016a4a:	9b03      	ldr	r3, [sp, #12]
 8016a4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016a50:	0d1b      	lsrs	r3, r3, #20
 8016a52:	051b      	lsls	r3, r3, #20
 8016a54:	b12b      	cbz	r3, 8016a62 <_dtoa_r+0x7b2>
 8016a56:	9b08      	ldr	r3, [sp, #32]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	9308      	str	r3, [sp, #32]
 8016a5c:	f108 0801 	add.w	r8, r8, #1
 8016a60:	2301      	movs	r3, #1
 8016a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	f000 81ad 	beq.w	8016dc6 <_dtoa_r+0xb16>
 8016a6c:	6923      	ldr	r3, [r4, #16]
 8016a6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016a72:	6918      	ldr	r0, [r3, #16]
 8016a74:	f000 fa4e 	bl	8016f14 <__hi0bits>
 8016a78:	f1c0 0020 	rsb	r0, r0, #32
 8016a7c:	9b08      	ldr	r3, [sp, #32]
 8016a7e:	4418      	add	r0, r3
 8016a80:	f010 001f 	ands.w	r0, r0, #31
 8016a84:	d077      	beq.n	8016b76 <_dtoa_r+0x8c6>
 8016a86:	f1c0 0320 	rsb	r3, r0, #32
 8016a8a:	2b04      	cmp	r3, #4
 8016a8c:	dd6b      	ble.n	8016b66 <_dtoa_r+0x8b6>
 8016a8e:	9b08      	ldr	r3, [sp, #32]
 8016a90:	f1c0 001c 	rsb	r0, r0, #28
 8016a94:	4403      	add	r3, r0
 8016a96:	4480      	add	r8, r0
 8016a98:	4406      	add	r6, r0
 8016a9a:	9308      	str	r3, [sp, #32]
 8016a9c:	f1b8 0f00 	cmp.w	r8, #0
 8016aa0:	dd05      	ble.n	8016aae <_dtoa_r+0x7fe>
 8016aa2:	4649      	mov	r1, r9
 8016aa4:	4642      	mov	r2, r8
 8016aa6:	4658      	mov	r0, fp
 8016aa8:	f000 fb80 	bl	80171ac <__lshift>
 8016aac:	4681      	mov	r9, r0
 8016aae:	9b08      	ldr	r3, [sp, #32]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	dd05      	ble.n	8016ac0 <_dtoa_r+0x810>
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	461a      	mov	r2, r3
 8016ab8:	4658      	mov	r0, fp
 8016aba:	f000 fb77 	bl	80171ac <__lshift>
 8016abe:	4604      	mov	r4, r0
 8016ac0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d059      	beq.n	8016b7a <_dtoa_r+0x8ca>
 8016ac6:	4621      	mov	r1, r4
 8016ac8:	4648      	mov	r0, r9
 8016aca:	f000 fbdb 	bl	8017284 <__mcmp>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	da53      	bge.n	8016b7a <_dtoa_r+0x8ca>
 8016ad2:	1e7b      	subs	r3, r7, #1
 8016ad4:	9304      	str	r3, [sp, #16]
 8016ad6:	4649      	mov	r1, r9
 8016ad8:	2300      	movs	r3, #0
 8016ada:	220a      	movs	r2, #10
 8016adc:	4658      	mov	r0, fp
 8016ade:	f000 f9d3 	bl	8016e88 <__multadd>
 8016ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ae4:	4681      	mov	r9, r0
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	f000 816f 	beq.w	8016dca <_dtoa_r+0xb1a>
 8016aec:	2300      	movs	r3, #0
 8016aee:	4629      	mov	r1, r5
 8016af0:	220a      	movs	r2, #10
 8016af2:	4658      	mov	r0, fp
 8016af4:	f000 f9c8 	bl	8016e88 <__multadd>
 8016af8:	9b00      	ldr	r3, [sp, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	4605      	mov	r5, r0
 8016afe:	dc67      	bgt.n	8016bd0 <_dtoa_r+0x920>
 8016b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b02:	2b02      	cmp	r3, #2
 8016b04:	dc41      	bgt.n	8016b8a <_dtoa_r+0x8da>
 8016b06:	e063      	b.n	8016bd0 <_dtoa_r+0x920>
 8016b08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016b0a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8016b0e:	e746      	b.n	801699e <_dtoa_r+0x6ee>
 8016b10:	9b07      	ldr	r3, [sp, #28]
 8016b12:	1e5c      	subs	r4, r3, #1
 8016b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b16:	42a3      	cmp	r3, r4
 8016b18:	bfbf      	itttt	lt
 8016b1a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8016b1c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8016b1e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8016b20:	1ae3      	sublt	r3, r4, r3
 8016b22:	bfb4      	ite	lt
 8016b24:	18d2      	addlt	r2, r2, r3
 8016b26:	1b1c      	subge	r4, r3, r4
 8016b28:	9b07      	ldr	r3, [sp, #28]
 8016b2a:	bfbc      	itt	lt
 8016b2c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8016b2e:	2400      	movlt	r4, #0
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	bfb5      	itete	lt
 8016b34:	eba8 0603 	sublt.w	r6, r8, r3
 8016b38:	9b07      	ldrge	r3, [sp, #28]
 8016b3a:	2300      	movlt	r3, #0
 8016b3c:	4646      	movge	r6, r8
 8016b3e:	e730      	b.n	80169a2 <_dtoa_r+0x6f2>
 8016b40:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016b42:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016b44:	4646      	mov	r6, r8
 8016b46:	e735      	b.n	80169b4 <_dtoa_r+0x704>
 8016b48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016b4a:	e75c      	b.n	8016a06 <_dtoa_r+0x756>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	e788      	b.n	8016a62 <_dtoa_r+0x7b2>
 8016b50:	3fe00000 	.word	0x3fe00000
 8016b54:	40240000 	.word	0x40240000
 8016b58:	40140000 	.word	0x40140000
 8016b5c:	9b02      	ldr	r3, [sp, #8]
 8016b5e:	e780      	b.n	8016a62 <_dtoa_r+0x7b2>
 8016b60:	2300      	movs	r3, #0
 8016b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b64:	e782      	b.n	8016a6c <_dtoa_r+0x7bc>
 8016b66:	d099      	beq.n	8016a9c <_dtoa_r+0x7ec>
 8016b68:	9a08      	ldr	r2, [sp, #32]
 8016b6a:	331c      	adds	r3, #28
 8016b6c:	441a      	add	r2, r3
 8016b6e:	4498      	add	r8, r3
 8016b70:	441e      	add	r6, r3
 8016b72:	9208      	str	r2, [sp, #32]
 8016b74:	e792      	b.n	8016a9c <_dtoa_r+0x7ec>
 8016b76:	4603      	mov	r3, r0
 8016b78:	e7f6      	b.n	8016b68 <_dtoa_r+0x8b8>
 8016b7a:	9b07      	ldr	r3, [sp, #28]
 8016b7c:	9704      	str	r7, [sp, #16]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	dc20      	bgt.n	8016bc4 <_dtoa_r+0x914>
 8016b82:	9300      	str	r3, [sp, #0]
 8016b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b86:	2b02      	cmp	r3, #2
 8016b88:	dd1e      	ble.n	8016bc8 <_dtoa_r+0x918>
 8016b8a:	9b00      	ldr	r3, [sp, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	f47f aec0 	bne.w	8016912 <_dtoa_r+0x662>
 8016b92:	4621      	mov	r1, r4
 8016b94:	2205      	movs	r2, #5
 8016b96:	4658      	mov	r0, fp
 8016b98:	f000 f976 	bl	8016e88 <__multadd>
 8016b9c:	4601      	mov	r1, r0
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	4648      	mov	r0, r9
 8016ba2:	f000 fb6f 	bl	8017284 <__mcmp>
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f77f aeb3 	ble.w	8016912 <_dtoa_r+0x662>
 8016bac:	4656      	mov	r6, sl
 8016bae:	2331      	movs	r3, #49	@ 0x31
 8016bb0:	f806 3b01 	strb.w	r3, [r6], #1
 8016bb4:	9b04      	ldr	r3, [sp, #16]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	9304      	str	r3, [sp, #16]
 8016bba:	e6ae      	b.n	801691a <_dtoa_r+0x66a>
 8016bbc:	9c07      	ldr	r4, [sp, #28]
 8016bbe:	9704      	str	r7, [sp, #16]
 8016bc0:	4625      	mov	r5, r4
 8016bc2:	e7f3      	b.n	8016bac <_dtoa_r+0x8fc>
 8016bc4:	9b07      	ldr	r3, [sp, #28]
 8016bc6:	9300      	str	r3, [sp, #0]
 8016bc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	f000 8101 	beq.w	8016dd2 <_dtoa_r+0xb22>
 8016bd0:	2e00      	cmp	r6, #0
 8016bd2:	dd05      	ble.n	8016be0 <_dtoa_r+0x930>
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	4632      	mov	r2, r6
 8016bd8:	4658      	mov	r0, fp
 8016bda:	f000 fae7 	bl	80171ac <__lshift>
 8016bde:	4605      	mov	r5, r0
 8016be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d059      	beq.n	8016c9a <_dtoa_r+0x9ea>
 8016be6:	6869      	ldr	r1, [r5, #4]
 8016be8:	4658      	mov	r0, fp
 8016bea:	f000 f91f 	bl	8016e2c <_Balloc>
 8016bee:	4606      	mov	r6, r0
 8016bf0:	b920      	cbnz	r0, 8016bfc <_dtoa_r+0x94c>
 8016bf2:	4b83      	ldr	r3, [pc, #524]	@ (8016e00 <_dtoa_r+0xb50>)
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016bfa:	e480      	b.n	80164fe <_dtoa_r+0x24e>
 8016bfc:	692a      	ldr	r2, [r5, #16]
 8016bfe:	3202      	adds	r2, #2
 8016c00:	0092      	lsls	r2, r2, #2
 8016c02:	f105 010c 	add.w	r1, r5, #12
 8016c06:	300c      	adds	r0, #12
 8016c08:	f7fc fbfa 	bl	8013400 <memcpy>
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	4631      	mov	r1, r6
 8016c10:	4658      	mov	r0, fp
 8016c12:	f000 facb 	bl	80171ac <__lshift>
 8016c16:	f10a 0301 	add.w	r3, sl, #1
 8016c1a:	9307      	str	r3, [sp, #28]
 8016c1c:	9b00      	ldr	r3, [sp, #0]
 8016c1e:	4453      	add	r3, sl
 8016c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016c22:	9b02      	ldr	r3, [sp, #8]
 8016c24:	f003 0301 	and.w	r3, r3, #1
 8016c28:	462f      	mov	r7, r5
 8016c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	9b07      	ldr	r3, [sp, #28]
 8016c30:	4621      	mov	r1, r4
 8016c32:	3b01      	subs	r3, #1
 8016c34:	4648      	mov	r0, r9
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	f7ff fab2 	bl	80161a0 <quorem>
 8016c3c:	4639      	mov	r1, r7
 8016c3e:	9002      	str	r0, [sp, #8]
 8016c40:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016c44:	4648      	mov	r0, r9
 8016c46:	f000 fb1d 	bl	8017284 <__mcmp>
 8016c4a:	462a      	mov	r2, r5
 8016c4c:	9008      	str	r0, [sp, #32]
 8016c4e:	4621      	mov	r1, r4
 8016c50:	4658      	mov	r0, fp
 8016c52:	f000 fb33 	bl	80172bc <__mdiff>
 8016c56:	68c2      	ldr	r2, [r0, #12]
 8016c58:	4606      	mov	r6, r0
 8016c5a:	bb02      	cbnz	r2, 8016c9e <_dtoa_r+0x9ee>
 8016c5c:	4601      	mov	r1, r0
 8016c5e:	4648      	mov	r0, r9
 8016c60:	f000 fb10 	bl	8017284 <__mcmp>
 8016c64:	4602      	mov	r2, r0
 8016c66:	4631      	mov	r1, r6
 8016c68:	4658      	mov	r0, fp
 8016c6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8016c6c:	f000 f903 	bl	8016e76 <_Bfree>
 8016c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c74:	9e07      	ldr	r6, [sp, #28]
 8016c76:	ea43 0102 	orr.w	r1, r3, r2
 8016c7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c7c:	4319      	orrs	r1, r3
 8016c7e:	d110      	bne.n	8016ca2 <_dtoa_r+0x9f2>
 8016c80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016c84:	d029      	beq.n	8016cda <_dtoa_r+0xa2a>
 8016c86:	9b08      	ldr	r3, [sp, #32]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	dd02      	ble.n	8016c92 <_dtoa_r+0x9e2>
 8016c8c:	9b02      	ldr	r3, [sp, #8]
 8016c8e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016c92:	9b00      	ldr	r3, [sp, #0]
 8016c94:	f883 8000 	strb.w	r8, [r3]
 8016c98:	e640      	b.n	801691c <_dtoa_r+0x66c>
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	e7bb      	b.n	8016c16 <_dtoa_r+0x966>
 8016c9e:	2201      	movs	r2, #1
 8016ca0:	e7e1      	b.n	8016c66 <_dtoa_r+0x9b6>
 8016ca2:	9b08      	ldr	r3, [sp, #32]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	db04      	blt.n	8016cb2 <_dtoa_r+0xa02>
 8016ca8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016caa:	430b      	orrs	r3, r1
 8016cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016cae:	430b      	orrs	r3, r1
 8016cb0:	d120      	bne.n	8016cf4 <_dtoa_r+0xa44>
 8016cb2:	2a00      	cmp	r2, #0
 8016cb4:	dded      	ble.n	8016c92 <_dtoa_r+0x9e2>
 8016cb6:	4649      	mov	r1, r9
 8016cb8:	2201      	movs	r2, #1
 8016cba:	4658      	mov	r0, fp
 8016cbc:	f000 fa76 	bl	80171ac <__lshift>
 8016cc0:	4621      	mov	r1, r4
 8016cc2:	4681      	mov	r9, r0
 8016cc4:	f000 fade 	bl	8017284 <__mcmp>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	dc03      	bgt.n	8016cd4 <_dtoa_r+0xa24>
 8016ccc:	d1e1      	bne.n	8016c92 <_dtoa_r+0x9e2>
 8016cce:	f018 0f01 	tst.w	r8, #1
 8016cd2:	d0de      	beq.n	8016c92 <_dtoa_r+0x9e2>
 8016cd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016cd8:	d1d8      	bne.n	8016c8c <_dtoa_r+0x9dc>
 8016cda:	9a00      	ldr	r2, [sp, #0]
 8016cdc:	2339      	movs	r3, #57	@ 0x39
 8016cde:	7013      	strb	r3, [r2, #0]
 8016ce0:	4633      	mov	r3, r6
 8016ce2:	461e      	mov	r6, r3
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016cea:	2a39      	cmp	r2, #57	@ 0x39
 8016cec:	d052      	beq.n	8016d94 <_dtoa_r+0xae4>
 8016cee:	3201      	adds	r2, #1
 8016cf0:	701a      	strb	r2, [r3, #0]
 8016cf2:	e613      	b.n	801691c <_dtoa_r+0x66c>
 8016cf4:	2a00      	cmp	r2, #0
 8016cf6:	dd07      	ble.n	8016d08 <_dtoa_r+0xa58>
 8016cf8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016cfc:	d0ed      	beq.n	8016cda <_dtoa_r+0xa2a>
 8016cfe:	9a00      	ldr	r2, [sp, #0]
 8016d00:	f108 0301 	add.w	r3, r8, #1
 8016d04:	7013      	strb	r3, [r2, #0]
 8016d06:	e609      	b.n	801691c <_dtoa_r+0x66c>
 8016d08:	9b07      	ldr	r3, [sp, #28]
 8016d0a:	9a07      	ldr	r2, [sp, #28]
 8016d0c:	f803 8c01 	strb.w	r8, [r3, #-1]
 8016d10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d12:	4293      	cmp	r3, r2
 8016d14:	d028      	beq.n	8016d68 <_dtoa_r+0xab8>
 8016d16:	4649      	mov	r1, r9
 8016d18:	2300      	movs	r3, #0
 8016d1a:	220a      	movs	r2, #10
 8016d1c:	4658      	mov	r0, fp
 8016d1e:	f000 f8b3 	bl	8016e88 <__multadd>
 8016d22:	42af      	cmp	r7, r5
 8016d24:	4681      	mov	r9, r0
 8016d26:	f04f 0300 	mov.w	r3, #0
 8016d2a:	f04f 020a 	mov.w	r2, #10
 8016d2e:	4639      	mov	r1, r7
 8016d30:	4658      	mov	r0, fp
 8016d32:	d107      	bne.n	8016d44 <_dtoa_r+0xa94>
 8016d34:	f000 f8a8 	bl	8016e88 <__multadd>
 8016d38:	4607      	mov	r7, r0
 8016d3a:	4605      	mov	r5, r0
 8016d3c:	9b07      	ldr	r3, [sp, #28]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	9307      	str	r3, [sp, #28]
 8016d42:	e774      	b.n	8016c2e <_dtoa_r+0x97e>
 8016d44:	f000 f8a0 	bl	8016e88 <__multadd>
 8016d48:	4629      	mov	r1, r5
 8016d4a:	4607      	mov	r7, r0
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	220a      	movs	r2, #10
 8016d50:	4658      	mov	r0, fp
 8016d52:	f000 f899 	bl	8016e88 <__multadd>
 8016d56:	4605      	mov	r5, r0
 8016d58:	e7f0      	b.n	8016d3c <_dtoa_r+0xa8c>
 8016d5a:	9b00      	ldr	r3, [sp, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	bfcc      	ite	gt
 8016d60:	461e      	movgt	r6, r3
 8016d62:	2601      	movle	r6, #1
 8016d64:	4456      	add	r6, sl
 8016d66:	2700      	movs	r7, #0
 8016d68:	4649      	mov	r1, r9
 8016d6a:	2201      	movs	r2, #1
 8016d6c:	4658      	mov	r0, fp
 8016d6e:	f000 fa1d 	bl	80171ac <__lshift>
 8016d72:	4621      	mov	r1, r4
 8016d74:	4681      	mov	r9, r0
 8016d76:	f000 fa85 	bl	8017284 <__mcmp>
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	dcb0      	bgt.n	8016ce0 <_dtoa_r+0xa30>
 8016d7e:	d102      	bne.n	8016d86 <_dtoa_r+0xad6>
 8016d80:	f018 0f01 	tst.w	r8, #1
 8016d84:	d1ac      	bne.n	8016ce0 <_dtoa_r+0xa30>
 8016d86:	4633      	mov	r3, r6
 8016d88:	461e      	mov	r6, r3
 8016d8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016d8e:	2a30      	cmp	r2, #48	@ 0x30
 8016d90:	d0fa      	beq.n	8016d88 <_dtoa_r+0xad8>
 8016d92:	e5c3      	b.n	801691c <_dtoa_r+0x66c>
 8016d94:	459a      	cmp	sl, r3
 8016d96:	d1a4      	bne.n	8016ce2 <_dtoa_r+0xa32>
 8016d98:	9b04      	ldr	r3, [sp, #16]
 8016d9a:	3301      	adds	r3, #1
 8016d9c:	9304      	str	r3, [sp, #16]
 8016d9e:	2331      	movs	r3, #49	@ 0x31
 8016da0:	f88a 3000 	strb.w	r3, [sl]
 8016da4:	e5ba      	b.n	801691c <_dtoa_r+0x66c>
 8016da6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016da8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8016e04 <_dtoa_r+0xb54>
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f43f aab6 	beq.w	801631e <_dtoa_r+0x6e>
 8016db2:	f10a 0308 	add.w	r3, sl, #8
 8016db6:	f7ff bab0 	b.w	801631a <_dtoa_r+0x6a>
 8016dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	f77f ae3a 	ble.w	8016a36 <_dtoa_r+0x786>
 8016dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016dc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8016dc6:	2001      	movs	r0, #1
 8016dc8:	e658      	b.n	8016a7c <_dtoa_r+0x7cc>
 8016dca:	9b00      	ldr	r3, [sp, #0]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f77f aed9 	ble.w	8016b84 <_dtoa_r+0x8d4>
 8016dd2:	4656      	mov	r6, sl
 8016dd4:	4621      	mov	r1, r4
 8016dd6:	4648      	mov	r0, r9
 8016dd8:	f7ff f9e2 	bl	80161a0 <quorem>
 8016ddc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016de0:	f806 8b01 	strb.w	r8, [r6], #1
 8016de4:	9b00      	ldr	r3, [sp, #0]
 8016de6:	eba6 020a 	sub.w	r2, r6, sl
 8016dea:	4293      	cmp	r3, r2
 8016dec:	ddb5      	ble.n	8016d5a <_dtoa_r+0xaaa>
 8016dee:	4649      	mov	r1, r9
 8016df0:	2300      	movs	r3, #0
 8016df2:	220a      	movs	r2, #10
 8016df4:	4658      	mov	r0, fp
 8016df6:	f000 f847 	bl	8016e88 <__multadd>
 8016dfa:	4681      	mov	r9, r0
 8016dfc:	e7ea      	b.n	8016dd4 <_dtoa_r+0xb24>
 8016dfe:	bf00      	nop
 8016e00:	080189fb 	.word	0x080189fb
 8016e04:	080189ee 	.word	0x080189ee

08016e08 <__ascii_mbtowc>:
 8016e08:	b082      	sub	sp, #8
 8016e0a:	b901      	cbnz	r1, 8016e0e <__ascii_mbtowc+0x6>
 8016e0c:	a901      	add	r1, sp, #4
 8016e0e:	b142      	cbz	r2, 8016e22 <__ascii_mbtowc+0x1a>
 8016e10:	b14b      	cbz	r3, 8016e26 <__ascii_mbtowc+0x1e>
 8016e12:	7813      	ldrb	r3, [r2, #0]
 8016e14:	600b      	str	r3, [r1, #0]
 8016e16:	7812      	ldrb	r2, [r2, #0]
 8016e18:	1e10      	subs	r0, r2, #0
 8016e1a:	bf18      	it	ne
 8016e1c:	2001      	movne	r0, #1
 8016e1e:	b002      	add	sp, #8
 8016e20:	4770      	bx	lr
 8016e22:	4610      	mov	r0, r2
 8016e24:	e7fb      	b.n	8016e1e <__ascii_mbtowc+0x16>
 8016e26:	f06f 0001 	mvn.w	r0, #1
 8016e2a:	e7f8      	b.n	8016e1e <__ascii_mbtowc+0x16>

08016e2c <_Balloc>:
 8016e2c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8016e2e:	b570      	push	{r4, r5, r6, lr}
 8016e30:	4605      	mov	r5, r0
 8016e32:	460c      	mov	r4, r1
 8016e34:	b17b      	cbz	r3, 8016e56 <_Balloc+0x2a>
 8016e36:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8016e38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e3c:	b9a0      	cbnz	r0, 8016e68 <_Balloc+0x3c>
 8016e3e:	2101      	movs	r1, #1
 8016e40:	fa01 f604 	lsl.w	r6, r1, r4
 8016e44:	1d72      	adds	r2, r6, #5
 8016e46:	0092      	lsls	r2, r2, #2
 8016e48:	4628      	mov	r0, r5
 8016e4a:	f000 fddd 	bl	8017a08 <_calloc_r>
 8016e4e:	b148      	cbz	r0, 8016e64 <_Balloc+0x38>
 8016e50:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8016e54:	e00b      	b.n	8016e6e <_Balloc+0x42>
 8016e56:	2221      	movs	r2, #33	@ 0x21
 8016e58:	2104      	movs	r1, #4
 8016e5a:	f000 fdd5 	bl	8017a08 <_calloc_r>
 8016e5e:	6468      	str	r0, [r5, #68]	@ 0x44
 8016e60:	2800      	cmp	r0, #0
 8016e62:	d1e8      	bne.n	8016e36 <_Balloc+0xa>
 8016e64:	2000      	movs	r0, #0
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	6802      	ldr	r2, [r0, #0]
 8016e6a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8016e6e:	2300      	movs	r3, #0
 8016e70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016e74:	e7f7      	b.n	8016e66 <_Balloc+0x3a>

08016e76 <_Bfree>:
 8016e76:	b131      	cbz	r1, 8016e86 <_Bfree+0x10>
 8016e78:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8016e7a:	684a      	ldr	r2, [r1, #4]
 8016e7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016e80:	6008      	str	r0, [r1, #0]
 8016e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016e86:	4770      	bx	lr

08016e88 <__multadd>:
 8016e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e8c:	690d      	ldr	r5, [r1, #16]
 8016e8e:	4607      	mov	r7, r0
 8016e90:	460c      	mov	r4, r1
 8016e92:	461e      	mov	r6, r3
 8016e94:	f101 0c14 	add.w	ip, r1, #20
 8016e98:	2000      	movs	r0, #0
 8016e9a:	f8dc 3000 	ldr.w	r3, [ip]
 8016e9e:	b299      	uxth	r1, r3
 8016ea0:	fb02 6101 	mla	r1, r2, r1, r6
 8016ea4:	0c1e      	lsrs	r6, r3, #16
 8016ea6:	0c0b      	lsrs	r3, r1, #16
 8016ea8:	fb02 3306 	mla	r3, r2, r6, r3
 8016eac:	b289      	uxth	r1, r1
 8016eae:	3001      	adds	r0, #1
 8016eb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016eb4:	4285      	cmp	r5, r0
 8016eb6:	f84c 1b04 	str.w	r1, [ip], #4
 8016eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016ebe:	dcec      	bgt.n	8016e9a <__multadd+0x12>
 8016ec0:	b30e      	cbz	r6, 8016f06 <__multadd+0x7e>
 8016ec2:	68a3      	ldr	r3, [r4, #8]
 8016ec4:	42ab      	cmp	r3, r5
 8016ec6:	dc19      	bgt.n	8016efc <__multadd+0x74>
 8016ec8:	6861      	ldr	r1, [r4, #4]
 8016eca:	4638      	mov	r0, r7
 8016ecc:	3101      	adds	r1, #1
 8016ece:	f7ff ffad 	bl	8016e2c <_Balloc>
 8016ed2:	4680      	mov	r8, r0
 8016ed4:	b928      	cbnz	r0, 8016ee2 <__multadd+0x5a>
 8016ed6:	4602      	mov	r2, r0
 8016ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8016f0c <__multadd+0x84>)
 8016eda:	480d      	ldr	r0, [pc, #52]	@ (8016f10 <__multadd+0x88>)
 8016edc:	21ba      	movs	r1, #186	@ 0xba
 8016ede:	f000 fd75 	bl	80179cc <__assert_func>
 8016ee2:	6922      	ldr	r2, [r4, #16]
 8016ee4:	3202      	adds	r2, #2
 8016ee6:	f104 010c 	add.w	r1, r4, #12
 8016eea:	0092      	lsls	r2, r2, #2
 8016eec:	300c      	adds	r0, #12
 8016eee:	f7fc fa87 	bl	8013400 <memcpy>
 8016ef2:	4621      	mov	r1, r4
 8016ef4:	4638      	mov	r0, r7
 8016ef6:	f7ff ffbe 	bl	8016e76 <_Bfree>
 8016efa:	4644      	mov	r4, r8
 8016efc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f00:	3501      	adds	r5, #1
 8016f02:	615e      	str	r6, [r3, #20]
 8016f04:	6125      	str	r5, [r4, #16]
 8016f06:	4620      	mov	r0, r4
 8016f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f0c:	080189fb 	.word	0x080189fb
 8016f10:	08018a64 	.word	0x08018a64

08016f14 <__hi0bits>:
 8016f14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016f18:	4603      	mov	r3, r0
 8016f1a:	bf36      	itet	cc
 8016f1c:	0403      	lslcc	r3, r0, #16
 8016f1e:	2000      	movcs	r0, #0
 8016f20:	2010      	movcc	r0, #16
 8016f22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016f26:	bf3c      	itt	cc
 8016f28:	021b      	lslcc	r3, r3, #8
 8016f2a:	3008      	addcc	r0, #8
 8016f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016f30:	bf3c      	itt	cc
 8016f32:	011b      	lslcc	r3, r3, #4
 8016f34:	3004      	addcc	r0, #4
 8016f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f3a:	bf3c      	itt	cc
 8016f3c:	009b      	lslcc	r3, r3, #2
 8016f3e:	3002      	addcc	r0, #2
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	db05      	blt.n	8016f50 <__hi0bits+0x3c>
 8016f44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016f48:	f100 0001 	add.w	r0, r0, #1
 8016f4c:	bf08      	it	eq
 8016f4e:	2020      	moveq	r0, #32
 8016f50:	4770      	bx	lr

08016f52 <__lo0bits>:
 8016f52:	6803      	ldr	r3, [r0, #0]
 8016f54:	4602      	mov	r2, r0
 8016f56:	f013 0007 	ands.w	r0, r3, #7
 8016f5a:	d00b      	beq.n	8016f74 <__lo0bits+0x22>
 8016f5c:	07d9      	lsls	r1, r3, #31
 8016f5e:	d421      	bmi.n	8016fa4 <__lo0bits+0x52>
 8016f60:	0798      	lsls	r0, r3, #30
 8016f62:	bf49      	itett	mi
 8016f64:	085b      	lsrmi	r3, r3, #1
 8016f66:	089b      	lsrpl	r3, r3, #2
 8016f68:	2001      	movmi	r0, #1
 8016f6a:	6013      	strmi	r3, [r2, #0]
 8016f6c:	bf5c      	itt	pl
 8016f6e:	6013      	strpl	r3, [r2, #0]
 8016f70:	2002      	movpl	r0, #2
 8016f72:	4770      	bx	lr
 8016f74:	b299      	uxth	r1, r3
 8016f76:	b909      	cbnz	r1, 8016f7c <__lo0bits+0x2a>
 8016f78:	0c1b      	lsrs	r3, r3, #16
 8016f7a:	2010      	movs	r0, #16
 8016f7c:	b2d9      	uxtb	r1, r3
 8016f7e:	b909      	cbnz	r1, 8016f84 <__lo0bits+0x32>
 8016f80:	3008      	adds	r0, #8
 8016f82:	0a1b      	lsrs	r3, r3, #8
 8016f84:	0719      	lsls	r1, r3, #28
 8016f86:	bf04      	itt	eq
 8016f88:	091b      	lsreq	r3, r3, #4
 8016f8a:	3004      	addeq	r0, #4
 8016f8c:	0799      	lsls	r1, r3, #30
 8016f8e:	bf04      	itt	eq
 8016f90:	089b      	lsreq	r3, r3, #2
 8016f92:	3002      	addeq	r0, #2
 8016f94:	07d9      	lsls	r1, r3, #31
 8016f96:	d403      	bmi.n	8016fa0 <__lo0bits+0x4e>
 8016f98:	085b      	lsrs	r3, r3, #1
 8016f9a:	f100 0001 	add.w	r0, r0, #1
 8016f9e:	d003      	beq.n	8016fa8 <__lo0bits+0x56>
 8016fa0:	6013      	str	r3, [r2, #0]
 8016fa2:	4770      	bx	lr
 8016fa4:	2000      	movs	r0, #0
 8016fa6:	4770      	bx	lr
 8016fa8:	2020      	movs	r0, #32
 8016faa:	4770      	bx	lr

08016fac <__i2b>:
 8016fac:	b510      	push	{r4, lr}
 8016fae:	460c      	mov	r4, r1
 8016fb0:	2101      	movs	r1, #1
 8016fb2:	f7ff ff3b 	bl	8016e2c <_Balloc>
 8016fb6:	4602      	mov	r2, r0
 8016fb8:	b928      	cbnz	r0, 8016fc6 <__i2b+0x1a>
 8016fba:	4b05      	ldr	r3, [pc, #20]	@ (8016fd0 <__i2b+0x24>)
 8016fbc:	4805      	ldr	r0, [pc, #20]	@ (8016fd4 <__i2b+0x28>)
 8016fbe:	f240 1145 	movw	r1, #325	@ 0x145
 8016fc2:	f000 fd03 	bl	80179cc <__assert_func>
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	6144      	str	r4, [r0, #20]
 8016fca:	6103      	str	r3, [r0, #16]
 8016fcc:	bd10      	pop	{r4, pc}
 8016fce:	bf00      	nop
 8016fd0:	080189fb 	.word	0x080189fb
 8016fd4:	08018a64 	.word	0x08018a64

08016fd8 <__multiply>:
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	4614      	mov	r4, r2
 8016fde:	690a      	ldr	r2, [r1, #16]
 8016fe0:	6923      	ldr	r3, [r4, #16]
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	bfa8      	it	ge
 8016fe6:	4623      	movge	r3, r4
 8016fe8:	460f      	mov	r7, r1
 8016fea:	bfa4      	itt	ge
 8016fec:	460c      	movge	r4, r1
 8016fee:	461f      	movge	r7, r3
 8016ff0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016ff4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016ff8:	68a3      	ldr	r3, [r4, #8]
 8016ffa:	6861      	ldr	r1, [r4, #4]
 8016ffc:	eb0a 0609 	add.w	r6, sl, r9
 8017000:	42b3      	cmp	r3, r6
 8017002:	b085      	sub	sp, #20
 8017004:	bfb8      	it	lt
 8017006:	3101      	addlt	r1, #1
 8017008:	f7ff ff10 	bl	8016e2c <_Balloc>
 801700c:	b930      	cbnz	r0, 801701c <__multiply+0x44>
 801700e:	4602      	mov	r2, r0
 8017010:	4b44      	ldr	r3, [pc, #272]	@ (8017124 <__multiply+0x14c>)
 8017012:	4845      	ldr	r0, [pc, #276]	@ (8017128 <__multiply+0x150>)
 8017014:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017018:	f000 fcd8 	bl	80179cc <__assert_func>
 801701c:	f100 0514 	add.w	r5, r0, #20
 8017020:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017024:	462b      	mov	r3, r5
 8017026:	2200      	movs	r2, #0
 8017028:	4543      	cmp	r3, r8
 801702a:	d321      	bcc.n	8017070 <__multiply+0x98>
 801702c:	f107 0114 	add.w	r1, r7, #20
 8017030:	f104 0214 	add.w	r2, r4, #20
 8017034:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017038:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801703c:	9302      	str	r3, [sp, #8]
 801703e:	1b13      	subs	r3, r2, r4
 8017040:	3b15      	subs	r3, #21
 8017042:	f023 0303 	bic.w	r3, r3, #3
 8017046:	3304      	adds	r3, #4
 8017048:	f104 0715 	add.w	r7, r4, #21
 801704c:	42ba      	cmp	r2, r7
 801704e:	bf38      	it	cc
 8017050:	2304      	movcc	r3, #4
 8017052:	9301      	str	r3, [sp, #4]
 8017054:	9b02      	ldr	r3, [sp, #8]
 8017056:	9103      	str	r1, [sp, #12]
 8017058:	428b      	cmp	r3, r1
 801705a:	d80c      	bhi.n	8017076 <__multiply+0x9e>
 801705c:	2e00      	cmp	r6, #0
 801705e:	dd03      	ble.n	8017068 <__multiply+0x90>
 8017060:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017064:	2b00      	cmp	r3, #0
 8017066:	d05b      	beq.n	8017120 <__multiply+0x148>
 8017068:	6106      	str	r6, [r0, #16]
 801706a:	b005      	add	sp, #20
 801706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017070:	f843 2b04 	str.w	r2, [r3], #4
 8017074:	e7d8      	b.n	8017028 <__multiply+0x50>
 8017076:	f8b1 a000 	ldrh.w	sl, [r1]
 801707a:	f1ba 0f00 	cmp.w	sl, #0
 801707e:	d024      	beq.n	80170ca <__multiply+0xf2>
 8017080:	f104 0e14 	add.w	lr, r4, #20
 8017084:	46a9      	mov	r9, r5
 8017086:	f04f 0c00 	mov.w	ip, #0
 801708a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801708e:	f8d9 3000 	ldr.w	r3, [r9]
 8017092:	fa1f fb87 	uxth.w	fp, r7
 8017096:	b29b      	uxth	r3, r3
 8017098:	fb0a 330b 	mla	r3, sl, fp, r3
 801709c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80170a0:	f8d9 7000 	ldr.w	r7, [r9]
 80170a4:	4463      	add	r3, ip
 80170a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80170aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80170ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80170b8:	4572      	cmp	r2, lr
 80170ba:	f849 3b04 	str.w	r3, [r9], #4
 80170be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80170c2:	d8e2      	bhi.n	801708a <__multiply+0xb2>
 80170c4:	9b01      	ldr	r3, [sp, #4]
 80170c6:	f845 c003 	str.w	ip, [r5, r3]
 80170ca:	9b03      	ldr	r3, [sp, #12]
 80170cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80170d0:	3104      	adds	r1, #4
 80170d2:	f1b9 0f00 	cmp.w	r9, #0
 80170d6:	d021      	beq.n	801711c <__multiply+0x144>
 80170d8:	682b      	ldr	r3, [r5, #0]
 80170da:	f104 0c14 	add.w	ip, r4, #20
 80170de:	46ae      	mov	lr, r5
 80170e0:	f04f 0a00 	mov.w	sl, #0
 80170e4:	f8bc b000 	ldrh.w	fp, [ip]
 80170e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80170ec:	fb09 770b 	mla	r7, r9, fp, r7
 80170f0:	4457      	add	r7, sl
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80170f8:	f84e 3b04 	str.w	r3, [lr], #4
 80170fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017104:	f8be 3000 	ldrh.w	r3, [lr]
 8017108:	fb09 330a 	mla	r3, r9, sl, r3
 801710c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017110:	4562      	cmp	r2, ip
 8017112:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017116:	d8e5      	bhi.n	80170e4 <__multiply+0x10c>
 8017118:	9f01      	ldr	r7, [sp, #4]
 801711a:	51eb      	str	r3, [r5, r7]
 801711c:	3504      	adds	r5, #4
 801711e:	e799      	b.n	8017054 <__multiply+0x7c>
 8017120:	3e01      	subs	r6, #1
 8017122:	e79b      	b.n	801705c <__multiply+0x84>
 8017124:	080189fb 	.word	0x080189fb
 8017128:	08018a64 	.word	0x08018a64

0801712c <__pow5mult>:
 801712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017130:	4615      	mov	r5, r2
 8017132:	f012 0203 	ands.w	r2, r2, #3
 8017136:	4607      	mov	r7, r0
 8017138:	460e      	mov	r6, r1
 801713a:	d007      	beq.n	801714c <__pow5mult+0x20>
 801713c:	4c1a      	ldr	r4, [pc, #104]	@ (80171a8 <__pow5mult+0x7c>)
 801713e:	3a01      	subs	r2, #1
 8017140:	2300      	movs	r3, #0
 8017142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017146:	f7ff fe9f 	bl	8016e88 <__multadd>
 801714a:	4606      	mov	r6, r0
 801714c:	10ad      	asrs	r5, r5, #2
 801714e:	d027      	beq.n	80171a0 <__pow5mult+0x74>
 8017150:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8017152:	b944      	cbnz	r4, 8017166 <__pow5mult+0x3a>
 8017154:	f240 2171 	movw	r1, #625	@ 0x271
 8017158:	4638      	mov	r0, r7
 801715a:	f7ff ff27 	bl	8016fac <__i2b>
 801715e:	2300      	movs	r3, #0
 8017160:	6438      	str	r0, [r7, #64]	@ 0x40
 8017162:	4604      	mov	r4, r0
 8017164:	6003      	str	r3, [r0, #0]
 8017166:	f04f 0900 	mov.w	r9, #0
 801716a:	07eb      	lsls	r3, r5, #31
 801716c:	d50a      	bpl.n	8017184 <__pow5mult+0x58>
 801716e:	4631      	mov	r1, r6
 8017170:	4622      	mov	r2, r4
 8017172:	4638      	mov	r0, r7
 8017174:	f7ff ff30 	bl	8016fd8 <__multiply>
 8017178:	4631      	mov	r1, r6
 801717a:	4680      	mov	r8, r0
 801717c:	4638      	mov	r0, r7
 801717e:	f7ff fe7a 	bl	8016e76 <_Bfree>
 8017182:	4646      	mov	r6, r8
 8017184:	106d      	asrs	r5, r5, #1
 8017186:	d00b      	beq.n	80171a0 <__pow5mult+0x74>
 8017188:	6820      	ldr	r0, [r4, #0]
 801718a:	b938      	cbnz	r0, 801719c <__pow5mult+0x70>
 801718c:	4622      	mov	r2, r4
 801718e:	4621      	mov	r1, r4
 8017190:	4638      	mov	r0, r7
 8017192:	f7ff ff21 	bl	8016fd8 <__multiply>
 8017196:	6020      	str	r0, [r4, #0]
 8017198:	f8c0 9000 	str.w	r9, [r0]
 801719c:	4604      	mov	r4, r0
 801719e:	e7e4      	b.n	801716a <__pow5mult+0x3e>
 80171a0:	4630      	mov	r0, r6
 80171a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171a6:	bf00      	nop
 80171a8:	08018ac0 	.word	0x08018ac0

080171ac <__lshift>:
 80171ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171b0:	460c      	mov	r4, r1
 80171b2:	6849      	ldr	r1, [r1, #4]
 80171b4:	6923      	ldr	r3, [r4, #16]
 80171b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80171ba:	68a3      	ldr	r3, [r4, #8]
 80171bc:	4607      	mov	r7, r0
 80171be:	4691      	mov	r9, r2
 80171c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80171c4:	f108 0601 	add.w	r6, r8, #1
 80171c8:	42b3      	cmp	r3, r6
 80171ca:	db0b      	blt.n	80171e4 <__lshift+0x38>
 80171cc:	4638      	mov	r0, r7
 80171ce:	f7ff fe2d 	bl	8016e2c <_Balloc>
 80171d2:	4605      	mov	r5, r0
 80171d4:	b948      	cbnz	r0, 80171ea <__lshift+0x3e>
 80171d6:	4602      	mov	r2, r0
 80171d8:	4b28      	ldr	r3, [pc, #160]	@ (801727c <__lshift+0xd0>)
 80171da:	4829      	ldr	r0, [pc, #164]	@ (8017280 <__lshift+0xd4>)
 80171dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80171e0:	f000 fbf4 	bl	80179cc <__assert_func>
 80171e4:	3101      	adds	r1, #1
 80171e6:	005b      	lsls	r3, r3, #1
 80171e8:	e7ee      	b.n	80171c8 <__lshift+0x1c>
 80171ea:	2300      	movs	r3, #0
 80171ec:	f100 0114 	add.w	r1, r0, #20
 80171f0:	f100 0210 	add.w	r2, r0, #16
 80171f4:	4618      	mov	r0, r3
 80171f6:	4553      	cmp	r3, sl
 80171f8:	db33      	blt.n	8017262 <__lshift+0xb6>
 80171fa:	6920      	ldr	r0, [r4, #16]
 80171fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017200:	f104 0314 	add.w	r3, r4, #20
 8017204:	f019 091f 	ands.w	r9, r9, #31
 8017208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801720c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017210:	d02b      	beq.n	801726a <__lshift+0xbe>
 8017212:	f1c9 0e20 	rsb	lr, r9, #32
 8017216:	468a      	mov	sl, r1
 8017218:	2200      	movs	r2, #0
 801721a:	6818      	ldr	r0, [r3, #0]
 801721c:	fa00 f009 	lsl.w	r0, r0, r9
 8017220:	4310      	orrs	r0, r2
 8017222:	f84a 0b04 	str.w	r0, [sl], #4
 8017226:	f853 2b04 	ldr.w	r2, [r3], #4
 801722a:	459c      	cmp	ip, r3
 801722c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017230:	d8f3      	bhi.n	801721a <__lshift+0x6e>
 8017232:	ebac 0304 	sub.w	r3, ip, r4
 8017236:	3b15      	subs	r3, #21
 8017238:	f023 0303 	bic.w	r3, r3, #3
 801723c:	3304      	adds	r3, #4
 801723e:	f104 0015 	add.w	r0, r4, #21
 8017242:	4584      	cmp	ip, r0
 8017244:	bf38      	it	cc
 8017246:	2304      	movcc	r3, #4
 8017248:	50ca      	str	r2, [r1, r3]
 801724a:	b10a      	cbz	r2, 8017250 <__lshift+0xa4>
 801724c:	f108 0602 	add.w	r6, r8, #2
 8017250:	3e01      	subs	r6, #1
 8017252:	4638      	mov	r0, r7
 8017254:	612e      	str	r6, [r5, #16]
 8017256:	4621      	mov	r1, r4
 8017258:	f7ff fe0d 	bl	8016e76 <_Bfree>
 801725c:	4628      	mov	r0, r5
 801725e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017262:	f842 0f04 	str.w	r0, [r2, #4]!
 8017266:	3301      	adds	r3, #1
 8017268:	e7c5      	b.n	80171f6 <__lshift+0x4a>
 801726a:	3904      	subs	r1, #4
 801726c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017270:	f841 2f04 	str.w	r2, [r1, #4]!
 8017274:	459c      	cmp	ip, r3
 8017276:	d8f9      	bhi.n	801726c <__lshift+0xc0>
 8017278:	e7ea      	b.n	8017250 <__lshift+0xa4>
 801727a:	bf00      	nop
 801727c:	080189fb 	.word	0x080189fb
 8017280:	08018a64 	.word	0x08018a64

08017284 <__mcmp>:
 8017284:	690a      	ldr	r2, [r1, #16]
 8017286:	4603      	mov	r3, r0
 8017288:	6900      	ldr	r0, [r0, #16]
 801728a:	1a80      	subs	r0, r0, r2
 801728c:	b530      	push	{r4, r5, lr}
 801728e:	d10e      	bne.n	80172ae <__mcmp+0x2a>
 8017290:	3314      	adds	r3, #20
 8017292:	3114      	adds	r1, #20
 8017294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801729c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80172a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80172a4:	4295      	cmp	r5, r2
 80172a6:	d003      	beq.n	80172b0 <__mcmp+0x2c>
 80172a8:	d205      	bcs.n	80172b6 <__mcmp+0x32>
 80172aa:	f04f 30ff 	mov.w	r0, #4294967295
 80172ae:	bd30      	pop	{r4, r5, pc}
 80172b0:	42a3      	cmp	r3, r4
 80172b2:	d3f3      	bcc.n	801729c <__mcmp+0x18>
 80172b4:	e7fb      	b.n	80172ae <__mcmp+0x2a>
 80172b6:	2001      	movs	r0, #1
 80172b8:	e7f9      	b.n	80172ae <__mcmp+0x2a>
	...

080172bc <__mdiff>:
 80172bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	4689      	mov	r9, r1
 80172c2:	4606      	mov	r6, r0
 80172c4:	4611      	mov	r1, r2
 80172c6:	4648      	mov	r0, r9
 80172c8:	4614      	mov	r4, r2
 80172ca:	f7ff ffdb 	bl	8017284 <__mcmp>
 80172ce:	1e05      	subs	r5, r0, #0
 80172d0:	d112      	bne.n	80172f8 <__mdiff+0x3c>
 80172d2:	4629      	mov	r1, r5
 80172d4:	4630      	mov	r0, r6
 80172d6:	f7ff fda9 	bl	8016e2c <_Balloc>
 80172da:	4602      	mov	r2, r0
 80172dc:	b928      	cbnz	r0, 80172ea <__mdiff+0x2e>
 80172de:	4b3f      	ldr	r3, [pc, #252]	@ (80173dc <__mdiff+0x120>)
 80172e0:	f240 2137 	movw	r1, #567	@ 0x237
 80172e4:	483e      	ldr	r0, [pc, #248]	@ (80173e0 <__mdiff+0x124>)
 80172e6:	f000 fb71 	bl	80179cc <__assert_func>
 80172ea:	2301      	movs	r3, #1
 80172ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80172f0:	4610      	mov	r0, r2
 80172f2:	b003      	add	sp, #12
 80172f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172f8:	bfbc      	itt	lt
 80172fa:	464b      	movlt	r3, r9
 80172fc:	46a1      	movlt	r9, r4
 80172fe:	4630      	mov	r0, r6
 8017300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017304:	bfba      	itte	lt
 8017306:	461c      	movlt	r4, r3
 8017308:	2501      	movlt	r5, #1
 801730a:	2500      	movge	r5, #0
 801730c:	f7ff fd8e 	bl	8016e2c <_Balloc>
 8017310:	4602      	mov	r2, r0
 8017312:	b918      	cbnz	r0, 801731c <__mdiff+0x60>
 8017314:	4b31      	ldr	r3, [pc, #196]	@ (80173dc <__mdiff+0x120>)
 8017316:	f240 2145 	movw	r1, #581	@ 0x245
 801731a:	e7e3      	b.n	80172e4 <__mdiff+0x28>
 801731c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017320:	6926      	ldr	r6, [r4, #16]
 8017322:	60c5      	str	r5, [r0, #12]
 8017324:	f109 0310 	add.w	r3, r9, #16
 8017328:	f109 0514 	add.w	r5, r9, #20
 801732c:	f104 0e14 	add.w	lr, r4, #20
 8017330:	f100 0b14 	add.w	fp, r0, #20
 8017334:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017338:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801733c:	9301      	str	r3, [sp, #4]
 801733e:	46d9      	mov	r9, fp
 8017340:	f04f 0c00 	mov.w	ip, #0
 8017344:	9b01      	ldr	r3, [sp, #4]
 8017346:	f85e 0b04 	ldr.w	r0, [lr], #4
 801734a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801734e:	9301      	str	r3, [sp, #4]
 8017350:	fa1f f38a 	uxth.w	r3, sl
 8017354:	4619      	mov	r1, r3
 8017356:	b283      	uxth	r3, r0
 8017358:	1acb      	subs	r3, r1, r3
 801735a:	0c00      	lsrs	r0, r0, #16
 801735c:	4463      	add	r3, ip
 801735e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017362:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017366:	b29b      	uxth	r3, r3
 8017368:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801736c:	4576      	cmp	r6, lr
 801736e:	f849 3b04 	str.w	r3, [r9], #4
 8017372:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017376:	d8e5      	bhi.n	8017344 <__mdiff+0x88>
 8017378:	1b33      	subs	r3, r6, r4
 801737a:	3b15      	subs	r3, #21
 801737c:	f023 0303 	bic.w	r3, r3, #3
 8017380:	3415      	adds	r4, #21
 8017382:	3304      	adds	r3, #4
 8017384:	42a6      	cmp	r6, r4
 8017386:	bf38      	it	cc
 8017388:	2304      	movcc	r3, #4
 801738a:	441d      	add	r5, r3
 801738c:	445b      	add	r3, fp
 801738e:	461e      	mov	r6, r3
 8017390:	462c      	mov	r4, r5
 8017392:	4544      	cmp	r4, r8
 8017394:	d30e      	bcc.n	80173b4 <__mdiff+0xf8>
 8017396:	f108 0103 	add.w	r1, r8, #3
 801739a:	1b49      	subs	r1, r1, r5
 801739c:	f021 0103 	bic.w	r1, r1, #3
 80173a0:	3d03      	subs	r5, #3
 80173a2:	45a8      	cmp	r8, r5
 80173a4:	bf38      	it	cc
 80173a6:	2100      	movcc	r1, #0
 80173a8:	440b      	add	r3, r1
 80173aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80173ae:	b191      	cbz	r1, 80173d6 <__mdiff+0x11a>
 80173b0:	6117      	str	r7, [r2, #16]
 80173b2:	e79d      	b.n	80172f0 <__mdiff+0x34>
 80173b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80173b8:	46e6      	mov	lr, ip
 80173ba:	0c08      	lsrs	r0, r1, #16
 80173bc:	fa1c fc81 	uxtah	ip, ip, r1
 80173c0:	4471      	add	r1, lr
 80173c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80173c6:	b289      	uxth	r1, r1
 80173c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80173cc:	f846 1b04 	str.w	r1, [r6], #4
 80173d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80173d4:	e7dd      	b.n	8017392 <__mdiff+0xd6>
 80173d6:	3f01      	subs	r7, #1
 80173d8:	e7e7      	b.n	80173aa <__mdiff+0xee>
 80173da:	bf00      	nop
 80173dc:	080189fb 	.word	0x080189fb
 80173e0:	08018a64 	.word	0x08018a64

080173e4 <__d2b>:
 80173e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80173e8:	460f      	mov	r7, r1
 80173ea:	2101      	movs	r1, #1
 80173ec:	ec59 8b10 	vmov	r8, r9, d0
 80173f0:	4616      	mov	r6, r2
 80173f2:	f7ff fd1b 	bl	8016e2c <_Balloc>
 80173f6:	4604      	mov	r4, r0
 80173f8:	b930      	cbnz	r0, 8017408 <__d2b+0x24>
 80173fa:	4602      	mov	r2, r0
 80173fc:	4b23      	ldr	r3, [pc, #140]	@ (801748c <__d2b+0xa8>)
 80173fe:	4824      	ldr	r0, [pc, #144]	@ (8017490 <__d2b+0xac>)
 8017400:	f240 310f 	movw	r1, #783	@ 0x30f
 8017404:	f000 fae2 	bl	80179cc <__assert_func>
 8017408:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801740c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017410:	b10d      	cbz	r5, 8017416 <__d2b+0x32>
 8017412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017416:	9301      	str	r3, [sp, #4]
 8017418:	f1b8 0300 	subs.w	r3, r8, #0
 801741c:	d023      	beq.n	8017466 <__d2b+0x82>
 801741e:	4668      	mov	r0, sp
 8017420:	9300      	str	r3, [sp, #0]
 8017422:	f7ff fd96 	bl	8016f52 <__lo0bits>
 8017426:	e9dd 1200 	ldrd	r1, r2, [sp]
 801742a:	b1d0      	cbz	r0, 8017462 <__d2b+0x7e>
 801742c:	f1c0 0320 	rsb	r3, r0, #32
 8017430:	fa02 f303 	lsl.w	r3, r2, r3
 8017434:	430b      	orrs	r3, r1
 8017436:	40c2      	lsrs	r2, r0
 8017438:	6163      	str	r3, [r4, #20]
 801743a:	9201      	str	r2, [sp, #4]
 801743c:	9b01      	ldr	r3, [sp, #4]
 801743e:	61a3      	str	r3, [r4, #24]
 8017440:	2b00      	cmp	r3, #0
 8017442:	bf0c      	ite	eq
 8017444:	2201      	moveq	r2, #1
 8017446:	2202      	movne	r2, #2
 8017448:	6122      	str	r2, [r4, #16]
 801744a:	b1a5      	cbz	r5, 8017476 <__d2b+0x92>
 801744c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017450:	4405      	add	r5, r0
 8017452:	603d      	str	r5, [r7, #0]
 8017454:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017458:	6030      	str	r0, [r6, #0]
 801745a:	4620      	mov	r0, r4
 801745c:	b003      	add	sp, #12
 801745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017462:	6161      	str	r1, [r4, #20]
 8017464:	e7ea      	b.n	801743c <__d2b+0x58>
 8017466:	a801      	add	r0, sp, #4
 8017468:	f7ff fd73 	bl	8016f52 <__lo0bits>
 801746c:	9b01      	ldr	r3, [sp, #4]
 801746e:	6163      	str	r3, [r4, #20]
 8017470:	3020      	adds	r0, #32
 8017472:	2201      	movs	r2, #1
 8017474:	e7e8      	b.n	8017448 <__d2b+0x64>
 8017476:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801747a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801747e:	6038      	str	r0, [r7, #0]
 8017480:	6918      	ldr	r0, [r3, #16]
 8017482:	f7ff fd47 	bl	8016f14 <__hi0bits>
 8017486:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801748a:	e7e5      	b.n	8017458 <__d2b+0x74>
 801748c:	080189fb 	.word	0x080189fb
 8017490:	08018a64 	.word	0x08018a64

08017494 <_realloc_r>:
 8017494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017498:	4682      	mov	sl, r0
 801749a:	4693      	mov	fp, r2
 801749c:	460c      	mov	r4, r1
 801749e:	b929      	cbnz	r1, 80174ac <_realloc_r+0x18>
 80174a0:	4611      	mov	r1, r2
 80174a2:	b003      	add	sp, #12
 80174a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a8:	f7fc b8de 	b.w	8013668 <_malloc_r>
 80174ac:	f7fc fb16 	bl	8013adc <__malloc_lock>
 80174b0:	f10b 080b 	add.w	r8, fp, #11
 80174b4:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80174b8:	f1b8 0f16 	cmp.w	r8, #22
 80174bc:	f1a4 0908 	sub.w	r9, r4, #8
 80174c0:	f025 0603 	bic.w	r6, r5, #3
 80174c4:	d908      	bls.n	80174d8 <_realloc_r+0x44>
 80174c6:	f038 0807 	bics.w	r8, r8, #7
 80174ca:	d507      	bpl.n	80174dc <_realloc_r+0x48>
 80174cc:	230c      	movs	r3, #12
 80174ce:	f8ca 3000 	str.w	r3, [sl]
 80174d2:	f04f 0b00 	mov.w	fp, #0
 80174d6:	e032      	b.n	801753e <_realloc_r+0xaa>
 80174d8:	f04f 0810 	mov.w	r8, #16
 80174dc:	45c3      	cmp	fp, r8
 80174de:	d8f5      	bhi.n	80174cc <_realloc_r+0x38>
 80174e0:	4546      	cmp	r6, r8
 80174e2:	f280 8174 	bge.w	80177ce <_realloc_r+0x33a>
 80174e6:	4b9e      	ldr	r3, [pc, #632]	@ (8017760 <_realloc_r+0x2cc>)
 80174e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80174ec:	eb09 0106 	add.w	r1, r9, r6
 80174f0:	458c      	cmp	ip, r1
 80174f2:	6848      	ldr	r0, [r1, #4]
 80174f4:	d005      	beq.n	8017502 <_realloc_r+0x6e>
 80174f6:	f020 0201 	bic.w	r2, r0, #1
 80174fa:	440a      	add	r2, r1
 80174fc:	6852      	ldr	r2, [r2, #4]
 80174fe:	07d7      	lsls	r7, r2, #31
 8017500:	d449      	bmi.n	8017596 <_realloc_r+0x102>
 8017502:	f020 0003 	bic.w	r0, r0, #3
 8017506:	458c      	cmp	ip, r1
 8017508:	eb06 0700 	add.w	r7, r6, r0
 801750c:	d11b      	bne.n	8017546 <_realloc_r+0xb2>
 801750e:	f108 0210 	add.w	r2, r8, #16
 8017512:	42ba      	cmp	r2, r7
 8017514:	dc41      	bgt.n	801759a <_realloc_r+0x106>
 8017516:	eb09 0208 	add.w	r2, r9, r8
 801751a:	eba7 0708 	sub.w	r7, r7, r8
 801751e:	f047 0701 	orr.w	r7, r7, #1
 8017522:	609a      	str	r2, [r3, #8]
 8017524:	6057      	str	r7, [r2, #4]
 8017526:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801752a:	f003 0301 	and.w	r3, r3, #1
 801752e:	ea43 0308 	orr.w	r3, r3, r8
 8017532:	f844 3c04 	str.w	r3, [r4, #-4]
 8017536:	4650      	mov	r0, sl
 8017538:	f7fc fad6 	bl	8013ae8 <__malloc_unlock>
 801753c:	46a3      	mov	fp, r4
 801753e:	4658      	mov	r0, fp
 8017540:	b003      	add	sp, #12
 8017542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017546:	45b8      	cmp	r8, r7
 8017548:	dc27      	bgt.n	801759a <_realloc_r+0x106>
 801754a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801754e:	60d3      	str	r3, [r2, #12]
 8017550:	609a      	str	r2, [r3, #8]
 8017552:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017556:	eba7 0008 	sub.w	r0, r7, r8
 801755a:	280f      	cmp	r0, #15
 801755c:	f003 0301 	and.w	r3, r3, #1
 8017560:	eb09 0207 	add.w	r2, r9, r7
 8017564:	f240 8135 	bls.w	80177d2 <_realloc_r+0x33e>
 8017568:	eb09 0108 	add.w	r1, r9, r8
 801756c:	ea48 0303 	orr.w	r3, r8, r3
 8017570:	f040 0001 	orr.w	r0, r0, #1
 8017574:	f8c9 3004 	str.w	r3, [r9, #4]
 8017578:	6048      	str	r0, [r1, #4]
 801757a:	6853      	ldr	r3, [r2, #4]
 801757c:	f043 0301 	orr.w	r3, r3, #1
 8017580:	6053      	str	r3, [r2, #4]
 8017582:	3108      	adds	r1, #8
 8017584:	4650      	mov	r0, sl
 8017586:	f7fb ffaf 	bl	80134e8 <_free_r>
 801758a:	4650      	mov	r0, sl
 801758c:	f7fc faac 	bl	8013ae8 <__malloc_unlock>
 8017590:	f109 0b08 	add.w	fp, r9, #8
 8017594:	e7d3      	b.n	801753e <_realloc_r+0xaa>
 8017596:	2000      	movs	r0, #0
 8017598:	4601      	mov	r1, r0
 801759a:	07ea      	lsls	r2, r5, #31
 801759c:	f100 80c7 	bmi.w	801772e <_realloc_r+0x29a>
 80175a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80175a4:	eba9 0505 	sub.w	r5, r9, r5
 80175a8:	686a      	ldr	r2, [r5, #4]
 80175aa:	f022 0203 	bic.w	r2, r2, #3
 80175ae:	4432      	add	r2, r6
 80175b0:	9201      	str	r2, [sp, #4]
 80175b2:	2900      	cmp	r1, #0
 80175b4:	f000 8086 	beq.w	80176c4 <_realloc_r+0x230>
 80175b8:	458c      	cmp	ip, r1
 80175ba:	eb00 0702 	add.w	r7, r0, r2
 80175be:	d149      	bne.n	8017654 <_realloc_r+0x1c0>
 80175c0:	f108 0210 	add.w	r2, r8, #16
 80175c4:	42ba      	cmp	r2, r7
 80175c6:	dc7d      	bgt.n	80176c4 <_realloc_r+0x230>
 80175c8:	46ab      	mov	fp, r5
 80175ca:	68ea      	ldr	r2, [r5, #12]
 80175cc:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80175d0:	60ca      	str	r2, [r1, #12]
 80175d2:	6091      	str	r1, [r2, #8]
 80175d4:	1f32      	subs	r2, r6, #4
 80175d6:	2a24      	cmp	r2, #36	@ 0x24
 80175d8:	d836      	bhi.n	8017648 <_realloc_r+0x1b4>
 80175da:	2a13      	cmp	r2, #19
 80175dc:	d932      	bls.n	8017644 <_realloc_r+0x1b0>
 80175de:	6821      	ldr	r1, [r4, #0]
 80175e0:	60a9      	str	r1, [r5, #8]
 80175e2:	6861      	ldr	r1, [r4, #4]
 80175e4:	60e9      	str	r1, [r5, #12]
 80175e6:	2a1b      	cmp	r2, #27
 80175e8:	d81a      	bhi.n	8017620 <_realloc_r+0x18c>
 80175ea:	3408      	adds	r4, #8
 80175ec:	f105 0210 	add.w	r2, r5, #16
 80175f0:	6821      	ldr	r1, [r4, #0]
 80175f2:	6011      	str	r1, [r2, #0]
 80175f4:	6861      	ldr	r1, [r4, #4]
 80175f6:	6051      	str	r1, [r2, #4]
 80175f8:	68a1      	ldr	r1, [r4, #8]
 80175fa:	6091      	str	r1, [r2, #8]
 80175fc:	eb05 0208 	add.w	r2, r5, r8
 8017600:	eba7 0708 	sub.w	r7, r7, r8
 8017604:	f047 0701 	orr.w	r7, r7, #1
 8017608:	609a      	str	r2, [r3, #8]
 801760a:	6057      	str	r7, [r2, #4]
 801760c:	686b      	ldr	r3, [r5, #4]
 801760e:	f003 0301 	and.w	r3, r3, #1
 8017612:	ea43 0308 	orr.w	r3, r3, r8
 8017616:	606b      	str	r3, [r5, #4]
 8017618:	4650      	mov	r0, sl
 801761a:	f7fc fa65 	bl	8013ae8 <__malloc_unlock>
 801761e:	e78e      	b.n	801753e <_realloc_r+0xaa>
 8017620:	68a1      	ldr	r1, [r4, #8]
 8017622:	6129      	str	r1, [r5, #16]
 8017624:	68e1      	ldr	r1, [r4, #12]
 8017626:	6169      	str	r1, [r5, #20]
 8017628:	2a24      	cmp	r2, #36	@ 0x24
 801762a:	bf01      	itttt	eq
 801762c:	6922      	ldreq	r2, [r4, #16]
 801762e:	61aa      	streq	r2, [r5, #24]
 8017630:	6961      	ldreq	r1, [r4, #20]
 8017632:	61e9      	streq	r1, [r5, #28]
 8017634:	bf19      	ittee	ne
 8017636:	3410      	addne	r4, #16
 8017638:	f105 0218 	addne.w	r2, r5, #24
 801763c:	f105 0220 	addeq.w	r2, r5, #32
 8017640:	3418      	addeq	r4, #24
 8017642:	e7d5      	b.n	80175f0 <_realloc_r+0x15c>
 8017644:	465a      	mov	r2, fp
 8017646:	e7d3      	b.n	80175f0 <_realloc_r+0x15c>
 8017648:	4621      	mov	r1, r4
 801764a:	4658      	mov	r0, fp
 801764c:	f7fe fcca 	bl	8015fe4 <memmove>
 8017650:	4b43      	ldr	r3, [pc, #268]	@ (8017760 <_realloc_r+0x2cc>)
 8017652:	e7d3      	b.n	80175fc <_realloc_r+0x168>
 8017654:	45b8      	cmp	r8, r7
 8017656:	dc35      	bgt.n	80176c4 <_realloc_r+0x230>
 8017658:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801765c:	4628      	mov	r0, r5
 801765e:	60d3      	str	r3, [r2, #12]
 8017660:	609a      	str	r2, [r3, #8]
 8017662:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017666:	68eb      	ldr	r3, [r5, #12]
 8017668:	60d3      	str	r3, [r2, #12]
 801766a:	609a      	str	r2, [r3, #8]
 801766c:	1f32      	subs	r2, r6, #4
 801766e:	2a24      	cmp	r2, #36	@ 0x24
 8017670:	d824      	bhi.n	80176bc <_realloc_r+0x228>
 8017672:	2a13      	cmp	r2, #19
 8017674:	d908      	bls.n	8017688 <_realloc_r+0x1f4>
 8017676:	6823      	ldr	r3, [r4, #0]
 8017678:	60ab      	str	r3, [r5, #8]
 801767a:	6863      	ldr	r3, [r4, #4]
 801767c:	60eb      	str	r3, [r5, #12]
 801767e:	2a1b      	cmp	r2, #27
 8017680:	d80a      	bhi.n	8017698 <_realloc_r+0x204>
 8017682:	3408      	adds	r4, #8
 8017684:	f105 0010 	add.w	r0, r5, #16
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	6003      	str	r3, [r0, #0]
 801768c:	6863      	ldr	r3, [r4, #4]
 801768e:	6043      	str	r3, [r0, #4]
 8017690:	68a3      	ldr	r3, [r4, #8]
 8017692:	6083      	str	r3, [r0, #8]
 8017694:	46a9      	mov	r9, r5
 8017696:	e75c      	b.n	8017552 <_realloc_r+0xbe>
 8017698:	68a3      	ldr	r3, [r4, #8]
 801769a:	612b      	str	r3, [r5, #16]
 801769c:	68e3      	ldr	r3, [r4, #12]
 801769e:	616b      	str	r3, [r5, #20]
 80176a0:	2a24      	cmp	r2, #36	@ 0x24
 80176a2:	bf01      	itttt	eq
 80176a4:	6923      	ldreq	r3, [r4, #16]
 80176a6:	61ab      	streq	r3, [r5, #24]
 80176a8:	6963      	ldreq	r3, [r4, #20]
 80176aa:	61eb      	streq	r3, [r5, #28]
 80176ac:	bf19      	ittee	ne
 80176ae:	3410      	addne	r4, #16
 80176b0:	f105 0018 	addne.w	r0, r5, #24
 80176b4:	f105 0020 	addeq.w	r0, r5, #32
 80176b8:	3418      	addeq	r4, #24
 80176ba:	e7e5      	b.n	8017688 <_realloc_r+0x1f4>
 80176bc:	4621      	mov	r1, r4
 80176be:	f7fe fc91 	bl	8015fe4 <memmove>
 80176c2:	e7e7      	b.n	8017694 <_realloc_r+0x200>
 80176c4:	9b01      	ldr	r3, [sp, #4]
 80176c6:	4598      	cmp	r8, r3
 80176c8:	dc31      	bgt.n	801772e <_realloc_r+0x29a>
 80176ca:	4628      	mov	r0, r5
 80176cc:	68eb      	ldr	r3, [r5, #12]
 80176ce:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80176d2:	60d3      	str	r3, [r2, #12]
 80176d4:	609a      	str	r2, [r3, #8]
 80176d6:	1f32      	subs	r2, r6, #4
 80176d8:	2a24      	cmp	r2, #36	@ 0x24
 80176da:	d824      	bhi.n	8017726 <_realloc_r+0x292>
 80176dc:	2a13      	cmp	r2, #19
 80176de:	d908      	bls.n	80176f2 <_realloc_r+0x25e>
 80176e0:	6823      	ldr	r3, [r4, #0]
 80176e2:	60ab      	str	r3, [r5, #8]
 80176e4:	6863      	ldr	r3, [r4, #4]
 80176e6:	60eb      	str	r3, [r5, #12]
 80176e8:	2a1b      	cmp	r2, #27
 80176ea:	d80a      	bhi.n	8017702 <_realloc_r+0x26e>
 80176ec:	3408      	adds	r4, #8
 80176ee:	f105 0010 	add.w	r0, r5, #16
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	6003      	str	r3, [r0, #0]
 80176f6:	6863      	ldr	r3, [r4, #4]
 80176f8:	6043      	str	r3, [r0, #4]
 80176fa:	68a3      	ldr	r3, [r4, #8]
 80176fc:	6083      	str	r3, [r0, #8]
 80176fe:	9f01      	ldr	r7, [sp, #4]
 8017700:	e7c8      	b.n	8017694 <_realloc_r+0x200>
 8017702:	68a3      	ldr	r3, [r4, #8]
 8017704:	612b      	str	r3, [r5, #16]
 8017706:	68e3      	ldr	r3, [r4, #12]
 8017708:	616b      	str	r3, [r5, #20]
 801770a:	2a24      	cmp	r2, #36	@ 0x24
 801770c:	bf01      	itttt	eq
 801770e:	6923      	ldreq	r3, [r4, #16]
 8017710:	61ab      	streq	r3, [r5, #24]
 8017712:	6963      	ldreq	r3, [r4, #20]
 8017714:	61eb      	streq	r3, [r5, #28]
 8017716:	bf19      	ittee	ne
 8017718:	3410      	addne	r4, #16
 801771a:	f105 0018 	addne.w	r0, r5, #24
 801771e:	f105 0020 	addeq.w	r0, r5, #32
 8017722:	3418      	addeq	r4, #24
 8017724:	e7e5      	b.n	80176f2 <_realloc_r+0x25e>
 8017726:	4621      	mov	r1, r4
 8017728:	f7fe fc5c 	bl	8015fe4 <memmove>
 801772c:	e7e7      	b.n	80176fe <_realloc_r+0x26a>
 801772e:	4659      	mov	r1, fp
 8017730:	4650      	mov	r0, sl
 8017732:	f7fb ff99 	bl	8013668 <_malloc_r>
 8017736:	4683      	mov	fp, r0
 8017738:	b918      	cbnz	r0, 8017742 <_realloc_r+0x2ae>
 801773a:	4650      	mov	r0, sl
 801773c:	f7fc f9d4 	bl	8013ae8 <__malloc_unlock>
 8017740:	e6c7      	b.n	80174d2 <_realloc_r+0x3e>
 8017742:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017746:	f023 0301 	bic.w	r3, r3, #1
 801774a:	444b      	add	r3, r9
 801774c:	f1a0 0208 	sub.w	r2, r0, #8
 8017750:	4293      	cmp	r3, r2
 8017752:	d107      	bne.n	8017764 <_realloc_r+0x2d0>
 8017754:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8017758:	f027 0703 	bic.w	r7, r7, #3
 801775c:	4437      	add	r7, r6
 801775e:	e6f8      	b.n	8017552 <_realloc_r+0xbe>
 8017760:	20000374 	.word	0x20000374
 8017764:	1f32      	subs	r2, r6, #4
 8017766:	2a24      	cmp	r2, #36	@ 0x24
 8017768:	d82d      	bhi.n	80177c6 <_realloc_r+0x332>
 801776a:	2a13      	cmp	r2, #19
 801776c:	d928      	bls.n	80177c0 <_realloc_r+0x32c>
 801776e:	6823      	ldr	r3, [r4, #0]
 8017770:	6003      	str	r3, [r0, #0]
 8017772:	6863      	ldr	r3, [r4, #4]
 8017774:	6043      	str	r3, [r0, #4]
 8017776:	2a1b      	cmp	r2, #27
 8017778:	d80e      	bhi.n	8017798 <_realloc_r+0x304>
 801777a:	f104 0208 	add.w	r2, r4, #8
 801777e:	f100 0308 	add.w	r3, r0, #8
 8017782:	6811      	ldr	r1, [r2, #0]
 8017784:	6019      	str	r1, [r3, #0]
 8017786:	6851      	ldr	r1, [r2, #4]
 8017788:	6059      	str	r1, [r3, #4]
 801778a:	6892      	ldr	r2, [r2, #8]
 801778c:	609a      	str	r2, [r3, #8]
 801778e:	4621      	mov	r1, r4
 8017790:	4650      	mov	r0, sl
 8017792:	f7fb fea9 	bl	80134e8 <_free_r>
 8017796:	e73f      	b.n	8017618 <_realloc_r+0x184>
 8017798:	68a3      	ldr	r3, [r4, #8]
 801779a:	6083      	str	r3, [r0, #8]
 801779c:	68e3      	ldr	r3, [r4, #12]
 801779e:	60c3      	str	r3, [r0, #12]
 80177a0:	2a24      	cmp	r2, #36	@ 0x24
 80177a2:	bf01      	itttt	eq
 80177a4:	6923      	ldreq	r3, [r4, #16]
 80177a6:	6103      	streq	r3, [r0, #16]
 80177a8:	6961      	ldreq	r1, [r4, #20]
 80177aa:	6141      	streq	r1, [r0, #20]
 80177ac:	bf19      	ittee	ne
 80177ae:	f104 0210 	addne.w	r2, r4, #16
 80177b2:	f100 0310 	addne.w	r3, r0, #16
 80177b6:	f104 0218 	addeq.w	r2, r4, #24
 80177ba:	f100 0318 	addeq.w	r3, r0, #24
 80177be:	e7e0      	b.n	8017782 <_realloc_r+0x2ee>
 80177c0:	4603      	mov	r3, r0
 80177c2:	4622      	mov	r2, r4
 80177c4:	e7dd      	b.n	8017782 <_realloc_r+0x2ee>
 80177c6:	4621      	mov	r1, r4
 80177c8:	f7fe fc0c 	bl	8015fe4 <memmove>
 80177cc:	e7df      	b.n	801778e <_realloc_r+0x2fa>
 80177ce:	4637      	mov	r7, r6
 80177d0:	e6bf      	b.n	8017552 <_realloc_r+0xbe>
 80177d2:	431f      	orrs	r7, r3
 80177d4:	f8c9 7004 	str.w	r7, [r9, #4]
 80177d8:	6853      	ldr	r3, [r2, #4]
 80177da:	f043 0301 	orr.w	r3, r3, #1
 80177de:	6053      	str	r3, [r2, #4]
 80177e0:	e6d3      	b.n	801758a <_realloc_r+0xf6>
 80177e2:	bf00      	nop

080177e4 <__ascii_wctomb>:
 80177e4:	4603      	mov	r3, r0
 80177e6:	4608      	mov	r0, r1
 80177e8:	b141      	cbz	r1, 80177fc <__ascii_wctomb+0x18>
 80177ea:	2aff      	cmp	r2, #255	@ 0xff
 80177ec:	d904      	bls.n	80177f8 <__ascii_wctomb+0x14>
 80177ee:	228a      	movs	r2, #138	@ 0x8a
 80177f0:	601a      	str	r2, [r3, #0]
 80177f2:	f04f 30ff 	mov.w	r0, #4294967295
 80177f6:	4770      	bx	lr
 80177f8:	700a      	strb	r2, [r1, #0]
 80177fa:	2001      	movs	r0, #1
 80177fc:	4770      	bx	lr
	...

08017800 <_wcrtomb_r>:
 8017800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017802:	4c09      	ldr	r4, [pc, #36]	@ (8017828 <_wcrtomb_r+0x28>)
 8017804:	b085      	sub	sp, #20
 8017806:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 801780a:	4605      	mov	r5, r0
 801780c:	461e      	mov	r6, r3
 801780e:	b909      	cbnz	r1, 8017814 <_wcrtomb_r+0x14>
 8017810:	460a      	mov	r2, r1
 8017812:	a901      	add	r1, sp, #4
 8017814:	47b8      	blx	r7
 8017816:	1c43      	adds	r3, r0, #1
 8017818:	bf01      	itttt	eq
 801781a:	2300      	moveq	r3, #0
 801781c:	6033      	streq	r3, [r6, #0]
 801781e:	238a      	moveq	r3, #138	@ 0x8a
 8017820:	602b      	streq	r3, [r5, #0]
 8017822:	b005      	add	sp, #20
 8017824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017826:	bf00      	nop
 8017828:	2000077c 	.word	0x2000077c

0801782c <__swhatbuf_r>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	460c      	mov	r4, r1
 8017830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017834:	2900      	cmp	r1, #0
 8017836:	b096      	sub	sp, #88	@ 0x58
 8017838:	4615      	mov	r5, r2
 801783a:	461e      	mov	r6, r3
 801783c:	da07      	bge.n	801784e <__swhatbuf_r+0x22>
 801783e:	89a1      	ldrh	r1, [r4, #12]
 8017840:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8017844:	d117      	bne.n	8017876 <__swhatbuf_r+0x4a>
 8017846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801784a:	4608      	mov	r0, r1
 801784c:	e00f      	b.n	801786e <__swhatbuf_r+0x42>
 801784e:	466a      	mov	r2, sp
 8017850:	f000 f89a 	bl	8017988 <_fstat_r>
 8017854:	2800      	cmp	r0, #0
 8017856:	dbf2      	blt.n	801783e <__swhatbuf_r+0x12>
 8017858:	9901      	ldr	r1, [sp, #4]
 801785a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801785e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017862:	4259      	negs	r1, r3
 8017864:	4159      	adcs	r1, r3
 8017866:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801786a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801786e:	6031      	str	r1, [r6, #0]
 8017870:	602b      	str	r3, [r5, #0]
 8017872:	b016      	add	sp, #88	@ 0x58
 8017874:	bd70      	pop	{r4, r5, r6, pc}
 8017876:	2100      	movs	r1, #0
 8017878:	2340      	movs	r3, #64	@ 0x40
 801787a:	e7e6      	b.n	801784a <__swhatbuf_r+0x1e>

0801787c <__smakebuf_r>:
 801787c:	898b      	ldrh	r3, [r1, #12]
 801787e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017880:	079d      	lsls	r5, r3, #30
 8017882:	4606      	mov	r6, r0
 8017884:	460c      	mov	r4, r1
 8017886:	d507      	bpl.n	8017898 <__smakebuf_r+0x1c>
 8017888:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 801788c:	6023      	str	r3, [r4, #0]
 801788e:	6123      	str	r3, [r4, #16]
 8017890:	2301      	movs	r3, #1
 8017892:	6163      	str	r3, [r4, #20]
 8017894:	b003      	add	sp, #12
 8017896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017898:	ab01      	add	r3, sp, #4
 801789a:	466a      	mov	r2, sp
 801789c:	f7ff ffc6 	bl	801782c <__swhatbuf_r>
 80178a0:	9f00      	ldr	r7, [sp, #0]
 80178a2:	4605      	mov	r5, r0
 80178a4:	4639      	mov	r1, r7
 80178a6:	4630      	mov	r0, r6
 80178a8:	f7fb fede 	bl	8013668 <_malloc_r>
 80178ac:	b948      	cbnz	r0, 80178c2 <__smakebuf_r+0x46>
 80178ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178b2:	059a      	lsls	r2, r3, #22
 80178b4:	d4ee      	bmi.n	8017894 <__smakebuf_r+0x18>
 80178b6:	f023 0303 	bic.w	r3, r3, #3
 80178ba:	f043 0302 	orr.w	r3, r3, #2
 80178be:	81a3      	strh	r3, [r4, #12]
 80178c0:	e7e2      	b.n	8017888 <__smakebuf_r+0xc>
 80178c2:	89a3      	ldrh	r3, [r4, #12]
 80178c4:	6020      	str	r0, [r4, #0]
 80178c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178ca:	81a3      	strh	r3, [r4, #12]
 80178cc:	9b01      	ldr	r3, [sp, #4]
 80178ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80178d2:	b15b      	cbz	r3, 80178ec <__smakebuf_r+0x70>
 80178d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178d8:	4630      	mov	r0, r6
 80178da:	f000 f867 	bl	80179ac <_isatty_r>
 80178de:	b128      	cbz	r0, 80178ec <__smakebuf_r+0x70>
 80178e0:	89a3      	ldrh	r3, [r4, #12]
 80178e2:	f023 0303 	bic.w	r3, r3, #3
 80178e6:	f043 0301 	orr.w	r3, r3, #1
 80178ea:	81a3      	strh	r3, [r4, #12]
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	431d      	orrs	r5, r3
 80178f0:	81a5      	strh	r5, [r4, #12]
 80178f2:	e7cf      	b.n	8017894 <__smakebuf_r+0x18>

080178f4 <__swbuf_r>:
 80178f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178f6:	460e      	mov	r6, r1
 80178f8:	4614      	mov	r4, r2
 80178fa:	4605      	mov	r5, r0
 80178fc:	b118      	cbz	r0, 8017906 <__swbuf_r+0x12>
 80178fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017900:	b90b      	cbnz	r3, 8017906 <__swbuf_r+0x12>
 8017902:	f7fb fc27 	bl	8013154 <__sinit>
 8017906:	69a3      	ldr	r3, [r4, #24]
 8017908:	60a3      	str	r3, [r4, #8]
 801790a:	89a3      	ldrh	r3, [r4, #12]
 801790c:	0719      	lsls	r1, r3, #28
 801790e:	d501      	bpl.n	8017914 <__swbuf_r+0x20>
 8017910:	6923      	ldr	r3, [r4, #16]
 8017912:	b943      	cbnz	r3, 8017926 <__swbuf_r+0x32>
 8017914:	4621      	mov	r1, r4
 8017916:	4628      	mov	r0, r5
 8017918:	f7fe faa4 	bl	8015e64 <__swsetup_r>
 801791c:	b118      	cbz	r0, 8017926 <__swbuf_r+0x32>
 801791e:	f04f 37ff 	mov.w	r7, #4294967295
 8017922:	4638      	mov	r0, r7
 8017924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801792a:	b2f6      	uxtb	r6, r6
 801792c:	049a      	lsls	r2, r3, #18
 801792e:	4637      	mov	r7, r6
 8017930:	d406      	bmi.n	8017940 <__swbuf_r+0x4c>
 8017932:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017936:	81a3      	strh	r3, [r4, #12]
 8017938:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801793a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801793e:	6663      	str	r3, [r4, #100]	@ 0x64
 8017940:	6823      	ldr	r3, [r4, #0]
 8017942:	6922      	ldr	r2, [r4, #16]
 8017944:	1a98      	subs	r0, r3, r2
 8017946:	6963      	ldr	r3, [r4, #20]
 8017948:	4283      	cmp	r3, r0
 801794a:	dc05      	bgt.n	8017958 <__swbuf_r+0x64>
 801794c:	4621      	mov	r1, r4
 801794e:	4628      	mov	r0, r5
 8017950:	f7fe f916 	bl	8015b80 <_fflush_r>
 8017954:	2800      	cmp	r0, #0
 8017956:	d1e2      	bne.n	801791e <__swbuf_r+0x2a>
 8017958:	68a3      	ldr	r3, [r4, #8]
 801795a:	3b01      	subs	r3, #1
 801795c:	60a3      	str	r3, [r4, #8]
 801795e:	6823      	ldr	r3, [r4, #0]
 8017960:	1c5a      	adds	r2, r3, #1
 8017962:	6022      	str	r2, [r4, #0]
 8017964:	701e      	strb	r6, [r3, #0]
 8017966:	6962      	ldr	r2, [r4, #20]
 8017968:	1c43      	adds	r3, r0, #1
 801796a:	429a      	cmp	r2, r3
 801796c:	d004      	beq.n	8017978 <__swbuf_r+0x84>
 801796e:	89a3      	ldrh	r3, [r4, #12]
 8017970:	07db      	lsls	r3, r3, #31
 8017972:	d5d6      	bpl.n	8017922 <__swbuf_r+0x2e>
 8017974:	2e0a      	cmp	r6, #10
 8017976:	d1d4      	bne.n	8017922 <__swbuf_r+0x2e>
 8017978:	4621      	mov	r1, r4
 801797a:	4628      	mov	r0, r5
 801797c:	f7fe f900 	bl	8015b80 <_fflush_r>
 8017980:	2800      	cmp	r0, #0
 8017982:	d0ce      	beq.n	8017922 <__swbuf_r+0x2e>
 8017984:	e7cb      	b.n	801791e <__swbuf_r+0x2a>
	...

08017988 <_fstat_r>:
 8017988:	b538      	push	{r3, r4, r5, lr}
 801798a:	4d07      	ldr	r5, [pc, #28]	@ (80179a8 <_fstat_r+0x20>)
 801798c:	2300      	movs	r3, #0
 801798e:	4604      	mov	r4, r0
 8017990:	4608      	mov	r0, r1
 8017992:	4611      	mov	r1, r2
 8017994:	602b      	str	r3, [r5, #0]
 8017996:	f7ed fe37 	bl	8005608 <_fstat>
 801799a:	1c43      	adds	r3, r0, #1
 801799c:	d102      	bne.n	80179a4 <_fstat_r+0x1c>
 801799e:	682b      	ldr	r3, [r5, #0]
 80179a0:	b103      	cbz	r3, 80179a4 <_fstat_r+0x1c>
 80179a2:	6023      	str	r3, [r4, #0]
 80179a4:	bd38      	pop	{r3, r4, r5, pc}
 80179a6:	bf00      	nop
 80179a8:	2000754c 	.word	0x2000754c

080179ac <_isatty_r>:
 80179ac:	b538      	push	{r3, r4, r5, lr}
 80179ae:	4d06      	ldr	r5, [pc, #24]	@ (80179c8 <_isatty_r+0x1c>)
 80179b0:	2300      	movs	r3, #0
 80179b2:	4604      	mov	r4, r0
 80179b4:	4608      	mov	r0, r1
 80179b6:	602b      	str	r3, [r5, #0]
 80179b8:	f7ed fe36 	bl	8005628 <_isatty>
 80179bc:	1c43      	adds	r3, r0, #1
 80179be:	d102      	bne.n	80179c6 <_isatty_r+0x1a>
 80179c0:	682b      	ldr	r3, [r5, #0]
 80179c2:	b103      	cbz	r3, 80179c6 <_isatty_r+0x1a>
 80179c4:	6023      	str	r3, [r4, #0]
 80179c6:	bd38      	pop	{r3, r4, r5, pc}
 80179c8:	2000754c 	.word	0x2000754c

080179cc <__assert_func>:
 80179cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179ce:	4614      	mov	r4, r2
 80179d0:	461a      	mov	r2, r3
 80179d2:	4b09      	ldr	r3, [pc, #36]	@ (80179f8 <__assert_func+0x2c>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	4605      	mov	r5, r0
 80179d8:	68d8      	ldr	r0, [r3, #12]
 80179da:	b954      	cbnz	r4, 80179f2 <__assert_func+0x26>
 80179dc:	4b07      	ldr	r3, [pc, #28]	@ (80179fc <__assert_func+0x30>)
 80179de:	461c      	mov	r4, r3
 80179e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179e4:	9100      	str	r1, [sp, #0]
 80179e6:	462b      	mov	r3, r5
 80179e8:	4905      	ldr	r1, [pc, #20]	@ (8017a00 <__assert_func+0x34>)
 80179ea:	f000 f843 	bl	8017a74 <fiprintf>
 80179ee:	f000 f853 	bl	8017a98 <abort>
 80179f2:	4b04      	ldr	r3, [pc, #16]	@ (8017a04 <__assert_func+0x38>)
 80179f4:	e7f4      	b.n	80179e0 <__assert_func+0x14>
 80179f6:	bf00      	nop
 80179f8:	20000240 	.word	0x20000240
 80179fc:	08018cfc 	.word	0x08018cfc
 8017a00:	08018cce 	.word	0x08018cce
 8017a04:	08018cc1 	.word	0x08018cc1

08017a08 <_calloc_r>:
 8017a08:	b538      	push	{r3, r4, r5, lr}
 8017a0a:	fba1 1502 	umull	r1, r5, r1, r2
 8017a0e:	b935      	cbnz	r5, 8017a1e <_calloc_r+0x16>
 8017a10:	f7fb fe2a 	bl	8013668 <_malloc_r>
 8017a14:	4604      	mov	r4, r0
 8017a16:	b938      	cbnz	r0, 8017a28 <_calloc_r+0x20>
 8017a18:	2400      	movs	r4, #0
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	bd38      	pop	{r3, r4, r5, pc}
 8017a1e:	f7fb fcc1 	bl	80133a4 <__errno>
 8017a22:	230c      	movs	r3, #12
 8017a24:	6003      	str	r3, [r0, #0]
 8017a26:	e7f7      	b.n	8017a18 <_calloc_r+0x10>
 8017a28:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017a2c:	f022 0203 	bic.w	r2, r2, #3
 8017a30:	3a04      	subs	r2, #4
 8017a32:	2a24      	cmp	r2, #36	@ 0x24
 8017a34:	d819      	bhi.n	8017a6a <_calloc_r+0x62>
 8017a36:	2a13      	cmp	r2, #19
 8017a38:	d915      	bls.n	8017a66 <_calloc_r+0x5e>
 8017a3a:	2a1b      	cmp	r2, #27
 8017a3c:	e9c0 5500 	strd	r5, r5, [r0]
 8017a40:	d806      	bhi.n	8017a50 <_calloc_r+0x48>
 8017a42:	f100 0308 	add.w	r3, r0, #8
 8017a46:	2200      	movs	r2, #0
 8017a48:	e9c3 2200 	strd	r2, r2, [r3]
 8017a4c:	609a      	str	r2, [r3, #8]
 8017a4e:	e7e4      	b.n	8017a1a <_calloc_r+0x12>
 8017a50:	2a24      	cmp	r2, #36	@ 0x24
 8017a52:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8017a56:	bf11      	iteee	ne
 8017a58:	f100 0310 	addne.w	r3, r0, #16
 8017a5c:	6105      	streq	r5, [r0, #16]
 8017a5e:	f100 0318 	addeq.w	r3, r0, #24
 8017a62:	6145      	streq	r5, [r0, #20]
 8017a64:	e7ef      	b.n	8017a46 <_calloc_r+0x3e>
 8017a66:	4603      	mov	r3, r0
 8017a68:	e7ed      	b.n	8017a46 <_calloc_r+0x3e>
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	f7fb fc4b 	bl	8013306 <memset>
 8017a70:	e7d3      	b.n	8017a1a <_calloc_r+0x12>
	...

08017a74 <fiprintf>:
 8017a74:	b40e      	push	{r1, r2, r3}
 8017a76:	b503      	push	{r0, r1, lr}
 8017a78:	4601      	mov	r1, r0
 8017a7a:	ab03      	add	r3, sp, #12
 8017a7c:	4805      	ldr	r0, [pc, #20]	@ (8017a94 <fiprintf+0x20>)
 8017a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a82:	6800      	ldr	r0, [r0, #0]
 8017a84:	9301      	str	r3, [sp, #4]
 8017a86:	f7fd fad5 	bl	8015034 <_vfiprintf_r>
 8017a8a:	b002      	add	sp, #8
 8017a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a90:	b003      	add	sp, #12
 8017a92:	4770      	bx	lr
 8017a94:	20000240 	.word	0x20000240

08017a98 <abort>:
 8017a98:	b508      	push	{r3, lr}
 8017a9a:	2006      	movs	r0, #6
 8017a9c:	f000 f82c 	bl	8017af8 <raise>
 8017aa0:	2001      	movs	r0, #1
 8017aa2:	f7ed fd7d 	bl	80055a0 <_exit>

08017aa6 <_raise_r>:
 8017aa6:	291f      	cmp	r1, #31
 8017aa8:	b538      	push	{r3, r4, r5, lr}
 8017aaa:	4605      	mov	r5, r0
 8017aac:	460c      	mov	r4, r1
 8017aae:	d904      	bls.n	8017aba <_raise_r+0x14>
 8017ab0:	2316      	movs	r3, #22
 8017ab2:	6003      	str	r3, [r0, #0]
 8017ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab8:	bd38      	pop	{r3, r4, r5, pc}
 8017aba:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8017abe:	b112      	cbz	r2, 8017ac6 <_raise_r+0x20>
 8017ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ac4:	b94b      	cbnz	r3, 8017ada <_raise_r+0x34>
 8017ac6:	4628      	mov	r0, r5
 8017ac8:	f000 f830 	bl	8017b2c <_getpid_r>
 8017acc:	4622      	mov	r2, r4
 8017ace:	4601      	mov	r1, r0
 8017ad0:	4628      	mov	r0, r5
 8017ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ad6:	f000 b817 	b.w	8017b08 <_kill_r>
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d00a      	beq.n	8017af4 <_raise_r+0x4e>
 8017ade:	1c59      	adds	r1, r3, #1
 8017ae0:	d103      	bne.n	8017aea <_raise_r+0x44>
 8017ae2:	2316      	movs	r3, #22
 8017ae4:	6003      	str	r3, [r0, #0]
 8017ae6:	2001      	movs	r0, #1
 8017ae8:	e7e6      	b.n	8017ab8 <_raise_r+0x12>
 8017aea:	2100      	movs	r1, #0
 8017aec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017af0:	4620      	mov	r0, r4
 8017af2:	4798      	blx	r3
 8017af4:	2000      	movs	r0, #0
 8017af6:	e7df      	b.n	8017ab8 <_raise_r+0x12>

08017af8 <raise>:
 8017af8:	4b02      	ldr	r3, [pc, #8]	@ (8017b04 <raise+0xc>)
 8017afa:	4601      	mov	r1, r0
 8017afc:	6818      	ldr	r0, [r3, #0]
 8017afe:	f7ff bfd2 	b.w	8017aa6 <_raise_r>
 8017b02:	bf00      	nop
 8017b04:	20000240 	.word	0x20000240

08017b08 <_kill_r>:
 8017b08:	b538      	push	{r3, r4, r5, lr}
 8017b0a:	4d07      	ldr	r5, [pc, #28]	@ (8017b28 <_kill_r+0x20>)
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	4604      	mov	r4, r0
 8017b10:	4608      	mov	r0, r1
 8017b12:	4611      	mov	r1, r2
 8017b14:	602b      	str	r3, [r5, #0]
 8017b16:	f7ed fd33 	bl	8005580 <_kill>
 8017b1a:	1c43      	adds	r3, r0, #1
 8017b1c:	d102      	bne.n	8017b24 <_kill_r+0x1c>
 8017b1e:	682b      	ldr	r3, [r5, #0]
 8017b20:	b103      	cbz	r3, 8017b24 <_kill_r+0x1c>
 8017b22:	6023      	str	r3, [r4, #0]
 8017b24:	bd38      	pop	{r3, r4, r5, pc}
 8017b26:	bf00      	nop
 8017b28:	2000754c 	.word	0x2000754c

08017b2c <_getpid_r>:
 8017b2c:	f7ed bd20 	b.w	8005570 <_getpid>

08017b30 <_init>:
 8017b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b32:	bf00      	nop
 8017b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b36:	bc08      	pop	{r3}
 8017b38:	469e      	mov	lr, r3
 8017b3a:	4770      	bx	lr

08017b3c <_fini>:
 8017b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b3e:	bf00      	nop
 8017b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b42:	bc08      	pop	{r3}
 8017b44:	469e      	mov	lr, r3
 8017b46:	4770      	bx	lr
