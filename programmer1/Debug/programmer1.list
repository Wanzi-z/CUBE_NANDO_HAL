
programmer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014710  08022190  08022190  00002190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a4  080368a0  080368a0  000168a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037944  08037944  0002092c  2**0
                  CONTENTS
  4 .ARM          00000008  08037944  08037944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803794c  0803794c  0002092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803794c  0803794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037954  08037954  00017954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000092c  20000000  08037958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002092c  2**0
                  CONTENTS
 10 .bss          0000868c  20000930  20000930  00020930  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  20008fbc  20008fbc  00020930  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002092c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002095c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026991  00000000  00000000  0002099f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006c0b  00000000  00000000  00047330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002138  00000000  00000000  0004df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000193e  00000000  00000000  00050078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa5c  00000000  00000000  000519b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002da74  00000000  00000000  0007c412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfc07  00000000  00000000  000a9e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009a04  00000000  00000000  00189a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00193494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08022190 <__do_global_dtors_aux>:
 8022190:	b510      	push	{r4, lr}
 8022192:	4c05      	ldr	r4, [pc, #20]	; (80221a8 <__do_global_dtors_aux+0x18>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	b933      	cbnz	r3, 80221a6 <__do_global_dtors_aux+0x16>
 8022198:	4b04      	ldr	r3, [pc, #16]	; (80221ac <__do_global_dtors_aux+0x1c>)
 802219a:	b113      	cbz	r3, 80221a2 <__do_global_dtors_aux+0x12>
 802219c:	4804      	ldr	r0, [pc, #16]	; (80221b0 <__do_global_dtors_aux+0x20>)
 802219e:	f3af 8000 	nop.w
 80221a2:	2301      	movs	r3, #1
 80221a4:	7023      	strb	r3, [r4, #0]
 80221a6:	bd10      	pop	{r4, pc}
 80221a8:	20000930 	.word	0x20000930
 80221ac:	00000000 	.word	0x00000000
 80221b0:	08036888 	.word	0x08036888

080221b4 <frame_dummy>:
 80221b4:	b508      	push	{r3, lr}
 80221b6:	4b03      	ldr	r3, [pc, #12]	; (80221c4 <frame_dummy+0x10>)
 80221b8:	b11b      	cbz	r3, 80221c2 <frame_dummy+0xe>
 80221ba:	4903      	ldr	r1, [pc, #12]	; (80221c8 <frame_dummy+0x14>)
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <frame_dummy+0x18>)
 80221be:	f3af 8000 	nop.w
 80221c2:	bd08      	pop	{r3, pc}
 80221c4:	00000000 	.word	0x00000000
 80221c8:	20000934 	.word	0x20000934
 80221cc:	08036888 	.word	0x08036888

080221d0 <strlen>:
 80221d0:	4603      	mov	r3, r0
 80221d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80221d6:	2a00      	cmp	r2, #0
 80221d8:	d1fb      	bne.n	80221d2 <strlen+0x2>
 80221da:	1a18      	subs	r0, r3, r0
 80221dc:	3801      	subs	r0, #1
 80221de:	4770      	bx	lr

080221e0 <memchr>:
 80221e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80221e4:	2a10      	cmp	r2, #16
 80221e6:	db2b      	blt.n	8022240 <memchr+0x60>
 80221e8:	f010 0f07 	tst.w	r0, #7
 80221ec:	d008      	beq.n	8022200 <memchr+0x20>
 80221ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80221f2:	3a01      	subs	r2, #1
 80221f4:	428b      	cmp	r3, r1
 80221f6:	d02d      	beq.n	8022254 <memchr+0x74>
 80221f8:	f010 0f07 	tst.w	r0, #7
 80221fc:	b342      	cbz	r2, 8022250 <memchr+0x70>
 80221fe:	d1f6      	bne.n	80221ee <memchr+0xe>
 8022200:	b4f0      	push	{r4, r5, r6, r7}
 8022202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8022206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802220a:	f022 0407 	bic.w	r4, r2, #7
 802220e:	f07f 0700 	mvns.w	r7, #0
 8022212:	2300      	movs	r3, #0
 8022214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022218:	3c08      	subs	r4, #8
 802221a:	ea85 0501 	eor.w	r5, r5, r1
 802221e:	ea86 0601 	eor.w	r6, r6, r1
 8022222:	fa85 f547 	uadd8	r5, r5, r7
 8022226:	faa3 f587 	sel	r5, r3, r7
 802222a:	fa86 f647 	uadd8	r6, r6, r7
 802222e:	faa5 f687 	sel	r6, r5, r7
 8022232:	b98e      	cbnz	r6, 8022258 <memchr+0x78>
 8022234:	d1ee      	bne.n	8022214 <memchr+0x34>
 8022236:	bcf0      	pop	{r4, r5, r6, r7}
 8022238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802223c:	f002 0207 	and.w	r2, r2, #7
 8022240:	b132      	cbz	r2, 8022250 <memchr+0x70>
 8022242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022246:	3a01      	subs	r2, #1
 8022248:	ea83 0301 	eor.w	r3, r3, r1
 802224c:	b113      	cbz	r3, 8022254 <memchr+0x74>
 802224e:	d1f8      	bne.n	8022242 <memchr+0x62>
 8022250:	2000      	movs	r0, #0
 8022252:	4770      	bx	lr
 8022254:	3801      	subs	r0, #1
 8022256:	4770      	bx	lr
 8022258:	2d00      	cmp	r5, #0
 802225a:	bf06      	itte	eq
 802225c:	4635      	moveq	r5, r6
 802225e:	3803      	subeq	r0, #3
 8022260:	3807      	subne	r0, #7
 8022262:	f015 0f01 	tst.w	r5, #1
 8022266:	d107      	bne.n	8022278 <memchr+0x98>
 8022268:	3001      	adds	r0, #1
 802226a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802226e:	bf02      	ittt	eq
 8022270:	3001      	addeq	r0, #1
 8022272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8022276:	3001      	addeq	r0, #1
 8022278:	bcf0      	pop	{r4, r5, r6, r7}
 802227a:	3801      	subs	r0, #1
 802227c:	4770      	bx	lr
 802227e:	bf00      	nop

08022280 <__aeabi_drsub>:
 8022280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8022284:	e002      	b.n	802228c <__adddf3>
 8022286:	bf00      	nop

08022288 <__aeabi_dsub>:
 8022288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802228c <__adddf3>:
 802228c:	b530      	push	{r4, r5, lr}
 802228e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8022292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8022296:	ea94 0f05 	teq	r4, r5
 802229a:	bf08      	it	eq
 802229c:	ea90 0f02 	teqeq	r0, r2
 80222a0:	bf1f      	itttt	ne
 80222a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80222a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80222aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80222ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80222b2:	f000 80e2 	beq.w	802247a <__adddf3+0x1ee>
 80222b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80222ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80222be:	bfb8      	it	lt
 80222c0:	426d      	neglt	r5, r5
 80222c2:	dd0c      	ble.n	80222de <__adddf3+0x52>
 80222c4:	442c      	add	r4, r5
 80222c6:	ea80 0202 	eor.w	r2, r0, r2
 80222ca:	ea81 0303 	eor.w	r3, r1, r3
 80222ce:	ea82 0000 	eor.w	r0, r2, r0
 80222d2:	ea83 0101 	eor.w	r1, r3, r1
 80222d6:	ea80 0202 	eor.w	r2, r0, r2
 80222da:	ea81 0303 	eor.w	r3, r1, r3
 80222de:	2d36      	cmp	r5, #54	; 0x36
 80222e0:	bf88      	it	hi
 80222e2:	bd30      	pophi	{r4, r5, pc}
 80222e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80222e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80222ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80222f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80222f4:	d002      	beq.n	80222fc <__adddf3+0x70>
 80222f6:	4240      	negs	r0, r0
 80222f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80222fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8022300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8022304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8022308:	d002      	beq.n	8022310 <__adddf3+0x84>
 802230a:	4252      	negs	r2, r2
 802230c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8022310:	ea94 0f05 	teq	r4, r5
 8022314:	f000 80a7 	beq.w	8022466 <__adddf3+0x1da>
 8022318:	f1a4 0401 	sub.w	r4, r4, #1
 802231c:	f1d5 0e20 	rsbs	lr, r5, #32
 8022320:	db0d      	blt.n	802233e <__adddf3+0xb2>
 8022322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8022326:	fa22 f205 	lsr.w	r2, r2, r5
 802232a:	1880      	adds	r0, r0, r2
 802232c:	f141 0100 	adc.w	r1, r1, #0
 8022330:	fa03 f20e 	lsl.w	r2, r3, lr
 8022334:	1880      	adds	r0, r0, r2
 8022336:	fa43 f305 	asr.w	r3, r3, r5
 802233a:	4159      	adcs	r1, r3
 802233c:	e00e      	b.n	802235c <__adddf3+0xd0>
 802233e:	f1a5 0520 	sub.w	r5, r5, #32
 8022342:	f10e 0e20 	add.w	lr, lr, #32
 8022346:	2a01      	cmp	r2, #1
 8022348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802234c:	bf28      	it	cs
 802234e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8022352:	fa43 f305 	asr.w	r3, r3, r5
 8022356:	18c0      	adds	r0, r0, r3
 8022358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802235c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022360:	d507      	bpl.n	8022372 <__adddf3+0xe6>
 8022362:	f04f 0e00 	mov.w	lr, #0
 8022366:	f1dc 0c00 	rsbs	ip, ip, #0
 802236a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802236e:	eb6e 0101 	sbc.w	r1, lr, r1
 8022372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8022376:	d31b      	bcc.n	80223b0 <__adddf3+0x124>
 8022378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802237c:	d30c      	bcc.n	8022398 <__adddf3+0x10c>
 802237e:	0849      	lsrs	r1, r1, #1
 8022380:	ea5f 0030 	movs.w	r0, r0, rrx
 8022384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8022388:	f104 0401 	add.w	r4, r4, #1
 802238c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8022390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8022394:	f080 809a 	bcs.w	80224cc <__adddf3+0x240>
 8022398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802239c:	bf08      	it	eq
 802239e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80223a2:	f150 0000 	adcs.w	r0, r0, #0
 80223a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80223aa:	ea41 0105 	orr.w	r1, r1, r5
 80223ae:	bd30      	pop	{r4, r5, pc}
 80223b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80223b4:	4140      	adcs	r0, r0
 80223b6:	eb41 0101 	adc.w	r1, r1, r1
 80223ba:	3c01      	subs	r4, #1
 80223bc:	bf28      	it	cs
 80223be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80223c2:	d2e9      	bcs.n	8022398 <__adddf3+0x10c>
 80223c4:	f091 0f00 	teq	r1, #0
 80223c8:	bf04      	itt	eq
 80223ca:	4601      	moveq	r1, r0
 80223cc:	2000      	moveq	r0, #0
 80223ce:	fab1 f381 	clz	r3, r1
 80223d2:	bf08      	it	eq
 80223d4:	3320      	addeq	r3, #32
 80223d6:	f1a3 030b 	sub.w	r3, r3, #11
 80223da:	f1b3 0220 	subs.w	r2, r3, #32
 80223de:	da0c      	bge.n	80223fa <__adddf3+0x16e>
 80223e0:	320c      	adds	r2, #12
 80223e2:	dd08      	ble.n	80223f6 <__adddf3+0x16a>
 80223e4:	f102 0c14 	add.w	ip, r2, #20
 80223e8:	f1c2 020c 	rsb	r2, r2, #12
 80223ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80223f0:	fa21 f102 	lsr.w	r1, r1, r2
 80223f4:	e00c      	b.n	8022410 <__adddf3+0x184>
 80223f6:	f102 0214 	add.w	r2, r2, #20
 80223fa:	bfd8      	it	le
 80223fc:	f1c2 0c20 	rsble	ip, r2, #32
 8022400:	fa01 f102 	lsl.w	r1, r1, r2
 8022404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8022408:	bfdc      	itt	le
 802240a:	ea41 010c 	orrle.w	r1, r1, ip
 802240e:	4090      	lslle	r0, r2
 8022410:	1ae4      	subs	r4, r4, r3
 8022412:	bfa2      	ittt	ge
 8022414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8022418:	4329      	orrge	r1, r5
 802241a:	bd30      	popge	{r4, r5, pc}
 802241c:	ea6f 0404 	mvn.w	r4, r4
 8022420:	3c1f      	subs	r4, #31
 8022422:	da1c      	bge.n	802245e <__adddf3+0x1d2>
 8022424:	340c      	adds	r4, #12
 8022426:	dc0e      	bgt.n	8022446 <__adddf3+0x1ba>
 8022428:	f104 0414 	add.w	r4, r4, #20
 802242c:	f1c4 0220 	rsb	r2, r4, #32
 8022430:	fa20 f004 	lsr.w	r0, r0, r4
 8022434:	fa01 f302 	lsl.w	r3, r1, r2
 8022438:	ea40 0003 	orr.w	r0, r0, r3
 802243c:	fa21 f304 	lsr.w	r3, r1, r4
 8022440:	ea45 0103 	orr.w	r1, r5, r3
 8022444:	bd30      	pop	{r4, r5, pc}
 8022446:	f1c4 040c 	rsb	r4, r4, #12
 802244a:	f1c4 0220 	rsb	r2, r4, #32
 802244e:	fa20 f002 	lsr.w	r0, r0, r2
 8022452:	fa01 f304 	lsl.w	r3, r1, r4
 8022456:	ea40 0003 	orr.w	r0, r0, r3
 802245a:	4629      	mov	r1, r5
 802245c:	bd30      	pop	{r4, r5, pc}
 802245e:	fa21 f004 	lsr.w	r0, r1, r4
 8022462:	4629      	mov	r1, r5
 8022464:	bd30      	pop	{r4, r5, pc}
 8022466:	f094 0f00 	teq	r4, #0
 802246a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802246e:	bf06      	itte	eq
 8022470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8022474:	3401      	addeq	r4, #1
 8022476:	3d01      	subne	r5, #1
 8022478:	e74e      	b.n	8022318 <__adddf3+0x8c>
 802247a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802247e:	bf18      	it	ne
 8022480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8022484:	d029      	beq.n	80224da <__adddf3+0x24e>
 8022486:	ea94 0f05 	teq	r4, r5
 802248a:	bf08      	it	eq
 802248c:	ea90 0f02 	teqeq	r0, r2
 8022490:	d005      	beq.n	802249e <__adddf3+0x212>
 8022492:	ea54 0c00 	orrs.w	ip, r4, r0
 8022496:	bf04      	itt	eq
 8022498:	4619      	moveq	r1, r3
 802249a:	4610      	moveq	r0, r2
 802249c:	bd30      	pop	{r4, r5, pc}
 802249e:	ea91 0f03 	teq	r1, r3
 80224a2:	bf1e      	ittt	ne
 80224a4:	2100      	movne	r1, #0
 80224a6:	2000      	movne	r0, #0
 80224a8:	bd30      	popne	{r4, r5, pc}
 80224aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80224ae:	d105      	bne.n	80224bc <__adddf3+0x230>
 80224b0:	0040      	lsls	r0, r0, #1
 80224b2:	4149      	adcs	r1, r1
 80224b4:	bf28      	it	cs
 80224b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80224ba:	bd30      	pop	{r4, r5, pc}
 80224bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80224c0:	bf3c      	itt	cc
 80224c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80224c6:	bd30      	popcc	{r4, r5, pc}
 80224c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80224cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80224d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80224d4:	f04f 0000 	mov.w	r0, #0
 80224d8:	bd30      	pop	{r4, r5, pc}
 80224da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80224de:	bf1a      	itte	ne
 80224e0:	4619      	movne	r1, r3
 80224e2:	4610      	movne	r0, r2
 80224e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80224e8:	bf1c      	itt	ne
 80224ea:	460b      	movne	r3, r1
 80224ec:	4602      	movne	r2, r0
 80224ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80224f2:	bf06      	itte	eq
 80224f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80224f8:	ea91 0f03 	teqeq	r1, r3
 80224fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8022500:	bd30      	pop	{r4, r5, pc}
 8022502:	bf00      	nop

08022504 <__aeabi_ui2d>:
 8022504:	f090 0f00 	teq	r0, #0
 8022508:	bf04      	itt	eq
 802250a:	2100      	moveq	r1, #0
 802250c:	4770      	bxeq	lr
 802250e:	b530      	push	{r4, r5, lr}
 8022510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8022514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8022518:	f04f 0500 	mov.w	r5, #0
 802251c:	f04f 0100 	mov.w	r1, #0
 8022520:	e750      	b.n	80223c4 <__adddf3+0x138>
 8022522:	bf00      	nop

08022524 <__aeabi_i2d>:
 8022524:	f090 0f00 	teq	r0, #0
 8022528:	bf04      	itt	eq
 802252a:	2100      	moveq	r1, #0
 802252c:	4770      	bxeq	lr
 802252e:	b530      	push	{r4, r5, lr}
 8022530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8022534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8022538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802253c:	bf48      	it	mi
 802253e:	4240      	negmi	r0, r0
 8022540:	f04f 0100 	mov.w	r1, #0
 8022544:	e73e      	b.n	80223c4 <__adddf3+0x138>
 8022546:	bf00      	nop

08022548 <__aeabi_f2d>:
 8022548:	0042      	lsls	r2, r0, #1
 802254a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802254e:	ea4f 0131 	mov.w	r1, r1, rrx
 8022552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8022556:	bf1f      	itttt	ne
 8022558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802255c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8022560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8022564:	4770      	bxne	lr
 8022566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802256a:	bf08      	it	eq
 802256c:	4770      	bxeq	lr
 802256e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8022572:	bf04      	itt	eq
 8022574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8022578:	4770      	bxeq	lr
 802257a:	b530      	push	{r4, r5, lr}
 802257c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8022580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8022584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022588:	e71c      	b.n	80223c4 <__adddf3+0x138>
 802258a:	bf00      	nop

0802258c <__aeabi_ul2d>:
 802258c:	ea50 0201 	orrs.w	r2, r0, r1
 8022590:	bf08      	it	eq
 8022592:	4770      	bxeq	lr
 8022594:	b530      	push	{r4, r5, lr}
 8022596:	f04f 0500 	mov.w	r5, #0
 802259a:	e00a      	b.n	80225b2 <__aeabi_l2d+0x16>

0802259c <__aeabi_l2d>:
 802259c:	ea50 0201 	orrs.w	r2, r0, r1
 80225a0:	bf08      	it	eq
 80225a2:	4770      	bxeq	lr
 80225a4:	b530      	push	{r4, r5, lr}
 80225a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80225aa:	d502      	bpl.n	80225b2 <__aeabi_l2d+0x16>
 80225ac:	4240      	negs	r0, r0
 80225ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80225b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80225b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80225ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80225be:	f43f aed8 	beq.w	8022372 <__adddf3+0xe6>
 80225c2:	f04f 0203 	mov.w	r2, #3
 80225c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80225ca:	bf18      	it	ne
 80225cc:	3203      	addne	r2, #3
 80225ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80225d2:	bf18      	it	ne
 80225d4:	3203      	addne	r2, #3
 80225d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80225da:	f1c2 0320 	rsb	r3, r2, #32
 80225de:	fa00 fc03 	lsl.w	ip, r0, r3
 80225e2:	fa20 f002 	lsr.w	r0, r0, r2
 80225e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80225ea:	ea40 000e 	orr.w	r0, r0, lr
 80225ee:	fa21 f102 	lsr.w	r1, r1, r2
 80225f2:	4414      	add	r4, r2
 80225f4:	e6bd      	b.n	8022372 <__adddf3+0xe6>
 80225f6:	bf00      	nop

080225f8 <__aeabi_dmul>:
 80225f8:	b570      	push	{r4, r5, r6, lr}
 80225fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80225fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8022602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8022606:	bf1d      	ittte	ne
 8022608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802260c:	ea94 0f0c 	teqne	r4, ip
 8022610:	ea95 0f0c 	teqne	r5, ip
 8022614:	f000 f8de 	bleq	80227d4 <__aeabi_dmul+0x1dc>
 8022618:	442c      	add	r4, r5
 802261a:	ea81 0603 	eor.w	r6, r1, r3
 802261e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8022622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8022626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802262a:	bf18      	it	ne
 802262c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8022630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8022634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022638:	d038      	beq.n	80226ac <__aeabi_dmul+0xb4>
 802263a:	fba0 ce02 	umull	ip, lr, r0, r2
 802263e:	f04f 0500 	mov.w	r5, #0
 8022642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8022646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802264a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802264e:	f04f 0600 	mov.w	r6, #0
 8022652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8022656:	f09c 0f00 	teq	ip, #0
 802265a:	bf18      	it	ne
 802265c:	f04e 0e01 	orrne.w	lr, lr, #1
 8022660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8022664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8022668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802266c:	d204      	bcs.n	8022678 <__aeabi_dmul+0x80>
 802266e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8022672:	416d      	adcs	r5, r5
 8022674:	eb46 0606 	adc.w	r6, r6, r6
 8022678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802267c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8022680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8022684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8022688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802268c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8022690:	bf88      	it	hi
 8022692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8022696:	d81e      	bhi.n	80226d6 <__aeabi_dmul+0xde>
 8022698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802269c:	bf08      	it	eq
 802269e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80226a2:	f150 0000 	adcs.w	r0, r0, #0
 80226a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80226aa:	bd70      	pop	{r4, r5, r6, pc}
 80226ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80226b0:	ea46 0101 	orr.w	r1, r6, r1
 80226b4:	ea40 0002 	orr.w	r0, r0, r2
 80226b8:	ea81 0103 	eor.w	r1, r1, r3
 80226bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80226c0:	bfc2      	ittt	gt
 80226c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80226c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80226ca:	bd70      	popgt	{r4, r5, r6, pc}
 80226cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80226d0:	f04f 0e00 	mov.w	lr, #0
 80226d4:	3c01      	subs	r4, #1
 80226d6:	f300 80ab 	bgt.w	8022830 <__aeabi_dmul+0x238>
 80226da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80226de:	bfde      	ittt	le
 80226e0:	2000      	movle	r0, #0
 80226e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80226e6:	bd70      	pople	{r4, r5, r6, pc}
 80226e8:	f1c4 0400 	rsb	r4, r4, #0
 80226ec:	3c20      	subs	r4, #32
 80226ee:	da35      	bge.n	802275c <__aeabi_dmul+0x164>
 80226f0:	340c      	adds	r4, #12
 80226f2:	dc1b      	bgt.n	802272c <__aeabi_dmul+0x134>
 80226f4:	f104 0414 	add.w	r4, r4, #20
 80226f8:	f1c4 0520 	rsb	r5, r4, #32
 80226fc:	fa00 f305 	lsl.w	r3, r0, r5
 8022700:	fa20 f004 	lsr.w	r0, r0, r4
 8022704:	fa01 f205 	lsl.w	r2, r1, r5
 8022708:	ea40 0002 	orr.w	r0, r0, r2
 802270c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8022710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8022718:	fa21 f604 	lsr.w	r6, r1, r4
 802271c:	eb42 0106 	adc.w	r1, r2, r6
 8022720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8022724:	bf08      	it	eq
 8022726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802272a:	bd70      	pop	{r4, r5, r6, pc}
 802272c:	f1c4 040c 	rsb	r4, r4, #12
 8022730:	f1c4 0520 	rsb	r5, r4, #32
 8022734:	fa00 f304 	lsl.w	r3, r0, r4
 8022738:	fa20 f005 	lsr.w	r0, r0, r5
 802273c:	fa01 f204 	lsl.w	r2, r1, r4
 8022740:	ea40 0002 	orr.w	r0, r0, r2
 8022744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802274c:	f141 0100 	adc.w	r1, r1, #0
 8022750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8022754:	bf08      	it	eq
 8022756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802275a:	bd70      	pop	{r4, r5, r6, pc}
 802275c:	f1c4 0520 	rsb	r5, r4, #32
 8022760:	fa00 f205 	lsl.w	r2, r0, r5
 8022764:	ea4e 0e02 	orr.w	lr, lr, r2
 8022768:	fa20 f304 	lsr.w	r3, r0, r4
 802276c:	fa01 f205 	lsl.w	r2, r1, r5
 8022770:	ea43 0302 	orr.w	r3, r3, r2
 8022774:	fa21 f004 	lsr.w	r0, r1, r4
 8022778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802277c:	fa21 f204 	lsr.w	r2, r1, r4
 8022780:	ea20 0002 	bic.w	r0, r0, r2
 8022784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8022788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802278c:	bf08      	it	eq
 802278e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8022792:	bd70      	pop	{r4, r5, r6, pc}
 8022794:	f094 0f00 	teq	r4, #0
 8022798:	d10f      	bne.n	80227ba <__aeabi_dmul+0x1c2>
 802279a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802279e:	0040      	lsls	r0, r0, #1
 80227a0:	eb41 0101 	adc.w	r1, r1, r1
 80227a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80227a8:	bf08      	it	eq
 80227aa:	3c01      	subeq	r4, #1
 80227ac:	d0f7      	beq.n	802279e <__aeabi_dmul+0x1a6>
 80227ae:	ea41 0106 	orr.w	r1, r1, r6
 80227b2:	f095 0f00 	teq	r5, #0
 80227b6:	bf18      	it	ne
 80227b8:	4770      	bxne	lr
 80227ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80227be:	0052      	lsls	r2, r2, #1
 80227c0:	eb43 0303 	adc.w	r3, r3, r3
 80227c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80227c8:	bf08      	it	eq
 80227ca:	3d01      	subeq	r5, #1
 80227cc:	d0f7      	beq.n	80227be <__aeabi_dmul+0x1c6>
 80227ce:	ea43 0306 	orr.w	r3, r3, r6
 80227d2:	4770      	bx	lr
 80227d4:	ea94 0f0c 	teq	r4, ip
 80227d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80227dc:	bf18      	it	ne
 80227de:	ea95 0f0c 	teqne	r5, ip
 80227e2:	d00c      	beq.n	80227fe <__aeabi_dmul+0x206>
 80227e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80227e8:	bf18      	it	ne
 80227ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80227ee:	d1d1      	bne.n	8022794 <__aeabi_dmul+0x19c>
 80227f0:	ea81 0103 	eor.w	r1, r1, r3
 80227f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80227f8:	f04f 0000 	mov.w	r0, #0
 80227fc:	bd70      	pop	{r4, r5, r6, pc}
 80227fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8022802:	bf06      	itte	eq
 8022804:	4610      	moveq	r0, r2
 8022806:	4619      	moveq	r1, r3
 8022808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802280c:	d019      	beq.n	8022842 <__aeabi_dmul+0x24a>
 802280e:	ea94 0f0c 	teq	r4, ip
 8022812:	d102      	bne.n	802281a <__aeabi_dmul+0x222>
 8022814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8022818:	d113      	bne.n	8022842 <__aeabi_dmul+0x24a>
 802281a:	ea95 0f0c 	teq	r5, ip
 802281e:	d105      	bne.n	802282c <__aeabi_dmul+0x234>
 8022820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8022824:	bf1c      	itt	ne
 8022826:	4610      	movne	r0, r2
 8022828:	4619      	movne	r1, r3
 802282a:	d10a      	bne.n	8022842 <__aeabi_dmul+0x24a>
 802282c:	ea81 0103 	eor.w	r1, r1, r3
 8022830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8022834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8022838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802283c:	f04f 0000 	mov.w	r0, #0
 8022840:	bd70      	pop	{r4, r5, r6, pc}
 8022842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8022846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802284a:	bd70      	pop	{r4, r5, r6, pc}

0802284c <__aeabi_ddiv>:
 802284c:	b570      	push	{r4, r5, r6, lr}
 802284e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8022852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8022856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802285a:	bf1d      	ittte	ne
 802285c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8022860:	ea94 0f0c 	teqne	r4, ip
 8022864:	ea95 0f0c 	teqne	r5, ip
 8022868:	f000 f8a7 	bleq	80229ba <__aeabi_ddiv+0x16e>
 802286c:	eba4 0405 	sub.w	r4, r4, r5
 8022870:	ea81 0e03 	eor.w	lr, r1, r3
 8022874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8022878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802287c:	f000 8088 	beq.w	8022990 <__aeabi_ddiv+0x144>
 8022880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8022884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8022888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802288c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8022890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8022894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8022898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802289c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80228a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80228a4:	429d      	cmp	r5, r3
 80228a6:	bf08      	it	eq
 80228a8:	4296      	cmpeq	r6, r2
 80228aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80228ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80228b2:	d202      	bcs.n	80228ba <__aeabi_ddiv+0x6e>
 80228b4:	085b      	lsrs	r3, r3, #1
 80228b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80228ba:	1ab6      	subs	r6, r6, r2
 80228bc:	eb65 0503 	sbc.w	r5, r5, r3
 80228c0:	085b      	lsrs	r3, r3, #1
 80228c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80228c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80228ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80228ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80228d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228d6:	bf22      	ittt	cs
 80228d8:	1ab6      	subcs	r6, r6, r2
 80228da:	4675      	movcs	r5, lr
 80228dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80228e0:	085b      	lsrs	r3, r3, #1
 80228e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80228e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80228ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80228ee:	bf22      	ittt	cs
 80228f0:	1ab6      	subcs	r6, r6, r2
 80228f2:	4675      	movcs	r5, lr
 80228f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80228f8:	085b      	lsrs	r3, r3, #1
 80228fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80228fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8022902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8022906:	bf22      	ittt	cs
 8022908:	1ab6      	subcs	r6, r6, r2
 802290a:	4675      	movcs	r5, lr
 802290c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8022910:	085b      	lsrs	r3, r3, #1
 8022912:	ea4f 0232 	mov.w	r2, r2, rrx
 8022916:	ebb6 0e02 	subs.w	lr, r6, r2
 802291a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802291e:	bf22      	ittt	cs
 8022920:	1ab6      	subcs	r6, r6, r2
 8022922:	4675      	movcs	r5, lr
 8022924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8022928:	ea55 0e06 	orrs.w	lr, r5, r6
 802292c:	d018      	beq.n	8022960 <__aeabi_ddiv+0x114>
 802292e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8022932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8022936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802293a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802293e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8022942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8022946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802294a:	d1c0      	bne.n	80228ce <__aeabi_ddiv+0x82>
 802294c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022950:	d10b      	bne.n	802296a <__aeabi_ddiv+0x11e>
 8022952:	ea41 0100 	orr.w	r1, r1, r0
 8022956:	f04f 0000 	mov.w	r0, #0
 802295a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802295e:	e7b6      	b.n	80228ce <__aeabi_ddiv+0x82>
 8022960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8022964:	bf04      	itt	eq
 8022966:	4301      	orreq	r1, r0
 8022968:	2000      	moveq	r0, #0
 802296a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802296e:	bf88      	it	hi
 8022970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8022974:	f63f aeaf 	bhi.w	80226d6 <__aeabi_dmul+0xde>
 8022978:	ebb5 0c03 	subs.w	ip, r5, r3
 802297c:	bf04      	itt	eq
 802297e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8022982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8022986:	f150 0000 	adcs.w	r0, r0, #0
 802298a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802298e:	bd70      	pop	{r4, r5, r6, pc}
 8022990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8022994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8022998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802299c:	bfc2      	ittt	gt
 802299e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80229a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80229a6:	bd70      	popgt	{r4, r5, r6, pc}
 80229a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80229ac:	f04f 0e00 	mov.w	lr, #0
 80229b0:	3c01      	subs	r4, #1
 80229b2:	e690      	b.n	80226d6 <__aeabi_dmul+0xde>
 80229b4:	ea45 0e06 	orr.w	lr, r5, r6
 80229b8:	e68d      	b.n	80226d6 <__aeabi_dmul+0xde>
 80229ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80229be:	ea94 0f0c 	teq	r4, ip
 80229c2:	bf08      	it	eq
 80229c4:	ea95 0f0c 	teqeq	r5, ip
 80229c8:	f43f af3b 	beq.w	8022842 <__aeabi_dmul+0x24a>
 80229cc:	ea94 0f0c 	teq	r4, ip
 80229d0:	d10a      	bne.n	80229e8 <__aeabi_ddiv+0x19c>
 80229d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80229d6:	f47f af34 	bne.w	8022842 <__aeabi_dmul+0x24a>
 80229da:	ea95 0f0c 	teq	r5, ip
 80229de:	f47f af25 	bne.w	802282c <__aeabi_dmul+0x234>
 80229e2:	4610      	mov	r0, r2
 80229e4:	4619      	mov	r1, r3
 80229e6:	e72c      	b.n	8022842 <__aeabi_dmul+0x24a>
 80229e8:	ea95 0f0c 	teq	r5, ip
 80229ec:	d106      	bne.n	80229fc <__aeabi_ddiv+0x1b0>
 80229ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80229f2:	f43f aefd 	beq.w	80227f0 <__aeabi_dmul+0x1f8>
 80229f6:	4610      	mov	r0, r2
 80229f8:	4619      	mov	r1, r3
 80229fa:	e722      	b.n	8022842 <__aeabi_dmul+0x24a>
 80229fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8022a00:	bf18      	it	ne
 8022a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8022a06:	f47f aec5 	bne.w	8022794 <__aeabi_dmul+0x19c>
 8022a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8022a0e:	f47f af0d 	bne.w	802282c <__aeabi_dmul+0x234>
 8022a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8022a16:	f47f aeeb 	bne.w	80227f0 <__aeabi_dmul+0x1f8>
 8022a1a:	e712      	b.n	8022842 <__aeabi_dmul+0x24a>

08022a1c <__gedf2>:
 8022a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8022a20:	e006      	b.n	8022a30 <__cmpdf2+0x4>
 8022a22:	bf00      	nop

08022a24 <__ledf2>:
 8022a24:	f04f 0c01 	mov.w	ip, #1
 8022a28:	e002      	b.n	8022a30 <__cmpdf2+0x4>
 8022a2a:	bf00      	nop

08022a2c <__cmpdf2>:
 8022a2c:	f04f 0c01 	mov.w	ip, #1
 8022a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8022a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022a40:	bf18      	it	ne
 8022a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8022a46:	d01b      	beq.n	8022a80 <__cmpdf2+0x54>
 8022a48:	b001      	add	sp, #4
 8022a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8022a4e:	bf0c      	ite	eq
 8022a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8022a54:	ea91 0f03 	teqne	r1, r3
 8022a58:	bf02      	ittt	eq
 8022a5a:	ea90 0f02 	teqeq	r0, r2
 8022a5e:	2000      	moveq	r0, #0
 8022a60:	4770      	bxeq	lr
 8022a62:	f110 0f00 	cmn.w	r0, #0
 8022a66:	ea91 0f03 	teq	r1, r3
 8022a6a:	bf58      	it	pl
 8022a6c:	4299      	cmppl	r1, r3
 8022a6e:	bf08      	it	eq
 8022a70:	4290      	cmpeq	r0, r2
 8022a72:	bf2c      	ite	cs
 8022a74:	17d8      	asrcs	r0, r3, #31
 8022a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8022a7a:	f040 0001 	orr.w	r0, r0, #1
 8022a7e:	4770      	bx	lr
 8022a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a88:	d102      	bne.n	8022a90 <__cmpdf2+0x64>
 8022a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022a8e:	d107      	bne.n	8022aa0 <__cmpdf2+0x74>
 8022a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022a98:	d1d6      	bne.n	8022a48 <__cmpdf2+0x1c>
 8022a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022a9e:	d0d3      	beq.n	8022a48 <__cmpdf2+0x1c>
 8022aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8022aa4:	4770      	bx	lr
 8022aa6:	bf00      	nop

08022aa8 <__aeabi_cdrcmple>:
 8022aa8:	4684      	mov	ip, r0
 8022aaa:	4610      	mov	r0, r2
 8022aac:	4662      	mov	r2, ip
 8022aae:	468c      	mov	ip, r1
 8022ab0:	4619      	mov	r1, r3
 8022ab2:	4663      	mov	r3, ip
 8022ab4:	e000      	b.n	8022ab8 <__aeabi_cdcmpeq>
 8022ab6:	bf00      	nop

08022ab8 <__aeabi_cdcmpeq>:
 8022ab8:	b501      	push	{r0, lr}
 8022aba:	f7ff ffb7 	bl	8022a2c <__cmpdf2>
 8022abe:	2800      	cmp	r0, #0
 8022ac0:	bf48      	it	mi
 8022ac2:	f110 0f00 	cmnmi.w	r0, #0
 8022ac6:	bd01      	pop	{r0, pc}

08022ac8 <__aeabi_dcmpeq>:
 8022ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022acc:	f7ff fff4 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022ad0:	bf0c      	ite	eq
 8022ad2:	2001      	moveq	r0, #1
 8022ad4:	2000      	movne	r0, #0
 8022ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8022ada:	bf00      	nop

08022adc <__aeabi_dcmplt>:
 8022adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022ae0:	f7ff ffea 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022ae4:	bf34      	ite	cc
 8022ae6:	2001      	movcc	r0, #1
 8022ae8:	2000      	movcs	r0, #0
 8022aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8022aee:	bf00      	nop

08022af0 <__aeabi_dcmple>:
 8022af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022af4:	f7ff ffe0 	bl	8022ab8 <__aeabi_cdcmpeq>
 8022af8:	bf94      	ite	ls
 8022afa:	2001      	movls	r0, #1
 8022afc:	2000      	movhi	r0, #0
 8022afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b02:	bf00      	nop

08022b04 <__aeabi_dcmpge>:
 8022b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022b08:	f7ff ffce 	bl	8022aa8 <__aeabi_cdrcmple>
 8022b0c:	bf94      	ite	ls
 8022b0e:	2001      	movls	r0, #1
 8022b10:	2000      	movhi	r0, #0
 8022b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b16:	bf00      	nop

08022b18 <__aeabi_dcmpgt>:
 8022b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8022b1c:	f7ff ffc4 	bl	8022aa8 <__aeabi_cdrcmple>
 8022b20:	bf34      	ite	cc
 8022b22:	2001      	movcc	r0, #1
 8022b24:	2000      	movcs	r0, #0
 8022b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8022b2a:	bf00      	nop

08022b2c <__aeabi_dcmpun>:
 8022b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8022b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022b34:	d102      	bne.n	8022b3c <__aeabi_dcmpun+0x10>
 8022b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8022b3a:	d10a      	bne.n	8022b52 <__aeabi_dcmpun+0x26>
 8022b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8022b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8022b44:	d102      	bne.n	8022b4c <__aeabi_dcmpun+0x20>
 8022b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8022b4a:	d102      	bne.n	8022b52 <__aeabi_dcmpun+0x26>
 8022b4c:	f04f 0000 	mov.w	r0, #0
 8022b50:	4770      	bx	lr
 8022b52:	f04f 0001 	mov.w	r0, #1
 8022b56:	4770      	bx	lr

08022b58 <__aeabi_d2iz>:
 8022b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8022b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8022b60:	d215      	bcs.n	8022b8e <__aeabi_d2iz+0x36>
 8022b62:	d511      	bpl.n	8022b88 <__aeabi_d2iz+0x30>
 8022b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8022b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8022b6c:	d912      	bls.n	8022b94 <__aeabi_d2iz+0x3c>
 8022b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8022b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8022b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8022b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8022b82:	bf18      	it	ne
 8022b84:	4240      	negne	r0, r0
 8022b86:	4770      	bx	lr
 8022b88:	f04f 0000 	mov.w	r0, #0
 8022b8c:	4770      	bx	lr
 8022b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8022b92:	d105      	bne.n	8022ba0 <__aeabi_d2iz+0x48>
 8022b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8022b98:	bf08      	it	eq
 8022b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8022b9e:	4770      	bx	lr
 8022ba0:	f04f 0000 	mov.w	r0, #0
 8022ba4:	4770      	bx	lr
 8022ba6:	bf00      	nop

08022ba8 <__aeabi_uldivmod>:
 8022ba8:	b953      	cbnz	r3, 8022bc0 <__aeabi_uldivmod+0x18>
 8022baa:	b94a      	cbnz	r2, 8022bc0 <__aeabi_uldivmod+0x18>
 8022bac:	2900      	cmp	r1, #0
 8022bae:	bf08      	it	eq
 8022bb0:	2800      	cmpeq	r0, #0
 8022bb2:	bf1c      	itt	ne
 8022bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8022bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8022bbc:	f000 b970 	b.w	8022ea0 <__aeabi_idiv0>
 8022bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8022bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022bc8:	f000 f806 	bl	8022bd8 <__udivmoddi4>
 8022bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022bd4:	b004      	add	sp, #16
 8022bd6:	4770      	bx	lr

08022bd8 <__udivmoddi4>:
 8022bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022bdc:	9e08      	ldr	r6, [sp, #32]
 8022bde:	460d      	mov	r5, r1
 8022be0:	4604      	mov	r4, r0
 8022be2:	460f      	mov	r7, r1
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d14a      	bne.n	8022c7e <__udivmoddi4+0xa6>
 8022be8:	428a      	cmp	r2, r1
 8022bea:	4694      	mov	ip, r2
 8022bec:	d965      	bls.n	8022cba <__udivmoddi4+0xe2>
 8022bee:	fab2 f382 	clz	r3, r2
 8022bf2:	b143      	cbz	r3, 8022c06 <__udivmoddi4+0x2e>
 8022bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8022bf8:	f1c3 0220 	rsb	r2, r3, #32
 8022bfc:	409f      	lsls	r7, r3
 8022bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8022c02:	4317      	orrs	r7, r2
 8022c04:	409c      	lsls	r4, r3
 8022c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8022c0a:	fa1f f58c 	uxth.w	r5, ip
 8022c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8022c12:	0c22      	lsrs	r2, r4, #16
 8022c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8022c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8022c1c:	fb01 f005 	mul.w	r0, r1, r5
 8022c20:	4290      	cmp	r0, r2
 8022c22:	d90a      	bls.n	8022c3a <__udivmoddi4+0x62>
 8022c24:	eb1c 0202 	adds.w	r2, ip, r2
 8022c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8022c2c:	f080 811c 	bcs.w	8022e68 <__udivmoddi4+0x290>
 8022c30:	4290      	cmp	r0, r2
 8022c32:	f240 8119 	bls.w	8022e68 <__udivmoddi4+0x290>
 8022c36:	3902      	subs	r1, #2
 8022c38:	4462      	add	r2, ip
 8022c3a:	1a12      	subs	r2, r2, r0
 8022c3c:	b2a4      	uxth	r4, r4
 8022c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8022c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8022c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022c4a:	fb00 f505 	mul.w	r5, r0, r5
 8022c4e:	42a5      	cmp	r5, r4
 8022c50:	d90a      	bls.n	8022c68 <__udivmoddi4+0x90>
 8022c52:	eb1c 0404 	adds.w	r4, ip, r4
 8022c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8022c5a:	f080 8107 	bcs.w	8022e6c <__udivmoddi4+0x294>
 8022c5e:	42a5      	cmp	r5, r4
 8022c60:	f240 8104 	bls.w	8022e6c <__udivmoddi4+0x294>
 8022c64:	4464      	add	r4, ip
 8022c66:	3802      	subs	r0, #2
 8022c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022c6c:	1b64      	subs	r4, r4, r5
 8022c6e:	2100      	movs	r1, #0
 8022c70:	b11e      	cbz	r6, 8022c7a <__udivmoddi4+0xa2>
 8022c72:	40dc      	lsrs	r4, r3
 8022c74:	2300      	movs	r3, #0
 8022c76:	e9c6 4300 	strd	r4, r3, [r6]
 8022c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c7e:	428b      	cmp	r3, r1
 8022c80:	d908      	bls.n	8022c94 <__udivmoddi4+0xbc>
 8022c82:	2e00      	cmp	r6, #0
 8022c84:	f000 80ed 	beq.w	8022e62 <__udivmoddi4+0x28a>
 8022c88:	2100      	movs	r1, #0
 8022c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8022c8e:	4608      	mov	r0, r1
 8022c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c94:	fab3 f183 	clz	r1, r3
 8022c98:	2900      	cmp	r1, #0
 8022c9a:	d149      	bne.n	8022d30 <__udivmoddi4+0x158>
 8022c9c:	42ab      	cmp	r3, r5
 8022c9e:	d302      	bcc.n	8022ca6 <__udivmoddi4+0xce>
 8022ca0:	4282      	cmp	r2, r0
 8022ca2:	f200 80f8 	bhi.w	8022e96 <__udivmoddi4+0x2be>
 8022ca6:	1a84      	subs	r4, r0, r2
 8022ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8022cac:	2001      	movs	r0, #1
 8022cae:	4617      	mov	r7, r2
 8022cb0:	2e00      	cmp	r6, #0
 8022cb2:	d0e2      	beq.n	8022c7a <__udivmoddi4+0xa2>
 8022cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8022cb8:	e7df      	b.n	8022c7a <__udivmoddi4+0xa2>
 8022cba:	b902      	cbnz	r2, 8022cbe <__udivmoddi4+0xe6>
 8022cbc:	deff      	udf	#255	; 0xff
 8022cbe:	fab2 f382 	clz	r3, r2
 8022cc2:	2b00      	cmp	r3, #0
 8022cc4:	f040 8090 	bne.w	8022de8 <__udivmoddi4+0x210>
 8022cc8:	1a8a      	subs	r2, r1, r2
 8022cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022cce:	fa1f fe8c 	uxth.w	lr, ip
 8022cd2:	2101      	movs	r1, #1
 8022cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8022cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8022cdc:	0c22      	lsrs	r2, r4, #16
 8022cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8022ce2:	fb0e f005 	mul.w	r0, lr, r5
 8022ce6:	4290      	cmp	r0, r2
 8022ce8:	d908      	bls.n	8022cfc <__udivmoddi4+0x124>
 8022cea:	eb1c 0202 	adds.w	r2, ip, r2
 8022cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8022cf2:	d202      	bcs.n	8022cfa <__udivmoddi4+0x122>
 8022cf4:	4290      	cmp	r0, r2
 8022cf6:	f200 80cb 	bhi.w	8022e90 <__udivmoddi4+0x2b8>
 8022cfa:	4645      	mov	r5, r8
 8022cfc:	1a12      	subs	r2, r2, r0
 8022cfe:	b2a4      	uxth	r4, r4
 8022d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8022d04:	fb07 2210 	mls	r2, r7, r0, r2
 8022d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8022d10:	45a6      	cmp	lr, r4
 8022d12:	d908      	bls.n	8022d26 <__udivmoddi4+0x14e>
 8022d14:	eb1c 0404 	adds.w	r4, ip, r4
 8022d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8022d1c:	d202      	bcs.n	8022d24 <__udivmoddi4+0x14c>
 8022d1e:	45a6      	cmp	lr, r4
 8022d20:	f200 80bb 	bhi.w	8022e9a <__udivmoddi4+0x2c2>
 8022d24:	4610      	mov	r0, r2
 8022d26:	eba4 040e 	sub.w	r4, r4, lr
 8022d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8022d2e:	e79f      	b.n	8022c70 <__udivmoddi4+0x98>
 8022d30:	f1c1 0720 	rsb	r7, r1, #32
 8022d34:	408b      	lsls	r3, r1
 8022d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8022d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8022d42:	fa20 f307 	lsr.w	r3, r0, r7
 8022d46:	40fd      	lsrs	r5, r7
 8022d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022d4c:	4323      	orrs	r3, r4
 8022d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8022d52:	fa1f fe8c 	uxth.w	lr, ip
 8022d56:	fb09 5518 	mls	r5, r9, r8, r5
 8022d5a:	0c1c      	lsrs	r4, r3, #16
 8022d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8022d60:	fb08 f50e 	mul.w	r5, r8, lr
 8022d64:	42a5      	cmp	r5, r4
 8022d66:	fa02 f201 	lsl.w	r2, r2, r1
 8022d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8022d6e:	d90b      	bls.n	8022d88 <__udivmoddi4+0x1b0>
 8022d70:	eb1c 0404 	adds.w	r4, ip, r4
 8022d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8022d78:	f080 8088 	bcs.w	8022e8c <__udivmoddi4+0x2b4>
 8022d7c:	42a5      	cmp	r5, r4
 8022d7e:	f240 8085 	bls.w	8022e8c <__udivmoddi4+0x2b4>
 8022d82:	f1a8 0802 	sub.w	r8, r8, #2
 8022d86:	4464      	add	r4, ip
 8022d88:	1b64      	subs	r4, r4, r5
 8022d8a:	b29d      	uxth	r5, r3
 8022d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8022d90:	fb09 4413 	mls	r4, r9, r3, r4
 8022d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8022d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8022d9c:	45a6      	cmp	lr, r4
 8022d9e:	d908      	bls.n	8022db2 <__udivmoddi4+0x1da>
 8022da0:	eb1c 0404 	adds.w	r4, ip, r4
 8022da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8022da8:	d26c      	bcs.n	8022e84 <__udivmoddi4+0x2ac>
 8022daa:	45a6      	cmp	lr, r4
 8022dac:	d96a      	bls.n	8022e84 <__udivmoddi4+0x2ac>
 8022dae:	3b02      	subs	r3, #2
 8022db0:	4464      	add	r4, ip
 8022db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8022db6:	fba3 9502 	umull	r9, r5, r3, r2
 8022dba:	eba4 040e 	sub.w	r4, r4, lr
 8022dbe:	42ac      	cmp	r4, r5
 8022dc0:	46c8      	mov	r8, r9
 8022dc2:	46ae      	mov	lr, r5
 8022dc4:	d356      	bcc.n	8022e74 <__udivmoddi4+0x29c>
 8022dc6:	d053      	beq.n	8022e70 <__udivmoddi4+0x298>
 8022dc8:	b156      	cbz	r6, 8022de0 <__udivmoddi4+0x208>
 8022dca:	ebb0 0208 	subs.w	r2, r0, r8
 8022dce:	eb64 040e 	sbc.w	r4, r4, lr
 8022dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8022dd6:	40ca      	lsrs	r2, r1
 8022dd8:	40cc      	lsrs	r4, r1
 8022dda:	4317      	orrs	r7, r2
 8022ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8022de0:	4618      	mov	r0, r3
 8022de2:	2100      	movs	r1, #0
 8022de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022de8:	f1c3 0120 	rsb	r1, r3, #32
 8022dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8022df0:	fa20 f201 	lsr.w	r2, r0, r1
 8022df4:	fa25 f101 	lsr.w	r1, r5, r1
 8022df8:	409d      	lsls	r5, r3
 8022dfa:	432a      	orrs	r2, r5
 8022dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022e00:	fa1f fe8c 	uxth.w	lr, ip
 8022e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8022e08:	fb07 1510 	mls	r5, r7, r0, r1
 8022e0c:	0c11      	lsrs	r1, r2, #16
 8022e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8022e12:	fb00 f50e 	mul.w	r5, r0, lr
 8022e16:	428d      	cmp	r5, r1
 8022e18:	fa04 f403 	lsl.w	r4, r4, r3
 8022e1c:	d908      	bls.n	8022e30 <__udivmoddi4+0x258>
 8022e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8022e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8022e26:	d22f      	bcs.n	8022e88 <__udivmoddi4+0x2b0>
 8022e28:	428d      	cmp	r5, r1
 8022e2a:	d92d      	bls.n	8022e88 <__udivmoddi4+0x2b0>
 8022e2c:	3802      	subs	r0, #2
 8022e2e:	4461      	add	r1, ip
 8022e30:	1b49      	subs	r1, r1, r5
 8022e32:	b292      	uxth	r2, r2
 8022e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8022e38:	fb07 1115 	mls	r1, r7, r5, r1
 8022e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022e40:	fb05 f10e 	mul.w	r1, r5, lr
 8022e44:	4291      	cmp	r1, r2
 8022e46:	d908      	bls.n	8022e5a <__udivmoddi4+0x282>
 8022e48:	eb1c 0202 	adds.w	r2, ip, r2
 8022e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8022e50:	d216      	bcs.n	8022e80 <__udivmoddi4+0x2a8>
 8022e52:	4291      	cmp	r1, r2
 8022e54:	d914      	bls.n	8022e80 <__udivmoddi4+0x2a8>
 8022e56:	3d02      	subs	r5, #2
 8022e58:	4462      	add	r2, ip
 8022e5a:	1a52      	subs	r2, r2, r1
 8022e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8022e60:	e738      	b.n	8022cd4 <__udivmoddi4+0xfc>
 8022e62:	4631      	mov	r1, r6
 8022e64:	4630      	mov	r0, r6
 8022e66:	e708      	b.n	8022c7a <__udivmoddi4+0xa2>
 8022e68:	4639      	mov	r1, r7
 8022e6a:	e6e6      	b.n	8022c3a <__udivmoddi4+0x62>
 8022e6c:	4610      	mov	r0, r2
 8022e6e:	e6fb      	b.n	8022c68 <__udivmoddi4+0x90>
 8022e70:	4548      	cmp	r0, r9
 8022e72:	d2a9      	bcs.n	8022dc8 <__udivmoddi4+0x1f0>
 8022e74:	ebb9 0802 	subs.w	r8, r9, r2
 8022e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8022e7c:	3b01      	subs	r3, #1
 8022e7e:	e7a3      	b.n	8022dc8 <__udivmoddi4+0x1f0>
 8022e80:	4645      	mov	r5, r8
 8022e82:	e7ea      	b.n	8022e5a <__udivmoddi4+0x282>
 8022e84:	462b      	mov	r3, r5
 8022e86:	e794      	b.n	8022db2 <__udivmoddi4+0x1da>
 8022e88:	4640      	mov	r0, r8
 8022e8a:	e7d1      	b.n	8022e30 <__udivmoddi4+0x258>
 8022e8c:	46d0      	mov	r8, sl
 8022e8e:	e77b      	b.n	8022d88 <__udivmoddi4+0x1b0>
 8022e90:	3d02      	subs	r5, #2
 8022e92:	4462      	add	r2, ip
 8022e94:	e732      	b.n	8022cfc <__udivmoddi4+0x124>
 8022e96:	4608      	mov	r0, r1
 8022e98:	e70a      	b.n	8022cb0 <__udivmoddi4+0xd8>
 8022e9a:	4464      	add	r4, ip
 8022e9c:	3802      	subs	r0, #2
 8022e9e:	e742      	b.n	8022d26 <__udivmoddi4+0x14e>

08022ea0 <__aeabi_idiv0>:
 8022ea0:	4770      	bx	lr
 8022ea2:	bf00      	nop

08022ea4 <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 8022ea4:	b580      	push	{r7, lr}
 8022ea6:	b084      	sub	sp, #16
 8022ea8:	af00      	add	r7, sp, #0
 8022eaa:	6078      	str	r0, [r7, #4]
 8022eac:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8022eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022eb2:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 8022eb4:	f000 f986 	bl	80231c4 <CDC_IsPacketSent>
 8022eb8:	4603      	mov	r3, r0
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d117      	bne.n	8022eee <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022ebe:	4816      	ldr	r0, [pc, #88]	; (8022f18 <cdc_send+0x74>)
 8022ec0:	f00f f846 	bl	8031f50 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 8022ec4:	bf00      	nop
 8022ec6:	f000 f97d 	bl	80231c4 <CDC_IsPacketSent>
 8022eca:	4603      	mov	r3, r0
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d105      	bne.n	8022edc <cdc_send+0x38>
 8022ed0:	68fb      	ldr	r3, [r7, #12]
 8022ed2:	3b01      	subs	r3, #1
 8022ed4:	60fb      	str	r3, [r7, #12]
 8022ed6:	68fb      	ldr	r3, [r7, #12]
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d1f4      	bne.n	8022ec6 <cdc_send+0x22>
        if (!timeout)
 8022edc:	68fb      	ldr	r3, [r7, #12]
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d105      	bne.n	8022eee <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 8022ee2:	480e      	ldr	r0, [pc, #56]	; (8022f1c <cdc_send+0x78>)
 8022ee4:	f00f f834 	bl	8031f50 <puts>
            return -1;                                          // 返回错误代码
 8022ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8022eec:	e00f      	b.n	8022f0e <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	b2db      	uxtb	r3, r3
 8022ef2:	4619      	mov	r1, r3
 8022ef4:	6878      	ldr	r0, [r7, #4]
 8022ef6:	f000 f941 	bl	802317c <CDC_Send_DATA>
 8022efa:	4603      	mov	r3, r0
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d105      	bne.n	8022f0c <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 8022f00:	4807      	ldr	r0, [pc, #28]	; (8022f20 <cdc_send+0x7c>)
 8022f02:	f00f f825 	bl	8031f50 <puts>
        return -1;                                              // 返回错误代码
 8022f06:	f04f 33ff 	mov.w	r3, #4294967295
 8022f0a:	e000      	b.n	8022f0e <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 8022f0c:	2300      	movs	r3, #0
}
 8022f0e:	4618      	mov	r0, r3
 8022f10:	3710      	adds	r7, #16
 8022f12:	46bd      	mov	sp, r7
 8022f14:	bd80      	pop	{r7, pc}
 8022f16:	bf00      	nop
 8022f18:	080368a0 	.word	0x080368a0
 8022f1c:	080368bc 	.word	0x080368bc
 8022f20:	080368e8 	.word	0x080368e8

08022f24 <cdc_send_ready>:

static int cdc_send_ready()
{
 8022f24:	b580      	push	{r7, lr}
 8022f26:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 8022f28:	f000 f94c 	bl	80231c4 <CDC_IsPacketSent>
 8022f2c:	4603      	mov	r3, r0
}
 8022f2e:	4618      	mov	r0, r3
 8022f30:	bd80      	pop	{r7, pc}

08022f32 <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 8022f32:	b580      	push	{r7, lr}
 8022f34:	b082      	sub	sp, #8
 8022f36:	af00      	add	r7, sp, #0
 8022f38:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022f3a:	6878      	ldr	r0, [r7, #4]
 8022f3c:	f000 f82a 	bl	8022f94 <USB_Data_Peek>
 8022f40:	4603      	mov	r3, r0
}
 8022f42:	4618      	mov	r0, r3
 8022f44:	3708      	adds	r7, #8
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}

08022f4a <cdc_consume>:

static void cdc_consume()
{
 8022f4a:	b580      	push	{r7, lr}
 8022f4c:	b082      	sub	sp, #8
 8022f4e:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022f50:	1d3b      	adds	r3, r7, #4
 8022f52:	4618      	mov	r0, r3
 8022f54:	f000 f84e 	bl	8022ff4 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022f58:	f000 f8ac 	bl	80230b4 <USB_DataRx_Sched>
}
 8022f5c:	bf00      	nop
 8022f5e:	3708      	adds	r7, #8
 8022f60:	46bd      	mov	sp, r7
 8022f62:	bd80      	pop	{r7, pc}

08022f64 <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 8022f64:	b580      	push	{r7, lr}
 8022f66:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022f68:	4803      	ldr	r0, [pc, #12]	; (8022f78 <cdc_init+0x14>)
 8022f6a:	f003 fcdb 	bl	8026924 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022f6e:	f000 f91f 	bl	80231b0 <CDC_Receive_DATA>
}
 8022f72:	bf00      	nop
 8022f74:	bd80      	pop	{r7, pc}
 8022f76:	bf00      	nop
 8022f78:	20000000 	.word	0x20000000

08022f7c <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 8022f7c:	b480      	push	{r7}
 8022f7e:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8022f80:	4b03      	ldr	r3, [pc, #12]	; (8022f90 <EP1_IN_Callback+0x14>)
 8022f82:	2201      	movs	r2, #1
 8022f84:	601a      	str	r2, [r3, #0]
}
 8022f86:	bf00      	nop
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8e:	4770      	bx	lr
 8022f90:	20000014 	.word	0x20000014

08022f94 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 8022f94:	b480      	push	{r7}
 8022f96:	b083      	sub	sp, #12
 8022f98:	af00      	add	r7, sp, #0
 8022f9a:	6078      	str	r0, [r7, #4]
  if (!size)
 8022f9c:	4b12      	ldr	r3, [pc, #72]	; (8022fe8 <USB_Data_Peek+0x54>)
 8022f9e:	781b      	ldrb	r3, [r3, #0]
 8022fa0:	b2db      	uxtb	r3, r3
 8022fa2:	2b00      	cmp	r3, #0
 8022fa4:	d101      	bne.n	8022faa <USB_Data_Peek+0x16>
    return 0;
 8022fa6:	2300      	movs	r3, #0
 8022fa8:	e017      	b.n	8022fda <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 8022faa:	4b10      	ldr	r3, [pc, #64]	; (8022fec <USB_Data_Peek+0x58>)
 8022fac:	781b      	ldrb	r3, [r3, #0]
 8022fae:	b2db      	uxtb	r3, r3
 8022fb0:	461a      	mov	r2, r3
 8022fb2:	4613      	mov	r3, r2
 8022fb4:	011b      	lsls	r3, r3, #4
 8022fb6:	4413      	add	r3, r2
 8022fb8:	009b      	lsls	r3, r3, #2
 8022fba:	4a0d      	ldr	r2, [pc, #52]	; (8022ff0 <USB_Data_Peek+0x5c>)
 8022fbc:	441a      	add	r2, r3
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 8022fc2:	4b0a      	ldr	r3, [pc, #40]	; (8022fec <USB_Data_Peek+0x58>)
 8022fc4:	781b      	ldrb	r3, [r3, #0]
 8022fc6:	b2db      	uxtb	r3, r3
 8022fc8:	4619      	mov	r1, r3
 8022fca:	4a09      	ldr	r2, [pc, #36]	; (8022ff0 <USB_Data_Peek+0x5c>)
 8022fcc:	460b      	mov	r3, r1
 8022fce:	011b      	lsls	r3, r3, #4
 8022fd0:	440b      	add	r3, r1
 8022fd2:	009b      	lsls	r3, r3, #2
 8022fd4:	4413      	add	r3, r2
 8022fd6:	3340      	adds	r3, #64	; 0x40
 8022fd8:	681b      	ldr	r3, [r3, #0]
}
 8022fda:	4618      	mov	r0, r3
 8022fdc:	370c      	adds	r7, #12
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe4:	4770      	bx	lr
 8022fe6:	bf00      	nop
 8022fe8:	20001259 	.word	0x20001259
 8022fec:	20001258 	.word	0x20001258
 8022ff0:	20000950 	.word	0x20000950

08022ff4 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 8022ff4:	b480      	push	{r7}
 8022ff6:	b085      	sub	sp, #20
 8022ff8:	af00      	add	r7, sp, #0
 8022ffa:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 8022ffc:	4b21      	ldr	r3, [pc, #132]	; (8023084 <USB_Data_Get+0x90>)
 8022ffe:	781b      	ldrb	r3, [r3, #0]
 8023000:	b2db      	uxtb	r3, r3
 8023002:	2b00      	cmp	r3, #0
 8023004:	d101      	bne.n	802300a <USB_Data_Get+0x16>
    return 0;
 8023006:	2300      	movs	r3, #0
 8023008:	e036      	b.n	8023078 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 802300a:	4b1f      	ldr	r3, [pc, #124]	; (8023088 <USB_Data_Get+0x94>)
 802300c:	781b      	ldrb	r3, [r3, #0]
 802300e:	b2db      	uxtb	r3, r3
 8023010:	461a      	mov	r2, r3
 8023012:	4613      	mov	r3, r2
 8023014:	011b      	lsls	r3, r3, #4
 8023016:	4413      	add	r3, r2
 8023018:	009b      	lsls	r3, r3, #2
 802301a:	4a1c      	ldr	r2, [pc, #112]	; (802308c <USB_Data_Get+0x98>)
 802301c:	441a      	add	r2, r3
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 8023022:	4b19      	ldr	r3, [pc, #100]	; (8023088 <USB_Data_Get+0x94>)
 8023024:	781b      	ldrb	r3, [r3, #0]
 8023026:	b2db      	uxtb	r3, r3
 8023028:	4619      	mov	r1, r3
 802302a:	4a18      	ldr	r2, [pc, #96]	; (802308c <USB_Data_Get+0x98>)
 802302c:	460b      	mov	r3, r1
 802302e:	011b      	lsls	r3, r3, #4
 8023030:	440b      	add	r3, r1
 8023032:	009b      	lsls	r3, r3, #2
 8023034:	4413      	add	r3, r2
 8023036:	3340      	adds	r3, #64	; 0x40
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 802303c:	4b12      	ldr	r3, [pc, #72]	; (8023088 <USB_Data_Get+0x94>)
 802303e:	781b      	ldrb	r3, [r3, #0]
 8023040:	b2db      	uxtb	r3, r3
 8023042:	1c5a      	adds	r2, r3, #1
 8023044:	4b12      	ldr	r3, [pc, #72]	; (8023090 <USB_Data_Get+0x9c>)
 8023046:	fb83 1302 	smull	r1, r3, r3, r2
 802304a:	1119      	asrs	r1, r3, #4
 802304c:	17d3      	asrs	r3, r2, #31
 802304e:	1ac9      	subs	r1, r1, r3
 8023050:	460b      	mov	r3, r1
 8023052:	011b      	lsls	r3, r3, #4
 8023054:	440b      	add	r3, r1
 8023056:	005b      	lsls	r3, r3, #1
 8023058:	1ad1      	subs	r1, r2, r3
 802305a:	b2ca      	uxtb	r2, r1
 802305c:	4b0a      	ldr	r3, [pc, #40]	; (8023088 <USB_Data_Get+0x94>)
 802305e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023060:	b672      	cpsid	i
}
 8023062:	bf00      	nop
  __disable_irq();
  size--;
 8023064:	4b07      	ldr	r3, [pc, #28]	; (8023084 <USB_Data_Get+0x90>)
 8023066:	781b      	ldrb	r3, [r3, #0]
 8023068:	b2db      	uxtb	r3, r3
 802306a:	3b01      	subs	r3, #1
 802306c:	b2da      	uxtb	r2, r3
 802306e:	4b05      	ldr	r3, [pc, #20]	; (8023084 <USB_Data_Get+0x90>)
 8023070:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8023072:	b662      	cpsie	i
}
 8023074:	bf00      	nop
  __enable_irq();

  return len;
 8023076:	68fb      	ldr	r3, [r7, #12]
}
 8023078:	4618      	mov	r0, r3
 802307a:	3714      	adds	r7, #20
 802307c:	46bd      	mov	sp, r7
 802307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023082:	4770      	bx	lr
 8023084:	20001259 	.word	0x20001259
 8023088:	20001258 	.word	0x20001258
 802308c:	20000950 	.word	0x20000950
 8023090:	78787879 	.word	0x78787879

08023094 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 8023094:	b580      	push	{r7, lr}
 8023096:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8023098:	4b04      	ldr	r3, [pc, #16]	; (80230ac <USB_DataRx_Sched_Internal+0x18>)
 802309a:	781b      	ldrb	r3, [r3, #0]
 802309c:	b2db      	uxtb	r3, r3
 802309e:	2b21      	cmp	r3, #33	; 0x21
 80230a0:	d802      	bhi.n	80230a8 <USB_DataRx_Sched_Internal+0x14>
//	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
	  USBD_CtlReceiveStatus(&hUsbDeviceFS);
 80230a2:	4803      	ldr	r0, [pc, #12]	; (80230b0 <USB_DataRx_Sched_Internal+0x1c>)
 80230a4:	f00d feab 	bl	8030dfe <USBD_CtlReceiveStatus>
}
 80230a8:	bf00      	nop
 80230aa:	bd80      	pop	{r7, pc}
 80230ac:	20001259 	.word	0x20001259
 80230b0:	20005b9c 	.word	0x20005b9c

080230b4 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 80230b4:	b580      	push	{r7, lr}
 80230b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80230b8:	b672      	cpsid	i
}
 80230ba:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 80230bc:	f7ff ffea 	bl	8023094 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 80230c0:	b662      	cpsie	i
}
 80230c2:	bf00      	nop
  __enable_irq();
}
 80230c4:	bf00      	nop
 80230c6:	bd80      	pop	{r7, pc}

080230c8 <EP3_OUT_Callback>:

void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 80230c8:	b580      	push	{r7, lr}
 80230ca:	b082      	sub	sp, #8
 80230cc:	af00      	add	r7, sp, #0
 80230ce:	6078      	str	r0, [r7, #4]
 80230d0:	6039      	str	r1, [r7, #0]
//	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
	Receive_length = USBD_GetRxCount(&hUsbDeviceFS, CDC_OUT_EP);
 80230d2:	2101      	movs	r1, #1
 80230d4:	4823      	ldr	r0, [pc, #140]	; (8023164 <EP3_OUT_Callback+0x9c>)
 80230d6:	f00d fea5 	bl	8030e24 <USBD_GetRxCount>
 80230da:	4603      	mov	r3, r0
 80230dc:	4a22      	ldr	r2, [pc, #136]	; (8023168 <EP3_OUT_Callback+0xa0>)
 80230de:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 80230e0:	4b22      	ldr	r3, [pc, #136]	; (802316c <EP3_OUT_Callback+0xa4>)
 80230e2:	781b      	ldrb	r3, [r3, #0]
 80230e4:	b2db      	uxtb	r3, r3
 80230e6:	2b21      	cmp	r3, #33	; 0x21
 80230e8:	d838      	bhi.n	802315c <EP3_OUT_Callback+0x94>
    {
        tail = (tail + 1) % CIRC_BUF_SIZE;
 80230ea:	4b21      	ldr	r3, [pc, #132]	; (8023170 <EP3_OUT_Callback+0xa8>)
 80230ec:	781b      	ldrb	r3, [r3, #0]
 80230ee:	b2db      	uxtb	r3, r3
 80230f0:	1c5a      	adds	r2, r3, #1
 80230f2:	4b20      	ldr	r3, [pc, #128]	; (8023174 <EP3_OUT_Callback+0xac>)
 80230f4:	fb83 1302 	smull	r1, r3, r3, r2
 80230f8:	1119      	asrs	r1, r3, #4
 80230fa:	17d3      	asrs	r3, r2, #31
 80230fc:	1ac9      	subs	r1, r1, r3
 80230fe:	460b      	mov	r3, r1
 8023100:	011b      	lsls	r3, r3, #4
 8023102:	440b      	add	r3, r1
 8023104:	005b      	lsls	r3, r3, #1
 8023106:	1ad1      	subs	r1, r2, r3
 8023108:	b2ca      	uxtb	r2, r1
 802310a:	4b19      	ldr	r3, [pc, #100]	; (8023170 <EP3_OUT_Callback+0xa8>)
 802310c:	701a      	strb	r2, [r3, #0]
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 802310e:	4b18      	ldr	r3, [pc, #96]	; (8023170 <EP3_OUT_Callback+0xa8>)
 8023110:	781b      	ldrb	r3, [r3, #0]
 8023112:	b2db      	uxtb	r3, r3
 8023114:	461a      	mov	r2, r3
 8023116:	4613      	mov	r3, r2
 8023118:	011b      	lsls	r3, r3, #4
 802311a:	4413      	add	r3, r2
 802311c:	009b      	lsls	r3, r3, #2
 802311e:	4a16      	ldr	r2, [pc, #88]	; (8023178 <EP3_OUT_Callback+0xb0>)
 8023120:	4413      	add	r3, r2
 8023122:	4a11      	ldr	r2, [pc, #68]	; (8023168 <EP3_OUT_Callback+0xa0>)
 8023124:	6812      	ldr	r2, [r2, #0]
 8023126:	6879      	ldr	r1, [r7, #4]
 8023128:	4618      	mov	r0, r3
 802312a:	f00e ffd9 	bl	80320e0 <memcpy>
        circ_buf[tail].len = Receive_length;
 802312e:	4b10      	ldr	r3, [pc, #64]	; (8023170 <EP3_OUT_Callback+0xa8>)
 8023130:	781b      	ldrb	r3, [r3, #0]
 8023132:	b2db      	uxtb	r3, r3
 8023134:	4618      	mov	r0, r3
 8023136:	4b0c      	ldr	r3, [pc, #48]	; (8023168 <EP3_OUT_Callback+0xa0>)
 8023138:	681a      	ldr	r2, [r3, #0]
 802313a:	490f      	ldr	r1, [pc, #60]	; (8023178 <EP3_OUT_Callback+0xb0>)
 802313c:	4603      	mov	r3, r0
 802313e:	011b      	lsls	r3, r3, #4
 8023140:	4403      	add	r3, r0
 8023142:	009b      	lsls	r3, r3, #2
 8023144:	440b      	add	r3, r1
 8023146:	3340      	adds	r3, #64	; 0x40
 8023148:	601a      	str	r2, [r3, #0]
        size++;
 802314a:	4b08      	ldr	r3, [pc, #32]	; (802316c <EP3_OUT_Callback+0xa4>)
 802314c:	781b      	ldrb	r3, [r3, #0]
 802314e:	b2db      	uxtb	r3, r3
 8023150:	3301      	adds	r3, #1
 8023152:	b2da      	uxtb	r2, r3
 8023154:	4b05      	ldr	r3, [pc, #20]	; (802316c <EP3_OUT_Callback+0xa4>)
 8023156:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8023158:	f7ff ff9c 	bl	8023094 <USB_DataRx_Sched_Internal>
    }
}
 802315c:	bf00      	nop
 802315e:	3708      	adds	r7, #8
 8023160:	46bd      	mov	sp, r7
 8023162:	bd80      	pop	{r7, pc}
 8023164:	20005b9c 	.word	0x20005b9c
 8023168:	2000094c 	.word	0x2000094c
 802316c:	20001259 	.word	0x20001259
 8023170:	20000010 	.word	0x20000010
 8023174:	78787879 	.word	0x78787879
 8023178:	20000950 	.word	0x20000950

0802317c <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 802317c:	b580      	push	{r7, lr}
 802317e:	b082      	sub	sp, #8
 8023180:	af00      	add	r7, sp, #0
 8023182:	6078      	str	r0, [r7, #4]
 8023184:	460b      	mov	r3, r1
 8023186:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= CDC_DATA_FS_MAX_PACKET_SIZE)
 8023188:	78fb      	ldrb	r3, [r7, #3]
 802318a:	2b40      	cmp	r3, #64	; 0x40
 802318c:	d809      	bhi.n	80231a2 <CDC_Send_DATA+0x26>
  {
	/*Sent flag*/
	packet_sent = 0;
 802318e:	4b07      	ldr	r3, [pc, #28]	; (80231ac <CDC_Send_DATA+0x30>)
 8023190:	2200      	movs	r2, #0
 8023192:	601a      	str	r2, [r3, #0]
	/* send  packet to PMA*/
//    CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
    CDC_Transmit_FS((unsigned char*)ptrBuffer, Send_length);
 8023194:	78fb      	ldrb	r3, [r7, #3]
 8023196:	4619      	mov	r1, r3
 8023198:	6878      	ldr	r0, [r7, #4]
 802319a:	f00d ff41 	bl	8031020 <CDC_Transmit_FS>
  }
  else
  {
    return 0;
  }
  return 1;
 802319e:	2301      	movs	r3, #1
 80231a0:	e000      	b.n	80231a4 <CDC_Send_DATA+0x28>
    return 0;
 80231a2:	2300      	movs	r3, #0
}
 80231a4:	4618      	mov	r0, r3
 80231a6:	3708      	adds	r7, #8
 80231a8:	46bd      	mov	sp, r7
 80231aa:	bd80      	pop	{r7, pc}
 80231ac:	20000014 	.word	0x20000014

080231b0 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 80231b0:	b580      	push	{r7, lr}
 80231b2:	af00      	add	r7, sp, #0
//  USBD_CtlReceiveStatus(&hUsbDeviceHS);
    USBD_CtlReceiveStatus(&hUsbDeviceFS);
 80231b4:	4802      	ldr	r0, [pc, #8]	; (80231c0 <CDC_Receive_DATA+0x10>)
 80231b6:	f00d fe22 	bl	8030dfe <USBD_CtlReceiveStatus>
  return 1 ;
 80231ba:	2301      	movs	r3, #1
}
 80231bc:	4618      	mov	r0, r3
 80231be:	bd80      	pop	{r7, pc}
 80231c0:	20005b9c 	.word	0x20005b9c

080231c4 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 80231c4:	b480      	push	{r7}
 80231c6:	af00      	add	r7, sp, #0
  return packet_sent;
 80231c8:	4b03      	ldr	r3, [pc, #12]	; (80231d8 <CDC_IsPacketSent+0x14>)
 80231ca:	681b      	ldr	r3, [r3, #0]
}
 80231cc:	4618      	mov	r0, r3
 80231ce:	46bd      	mov	sp, r7
 80231d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231d4:	4770      	bx	lr
 80231d6:	bf00      	nop
 80231d8:	20000014 	.word	0x20000014

080231dc <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 80231dc:	b480      	push	{r7}
 80231de:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY_Msk) != RESET;
 80231e0:	4b06      	ldr	r3, [pc, #24]	; (80231fc <is_external_clock_avail+0x20>)
 80231e2:	681b      	ldr	r3, [r3, #0]
 80231e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	bf14      	ite	ne
 80231ec:	2301      	movne	r3, #1
 80231ee:	2300      	moveq	r3, #0
 80231f0:	b2db      	uxtb	r3, r3
}
 80231f2:	4618      	mov	r0, r3
 80231f4:	46bd      	mov	sp, r7
 80231f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231fa:	4770      	bx	lr
 80231fc:	40023800 	.word	0x40023800

08023200 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 8023200:	b580      	push	{r7, lr}
 8023202:	b088      	sub	sp, #32
 8023204:	af00      	add	r7, sp, #0
 8023206:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8023208:	f005 f99c 	bl	8028544 <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 802320c:	2300      	movs	r3, #0
 802320e:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 8023210:	2300      	movs	r3, #0
 8023212:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 8023214:	2301      	movs	r3, #1
 8023216:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 8023218:	2302      	movs	r3, #2
 802321a:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 802321c:	f107 0308 	add.w	r3, r7, #8
 8023220:	2100      	movs	r1, #0
 8023222:	4618      	mov	r0, r3
 8023224:	f005 faf0 	bl	8028808 <HAL_FLASHEx_Erase>
 8023228:	4603      	mov	r3, r0
 802322a:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 802322c:	f005 f9ac 	bl	8028588 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 8023230:	7ffb      	ldrb	r3, [r7, #31]
 8023232:	2b00      	cmp	r3, #0
 8023234:	d002      	beq.n	802323c <flash_page_erase+0x3c>
 8023236:	f04f 33ff 	mov.w	r3, #4294967295
 802323a:	e000      	b.n	802323e <flash_page_erase+0x3e>
 802323c:	2300      	movs	r3, #0
}
 802323e:	4618      	mov	r0, r3
 8023240:	3720      	adds	r7, #32
 8023242:	46bd      	mov	sp, r7
 8023244:	bd80      	pop	{r7, pc}

08023246 <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8023246:	b5b0      	push	{r4, r5, r7, lr}
 8023248:	b088      	sub	sp, #32
 802324a:	af00      	add	r7, sp, #0
 802324c:	60f8      	str	r0, [r7, #12]
 802324e:	60b9      	str	r1, [r7, #8]
 8023250:	607a      	str	r2, [r7, #4]
    int ret = -1;
 8023252:	f04f 33ff 	mov.w	r3, #4294967295
 8023256:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8023258:	f005 f974 	bl	8028544 <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 802325c:	2300      	movs	r3, #0
 802325e:	61bb      	str	r3, [r7, #24]
 8023260:	e017      	b.n	8023292 <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 8023262:	68ba      	ldr	r2, [r7, #8]
 8023264:	69bb      	ldr	r3, [r7, #24]
 8023266:	4413      	add	r3, r2
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 802326c:	697b      	ldr	r3, [r7, #20]
 802326e:	2200      	movs	r2, #0
 8023270:	461c      	mov	r4, r3
 8023272:	4615      	mov	r5, r2
 8023274:	4622      	mov	r2, r4
 8023276:	462b      	mov	r3, r5
 8023278:	68f9      	ldr	r1, [r7, #12]
 802327a:	2002      	movs	r0, #2
 802327c:	f005 f85a 	bl	8028334 <HAL_FLASH_Program>
 8023280:	4603      	mov	r3, r0
 8023282:	2b00      	cmp	r3, #0
 8023284:	d10c      	bne.n	80232a0 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 8023286:	68fb      	ldr	r3, [r7, #12]
 8023288:	3304      	adds	r3, #4
 802328a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 802328c:	69bb      	ldr	r3, [r7, #24]
 802328e:	3304      	adds	r3, #4
 8023290:	61bb      	str	r3, [r7, #24]
 8023292:	69ba      	ldr	r2, [r7, #24]
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	429a      	cmp	r2, r3
 8023298:	d3e3      	bcc.n	8023262 <flash_write+0x1c>
    }

    ret = data_len;
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	61fb      	str	r3, [r7, #28]
 802329e:	e000      	b.n	80232a2 <flash_write+0x5c>
            goto Exit;
 80232a0:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 80232a2:	f005 f971 	bl	8028588 <HAL_FLASH_Lock>

    return ret;
 80232a6:	69fb      	ldr	r3, [r7, #28]
}
 80232a8:	4618      	mov	r0, r3
 80232aa:	3720      	adds	r7, #32
 80232ac:	46bd      	mov	sp, r7
 80232ae:	bdb0      	pop	{r4, r5, r7, pc}

080232b0 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80232b0:	b480      	push	{r7}
 80232b2:	b087      	sub	sp, #28
 80232b4:	af00      	add	r7, sp, #0
 80232b6:	60f8      	str	r0, [r7, #12]
 80232b8:	60b9      	str	r1, [r7, #8]
 80232ba:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 80232bc:	2300      	movs	r3, #0
 80232be:	617b      	str	r3, [r7, #20]
 80232c0:	e00c      	b.n	80232dc <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 80232c2:	68fa      	ldr	r2, [r7, #12]
 80232c4:	697b      	ldr	r3, [r7, #20]
 80232c6:	4413      	add	r3, r2
 80232c8:	4619      	mov	r1, r3
 80232ca:	68ba      	ldr	r2, [r7, #8]
 80232cc:	697b      	ldr	r3, [r7, #20]
 80232ce:	4413      	add	r3, r2
 80232d0:	780a      	ldrb	r2, [r1, #0]
 80232d2:	b2d2      	uxtb	r2, r2
 80232d4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 80232d6:	697b      	ldr	r3, [r7, #20]
 80232d8:	3301      	adds	r3, #1
 80232da:	617b      	str	r3, [r7, #20]
 80232dc:	697a      	ldr	r2, [r7, #20]
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	429a      	cmp	r2, r3
 80232e2:	d3ee      	bcc.n	80232c2 <flash_read+0x12>
    }

    return i;
 80232e4:	697b      	ldr	r3, [r7, #20]
}
 80232e6:	4618      	mov	r0, r3
 80232e8:	371c      	adds	r7, #28
 80232ea:	46bd      	mov	sp, r7
 80232ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232f0:	4770      	bx	lr
	...

080232f4 <MX_FSMC_Init>:

NAND_HandleTypeDef hnand1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80232f4:	b580      	push	{r7, lr}
 80232f6:	b088      	sub	sp, #32
 80232f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80232fa:	f107 0310 	add.w	r3, r7, #16
 80232fe:	2200      	movs	r2, #0
 8023300:	601a      	str	r2, [r3, #0]
 8023302:	605a      	str	r2, [r3, #4]
 8023304:	609a      	str	r2, [r3, #8]
 8023306:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8023308:	463b      	mov	r3, r7
 802330a:	2200      	movs	r2, #0
 802330c:	601a      	str	r2, [r3, #0]
 802330e:	605a      	str	r2, [r3, #4]
 8023310:	609a      	str	r2, [r3, #8]
 8023312:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8023314:	4b26      	ldr	r3, [pc, #152]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023316:	4a27      	ldr	r2, [pc, #156]	; (80233b4 <MX_FSMC_Init+0xc0>)
 8023318:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 802331a:	4b25      	ldr	r3, [pc, #148]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802331c:	2210      	movs	r2, #16
 802331e:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8023320:	4b23      	ldr	r3, [pc, #140]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023322:	2202      	movs	r2, #2
 8023324:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_16;
 8023326:	4b22      	ldr	r3, [pc, #136]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023328:	2210      	movs	r2, #16
 802332a:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 802332c:	4b20      	ldr	r3, [pc, #128]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802332e:	2200      	movs	r2, #0
 8023330:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8023332:	4b1f      	ldr	r3, [pc, #124]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023334:	2200      	movs	r2, #0
 8023336:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 1;
 8023338:	4b1d      	ldr	r3, [pc, #116]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802333a:	2201      	movs	r2, #1
 802333c:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 2;
 802333e:	4b1c      	ldr	r3, [pc, #112]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023340:	2202      	movs	r2, #2
 8023342:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8023344:	4b1a      	ldr	r3, [pc, #104]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023346:	2200      	movs	r2, #0
 8023348:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 802334a:	4b19      	ldr	r3, [pc, #100]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802334c:	2200      	movs	r2, #0
 802334e:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8023350:	4b17      	ldr	r3, [pc, #92]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023352:	2200      	movs	r2, #0
 8023354:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8023356:	4b16      	ldr	r3, [pc, #88]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023358:	2200      	movs	r2, #0
 802335a:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 802335c:	4b14      	ldr	r3, [pc, #80]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802335e:	2200      	movs	r2, #0
 8023360:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8023362:	4b13      	ldr	r3, [pc, #76]	; (80233b0 <MX_FSMC_Init+0xbc>)
 8023364:	2200      	movs	r2, #0
 8023366:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8023368:	4b11      	ldr	r3, [pc, #68]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802336a:	2201      	movs	r2, #1
 802336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8023370:	23fc      	movs	r3, #252	; 0xfc
 8023372:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8023374:	23fc      	movs	r3, #252	; 0xfc
 8023376:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8023378:	23fc      	movs	r3, #252	; 0xfc
 802337a:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 802337c:	23fc      	movs	r3, #252	; 0xfc
 802337e:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8023380:	23fc      	movs	r3, #252	; 0xfc
 8023382:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8023384:	23fc      	movs	r3, #252	; 0xfc
 8023386:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8023388:	23fc      	movs	r3, #252	; 0xfc
 802338a:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 802338c:	23fc      	movs	r3, #252	; 0xfc
 802338e:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8023390:	463a      	mov	r2, r7
 8023392:	f107 0310 	add.w	r3, r7, #16
 8023396:	4619      	mov	r1, r3
 8023398:	4805      	ldr	r0, [pc, #20]	; (80233b0 <MX_FSMC_Init+0xbc>)
 802339a:	f005 fe08 	bl	8028fae <HAL_NAND_Init>
 802339e:	4603      	mov	r3, r0
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	d001      	beq.n	80233a8 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80233a4:	f000 ffe6 	bl	8024374 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80233a8:	bf00      	nop
 80233aa:	3720      	adds	r7, #32
 80233ac:	46bd      	mov	sp, r7
 80233ae:	bd80      	pop	{r7, pc}
 80233b0:	2000125c 	.word	0x2000125c
 80233b4:	a0000060 	.word	0xa0000060

080233b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80233b8:	b580      	push	{r7, lr}
 80233ba:	b086      	sub	sp, #24
 80233bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80233be:	1d3b      	adds	r3, r7, #4
 80233c0:	2200      	movs	r2, #0
 80233c2:	601a      	str	r2, [r3, #0]
 80233c4:	605a      	str	r2, [r3, #4]
 80233c6:	609a      	str	r2, [r3, #8]
 80233c8:	60da      	str	r2, [r3, #12]
 80233ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80233cc:	4b20      	ldr	r3, [pc, #128]	; (8023450 <HAL_FSMC_MspInit+0x98>)
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	2b00      	cmp	r3, #0
 80233d2:	d139      	bne.n	8023448 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80233d4:	4b1e      	ldr	r3, [pc, #120]	; (8023450 <HAL_FSMC_MspInit+0x98>)
 80233d6:	2201      	movs	r2, #1
 80233d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80233da:	2300      	movs	r3, #0
 80233dc:	603b      	str	r3, [r7, #0]
 80233de:	4b1d      	ldr	r3, [pc, #116]	; (8023454 <HAL_FSMC_MspInit+0x9c>)
 80233e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233e2:	4a1c      	ldr	r2, [pc, #112]	; (8023454 <HAL_FSMC_MspInit+0x9c>)
 80233e4:	f043 0301 	orr.w	r3, r3, #1
 80233e8:	6393      	str	r3, [r2, #56]	; 0x38
 80233ea:	4b1a      	ldr	r3, [pc, #104]	; (8023454 <HAL_FSMC_MspInit+0x9c>)
 80233ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233ee:	f003 0301 	and.w	r3, r3, #1
 80233f2:	603b      	str	r3, [r7, #0]
 80233f4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80233f6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80233fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80233fc:	2302      	movs	r3, #2
 80233fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023400:	2300      	movs	r3, #0
 8023402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023404:	2303      	movs	r3, #3
 8023406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023408:	230c      	movs	r3, #12
 802340a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802340c:	1d3b      	adds	r3, r7, #4
 802340e:	4619      	mov	r1, r3
 8023410:	4811      	ldr	r0, [pc, #68]	; (8023458 <HAL_FSMC_MspInit+0xa0>)
 8023412:	f005 fb1b 	bl	8028a4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8023416:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 802341a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802341c:	2302      	movs	r3, #2
 802341e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023420:	2300      	movs	r3, #0
 8023422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023424:	2303      	movs	r3, #3
 8023426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8023428:	230c      	movs	r3, #12
 802342a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802342c:	1d3b      	adds	r3, r7, #4
 802342e:	4619      	mov	r1, r3
 8023430:	480a      	ldr	r0, [pc, #40]	; (802345c <HAL_FSMC_MspInit+0xa4>)
 8023432:	f005 fb0b 	bl	8028a4c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8023436:	2200      	movs	r2, #0
 8023438:	2100      	movs	r1, #0
 802343a:	2030      	movs	r0, #48	; 0x30
 802343c:	f004 fea3 	bl	8028186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8023440:	2030      	movs	r0, #48	; 0x30
 8023442:	f004 febc 	bl	80281be <HAL_NVIC_EnableIRQ>
 8023446:	e000      	b.n	802344a <HAL_FSMC_MspInit+0x92>
    return;
 8023448:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 802344a:	3718      	adds	r7, #24
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}
 8023450:	2000129c 	.word	0x2000129c
 8023454:	40023800 	.word	0x40023800
 8023458:	40021000 	.word	0x40021000
 802345c:	40020c00 	.word	0x40020c00

08023460 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8023460:	b580      	push	{r7, lr}
 8023462:	b082      	sub	sp, #8
 8023464:	af00      	add	r7, sp, #0
 8023466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8023468:	f7ff ffa6 	bl	80233b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 802346c:	bf00      	nop
 802346e:	3708      	adds	r7, #8
 8023470:	46bd      	mov	sp, r7
 8023472:	bd80      	pop	{r7, pc}

08023474 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8023474:	b580      	push	{r7, lr}
 8023476:	b086      	sub	sp, #24
 8023478:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802347a:	1d3b      	adds	r3, r7, #4
 802347c:	2200      	movs	r2, #0
 802347e:	601a      	str	r2, [r3, #0]
 8023480:	605a      	str	r2, [r3, #4]
 8023482:	609a      	str	r2, [r3, #8]
 8023484:	60da      	str	r2, [r3, #12]
 8023486:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8023488:	4b20      	ldr	r3, [pc, #128]	; (802350c <nand_gpio_init+0x98>)
 802348a:	681b      	ldr	r3, [r3, #0]
 802348c:	2b00      	cmp	r3, #0
 802348e:	d139      	bne.n	8023504 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8023490:	4b1e      	ldr	r3, [pc, #120]	; (802350c <nand_gpio_init+0x98>)
 8023492:	2201      	movs	r2, #1
 8023494:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8023496:	2300      	movs	r3, #0
 8023498:	603b      	str	r3, [r7, #0]
 802349a:	4b1d      	ldr	r3, [pc, #116]	; (8023510 <nand_gpio_init+0x9c>)
 802349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802349e:	4a1c      	ldr	r2, [pc, #112]	; (8023510 <nand_gpio_init+0x9c>)
 80234a0:	f043 0301 	orr.w	r3, r3, #1
 80234a4:	6393      	str	r3, [r2, #56]	; 0x38
 80234a6:	4b1a      	ldr	r3, [pc, #104]	; (8023510 <nand_gpio_init+0x9c>)
 80234a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80234aa:	f003 0301 	and.w	r3, r3, #1
 80234ae:	603b      	str	r3, [r7, #0]
 80234b0:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80234b2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80234b6:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80234b8:	2302      	movs	r3, #2
 80234ba:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80234bc:	2300      	movs	r3, #0
 80234be:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80234c0:	2303      	movs	r3, #3
 80234c2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80234c4:	230c      	movs	r3, #12
 80234c6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80234c8:	1d3b      	adds	r3, r7, #4
 80234ca:	4619      	mov	r1, r3
 80234cc:	4811      	ldr	r0, [pc, #68]	; (8023514 <nand_gpio_init+0xa0>)
 80234ce:	f005 fabd 	bl	8028a4c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80234d2:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 80234d6:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80234d8:	2302      	movs	r3, #2
 80234da:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80234dc:	2300      	movs	r3, #0
 80234de:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80234e0:	2303      	movs	r3, #3
 80234e2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80234e4:	230c      	movs	r3, #12
 80234e6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80234e8:	1d3b      	adds	r3, r7, #4
 80234ea:	4619      	mov	r1, r3
 80234ec:	480a      	ldr	r0, [pc, #40]	; (8023518 <nand_gpio_init+0xa4>)
 80234ee:	f005 faad 	bl	8028a4c <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 80234f2:	2200      	movs	r2, #0
 80234f4:	2100      	movs	r1, #0
 80234f6:	2030      	movs	r0, #48	; 0x30
 80234f8:	f004 fe45 	bl	8028186 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80234fc:	2030      	movs	r0, #48	; 0x30
 80234fe:	f004 fe5e 	bl	80281be <HAL_NVIC_EnableIRQ>
 8023502:	e000      	b.n	8023506 <nand_gpio_init+0x92>
	    return;
 8023504:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8023506:	3718      	adds	r7, #24
 8023508:	46bd      	mov	sp, r7
 802350a:	bd80      	pop	{r7, pc}
 802350c:	200012b8 	.word	0x200012b8
 8023510:	40023800 	.word	0x40023800
 8023514:	40021000 	.word	0x40021000
 8023518:	40020c00 	.word	0x40020c00

0802351c <nand_fsmc_init>:


static void nand_fsmc_init()
{
 802351c:	b580      	push	{r7, lr}
 802351e:	b08a      	sub	sp, #40	; 0x28
 8023520:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8023522:	f107 0318 	add.w	r3, r7, #24
 8023526:	2200      	movs	r2, #0
 8023528:	601a      	str	r2, [r3, #0]
 802352a:	605a      	str	r2, [r3, #4]
 802352c:	609a      	str	r2, [r3, #8]
 802352e:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8023530:	f107 0308 	add.w	r3, r7, #8
 8023534:	2200      	movs	r2, #0
 8023536:	601a      	str	r2, [r3, #0]
 8023538:	605a      	str	r2, [r3, #4]
 802353a:	609a      	str	r2, [r3, #8]
 802353c:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 802353e:	4b29      	ldr	r3, [pc, #164]	; (80235e4 <nand_fsmc_init+0xc8>)
 8023540:	4a29      	ldr	r2, [pc, #164]	; (80235e8 <nand_fsmc_init+0xcc>)
 8023542:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8023544:	4b27      	ldr	r3, [pc, #156]	; (80235e4 <nand_fsmc_init+0xc8>)
 8023546:	2210      	movs	r2, #16
 8023548:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 802354a:	4b26      	ldr	r3, [pc, #152]	; (80235e4 <nand_fsmc_init+0xc8>)
 802354c:	2202      	movs	r2, #2
 802354e:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8023550:	4b24      	ldr	r3, [pc, #144]	; (80235e4 <nand_fsmc_init+0xc8>)
 8023552:	2200      	movs	r2, #0
 8023554:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8023556:	4b23      	ldr	r3, [pc, #140]	; (80235e4 <nand_fsmc_init+0xc8>)
 8023558:	2200      	movs	r2, #0
 802355a:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 802355c:	4b21      	ldr	r3, [pc, #132]	; (80235e4 <nand_fsmc_init+0xc8>)
 802355e:	2200      	movs	r2, #0
 8023560:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8023562:	4b22      	ldr	r3, [pc, #136]	; (80235ec <nand_fsmc_init+0xd0>)
 8023564:	791b      	ldrb	r3, [r3, #4]
 8023566:	461a      	mov	r2, r3
 8023568:	4b1e      	ldr	r3, [pc, #120]	; (80235e4 <nand_fsmc_init+0xc8>)
 802356a:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 802356c:	4b1f      	ldr	r3, [pc, #124]	; (80235ec <nand_fsmc_init+0xd0>)
 802356e:	795b      	ldrb	r3, [r3, #5]
 8023570:	461a      	mov	r2, r3
 8023572:	4b1c      	ldr	r3, [pc, #112]	; (80235e4 <nand_fsmc_init+0xc8>)
 8023574:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8023576:	4b1d      	ldr	r3, [pc, #116]	; (80235ec <nand_fsmc_init+0xd0>)
 8023578:	781b      	ldrb	r3, [r3, #0]
 802357a:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 802357c:	4b1b      	ldr	r3, [pc, #108]	; (80235ec <nand_fsmc_init+0xd0>)
 802357e:	785b      	ldrb	r3, [r3, #1]
 8023580:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8023582:	4b1a      	ldr	r3, [pc, #104]	; (80235ec <nand_fsmc_init+0xd0>)
 8023584:	789b      	ldrb	r3, [r3, #2]
 8023586:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8023588:	4b18      	ldr	r3, [pc, #96]	; (80235ec <nand_fsmc_init+0xd0>)
 802358a:	78db      	ldrb	r3, [r3, #3]
 802358c:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 802358e:	4b17      	ldr	r3, [pc, #92]	; (80235ec <nand_fsmc_init+0xd0>)
 8023590:	781b      	ldrb	r3, [r3, #0]
 8023592:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8023594:	4b15      	ldr	r3, [pc, #84]	; (80235ec <nand_fsmc_init+0xd0>)
 8023596:	785b      	ldrb	r3, [r3, #1]
 8023598:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 802359a:	4b14      	ldr	r3, [pc, #80]	; (80235ec <nand_fsmc_init+0xd0>)
 802359c:	789b      	ldrb	r3, [r3, #2]
 802359e:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 80235a0:	4b12      	ldr	r3, [pc, #72]	; (80235ec <nand_fsmc_init+0xd0>)
 80235a2:	78db      	ldrb	r3, [r3, #3]
 80235a4:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80235a6:	f107 0208 	add.w	r2, r7, #8
 80235aa:	f107 0318 	add.w	r3, r7, #24
 80235ae:	4619      	mov	r1, r3
 80235b0:	480c      	ldr	r0, [pc, #48]	; (80235e4 <nand_fsmc_init+0xc8>)
 80235b2:	f005 fcfc 	bl	8028fae <HAL_NAND_Init>
 80235b6:	4603      	mov	r3, r0
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d001      	beq.n	80235c0 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 80235bc:	f000 feda 	bl	8024374 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 80235c0:	2300      	movs	r3, #0
 80235c2:	607b      	str	r3, [r7, #4]
 80235c4:	4b0a      	ldr	r3, [pc, #40]	; (80235f0 <nand_fsmc_init+0xd4>)
 80235c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235c8:	4a09      	ldr	r2, [pc, #36]	; (80235f0 <nand_fsmc_init+0xd4>)
 80235ca:	f043 0301 	orr.w	r3, r3, #1
 80235ce:	6393      	str	r3, [r2, #56]	; 0x38
 80235d0:	4b07      	ldr	r3, [pc, #28]	; (80235f0 <nand_fsmc_init+0xd4>)
 80235d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80235d4:	f003 0301 	and.w	r3, r3, #1
 80235d8:	607b      	str	r3, [r7, #4]
 80235da:	687b      	ldr	r3, [r7, #4]
}
 80235dc:	bf00      	nop
 80235de:	3728      	adds	r7, #40	; 0x28
 80235e0:	46bd      	mov	sp, r7
 80235e2:	bd80      	pop	{r7, pc}
 80235e4:	2000125c 	.word	0x2000125c
 80235e8:	a0000060 	.word	0xa0000060
 80235ec:	200012a0 	.word	0x200012a0
 80235f0:	40023800 	.word	0x40023800

080235f4 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 80235f4:	b580      	push	{r7, lr}
 80235f6:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 80235f8:	4b42      	ldr	r3, [pc, #264]	; (8023704 <nand_print_fsmc_info+0x110>)
 80235fa:	781b      	ldrb	r3, [r3, #0]
 80235fc:	4619      	mov	r1, r3
 80235fe:	4842      	ldr	r0, [pc, #264]	; (8023708 <nand_print_fsmc_info+0x114>)
 8023600:	f00e fc4e 	bl	8031ea0 <printf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8023604:	4b3f      	ldr	r3, [pc, #252]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023606:	785b      	ldrb	r3, [r3, #1]
 8023608:	4619      	mov	r1, r3
 802360a:	4840      	ldr	r0, [pc, #256]	; (802370c <nand_print_fsmc_info+0x118>)
 802360c:	f00e fc48 	bl	8031ea0 <printf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8023610:	4b3c      	ldr	r3, [pc, #240]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023612:	789b      	ldrb	r3, [r3, #2]
 8023614:	4619      	mov	r1, r3
 8023616:	483e      	ldr	r0, [pc, #248]	; (8023710 <nand_print_fsmc_info+0x11c>)
 8023618:	f00e fc42 	bl	8031ea0 <printf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 802361c:	4b39      	ldr	r3, [pc, #228]	; (8023704 <nand_print_fsmc_info+0x110>)
 802361e:	78db      	ldrb	r3, [r3, #3]
 8023620:	4619      	mov	r1, r3
 8023622:	483c      	ldr	r0, [pc, #240]	; (8023714 <nand_print_fsmc_info+0x120>)
 8023624:	f00e fc3c 	bl	8031ea0 <printf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8023628:	4b36      	ldr	r3, [pc, #216]	; (8023704 <nand_print_fsmc_info+0x110>)
 802362a:	791b      	ldrb	r3, [r3, #4]
 802362c:	4619      	mov	r1, r3
 802362e:	483a      	ldr	r0, [pc, #232]	; (8023718 <nand_print_fsmc_info+0x124>)
 8023630:	f00e fc36 	bl	8031ea0 <printf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8023634:	4b33      	ldr	r3, [pc, #204]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023636:	795b      	ldrb	r3, [r3, #5]
 8023638:	4619      	mov	r1, r3
 802363a:	4838      	ldr	r0, [pc, #224]	; (802371c <nand_print_fsmc_info+0x128>)
 802363c:	f00e fc30 	bl	8031ea0 <printf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8023640:	4b30      	ldr	r3, [pc, #192]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023642:	799b      	ldrb	r3, [r3, #6]
 8023644:	4619      	mov	r1, r3
 8023646:	4836      	ldr	r0, [pc, #216]	; (8023720 <nand_print_fsmc_info+0x12c>)
 8023648:	f00e fc2a 	bl	8031ea0 <printf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 802364c:	4b2d      	ldr	r3, [pc, #180]	; (8023704 <nand_print_fsmc_info+0x110>)
 802364e:	79db      	ldrb	r3, [r3, #7]
 8023650:	4619      	mov	r1, r3
 8023652:	4834      	ldr	r0, [pc, #208]	; (8023724 <nand_print_fsmc_info+0x130>)
 8023654:	f00e fc24 	bl	8031ea0 <printf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8023658:	4b2a      	ldr	r3, [pc, #168]	; (8023704 <nand_print_fsmc_info+0x110>)
 802365a:	7a1b      	ldrb	r3, [r3, #8]
 802365c:	4619      	mov	r1, r3
 802365e:	4832      	ldr	r0, [pc, #200]	; (8023728 <nand_print_fsmc_info+0x134>)
 8023660:	f00e fc1e 	bl	8031ea0 <printf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8023664:	4b27      	ldr	r3, [pc, #156]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023666:	7a5b      	ldrb	r3, [r3, #9]
 8023668:	4619      	mov	r1, r3
 802366a:	4830      	ldr	r0, [pc, #192]	; (802372c <nand_print_fsmc_info+0x138>)
 802366c:	f00e fc18 	bl	8031ea0 <printf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8023670:	4b24      	ldr	r3, [pc, #144]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023672:	7a9b      	ldrb	r3, [r3, #10]
 8023674:	4619      	mov	r1, r3
 8023676:	482e      	ldr	r0, [pc, #184]	; (8023730 <nand_print_fsmc_info+0x13c>)
 8023678:	f00e fc12 	bl	8031ea0 <printf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 802367c:	4b21      	ldr	r3, [pc, #132]	; (8023704 <nand_print_fsmc_info+0x110>)
 802367e:	7adb      	ldrb	r3, [r3, #11]
 8023680:	4619      	mov	r1, r3
 8023682:	482c      	ldr	r0, [pc, #176]	; (8023734 <nand_print_fsmc_info+0x140>)
 8023684:	f00e fc0c 	bl	8031ea0 <printf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8023688:	4b1e      	ldr	r3, [pc, #120]	; (8023704 <nand_print_fsmc_info+0x110>)
 802368a:	7b1b      	ldrb	r3, [r3, #12]
 802368c:	4619      	mov	r1, r3
 802368e:	482a      	ldr	r0, [pc, #168]	; (8023738 <nand_print_fsmc_info+0x144>)
 8023690:	f00e fc06 	bl	8031ea0 <printf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8023694:	4b1b      	ldr	r3, [pc, #108]	; (8023704 <nand_print_fsmc_info+0x110>)
 8023696:	7b5b      	ldrb	r3, [r3, #13]
 8023698:	4619      	mov	r1, r3
 802369a:	4828      	ldr	r0, [pc, #160]	; (802373c <nand_print_fsmc_info+0x148>)
 802369c:	f00e fc00 	bl	8031ea0 <printf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 80236a0:	4b18      	ldr	r3, [pc, #96]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236a2:	7b9b      	ldrb	r3, [r3, #14]
 80236a4:	4619      	mov	r1, r3
 80236a6:	4826      	ldr	r0, [pc, #152]	; (8023740 <nand_print_fsmc_info+0x14c>)
 80236a8:	f00e fbfa 	bl	8031ea0 <printf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 80236ac:	4b15      	ldr	r3, [pc, #84]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236ae:	7bdb      	ldrb	r3, [r3, #15]
 80236b0:	4619      	mov	r1, r3
 80236b2:	4824      	ldr	r0, [pc, #144]	; (8023744 <nand_print_fsmc_info+0x150>)
 80236b4:	f00e fbf4 	bl	8031ea0 <printf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 80236b8:	4b12      	ldr	r3, [pc, #72]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236ba:	7c1b      	ldrb	r3, [r3, #16]
 80236bc:	4619      	mov	r1, r3
 80236be:	4822      	ldr	r0, [pc, #136]	; (8023748 <nand_print_fsmc_info+0x154>)
 80236c0:	f00e fbee 	bl	8031ea0 <printf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 80236c4:	4b0f      	ldr	r3, [pc, #60]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236c6:	7c5b      	ldrb	r3, [r3, #17]
 80236c8:	4619      	mov	r1, r3
 80236ca:	4820      	ldr	r0, [pc, #128]	; (802374c <nand_print_fsmc_info+0x158>)
 80236cc:	f00e fbe8 	bl	8031ea0 <printf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 80236d0:	4b0c      	ldr	r3, [pc, #48]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236d2:	7c9b      	ldrb	r3, [r3, #18]
 80236d4:	4619      	mov	r1, r3
 80236d6:	481e      	ldr	r0, [pc, #120]	; (8023750 <nand_print_fsmc_info+0x15c>)
 80236d8:	f00e fbe2 	bl	8031ea0 <printf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 80236dc:	4b09      	ldr	r3, [pc, #36]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236de:	7cdb      	ldrb	r3, [r3, #19]
 80236e0:	4619      	mov	r1, r3
 80236e2:	481c      	ldr	r0, [pc, #112]	; (8023754 <nand_print_fsmc_info+0x160>)
 80236e4:	f00e fbdc 	bl	8031ea0 <printf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 80236e8:	4b06      	ldr	r3, [pc, #24]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236ea:	7d1b      	ldrb	r3, [r3, #20]
 80236ec:	4619      	mov	r1, r3
 80236ee:	481a      	ldr	r0, [pc, #104]	; (8023758 <nand_print_fsmc_info+0x164>)
 80236f0:	f00e fbd6 	bl	8031ea0 <printf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 80236f4:	4b03      	ldr	r3, [pc, #12]	; (8023704 <nand_print_fsmc_info+0x110>)
 80236f6:	7d5b      	ldrb	r3, [r3, #21]
 80236f8:	4619      	mov	r1, r3
 80236fa:	4818      	ldr	r0, [pc, #96]	; (802375c <nand_print_fsmc_info+0x168>)
 80236fc:	f00e fbd0 	bl	8031ea0 <printf>
}
 8023700:	bf00      	nop
 8023702:	bd80      	pop	{r7, pc}
 8023704:	200012a0 	.word	0x200012a0
 8023708:	08036904 	.word	0x08036904
 802370c:	08036918 	.word	0x08036918
 8023710:	08036930 	.word	0x08036930
 8023714:	08036948 	.word	0x08036948
 8023718:	08036960 	.word	0x08036960
 802371c:	08036978 	.word	0x08036978
 8023720:	0803698c 	.word	0x0803698c
 8023724:	080369a0 	.word	0x080369a0
 8023728:	080369b4 	.word	0x080369b4
 802372c:	080369cc 	.word	0x080369cc
 8023730:	080369e4 	.word	0x080369e4
 8023734:	08036a00 	.word	0x08036a00
 8023738:	08036a18 	.word	0x08036a18
 802373c:	08036a2c 	.word	0x08036a2c
 8023740:	08036a44 	.word	0x08036a44
 8023744:	08036a5c 	.word	0x08036a5c
 8023748:	08036a74 	.word	0x08036a74
 802374c:	08036a8c 	.word	0x08036a8c
 8023750:	08036aa4 	.word	0x08036aa4
 8023754:	08036ac0 	.word	0x08036ac0
 8023758:	08036adc 	.word	0x08036adc
 802375c:	08036af4 	.word	0x08036af4

08023760 <nand_reset>:

static void nand_reset()
{
 8023760:	b480      	push	{r7}
 8023762:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8023764:	4b04      	ldr	r3, [pc, #16]	; (8023778 <nand_reset+0x18>)
 8023766:	4a05      	ldr	r2, [pc, #20]	; (802377c <nand_reset+0x1c>)
 8023768:	7b12      	ldrb	r2, [r2, #12]
 802376a:	701a      	strb	r2, [r3, #0]
}
 802376c:	bf00      	nop
 802376e:	46bd      	mov	sp, r7
 8023770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023774:	4770      	bx	lr
 8023776:	bf00      	nop
 8023778:	70010000 	.word	0x70010000
 802377c:	200012a0 	.word	0x200012a0

08023780 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8023780:	b5b0      	push	{r4, r5, r7, lr}
 8023782:	b082      	sub	sp, #8
 8023784:	af00      	add	r7, sp, #0
 8023786:	6078      	str	r0, [r7, #4]
 8023788:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 802378a:	683b      	ldr	r3, [r7, #0]
 802378c:	2b15      	cmp	r3, #21
 802378e:	d802      	bhi.n	8023796 <nand_init+0x16>
        return -1;
 8023790:	f04f 33ff 	mov.w	r3, #4294967295
 8023794:	e015      	b.n	80237c2 <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8023796:	4a0d      	ldr	r2, [pc, #52]	; (80237cc <nand_init+0x4c>)
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	4614      	mov	r4, r2
 802379c:	461d      	mov	r5, r3
 802379e:	6828      	ldr	r0, [r5, #0]
 80237a0:	6869      	ldr	r1, [r5, #4]
 80237a2:	68aa      	ldr	r2, [r5, #8]
 80237a4:	68eb      	ldr	r3, [r5, #12]
 80237a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80237a8:	6928      	ldr	r0, [r5, #16]
 80237aa:	6020      	str	r0, [r4, #0]
 80237ac:	8aab      	ldrh	r3, [r5, #20]
 80237ae:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 80237b0:	f7ff fe60 	bl	8023474 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 80237b4:	f7ff feb2 	bl	802351c <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 80237b8:	f7ff ff1c 	bl	80235f4 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 80237bc:	f7ff ffd0 	bl	8023760 <nand_reset>

    return 0;
 80237c0:	2300      	movs	r3, #0
}
 80237c2:	4618      	mov	r0, r3
 80237c4:	3708      	adds	r7, #8
 80237c6:	46bd      	mov	sp, r7
 80237c8:	bdb0      	pop	{r4, r5, r7, pc}
 80237ca:	bf00      	nop
 80237cc:	200012a0 	.word	0x200012a0

080237d0 <nand_uninit>:

static void nand_uninit()
{
 80237d0:	b480      	push	{r7}
 80237d2:	af00      	add	r7, sp, #0
    //TODO
}
 80237d4:	bf00      	nop
 80237d6:	46bd      	mov	sp, r7
 80237d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237dc:	4770      	bx	lr
	...

080237e0 <nand_read_status>:

static uint32_t nand_read_status()
{
 80237e0:	b480      	push	{r7}
 80237e2:	b083      	sub	sp, #12
 80237e4:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 80237e6:	4b11      	ldr	r3, [pc, #68]	; (802382c <nand_read_status+0x4c>)
 80237e8:	4a11      	ldr	r2, [pc, #68]	; (8023830 <nand_read_status+0x50>)
 80237ea:	7c52      	ldrb	r2, [r2, #17]
 80237ec:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 80237ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80237f2:	781b      	ldrb	r3, [r3, #0]
 80237f4:	b2db      	uxtb	r3, r3
 80237f6:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 80237f8:	683b      	ldr	r3, [r7, #0]
 80237fa:	f003 0301 	and.w	r3, r3, #1
 80237fe:	2b00      	cmp	r3, #0
 8023800:	d002      	beq.n	8023808 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8023802:	2302      	movs	r3, #2
 8023804:	607b      	str	r3, [r7, #4]
 8023806:	e009      	b.n	802381c <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8023808:	683b      	ldr	r3, [r7, #0]
 802380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802380e:	2b00      	cmp	r3, #0
 8023810:	d002      	beq.n	8023818 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8023812:	2300      	movs	r3, #0
 8023814:	607b      	str	r3, [r7, #4]
 8023816:	e001      	b.n	802381c <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8023818:	2301      	movs	r3, #1
 802381a:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 802381c:	687b      	ldr	r3, [r7, #4]
}
 802381e:	4618      	mov	r0, r3
 8023820:	370c      	adds	r7, #12
 8023822:	46bd      	mov	sp, r7
 8023824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023828:	4770      	bx	lr
 802382a:	bf00      	nop
 802382c:	70010000 	.word	0x70010000
 8023830:	200012a0 	.word	0x200012a0

08023834 <nand_get_status>:

static uint32_t nand_get_status()
{
 8023834:	b580      	push	{r7, lr}
 8023836:	b082      	sub	sp, #8
 8023838:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 802383a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802383e:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8023840:	f7ff ffce 	bl	80237e0 <nand_read_status>
 8023844:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8023846:	e005      	b.n	8023854 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8023848:	f7ff ffca 	bl	80237e0 <nand_read_status>
 802384c:	6078      	str	r0, [r7, #4]
        timeout --;
 802384e:	683b      	ldr	r3, [r7, #0]
 8023850:	3b01      	subs	r3, #1
 8023852:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	2b01      	cmp	r3, #1
 8023858:	d102      	bne.n	8023860 <nand_get_status+0x2c>
 802385a:	683b      	ldr	r3, [r7, #0]
 802385c:	2b00      	cmp	r3, #0
 802385e:	d1f3      	bne.n	8023848 <nand_get_status+0x14>
    }

    if (!timeout)
 8023860:	683b      	ldr	r3, [r7, #0]
 8023862:	2b00      	cmp	r3, #0
 8023864:	d101      	bne.n	802386a <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8023866:	2303      	movs	r3, #3
 8023868:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 802386a:	687b      	ldr	r3, [r7, #4]
}
 802386c:	4618      	mov	r0, r3
 802386e:	3708      	adds	r7, #8
 8023870:	46bd      	mov	sp, r7
 8023872:	bd80      	pop	{r7, pc}

08023874 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8023874:	b480      	push	{r7}
 8023876:	b085      	sub	sp, #20
 8023878:	af00      	add	r7, sp, #0
 802387a:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 802387c:	2300      	movs	r3, #0
 802387e:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8023880:	4b17      	ldr	r3, [pc, #92]	; (80238e0 <nand_read_id+0x6c>)
 8023882:	4a18      	ldr	r2, [pc, #96]	; (80238e4 <nand_read_id+0x70>)
 8023884:	7ad2      	ldrb	r2, [r2, #11]
 8023886:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023888:	4b17      	ldr	r3, [pc, #92]	; (80238e8 <nand_read_id+0x74>)
 802388a:	2200      	movs	r2, #0
 802388c:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 802388e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023892:	681b      	ldr	r3, [r3, #0]
 8023894:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8023896:	68fb      	ldr	r3, [r7, #12]
 8023898:	b2da      	uxtb	r2, r3
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 802389e:	68fb      	ldr	r3, [r7, #12]
 80238a0:	0a1b      	lsrs	r3, r3, #8
 80238a2:	b2da      	uxtb	r2, r3
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 80238a8:	68fb      	ldr	r3, [r7, #12]
 80238aa:	0c1b      	lsrs	r3, r3, #16
 80238ac:	b2da      	uxtb	r2, r3
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	0e1b      	lsrs	r3, r3, #24
 80238b6:	b2da      	uxtb	r2, r3
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 80238bc:	4b0b      	ldr	r3, [pc, #44]	; (80238ec <nand_read_id+0x78>)
 80238be:	681b      	ldr	r3, [r3, #0]
 80238c0:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 80238c2:	68fb      	ldr	r3, [r7, #12]
 80238c4:	b2da      	uxtb	r2, r3
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 80238ca:	68fb      	ldr	r3, [r7, #12]
 80238cc:	0a1b      	lsrs	r3, r3, #8
 80238ce:	b2da      	uxtb	r2, r3
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	715a      	strb	r2, [r3, #5]
}
 80238d4:	bf00      	nop
 80238d6:	3714      	adds	r7, #20
 80238d8:	46bd      	mov	sp, r7
 80238da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238de:	4770      	bx	lr
 80238e0:	70010000 	.word	0x70010000
 80238e4:	200012a0 	.word	0x200012a0
 80238e8:	70020000 	.word	0x70020000
 80238ec:	70000004 	.word	0x70000004

080238f0 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80238f0:	b480      	push	{r7}
 80238f2:	b087      	sub	sp, #28
 80238f4:	af00      	add	r7, sp, #0
 80238f6:	60f8      	str	r0, [r7, #12]
 80238f8:	60b9      	str	r1, [r7, #8]
 80238fa:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 80238fc:	4b4c      	ldr	r3, [pc, #304]	; (8023a30 <nand_write_page_async+0x140>)
 80238fe:	4a4d      	ldr	r2, [pc, #308]	; (8023a34 <nand_write_page_async+0x144>)
 8023900:	7b52      	ldrb	r2, [r2, #13]
 8023902:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023904:	4b4b      	ldr	r3, [pc, #300]	; (8023a34 <nand_write_page_async+0x144>)
 8023906:	79db      	ldrb	r3, [r3, #7]
 8023908:	3b01      	subs	r3, #1
 802390a:	2b03      	cmp	r3, #3
 802390c:	d82c      	bhi.n	8023968 <nand_write_page_async+0x78>
 802390e:	a201      	add	r2, pc, #4	; (adr r2, 8023914 <nand_write_page_async+0x24>)
 8023910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023914:	08023925 	.word	0x08023925
 8023918:	0802392d 	.word	0x0802392d
 802391c:	0802393b 	.word	0x0802393b
 8023920:	0802394f 	.word	0x0802394f
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023924:	4b44      	ldr	r3, [pc, #272]	; (8023a38 <nand_write_page_async+0x148>)
 8023926:	2200      	movs	r2, #0
 8023928:	701a      	strb	r2, [r3, #0]
        break;
 802392a:	e01e      	b.n	802396a <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802392c:	4b42      	ldr	r3, [pc, #264]	; (8023a38 <nand_write_page_async+0x148>)
 802392e:	2200      	movs	r2, #0
 8023930:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023932:	4b41      	ldr	r3, [pc, #260]	; (8023a38 <nand_write_page_async+0x148>)
 8023934:	2200      	movs	r2, #0
 8023936:	701a      	strb	r2, [r3, #0]
        break;
 8023938:	e017      	b.n	802396a <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802393a:	4b3f      	ldr	r3, [pc, #252]	; (8023a38 <nand_write_page_async+0x148>)
 802393c:	2200      	movs	r2, #0
 802393e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023940:	4b3d      	ldr	r3, [pc, #244]	; (8023a38 <nand_write_page_async+0x148>)
 8023942:	2200      	movs	r2, #0
 8023944:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023946:	4b3c      	ldr	r3, [pc, #240]	; (8023a38 <nand_write_page_async+0x148>)
 8023948:	2200      	movs	r2, #0
 802394a:	701a      	strb	r2, [r3, #0]
        break;
 802394c:	e00d      	b.n	802396a <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802394e:	4b3a      	ldr	r3, [pc, #232]	; (8023a38 <nand_write_page_async+0x148>)
 8023950:	2200      	movs	r2, #0
 8023952:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023954:	4b38      	ldr	r3, [pc, #224]	; (8023a38 <nand_write_page_async+0x148>)
 8023956:	2200      	movs	r2, #0
 8023958:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802395a:	4b37      	ldr	r3, [pc, #220]	; (8023a38 <nand_write_page_async+0x148>)
 802395c:	2200      	movs	r2, #0
 802395e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023960:	4b35      	ldr	r3, [pc, #212]	; (8023a38 <nand_write_page_async+0x148>)
 8023962:	2200      	movs	r2, #0
 8023964:	701a      	strb	r2, [r3, #0]
        break;
 8023966:	e000      	b.n	802396a <nand_write_page_async+0x7a>
    default:
        break;
 8023968:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 802396a:	4b32      	ldr	r3, [pc, #200]	; (8023a34 <nand_write_page_async+0x144>)
 802396c:	799b      	ldrb	r3, [r3, #6]
 802396e:	3b01      	subs	r3, #1
 8023970:	2b03      	cmp	r3, #3
 8023972:	d83d      	bhi.n	80239f0 <nand_write_page_async+0x100>
 8023974:	a201      	add	r2, pc, #4	; (adr r2, 802397c <nand_write_page_async+0x8c>)
 8023976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802397a:	bf00      	nop
 802397c:	0802398d 	.word	0x0802398d
 8023980:	08023997 	.word	0x08023997
 8023984:	080239ab 	.word	0x080239ab
 8023988:	080239c9 	.word	0x080239c9
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 802398c:	4b2a      	ldr	r3, [pc, #168]	; (8023a38 <nand_write_page_async+0x148>)
 802398e:	68ba      	ldr	r2, [r7, #8]
 8023990:	b2d2      	uxtb	r2, r2
 8023992:	701a      	strb	r2, [r3, #0]
        break;
 8023994:	e02d      	b.n	80239f2 <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023996:	4b28      	ldr	r3, [pc, #160]	; (8023a38 <nand_write_page_async+0x148>)
 8023998:	68ba      	ldr	r2, [r7, #8]
 802399a:	b2d2      	uxtb	r2, r2
 802399c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802399e:	68bb      	ldr	r3, [r7, #8]
 80239a0:	0a1a      	lsrs	r2, r3, #8
 80239a2:	4b25      	ldr	r3, [pc, #148]	; (8023a38 <nand_write_page_async+0x148>)
 80239a4:	b2d2      	uxtb	r2, r2
 80239a6:	701a      	strb	r2, [r3, #0]
        break;
 80239a8:	e023      	b.n	80239f2 <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80239aa:	4b23      	ldr	r3, [pc, #140]	; (8023a38 <nand_write_page_async+0x148>)
 80239ac:	68ba      	ldr	r2, [r7, #8]
 80239ae:	b2d2      	uxtb	r2, r2
 80239b0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80239b2:	68bb      	ldr	r3, [r7, #8]
 80239b4:	0a1a      	lsrs	r2, r3, #8
 80239b6:	4b20      	ldr	r3, [pc, #128]	; (8023a38 <nand_write_page_async+0x148>)
 80239b8:	b2d2      	uxtb	r2, r2
 80239ba:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80239bc:	68bb      	ldr	r3, [r7, #8]
 80239be:	0c1a      	lsrs	r2, r3, #16
 80239c0:	4b1d      	ldr	r3, [pc, #116]	; (8023a38 <nand_write_page_async+0x148>)
 80239c2:	b2d2      	uxtb	r2, r2
 80239c4:	701a      	strb	r2, [r3, #0]
        break;
 80239c6:	e014      	b.n	80239f2 <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80239c8:	4b1b      	ldr	r3, [pc, #108]	; (8023a38 <nand_write_page_async+0x148>)
 80239ca:	68ba      	ldr	r2, [r7, #8]
 80239cc:	b2d2      	uxtb	r2, r2
 80239ce:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80239d0:	68bb      	ldr	r3, [r7, #8]
 80239d2:	0a1a      	lsrs	r2, r3, #8
 80239d4:	4b18      	ldr	r3, [pc, #96]	; (8023a38 <nand_write_page_async+0x148>)
 80239d6:	b2d2      	uxtb	r2, r2
 80239d8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80239da:	68bb      	ldr	r3, [r7, #8]
 80239dc:	0c1a      	lsrs	r2, r3, #16
 80239de:	4b16      	ldr	r3, [pc, #88]	; (8023a38 <nand_write_page_async+0x148>)
 80239e0:	b2d2      	uxtb	r2, r2
 80239e2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80239e4:	68bb      	ldr	r3, [r7, #8]
 80239e6:	0e1a      	lsrs	r2, r3, #24
 80239e8:	4b13      	ldr	r3, [pc, #76]	; (8023a38 <nand_write_page_async+0x148>)
 80239ea:	b2d2      	uxtb	r2, r2
 80239ec:	701a      	strb	r2, [r3, #0]
        break;
 80239ee:	e000      	b.n	80239f2 <nand_write_page_async+0x102>
    default:
        break;
 80239f0:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 80239f2:	2300      	movs	r3, #0
 80239f4:	617b      	str	r3, [r7, #20]
 80239f6:	e009      	b.n	8023a0c <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 80239f8:	68fa      	ldr	r2, [r7, #12]
 80239fa:	697b      	ldr	r3, [r7, #20]
 80239fc:	4413      	add	r3, r2
 80239fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8023a02:	781b      	ldrb	r3, [r3, #0]
 8023a04:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 8023a06:	697b      	ldr	r3, [r7, #20]
 8023a08:	3301      	adds	r3, #1
 8023a0a:	617b      	str	r3, [r7, #20]
 8023a0c:	697a      	ldr	r2, [r7, #20]
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	429a      	cmp	r2, r3
 8023a12:	d3f1      	bcc.n	80239f8 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8023a14:	4b07      	ldr	r3, [pc, #28]	; (8023a34 <nand_write_page_async+0x144>)
 8023a16:	7b9b      	ldrb	r3, [r3, #14]
 8023a18:	2bff      	cmp	r3, #255	; 0xff
 8023a1a:	d003      	beq.n	8023a24 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 8023a1c:	4b04      	ldr	r3, [pc, #16]	; (8023a30 <nand_write_page_async+0x140>)
 8023a1e:	4a05      	ldr	r2, [pc, #20]	; (8023a34 <nand_write_page_async+0x144>)
 8023a20:	7b92      	ldrb	r2, [r2, #14]
 8023a22:	701a      	strb	r2, [r3, #0]
}
 8023a24:	bf00      	nop
 8023a26:	371c      	adds	r7, #28
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a2e:	4770      	bx	lr
 8023a30:	70010000 	.word	0x70010000
 8023a34:	200012a0 	.word	0x200012a0
 8023a38:	70020000 	.word	0x70020000

08023a3c <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8023a3c:	b580      	push	{r7, lr}
 8023a3e:	b086      	sub	sp, #24
 8023a40:	af00      	add	r7, sp, #0
 8023a42:	60f8      	str	r0, [r7, #12]
 8023a44:	60b9      	str	r1, [r7, #8]
 8023a46:	607a      	str	r2, [r7, #4]
 8023a48:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 8023a4a:	4b55      	ldr	r3, [pc, #340]	; (8023ba0 <nand_read_data+0x164>)
 8023a4c:	4a55      	ldr	r2, [pc, #340]	; (8023ba4 <nand_read_data+0x168>)
 8023a4e:	7a12      	ldrb	r2, [r2, #8]
 8023a50:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023a52:	4b54      	ldr	r3, [pc, #336]	; (8023ba4 <nand_read_data+0x168>)
 8023a54:	79db      	ldrb	r3, [r3, #7]
 8023a56:	3b01      	subs	r3, #1
 8023a58:	2b03      	cmp	r3, #3
 8023a5a:	d83c      	bhi.n	8023ad6 <nand_read_data+0x9a>
 8023a5c:	a201      	add	r2, pc, #4	; (adr r2, 8023a64 <nand_read_data+0x28>)
 8023a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a62:	bf00      	nop
 8023a64:	08023a75 	.word	0x08023a75
 8023a68:	08023a7f 	.word	0x08023a7f
 8023a6c:	08023a93 	.word	0x08023a93
 8023a70:	08023ab1 	.word	0x08023ab1
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023a74:	4b4c      	ldr	r3, [pc, #304]	; (8023ba8 <nand_read_data+0x16c>)
 8023a76:	687a      	ldr	r2, [r7, #4]
 8023a78:	b2d2      	uxtb	r2, r2
 8023a7a:	701a      	strb	r2, [r3, #0]
        break;
 8023a7c:	e02c      	b.n	8023ad8 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023a7e:	4b4a      	ldr	r3, [pc, #296]	; (8023ba8 <nand_read_data+0x16c>)
 8023a80:	687a      	ldr	r2, [r7, #4]
 8023a82:	b2d2      	uxtb	r2, r2
 8023a84:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	0a1a      	lsrs	r2, r3, #8
 8023a8a:	4b47      	ldr	r3, [pc, #284]	; (8023ba8 <nand_read_data+0x16c>)
 8023a8c:	b2d2      	uxtb	r2, r2
 8023a8e:	701a      	strb	r2, [r3, #0]
        break;
 8023a90:	e022      	b.n	8023ad8 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023a92:	4b45      	ldr	r3, [pc, #276]	; (8023ba8 <nand_read_data+0x16c>)
 8023a94:	687a      	ldr	r2, [r7, #4]
 8023a96:	b2d2      	uxtb	r2, r2
 8023a98:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	0a1a      	lsrs	r2, r3, #8
 8023a9e:	4b42      	ldr	r3, [pc, #264]	; (8023ba8 <nand_read_data+0x16c>)
 8023aa0:	b2d2      	uxtb	r2, r2
 8023aa2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	0c1a      	lsrs	r2, r3, #16
 8023aa8:	4b3f      	ldr	r3, [pc, #252]	; (8023ba8 <nand_read_data+0x16c>)
 8023aaa:	b2d2      	uxtb	r2, r2
 8023aac:	701a      	strb	r2, [r3, #0]
        break;
 8023aae:	e013      	b.n	8023ad8 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023ab0:	4b3d      	ldr	r3, [pc, #244]	; (8023ba8 <nand_read_data+0x16c>)
 8023ab2:	687a      	ldr	r2, [r7, #4]
 8023ab4:	b2d2      	uxtb	r2, r2
 8023ab6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	0a1a      	lsrs	r2, r3, #8
 8023abc:	4b3a      	ldr	r3, [pc, #232]	; (8023ba8 <nand_read_data+0x16c>)
 8023abe:	b2d2      	uxtb	r2, r2
 8023ac0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	0c1a      	lsrs	r2, r3, #16
 8023ac6:	4b38      	ldr	r3, [pc, #224]	; (8023ba8 <nand_read_data+0x16c>)
 8023ac8:	b2d2      	uxtb	r2, r2
 8023aca:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	0e1a      	lsrs	r2, r3, #24
 8023ad0:	4b35      	ldr	r3, [pc, #212]	; (8023ba8 <nand_read_data+0x16c>)
 8023ad2:	b2d2      	uxtb	r2, r2
 8023ad4:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023ad6:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023ad8:	4b32      	ldr	r3, [pc, #200]	; (8023ba4 <nand_read_data+0x168>)
 8023ada:	799b      	ldrb	r3, [r3, #6]
 8023adc:	3b01      	subs	r3, #1
 8023ade:	2b03      	cmp	r3, #3
 8023ae0:	d83c      	bhi.n	8023b5c <nand_read_data+0x120>
 8023ae2:	a201      	add	r2, pc, #4	; (adr r2, 8023ae8 <nand_read_data+0xac>)
 8023ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023ae8:	08023af9 	.word	0x08023af9
 8023aec:	08023b03 	.word	0x08023b03
 8023af0:	08023b17 	.word	0x08023b17
 8023af4:	08023b35 	.word	0x08023b35
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023af8:	4b2b      	ldr	r3, [pc, #172]	; (8023ba8 <nand_read_data+0x16c>)
 8023afa:	68ba      	ldr	r2, [r7, #8]
 8023afc:	b2d2      	uxtb	r2, r2
 8023afe:	701a      	strb	r2, [r3, #0]
        break;
 8023b00:	e02d      	b.n	8023b5e <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023b02:	4b29      	ldr	r3, [pc, #164]	; (8023ba8 <nand_read_data+0x16c>)
 8023b04:	68ba      	ldr	r2, [r7, #8]
 8023b06:	b2d2      	uxtb	r2, r2
 8023b08:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023b0a:	68bb      	ldr	r3, [r7, #8]
 8023b0c:	0a1a      	lsrs	r2, r3, #8
 8023b0e:	4b26      	ldr	r3, [pc, #152]	; (8023ba8 <nand_read_data+0x16c>)
 8023b10:	b2d2      	uxtb	r2, r2
 8023b12:	701a      	strb	r2, [r3, #0]
        break;
 8023b14:	e023      	b.n	8023b5e <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023b16:	4b24      	ldr	r3, [pc, #144]	; (8023ba8 <nand_read_data+0x16c>)
 8023b18:	68ba      	ldr	r2, [r7, #8]
 8023b1a:	b2d2      	uxtb	r2, r2
 8023b1c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023b1e:	68bb      	ldr	r3, [r7, #8]
 8023b20:	0a1a      	lsrs	r2, r3, #8
 8023b22:	4b21      	ldr	r3, [pc, #132]	; (8023ba8 <nand_read_data+0x16c>)
 8023b24:	b2d2      	uxtb	r2, r2
 8023b26:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023b28:	68bb      	ldr	r3, [r7, #8]
 8023b2a:	0c1a      	lsrs	r2, r3, #16
 8023b2c:	4b1e      	ldr	r3, [pc, #120]	; (8023ba8 <nand_read_data+0x16c>)
 8023b2e:	b2d2      	uxtb	r2, r2
 8023b30:	701a      	strb	r2, [r3, #0]
        break;
 8023b32:	e014      	b.n	8023b5e <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023b34:	4b1c      	ldr	r3, [pc, #112]	; (8023ba8 <nand_read_data+0x16c>)
 8023b36:	68ba      	ldr	r2, [r7, #8]
 8023b38:	b2d2      	uxtb	r2, r2
 8023b3a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023b3c:	68bb      	ldr	r3, [r7, #8]
 8023b3e:	0a1a      	lsrs	r2, r3, #8
 8023b40:	4b19      	ldr	r3, [pc, #100]	; (8023ba8 <nand_read_data+0x16c>)
 8023b42:	b2d2      	uxtb	r2, r2
 8023b44:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023b46:	68bb      	ldr	r3, [r7, #8]
 8023b48:	0c1a      	lsrs	r2, r3, #16
 8023b4a:	4b17      	ldr	r3, [pc, #92]	; (8023ba8 <nand_read_data+0x16c>)
 8023b4c:	b2d2      	uxtb	r2, r2
 8023b4e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023b50:	68bb      	ldr	r3, [r7, #8]
 8023b52:	0e1a      	lsrs	r2, r3, #24
 8023b54:	4b14      	ldr	r3, [pc, #80]	; (8023ba8 <nand_read_data+0x16c>)
 8023b56:	b2d2      	uxtb	r2, r2
 8023b58:	701a      	strb	r2, [r3, #0]
        break;
 8023b5a:	e000      	b.n	8023b5e <nand_read_data+0x122>
    default:
        break;
 8023b5c:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8023b5e:	4b11      	ldr	r3, [pc, #68]	; (8023ba4 <nand_read_data+0x168>)
 8023b60:	7a5b      	ldrb	r3, [r3, #9]
 8023b62:	2bff      	cmp	r3, #255	; 0xff
 8023b64:	d003      	beq.n	8023b6e <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 8023b66:	4b0e      	ldr	r3, [pc, #56]	; (8023ba0 <nand_read_data+0x164>)
 8023b68:	4a0e      	ldr	r2, [pc, #56]	; (8023ba4 <nand_read_data+0x168>)
 8023b6a:	7a52      	ldrb	r2, [r2, #9]
 8023b6c:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8023b6e:	2300      	movs	r3, #0
 8023b70:	617b      	str	r3, [r7, #20]
 8023b72:	e00a      	b.n	8023b8a <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023b74:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023b78:	68fa      	ldr	r2, [r7, #12]
 8023b7a:	697b      	ldr	r3, [r7, #20]
 8023b7c:	4413      	add	r3, r2
 8023b7e:	780a      	ldrb	r2, [r1, #0]
 8023b80:	b2d2      	uxtb	r2, r2
 8023b82:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023b84:	697b      	ldr	r3, [r7, #20]
 8023b86:	3301      	adds	r3, #1
 8023b88:	617b      	str	r3, [r7, #20]
 8023b8a:	697a      	ldr	r2, [r7, #20]
 8023b8c:	683b      	ldr	r3, [r7, #0]
 8023b8e:	429a      	cmp	r2, r3
 8023b90:	d3f0      	bcc.n	8023b74 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 8023b92:	f7ff fe4f 	bl	8023834 <nand_get_status>
 8023b96:	4603      	mov	r3, r0
}
 8023b98:	4618      	mov	r0, r3
 8023b9a:	3718      	adds	r7, #24
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	bd80      	pop	{r7, pc}
 8023ba0:	70010000 	.word	0x70010000
 8023ba4:	200012a0 	.word	0x200012a0
 8023ba8:	70020000 	.word	0x70020000

08023bac <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023bac:	b580      	push	{r7, lr}
 8023bae:	b084      	sub	sp, #16
 8023bb0:	af00      	add	r7, sp, #0
 8023bb2:	60f8      	str	r0, [r7, #12]
 8023bb4:	60b9      	str	r1, [r7, #8]
 8023bb6:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	2200      	movs	r2, #0
 8023bbc:	68b9      	ldr	r1, [r7, #8]
 8023bbe:	68f8      	ldr	r0, [r7, #12]
 8023bc0:	f7ff ff3c 	bl	8023a3c <nand_read_data>
 8023bc4:	4603      	mov	r3, r0
}
 8023bc6:	4618      	mov	r0, r3
 8023bc8:	3710      	adds	r7, #16
 8023bca:	46bd      	mov	sp, r7
 8023bcc:	bd80      	pop	{r7, pc}
	...

08023bd0 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8023bd0:	b580      	push	{r7, lr}
 8023bd2:	b086      	sub	sp, #24
 8023bd4:	af00      	add	r7, sp, #0
 8023bd6:	60f8      	str	r0, [r7, #12]
 8023bd8:	60b9      	str	r1, [r7, #8]
 8023bda:	607a      	str	r2, [r7, #4]
 8023bdc:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 8023bde:	4b54      	ldr	r3, [pc, #336]	; (8023d30 <nand_read_spare_data+0x160>)
 8023be0:	7a9b      	ldrb	r3, [r3, #10]
 8023be2:	2bff      	cmp	r3, #255	; 0xff
 8023be4:	d101      	bne.n	8023bea <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 8023be6:	2304      	movs	r3, #4
 8023be8:	e09e      	b.n	8023d28 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 8023bea:	4b52      	ldr	r3, [pc, #328]	; (8023d34 <nand_read_spare_data+0x164>)
 8023bec:	4a50      	ldr	r2, [pc, #320]	; (8023d30 <nand_read_spare_data+0x160>)
 8023bee:	7a92      	ldrb	r2, [r2, #10]
 8023bf0:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023bf2:	4b4f      	ldr	r3, [pc, #316]	; (8023d30 <nand_read_spare_data+0x160>)
 8023bf4:	79db      	ldrb	r3, [r3, #7]
 8023bf6:	3b01      	subs	r3, #1
 8023bf8:	2b03      	cmp	r3, #3
 8023bfa:	d83c      	bhi.n	8023c76 <nand_read_spare_data+0xa6>
 8023bfc:	a201      	add	r2, pc, #4	; (adr r2, 8023c04 <nand_read_spare_data+0x34>)
 8023bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c02:	bf00      	nop
 8023c04:	08023c15 	.word	0x08023c15
 8023c08:	08023c1f 	.word	0x08023c1f
 8023c0c:	08023c33 	.word	0x08023c33
 8023c10:	08023c51 	.word	0x08023c51
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023c14:	4b48      	ldr	r3, [pc, #288]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c16:	687a      	ldr	r2, [r7, #4]
 8023c18:	b2d2      	uxtb	r2, r2
 8023c1a:	701a      	strb	r2, [r3, #0]
        break;
 8023c1c:	e02c      	b.n	8023c78 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023c1e:	4b46      	ldr	r3, [pc, #280]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c20:	687a      	ldr	r2, [r7, #4]
 8023c22:	b2d2      	uxtb	r2, r2
 8023c24:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	0a1a      	lsrs	r2, r3, #8
 8023c2a:	4b43      	ldr	r3, [pc, #268]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c2c:	b2d2      	uxtb	r2, r2
 8023c2e:	701a      	strb	r2, [r3, #0]
        break;
 8023c30:	e022      	b.n	8023c78 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023c32:	4b41      	ldr	r3, [pc, #260]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c34:	687a      	ldr	r2, [r7, #4]
 8023c36:	b2d2      	uxtb	r2, r2
 8023c38:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	0a1a      	lsrs	r2, r3, #8
 8023c3e:	4b3e      	ldr	r3, [pc, #248]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c40:	b2d2      	uxtb	r2, r2
 8023c42:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023c44:	687b      	ldr	r3, [r7, #4]
 8023c46:	0c1a      	lsrs	r2, r3, #16
 8023c48:	4b3b      	ldr	r3, [pc, #236]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c4a:	b2d2      	uxtb	r2, r2
 8023c4c:	701a      	strb	r2, [r3, #0]
        break;
 8023c4e:	e013      	b.n	8023c78 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023c50:	4b39      	ldr	r3, [pc, #228]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c52:	687a      	ldr	r2, [r7, #4]
 8023c54:	b2d2      	uxtb	r2, r2
 8023c56:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023c58:	687b      	ldr	r3, [r7, #4]
 8023c5a:	0a1a      	lsrs	r2, r3, #8
 8023c5c:	4b36      	ldr	r3, [pc, #216]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c5e:	b2d2      	uxtb	r2, r2
 8023c60:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	0c1a      	lsrs	r2, r3, #16
 8023c66:	4b34      	ldr	r3, [pc, #208]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c68:	b2d2      	uxtb	r2, r2
 8023c6a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8023c6c:	687b      	ldr	r3, [r7, #4]
 8023c6e:	0e1a      	lsrs	r2, r3, #24
 8023c70:	4b31      	ldr	r3, [pc, #196]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c72:	b2d2      	uxtb	r2, r2
 8023c74:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023c76:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023c78:	4b2d      	ldr	r3, [pc, #180]	; (8023d30 <nand_read_spare_data+0x160>)
 8023c7a:	799b      	ldrb	r3, [r3, #6]
 8023c7c:	3b01      	subs	r3, #1
 8023c7e:	2b03      	cmp	r3, #3
 8023c80:	d83c      	bhi.n	8023cfc <nand_read_spare_data+0x12c>
 8023c82:	a201      	add	r2, pc, #4	; (adr r2, 8023c88 <nand_read_spare_data+0xb8>)
 8023c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c88:	08023c99 	.word	0x08023c99
 8023c8c:	08023ca3 	.word	0x08023ca3
 8023c90:	08023cb7 	.word	0x08023cb7
 8023c94:	08023cd5 	.word	0x08023cd5
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023c98:	4b27      	ldr	r3, [pc, #156]	; (8023d38 <nand_read_spare_data+0x168>)
 8023c9a:	68ba      	ldr	r2, [r7, #8]
 8023c9c:	b2d2      	uxtb	r2, r2
 8023c9e:	701a      	strb	r2, [r3, #0]
        break;
 8023ca0:	e02d      	b.n	8023cfe <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023ca2:	4b25      	ldr	r3, [pc, #148]	; (8023d38 <nand_read_spare_data+0x168>)
 8023ca4:	68ba      	ldr	r2, [r7, #8]
 8023ca6:	b2d2      	uxtb	r2, r2
 8023ca8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023caa:	68bb      	ldr	r3, [r7, #8]
 8023cac:	0a1a      	lsrs	r2, r3, #8
 8023cae:	4b22      	ldr	r3, [pc, #136]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cb0:	b2d2      	uxtb	r2, r2
 8023cb2:	701a      	strb	r2, [r3, #0]
        break;
 8023cb4:	e023      	b.n	8023cfe <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cb6:	4b20      	ldr	r3, [pc, #128]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cb8:	68ba      	ldr	r2, [r7, #8]
 8023cba:	b2d2      	uxtb	r2, r2
 8023cbc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023cbe:	68bb      	ldr	r3, [r7, #8]
 8023cc0:	0a1a      	lsrs	r2, r3, #8
 8023cc2:	4b1d      	ldr	r3, [pc, #116]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cc4:	b2d2      	uxtb	r2, r2
 8023cc6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023cc8:	68bb      	ldr	r3, [r7, #8]
 8023cca:	0c1a      	lsrs	r2, r3, #16
 8023ccc:	4b1a      	ldr	r3, [pc, #104]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cce:	b2d2      	uxtb	r2, r2
 8023cd0:	701a      	strb	r2, [r3, #0]
        break;
 8023cd2:	e014      	b.n	8023cfe <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023cd4:	4b18      	ldr	r3, [pc, #96]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cd6:	68ba      	ldr	r2, [r7, #8]
 8023cd8:	b2d2      	uxtb	r2, r2
 8023cda:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023cdc:	68bb      	ldr	r3, [r7, #8]
 8023cde:	0a1a      	lsrs	r2, r3, #8
 8023ce0:	4b15      	ldr	r3, [pc, #84]	; (8023d38 <nand_read_spare_data+0x168>)
 8023ce2:	b2d2      	uxtb	r2, r2
 8023ce4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023ce6:	68bb      	ldr	r3, [r7, #8]
 8023ce8:	0c1a      	lsrs	r2, r3, #16
 8023cea:	4b13      	ldr	r3, [pc, #76]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cec:	b2d2      	uxtb	r2, r2
 8023cee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023cf0:	68bb      	ldr	r3, [r7, #8]
 8023cf2:	0e1a      	lsrs	r2, r3, #24
 8023cf4:	4b10      	ldr	r3, [pc, #64]	; (8023d38 <nand_read_spare_data+0x168>)
 8023cf6:	b2d2      	uxtb	r2, r2
 8023cf8:	701a      	strb	r2, [r3, #0]
        break;
 8023cfa:	e000      	b.n	8023cfe <nand_read_spare_data+0x12e>
    default:
        break;
 8023cfc:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 8023cfe:	2300      	movs	r3, #0
 8023d00:	617b      	str	r3, [r7, #20]
 8023d02:	e00a      	b.n	8023d1a <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023d04:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023d08:	68fa      	ldr	r2, [r7, #12]
 8023d0a:	697b      	ldr	r3, [r7, #20]
 8023d0c:	4413      	add	r3, r2
 8023d0e:	780a      	ldrb	r2, [r1, #0]
 8023d10:	b2d2      	uxtb	r2, r2
 8023d12:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023d14:	697b      	ldr	r3, [r7, #20]
 8023d16:	3301      	adds	r3, #1
 8023d18:	617b      	str	r3, [r7, #20]
 8023d1a:	697a      	ldr	r2, [r7, #20]
 8023d1c:	683b      	ldr	r3, [r7, #0]
 8023d1e:	429a      	cmp	r2, r3
 8023d20:	d3f0      	bcc.n	8023d04 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 8023d22:	f7ff fd87 	bl	8023834 <nand_get_status>
 8023d26:	4603      	mov	r3, r0
}
 8023d28:	4618      	mov	r0, r3
 8023d2a:	3718      	adds	r7, #24
 8023d2c:	46bd      	mov	sp, r7
 8023d2e:	bd80      	pop	{r7, pc}
 8023d30:	200012a0 	.word	0x200012a0
 8023d34:	70010000 	.word	0x70010000
 8023d38:	70020000 	.word	0x70020000

08023d3c <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8023d3c:	b580      	push	{r7, lr}
 8023d3e:	b082      	sub	sp, #8
 8023d40:	af00      	add	r7, sp, #0
 8023d42:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 8023d44:	4b2a      	ldr	r3, [pc, #168]	; (8023df0 <nand_erase_block+0xb4>)
 8023d46:	4a2b      	ldr	r2, [pc, #172]	; (8023df4 <nand_erase_block+0xb8>)
 8023d48:	7bd2      	ldrb	r2, [r2, #15]
 8023d4a:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8023d4c:	4b29      	ldr	r3, [pc, #164]	; (8023df4 <nand_erase_block+0xb8>)
 8023d4e:	799b      	ldrb	r3, [r3, #6]
 8023d50:	3b01      	subs	r3, #1
 8023d52:	2b03      	cmp	r3, #3
 8023d54:	d83c      	bhi.n	8023dd0 <nand_erase_block+0x94>
 8023d56:	a201      	add	r2, pc, #4	; (adr r2, 8023d5c <nand_erase_block+0x20>)
 8023d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023d5c:	08023d6d 	.word	0x08023d6d
 8023d60:	08023d77 	.word	0x08023d77
 8023d64:	08023d8b 	.word	0x08023d8b
 8023d68:	08023da9 	.word	0x08023da9
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023d6c:	4b22      	ldr	r3, [pc, #136]	; (8023df8 <nand_erase_block+0xbc>)
 8023d6e:	687a      	ldr	r2, [r7, #4]
 8023d70:	b2d2      	uxtb	r2, r2
 8023d72:	701a      	strb	r2, [r3, #0]
        break;
 8023d74:	e02d      	b.n	8023dd2 <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023d76:	4b20      	ldr	r3, [pc, #128]	; (8023df8 <nand_erase_block+0xbc>)
 8023d78:	687a      	ldr	r2, [r7, #4]
 8023d7a:	b2d2      	uxtb	r2, r2
 8023d7c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	0a1a      	lsrs	r2, r3, #8
 8023d82:	4b1d      	ldr	r3, [pc, #116]	; (8023df8 <nand_erase_block+0xbc>)
 8023d84:	b2d2      	uxtb	r2, r2
 8023d86:	701a      	strb	r2, [r3, #0]
        break;
 8023d88:	e023      	b.n	8023dd2 <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023d8a:	4b1b      	ldr	r3, [pc, #108]	; (8023df8 <nand_erase_block+0xbc>)
 8023d8c:	687a      	ldr	r2, [r7, #4]
 8023d8e:	b2d2      	uxtb	r2, r2
 8023d90:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	0a1a      	lsrs	r2, r3, #8
 8023d96:	4b18      	ldr	r3, [pc, #96]	; (8023df8 <nand_erase_block+0xbc>)
 8023d98:	b2d2      	uxtb	r2, r2
 8023d9a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	0c1a      	lsrs	r2, r3, #16
 8023da0:	4b15      	ldr	r3, [pc, #84]	; (8023df8 <nand_erase_block+0xbc>)
 8023da2:	b2d2      	uxtb	r2, r2
 8023da4:	701a      	strb	r2, [r3, #0]
        break;
 8023da6:	e014      	b.n	8023dd2 <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023da8:	4b13      	ldr	r3, [pc, #76]	; (8023df8 <nand_erase_block+0xbc>)
 8023daa:	687a      	ldr	r2, [r7, #4]
 8023dac:	b2d2      	uxtb	r2, r2
 8023dae:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	0a1a      	lsrs	r2, r3, #8
 8023db4:	4b10      	ldr	r3, [pc, #64]	; (8023df8 <nand_erase_block+0xbc>)
 8023db6:	b2d2      	uxtb	r2, r2
 8023db8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	0c1a      	lsrs	r2, r3, #16
 8023dbe:	4b0e      	ldr	r3, [pc, #56]	; (8023df8 <nand_erase_block+0xbc>)
 8023dc0:	b2d2      	uxtb	r2, r2
 8023dc2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023dc4:	687b      	ldr	r3, [r7, #4]
 8023dc6:	0e1a      	lsrs	r2, r3, #24
 8023dc8:	4b0b      	ldr	r3, [pc, #44]	; (8023df8 <nand_erase_block+0xbc>)
 8023dca:	b2d2      	uxtb	r2, r2
 8023dcc:	701a      	strb	r2, [r3, #0]
        break;
 8023dce:	e000      	b.n	8023dd2 <nand_erase_block+0x96>
    default:
        break;
 8023dd0:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 8023dd2:	4b08      	ldr	r3, [pc, #32]	; (8023df4 <nand_erase_block+0xb8>)
 8023dd4:	7c1b      	ldrb	r3, [r3, #16]
 8023dd6:	2bff      	cmp	r3, #255	; 0xff
 8023dd8:	d003      	beq.n	8023de2 <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 8023dda:	4b05      	ldr	r3, [pc, #20]	; (8023df0 <nand_erase_block+0xb4>)
 8023ddc:	4a05      	ldr	r2, [pc, #20]	; (8023df4 <nand_erase_block+0xb8>)
 8023dde:	7c12      	ldrb	r2, [r2, #16]
 8023de0:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 8023de2:	f7ff fd27 	bl	8023834 <nand_get_status>
 8023de6:	4603      	mov	r3, r0
}
 8023de8:	4618      	mov	r0, r3
 8023dea:	3708      	adds	r7, #8
 8023dec:	46bd      	mov	sp, r7
 8023dee:	bd80      	pop	{r7, pc}
 8023df0:	70010000 	.word	0x70010000
 8023df4:	200012a0 	.word	0x200012a0
 8023df8:	70020000 	.word	0x70020000

08023dfc <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 8023dfc:	b480      	push	{r7}
 8023dfe:	af00      	add	r7, sp, #0
    return true;
 8023e00:	2301      	movs	r3, #1
}
 8023e02:	4618      	mov	r0, r3
 8023e04:	46bd      	mov	sp, r7
 8023e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e0a:	4770      	bx	lr

08023e0c <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 8023e0c:	b480      	push	{r7}
 8023e0e:	b085      	sub	sp, #20
 8023e10:	af00      	add	r7, sp, #0
 8023e12:	4603      	mov	r3, r0
 8023e14:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 8023e16:	4b17      	ldr	r3, [pc, #92]	; (8023e74 <nand_enable_hw_ecc+0x68>)
 8023e18:	7c9b      	ldrb	r3, [r3, #18]
 8023e1a:	2bff      	cmp	r3, #255	; 0xff
 8023e1c:	d101      	bne.n	8023e22 <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 8023e1e:	2304      	movs	r3, #4
 8023e20:	e021      	b.n	8023e66 <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 8023e22:	79fb      	ldrb	r3, [r7, #7]
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	d002      	beq.n	8023e2e <nand_enable_hw_ecc+0x22>
 8023e28:	4b12      	ldr	r3, [pc, #72]	; (8023e74 <nand_enable_hw_ecc+0x68>)
 8023e2a:	7d1b      	ldrb	r3, [r3, #20]
 8023e2c:	e001      	b.n	8023e32 <nand_enable_hw_ecc+0x26>
 8023e2e:	4b11      	ldr	r3, [pc, #68]	; (8023e74 <nand_enable_hw_ecc+0x68>)
 8023e30:	7d5b      	ldrb	r3, [r3, #21]
 8023e32:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 8023e34:	4b10      	ldr	r3, [pc, #64]	; (8023e78 <nand_enable_hw_ecc+0x6c>)
 8023e36:	4a0f      	ldr	r2, [pc, #60]	; (8023e74 <nand_enable_hw_ecc+0x68>)
 8023e38:	7c92      	ldrb	r2, [r2, #18]
 8023e3a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8023e3c:	4b0f      	ldr	r3, [pc, #60]	; (8023e7c <nand_enable_hw_ecc+0x70>)
 8023e3e:	4a0d      	ldr	r2, [pc, #52]	; (8023e74 <nand_enable_hw_ecc+0x68>)
 8023e40:	7cd2      	ldrb	r2, [r2, #19]
 8023e42:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 8023e44:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8023e48:	7bfb      	ldrb	r3, [r7, #15]
 8023e4a:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023e4c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023e50:	2200      	movs	r2, #0
 8023e52:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023e54:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023e58:	2200      	movs	r2, #0
 8023e5a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023e5c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023e60:	2200      	movs	r2, #0
 8023e62:	701a      	strb	r2, [r3, #0]

    return 0;
 8023e64:	2300      	movs	r3, #0
}
 8023e66:	4618      	mov	r0, r3
 8023e68:	3714      	adds	r7, #20
 8023e6a:	46bd      	mov	sp, r7
 8023e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e70:	4770      	bx	lr
 8023e72:	bf00      	nop
 8023e74:	200012a0 	.word	0x200012a0
 8023e78:	70010000 	.word	0x70010000
 8023e7c:	70020000 	.word	0x70020000

08023e80 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8023e80:	b580      	push	{r7, lr}
 8023e82:	b08c      	sub	sp, #48	; 0x30
 8023e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023e86:	f107 031c 	add.w	r3, r7, #28
 8023e8a:	2200      	movs	r2, #0
 8023e8c:	601a      	str	r2, [r3, #0]
 8023e8e:	605a      	str	r2, [r3, #4]
 8023e90:	609a      	str	r2, [r3, #8]
 8023e92:	60da      	str	r2, [r3, #12]
 8023e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023e96:	2300      	movs	r3, #0
 8023e98:	61bb      	str	r3, [r7, #24]
 8023e9a:	4b68      	ldr	r3, [pc, #416]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e9e:	4a67      	ldr	r2, [pc, #412]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ea0:	f043 0310 	orr.w	r3, r3, #16
 8023ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8023ea6:	4b65      	ldr	r3, [pc, #404]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023eaa:	f003 0310 	and.w	r3, r3, #16
 8023eae:	61bb      	str	r3, [r7, #24]
 8023eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023eb2:	2300      	movs	r3, #0
 8023eb4:	617b      	str	r3, [r7, #20]
 8023eb6:	4b61      	ldr	r3, [pc, #388]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023eba:	4a60      	ldr	r2, [pc, #384]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ebc:	f043 0304 	orr.w	r3, r3, #4
 8023ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8023ec2:	4b5e      	ldr	r3, [pc, #376]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ec6:	f003 0304 	and.w	r3, r3, #4
 8023eca:	617b      	str	r3, [r7, #20]
 8023ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023ece:	2300      	movs	r3, #0
 8023ed0:	613b      	str	r3, [r7, #16]
 8023ed2:	4b5a      	ldr	r3, [pc, #360]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ed6:	4a59      	ldr	r2, [pc, #356]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023edc:	6313      	str	r3, [r2, #48]	; 0x30
 8023ede:	4b57      	ldr	r3, [pc, #348]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023ee6:	613b      	str	r3, [r7, #16]
 8023ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023eea:	2300      	movs	r3, #0
 8023eec:	60fb      	str	r3, [r7, #12]
 8023eee:	4b53      	ldr	r3, [pc, #332]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023ef2:	4a52      	ldr	r2, [pc, #328]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023ef4:	f043 0301 	orr.w	r3, r3, #1
 8023ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8023efa:	4b50      	ldr	r3, [pc, #320]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023efe:	f003 0301 	and.w	r3, r3, #1
 8023f02:	60fb      	str	r3, [r7, #12]
 8023f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023f06:	2300      	movs	r3, #0
 8023f08:	60bb      	str	r3, [r7, #8]
 8023f0a:	4b4c      	ldr	r3, [pc, #304]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f0e:	4a4b      	ldr	r2, [pc, #300]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f10:	f043 0302 	orr.w	r3, r3, #2
 8023f14:	6313      	str	r3, [r2, #48]	; 0x30
 8023f16:	4b49      	ldr	r3, [pc, #292]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f1a:	f003 0302 	and.w	r3, r3, #2
 8023f1e:	60bb      	str	r3, [r7, #8]
 8023f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023f22:	2300      	movs	r3, #0
 8023f24:	607b      	str	r3, [r7, #4]
 8023f26:	4b45      	ldr	r3, [pc, #276]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f2a:	4a44      	ldr	r2, [pc, #272]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f2c:	f043 0308 	orr.w	r3, r3, #8
 8023f30:	6313      	str	r3, [r2, #48]	; 0x30
 8023f32:	4b42      	ldr	r3, [pc, #264]	; (802403c <MX_GPIO_Init+0x1bc>)
 8023f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023f36:	f003 0308 	and.w	r3, r3, #8
 8023f3a:	607b      	str	r3, [r7, #4]
 8023f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8023f3e:	2201      	movs	r2, #1
 8023f40:	2104      	movs	r1, #4
 8023f42:	483f      	ldr	r0, [pc, #252]	; (8024040 <MX_GPIO_Init+0x1c0>)
 8023f44:	f005 f81a 	bl	8028f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED4_Pin, GPIO_PIN_RESET);
 8023f48:	2200      	movs	r2, #0
 8023f4a:	2148      	movs	r1, #72	; 0x48
 8023f4c:	483c      	ldr	r0, [pc, #240]	; (8024040 <MX_GPIO_Init+0x1c0>)
 8023f4e:	f005 f815 	bl	8028f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8023f52:	2200      	movs	r2, #0
 8023f54:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023f58:	483a      	ldr	r0, [pc, #232]	; (8024044 <MX_GPIO_Init+0x1c4>)
 8023f5a:	f005 f80f 	bl	8028f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8023f5e:	2304      	movs	r3, #4
 8023f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023f62:	2301      	movs	r3, #1
 8023f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023f66:	2301      	movs	r3, #1
 8023f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8023f6a:	2301      	movs	r3, #1
 8023f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8023f6e:	f107 031c 	add.w	r3, r7, #28
 8023f72:	4619      	mov	r1, r3
 8023f74:	4832      	ldr	r0, [pc, #200]	; (8024040 <MX_GPIO_Init+0x1c0>)
 8023f76:	f004 fd69 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED4_Pin;
 8023f7a:	2348      	movs	r3, #72	; 0x48
 8023f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023f7e:	2301      	movs	r3, #1
 8023f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023f82:	2301      	movs	r3, #1
 8023f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023f86:	2300      	movs	r3, #0
 8023f88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023f8a:	f107 031c 	add.w	r3, r7, #28
 8023f8e:	4619      	mov	r1, r3
 8023f90:	482b      	ldr	r0, [pc, #172]	; (8024040 <MX_GPIO_Init+0x1c0>)
 8023f92:	f004 fd5b 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0|GPIO_PIN_1;
 8023f96:	2333      	movs	r3, #51	; 0x33
 8023f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023f9a:	2303      	movs	r3, #3
 8023f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023f9e:	2300      	movs	r3, #0
 8023fa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023fa2:	f107 031c 	add.w	r3, r7, #28
 8023fa6:	4619      	mov	r1, r3
 8023fa8:	4825      	ldr	r0, [pc, #148]	; (8024040 <MX_GPIO_Init+0x1c0>)
 8023faa:	f004 fd4f 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8023fae:	f643 73f2 	movw	r3, #16370	; 0x3ff2
 8023fb2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023fb4:	2303      	movs	r3, #3
 8023fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023fb8:	2300      	movs	r3, #0
 8023fba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023fbc:	f107 031c 	add.w	r3, r7, #28
 8023fc0:	4619      	mov	r1, r3
 8023fc2:	4820      	ldr	r0, [pc, #128]	; (8024044 <MX_GPIO_Init+0x1c4>)
 8023fc4:	f004 fd42 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8023fc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8023fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023fce:	2301      	movs	r3, #1
 8023fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023fd2:	2301      	movs	r3, #1
 8023fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023fd6:	2300      	movs	r3, #0
 8023fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023fda:	f107 031c 	add.w	r3, r7, #28
 8023fde:	4619      	mov	r1, r3
 8023fe0:	4818      	ldr	r0, [pc, #96]	; (8024044 <MX_GPIO_Init+0x1c4>)
 8023fe2:	f004 fd33 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8023fe6:	f248 1317 	movw	r3, #33047	; 0x8117
 8023fea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023fec:	2303      	movs	r3, #3
 8023fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ff0:	2300      	movs	r3, #0
 8023ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ff4:	f107 031c 	add.w	r3, r7, #28
 8023ff8:	4619      	mov	r1, r3
 8023ffa:	4813      	ldr	r0, [pc, #76]	; (8024048 <MX_GPIO_Init+0x1c8>)
 8023ffc:	f004 fd26 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8024000:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 8024004:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024006:	2303      	movs	r3, #3
 8024008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802400a:	2300      	movs	r3, #0
 802400c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802400e:	f107 031c 	add.w	r3, r7, #28
 8024012:	4619      	mov	r1, r3
 8024014:	480d      	ldr	r0, [pc, #52]	; (802404c <MX_GPIO_Init+0x1cc>)
 8024016:	f004 fd19 	bl	8028a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 802401a:	f242 030c 	movw	r3, #8204	; 0x200c
 802401e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8024020:	2303      	movs	r3, #3
 8024022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024024:	2300      	movs	r3, #0
 8024026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8024028:	f107 031c 	add.w	r3, r7, #28
 802402c:	4619      	mov	r1, r3
 802402e:	4808      	ldr	r0, [pc, #32]	; (8024050 <MX_GPIO_Init+0x1d0>)
 8024030:	f004 fd0c 	bl	8028a4c <HAL_GPIO_Init>

}
 8024034:	bf00      	nop
 8024036:	3730      	adds	r7, #48	; 0x30
 8024038:	46bd      	mov	sp, r7
 802403a:	bd80      	pop	{r7, pc}
 802403c:	40023800 	.word	0x40023800
 8024040:	40021000 	.word	0x40021000
 8024044:	40020800 	.word	0x40020800
 8024048:	40020000 	.word	0x40020000
 802404c:	40020400 	.word	0x40020400
 8024050:	40020c00 	.word	0x40020c00

08024054 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8024054:	b580      	push	{r7, lr}
 8024056:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 8024058:	f003 ff66 	bl	8027f28 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 802405c:	f003 ff84 	bl	8027f68 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8024060:	f003 ff72 	bl	8027f48 <HAL_DBGMCU_EnableDBGStopMode>
}
 8024064:	bf00      	nop
 8024066:	bd80      	pop	{r7, pc}

08024068 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 8024068:	b580      	push	{r7, lr}
 802406a:	b088      	sub	sp, #32
 802406c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 802406e:	f107 030c 	add.w	r3, r7, #12
 8024072:	2200      	movs	r2, #0
 8024074:	601a      	str	r2, [r3, #0]
 8024076:	605a      	str	r2, [r3, #4]
 8024078:	609a      	str	r2, [r3, #8]
 802407a:	60da      	str	r2, [r3, #12]
 802407c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 802407e:	2300      	movs	r3, #0
 8024080:	60bb      	str	r3, [r7, #8]
 8024082:	4b26      	ldr	r3, [pc, #152]	; (802411c <led_init+0xb4>)
 8024084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024086:	4a25      	ldr	r2, [pc, #148]	; (802411c <led_init+0xb4>)
 8024088:	f043 0310 	orr.w	r3, r3, #16
 802408c:	6313      	str	r3, [r2, #48]	; 0x30
 802408e:	4b23      	ldr	r3, [pc, #140]	; (802411c <led_init+0xb4>)
 8024090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024092:	f003 0310 	and.w	r3, r3, #16
 8024096:	60bb      	str	r3, [r7, #8]
 8024098:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 802409a:	2300      	movs	r3, #0
 802409c:	607b      	str	r3, [r7, #4]
 802409e:	4b1f      	ldr	r3, [pc, #124]	; (802411c <led_init+0xb4>)
 80240a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80240a2:	4a1e      	ldr	r2, [pc, #120]	; (802411c <led_init+0xb4>)
 80240a4:	f043 0304 	orr.w	r3, r3, #4
 80240a8:	6313      	str	r3, [r2, #48]	; 0x30
 80240aa:	4b1c      	ldr	r3, [pc, #112]	; (802411c <led_init+0xb4>)
 80240ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80240ae:	f003 0304 	and.w	r3, r3, #4
 80240b2:	607b      	str	r3, [r7, #4]
 80240b4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80240b6:	2201      	movs	r2, #1
 80240b8:	2140      	movs	r1, #64	; 0x40
 80240ba:	4819      	ldr	r0, [pc, #100]	; (8024120 <led_init+0xb8>)
 80240bc:	f004 ff5e 	bl	8028f7c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80240c0:	2201      	movs	r2, #1
 80240c2:	f24c 0108 	movw	r1, #49160	; 0xc008
 80240c6:	4817      	ldr	r0, [pc, #92]	; (8024124 <led_init+0xbc>)
 80240c8:	f004 ff58 	bl	8028f7c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 80240cc:	2340      	movs	r3, #64	; 0x40
 80240ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80240d0:	2301      	movs	r3, #1
 80240d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80240d4:	2301      	movs	r3, #1
 80240d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80240d8:	2300      	movs	r3, #0
 80240da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80240dc:	f107 030c 	add.w	r3, r7, #12
 80240e0:	4619      	mov	r1, r3
 80240e2:	480f      	ldr	r0, [pc, #60]	; (8024120 <led_init+0xb8>)
 80240e4:	f004 fcb2 	bl	8028a4c <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80240e8:	f24c 0308 	movw	r3, #49160	; 0xc008
 80240ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80240ee:	2301      	movs	r3, #1
 80240f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80240f2:	2301      	movs	r3, #1
 80240f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80240f6:	2300      	movs	r3, #0
 80240f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80240fa:	f107 030c 	add.w	r3, r7, #12
 80240fe:	4619      	mov	r1, r3
 8024100:	4808      	ldr	r0, [pc, #32]	; (8024124 <led_init+0xbc>)
 8024102:	f004 fca3 	bl	8028a4c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 8024106:	2200      	movs	r2, #0
 8024108:	f244 0108 	movw	r1, #16392	; 0x4008
 802410c:	4805      	ldr	r0, [pc, #20]	; (8024124 <led_init+0xbc>)
 802410e:	f004 ff35 	bl	8028f7c <HAL_GPIO_WritePin>
}
 8024112:	bf00      	nop
 8024114:	3720      	adds	r7, #32
 8024116:	46bd      	mov	sp, r7
 8024118:	bd80      	pop	{r7, pc}
 802411a:	bf00      	nop
 802411c:	40023800 	.word	0x40023800
 8024120:	40021000 	.word	0x40021000
 8024124:	40020800 	.word	0x40020800

08024128 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 8024128:	b580      	push	{r7, lr}
 802412a:	b082      	sub	sp, #8
 802412c:	af00      	add	r7, sp, #0
 802412e:	6078      	str	r0, [r7, #4]
 8024130:	460b      	mov	r3, r1
 8024132:	807b      	strh	r3, [r7, #2]
 8024134:	4613      	mov	r3, r2
 8024136:	707b      	strb	r3, [r7, #1]
    if (on)
 8024138:	787b      	ldrb	r3, [r7, #1]
 802413a:	2b00      	cmp	r3, #0
 802413c:	d006      	beq.n	802414c <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 802413e:	887b      	ldrh	r3, [r7, #2]
 8024140:	2201      	movs	r2, #1
 8024142:	4619      	mov	r1, r3
 8024144:	6878      	ldr	r0, [r7, #4]
 8024146:	f004 ff19 	bl	8028f7c <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 802414a:	e005      	b.n	8024158 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 802414c:	887b      	ldrh	r3, [r7, #2]
 802414e:	2200      	movs	r2, #0
 8024150:	4619      	mov	r1, r3
 8024152:	6878      	ldr	r0, [r7, #4]
 8024154:	f004 ff12 	bl	8028f7c <HAL_GPIO_WritePin>
}
 8024158:	bf00      	nop
 802415a:	3708      	adds	r7, #8
 802415c:	46bd      	mov	sp, r7
 802415e:	bd80      	pop	{r7, pc}

08024160 <led_wr_set>:

void led_wr_set(bool on)
{
 8024160:	b580      	push	{r7, lr}
 8024162:	b082      	sub	sp, #8
 8024164:	af00      	add	r7, sp, #0
 8024166:	4603      	mov	r3, r0
 8024168:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 802416a:	79fb      	ldrb	r3, [r7, #7]
 802416c:	461a      	mov	r2, r3
 802416e:	2108      	movs	r1, #8
 8024170:	4803      	ldr	r0, [pc, #12]	; (8024180 <led_wr_set+0x20>)
 8024172:	f7ff ffd9 	bl	8024128 <led_set>
}
 8024176:	bf00      	nop
 8024178:	3708      	adds	r7, #8
 802417a:	46bd      	mov	sp, r7
 802417c:	bd80      	pop	{r7, pc}
 802417e:	bf00      	nop
 8024180:	40020800 	.word	0x40020800

08024184 <led_rd_set>:

void led_rd_set(bool on)
{
 8024184:	b580      	push	{r7, lr}
 8024186:	b082      	sub	sp, #8
 8024188:	af00      	add	r7, sp, #0
 802418a:	4603      	mov	r3, r0
 802418c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 802418e:	79fb      	ldrb	r3, [r7, #7]
 8024190:	461a      	mov	r2, r3
 8024192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8024196:	4803      	ldr	r0, [pc, #12]	; (80241a4 <led_rd_set+0x20>)
 8024198:	f7ff ffc6 	bl	8024128 <led_set>
}
 802419c:	bf00      	nop
 802419e:	3708      	adds	r7, #8
 80241a0:	46bd      	mov	sp, r7
 80241a2:	bd80      	pop	{r7, pc}
 80241a4:	40020800 	.word	0x40020800

080241a8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80241a8:	b580      	push	{r7, lr}
 80241aa:	b084      	sub	sp, #16
 80241ac:	af00      	add	r7, sp, #0
 80241ae:	60f8      	str	r0, [r7, #12]
 80241b0:	60b9      	str	r1, [r7, #8]
 80241b2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	b29a      	uxth	r2, r3
 80241b8:	f04f 33ff 	mov.w	r3, #4294967295
 80241bc:	68b9      	ldr	r1, [r7, #8]
 80241be:	4804      	ldr	r0, [pc, #16]	; (80241d0 <_write+0x28>)
 80241c0:	f008 f99d 	bl	802c4fe <HAL_UART_Transmit>
    return len;
 80241c4:	687b      	ldr	r3, [r7, #4]
}
 80241c6:	4618      	mov	r0, r3
 80241c8:	3710      	adds	r7, #16
 80241ca:	46bd      	mov	sp, r7
 80241cc:	bd80      	pop	{r7, pc}
 80241ce:	bf00      	nop
 80241d0:	20005854 	.word	0x20005854

080241d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80241d8:	b662      	cpsie	i
}
 80241da:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80241dc:	f003 fe0e 	bl	8027dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80241e0:	f000 f85a 	bl	8024298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80241e4:	f7ff fe4c 	bl	8023e80 <MX_GPIO_Init>
  MX_FSMC_Init();
 80241e8:	f7ff f884 	bl	80232f4 <MX_FSMC_Init>
  MX_RTC_Init();
 80241ec:	f002 fbaa 	bl	8026944 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80241f0:	f003 fd60 	bl	8027cb4 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80241f4:	f00c fe26 	bl	8030e44 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80241f8:	f002 fc28 	bl	8026a4c <MX_SPI1_Init>
  MX_TIM3_Init();
 80241fc:	f003 fce8 	bl	8027bd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 8024200:	2300      	movs	r3, #0
 8024202:	2205      	movs	r2, #5
 8024204:	2103      	movs	r1, #3
 8024206:	481c      	ldr	r0, [pc, #112]	; (8024278 <main+0xa4>)
 8024208:	f00d fe4a 	bl	8031ea0 <printf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 802420c:	f7fe ffe6 	bl	80231dc <is_external_clock_avail>
 8024210:	4603      	mov	r3, r0
 8024212:	f083 0301 	eor.w	r3, r3, #1
 8024216:	b2db      	uxtb	r3, r3
 8024218:	2b00      	cmp	r3, #0
 802421a:	d002      	beq.n	8024222 <main+0x4e>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 802421c:	4817      	ldr	r0, [pc, #92]	; (802427c <main+0xa8>)
 802421e:	f00d fe97 	bl	8031f50 <puts>

  printf("JTAG init...");
 8024222:	4817      	ldr	r0, [pc, #92]	; (8024280 <main+0xac>)
 8024224:	f00d fe3c 	bl	8031ea0 <printf>
  jtag_init();
 8024228:	f7ff ff14 	bl	8024054 <jtag_init>
  printf("done.\r\n");
 802422c:	4815      	ldr	r0, [pc, #84]	; (8024284 <main+0xb0>)
 802422e:	f00d fe8f 	bl	8031f50 <puts>

  printf("LED init...");
 8024232:	4815      	ldr	r0, [pc, #84]	; (8024288 <main+0xb4>)
 8024234:	f00d fe34 	bl	8031ea0 <printf>
  led_init();
 8024238:	f7ff ff16 	bl	8024068 <led_init>
  printf("done.\r\n");
 802423c:	4811      	ldr	r0, [pc, #68]	; (8024284 <main+0xb0>)
 802423e:	f00d fe87 	bl	8031f50 <puts>

  printf("USB init...");
 8024242:	4812      	ldr	r0, [pc, #72]	; (802428c <main+0xb8>)
 8024244:	f00d fe2c 	bl	8031ea0 <printf>
  MX_USB_DEVICE_Init();
 8024248:	f00c fdfc 	bl	8030e44 <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 802424c:	480d      	ldr	r0, [pc, #52]	; (8024284 <main+0xb0>)
 802424e:	f00d fe7f 	bl	8031f50 <puts>

  printf("CDC init...");
 8024252:	480f      	ldr	r0, [pc, #60]	; (8024290 <main+0xbc>)
 8024254:	f00d fe24 	bl	8031ea0 <printf>
  cdc_init();
 8024258:	f7fe fe84 	bl	8022f64 <cdc_init>
  printf("done.\r\n");
 802425c:	4809      	ldr	r0, [pc, #36]	; (8024284 <main+0xb0>)
 802425e:	f00d fe77 	bl	8031f50 <puts>

  printf("Programmer init...");
 8024262:	480c      	ldr	r0, [pc, #48]	; (8024294 <main+0xc0>)
 8024264:	f00d fe1c 	bl	8031ea0 <printf>
  np_init();
 8024268:	f002 fb40 	bl	80268ec <np_init>
  printf("done.\r\n");
 802426c:	4805      	ldr	r0, [pc, #20]	; (8024284 <main+0xb0>)
 802426e:	f00d fe6f 	bl	8031f50 <puts>
		printf(" W25Q256JV QuadSPI Test OK\r\n");
	else
		printf(" W25Q256JV QuadSPI Test False\r\n");*/

  while (1)
      np_handler();
 8024272:	f002 fb4b 	bl	802690c <np_handler>
 8024276:	e7fc      	b.n	8024272 <main+0x9e>
 8024278:	08036b0c 	.word	0x08036b0c
 802427c:	08036b30 	.word	0x08036b30
 8024280:	08036b6c 	.word	0x08036b6c
 8024284:	08036b7c 	.word	0x08036b7c
 8024288:	08036b84 	.word	0x08036b84
 802428c:	08036b90 	.word	0x08036b90
 8024290:	08036b9c 	.word	0x08036b9c
 8024294:	08036ba8 	.word	0x08036ba8

08024298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8024298:	b580      	push	{r7, lr}
 802429a:	b094      	sub	sp, #80	; 0x50
 802429c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802429e:	f107 0320 	add.w	r3, r7, #32
 80242a2:	2230      	movs	r2, #48	; 0x30
 80242a4:	2100      	movs	r1, #0
 80242a6:	4618      	mov	r0, r3
 80242a8:	f00d fe9d 	bl	8031fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80242ac:	f107 030c 	add.w	r3, r7, #12
 80242b0:	2200      	movs	r2, #0
 80242b2:	601a      	str	r2, [r3, #0]
 80242b4:	605a      	str	r2, [r3, #4]
 80242b6:	609a      	str	r2, [r3, #8]
 80242b8:	60da      	str	r2, [r3, #12]
 80242ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80242bc:	2300      	movs	r3, #0
 80242be:	60bb      	str	r3, [r7, #8]
 80242c0:	4b2a      	ldr	r3, [pc, #168]	; (802436c <SystemClock_Config+0xd4>)
 80242c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80242c4:	4a29      	ldr	r2, [pc, #164]	; (802436c <SystemClock_Config+0xd4>)
 80242c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80242ca:	6413      	str	r3, [r2, #64]	; 0x40
 80242cc:	4b27      	ldr	r3, [pc, #156]	; (802436c <SystemClock_Config+0xd4>)
 80242ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80242d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80242d4:	60bb      	str	r3, [r7, #8]
 80242d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80242d8:	2300      	movs	r3, #0
 80242da:	607b      	str	r3, [r7, #4]
 80242dc:	4b24      	ldr	r3, [pc, #144]	; (8024370 <SystemClock_Config+0xd8>)
 80242de:	681b      	ldr	r3, [r3, #0]
 80242e0:	4a23      	ldr	r2, [pc, #140]	; (8024370 <SystemClock_Config+0xd8>)
 80242e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80242e6:	6013      	str	r3, [r2, #0]
 80242e8:	4b21      	ldr	r3, [pc, #132]	; (8024370 <SystemClock_Config+0xd8>)
 80242ea:	681b      	ldr	r3, [r3, #0]
 80242ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80242f0:	607b      	str	r3, [r7, #4]
 80242f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80242f4:	2309      	movs	r3, #9
 80242f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80242f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80242fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80242fe:	2301      	movs	r3, #1
 8024300:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8024302:	2302      	movs	r3, #2
 8024304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8024306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802430a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 802430c:	2305      	movs	r3, #5
 802430e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8024310:	23a8      	movs	r3, #168	; 0xa8
 8024312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8024314:	2302      	movs	r3, #2
 8024316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8024318:	2307      	movs	r3, #7
 802431a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802431c:	f107 0320 	add.w	r3, r7, #32
 8024320:	4618      	mov	r0, r3
 8024322:	f006 fa07 	bl	802a734 <HAL_RCC_OscConfig>
 8024326:	4603      	mov	r3, r0
 8024328:	2b00      	cmp	r3, #0
 802432a:	d001      	beq.n	8024330 <SystemClock_Config+0x98>
  {
    Error_Handler();
 802432c:	f000 f822 	bl	8024374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8024330:	230f      	movs	r3, #15
 8024332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8024334:	2302      	movs	r3, #2
 8024336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8024338:	2300      	movs	r3, #0
 802433a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802433c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8024340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8024342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024346:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8024348:	f107 030c 	add.w	r3, r7, #12
 802434c:	2105      	movs	r1, #5
 802434e:	4618      	mov	r0, r3
 8024350:	f006 fc68 	bl	802ac24 <HAL_RCC_ClockConfig>
 8024354:	4603      	mov	r3, r0
 8024356:	2b00      	cmp	r3, #0
 8024358:	d001      	beq.n	802435e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 802435a:	f000 f80b 	bl	8024374 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 802435e:	f006 fd47 	bl	802adf0 <HAL_RCC_EnableCSS>
}
 8024362:	bf00      	nop
 8024364:	3750      	adds	r7, #80	; 0x50
 8024366:	46bd      	mov	sp, r7
 8024368:	bd80      	pop	{r7, pc}
 802436a:	bf00      	nop
 802436c:	40023800 	.word	0x40023800
 8024370:	40007000 	.word	0x40007000

08024374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8024374:	b480      	push	{r7}
 8024376:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8024378:	b672      	cpsid	i
}
 802437a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802437c:	e7fe      	b.n	802437c <Error_Handler+0x8>
	...

08024380 <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8024380:	b580      	push	{r7, lr}
 8024382:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8024384:	2250      	movs	r2, #80	; 0x50
 8024386:	2100      	movs	r1, #0
 8024388:	4803      	ldr	r0, [pc, #12]	; (8024398 <nand_bad_block_table_init+0x18>)
 802438a:	f00d fe2c 	bl	8031fe6 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 802438e:	4b03      	ldr	r3, [pc, #12]	; (802439c <nand_bad_block_table_init+0x1c>)
 8024390:	2200      	movs	r2, #0
 8024392:	601a      	str	r2, [r3, #0]
}
 8024394:	bf00      	nop
 8024396:	bd80      	pop	{r7, pc}
 8024398:	200012c0 	.word	0x200012c0
 802439c:	200012bc 	.word	0x200012bc

080243a0 <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 80243a0:	b480      	push	{r7}
 80243a2:	b083      	sub	sp, #12
 80243a4:	af00      	add	r7, sp, #0
 80243a6:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 80243a8:	4b0b      	ldr	r3, [pc, #44]	; (80243d8 <nand_bad_block_table_add+0x38>)
 80243aa:	681b      	ldr	r3, [r3, #0]
 80243ac:	2b14      	cmp	r3, #20
 80243ae:	d102      	bne.n	80243b6 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 80243b0:	f04f 33ff 	mov.w	r3, #4294967295
 80243b4:	e009      	b.n	80243ca <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 80243b6:	4b08      	ldr	r3, [pc, #32]	; (80243d8 <nand_bad_block_table_add+0x38>)
 80243b8:	681b      	ldr	r3, [r3, #0]
 80243ba:	1c5a      	adds	r2, r3, #1
 80243bc:	4906      	ldr	r1, [pc, #24]	; (80243d8 <nand_bad_block_table_add+0x38>)
 80243be:	600a      	str	r2, [r1, #0]
 80243c0:	4906      	ldr	r1, [pc, #24]	; (80243dc <nand_bad_block_table_add+0x3c>)
 80243c2:	687a      	ldr	r2, [r7, #4]
 80243c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 80243c8:	2300      	movs	r3, #0
}
 80243ca:	4618      	mov	r0, r3
 80243cc:	370c      	adds	r7, #12
 80243ce:	46bd      	mov	sp, r7
 80243d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243d4:	4770      	bx	lr
 80243d6:	bf00      	nop
 80243d8:	200012bc 	.word	0x200012bc
 80243dc:	200012c0 	.word	0x200012c0

080243e0 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 80243e0:	b480      	push	{r7}
 80243e2:	b085      	sub	sp, #20
 80243e4:	af00      	add	r7, sp, #0
 80243e6:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 80243e8:	2300      	movs	r3, #0
 80243ea:	60fb      	str	r3, [r7, #12]
 80243ec:	e00b      	b.n	8024406 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 80243ee:	4a0c      	ldr	r2, [pc, #48]	; (8024420 <nand_bad_block_table_lookup+0x40>)
 80243f0:	68fb      	ldr	r3, [r7, #12]
 80243f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80243f6:	687a      	ldr	r2, [r7, #4]
 80243f8:	429a      	cmp	r2, r3
 80243fa:	d101      	bne.n	8024400 <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 80243fc:	2301      	movs	r3, #1
 80243fe:	e008      	b.n	8024412 <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8024400:	68fb      	ldr	r3, [r7, #12]
 8024402:	3301      	adds	r3, #1
 8024404:	60fb      	str	r3, [r7, #12]
 8024406:	4b07      	ldr	r3, [pc, #28]	; (8024424 <nand_bad_block_table_lookup+0x44>)
 8024408:	681b      	ldr	r3, [r3, #0]
 802440a:	68fa      	ldr	r2, [r7, #12]
 802440c:	429a      	cmp	r2, r3
 802440e:	d3ee      	bcc.n	80243ee <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8024410:	2300      	movs	r3, #0
}
 8024412:	4618      	mov	r0, r3
 8024414:	3714      	adds	r7, #20
 8024416:	46bd      	mov	sp, r7
 8024418:	f85d 7b04 	ldr.w	r7, [sp], #4
 802441c:	4770      	bx	lr
 802441e:	bf00      	nop
 8024420:	200012c0 	.word	0x200012c0
 8024424:	200012bc 	.word	0x200012bc

08024428 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8024428:	b480      	push	{r7}
 802442a:	b083      	sub	sp, #12
 802442c:	af00      	add	r7, sp, #0
 802442e:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8024430:	4b08      	ldr	r3, [pc, #32]	; (8024454 <nand_bad_block_table_iter_alloc+0x2c>)
 8024432:	681b      	ldr	r3, [r3, #0]
 8024434:	2b00      	cmp	r3, #0
 8024436:	d101      	bne.n	802443c <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8024438:	2300      	movs	r3, #0
 802443a:	e004      	b.n	8024446 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 802443c:	4b06      	ldr	r3, [pc, #24]	; (8024458 <nand_bad_block_table_iter_alloc+0x30>)
 802443e:	681a      	ldr	r2, [r3, #0]
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8024444:	4b04      	ldr	r3, [pc, #16]	; (8024458 <nand_bad_block_table_iter_alloc+0x30>)
}
 8024446:	4618      	mov	r0, r3
 8024448:	370c      	adds	r7, #12
 802444a:	46bd      	mov	sp, r7
 802444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024450:	4770      	bx	lr
 8024452:	bf00      	nop
 8024454:	200012bc 	.word	0x200012bc
 8024458:	200012c0 	.word	0x200012c0

0802445c <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 802445c:	b480      	push	{r7}
 802445e:	b085      	sub	sp, #20
 8024460:	af00      	add	r7, sp, #0
 8024462:	6078      	str	r0, [r7, #4]
 8024464:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 802446a:	68fb      	ldr	r3, [r7, #12]
 802446c:	2b00      	cmp	r3, #0
 802446e:	d101      	bne.n	8024474 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8024470:	2300      	movs	r3, #0
 8024472:	e012      	b.n	802449a <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8024474:	68fb      	ldr	r3, [r7, #12]
 8024476:	3304      	adds	r3, #4
 8024478:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 802447a:	68fb      	ldr	r3, [r7, #12]
 802447c:	4a0a      	ldr	r2, [pc, #40]	; (80244a8 <nand_bad_block_table_iter_next+0x4c>)
 802447e:	1a9b      	subs	r3, r3, r2
 8024480:	109b      	asrs	r3, r3, #2
 8024482:	461a      	mov	r2, r3
 8024484:	4b09      	ldr	r3, [pc, #36]	; (80244ac <nand_bad_block_table_iter_next+0x50>)
 8024486:	681b      	ldr	r3, [r3, #0]
 8024488:	429a      	cmp	r2, r3
 802448a:	d301      	bcc.n	8024490 <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 802448c:	2300      	movs	r3, #0
 802448e:	e004      	b.n	802449a <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8024490:	68fb      	ldr	r3, [r7, #12]
 8024492:	681a      	ldr	r2, [r3, #0]
 8024494:	683b      	ldr	r3, [r7, #0]
 8024496:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8024498:	68fb      	ldr	r3, [r7, #12]
}
 802449a:	4618      	mov	r0, r3
 802449c:	3714      	adds	r7, #20
 802449e:	46bd      	mov	sp, r7
 80244a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244a4:	4770      	bx	lr
 80244a6:	bf00      	nop
 80244a8:	200012c0 	.word	0x200012c0
 80244ac:	200012bc 	.word	0x200012bc

080244b0 <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];

static int np_send_ok_status()
{
 80244b0:	b580      	push	{r7, lr}
 80244b2:	b082      	sub	sp, #8
 80244b4:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };
 80244b6:	2301      	movs	r3, #1
 80244b8:	703b      	strb	r3, [r7, #0]
 80244ba:	2300      	movs	r3, #0
 80244bc:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 80244be:	2302      	movs	r3, #2
 80244c0:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 80244c2:	4b08      	ldr	r3, [pc, #32]	; (80244e4 <np_send_ok_status+0x34>)
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d006      	beq.n	80244d8 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);
 80244ca:	4b06      	ldr	r3, [pc, #24]	; (80244e4 <np_send_ok_status+0x34>)
 80244cc:	681b      	ldr	r3, [r3, #0]
 80244ce:	681b      	ldr	r3, [r3, #0]
 80244d0:	463a      	mov	r2, r7
 80244d2:	6879      	ldr	r1, [r7, #4]
 80244d4:	4610      	mov	r0, r2
 80244d6:	4798      	blx	r3

    return 0;
 80244d8:	2300      	movs	r3, #0
}
 80244da:	4618      	mov	r0, r3
 80244dc:	3708      	adds	r7, #8
 80244de:	46bd      	mov	sp, r7
 80244e0:	bd80      	pop	{r7, pc}
 80244e2:	bf00      	nop
 80244e4:	20001310 	.word	0x20001310

080244e8 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 80244e8:	b580      	push	{r7, lr}
 80244ea:	b086      	sub	sp, #24
 80244ec:	af00      	add	r7, sp, #0
 80244ee:	4603      	mov	r3, r0
 80244f0:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };
 80244f2:	4b0d      	ldr	r3, [pc, #52]	; (8024528 <np_send_error+0x40>)
 80244f4:	881b      	ldrh	r3, [r3, #0]
 80244f6:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };
 80244f8:	8a3b      	ldrh	r3, [r7, #16]
 80244fa:	81bb      	strh	r3, [r7, #12]
 80244fc:	79fb      	ldrb	r3, [r7, #7]
 80244fe:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8024500:	2303      	movs	r3, #3
 8024502:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8024504:	4b09      	ldr	r3, [pc, #36]	; (802452c <np_send_error+0x44>)
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	2b00      	cmp	r3, #0
 802450a:	d007      	beq.n	802451c <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);
 802450c:	4b07      	ldr	r3, [pc, #28]	; (802452c <np_send_error+0x44>)
 802450e:	681b      	ldr	r3, [r3, #0]
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	f107 020c 	add.w	r2, r7, #12
 8024516:	6979      	ldr	r1, [r7, #20]
 8024518:	4610      	mov	r0, r2
 802451a:	4798      	blx	r3

    return 0;
 802451c:	2300      	movs	r3, #0
}
 802451e:	4618      	mov	r0, r3
 8024520:	3718      	adds	r7, #24
 8024522:	46bd      	mov	sp, r7
 8024524:	bd80      	pop	{r7, pc}
 8024526:	bf00      	nop
 8024528:	08036bbc 	.word	0x08036bbc
 802452c:	20001310 	.word	0x20001310

08024530 <np_send_bad_block_info>:

static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8024530:	b580      	push	{r7, lr}
 8024532:	b08a      	sub	sp, #40	; 0x28
 8024534:	af00      	add	r7, sp, #0
 8024536:	e9c7 0102 	strd	r0, r1, [r7, #8]
 802453a:	607a      	str	r2, [r7, #4]
 802453c:	70fb      	strb	r3, [r7, #3]
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 802453e:	78fb      	ldrb	r3, [r7, #3]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d001      	beq.n	8024548 <np_send_bad_block_info+0x18>
 8024544:	2304      	movs	r3, #4
 8024546:	e000      	b.n	802454a <np_send_bad_block_info+0x1a>
 8024548:	2302      	movs	r3, #2
 802454a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 802454e:	2301      	movs	r3, #1
 8024550:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8024554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024558:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 802455c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802455e:	82bb      	strh	r3, [r7, #20]
 8024560:	f107 0318 	add.w	r3, r7, #24
 8024564:	3b02      	subs	r3, #2
 8024566:	68ba      	ldr	r2, [r7, #8]
 8024568:	601a      	str	r2, [r3, #0]
 802456a:	68fa      	ldr	r2, [r7, #12]
 802456c:	605a      	str	r2, [r3, #4]
 802456e:	687b      	ldr	r3, [r7, #4]
 8024570:	f8c7 301e 	str.w	r3, [r7, #30]

    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8024574:	4b09      	ldr	r3, [pc, #36]	; (802459c <np_send_bad_block_info+0x6c>)
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	681b      	ldr	r3, [r3, #0]
 802457a:	f107 0214 	add.w	r2, r7, #20
 802457e:	210e      	movs	r1, #14
 8024580:	4610      	mov	r0, r2
 8024582:	4798      	blx	r3
 8024584:	4603      	mov	r3, r0
 8024586:	2b00      	cmp	r3, #0
 8024588:	d002      	beq.n	8024590 <np_send_bad_block_info+0x60>
        return -1;
 802458a:	f04f 33ff 	mov.w	r3, #4294967295
 802458e:	e000      	b.n	8024592 <np_send_bad_block_info+0x62>

    return 0;
 8024590:	2300      	movs	r3, #0
}
 8024592:	4618      	mov	r0, r3
 8024594:	3728      	adds	r7, #40	; 0x28
 8024596:	46bd      	mov	sp, r7
 8024598:	bd80      	pop	{r7, pc}
 802459a:	bf00      	nop
 802459c:	20001310 	.word	0x20001310

080245a0 <np_send_progress>:

static int np_send_progress(uint64_t progress)
{
 80245a0:	b580      	push	{r7, lr}
 80245a2:	b086      	sub	sp, #24
 80245a4:	af00      	add	r7, sp, #0
 80245a6:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 80245aa:	4b0f      	ldr	r3, [pc, #60]	; (80245e8 <np_send_progress+0x48>)
 80245ac:	881b      	ldrh	r3, [r3, #0]
 80245ae:	82bb      	strh	r3, [r7, #20]
    np_resp_progress_t resp_progress = { resp_header, progress };
 80245b0:	8abb      	ldrh	r3, [r7, #20]
 80245b2:	813b      	strh	r3, [r7, #8]
 80245b4:	f107 0308 	add.w	r3, r7, #8
 80245b8:	3302      	adds	r3, #2
 80245ba:	683a      	ldr	r2, [r7, #0]
 80245bc:	601a      	str	r2, [r3, #0]
 80245be:	687a      	ldr	r2, [r7, #4]
 80245c0:	605a      	str	r2, [r3, #4]

    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 80245c2:	4b0a      	ldr	r3, [pc, #40]	; (80245ec <np_send_progress+0x4c>)
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	681b      	ldr	r3, [r3, #0]
 80245c8:	f107 0208 	add.w	r2, r7, #8
 80245cc:	210a      	movs	r1, #10
 80245ce:	4610      	mov	r0, r2
 80245d0:	4798      	blx	r3
 80245d2:	4603      	mov	r3, r0
 80245d4:	2b00      	cmp	r3, #0
 80245d6:	d002      	beq.n	80245de <np_send_progress+0x3e>
        return -1;
 80245d8:	f04f 33ff 	mov.w	r3, #4294967295
 80245dc:	e000      	b.n	80245e0 <np_send_progress+0x40>

    return 0;
 80245de:	2300      	movs	r3, #0
}
 80245e0:	4618      	mov	r0, r3
 80245e2:	3718      	adds	r7, #24
 80245e4:	46bd      	mov	sp, r7
 80245e6:	bd80      	pop	{r7, pc}
 80245e8:	08036bc0 	.word	0x08036bc0
 80245ec:	20001310 	.word	0x20001310

080245f0 <_np_cmd_nand_read_id>:

static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 80245f0:	b5b0      	push	{r4, r5, r7, lr}
 80245f2:	b08a      	sub	sp, #40	; 0x28
 80245f4:	af04      	add	r7, sp, #16
 80245f6:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 80245f8:	2308      	movs	r3, #8
 80245fa:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 80245fc:	481d      	ldr	r0, [pc, #116]	; (8024674 <_np_cmd_nand_read_id+0x84>)
 80245fe:	f00d fca7 	bl	8031f50 <puts>

    resp.header.code = NP_RESP_DATA;
 8024602:	2300      	movs	r3, #0
 8024604:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8024606:	697b      	ldr	r3, [r7, #20]
 8024608:	b2db      	uxtb	r3, r3
 802460a:	3b02      	subs	r3, #2
 802460c:	b2db      	uxtb	r3, r3
 802460e:	737b      	strb	r3, [r7, #13]
    hal[prog->hal]->read_id(&resp.nand_id);
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024616:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802461a:	461a      	mov	r2, r3
 802461c:	4b16      	ldr	r3, [pc, #88]	; (8024678 <_np_cmd_nand_read_id+0x88>)
 802461e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024622:	689b      	ldr	r3, [r3, #8]
 8024624:	f107 020c 	add.w	r2, r7, #12
 8024628:	3202      	adds	r2, #2
 802462a:	4610      	mov	r0, r2
 802462c:	4798      	blx	r3

    if (np_comm_cb)
 802462e:	4b13      	ldr	r3, [pc, #76]	; (802467c <_np_cmd_nand_read_id+0x8c>)
 8024630:	681b      	ldr	r3, [r3, #0]
 8024632:	2b00      	cmp	r3, #0
 8024634:	d007      	beq.n	8024646 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8024636:	4b11      	ldr	r3, [pc, #68]	; (802467c <_np_cmd_nand_read_id+0x8c>)
 8024638:	681b      	ldr	r3, [r3, #0]
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	f107 020c 	add.w	r2, r7, #12
 8024640:	6979      	ldr	r1, [r7, #20]
 8024642:	4610      	mov	r0, r2
 8024644:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8024646:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024648:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 802464a:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 802464c:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 802464e:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024650:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8024652:	7c7b      	ldrb	r3, [r7, #17]
 8024654:	7cba      	ldrb	r2, [r7, #18]
 8024656:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8024658:	9102      	str	r1, [sp, #8]
 802465a:	9201      	str	r2, [sp, #4]
 802465c:	9300      	str	r3, [sp, #0]
 802465e:	462b      	mov	r3, r5
 8024660:	4622      	mov	r2, r4
 8024662:	4601      	mov	r1, r0
 8024664:	4806      	ldr	r0, [pc, #24]	; (8024680 <_np_cmd_nand_read_id+0x90>)
 8024666:	f00d fc1b 	bl	8031ea0 <printf>

    return 0;
 802466a:	2300      	movs	r3, #0
}
 802466c:	4618      	mov	r0, r3
 802466e:	3718      	adds	r7, #24
 8024670:	46bd      	mov	sp, r7
 8024672:	bdb0      	pop	{r4, r5, r7, pc}
 8024674:	08036bc4 	.word	0x08036bc4
 8024678:	20000040 	.word	0x20000040
 802467c:	20001310 	.word	0x20001310
 8024680:	08036bd8 	.word	0x08036bd8

08024684 <np_cmd_nand_read_id>:

static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8024684:	b580      	push	{r7, lr}
 8024686:	b084      	sub	sp, #16
 8024688:	af00      	add	r7, sp, #0
 802468a:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 802468c:	2001      	movs	r0, #1
 802468e:	f7ff fd79 	bl	8024184 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8024692:	6878      	ldr	r0, [r7, #4]
 8024694:	f7ff ffac 	bl	80245f0 <_np_cmd_nand_read_id>
 8024698:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 802469a:	2000      	movs	r0, #0
 802469c:	f7ff fd72 	bl	8024184 <led_rd_set>

    return ret;
 80246a0:	68fb      	ldr	r3, [r7, #12]
}
 80246a2:	4618      	mov	r0, r3
 80246a4:	3710      	adds	r7, #16
 80246a6:	46bd      	mov	sp, r7
 80246a8:	bd80      	pop	{r7, pc}
	...

080246ac <np_read_bad_block_info_from_page>:

static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 80246ac:	b5b0      	push	{r4, r5, r7, lr}
 80246ae:	b08a      	sub	sp, #40	; 0x28
 80246b0:	af00      	add	r7, sp, #0
 80246b2:	60f8      	str	r0, [r7, #12]
 80246b4:	60b9      	str	r1, [r7, #8]
 80246b6:	607a      	str	r2, [r7, #4]
 80246b8:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 80246ba:	68fb      	ldr	r3, [r7, #12]
 80246bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246c0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80246c4:	68ba      	ldr	r2, [r7, #8]
 80246c6:	fb02 f303 	mul.w	r3, r2, r3
 80246ca:	2200      	movs	r2, #0
 80246cc:	461c      	mov	r4, r3
 80246ce:	4615      	mov	r5, r2
 80246d0:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 80246d4:	68fb      	ldr	r3, [r7, #12]
 80246d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246da:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 80246de:	68fa      	ldr	r2, [r7, #12]
 80246e0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80246e4:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 80246e8:	4413      	add	r3, r2
 80246ea:	3338      	adds	r3, #56	; 0x38
 80246ec:	68fa      	ldr	r2, [r7, #12]
 80246ee:	4413      	add	r3, r2
 80246f0:	3304      	adds	r3, #4
 80246f2:	617b      	str	r3, [r7, #20]

    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 80246f4:	68fb      	ldr	r3, [r7, #12]
 80246f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246fa:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80246fe:	461a      	mov	r2, r3
 8024700:	4b35      	ldr	r3, [pc, #212]	; (80247d8 <np_read_bad_block_info_from_page+0x12c>)
 8024702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024706:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8024708:	68fb      	ldr	r3, [r7, #12]
 802470a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802470e:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8024712:	461a      	mov	r2, r3
 8024714:	2301      	movs	r3, #1
 8024716:	6879      	ldr	r1, [r7, #4]
 8024718:	6978      	ldr	r0, [r7, #20]
 802471a:	47a0      	blx	r4
 802471c:	6278      	str	r0, [r7, #36]	; 0x24
    if (status == FLASH_STATUS_INVALID_CMD)
 802471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024720:	2b04      	cmp	r3, #4
 8024722:	d11a      	bne.n	802475a <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8024724:	68fb      	ldr	r3, [r7, #12]
 8024726:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802472a:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802472e:	461a      	mov	r2, r3
 8024730:	4b29      	ldr	r3, [pc, #164]	; (80247d8 <np_read_bad_block_info_from_page+0x12c>)
 8024732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024736:	691b      	ldr	r3, [r3, #16]
 8024738:	68fa      	ldr	r2, [r7, #12]
 802473a:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 802473e:	68fa      	ldr	r2, [r7, #12]
 8024740:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024744:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8024748:	68fa      	ldr	r2, [r7, #12]
 802474a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802474e:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8024752:	440a      	add	r2, r1
 8024754:	6879      	ldr	r1, [r7, #4]
 8024756:	4798      	blx	r3
 8024758:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 802475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802475c:	2b03      	cmp	r3, #3
 802475e:	d010      	beq.n	8024782 <np_read_bad_block_info_from_page+0xd6>
 8024760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024762:	2b03      	cmp	r3, #3
 8024764:	d815      	bhi.n	8024792 <np_read_bad_block_info_from_page+0xe6>
 8024766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024768:	2b00      	cmp	r3, #0
 802476a:	d018      	beq.n	802479e <np_read_bad_block_info_from_page+0xf2>
 802476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802476e:	2b02      	cmp	r3, #2
 8024770:	d10f      	bne.n	8024792 <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8024772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024776:	4819      	ldr	r0, [pc, #100]	; (80247dc <np_read_bad_block_info_from_page+0x130>)
 8024778:	f00d fb92 	bl	8031ea0 <printf>
            addr);
        return NP_ERR_NAND_RD;
 802477c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8024780:	e025      	b.n	80247ce <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8024782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024786:	4816      	ldr	r0, [pc, #88]	; (80247e0 <np_read_bad_block_info_from_page+0x134>)
 8024788:	f00d fb8a 	bl	8031ea0 <printf>
        return NP_ERR_NAND_RD;
 802478c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8024790:	e01d      	b.n	80247ce <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8024792:	4814      	ldr	r0, [pc, #80]	; (80247e4 <np_read_bad_block_info_from_page+0x138>)
 8024794:	f00d fbdc 	bl	8031f50 <puts>
        return NP_ERR_NAND_RD;
 8024798:	f06f 0367 	mvn.w	r3, #103	; 0x67
 802479c:	e017      	b.n	80247ce <np_read_bad_block_info_from_page+0x122>
        break;
 802479e:	bf00      	nop
    }

    *is_bad = prog->page.buf[prog->chip_info.page_size +
 80247a0:	68fb      	ldr	r3, [r7, #12]
 80247a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247a6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 80247aa:	68fa      	ldr	r2, [r7, #12]
 80247ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80247b0:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 80247b4:	4413      	add	r3, r2
 80247b6:	68fa      	ldr	r2, [r7, #12]
 80247b8:	4413      	add	r3, r2
 80247ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 80247be:	2bff      	cmp	r3, #255	; 0xff
 80247c0:	bf14      	ite	ne
 80247c2:	2301      	movne	r3, #1
 80247c4:	2300      	moveq	r3, #0
 80247c6:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 80247c8:	683b      	ldr	r3, [r7, #0]
 80247ca:	701a      	strb	r2, [r3, #0]

    return 0;
 80247cc:	2300      	movs	r3, #0
}
 80247ce:	4618      	mov	r0, r3
 80247d0:	3728      	adds	r7, #40	; 0x28
 80247d2:	46bd      	mov	sp, r7
 80247d4:	bdb0      	pop	{r4, r5, r7, pc}
 80247d6:	bf00      	nop
 80247d8:	20000040 	.word	0x20000040
 80247dc:	08036bfc 	.word	0x08036bfc
 80247e0:	08036c30 	.word	0x08036c30
 80247e4:	08036c58 	.word	0x08036c58

080247e8 <_np_cmd_read_bad_blocks>:

static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 80247e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80247ec:	b088      	sub	sp, #32
 80247ee:	af00      	add	r7, sp, #0
 80247f0:	6078      	str	r0, [r7, #4]
 80247f2:	460b      	mov	r3, r1
 80247f4:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    if (!hal[prog->hal]->is_bb_supported())
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247fc:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024800:	461a      	mov	r2, r3
 8024802:	4b40      	ldr	r3, [pc, #256]	; (8024904 <_np_cmd_read_bad_blocks+0x11c>)
 8024804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024808:	6a1b      	ldr	r3, [r3, #32]
 802480a:	4798      	blx	r3
 802480c:	4603      	mov	r3, r0
 802480e:	f083 0301 	eor.w	r3, r3, #1
 8024812:	b2db      	uxtb	r3, r3
 8024814:	2b00      	cmp	r3, #0
 8024816:	d16a      	bne.n	80248ee <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802481e:	3330      	adds	r3, #48	; 0x30
 8024820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024824:	687b      	ldr	r3, [r7, #4]
 8024826:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802482a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 802482e:	2200      	movs	r2, #0
 8024830:	4698      	mov	r8, r3
 8024832:	4691      	mov	r9, r2
 8024834:	4642      	mov	r2, r8
 8024836:	464b      	mov	r3, r9
 8024838:	f7fe f9b6 	bl	8022ba8 <__aeabi_uldivmod>
 802483c:	4602      	mov	r2, r0
 802483e:	460b      	mov	r3, r1
 8024840:	4613      	mov	r3, r2
 8024842:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8024844:	687b      	ldr	r3, [r7, #4]
 8024846:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802484a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024854:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024858:	fbb2 f3f3 	udiv	r3, r2, r3
 802485c:	617b      	str	r3, [r7, #20]

    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */
    for (block = 0; block < block_num; block++)
 802485e:	2300      	movs	r3, #0
 8024860:	61fb      	str	r3, [r7, #28]
 8024862:	e03f      	b.n	80248e4 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8024864:	69fb      	ldr	r3, [r7, #28]
 8024866:	697a      	ldr	r2, [r7, #20]
 8024868:	fb02 f303 	mul.w	r3, r2, r3
 802486c:	613b      	str	r3, [r7, #16]

        if (send_progress)
 802486e:	78fb      	ldrb	r3, [r7, #3]
 8024870:	2b00      	cmp	r3, #0
 8024872:	d007      	beq.n	8024884 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8024874:	693b      	ldr	r3, [r7, #16]
 8024876:	2200      	movs	r2, #0
 8024878:	461c      	mov	r4, r3
 802487a:	4615      	mov	r5, r2
 802487c:	4620      	mov	r0, r4
 802487e:	4629      	mov	r1, r5
 8024880:	f7ff fe8e 	bl	80245a0 <np_send_progress>

        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8024884:	f107 030b 	add.w	r3, r7, #11
 8024888:	693a      	ldr	r2, [r7, #16]
 802488a:	69f9      	ldr	r1, [r7, #28]
 802488c:	6878      	ldr	r0, [r7, #4]
 802488e:	f7ff ff0d 	bl	80246ac <np_read_bad_block_info_from_page>
 8024892:	60f8      	str	r0, [r7, #12]
 8024894:	68fb      	ldr	r3, [r7, #12]
 8024896:	2b00      	cmp	r3, #0
 8024898:	d001      	beq.n	802489e <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 802489a:	68fb      	ldr	r3, [r7, #12]
 802489c:	e02c      	b.n	80248f8 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 802489e:	7afb      	ldrb	r3, [r7, #11]
 80248a0:	f083 0301 	eor.w	r3, r3, #1
 80248a4:	b2db      	uxtb	r3, r3
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d00d      	beq.n	80248c6 <_np_cmd_read_bad_blocks+0xde>
 80248aa:	693b      	ldr	r3, [r7, #16]
 80248ac:	1c5a      	adds	r2, r3, #1
 80248ae:	f107 030b 	add.w	r3, r7, #11
 80248b2:	69f9      	ldr	r1, [r7, #28]
 80248b4:	6878      	ldr	r0, [r7, #4]
 80248b6:	f7ff fef9 	bl	80246ac <np_read_bad_block_info_from_page>
 80248ba:	60f8      	str	r0, [r7, #12]
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	2b00      	cmp	r3, #0
 80248c0:	d001      	beq.n	80248c6 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 80248c2:	68fb      	ldr	r3, [r7, #12]
 80248c4:	e018      	b.n	80248f8 <_np_cmd_read_bad_blocks+0x110>
        }

        if (is_bad && nand_bad_block_table_add(page))
 80248c6:	7afb      	ldrb	r3, [r7, #11]
 80248c8:	2b00      	cmp	r3, #0
 80248ca:	d008      	beq.n	80248de <_np_cmd_read_bad_blocks+0xf6>
 80248cc:	6938      	ldr	r0, [r7, #16]
 80248ce:	f7ff fd67 	bl	80243a0 <nand_bad_block_table_add>
 80248d2:	4603      	mov	r3, r0
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	d002      	beq.n	80248de <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 80248d8:	f06f 0370 	mvn.w	r3, #112	; 0x70
 80248dc:	e00c      	b.n	80248f8 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 80248de:	69fb      	ldr	r3, [r7, #28]
 80248e0:	3301      	adds	r3, #1
 80248e2:	61fb      	str	r3, [r7, #28]
 80248e4:	69fa      	ldr	r2, [r7, #28]
 80248e6:	69bb      	ldr	r3, [r7, #24]
 80248e8:	429a      	cmp	r2, r3
 80248ea:	d3bb      	bcc.n	8024864 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 80248ec:	e000      	b.n	80248f0 <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 80248ee:	bf00      	nop
    prog->bb_is_read = 1;
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	2201      	movs	r2, #1
 80248f4:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 80248f6:	2300      	movs	r3, #0
}
 80248f8:	4618      	mov	r0, r3
 80248fa:	3720      	adds	r7, #32
 80248fc:	46bd      	mov	sp, r7
 80248fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8024902:	bf00      	nop
 8024904:	20000040 	.word	0x20000040

08024908 <np_nand_erase>:

static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8024908:	b580      	push	{r7, lr}
 802490a:	b086      	sub	sp, #24
 802490c:	af00      	add	r7, sp, #0
 802490e:	6078      	str	r0, [r7, #4]
 8024910:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8024912:	6879      	ldr	r1, [r7, #4]
 8024914:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8024918:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 802491c:	6838      	ldr	r0, [r7, #0]
 802491e:	fb00 f101 	mul.w	r1, r0, r1
 8024922:	2000      	movs	r0, #0
 8024924:	460a      	mov	r2, r1
 8024926:	4603      	mov	r3, r0
 8024928:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND erase at 0x%" PRIx64 "\r\n", addr);
 802492c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024930:	481f      	ldr	r0, [pc, #124]	; (80249b0 <np_nand_erase+0xa8>)
 8024932:	f00d fab5 	bl	8031ea0 <printf>

    status = hal[prog->hal]->erase_block(page);
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802493c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024940:	461a      	mov	r2, r3
 8024942:	4b1c      	ldr	r3, [pc, #112]	; (80249b4 <np_nand_erase+0xac>)
 8024944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024948:	68db      	ldr	r3, [r3, #12]
 802494a:	6838      	ldr	r0, [r7, #0]
 802494c:	4798      	blx	r3
 802494e:	60f8      	str	r0, [r7, #12]
    switch (status)
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	2b03      	cmp	r3, #3
 8024954:	d018      	beq.n	8024988 <np_nand_erase+0x80>
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	2b03      	cmp	r3, #3
 802495a:	d81b      	bhi.n	8024994 <np_nand_erase+0x8c>
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	2b00      	cmp	r3, #0
 8024960:	d01e      	beq.n	80249a0 <np_nand_erase+0x98>
 8024962:	68fb      	ldr	r3, [r7, #12]
 8024964:	2b02      	cmp	r3, #2
 8024966:	d115      	bne.n	8024994 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8024968:	687b      	ldr	r3, [r7, #4]
 802496a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802496e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024972:	2300      	movs	r3, #0
 8024974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024978:	f7ff fdda 	bl	8024530 <np_send_bad_block_info>
 802497c:	4603      	mov	r3, r0
 802497e:	2b00      	cmp	r3, #0
 8024980:	d010      	beq.n	80249a4 <np_nand_erase+0x9c>
            return -1;
 8024982:	f04f 33ff 	mov.w	r3, #4294967295
 8024986:	e00f      	b.n	80249a8 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND erase timeout at 0x%" PRIx64 "\r\n", addr);
 8024988:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802498c:	480a      	ldr	r0, [pc, #40]	; (80249b8 <np_nand_erase+0xb0>)
 802498e:	f00d fa87 	bl	8031ea0 <printf>
        break;
 8024992:	e008      	b.n	80249a6 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8024994:	4809      	ldr	r0, [pc, #36]	; (80249bc <np_nand_erase+0xb4>)
 8024996:	f00d fadb 	bl	8031f50 <puts>
        return -1;
 802499a:	f04f 33ff 	mov.w	r3, #4294967295
 802499e:	e003      	b.n	80249a8 <np_nand_erase+0xa0>
        break;
 80249a0:	bf00      	nop
 80249a2:	e000      	b.n	80249a6 <np_nand_erase+0x9e>
        break;
 80249a4:	bf00      	nop
    }

    return 0;
 80249a6:	2300      	movs	r3, #0
}
 80249a8:	4618      	mov	r0, r3
 80249aa:	3718      	adds	r7, #24
 80249ac:	46bd      	mov	sp, r7
 80249ae:	bd80      	pop	{r7, pc}
 80249b0:	08036c74 	.word	0x08036c74
 80249b4:	20000040 	.word	0x20000040
 80249b8:	08036c8c 	.word	0x08036c8c
 80249bc:	08036c58 	.word	0x08036c58

080249c0 <_np_cmd_nand_erase>:

static int _np_cmd_nand_erase(np_prog_t *prog)
{
 80249c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80249c4:	b0ac      	sub	sp, #176	; 0xb0
 80249c6:	af04      	add	r7, sp, #16
 80249c8:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 80249ca:	2300      	movs	r3, #0
 80249cc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 80249d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249d2:	685b      	ldr	r3, [r3, #4]
 80249d4:	2b11      	cmp	r3, #17
 80249d6:	d808      	bhi.n	80249ea <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("Wrong buffer length for erase command %lu\r\n",
 80249d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249da:	685b      	ldr	r3, [r3, #4]
 80249dc:	4619      	mov	r1, r3
 80249de:	48b0      	ldr	r0, [pc, #704]	; (8024ca0 <_np_cmd_nand_erase+0x2e0>)
 80249e0:	f00d fa5e 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80249e4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80249e8:	e1c0      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 80249ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249ec:	681b      	ldr	r3, [r3, #0]
 80249ee:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 80249f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80249f2:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80249f6:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80249fa:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80249fe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024a02:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8024a06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8024a08:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024a0c:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024a10:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8024a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024a16:	7c5b      	ldrb	r3, [r3, #17]
 8024a18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024a1c:	b2db      	uxtb	r3, r3
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	bf14      	ite	ne
 8024a22:	2301      	movne	r3, #1
 8024a24:	2300      	moveq	r3, #0
 8024a26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8024a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024a2c:	7c5b      	ldrb	r3, [r3, #17]
 8024a2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8024a32:	b2db      	uxtb	r3, r3
 8024a34:	2b00      	cmp	r3, #0
 8024a36:	bf14      	ite	ne
 8024a38:	2301      	movne	r3, #1
 8024a3a:	2300      	moveq	r3, #0
 8024a3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("Erase at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 8024a40:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024a44:	e9cd 2300 	strd	r2, r3, [sp]
 8024a48:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024a4c:	4895      	ldr	r0, [pc, #596]	; (8024ca4 <_np_cmd_nand_erase+0x2e4>)
 8024a4e:	f00d fa27 	bl	8031ea0 <printf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 8024a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a58:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a62:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8024a6a:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8024a6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	d03f      	beq.n	8024af4 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a76:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024a7a:	3330      	adds	r3, #48	; 0x30
 8024a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a86:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024a8a:	2200      	movs	r2, #0
 8024a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8024a8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8024a90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024a94:	f7fe f888 	bl	8022ba8 <__aeabi_uldivmod>
 8024a98:	4602      	mov	r2, r0
 8024a9a:	460b      	mov	r3, r1
 8024a9c:	4613      	mov	r3, r2
 8024a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024aa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024aa6:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ab0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8024ab4:	4413      	add	r3, r2
 8024ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 8024aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024ac0:	fb02 f303 	mul.w	r3, r2, r3
 8024ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 8024ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024ac8:	2200      	movs	r2, #0
 8024aca:	469a      	mov	sl, r3
 8024acc:	4693      	mov	fp, r2
 8024ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024ad2:	2200      	movs	r2, #0
 8024ad4:	4698      	mov	r8, r3
 8024ad6:	4691      	mov	r9, r2
 8024ad8:	fb08 f20b 	mul.w	r2, r8, fp
 8024adc:	fb0a f309 	mul.w	r3, sl, r9
 8024ae0:	4413      	add	r3, r2
 8024ae2:	fbaa 4508 	umull	r4, r5, sl, r8
 8024ae6:	442b      	add	r3, r5
 8024ae8:	461d      	mov	r5, r3
 8024aea:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8024aee:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8024af2:	e014      	b.n	8024b1e <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8024af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024af6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024afa:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 8024b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024b04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b08:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024b0c:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 8024b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024b10:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b14:	3330      	adds	r3, #48	; 0x30
 8024b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b1a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8024b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024b22:	2b00      	cmp	r3, #0
 8024b24:	d00d      	beq.n	8024b42 <_np_cmd_nand_erase+0x182>
 8024b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b2a:	2b00      	cmp	r3, #0
 8024b2c:	d109      	bne.n	8024b42 <_np_cmd_nand_erase+0x182>
 8024b2e:	2100      	movs	r1, #0
 8024b30:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024b32:	f7ff fe59 	bl	80247e8 <_np_cmd_read_bad_blocks>
 8024b36:	65b8      	str	r0, [r7, #88]	; 0x58
 8024b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024b3a:	2b00      	cmp	r3, #0
 8024b3c:	d001      	beq.n	8024b42 <_np_cmd_nand_erase+0x182>
        false)))
    {
        return ret;
 8024b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024b40:	e114      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }

    if (addr % block_size)
 8024b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024b44:	2200      	movs	r2, #0
 8024b46:	643b      	str	r3, [r7, #64]	; 0x40
 8024b48:	647a      	str	r2, [r7, #68]	; 0x44
 8024b4a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024b52:	f7fe f829 	bl	8022ba8 <__aeabi_uldivmod>
 8024b56:	4313      	orrs	r3, r2
 8024b58:	d009      	beq.n	8024b6e <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8024b5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024b5c:	9300      	str	r3, [sp, #0]
 8024b5e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024b62:	4851      	ldr	r0, [pc, #324]	; (8024ca8 <_np_cmd_nand_erase+0x2e8>)
 8024b64:	f00d f99c 	bl	8031ea0 <printf>
            " is not aligned to block size 0x%lx\r\n", addr, block_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8024b68:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024b6c:	e0fe      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }

    if (!len)
 8024b6e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024b72:	4313      	orrs	r3, r2
 8024b74:	d105      	bne.n	8024b82 <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("Length is 0\r\n");
 8024b76:	484d      	ldr	r0, [pc, #308]	; (8024cac <_np_cmd_nand_erase+0x2ec>)
 8024b78:	f00d f9ea 	bl	8031f50 <puts>
        return NP_ERR_LEN_INVALID;
 8024b7c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024b80:	e0f4      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }

    if (len % block_size)
 8024b82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024b84:	2200      	movs	r2, #0
 8024b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8024b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8024b8a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8024b8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024b92:	f7fe f809 	bl	8022ba8 <__aeabi_uldivmod>
 8024b96:	4313      	orrs	r3, r2
 8024b98:	d009      	beq.n	8024bae <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 8024b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024b9c:	9300      	str	r3, [sp, #0]
 8024b9e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024ba2:	4843      	ldr	r0, [pc, #268]	; (8024cb0 <_np_cmd_nand_erase+0x2f0>)
 8024ba4:	f00d f97c 	bl	8031ea0 <printf>
            " is not aligned to block size 0x%lx\r\n", len, block_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8024ba8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024bac:	e0de      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }

    if (addr + len > total_size)
 8024bae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024bb2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024bb6:	1884      	adds	r4, r0, r2
 8024bb8:	633c      	str	r4, [r7, #48]	; 0x30
 8024bba:	eb41 0303 	adc.w	r3, r1, r3
 8024bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8024bc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8024bc8:	4621      	mov	r1, r4
 8024bca:	428a      	cmp	r2, r1
 8024bcc:	4629      	mov	r1, r5
 8024bce:	418b      	sbcs	r3, r1
 8024bd0:	d20f      	bcs.n	8024bf2 <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("Erase address exceded 0x%" PRIx64 "+0x%" PRIx64
 8024bd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024bd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024bda:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024bde:	e9cd 2300 	strd	r2, r3, [sp]
 8024be2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024be6:	4833      	ldr	r0, [pc, #204]	; (8024cb4 <_np_cmd_nand_erase+0x2f4>)
 8024be8:	f00d f95a 	bl	8031ea0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024bec:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024bf0:	e0bc      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 8024bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024bf6:	2200      	movs	r2, #0
 8024bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8024bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8024c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024c04:	f7fd ffd0 	bl	8022ba8 <__aeabi_uldivmod>
 8024c08:	4602      	mov	r2, r0
 8024c0a:	460b      	mov	r3, r1
 8024c0c:	4613      	mov	r3, r2
 8024c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 8024c12:	e0a3      	b.n	8024d5c <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 8024c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024c18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024c1c:	4290      	cmp	r0, r2
 8024c1e:	eb71 0303 	sbcs.w	r3, r1, r3
 8024c22:	d30b      	bcc.n	8024c3c <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("Erase address 0x%" PRIx64
 8024c24:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024c28:	e9cd 2300 	strd	r2, r3, [sp]
 8024c2c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024c30:	4821      	ldr	r0, [pc, #132]	; (8024cb8 <_np_cmd_nand_erase+0x2f8>)
 8024c32:	f00d f935 	bl	8031ea0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8024c36:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024c3a:	e097      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
        }

        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 8024c3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d01b      	beq.n	8024c7c <_np_cmd_nand_erase+0x2bc>
 8024c44:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8024c48:	f7ff fbca 	bl	80243e0 <nand_bad_block_table_lookup>
 8024c4c:	4603      	mov	r3, r0
 8024c4e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8024c52:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	d010      	beq.n	8024c7c <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 8024c5a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024c5e:	4817      	ldr	r0, [pc, #92]	; (8024cbc <_np_cmd_nand_erase+0x2fc>)
 8024c60:	f00d f91e 	bl	8031ea0 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 8024c64:	2301      	movs	r3, #1
 8024c66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024c6c:	f7ff fc60 	bl	8024530 <np_send_bad_block_info>
 8024c70:	4603      	mov	r3, r0
 8024c72:	2b00      	cmp	r3, #0
 8024c74:	d002      	beq.n	8024c7c <_np_cmd_nand_erase+0x2bc>
                return -1;
 8024c76:	f04f 33ff 	mov.w	r3, #4294967295
 8024c7a:	e077      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
        }

        if (!is_bad && np_nand_erase(prog, page))
 8024c7c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024c80:	f083 0301 	eor.w	r3, r3, #1
 8024c84:	b2db      	uxtb	r3, r3
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	d01a      	beq.n	8024cc0 <_np_cmd_nand_erase+0x300>
 8024c8a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024c8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024c90:	f7ff fe3a 	bl	8024908 <np_nand_erase>
 8024c94:	4603      	mov	r3, r0
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	d012      	beq.n	8024cc0 <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 8024c9a:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8024c9e:	e065      	b.n	8024d6c <_np_cmd_nand_erase+0x3ac>
 8024ca0:	08036cb4 	.word	0x08036cb4
 8024ca4:	08036ce8 	.word	0x08036ce8
 8024ca8:	08036d10 	.word	0x08036d10
 8024cac:	08036d4c 	.word	0x08036d4c
 8024cb0:	08036d60 	.word	0x08036d60
 8024cb4:	08036d9c 	.word	0x08036d9c
 8024cb8:	08036de8 	.word	0x08036de8
 8024cbc:	08036e24 	.word	0x08036e24

        addr += block_size;
 8024cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024cc2:	2200      	movs	r2, #0
 8024cc4:	623b      	str	r3, [r7, #32]
 8024cc6:	627a      	str	r2, [r7, #36]	; 0x24
 8024cc8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024ccc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8024cd0:	4621      	mov	r1, r4
 8024cd2:	1851      	adds	r1, r2, r1
 8024cd4:	60b9      	str	r1, [r7, #8]
 8024cd6:	4629      	mov	r1, r5
 8024cd8:	414b      	adcs	r3, r1
 8024cda:	60fb      	str	r3, [r7, #12]
 8024cdc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8024ce0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 8024ce4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024cea:	4413      	add	r3, r2
 8024cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* On partial erase do not count bad blocks */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8024cf0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024cf4:	f083 0301 	eor.w	r3, r3, #1
 8024cf8:	b2db      	uxtb	r3, r3
 8024cfa:	2b00      	cmp	r3, #0
 8024cfc:	d10e      	bne.n	8024d1c <_np_cmd_nand_erase+0x35c>
 8024cfe:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024d02:	2b00      	cmp	r3, #0
 8024d04:	d01d      	beq.n	8024d42 <_np_cmd_nand_erase+0x382>
 8024d06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8024d08:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024d0c:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024d10:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8024d14:	4299      	cmp	r1, r3
 8024d16:	bf08      	it	eq
 8024d18:	4290      	cmpeq	r0, r2
 8024d1a:	d112      	bne.n	8024d42 <_np_cmd_nand_erase+0x382>
            len -= block_size;
 8024d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024d1e:	2200      	movs	r2, #0
 8024d20:	61bb      	str	r3, [r7, #24]
 8024d22:	61fa      	str	r2, [r7, #28]
 8024d24:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024d28:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8024d2c:	4621      	mov	r1, r4
 8024d2e:	1a51      	subs	r1, r2, r1
 8024d30:	6039      	str	r1, [r7, #0]
 8024d32:	4629      	mov	r1, r5
 8024d34:	eb63 0301 	sbc.w	r3, r3, r1
 8024d38:	607b      	str	r3, [r7, #4]
 8024d3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8024d3e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        np_send_progress(total_len - len);
 8024d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8024d46:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024d4a:	1a84      	subs	r4, r0, r2
 8024d4c:	613c      	str	r4, [r7, #16]
 8024d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8024d52:	617b      	str	r3, [r7, #20]
 8024d54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024d58:	f7ff fc22 	bl	80245a0 <np_send_progress>
    while (len)
 8024d5c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024d60:	4313      	orrs	r3, r2
 8024d62:	f47f af57 	bne.w	8024c14 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8024d66:	f7ff fba3 	bl	80244b0 <np_send_ok_status>
 8024d6a:	4603      	mov	r3, r0
}
 8024d6c:	4618      	mov	r0, r3
 8024d6e:	37a0      	adds	r7, #160	; 0xa0
 8024d70:	46bd      	mov	sp, r7
 8024d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024d76:	bf00      	nop

08024d78 <np_cmd_nand_erase>:

static int np_cmd_nand_erase(np_prog_t *prog)
{
 8024d78:	b580      	push	{r7, lr}
 8024d7a:	b084      	sub	sp, #16
 8024d7c:	af00      	add	r7, sp, #0
 8024d7e:	6078      	str	r0, [r7, #4]
    int ret;

    led_wr_set(true);
 8024d80:	2001      	movs	r0, #1
 8024d82:	f7ff f9ed 	bl	8024160 <led_wr_set>
    ret = _np_cmd_nand_erase(prog);
 8024d86:	6878      	ldr	r0, [r7, #4]
 8024d88:	f7ff fe1a 	bl	80249c0 <_np_cmd_nand_erase>
 8024d8c:	60f8      	str	r0, [r7, #12]
    led_wr_set(false);
 8024d8e:	2000      	movs	r0, #0
 8024d90:	f7ff f9e6 	bl	8024160 <led_wr_set>

    return ret;
 8024d94:	68fb      	ldr	r3, [r7, #12]
}
 8024d96:	4618      	mov	r0, r3
 8024d98:	3710      	adds	r7, #16
 8024d9a:	46bd      	mov	sp, r7
 8024d9c:	bd80      	pop	{r7, pc}
	...

08024da0 <np_send_write_ack>:

static int np_send_write_ack(uint64_t bytes_ack)
{
 8024da0:	b580      	push	{r7, lr}
 8024da2:	b086      	sub	sp, #24
 8024da4:	af00      	add	r7, sp, #0
 8024da6:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8024daa:	4b0f      	ldr	r3, [pc, #60]	; (8024de8 <np_send_write_ack+0x48>)
 8024dac:	881b      	ldrh	r3, [r3, #0]
 8024dae:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8024db0:	8abb      	ldrh	r3, [r7, #20]
 8024db2:	813b      	strh	r3, [r7, #8]
 8024db4:	f107 0308 	add.w	r3, r7, #8
 8024db8:	3302      	adds	r3, #2
 8024dba:	683a      	ldr	r2, [r7, #0]
 8024dbc:	601a      	str	r2, [r3, #0]
 8024dbe:	687a      	ldr	r2, [r7, #4]
 8024dc0:	605a      	str	r2, [r3, #4]

    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 8024dc2:	4b0a      	ldr	r3, [pc, #40]	; (8024dec <np_send_write_ack+0x4c>)
 8024dc4:	681b      	ldr	r3, [r3, #0]
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	f107 0208 	add.w	r2, r7, #8
 8024dcc:	210a      	movs	r1, #10
 8024dce:	4610      	mov	r0, r2
 8024dd0:	4798      	blx	r3
 8024dd2:	4603      	mov	r3, r0
 8024dd4:	2b00      	cmp	r3, #0
 8024dd6:	d002      	beq.n	8024dde <np_send_write_ack+0x3e>
        return -1;
 8024dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8024ddc:	e000      	b.n	8024de0 <np_send_write_ack+0x40>

    return 0;
 8024dde:	2300      	movs	r3, #0
}
 8024de0:	4618      	mov	r0, r3
 8024de2:	3718      	adds	r7, #24
 8024de4:	46bd      	mov	sp, r7
 8024de6:	bd80      	pop	{r7, pc}
 8024de8:	08036e44 	.word	0x08036e44
 8024dec:	20001310 	.word	0x20001310

08024df0 <np_cmd_nand_write_start>:

static int np_cmd_nand_write_start(np_prog_t *prog)
{
 8024df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024df4:	b09a      	sub	sp, #104	; 0x68
 8024df6:	af04      	add	r7, sp, #16
 8024df8:	62f8      	str	r0, [r7, #44]	; 0x2c
    int ret;
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8024dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024dfc:	685b      	ldr	r3, [r3, #4]
 8024dfe:	2b11      	cmp	r3, #17
 8024e00:	d808      	bhi.n	8024e14 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 8024e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e04:	685b      	ldr	r3, [r3, #4]
 8024e06:	4619      	mov	r1, r3
 8024e08:	489d      	ldr	r0, [pc, #628]	; (8025080 <np_cmd_nand_write_start+0x290>)
 8024e0a:	f00d f849 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024e0e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024e12:	e184      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8024e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e16:	681b      	ldr	r3, [r3, #0]
 8024e18:	657b      	str	r3, [r7, #84]	; 0x54

    if (hal[prog->hal]->enable_hw_ecc)
 8024e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e20:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024e24:	461a      	mov	r2, r3
 8024e26:	4b97      	ldr	r3, [pc, #604]	; (8025084 <np_cmd_nand_write_start+0x294>)
 8024e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e2e:	2b00      	cmp	r3, #0
 8024e30:	d015      	beq.n	8024e5e <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 8024e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e38:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024e3c:	461a      	mov	r2, r3
 8024e3e:	4b91      	ldr	r3, [pc, #580]	; (8025084 <np_cmd_nand_write_start+0x294>)
 8024e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e48:	7c5b      	ldrb	r3, [r3, #17]
 8024e4a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8024e4e:	b2db      	uxtb	r3, r3
 8024e50:	2b00      	cmp	r3, #0
 8024e52:	bf14      	ite	ne
 8024e54:	2301      	movne	r3, #1
 8024e56:	2300      	moveq	r3, #0
 8024e58:	b2db      	uxtb	r3, r3
 8024e5a:	4618      	mov	r0, r3
 8024e5c:	4790      	blx	r2

    addr = write_start_cmd->addr;
 8024e5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024e60:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024e64:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024e68:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8024e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024e6e:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024e72:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024e76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n",
 8024e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8024e82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024e86:	4880      	ldr	r0, [pc, #512]	; (8025088 <np_cmd_nand_write_start+0x298>)
 8024e88:	f00d f80a 	bl	8031ea0 <printf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 8024e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e8e:	7c5b      	ldrb	r3, [r3, #17]
 8024e90:	f003 0302 	and.w	r3, r3, #2
 8024e94:	b2db      	uxtb	r3, r3
 8024e96:	2b00      	cmp	r3, #0
 8024e98:	d051      	beq.n	8024f3e <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e9c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ea0:	3330      	adds	r3, #48	; 0x30
 8024ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ea8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024eac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024eb0:	2200      	movs	r2, #0
 8024eb2:	623b      	str	r3, [r7, #32]
 8024eb4:	627a      	str	r2, [r7, #36]	; 0x24
 8024eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024eba:	f7fd fe75 	bl	8022ba8 <__aeabi_uldivmod>
 8024ebe:	4602      	mov	r2, r0
 8024ec0:	460b      	mov	r3, r1
 8024ec2:	4613      	mov	r3, r2
 8024ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 8024ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ec8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ecc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ed2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ed6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8024ede:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 8024ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ee2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ee6:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 8024eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ef0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 8024ef4:	441a      	add	r2, r3
 8024ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ef8:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 8024efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024efc:	6a1a      	ldr	r2, [r3, #32]
 8024efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024f00:	fb03 f202 	mul.w	r2, r3, r2
 8024f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f06:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 8024f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024f0a:	2200      	movs	r2, #0
 8024f0c:	469a      	mov	sl, r3
 8024f0e:	4693      	mov	fp, r2
 8024f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f12:	6a1b      	ldr	r3, [r3, #32]
 8024f14:	2200      	movs	r2, #0
 8024f16:	61bb      	str	r3, [r7, #24]
 8024f18:	61fa      	str	r2, [r7, #28]
 8024f1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8024f1e:	4603      	mov	r3, r0
 8024f20:	fb03 f20b 	mul.w	r2, r3, fp
 8024f24:	460b      	mov	r3, r1
 8024f26:	fb0a f303 	mul.w	r3, sl, r3
 8024f2a:	4413      	add	r3, r2
 8024f2c:	4602      	mov	r2, r0
 8024f2e:	fbaa 4502 	umull	r4, r5, sl, r2
 8024f32:	442b      	add	r3, r5
 8024f34:	461d      	mov	r5, r3
 8024f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f38:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8024f3c:	e016      	b.n	8024f6c <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 8024f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f44:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f4a:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 8024f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f52:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f58:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8024f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f5c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024f60:	3330      	adds	r3, #48	; 0x30
 8024f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024f68:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    if (addr + len > prog->total_size)
 8024f6c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024f70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024f74:	eb10 0802 	adds.w	r8, r0, r2
 8024f78:	eb41 0903 	adc.w	r9, r1, r3
 8024f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024f82:	4542      	cmp	r2, r8
 8024f84:	eb73 0309 	sbcs.w	r3, r3, r9
 8024f88:	d210      	bcs.n	8024fac <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 8024f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f8c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024f90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024f94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024f98:	e9cd 2300 	strd	r2, r3, [sp]
 8024f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024fa0:	483a      	ldr	r0, [pc, #232]	; (802508c <np_cmd_nand_write_start+0x29c>)
 8024fa2:	f00c ff7d 	bl	8031ea0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024fa6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024faa:	e0b8      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    if (addr % prog->page_size)
 8024fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fae:	6a1b      	ldr	r3, [r3, #32]
 8024fb0:	2200      	movs	r2, #0
 8024fb2:	613b      	str	r3, [r7, #16]
 8024fb4:	617a      	str	r2, [r7, #20]
 8024fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024fba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024fbe:	f7fd fdf3 	bl	8022ba8 <__aeabi_uldivmod>
 8024fc2:	4313      	orrs	r3, r2
 8024fc4:	d00a      	beq.n	8024fdc <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 8024fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024fc8:	6a1b      	ldr	r3, [r3, #32]
 8024fca:	9300      	str	r3, [sp, #0]
 8024fcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024fd0:	482f      	ldr	r0, [pc, #188]	; (8025090 <np_cmd_nand_write_start+0x2a0>)
 8024fd2:	f00c ff65 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8024fd6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024fda:	e0a0      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    if (!len)
 8024fdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024fe0:	4313      	orrs	r3, r2
 8024fe2:	d105      	bne.n	8024ff0 <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("Length is 0\r\n");
 8024fe4:	482b      	ldr	r0, [pc, #172]	; (8025094 <np_cmd_nand_write_start+0x2a4>)
 8024fe6:	f00c ffb3 	bl	8031f50 <puts>
        return NP_ERR_LEN_INVALID;
 8024fea:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024fee:	e096      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    if (len % prog->page_size)
 8024ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ff2:	6a1b      	ldr	r3, [r3, #32]
 8024ff4:	2200      	movs	r2, #0
 8024ff6:	60bb      	str	r3, [r7, #8]
 8024ff8:	60fa      	str	r2, [r7, #12]
 8024ffa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8024ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025002:	f7fd fdd1 	bl	8022ba8 <__aeabi_uldivmod>
 8025006:	4313      	orrs	r3, r2
 8025008:	d00a      	beq.n	8025020 <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 802500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802500c:	6a1b      	ldr	r3, [r3, #32]
 802500e:	9300      	str	r3, [sp, #0]
 8025010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8025014:	4820      	ldr	r0, [pc, #128]	; (8025098 <np_cmd_nand_write_start+0x2a8>)
 8025016:	f00c ff43 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 802501a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802501e:	e07e      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    prog->skip_bb = write_start_cmd->flags.skip_bb;
 8025020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025022:	7c5b      	ldrb	r3, [r3, #17]
 8025024:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8025028:	b2db      	uxtb	r3, r3
 802502a:	461a      	mov	r2, r3
 802502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802502e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025032:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8025036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025038:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802503c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8025040:	2b00      	cmp	r3, #0
 8025042:	d00d      	beq.n	8025060 <np_cmd_nand_write_start+0x270>
 8025044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025048:	2b00      	cmp	r3, #0
 802504a:	d109      	bne.n	8025060 <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 802504c:	2100      	movs	r1, #0
 802504e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025050:	f7ff fbca 	bl	80247e8 <_np_cmd_read_bad_blocks>
 8025054:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8025056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025058:	2b00      	cmp	r3, #0
 802505a:	d001      	beq.n	8025060 <np_cmd_nand_write_start+0x270>
    {
        return ret;
 802505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802505e:	e05e      	b.n	802511e <np_cmd_nand_write_start+0x32e>
    }

    if (prog->page_size > sizeof(prog->page.buf))
 8025060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025062:	6a1b      	ldr	r3, [r3, #32]
 8025064:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8025068:	d91a      	bls.n	80250a0 <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("Page size 0x%lx"
 802506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802506c:	6a1b      	ldr	r3, [r3, #32]
 802506e:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 8025072:	4619      	mov	r1, r3
 8025074:	4809      	ldr	r0, [pc, #36]	; (802509c <np_cmd_nand_write_start+0x2ac>)
 8025076:	f00c ff13 	bl	8031ea0 <printf>
            " is more then buffer size 0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
        return NP_ERR_BUF_OVERFLOW;
 802507a:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 802507e:	e04e      	b.n	802511e <np_cmd_nand_write_start+0x32e>
 8025080:	08036e48 	.word	0x08036e48
 8025084:	20000040 	.word	0x20000040
 8025088:	08036e84 	.word	0x08036e84
 802508c:	08036eac 	.word	0x08036eac
 8025090:	08036ef0 	.word	0x08036ef0
 8025094:	08036d4c 	.word	0x08036d4c
 8025098:	08036f2c 	.word	0x08036f2c
 802509c:	08036f68 	.word	0x08036f68
    }

    prog->addr = addr;
 80250a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80250a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80250a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80250aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80250ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80250b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80250b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250b6:	2201      	movs	r2, #1
 80250b8:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80250ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250bc:	6a1b      	ldr	r3, [r3, #32]
 80250be:	2200      	movs	r2, #0
 80250c0:	603b      	str	r3, [r7, #0]
 80250c2:	607a      	str	r2, [r7, #4]
 80250c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80250c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80250cc:	f7fd fd6c 	bl	8022ba8 <__aeabi_uldivmod>
 80250d0:	4602      	mov	r2, r0
 80250d2:	460b      	mov	r3, r1
 80250d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250da:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80250de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250e4:	461a      	mov	r2, r3
 80250e6:	2300      	movs	r3, #0
 80250e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80250ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80250ee:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80250f2:	3310      	adds	r3, #16
 80250f4:	4619      	mov	r1, r3
 80250f6:	f04f 0200 	mov.w	r2, #0
 80250fa:	f04f 0300 	mov.w	r3, #0
 80250fe:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 8025102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025104:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025108:	3310      	adds	r3, #16
 802510a:	4619      	mov	r1, r3
 802510c:	f04f 0200 	mov.w	r2, #0
 8025110:	f04f 0300 	mov.w	r3, #0
 8025114:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8025118:	f7ff f9ca 	bl	80244b0 <np_send_ok_status>
 802511c:	4603      	mov	r3, r0
}
 802511e:	4618      	mov	r0, r3
 8025120:	3758      	adds	r7, #88	; 0x58
 8025122:	46bd      	mov	sp, r7
 8025124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08025128 <np_nand_handle_status>:

static int np_nand_handle_status(np_prog_t *prog)
{
 8025128:	b580      	push	{r7, lr}
 802512a:	b082      	sub	sp, #8
 802512c:	af00      	add	r7, sp, #0
 802512e:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 8025130:	687b      	ldr	r3, [r7, #4]
 8025132:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025136:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802513a:	461a      	mov	r2, r3
 802513c:	4b37      	ldr	r3, [pc, #220]	; (802521c <np_nand_handle_status+0xf4>)
 802513e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025142:	69db      	ldr	r3, [r3, #28]
 8025144:	4798      	blx	r3
 8025146:	4603      	mov	r3, r0
 8025148:	2b02      	cmp	r3, #2
 802514a:	d006      	beq.n	802515a <np_nand_handle_status+0x32>
 802514c:	2b02      	cmp	r3, #2
 802514e:	d84b      	bhi.n	80251e8 <np_nand_handle_status+0xc0>
 8025150:	2b00      	cmp	r3, #0
 8025152:	d010      	beq.n	8025176 <np_nand_handle_status+0x4e>
 8025154:	2b01      	cmp	r3, #1
 8025156:	d01d      	beq.n	8025194 <np_nand_handle_status+0x6c>
 8025158:	e046      	b.n	80251e8 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 802515a:	687b      	ldr	r3, [r7, #4]
 802515c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025164:	2300      	movs	r3, #0
 8025166:	f7ff f9e3 	bl	8024530 <np_send_bad_block_info>
 802516a:	4603      	mov	r3, r0
 802516c:	2b00      	cmp	r3, #0
 802516e:	d002      	beq.n	8025176 <np_nand_handle_status+0x4e>
            return -1;
 8025170:	f04f 33ff 	mov.w	r3, #4294967295
 8025174:	e04e      	b.n	8025214 <np_nand_handle_status+0xec>
        /* fall through */
    case FLASH_STATUS_READY:
        prog->nand_wr_in_progress = 0;
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802517c:	461a      	mov	r2, r3
 802517e:	2300      	movs	r3, #0
 8025180:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8025184:	687b      	ldr	r3, [r7, #4]
 8025186:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802518a:	461a      	mov	r2, r3
 802518c:	2300      	movs	r3, #0
 802518e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 8025192:	e03e      	b.n	8025212 <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 8025194:	687b      	ldr	r3, [r7, #4]
 8025196:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802519a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802519e:	3301      	adds	r3, #1
 80251a0:	687a      	ldr	r2, [r7, #4]
 80251a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80251a6:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251b0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80251b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80251b8:	d12a      	bne.n	8025210 <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", prog->addr);
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80251c0:	4817      	ldr	r0, [pc, #92]	; (8025220 <np_nand_handle_status+0xf8>)
 80251c2:	f00c fe6d 	bl	8031ea0 <printf>
            prog->nand_wr_in_progress = 0;
 80251c6:	687b      	ldr	r3, [r7, #4]
 80251c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251cc:	461a      	mov	r2, r3
 80251ce:	2300      	movs	r3, #0
 80251d0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251da:	461a      	mov	r2, r3
 80251dc:	2300      	movs	r3, #0
 80251de:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 80251e2:	f04f 33ff 	mov.w	r3, #4294967295
 80251e6:	e015      	b.n	8025214 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 80251e8:	480e      	ldr	r0, [pc, #56]	; (8025224 <np_nand_handle_status+0xfc>)
 80251ea:	f00c feb1 	bl	8031f50 <puts>
        prog->nand_wr_in_progress = 0;
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251f4:	461a      	mov	r2, r3
 80251f6:	2300      	movs	r3, #0
 80251f8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025202:	461a      	mov	r2, r3
 8025204:	2300      	movs	r3, #0
 8025206:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 802520a:	f04f 33ff 	mov.w	r3, #4294967295
 802520e:	e001      	b.n	8025214 <np_nand_handle_status+0xec>
        break;
 8025210:	bf00      	nop
    }

    return 0;
 8025212:	2300      	movs	r3, #0
}
 8025214:	4618      	mov	r0, r3
 8025216:	3708      	adds	r7, #8
 8025218:	46bd      	mov	sp, r7
 802521a:	bd80      	pop	{r7, pc}
 802521c:	20000040 	.word	0x20000040
 8025220:	08036fa0 	.word	0x08036fa0
 8025224:	08036c58 	.word	0x08036c58

08025228 <np_nand_write>:

static int np_nand_write(np_prog_t *prog)
{   
 8025228:	b580      	push	{r7, lr}
 802522a:	b084      	sub	sp, #16
 802522c:	af02      	add	r7, sp, #8
 802522e:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8025230:	687b      	ldr	r3, [r7, #4]
 8025232:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025236:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802523a:	2b00      	cmp	r3, #0
 802523c:	d012      	beq.n	8025264 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("Wait for previous NAND write\r\n");
 802523e:	481e      	ldr	r0, [pc, #120]	; (80252b8 <np_nand_write+0x90>)
 8025240:	f00c fe86 	bl	8031f50 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8025244:	6878      	ldr	r0, [r7, #4]
 8025246:	f7ff ff6f 	bl	8025128 <np_nand_handle_status>
 802524a:	4603      	mov	r3, r0
 802524c:	2b00      	cmp	r3, #0
 802524e:	d002      	beq.n	8025256 <np_nand_write+0x2e>
                return -1;
 8025250:	f04f 33ff 	mov.w	r3, #4294967295
 8025254:	e02c      	b.n	80252b0 <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802525c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8025260:	2b00      	cmp	r3, #0
 8025262:	d1ef      	bne.n	8025244 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND write at 0x%" PRIx64 " %lu bytes\r\n", prog->addr,
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802526a:	6879      	ldr	r1, [r7, #4]
 802526c:	6a09      	ldr	r1, [r1, #32]
 802526e:	9100      	str	r1, [sp, #0]
 8025270:	4812      	ldr	r0, [pc, #72]	; (80252bc <np_nand_write+0x94>)
 8025272:	f00c fe15 	bl	8031ea0 <printf>
        prog->page_size);

    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802527c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025280:	461a      	mov	r2, r3
 8025282:	4b0f      	ldr	r3, [pc, #60]	; (80252c0 <np_nand_write+0x98>)
 8025284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025288:	699b      	ldr	r3, [r3, #24]
 802528a:	687a      	ldr	r2, [r7, #4]
 802528c:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8025290:	687a      	ldr	r2, [r7, #4]
 8025292:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025296:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 802529a:	687a      	ldr	r2, [r7, #4]
 802529c:	6a12      	ldr	r2, [r2, #32]
 802529e:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252a6:	461a      	mov	r2, r3
 80252a8:	2301      	movs	r3, #1
 80252aa:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 80252ae:	2300      	movs	r3, #0
}
 80252b0:	4618      	mov	r0, r3
 80252b2:	3708      	adds	r7, #8
 80252b4:	46bd      	mov	sp, r7
 80252b6:	bd80      	pop	{r7, pc}
 80252b8:	08036fc8 	.word	0x08036fc8
 80252bc:	08036fe8 	.word	0x08036fe8
 80252c0:	20000040 	.word	0x20000040

080252c4 <np_cmd_nand_write_data>:

static int np_cmd_nand_write_data(np_prog_t *prog)
{
 80252c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80252c8:	b092      	sub	sp, #72	; 0x48
 80252ca:	af02      	add	r7, sp, #8
 80252cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80252ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252d0:	685b      	ldr	r3, [r3, #4]
 80252d2:	2b01      	cmp	r3, #1
 80252d4:	d808      	bhi.n	80252e8 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 80252d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252d8:	685b      	ldr	r3, [r3, #4]
 80252da:	4619      	mov	r1, r3
 80252dc:	486e      	ldr	r0, [pc, #440]	; (8025498 <np_cmd_nand_write_data+0x1d4>)
 80252de:	f00c fddf 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80252e2:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80252e6:	e1a1      	b.n	802562c <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80252e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ea:	681b      	ldr	r3, [r3, #0]
 80252ec:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 80252ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80252f0:	785b      	ldrb	r3, [r3, #1]
 80252f2:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80252f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80252f6:	3302      	adds	r3, #2
 80252f8:	2b40      	cmp	r3, #64	; 0x40
 80252fa:	d906      	bls.n	802530a <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("Data size is wrong 0x%lx\r\n", len);
 80252fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80252fe:	4867      	ldr	r0, [pc, #412]	; (802549c <np_cmd_nand_write_data+0x1d8>)
 8025300:	f00c fdce 	bl	8031ea0 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 8025304:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8025308:	e190      	b.n	802562c <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 802530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802530c:	1c9a      	adds	r2, r3, #2
 802530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025310:	685b      	ldr	r3, [r3, #4]
 8025312:	429a      	cmp	r2, r3
 8025314:	d00a      	beq.n	802532c <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%lx\r\n",
 8025316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025318:	6859      	ldr	r1, [r3, #4]
 802531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802531c:	3302      	adds	r3, #2
 802531e:	461a      	mov	r2, r3
 8025320:	485f      	ldr	r0, [pc, #380]	; (80254a0 <np_cmd_nand_write_data+0x1dc>)
 8025322:	f00c fdbd 	bl	8031ea0 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8025326:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 802532a:	e17f      	b.n	802562c <np_cmd_nand_write_data+0x368>
    }

    if (!prog->addr_is_set)
 802532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025330:	2b00      	cmp	r3, #0
 8025332:	d105      	bne.n	8025340 <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("Write address is not set\r\n");
 8025334:	485b      	ldr	r0, [pc, #364]	; (80254a4 <np_cmd_nand_write_data+0x1e0>)
 8025336:	f00c fe0b 	bl	8031f50 <puts>
        return NP_ERR_ADDR_INVALID;
 802533a:	f06f 0364 	mvn.w	r3, #100	; 0x64
 802533e:	e175      	b.n	802562c <np_cmd_nand_write_data+0x368>
    }

    if (prog->page.offset + len > prog->page_size)
 8025340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025342:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025346:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802534c:	441a      	add	r2, r3
 802534e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025350:	6a1b      	ldr	r3, [r3, #32]
 8025352:	429a      	cmp	r2, r3
 8025354:	d909      	bls.n	802536a <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8025356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025358:	6a1a      	ldr	r2, [r3, #32]
 802535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802535c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025364:	1ad3      	subs	r3, r2, r3
 8025366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8025368:	e001      	b.n	802536e <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 802536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802536c:	63fb      	str	r3, [r7, #60]	; 0x3c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 802536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025370:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8025374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802537a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802537e:	18d0      	adds	r0, r2, r3
 8025380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025382:	3302      	adds	r3, #2
 8025384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025386:	4619      	mov	r1, r3
 8025388:	f00c feaa 	bl	80320e0 <memcpy>
    prog->page.offset += write_len;
 802538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802538e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025392:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025398:	441a      	add	r2, r3
 802539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802539c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80253a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 80253a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80253aa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80253ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253b0:	6a1b      	ldr	r3, [r3, #32]
 80253b2:	429a      	cmp	r2, r3
 80253b4:	f040 80a2 	bne.w	80254fc <np_cmd_nand_write_data+0x238>
    {
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80253b8:	e038      	b.n	802542c <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", prog->addr);
 80253ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80253c0:	4839      	ldr	r0, [pc, #228]	; (80254a8 <np_cmd_nand_write_data+0x1e4>)
 80253c2:	f00c fd6d 	bl	8031ea0 <printf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 80253c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80253cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80253d0:	2301      	movs	r3, #1
 80253d2:	f7ff f8ad 	bl	8024530 <np_send_bad_block_info>
 80253d6:	4603      	mov	r3, r0
 80253d8:	2b00      	cmp	r3, #0
 80253da:	d002      	beq.n	80253e2 <np_cmd_nand_write_data+0x11e>
                return -1;
 80253dc:	f04f 33ff 	mov.w	r3, #4294967295
 80253e0:	e124      	b.n	802562c <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 80253e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80253e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80253ec:	2200      	movs	r2, #0
 80253ee:	623b      	str	r3, [r7, #32]
 80253f0:	627a      	str	r2, [r7, #36]	; 0x24
 80253f2:	6a3b      	ldr	r3, [r7, #32]
 80253f4:	18c3      	adds	r3, r0, r3
 80253f6:	613b      	str	r3, [r7, #16]
 80253f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253fa:	eb41 0303 	adc.w	r3, r1, r3
 80253fe:	617b      	str	r3, [r7, #20]
 8025400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025402:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8025406:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 802540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802540c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025410:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8025414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802541a:	6a1b      	ldr	r3, [r3, #32]
 802541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8025420:	18ca      	adds	r2, r1, r3
 8025422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025424:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025428:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 802542c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802542e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025432:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8025436:	2b00      	cmp	r3, #0
 8025438:	d00a      	beq.n	8025450 <np_cmd_nand_write_data+0x18c>
 802543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802543c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025440:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8025444:	4618      	mov	r0, r3
 8025446:	f7fe ffcb 	bl	80243e0 <nand_bad_block_table_lookup>
 802544a:	4603      	mov	r3, r0
 802544c:	2b00      	cmp	r3, #0
 802544e:	d1b4      	bne.n	80253ba <np_cmd_nand_write_data+0xf6>
        }

        if (prog->addr >= prog->total_size)
 8025450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025452:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025458:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802545c:	4290      	cmp	r0, r2
 802545e:	eb71 0303 	sbcs.w	r3, r1, r3
 8025462:	d30f      	bcc.n	8025484 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 8025464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025466:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 802546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802546c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025470:	e9cd 2300 	strd	r2, r3, [sp]
 8025474:	4602      	mov	r2, r0
 8025476:	460b      	mov	r3, r1
 8025478:	480c      	ldr	r0, [pc, #48]	; (80254ac <np_cmd_nand_write_data+0x1e8>)
 802547a:	f00c fd11 	bl	8031ea0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", prog->addr,
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 802547e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025482:	e0d3      	b.n	802562c <np_cmd_nand_write_data+0x368>
        }

        if (np_nand_write(prog))
 8025484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025486:	f7ff fecf 	bl	8025228 <np_nand_write>
 802548a:	4603      	mov	r3, r0
 802548c:	2b00      	cmp	r3, #0
 802548e:	d00f      	beq.n	80254b0 <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8025490:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8025494:	e0ca      	b.n	802562c <np_cmd_nand_write_data+0x368>
 8025496:	bf00      	nop
 8025498:	0803700c 	.word	0x0803700c
 802549c:	08037044 	.word	0x08037044
 80254a0:	08037068 	.word	0x08037068
 80254a4:	080370a0 	.word	0x080370a0
 80254a8:	08036e24 	.word	0x08036e24
 80254ac:	080370c4 	.word	0x080370c4

        prog->addr += prog->page_size;
 80254b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80254b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254b8:	6a1b      	ldr	r3, [r3, #32]
 80254ba:	2200      	movs	r2, #0
 80254bc:	61bb      	str	r3, [r7, #24]
 80254be:	61fa      	str	r2, [r7, #28]
 80254c0:	69bb      	ldr	r3, [r7, #24]
 80254c2:	18c3      	adds	r3, r0, r3
 80254c4:	60bb      	str	r3, [r7, #8]
 80254c6:	69fb      	ldr	r3, [r7, #28]
 80254c8:	eb41 0303 	adc.w	r3, r1, r3
 80254cc:	60fb      	str	r3, [r7, #12]
 80254ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80254d4:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 80254d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254de:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80254e2:	3301      	adds	r3, #1
 80254e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80254e6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80254ea:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 80254ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254f4:	461a      	mov	r2, r3
 80254f6:	2300      	movs	r3, #0
 80254f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 80254fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80254fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025500:	1ad3      	subs	r3, r2, r3
 8025502:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8025504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025506:	2b00      	cmp	r3, #0
 8025508:	d016      	beq.n	8025538 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 802550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802550c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8025510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025512:	1c9a      	adds	r2, r3, #2
 8025514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025516:	4413      	add	r3, r2
 8025518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802551a:	4619      	mov	r1, r3
 802551c:	f00c fde0 	bl	80320e0 <memcpy>
        prog->page.offset += bytes_left;
 8025520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025522:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025526:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802552c:	4413      	add	r3, r2
 802552e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025530:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025534:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8025538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802553a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802553e:	3310      	adds	r3, #16
 8025540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025544:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025546:	2000      	movs	r0, #0
 8025548:	468a      	mov	sl, r1
 802554a:	4683      	mov	fp, r0
 802554c:	eb12 010a 	adds.w	r1, r2, sl
 8025550:	6039      	str	r1, [r7, #0]
 8025552:	eb43 030b 	adc.w	r3, r3, fp
 8025556:	607b      	str	r3, [r7, #4]
 8025558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802555a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802555e:	3310      	adds	r3, #16
 8025560:	e9d7 1200 	ldrd	r1, r2, [r7]
 8025564:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802556a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802556e:	3310      	adds	r3, #16
 8025570:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025576:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802557a:	3310      	adds	r3, #16
 802557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025580:	1a84      	subs	r4, r0, r2
 8025582:	eb61 0503 	sbc.w	r5, r1, r3
 8025586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025588:	6a1b      	ldr	r3, [r3, #32]
 802558a:	2200      	movs	r2, #0
 802558c:	4698      	mov	r8, r3
 802558e:	4691      	mov	r9, r2
 8025590:	4544      	cmp	r4, r8
 8025592:	eb75 0309 	sbcs.w	r3, r5, r9
 8025596:	d20c      	bcs.n	80255b2 <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8025598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802559a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802559e:	3310      	adds	r3, #16
 80255a0:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80255a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 80255aa:	4299      	cmp	r1, r3
 80255ac:	bf08      	it	eq
 80255ae:	4290      	cmpeq	r0, r2
 80255b0:	d11b      	bne.n	80255ea <np_cmd_nand_write_data+0x326>
    {
        if (np_send_write_ack(prog->bytes_written))
 80255b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255b4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80255b8:	3310      	adds	r3, #16
 80255ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80255be:	4610      	mov	r0, r2
 80255c0:	4619      	mov	r1, r3
 80255c2:	f7ff fbed 	bl	8024da0 <np_send_write_ack>
 80255c6:	4603      	mov	r3, r0
 80255c8:	2b00      	cmp	r3, #0
 80255ca:	d002      	beq.n	80255d2 <np_cmd_nand_write_data+0x30e>
            return -1;
 80255cc:	f04f 33ff 	mov.w	r3, #4294967295
 80255d0:	e02c      	b.n	802562c <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 80255d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255d4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80255d8:	3310      	adds	r3, #16
 80255da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80255de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255e0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80255e4:	3310      	adds	r3, #16
 80255e6:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 80255ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80255ec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80255f0:	3310      	adds	r3, #16
 80255f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80255f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80255f8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80255fc:	4290      	cmp	r0, r2
 80255fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8025602:	d212      	bcs.n	802562a <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 8025604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025606:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802560a:	3310      	adds	r3, #16
 802560c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8025616:	e9cd 2300 	strd	r2, r3, [sp]
 802561a:	4602      	mov	r2, r0
 802561c:	460b      	mov	r3, r1
 802561e:	4806      	ldr	r0, [pc, #24]	; (8025638 <np_cmd_nand_write_data+0x374>)
 8025620:	f00c fc3e 	bl	8031ea0 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8025624:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8025628:	e000      	b.n	802562c <np_cmd_nand_write_data+0x368>
    }

    return 0;
 802562a:	2300      	movs	r3, #0
}
 802562c:	4618      	mov	r0, r3
 802562e:	3740      	adds	r7, #64	; 0x40
 8025630:	46bd      	mov	sp, r7
 8025632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025636:	bf00      	nop
 8025638:	08037100 	.word	0x08037100

0802563c <np_cmd_nand_write_end>:

static int np_cmd_nand_write_end(np_prog_t *prog)
{
 802563c:	b580      	push	{r7, lr}
 802563e:	b082      	sub	sp, #8
 8025640:	af00      	add	r7, sp, #0
 8025642:	6078      	str	r0, [r7, #4]
    prog->addr_is_set = 0;
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	2200      	movs	r2, #0
 8025648:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 802564a:	687b      	ldr	r3, [r7, #4]
 802564c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025650:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025654:	2b00      	cmp	r3, #0
 8025656:	d00b      	beq.n	8025670 <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802565e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025662:	4619      	mov	r1, r3
 8025664:	4806      	ldr	r0, [pc, #24]	; (8025680 <np_cmd_nand_write_end+0x44>)
 8025666:	f00c fc1b 	bl	8031ea0 <printf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 802566a:	f06f 0366 	mvn.w	r3, #102	; 0x66
 802566e:	e002      	b.n	8025676 <np_cmd_nand_write_end+0x3a>
    }

    return np_send_ok_status();
 8025670:	f7fe ff1e 	bl	80244b0 <np_send_ok_status>
 8025674:	4603      	mov	r3, r0
}
 8025676:	4618      	mov	r0, r3
 8025678:	3708      	adds	r7, #8
 802567a:	46bd      	mov	sp, r7
 802567c:	bd80      	pop	{r7, pc}
 802567e:	bf00      	nop
 8025680:	08037140 	.word	0x08037140

08025684 <np_cmd_nand_write>:

static int np_cmd_nand_write(np_prog_t *prog)
{
 8025684:	b580      	push	{r7, lr}
 8025686:	b084      	sub	sp, #16
 8025688:	af00      	add	r7, sp, #0
 802568a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 802568c:	687b      	ldr	r3, [r7, #4]
 802568e:	681b      	ldr	r3, [r3, #0]
 8025690:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8025692:	2300      	movs	r3, #0
 8025694:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8025696:	68bb      	ldr	r3, [r7, #8]
 8025698:	781b      	ldrb	r3, [r3, #0]
 802569a:	2b05      	cmp	r3, #5
 802569c:	d013      	beq.n	80256c6 <np_cmd_nand_write+0x42>
 802569e:	2b05      	cmp	r3, #5
 80256a0:	dc19      	bgt.n	80256d6 <np_cmd_nand_write+0x52>
 80256a2:	2b03      	cmp	r3, #3
 80256a4:	d002      	beq.n	80256ac <np_cmd_nand_write+0x28>
 80256a6:	2b04      	cmp	r3, #4
 80256a8:	d008      	beq.n	80256bc <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 80256aa:	e014      	b.n	80256d6 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 80256ac:	2001      	movs	r0, #1
 80256ae:	f7fe fd57 	bl	8024160 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 80256b2:	6878      	ldr	r0, [r7, #4]
 80256b4:	f7ff fb9c 	bl	8024df0 <np_cmd_nand_write_start>
 80256b8:	60f8      	str	r0, [r7, #12]
        break;
 80256ba:	e00d      	b.n	80256d8 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 80256bc:	6878      	ldr	r0, [r7, #4]
 80256be:	f7ff fe01 	bl	80252c4 <np_cmd_nand_write_data>
 80256c2:	60f8      	str	r0, [r7, #12]
        break;
 80256c4:	e008      	b.n	80256d8 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 80256c6:	6878      	ldr	r0, [r7, #4]
 80256c8:	f7ff ffb8 	bl	802563c <np_cmd_nand_write_end>
 80256cc:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 80256ce:	2000      	movs	r0, #0
 80256d0:	f7fe fd46 	bl	8024160 <led_wr_set>
        break;
 80256d4:	e000      	b.n	80256d8 <np_cmd_nand_write+0x54>
        break;
 80256d6:	bf00      	nop
    }

    if (ret < 0)
 80256d8:	68fb      	ldr	r3, [r7, #12]
 80256da:	2b00      	cmp	r3, #0
 80256dc:	da02      	bge.n	80256e4 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 80256de:	2000      	movs	r0, #0
 80256e0:	f7fe fd3e 	bl	8024160 <led_wr_set>

    return ret;
 80256e4:	68fb      	ldr	r3, [r7, #12]
}
 80256e6:	4618      	mov	r0, r3
 80256e8:	3710      	adds	r7, #16
 80256ea:	46bd      	mov	sp, r7
 80256ec:	bd80      	pop	{r7, pc}
	...

080256f0 <np_nand_read>:

static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 80256f0:	b580      	push	{r7, lr}
 80256f2:	b086      	sub	sp, #24
 80256f4:	af00      	add	r7, sp, #0
 80256f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80256fa:	607a      	str	r2, [r7, #4]
 80256fc:	603b      	str	r3, [r7, #0]
    uint32_t status;

    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 80256fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025700:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025704:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025708:	461a      	mov	r2, r3
 802570a:	4b1c      	ldr	r3, [pc, #112]	; (802577c <np_nand_read+0x8c>)
 802570c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025710:	691b      	ldr	r3, [r3, #16]
 8025712:	6878      	ldr	r0, [r7, #4]
 8025714:	687a      	ldr	r2, [r7, #4]
 8025716:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802571a:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 802571e:	683a      	ldr	r2, [r7, #0]
 8025720:	4798      	blx	r3
 8025722:	6178      	str	r0, [r7, #20]
    switch (status)
 8025724:	697b      	ldr	r3, [r7, #20]
 8025726:	2b03      	cmp	r3, #3
 8025728:	d014      	beq.n	8025754 <np_nand_read+0x64>
 802572a:	697b      	ldr	r3, [r7, #20]
 802572c:	2b03      	cmp	r3, #3
 802572e:	d817      	bhi.n	8025760 <np_nand_read+0x70>
 8025730:	697b      	ldr	r3, [r7, #20]
 8025732:	2b00      	cmp	r3, #0
 8025734:	d01a      	beq.n	802576c <np_nand_read+0x7c>
 8025736:	697b      	ldr	r3, [r7, #20]
 8025738:	2b02      	cmp	r3, #2
 802573a:	d111      	bne.n	8025760 <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        if (np_send_bad_block_info(addr, block_size, false))
 802573c:	2300      	movs	r3, #0
 802573e:	6a3a      	ldr	r2, [r7, #32]
 8025740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025744:	f7fe fef4 	bl	8024530 <np_send_bad_block_info>
 8025748:	4603      	mov	r3, r0
 802574a:	2b00      	cmp	r3, #0
 802574c:	d010      	beq.n	8025770 <np_nand_read+0x80>
            return -1;
 802574e:	f04f 33ff 	mov.w	r3, #4294967295
 8025752:	e00f      	b.n	8025774 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND write timeout at 0x%" PRIx64 "\r\n", addr);
 8025754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025758:	4809      	ldr	r0, [pc, #36]	; (8025780 <np_nand_read+0x90>)
 802575a:	f00c fba1 	bl	8031ea0 <printf>
        break;
 802575e:	e008      	b.n	8025772 <np_nand_read+0x82>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8025760:	4808      	ldr	r0, [pc, #32]	; (8025784 <np_nand_read+0x94>)
 8025762:	f00c fbf5 	bl	8031f50 <puts>
        return -1;
 8025766:	f04f 33ff 	mov.w	r3, #4294967295
 802576a:	e003      	b.n	8025774 <np_nand_read+0x84>
        break;
 802576c:	bf00      	nop
 802576e:	e000      	b.n	8025772 <np_nand_read+0x82>
        break;
 8025770:	bf00      	nop
    }

    return 0;
 8025772:	2300      	movs	r3, #0
}
 8025774:	4618      	mov	r0, r3
 8025776:	3718      	adds	r7, #24
 8025778:	46bd      	mov	sp, r7
 802577a:	bd80      	pop	{r7, pc}
 802577c:	20000040 	.word	0x20000040
 8025780:	08036fa0 	.word	0x08036fa0
 8025784:	08036c58 	.word	0x08036c58

08025788 <_np_cmd_nand_read>:

static int _np_cmd_nand_read(np_prog_t *prog)
{
 8025788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802578c:	b0b4      	sub	sp, #208	; 0xd0
 802578e:	af04      	add	r7, sp, #16
 8025790:	6778      	str	r0, [r7, #116]	; 0x74
    static np_page_t page;
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages, pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8025792:	2302      	movs	r3, #2
 8025794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8025798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802579c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80257a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 80257a4:	4bb9      	ldr	r3, [pc, #740]	; (8025a8c <_np_cmd_nand_read+0x304>)
 80257a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 80257aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257ac:	685b      	ldr	r3, [r3, #4]
 80257ae:	2b11      	cmp	r3, #17
 80257b0:	d808      	bhi.n	80257c4 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("Wrong buffer length for read command %lu\r\n",
 80257b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257b4:	685b      	ldr	r3, [r3, #4]
 80257b6:	4619      	mov	r1, r3
 80257b8:	48b5      	ldr	r0, [pc, #724]	; (8025a90 <_np_cmd_nand_read+0x308>)
 80257ba:	f00c fb71 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80257be:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80257c2:	e283      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 80257c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80257c6:	681b      	ldr	r3, [r3, #0]
 80257c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 80257cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80257d0:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80257d4:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80257d8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 80257dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80257e0:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80257e4:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80257e8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 80257ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80257f0:	7c5b      	ldrb	r3, [r3, #17]
 80257f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80257f6:	b2db      	uxtb	r3, r3
 80257f8:	2b00      	cmp	r3, #0
 80257fa:	bf14      	ite	ne
 80257fc:	2301      	movne	r3, #1
 80257fe:	2300      	moveq	r3, #0
 8025800:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8025804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025808:	7c5b      	ldrb	r3, [r3, #17]
 802580a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 802580e:	b2db      	uxtb	r3, r3
 8025810:	2b00      	cmp	r3, #0
 8025812:	bf14      	ite	ne
 8025814:	2301      	movne	r3, #1
 8025816:	2300      	moveq	r3, #0
 8025818:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("Read at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 802581c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025820:	e9cd 2300 	strd	r2, r3, [sp]
 8025824:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025828:	489a      	ldr	r0, [pc, #616]	; (8025a94 <_np_cmd_nand_read+0x30c>)
 802582a:	f00c fb39 	bl	8031ea0 <printf>
        len);

    if (inc_spare)
 802582e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8025832:	2b00      	cmp	r3, #0
 8025834:	d056      	beq.n	80258e4 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8025836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025838:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802583c:	3330      	adds	r3, #48	; 0x30
 802583e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025844:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025848:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802584c:	2200      	movs	r2, #0
 802584e:	66bb      	str	r3, [r7, #104]	; 0x68
 8025850:	66fa      	str	r2, [r7, #108]	; 0x6c
 8025852:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8025856:	f7fd f9a7 	bl	8022ba8 <__aeabi_uldivmod>
 802585a:	4602      	mov	r2, r0
 802585c:	460b      	mov	r3, r1
 802585e:	4613      	mov	r3, r2
 8025860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8025864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025866:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802586a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 802586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025870:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025874:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8025878:	fbb2 f3f3 	udiv	r3, r2, r3
 802587c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8025880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025886:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 802588a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802588c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025890:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8025894:	4413      	add	r3, r2
 8025896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 802589a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802589e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80258a2:	fb02 f303 	mul.w	r3, r2, r3
 80258a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 80258aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80258ae:	2200      	movs	r2, #0
 80258b0:	663b      	str	r3, [r7, #96]	; 0x60
 80258b2:	667a      	str	r2, [r7, #100]	; 0x64
 80258b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80258b8:	2200      	movs	r2, #0
 80258ba:	4698      	mov	r8, r3
 80258bc:	4691      	mov	r9, r2
 80258be:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80258c2:	460b      	mov	r3, r1
 80258c4:	fb08 f203 	mul.w	r2, r8, r3
 80258c8:	4603      	mov	r3, r0
 80258ca:	fb03 f309 	mul.w	r3, r3, r9
 80258ce:	4413      	add	r3, r2
 80258d0:	4602      	mov	r2, r0
 80258d2:	fba2 4508 	umull	r4, r5, r2, r8
 80258d6:	442b      	add	r3, r5
 80258d8:	461d      	mov	r5, r3
 80258da:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 80258de:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 80258e2:	e015      	b.n	8025910 <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 80258e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80258e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80258ea:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80258ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 80258f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80258f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80258f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80258fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8025900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025902:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025906:	3330      	adds	r3, #48	; 0x30
 8025908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802590c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8025910:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025914:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025918:	eb10 0a02 	adds.w	sl, r0, r2
 802591c:	eb41 0b03 	adc.w	fp, r1, r3
 8025920:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025924:	4552      	cmp	r2, sl
 8025926:	eb73 030b 	sbcs.w	r3, r3, fp
 802592a:	d20f      	bcs.n	802594c <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64 "+0x%" PRIx64
 802592c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025930:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025934:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025938:	e9cd 2300 	strd	r2, r3, [sp]
 802593c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025940:	4855      	ldr	r0, [pc, #340]	; (8025a98 <_np_cmd_nand_read+0x310>)
 8025942:	f00c faad 	bl	8031ea0 <printf>
            " is more then chip size 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8025946:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802594a:	e1bf      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 802594c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025950:	2200      	movs	r2, #0
 8025952:	65bb      	str	r3, [r7, #88]	; 0x58
 8025954:	65fa      	str	r2, [r7, #92]	; 0x5c
 8025956:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 802595a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802595e:	f7fd f923 	bl	8022ba8 <__aeabi_uldivmod>
 8025962:	4313      	orrs	r3, r2
 8025964:	d00a      	beq.n	802597c <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("Read address 0x%" PRIx64
 8025966:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802596a:	9300      	str	r3, [sp, #0]
 802596c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025970:	484a      	ldr	r0, [pc, #296]	; (8025a9c <_np_cmd_nand_read+0x314>)
 8025972:	f00c fa95 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8025976:	f06f 0365 	mvn.w	r3, #101	; 0x65
 802597a:	e1a7      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    if (!len)
 802597c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025980:	4313      	orrs	r3, r2
 8025982:	d105      	bne.n	8025990 <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("Length is 0\r\n");
 8025984:	4846      	ldr	r0, [pc, #280]	; (8025aa0 <_np_cmd_nand_read+0x318>)
 8025986:	f00c fae3 	bl	8031f50 <puts>
        return NP_ERR_LEN_INVALID;
 802598a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802598e:	e19d      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 8025990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025994:	2200      	movs	r2, #0
 8025996:	653b      	str	r3, [r7, #80]	; 0x50
 8025998:	657a      	str	r2, [r7, #84]	; 0x54
 802599a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802599e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80259a2:	f7fd f901 	bl	8022ba8 <__aeabi_uldivmod>
 80259a6:	4313      	orrs	r3, r2
 80259a8:	d00a      	beq.n	80259c0 <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("Read length 0x%" PRIx64
 80259aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80259ae:	9300      	str	r3, [sp, #0]
 80259b0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80259b4:	483b      	ldr	r0, [pc, #236]	; (8025aa4 <_np_cmd_nand_read+0x31c>)
 80259b6:	f00c fa73 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80259ba:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80259be:	e185      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 80259c0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	d00d      	beq.n	80259e4 <_np_cmd_nand_read+0x25c>
 80259c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	d109      	bne.n	80259e4 <_np_cmd_nand_read+0x25c>
 80259d0:	2100      	movs	r1, #0
 80259d2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80259d4:	f7fe ff08 	bl	80247e8 <_np_cmd_read_bad_blocks>
 80259d8:	67f8      	str	r0, [r7, #124]	; 0x7c
 80259da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80259dc:	2b00      	cmp	r3, #0
 80259de:	d001      	beq.n	80259e4 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 80259e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80259e2:	e173      	b.n	8025ccc <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 80259e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80259e8:	2200      	movs	r2, #0
 80259ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80259ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80259ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80259f2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80259f6:	f7fd f8d7 	bl	8022ba8 <__aeabi_uldivmod>
 80259fa:	4602      	mov	r2, r0
 80259fc:	460b      	mov	r3, r1
 80259fe:	4b2a      	ldr	r3, [pc, #168]	; (8025aa8 <_np_cmd_nand_read+0x320>)
 8025a00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a04:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8025a08:	4b27      	ldr	r3, [pc, #156]	; (8025aa8 <_np_cmd_nand_read+0x320>)
 8025a0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a0e:	461a      	mov	r2, r3
 8025a10:	2300      	movs	r3, #0
 8025a12:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8025a16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8025a1a:	2300      	movs	r3, #0
 8025a1c:	7013      	strb	r3, [r2, #0]

    while (len)
 8025a1e:	e14f      	b.n	8025cc0 <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 8025a20:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025a24:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025a28:	4290      	cmp	r0, r2
 8025a2a:	eb71 0303 	sbcs.w	r3, r1, r3
 8025a2e:	d30b      	bcc.n	8025a48 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("Read address 0x%" PRIx64
 8025a30:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025a34:	e9cd 2300 	strd	r2, r3, [sp]
 8025a38:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025a3c:	481b      	ldr	r0, [pc, #108]	; (8025aac <_np_cmd_nand_read+0x324>)
 8025a3e:	f00c fa2f 	bl	8031ea0 <printf>
                " is more then chip size 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8025a42:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025a46:	e141      	b.n	8025ccc <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8025a48:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	d076      	beq.n	8025b3e <_np_cmd_nand_read+0x3b6>
 8025a50:	4b15      	ldr	r3, [pc, #84]	; (8025aa8 <_np_cmd_nand_read+0x320>)
 8025a52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a56:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025a5a:	4618      	mov	r0, r3
 8025a5c:	f7fe fcc0 	bl	80243e0 <nand_bad_block_table_lookup>
 8025a60:	4603      	mov	r3, r0
 8025a62:	2b00      	cmp	r3, #0
 8025a64:	d06b      	beq.n	8025b3e <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("Skipped bad block at 0x%" PRIx64 "\r\n", addr);
 8025a66:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025a6a:	4811      	ldr	r0, [pc, #68]	; (8025ab0 <_np_cmd_nand_read+0x328>)
 8025a6c:	f00c fa18 	bl	8031ea0 <printf>
            if (np_send_bad_block_info(addr, block_size, true))
 8025a70:	2301      	movs	r3, #1
 8025a72:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025a76:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025a7a:	f7fe fd59 	bl	8024530 <np_send_bad_block_info>
 8025a7e:	4603      	mov	r3, r0
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	d017      	beq.n	8025ab4 <_np_cmd_nand_read+0x32c>
                return -1;
 8025a84:	f04f 33ff 	mov.w	r3, #4294967295
 8025a88:	e120      	b.n	8025ccc <_np_cmd_nand_read+0x544>
 8025a8a:	bf00      	nop
 8025a8c:	20003560 	.word	0x20003560
 8025a90:	08037170 	.word	0x08037170
 8025a94:	080371a4 	.word	0x080371a4
 8025a98:	080371cc 	.word	0x080371cc
 8025a9c:	08037210 	.word	0x08037210
 8025aa0:	08036d4c 	.word	0x08036d4c
 8025aa4:	08037250 	.word	0x08037250
 8025aa8:	200035a0 	.word	0x200035a0
 8025aac:	08037290 	.word	0x08037290
 8025ab0:	08036e24 	.word	0x08036e24

            /* On partial read do not count bad blocks */
            if (read_cmd->len == total_size)
 8025ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025ab8:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8025abc:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8025ac0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025ac4:	428b      	cmp	r3, r1
 8025ac6:	bf08      	it	eq
 8025ac8:	4282      	cmpeq	r2, r0
 8025aca:	d113      	bne.n	8025af4 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 8025acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025ad0:	2200      	movs	r2, #0
 8025ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8025ad4:	647a      	str	r2, [r7, #68]	; 0x44
 8025ad6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025ada:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8025ade:	4621      	mov	r1, r4
 8025ae0:	1a51      	subs	r1, r2, r1
 8025ae2:	61b9      	str	r1, [r7, #24]
 8025ae4:	4629      	mov	r1, r5
 8025ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8025aea:	61fb      	str	r3, [r7, #28]
 8025aec:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8025af0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 8025af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025af8:	2200      	movs	r2, #0
 8025afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8025afc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8025afe:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025b02:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8025b06:	4621      	mov	r1, r4
 8025b08:	1851      	adds	r1, r2, r1
 8025b0a:	6139      	str	r1, [r7, #16]
 8025b0c:	4629      	mov	r1, r5
 8025b0e:	414b      	adcs	r3, r1
 8025b10:	617b      	str	r3, [r7, #20]
 8025b12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025b16:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 8025b1a:	4b6f      	ldr	r3, [pc, #444]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025b1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b20:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8025b24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8025b30:	18ca      	adds	r2, r1, r3
 8025b32:	4b69      	ldr	r3, [pc, #420]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025b34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b38:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 8025b3c:	e0c0      	b.n	8025cc0 <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 8025b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b40:	9301      	str	r3, [sp, #4]
 8025b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025b46:	9300      	str	r3, [sp, #0]
 8025b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025b4c:	4a62      	ldr	r2, [pc, #392]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025b4e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025b52:	f7ff fdcd 	bl	80256f0 <np_nand_read>
 8025b56:	4603      	mov	r3, r0
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	d07e      	beq.n	8025c5a <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8025b5c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8025b60:	e0b4      	b.n	8025ccc <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 8025b62:	4b5d      	ldr	r3, [pc, #372]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025b64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b68:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025b70:	1a9a      	subs	r2, r3, r2
 8025b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025b76:	4293      	cmp	r3, r2
 8025b78:	d804      	bhi.n	8025b84 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8025b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8025b82:	e009      	b.n	8025b98 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 8025b84:	4b54      	ldr	r3, [pc, #336]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025b86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b8a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025b92:	1a9b      	subs	r3, r3, r2
 8025b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8025b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025b9c:	2200      	movs	r2, #0
 8025b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8025ba0:	637a      	str	r2, [r7, #52]	; 0x34
 8025ba2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8025baa:	4621      	mov	r1, r4
 8025bac:	428a      	cmp	r2, r1
 8025bae:	4629      	mov	r1, r5
 8025bb0:	418b      	sbcs	r3, r1
 8025bb2:	d203      	bcs.n	8025bbc <_np_cmd_nand_read+0x434>
                send_len = len;
 8025bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8025bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8025bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025bc0:	1c98      	adds	r0, r3, #2
 8025bc2:	4b45      	ldr	r3, [pc, #276]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025bc4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bc8:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025bcc:	4b42      	ldr	r3, [pc, #264]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025bce:	4413      	add	r3, r2
 8025bd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8025bd4:	4619      	mov	r1, r3
 8025bd6:	f00c fa83 	bl	80320e0 <memcpy>

            while (!np_comm_cb->send_ready());
 8025bda:	bf00      	nop
 8025bdc:	4b3f      	ldr	r3, [pc, #252]	; (8025cdc <_np_cmd_nand_read+0x554>)
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	685b      	ldr	r3, [r3, #4]
 8025be2:	4798      	blx	r3
 8025be4:	4603      	mov	r3, r0
 8025be6:	2b00      	cmp	r3, #0
 8025be8:	d0f8      	beq.n	8025bdc <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 8025bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025bee:	b2db      	uxtb	r3, r3
 8025bf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8025bf4:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 8025bf6:	4b39      	ldr	r3, [pc, #228]	; (8025cdc <_np_cmd_nand_read+0x554>)
 8025bf8:	681b      	ldr	r3, [r3, #0]
 8025bfa:	681c      	ldr	r4, [r3, #0]
 8025bfc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8025c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c04:	4413      	add	r3, r2
 8025c06:	4619      	mov	r1, r3
 8025c08:	4835      	ldr	r0, [pc, #212]	; (8025ce0 <_np_cmd_nand_read+0x558>)
 8025c0a:	47a0      	blx	r4
 8025c0c:	4603      	mov	r3, r0
 8025c0e:	2b00      	cmp	r3, #0
 8025c10:	d002      	beq.n	8025c18 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 8025c12:	f04f 33ff 	mov.w	r3, #4294967295
 8025c16:	e059      	b.n	8025ccc <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 8025c18:	4b2f      	ldr	r3, [pc, #188]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025c1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c1e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c26:	441a      	add	r2, r3
 8025c28:	4b2b      	ldr	r3, [pc, #172]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025c2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c2e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 8025c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025c36:	2200      	movs	r2, #0
 8025c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8025c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025c3c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025c40:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025c44:	4621      	mov	r1, r4
 8025c46:	1a51      	subs	r1, r2, r1
 8025c48:	60b9      	str	r1, [r7, #8]
 8025c4a:	4629      	mov	r1, r5
 8025c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8025c50:	60fb      	str	r3, [r7, #12]
 8025c52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025c56:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8025c5a:	4b1f      	ldr	r3, [pc, #124]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025c5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c60:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025c64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c68:	4293      	cmp	r3, r2
 8025c6a:	d904      	bls.n	8025c76 <_np_cmd_nand_read+0x4ee>
 8025c6c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025c70:	4313      	orrs	r3, r2
 8025c72:	f47f af76 	bne.w	8025b62 <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8025c76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025c7a:	2200      	movs	r2, #0
 8025c7c:	623b      	str	r3, [r7, #32]
 8025c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8025c80:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025c84:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8025c88:	4621      	mov	r1, r4
 8025c8a:	1851      	adds	r1, r2, r1
 8025c8c:	6039      	str	r1, [r7, #0]
 8025c8e:	4629      	mov	r1, r5
 8025c90:	414b      	adcs	r3, r1
 8025c92:	607b      	str	r3, [r7, #4]
 8025c94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025c98:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 8025c9c:	4b0e      	ldr	r3, [pc, #56]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025c9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ca2:	461a      	mov	r2, r3
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 8025caa:	4b0b      	ldr	r3, [pc, #44]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025cac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cb0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025cb4:	1c5a      	adds	r2, r3, #1
 8025cb6:	4b08      	ldr	r3, [pc, #32]	; (8025cd8 <_np_cmd_nand_read+0x550>)
 8025cb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cbc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 8025cc0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025cc4:	4313      	orrs	r3, r2
 8025cc6:	f47f aeab 	bne.w	8025a20 <_np_cmd_nand_read+0x298>
    }

    return 0;
 8025cca:	2300      	movs	r3, #0
}
 8025ccc:	4618      	mov	r0, r3
 8025cce:	37c0      	adds	r7, #192	; 0xc0
 8025cd0:	46bd      	mov	sp, r7
 8025cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025cd6:	bf00      	nop
 8025cd8:	200035a0 	.word	0x200035a0
 8025cdc:	20001310 	.word	0x20001310
 8025ce0:	20003560 	.word	0x20003560

08025ce4 <np_cmd_nand_read>:

static int np_cmd_nand_read(np_prog_t *prog)
{
 8025ce4:	b580      	push	{r7, lr}
 8025ce6:	b084      	sub	sp, #16
 8025ce8:	af00      	add	r7, sp, #0
 8025cea:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8025cec:	2001      	movs	r0, #1
 8025cee:	f7fe fa49 	bl	8024184 <led_rd_set>
    ret = _np_cmd_nand_read(prog);
 8025cf2:	6878      	ldr	r0, [r7, #4]
 8025cf4:	f7ff fd48 	bl	8025788 <_np_cmd_nand_read>
 8025cf8:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8025cfa:	2000      	movs	r0, #0
 8025cfc:	f7fe fa42 	bl	8024184 <led_rd_set>

    return ret;
 8025d00:	68fb      	ldr	r3, [r7, #12]
}
 8025d02:	4618      	mov	r0, r3
 8025d04:	3710      	adds	r7, #16
 8025d06:	46bd      	mov	sp, r7
 8025d08:	bd80      	pop	{r7, pc}

08025d0a <np_fill_chip_info>:

static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 8025d0a:	b480      	push	{r7}
 8025d0c:	b083      	sub	sp, #12
 8025d0e:	af00      	add	r7, sp, #0
 8025d10:	6078      	str	r0, [r7, #4]
 8025d12:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8025d14:	687b      	ldr	r3, [r7, #4]
 8025d16:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8025d1a:	683a      	ldr	r2, [r7, #0]
 8025d1c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025d20:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8025d24:	687b      	ldr	r3, [r7, #4]
 8025d26:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8025d2a:	683a      	ldr	r2, [r7, #0]
 8025d2c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025d30:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8025d34:	6879      	ldr	r1, [r7, #4]
 8025d36:	f8d1 200a 	ldr.w	r2, [r1, #10]
 8025d3a:	f8d1 300e 	ldr.w	r3, [r1, #14]
 8025d3e:	6839      	ldr	r1, [r7, #0]
 8025d40:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8025d44:	3130      	adds	r1, #48	; 0x30
 8025d46:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8025d4a:	687b      	ldr	r3, [r7, #4]
 8025d4c:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8025d50:	683a      	ldr	r2, [r7, #0]
 8025d52:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025d56:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8025d5a:	687b      	ldr	r3, [r7, #4]
 8025d5c:	7d9a      	ldrb	r2, [r3, #22]
 8025d5e:	683b      	ldr	r3, [r7, #0]
 8025d60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d64:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8025d68:	683b      	ldr	r3, [r7, #0]
 8025d6a:	2201      	movs	r2, #1
 8025d6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8025d6e:	bf00      	nop
 8025d70:	370c      	adds	r7, #12
 8025d72:	46bd      	mov	sp, r7
 8025d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d78:	4770      	bx	lr
	...

08025d7c <np_print_chip_info>:

static void np_print_chip_info(np_prog_t *prog)
{
 8025d7c:	b580      	push	{r7, lr}
 8025d7e:	b082      	sub	sp, #8
 8025d80:	af00      	add	r7, sp, #0
 8025d82:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("Page size: %lu\r\n", prog->chip_info.page_size);
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d8a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025d8e:	4619      	mov	r1, r3
 8025d90:	4815      	ldr	r0, [pc, #84]	; (8025de8 <np_print_chip_info+0x6c>)
 8025d92:	f00c f885 	bl	8031ea0 <printf>
    DEBUG_PRINT("Block size: %lu\r\n", prog->chip_info.block_size);
 8025d96:	687b      	ldr	r3, [r7, #4]
 8025d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8025da0:	4619      	mov	r1, r3
 8025da2:	4812      	ldr	r0, [pc, #72]	; (8025dec <np_print_chip_info+0x70>)
 8025da4:	f00c f87c 	bl	8031ea0 <printf>
    DEBUG_PRINT("Total size: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025dae:	3330      	adds	r3, #48	; 0x30
 8025db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025db4:	480e      	ldr	r0, [pc, #56]	; (8025df0 <np_print_chip_info+0x74>)
 8025db6:	f00c f873 	bl	8031ea0 <printf>
    DEBUG_PRINT("Spare size: %lu\r\n", prog->chip_info.spare_size);    
 8025dba:	687b      	ldr	r3, [r7, #4]
 8025dbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025dc0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8025dc4:	4619      	mov	r1, r3
 8025dc6:	480b      	ldr	r0, [pc, #44]	; (8025df4 <np_print_chip_info+0x78>)
 8025dc8:	f00c f86a 	bl	8031ea0 <printf>
    DEBUG_PRINT("Bad block mark offset: %d\r\n", prog->chip_info.bb_mark_off);
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025dd2:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8025dd6:	4619      	mov	r1, r3
 8025dd8:	4807      	ldr	r0, [pc, #28]	; (8025df8 <np_print_chip_info+0x7c>)
 8025dda:	f00c f861 	bl	8031ea0 <printf>
}
 8025dde:	bf00      	nop
 8025de0:	3708      	adds	r7, #8
 8025de2:	46bd      	mov	sp, r7
 8025de4:	bd80      	pop	{r7, pc}
 8025de6:	bf00      	nop
 8025de8:	080372cc 	.word	0x080372cc
 8025dec:	080372e0 	.word	0x080372e0
 8025df0:	080372f4 	.word	0x080372f4
 8025df4:	0803730c 	.word	0x0803730c
 8025df8:	08037320 	.word	0x08037320

08025dfc <np_cmd_nand_conf>:

static int np_cmd_nand_conf(np_prog_t *prog)
{
 8025dfc:	b580      	push	{r7, lr}
 8025dfe:	b084      	sub	sp, #16
 8025e00:	af00      	add	r7, sp, #0
 8025e02:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("Chip configure command\r\n");
 8025e04:	4825      	ldr	r0, [pc, #148]	; (8025e9c <np_cmd_nand_conf+0xa0>)
 8025e06:	f00c f8a3 	bl	8031f50 <puts>

    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 8025e0a:	687b      	ldr	r3, [r7, #4]
 8025e0c:	685b      	ldr	r3, [r3, #4]
 8025e0e:	2b16      	cmp	r3, #22
 8025e10:	d808      	bhi.n	8025e24 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("Wrong buffer length for configuration command %lu\r\n",
 8025e12:	687b      	ldr	r3, [r7, #4]
 8025e14:	685b      	ldr	r3, [r3, #4]
 8025e16:	4619      	mov	r1, r3
 8025e18:	4821      	ldr	r0, [pc, #132]	; (8025ea0 <np_cmd_nand_conf+0xa4>)
 8025e1a:	f00c f841 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025e1e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025e22:	e036      	b.n	8025e92 <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8025e24:	687b      	ldr	r3, [r7, #4]
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog);
 8025e2a:	6879      	ldr	r1, [r7, #4]
 8025e2c:	68f8      	ldr	r0, [r7, #12]
 8025e2e:	f7ff ff6c 	bl	8025d0a <np_fill_chip_info>
    np_print_chip_info(prog);
 8025e32:	6878      	ldr	r0, [r7, #4]
 8025e34:	f7ff ffa2 	bl	8025d7c <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8025e38:	68fb      	ldr	r3, [r7, #12]
 8025e3a:	785a      	ldrb	r2, [r3, #1]
 8025e3c:	687b      	ldr	r3, [r7, #4]
 8025e3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025e42:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025e46:	687b      	ldr	r3, [r7, #4]
 8025e48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025e4c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025e50:	461a      	mov	r2, r3
 8025e52:	4b14      	ldr	r3, [pc, #80]	; (8025ea4 <np_cmd_nand_conf+0xa8>)
 8025e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025e58:	681b      	ldr	r3, [r3, #0]
 8025e5a:	68fa      	ldr	r2, [r7, #12]
 8025e5c:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 8025e60:	687a      	ldr	r2, [r7, #4]
 8025e62:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025e64:	3a17      	subs	r2, #23
 8025e66:	4611      	mov	r1, r2
 8025e68:	4798      	blx	r3
 8025e6a:	4603      	mov	r3, r0
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	d008      	beq.n	8025e82 <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("Wrong buffer length for hal configuration command %lu\r\n",
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	685b      	ldr	r3, [r3, #4]
 8025e74:	4619      	mov	r1, r3
 8025e76:	480c      	ldr	r0, [pc, #48]	; (8025ea8 <np_cmd_nand_conf+0xac>)
 8025e78:	f00c f812 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025e7c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025e80:	e007      	b.n	8025e92 <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init();
 8025e82:	f7fe fa7d 	bl	8024380 <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	2200      	movs	r2, #0
 8025e8a:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8025e8c:	f7fe fb10 	bl	80244b0 <np_send_ok_status>
 8025e90:	4603      	mov	r3, r0
}
 8025e92:	4618      	mov	r0, r3
 8025e94:	3710      	adds	r7, #16
 8025e96:	46bd      	mov	sp, r7
 8025e98:	bd80      	pop	{r7, pc}
 8025e9a:	bf00      	nop
 8025e9c:	0803733c 	.word	0x0803733c
 8025ea0:	08037354 	.word	0x08037354
 8025ea4:	20000040 	.word	0x20000040
 8025ea8:	08037390 	.word	0x08037390

08025eac <np_send_bad_blocks>:

static int np_send_bad_blocks(np_prog_t *prog)
{
 8025eac:	b5b0      	push	{r4, r5, r7, lr}
 8025eae:	b084      	sub	sp, #16
 8025eb0:	af00      	add	r7, sp, #0
 8025eb2:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8025eb4:	f107 0308 	add.w	r3, r7, #8
 8025eb8:	4618      	mov	r0, r3
 8025eba:	f7fe fab5 	bl	8024428 <nand_bad_block_table_iter_alloc>
 8025ebe:	60f8      	str	r0, [r7, #12]
 8025ec0:	e021      	b.n	8025f06 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ec8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025ecc:	68ba      	ldr	r2, [r7, #8]
 8025ece:	fb02 f303 	mul.w	r3, r2, r3
 8025ed2:	2200      	movs	r2, #0
 8025ed4:	461c      	mov	r4, r3
 8025ed6:	4615      	mov	r5, r2
 8025ed8:	687b      	ldr	r3, [r7, #4]
 8025eda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ede:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8025ee2:	2300      	movs	r3, #0
 8025ee4:	4620      	mov	r0, r4
 8025ee6:	4629      	mov	r1, r5
 8025ee8:	f7fe fb22 	bl	8024530 <np_send_bad_block_info>
 8025eec:	4603      	mov	r3, r0
 8025eee:	2b00      	cmp	r3, #0
 8025ef0:	d002      	beq.n	8025ef8 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 8025ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8025ef6:	e00a      	b.n	8025f0e <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 8025ef8:	f107 0308 	add.w	r3, r7, #8
 8025efc:	4619      	mov	r1, r3
 8025efe:	68f8      	ldr	r0, [r7, #12]
 8025f00:	f7fe faac 	bl	802445c <nand_bad_block_table_iter_next>
 8025f04:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8025f06:	68fb      	ldr	r3, [r7, #12]
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d1da      	bne.n	8025ec2 <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 8025f0c:	2300      	movs	r3, #0
}
 8025f0e:	4618      	mov	r0, r3
 8025f10:	3710      	adds	r7, #16
 8025f12:	46bd      	mov	sp, r7
 8025f14:	bdb0      	pop	{r4, r5, r7, pc}

08025f16 <np_cmd_read_bad_blocks>:

int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 8025f16:	b580      	push	{r7, lr}
 8025f18:	b084      	sub	sp, #16
 8025f1a:	af00      	add	r7, sp, #0
 8025f1c:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8025f1e:	2001      	movs	r0, #1
 8025f20:	f7fe f930 	bl	8024184 <led_rd_set>
    nand_bad_block_table_init();  
 8025f24:	f7fe fa2c 	bl	8024380 <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true);
 8025f28:	2101      	movs	r1, #1
 8025f2a:	6878      	ldr	r0, [r7, #4]
 8025f2c:	f7fe fc5c 	bl	80247e8 <_np_cmd_read_bad_blocks>
 8025f30:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8025f32:	2000      	movs	r0, #0
 8025f34:	f7fe f926 	bl	8024184 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog)))
 8025f38:	68fb      	ldr	r3, [r7, #12]
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d106      	bne.n	8025f4c <np_cmd_read_bad_blocks+0x36>
 8025f3e:	6878      	ldr	r0, [r7, #4]
 8025f40:	f7ff ffb4 	bl	8025eac <np_send_bad_blocks>
 8025f44:	60f8      	str	r0, [r7, #12]
 8025f46:	68fb      	ldr	r3, [r7, #12]
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	d001      	beq.n	8025f50 <np_cmd_read_bad_blocks+0x3a>
        return ret;
 8025f4c:	68fb      	ldr	r3, [r7, #12]
 8025f4e:	e002      	b.n	8025f56 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status();
 8025f50:	f7fe faae 	bl	80244b0 <np_send_ok_status>
 8025f54:	4603      	mov	r3, r0
}
 8025f56:	4618      	mov	r0, r3
 8025f58:	3710      	adds	r7, #16
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}
	...

08025f60 <np_cmd_version_get>:

int np_cmd_version_get(np_prog_t *prog)
{
 8025f60:	b580      	push	{r7, lr}
 8025f62:	b086      	sub	sp, #24
 8025f64:	af00      	add	r7, sp, #0
 8025f66:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8025f68:	2306      	movs	r3, #6
 8025f6a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read version command\r\n");
 8025f6c:	4810      	ldr	r0, [pc, #64]	; (8025fb0 <np_cmd_version_get+0x50>)
 8025f6e:	f00b ffef 	bl	8031f50 <puts>

    resp.header.code = NP_RESP_DATA;
 8025f72:	2300      	movs	r3, #0
 8025f74:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025f76:	697b      	ldr	r3, [r7, #20]
 8025f78:	b2db      	uxtb	r3, r3
 8025f7a:	3b02      	subs	r3, #2
 8025f7c:	b2db      	uxtb	r3, r3
 8025f7e:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 8025f80:	2303      	movs	r3, #3
 8025f82:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8025f84:	2305      	movs	r3, #5
 8025f86:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8025f88:	2300      	movs	r3, #0
 8025f8a:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8025f8c:	4b09      	ldr	r3, [pc, #36]	; (8025fb4 <np_cmd_version_get+0x54>)
 8025f8e:	681b      	ldr	r3, [r3, #0]
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	d007      	beq.n	8025fa4 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025f94:	4b07      	ldr	r3, [pc, #28]	; (8025fb4 <np_cmd_version_get+0x54>)
 8025f96:	681b      	ldr	r3, [r3, #0]
 8025f98:	681b      	ldr	r3, [r3, #0]
 8025f9a:	f107 020c 	add.w	r2, r7, #12
 8025f9e:	6979      	ldr	r1, [r7, #20]
 8025fa0:	4610      	mov	r0, r2
 8025fa2:	4798      	blx	r3

    return 0;
 8025fa4:	2300      	movs	r3, #0
}
 8025fa6:	4618      	mov	r0, r3
 8025fa8:	3718      	adds	r7, #24
 8025faa:	46bd      	mov	sp, r7
 8025fac:	bd80      	pop	{r7, pc}
 8025fae:	bf00      	nop
 8025fb0:	080373d0 	.word	0x080373d0
 8025fb4:	20001310 	.word	0x20001310

08025fb8 <np_boot_config_read>:

static int np_boot_config_read(boot_config_t *config)
{
 8025fb8:	b580      	push	{r7, lr}
 8025fba:	b082      	sub	sp, #8
 8025fbc:	af00      	add	r7, sp, #0
 8025fbe:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8025fc0:	2201      	movs	r2, #1
 8025fc2:	6879      	ldr	r1, [r7, #4]
 8025fc4:	4806      	ldr	r0, [pc, #24]	; (8025fe0 <np_boot_config_read+0x28>)
 8025fc6:	f7fd f973 	bl	80232b0 <flash_read>
 8025fca:	4603      	mov	r3, r0
 8025fcc:	2b00      	cmp	r3, #0
 8025fce:	da02      	bge.n	8025fd6 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 8025fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8025fd4:	e000      	b.n	8025fd8 <np_boot_config_read+0x20>
    }
    
    return 0;
 8025fd6:	2300      	movs	r3, #0
}
 8025fd8:	4618      	mov	r0, r3
 8025fda:	3708      	adds	r7, #8
 8025fdc:	46bd      	mov	sp, r7
 8025fde:	bd80      	pop	{r7, pc}
 8025fe0:	08003800 	.word	0x08003800

08025fe4 <np_boot_config_write>:

static int np_boot_config_write(boot_config_t *config)
{
 8025fe4:	b580      	push	{r7, lr}
 8025fe6:	b082      	sub	sp, #8
 8025fe8:	af00      	add	r7, sp, #0
 8025fea:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8025fec:	480c      	ldr	r0, [pc, #48]	; (8026020 <np_boot_config_write+0x3c>)
 8025fee:	f7fd f907 	bl	8023200 <flash_page_erase>
 8025ff2:	4603      	mov	r3, r0
 8025ff4:	2b00      	cmp	r3, #0
 8025ff6:	da02      	bge.n	8025ffe <np_boot_config_write+0x1a>
        return -1;
 8025ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8025ffc:	e00b      	b.n	8026016 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8025ffe:	2201      	movs	r2, #1
 8026000:	6879      	ldr	r1, [r7, #4]
 8026002:	4807      	ldr	r0, [pc, #28]	; (8026020 <np_boot_config_write+0x3c>)
 8026004:	f7fd f91f 	bl	8023246 <flash_write>
 8026008:	4603      	mov	r3, r0
 802600a:	2b00      	cmp	r3, #0
 802600c:	da02      	bge.n	8026014 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 802600e:	f04f 33ff 	mov.w	r3, #4294967295
 8026012:	e000      	b.n	8026016 <np_boot_config_write+0x32>
    }

    return 0;
 8026014:	2300      	movs	r3, #0
}
 8026016:	4618      	mov	r0, r3
 8026018:	3708      	adds	r7, #8
 802601a:	46bd      	mov	sp, r7
 802601c:	bd80      	pop	{r7, pc}
 802601e:	bf00      	nop
 8026020:	08003800 	.word	0x08003800

08026024 <np_cmd_active_image_get>:

static int np_cmd_active_image_get(np_prog_t *prog)
{
 8026024:	b580      	push	{r7, lr}
 8026026:	b086      	sub	sp, #24
 8026028:	af00      	add	r7, sp, #0
 802602a:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 802602c:	2303      	movs	r3, #3
 802602e:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Get active image command\r\n");
 8026030:	481c      	ldr	r0, [pc, #112]	; (80260a4 <np_cmd_active_image_get+0x80>)
 8026032:	f00b ff8d 	bl	8031f50 <puts>

    if (prog->active_image == 0xff)
 8026036:	687b      	ldr	r3, [r7, #4]
 8026038:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802603c:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8026040:	2bff      	cmp	r3, #255	; 0xff
 8026042:	d110      	bne.n	8026066 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8026044:	f107 0310 	add.w	r3, r7, #16
 8026048:	4618      	mov	r0, r3
 802604a:	f7ff ffb5 	bl	8025fb8 <np_boot_config_read>
 802604e:	4603      	mov	r3, r0
 8026050:	2b00      	cmp	r3, #0
 8026052:	d002      	beq.n	802605a <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8026054:	f04f 33ff 	mov.w	r3, #4294967295
 8026058:	e01f      	b.n	802609a <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 802605a:	7c3a      	ldrb	r2, [r7, #16]
 802605c:	687b      	ldr	r3, [r7, #4]
 802605e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026062:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8026066:	2300      	movs	r3, #0
 8026068:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 802606a:	697b      	ldr	r3, [r7, #20]
 802606c:	b2db      	uxtb	r3, r3
 802606e:	3b02      	subs	r3, #2
 8026070:	b2db      	uxtb	r3, r3
 8026072:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802607a:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 802607e:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 8026080:	4b09      	ldr	r3, [pc, #36]	; (80260a8 <np_cmd_active_image_get+0x84>)
 8026082:	681b      	ldr	r3, [r3, #0]
 8026084:	2b00      	cmp	r3, #0
 8026086:	d007      	beq.n	8026098 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8026088:	4b07      	ldr	r3, [pc, #28]	; (80260a8 <np_cmd_active_image_get+0x84>)
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	681b      	ldr	r3, [r3, #0]
 802608e:	f107 020c 	add.w	r2, r7, #12
 8026092:	6979      	ldr	r1, [r7, #20]
 8026094:	4610      	mov	r0, r2
 8026096:	4798      	blx	r3

    return 0;
 8026098:	2300      	movs	r3, #0
}
 802609a:	4618      	mov	r0, r3
 802609c:	3718      	adds	r7, #24
 802609e:	46bd      	mov	sp, r7
 80260a0:	bd80      	pop	{r7, pc}
 80260a2:	bf00      	nop
 80260a4:	080373e8 	.word	0x080373e8
 80260a8:	20001310 	.word	0x20001310

080260ac <np_cmd_fw_update_start>:

static int np_cmd_fw_update_start(np_prog_t *prog)
{
 80260ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80260b0:	b092      	sub	sp, #72	; 0x48
 80260b2:	af04      	add	r7, sp, #16
 80260b4:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80260b6:	69fb      	ldr	r3, [r7, #28]
 80260b8:	685b      	ldr	r3, [r3, #4]
 80260ba:	2b11      	cmp	r3, #17
 80260bc:	d808      	bhi.n	80260d0 <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write start command %lu\r\n",
 80260be:	69fb      	ldr	r3, [r7, #28]
 80260c0:	685b      	ldr	r3, [r3, #4]
 80260c2:	4619      	mov	r1, r3
 80260c4:	4870      	ldr	r0, [pc, #448]	; (8026288 <np_cmd_fw_update_start+0x1dc>)
 80260c6:	f00b feeb 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80260ca:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80260ce:	e0d5      	b.n	802627c <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80260d0:	69fb      	ldr	r3, [r7, #28]
 80260d2:	681b      	ldr	r3, [r3, #0]
 80260d4:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 80260d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80260d8:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80260dc:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80260e0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 80260e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80260e6:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80260ea:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80260ee:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("Write at 0x%" PRIx64 " 0x%" PRIx64 " bytes command\r\n", addr,
 80260f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80260f6:	e9cd 2300 	strd	r2, r3, [sp]
 80260fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80260fe:	4863      	ldr	r0, [pc, #396]	; (802628c <np_cmd_fw_update_start+0x1e0>)
 8026100:	f00b fece 	bl	8031ea0 <printf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 8026104:	69f9      	ldr	r1, [r7, #28]
 8026106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802610a:	f04f 0300 	mov.w	r3, #0
 802610e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 8026112:	69fb      	ldr	r3, [r7, #28]
 8026114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8026118:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 802611a:	69fb      	ldr	r3, [r7, #28]
 802611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8026120:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 8026122:	69f9      	ldr	r1, [r7, #28]
 8026124:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8026128:	f04f 0300 	mov.w	r3, #0
 802612c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 8026130:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8026134:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8026138:	1884      	adds	r4, r0, r2
 802613a:	eb41 0503 	adc.w	r5, r1, r3
 802613e:	69fb      	ldr	r3, [r7, #28]
 8026140:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026144:	69fb      	ldr	r3, [r7, #28]
 8026146:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802614a:	eb10 0802 	adds.w	r8, r0, r2
 802614e:	eb41 0903 	adc.w	r9, r1, r3
 8026152:	45a0      	cmp	r8, r4
 8026154:	eb79 0305 	sbcs.w	r3, r9, r5
 8026158:	d217      	bcs.n	802618a <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("Write address 0x%" PRIx64 "+0x%" PRIx64
 802615a:	69fb      	ldr	r3, [r7, #28]
 802615c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026160:	69fb      	ldr	r3, [r7, #28]
 8026162:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8026166:	eb10 0a02 	adds.w	sl, r0, r2
 802616a:	eb41 0b03 	adc.w	fp, r1, r3
 802616e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8026172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8026176:	e9cd 2300 	strd	r2, r3, [sp]
 802617a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802617e:	4844      	ldr	r0, [pc, #272]	; (8026290 <np_cmd_fw_update_start+0x1e4>)
 8026180:	f00b fe8e 	bl	8031ea0 <printf>
            " is more then flash size 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8026184:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8026188:	e078      	b.n	802627c <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 802618a:	69fb      	ldr	r3, [r7, #28]
 802618c:	6a1b      	ldr	r3, [r3, #32]
 802618e:	2200      	movs	r2, #0
 8026190:	613b      	str	r3, [r7, #16]
 8026192:	617a      	str	r2, [r7, #20]
 8026194:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8026198:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802619c:	f7fc fd04 	bl	8022ba8 <__aeabi_uldivmod>
 80261a0:	4313      	orrs	r3, r2
 80261a2:	d00a      	beq.n	80261ba <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("Address 0x%" PRIx64
 80261a4:	69fb      	ldr	r3, [r7, #28]
 80261a6:	6a1b      	ldr	r3, [r3, #32]
 80261a8:	9300      	str	r3, [sp, #0]
 80261aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80261ae:	4839      	ldr	r0, [pc, #228]	; (8026294 <np_cmd_fw_update_start+0x1e8>)
 80261b0:	f00b fe76 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80261b4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80261b8:	e060      	b.n	802627c <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 80261ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80261be:	4313      	orrs	r3, r2
 80261c0:	d105      	bne.n	80261ce <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("Length is 0\r\n");
 80261c2:	4835      	ldr	r0, [pc, #212]	; (8026298 <np_cmd_fw_update_start+0x1ec>)
 80261c4:	f00b fec4 	bl	8031f50 <puts>
        return NP_ERR_LEN_INVALID;
 80261c8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80261cc:	e056      	b.n	802627c <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 80261ce:	69fb      	ldr	r3, [r7, #28]
 80261d0:	6a1b      	ldr	r3, [r3, #32]
 80261d2:	2200      	movs	r2, #0
 80261d4:	60bb      	str	r3, [r7, #8]
 80261d6:	60fa      	str	r2, [r7, #12]
 80261d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80261dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80261e0:	f7fc fce2 	bl	8022ba8 <__aeabi_uldivmod>
 80261e4:	4313      	orrs	r3, r2
 80261e6:	d00a      	beq.n	80261fe <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("Length 0x%" PRIx64
 80261e8:	69fb      	ldr	r3, [r7, #28]
 80261ea:	6a1b      	ldr	r3, [r3, #32]
 80261ec:	9300      	str	r3, [sp, #0]
 80261ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80261f2:	482a      	ldr	r0, [pc, #168]	; (802629c <np_cmd_fw_update_start+0x1f0>)
 80261f4:	f00b fe54 	bl	8031ea0 <printf>
            " is not aligned to page size 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80261f8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80261fc:	e03e      	b.n	802627c <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 80261fe:	69f9      	ldr	r1, [r7, #28]
 8026200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8026204:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8026208:	69f9      	ldr	r1, [r7, #28]
 802620a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802620e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8026212:	69fb      	ldr	r3, [r7, #28]
 8026214:	2201      	movs	r2, #1
 8026216:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8026218:	69fb      	ldr	r3, [r7, #28]
 802621a:	6a1b      	ldr	r3, [r3, #32]
 802621c:	2200      	movs	r2, #0
 802621e:	603b      	str	r3, [r7, #0]
 8026220:	607a      	str	r2, [r7, #4]
 8026222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802622a:	f7fc fcbd 	bl	8022ba8 <__aeabi_uldivmod>
 802622e:	4602      	mov	r2, r0
 8026230:	460b      	mov	r3, r1
 8026232:	69fb      	ldr	r3, [r7, #28]
 8026234:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026238:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 802623c:	69fb      	ldr	r3, [r7, #28]
 802623e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026242:	461a      	mov	r2, r3
 8026244:	2300      	movs	r3, #0
 8026246:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 802624a:	69fb      	ldr	r3, [r7, #28]
 802624c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026250:	3310      	adds	r3, #16
 8026252:	4619      	mov	r1, r3
 8026254:	f04f 0200 	mov.w	r2, #0
 8026258:	f04f 0300 	mov.w	r3, #0
 802625c:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 8026260:	69fb      	ldr	r3, [r7, #28]
 8026262:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026266:	3310      	adds	r3, #16
 8026268:	4619      	mov	r1, r3
 802626a:	f04f 0200 	mov.w	r2, #0
 802626e:	f04f 0300 	mov.w	r3, #0
 8026272:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8026276:	f7fe f91b 	bl	80244b0 <np_send_ok_status>
 802627a:	4603      	mov	r3, r0
}
 802627c:	4618      	mov	r0, r3
 802627e:	3738      	adds	r7, #56	; 0x38
 8026280:	46bd      	mov	sp, r7
 8026282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8026286:	bf00      	nop
 8026288:	08036e48 	.word	0x08036e48
 802628c:	08036e84 	.word	0x08036e84
 8026290:	08037404 	.word	0x08037404
 8026294:	08036ef0 	.word	0x08036ef0
 8026298:	08036d4c 	.word	0x08036d4c
 802629c:	08036f2c 	.word	0x08036f2c

080262a0 <np_cmd_fw_update_data>:

static int np_cmd_fw_update_data(np_prog_t *prog)
{
 80262a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262a4:	b0a7      	sub	sp, #156	; 0x9c
 80262a6:	af02      	add	r7, sp, #8
 80262a8:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80262aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262ac:	685b      	ldr	r3, [r3, #4]
 80262ae:	2b01      	cmp	r3, #1
 80262b0:	d808      	bhi.n	80262c4 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("Wrong buffer length for write data command %lu\r\n",
 80262b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262b4:	685b      	ldr	r3, [r3, #4]
 80262b6:	4619      	mov	r1, r3
 80262b8:	487c      	ldr	r0, [pc, #496]	; (80264ac <np_cmd_fw_update_data+0x20c>)
 80262ba:	f00b fdf1 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80262be:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80262c2:	e1d6      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80262c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80262c6:	681b      	ldr	r3, [r3, #0]
 80262c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 80262cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80262d0:	785b      	ldrb	r3, [r3, #1]
 80262d2:	b2db      	uxtb	r3, r3
 80262d4:	2200      	movs	r2, #0
 80262d6:	60bb      	str	r3, [r7, #8]
 80262d8:	60fa      	str	r2, [r7, #12]
 80262da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80262de:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80262e2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80262e6:	1c94      	adds	r4, r2, #2
 80262e8:	f143 0500 	adc.w	r5, r3, #0
 80262ec:	2c41      	cmp	r4, #65	; 0x41
 80262ee:	f175 0300 	sbcs.w	r3, r5, #0
 80262f2:	d307      	bcc.n	8026304 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("Data size is wrong 0x%" PRIx64 "\r\n", len);
 80262f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80262f8:	486d      	ldr	r0, [pc, #436]	; (80264b0 <np_cmd_fw_update_data+0x210>)
 80262fa:	f00b fdd1 	bl	8031ea0 <printf>
        return NP_ERR_CMD_DATA_SIZE;
 80262fe:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8026302:	e1b6      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 8026304:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026308:	f112 0802 	adds.w	r8, r2, #2
 802630c:	f143 0900 	adc.w	r9, r3, #0
 8026310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026312:	685b      	ldr	r3, [r3, #4]
 8026314:	2200      	movs	r2, #0
 8026316:	469a      	mov	sl, r3
 8026318:	4693      	mov	fp, r2
 802631a:	45d9      	cmp	r9, fp
 802631c:	bf08      	it	eq
 802631e:	45d0      	cmpeq	r8, sl
 8026320:	d010      	beq.n	8026344 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("Buffer len 0x%lx is bigger then command 0x%" PRIx64 "\r\n",
 8026322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026324:	6859      	ldr	r1, [r3, #4]
 8026326:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802632a:	1c90      	adds	r0, r2, #2
 802632c:	66b8      	str	r0, [r7, #104]	; 0x68
 802632e:	f143 0300 	adc.w	r3, r3, #0
 8026332:	66fb      	str	r3, [r7, #108]	; 0x6c
 8026334:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8026338:	485e      	ldr	r0, [pc, #376]	; (80264b4 <np_cmd_fw_update_data+0x214>)
 802633a:	f00b fdb1 	bl	8031ea0 <printf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 802633e:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8026342:	e196      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8026344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026348:	2b00      	cmp	r3, #0
 802634a:	d105      	bne.n	8026358 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("Write address is not set\r\n");
 802634c:	485a      	ldr	r0, [pc, #360]	; (80264b8 <np_cmd_fw_update_data+0x218>)
 802634e:	f00b fdff 	bl	8031f50 <puts>
        return NP_ERR_ADDR_INVALID;
 8026352:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8026356:	e18c      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8026358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802635a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802635e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8026362:	2200      	movs	r2, #0
 8026364:	663b      	str	r3, [r7, #96]	; 0x60
 8026366:	667a      	str	r2, [r7, #100]	; 0x64
 8026368:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802636c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8026370:	4621      	mov	r1, r4
 8026372:	1889      	adds	r1, r1, r2
 8026374:	65b9      	str	r1, [r7, #88]	; 0x58
 8026376:	4629      	mov	r1, r5
 8026378:	eb43 0101 	adc.w	r1, r3, r1
 802637c:	65f9      	str	r1, [r7, #92]	; 0x5c
 802637e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026380:	6a1b      	ldr	r3, [r3, #32]
 8026382:	2200      	movs	r2, #0
 8026384:	653b      	str	r3, [r7, #80]	; 0x50
 8026386:	657a      	str	r2, [r7, #84]	; 0x54
 8026388:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 802638c:	4623      	mov	r3, r4
 802638e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8026392:	4602      	mov	r2, r0
 8026394:	4293      	cmp	r3, r2
 8026396:	462b      	mov	r3, r5
 8026398:	460a      	mov	r2, r1
 802639a:	4193      	sbcs	r3, r2
 802639c:	d20a      	bcs.n	80263b4 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 802639e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263a0:	6a1a      	ldr	r2, [r3, #32]
 80263a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80263a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80263ac:	1ad3      	subs	r3, r2, r3
 80263ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80263b2:	e003      	b.n	80263bc <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 80263b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80263b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80263bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263be:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80263c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80263c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80263cc:	18d0      	adds	r0, r2, r3
 80263ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80263d2:	3302      	adds	r3, #2
 80263d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80263d8:	4619      	mov	r1, r3
 80263da:	f00b fe81 	bl	80320e0 <memcpy>
    prog->page.offset += write_len;
 80263de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80263e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80263e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80263ec:	441a      	add	r2, r3
 80263ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80263f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 80263f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80263fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80263fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8026402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026404:	6a1b      	ldr	r3, [r3, #32]
 8026406:	429a      	cmp	r2, r3
 8026408:	f040 8082 	bne.w	8026510 <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 802640c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802640e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8026412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026414:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802641a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802641e:	1886      	adds	r6, r0, r2
 8026420:	64be      	str	r6, [r7, #72]	; 0x48
 8026422:	eb41 0303 	adc.w	r3, r1, r3
 8026426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026428:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 802642c:	460b      	mov	r3, r1
 802642e:	429c      	cmp	r4, r3
 8026430:	4613      	mov	r3, r2
 8026432:	eb75 0303 	sbcs.w	r3, r5, r3
 8026436:	d319      	bcc.n	802646c <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("Write address 0x%" PRIx64
 8026438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802643a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 802643e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026440:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8026444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026446:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802644a:	1886      	adds	r6, r0, r2
 802644c:	643e      	str	r6, [r7, #64]	; 0x40
 802644e:	eb41 0303 	adc.w	r3, r1, r3
 8026452:	647b      	str	r3, [r7, #68]	; 0x44
 8026454:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8026458:	e9cd 2300 	strd	r2, r3, [sp]
 802645c:	4622      	mov	r2, r4
 802645e:	462b      	mov	r3, r5
 8026460:	4816      	ldr	r0, [pc, #88]	; (80264bc <np_cmd_fw_update_data+0x21c>)
 8026462:	f00b fd1d 	bl	8031ea0 <printf>
                " is more then flash size 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8026466:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802646a:	e102      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 802646c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802646e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026472:	4613      	mov	r3, r2
 8026474:	4618      	mov	r0, r3
 8026476:	f7fc fec3 	bl	8023200 <flash_page_erase>
 802647a:	4603      	mov	r3, r0
 802647c:	2b00      	cmp	r3, #0
 802647e:	da02      	bge.n	8026486 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8026480:	f04f 33ff 	mov.w	r3, #4294967295
 8026484:	e0f5      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8026486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802648c:	4610      	mov	r0, r2
 802648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026490:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8026494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026496:	6a1b      	ldr	r3, [r3, #32]
 8026498:	461a      	mov	r2, r3
 802649a:	f7fc fed4 	bl	8023246 <flash_write>
 802649e:	4603      	mov	r3, r0
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	da0d      	bge.n	80264c0 <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 80264a4:	f04f 33ff 	mov.w	r3, #4294967295
 80264a8:	e0e3      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
 80264aa:	bf00      	nop
 80264ac:	0803700c 	.word	0x0803700c
 80264b0:	08037448 	.word	0x08037448
 80264b4:	0803746c 	.word	0x0803746c
 80264b8:	080370a0 	.word	0x080370a0
 80264bc:	080374a4 	.word	0x080374a4
        }

        prog->addr += prog->page_size;
 80264c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80264c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264c8:	6a1b      	ldr	r3, [r3, #32]
 80264ca:	2200      	movs	r2, #0
 80264cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80264ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80264d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80264d4:	4623      	mov	r3, r4
 80264d6:	18c3      	adds	r3, r0, r3
 80264d8:	633b      	str	r3, [r7, #48]	; 0x30
 80264da:	462b      	mov	r3, r5
 80264dc:	eb41 0303 	adc.w	r3, r1, r3
 80264e0:	637b      	str	r3, [r7, #52]	; 0x34
 80264e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80264e8:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 80264ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80264ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80264f2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80264f6:	3301      	adds	r3, #1
 80264f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80264fa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80264fe:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8026502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026504:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026508:	461a      	mov	r2, r3
 802650a:	2300      	movs	r3, #0
 802650c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8026510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026514:	2200      	movs	r2, #0
 8026516:	62bb      	str	r3, [r7, #40]	; 0x28
 8026518:	62fa      	str	r2, [r7, #44]	; 0x2c
 802651a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802651e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8026522:	4621      	mov	r1, r4
 8026524:	1a51      	subs	r1, r2, r1
 8026526:	6039      	str	r1, [r7, #0]
 8026528:	4629      	mov	r1, r5
 802652a:	eb63 0301 	sbc.w	r3, r3, r1
 802652e:	607b      	str	r3, [r7, #4]
 8026530:	e9d7 3400 	ldrd	r3, r4, [r7]
 8026534:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8026538:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 802653c:	4313      	orrs	r3, r2
 802653e:	d018      	beq.n	8026572 <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8026540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026542:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8026546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802654a:	1c9a      	adds	r2, r3, #2
 802654c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8026550:	4413      	add	r3, r2
 8026552:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8026554:	4619      	mov	r1, r3
 8026556:	f00b fdc3 	bl	80320e0 <memcpy>
        prog->page.offset += bytes_left;
 802655a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802655c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026560:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8026564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8026566:	4413      	add	r3, r2
 8026568:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802656a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802656e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8026572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026574:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026578:	3310      	adds	r3, #16
 802657a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802657e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8026582:	1884      	adds	r4, r0, r2
 8026584:	623c      	str	r4, [r7, #32]
 8026586:	eb41 0303 	adc.w	r3, r1, r3
 802658a:	627b      	str	r3, [r7, #36]	; 0x24
 802658c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802658e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026592:	3310      	adds	r3, #16
 8026594:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8026598:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 802659c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802659e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80265a2:	3310      	adds	r3, #16
 80265a4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80265a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80265aa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80265ae:	3310      	adds	r3, #16
 80265b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265b4:	1a84      	subs	r4, r0, r2
 80265b6:	61bc      	str	r4, [r7, #24]
 80265b8:	eb61 0303 	sbc.w	r3, r1, r3
 80265bc:	61fb      	str	r3, [r7, #28]
 80265be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80265c0:	6a1b      	ldr	r3, [r3, #32]
 80265c2:	2200      	movs	r2, #0
 80265c4:	613b      	str	r3, [r7, #16]
 80265c6:	617a      	str	r2, [r7, #20]
 80265c8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80265cc:	4623      	mov	r3, r4
 80265ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80265d2:	4602      	mov	r2, r0
 80265d4:	4293      	cmp	r3, r2
 80265d6:	462b      	mov	r3, r5
 80265d8:	460a      	mov	r2, r1
 80265da:	4193      	sbcs	r3, r2
 80265dc:	d20c      	bcs.n	80265f8 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 80265de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80265e0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80265e4:	3310      	adds	r3, #16
 80265e6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80265ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80265ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 80265f0:	4299      	cmp	r1, r3
 80265f2:	bf08      	it	eq
 80265f4:	4290      	cmpeq	r0, r2
 80265f6:	d11b      	bne.n	8026630 <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 80265f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80265fa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80265fe:	3310      	adds	r3, #16
 8026600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026604:	4610      	mov	r0, r2
 8026606:	4619      	mov	r1, r3
 8026608:	f7fe fbca 	bl	8024da0 <np_send_write_ack>
 802660c:	4603      	mov	r3, r0
 802660e:	2b00      	cmp	r3, #0
 8026610:	d002      	beq.n	8026618 <np_cmd_fw_update_data+0x378>
            return -1;
 8026612:	f04f 33ff 	mov.w	r3, #4294967295
 8026616:	e02c      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8026618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802661a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802661e:	3310      	adds	r3, #16
 8026620:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026626:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802662a:	3310      	adds	r3, #16
 802662c:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8026630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026632:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026636:	3310      	adds	r3, #16
 8026638:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802663c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 802663e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8026642:	4290      	cmp	r0, r2
 8026644:	eb71 0303 	sbcs.w	r3, r1, r3
 8026648:	d212      	bcs.n	8026670 <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("Actual write data length 0x%" PRIx64
 802664a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802664c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8026650:	3310      	adds	r3, #16
 8026652:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8026658:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802665c:	e9cd 2300 	strd	r2, r3, [sp]
 8026660:	4602      	mov	r2, r0
 8026662:	460b      	mov	r3, r1
 8026664:	4805      	ldr	r0, [pc, #20]	; (802667c <np_cmd_fw_update_data+0x3dc>)
 8026666:	f00b fc1b 	bl	8031ea0 <printf>
            " is more then 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 802666a:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 802666e:	e000      	b.n	8026672 <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8026670:	2300      	movs	r3, #0
}
 8026672:	4618      	mov	r0, r3
 8026674:	3794      	adds	r7, #148	; 0x94
 8026676:	46bd      	mov	sp, r7
 8026678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802667c:	08037100 	.word	0x08037100

08026680 <np_cmd_fw_update_end>:

static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8026680:	b580      	push	{r7, lr}
 8026682:	b084      	sub	sp, #16
 8026684:	af00      	add	r7, sp, #0
 8026686:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8026688:	687b      	ldr	r3, [r7, #4]
 802668a:	2200      	movs	r2, #0
 802668c:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 802668e:	687b      	ldr	r3, [r7, #4]
 8026690:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8026694:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8026698:	2b00      	cmp	r3, #0
 802669a:	d00b      	beq.n	80266b4 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("Data of 0x%lx length was not written\r\n",
 802669c:	687b      	ldr	r3, [r7, #4]
 802669e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80266a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80266a6:	4619      	mov	r1, r3
 80266a8:	481d      	ldr	r0, [pc, #116]	; (8026720 <np_cmd_fw_update_end+0xa0>)
 80266aa:	f00b fbf9 	bl	8031ea0 <printf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 80266ae:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80266b2:	e030      	b.n	8026716 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 80266b4:	f107 030c 	add.w	r3, r7, #12
 80266b8:	4618      	mov	r0, r3
 80266ba:	f7ff fc7d 	bl	8025fb8 <np_boot_config_read>
 80266be:	4603      	mov	r3, r0
 80266c0:	2b00      	cmp	r3, #0
 80266c2:	d002      	beq.n	80266ca <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 80266c4:	f04f 33ff 	mov.w	r3, #4294967295
 80266c8:	e025      	b.n	8026716 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 80266ca:	687b      	ldr	r3, [r7, #4]
 80266cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80266d0:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80266d4:	2bff      	cmp	r3, #255	; 0xff
 80266d6:	d105      	bne.n	80266e4 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 80266d8:	7b3a      	ldrb	r2, [r7, #12]
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80266e0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80266ea:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80266ee:	2b00      	cmp	r3, #0
 80266f0:	bf0c      	ite	eq
 80266f2:	2301      	moveq	r3, #1
 80266f4:	2300      	movne	r3, #0
 80266f6:	b2db      	uxtb	r3, r3
 80266f8:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 80266fa:	f107 030c 	add.w	r3, r7, #12
 80266fe:	4618      	mov	r0, r3
 8026700:	f7ff fc70 	bl	8025fe4 <np_boot_config_write>
 8026704:	4603      	mov	r3, r0
 8026706:	2b00      	cmp	r3, #0
 8026708:	d002      	beq.n	8026710 <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 802670a:	f04f 33ff 	mov.w	r3, #4294967295
 802670e:	e002      	b.n	8026716 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8026710:	f7fd fece 	bl	80244b0 <np_send_ok_status>
 8026714:	4603      	mov	r3, r0
}
 8026716:	4618      	mov	r0, r3
 8026718:	3710      	adds	r7, #16
 802671a:	46bd      	mov	sp, r7
 802671c:	bd80      	pop	{r7, pc}
 802671e:	bf00      	nop
 8026720:	08037140 	.word	0x08037140

08026724 <np_cmd_fw_update>:

static int np_cmd_fw_update(np_prog_t *prog)
{
 8026724:	b580      	push	{r7, lr}
 8026726:	b084      	sub	sp, #16
 8026728:	af00      	add	r7, sp, #0
 802672a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 802672c:	687b      	ldr	r3, [r7, #4]
 802672e:	681b      	ldr	r3, [r3, #0]
 8026730:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8026732:	2300      	movs	r3, #0
 8026734:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8026736:	68bb      	ldr	r3, [r7, #8]
 8026738:	781b      	ldrb	r3, [r3, #0]
 802673a:	2b0c      	cmp	r3, #12
 802673c:	d013      	beq.n	8026766 <np_cmd_fw_update+0x42>
 802673e:	2b0c      	cmp	r3, #12
 8026740:	dc19      	bgt.n	8026776 <np_cmd_fw_update+0x52>
 8026742:	2b0a      	cmp	r3, #10
 8026744:	d002      	beq.n	802674c <np_cmd_fw_update+0x28>
 8026746:	2b0b      	cmp	r3, #11
 8026748:	d008      	beq.n	802675c <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 802674a:	e014      	b.n	8026776 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 802674c:	2001      	movs	r0, #1
 802674e:	f7fd fd07 	bl	8024160 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8026752:	6878      	ldr	r0, [r7, #4]
 8026754:	f7ff fcaa 	bl	80260ac <np_cmd_fw_update_start>
 8026758:	60f8      	str	r0, [r7, #12]
        break;
 802675a:	e00d      	b.n	8026778 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 802675c:	6878      	ldr	r0, [r7, #4]
 802675e:	f7ff fd9f 	bl	80262a0 <np_cmd_fw_update_data>
 8026762:	60f8      	str	r0, [r7, #12]
        break;
 8026764:	e008      	b.n	8026778 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8026766:	6878      	ldr	r0, [r7, #4]
 8026768:	f7ff ff8a 	bl	8026680 <np_cmd_fw_update_end>
 802676c:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 802676e:	2000      	movs	r0, #0
 8026770:	f7fd fcf6 	bl	8024160 <led_wr_set>
        break;
 8026774:	e000      	b.n	8026778 <np_cmd_fw_update+0x54>
        break;
 8026776:	bf00      	nop
    }

    if (ret < 0)
 8026778:	68fb      	ldr	r3, [r7, #12]
 802677a:	2b00      	cmp	r3, #0
 802677c:	da02      	bge.n	8026784 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 802677e:	2000      	movs	r0, #0
 8026780:	f7fd fcee 	bl	8024160 <led_wr_set>

    return ret;
 8026784:	68fb      	ldr	r3, [r7, #12]
}
 8026786:	4618      	mov	r0, r3
 8026788:	3710      	adds	r7, #16
 802678a:	46bd      	mov	sp, r7
 802678c:	bd80      	pop	{r7, pc}

0802678e <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_D, 0, np_cmd_fw_update },
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },    
};

static bool np_cmd_is_valid(np_cmd_code_t code)
{
 802678e:	b480      	push	{r7}
 8026790:	b083      	sub	sp, #12
 8026792:	af00      	add	r7, sp, #0
 8026794:	4603      	mov	r3, r0
 8026796:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8026798:	79fb      	ldrb	r3, [r7, #7]
 802679a:	2b0c      	cmp	r3, #12
 802679c:	bf94      	ite	ls
 802679e:	2301      	movls	r3, #1
 80267a0:	2300      	movhi	r3, #0
 80267a2:	b2db      	uxtb	r3, r3
}
 80267a4:	4618      	mov	r0, r3
 80267a6:	370c      	adds	r7, #12
 80267a8:	46bd      	mov	sp, r7
 80267aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267ae:	4770      	bx	lr

080267b0 <np_cmd_handler>:

static int np_cmd_handler(np_prog_t *prog)
{
 80267b0:	b580      	push	{r7, lr}
 80267b2:	b084      	sub	sp, #16
 80267b4:	af00      	add	r7, sp, #0
 80267b6:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 80267b8:	687b      	ldr	r3, [r7, #4]
 80267ba:	685b      	ldr	r3, [r3, #4]
 80267bc:	2b00      	cmp	r3, #0
 80267be:	d108      	bne.n	80267d2 <np_cmd_handler+0x22>
    {
        ERROR_PRINT("Wrong buffer length for command %lu\r\n",
 80267c0:	687b      	ldr	r3, [r7, #4]
 80267c2:	685b      	ldr	r3, [r3, #4]
 80267c4:	4619      	mov	r1, r3
 80267c6:	4823      	ldr	r0, [pc, #140]	; (8026854 <np_cmd_handler+0xa4>)
 80267c8:	f00b fb6a 	bl	8031ea0 <printf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80267cc:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80267d0:	e03b      	b.n	802684a <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 80267d8:	68fb      	ldr	r3, [r7, #12]
 80267da:	781b      	ldrb	r3, [r3, #0]
 80267dc:	4618      	mov	r0, r3
 80267de:	f7ff ffd6 	bl	802678e <np_cmd_is_valid>
 80267e2:	4603      	mov	r3, r0
 80267e4:	f083 0301 	eor.w	r3, r3, #1
 80267e8:	b2db      	uxtb	r3, r3
 80267ea:	2b00      	cmp	r3, #0
 80267ec:	d008      	beq.n	8026800 <np_cmd_handler+0x50>
    {
        ERROR_PRINT("Invalid cmd code %d\r\n", cmd->code);
 80267ee:	68fb      	ldr	r3, [r7, #12]
 80267f0:	781b      	ldrb	r3, [r3, #0]
 80267f2:	4619      	mov	r1, r3
 80267f4:	4818      	ldr	r0, [pc, #96]	; (8026858 <np_cmd_handler+0xa8>)
 80267f6:	f00b fb53 	bl	8031ea0 <printf>
        return NP_ERR_CMD_INVALID;
 80267fa:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 80267fe:	e024      	b.n	802684a <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026804:	2b00      	cmp	r3, #0
 8026806:	d112      	bne.n	802682e <np_cmd_handler+0x7e>
 8026808:	68fb      	ldr	r3, [r7, #12]
 802680a:	781b      	ldrb	r3, [r3, #0]
 802680c:	4619      	mov	r1, r3
 802680e:	4a13      	ldr	r2, [pc, #76]	; (802685c <np_cmd_handler+0xac>)
 8026810:	460b      	mov	r3, r1
 8026812:	005b      	lsls	r3, r3, #1
 8026814:	440b      	add	r3, r1
 8026816:	009b      	lsls	r3, r3, #2
 8026818:	4413      	add	r3, r2
 802681a:	3304      	adds	r3, #4
 802681c:	781b      	ldrb	r3, [r3, #0]
 802681e:	2b00      	cmp	r3, #0
 8026820:	d005      	beq.n	802682e <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("Chip is not configured\r\n");
 8026822:	480f      	ldr	r0, [pc, #60]	; (8026860 <np_cmd_handler+0xb0>)
 8026824:	f00b fb94 	bl	8031f50 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8026828:	f06f 0369 	mvn.w	r3, #105	; 0x69
 802682c:	e00d      	b.n	802684a <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 802682e:	68fb      	ldr	r3, [r7, #12]
 8026830:	781b      	ldrb	r3, [r3, #0]
 8026832:	4619      	mov	r1, r3
 8026834:	4a09      	ldr	r2, [pc, #36]	; (802685c <np_cmd_handler+0xac>)
 8026836:	460b      	mov	r3, r1
 8026838:	005b      	lsls	r3, r3, #1
 802683a:	440b      	add	r3, r1
 802683c:	009b      	lsls	r3, r3, #2
 802683e:	4413      	add	r3, r2
 8026840:	3308      	adds	r3, #8
 8026842:	681b      	ldr	r3, [r3, #0]
 8026844:	6878      	ldr	r0, [r7, #4]
 8026846:	4798      	blx	r3
 8026848:	4603      	mov	r3, r0
}
 802684a:	4618      	mov	r0, r3
 802684c:	3710      	adds	r7, #16
 802684e:	46bd      	mov	sp, r7
 8026850:	bd80      	pop	{r7, pc}
 8026852:	bf00      	nop
 8026854:	080374e4 	.word	0x080374e4
 8026858:	08037514 	.word	0x08037514
 802685c:	2000004c 	.word	0x2000004c
 8026860:	08037534 	.word	0x08037534

08026864 <np_packet_handler>:

static void np_packet_handler(np_prog_t *prog)
{
 8026864:	b580      	push	{r7, lr}
 8026866:	b084      	sub	sp, #16
 8026868:	af00      	add	r7, sp, #0
 802686a:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 802686c:	4b12      	ldr	r3, [pc, #72]	; (80268b8 <np_packet_handler+0x54>)
 802686e:	681b      	ldr	r3, [r3, #0]
 8026870:	689b      	ldr	r3, [r3, #8]
 8026872:	687a      	ldr	r2, [r7, #4]
 8026874:	4610      	mov	r0, r2
 8026876:	4798      	blx	r3
 8026878:	4602      	mov	r2, r0
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 802687e:	687b      	ldr	r3, [r7, #4]
 8026880:	685b      	ldr	r3, [r3, #4]
 8026882:	2b00      	cmp	r3, #0
 8026884:	d012      	beq.n	80268ac <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8026886:	6878      	ldr	r0, [r7, #4]
 8026888:	f7ff ff92 	bl	80267b0 <np_cmd_handler>
 802688c:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 802688e:	4b0a      	ldr	r3, [pc, #40]	; (80268b8 <np_packet_handler+0x54>)
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	68db      	ldr	r3, [r3, #12]
 8026894:	4798      	blx	r3

        if (ret < 0)
 8026896:	68fb      	ldr	r3, [r7, #12]
 8026898:	2b00      	cmp	r3, #0
 802689a:	dae7      	bge.n	802686c <np_packet_handler+0x8>
            np_send_error(-ret);
 802689c:	68fb      	ldr	r3, [r7, #12]
 802689e:	b2db      	uxtb	r3, r3
 80268a0:	425b      	negs	r3, r3
 80268a2:	b2db      	uxtb	r3, r3
 80268a4:	4618      	mov	r0, r3
 80268a6:	f7fd fe1f 	bl	80244e8 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 80268aa:	e7df      	b.n	802686c <np_packet_handler+0x8>
            break;
 80268ac:	bf00      	nop
    }
    while (1);
}
 80268ae:	bf00      	nop
 80268b0:	3710      	adds	r7, #16
 80268b2:	46bd      	mov	sp, r7
 80268b4:	bd80      	pop	{r7, pc}
 80268b6:	bf00      	nop
 80268b8:	20001310 	.word	0x20001310

080268bc <np_nand_handler>:

static void np_nand_handler(np_prog_t *prog)
{
 80268bc:	b580      	push	{r7, lr}
 80268be:	b082      	sub	sp, #8
 80268c0:	af00      	add	r7, sp, #0
 80268c2:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80268ca:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80268ce:	2b00      	cmp	r3, #0
 80268d0:	d008      	beq.n	80268e4 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 80268d2:	6878      	ldr	r0, [r7, #4]
 80268d4:	f7fe fc28 	bl	8025128 <np_nand_handle_status>
 80268d8:	4603      	mov	r3, r0
 80268da:	2b00      	cmp	r3, #0
 80268dc:	d002      	beq.n	80268e4 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 80268de:	2099      	movs	r0, #153	; 0x99
 80268e0:	f7fd fe02 	bl	80244e8 <np_send_error>
    }
}
 80268e4:	bf00      	nop
 80268e6:	3708      	adds	r7, #8
 80268e8:	46bd      	mov	sp, r7
 80268ea:	bd80      	pop	{r7, pc}

080268ec <np_init>:

void np_init()
{
 80268ec:	b480      	push	{r7}
 80268ee:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 80268f0:	4b05      	ldr	r3, [pc, #20]	; (8026908 <np_init+0x1c>)
 80268f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80268f6:	22ff      	movs	r2, #255	; 0xff
 80268f8:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 80268fc:	bf00      	nop
 80268fe:	46bd      	mov	sp, r7
 8026900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026904:	4770      	bx	lr
 8026906:	bf00      	nop
 8026908:	20001318 	.word	0x20001318

0802690c <np_handler>:

void np_handler()
{
 802690c:	b580      	push	{r7, lr}
 802690e:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8026910:	4803      	ldr	r0, [pc, #12]	; (8026920 <np_handler+0x14>)
 8026912:	f7ff ffa7 	bl	8026864 <np_packet_handler>
    np_nand_handler(&prog);
 8026916:	4802      	ldr	r0, [pc, #8]	; (8026920 <np_handler+0x14>)
 8026918:	f7ff ffd0 	bl	80268bc <np_nand_handler>
}
 802691c:	bf00      	nop
 802691e:	bd80      	pop	{r7, pc}
 8026920:	20001318 	.word	0x20001318

08026924 <np_comm_register>:

int np_comm_register(np_comm_cb_t *cb)
{
 8026924:	b480      	push	{r7}
 8026926:	b083      	sub	sp, #12
 8026928:	af00      	add	r7, sp, #0
 802692a:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 802692c:	4a04      	ldr	r2, [pc, #16]	; (8026940 <np_comm_register+0x1c>)
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	6013      	str	r3, [r2, #0]

    return 0;
 8026932:	2300      	movs	r3, #0
}
 8026934:	4618      	mov	r0, r3
 8026936:	370c      	adds	r7, #12
 8026938:	46bd      	mov	sp, r7
 802693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802693e:	4770      	bx	lr
 8026940:	20001310 	.word	0x20001310

08026944 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8026944:	b580      	push	{r7, lr}
 8026946:	b086      	sub	sp, #24
 8026948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 802694a:	1d3b      	adds	r3, r7, #4
 802694c:	2200      	movs	r2, #0
 802694e:	601a      	str	r2, [r3, #0]
 8026950:	605a      	str	r2, [r3, #4]
 8026952:	609a      	str	r2, [r3, #8]
 8026954:	60da      	str	r2, [r3, #12]
 8026956:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8026958:	2300      	movs	r3, #0
 802695a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 802695c:	4b24      	ldr	r3, [pc, #144]	; (80269f0 <MX_RTC_Init+0xac>)
 802695e:	4a25      	ldr	r2, [pc, #148]	; (80269f4 <MX_RTC_Init+0xb0>)
 8026960:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8026962:	4b23      	ldr	r3, [pc, #140]	; (80269f0 <MX_RTC_Init+0xac>)
 8026964:	2200      	movs	r2, #0
 8026966:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8026968:	4b21      	ldr	r3, [pc, #132]	; (80269f0 <MX_RTC_Init+0xac>)
 802696a:	227f      	movs	r2, #127	; 0x7f
 802696c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 802696e:	4b20      	ldr	r3, [pc, #128]	; (80269f0 <MX_RTC_Init+0xac>)
 8026970:	22ff      	movs	r2, #255	; 0xff
 8026972:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8026974:	4b1e      	ldr	r3, [pc, #120]	; (80269f0 <MX_RTC_Init+0xac>)
 8026976:	2200      	movs	r2, #0
 8026978:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 802697a:	4b1d      	ldr	r3, [pc, #116]	; (80269f0 <MX_RTC_Init+0xac>)
 802697c:	2200      	movs	r2, #0
 802697e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8026980:	4b1b      	ldr	r3, [pc, #108]	; (80269f0 <MX_RTC_Init+0xac>)
 8026982:	2200      	movs	r2, #0
 8026984:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8026986:	481a      	ldr	r0, [pc, #104]	; (80269f0 <MX_RTC_Init+0xac>)
 8026988:	f004 fc36 	bl	802b1f8 <HAL_RTC_Init>
 802698c:	4603      	mov	r3, r0
 802698e:	2b00      	cmp	r3, #0
 8026990:	d001      	beq.n	8026996 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8026992:	f7fd fcef 	bl	8024374 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8026996:	2300      	movs	r3, #0
 8026998:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 802699a:	2300      	movs	r3, #0
 802699c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 802699e:	2300      	movs	r3, #0
 80269a0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80269a2:	2300      	movs	r3, #0
 80269a4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80269a6:	2300      	movs	r3, #0
 80269a8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80269aa:	1d3b      	adds	r3, r7, #4
 80269ac:	2201      	movs	r2, #1
 80269ae:	4619      	mov	r1, r3
 80269b0:	480f      	ldr	r0, [pc, #60]	; (80269f0 <MX_RTC_Init+0xac>)
 80269b2:	f004 fc97 	bl	802b2e4 <HAL_RTC_SetTime>
 80269b6:	4603      	mov	r3, r0
 80269b8:	2b00      	cmp	r3, #0
 80269ba:	d001      	beq.n	80269c0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80269bc:	f7fd fcda 	bl	8024374 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80269c0:	2301      	movs	r3, #1
 80269c2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80269c4:	2301      	movs	r3, #1
 80269c6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80269c8:	2301      	movs	r3, #1
 80269ca:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80269cc:	2300      	movs	r3, #0
 80269ce:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80269d0:	463b      	mov	r3, r7
 80269d2:	2201      	movs	r2, #1
 80269d4:	4619      	mov	r1, r3
 80269d6:	4806      	ldr	r0, [pc, #24]	; (80269f0 <MX_RTC_Init+0xac>)
 80269d8:	f004 fd1e 	bl	802b418 <HAL_RTC_SetDate>
 80269dc:	4603      	mov	r3, r0
 80269de:	2b00      	cmp	r3, #0
 80269e0:	d001      	beq.n	80269e6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80269e2:	f7fd fcc7 	bl	8024374 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80269e6:	bf00      	nop
 80269e8:	3718      	adds	r7, #24
 80269ea:	46bd      	mov	sp, r7
 80269ec:	bd80      	pop	{r7, pc}
 80269ee:	bf00      	nop
 80269f0:	20005768 	.word	0x20005768
 80269f4:	40002800 	.word	0x40002800

080269f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80269f8:	b580      	push	{r7, lr}
 80269fa:	b086      	sub	sp, #24
 80269fc:	af00      	add	r7, sp, #0
 80269fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8026a00:	f107 0308 	add.w	r3, r7, #8
 8026a04:	2200      	movs	r2, #0
 8026a06:	601a      	str	r2, [r3, #0]
 8026a08:	605a      	str	r2, [r3, #4]
 8026a0a:	609a      	str	r2, [r3, #8]
 8026a0c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	681b      	ldr	r3, [r3, #0]
 8026a12:	4a0c      	ldr	r2, [pc, #48]	; (8026a44 <HAL_RTC_MspInit+0x4c>)
 8026a14:	4293      	cmp	r3, r2
 8026a16:	d111      	bne.n	8026a3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8026a18:	2302      	movs	r3, #2
 8026a1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8026a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026a20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8026a22:	f107 0308 	add.w	r3, r7, #8
 8026a26:	4618      	mov	r0, r3
 8026a28:	f004 fb04 	bl	802b034 <HAL_RCCEx_PeriphCLKConfig>
 8026a2c:	4603      	mov	r3, r0
 8026a2e:	2b00      	cmp	r3, #0
 8026a30:	d001      	beq.n	8026a36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8026a32:	f7fd fc9f 	bl	8024374 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8026a36:	4b04      	ldr	r3, [pc, #16]	; (8026a48 <HAL_RTC_MspInit+0x50>)
 8026a38:	2201      	movs	r2, #1
 8026a3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8026a3c:	bf00      	nop
 8026a3e:	3718      	adds	r7, #24
 8026a40:	46bd      	mov	sp, r7
 8026a42:	bd80      	pop	{r7, pc}
 8026a44:	40002800 	.word	0x40002800
 8026a48:	42470e3c 	.word	0x42470e3c

08026a4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8026a4c:	b580      	push	{r7, lr}
 8026a4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8026a50:	4b17      	ldr	r3, [pc, #92]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a52:	4a18      	ldr	r2, [pc, #96]	; (8026ab4 <MX_SPI1_Init+0x68>)
 8026a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8026a56:	4b16      	ldr	r3, [pc, #88]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026a5e:	4b14      	ldr	r3, [pc, #80]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a60:	2200      	movs	r2, #0
 8026a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026a64:	4b12      	ldr	r3, [pc, #72]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a66:	2200      	movs	r2, #0
 8026a68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026a6a:	4b11      	ldr	r3, [pc, #68]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a6c:	2202      	movs	r2, #2
 8026a6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026a70:	4b0f      	ldr	r3, [pc, #60]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a72:	2201      	movs	r2, #1
 8026a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8026a76:	4b0e      	ldr	r3, [pc, #56]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8026a7e:	4b0c      	ldr	r3, [pc, #48]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a80:	2200      	movs	r2, #0
 8026a82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026a84:	4b0a      	ldr	r3, [pc, #40]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a86:	2200      	movs	r2, #0
 8026a88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026a8a:	4b09      	ldr	r3, [pc, #36]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a8c:	2200      	movs	r2, #0
 8026a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026a90:	4b07      	ldr	r3, [pc, #28]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a92:	2200      	movs	r2, #0
 8026a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8026a96:	4b06      	ldr	r3, [pc, #24]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a98:	220a      	movs	r2, #10
 8026a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026a9c:	4804      	ldr	r0, [pc, #16]	; (8026ab0 <MX_SPI1_Init+0x64>)
 8026a9e:	f004 fde0 	bl	802b662 <HAL_SPI_Init>
 8026aa2:	4603      	mov	r3, r0
 8026aa4:	2b00      	cmp	r3, #0
 8026aa6:	d001      	beq.n	8026aac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8026aa8:	f7fd fc64 	bl	8024374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8026aac:	bf00      	nop
 8026aae:	bd80      	pop	{r7, pc}
 8026ab0:	20005788 	.word	0x20005788
 8026ab4:	40013000 	.word	0x40013000

08026ab8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8026ab8:	b580      	push	{r7, lr}
 8026aba:	b08a      	sub	sp, #40	; 0x28
 8026abc:	af00      	add	r7, sp, #0
 8026abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026ac0:	f107 0314 	add.w	r3, r7, #20
 8026ac4:	2200      	movs	r2, #0
 8026ac6:	601a      	str	r2, [r3, #0]
 8026ac8:	605a      	str	r2, [r3, #4]
 8026aca:	609a      	str	r2, [r3, #8]
 8026acc:	60da      	str	r2, [r3, #12]
 8026ace:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	4a2c      	ldr	r2, [pc, #176]	; (8026b88 <HAL_SPI_MspInit+0xd0>)
 8026ad6:	4293      	cmp	r3, r2
 8026ad8:	d151      	bne.n	8026b7e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8026ada:	2300      	movs	r3, #0
 8026adc:	613b      	str	r3, [r7, #16]
 8026ade:	4b2b      	ldr	r3, [pc, #172]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026ae2:	4a2a      	ldr	r2, [pc, #168]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026ae4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8026aea:	4b28      	ldr	r3, [pc, #160]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026af2:	613b      	str	r3, [r7, #16]
 8026af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026af6:	2300      	movs	r3, #0
 8026af8:	60fb      	str	r3, [r7, #12]
 8026afa:	4b24      	ldr	r3, [pc, #144]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026afe:	4a23      	ldr	r2, [pc, #140]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026b00:	f043 0301 	orr.w	r3, r3, #1
 8026b04:	6313      	str	r3, [r2, #48]	; 0x30
 8026b06:	4b21      	ldr	r3, [pc, #132]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b0a:	f003 0301 	and.w	r3, r3, #1
 8026b0e:	60fb      	str	r3, [r7, #12]
 8026b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026b12:	2300      	movs	r3, #0
 8026b14:	60bb      	str	r3, [r7, #8]
 8026b16:	4b1d      	ldr	r3, [pc, #116]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b1a:	4a1c      	ldr	r2, [pc, #112]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026b1c:	f043 0302 	orr.w	r3, r3, #2
 8026b20:	6313      	str	r3, [r2, #48]	; 0x30
 8026b22:	4b1a      	ldr	r3, [pc, #104]	; (8026b8c <HAL_SPI_MspInit+0xd4>)
 8026b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b26:	f003 0302 	and.w	r3, r3, #2
 8026b2a:	60bb      	str	r3, [r7, #8]
 8026b2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8026b2e:	23c0      	movs	r3, #192	; 0xc0
 8026b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026b32:	2302      	movs	r3, #2
 8026b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b36:	2300      	movs	r3, #0
 8026b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026b3a:	2301      	movs	r3, #1
 8026b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026b3e:	2305      	movs	r3, #5
 8026b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026b42:	f107 0314 	add.w	r3, r7, #20
 8026b46:	4619      	mov	r1, r3
 8026b48:	4811      	ldr	r0, [pc, #68]	; (8026b90 <HAL_SPI_MspInit+0xd8>)
 8026b4a:	f001 ff7f 	bl	8028a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8026b4e:	2308      	movs	r3, #8
 8026b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026b52:	2302      	movs	r3, #2
 8026b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b56:	2300      	movs	r3, #0
 8026b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026b5a:	2301      	movs	r3, #1
 8026b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026b5e:	2305      	movs	r3, #5
 8026b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8026b62:	f107 0314 	add.w	r3, r7, #20
 8026b66:	4619      	mov	r1, r3
 8026b68:	480a      	ldr	r0, [pc, #40]	; (8026b94 <HAL_SPI_MspInit+0xdc>)
 8026b6a:	f001 ff6f 	bl	8028a4c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8026b6e:	2200      	movs	r2, #0
 8026b70:	2100      	movs	r1, #0
 8026b72:	2023      	movs	r0, #35	; 0x23
 8026b74:	f001 fb07 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026b78:	2023      	movs	r0, #35	; 0x23
 8026b7a:	f001 fb20 	bl	80281be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8026b7e:	bf00      	nop
 8026b80:	3728      	adds	r7, #40	; 0x28
 8026b82:	46bd      	mov	sp, r7
 8026b84:	bd80      	pop	{r7, pc}
 8026b86:	bf00      	nop
 8026b88:	40013000 	.word	0x40013000
 8026b8c:	40023800 	.word	0x40023800
 8026b90:	40020000 	.word	0x40020000
 8026b94:	40020400 	.word	0x40020400

08026b98 <spi_flash_gpio_uninit>:
	  /* USER CODE END SPI1_MspInit 1 */
	  }
}

static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8026b98:	b580      	push	{r7, lr}
 8026b9a:	b082      	sub	sp, #8
 8026b9c:	af00      	add	r7, sp, #0
 8026b9e:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 8026ba0:	687b      	ldr	r3, [r7, #4]
 8026ba2:	681b      	ldr	r3, [r3, #0]
 8026ba4:	4a0b      	ldr	r2, [pc, #44]	; (8026bd4 <spi_flash_gpio_uninit+0x3c>)
 8026ba6:	4293      	cmp	r3, r2
 8026ba8:	d110      	bne.n	8026bcc <spi_flash_gpio_uninit+0x34>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8026baa:	4b0b      	ldr	r3, [pc, #44]	; (8026bd8 <spi_flash_gpio_uninit+0x40>)
 8026bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026bae:	4a0a      	ldr	r2, [pc, #40]	; (8026bd8 <spi_flash_gpio_uninit+0x40>)
 8026bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026bb4:	6453      	str	r3, [r2, #68]	; 0x44
	      PA6     ------> SPI1_MISO
	      PA7     ------> SPI1_MOSI
	      PB3     ------> SPI1_SCK
	      PE2     ------> SPI1_CS
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8026bb6:	21c0      	movs	r1, #192	; 0xc0
 8026bb8:	4808      	ldr	r0, [pc, #32]	; (8026bdc <spi_flash_gpio_uninit+0x44>)
 8026bba:	f002 f8e3 	bl	8028d84 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8026bbe:	2108      	movs	r1, #8
 8026bc0:	4807      	ldr	r0, [pc, #28]	; (8026be0 <spi_flash_gpio_uninit+0x48>)
 8026bc2:	f002 f8df 	bl	8028d84 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8026bc6:	2023      	movs	r0, #35	; 0x23
 8026bc8:	f001 fb07 	bl	80281da <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8026bcc:	bf00      	nop
 8026bce:	3708      	adds	r7, #8
 8026bd0:	46bd      	mov	sp, r7
 8026bd2:	bd80      	pop	{r7, pc}
 8026bd4:	40013000 	.word	0x40013000
 8026bd8:	40023800 	.word	0x40023800
 8026bdc:	40020000 	.word	0x40020000
 8026be0:	40020400 	.word	0x40020400

08026be4 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8026be4:	b580      	push	{r7, lr}
 8026be6:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026be8:	2200      	movs	r2, #0
 8026bea:	2104      	movs	r1, #4
 8026bec:	4802      	ldr	r0, [pc, #8]	; (8026bf8 <spi_flash_select_chip+0x14>)
 8026bee:	f002 f9c5 	bl	8028f7c <HAL_GPIO_WritePin>
}
 8026bf2:	bf00      	nop
 8026bf4:	bd80      	pop	{r7, pc}
 8026bf6:	bf00      	nop
 8026bf8:	40021000 	.word	0x40021000

08026bfc <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026bfc:	b580      	push	{r7, lr}
 8026bfe:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026c00:	2201      	movs	r2, #1
 8026c02:	2104      	movs	r1, #4
 8026c04:	4802      	ldr	r0, [pc, #8]	; (8026c10 <spi_flash_deselect_chip+0x14>)
 8026c06:	f002 f9b9 	bl	8028f7c <HAL_GPIO_WritePin>
}
 8026c0a:	bf00      	nop
 8026c0c:	bd80      	pop	{r7, pc}
 8026c0e:	bf00      	nop
 8026c10:	40021000 	.word	0x40021000

08026c14 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026c14:	b480      	push	{r7}
 8026c16:	b085      	sub	sp, #20
 8026c18:	af00      	add	r7, sp, #0
 8026c1a:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026c1c:	4b1f      	ldr	r3, [pc, #124]	; (8026c9c <spi_flash_get_baud_rate_prescaler+0x88>)
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	4a1f      	ldr	r2, [pc, #124]	; (8026ca0 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8026c22:	fba2 2303 	umull	r2, r3, r2, r3
 8026c26:	099b      	lsrs	r3, r3, #6
 8026c28:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026c2a:	68fb      	ldr	r3, [r7, #12]
 8026c2c:	085b      	lsrs	r3, r3, #1
 8026c2e:	687a      	ldr	r2, [r7, #4]
 8026c30:	429a      	cmp	r2, r3
 8026c32:	d301      	bcc.n	8026c38 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8026c34:	2300      	movs	r3, #0
 8026c36:	e02a      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026c38:	68fb      	ldr	r3, [r7, #12]
 8026c3a:	089b      	lsrs	r3, r3, #2
 8026c3c:	687a      	ldr	r2, [r7, #4]
 8026c3e:	429a      	cmp	r2, r3
 8026c40:	d301      	bcc.n	8026c46 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 8026c42:	2308      	movs	r3, #8
 8026c44:	e023      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8026c46:	68fb      	ldr	r3, [r7, #12]
 8026c48:	08db      	lsrs	r3, r3, #3
 8026c4a:	687a      	ldr	r2, [r7, #4]
 8026c4c:	429a      	cmp	r2, r3
 8026c4e:	d301      	bcc.n	8026c54 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8026c50:	2310      	movs	r3, #16
 8026c52:	e01c      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8026c54:	68fb      	ldr	r3, [r7, #12]
 8026c56:	091b      	lsrs	r3, r3, #4
 8026c58:	687a      	ldr	r2, [r7, #4]
 8026c5a:	429a      	cmp	r2, r3
 8026c5c:	d301      	bcc.n	8026c62 <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 8026c5e:	2318      	movs	r3, #24
 8026c60:	e015      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8026c62:	68fb      	ldr	r3, [r7, #12]
 8026c64:	095b      	lsrs	r3, r3, #5
 8026c66:	687a      	ldr	r2, [r7, #4]
 8026c68:	429a      	cmp	r2, r3
 8026c6a:	d301      	bcc.n	8026c70 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8026c6c:	2320      	movs	r3, #32
 8026c6e:	e00e      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026c70:	68fb      	ldr	r3, [r7, #12]
 8026c72:	099b      	lsrs	r3, r3, #6
 8026c74:	687a      	ldr	r2, [r7, #4]
 8026c76:	429a      	cmp	r2, r3
 8026c78:	d301      	bcc.n	8026c7e <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 8026c7a:	2328      	movs	r3, #40	; 0x28
 8026c7c:	e007      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8026c7e:	68fb      	ldr	r3, [r7, #12]
 8026c80:	09db      	lsrs	r3, r3, #7
 8026c82:	687a      	ldr	r2, [r7, #4]
 8026c84:	429a      	cmp	r2, r3
 8026c86:	d301      	bcc.n	8026c8c <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 8026c88:	2330      	movs	r3, #48	; 0x30
 8026c8a:	e000      	b.n	8026c8e <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 8026c8c:	2338      	movs	r3, #56	; 0x38
}
 8026c8e:	4618      	mov	r0, r3
 8026c90:	3714      	adds	r7, #20
 8026c92:	46bd      	mov	sp, r7
 8026c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c98:	4770      	bx	lr
 8026c9a:	bf00      	nop
 8026c9c:	20000138 	.word	0x20000138
 8026ca0:	10624dd3 	.word	0x10624dd3

08026ca4 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026ca4:	b590      	push	{r4, r7, lr}
 8026ca6:	b083      	sub	sp, #12
 8026ca8:	af00      	add	r7, sp, #0
 8026caa:	6078      	str	r0, [r7, #4]
 8026cac:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 8026cae:	683b      	ldr	r3, [r7, #0]
 8026cb0:	2b0e      	cmp	r3, #14
 8026cb2:	d802      	bhi.n	8026cba <spi_flash_init+0x16>
        return -1;
 8026cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8026cb8:	e046      	b.n	8026d48 <spi_flash_init+0xa4>

    spi_conf = *(spi_conf_t *)conf;
 8026cba:	4b25      	ldr	r3, [pc, #148]	; (8026d50 <spi_flash_init+0xac>)
 8026cbc:	687a      	ldr	r2, [r7, #4]
 8026cbe:	4614      	mov	r4, r2
 8026cc0:	6820      	ldr	r0, [r4, #0]
 8026cc2:	6861      	ldr	r1, [r4, #4]
 8026cc4:	68a2      	ldr	r2, [r4, #8]
 8026cc6:	c307      	stmia	r3!, {r0, r1, r2}
 8026cc8:	89a2      	ldrh	r2, [r4, #12]
 8026cca:	7ba1      	ldrb	r1, [r4, #14]
 8026ccc:	801a      	strh	r2, [r3, #0]
 8026cce:	460a      	mov	r2, r1
 8026cd0:	709a      	strb	r2, [r3, #2]

//    spi_flash_gpio_init(&hspi1);

    spi_flash_deselect_chip();
 8026cd2:	f7ff ff93 	bl	8026bfc <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8026cd6:	4b1f      	ldr	r3, [pc, #124]	; (8026d54 <spi_flash_init+0xb0>)
 8026cd8:	4a1f      	ldr	r2, [pc, #124]	; (8026d58 <spi_flash_init+0xb4>)
 8026cda:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8026cdc:	4b1d      	ldr	r3, [pc, #116]	; (8026d54 <spi_flash_init+0xb0>)
 8026cde:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026ce2:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026ce4:	4b1b      	ldr	r3, [pc, #108]	; (8026d54 <spi_flash_init+0xb0>)
 8026ce6:	2200      	movs	r2, #0
 8026ce8:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026cea:	4b1a      	ldr	r3, [pc, #104]	; (8026d54 <spi_flash_init+0xb0>)
 8026cec:	2200      	movs	r2, #0
 8026cee:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026cf0:	4b18      	ldr	r3, [pc, #96]	; (8026d54 <spi_flash_init+0xb0>)
 8026cf2:	2202      	movs	r2, #2
 8026cf4:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026cf6:	4b17      	ldr	r3, [pc, #92]	; (8026d54 <spi_flash_init+0xb0>)
 8026cf8:	2201      	movs	r2, #1
 8026cfa:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8026cfc:	4b15      	ldr	r3, [pc, #84]	; (8026d54 <spi_flash_init+0xb0>)
 8026cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026d02:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8026d04:	4b12      	ldr	r3, [pc, #72]	; (8026d50 <spi_flash_init+0xac>)
 8026d06:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8026d0a:	4618      	mov	r0, r3
 8026d0c:	f7ff ff82 	bl	8026c14 <spi_flash_get_baud_rate_prescaler>
 8026d10:	4603      	mov	r3, r0
 8026d12:	461a      	mov	r2, r3
 8026d14:	4b0f      	ldr	r3, [pc, #60]	; (8026d54 <spi_flash_init+0xb0>)
 8026d16:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026d18:	4b0e      	ldr	r3, [pc, #56]	; (8026d54 <spi_flash_init+0xb0>)
 8026d1a:	2200      	movs	r2, #0
 8026d1c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026d1e:	4b0d      	ldr	r3, [pc, #52]	; (8026d54 <spi_flash_init+0xb0>)
 8026d20:	2200      	movs	r2, #0
 8026d22:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026d24:	4b0b      	ldr	r3, [pc, #44]	; (8026d54 <spi_flash_init+0xb0>)
 8026d26:	2200      	movs	r2, #0
 8026d28:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8026d2a:	4b0a      	ldr	r3, [pc, #40]	; (8026d54 <spi_flash_init+0xb0>)
 8026d2c:	220a      	movs	r2, #10
 8026d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8026d30:	4808      	ldr	r0, [pc, #32]	; (8026d54 <spi_flash_init+0xb0>)
 8026d32:	f004 fc96 	bl	802b662 <HAL_SPI_Init>

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 8026d36:	4b07      	ldr	r3, [pc, #28]	; (8026d54 <spi_flash_init+0xb0>)
 8026d38:	681b      	ldr	r3, [r3, #0]
 8026d3a:	681a      	ldr	r2, [r3, #0]
 8026d3c:	4b05      	ldr	r3, [pc, #20]	; (8026d54 <spi_flash_init+0xb0>)
 8026d3e:	681b      	ldr	r3, [r3, #0]
 8026d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026d44:	601a      	str	r2, [r3, #0]

    return 0;
 8026d46:	2300      	movs	r3, #0
}
 8026d48:	4618      	mov	r0, r3
 8026d4a:	370c      	adds	r7, #12
 8026d4c:	46bd      	mov	sp, r7
 8026d4e:	bd90      	pop	{r4, r7, pc}
 8026d50:	200057e0 	.word	0x200057e0
 8026d54:	20005788 	.word	0x20005788
 8026d58:	40013000 	.word	0x40013000

08026d5c <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8026d5c:	b580      	push	{r7, lr}
 8026d5e:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8026d60:	4806      	ldr	r0, [pc, #24]	; (8026d7c <spi_flash_uninit+0x20>)
 8026d62:	f7ff ff19 	bl	8026b98 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8026d66:	4b05      	ldr	r3, [pc, #20]	; (8026d7c <spi_flash_uninit+0x20>)
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	681a      	ldr	r2, [r3, #0]
 8026d6c:	4b03      	ldr	r3, [pc, #12]	; (8026d7c <spi_flash_uninit+0x20>)
 8026d6e:	681b      	ldr	r3, [r3, #0]
 8026d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026d74:	601a      	str	r2, [r3, #0]
}
 8026d76:	bf00      	nop
 8026d78:	bd80      	pop	{r7, pc}
 8026d7a:	bf00      	nop
 8026d7c:	20005788 	.word	0x20005788

08026d80 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026d80:	b580      	push	{r7, lr}
 8026d82:	b084      	sub	sp, #16
 8026d84:	af00      	add	r7, sp, #0
 8026d86:	4603      	mov	r3, r0
 8026d88:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte;

    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8026d8a:	f107 020f 	add.w	r2, r7, #15
 8026d8e:	1df9      	adds	r1, r7, #7
 8026d90:	2301      	movs	r3, #1
 8026d92:	4804      	ldr	r0, [pc, #16]	; (8026da4 <spi_flash_send_byte+0x24>)
 8026d94:	f004 fcee 	bl	802b774 <HAL_SPI_TransmitReceive_IT>

 	return rx_byte;
 8026d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8026d9a:	4618      	mov	r0, r3
 8026d9c:	3710      	adds	r7, #16
 8026d9e:	46bd      	mov	sp, r7
 8026da0:	bd80      	pop	{r7, pc}
 8026da2:	bf00      	nop
 8026da4:	20005788 	.word	0x20005788

08026da8 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8026da8:	b580      	push	{r7, lr}
 8026daa:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8026dac:	20ff      	movs	r0, #255	; 0xff
 8026dae:	f7ff ffe7 	bl	8026d80 <spi_flash_send_byte>
 8026db2:	4603      	mov	r3, r0
}
 8026db4:	4618      	mov	r0, r3
 8026db6:	bd80      	pop	{r7, pc}

08026db8 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8026db8:	b580      	push	{r7, lr}
 8026dba:	b082      	sub	sp, #8
 8026dbc:	af00      	add	r7, sp, #0
 8026dbe:	4603      	mov	r3, r0
 8026dc0:	460a      	mov	r2, r1
 8026dc2:	71fb      	strb	r3, [r7, #7]
 8026dc4:	4613      	mov	r3, r2
 8026dc6:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8026dc8:	f7ff ff0c 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 8026dcc:	201f      	movs	r0, #31
 8026dce:	f7ff ffd7 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026dd2:	79fb      	ldrb	r3, [r7, #7]
 8026dd4:	4618      	mov	r0, r3
 8026dd6:	f7ff ffd3 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 8026dda:	79bb      	ldrb	r3, [r7, #6]
 8026ddc:	4618      	mov	r0, r3
 8026dde:	f7ff ffcf 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026de2:	f7ff ff0b 	bl	8026bfc <spi_flash_deselect_chip>
}
 8026de6:	bf00      	nop
 8026de8:	3708      	adds	r7, #8
 8026dea:	46bd      	mov	sp, r7
 8026dec:	bd80      	pop	{r7, pc}

08026dee <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 8026dee:	b580      	push	{r7, lr}
 8026df0:	b082      	sub	sp, #8
 8026df2:	af00      	add	r7, sp, #0
 8026df4:	4603      	mov	r3, r0
 8026df6:	6039      	str	r1, [r7, #0]
 8026df8:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 8026dfa:	f7ff fef3 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 8026dfe:	200f      	movs	r0, #15
 8026e00:	f7ff ffbe 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026e04:	79fb      	ldrb	r3, [r7, #7]
 8026e06:	4618      	mov	r0, r3
 8026e08:	f7ff ffba 	bl	8026d80 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 8026e0c:	f7ff ffcc 	bl	8026da8 <spi_flash_read_byte>
 8026e10:	4603      	mov	r3, r0
 8026e12:	461a      	mov	r2, r3
 8026e14:	683b      	ldr	r3, [r7, #0]
 8026e16:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026e18:	f7ff fef0 	bl	8026bfc <spi_flash_deselect_chip>
}
 8026e1c:	bf00      	nop
 8026e1e:	3708      	adds	r7, #8
 8026e20:	46bd      	mov	sp, r7
 8026e22:	bd80      	pop	{r7, pc}

08026e24 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026e24:	b580      	push	{r7, lr}
 8026e26:	b082      	sub	sp, #8
 8026e28:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 8026e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026e2e:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 8026e30:	1cfb      	adds	r3, r7, #3
 8026e32:	4619      	mov	r1, r3
 8026e34:	20c0      	movs	r0, #192	; 0xc0
 8026e36:	f7ff ffda 	bl	8026dee <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 8026e3a:	78fb      	ldrb	r3, [r7, #3]
 8026e3c:	f003 0301 	and.w	r3, r3, #1
 8026e40:	2b00      	cmp	r3, #0
 8026e42:	d002      	beq.n	8026e4a <spi_flash_read_status+0x26>
 8026e44:	687b      	ldr	r3, [r7, #4]
 8026e46:	2b00      	cmp	r3, #0
 8026e48:	d1f2      	bne.n	8026e30 <spi_flash_read_status+0xc>

    if (!timeout)
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d101      	bne.n	8026e54 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 8026e50:	2303      	movs	r3, #3
 8026e52:	e02b      	b.n	8026eac <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 8026e54:	4b17      	ldr	r3, [pc, #92]	; (8026eb4 <spi_flash_read_status+0x90>)
 8026e56:	681b      	ldr	r3, [r3, #0]
 8026e58:	2b03      	cmp	r3, #3
 8026e5a:	d014      	beq.n	8026e86 <spi_flash_read_status+0x62>
 8026e5c:	2b03      	cmp	r3, #3
 8026e5e:	d81d      	bhi.n	8026e9c <spi_flash_read_status+0x78>
 8026e60:	2b01      	cmp	r3, #1
 8026e62:	d002      	beq.n	8026e6a <spi_flash_read_status+0x46>
 8026e64:	2b02      	cmp	r3, #2
 8026e66:	d007      	beq.n	8026e78 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8026e68:	e018      	b.n	8026e9c <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 8026e6a:	78fb      	ldrb	r3, [r7, #3]
 8026e6c:	f003 0304 	and.w	r3, r3, #4
 8026e70:	2b00      	cmp	r3, #0
 8026e72:	d015      	beq.n	8026ea0 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 8026e74:	2302      	movs	r3, #2
 8026e76:	e019      	b.n	8026eac <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 8026e78:	78fb      	ldrb	r3, [r7, #3]
 8026e7a:	f003 0308 	and.w	r3, r3, #8
 8026e7e:	2b00      	cmp	r3, #0
 8026e80:	d010      	beq.n	8026ea4 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 8026e82:	2302      	movs	r3, #2
 8026e84:	e012      	b.n	8026eac <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 8026e86:	4b0c      	ldr	r3, [pc, #48]	; (8026eb8 <spi_flash_read_status+0x94>)
 8026e88:	799a      	ldrb	r2, [r3, #6]
 8026e8a:	78fb      	ldrb	r3, [r7, #3]
 8026e8c:	4013      	ands	r3, r2
 8026e8e:	b2da      	uxtb	r2, r3
 8026e90:	4b09      	ldr	r3, [pc, #36]	; (8026eb8 <spi_flash_read_status+0x94>)
 8026e92:	79db      	ldrb	r3, [r3, #7]
 8026e94:	429a      	cmp	r2, r3
 8026e96:	d107      	bne.n	8026ea8 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 8026e98:	2302      	movs	r3, #2
 8026e9a:	e007      	b.n	8026eac <spi_flash_read_status+0x88>
            break;
 8026e9c:	bf00      	nop
 8026e9e:	e004      	b.n	8026eaa <spi_flash_read_status+0x86>
            break;
 8026ea0:	bf00      	nop
 8026ea2:	e002      	b.n	8026eaa <spi_flash_read_status+0x86>
            break;
 8026ea4:	bf00      	nop
 8026ea6:	e000      	b.n	8026eaa <spi_flash_read_status+0x86>
            break;
 8026ea8:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 8026eaa:	2300      	movs	r3, #0
}
 8026eac:	4618      	mov	r0, r3
 8026eae:	3708      	adds	r7, #8
 8026eb0:	46bd      	mov	sp, r7
 8026eb2:	bd80      	pop	{r7, pc}
 8026eb4:	200057f0 	.word	0x200057f0
 8026eb8:	200057e0 	.word	0x200057e0

08026ebc <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 8026ebc:	b580      	push	{r7, lr}
 8026ebe:	b084      	sub	sp, #16
 8026ec0:	af00      	add	r7, sp, #0
 8026ec2:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 8026ec4:	4b18      	ldr	r3, [pc, #96]	; (8026f28 <spi_flash_select_die_cmd+0x6c>)
 8026ec6:	7a9b      	ldrb	r3, [r3, #10]
 8026ec8:	2b01      	cmp	r3, #1
 8026eca:	d002      	beq.n	8026ed2 <spi_flash_select_die_cmd+0x16>
 8026ecc:	2b02      	cmp	r3, #2
 8026ece:	d00d      	beq.n	8026eec <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8026ed0:	e026      	b.n	8026f20 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 8026ed2:	f7ff fe87 	bl	8026be4 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 8026ed6:	20c2      	movs	r0, #194	; 0xc2
 8026ed8:	f7ff ff52 	bl	8026d80 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	b2db      	uxtb	r3, r3
 8026ee0:	4618      	mov	r0, r3
 8026ee2:	f7ff ff4d 	bl	8026d80 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8026ee6:	f7ff fe89 	bl	8026bfc <spi_flash_deselect_chip>
        break;
 8026eea:	e019      	b.n	8026f20 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 8026eec:	f107 030f 	add.w	r3, r7, #15
 8026ef0:	4619      	mov	r1, r3
 8026ef2:	20d0      	movs	r0, #208	; 0xd0
 8026ef4:	f7ff ff7b 	bl	8026dee <spi_flash_get_feature>
        if(die == 0) {
 8026ef8:	687b      	ldr	r3, [r7, #4]
 8026efa:	2b00      	cmp	r3, #0
 8026efc:	d105      	bne.n	8026f0a <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 8026efe:	7bfb      	ldrb	r3, [r7, #15]
 8026f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026f04:	b2db      	uxtb	r3, r3
 8026f06:	73fb      	strb	r3, [r7, #15]
 8026f08:	e004      	b.n	8026f14 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 8026f0a:	7bfb      	ldrb	r3, [r7, #15]
 8026f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026f10:	b2db      	uxtb	r3, r3
 8026f12:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8026f14:	7bfb      	ldrb	r3, [r7, #15]
 8026f16:	4619      	mov	r1, r3
 8026f18:	20d0      	movs	r0, #208	; 0xd0
 8026f1a:	f7ff ff4d 	bl	8026db8 <spi_flash_set_feature>
        break;
 8026f1e:	bf00      	nop
    }
}
 8026f20:	bf00      	nop
 8026f22:	3710      	adds	r7, #16
 8026f24:	46bd      	mov	sp, r7
 8026f26:	bd80      	pop	{r7, pc}
 8026f28:	200057e0 	.word	0x200057e0

08026f2c <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 8026f2c:	b580      	push	{r7, lr}
 8026f2e:	b084      	sub	sp, #16
 8026f30:	af00      	add	r7, sp, #0
 8026f32:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8026f34:	2300      	movs	r3, #0
 8026f36:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8026f38:	4b0f      	ldr	r3, [pc, #60]	; (8026f78 <spi_flash_select_die+0x4c>)
 8026f3a:	7a9b      	ldrb	r3, [r3, #10]
 8026f3c:	2b00      	cmp	r3, #0
 8026f3e:	d017      	beq.n	8026f70 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 8026f40:	4b0d      	ldr	r3, [pc, #52]	; (8026f78 <spi_flash_select_die+0x4c>)
 8026f42:	7a5b      	ldrb	r3, [r3, #9]
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	d104      	bne.n	8026f52 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	0c1b      	lsrs	r3, r3, #16
 8026f4c:	b2db      	uxtb	r3, r3
 8026f4e:	60fb      	str	r3, [r7, #12]
 8026f50:	e003      	b.n	8026f5a <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 8026f52:	687b      	ldr	r3, [r7, #4]
 8026f54:	0c5b      	lsrs	r3, r3, #17
 8026f56:	b2db      	uxtb	r3, r3
 8026f58:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 8026f5a:	4b08      	ldr	r3, [pc, #32]	; (8026f7c <spi_flash_select_die+0x50>)
 8026f5c:	681b      	ldr	r3, [r3, #0]
 8026f5e:	68fa      	ldr	r2, [r7, #12]
 8026f60:	429a      	cmp	r2, r3
 8026f62:	d005      	beq.n	8026f70 <spi_flash_select_die+0x44>
            current_die = die;
 8026f64:	4a05      	ldr	r2, [pc, #20]	; (8026f7c <spi_flash_select_die+0x50>)
 8026f66:	68fb      	ldr	r3, [r7, #12]
 8026f68:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 8026f6a:	68f8      	ldr	r0, [r7, #12]
 8026f6c:	f7ff ffa6 	bl	8026ebc <spi_flash_select_die_cmd>
        }
    }
}
 8026f70:	bf00      	nop
 8026f72:	3710      	adds	r7, #16
 8026f74:	46bd      	mov	sp, r7
 8026f76:	bd80      	pop	{r7, pc}
 8026f78:	200057e0 	.word	0x200057e0
 8026f7c:	200057f4 	.word	0x200057f4

08026f80 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8026f80:	b580      	push	{r7, lr}
 8026f82:	b082      	sub	sp, #8
 8026f84:	af00      	add	r7, sp, #0
 8026f86:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026f88:	f7ff fe2c 	bl	8026be4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 8026f8c:	209f      	movs	r0, #159	; 0x9f
 8026f8e:	f7ff fef7 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8026f92:	2000      	movs	r0, #0
 8026f94:	f7ff fef4 	bl	8026d80 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 8026f98:	f7ff ff06 	bl	8026da8 <spi_flash_read_byte>
 8026f9c:	4603      	mov	r3, r0
 8026f9e:	461a      	mov	r2, r3
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8026fa4:	f7ff ff00 	bl	8026da8 <spi_flash_read_byte>
 8026fa8:	4603      	mov	r3, r0
 8026faa:	461a      	mov	r2, r3
 8026fac:	687b      	ldr	r3, [r7, #4]
 8026fae:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8026fb0:	f7ff fefa 	bl	8026da8 <spi_flash_read_byte>
 8026fb4:	4603      	mov	r3, r0
 8026fb6:	461a      	mov	r2, r3
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 8026fbc:	f7ff fef4 	bl	8026da8 <spi_flash_read_byte>
 8026fc0:	4603      	mov	r3, r0
 8026fc2:	461a      	mov	r2, r3
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8026fc8:	f7ff feee 	bl	8026da8 <spi_flash_read_byte>
 8026fcc:	4603      	mov	r3, r0
 8026fce:	461a      	mov	r2, r3
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8026fd4:	f7ff fee8 	bl	8026da8 <spi_flash_read_byte>
 8026fd8:	4603      	mov	r3, r0
 8026fda:	461a      	mov	r2, r3
 8026fdc:	687b      	ldr	r3, [r7, #4]
 8026fde:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8026fe0:	f7ff fe0c 	bl	8026bfc <spi_flash_deselect_chip>
}
 8026fe4:	bf00      	nop
 8026fe6:	3708      	adds	r7, #8
 8026fe8:	46bd      	mov	sp, r7
 8026fea:	bd80      	pop	{r7, pc}

08026fec <spi_flash_write_enable>:
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
}

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 8026fec:	b580      	push	{r7, lr}
 8026fee:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026ff0:	f7ff fdf8 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8026ff4:	2006      	movs	r0, #6
 8026ff6:	f7ff fec3 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 8026ffa:	f7ff fdff 	bl	8026bfc <spi_flash_deselect_chip>
}
 8026ffe:	bf00      	nop
 8027000:	bd80      	pop	{r7, pc}
	...

08027004 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 8027004:	b580      	push	{r7, lr}
 8027006:	b086      	sub	sp, #24
 8027008:	af00      	add	r7, sp, #0
 802700a:	60f8      	str	r0, [r7, #12]
 802700c:	60b9      	str	r1, [r7, #8]
 802700e:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8027010:	2300      	movs	r3, #0
 8027012:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8027014:	f7ff fde6 	bl	8026be4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 8027018:	2002      	movs	r0, #2
 802701a:	f7ff feb1 	bl	8026d80 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 802701e:	4b1f      	ldr	r3, [pc, #124]	; (802709c <spi_flash_program_load+0x98>)
 8027020:	7a5b      	ldrb	r3, [r3, #9]
 8027022:	2b00      	cmp	r3, #0
 8027024:	d018      	beq.n	8027058 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 8027026:	687b      	ldr	r3, [r7, #4]
 8027028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802702c:	2b00      	cmp	r3, #0
 802702e:	d009      	beq.n	8027044 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8027030:	693b      	ldr	r3, [r7, #16]
 8027032:	0a1b      	lsrs	r3, r3, #8
 8027034:	b2db      	uxtb	r3, r3
 8027036:	f043 0310 	orr.w	r3, r3, #16
 802703a:	b2db      	uxtb	r3, r3
 802703c:	4618      	mov	r0, r3
 802703e:	f7ff fe9f 	bl	8026d80 <spi_flash_send_byte>
 8027042:	e00f      	b.n	8027064 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8027044:	693b      	ldr	r3, [r7, #16]
 8027046:	0a1b      	lsrs	r3, r3, #8
 8027048:	b2db      	uxtb	r3, r3
 802704a:	f023 0310 	bic.w	r3, r3, #16
 802704e:	b2db      	uxtb	r3, r3
 8027050:	4618      	mov	r0, r3
 8027052:	f7ff fe95 	bl	8026d80 <spi_flash_send_byte>
 8027056:	e005      	b.n	8027064 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8027058:	693b      	ldr	r3, [r7, #16]
 802705a:	0a1b      	lsrs	r3, r3, #8
 802705c:	b2db      	uxtb	r3, r3
 802705e:	4618      	mov	r0, r3
 8027060:	f7ff fe8e 	bl	8026d80 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8027064:	693b      	ldr	r3, [r7, #16]
 8027066:	b2db      	uxtb	r3, r3
 8027068:	4618      	mov	r0, r3
 802706a:	f7ff fe89 	bl	8026d80 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 802706e:	2300      	movs	r3, #0
 8027070:	617b      	str	r3, [r7, #20]
 8027072:	e009      	b.n	8027088 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8027074:	68fa      	ldr	r2, [r7, #12]
 8027076:	697b      	ldr	r3, [r7, #20]
 8027078:	4413      	add	r3, r2
 802707a:	781b      	ldrb	r3, [r3, #0]
 802707c:	4618      	mov	r0, r3
 802707e:	f7ff fe7f 	bl	8026d80 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8027082:	697b      	ldr	r3, [r7, #20]
 8027084:	3301      	adds	r3, #1
 8027086:	617b      	str	r3, [r7, #20]
 8027088:	697a      	ldr	r2, [r7, #20]
 802708a:	68bb      	ldr	r3, [r7, #8]
 802708c:	429a      	cmp	r2, r3
 802708e:	d3f1      	bcc.n	8027074 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8027090:	f7ff fdb4 	bl	8026bfc <spi_flash_deselect_chip>
}
 8027094:	bf00      	nop
 8027096:	3718      	adds	r7, #24
 8027098:	46bd      	mov	sp, r7
 802709a:	bd80      	pop	{r7, pc}
 802709c:	200057e0 	.word	0x200057e0

080270a0 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80270a0:	b580      	push	{r7, lr}
 80270a2:	b084      	sub	sp, #16
 80270a4:	af00      	add	r7, sp, #0
 80270a6:	60f8      	str	r0, [r7, #12]
 80270a8:	60b9      	str	r1, [r7, #8]
 80270aa:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 80270ac:	68b8      	ldr	r0, [r7, #8]
 80270ae:	f7ff ff3d 	bl	8026f2c <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 80270b2:	68ba      	ldr	r2, [r7, #8]
 80270b4:	6879      	ldr	r1, [r7, #4]
 80270b6:	68f8      	ldr	r0, [r7, #12]
 80270b8:	f7ff ffa4 	bl	8027004 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 80270bc:	f7ff ff96 	bl	8026fec <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 80270c0:	f7ff fd90 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 80270c4:	2010      	movs	r0, #16
 80270c6:	f7ff fe5b 	bl	8026d80 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 80270ca:	4b0d      	ldr	r3, [pc, #52]	; (8027100 <spi_flash_write_page_async+0x60>)
 80270cc:	2202      	movs	r2, #2
 80270ce:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80270d0:	68bb      	ldr	r3, [r7, #8]
 80270d2:	0c1b      	lsrs	r3, r3, #16
 80270d4:	b2db      	uxtb	r3, r3
 80270d6:	4618      	mov	r0, r3
 80270d8:	f7ff fe52 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80270dc:	68bb      	ldr	r3, [r7, #8]
 80270de:	0a1b      	lsrs	r3, r3, #8
 80270e0:	b2db      	uxtb	r3, r3
 80270e2:	4618      	mov	r0, r3
 80270e4:	f7ff fe4c 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80270e8:	68bb      	ldr	r3, [r7, #8]
 80270ea:	b2db      	uxtb	r3, r3
 80270ec:	4618      	mov	r0, r3
 80270ee:	f7ff fe47 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80270f2:	f7ff fd83 	bl	8026bfc <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 80270f6:	bf00      	nop
 80270f8:	3710      	adds	r7, #16
 80270fa:	46bd      	mov	sp, r7
 80270fc:	bd80      	pop	{r7, pc}
 80270fe:	bf00      	nop
 8027100:	200057f0 	.word	0x200057f0

08027104 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 8027104:	b580      	push	{r7, lr}
 8027106:	b082      	sub	sp, #8
 8027108:	af00      	add	r7, sp, #0
 802710a:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 802710c:	6878      	ldr	r0, [r7, #4]
 802710e:	f7ff ff0d 	bl	8026f2c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8027112:	f7ff fd67 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8027116:	2013      	movs	r0, #19
 8027118:	f7ff fe32 	bl	8026d80 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 802711c:	4b0e      	ldr	r3, [pc, #56]	; (8027158 <spi_flash_load_page_into_cache+0x54>)
 802711e:	2203      	movs	r2, #3
 8027120:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	0c1b      	lsrs	r3, r3, #16
 8027126:	b2db      	uxtb	r3, r3
 8027128:	4618      	mov	r0, r3
 802712a:	f7ff fe29 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 802712e:	687b      	ldr	r3, [r7, #4]
 8027130:	0a1b      	lsrs	r3, r3, #8
 8027132:	b2db      	uxtb	r3, r3
 8027134:	4618      	mov	r0, r3
 8027136:	f7ff fe23 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	b2db      	uxtb	r3, r3
 802713e:	4618      	mov	r0, r3
 8027140:	f7ff fe1e 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8027144:	f7ff fd5a 	bl	8026bfc <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8027148:	f7ff fe6c 	bl	8026e24 <spi_flash_read_status>
 802714c:	4603      	mov	r3, r0
}
 802714e:	4618      	mov	r0, r3
 8027150:	3708      	adds	r7, #8
 8027152:	46bd      	mov	sp, r7
 8027154:	bd80      	pop	{r7, pc}
 8027156:	bf00      	nop
 8027158:	200057f0 	.word	0x200057f0

0802715c <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 802715c:	b590      	push	{r4, r7, lr}
 802715e:	b089      	sub	sp, #36	; 0x24
 8027160:	af00      	add	r7, sp, #0
 8027162:	60f8      	str	r0, [r7, #12]
 8027164:	60b9      	str	r1, [r7, #8]
 8027166:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8027168:	68b8      	ldr	r0, [r7, #8]
 802716a:	f7ff ffcb 	bl	8027104 <spi_flash_load_page_into_cache>
 802716e:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8027170:	2300      	movs	r3, #0
 8027172:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8027174:	f7ff fd36 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8027178:	2003      	movs	r0, #3
 802717a:	f7ff fe01 	bl	8026d80 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 802717e:	4b27      	ldr	r3, [pc, #156]	; (802721c <spi_flash_read_page+0xc0>)
 8027180:	7a1b      	ldrb	r3, [r3, #8]
 8027182:	2b00      	cmp	r3, #0
 8027184:	d002      	beq.n	802718c <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8027186:	20ff      	movs	r0, #255	; 0xff
 8027188:	f7ff fdfa 	bl	8026d80 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 802718c:	4b23      	ldr	r3, [pc, #140]	; (802721c <spi_flash_read_page+0xc0>)
 802718e:	7a5b      	ldrb	r3, [r3, #9]
 8027190:	2b00      	cmp	r3, #0
 8027192:	d018      	beq.n	80271c6 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8027194:	68bb      	ldr	r3, [r7, #8]
 8027196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802719a:	2b00      	cmp	r3, #0
 802719c:	d009      	beq.n	80271b2 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 802719e:	697b      	ldr	r3, [r7, #20]
 80271a0:	0a1b      	lsrs	r3, r3, #8
 80271a2:	b2db      	uxtb	r3, r3
 80271a4:	f043 0310 	orr.w	r3, r3, #16
 80271a8:	b2db      	uxtb	r3, r3
 80271aa:	4618      	mov	r0, r3
 80271ac:	f7ff fde8 	bl	8026d80 <spi_flash_send_byte>
 80271b0:	e00f      	b.n	80271d2 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 80271b2:	697b      	ldr	r3, [r7, #20]
 80271b4:	0a1b      	lsrs	r3, r3, #8
 80271b6:	b2db      	uxtb	r3, r3
 80271b8:	f023 0310 	bic.w	r3, r3, #16
 80271bc:	b2db      	uxtb	r3, r3
 80271be:	4618      	mov	r0, r3
 80271c0:	f7ff fdde 	bl	8026d80 <spi_flash_send_byte>
 80271c4:	e005      	b.n	80271d2 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 80271c6:	697b      	ldr	r3, [r7, #20]
 80271c8:	0a1b      	lsrs	r3, r3, #8
 80271ca:	b2db      	uxtb	r3, r3
 80271cc:	4618      	mov	r0, r3
 80271ce:	f7ff fdd7 	bl	8026d80 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 80271d2:	697b      	ldr	r3, [r7, #20]
 80271d4:	b2db      	uxtb	r3, r3
 80271d6:	4618      	mov	r0, r3
 80271d8:	f7ff fdd2 	bl	8026d80 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80271dc:	4b0f      	ldr	r3, [pc, #60]	; (802721c <spi_flash_read_page+0xc0>)
 80271de:	7a1b      	ldrb	r3, [r3, #8]
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	d102      	bne.n	80271ea <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80271e4:	20ff      	movs	r0, #255	; 0xff
 80271e6:	f7ff fdcb 	bl	8026d80 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80271ea:	2300      	movs	r3, #0
 80271ec:	61fb      	str	r3, [r7, #28]
 80271ee:	e009      	b.n	8027204 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80271f0:	68fa      	ldr	r2, [r7, #12]
 80271f2:	69fb      	ldr	r3, [r7, #28]
 80271f4:	18d4      	adds	r4, r2, r3
 80271f6:	f7ff fdd7 	bl	8026da8 <spi_flash_read_byte>
 80271fa:	4603      	mov	r3, r0
 80271fc:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 80271fe:	69fb      	ldr	r3, [r7, #28]
 8027200:	3301      	adds	r3, #1
 8027202:	61fb      	str	r3, [r7, #28]
 8027204:	69fa      	ldr	r2, [r7, #28]
 8027206:	687b      	ldr	r3, [r7, #4]
 8027208:	429a      	cmp	r2, r3
 802720a:	d3f1      	bcc.n	80271f0 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 802720c:	f7ff fcf6 	bl	8026bfc <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8027210:	69bb      	ldr	r3, [r7, #24]
}
 8027212:	4618      	mov	r0, r3
 8027214:	3724      	adds	r7, #36	; 0x24
 8027216:	46bd      	mov	sp, r7
 8027218:	bd90      	pop	{r4, r7, pc}
 802721a:	bf00      	nop
 802721c:	200057e0 	.word	0x200057e0

08027220 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8027220:	b590      	push	{r4, r7, lr}
 8027222:	b087      	sub	sp, #28
 8027224:	af00      	add	r7, sp, #0
 8027226:	60f8      	str	r0, [r7, #12]
 8027228:	60b9      	str	r1, [r7, #8]
 802722a:	607a      	str	r2, [r7, #4]
 802722c:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 802722e:	68b8      	ldr	r0, [r7, #8]
 8027230:	f7ff fe7c 	bl	8026f2c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8027234:	f7ff fcd6 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8027238:	2013      	movs	r0, #19
 802723a:	f7ff fda1 	bl	8026d80 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 802723e:	4b38      	ldr	r3, [pc, #224]	; (8027320 <spi_flash_read_spare_data+0x100>)
 8027240:	2204      	movs	r2, #4
 8027242:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8027244:	68bb      	ldr	r3, [r7, #8]
 8027246:	0c1b      	lsrs	r3, r3, #16
 8027248:	b2db      	uxtb	r3, r3
 802724a:	4618      	mov	r0, r3
 802724c:	f7ff fd98 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8027250:	68bb      	ldr	r3, [r7, #8]
 8027252:	0a1b      	lsrs	r3, r3, #8
 8027254:	b2db      	uxtb	r3, r3
 8027256:	4618      	mov	r0, r3
 8027258:	f7ff fd92 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802725c:	68bb      	ldr	r3, [r7, #8]
 802725e:	b2db      	uxtb	r3, r3
 8027260:	4618      	mov	r0, r3
 8027262:	f7ff fd8d 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8027266:	f7ff fcc9 	bl	8026bfc <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 802726a:	f7ff fddb 	bl	8026e24 <spi_flash_read_status>
 802726e:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8027270:	f7ff fcb8 	bl	8026be4 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8027274:	2003      	movs	r0, #3
 8027276:	f7ff fd83 	bl	8026d80 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 802727a:	4b2a      	ldr	r3, [pc, #168]	; (8027324 <spi_flash_read_spare_data+0x104>)
 802727c:	7a1b      	ldrb	r3, [r3, #8]
 802727e:	2b00      	cmp	r3, #0
 8027280:	d002      	beq.n	8027288 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8027282:	20ff      	movs	r0, #255	; 0xff
 8027284:	f7ff fd7c 	bl	8026d80 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8027288:	4b26      	ldr	r3, [pc, #152]	; (8027324 <spi_flash_read_spare_data+0x104>)
 802728a:	681b      	ldr	r3, [r3, #0]
 802728c:	687a      	ldr	r2, [r7, #4]
 802728e:	4413      	add	r3, r2
 8027290:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8027292:	4b24      	ldr	r3, [pc, #144]	; (8027324 <spi_flash_read_spare_data+0x104>)
 8027294:	7a5b      	ldrb	r3, [r3, #9]
 8027296:	2b00      	cmp	r3, #0
 8027298:	d018      	beq.n	80272cc <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 802729a:	68bb      	ldr	r3, [r7, #8]
 802729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80272a0:	2b00      	cmp	r3, #0
 80272a2:	d009      	beq.n	80272b8 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	0a1b      	lsrs	r3, r3, #8
 80272a8:	b2db      	uxtb	r3, r3
 80272aa:	f043 0310 	orr.w	r3, r3, #16
 80272ae:	b2db      	uxtb	r3, r3
 80272b0:	4618      	mov	r0, r3
 80272b2:	f7ff fd65 	bl	8026d80 <spi_flash_send_byte>
 80272b6:	e00f      	b.n	80272d8 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	0a1b      	lsrs	r3, r3, #8
 80272bc:	b2db      	uxtb	r3, r3
 80272be:	f023 0310 	bic.w	r3, r3, #16
 80272c2:	b2db      	uxtb	r3, r3
 80272c4:	4618      	mov	r0, r3
 80272c6:	f7ff fd5b 	bl	8026d80 <spi_flash_send_byte>
 80272ca:	e005      	b.n	80272d8 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 80272cc:	687b      	ldr	r3, [r7, #4]
 80272ce:	0a1b      	lsrs	r3, r3, #8
 80272d0:	b2db      	uxtb	r3, r3
 80272d2:	4618      	mov	r0, r3
 80272d4:	f7ff fd54 	bl	8026d80 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	b2db      	uxtb	r3, r3
 80272dc:	4618      	mov	r0, r3
 80272de:	f7ff fd4f 	bl	8026d80 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 80272e2:	4b10      	ldr	r3, [pc, #64]	; (8027324 <spi_flash_read_spare_data+0x104>)
 80272e4:	7a1b      	ldrb	r3, [r3, #8]
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d102      	bne.n	80272f0 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 80272ea:	20ff      	movs	r0, #255	; 0xff
 80272ec:	f7ff fd48 	bl	8026d80 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 80272f0:	2300      	movs	r3, #0
 80272f2:	617b      	str	r3, [r7, #20]
 80272f4:	e009      	b.n	802730a <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 80272f6:	68fa      	ldr	r2, [r7, #12]
 80272f8:	697b      	ldr	r3, [r7, #20]
 80272fa:	18d4      	adds	r4, r2, r3
 80272fc:	f7ff fd54 	bl	8026da8 <spi_flash_read_byte>
 8027300:	4603      	mov	r3, r0
 8027302:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8027304:	697b      	ldr	r3, [r7, #20]
 8027306:	3301      	adds	r3, #1
 8027308:	617b      	str	r3, [r7, #20]
 802730a:	697a      	ldr	r2, [r7, #20]
 802730c:	683b      	ldr	r3, [r7, #0]
 802730e:	429a      	cmp	r2, r3
 8027310:	d3f1      	bcc.n	80272f6 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8027312:	f7ff fc73 	bl	8026bfc <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8027316:	693b      	ldr	r3, [r7, #16]
}
 8027318:	4618      	mov	r0, r3
 802731a:	371c      	adds	r7, #28
 802731c:	46bd      	mov	sp, r7
 802731e:	bd90      	pop	{r4, r7, pc}
 8027320:	200057f0 	.word	0x200057f0
 8027324:	200057e0 	.word	0x200057e0

08027328 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8027328:	b580      	push	{r7, lr}
 802732a:	b082      	sub	sp, #8
 802732c:	af00      	add	r7, sp, #0
 802732e:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8027330:	6878      	ldr	r0, [r7, #4]
 8027332:	f7ff fdfb 	bl	8026f2c <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8027336:	f7ff fe59 	bl	8026fec <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 802733a:	f7ff fc53 	bl	8026be4 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 802733e:	20d8      	movs	r0, #216	; 0xd8
 8027340:	f7ff fd1e 	bl	8026d80 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8027344:	4b0e      	ldr	r3, [pc, #56]	; (8027380 <spi_flash_erase_block+0x58>)
 8027346:	2201      	movs	r2, #1
 8027348:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 802734a:	687b      	ldr	r3, [r7, #4]
 802734c:	0c1b      	lsrs	r3, r3, #16
 802734e:	b2db      	uxtb	r3, r3
 8027350:	4618      	mov	r0, r3
 8027352:	f7ff fd15 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8027356:	687b      	ldr	r3, [r7, #4]
 8027358:	0a1b      	lsrs	r3, r3, #8
 802735a:	b2db      	uxtb	r3, r3
 802735c:	4618      	mov	r0, r3
 802735e:	f7ff fd0f 	bl	8026d80 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	b2db      	uxtb	r3, r3
 8027366:	4618      	mov	r0, r3
 8027368:	f7ff fd0a 	bl	8026d80 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 802736c:	f7ff fc46 	bl	8026bfc <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8027370:	f7ff fd58 	bl	8026e24 <spi_flash_read_status>
 8027374:	4603      	mov	r3, r0
}
 8027376:	4618      	mov	r0, r3
 8027378:	3708      	adds	r7, #8
 802737a:	46bd      	mov	sp, r7
 802737c:	bd80      	pop	{r7, pc}
 802737e:	bf00      	nop
 8027380:	200057f0 	.word	0x200057f0

08027384 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8027384:	b480      	push	{r7}
 8027386:	af00      	add	r7, sp, #0
    return true;
 8027388:	2301      	movs	r3, #1
}
 802738a:	4618      	mov	r0, r3
 802738c:	46bd      	mov	sp, r7
 802738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027392:	4770      	bx	lr

08027394 <spi_flash_gpio_uninit>:
	  }
}

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8027394:	b580      	push	{r7, lr}
 8027396:	b082      	sub	sp, #8
 8027398:	af00      	add	r7, sp, #0
 802739a:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 802739c:	687b      	ldr	r3, [r7, #4]
 802739e:	681b      	ldr	r3, [r3, #0]
 80273a0:	4a0b      	ldr	r2, [pc, #44]	; (80273d0 <spi_flash_gpio_uninit+0x3c>)
 80273a2:	4293      	cmp	r3, r2
 80273a4:	d110      	bne.n	80273c8 <spi_flash_gpio_uninit+0x34>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80273a6:	4b0b      	ldr	r3, [pc, #44]	; (80273d4 <spi_flash_gpio_uninit+0x40>)
 80273a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80273aa:	4a0a      	ldr	r2, [pc, #40]	; (80273d4 <spi_flash_gpio_uninit+0x40>)
 80273ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80273b0:	6453      	str	r3, [r2, #68]	; 0x44
	      PA6     ------> SPI1_MISO
	      PA7     ------> SPI1_MOSI
	      PB3     ------> SPI1_SCK
	      PE2     ------> SPI1_CS
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80273b2:	21c0      	movs	r1, #192	; 0xc0
 80273b4:	4808      	ldr	r0, [pc, #32]	; (80273d8 <spi_flash_gpio_uninit+0x44>)
 80273b6:	f001 fce5 	bl	8028d84 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 80273ba:	2108      	movs	r1, #8
 80273bc:	4807      	ldr	r0, [pc, #28]	; (80273dc <spi_flash_gpio_uninit+0x48>)
 80273be:	f001 fce1 	bl	8028d84 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80273c2:	2023      	movs	r0, #35	; 0x23
 80273c4:	f000 ff09 	bl	80281da <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 80273c8:	bf00      	nop
 80273ca:	3708      	adds	r7, #8
 80273cc:	46bd      	mov	sp, r7
 80273ce:	bd80      	pop	{r7, pc}
 80273d0:	40013000 	.word	0x40013000
 80273d4:	40023800 	.word	0x40023800
 80273d8:	40020000 	.word	0x40020000
 80273dc:	40020400 	.word	0x40020400

080273e0 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 80273e0:	b580      	push	{r7, lr}
 80273e2:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80273e4:	2200      	movs	r2, #0
 80273e6:	2104      	movs	r1, #4
 80273e8:	4802      	ldr	r0, [pc, #8]	; (80273f4 <spi_flash_select_chip+0x14>)
 80273ea:	f001 fdc7 	bl	8028f7c <HAL_GPIO_WritePin>
}
 80273ee:	bf00      	nop
 80273f0:	bd80      	pop	{r7, pc}
 80273f2:	bf00      	nop
 80273f4:	40021000 	.word	0x40021000

080273f8 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 80273f8:	b580      	push	{r7, lr}
 80273fa:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 80273fc:	2201      	movs	r2, #1
 80273fe:	2104      	movs	r1, #4
 8027400:	4802      	ldr	r0, [pc, #8]	; (802740c <spi_flash_deselect_chip+0x14>)
 8027402:	f001 fdbb 	bl	8028f7c <HAL_GPIO_WritePin>
}
 8027406:	bf00      	nop
 8027408:	bd80      	pop	{r7, pc}
 802740a:	bf00      	nop
 802740c:	40021000 	.word	0x40021000

08027410 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8027410:	b480      	push	{r7}
 8027412:	b085      	sub	sp, #20
 8027414:	af00      	add	r7, sp, #0
 8027416:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8027418:	4b1f      	ldr	r3, [pc, #124]	; (8027498 <spi_flash_get_baud_rate_prescaler+0x88>)
 802741a:	681b      	ldr	r3, [r3, #0]
 802741c:	4a1f      	ldr	r2, [pc, #124]	; (802749c <spi_flash_get_baud_rate_prescaler+0x8c>)
 802741e:	fba2 2303 	umull	r2, r3, r2, r3
 8027422:	099b      	lsrs	r3, r3, #6
 8027424:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8027426:	68fb      	ldr	r3, [r7, #12]
 8027428:	085b      	lsrs	r3, r3, #1
 802742a:	687a      	ldr	r2, [r7, #4]
 802742c:	429a      	cmp	r2, r3
 802742e:	d301      	bcc.n	8027434 <spi_flash_get_baud_rate_prescaler+0x24>
    	return SPI_BAUDRATEPRESCALER_2;
 8027430:	2300      	movs	r3, #0
 8027432:	e02a      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8027434:	68fb      	ldr	r3, [r7, #12]
 8027436:	089b      	lsrs	r3, r3, #2
 8027438:	687a      	ldr	r2, [r7, #4]
 802743a:	429a      	cmp	r2, r3
 802743c:	d301      	bcc.n	8027442 <spi_flash_get_baud_rate_prescaler+0x32>
    	return SPI_BAUDRATEPRESCALER_4;
 802743e:	2308      	movs	r3, #8
 8027440:	e023      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8027442:	68fb      	ldr	r3, [r7, #12]
 8027444:	08db      	lsrs	r3, r3, #3
 8027446:	687a      	ldr	r2, [r7, #4]
 8027448:	429a      	cmp	r2, r3
 802744a:	d301      	bcc.n	8027450 <spi_flash_get_baud_rate_prescaler+0x40>
    	return SPI_BAUDRATEPRESCALER_8;
 802744c:	2310      	movs	r3, #16
 802744e:	e01c      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8027450:	68fb      	ldr	r3, [r7, #12]
 8027452:	091b      	lsrs	r3, r3, #4
 8027454:	687a      	ldr	r2, [r7, #4]
 8027456:	429a      	cmp	r2, r3
 8027458:	d301      	bcc.n	802745e <spi_flash_get_baud_rate_prescaler+0x4e>
    	return SPI_BAUDRATEPRESCALER_16;
 802745a:	2318      	movs	r3, #24
 802745c:	e015      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 802745e:	68fb      	ldr	r3, [r7, #12]
 8027460:	095b      	lsrs	r3, r3, #5
 8027462:	687a      	ldr	r2, [r7, #4]
 8027464:	429a      	cmp	r2, r3
 8027466:	d301      	bcc.n	802746c <spi_flash_get_baud_rate_prescaler+0x5c>
    	return SPI_BAUDRATEPRESCALER_32;
 8027468:	2320      	movs	r3, #32
 802746a:	e00e      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 802746c:	68fb      	ldr	r3, [r7, #12]
 802746e:	099b      	lsrs	r3, r3, #6
 8027470:	687a      	ldr	r2, [r7, #4]
 8027472:	429a      	cmp	r2, r3
 8027474:	d301      	bcc.n	802747a <spi_flash_get_baud_rate_prescaler+0x6a>
    	return SPI_BAUDRATEPRESCALER_64;
 8027476:	2328      	movs	r3, #40	; 0x28
 8027478:	e007      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 802747a:	68fb      	ldr	r3, [r7, #12]
 802747c:	09db      	lsrs	r3, r3, #7
 802747e:	687a      	ldr	r2, [r7, #4]
 8027480:	429a      	cmp	r2, r3
 8027482:	d301      	bcc.n	8027488 <spi_flash_get_baud_rate_prescaler+0x78>
    	return SPI_BAUDRATEPRESCALER_128;
 8027484:	2330      	movs	r3, #48	; 0x30
 8027486:	e000      	b.n	802748a <spi_flash_get_baud_rate_prescaler+0x7a>
    else
    	return SPI_BAUDRATEPRESCALER_256;
 8027488:	2338      	movs	r3, #56	; 0x38
}
 802748a:	4618      	mov	r0, r3
 802748c:	3714      	adds	r7, #20
 802748e:	46bd      	mov	sp, r7
 8027490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027494:	4770      	bx	lr
 8027496:	bf00      	nop
 8027498:	20000138 	.word	0x20000138
 802749c:	10624dd3 	.word	0x10624dd3

080274a0 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 80274a0:	b590      	push	{r4, r7, lr}
 80274a2:	b08f      	sub	sp, #60	; 0x3c
 80274a4:	af00      	add	r7, sp, #0
 80274a6:	6078      	str	r0, [r7, #4]
 80274a8:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef Init;

	if (conf_size < sizeof(spi_conf_t))
 80274aa:	683b      	ldr	r3, [r7, #0]
 80274ac:	2b0c      	cmp	r3, #12
 80274ae:	d802      	bhi.n	80274b6 <spi_flash_init+0x16>
        return -1;
 80274b0:	f04f 33ff 	mov.w	r3, #4294967295
 80274b4:	e043      	b.n	802753e <spi_flash_init+0x9e>

    spi_conf = *(spi_conf_t *)conf;
 80274b6:	4b24      	ldr	r3, [pc, #144]	; (8027548 <spi_flash_init+0xa8>)
 80274b8:	687a      	ldr	r2, [r7, #4]
 80274ba:	4614      	mov	r4, r2
 80274bc:	6820      	ldr	r0, [r4, #0]
 80274be:	6861      	ldr	r1, [r4, #4]
 80274c0:	68a2      	ldr	r2, [r4, #8]
 80274c2:	c307      	stmia	r3!, {r0, r1, r2}
 80274c4:	7b22      	ldrb	r2, [r4, #12]
 80274c6:	701a      	strb	r2, [r3, #0]

//    spi_flash_gpio_init(&hspi1);

    spi_flash_deselect_chip();
 80274c8:	f7ff ff96 	bl	80273f8 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 80274cc:	4b1f      	ldr	r3, [pc, #124]	; (802754c <spi_flash_init+0xac>)
 80274ce:	4a20      	ldr	r2, [pc, #128]	; (8027550 <spi_flash_init+0xb0>)
 80274d0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80274d2:	4b1e      	ldr	r3, [pc, #120]	; (802754c <spi_flash_init+0xac>)
 80274d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80274d8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80274da:	4b1c      	ldr	r3, [pc, #112]	; (802754c <spi_flash_init+0xac>)
 80274dc:	2200      	movs	r2, #0
 80274de:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80274e0:	4b1a      	ldr	r3, [pc, #104]	; (802754c <spi_flash_init+0xac>)
 80274e2:	2200      	movs	r2, #0
 80274e4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80274e6:	4b19      	ldr	r3, [pc, #100]	; (802754c <spi_flash_init+0xac>)
 80274e8:	2202      	movs	r2, #2
 80274ea:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80274ec:	4b17      	ldr	r3, [pc, #92]	; (802754c <spi_flash_init+0xac>)
 80274ee:	2201      	movs	r2, #1
 80274f0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80274f2:	4b16      	ldr	r3, [pc, #88]	; (802754c <spi_flash_init+0xac>)
 80274f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80274f8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 80274fa:	4b13      	ldr	r3, [pc, #76]	; (8027548 <spi_flash_init+0xa8>)
 80274fc:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8027500:	4618      	mov	r0, r3
 8027502:	f7ff ff85 	bl	8027410 <spi_flash_get_baud_rate_prescaler>
 8027506:	4603      	mov	r3, r0
 8027508:	461a      	mov	r2, r3
 802750a:	4b10      	ldr	r3, [pc, #64]	; (802754c <spi_flash_init+0xac>)
 802750c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802750e:	4b0f      	ldr	r3, [pc, #60]	; (802754c <spi_flash_init+0xac>)
 8027510:	2200      	movs	r2, #0
 8027512:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8027514:	4b0d      	ldr	r3, [pc, #52]	; (802754c <spi_flash_init+0xac>)
 8027516:	2200      	movs	r2, #0
 8027518:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802751a:	4b0c      	ldr	r3, [pc, #48]	; (802754c <spi_flash_init+0xac>)
 802751c:	2200      	movs	r2, #0
 802751e:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8027520:	4b0a      	ldr	r3, [pc, #40]	; (802754c <spi_flash_init+0xac>)
 8027522:	220a      	movs	r2, #10
 8027524:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8027526:	4809      	ldr	r0, [pc, #36]	; (802754c <spi_flash_init+0xac>)
 8027528:	f004 f89b 	bl	802b662 <HAL_SPI_Init>

    /* Enable SPI */
    __HAL_SPI_ENABLE(&hspi1);
 802752c:	4b07      	ldr	r3, [pc, #28]	; (802754c <spi_flash_init+0xac>)
 802752e:	681b      	ldr	r3, [r3, #0]
 8027530:	681a      	ldr	r2, [r3, #0]
 8027532:	4b06      	ldr	r3, [pc, #24]	; (802754c <spi_flash_init+0xac>)
 8027534:	681b      	ldr	r3, [r3, #0]
 8027536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802753a:	601a      	str	r2, [r3, #0]

    return 0;
 802753c:	2300      	movs	r3, #0
}
 802753e:	4618      	mov	r0, r3
 8027540:	373c      	adds	r7, #60	; 0x3c
 8027542:	46bd      	mov	sp, r7
 8027544:	bd90      	pop	{r4, r7, pc}
 8027546:	bf00      	nop
 8027548:	200057f8 	.word	0x200057f8
 802754c:	20005788 	.word	0x20005788
 8027550:	40013000 	.word	0x40013000

08027554 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8027554:	b580      	push	{r7, lr}
 8027556:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8027558:	4806      	ldr	r0, [pc, #24]	; (8027574 <spi_flash_uninit+0x20>)
 802755a:	f7ff ff1b 	bl	8027394 <spi_flash_gpio_uninit>

    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 802755e:	4b05      	ldr	r3, [pc, #20]	; (8027574 <spi_flash_uninit+0x20>)
 8027560:	681b      	ldr	r3, [r3, #0]
 8027562:	681a      	ldr	r2, [r3, #0]
 8027564:	4b03      	ldr	r3, [pc, #12]	; (8027574 <spi_flash_uninit+0x20>)
 8027566:	681b      	ldr	r3, [r3, #0]
 8027568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802756c:	601a      	str	r2, [r3, #0]
}
 802756e:	bf00      	nop
 8027570:	bd80      	pop	{r7, pc}
 8027572:	bf00      	nop
 8027574:	20005788 	.word	0x20005788

08027578 <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8027578:	b580      	push	{r7, lr}
 802757a:	b084      	sub	sp, #16
 802757c:	af00      	add	r7, sp, #0
 802757e:	4603      	mov	r3, r0
 8027580:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_byte;

    HAL_SPI_TransmitReceive_IT(&hspi1,&byte,&rx_byte,1);
 8027582:	f107 020f 	add.w	r2, r7, #15
 8027586:	1df9      	adds	r1, r7, #7
 8027588:	2301      	movs	r3, #1
 802758a:	4804      	ldr	r0, [pc, #16]	; (802759c <spi_flash_send_byte+0x24>)
 802758c:	f004 f8f2 	bl	802b774 <HAL_SPI_TransmitReceive_IT>

 	return rx_byte;
 8027590:	7bfb      	ldrb	r3, [r7, #15]
}
 8027592:	4618      	mov	r0, r3
 8027594:	3710      	adds	r7, #16
 8027596:	46bd      	mov	sp, r7
 8027598:	bd80      	pop	{r7, pc}
 802759a:	bf00      	nop
 802759c:	20005788 	.word	0x20005788

080275a0 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 80275a0:	b580      	push	{r7, lr}
 80275a2:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80275a4:	20a5      	movs	r0, #165	; 0xa5
 80275a6:	f7ff ffe7 	bl	8027578 <spi_flash_send_byte>
 80275aa:	4603      	mov	r3, r0
}
 80275ac:	4618      	mov	r0, r3
 80275ae:	bd80      	pop	{r7, pc}

080275b0 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 80275b0:	b580      	push	{r7, lr}
 80275b2:	b082      	sub	sp, #8
 80275b4:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_READY;
 80275b6:	2300      	movs	r3, #0
 80275b8:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 80275ba:	f7ff ff11 	bl	80273e0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 80275be:	4b16      	ldr	r3, [pc, #88]	; (8027618 <spi_flash_read_status+0x68>)
 80275c0:	799b      	ldrb	r3, [r3, #6]
 80275c2:	4618      	mov	r0, r3
 80275c4:	f7ff ffd8 	bl	8027578 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 80275c8:	f7ff ffea 	bl	80275a0 <spi_flash_read_byte>
 80275cc:	4603      	mov	r3, r0
 80275ce:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 80275d0:	4b11      	ldr	r3, [pc, #68]	; (8027618 <spi_flash_read_status+0x68>)
 80275d2:	7a1b      	ldrb	r3, [r3, #8]
 80275d4:	2b01      	cmp	r3, #1
 80275d6:	d10a      	bne.n	80275ee <spi_flash_read_status+0x3e>
 80275d8:	78fb      	ldrb	r3, [r7, #3]
 80275da:	4a0f      	ldr	r2, [pc, #60]	; (8027618 <spi_flash_read_status+0x68>)
 80275dc:	79d2      	ldrb	r2, [r2, #7]
 80275de:	4113      	asrs	r3, r2
 80275e0:	f003 0301 	and.w	r3, r3, #1
 80275e4:	2b00      	cmp	r3, #0
 80275e6:	d002      	beq.n	80275ee <spi_flash_read_status+0x3e>
        flash_status = FLASH_BUSY;
 80275e8:	2301      	movs	r3, #1
 80275ea:	607b      	str	r3, [r7, #4]
 80275ec:	e00d      	b.n	802760a <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 80275ee:	4b0a      	ldr	r3, [pc, #40]	; (8027618 <spi_flash_read_status+0x68>)
 80275f0:	7a1b      	ldrb	r3, [r3, #8]
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d109      	bne.n	802760a <spi_flash_read_status+0x5a>
 80275f6:	78fb      	ldrb	r3, [r7, #3]
 80275f8:	4a07      	ldr	r2, [pc, #28]	; (8027618 <spi_flash_read_status+0x68>)
 80275fa:	79d2      	ldrb	r2, [r2, #7]
 80275fc:	4113      	asrs	r3, r2
 80275fe:	f003 0301 	and.w	r3, r3, #1
 8027602:	2b00      	cmp	r3, #0
 8027604:	d101      	bne.n	802760a <spi_flash_read_status+0x5a>
        flash_status = FLASH_BUSY;
 8027606:	2301      	movs	r3, #1
 8027608:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 802760a:	f7ff fef5 	bl	80273f8 <spi_flash_deselect_chip>

    return flash_status;
 802760e:	687b      	ldr	r3, [r7, #4]
}
 8027610:	4618      	mov	r0, r3
 8027612:	3708      	adds	r7, #8
 8027614:	46bd      	mov	sp, r7
 8027616:	bd80      	pop	{r7, pc}
 8027618:	200057f8 	.word	0x200057f8

0802761c <spi_flash_get_status>:

static uint32_t spi_flash_get_status()
{
 802761c:	b580      	push	{r7, lr}
 802761e:	b082      	sub	sp, #8
 8027620:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8027622:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8027626:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8027628:	f7ff ffc2 	bl	80275b0 <spi_flash_read_status>
 802762c:	6078      	str	r0, [r7, #4]

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
 802762e:	e005      	b.n	802763c <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8027630:	f7ff ffbe 	bl	80275b0 <spi_flash_read_status>
 8027634:	6078      	str	r0, [r7, #4]
        timeout --;
 8027636:	683b      	ldr	r3, [r7, #0]
 8027638:	3b01      	subs	r3, #1
 802763a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_BUSY && timeout)
 802763c:	687b      	ldr	r3, [r7, #4]
 802763e:	2b01      	cmp	r3, #1
 8027640:	d102      	bne.n	8027648 <spi_flash_get_status+0x2c>
 8027642:	683b      	ldr	r3, [r7, #0]
 8027644:	2b00      	cmp	r3, #0
 8027646:	d1f3      	bne.n	8027630 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8027648:	683b      	ldr	r3, [r7, #0]
 802764a:	2b00      	cmp	r3, #0
 802764c:	d101      	bne.n	8027652 <spi_flash_get_status+0x36>
        status = FLASH_TIMEOUT;
 802764e:	2302      	movs	r3, #2
 8027650:	607b      	str	r3, [r7, #4]

    return status;
 8027652:	687b      	ldr	r3, [r7, #4]
}
 8027654:	4618      	mov	r0, r3
 8027656:	3708      	adds	r7, #8
 8027658:	46bd      	mov	sp, r7
 802765a:	bd80      	pop	{r7, pc}

0802765c <spi_flash_read_id>:

static void spi_flash_read_id(chip_id_t *chip_id)
{
 802765c:	b580      	push	{r7, lr}
 802765e:	b082      	sub	sp, #8
 8027660:	af00      	add	r7, sp, #0
 8027662:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8027664:	f7ff febc 	bl	80273e0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8027668:	4b17      	ldr	r3, [pc, #92]	; (80276c8 <spi_flash_read_id+0x6c>)
 802766a:	789b      	ldrb	r3, [r3, #2]
 802766c:	4618      	mov	r0, r3
 802766e:	f7ff ff83 	bl	8027578 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8027672:	f7ff ff95 	bl	80275a0 <spi_flash_read_byte>
 8027676:	4603      	mov	r3, r0
 8027678:	461a      	mov	r2, r3
 802767a:	687b      	ldr	r3, [r7, #4]
 802767c:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 802767e:	f7ff ff8f 	bl	80275a0 <spi_flash_read_byte>
 8027682:	4603      	mov	r3, r0
 8027684:	461a      	mov	r2, r3
 8027686:	687b      	ldr	r3, [r7, #4]
 8027688:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 802768a:	f7ff ff89 	bl	80275a0 <spi_flash_read_byte>
 802768e:	4603      	mov	r3, r0
 8027690:	461a      	mov	r2, r3
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8027696:	f7ff ff83 	bl	80275a0 <spi_flash_read_byte>
 802769a:	4603      	mov	r3, r0
 802769c:	461a      	mov	r2, r3
 802769e:	687b      	ldr	r3, [r7, #4]
 80276a0:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 80276a2:	f7ff ff7d 	bl	80275a0 <spi_flash_read_byte>
 80276a6:	4603      	mov	r3, r0
 80276a8:	461a      	mov	r2, r3
 80276aa:	687b      	ldr	r3, [r7, #4]
 80276ac:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 80276ae:	f7ff ff77 	bl	80275a0 <spi_flash_read_byte>
 80276b2:	4603      	mov	r3, r0
 80276b4:	461a      	mov	r2, r3
 80276b6:	687b      	ldr	r3, [r7, #4]
 80276b8:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 80276ba:	f7ff fe9d 	bl	80273f8 <spi_flash_deselect_chip>
}
 80276be:	bf00      	nop
 80276c0:	3708      	adds	r7, #8
 80276c2:	46bd      	mov	sp, r7
 80276c4:	bd80      	pop	{r7, pc}
 80276c6:	bf00      	nop
 80276c8:	200057f8 	.word	0x200057f8

080276cc <spi_flash_write_enable>:

static void spi_flash_write_enable()
{
 80276cc:	b580      	push	{r7, lr}
 80276ce:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 80276d0:	4b07      	ldr	r3, [pc, #28]	; (80276f0 <spi_flash_write_enable+0x24>)
 80276d2:	791b      	ldrb	r3, [r3, #4]
 80276d4:	2bff      	cmp	r3, #255	; 0xff
 80276d6:	d009      	beq.n	80276ec <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 80276d8:	f7ff fe82 	bl	80273e0 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 80276dc:	4b04      	ldr	r3, [pc, #16]	; (80276f0 <spi_flash_write_enable+0x24>)
 80276de:	791b      	ldrb	r3, [r3, #4]
 80276e0:	4618      	mov	r0, r3
 80276e2:	f7ff ff49 	bl	8027578 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 80276e6:	f7ff fe87 	bl	80273f8 <spi_flash_deselect_chip>
 80276ea:	e000      	b.n	80276ee <spi_flash_write_enable+0x22>
        return;
 80276ec:	bf00      	nop
}
 80276ee:	bd80      	pop	{r7, pc}
 80276f0:	200057f8 	.word	0x200057f8

080276f4 <spi_flash_write_page_async>:

static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80276f4:	b580      	push	{r7, lr}
 80276f6:	b086      	sub	sp, #24
 80276f8:	af00      	add	r7, sp, #0
 80276fa:	60f8      	str	r0, [r7, #12]
 80276fc:	60b9      	str	r1, [r7, #8]
 80276fe:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 8027700:	f7ff ffe4 	bl	80276cc <spi_flash_write_enable>

    spi_flash_select_chip();
 8027704:	f7ff fe6c 	bl	80273e0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8027708:	4b19      	ldr	r3, [pc, #100]	; (8027770 <spi_flash_write_page_async+0x7c>)
 802770a:	78db      	ldrb	r3, [r3, #3]
 802770c:	4618      	mov	r0, r3
 802770e:	f7ff ff33 	bl	8027578 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8027712:	4b17      	ldr	r3, [pc, #92]	; (8027770 <spi_flash_write_page_async+0x7c>)
 8027714:	781b      	ldrb	r3, [r3, #0]
 8027716:	461a      	mov	r2, r3
 8027718:	68bb      	ldr	r3, [r7, #8]
 802771a:	4093      	lsls	r3, r2
 802771c:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 802771e:	68bb      	ldr	r3, [r7, #8]
 8027720:	0c1b      	lsrs	r3, r3, #16
 8027722:	b2db      	uxtb	r3, r3
 8027724:	4618      	mov	r0, r3
 8027726:	f7ff ff27 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 802772a:	68bb      	ldr	r3, [r7, #8]
 802772c:	0a1b      	lsrs	r3, r3, #8
 802772e:	b2db      	uxtb	r3, r3
 8027730:	4618      	mov	r0, r3
 8027732:	f7ff ff21 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8027736:	68bb      	ldr	r3, [r7, #8]
 8027738:	b2db      	uxtb	r3, r3
 802773a:	4618      	mov	r0, r3
 802773c:	f7ff ff1c 	bl	8027578 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8027740:	2300      	movs	r3, #0
 8027742:	617b      	str	r3, [r7, #20]
 8027744:	e009      	b.n	802775a <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 8027746:	68fa      	ldr	r2, [r7, #12]
 8027748:	697b      	ldr	r3, [r7, #20]
 802774a:	4413      	add	r3, r2
 802774c:	781b      	ldrb	r3, [r3, #0]
 802774e:	4618      	mov	r0, r3
 8027750:	f7ff ff12 	bl	8027578 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8027754:	697b      	ldr	r3, [r7, #20]
 8027756:	3301      	adds	r3, #1
 8027758:	617b      	str	r3, [r7, #20]
 802775a:	697a      	ldr	r2, [r7, #20]
 802775c:	687b      	ldr	r3, [r7, #4]
 802775e:	429a      	cmp	r2, r3
 8027760:	d3f1      	bcc.n	8027746 <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8027762:	f7ff fe49 	bl	80273f8 <spi_flash_deselect_chip>
}
 8027766:	bf00      	nop
 8027768:	3718      	adds	r7, #24
 802776a:	46bd      	mov	sp, r7
 802776c:	bd80      	pop	{r7, pc}
 802776e:	bf00      	nop
 8027770:	200057f8 	.word	0x200057f8

08027774 <spi_flash_read_data>:

static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
    uint32_t page_offset, uint32_t data_size)
{
 8027774:	b590      	push	{r4, r7, lr}
 8027776:	b087      	sub	sp, #28
 8027778:	af00      	add	r7, sp, #0
 802777a:	60f8      	str	r0, [r7, #12]
 802777c:	60b9      	str	r1, [r7, #8]
 802777e:	607a      	str	r2, [r7, #4]
 8027780:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8027782:	4b1d      	ldr	r3, [pc, #116]	; (80277f8 <spi_flash_read_data+0x84>)
 8027784:	781b      	ldrb	r3, [r3, #0]
 8027786:	461a      	mov	r2, r3
 8027788:	68bb      	ldr	r3, [r7, #8]
 802778a:	4093      	lsls	r3, r2
 802778c:	687a      	ldr	r2, [r7, #4]
 802778e:	4413      	add	r3, r2
 8027790:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8027792:	f7ff fe25 	bl	80273e0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 8027796:	4b18      	ldr	r3, [pc, #96]	; (80277f8 <spi_flash_read_data+0x84>)
 8027798:	785b      	ldrb	r3, [r3, #1]
 802779a:	4618      	mov	r0, r3
 802779c:	f7ff feec 	bl	8027578 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 80277a0:	693b      	ldr	r3, [r7, #16]
 80277a2:	0c1b      	lsrs	r3, r3, #16
 80277a4:	b2db      	uxtb	r3, r3
 80277a6:	4618      	mov	r0, r3
 80277a8:	f7ff fee6 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 80277ac:	693b      	ldr	r3, [r7, #16]
 80277ae:	0a1b      	lsrs	r3, r3, #8
 80277b0:	b2db      	uxtb	r3, r3
 80277b2:	4618      	mov	r0, r3
 80277b4:	f7ff fee0 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 80277b8:	693b      	ldr	r3, [r7, #16]
 80277ba:	b2db      	uxtb	r3, r3
 80277bc:	4618      	mov	r0, r3
 80277be:	f7ff fedb 	bl	8027578 <spi_flash_send_byte>

    /* AT45DB requires write of dummy byte after address */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80277c2:	20a5      	movs	r0, #165	; 0xa5
 80277c4:	f7ff fed8 	bl	8027578 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 80277c8:	2300      	movs	r3, #0
 80277ca:	617b      	str	r3, [r7, #20]
 80277cc:	e009      	b.n	80277e2 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 80277ce:	68fa      	ldr	r2, [r7, #12]
 80277d0:	697b      	ldr	r3, [r7, #20]
 80277d2:	18d4      	adds	r4, r2, r3
 80277d4:	f7ff fee4 	bl	80275a0 <spi_flash_read_byte>
 80277d8:	4603      	mov	r3, r0
 80277da:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 80277dc:	697b      	ldr	r3, [r7, #20]
 80277de:	3301      	adds	r3, #1
 80277e0:	617b      	str	r3, [r7, #20]
 80277e2:	697a      	ldr	r2, [r7, #20]
 80277e4:	683b      	ldr	r3, [r7, #0]
 80277e6:	429a      	cmp	r2, r3
 80277e8:	d3f1      	bcc.n	80277ce <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 80277ea:	f7ff fe05 	bl	80273f8 <spi_flash_deselect_chip>

    return FLASH_READY;
 80277ee:	2300      	movs	r3, #0
}
 80277f0:	4618      	mov	r0, r3
 80277f2:	371c      	adds	r7, #28
 80277f4:	46bd      	mov	sp, r7
 80277f6:	bd90      	pop	{r4, r7, pc}
 80277f8:	200057f8 	.word	0x200057f8

080277fc <spi_flash_read_page>:

static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 80277fc:	b580      	push	{r7, lr}
 80277fe:	b084      	sub	sp, #16
 8027800:	af00      	add	r7, sp, #0
 8027802:	60f8      	str	r0, [r7, #12]
 8027804:	60b9      	str	r1, [r7, #8]
 8027806:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	2200      	movs	r2, #0
 802780c:	68b9      	ldr	r1, [r7, #8]
 802780e:	68f8      	ldr	r0, [r7, #12]
 8027810:	f7ff ffb0 	bl	8027774 <spi_flash_read_data>
 8027814:	4603      	mov	r3, r0
}
 8027816:	4618      	mov	r0, r3
 8027818:	3710      	adds	r7, #16
 802781a:	46bd      	mov	sp, r7
 802781c:	bd80      	pop	{r7, pc}

0802781e <spi_flash_read_spare_data>:

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
 802781e:	b480      	push	{r7}
 8027820:	b085      	sub	sp, #20
 8027822:	af00      	add	r7, sp, #0
 8027824:	60f8      	str	r0, [r7, #12]
 8027826:	60b9      	str	r1, [r7, #8]
 8027828:	607a      	str	r2, [r7, #4]
 802782a:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 802782c:	2304      	movs	r3, #4
}
 802782e:	4618      	mov	r0, r3
 8027830:	3714      	adds	r7, #20
 8027832:	46bd      	mov	sp, r7
 8027834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027838:	4770      	bx	lr
	...

0802783c <spi_flash_erase_block>:

static uint32_t spi_flash_erase_block(uint32_t page)
{
 802783c:	b580      	push	{r7, lr}
 802783e:	b084      	sub	sp, #16
 8027840:	af00      	add	r7, sp, #0
 8027842:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 8027844:	4b14      	ldr	r3, [pc, #80]	; (8027898 <spi_flash_erase_block+0x5c>)
 8027846:	781b      	ldrb	r3, [r3, #0]
 8027848:	461a      	mov	r2, r3
 802784a:	687b      	ldr	r3, [r7, #4]
 802784c:	4093      	lsls	r3, r2
 802784e:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8027850:	f7ff ff3c 	bl	80276cc <spi_flash_write_enable>

    spi_flash_select_chip();
 8027854:	f7ff fdc4 	bl	80273e0 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8027858:	4b0f      	ldr	r3, [pc, #60]	; (8027898 <spi_flash_erase_block+0x5c>)
 802785a:	795b      	ldrb	r3, [r3, #5]
 802785c:	4618      	mov	r0, r3
 802785e:	f7ff fe8b 	bl	8027578 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027862:	68fb      	ldr	r3, [r7, #12]
 8027864:	0c1b      	lsrs	r3, r3, #16
 8027866:	b2db      	uxtb	r3, r3
 8027868:	4618      	mov	r0, r3
 802786a:	f7ff fe85 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 802786e:	68fb      	ldr	r3, [r7, #12]
 8027870:	0a1b      	lsrs	r3, r3, #8
 8027872:	b2db      	uxtb	r3, r3
 8027874:	4618      	mov	r0, r3
 8027876:	f7ff fe7f 	bl	8027578 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 802787a:	68fb      	ldr	r3, [r7, #12]
 802787c:	b2db      	uxtb	r3, r3
 802787e:	4618      	mov	r0, r3
 8027880:	f7ff fe7a 	bl	8027578 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8027884:	f7ff fdb8 	bl	80273f8 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8027888:	f7ff fec8 	bl	802761c <spi_flash_get_status>
 802788c:	4603      	mov	r3, r0
}
 802788e:	4618      	mov	r0, r3
 8027890:	3710      	adds	r7, #16
 8027892:	46bd      	mov	sp, r7
 8027894:	bd80      	pop	{r7, pc}
 8027896:	bf00      	nop
 8027898:	200057f8 	.word	0x200057f8

0802789c <spi_flash_is_bb_supported>:

static inline bool spi_flash_is_bb_supported()
{
 802789c:	b480      	push	{r7}
 802789e:	af00      	add	r7, sp, #0
    return false;
 80278a0:	2300      	movs	r3, #0
}
 80278a2:	4618      	mov	r0, r3
 80278a4:	46bd      	mov	sp, r7
 80278a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278aa:	4770      	bx	lr

080278ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80278ac:	b580      	push	{r7, lr}
 80278ae:	b082      	sub	sp, #8
 80278b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80278b2:	2300      	movs	r3, #0
 80278b4:	607b      	str	r3, [r7, #4]
 80278b6:	4b1f      	ldr	r3, [pc, #124]	; (8027934 <HAL_MspInit+0x88>)
 80278b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80278ba:	4a1e      	ldr	r2, [pc, #120]	; (8027934 <HAL_MspInit+0x88>)
 80278bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80278c0:	6453      	str	r3, [r2, #68]	; 0x44
 80278c2:	4b1c      	ldr	r3, [pc, #112]	; (8027934 <HAL_MspInit+0x88>)
 80278c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80278c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80278ca:	607b      	str	r3, [r7, #4]
 80278cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80278ce:	2300      	movs	r3, #0
 80278d0:	603b      	str	r3, [r7, #0]
 80278d2:	4b18      	ldr	r3, [pc, #96]	; (8027934 <HAL_MspInit+0x88>)
 80278d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80278d6:	4a17      	ldr	r2, [pc, #92]	; (8027934 <HAL_MspInit+0x88>)
 80278d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80278dc:	6413      	str	r3, [r2, #64]	; 0x40
 80278de:	4b15      	ldr	r3, [pc, #84]	; (8027934 <HAL_MspInit+0x88>)
 80278e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80278e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80278e6:	603b      	str	r3, [r7, #0]
 80278e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80278ea:	2200      	movs	r2, #0
 80278ec:	2100      	movs	r1, #0
 80278ee:	2001      	movs	r0, #1
 80278f0:	f000 fc49 	bl	8028186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80278f4:	2001      	movs	r0, #1
 80278f6:	f000 fc62 	bl	80281be <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80278fa:	2200      	movs	r2, #0
 80278fc:	2100      	movs	r1, #0
 80278fe:	2004      	movs	r0, #4
 8027900:	f000 fc41 	bl	8028186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8027904:	2004      	movs	r0, #4
 8027906:	f000 fc5a 	bl	80281be <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 802790a:	2200      	movs	r2, #0
 802790c:	2100      	movs	r1, #0
 802790e:	2005      	movs	r0, #5
 8027910:	f000 fc39 	bl	8028186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8027914:	2005      	movs	r0, #5
 8027916:	f000 fc52 	bl	80281be <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 802791a:	2200      	movs	r2, #0
 802791c:	2100      	movs	r1, #0
 802791e:	2051      	movs	r0, #81	; 0x51
 8027920:	f000 fc31 	bl	8028186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8027924:	2051      	movs	r0, #81	; 0x51
 8027926:	f000 fc4a 	bl	80281be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802792a:	bf00      	nop
 802792c:	3708      	adds	r7, #8
 802792e:	46bd      	mov	sp, r7
 8027930:	bd80      	pop	{r7, pc}
 8027932:	bf00      	nop
 8027934:	40023800 	.word	0x40023800

08027938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8027938:	b580      	push	{r7, lr}
 802793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 802793c:	f003 fb5e 	bl	802affc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8027940:	e7fe      	b.n	8027940 <NMI_Handler+0x8>

08027942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8027942:	b480      	push	{r7}
 8027944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8027946:	e7fe      	b.n	8027946 <HardFault_Handler+0x4>

08027948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8027948:	b480      	push	{r7}
 802794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802794c:	e7fe      	b.n	802794c <MemManage_Handler+0x4>

0802794e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802794e:	b480      	push	{r7}
 8027950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8027952:	e7fe      	b.n	8027952 <BusFault_Handler+0x4>

08027954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8027954:	b480      	push	{r7}
 8027956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8027958:	e7fe      	b.n	8027958 <UsageFault_Handler+0x4>

0802795a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802795a:	b480      	push	{r7}
 802795c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802795e:	bf00      	nop
 8027960:	46bd      	mov	sp, r7
 8027962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027966:	4770      	bx	lr

08027968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8027968:	b480      	push	{r7}
 802796a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802796c:	bf00      	nop
 802796e:	46bd      	mov	sp, r7
 8027970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027974:	4770      	bx	lr

08027976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8027976:	b480      	push	{r7}
 8027978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802797a:	bf00      	nop
 802797c:	46bd      	mov	sp, r7
 802797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027982:	4770      	bx	lr

08027984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8027984:	b580      	push	{r7, lr}
 8027986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8027988:	f000 fa8a 	bl	8027ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802798c:	bf00      	nop
 802798e:	bd80      	pop	{r7, pc}

08027990 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8027990:	b580      	push	{r7, lr}
 8027992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8027994:	f002 feb4 	bl	802a700 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8027998:	bf00      	nop
 802799a:	bd80      	pop	{r7, pc}

0802799c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 802799c:	b580      	push	{r7, lr}
 802799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80279a0:	f000 fd1c 	bl	80283dc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80279a4:	bf00      	nop
 80279a6:	bd80      	pop	{r7, pc}

080279a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80279a8:	b480      	push	{r7}
 80279aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80279ac:	bf00      	nop
 80279ae:	46bd      	mov	sp, r7
 80279b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279b4:	4770      	bx	lr
	...

080279b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80279b8:	b580      	push	{r7, lr}
 80279ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80279bc:	4802      	ldr	r0, [pc, #8]	; (80279c8 <SPI1_IRQHandler+0x10>)
 80279be:	f003 ff6d 	bl	802b89c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80279c2:	bf00      	nop
 80279c4:	bd80      	pop	{r7, pc}
 80279c6:	bf00      	nop
 80279c8:	20005788 	.word	0x20005788

080279cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80279cc:	b580      	push	{r7, lr}
 80279ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80279d0:	4802      	ldr	r0, [pc, #8]	; (80279dc <USART1_IRQHandler+0x10>)
 80279d2:	f004 fe27 	bl	802c624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80279d6:	bf00      	nop
 80279d8:	bd80      	pop	{r7, pc}
 80279da:	bf00      	nop
 80279dc:	20005854 	.word	0x20005854

080279e0 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80279e0:	b580      	push	{r7, lr}
 80279e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80279e4:	4802      	ldr	r0, [pc, #8]	; (80279f0 <FSMC_IRQHandler+0x10>)
 80279e6:	f001 fb30 	bl	802904a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80279ea:	bf00      	nop
 80279ec:	bd80      	pop	{r7, pc}
 80279ee:	bf00      	nop
 80279f0:	2000125c 	.word	0x2000125c

080279f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80279f4:	b580      	push	{r7, lr}
 80279f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80279f8:	4802      	ldr	r0, [pc, #8]	; (8027a04 <OTG_FS_IRQHandler+0x10>)
 80279fa:	f001 fd54 	bl	80294a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80279fe:	bf00      	nop
 8027a00:	bd80      	pop	{r7, pc}
 8027a02:	bf00      	nop
 8027a04:	20008078 	.word	0x20008078

08027a08 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8027a08:	b580      	push	{r7, lr}
 8027a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027a0c:	4802      	ldr	r0, [pc, #8]	; (8027a18 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8027a0e:	f001 fd4a 	bl	80294a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8027a12:	bf00      	nop
 8027a14:	bd80      	pop	{r7, pc}
 8027a16:	bf00      	nop
 8027a18:	20008584 	.word	0x20008584

08027a1c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8027a1c:	b580      	push	{r7, lr}
 8027a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027a20:	4802      	ldr	r0, [pc, #8]	; (8027a2c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8027a22:	f001 fd40 	bl	80294a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8027a26:	bf00      	nop
 8027a28:	bd80      	pop	{r7, pc}
 8027a2a:	bf00      	nop
 8027a2c:	20008584 	.word	0x20008584

08027a30 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8027a30:	b580      	push	{r7, lr}
 8027a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027a34:	4802      	ldr	r0, [pc, #8]	; (8027a40 <OTG_HS_IRQHandler+0x10>)
 8027a36:	f001 fd36 	bl	80294a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8027a3a:	bf00      	nop
 8027a3c:	bd80      	pop	{r7, pc}
 8027a3e:	bf00      	nop
 8027a40:	20008584 	.word	0x20008584

08027a44 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8027a44:	b480      	push	{r7}
 8027a46:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8027a48:	bf00      	nop
 8027a4a:	46bd      	mov	sp, r7
 8027a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a50:	4770      	bx	lr

08027a52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8027a52:	b480      	push	{r7}
 8027a54:	af00      	add	r7, sp, #0
  return 1;
 8027a56:	2301      	movs	r3, #1
}
 8027a58:	4618      	mov	r0, r3
 8027a5a:	46bd      	mov	sp, r7
 8027a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a60:	4770      	bx	lr

08027a62 <_kill>:

int _kill(int pid, int sig)
{
 8027a62:	b580      	push	{r7, lr}
 8027a64:	b082      	sub	sp, #8
 8027a66:	af00      	add	r7, sp, #0
 8027a68:	6078      	str	r0, [r7, #4]
 8027a6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8027a6c:	f00a fb0a 	bl	8032084 <__errno>
 8027a70:	4603      	mov	r3, r0
 8027a72:	2216      	movs	r2, #22
 8027a74:	601a      	str	r2, [r3, #0]
  return -1;
 8027a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8027a7a:	4618      	mov	r0, r3
 8027a7c:	3708      	adds	r7, #8
 8027a7e:	46bd      	mov	sp, r7
 8027a80:	bd80      	pop	{r7, pc}

08027a82 <_exit>:

void _exit (int status)
{
 8027a82:	b580      	push	{r7, lr}
 8027a84:	b082      	sub	sp, #8
 8027a86:	af00      	add	r7, sp, #0
 8027a88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8027a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8027a8e:	6878      	ldr	r0, [r7, #4]
 8027a90:	f7ff ffe7 	bl	8027a62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8027a94:	e7fe      	b.n	8027a94 <_exit+0x12>

08027a96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8027a96:	b580      	push	{r7, lr}
 8027a98:	b086      	sub	sp, #24
 8027a9a:	af00      	add	r7, sp, #0
 8027a9c:	60f8      	str	r0, [r7, #12]
 8027a9e:	60b9      	str	r1, [r7, #8]
 8027aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027aa2:	2300      	movs	r3, #0
 8027aa4:	617b      	str	r3, [r7, #20]
 8027aa6:	e00a      	b.n	8027abe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8027aa8:	f3af 8000 	nop.w
 8027aac:	4601      	mov	r1, r0
 8027aae:	68bb      	ldr	r3, [r7, #8]
 8027ab0:	1c5a      	adds	r2, r3, #1
 8027ab2:	60ba      	str	r2, [r7, #8]
 8027ab4:	b2ca      	uxtb	r2, r1
 8027ab6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027ab8:	697b      	ldr	r3, [r7, #20]
 8027aba:	3301      	adds	r3, #1
 8027abc:	617b      	str	r3, [r7, #20]
 8027abe:	697a      	ldr	r2, [r7, #20]
 8027ac0:	687b      	ldr	r3, [r7, #4]
 8027ac2:	429a      	cmp	r2, r3
 8027ac4:	dbf0      	blt.n	8027aa8 <_read+0x12>
  }

  return len;
 8027ac6:	687b      	ldr	r3, [r7, #4]
}
 8027ac8:	4618      	mov	r0, r3
 8027aca:	3718      	adds	r7, #24
 8027acc:	46bd      	mov	sp, r7
 8027ace:	bd80      	pop	{r7, pc}

08027ad0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8027ad0:	b480      	push	{r7}
 8027ad2:	b083      	sub	sp, #12
 8027ad4:	af00      	add	r7, sp, #0
 8027ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8027ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8027adc:	4618      	mov	r0, r3
 8027ade:	370c      	adds	r7, #12
 8027ae0:	46bd      	mov	sp, r7
 8027ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ae6:	4770      	bx	lr

08027ae8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8027ae8:	b480      	push	{r7}
 8027aea:	b083      	sub	sp, #12
 8027aec:	af00      	add	r7, sp, #0
 8027aee:	6078      	str	r0, [r7, #4]
 8027af0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8027af2:	683b      	ldr	r3, [r7, #0]
 8027af4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027af8:	605a      	str	r2, [r3, #4]
  return 0;
 8027afa:	2300      	movs	r3, #0
}
 8027afc:	4618      	mov	r0, r3
 8027afe:	370c      	adds	r7, #12
 8027b00:	46bd      	mov	sp, r7
 8027b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b06:	4770      	bx	lr

08027b08 <_isatty>:

int _isatty(int file)
{
 8027b08:	b480      	push	{r7}
 8027b0a:	b083      	sub	sp, #12
 8027b0c:	af00      	add	r7, sp, #0
 8027b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8027b10:	2301      	movs	r3, #1
}
 8027b12:	4618      	mov	r0, r3
 8027b14:	370c      	adds	r7, #12
 8027b16:	46bd      	mov	sp, r7
 8027b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b1c:	4770      	bx	lr

08027b1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8027b1e:	b480      	push	{r7}
 8027b20:	b085      	sub	sp, #20
 8027b22:	af00      	add	r7, sp, #0
 8027b24:	60f8      	str	r0, [r7, #12]
 8027b26:	60b9      	str	r1, [r7, #8]
 8027b28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8027b2a:	2300      	movs	r3, #0
}
 8027b2c:	4618      	mov	r0, r3
 8027b2e:	3714      	adds	r7, #20
 8027b30:	46bd      	mov	sp, r7
 8027b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b36:	4770      	bx	lr

08027b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8027b38:	b580      	push	{r7, lr}
 8027b3a:	b086      	sub	sp, #24
 8027b3c:	af00      	add	r7, sp, #0
 8027b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8027b40:	4a14      	ldr	r2, [pc, #80]	; (8027b94 <_sbrk+0x5c>)
 8027b42:	4b15      	ldr	r3, [pc, #84]	; (8027b98 <_sbrk+0x60>)
 8027b44:	1ad3      	subs	r3, r2, r3
 8027b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8027b48:	697b      	ldr	r3, [r7, #20]
 8027b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8027b4c:	4b13      	ldr	r3, [pc, #76]	; (8027b9c <_sbrk+0x64>)
 8027b4e:	681b      	ldr	r3, [r3, #0]
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d102      	bne.n	8027b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8027b54:	4b11      	ldr	r3, [pc, #68]	; (8027b9c <_sbrk+0x64>)
 8027b56:	4a12      	ldr	r2, [pc, #72]	; (8027ba0 <_sbrk+0x68>)
 8027b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8027b5a:	4b10      	ldr	r3, [pc, #64]	; (8027b9c <_sbrk+0x64>)
 8027b5c:	681a      	ldr	r2, [r3, #0]
 8027b5e:	687b      	ldr	r3, [r7, #4]
 8027b60:	4413      	add	r3, r2
 8027b62:	693a      	ldr	r2, [r7, #16]
 8027b64:	429a      	cmp	r2, r3
 8027b66:	d207      	bcs.n	8027b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8027b68:	f00a fa8c 	bl	8032084 <__errno>
 8027b6c:	4603      	mov	r3, r0
 8027b6e:	220c      	movs	r2, #12
 8027b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8027b72:	f04f 33ff 	mov.w	r3, #4294967295
 8027b76:	e009      	b.n	8027b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8027b78:	4b08      	ldr	r3, [pc, #32]	; (8027b9c <_sbrk+0x64>)
 8027b7a:	681b      	ldr	r3, [r3, #0]
 8027b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8027b7e:	4b07      	ldr	r3, [pc, #28]	; (8027b9c <_sbrk+0x64>)
 8027b80:	681a      	ldr	r2, [r3, #0]
 8027b82:	687b      	ldr	r3, [r7, #4]
 8027b84:	4413      	add	r3, r2
 8027b86:	4a05      	ldr	r2, [pc, #20]	; (8027b9c <_sbrk+0x64>)
 8027b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8027b8a:	68fb      	ldr	r3, [r7, #12]
}
 8027b8c:	4618      	mov	r0, r3
 8027b8e:	3718      	adds	r7, #24
 8027b90:	46bd      	mov	sp, r7
 8027b92:	bd80      	pop	{r7, pc}
 8027b94:	2000c000 	.word	0x2000c000
 8027b98:	00001000 	.word	0x00001000
 8027b9c:	20005808 	.word	0x20005808
 8027ba0:	20008fc0 	.word	0x20008fc0

08027ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8027ba4:	b480      	push	{r7}
 8027ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8027ba8:	4b07      	ldr	r3, [pc, #28]	; (8027bc8 <SystemInit+0x24>)
 8027baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027bae:	4a06      	ldr	r2, [pc, #24]	; (8027bc8 <SystemInit+0x24>)
 8027bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8027bb8:	4b03      	ldr	r3, [pc, #12]	; (8027bc8 <SystemInit+0x24>)
 8027bba:	4a04      	ldr	r2, [pc, #16]	; (8027bcc <SystemInit+0x28>)
 8027bbc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8027bbe:	bf00      	nop
 8027bc0:	46bd      	mov	sp, r7
 8027bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bc6:	4770      	bx	lr
 8027bc8:	e000ed00 	.word	0xe000ed00
 8027bcc:	08022000 	.word	0x08022000

08027bd0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8027bd0:	b580      	push	{r7, lr}
 8027bd2:	b088      	sub	sp, #32
 8027bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8027bd6:	f107 030c 	add.w	r3, r7, #12
 8027bda:	2200      	movs	r2, #0
 8027bdc:	601a      	str	r2, [r3, #0]
 8027bde:	605a      	str	r2, [r3, #4]
 8027be0:	609a      	str	r2, [r3, #8]
 8027be2:	60da      	str	r2, [r3, #12]
 8027be4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8027be6:	1d3b      	adds	r3, r7, #4
 8027be8:	2200      	movs	r2, #0
 8027bea:	601a      	str	r2, [r3, #0]
 8027bec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8027bee:	4b1e      	ldr	r3, [pc, #120]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027bf0:	4a1e      	ldr	r2, [pc, #120]	; (8027c6c <MX_TIM3_Init+0x9c>)
 8027bf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8027bf4:	4b1c      	ldr	r3, [pc, #112]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027bf6:	2200      	movs	r2, #0
 8027bf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8027bfa:	4b1b      	ldr	r3, [pc, #108]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027bfc:	2200      	movs	r2, #0
 8027bfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8027c00:	4b19      	ldr	r3, [pc, #100]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027c06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8027c08:	4b17      	ldr	r3, [pc, #92]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c0a:	2200      	movs	r2, #0
 8027c0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8027c0e:	4b16      	ldr	r3, [pc, #88]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c10:	2200      	movs	r2, #0
 8027c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8027c14:	4814      	ldr	r0, [pc, #80]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c16:	f004 f967 	bl	802bee8 <HAL_TIM_Base_Init>
 8027c1a:	4603      	mov	r3, r0
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d001      	beq.n	8027c24 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8027c20:	f7fc fba8 	bl	8024374 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8027c24:	2307      	movs	r3, #7
 8027c26:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8027c28:	2300      	movs	r3, #0
 8027c2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8027c2c:	f107 030c 	add.w	r3, r7, #12
 8027c30:	4619      	mov	r1, r3
 8027c32:	480d      	ldr	r0, [pc, #52]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c34:	f004 f9a7 	bl	802bf86 <HAL_TIM_SlaveConfigSynchro>
 8027c38:	4603      	mov	r3, r0
 8027c3a:	2b00      	cmp	r3, #0
 8027c3c:	d001      	beq.n	8027c42 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8027c3e:	f7fc fb99 	bl	8024374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8027c42:	2300      	movs	r3, #0
 8027c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8027c46:	2300      	movs	r3, #0
 8027c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8027c4a:	1d3b      	adds	r3, r7, #4
 8027c4c:	4619      	mov	r1, r3
 8027c4e:	4806      	ldr	r0, [pc, #24]	; (8027c68 <MX_TIM3_Init+0x98>)
 8027c50:	f004 fb8c 	bl	802c36c <HAL_TIMEx_MasterConfigSynchronization>
 8027c54:	4603      	mov	r3, r0
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	d001      	beq.n	8027c5e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8027c5a:	f7fc fb8b 	bl	8024374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8027c5e:	bf00      	nop
 8027c60:	3720      	adds	r7, #32
 8027c62:	46bd      	mov	sp, r7
 8027c64:	bd80      	pop	{r7, pc}
 8027c66:	bf00      	nop
 8027c68:	2000580c 	.word	0x2000580c
 8027c6c:	40000400 	.word	0x40000400

08027c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8027c70:	b480      	push	{r7}
 8027c72:	b085      	sub	sp, #20
 8027c74:	af00      	add	r7, sp, #0
 8027c76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8027c78:	687b      	ldr	r3, [r7, #4]
 8027c7a:	681b      	ldr	r3, [r3, #0]
 8027c7c:	4a0b      	ldr	r2, [pc, #44]	; (8027cac <HAL_TIM_Base_MspInit+0x3c>)
 8027c7e:	4293      	cmp	r3, r2
 8027c80:	d10d      	bne.n	8027c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8027c82:	2300      	movs	r3, #0
 8027c84:	60fb      	str	r3, [r7, #12]
 8027c86:	4b0a      	ldr	r3, [pc, #40]	; (8027cb0 <HAL_TIM_Base_MspInit+0x40>)
 8027c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c8a:	4a09      	ldr	r2, [pc, #36]	; (8027cb0 <HAL_TIM_Base_MspInit+0x40>)
 8027c8c:	f043 0302 	orr.w	r3, r3, #2
 8027c90:	6413      	str	r3, [r2, #64]	; 0x40
 8027c92:	4b07      	ldr	r3, [pc, #28]	; (8027cb0 <HAL_TIM_Base_MspInit+0x40>)
 8027c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027c96:	f003 0302 	and.w	r3, r3, #2
 8027c9a:	60fb      	str	r3, [r7, #12]
 8027c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8027c9e:	bf00      	nop
 8027ca0:	3714      	adds	r7, #20
 8027ca2:	46bd      	mov	sp, r7
 8027ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ca8:	4770      	bx	lr
 8027caa:	bf00      	nop
 8027cac:	40000400 	.word	0x40000400
 8027cb0:	40023800 	.word	0x40023800

08027cb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8027cb4:	b580      	push	{r7, lr}
 8027cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8027cb8:	4b11      	ldr	r3, [pc, #68]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cba:	4a12      	ldr	r2, [pc, #72]	; (8027d04 <MX_USART1_UART_Init+0x50>)
 8027cbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8027cbe:	4b10      	ldr	r3, [pc, #64]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8027cc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8027cc6:	4b0e      	ldr	r3, [pc, #56]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cc8:	2200      	movs	r2, #0
 8027cca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027ccc:	4b0c      	ldr	r3, [pc, #48]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cce:	2200      	movs	r2, #0
 8027cd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8027cd2:	4b0b      	ldr	r3, [pc, #44]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cd4:	2200      	movs	r2, #0
 8027cd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8027cd8:	4b09      	ldr	r3, [pc, #36]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cda:	220c      	movs	r2, #12
 8027cdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027cde:	4b08      	ldr	r3, [pc, #32]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027ce0:	2200      	movs	r2, #0
 8027ce2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8027ce4:	4b06      	ldr	r3, [pc, #24]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027ce6:	2200      	movs	r2, #0
 8027ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027cea:	4805      	ldr	r0, [pc, #20]	; (8027d00 <MX_USART1_UART_Init+0x4c>)
 8027cec:	f004 fbba 	bl	802c464 <HAL_UART_Init>
 8027cf0:	4603      	mov	r3, r0
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	d001      	beq.n	8027cfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8027cf6:	f7fc fb3d 	bl	8024374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8027cfa:	bf00      	nop
 8027cfc:	bd80      	pop	{r7, pc}
 8027cfe:	bf00      	nop
 8027d00:	20005854 	.word	0x20005854
 8027d04:	40011000 	.word	0x40011000

08027d08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027d08:	b580      	push	{r7, lr}
 8027d0a:	b08a      	sub	sp, #40	; 0x28
 8027d0c:	af00      	add	r7, sp, #0
 8027d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027d10:	f107 0314 	add.w	r3, r7, #20
 8027d14:	2200      	movs	r2, #0
 8027d16:	601a      	str	r2, [r3, #0]
 8027d18:	605a      	str	r2, [r3, #4]
 8027d1a:	609a      	str	r2, [r3, #8]
 8027d1c:	60da      	str	r2, [r3, #12]
 8027d1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8027d20:	687b      	ldr	r3, [r7, #4]
 8027d22:	681b      	ldr	r3, [r3, #0]
 8027d24:	4a1d      	ldr	r2, [pc, #116]	; (8027d9c <HAL_UART_MspInit+0x94>)
 8027d26:	4293      	cmp	r3, r2
 8027d28:	d134      	bne.n	8027d94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8027d2a:	2300      	movs	r3, #0
 8027d2c:	613b      	str	r3, [r7, #16]
 8027d2e:	4b1c      	ldr	r3, [pc, #112]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d32:	4a1b      	ldr	r2, [pc, #108]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d34:	f043 0310 	orr.w	r3, r3, #16
 8027d38:	6453      	str	r3, [r2, #68]	; 0x44
 8027d3a:	4b19      	ldr	r3, [pc, #100]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027d3e:	f003 0310 	and.w	r3, r3, #16
 8027d42:	613b      	str	r3, [r7, #16]
 8027d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027d46:	2300      	movs	r3, #0
 8027d48:	60fb      	str	r3, [r7, #12]
 8027d4a:	4b15      	ldr	r3, [pc, #84]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d4e:	4a14      	ldr	r2, [pc, #80]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d50:	f043 0301 	orr.w	r3, r3, #1
 8027d54:	6313      	str	r3, [r2, #48]	; 0x30
 8027d56:	4b12      	ldr	r3, [pc, #72]	; (8027da0 <HAL_UART_MspInit+0x98>)
 8027d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027d5a:	f003 0301 	and.w	r3, r3, #1
 8027d5e:	60fb      	str	r3, [r7, #12]
 8027d60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8027d62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8027d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027d68:	2302      	movs	r3, #2
 8027d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8027d6c:	2300      	movs	r3, #0
 8027d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8027d70:	2303      	movs	r3, #3
 8027d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8027d74:	2307      	movs	r3, #7
 8027d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027d78:	f107 0314 	add.w	r3, r7, #20
 8027d7c:	4619      	mov	r1, r3
 8027d7e:	4809      	ldr	r0, [pc, #36]	; (8027da4 <HAL_UART_MspInit+0x9c>)
 8027d80:	f000 fe64 	bl	8028a4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8027d84:	2200      	movs	r2, #0
 8027d86:	2100      	movs	r1, #0
 8027d88:	2025      	movs	r0, #37	; 0x25
 8027d8a:	f000 f9fc 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8027d8e:	2025      	movs	r0, #37	; 0x25
 8027d90:	f000 fa15 	bl	80281be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8027d94:	bf00      	nop
 8027d96:	3728      	adds	r7, #40	; 0x28
 8027d98:	46bd      	mov	sp, r7
 8027d9a:	bd80      	pop	{r7, pc}
 8027d9c:	40011000 	.word	0x40011000
 8027da0:	40023800 	.word	0x40023800
 8027da4:	40020000 	.word	0x40020000

08027da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8027da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8027de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8027dac:	480d      	ldr	r0, [pc, #52]	; (8027de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8027dae:	490e      	ldr	r1, [pc, #56]	; (8027de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8027db0:	4a0e      	ldr	r2, [pc, #56]	; (8027dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8027db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8027db4:	e002      	b.n	8027dbc <LoopCopyDataInit>

08027db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8027db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8027db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8027dba:	3304      	adds	r3, #4

08027dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8027dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8027dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8027dc0:	d3f9      	bcc.n	8027db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8027dc2:	4a0b      	ldr	r2, [pc, #44]	; (8027df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8027dc4:	4c0b      	ldr	r4, [pc, #44]	; (8027df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8027dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027dc8:	e001      	b.n	8027dce <LoopFillZerobss>

08027dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027dcc:	3204      	adds	r2, #4

08027dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8027dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8027dd0:	d3fb      	bcc.n	8027dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8027dd2:	f7ff fee7 	bl	8027ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8027dd6:	f00a f95b 	bl	8032090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027dda:	f7fc f9fb 	bl	80241d4 <main>
  bx  lr    
 8027dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8027de0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8027de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8027de8:	2000092c 	.word	0x2000092c
  ldr r2, =_sidata
 8027dec:	08037958 	.word	0x08037958
  ldr r2, =_sbss
 8027df0:	20000930 	.word	0x20000930
  ldr r4, =_ebss
 8027df4:	20008fbc 	.word	0x20008fbc

08027df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027df8:	e7fe      	b.n	8027df8 <ADC_IRQHandler>
	...

08027dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8027dfc:	b580      	push	{r7, lr}
 8027dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027e00:	4b0e      	ldr	r3, [pc, #56]	; (8027e3c <HAL_Init+0x40>)
 8027e02:	681b      	ldr	r3, [r3, #0]
 8027e04:	4a0d      	ldr	r2, [pc, #52]	; (8027e3c <HAL_Init+0x40>)
 8027e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8027e0c:	4b0b      	ldr	r3, [pc, #44]	; (8027e3c <HAL_Init+0x40>)
 8027e0e:	681b      	ldr	r3, [r3, #0]
 8027e10:	4a0a      	ldr	r2, [pc, #40]	; (8027e3c <HAL_Init+0x40>)
 8027e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8027e18:	4b08      	ldr	r3, [pc, #32]	; (8027e3c <HAL_Init+0x40>)
 8027e1a:	681b      	ldr	r3, [r3, #0]
 8027e1c:	4a07      	ldr	r2, [pc, #28]	; (8027e3c <HAL_Init+0x40>)
 8027e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8027e24:	2003      	movs	r0, #3
 8027e26:	f000 f9a3 	bl	8028170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8027e2a:	200f      	movs	r0, #15
 8027e2c:	f000 f808 	bl	8027e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8027e30:	f7ff fd3c 	bl	80278ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8027e34:	2300      	movs	r3, #0
}
 8027e36:	4618      	mov	r0, r3
 8027e38:	bd80      	pop	{r7, pc}
 8027e3a:	bf00      	nop
 8027e3c:	40023c00 	.word	0x40023c00

08027e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8027e40:	b580      	push	{r7, lr}
 8027e42:	b082      	sub	sp, #8
 8027e44:	af00      	add	r7, sp, #0
 8027e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8027e48:	4b12      	ldr	r3, [pc, #72]	; (8027e94 <HAL_InitTick+0x54>)
 8027e4a:	681a      	ldr	r2, [r3, #0]
 8027e4c:	4b12      	ldr	r3, [pc, #72]	; (8027e98 <HAL_InitTick+0x58>)
 8027e4e:	781b      	ldrb	r3, [r3, #0]
 8027e50:	4619      	mov	r1, r3
 8027e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8027e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8027e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8027e5e:	4618      	mov	r0, r3
 8027e60:	f000 f9c9 	bl	80281f6 <HAL_SYSTICK_Config>
 8027e64:	4603      	mov	r3, r0
 8027e66:	2b00      	cmp	r3, #0
 8027e68:	d001      	beq.n	8027e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8027e6a:	2301      	movs	r3, #1
 8027e6c:	e00e      	b.n	8027e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8027e6e:	687b      	ldr	r3, [r7, #4]
 8027e70:	2b0f      	cmp	r3, #15
 8027e72:	d80a      	bhi.n	8027e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8027e74:	2200      	movs	r2, #0
 8027e76:	6879      	ldr	r1, [r7, #4]
 8027e78:	f04f 30ff 	mov.w	r0, #4294967295
 8027e7c:	f000 f983 	bl	8028186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8027e80:	4a06      	ldr	r2, [pc, #24]	; (8027e9c <HAL_InitTick+0x5c>)
 8027e82:	687b      	ldr	r3, [r7, #4]
 8027e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8027e86:	2300      	movs	r3, #0
 8027e88:	e000      	b.n	8027e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8027e8a:	2301      	movs	r3, #1
}
 8027e8c:	4618      	mov	r0, r3
 8027e8e:	3708      	adds	r7, #8
 8027e90:	46bd      	mov	sp, r7
 8027e92:	bd80      	pop	{r7, pc}
 8027e94:	20000138 	.word	0x20000138
 8027e98:	20000140 	.word	0x20000140
 8027e9c:	2000013c 	.word	0x2000013c

08027ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8027ea0:	b480      	push	{r7}
 8027ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8027ea4:	4b06      	ldr	r3, [pc, #24]	; (8027ec0 <HAL_IncTick+0x20>)
 8027ea6:	781b      	ldrb	r3, [r3, #0]
 8027ea8:	461a      	mov	r2, r3
 8027eaa:	4b06      	ldr	r3, [pc, #24]	; (8027ec4 <HAL_IncTick+0x24>)
 8027eac:	681b      	ldr	r3, [r3, #0]
 8027eae:	4413      	add	r3, r2
 8027eb0:	4a04      	ldr	r2, [pc, #16]	; (8027ec4 <HAL_IncTick+0x24>)
 8027eb2:	6013      	str	r3, [r2, #0]
}
 8027eb4:	bf00      	nop
 8027eb6:	46bd      	mov	sp, r7
 8027eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ebc:	4770      	bx	lr
 8027ebe:	bf00      	nop
 8027ec0:	20000140 	.word	0x20000140
 8027ec4:	20005898 	.word	0x20005898

08027ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8027ec8:	b480      	push	{r7}
 8027eca:	af00      	add	r7, sp, #0
  return uwTick;
 8027ecc:	4b03      	ldr	r3, [pc, #12]	; (8027edc <HAL_GetTick+0x14>)
 8027ece:	681b      	ldr	r3, [r3, #0]
}
 8027ed0:	4618      	mov	r0, r3
 8027ed2:	46bd      	mov	sp, r7
 8027ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ed8:	4770      	bx	lr
 8027eda:	bf00      	nop
 8027edc:	20005898 	.word	0x20005898

08027ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8027ee0:	b580      	push	{r7, lr}
 8027ee2:	b084      	sub	sp, #16
 8027ee4:	af00      	add	r7, sp, #0
 8027ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8027ee8:	f7ff ffee 	bl	8027ec8 <HAL_GetTick>
 8027eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8027eee:	687b      	ldr	r3, [r7, #4]
 8027ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8027ef2:	68fb      	ldr	r3, [r7, #12]
 8027ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ef8:	d005      	beq.n	8027f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8027efa:	4b0a      	ldr	r3, [pc, #40]	; (8027f24 <HAL_Delay+0x44>)
 8027efc:	781b      	ldrb	r3, [r3, #0]
 8027efe:	461a      	mov	r2, r3
 8027f00:	68fb      	ldr	r3, [r7, #12]
 8027f02:	4413      	add	r3, r2
 8027f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8027f06:	bf00      	nop
 8027f08:	f7ff ffde 	bl	8027ec8 <HAL_GetTick>
 8027f0c:	4602      	mov	r2, r0
 8027f0e:	68bb      	ldr	r3, [r7, #8]
 8027f10:	1ad3      	subs	r3, r2, r3
 8027f12:	68fa      	ldr	r2, [r7, #12]
 8027f14:	429a      	cmp	r2, r3
 8027f16:	d8f7      	bhi.n	8027f08 <HAL_Delay+0x28>
  {
  }
}
 8027f18:	bf00      	nop
 8027f1a:	bf00      	nop
 8027f1c:	3710      	adds	r7, #16
 8027f1e:	46bd      	mov	sp, r7
 8027f20:	bd80      	pop	{r7, pc}
 8027f22:	bf00      	nop
 8027f24:	20000140 	.word	0x20000140

08027f28 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8027f28:	b480      	push	{r7}
 8027f2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8027f2c:	4b05      	ldr	r3, [pc, #20]	; (8027f44 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8027f2e:	685b      	ldr	r3, [r3, #4]
 8027f30:	4a04      	ldr	r2, [pc, #16]	; (8027f44 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8027f32:	f043 0301 	orr.w	r3, r3, #1
 8027f36:	6053      	str	r3, [r2, #4]
}
 8027f38:	bf00      	nop
 8027f3a:	46bd      	mov	sp, r7
 8027f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f40:	4770      	bx	lr
 8027f42:	bf00      	nop
 8027f44:	e0042000 	.word	0xe0042000

08027f48 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8027f48:	b480      	push	{r7}
 8027f4a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8027f4c:	4b05      	ldr	r3, [pc, #20]	; (8027f64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8027f4e:	685b      	ldr	r3, [r3, #4]
 8027f50:	4a04      	ldr	r2, [pc, #16]	; (8027f64 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8027f52:	f043 0302 	orr.w	r3, r3, #2
 8027f56:	6053      	str	r3, [r2, #4]
}
 8027f58:	bf00      	nop
 8027f5a:	46bd      	mov	sp, r7
 8027f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f60:	4770      	bx	lr
 8027f62:	bf00      	nop
 8027f64:	e0042000 	.word	0xe0042000

08027f68 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8027f68:	b480      	push	{r7}
 8027f6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8027f6c:	4b05      	ldr	r3, [pc, #20]	; (8027f84 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8027f6e:	685b      	ldr	r3, [r3, #4]
 8027f70:	4a04      	ldr	r2, [pc, #16]	; (8027f84 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8027f72:	f043 0304 	orr.w	r3, r3, #4
 8027f76:	6053      	str	r3, [r2, #4]
}
 8027f78:	bf00      	nop
 8027f7a:	46bd      	mov	sp, r7
 8027f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f80:	4770      	bx	lr
 8027f82:	bf00      	nop
 8027f84:	e0042000 	.word	0xe0042000

08027f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027f88:	b480      	push	{r7}
 8027f8a:	b085      	sub	sp, #20
 8027f8c:	af00      	add	r7, sp, #0
 8027f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8027f90:	687b      	ldr	r3, [r7, #4]
 8027f92:	f003 0307 	and.w	r3, r3, #7
 8027f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8027f98:	4b0c      	ldr	r3, [pc, #48]	; (8027fcc <__NVIC_SetPriorityGrouping+0x44>)
 8027f9a:	68db      	ldr	r3, [r3, #12]
 8027f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8027f9e:	68ba      	ldr	r2, [r7, #8]
 8027fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8027fa4:	4013      	ands	r3, r2
 8027fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8027fa8:	68fb      	ldr	r3, [r7, #12]
 8027faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027fac:	68bb      	ldr	r3, [r7, #8]
 8027fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8027fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8027fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8027fba:	4a04      	ldr	r2, [pc, #16]	; (8027fcc <__NVIC_SetPriorityGrouping+0x44>)
 8027fbc:	68bb      	ldr	r3, [r7, #8]
 8027fbe:	60d3      	str	r3, [r2, #12]
}
 8027fc0:	bf00      	nop
 8027fc2:	3714      	adds	r7, #20
 8027fc4:	46bd      	mov	sp, r7
 8027fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fca:	4770      	bx	lr
 8027fcc:	e000ed00 	.word	0xe000ed00

08027fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8027fd0:	b480      	push	{r7}
 8027fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027fd4:	4b04      	ldr	r3, [pc, #16]	; (8027fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8027fd6:	68db      	ldr	r3, [r3, #12]
 8027fd8:	0a1b      	lsrs	r3, r3, #8
 8027fda:	f003 0307 	and.w	r3, r3, #7
}
 8027fde:	4618      	mov	r0, r3
 8027fe0:	46bd      	mov	sp, r7
 8027fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe6:	4770      	bx	lr
 8027fe8:	e000ed00 	.word	0xe000ed00

08027fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027fec:	b480      	push	{r7}
 8027fee:	b083      	sub	sp, #12
 8027ff0:	af00      	add	r7, sp, #0
 8027ff2:	4603      	mov	r3, r0
 8027ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	db0b      	blt.n	8028016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027ffe:	79fb      	ldrb	r3, [r7, #7]
 8028000:	f003 021f 	and.w	r2, r3, #31
 8028004:	4907      	ldr	r1, [pc, #28]	; (8028024 <__NVIC_EnableIRQ+0x38>)
 8028006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802800a:	095b      	lsrs	r3, r3, #5
 802800c:	2001      	movs	r0, #1
 802800e:	fa00 f202 	lsl.w	r2, r0, r2
 8028012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8028016:	bf00      	nop
 8028018:	370c      	adds	r7, #12
 802801a:	46bd      	mov	sp, r7
 802801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028020:	4770      	bx	lr
 8028022:	bf00      	nop
 8028024:	e000e100 	.word	0xe000e100

08028028 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8028028:	b480      	push	{r7}
 802802a:	b083      	sub	sp, #12
 802802c:	af00      	add	r7, sp, #0
 802802e:	4603      	mov	r3, r0
 8028030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8028032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028036:	2b00      	cmp	r3, #0
 8028038:	db12      	blt.n	8028060 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802803a:	79fb      	ldrb	r3, [r7, #7]
 802803c:	f003 021f 	and.w	r2, r3, #31
 8028040:	490a      	ldr	r1, [pc, #40]	; (802806c <__NVIC_DisableIRQ+0x44>)
 8028042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028046:	095b      	lsrs	r3, r3, #5
 8028048:	2001      	movs	r0, #1
 802804a:	fa00 f202 	lsl.w	r2, r0, r2
 802804e:	3320      	adds	r3, #32
 8028050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8028054:	f3bf 8f4f 	dsb	sy
}
 8028058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 802805a:	f3bf 8f6f 	isb	sy
}
 802805e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8028060:	bf00      	nop
 8028062:	370c      	adds	r7, #12
 8028064:	46bd      	mov	sp, r7
 8028066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802806a:	4770      	bx	lr
 802806c:	e000e100 	.word	0xe000e100

08028070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8028070:	b480      	push	{r7}
 8028072:	b083      	sub	sp, #12
 8028074:	af00      	add	r7, sp, #0
 8028076:	4603      	mov	r3, r0
 8028078:	6039      	str	r1, [r7, #0]
 802807a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802807c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028080:	2b00      	cmp	r3, #0
 8028082:	db0a      	blt.n	802809a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8028084:	683b      	ldr	r3, [r7, #0]
 8028086:	b2da      	uxtb	r2, r3
 8028088:	490c      	ldr	r1, [pc, #48]	; (80280bc <__NVIC_SetPriority+0x4c>)
 802808a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802808e:	0112      	lsls	r2, r2, #4
 8028090:	b2d2      	uxtb	r2, r2
 8028092:	440b      	add	r3, r1
 8028094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8028098:	e00a      	b.n	80280b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802809a:	683b      	ldr	r3, [r7, #0]
 802809c:	b2da      	uxtb	r2, r3
 802809e:	4908      	ldr	r1, [pc, #32]	; (80280c0 <__NVIC_SetPriority+0x50>)
 80280a0:	79fb      	ldrb	r3, [r7, #7]
 80280a2:	f003 030f 	and.w	r3, r3, #15
 80280a6:	3b04      	subs	r3, #4
 80280a8:	0112      	lsls	r2, r2, #4
 80280aa:	b2d2      	uxtb	r2, r2
 80280ac:	440b      	add	r3, r1
 80280ae:	761a      	strb	r2, [r3, #24]
}
 80280b0:	bf00      	nop
 80280b2:	370c      	adds	r7, #12
 80280b4:	46bd      	mov	sp, r7
 80280b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280ba:	4770      	bx	lr
 80280bc:	e000e100 	.word	0xe000e100
 80280c0:	e000ed00 	.word	0xe000ed00

080280c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80280c4:	b480      	push	{r7}
 80280c6:	b089      	sub	sp, #36	; 0x24
 80280c8:	af00      	add	r7, sp, #0
 80280ca:	60f8      	str	r0, [r7, #12]
 80280cc:	60b9      	str	r1, [r7, #8]
 80280ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80280d0:	68fb      	ldr	r3, [r7, #12]
 80280d2:	f003 0307 	and.w	r3, r3, #7
 80280d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80280d8:	69fb      	ldr	r3, [r7, #28]
 80280da:	f1c3 0307 	rsb	r3, r3, #7
 80280de:	2b04      	cmp	r3, #4
 80280e0:	bf28      	it	cs
 80280e2:	2304      	movcs	r3, #4
 80280e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80280e6:	69fb      	ldr	r3, [r7, #28]
 80280e8:	3304      	adds	r3, #4
 80280ea:	2b06      	cmp	r3, #6
 80280ec:	d902      	bls.n	80280f4 <NVIC_EncodePriority+0x30>
 80280ee:	69fb      	ldr	r3, [r7, #28]
 80280f0:	3b03      	subs	r3, #3
 80280f2:	e000      	b.n	80280f6 <NVIC_EncodePriority+0x32>
 80280f4:	2300      	movs	r3, #0
 80280f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80280f8:	f04f 32ff 	mov.w	r2, #4294967295
 80280fc:	69bb      	ldr	r3, [r7, #24]
 80280fe:	fa02 f303 	lsl.w	r3, r2, r3
 8028102:	43da      	mvns	r2, r3
 8028104:	68bb      	ldr	r3, [r7, #8]
 8028106:	401a      	ands	r2, r3
 8028108:	697b      	ldr	r3, [r7, #20]
 802810a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802810c:	f04f 31ff 	mov.w	r1, #4294967295
 8028110:	697b      	ldr	r3, [r7, #20]
 8028112:	fa01 f303 	lsl.w	r3, r1, r3
 8028116:	43d9      	mvns	r1, r3
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802811c:	4313      	orrs	r3, r2
         );
}
 802811e:	4618      	mov	r0, r3
 8028120:	3724      	adds	r7, #36	; 0x24
 8028122:	46bd      	mov	sp, r7
 8028124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028128:	4770      	bx	lr
	...

0802812c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802812c:	b580      	push	{r7, lr}
 802812e:	b082      	sub	sp, #8
 8028130:	af00      	add	r7, sp, #0
 8028132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	3b01      	subs	r3, #1
 8028138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802813c:	d301      	bcc.n	8028142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802813e:	2301      	movs	r3, #1
 8028140:	e00f      	b.n	8028162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8028142:	4a0a      	ldr	r2, [pc, #40]	; (802816c <SysTick_Config+0x40>)
 8028144:	687b      	ldr	r3, [r7, #4]
 8028146:	3b01      	subs	r3, #1
 8028148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802814a:	210f      	movs	r1, #15
 802814c:	f04f 30ff 	mov.w	r0, #4294967295
 8028150:	f7ff ff8e 	bl	8028070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8028154:	4b05      	ldr	r3, [pc, #20]	; (802816c <SysTick_Config+0x40>)
 8028156:	2200      	movs	r2, #0
 8028158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802815a:	4b04      	ldr	r3, [pc, #16]	; (802816c <SysTick_Config+0x40>)
 802815c:	2207      	movs	r2, #7
 802815e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8028160:	2300      	movs	r3, #0
}
 8028162:	4618      	mov	r0, r3
 8028164:	3708      	adds	r7, #8
 8028166:	46bd      	mov	sp, r7
 8028168:	bd80      	pop	{r7, pc}
 802816a:	bf00      	nop
 802816c:	e000e010 	.word	0xe000e010

08028170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8028170:	b580      	push	{r7, lr}
 8028172:	b082      	sub	sp, #8
 8028174:	af00      	add	r7, sp, #0
 8028176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8028178:	6878      	ldr	r0, [r7, #4]
 802817a:	f7ff ff05 	bl	8027f88 <__NVIC_SetPriorityGrouping>
}
 802817e:	bf00      	nop
 8028180:	3708      	adds	r7, #8
 8028182:	46bd      	mov	sp, r7
 8028184:	bd80      	pop	{r7, pc}

08028186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8028186:	b580      	push	{r7, lr}
 8028188:	b086      	sub	sp, #24
 802818a:	af00      	add	r7, sp, #0
 802818c:	4603      	mov	r3, r0
 802818e:	60b9      	str	r1, [r7, #8]
 8028190:	607a      	str	r2, [r7, #4]
 8028192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8028194:	2300      	movs	r3, #0
 8028196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8028198:	f7ff ff1a 	bl	8027fd0 <__NVIC_GetPriorityGrouping>
 802819c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802819e:	687a      	ldr	r2, [r7, #4]
 80281a0:	68b9      	ldr	r1, [r7, #8]
 80281a2:	6978      	ldr	r0, [r7, #20]
 80281a4:	f7ff ff8e 	bl	80280c4 <NVIC_EncodePriority>
 80281a8:	4602      	mov	r2, r0
 80281aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80281ae:	4611      	mov	r1, r2
 80281b0:	4618      	mov	r0, r3
 80281b2:	f7ff ff5d 	bl	8028070 <__NVIC_SetPriority>
}
 80281b6:	bf00      	nop
 80281b8:	3718      	adds	r7, #24
 80281ba:	46bd      	mov	sp, r7
 80281bc:	bd80      	pop	{r7, pc}

080281be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80281be:	b580      	push	{r7, lr}
 80281c0:	b082      	sub	sp, #8
 80281c2:	af00      	add	r7, sp, #0
 80281c4:	4603      	mov	r3, r0
 80281c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80281c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80281cc:	4618      	mov	r0, r3
 80281ce:	f7ff ff0d 	bl	8027fec <__NVIC_EnableIRQ>
}
 80281d2:	bf00      	nop
 80281d4:	3708      	adds	r7, #8
 80281d6:	46bd      	mov	sp, r7
 80281d8:	bd80      	pop	{r7, pc}

080281da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80281da:	b580      	push	{r7, lr}
 80281dc:	b082      	sub	sp, #8
 80281de:	af00      	add	r7, sp, #0
 80281e0:	4603      	mov	r3, r0
 80281e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80281e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80281e8:	4618      	mov	r0, r3
 80281ea:	f7ff ff1d 	bl	8028028 <__NVIC_DisableIRQ>
}
 80281ee:	bf00      	nop
 80281f0:	3708      	adds	r7, #8
 80281f2:	46bd      	mov	sp, r7
 80281f4:	bd80      	pop	{r7, pc}

080281f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80281f6:	b580      	push	{r7, lr}
 80281f8:	b082      	sub	sp, #8
 80281fa:	af00      	add	r7, sp, #0
 80281fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80281fe:	6878      	ldr	r0, [r7, #4]
 8028200:	f7ff ff94 	bl	802812c <SysTick_Config>
 8028204:	4603      	mov	r3, r0
}
 8028206:	4618      	mov	r0, r3
 8028208:	3708      	adds	r7, #8
 802820a:	46bd      	mov	sp, r7
 802820c:	bd80      	pop	{r7, pc}

0802820e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802820e:	b580      	push	{r7, lr}
 8028210:	b084      	sub	sp, #16
 8028212:	af00      	add	r7, sp, #0
 8028214:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802821a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802821c:	f7ff fe54 	bl	8027ec8 <HAL_GetTick>
 8028220:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8028222:	687b      	ldr	r3, [r7, #4]
 8028224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8028228:	b2db      	uxtb	r3, r3
 802822a:	2b02      	cmp	r3, #2
 802822c:	d008      	beq.n	8028240 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802822e:	687b      	ldr	r3, [r7, #4]
 8028230:	2280      	movs	r2, #128	; 0x80
 8028232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8028234:	687b      	ldr	r3, [r7, #4]
 8028236:	2200      	movs	r2, #0
 8028238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 802823c:	2301      	movs	r3, #1
 802823e:	e052      	b.n	80282e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	681a      	ldr	r2, [r3, #0]
 8028246:	687b      	ldr	r3, [r7, #4]
 8028248:	681b      	ldr	r3, [r3, #0]
 802824a:	f022 0216 	bic.w	r2, r2, #22
 802824e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8028250:	687b      	ldr	r3, [r7, #4]
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	695a      	ldr	r2, [r3, #20]
 8028256:	687b      	ldr	r3, [r7, #4]
 8028258:	681b      	ldr	r3, [r3, #0]
 802825a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802825e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028264:	2b00      	cmp	r3, #0
 8028266:	d103      	bne.n	8028270 <HAL_DMA_Abort+0x62>
 8028268:	687b      	ldr	r3, [r7, #4]
 802826a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802826c:	2b00      	cmp	r3, #0
 802826e:	d007      	beq.n	8028280 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	681b      	ldr	r3, [r3, #0]
 8028274:	681a      	ldr	r2, [r3, #0]
 8028276:	687b      	ldr	r3, [r7, #4]
 8028278:	681b      	ldr	r3, [r3, #0]
 802827a:	f022 0208 	bic.w	r2, r2, #8
 802827e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8028280:	687b      	ldr	r3, [r7, #4]
 8028282:	681b      	ldr	r3, [r3, #0]
 8028284:	681a      	ldr	r2, [r3, #0]
 8028286:	687b      	ldr	r3, [r7, #4]
 8028288:	681b      	ldr	r3, [r3, #0]
 802828a:	f022 0201 	bic.w	r2, r2, #1
 802828e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8028290:	e013      	b.n	80282ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8028292:	f7ff fe19 	bl	8027ec8 <HAL_GetTick>
 8028296:	4602      	mov	r2, r0
 8028298:	68bb      	ldr	r3, [r7, #8]
 802829a:	1ad3      	subs	r3, r2, r3
 802829c:	2b05      	cmp	r3, #5
 802829e:	d90c      	bls.n	80282ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80282a0:	687b      	ldr	r3, [r7, #4]
 80282a2:	2220      	movs	r2, #32
 80282a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80282a6:	687b      	ldr	r3, [r7, #4]
 80282a8:	2203      	movs	r2, #3
 80282aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80282ae:	687b      	ldr	r3, [r7, #4]
 80282b0:	2200      	movs	r2, #0
 80282b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80282b6:	2303      	movs	r3, #3
 80282b8:	e015      	b.n	80282e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80282ba:	687b      	ldr	r3, [r7, #4]
 80282bc:	681b      	ldr	r3, [r3, #0]
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	f003 0301 	and.w	r3, r3, #1
 80282c4:	2b00      	cmp	r3, #0
 80282c6:	d1e4      	bne.n	8028292 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80282c8:	687b      	ldr	r3, [r7, #4]
 80282ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80282cc:	223f      	movs	r2, #63	; 0x3f
 80282ce:	409a      	lsls	r2, r3
 80282d0:	68fb      	ldr	r3, [r7, #12]
 80282d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80282d4:	687b      	ldr	r3, [r7, #4]
 80282d6:	2201      	movs	r2, #1
 80282d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	2200      	movs	r2, #0
 80282e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80282e4:	2300      	movs	r3, #0
}
 80282e6:	4618      	mov	r0, r3
 80282e8:	3710      	adds	r7, #16
 80282ea:	46bd      	mov	sp, r7
 80282ec:	bd80      	pop	{r7, pc}

080282ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80282ee:	b480      	push	{r7}
 80282f0:	b083      	sub	sp, #12
 80282f2:	af00      	add	r7, sp, #0
 80282f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80282f6:	687b      	ldr	r3, [r7, #4]
 80282f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80282fc:	b2db      	uxtb	r3, r3
 80282fe:	2b02      	cmp	r3, #2
 8028300:	d004      	beq.n	802830c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8028302:	687b      	ldr	r3, [r7, #4]
 8028304:	2280      	movs	r2, #128	; 0x80
 8028306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8028308:	2301      	movs	r3, #1
 802830a:	e00c      	b.n	8028326 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	2205      	movs	r2, #5
 8028310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8028314:	687b      	ldr	r3, [r7, #4]
 8028316:	681b      	ldr	r3, [r3, #0]
 8028318:	681a      	ldr	r2, [r3, #0]
 802831a:	687b      	ldr	r3, [r7, #4]
 802831c:	681b      	ldr	r3, [r3, #0]
 802831e:	f022 0201 	bic.w	r2, r2, #1
 8028322:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8028324:	2300      	movs	r3, #0
}
 8028326:	4618      	mov	r0, r3
 8028328:	370c      	adds	r7, #12
 802832a:	46bd      	mov	sp, r7
 802832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028330:	4770      	bx	lr
	...

08028334 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8028334:	b580      	push	{r7, lr}
 8028336:	b086      	sub	sp, #24
 8028338:	af00      	add	r7, sp, #0
 802833a:	60f8      	str	r0, [r7, #12]
 802833c:	60b9      	str	r1, [r7, #8]
 802833e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8028342:	2301      	movs	r3, #1
 8028344:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8028346:	4b23      	ldr	r3, [pc, #140]	; (80283d4 <HAL_FLASH_Program+0xa0>)
 8028348:	7e1b      	ldrb	r3, [r3, #24]
 802834a:	2b01      	cmp	r3, #1
 802834c:	d101      	bne.n	8028352 <HAL_FLASH_Program+0x1e>
 802834e:	2302      	movs	r3, #2
 8028350:	e03b      	b.n	80283ca <HAL_FLASH_Program+0x96>
 8028352:	4b20      	ldr	r3, [pc, #128]	; (80283d4 <HAL_FLASH_Program+0xa0>)
 8028354:	2201      	movs	r2, #1
 8028356:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028358:	f24c 3050 	movw	r0, #50000	; 0xc350
 802835c:	f000 f924 	bl	80285a8 <FLASH_WaitForLastOperation>
 8028360:	4603      	mov	r3, r0
 8028362:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8028364:	7dfb      	ldrb	r3, [r7, #23]
 8028366:	2b00      	cmp	r3, #0
 8028368:	d12b      	bne.n	80283c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802836a:	68fb      	ldr	r3, [r7, #12]
 802836c:	2b00      	cmp	r3, #0
 802836e:	d105      	bne.n	802837c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8028370:	783b      	ldrb	r3, [r7, #0]
 8028372:	4619      	mov	r1, r3
 8028374:	68b8      	ldr	r0, [r7, #8]
 8028376:	f000 f9cf 	bl	8028718 <FLASH_Program_Byte>
 802837a:	e016      	b.n	80283aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	2b01      	cmp	r3, #1
 8028380:	d105      	bne.n	802838e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8028382:	883b      	ldrh	r3, [r7, #0]
 8028384:	4619      	mov	r1, r3
 8028386:	68b8      	ldr	r0, [r7, #8]
 8028388:	f000 f9a2 	bl	80286d0 <FLASH_Program_HalfWord>
 802838c:	e00d      	b.n	80283aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802838e:	68fb      	ldr	r3, [r7, #12]
 8028390:	2b02      	cmp	r3, #2
 8028392:	d105      	bne.n	80283a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8028394:	683b      	ldr	r3, [r7, #0]
 8028396:	4619      	mov	r1, r3
 8028398:	68b8      	ldr	r0, [r7, #8]
 802839a:	f000 f977 	bl	802868c <FLASH_Program_Word>
 802839e:	e004      	b.n	80283aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80283a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80283a4:	68b8      	ldr	r0, [r7, #8]
 80283a6:	f000 f93f 	bl	8028628 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80283aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80283ae:	f000 f8fb 	bl	80285a8 <FLASH_WaitForLastOperation>
 80283b2:	4603      	mov	r3, r0
 80283b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80283b6:	4b08      	ldr	r3, [pc, #32]	; (80283d8 <HAL_FLASH_Program+0xa4>)
 80283b8:	691b      	ldr	r3, [r3, #16]
 80283ba:	4a07      	ldr	r2, [pc, #28]	; (80283d8 <HAL_FLASH_Program+0xa4>)
 80283bc:	f023 0301 	bic.w	r3, r3, #1
 80283c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80283c2:	4b04      	ldr	r3, [pc, #16]	; (80283d4 <HAL_FLASH_Program+0xa0>)
 80283c4:	2200      	movs	r2, #0
 80283c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80283c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80283ca:	4618      	mov	r0, r3
 80283cc:	3718      	adds	r7, #24
 80283ce:	46bd      	mov	sp, r7
 80283d0:	bd80      	pop	{r7, pc}
 80283d2:	bf00      	nop
 80283d4:	2000589c 	.word	0x2000589c
 80283d8:	40023c00 	.word	0x40023c00

080283dc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80283dc:	b580      	push	{r7, lr}
 80283de:	b082      	sub	sp, #8
 80283e0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80283e2:	2300      	movs	r3, #0
 80283e4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80283e6:	4b4b      	ldr	r3, [pc, #300]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80283e8:	68db      	ldr	r3, [r3, #12]
 80283ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80283ee:	2b00      	cmp	r3, #0
 80283f0:	d020      	beq.n	8028434 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80283f2:	4b49      	ldr	r3, [pc, #292]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80283f4:	781b      	ldrb	r3, [r3, #0]
 80283f6:	b2db      	uxtb	r3, r3
 80283f8:	2b01      	cmp	r3, #1
 80283fa:	d107      	bne.n	802840c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80283fc:	4b46      	ldr	r3, [pc, #280]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80283fe:	68db      	ldr	r3, [r3, #12]
 8028400:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8028402:	4b45      	ldr	r3, [pc, #276]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028404:	f04f 32ff 	mov.w	r2, #4294967295
 8028408:	60da      	str	r2, [r3, #12]
 802840a:	e00b      	b.n	8028424 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 802840c:	4b42      	ldr	r3, [pc, #264]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 802840e:	781b      	ldrb	r3, [r3, #0]
 8028410:	b2db      	uxtb	r3, r3
 8028412:	2b02      	cmp	r3, #2
 8028414:	d103      	bne.n	802841e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8028416:	4b40      	ldr	r3, [pc, #256]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028418:	691b      	ldr	r3, [r3, #16]
 802841a:	607b      	str	r3, [r7, #4]
 802841c:	e002      	b.n	8028424 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 802841e:	4b3e      	ldr	r3, [pc, #248]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028420:	695b      	ldr	r3, [r3, #20]
 8028422:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8028424:	f000 f99a 	bl	802875c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8028428:	6878      	ldr	r0, [r7, #4]
 802842a:	f000 f881 	bl	8028530 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802842e:	4b3a      	ldr	r3, [pc, #232]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028430:	2200      	movs	r2, #0
 8028432:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8028434:	4b37      	ldr	r3, [pc, #220]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 8028436:	68db      	ldr	r3, [r3, #12]
 8028438:	f003 0301 	and.w	r3, r3, #1
 802843c:	2b00      	cmp	r3, #0
 802843e:	d04a      	beq.n	80284d6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8028440:	4b34      	ldr	r3, [pc, #208]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 8028442:	2201      	movs	r2, #1
 8028444:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8028446:	4b34      	ldr	r3, [pc, #208]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028448:	781b      	ldrb	r3, [r3, #0]
 802844a:	b2db      	uxtb	r3, r3
 802844c:	2b01      	cmp	r3, #1
 802844e:	d12d      	bne.n	80284ac <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8028450:	4b31      	ldr	r3, [pc, #196]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028452:	685b      	ldr	r3, [r3, #4]
 8028454:	3b01      	subs	r3, #1
 8028456:	4a30      	ldr	r2, [pc, #192]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028458:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 802845a:	4b2f      	ldr	r3, [pc, #188]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 802845c:	685b      	ldr	r3, [r3, #4]
 802845e:	2b00      	cmp	r3, #0
 8028460:	d015      	beq.n	802848e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8028462:	4b2d      	ldr	r3, [pc, #180]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028464:	68db      	ldr	r3, [r3, #12]
 8028466:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8028468:	6878      	ldr	r0, [r7, #4]
 802846a:	f000 f857 	bl	802851c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 802846e:	4b2a      	ldr	r3, [pc, #168]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028470:	68db      	ldr	r3, [r3, #12]
 8028472:	3301      	adds	r3, #1
 8028474:	4a28      	ldr	r2, [pc, #160]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028476:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8028478:	4b27      	ldr	r3, [pc, #156]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 802847a:	68db      	ldr	r3, [r3, #12]
 802847c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 802847e:	4b26      	ldr	r3, [pc, #152]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028480:	7a1b      	ldrb	r3, [r3, #8]
 8028482:	b2db      	uxtb	r3, r3
 8028484:	4619      	mov	r1, r3
 8028486:	6878      	ldr	r0, [r7, #4]
 8028488:	f000 fa52 	bl	8028930 <FLASH_Erase_Sector>
 802848c:	e023      	b.n	80284d6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 802848e:	f04f 33ff 	mov.w	r3, #4294967295
 8028492:	607b      	str	r3, [r7, #4]
 8028494:	4a20      	ldr	r2, [pc, #128]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 802849a:	4b1f      	ldr	r3, [pc, #124]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 802849c:	2200      	movs	r2, #0
 802849e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80284a0:	f000 fa8e 	bl	80289c0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80284a4:	6878      	ldr	r0, [r7, #4]
 80284a6:	f000 f839 	bl	802851c <HAL_FLASH_EndOfOperationCallback>
 80284aa:	e014      	b.n	80284d6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80284ac:	4b1a      	ldr	r3, [pc, #104]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80284ae:	781b      	ldrb	r3, [r3, #0]
 80284b0:	b2db      	uxtb	r3, r3
 80284b2:	2b02      	cmp	r3, #2
 80284b4:	d107      	bne.n	80284c6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80284b6:	f000 fa83 	bl	80289c0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80284ba:	4b17      	ldr	r3, [pc, #92]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80284bc:	691b      	ldr	r3, [r3, #16]
 80284be:	4618      	mov	r0, r3
 80284c0:	f000 f82c 	bl	802851c <HAL_FLASH_EndOfOperationCallback>
 80284c4:	e004      	b.n	80284d0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80284c6:	4b14      	ldr	r3, [pc, #80]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80284c8:	695b      	ldr	r3, [r3, #20]
 80284ca:	4618      	mov	r0, r3
 80284cc:	f000 f826 	bl	802851c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80284d0:	4b11      	ldr	r3, [pc, #68]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80284d2:	2200      	movs	r2, #0
 80284d4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80284d6:	4b10      	ldr	r3, [pc, #64]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 80284d8:	781b      	ldrb	r3, [r3, #0]
 80284da:	b2db      	uxtb	r3, r3
 80284dc:	2b00      	cmp	r3, #0
 80284de:	d114      	bne.n	802850a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80284e0:	4b0c      	ldr	r3, [pc, #48]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284e2:	691b      	ldr	r3, [r3, #16]
 80284e4:	4a0b      	ldr	r2, [pc, #44]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80284ea:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80284ec:	4b09      	ldr	r3, [pc, #36]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284ee:	691b      	ldr	r3, [r3, #16]
 80284f0:	4a08      	ldr	r2, [pc, #32]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80284f6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80284f8:	4b06      	ldr	r3, [pc, #24]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284fa:	691b      	ldr	r3, [r3, #16]
 80284fc:	4a05      	ldr	r2, [pc, #20]	; (8028514 <HAL_FLASH_IRQHandler+0x138>)
 80284fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8028502:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8028504:	4b04      	ldr	r3, [pc, #16]	; (8028518 <HAL_FLASH_IRQHandler+0x13c>)
 8028506:	2200      	movs	r2, #0
 8028508:	761a      	strb	r2, [r3, #24]
  }
}
 802850a:	bf00      	nop
 802850c:	3708      	adds	r7, #8
 802850e:	46bd      	mov	sp, r7
 8028510:	bd80      	pop	{r7, pc}
 8028512:	bf00      	nop
 8028514:	40023c00 	.word	0x40023c00
 8028518:	2000589c 	.word	0x2000589c

0802851c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 802851c:	b480      	push	{r7}
 802851e:	b083      	sub	sp, #12
 8028520:	af00      	add	r7, sp, #0
 8028522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8028524:	bf00      	nop
 8028526:	370c      	adds	r7, #12
 8028528:	46bd      	mov	sp, r7
 802852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802852e:	4770      	bx	lr

08028530 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8028530:	b480      	push	{r7}
 8028532:	b083      	sub	sp, #12
 8028534:	af00      	add	r7, sp, #0
 8028536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8028538:	bf00      	nop
 802853a:	370c      	adds	r7, #12
 802853c:	46bd      	mov	sp, r7
 802853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028542:	4770      	bx	lr

08028544 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8028544:	b480      	push	{r7}
 8028546:	b083      	sub	sp, #12
 8028548:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802854a:	2300      	movs	r3, #0
 802854c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802854e:	4b0b      	ldr	r3, [pc, #44]	; (802857c <HAL_FLASH_Unlock+0x38>)
 8028550:	691b      	ldr	r3, [r3, #16]
 8028552:	2b00      	cmp	r3, #0
 8028554:	da0b      	bge.n	802856e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8028556:	4b09      	ldr	r3, [pc, #36]	; (802857c <HAL_FLASH_Unlock+0x38>)
 8028558:	4a09      	ldr	r2, [pc, #36]	; (8028580 <HAL_FLASH_Unlock+0x3c>)
 802855a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802855c:	4b07      	ldr	r3, [pc, #28]	; (802857c <HAL_FLASH_Unlock+0x38>)
 802855e:	4a09      	ldr	r2, [pc, #36]	; (8028584 <HAL_FLASH_Unlock+0x40>)
 8028560:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8028562:	4b06      	ldr	r3, [pc, #24]	; (802857c <HAL_FLASH_Unlock+0x38>)
 8028564:	691b      	ldr	r3, [r3, #16]
 8028566:	2b00      	cmp	r3, #0
 8028568:	da01      	bge.n	802856e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802856a:	2301      	movs	r3, #1
 802856c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802856e:	79fb      	ldrb	r3, [r7, #7]
}
 8028570:	4618      	mov	r0, r3
 8028572:	370c      	adds	r7, #12
 8028574:	46bd      	mov	sp, r7
 8028576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802857a:	4770      	bx	lr
 802857c:	40023c00 	.word	0x40023c00
 8028580:	45670123 	.word	0x45670123
 8028584:	cdef89ab 	.word	0xcdef89ab

08028588 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8028588:	b480      	push	{r7}
 802858a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802858c:	4b05      	ldr	r3, [pc, #20]	; (80285a4 <HAL_FLASH_Lock+0x1c>)
 802858e:	691b      	ldr	r3, [r3, #16]
 8028590:	4a04      	ldr	r2, [pc, #16]	; (80285a4 <HAL_FLASH_Lock+0x1c>)
 8028592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8028596:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8028598:	2300      	movs	r3, #0
}
 802859a:	4618      	mov	r0, r3
 802859c:	46bd      	mov	sp, r7
 802859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285a2:	4770      	bx	lr
 80285a4:	40023c00 	.word	0x40023c00

080285a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80285a8:	b580      	push	{r7, lr}
 80285aa:	b084      	sub	sp, #16
 80285ac:	af00      	add	r7, sp, #0
 80285ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80285b0:	2300      	movs	r3, #0
 80285b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80285b4:	4b1a      	ldr	r3, [pc, #104]	; (8028620 <FLASH_WaitForLastOperation+0x78>)
 80285b6:	2200      	movs	r2, #0
 80285b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80285ba:	f7ff fc85 	bl	8027ec8 <HAL_GetTick>
 80285be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80285c0:	e010      	b.n	80285e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80285c8:	d00c      	beq.n	80285e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80285ca:	687b      	ldr	r3, [r7, #4]
 80285cc:	2b00      	cmp	r3, #0
 80285ce:	d007      	beq.n	80285e0 <FLASH_WaitForLastOperation+0x38>
 80285d0:	f7ff fc7a 	bl	8027ec8 <HAL_GetTick>
 80285d4:	4602      	mov	r2, r0
 80285d6:	68fb      	ldr	r3, [r7, #12]
 80285d8:	1ad3      	subs	r3, r2, r3
 80285da:	687a      	ldr	r2, [r7, #4]
 80285dc:	429a      	cmp	r2, r3
 80285de:	d201      	bcs.n	80285e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80285e0:	2303      	movs	r3, #3
 80285e2:	e019      	b.n	8028618 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80285e4:	4b0f      	ldr	r3, [pc, #60]	; (8028624 <FLASH_WaitForLastOperation+0x7c>)
 80285e6:	68db      	ldr	r3, [r3, #12]
 80285e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80285ec:	2b00      	cmp	r3, #0
 80285ee:	d1e8      	bne.n	80285c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80285f0:	4b0c      	ldr	r3, [pc, #48]	; (8028624 <FLASH_WaitForLastOperation+0x7c>)
 80285f2:	68db      	ldr	r3, [r3, #12]
 80285f4:	f003 0301 	and.w	r3, r3, #1
 80285f8:	2b00      	cmp	r3, #0
 80285fa:	d002      	beq.n	8028602 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80285fc:	4b09      	ldr	r3, [pc, #36]	; (8028624 <FLASH_WaitForLastOperation+0x7c>)
 80285fe:	2201      	movs	r2, #1
 8028600:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8028602:	4b08      	ldr	r3, [pc, #32]	; (8028624 <FLASH_WaitForLastOperation+0x7c>)
 8028604:	68db      	ldr	r3, [r3, #12]
 8028606:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802860a:	2b00      	cmp	r3, #0
 802860c:	d003      	beq.n	8028616 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802860e:	f000 f8a5 	bl	802875c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8028612:	2301      	movs	r3, #1
 8028614:	e000      	b.n	8028618 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8028616:	2300      	movs	r3, #0
  
}  
 8028618:	4618      	mov	r0, r3
 802861a:	3710      	adds	r7, #16
 802861c:	46bd      	mov	sp, r7
 802861e:	bd80      	pop	{r7, pc}
 8028620:	2000589c 	.word	0x2000589c
 8028624:	40023c00 	.word	0x40023c00

08028628 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8028628:	b480      	push	{r7}
 802862a:	b085      	sub	sp, #20
 802862c:	af00      	add	r7, sp, #0
 802862e:	60f8      	str	r0, [r7, #12]
 8028630:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028634:	4b14      	ldr	r3, [pc, #80]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 8028636:	691b      	ldr	r3, [r3, #16]
 8028638:	4a13      	ldr	r2, [pc, #76]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 802863a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802863e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8028640:	4b11      	ldr	r3, [pc, #68]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 8028642:	691b      	ldr	r3, [r3, #16]
 8028644:	4a10      	ldr	r2, [pc, #64]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 8028646:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802864a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802864c:	4b0e      	ldr	r3, [pc, #56]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 802864e:	691b      	ldr	r3, [r3, #16]
 8028650:	4a0d      	ldr	r2, [pc, #52]	; (8028688 <FLASH_Program_DoubleWord+0x60>)
 8028652:	f043 0301 	orr.w	r3, r3, #1
 8028656:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8028658:	68fb      	ldr	r3, [r7, #12]
 802865a:	683a      	ldr	r2, [r7, #0]
 802865c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802865e:	f3bf 8f6f 	isb	sy
}
 8028662:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8028664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8028668:	f04f 0200 	mov.w	r2, #0
 802866c:	f04f 0300 	mov.w	r3, #0
 8028670:	000a      	movs	r2, r1
 8028672:	2300      	movs	r3, #0
 8028674:	68f9      	ldr	r1, [r7, #12]
 8028676:	3104      	adds	r1, #4
 8028678:	4613      	mov	r3, r2
 802867a:	600b      	str	r3, [r1, #0]
}
 802867c:	bf00      	nop
 802867e:	3714      	adds	r7, #20
 8028680:	46bd      	mov	sp, r7
 8028682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028686:	4770      	bx	lr
 8028688:	40023c00 	.word	0x40023c00

0802868c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802868c:	b480      	push	{r7}
 802868e:	b083      	sub	sp, #12
 8028690:	af00      	add	r7, sp, #0
 8028692:	6078      	str	r0, [r7, #4]
 8028694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028696:	4b0d      	ldr	r3, [pc, #52]	; (80286cc <FLASH_Program_Word+0x40>)
 8028698:	691b      	ldr	r3, [r3, #16]
 802869a:	4a0c      	ldr	r2, [pc, #48]	; (80286cc <FLASH_Program_Word+0x40>)
 802869c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80286a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80286a2:	4b0a      	ldr	r3, [pc, #40]	; (80286cc <FLASH_Program_Word+0x40>)
 80286a4:	691b      	ldr	r3, [r3, #16]
 80286a6:	4a09      	ldr	r2, [pc, #36]	; (80286cc <FLASH_Program_Word+0x40>)
 80286a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80286ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80286ae:	4b07      	ldr	r3, [pc, #28]	; (80286cc <FLASH_Program_Word+0x40>)
 80286b0:	691b      	ldr	r3, [r3, #16]
 80286b2:	4a06      	ldr	r2, [pc, #24]	; (80286cc <FLASH_Program_Word+0x40>)
 80286b4:	f043 0301 	orr.w	r3, r3, #1
 80286b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80286ba:	687b      	ldr	r3, [r7, #4]
 80286bc:	683a      	ldr	r2, [r7, #0]
 80286be:	601a      	str	r2, [r3, #0]
}
 80286c0:	bf00      	nop
 80286c2:	370c      	adds	r7, #12
 80286c4:	46bd      	mov	sp, r7
 80286c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286ca:	4770      	bx	lr
 80286cc:	40023c00 	.word	0x40023c00

080286d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80286d0:	b480      	push	{r7}
 80286d2:	b083      	sub	sp, #12
 80286d4:	af00      	add	r7, sp, #0
 80286d6:	6078      	str	r0, [r7, #4]
 80286d8:	460b      	mov	r3, r1
 80286da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80286dc:	4b0d      	ldr	r3, [pc, #52]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286de:	691b      	ldr	r3, [r3, #16]
 80286e0:	4a0c      	ldr	r2, [pc, #48]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80286e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80286e8:	4b0a      	ldr	r3, [pc, #40]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286ea:	691b      	ldr	r3, [r3, #16]
 80286ec:	4a09      	ldr	r2, [pc, #36]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80286f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80286f4:	4b07      	ldr	r3, [pc, #28]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286f6:	691b      	ldr	r3, [r3, #16]
 80286f8:	4a06      	ldr	r2, [pc, #24]	; (8028714 <FLASH_Program_HalfWord+0x44>)
 80286fa:	f043 0301 	orr.w	r3, r3, #1
 80286fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	887a      	ldrh	r2, [r7, #2]
 8028704:	801a      	strh	r2, [r3, #0]
}
 8028706:	bf00      	nop
 8028708:	370c      	adds	r7, #12
 802870a:	46bd      	mov	sp, r7
 802870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028710:	4770      	bx	lr
 8028712:	bf00      	nop
 8028714:	40023c00 	.word	0x40023c00

08028718 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8028718:	b480      	push	{r7}
 802871a:	b083      	sub	sp, #12
 802871c:	af00      	add	r7, sp, #0
 802871e:	6078      	str	r0, [r7, #4]
 8028720:	460b      	mov	r3, r1
 8028722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028724:	4b0c      	ldr	r3, [pc, #48]	; (8028758 <FLASH_Program_Byte+0x40>)
 8028726:	691b      	ldr	r3, [r3, #16]
 8028728:	4a0b      	ldr	r2, [pc, #44]	; (8028758 <FLASH_Program_Byte+0x40>)
 802872a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802872e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8028730:	4b09      	ldr	r3, [pc, #36]	; (8028758 <FLASH_Program_Byte+0x40>)
 8028732:	4a09      	ldr	r2, [pc, #36]	; (8028758 <FLASH_Program_Byte+0x40>)
 8028734:	691b      	ldr	r3, [r3, #16]
 8028736:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8028738:	4b07      	ldr	r3, [pc, #28]	; (8028758 <FLASH_Program_Byte+0x40>)
 802873a:	691b      	ldr	r3, [r3, #16]
 802873c:	4a06      	ldr	r2, [pc, #24]	; (8028758 <FLASH_Program_Byte+0x40>)
 802873e:	f043 0301 	orr.w	r3, r3, #1
 8028742:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	78fa      	ldrb	r2, [r7, #3]
 8028748:	701a      	strb	r2, [r3, #0]
}
 802874a:	bf00      	nop
 802874c:	370c      	adds	r7, #12
 802874e:	46bd      	mov	sp, r7
 8028750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028754:	4770      	bx	lr
 8028756:	bf00      	nop
 8028758:	40023c00 	.word	0x40023c00

0802875c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802875c:	b480      	push	{r7}
 802875e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8028760:	4b27      	ldr	r3, [pc, #156]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 8028762:	68db      	ldr	r3, [r3, #12]
 8028764:	f003 0310 	and.w	r3, r3, #16
 8028768:	2b00      	cmp	r3, #0
 802876a:	d008      	beq.n	802877e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802876c:	4b25      	ldr	r3, [pc, #148]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 802876e:	69db      	ldr	r3, [r3, #28]
 8028770:	f043 0310 	orr.w	r3, r3, #16
 8028774:	4a23      	ldr	r2, [pc, #140]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 8028776:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8028778:	4b21      	ldr	r3, [pc, #132]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 802877a:	2210      	movs	r2, #16
 802877c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802877e:	4b20      	ldr	r3, [pc, #128]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 8028780:	68db      	ldr	r3, [r3, #12]
 8028782:	f003 0320 	and.w	r3, r3, #32
 8028786:	2b00      	cmp	r3, #0
 8028788:	d008      	beq.n	802879c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802878a:	4b1e      	ldr	r3, [pc, #120]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 802878c:	69db      	ldr	r3, [r3, #28]
 802878e:	f043 0308 	orr.w	r3, r3, #8
 8028792:	4a1c      	ldr	r2, [pc, #112]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 8028794:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8028796:	4b1a      	ldr	r3, [pc, #104]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 8028798:	2220      	movs	r2, #32
 802879a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802879c:	4b18      	ldr	r3, [pc, #96]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 802879e:	68db      	ldr	r3, [r3, #12]
 80287a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80287a4:	2b00      	cmp	r3, #0
 80287a6:	d008      	beq.n	80287ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80287a8:	4b16      	ldr	r3, [pc, #88]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287aa:	69db      	ldr	r3, [r3, #28]
 80287ac:	f043 0304 	orr.w	r3, r3, #4
 80287b0:	4a14      	ldr	r2, [pc, #80]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80287b4:	4b12      	ldr	r3, [pc, #72]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 80287b6:	2240      	movs	r2, #64	; 0x40
 80287b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80287ba:	4b11      	ldr	r3, [pc, #68]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 80287bc:	68db      	ldr	r3, [r3, #12]
 80287be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80287c2:	2b00      	cmp	r3, #0
 80287c4:	d008      	beq.n	80287d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80287c6:	4b0f      	ldr	r3, [pc, #60]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287c8:	69db      	ldr	r3, [r3, #28]
 80287ca:	f043 0302 	orr.w	r3, r3, #2
 80287ce:	4a0d      	ldr	r2, [pc, #52]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80287d2:	4b0b      	ldr	r3, [pc, #44]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 80287d4:	2280      	movs	r2, #128	; 0x80
 80287d6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80287d8:	4b09      	ldr	r3, [pc, #36]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 80287da:	68db      	ldr	r3, [r3, #12]
 80287dc:	f003 0302 	and.w	r3, r3, #2
 80287e0:	2b00      	cmp	r3, #0
 80287e2:	d008      	beq.n	80287f6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80287e4:	4b07      	ldr	r3, [pc, #28]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287e6:	69db      	ldr	r3, [r3, #28]
 80287e8:	f043 0320 	orr.w	r3, r3, #32
 80287ec:	4a05      	ldr	r2, [pc, #20]	; (8028804 <FLASH_SetErrorCode+0xa8>)
 80287ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80287f0:	4b03      	ldr	r3, [pc, #12]	; (8028800 <FLASH_SetErrorCode+0xa4>)
 80287f2:	2202      	movs	r2, #2
 80287f4:	60da      	str	r2, [r3, #12]
  }
}
 80287f6:	bf00      	nop
 80287f8:	46bd      	mov	sp, r7
 80287fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287fe:	4770      	bx	lr
 8028800:	40023c00 	.word	0x40023c00
 8028804:	2000589c 	.word	0x2000589c

08028808 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8028808:	b580      	push	{r7, lr}
 802880a:	b084      	sub	sp, #16
 802880c:	af00      	add	r7, sp, #0
 802880e:	6078      	str	r0, [r7, #4]
 8028810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8028812:	2301      	movs	r3, #1
 8028814:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8028816:	2300      	movs	r3, #0
 8028818:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802881a:	4b31      	ldr	r3, [pc, #196]	; (80288e0 <HAL_FLASHEx_Erase+0xd8>)
 802881c:	7e1b      	ldrb	r3, [r3, #24]
 802881e:	2b01      	cmp	r3, #1
 8028820:	d101      	bne.n	8028826 <HAL_FLASHEx_Erase+0x1e>
 8028822:	2302      	movs	r3, #2
 8028824:	e058      	b.n	80288d8 <HAL_FLASHEx_Erase+0xd0>
 8028826:	4b2e      	ldr	r3, [pc, #184]	; (80288e0 <HAL_FLASHEx_Erase+0xd8>)
 8028828:	2201      	movs	r2, #1
 802882a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802882c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028830:	f7ff feba 	bl	80285a8 <FLASH_WaitForLastOperation>
 8028834:	4603      	mov	r3, r0
 8028836:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8028838:	7bfb      	ldrb	r3, [r7, #15]
 802883a:	2b00      	cmp	r3, #0
 802883c:	d148      	bne.n	80288d0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802883e:	683b      	ldr	r3, [r7, #0]
 8028840:	f04f 32ff 	mov.w	r2, #4294967295
 8028844:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8028846:	687b      	ldr	r3, [r7, #4]
 8028848:	681b      	ldr	r3, [r3, #0]
 802884a:	2b01      	cmp	r3, #1
 802884c:	d115      	bne.n	802887a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802884e:	687b      	ldr	r3, [r7, #4]
 8028850:	691b      	ldr	r3, [r3, #16]
 8028852:	b2da      	uxtb	r2, r3
 8028854:	687b      	ldr	r3, [r7, #4]
 8028856:	685b      	ldr	r3, [r3, #4]
 8028858:	4619      	mov	r1, r3
 802885a:	4610      	mov	r0, r2
 802885c:	f000 f844 	bl	80288e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028860:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028864:	f7ff fea0 	bl	80285a8 <FLASH_WaitForLastOperation>
 8028868:	4603      	mov	r3, r0
 802886a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802886c:	4b1d      	ldr	r3, [pc, #116]	; (80288e4 <HAL_FLASHEx_Erase+0xdc>)
 802886e:	691b      	ldr	r3, [r3, #16]
 8028870:	4a1c      	ldr	r2, [pc, #112]	; (80288e4 <HAL_FLASHEx_Erase+0xdc>)
 8028872:	f023 0304 	bic.w	r3, r3, #4
 8028876:	6113      	str	r3, [r2, #16]
 8028878:	e028      	b.n	80288cc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802887a:	687b      	ldr	r3, [r7, #4]
 802887c:	689b      	ldr	r3, [r3, #8]
 802887e:	60bb      	str	r3, [r7, #8]
 8028880:	e01c      	b.n	80288bc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8028882:	687b      	ldr	r3, [r7, #4]
 8028884:	691b      	ldr	r3, [r3, #16]
 8028886:	b2db      	uxtb	r3, r3
 8028888:	4619      	mov	r1, r3
 802888a:	68b8      	ldr	r0, [r7, #8]
 802888c:	f000 f850 	bl	8028930 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028894:	f7ff fe88 	bl	80285a8 <FLASH_WaitForLastOperation>
 8028898:	4603      	mov	r3, r0
 802889a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802889c:	4b11      	ldr	r3, [pc, #68]	; (80288e4 <HAL_FLASHEx_Erase+0xdc>)
 802889e:	691b      	ldr	r3, [r3, #16]
 80288a0:	4a10      	ldr	r2, [pc, #64]	; (80288e4 <HAL_FLASHEx_Erase+0xdc>)
 80288a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80288a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80288a8:	7bfb      	ldrb	r3, [r7, #15]
 80288aa:	2b00      	cmp	r3, #0
 80288ac:	d003      	beq.n	80288b6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80288ae:	683b      	ldr	r3, [r7, #0]
 80288b0:	68ba      	ldr	r2, [r7, #8]
 80288b2:	601a      	str	r2, [r3, #0]
          break;
 80288b4:	e00a      	b.n	80288cc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80288b6:	68bb      	ldr	r3, [r7, #8]
 80288b8:	3301      	adds	r3, #1
 80288ba:	60bb      	str	r3, [r7, #8]
 80288bc:	687b      	ldr	r3, [r7, #4]
 80288be:	68da      	ldr	r2, [r3, #12]
 80288c0:	687b      	ldr	r3, [r7, #4]
 80288c2:	689b      	ldr	r3, [r3, #8]
 80288c4:	4413      	add	r3, r2
 80288c6:	68ba      	ldr	r2, [r7, #8]
 80288c8:	429a      	cmp	r2, r3
 80288ca:	d3da      	bcc.n	8028882 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80288cc:	f000 f878 	bl	80289c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80288d0:	4b03      	ldr	r3, [pc, #12]	; (80288e0 <HAL_FLASHEx_Erase+0xd8>)
 80288d2:	2200      	movs	r2, #0
 80288d4:	761a      	strb	r2, [r3, #24]

  return status;
 80288d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80288d8:	4618      	mov	r0, r3
 80288da:	3710      	adds	r7, #16
 80288dc:	46bd      	mov	sp, r7
 80288de:	bd80      	pop	{r7, pc}
 80288e0:	2000589c 	.word	0x2000589c
 80288e4:	40023c00 	.word	0x40023c00

080288e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80288e8:	b480      	push	{r7}
 80288ea:	b083      	sub	sp, #12
 80288ec:	af00      	add	r7, sp, #0
 80288ee:	4603      	mov	r3, r0
 80288f0:	6039      	str	r1, [r7, #0]
 80288f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80288f4:	4b0d      	ldr	r3, [pc, #52]	; (802892c <FLASH_MassErase+0x44>)
 80288f6:	691b      	ldr	r3, [r3, #16]
 80288f8:	4a0c      	ldr	r2, [pc, #48]	; (802892c <FLASH_MassErase+0x44>)
 80288fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80288fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8028900:	4b0a      	ldr	r3, [pc, #40]	; (802892c <FLASH_MassErase+0x44>)
 8028902:	691b      	ldr	r3, [r3, #16]
 8028904:	4a09      	ldr	r2, [pc, #36]	; (802892c <FLASH_MassErase+0x44>)
 8028906:	f043 0304 	orr.w	r3, r3, #4
 802890a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802890c:	4b07      	ldr	r3, [pc, #28]	; (802892c <FLASH_MassErase+0x44>)
 802890e:	691a      	ldr	r2, [r3, #16]
 8028910:	79fb      	ldrb	r3, [r7, #7]
 8028912:	021b      	lsls	r3, r3, #8
 8028914:	4313      	orrs	r3, r2
 8028916:	4a05      	ldr	r2, [pc, #20]	; (802892c <FLASH_MassErase+0x44>)
 8028918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802891c:	6113      	str	r3, [r2, #16]
}
 802891e:	bf00      	nop
 8028920:	370c      	adds	r7, #12
 8028922:	46bd      	mov	sp, r7
 8028924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028928:	4770      	bx	lr
 802892a:	bf00      	nop
 802892c:	40023c00 	.word	0x40023c00

08028930 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8028930:	b480      	push	{r7}
 8028932:	b085      	sub	sp, #20
 8028934:	af00      	add	r7, sp, #0
 8028936:	6078      	str	r0, [r7, #4]
 8028938:	460b      	mov	r3, r1
 802893a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802893c:	2300      	movs	r3, #0
 802893e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8028940:	78fb      	ldrb	r3, [r7, #3]
 8028942:	2b00      	cmp	r3, #0
 8028944:	d102      	bne.n	802894c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8028946:	2300      	movs	r3, #0
 8028948:	60fb      	str	r3, [r7, #12]
 802894a:	e010      	b.n	802896e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802894c:	78fb      	ldrb	r3, [r7, #3]
 802894e:	2b01      	cmp	r3, #1
 8028950:	d103      	bne.n	802895a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8028952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8028956:	60fb      	str	r3, [r7, #12]
 8028958:	e009      	b.n	802896e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802895a:	78fb      	ldrb	r3, [r7, #3]
 802895c:	2b02      	cmp	r3, #2
 802895e:	d103      	bne.n	8028968 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8028960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8028964:	60fb      	str	r3, [r7, #12]
 8028966:	e002      	b.n	802896e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8028968:	f44f 7340 	mov.w	r3, #768	; 0x300
 802896c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802896e:	4b13      	ldr	r3, [pc, #76]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 8028970:	691b      	ldr	r3, [r3, #16]
 8028972:	4a12      	ldr	r2, [pc, #72]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 8028974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802897a:	4b10      	ldr	r3, [pc, #64]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 802897c:	691a      	ldr	r2, [r3, #16]
 802897e:	490f      	ldr	r1, [pc, #60]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 8028980:	68fb      	ldr	r3, [r7, #12]
 8028982:	4313      	orrs	r3, r2
 8028984:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8028986:	4b0d      	ldr	r3, [pc, #52]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 8028988:	691b      	ldr	r3, [r3, #16]
 802898a:	4a0c      	ldr	r2, [pc, #48]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 802898c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8028990:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8028992:	4b0a      	ldr	r3, [pc, #40]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 8028994:	691a      	ldr	r2, [r3, #16]
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	00db      	lsls	r3, r3, #3
 802899a:	4313      	orrs	r3, r2
 802899c:	4a07      	ldr	r2, [pc, #28]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 802899e:	f043 0302 	orr.w	r3, r3, #2
 80289a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80289a4:	4b05      	ldr	r3, [pc, #20]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 80289a6:	691b      	ldr	r3, [r3, #16]
 80289a8:	4a04      	ldr	r2, [pc, #16]	; (80289bc <FLASH_Erase_Sector+0x8c>)
 80289aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80289ae:	6113      	str	r3, [r2, #16]
}
 80289b0:	bf00      	nop
 80289b2:	3714      	adds	r7, #20
 80289b4:	46bd      	mov	sp, r7
 80289b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289ba:	4770      	bx	lr
 80289bc:	40023c00 	.word	0x40023c00

080289c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80289c0:	b480      	push	{r7}
 80289c2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80289c4:	4b20      	ldr	r3, [pc, #128]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289c6:	681b      	ldr	r3, [r3, #0]
 80289c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80289cc:	2b00      	cmp	r3, #0
 80289ce:	d017      	beq.n	8028a00 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80289d0:	4b1d      	ldr	r3, [pc, #116]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289d2:	681b      	ldr	r3, [r3, #0]
 80289d4:	4a1c      	ldr	r2, [pc, #112]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80289da:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80289dc:	4b1a      	ldr	r3, [pc, #104]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	4a19      	ldr	r2, [pc, #100]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80289e6:	6013      	str	r3, [r2, #0]
 80289e8:	4b17      	ldr	r3, [pc, #92]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289ea:	681b      	ldr	r3, [r3, #0]
 80289ec:	4a16      	ldr	r2, [pc, #88]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80289f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80289f4:	4b14      	ldr	r3, [pc, #80]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289f6:	681b      	ldr	r3, [r3, #0]
 80289f8:	4a13      	ldr	r2, [pc, #76]	; (8028a48 <FLASH_FlushCaches+0x88>)
 80289fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80289fe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8028a00:	4b11      	ldr	r3, [pc, #68]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028a08:	2b00      	cmp	r3, #0
 8028a0a:	d017      	beq.n	8028a3c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8028a0c:	4b0e      	ldr	r3, [pc, #56]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a0e:	681b      	ldr	r3, [r3, #0]
 8028a10:	4a0d      	ldr	r2, [pc, #52]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8028a16:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028a18:	4b0b      	ldr	r3, [pc, #44]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a1a:	681b      	ldr	r3, [r3, #0]
 8028a1c:	4a0a      	ldr	r2, [pc, #40]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028a22:	6013      	str	r3, [r2, #0]
 8028a24:	4b08      	ldr	r3, [pc, #32]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a26:	681b      	ldr	r3, [r3, #0]
 8028a28:	4a07      	ldr	r2, [pc, #28]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028a2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8028a30:	4b05      	ldr	r3, [pc, #20]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a32:	681b      	ldr	r3, [r3, #0]
 8028a34:	4a04      	ldr	r2, [pc, #16]	; (8028a48 <FLASH_FlushCaches+0x88>)
 8028a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028a3a:	6013      	str	r3, [r2, #0]
  }
}
 8028a3c:	bf00      	nop
 8028a3e:	46bd      	mov	sp, r7
 8028a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a44:	4770      	bx	lr
 8028a46:	bf00      	nop
 8028a48:	40023c00 	.word	0x40023c00

08028a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8028a4c:	b480      	push	{r7}
 8028a4e:	b089      	sub	sp, #36	; 0x24
 8028a50:	af00      	add	r7, sp, #0
 8028a52:	6078      	str	r0, [r7, #4]
 8028a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028a56:	2300      	movs	r3, #0
 8028a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8028a5a:	2300      	movs	r3, #0
 8028a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8028a5e:	2300      	movs	r3, #0
 8028a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028a62:	2300      	movs	r3, #0
 8028a64:	61fb      	str	r3, [r7, #28]
 8028a66:	e16b      	b.n	8028d40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028a68:	2201      	movs	r2, #1
 8028a6a:	69fb      	ldr	r3, [r7, #28]
 8028a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8028a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8028a72:	683b      	ldr	r3, [r7, #0]
 8028a74:	681b      	ldr	r3, [r3, #0]
 8028a76:	697a      	ldr	r2, [r7, #20]
 8028a78:	4013      	ands	r3, r2
 8028a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8028a7c:	693a      	ldr	r2, [r7, #16]
 8028a7e:	697b      	ldr	r3, [r7, #20]
 8028a80:	429a      	cmp	r2, r3
 8028a82:	f040 815a 	bne.w	8028d3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028a86:	683b      	ldr	r3, [r7, #0]
 8028a88:	685b      	ldr	r3, [r3, #4]
 8028a8a:	f003 0303 	and.w	r3, r3, #3
 8028a8e:	2b01      	cmp	r3, #1
 8028a90:	d005      	beq.n	8028a9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8028a92:	683b      	ldr	r3, [r7, #0]
 8028a94:	685b      	ldr	r3, [r3, #4]
 8028a96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028a9a:	2b02      	cmp	r3, #2
 8028a9c:	d130      	bne.n	8028b00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8028a9e:	687b      	ldr	r3, [r7, #4]
 8028aa0:	689b      	ldr	r3, [r3, #8]
 8028aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028aa4:	69fb      	ldr	r3, [r7, #28]
 8028aa6:	005b      	lsls	r3, r3, #1
 8028aa8:	2203      	movs	r2, #3
 8028aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8028aae:	43db      	mvns	r3, r3
 8028ab0:	69ba      	ldr	r2, [r7, #24]
 8028ab2:	4013      	ands	r3, r2
 8028ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8028ab6:	683b      	ldr	r3, [r7, #0]
 8028ab8:	68da      	ldr	r2, [r3, #12]
 8028aba:	69fb      	ldr	r3, [r7, #28]
 8028abc:	005b      	lsls	r3, r3, #1
 8028abe:	fa02 f303 	lsl.w	r3, r2, r3
 8028ac2:	69ba      	ldr	r2, [r7, #24]
 8028ac4:	4313      	orrs	r3, r2
 8028ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8028ac8:	687b      	ldr	r3, [r7, #4]
 8028aca:	69ba      	ldr	r2, [r7, #24]
 8028acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8028ace:	687b      	ldr	r3, [r7, #4]
 8028ad0:	685b      	ldr	r3, [r3, #4]
 8028ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028ad4:	2201      	movs	r2, #1
 8028ad6:	69fb      	ldr	r3, [r7, #28]
 8028ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8028adc:	43db      	mvns	r3, r3
 8028ade:	69ba      	ldr	r2, [r7, #24]
 8028ae0:	4013      	ands	r3, r2
 8028ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8028ae4:	683b      	ldr	r3, [r7, #0]
 8028ae6:	685b      	ldr	r3, [r3, #4]
 8028ae8:	091b      	lsrs	r3, r3, #4
 8028aea:	f003 0201 	and.w	r2, r3, #1
 8028aee:	69fb      	ldr	r3, [r7, #28]
 8028af0:	fa02 f303 	lsl.w	r3, r2, r3
 8028af4:	69ba      	ldr	r2, [r7, #24]
 8028af6:	4313      	orrs	r3, r2
 8028af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8028afa:	687b      	ldr	r3, [r7, #4]
 8028afc:	69ba      	ldr	r2, [r7, #24]
 8028afe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8028b00:	683b      	ldr	r3, [r7, #0]
 8028b02:	685b      	ldr	r3, [r3, #4]
 8028b04:	f003 0303 	and.w	r3, r3, #3
 8028b08:	2b03      	cmp	r3, #3
 8028b0a:	d017      	beq.n	8028b3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8028b0c:	687b      	ldr	r3, [r7, #4]
 8028b0e:	68db      	ldr	r3, [r3, #12]
 8028b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028b12:	69fb      	ldr	r3, [r7, #28]
 8028b14:	005b      	lsls	r3, r3, #1
 8028b16:	2203      	movs	r2, #3
 8028b18:	fa02 f303 	lsl.w	r3, r2, r3
 8028b1c:	43db      	mvns	r3, r3
 8028b1e:	69ba      	ldr	r2, [r7, #24]
 8028b20:	4013      	ands	r3, r2
 8028b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8028b24:	683b      	ldr	r3, [r7, #0]
 8028b26:	689a      	ldr	r2, [r3, #8]
 8028b28:	69fb      	ldr	r3, [r7, #28]
 8028b2a:	005b      	lsls	r3, r3, #1
 8028b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8028b30:	69ba      	ldr	r2, [r7, #24]
 8028b32:	4313      	orrs	r3, r2
 8028b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8028b36:	687b      	ldr	r3, [r7, #4]
 8028b38:	69ba      	ldr	r2, [r7, #24]
 8028b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8028b3c:	683b      	ldr	r3, [r7, #0]
 8028b3e:	685b      	ldr	r3, [r3, #4]
 8028b40:	f003 0303 	and.w	r3, r3, #3
 8028b44:	2b02      	cmp	r3, #2
 8028b46:	d123      	bne.n	8028b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8028b48:	69fb      	ldr	r3, [r7, #28]
 8028b4a:	08da      	lsrs	r2, r3, #3
 8028b4c:	687b      	ldr	r3, [r7, #4]
 8028b4e:	3208      	adds	r2, #8
 8028b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028b56:	69fb      	ldr	r3, [r7, #28]
 8028b58:	f003 0307 	and.w	r3, r3, #7
 8028b5c:	009b      	lsls	r3, r3, #2
 8028b5e:	220f      	movs	r2, #15
 8028b60:	fa02 f303 	lsl.w	r3, r2, r3
 8028b64:	43db      	mvns	r3, r3
 8028b66:	69ba      	ldr	r2, [r7, #24]
 8028b68:	4013      	ands	r3, r2
 8028b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8028b6c:	683b      	ldr	r3, [r7, #0]
 8028b6e:	691a      	ldr	r2, [r3, #16]
 8028b70:	69fb      	ldr	r3, [r7, #28]
 8028b72:	f003 0307 	and.w	r3, r3, #7
 8028b76:	009b      	lsls	r3, r3, #2
 8028b78:	fa02 f303 	lsl.w	r3, r2, r3
 8028b7c:	69ba      	ldr	r2, [r7, #24]
 8028b7e:	4313      	orrs	r3, r2
 8028b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8028b82:	69fb      	ldr	r3, [r7, #28]
 8028b84:	08da      	lsrs	r2, r3, #3
 8028b86:	687b      	ldr	r3, [r7, #4]
 8028b88:	3208      	adds	r2, #8
 8028b8a:	69b9      	ldr	r1, [r7, #24]
 8028b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8028b90:	687b      	ldr	r3, [r7, #4]
 8028b92:	681b      	ldr	r3, [r3, #0]
 8028b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028b96:	69fb      	ldr	r3, [r7, #28]
 8028b98:	005b      	lsls	r3, r3, #1
 8028b9a:	2203      	movs	r2, #3
 8028b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8028ba0:	43db      	mvns	r3, r3
 8028ba2:	69ba      	ldr	r2, [r7, #24]
 8028ba4:	4013      	ands	r3, r2
 8028ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8028ba8:	683b      	ldr	r3, [r7, #0]
 8028baa:	685b      	ldr	r3, [r3, #4]
 8028bac:	f003 0203 	and.w	r2, r3, #3
 8028bb0:	69fb      	ldr	r3, [r7, #28]
 8028bb2:	005b      	lsls	r3, r3, #1
 8028bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8028bb8:	69ba      	ldr	r2, [r7, #24]
 8028bba:	4313      	orrs	r3, r2
 8028bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8028bbe:	687b      	ldr	r3, [r7, #4]
 8028bc0:	69ba      	ldr	r2, [r7, #24]
 8028bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8028bc4:	683b      	ldr	r3, [r7, #0]
 8028bc6:	685b      	ldr	r3, [r3, #4]
 8028bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8028bcc:	2b00      	cmp	r3, #0
 8028bce:	f000 80b4 	beq.w	8028d3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8028bd2:	2300      	movs	r3, #0
 8028bd4:	60fb      	str	r3, [r7, #12]
 8028bd6:	4b60      	ldr	r3, [pc, #384]	; (8028d58 <HAL_GPIO_Init+0x30c>)
 8028bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028bda:	4a5f      	ldr	r2, [pc, #380]	; (8028d58 <HAL_GPIO_Init+0x30c>)
 8028bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028be0:	6453      	str	r3, [r2, #68]	; 0x44
 8028be2:	4b5d      	ldr	r3, [pc, #372]	; (8028d58 <HAL_GPIO_Init+0x30c>)
 8028be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028bea:	60fb      	str	r3, [r7, #12]
 8028bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8028bee:	4a5b      	ldr	r2, [pc, #364]	; (8028d5c <HAL_GPIO_Init+0x310>)
 8028bf0:	69fb      	ldr	r3, [r7, #28]
 8028bf2:	089b      	lsrs	r3, r3, #2
 8028bf4:	3302      	adds	r3, #2
 8028bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028bfc:	69fb      	ldr	r3, [r7, #28]
 8028bfe:	f003 0303 	and.w	r3, r3, #3
 8028c02:	009b      	lsls	r3, r3, #2
 8028c04:	220f      	movs	r2, #15
 8028c06:	fa02 f303 	lsl.w	r3, r2, r3
 8028c0a:	43db      	mvns	r3, r3
 8028c0c:	69ba      	ldr	r2, [r7, #24]
 8028c0e:	4013      	ands	r3, r2
 8028c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8028c12:	687b      	ldr	r3, [r7, #4]
 8028c14:	4a52      	ldr	r2, [pc, #328]	; (8028d60 <HAL_GPIO_Init+0x314>)
 8028c16:	4293      	cmp	r3, r2
 8028c18:	d02b      	beq.n	8028c72 <HAL_GPIO_Init+0x226>
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	4a51      	ldr	r2, [pc, #324]	; (8028d64 <HAL_GPIO_Init+0x318>)
 8028c1e:	4293      	cmp	r3, r2
 8028c20:	d025      	beq.n	8028c6e <HAL_GPIO_Init+0x222>
 8028c22:	687b      	ldr	r3, [r7, #4]
 8028c24:	4a50      	ldr	r2, [pc, #320]	; (8028d68 <HAL_GPIO_Init+0x31c>)
 8028c26:	4293      	cmp	r3, r2
 8028c28:	d01f      	beq.n	8028c6a <HAL_GPIO_Init+0x21e>
 8028c2a:	687b      	ldr	r3, [r7, #4]
 8028c2c:	4a4f      	ldr	r2, [pc, #316]	; (8028d6c <HAL_GPIO_Init+0x320>)
 8028c2e:	4293      	cmp	r3, r2
 8028c30:	d019      	beq.n	8028c66 <HAL_GPIO_Init+0x21a>
 8028c32:	687b      	ldr	r3, [r7, #4]
 8028c34:	4a4e      	ldr	r2, [pc, #312]	; (8028d70 <HAL_GPIO_Init+0x324>)
 8028c36:	4293      	cmp	r3, r2
 8028c38:	d013      	beq.n	8028c62 <HAL_GPIO_Init+0x216>
 8028c3a:	687b      	ldr	r3, [r7, #4]
 8028c3c:	4a4d      	ldr	r2, [pc, #308]	; (8028d74 <HAL_GPIO_Init+0x328>)
 8028c3e:	4293      	cmp	r3, r2
 8028c40:	d00d      	beq.n	8028c5e <HAL_GPIO_Init+0x212>
 8028c42:	687b      	ldr	r3, [r7, #4]
 8028c44:	4a4c      	ldr	r2, [pc, #304]	; (8028d78 <HAL_GPIO_Init+0x32c>)
 8028c46:	4293      	cmp	r3, r2
 8028c48:	d007      	beq.n	8028c5a <HAL_GPIO_Init+0x20e>
 8028c4a:	687b      	ldr	r3, [r7, #4]
 8028c4c:	4a4b      	ldr	r2, [pc, #300]	; (8028d7c <HAL_GPIO_Init+0x330>)
 8028c4e:	4293      	cmp	r3, r2
 8028c50:	d101      	bne.n	8028c56 <HAL_GPIO_Init+0x20a>
 8028c52:	2307      	movs	r3, #7
 8028c54:	e00e      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c56:	2308      	movs	r3, #8
 8028c58:	e00c      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c5a:	2306      	movs	r3, #6
 8028c5c:	e00a      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c5e:	2305      	movs	r3, #5
 8028c60:	e008      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c62:	2304      	movs	r3, #4
 8028c64:	e006      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c66:	2303      	movs	r3, #3
 8028c68:	e004      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c6a:	2302      	movs	r3, #2
 8028c6c:	e002      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c6e:	2301      	movs	r3, #1
 8028c70:	e000      	b.n	8028c74 <HAL_GPIO_Init+0x228>
 8028c72:	2300      	movs	r3, #0
 8028c74:	69fa      	ldr	r2, [r7, #28]
 8028c76:	f002 0203 	and.w	r2, r2, #3
 8028c7a:	0092      	lsls	r2, r2, #2
 8028c7c:	4093      	lsls	r3, r2
 8028c7e:	69ba      	ldr	r2, [r7, #24]
 8028c80:	4313      	orrs	r3, r2
 8028c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8028c84:	4935      	ldr	r1, [pc, #212]	; (8028d5c <HAL_GPIO_Init+0x310>)
 8028c86:	69fb      	ldr	r3, [r7, #28]
 8028c88:	089b      	lsrs	r3, r3, #2
 8028c8a:	3302      	adds	r3, #2
 8028c8c:	69ba      	ldr	r2, [r7, #24]
 8028c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8028c92:	4b3b      	ldr	r3, [pc, #236]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028c94:	689b      	ldr	r3, [r3, #8]
 8028c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028c98:	693b      	ldr	r3, [r7, #16]
 8028c9a:	43db      	mvns	r3, r3
 8028c9c:	69ba      	ldr	r2, [r7, #24]
 8028c9e:	4013      	ands	r3, r2
 8028ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8028ca2:	683b      	ldr	r3, [r7, #0]
 8028ca4:	685b      	ldr	r3, [r3, #4]
 8028ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d003      	beq.n	8028cb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8028cae:	69ba      	ldr	r2, [r7, #24]
 8028cb0:	693b      	ldr	r3, [r7, #16]
 8028cb2:	4313      	orrs	r3, r2
 8028cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8028cb6:	4a32      	ldr	r2, [pc, #200]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028cb8:	69bb      	ldr	r3, [r7, #24]
 8028cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028cbc:	4b30      	ldr	r3, [pc, #192]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028cbe:	68db      	ldr	r3, [r3, #12]
 8028cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028cc2:	693b      	ldr	r3, [r7, #16]
 8028cc4:	43db      	mvns	r3, r3
 8028cc6:	69ba      	ldr	r2, [r7, #24]
 8028cc8:	4013      	ands	r3, r2
 8028cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8028ccc:	683b      	ldr	r3, [r7, #0]
 8028cce:	685b      	ldr	r3, [r3, #4]
 8028cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	d003      	beq.n	8028ce0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028cd8:	69ba      	ldr	r2, [r7, #24]
 8028cda:	693b      	ldr	r3, [r7, #16]
 8028cdc:	4313      	orrs	r3, r2
 8028cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028ce0:	4a27      	ldr	r2, [pc, #156]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028ce2:	69bb      	ldr	r3, [r7, #24]
 8028ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8028ce6:	4b26      	ldr	r3, [pc, #152]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028ce8:	685b      	ldr	r3, [r3, #4]
 8028cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028cec:	693b      	ldr	r3, [r7, #16]
 8028cee:	43db      	mvns	r3, r3
 8028cf0:	69ba      	ldr	r2, [r7, #24]
 8028cf2:	4013      	ands	r3, r2
 8028cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8028cf6:	683b      	ldr	r3, [r7, #0]
 8028cf8:	685b      	ldr	r3, [r3, #4]
 8028cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028cfe:	2b00      	cmp	r3, #0
 8028d00:	d003      	beq.n	8028d0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8028d02:	69ba      	ldr	r2, [r7, #24]
 8028d04:	693b      	ldr	r3, [r7, #16]
 8028d06:	4313      	orrs	r3, r2
 8028d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028d0a:	4a1d      	ldr	r2, [pc, #116]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028d0c:	69bb      	ldr	r3, [r7, #24]
 8028d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8028d10:	4b1b      	ldr	r3, [pc, #108]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028d12:	681b      	ldr	r3, [r3, #0]
 8028d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028d16:	693b      	ldr	r3, [r7, #16]
 8028d18:	43db      	mvns	r3, r3
 8028d1a:	69ba      	ldr	r2, [r7, #24]
 8028d1c:	4013      	ands	r3, r2
 8028d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8028d20:	683b      	ldr	r3, [r7, #0]
 8028d22:	685b      	ldr	r3, [r3, #4]
 8028d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	d003      	beq.n	8028d34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8028d2c:	69ba      	ldr	r2, [r7, #24]
 8028d2e:	693b      	ldr	r3, [r7, #16]
 8028d30:	4313      	orrs	r3, r2
 8028d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8028d34:	4a12      	ldr	r2, [pc, #72]	; (8028d80 <HAL_GPIO_Init+0x334>)
 8028d36:	69bb      	ldr	r3, [r7, #24]
 8028d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028d3a:	69fb      	ldr	r3, [r7, #28]
 8028d3c:	3301      	adds	r3, #1
 8028d3e:	61fb      	str	r3, [r7, #28]
 8028d40:	69fb      	ldr	r3, [r7, #28]
 8028d42:	2b0f      	cmp	r3, #15
 8028d44:	f67f ae90 	bls.w	8028a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028d48:	bf00      	nop
 8028d4a:	bf00      	nop
 8028d4c:	3724      	adds	r7, #36	; 0x24
 8028d4e:	46bd      	mov	sp, r7
 8028d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028d54:	4770      	bx	lr
 8028d56:	bf00      	nop
 8028d58:	40023800 	.word	0x40023800
 8028d5c:	40013800 	.word	0x40013800
 8028d60:	40020000 	.word	0x40020000
 8028d64:	40020400 	.word	0x40020400
 8028d68:	40020800 	.word	0x40020800
 8028d6c:	40020c00 	.word	0x40020c00
 8028d70:	40021000 	.word	0x40021000
 8028d74:	40021400 	.word	0x40021400
 8028d78:	40021800 	.word	0x40021800
 8028d7c:	40021c00 	.word	0x40021c00
 8028d80:	40013c00 	.word	0x40013c00

08028d84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8028d84:	b480      	push	{r7}
 8028d86:	b087      	sub	sp, #28
 8028d88:	af00      	add	r7, sp, #0
 8028d8a:	6078      	str	r0, [r7, #4]
 8028d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028d8e:	2300      	movs	r3, #0
 8028d90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8028d92:	2300      	movs	r3, #0
 8028d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8028d96:	2300      	movs	r3, #0
 8028d98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028d9a:	2300      	movs	r3, #0
 8028d9c:	617b      	str	r3, [r7, #20]
 8028d9e:	e0cd      	b.n	8028f3c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028da0:	2201      	movs	r2, #1
 8028da2:	697b      	ldr	r3, [r7, #20]
 8028da4:	fa02 f303 	lsl.w	r3, r2, r3
 8028da8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8028daa:	683a      	ldr	r2, [r7, #0]
 8028dac:	693b      	ldr	r3, [r7, #16]
 8028dae:	4013      	ands	r3, r2
 8028db0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8028db2:	68fa      	ldr	r2, [r7, #12]
 8028db4:	693b      	ldr	r3, [r7, #16]
 8028db6:	429a      	cmp	r2, r3
 8028db8:	f040 80bd 	bne.w	8028f36 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8028dbc:	4a65      	ldr	r2, [pc, #404]	; (8028f54 <HAL_GPIO_DeInit+0x1d0>)
 8028dbe:	697b      	ldr	r3, [r7, #20]
 8028dc0:	089b      	lsrs	r3, r3, #2
 8028dc2:	3302      	adds	r3, #2
 8028dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028dc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8028dca:	697b      	ldr	r3, [r7, #20]
 8028dcc:	f003 0303 	and.w	r3, r3, #3
 8028dd0:	009b      	lsls	r3, r3, #2
 8028dd2:	220f      	movs	r2, #15
 8028dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8028dd8:	68ba      	ldr	r2, [r7, #8]
 8028dda:	4013      	ands	r3, r2
 8028ddc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8028dde:	687b      	ldr	r3, [r7, #4]
 8028de0:	4a5d      	ldr	r2, [pc, #372]	; (8028f58 <HAL_GPIO_DeInit+0x1d4>)
 8028de2:	4293      	cmp	r3, r2
 8028de4:	d02b      	beq.n	8028e3e <HAL_GPIO_DeInit+0xba>
 8028de6:	687b      	ldr	r3, [r7, #4]
 8028de8:	4a5c      	ldr	r2, [pc, #368]	; (8028f5c <HAL_GPIO_DeInit+0x1d8>)
 8028dea:	4293      	cmp	r3, r2
 8028dec:	d025      	beq.n	8028e3a <HAL_GPIO_DeInit+0xb6>
 8028dee:	687b      	ldr	r3, [r7, #4]
 8028df0:	4a5b      	ldr	r2, [pc, #364]	; (8028f60 <HAL_GPIO_DeInit+0x1dc>)
 8028df2:	4293      	cmp	r3, r2
 8028df4:	d01f      	beq.n	8028e36 <HAL_GPIO_DeInit+0xb2>
 8028df6:	687b      	ldr	r3, [r7, #4]
 8028df8:	4a5a      	ldr	r2, [pc, #360]	; (8028f64 <HAL_GPIO_DeInit+0x1e0>)
 8028dfa:	4293      	cmp	r3, r2
 8028dfc:	d019      	beq.n	8028e32 <HAL_GPIO_DeInit+0xae>
 8028dfe:	687b      	ldr	r3, [r7, #4]
 8028e00:	4a59      	ldr	r2, [pc, #356]	; (8028f68 <HAL_GPIO_DeInit+0x1e4>)
 8028e02:	4293      	cmp	r3, r2
 8028e04:	d013      	beq.n	8028e2e <HAL_GPIO_DeInit+0xaa>
 8028e06:	687b      	ldr	r3, [r7, #4]
 8028e08:	4a58      	ldr	r2, [pc, #352]	; (8028f6c <HAL_GPIO_DeInit+0x1e8>)
 8028e0a:	4293      	cmp	r3, r2
 8028e0c:	d00d      	beq.n	8028e2a <HAL_GPIO_DeInit+0xa6>
 8028e0e:	687b      	ldr	r3, [r7, #4]
 8028e10:	4a57      	ldr	r2, [pc, #348]	; (8028f70 <HAL_GPIO_DeInit+0x1ec>)
 8028e12:	4293      	cmp	r3, r2
 8028e14:	d007      	beq.n	8028e26 <HAL_GPIO_DeInit+0xa2>
 8028e16:	687b      	ldr	r3, [r7, #4]
 8028e18:	4a56      	ldr	r2, [pc, #344]	; (8028f74 <HAL_GPIO_DeInit+0x1f0>)
 8028e1a:	4293      	cmp	r3, r2
 8028e1c:	d101      	bne.n	8028e22 <HAL_GPIO_DeInit+0x9e>
 8028e1e:	2307      	movs	r3, #7
 8028e20:	e00e      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e22:	2308      	movs	r3, #8
 8028e24:	e00c      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e26:	2306      	movs	r3, #6
 8028e28:	e00a      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e2a:	2305      	movs	r3, #5
 8028e2c:	e008      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e2e:	2304      	movs	r3, #4
 8028e30:	e006      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e32:	2303      	movs	r3, #3
 8028e34:	e004      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e36:	2302      	movs	r3, #2
 8028e38:	e002      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e3a:	2301      	movs	r3, #1
 8028e3c:	e000      	b.n	8028e40 <HAL_GPIO_DeInit+0xbc>
 8028e3e:	2300      	movs	r3, #0
 8028e40:	697a      	ldr	r2, [r7, #20]
 8028e42:	f002 0203 	and.w	r2, r2, #3
 8028e46:	0092      	lsls	r2, r2, #2
 8028e48:	4093      	lsls	r3, r2
 8028e4a:	68ba      	ldr	r2, [r7, #8]
 8028e4c:	429a      	cmp	r2, r3
 8028e4e:	d132      	bne.n	8028eb6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8028e50:	4b49      	ldr	r3, [pc, #292]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e52:	681a      	ldr	r2, [r3, #0]
 8028e54:	68fb      	ldr	r3, [r7, #12]
 8028e56:	43db      	mvns	r3, r3
 8028e58:	4947      	ldr	r1, [pc, #284]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e5a:	4013      	ands	r3, r2
 8028e5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8028e5e:	4b46      	ldr	r3, [pc, #280]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e60:	685a      	ldr	r2, [r3, #4]
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	43db      	mvns	r3, r3
 8028e66:	4944      	ldr	r1, [pc, #272]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e68:	4013      	ands	r3, r2
 8028e6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8028e6c:	4b42      	ldr	r3, [pc, #264]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e6e:	68da      	ldr	r2, [r3, #12]
 8028e70:	68fb      	ldr	r3, [r7, #12]
 8028e72:	43db      	mvns	r3, r3
 8028e74:	4940      	ldr	r1, [pc, #256]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e76:	4013      	ands	r3, r2
 8028e78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8028e7a:	4b3f      	ldr	r3, [pc, #252]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e7c:	689a      	ldr	r2, [r3, #8]
 8028e7e:	68fb      	ldr	r3, [r7, #12]
 8028e80:	43db      	mvns	r3, r3
 8028e82:	493d      	ldr	r1, [pc, #244]	; (8028f78 <HAL_GPIO_DeInit+0x1f4>)
 8028e84:	4013      	ands	r3, r2
 8028e86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8028e88:	697b      	ldr	r3, [r7, #20]
 8028e8a:	f003 0303 	and.w	r3, r3, #3
 8028e8e:	009b      	lsls	r3, r3, #2
 8028e90:	220f      	movs	r2, #15
 8028e92:	fa02 f303 	lsl.w	r3, r2, r3
 8028e96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8028e98:	4a2e      	ldr	r2, [pc, #184]	; (8028f54 <HAL_GPIO_DeInit+0x1d0>)
 8028e9a:	697b      	ldr	r3, [r7, #20]
 8028e9c:	089b      	lsrs	r3, r3, #2
 8028e9e:	3302      	adds	r3, #2
 8028ea0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8028ea4:	68bb      	ldr	r3, [r7, #8]
 8028ea6:	43da      	mvns	r2, r3
 8028ea8:	482a      	ldr	r0, [pc, #168]	; (8028f54 <HAL_GPIO_DeInit+0x1d0>)
 8028eaa:	697b      	ldr	r3, [r7, #20]
 8028eac:	089b      	lsrs	r3, r3, #2
 8028eae:	400a      	ands	r2, r1
 8028eb0:	3302      	adds	r3, #2
 8028eb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028eb6:	687b      	ldr	r3, [r7, #4]
 8028eb8:	681a      	ldr	r2, [r3, #0]
 8028eba:	697b      	ldr	r3, [r7, #20]
 8028ebc:	005b      	lsls	r3, r3, #1
 8028ebe:	2103      	movs	r1, #3
 8028ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8028ec4:	43db      	mvns	r3, r3
 8028ec6:	401a      	ands	r2, r3
 8028ec8:	687b      	ldr	r3, [r7, #4]
 8028eca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028ecc:	697b      	ldr	r3, [r7, #20]
 8028ece:	08da      	lsrs	r2, r3, #3
 8028ed0:	687b      	ldr	r3, [r7, #4]
 8028ed2:	3208      	adds	r2, #8
 8028ed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028ed8:	697b      	ldr	r3, [r7, #20]
 8028eda:	f003 0307 	and.w	r3, r3, #7
 8028ede:	009b      	lsls	r3, r3, #2
 8028ee0:	220f      	movs	r2, #15
 8028ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8028ee6:	43db      	mvns	r3, r3
 8028ee8:	697a      	ldr	r2, [r7, #20]
 8028eea:	08d2      	lsrs	r2, r2, #3
 8028eec:	4019      	ands	r1, r3
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	3208      	adds	r2, #8
 8028ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028ef6:	687b      	ldr	r3, [r7, #4]
 8028ef8:	68da      	ldr	r2, [r3, #12]
 8028efa:	697b      	ldr	r3, [r7, #20]
 8028efc:	005b      	lsls	r3, r3, #1
 8028efe:	2103      	movs	r1, #3
 8028f00:	fa01 f303 	lsl.w	r3, r1, r3
 8028f04:	43db      	mvns	r3, r3
 8028f06:	401a      	ands	r2, r3
 8028f08:	687b      	ldr	r3, [r7, #4]
 8028f0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	685a      	ldr	r2, [r3, #4]
 8028f10:	2101      	movs	r1, #1
 8028f12:	697b      	ldr	r3, [r7, #20]
 8028f14:	fa01 f303 	lsl.w	r3, r1, r3
 8028f18:	43db      	mvns	r3, r3
 8028f1a:	401a      	ands	r2, r3
 8028f1c:	687b      	ldr	r3, [r7, #4]
 8028f1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028f20:	687b      	ldr	r3, [r7, #4]
 8028f22:	689a      	ldr	r2, [r3, #8]
 8028f24:	697b      	ldr	r3, [r7, #20]
 8028f26:	005b      	lsls	r3, r3, #1
 8028f28:	2103      	movs	r1, #3
 8028f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8028f2e:	43db      	mvns	r3, r3
 8028f30:	401a      	ands	r2, r3
 8028f32:	687b      	ldr	r3, [r7, #4]
 8028f34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028f36:	697b      	ldr	r3, [r7, #20]
 8028f38:	3301      	adds	r3, #1
 8028f3a:	617b      	str	r3, [r7, #20]
 8028f3c:	697b      	ldr	r3, [r7, #20]
 8028f3e:	2b0f      	cmp	r3, #15
 8028f40:	f67f af2e 	bls.w	8028da0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8028f44:	bf00      	nop
 8028f46:	bf00      	nop
 8028f48:	371c      	adds	r7, #28
 8028f4a:	46bd      	mov	sp, r7
 8028f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f50:	4770      	bx	lr
 8028f52:	bf00      	nop
 8028f54:	40013800 	.word	0x40013800
 8028f58:	40020000 	.word	0x40020000
 8028f5c:	40020400 	.word	0x40020400
 8028f60:	40020800 	.word	0x40020800
 8028f64:	40020c00 	.word	0x40020c00
 8028f68:	40021000 	.word	0x40021000
 8028f6c:	40021400 	.word	0x40021400
 8028f70:	40021800 	.word	0x40021800
 8028f74:	40021c00 	.word	0x40021c00
 8028f78:	40013c00 	.word	0x40013c00

08028f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8028f7c:	b480      	push	{r7}
 8028f7e:	b083      	sub	sp, #12
 8028f80:	af00      	add	r7, sp, #0
 8028f82:	6078      	str	r0, [r7, #4]
 8028f84:	460b      	mov	r3, r1
 8028f86:	807b      	strh	r3, [r7, #2]
 8028f88:	4613      	mov	r3, r2
 8028f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8028f8c:	787b      	ldrb	r3, [r7, #1]
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	d003      	beq.n	8028f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8028f92:	887a      	ldrh	r2, [r7, #2]
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8028f98:	e003      	b.n	8028fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8028f9a:	887b      	ldrh	r3, [r7, #2]
 8028f9c:	041a      	lsls	r2, r3, #16
 8028f9e:	687b      	ldr	r3, [r7, #4]
 8028fa0:	619a      	str	r2, [r3, #24]
}
 8028fa2:	bf00      	nop
 8028fa4:	370c      	adds	r7, #12
 8028fa6:	46bd      	mov	sp, r7
 8028fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fac:	4770      	bx	lr

08028fae <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8028fae:	b580      	push	{r7, lr}
 8028fb0:	b084      	sub	sp, #16
 8028fb2:	af00      	add	r7, sp, #0
 8028fb4:	60f8      	str	r0, [r7, #12]
 8028fb6:	60b9      	str	r1, [r7, #8]
 8028fb8:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8028fba:	68fb      	ldr	r3, [r7, #12]
 8028fbc:	2b00      	cmp	r3, #0
 8028fbe:	d101      	bne.n	8028fc4 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8028fc0:	2301      	movs	r3, #1
 8028fc2:	e03e      	b.n	8029042 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8028fc4:	68fb      	ldr	r3, [r7, #12]
 8028fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028fca:	b2db      	uxtb	r3, r3
 8028fcc:	2b00      	cmp	r3, #0
 8028fce:	d106      	bne.n	8028fde <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8028fd0:	68fb      	ldr	r3, [r7, #12]
 8028fd2:	2200      	movs	r2, #0
 8028fd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8028fd8:	68f8      	ldr	r0, [r7, #12]
 8028fda:	f7fa fa41 	bl	8023460 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8028fde:	68fb      	ldr	r3, [r7, #12]
 8028fe0:	681a      	ldr	r2, [r3, #0]
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	3304      	adds	r3, #4
 8028fe6:	4619      	mov	r1, r3
 8028fe8:	4610      	mov	r0, r2
 8028fea:	f004 fa4f 	bl	802d48c <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8028fee:	68fb      	ldr	r3, [r7, #12]
 8028ff0:	6818      	ldr	r0, [r3, #0]
 8028ff2:	68fb      	ldr	r3, [r7, #12]
 8028ff4:	685b      	ldr	r3, [r3, #4]
 8028ff6:	461a      	mov	r2, r3
 8028ff8:	68b9      	ldr	r1, [r7, #8]
 8028ffa:	f004 fa93 	bl	802d524 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8028ffe:	68fb      	ldr	r3, [r7, #12]
 8029000:	6818      	ldr	r0, [r3, #0]
 8029002:	68fb      	ldr	r3, [r7, #12]
 8029004:	685b      	ldr	r3, [r3, #4]
 8029006:	461a      	mov	r2, r3
 8029008:	6879      	ldr	r1, [r7, #4]
 802900a:	f004 fac0 	bl	802d58e <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 802900e:	68fb      	ldr	r3, [r7, #12]
 8029010:	685b      	ldr	r3, [r3, #4]
 8029012:	2b10      	cmp	r3, #16
 8029014:	d108      	bne.n	8029028 <HAL_NAND_Init+0x7a>
 8029016:	68fb      	ldr	r3, [r7, #12]
 8029018:	681b      	ldr	r3, [r3, #0]
 802901a:	681a      	ldr	r2, [r3, #0]
 802901c:	68fb      	ldr	r3, [r7, #12]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	f042 0204 	orr.w	r2, r2, #4
 8029024:	601a      	str	r2, [r3, #0]
 8029026:	e007      	b.n	8029038 <HAL_NAND_Init+0x8a>
 8029028:	68fb      	ldr	r3, [r7, #12]
 802902a:	681b      	ldr	r3, [r3, #0]
 802902c:	6a1a      	ldr	r2, [r3, #32]
 802902e:	68fb      	ldr	r3, [r7, #12]
 8029030:	681b      	ldr	r3, [r3, #0]
 8029032:	f042 0204 	orr.w	r2, r2, #4
 8029036:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8029038:	68fb      	ldr	r3, [r7, #12]
 802903a:	2201      	movs	r2, #1
 802903c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8029040:	2300      	movs	r3, #0
}
 8029042:	4618      	mov	r0, r3
 8029044:	3710      	adds	r7, #16
 8029046:	46bd      	mov	sp, r7
 8029048:	bd80      	pop	{r7, pc}

0802904a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 802904a:	b580      	push	{r7, lr}
 802904c:	b082      	sub	sp, #8
 802904e:	af00      	add	r7, sp, #0
 8029050:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8029052:	687b      	ldr	r3, [r7, #4]
 8029054:	685b      	ldr	r3, [r3, #4]
 8029056:	2b10      	cmp	r3, #16
 8029058:	d10a      	bne.n	8029070 <HAL_NAND_IRQHandler+0x26>
 802905a:	687b      	ldr	r3, [r7, #4]
 802905c:	681b      	ldr	r3, [r3, #0]
 802905e:	685b      	ldr	r3, [r3, #4]
 8029060:	f003 0301 	and.w	r3, r3, #1
 8029064:	2b01      	cmp	r3, #1
 8029066:	bf0c      	ite	eq
 8029068:	2301      	moveq	r3, #1
 802906a:	2300      	movne	r3, #0
 802906c:	b2db      	uxtb	r3, r3
 802906e:	e009      	b.n	8029084 <HAL_NAND_IRQHandler+0x3a>
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029076:	f003 0301 	and.w	r3, r3, #1
 802907a:	2b01      	cmp	r3, #1
 802907c:	bf0c      	ite	eq
 802907e:	2301      	moveq	r3, #1
 8029080:	2300      	movne	r3, #0
 8029082:	b2db      	uxtb	r3, r3
 8029084:	2b00      	cmp	r3, #0
 8029086:	d017      	beq.n	80290b8 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8029088:	6878      	ldr	r0, [r7, #4]
 802908a:	f000 f8b2 	bl	80291f2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	685b      	ldr	r3, [r3, #4]
 8029092:	2b10      	cmp	r3, #16
 8029094:	d108      	bne.n	80290a8 <HAL_NAND_IRQHandler+0x5e>
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	681b      	ldr	r3, [r3, #0]
 802909a:	685a      	ldr	r2, [r3, #4]
 802909c:	687b      	ldr	r3, [r7, #4]
 802909e:	681b      	ldr	r3, [r3, #0]
 80290a0:	f022 0201 	bic.w	r2, r2, #1
 80290a4:	605a      	str	r2, [r3, #4]
 80290a6:	e007      	b.n	80290b8 <HAL_NAND_IRQHandler+0x6e>
 80290a8:	687b      	ldr	r3, [r7, #4]
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80290ae:	687b      	ldr	r3, [r7, #4]
 80290b0:	681b      	ldr	r3, [r3, #0]
 80290b2:	f022 0201 	bic.w	r2, r2, #1
 80290b6:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	685b      	ldr	r3, [r3, #4]
 80290bc:	2b10      	cmp	r3, #16
 80290be:	d10a      	bne.n	80290d6 <HAL_NAND_IRQHandler+0x8c>
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	681b      	ldr	r3, [r3, #0]
 80290c4:	685b      	ldr	r3, [r3, #4]
 80290c6:	f003 0302 	and.w	r3, r3, #2
 80290ca:	2b02      	cmp	r3, #2
 80290cc:	bf0c      	ite	eq
 80290ce:	2301      	moveq	r3, #1
 80290d0:	2300      	movne	r3, #0
 80290d2:	b2db      	uxtb	r3, r3
 80290d4:	e009      	b.n	80290ea <HAL_NAND_IRQHandler+0xa0>
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80290dc:	f003 0302 	and.w	r3, r3, #2
 80290e0:	2b02      	cmp	r3, #2
 80290e2:	bf0c      	ite	eq
 80290e4:	2301      	moveq	r3, #1
 80290e6:	2300      	movne	r3, #0
 80290e8:	b2db      	uxtb	r3, r3
 80290ea:	2b00      	cmp	r3, #0
 80290ec:	d017      	beq.n	802911e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80290ee:	6878      	ldr	r0, [r7, #4]
 80290f0:	f000 f87f 	bl	80291f2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	685b      	ldr	r3, [r3, #4]
 80290f8:	2b10      	cmp	r3, #16
 80290fa:	d108      	bne.n	802910e <HAL_NAND_IRQHandler+0xc4>
 80290fc:	687b      	ldr	r3, [r7, #4]
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	685a      	ldr	r2, [r3, #4]
 8029102:	687b      	ldr	r3, [r7, #4]
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	f022 0202 	bic.w	r2, r2, #2
 802910a:	605a      	str	r2, [r3, #4]
 802910c:	e007      	b.n	802911e <HAL_NAND_IRQHandler+0xd4>
 802910e:	687b      	ldr	r3, [r7, #4]
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029114:	687b      	ldr	r3, [r7, #4]
 8029116:	681b      	ldr	r3, [r3, #0]
 8029118:	f022 0202 	bic.w	r2, r2, #2
 802911c:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 802911e:	687b      	ldr	r3, [r7, #4]
 8029120:	685b      	ldr	r3, [r3, #4]
 8029122:	2b10      	cmp	r3, #16
 8029124:	d10a      	bne.n	802913c <HAL_NAND_IRQHandler+0xf2>
 8029126:	687b      	ldr	r3, [r7, #4]
 8029128:	681b      	ldr	r3, [r3, #0]
 802912a:	685b      	ldr	r3, [r3, #4]
 802912c:	f003 0304 	and.w	r3, r3, #4
 8029130:	2b04      	cmp	r3, #4
 8029132:	bf0c      	ite	eq
 8029134:	2301      	moveq	r3, #1
 8029136:	2300      	movne	r3, #0
 8029138:	b2db      	uxtb	r3, r3
 802913a:	e009      	b.n	8029150 <HAL_NAND_IRQHandler+0x106>
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	681b      	ldr	r3, [r3, #0]
 8029140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029142:	f003 0304 	and.w	r3, r3, #4
 8029146:	2b04      	cmp	r3, #4
 8029148:	bf0c      	ite	eq
 802914a:	2301      	moveq	r3, #1
 802914c:	2300      	movne	r3, #0
 802914e:	b2db      	uxtb	r3, r3
 8029150:	2b00      	cmp	r3, #0
 8029152:	d017      	beq.n	8029184 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8029154:	6878      	ldr	r0, [r7, #4]
 8029156:	f000 f84c 	bl	80291f2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 802915a:	687b      	ldr	r3, [r7, #4]
 802915c:	685b      	ldr	r3, [r3, #4]
 802915e:	2b10      	cmp	r3, #16
 8029160:	d108      	bne.n	8029174 <HAL_NAND_IRQHandler+0x12a>
 8029162:	687b      	ldr	r3, [r7, #4]
 8029164:	681b      	ldr	r3, [r3, #0]
 8029166:	685a      	ldr	r2, [r3, #4]
 8029168:	687b      	ldr	r3, [r7, #4]
 802916a:	681b      	ldr	r3, [r3, #0]
 802916c:	f022 0204 	bic.w	r2, r2, #4
 8029170:	605a      	str	r2, [r3, #4]
 8029172:	e007      	b.n	8029184 <HAL_NAND_IRQHandler+0x13a>
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802917a:	687b      	ldr	r3, [r7, #4]
 802917c:	681b      	ldr	r3, [r3, #0]
 802917e:	f022 0204 	bic.w	r2, r2, #4
 8029182:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8029184:	687b      	ldr	r3, [r7, #4]
 8029186:	685b      	ldr	r3, [r3, #4]
 8029188:	2b10      	cmp	r3, #16
 802918a:	d10a      	bne.n	80291a2 <HAL_NAND_IRQHandler+0x158>
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	681b      	ldr	r3, [r3, #0]
 8029190:	685b      	ldr	r3, [r3, #4]
 8029192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029196:	2b40      	cmp	r3, #64	; 0x40
 8029198:	bf0c      	ite	eq
 802919a:	2301      	moveq	r3, #1
 802919c:	2300      	movne	r3, #0
 802919e:	b2db      	uxtb	r3, r3
 80291a0:	e009      	b.n	80291b6 <HAL_NAND_IRQHandler+0x16c>
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	681b      	ldr	r3, [r3, #0]
 80291a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80291a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291ac:	2b40      	cmp	r3, #64	; 0x40
 80291ae:	bf0c      	ite	eq
 80291b0:	2301      	moveq	r3, #1
 80291b2:	2300      	movne	r3, #0
 80291b4:	b2db      	uxtb	r3, r3
 80291b6:	2b00      	cmp	r3, #0
 80291b8:	d017      	beq.n	80291ea <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80291ba:	6878      	ldr	r0, [r7, #4]
 80291bc:	f000 f819 	bl	80291f2 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	685b      	ldr	r3, [r3, #4]
 80291c4:	2b10      	cmp	r3, #16
 80291c6:	d108      	bne.n	80291da <HAL_NAND_IRQHandler+0x190>
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	681b      	ldr	r3, [r3, #0]
 80291cc:	685a      	ldr	r2, [r3, #4]
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80291d6:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 80291d8:	e007      	b.n	80291ea <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80291da:	687b      	ldr	r3, [r7, #4]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80291e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80291ea:	bf00      	nop
 80291ec:	3708      	adds	r7, #8
 80291ee:	46bd      	mov	sp, r7
 80291f0:	bd80      	pop	{r7, pc}

080291f2 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 80291f2:	b480      	push	{r7}
 80291f4:	b083      	sub	sp, #12
 80291f6:	af00      	add	r7, sp, #0
 80291f8:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 80291fa:	bf00      	nop
 80291fc:	370c      	adds	r7, #12
 80291fe:	46bd      	mov	sp, r7
 8029200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029204:	4770      	bx	lr

08029206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8029206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029208:	b08f      	sub	sp, #60	; 0x3c
 802920a:	af0a      	add	r7, sp, #40	; 0x28
 802920c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802920e:	687b      	ldr	r3, [r7, #4]
 8029210:	2b00      	cmp	r3, #0
 8029212:	d101      	bne.n	8029218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8029214:	2301      	movs	r3, #1
 8029216:	e10f      	b.n	8029438 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8029218:	687b      	ldr	r3, [r7, #4]
 802921a:	681b      	ldr	r3, [r3, #0]
 802921c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802921e:	687b      	ldr	r3, [r7, #4]
 8029220:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8029224:	b2db      	uxtb	r3, r3
 8029226:	2b00      	cmp	r3, #0
 8029228:	d106      	bne.n	8029238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	2200      	movs	r2, #0
 802922e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8029232:	6878      	ldr	r0, [r7, #4]
 8029234:	f008 f978 	bl	8031528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8029238:	687b      	ldr	r3, [r7, #4]
 802923a:	2203      	movs	r2, #3
 802923c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8029240:	68bb      	ldr	r3, [r7, #8]
 8029242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029248:	2b00      	cmp	r3, #0
 802924a:	d102      	bne.n	8029252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802924c:	687b      	ldr	r3, [r7, #4]
 802924e:	2200      	movs	r2, #0
 8029250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8029252:	687b      	ldr	r3, [r7, #4]
 8029254:	681b      	ldr	r3, [r3, #0]
 8029256:	4618      	mov	r0, r3
 8029258:	f004 fae3 	bl	802d822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802925c:	687b      	ldr	r3, [r7, #4]
 802925e:	681b      	ldr	r3, [r3, #0]
 8029260:	603b      	str	r3, [r7, #0]
 8029262:	687e      	ldr	r6, [r7, #4]
 8029264:	466d      	mov	r5, sp
 8029266:	f106 0410 	add.w	r4, r6, #16
 802926a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802926c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802926e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8029276:	e885 0003 	stmia.w	r5, {r0, r1}
 802927a:	1d33      	adds	r3, r6, #4
 802927c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802927e:	6838      	ldr	r0, [r7, #0]
 8029280:	f004 f9ba 	bl	802d5f8 <USB_CoreInit>
 8029284:	4603      	mov	r3, r0
 8029286:	2b00      	cmp	r3, #0
 8029288:	d005      	beq.n	8029296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802928a:	687b      	ldr	r3, [r7, #4]
 802928c:	2202      	movs	r2, #2
 802928e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8029292:	2301      	movs	r3, #1
 8029294:	e0d0      	b.n	8029438 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8029296:	687b      	ldr	r3, [r7, #4]
 8029298:	681b      	ldr	r3, [r3, #0]
 802929a:	2100      	movs	r1, #0
 802929c:	4618      	mov	r0, r3
 802929e:	f004 fad1 	bl	802d844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80292a2:	2300      	movs	r3, #0
 80292a4:	73fb      	strb	r3, [r7, #15]
 80292a6:	e04a      	b.n	802933e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80292a8:	7bfa      	ldrb	r2, [r7, #15]
 80292aa:	6879      	ldr	r1, [r7, #4]
 80292ac:	4613      	mov	r3, r2
 80292ae:	00db      	lsls	r3, r3, #3
 80292b0:	4413      	add	r3, r2
 80292b2:	009b      	lsls	r3, r3, #2
 80292b4:	440b      	add	r3, r1
 80292b6:	333d      	adds	r3, #61	; 0x3d
 80292b8:	2201      	movs	r2, #1
 80292ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80292bc:	7bfa      	ldrb	r2, [r7, #15]
 80292be:	6879      	ldr	r1, [r7, #4]
 80292c0:	4613      	mov	r3, r2
 80292c2:	00db      	lsls	r3, r3, #3
 80292c4:	4413      	add	r3, r2
 80292c6:	009b      	lsls	r3, r3, #2
 80292c8:	440b      	add	r3, r1
 80292ca:	333c      	adds	r3, #60	; 0x3c
 80292cc:	7bfa      	ldrb	r2, [r7, #15]
 80292ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80292d0:	7bfa      	ldrb	r2, [r7, #15]
 80292d2:	7bfb      	ldrb	r3, [r7, #15]
 80292d4:	b298      	uxth	r0, r3
 80292d6:	6879      	ldr	r1, [r7, #4]
 80292d8:	4613      	mov	r3, r2
 80292da:	00db      	lsls	r3, r3, #3
 80292dc:	4413      	add	r3, r2
 80292de:	009b      	lsls	r3, r3, #2
 80292e0:	440b      	add	r3, r1
 80292e2:	3344      	adds	r3, #68	; 0x44
 80292e4:	4602      	mov	r2, r0
 80292e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80292e8:	7bfa      	ldrb	r2, [r7, #15]
 80292ea:	6879      	ldr	r1, [r7, #4]
 80292ec:	4613      	mov	r3, r2
 80292ee:	00db      	lsls	r3, r3, #3
 80292f0:	4413      	add	r3, r2
 80292f2:	009b      	lsls	r3, r3, #2
 80292f4:	440b      	add	r3, r1
 80292f6:	3340      	adds	r3, #64	; 0x40
 80292f8:	2200      	movs	r2, #0
 80292fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80292fc:	7bfa      	ldrb	r2, [r7, #15]
 80292fe:	6879      	ldr	r1, [r7, #4]
 8029300:	4613      	mov	r3, r2
 8029302:	00db      	lsls	r3, r3, #3
 8029304:	4413      	add	r3, r2
 8029306:	009b      	lsls	r3, r3, #2
 8029308:	440b      	add	r3, r1
 802930a:	3348      	adds	r3, #72	; 0x48
 802930c:	2200      	movs	r2, #0
 802930e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8029310:	7bfa      	ldrb	r2, [r7, #15]
 8029312:	6879      	ldr	r1, [r7, #4]
 8029314:	4613      	mov	r3, r2
 8029316:	00db      	lsls	r3, r3, #3
 8029318:	4413      	add	r3, r2
 802931a:	009b      	lsls	r3, r3, #2
 802931c:	440b      	add	r3, r1
 802931e:	334c      	adds	r3, #76	; 0x4c
 8029320:	2200      	movs	r2, #0
 8029322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8029324:	7bfa      	ldrb	r2, [r7, #15]
 8029326:	6879      	ldr	r1, [r7, #4]
 8029328:	4613      	mov	r3, r2
 802932a:	00db      	lsls	r3, r3, #3
 802932c:	4413      	add	r3, r2
 802932e:	009b      	lsls	r3, r3, #2
 8029330:	440b      	add	r3, r1
 8029332:	3354      	adds	r3, #84	; 0x54
 8029334:	2200      	movs	r2, #0
 8029336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029338:	7bfb      	ldrb	r3, [r7, #15]
 802933a:	3301      	adds	r3, #1
 802933c:	73fb      	strb	r3, [r7, #15]
 802933e:	7bfa      	ldrb	r2, [r7, #15]
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	685b      	ldr	r3, [r3, #4]
 8029344:	429a      	cmp	r2, r3
 8029346:	d3af      	bcc.n	80292a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029348:	2300      	movs	r3, #0
 802934a:	73fb      	strb	r3, [r7, #15]
 802934c:	e044      	b.n	80293d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802934e:	7bfa      	ldrb	r2, [r7, #15]
 8029350:	6879      	ldr	r1, [r7, #4]
 8029352:	4613      	mov	r3, r2
 8029354:	00db      	lsls	r3, r3, #3
 8029356:	4413      	add	r3, r2
 8029358:	009b      	lsls	r3, r3, #2
 802935a:	440b      	add	r3, r1
 802935c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8029360:	2200      	movs	r2, #0
 8029362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8029364:	7bfa      	ldrb	r2, [r7, #15]
 8029366:	6879      	ldr	r1, [r7, #4]
 8029368:	4613      	mov	r3, r2
 802936a:	00db      	lsls	r3, r3, #3
 802936c:	4413      	add	r3, r2
 802936e:	009b      	lsls	r3, r3, #2
 8029370:	440b      	add	r3, r1
 8029372:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8029376:	7bfa      	ldrb	r2, [r7, #15]
 8029378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802937a:	7bfa      	ldrb	r2, [r7, #15]
 802937c:	6879      	ldr	r1, [r7, #4]
 802937e:	4613      	mov	r3, r2
 8029380:	00db      	lsls	r3, r3, #3
 8029382:	4413      	add	r3, r2
 8029384:	009b      	lsls	r3, r3, #2
 8029386:	440b      	add	r3, r1
 8029388:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802938c:	2200      	movs	r2, #0
 802938e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8029390:	7bfa      	ldrb	r2, [r7, #15]
 8029392:	6879      	ldr	r1, [r7, #4]
 8029394:	4613      	mov	r3, r2
 8029396:	00db      	lsls	r3, r3, #3
 8029398:	4413      	add	r3, r2
 802939a:	009b      	lsls	r3, r3, #2
 802939c:	440b      	add	r3, r1
 802939e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80293a2:	2200      	movs	r2, #0
 80293a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80293a6:	7bfa      	ldrb	r2, [r7, #15]
 80293a8:	6879      	ldr	r1, [r7, #4]
 80293aa:	4613      	mov	r3, r2
 80293ac:	00db      	lsls	r3, r3, #3
 80293ae:	4413      	add	r3, r2
 80293b0:	009b      	lsls	r3, r3, #2
 80293b2:	440b      	add	r3, r1
 80293b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80293b8:	2200      	movs	r2, #0
 80293ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80293bc:	7bfa      	ldrb	r2, [r7, #15]
 80293be:	6879      	ldr	r1, [r7, #4]
 80293c0:	4613      	mov	r3, r2
 80293c2:	00db      	lsls	r3, r3, #3
 80293c4:	4413      	add	r3, r2
 80293c6:	009b      	lsls	r3, r3, #2
 80293c8:	440b      	add	r3, r1
 80293ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80293ce:	2200      	movs	r2, #0
 80293d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80293d2:	7bfb      	ldrb	r3, [r7, #15]
 80293d4:	3301      	adds	r3, #1
 80293d6:	73fb      	strb	r3, [r7, #15]
 80293d8:	7bfa      	ldrb	r2, [r7, #15]
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	685b      	ldr	r3, [r3, #4]
 80293de:	429a      	cmp	r2, r3
 80293e0:	d3b5      	bcc.n	802934e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80293e2:	687b      	ldr	r3, [r7, #4]
 80293e4:	681b      	ldr	r3, [r3, #0]
 80293e6:	603b      	str	r3, [r7, #0]
 80293e8:	687e      	ldr	r6, [r7, #4]
 80293ea:	466d      	mov	r5, sp
 80293ec:	f106 0410 	add.w	r4, r6, #16
 80293f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80293f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80293f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80293f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80293f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80293fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8029400:	1d33      	adds	r3, r6, #4
 8029402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8029404:	6838      	ldr	r0, [r7, #0]
 8029406:	f004 fa69 	bl	802d8dc <USB_DevInit>
 802940a:	4603      	mov	r3, r0
 802940c:	2b00      	cmp	r3, #0
 802940e:	d005      	beq.n	802941c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	2202      	movs	r2, #2
 8029414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8029418:	2301      	movs	r3, #1
 802941a:	e00d      	b.n	8029438 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 802941c:	687b      	ldr	r3, [r7, #4]
 802941e:	2200      	movs	r2, #0
 8029420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8029424:	687b      	ldr	r3, [r7, #4]
 8029426:	2201      	movs	r2, #1
 8029428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 802942c:	687b      	ldr	r3, [r7, #4]
 802942e:	681b      	ldr	r3, [r3, #0]
 8029430:	4618      	mov	r0, r3
 8029432:	f005 fbb8 	bl	802eba6 <USB_DevDisconnect>

  return HAL_OK;
 8029436:	2300      	movs	r3, #0
}
 8029438:	4618      	mov	r0, r3
 802943a:	3714      	adds	r7, #20
 802943c:	46bd      	mov	sp, r7
 802943e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08029440 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8029440:	b580      	push	{r7, lr}
 8029442:	b084      	sub	sp, #16
 8029444:	af00      	add	r7, sp, #0
 8029446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029448:	687b      	ldr	r3, [r7, #4]
 802944a:	681b      	ldr	r3, [r3, #0]
 802944c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029454:	2b01      	cmp	r3, #1
 8029456:	d101      	bne.n	802945c <HAL_PCD_Start+0x1c>
 8029458:	2302      	movs	r3, #2
 802945a:	e020      	b.n	802949e <HAL_PCD_Start+0x5e>
 802945c:	687b      	ldr	r3, [r7, #4]
 802945e:	2201      	movs	r2, #1
 8029460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8029464:	687b      	ldr	r3, [r7, #4]
 8029466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029468:	2b01      	cmp	r3, #1
 802946a:	d109      	bne.n	8029480 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802946c:	687b      	ldr	r3, [r7, #4]
 802946e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8029470:	2b01      	cmp	r3, #1
 8029472:	d005      	beq.n	8029480 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029474:	68fb      	ldr	r3, [r7, #12]
 8029476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029478:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802947c:	68fb      	ldr	r3, [r7, #12]
 802947e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8029480:	687b      	ldr	r3, [r7, #4]
 8029482:	681b      	ldr	r3, [r3, #0]
 8029484:	4618      	mov	r0, r3
 8029486:	f004 f9bb 	bl	802d800 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	681b      	ldr	r3, [r3, #0]
 802948e:	4618      	mov	r0, r3
 8029490:	f005 fb68 	bl	802eb64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8029494:	687b      	ldr	r3, [r7, #4]
 8029496:	2200      	movs	r2, #0
 8029498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802949c:	2300      	movs	r3, #0
}
 802949e:	4618      	mov	r0, r3
 80294a0:	3710      	adds	r7, #16
 80294a2:	46bd      	mov	sp, r7
 80294a4:	bd80      	pop	{r7, pc}

080294a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80294a6:	b590      	push	{r4, r7, lr}
 80294a8:	b08d      	sub	sp, #52	; 0x34
 80294aa:	af00      	add	r7, sp, #0
 80294ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80294b4:	6a3b      	ldr	r3, [r7, #32]
 80294b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80294b8:	687b      	ldr	r3, [r7, #4]
 80294ba:	681b      	ldr	r3, [r3, #0]
 80294bc:	4618      	mov	r0, r3
 80294be:	f005 fc26 	bl	802ed0e <USB_GetMode>
 80294c2:	4603      	mov	r3, r0
 80294c4:	2b00      	cmp	r3, #0
 80294c6:	f040 848a 	bne.w	8029dde <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	681b      	ldr	r3, [r3, #0]
 80294ce:	4618      	mov	r0, r3
 80294d0:	f005 fb8a 	bl	802ebe8 <USB_ReadInterrupts>
 80294d4:	4603      	mov	r3, r0
 80294d6:	2b00      	cmp	r3, #0
 80294d8:	f000 8480 	beq.w	8029ddc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80294dc:	69fb      	ldr	r3, [r7, #28]
 80294de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80294e2:	689b      	ldr	r3, [r3, #8]
 80294e4:	0a1b      	lsrs	r3, r3, #8
 80294e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	681b      	ldr	r3, [r3, #0]
 80294f4:	4618      	mov	r0, r3
 80294f6:	f005 fb77 	bl	802ebe8 <USB_ReadInterrupts>
 80294fa:	4603      	mov	r3, r0
 80294fc:	f003 0302 	and.w	r3, r3, #2
 8029500:	2b02      	cmp	r3, #2
 8029502:	d107      	bne.n	8029514 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8029504:	687b      	ldr	r3, [r7, #4]
 8029506:	681b      	ldr	r3, [r3, #0]
 8029508:	695a      	ldr	r2, [r3, #20]
 802950a:	687b      	ldr	r3, [r7, #4]
 802950c:	681b      	ldr	r3, [r3, #0]
 802950e:	f002 0202 	and.w	r2, r2, #2
 8029512:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8029514:	687b      	ldr	r3, [r7, #4]
 8029516:	681b      	ldr	r3, [r3, #0]
 8029518:	4618      	mov	r0, r3
 802951a:	f005 fb65 	bl	802ebe8 <USB_ReadInterrupts>
 802951e:	4603      	mov	r3, r0
 8029520:	f003 0310 	and.w	r3, r3, #16
 8029524:	2b10      	cmp	r3, #16
 8029526:	d161      	bne.n	80295ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	681b      	ldr	r3, [r3, #0]
 802952c:	699a      	ldr	r2, [r3, #24]
 802952e:	687b      	ldr	r3, [r7, #4]
 8029530:	681b      	ldr	r3, [r3, #0]
 8029532:	f022 0210 	bic.w	r2, r2, #16
 8029536:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8029538:	6a3b      	ldr	r3, [r7, #32]
 802953a:	6a1b      	ldr	r3, [r3, #32]
 802953c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802953e:	69bb      	ldr	r3, [r7, #24]
 8029540:	f003 020f 	and.w	r2, r3, #15
 8029544:	4613      	mov	r3, r2
 8029546:	00db      	lsls	r3, r3, #3
 8029548:	4413      	add	r3, r2
 802954a:	009b      	lsls	r3, r3, #2
 802954c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029550:	687a      	ldr	r2, [r7, #4]
 8029552:	4413      	add	r3, r2
 8029554:	3304      	adds	r3, #4
 8029556:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8029558:	69bb      	ldr	r3, [r7, #24]
 802955a:	0c5b      	lsrs	r3, r3, #17
 802955c:	f003 030f 	and.w	r3, r3, #15
 8029560:	2b02      	cmp	r3, #2
 8029562:	d124      	bne.n	80295ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8029564:	69ba      	ldr	r2, [r7, #24]
 8029566:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802956a:	4013      	ands	r3, r2
 802956c:	2b00      	cmp	r3, #0
 802956e:	d035      	beq.n	80295dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8029570:	697b      	ldr	r3, [r7, #20]
 8029572:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8029574:	69bb      	ldr	r3, [r7, #24]
 8029576:	091b      	lsrs	r3, r3, #4
 8029578:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802957a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802957e:	b29b      	uxth	r3, r3
 8029580:	461a      	mov	r2, r3
 8029582:	6a38      	ldr	r0, [r7, #32]
 8029584:	f005 f99c 	bl	802e8c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8029588:	697b      	ldr	r3, [r7, #20]
 802958a:	691a      	ldr	r2, [r3, #16]
 802958c:	69bb      	ldr	r3, [r7, #24]
 802958e:	091b      	lsrs	r3, r3, #4
 8029590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8029594:	441a      	add	r2, r3
 8029596:	697b      	ldr	r3, [r7, #20]
 8029598:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802959a:	697b      	ldr	r3, [r7, #20]
 802959c:	6a1a      	ldr	r2, [r3, #32]
 802959e:	69bb      	ldr	r3, [r7, #24]
 80295a0:	091b      	lsrs	r3, r3, #4
 80295a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80295a6:	441a      	add	r2, r3
 80295a8:	697b      	ldr	r3, [r7, #20]
 80295aa:	621a      	str	r2, [r3, #32]
 80295ac:	e016      	b.n	80295dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80295ae:	69bb      	ldr	r3, [r7, #24]
 80295b0:	0c5b      	lsrs	r3, r3, #17
 80295b2:	f003 030f 	and.w	r3, r3, #15
 80295b6:	2b06      	cmp	r3, #6
 80295b8:	d110      	bne.n	80295dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80295c0:	2208      	movs	r2, #8
 80295c2:	4619      	mov	r1, r3
 80295c4:	6a38      	ldr	r0, [r7, #32]
 80295c6:	f005 f97b 	bl	802e8c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80295ca:	697b      	ldr	r3, [r7, #20]
 80295cc:	6a1a      	ldr	r2, [r3, #32]
 80295ce:	69bb      	ldr	r3, [r7, #24]
 80295d0:	091b      	lsrs	r3, r3, #4
 80295d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80295d6:	441a      	add	r2, r3
 80295d8:	697b      	ldr	r3, [r7, #20]
 80295da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	681b      	ldr	r3, [r3, #0]
 80295e0:	699a      	ldr	r2, [r3, #24]
 80295e2:	687b      	ldr	r3, [r7, #4]
 80295e4:	681b      	ldr	r3, [r3, #0]
 80295e6:	f042 0210 	orr.w	r2, r2, #16
 80295ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80295ec:	687b      	ldr	r3, [r7, #4]
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	4618      	mov	r0, r3
 80295f2:	f005 faf9 	bl	802ebe8 <USB_ReadInterrupts>
 80295f6:	4603      	mov	r3, r0
 80295f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80295fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8029600:	f040 80a7 	bne.w	8029752 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8029604:	2300      	movs	r3, #0
 8029606:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	681b      	ldr	r3, [r3, #0]
 802960c:	4618      	mov	r0, r3
 802960e:	f005 fafe 	bl	802ec0e <USB_ReadDevAllOutEpInterrupt>
 8029612:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8029614:	e099      	b.n	802974a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8029616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029618:	f003 0301 	and.w	r3, r3, #1
 802961c:	2b00      	cmp	r3, #0
 802961e:	f000 808e 	beq.w	802973e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8029622:	687b      	ldr	r3, [r7, #4]
 8029624:	681b      	ldr	r3, [r3, #0]
 8029626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029628:	b2d2      	uxtb	r2, r2
 802962a:	4611      	mov	r1, r2
 802962c:	4618      	mov	r0, r3
 802962e:	f005 fb22 	bl	802ec76 <USB_ReadDevOutEPInterrupt>
 8029632:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8029634:	693b      	ldr	r3, [r7, #16]
 8029636:	f003 0301 	and.w	r3, r3, #1
 802963a:	2b00      	cmp	r3, #0
 802963c:	d00c      	beq.n	8029658 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029640:	015a      	lsls	r2, r3, #5
 8029642:	69fb      	ldr	r3, [r7, #28]
 8029644:	4413      	add	r3, r2
 8029646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802964a:	461a      	mov	r2, r3
 802964c:	2301      	movs	r3, #1
 802964e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8029650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029652:	6878      	ldr	r0, [r7, #4]
 8029654:	f000 fec2 	bl	802a3dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8029658:	693b      	ldr	r3, [r7, #16]
 802965a:	f003 0308 	and.w	r3, r3, #8
 802965e:	2b00      	cmp	r3, #0
 8029660:	d00c      	beq.n	802967c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8029662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029664:	015a      	lsls	r2, r3, #5
 8029666:	69fb      	ldr	r3, [r7, #28]
 8029668:	4413      	add	r3, r2
 802966a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802966e:	461a      	mov	r2, r3
 8029670:	2308      	movs	r3, #8
 8029672:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8029674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029676:	6878      	ldr	r0, [r7, #4]
 8029678:	f000 ff98 	bl	802a5ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802967c:	693b      	ldr	r3, [r7, #16]
 802967e:	f003 0310 	and.w	r3, r3, #16
 8029682:	2b00      	cmp	r3, #0
 8029684:	d008      	beq.n	8029698 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8029686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029688:	015a      	lsls	r2, r3, #5
 802968a:	69fb      	ldr	r3, [r7, #28]
 802968c:	4413      	add	r3, r2
 802968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029692:	461a      	mov	r2, r3
 8029694:	2310      	movs	r3, #16
 8029696:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8029698:	693b      	ldr	r3, [r7, #16]
 802969a:	f003 0302 	and.w	r3, r3, #2
 802969e:	2b00      	cmp	r3, #0
 80296a0:	d030      	beq.n	8029704 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80296a2:	6a3b      	ldr	r3, [r7, #32]
 80296a4:	695b      	ldr	r3, [r3, #20]
 80296a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80296aa:	2b80      	cmp	r3, #128	; 0x80
 80296ac:	d109      	bne.n	80296c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80296ae:	69fb      	ldr	r3, [r7, #28]
 80296b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80296b4:	685b      	ldr	r3, [r3, #4]
 80296b6:	69fa      	ldr	r2, [r7, #28]
 80296b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80296bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80296c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80296c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80296c4:	4613      	mov	r3, r2
 80296c6:	00db      	lsls	r3, r3, #3
 80296c8:	4413      	add	r3, r2
 80296ca:	009b      	lsls	r3, r3, #2
 80296cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80296d0:	687a      	ldr	r2, [r7, #4]
 80296d2:	4413      	add	r3, r2
 80296d4:	3304      	adds	r3, #4
 80296d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80296d8:	697b      	ldr	r3, [r7, #20]
 80296da:	78db      	ldrb	r3, [r3, #3]
 80296dc:	2b01      	cmp	r3, #1
 80296de:	d108      	bne.n	80296f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80296e0:	697b      	ldr	r3, [r7, #20]
 80296e2:	2200      	movs	r2, #0
 80296e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80296e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296e8:	b2db      	uxtb	r3, r3
 80296ea:	4619      	mov	r1, r3
 80296ec:	6878      	ldr	r0, [r7, #4]
 80296ee:	f008 f8bd 	bl	803186c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80296f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296f4:	015a      	lsls	r2, r3, #5
 80296f6:	69fb      	ldr	r3, [r7, #28]
 80296f8:	4413      	add	r3, r2
 80296fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80296fe:	461a      	mov	r2, r3
 8029700:	2302      	movs	r3, #2
 8029702:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8029704:	693b      	ldr	r3, [r7, #16]
 8029706:	f003 0320 	and.w	r3, r3, #32
 802970a:	2b00      	cmp	r3, #0
 802970c:	d008      	beq.n	8029720 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029710:	015a      	lsls	r2, r3, #5
 8029712:	69fb      	ldr	r3, [r7, #28]
 8029714:	4413      	add	r3, r2
 8029716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802971a:	461a      	mov	r2, r3
 802971c:	2320      	movs	r3, #32
 802971e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8029720:	693b      	ldr	r3, [r7, #16]
 8029722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029726:	2b00      	cmp	r3, #0
 8029728:	d009      	beq.n	802973e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802972c:	015a      	lsls	r2, r3, #5
 802972e:	69fb      	ldr	r3, [r7, #28]
 8029730:	4413      	add	r3, r2
 8029732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029736:	461a      	mov	r2, r3
 8029738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802973c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029740:	3301      	adds	r3, #1
 8029742:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8029744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029746:	085b      	lsrs	r3, r3, #1
 8029748:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802974c:	2b00      	cmp	r3, #0
 802974e:	f47f af62 	bne.w	8029616 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8029752:	687b      	ldr	r3, [r7, #4]
 8029754:	681b      	ldr	r3, [r3, #0]
 8029756:	4618      	mov	r0, r3
 8029758:	f005 fa46 	bl	802ebe8 <USB_ReadInterrupts>
 802975c:	4603      	mov	r3, r0
 802975e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8029762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8029766:	f040 80db 	bne.w	8029920 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	681b      	ldr	r3, [r3, #0]
 802976e:	4618      	mov	r0, r3
 8029770:	f005 fa67 	bl	802ec42 <USB_ReadDevAllInEpInterrupt>
 8029774:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8029776:	2300      	movs	r3, #0
 8029778:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802977a:	e0cd      	b.n	8029918 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802977e:	f003 0301 	and.w	r3, r3, #1
 8029782:	2b00      	cmp	r3, #0
 8029784:	f000 80c2 	beq.w	802990c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8029788:	687b      	ldr	r3, [r7, #4]
 802978a:	681b      	ldr	r3, [r3, #0]
 802978c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802978e:	b2d2      	uxtb	r2, r2
 8029790:	4611      	mov	r1, r2
 8029792:	4618      	mov	r0, r3
 8029794:	f005 fa8d 	bl	802ecb2 <USB_ReadDevInEPInterrupt>
 8029798:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802979a:	693b      	ldr	r3, [r7, #16]
 802979c:	f003 0301 	and.w	r3, r3, #1
 80297a0:	2b00      	cmp	r3, #0
 80297a2:	d057      	beq.n	8029854 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80297a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80297a6:	f003 030f 	and.w	r3, r3, #15
 80297aa:	2201      	movs	r2, #1
 80297ac:	fa02 f303 	lsl.w	r3, r2, r3
 80297b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80297b2:	69fb      	ldr	r3, [r7, #28]
 80297b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80297b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80297ba:	68fb      	ldr	r3, [r7, #12]
 80297bc:	43db      	mvns	r3, r3
 80297be:	69f9      	ldr	r1, [r7, #28]
 80297c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80297c4:	4013      	ands	r3, r2
 80297c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80297c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80297ca:	015a      	lsls	r2, r3, #5
 80297cc:	69fb      	ldr	r3, [r7, #28]
 80297ce:	4413      	add	r3, r2
 80297d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80297d4:	461a      	mov	r2, r3
 80297d6:	2301      	movs	r3, #1
 80297d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	691b      	ldr	r3, [r3, #16]
 80297de:	2b01      	cmp	r3, #1
 80297e0:	d132      	bne.n	8029848 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80297e2:	6879      	ldr	r1, [r7, #4]
 80297e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297e6:	4613      	mov	r3, r2
 80297e8:	00db      	lsls	r3, r3, #3
 80297ea:	4413      	add	r3, r2
 80297ec:	009b      	lsls	r3, r3, #2
 80297ee:	440b      	add	r3, r1
 80297f0:	334c      	adds	r3, #76	; 0x4c
 80297f2:	6819      	ldr	r1, [r3, #0]
 80297f4:	6878      	ldr	r0, [r7, #4]
 80297f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297f8:	4613      	mov	r3, r2
 80297fa:	00db      	lsls	r3, r3, #3
 80297fc:	4413      	add	r3, r2
 80297fe:	009b      	lsls	r3, r3, #2
 8029800:	4403      	add	r3, r0
 8029802:	3348      	adds	r3, #72	; 0x48
 8029804:	681b      	ldr	r3, [r3, #0]
 8029806:	4419      	add	r1, r3
 8029808:	6878      	ldr	r0, [r7, #4]
 802980a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802980c:	4613      	mov	r3, r2
 802980e:	00db      	lsls	r3, r3, #3
 8029810:	4413      	add	r3, r2
 8029812:	009b      	lsls	r3, r3, #2
 8029814:	4403      	add	r3, r0
 8029816:	334c      	adds	r3, #76	; 0x4c
 8029818:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802981c:	2b00      	cmp	r3, #0
 802981e:	d113      	bne.n	8029848 <HAL_PCD_IRQHandler+0x3a2>
 8029820:	6879      	ldr	r1, [r7, #4]
 8029822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029824:	4613      	mov	r3, r2
 8029826:	00db      	lsls	r3, r3, #3
 8029828:	4413      	add	r3, r2
 802982a:	009b      	lsls	r3, r3, #2
 802982c:	440b      	add	r3, r1
 802982e:	3354      	adds	r3, #84	; 0x54
 8029830:	681b      	ldr	r3, [r3, #0]
 8029832:	2b00      	cmp	r3, #0
 8029834:	d108      	bne.n	8029848 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029836:	687b      	ldr	r3, [r7, #4]
 8029838:	6818      	ldr	r0, [r3, #0]
 802983a:	687b      	ldr	r3, [r7, #4]
 802983c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029840:	461a      	mov	r2, r3
 8029842:	2101      	movs	r1, #1
 8029844:	f005 fa94 	bl	802ed70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8029848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802984a:	b2db      	uxtb	r3, r3
 802984c:	4619      	mov	r1, r3
 802984e:	6878      	ldr	r0, [r7, #4]
 8029850:	f007 ff87 	bl	8031762 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8029854:	693b      	ldr	r3, [r7, #16]
 8029856:	f003 0308 	and.w	r3, r3, #8
 802985a:	2b00      	cmp	r3, #0
 802985c:	d008      	beq.n	8029870 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029860:	015a      	lsls	r2, r3, #5
 8029862:	69fb      	ldr	r3, [r7, #28]
 8029864:	4413      	add	r3, r2
 8029866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802986a:	461a      	mov	r2, r3
 802986c:	2308      	movs	r3, #8
 802986e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8029870:	693b      	ldr	r3, [r7, #16]
 8029872:	f003 0310 	and.w	r3, r3, #16
 8029876:	2b00      	cmp	r3, #0
 8029878:	d008      	beq.n	802988c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802987c:	015a      	lsls	r2, r3, #5
 802987e:	69fb      	ldr	r3, [r7, #28]
 8029880:	4413      	add	r3, r2
 8029882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029886:	461a      	mov	r2, r3
 8029888:	2310      	movs	r3, #16
 802988a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802988c:	693b      	ldr	r3, [r7, #16]
 802988e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029892:	2b00      	cmp	r3, #0
 8029894:	d008      	beq.n	80298a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8029896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029898:	015a      	lsls	r2, r3, #5
 802989a:	69fb      	ldr	r3, [r7, #28]
 802989c:	4413      	add	r3, r2
 802989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80298a2:	461a      	mov	r2, r3
 80298a4:	2340      	movs	r3, #64	; 0x40
 80298a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80298a8:	693b      	ldr	r3, [r7, #16]
 80298aa:	f003 0302 	and.w	r3, r3, #2
 80298ae:	2b00      	cmp	r3, #0
 80298b0:	d023      	beq.n	80298fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80298b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80298b4:	6a38      	ldr	r0, [r7, #32]
 80298b6:	f004 f975 	bl	802dba4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80298ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80298bc:	4613      	mov	r3, r2
 80298be:	00db      	lsls	r3, r3, #3
 80298c0:	4413      	add	r3, r2
 80298c2:	009b      	lsls	r3, r3, #2
 80298c4:	3338      	adds	r3, #56	; 0x38
 80298c6:	687a      	ldr	r2, [r7, #4]
 80298c8:	4413      	add	r3, r2
 80298ca:	3304      	adds	r3, #4
 80298cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80298ce:	697b      	ldr	r3, [r7, #20]
 80298d0:	78db      	ldrb	r3, [r3, #3]
 80298d2:	2b01      	cmp	r3, #1
 80298d4:	d108      	bne.n	80298e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80298d6:	697b      	ldr	r3, [r7, #20]
 80298d8:	2200      	movs	r2, #0
 80298da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80298dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80298de:	b2db      	uxtb	r3, r3
 80298e0:	4619      	mov	r1, r3
 80298e2:	6878      	ldr	r0, [r7, #4]
 80298e4:	f007 ffd4 	bl	8031890 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80298e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80298ea:	015a      	lsls	r2, r3, #5
 80298ec:	69fb      	ldr	r3, [r7, #28]
 80298ee:	4413      	add	r3, r2
 80298f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80298f4:	461a      	mov	r2, r3
 80298f6:	2302      	movs	r3, #2
 80298f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80298fa:	693b      	ldr	r3, [r7, #16]
 80298fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029900:	2b00      	cmp	r3, #0
 8029902:	d003      	beq.n	802990c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8029904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029906:	6878      	ldr	r0, [r7, #4]
 8029908:	f000 fcdb 	bl	802a2c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802990e:	3301      	adds	r3, #1
 8029910:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8029912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029914:	085b      	lsrs	r3, r3, #1
 8029916:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8029918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802991a:	2b00      	cmp	r3, #0
 802991c:	f47f af2e 	bne.w	802977c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8029920:	687b      	ldr	r3, [r7, #4]
 8029922:	681b      	ldr	r3, [r3, #0]
 8029924:	4618      	mov	r0, r3
 8029926:	f005 f95f 	bl	802ebe8 <USB_ReadInterrupts>
 802992a:	4603      	mov	r3, r0
 802992c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8029934:	d122      	bne.n	802997c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8029936:	69fb      	ldr	r3, [r7, #28]
 8029938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802993c:	685b      	ldr	r3, [r3, #4]
 802993e:	69fa      	ldr	r2, [r7, #28]
 8029940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029944:	f023 0301 	bic.w	r3, r3, #1
 8029948:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8029950:	2b01      	cmp	r3, #1
 8029952:	d108      	bne.n	8029966 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8029954:	687b      	ldr	r3, [r7, #4]
 8029956:	2200      	movs	r2, #0
 8029958:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802995c:	2100      	movs	r1, #0
 802995e:	6878      	ldr	r0, [r7, #4]
 8029960:	f000 fec2 	bl	802a6e8 <HAL_PCDEx_LPM_Callback>
 8029964:	e002      	b.n	802996c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8029966:	6878      	ldr	r0, [r7, #4]
 8029968:	f007 ff72 	bl	8031850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802996c:	687b      	ldr	r3, [r7, #4]
 802996e:	681b      	ldr	r3, [r3, #0]
 8029970:	695a      	ldr	r2, [r3, #20]
 8029972:	687b      	ldr	r3, [r7, #4]
 8029974:	681b      	ldr	r3, [r3, #0]
 8029976:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802997a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802997c:	687b      	ldr	r3, [r7, #4]
 802997e:	681b      	ldr	r3, [r3, #0]
 8029980:	4618      	mov	r0, r3
 8029982:	f005 f931 	bl	802ebe8 <USB_ReadInterrupts>
 8029986:	4603      	mov	r3, r0
 8029988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802998c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029990:	d112      	bne.n	80299b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8029992:	69fb      	ldr	r3, [r7, #28]
 8029994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029998:	689b      	ldr	r3, [r3, #8]
 802999a:	f003 0301 	and.w	r3, r3, #1
 802999e:	2b01      	cmp	r3, #1
 80299a0:	d102      	bne.n	80299a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80299a2:	6878      	ldr	r0, [r7, #4]
 80299a4:	f007 ff2e 	bl	8031804 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	681b      	ldr	r3, [r3, #0]
 80299ac:	695a      	ldr	r2, [r3, #20]
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	681b      	ldr	r3, [r3, #0]
 80299b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80299b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	681b      	ldr	r3, [r3, #0]
 80299bc:	4618      	mov	r0, r3
 80299be:	f005 f913 	bl	802ebe8 <USB_ReadInterrupts>
 80299c2:	4603      	mov	r3, r0
 80299c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80299c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80299cc:	f040 80b7 	bne.w	8029b3e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80299d0:	69fb      	ldr	r3, [r7, #28]
 80299d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80299d6:	685b      	ldr	r3, [r3, #4]
 80299d8:	69fa      	ldr	r2, [r7, #28]
 80299da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80299de:	f023 0301 	bic.w	r3, r3, #1
 80299e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80299e4:	687b      	ldr	r3, [r7, #4]
 80299e6:	681b      	ldr	r3, [r3, #0]
 80299e8:	2110      	movs	r1, #16
 80299ea:	4618      	mov	r0, r3
 80299ec:	f004 f8da 	bl	802dba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80299f0:	2300      	movs	r3, #0
 80299f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80299f4:	e046      	b.n	8029a84 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80299f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80299f8:	015a      	lsls	r2, r3, #5
 80299fa:	69fb      	ldr	r3, [r7, #28]
 80299fc:	4413      	add	r3, r2
 80299fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029a02:	461a      	mov	r2, r3
 8029a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029a08:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8029a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a0c:	015a      	lsls	r2, r3, #5
 8029a0e:	69fb      	ldr	r3, [r7, #28]
 8029a10:	4413      	add	r3, r2
 8029a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029a16:	681b      	ldr	r3, [r3, #0]
 8029a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a1a:	0151      	lsls	r1, r2, #5
 8029a1c:	69fa      	ldr	r2, [r7, #28]
 8029a1e:	440a      	add	r2, r1
 8029a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8029a24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029a28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8029a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a2c:	015a      	lsls	r2, r3, #5
 8029a2e:	69fb      	ldr	r3, [r7, #28]
 8029a30:	4413      	add	r3, r2
 8029a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029a36:	461a      	mov	r2, r3
 8029a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029a3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8029a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a40:	015a      	lsls	r2, r3, #5
 8029a42:	69fb      	ldr	r3, [r7, #28]
 8029a44:	4413      	add	r3, r2
 8029a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029a4a:	681b      	ldr	r3, [r3, #0]
 8029a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a4e:	0151      	lsls	r1, r2, #5
 8029a50:	69fa      	ldr	r2, [r7, #28]
 8029a52:	440a      	add	r2, r1
 8029a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029a5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8029a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a60:	015a      	lsls	r2, r3, #5
 8029a62:	69fb      	ldr	r3, [r7, #28]
 8029a64:	4413      	add	r3, r2
 8029a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029a6a:	681b      	ldr	r3, [r3, #0]
 8029a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a6e:	0151      	lsls	r1, r2, #5
 8029a70:	69fa      	ldr	r2, [r7, #28]
 8029a72:	440a      	add	r2, r1
 8029a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029a78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8029a7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029a80:	3301      	adds	r3, #1
 8029a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029a84:	687b      	ldr	r3, [r7, #4]
 8029a86:	685b      	ldr	r3, [r3, #4]
 8029a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a8a:	429a      	cmp	r2, r3
 8029a8c:	d3b3      	bcc.n	80299f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8029a8e:	69fb      	ldr	r3, [r7, #28]
 8029a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029a94:	69db      	ldr	r3, [r3, #28]
 8029a96:	69fa      	ldr	r2, [r7, #28]
 8029a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029a9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8029aa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8029aa2:	687b      	ldr	r3, [r7, #4]
 8029aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029aa6:	2b00      	cmp	r3, #0
 8029aa8:	d016      	beq.n	8029ad8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8029aaa:	69fb      	ldr	r3, [r7, #28]
 8029aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029ab4:	69fa      	ldr	r2, [r7, #28]
 8029ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029aba:	f043 030b 	orr.w	r3, r3, #11
 8029abe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8029ac2:	69fb      	ldr	r3, [r7, #28]
 8029ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029aca:	69fa      	ldr	r2, [r7, #28]
 8029acc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029ad0:	f043 030b 	orr.w	r3, r3, #11
 8029ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8029ad6:	e015      	b.n	8029b04 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8029ad8:	69fb      	ldr	r3, [r7, #28]
 8029ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029ade:	695b      	ldr	r3, [r3, #20]
 8029ae0:	69fa      	ldr	r2, [r7, #28]
 8029ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8029aea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8029aee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8029af0:	69fb      	ldr	r3, [r7, #28]
 8029af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029af6:	691b      	ldr	r3, [r3, #16]
 8029af8:	69fa      	ldr	r2, [r7, #28]
 8029afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029afe:	f043 030b 	orr.w	r3, r3, #11
 8029b02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8029b04:	69fb      	ldr	r3, [r7, #28]
 8029b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029b0a:	681b      	ldr	r3, [r3, #0]
 8029b0c:	69fa      	ldr	r2, [r7, #28]
 8029b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8029b16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029b18:	687b      	ldr	r3, [r7, #4]
 8029b1a:	6818      	ldr	r0, [r3, #0]
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	691b      	ldr	r3, [r3, #16]
 8029b20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8029b22:	687b      	ldr	r3, [r7, #4]
 8029b24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029b28:	461a      	mov	r2, r3
 8029b2a:	f005 f921 	bl	802ed70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	681b      	ldr	r3, [r3, #0]
 8029b32:	695a      	ldr	r2, [r3, #20]
 8029b34:	687b      	ldr	r3, [r7, #4]
 8029b36:	681b      	ldr	r3, [r3, #0]
 8029b38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8029b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8029b3e:	687b      	ldr	r3, [r7, #4]
 8029b40:	681b      	ldr	r3, [r3, #0]
 8029b42:	4618      	mov	r0, r3
 8029b44:	f005 f850 	bl	802ebe8 <USB_ReadInterrupts>
 8029b48:	4603      	mov	r3, r0
 8029b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029b52:	d124      	bne.n	8029b9e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8029b54:	687b      	ldr	r3, [r7, #4]
 8029b56:	681b      	ldr	r3, [r3, #0]
 8029b58:	4618      	mov	r0, r3
 8029b5a:	f005 f8e6 	bl	802ed2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	4618      	mov	r0, r3
 8029b64:	f004 f89b 	bl	802dc9e <USB_GetDevSpeed>
 8029b68:	4603      	mov	r3, r0
 8029b6a:	461a      	mov	r2, r3
 8029b6c:	687b      	ldr	r3, [r7, #4]
 8029b6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	681c      	ldr	r4, [r3, #0]
 8029b74:	f001 fa0e 	bl	802af94 <HAL_RCC_GetHCLKFreq>
 8029b78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8029b7a:	687b      	ldr	r3, [r7, #4]
 8029b7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8029b7e:	b2db      	uxtb	r3, r3
 8029b80:	461a      	mov	r2, r3
 8029b82:	4620      	mov	r0, r4
 8029b84:	f003 fd9a 	bl	802d6bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8029b88:	6878      	ldr	r0, [r7, #4]
 8029b8a:	f007 fe12 	bl	80317b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8029b8e:	687b      	ldr	r3, [r7, #4]
 8029b90:	681b      	ldr	r3, [r3, #0]
 8029b92:	695a      	ldr	r2, [r3, #20]
 8029b94:	687b      	ldr	r3, [r7, #4]
 8029b96:	681b      	ldr	r3, [r3, #0]
 8029b98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8029b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8029b9e:	687b      	ldr	r3, [r7, #4]
 8029ba0:	681b      	ldr	r3, [r3, #0]
 8029ba2:	4618      	mov	r0, r3
 8029ba4:	f005 f820 	bl	802ebe8 <USB_ReadInterrupts>
 8029ba8:	4603      	mov	r3, r0
 8029baa:	f003 0308 	and.w	r3, r3, #8
 8029bae:	2b08      	cmp	r3, #8
 8029bb0:	d10a      	bne.n	8029bc8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8029bb2:	6878      	ldr	r0, [r7, #4]
 8029bb4:	f007 fdef 	bl	8031796 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8029bb8:	687b      	ldr	r3, [r7, #4]
 8029bba:	681b      	ldr	r3, [r3, #0]
 8029bbc:	695a      	ldr	r2, [r3, #20]
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	681b      	ldr	r3, [r3, #0]
 8029bc2:	f002 0208 	and.w	r2, r2, #8
 8029bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	681b      	ldr	r3, [r3, #0]
 8029bcc:	4618      	mov	r0, r3
 8029bce:	f005 f80b 	bl	802ebe8 <USB_ReadInterrupts>
 8029bd2:	4603      	mov	r3, r0
 8029bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029bd8:	2b80      	cmp	r3, #128	; 0x80
 8029bda:	d122      	bne.n	8029c22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8029bdc:	6a3b      	ldr	r3, [r7, #32]
 8029bde:	699b      	ldr	r3, [r3, #24]
 8029be0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029be4:	6a3b      	ldr	r3, [r7, #32]
 8029be6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029be8:	2301      	movs	r3, #1
 8029bea:	627b      	str	r3, [r7, #36]	; 0x24
 8029bec:	e014      	b.n	8029c18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8029bee:	6879      	ldr	r1, [r7, #4]
 8029bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029bf2:	4613      	mov	r3, r2
 8029bf4:	00db      	lsls	r3, r3, #3
 8029bf6:	4413      	add	r3, r2
 8029bf8:	009b      	lsls	r3, r3, #2
 8029bfa:	440b      	add	r3, r1
 8029bfc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029c00:	781b      	ldrb	r3, [r3, #0]
 8029c02:	2b01      	cmp	r3, #1
 8029c04:	d105      	bne.n	8029c12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8029c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c08:	b2db      	uxtb	r3, r3
 8029c0a:	4619      	mov	r1, r3
 8029c0c:	6878      	ldr	r0, [r7, #4]
 8029c0e:	f000 fb27 	bl	802a260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c14:	3301      	adds	r3, #1
 8029c16:	627b      	str	r3, [r7, #36]	; 0x24
 8029c18:	687b      	ldr	r3, [r7, #4]
 8029c1a:	685b      	ldr	r3, [r3, #4]
 8029c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029c1e:	429a      	cmp	r2, r3
 8029c20:	d3e5      	bcc.n	8029bee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	681b      	ldr	r3, [r3, #0]
 8029c26:	4618      	mov	r0, r3
 8029c28:	f004 ffde 	bl	802ebe8 <USB_ReadInterrupts>
 8029c2c:	4603      	mov	r3, r0
 8029c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8029c36:	d13b      	bne.n	8029cb0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029c38:	2301      	movs	r3, #1
 8029c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8029c3c:	e02b      	b.n	8029c96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8029c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c40:	015a      	lsls	r2, r3, #5
 8029c42:	69fb      	ldr	r3, [r7, #28]
 8029c44:	4413      	add	r3, r2
 8029c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029c4a:	681b      	ldr	r3, [r3, #0]
 8029c4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8029c4e:	6879      	ldr	r1, [r7, #4]
 8029c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029c52:	4613      	mov	r3, r2
 8029c54:	00db      	lsls	r3, r3, #3
 8029c56:	4413      	add	r3, r2
 8029c58:	009b      	lsls	r3, r3, #2
 8029c5a:	440b      	add	r3, r1
 8029c5c:	3340      	adds	r3, #64	; 0x40
 8029c5e:	781b      	ldrb	r3, [r3, #0]
 8029c60:	2b01      	cmp	r3, #1
 8029c62:	d115      	bne.n	8029c90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8029c64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8029c66:	2b00      	cmp	r3, #0
 8029c68:	da12      	bge.n	8029c90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8029c6a:	6879      	ldr	r1, [r7, #4]
 8029c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029c6e:	4613      	mov	r3, r2
 8029c70:	00db      	lsls	r3, r3, #3
 8029c72:	4413      	add	r3, r2
 8029c74:	009b      	lsls	r3, r3, #2
 8029c76:	440b      	add	r3, r1
 8029c78:	333f      	adds	r3, #63	; 0x3f
 8029c7a:	2201      	movs	r2, #1
 8029c7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8029c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c80:	b2db      	uxtb	r3, r3
 8029c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8029c86:	b2db      	uxtb	r3, r3
 8029c88:	4619      	mov	r1, r3
 8029c8a:	6878      	ldr	r0, [r7, #4]
 8029c8c:	f000 fae8 	bl	802a260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029c92:	3301      	adds	r3, #1
 8029c94:	627b      	str	r3, [r7, #36]	; 0x24
 8029c96:	687b      	ldr	r3, [r7, #4]
 8029c98:	685b      	ldr	r3, [r3, #4]
 8029c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029c9c:	429a      	cmp	r2, r3
 8029c9e:	d3ce      	bcc.n	8029c3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8029ca0:	687b      	ldr	r3, [r7, #4]
 8029ca2:	681b      	ldr	r3, [r3, #0]
 8029ca4:	695a      	ldr	r2, [r3, #20]
 8029ca6:	687b      	ldr	r3, [r7, #4]
 8029ca8:	681b      	ldr	r3, [r3, #0]
 8029caa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8029cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8029cb0:	687b      	ldr	r3, [r7, #4]
 8029cb2:	681b      	ldr	r3, [r3, #0]
 8029cb4:	4618      	mov	r0, r3
 8029cb6:	f004 ff97 	bl	802ebe8 <USB_ReadInterrupts>
 8029cba:	4603      	mov	r3, r0
 8029cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8029cc4:	d155      	bne.n	8029d72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029cc6:	2301      	movs	r3, #1
 8029cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8029cca:	e045      	b.n	8029d58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8029ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029cce:	015a      	lsls	r2, r3, #5
 8029cd0:	69fb      	ldr	r3, [r7, #28]
 8029cd2:	4413      	add	r3, r2
 8029cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cd8:	681b      	ldr	r3, [r3, #0]
 8029cda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029cdc:	6879      	ldr	r1, [r7, #4]
 8029cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029ce0:	4613      	mov	r3, r2
 8029ce2:	00db      	lsls	r3, r3, #3
 8029ce4:	4413      	add	r3, r2
 8029ce6:	009b      	lsls	r3, r3, #2
 8029ce8:	440b      	add	r3, r1
 8029cea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8029cee:	781b      	ldrb	r3, [r3, #0]
 8029cf0:	2b01      	cmp	r3, #1
 8029cf2:	d12e      	bne.n	8029d52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029cf4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029cf6:	2b00      	cmp	r3, #0
 8029cf8:	da2b      	bge.n	8029d52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8029cfa:	69bb      	ldr	r3, [r7, #24]
 8029cfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8029d00:	687b      	ldr	r3, [r7, #4]
 8029d02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8029d06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029d0a:	429a      	cmp	r2, r3
 8029d0c:	d121      	bne.n	8029d52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8029d0e:	6879      	ldr	r1, [r7, #4]
 8029d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029d12:	4613      	mov	r3, r2
 8029d14:	00db      	lsls	r3, r3, #3
 8029d16:	4413      	add	r3, r2
 8029d18:	009b      	lsls	r3, r3, #2
 8029d1a:	440b      	add	r3, r1
 8029d1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029d20:	2201      	movs	r2, #1
 8029d22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8029d24:	6a3b      	ldr	r3, [r7, #32]
 8029d26:	699b      	ldr	r3, [r3, #24]
 8029d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8029d2c:	6a3b      	ldr	r3, [r7, #32]
 8029d2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8029d30:	6a3b      	ldr	r3, [r7, #32]
 8029d32:	695b      	ldr	r3, [r3, #20]
 8029d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029d38:	2b00      	cmp	r3, #0
 8029d3a:	d10a      	bne.n	8029d52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8029d3c:	69fb      	ldr	r3, [r7, #28]
 8029d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029d42:	685b      	ldr	r3, [r3, #4]
 8029d44:	69fa      	ldr	r2, [r7, #28]
 8029d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8029d4e:	6053      	str	r3, [r2, #4]
            break;
 8029d50:	e007      	b.n	8029d62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029d54:	3301      	adds	r3, #1
 8029d56:	627b      	str	r3, [r7, #36]	; 0x24
 8029d58:	687b      	ldr	r3, [r7, #4]
 8029d5a:	685b      	ldr	r3, [r3, #4]
 8029d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029d5e:	429a      	cmp	r2, r3
 8029d60:	d3b4      	bcc.n	8029ccc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	681b      	ldr	r3, [r3, #0]
 8029d66:	695a      	ldr	r2, [r3, #20]
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	681b      	ldr	r3, [r3, #0]
 8029d6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8029d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	681b      	ldr	r3, [r3, #0]
 8029d76:	4618      	mov	r0, r3
 8029d78:	f004 ff36 	bl	802ebe8 <USB_ReadInterrupts>
 8029d7c:	4603      	mov	r3, r0
 8029d7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8029d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029d86:	d10a      	bne.n	8029d9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8029d88:	6878      	ldr	r0, [r7, #4]
 8029d8a:	f007 fd93 	bl	80318b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8029d8e:	687b      	ldr	r3, [r7, #4]
 8029d90:	681b      	ldr	r3, [r3, #0]
 8029d92:	695a      	ldr	r2, [r3, #20]
 8029d94:	687b      	ldr	r3, [r7, #4]
 8029d96:	681b      	ldr	r3, [r3, #0]
 8029d98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8029d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8029d9e:	687b      	ldr	r3, [r7, #4]
 8029da0:	681b      	ldr	r3, [r3, #0]
 8029da2:	4618      	mov	r0, r3
 8029da4:	f004 ff20 	bl	802ebe8 <USB_ReadInterrupts>
 8029da8:	4603      	mov	r3, r0
 8029daa:	f003 0304 	and.w	r3, r3, #4
 8029dae:	2b04      	cmp	r3, #4
 8029db0:	d115      	bne.n	8029dde <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	681b      	ldr	r3, [r3, #0]
 8029db6:	685b      	ldr	r3, [r3, #4]
 8029db8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8029dba:	69bb      	ldr	r3, [r7, #24]
 8029dbc:	f003 0304 	and.w	r3, r3, #4
 8029dc0:	2b00      	cmp	r3, #0
 8029dc2:	d002      	beq.n	8029dca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8029dc4:	6878      	ldr	r0, [r7, #4]
 8029dc6:	f007 fd83 	bl	80318d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8029dca:	687b      	ldr	r3, [r7, #4]
 8029dcc:	681b      	ldr	r3, [r3, #0]
 8029dce:	6859      	ldr	r1, [r3, #4]
 8029dd0:	687b      	ldr	r3, [r7, #4]
 8029dd2:	681b      	ldr	r3, [r3, #0]
 8029dd4:	69ba      	ldr	r2, [r7, #24]
 8029dd6:	430a      	orrs	r2, r1
 8029dd8:	605a      	str	r2, [r3, #4]
 8029dda:	e000      	b.n	8029dde <HAL_PCD_IRQHandler+0x938>
      return;
 8029ddc:	bf00      	nop
    }
  }
}
 8029dde:	3734      	adds	r7, #52	; 0x34
 8029de0:	46bd      	mov	sp, r7
 8029de2:	bd90      	pop	{r4, r7, pc}

08029de4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8029de4:	b580      	push	{r7, lr}
 8029de6:	b082      	sub	sp, #8
 8029de8:	af00      	add	r7, sp, #0
 8029dea:	6078      	str	r0, [r7, #4]
 8029dec:	460b      	mov	r3, r1
 8029dee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8029df0:	687b      	ldr	r3, [r7, #4]
 8029df2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029df6:	2b01      	cmp	r3, #1
 8029df8:	d101      	bne.n	8029dfe <HAL_PCD_SetAddress+0x1a>
 8029dfa:	2302      	movs	r3, #2
 8029dfc:	e013      	b.n	8029e26 <HAL_PCD_SetAddress+0x42>
 8029dfe:	687b      	ldr	r3, [r7, #4]
 8029e00:	2201      	movs	r2, #1
 8029e02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	78fa      	ldrb	r2, [r7, #3]
 8029e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	681b      	ldr	r3, [r3, #0]
 8029e12:	78fa      	ldrb	r2, [r7, #3]
 8029e14:	4611      	mov	r1, r2
 8029e16:	4618      	mov	r0, r3
 8029e18:	f004 fe7e 	bl	802eb18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8029e1c:	687b      	ldr	r3, [r7, #4]
 8029e1e:	2200      	movs	r2, #0
 8029e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029e24:	2300      	movs	r3, #0
}
 8029e26:	4618      	mov	r0, r3
 8029e28:	3708      	adds	r7, #8
 8029e2a:	46bd      	mov	sp, r7
 8029e2c:	bd80      	pop	{r7, pc}

08029e2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8029e2e:	b580      	push	{r7, lr}
 8029e30:	b084      	sub	sp, #16
 8029e32:	af00      	add	r7, sp, #0
 8029e34:	6078      	str	r0, [r7, #4]
 8029e36:	4608      	mov	r0, r1
 8029e38:	4611      	mov	r1, r2
 8029e3a:	461a      	mov	r2, r3
 8029e3c:	4603      	mov	r3, r0
 8029e3e:	70fb      	strb	r3, [r7, #3]
 8029e40:	460b      	mov	r3, r1
 8029e42:	803b      	strh	r3, [r7, #0]
 8029e44:	4613      	mov	r3, r2
 8029e46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8029e48:	2300      	movs	r3, #0
 8029e4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029e50:	2b00      	cmp	r3, #0
 8029e52:	da0f      	bge.n	8029e74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029e54:	78fb      	ldrb	r3, [r7, #3]
 8029e56:	f003 020f 	and.w	r2, r3, #15
 8029e5a:	4613      	mov	r3, r2
 8029e5c:	00db      	lsls	r3, r3, #3
 8029e5e:	4413      	add	r3, r2
 8029e60:	009b      	lsls	r3, r3, #2
 8029e62:	3338      	adds	r3, #56	; 0x38
 8029e64:	687a      	ldr	r2, [r7, #4]
 8029e66:	4413      	add	r3, r2
 8029e68:	3304      	adds	r3, #4
 8029e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029e6c:	68fb      	ldr	r3, [r7, #12]
 8029e6e:	2201      	movs	r2, #1
 8029e70:	705a      	strb	r2, [r3, #1]
 8029e72:	e00f      	b.n	8029e94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029e74:	78fb      	ldrb	r3, [r7, #3]
 8029e76:	f003 020f 	and.w	r2, r3, #15
 8029e7a:	4613      	mov	r3, r2
 8029e7c:	00db      	lsls	r3, r3, #3
 8029e7e:	4413      	add	r3, r2
 8029e80:	009b      	lsls	r3, r3, #2
 8029e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029e86:	687a      	ldr	r2, [r7, #4]
 8029e88:	4413      	add	r3, r2
 8029e8a:	3304      	adds	r3, #4
 8029e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029e8e:	68fb      	ldr	r3, [r7, #12]
 8029e90:	2200      	movs	r2, #0
 8029e92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8029e94:	78fb      	ldrb	r3, [r7, #3]
 8029e96:	f003 030f 	and.w	r3, r3, #15
 8029e9a:	b2da      	uxtb	r2, r3
 8029e9c:	68fb      	ldr	r3, [r7, #12]
 8029e9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8029ea0:	883a      	ldrh	r2, [r7, #0]
 8029ea2:	68fb      	ldr	r3, [r7, #12]
 8029ea4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8029ea6:	68fb      	ldr	r3, [r7, #12]
 8029ea8:	78ba      	ldrb	r2, [r7, #2]
 8029eaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8029eac:	68fb      	ldr	r3, [r7, #12]
 8029eae:	785b      	ldrb	r3, [r3, #1]
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d004      	beq.n	8029ebe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8029eb4:	68fb      	ldr	r3, [r7, #12]
 8029eb6:	781b      	ldrb	r3, [r3, #0]
 8029eb8:	b29a      	uxth	r2, r3
 8029eba:	68fb      	ldr	r3, [r7, #12]
 8029ebc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8029ebe:	78bb      	ldrb	r3, [r7, #2]
 8029ec0:	2b02      	cmp	r3, #2
 8029ec2:	d102      	bne.n	8029eca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8029ec4:	68fb      	ldr	r3, [r7, #12]
 8029ec6:	2200      	movs	r2, #0
 8029ec8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8029eca:	687b      	ldr	r3, [r7, #4]
 8029ecc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029ed0:	2b01      	cmp	r3, #1
 8029ed2:	d101      	bne.n	8029ed8 <HAL_PCD_EP_Open+0xaa>
 8029ed4:	2302      	movs	r3, #2
 8029ed6:	e00e      	b.n	8029ef6 <HAL_PCD_EP_Open+0xc8>
 8029ed8:	687b      	ldr	r3, [r7, #4]
 8029eda:	2201      	movs	r2, #1
 8029edc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	681b      	ldr	r3, [r3, #0]
 8029ee4:	68f9      	ldr	r1, [r7, #12]
 8029ee6:	4618      	mov	r0, r3
 8029ee8:	f003 fefe 	bl	802dce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	2200      	movs	r2, #0
 8029ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8029ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8029ef6:	4618      	mov	r0, r3
 8029ef8:	3710      	adds	r7, #16
 8029efa:	46bd      	mov	sp, r7
 8029efc:	bd80      	pop	{r7, pc}

08029efe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029efe:	b580      	push	{r7, lr}
 8029f00:	b084      	sub	sp, #16
 8029f02:	af00      	add	r7, sp, #0
 8029f04:	6078      	str	r0, [r7, #4]
 8029f06:	460b      	mov	r3, r1
 8029f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029f0e:	2b00      	cmp	r3, #0
 8029f10:	da0f      	bge.n	8029f32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029f12:	78fb      	ldrb	r3, [r7, #3]
 8029f14:	f003 020f 	and.w	r2, r3, #15
 8029f18:	4613      	mov	r3, r2
 8029f1a:	00db      	lsls	r3, r3, #3
 8029f1c:	4413      	add	r3, r2
 8029f1e:	009b      	lsls	r3, r3, #2
 8029f20:	3338      	adds	r3, #56	; 0x38
 8029f22:	687a      	ldr	r2, [r7, #4]
 8029f24:	4413      	add	r3, r2
 8029f26:	3304      	adds	r3, #4
 8029f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029f2a:	68fb      	ldr	r3, [r7, #12]
 8029f2c:	2201      	movs	r2, #1
 8029f2e:	705a      	strb	r2, [r3, #1]
 8029f30:	e00f      	b.n	8029f52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029f32:	78fb      	ldrb	r3, [r7, #3]
 8029f34:	f003 020f 	and.w	r2, r3, #15
 8029f38:	4613      	mov	r3, r2
 8029f3a:	00db      	lsls	r3, r3, #3
 8029f3c:	4413      	add	r3, r2
 8029f3e:	009b      	lsls	r3, r3, #2
 8029f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029f44:	687a      	ldr	r2, [r7, #4]
 8029f46:	4413      	add	r3, r2
 8029f48:	3304      	adds	r3, #4
 8029f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029f4c:	68fb      	ldr	r3, [r7, #12]
 8029f4e:	2200      	movs	r2, #0
 8029f50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8029f52:	78fb      	ldrb	r3, [r7, #3]
 8029f54:	f003 030f 	and.w	r3, r3, #15
 8029f58:	b2da      	uxtb	r2, r3
 8029f5a:	68fb      	ldr	r3, [r7, #12]
 8029f5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029f5e:	687b      	ldr	r3, [r7, #4]
 8029f60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029f64:	2b01      	cmp	r3, #1
 8029f66:	d101      	bne.n	8029f6c <HAL_PCD_EP_Close+0x6e>
 8029f68:	2302      	movs	r3, #2
 8029f6a:	e00e      	b.n	8029f8a <HAL_PCD_EP_Close+0x8c>
 8029f6c:	687b      	ldr	r3, [r7, #4]
 8029f6e:	2201      	movs	r2, #1
 8029f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	681b      	ldr	r3, [r3, #0]
 8029f78:	68f9      	ldr	r1, [r7, #12]
 8029f7a:	4618      	mov	r0, r3
 8029f7c:	f003 ff3c 	bl	802ddf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029f80:	687b      	ldr	r3, [r7, #4]
 8029f82:	2200      	movs	r2, #0
 8029f84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8029f88:	2300      	movs	r3, #0
}
 8029f8a:	4618      	mov	r0, r3
 8029f8c:	3710      	adds	r7, #16
 8029f8e:	46bd      	mov	sp, r7
 8029f90:	bd80      	pop	{r7, pc}

08029f92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8029f92:	b580      	push	{r7, lr}
 8029f94:	b086      	sub	sp, #24
 8029f96:	af00      	add	r7, sp, #0
 8029f98:	60f8      	str	r0, [r7, #12]
 8029f9a:	607a      	str	r2, [r7, #4]
 8029f9c:	603b      	str	r3, [r7, #0]
 8029f9e:	460b      	mov	r3, r1
 8029fa0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029fa2:	7afb      	ldrb	r3, [r7, #11]
 8029fa4:	f003 020f 	and.w	r2, r3, #15
 8029fa8:	4613      	mov	r3, r2
 8029faa:	00db      	lsls	r3, r3, #3
 8029fac:	4413      	add	r3, r2
 8029fae:	009b      	lsls	r3, r3, #2
 8029fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029fb4:	68fa      	ldr	r2, [r7, #12]
 8029fb6:	4413      	add	r3, r2
 8029fb8:	3304      	adds	r3, #4
 8029fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8029fbc:	697b      	ldr	r3, [r7, #20]
 8029fbe:	687a      	ldr	r2, [r7, #4]
 8029fc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8029fc2:	697b      	ldr	r3, [r7, #20]
 8029fc4:	683a      	ldr	r2, [r7, #0]
 8029fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029fc8:	697b      	ldr	r3, [r7, #20]
 8029fca:	2200      	movs	r2, #0
 8029fcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8029fce:	697b      	ldr	r3, [r7, #20]
 8029fd0:	2200      	movs	r2, #0
 8029fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029fd4:	7afb      	ldrb	r3, [r7, #11]
 8029fd6:	f003 030f 	and.w	r3, r3, #15
 8029fda:	b2da      	uxtb	r2, r3
 8029fdc:	697b      	ldr	r3, [r7, #20]
 8029fde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029fe0:	68fb      	ldr	r3, [r7, #12]
 8029fe2:	691b      	ldr	r3, [r3, #16]
 8029fe4:	2b01      	cmp	r3, #1
 8029fe6:	d102      	bne.n	8029fee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029fe8:	687a      	ldr	r2, [r7, #4]
 8029fea:	697b      	ldr	r3, [r7, #20]
 8029fec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029fee:	7afb      	ldrb	r3, [r7, #11]
 8029ff0:	f003 030f 	and.w	r3, r3, #15
 8029ff4:	2b00      	cmp	r3, #0
 8029ff6:	d109      	bne.n	802a00c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029ff8:	68fb      	ldr	r3, [r7, #12]
 8029ffa:	6818      	ldr	r0, [r3, #0]
 8029ffc:	68fb      	ldr	r3, [r7, #12]
 8029ffe:	691b      	ldr	r3, [r3, #16]
 802a000:	b2db      	uxtb	r3, r3
 802a002:	461a      	mov	r2, r3
 802a004:	6979      	ldr	r1, [r7, #20]
 802a006:	f004 fa1b 	bl	802e440 <USB_EP0StartXfer>
 802a00a:	e008      	b.n	802a01e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	6818      	ldr	r0, [r3, #0]
 802a010:	68fb      	ldr	r3, [r7, #12]
 802a012:	691b      	ldr	r3, [r3, #16]
 802a014:	b2db      	uxtb	r3, r3
 802a016:	461a      	mov	r2, r3
 802a018:	6979      	ldr	r1, [r7, #20]
 802a01a:	f003 ffc9 	bl	802dfb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 802a01e:	2300      	movs	r3, #0
}
 802a020:	4618      	mov	r0, r3
 802a022:	3718      	adds	r7, #24
 802a024:	46bd      	mov	sp, r7
 802a026:	bd80      	pop	{r7, pc}

0802a028 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802a028:	b480      	push	{r7}
 802a02a:	b083      	sub	sp, #12
 802a02c:	af00      	add	r7, sp, #0
 802a02e:	6078      	str	r0, [r7, #4]
 802a030:	460b      	mov	r3, r1
 802a032:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 802a034:	78fb      	ldrb	r3, [r7, #3]
 802a036:	f003 020f 	and.w	r2, r3, #15
 802a03a:	6879      	ldr	r1, [r7, #4]
 802a03c:	4613      	mov	r3, r2
 802a03e:	00db      	lsls	r3, r3, #3
 802a040:	4413      	add	r3, r2
 802a042:	009b      	lsls	r3, r3, #2
 802a044:	440b      	add	r3, r1
 802a046:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 802a04a:	681b      	ldr	r3, [r3, #0]
}
 802a04c:	4618      	mov	r0, r3
 802a04e:	370c      	adds	r7, #12
 802a050:	46bd      	mov	sp, r7
 802a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a056:	4770      	bx	lr

0802a058 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802a058:	b580      	push	{r7, lr}
 802a05a:	b086      	sub	sp, #24
 802a05c:	af00      	add	r7, sp, #0
 802a05e:	60f8      	str	r0, [r7, #12]
 802a060:	607a      	str	r2, [r7, #4]
 802a062:	603b      	str	r3, [r7, #0]
 802a064:	460b      	mov	r3, r1
 802a066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802a068:	7afb      	ldrb	r3, [r7, #11]
 802a06a:	f003 020f 	and.w	r2, r3, #15
 802a06e:	4613      	mov	r3, r2
 802a070:	00db      	lsls	r3, r3, #3
 802a072:	4413      	add	r3, r2
 802a074:	009b      	lsls	r3, r3, #2
 802a076:	3338      	adds	r3, #56	; 0x38
 802a078:	68fa      	ldr	r2, [r7, #12]
 802a07a:	4413      	add	r3, r2
 802a07c:	3304      	adds	r3, #4
 802a07e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 802a080:	697b      	ldr	r3, [r7, #20]
 802a082:	687a      	ldr	r2, [r7, #4]
 802a084:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 802a086:	697b      	ldr	r3, [r7, #20]
 802a088:	683a      	ldr	r2, [r7, #0]
 802a08a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 802a08c:	697b      	ldr	r3, [r7, #20]
 802a08e:	2200      	movs	r2, #0
 802a090:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 802a092:	697b      	ldr	r3, [r7, #20]
 802a094:	2201      	movs	r2, #1
 802a096:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 802a098:	7afb      	ldrb	r3, [r7, #11]
 802a09a:	f003 030f 	and.w	r3, r3, #15
 802a09e:	b2da      	uxtb	r2, r3
 802a0a0:	697b      	ldr	r3, [r7, #20]
 802a0a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 802a0a4:	68fb      	ldr	r3, [r7, #12]
 802a0a6:	691b      	ldr	r3, [r3, #16]
 802a0a8:	2b01      	cmp	r3, #1
 802a0aa:	d102      	bne.n	802a0b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 802a0ac:	687a      	ldr	r2, [r7, #4]
 802a0ae:	697b      	ldr	r3, [r7, #20]
 802a0b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802a0b2:	7afb      	ldrb	r3, [r7, #11]
 802a0b4:	f003 030f 	and.w	r3, r3, #15
 802a0b8:	2b00      	cmp	r3, #0
 802a0ba:	d109      	bne.n	802a0d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802a0bc:	68fb      	ldr	r3, [r7, #12]
 802a0be:	6818      	ldr	r0, [r3, #0]
 802a0c0:	68fb      	ldr	r3, [r7, #12]
 802a0c2:	691b      	ldr	r3, [r3, #16]
 802a0c4:	b2db      	uxtb	r3, r3
 802a0c6:	461a      	mov	r2, r3
 802a0c8:	6979      	ldr	r1, [r7, #20]
 802a0ca:	f004 f9b9 	bl	802e440 <USB_EP0StartXfer>
 802a0ce:	e008      	b.n	802a0e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802a0d0:	68fb      	ldr	r3, [r7, #12]
 802a0d2:	6818      	ldr	r0, [r3, #0]
 802a0d4:	68fb      	ldr	r3, [r7, #12]
 802a0d6:	691b      	ldr	r3, [r3, #16]
 802a0d8:	b2db      	uxtb	r3, r3
 802a0da:	461a      	mov	r2, r3
 802a0dc:	6979      	ldr	r1, [r7, #20]
 802a0de:	f003 ff67 	bl	802dfb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 802a0e2:	2300      	movs	r3, #0
}
 802a0e4:	4618      	mov	r0, r3
 802a0e6:	3718      	adds	r7, #24
 802a0e8:	46bd      	mov	sp, r7
 802a0ea:	bd80      	pop	{r7, pc}

0802a0ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802a0ec:	b580      	push	{r7, lr}
 802a0ee:	b084      	sub	sp, #16
 802a0f0:	af00      	add	r7, sp, #0
 802a0f2:	6078      	str	r0, [r7, #4]
 802a0f4:	460b      	mov	r3, r1
 802a0f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 802a0f8:	78fb      	ldrb	r3, [r7, #3]
 802a0fa:	f003 020f 	and.w	r2, r3, #15
 802a0fe:	687b      	ldr	r3, [r7, #4]
 802a100:	685b      	ldr	r3, [r3, #4]
 802a102:	429a      	cmp	r2, r3
 802a104:	d901      	bls.n	802a10a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 802a106:	2301      	movs	r3, #1
 802a108:	e050      	b.n	802a1ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802a10a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a10e:	2b00      	cmp	r3, #0
 802a110:	da0f      	bge.n	802a132 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802a112:	78fb      	ldrb	r3, [r7, #3]
 802a114:	f003 020f 	and.w	r2, r3, #15
 802a118:	4613      	mov	r3, r2
 802a11a:	00db      	lsls	r3, r3, #3
 802a11c:	4413      	add	r3, r2
 802a11e:	009b      	lsls	r3, r3, #2
 802a120:	3338      	adds	r3, #56	; 0x38
 802a122:	687a      	ldr	r2, [r7, #4]
 802a124:	4413      	add	r3, r2
 802a126:	3304      	adds	r3, #4
 802a128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802a12a:	68fb      	ldr	r3, [r7, #12]
 802a12c:	2201      	movs	r2, #1
 802a12e:	705a      	strb	r2, [r3, #1]
 802a130:	e00d      	b.n	802a14e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 802a132:	78fa      	ldrb	r2, [r7, #3]
 802a134:	4613      	mov	r3, r2
 802a136:	00db      	lsls	r3, r3, #3
 802a138:	4413      	add	r3, r2
 802a13a:	009b      	lsls	r3, r3, #2
 802a13c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a140:	687a      	ldr	r2, [r7, #4]
 802a142:	4413      	add	r3, r2
 802a144:	3304      	adds	r3, #4
 802a146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802a148:	68fb      	ldr	r3, [r7, #12]
 802a14a:	2200      	movs	r2, #0
 802a14c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 802a14e:	68fb      	ldr	r3, [r7, #12]
 802a150:	2201      	movs	r2, #1
 802a152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802a154:	78fb      	ldrb	r3, [r7, #3]
 802a156:	f003 030f 	and.w	r3, r3, #15
 802a15a:	b2da      	uxtb	r2, r3
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802a166:	2b01      	cmp	r3, #1
 802a168:	d101      	bne.n	802a16e <HAL_PCD_EP_SetStall+0x82>
 802a16a:	2302      	movs	r3, #2
 802a16c:	e01e      	b.n	802a1ac <HAL_PCD_EP_SetStall+0xc0>
 802a16e:	687b      	ldr	r3, [r7, #4]
 802a170:	2201      	movs	r2, #1
 802a172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 802a176:	687b      	ldr	r3, [r7, #4]
 802a178:	681b      	ldr	r3, [r3, #0]
 802a17a:	68f9      	ldr	r1, [r7, #12]
 802a17c:	4618      	mov	r0, r3
 802a17e:	f004 fbf7 	bl	802e970 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802a182:	78fb      	ldrb	r3, [r7, #3]
 802a184:	f003 030f 	and.w	r3, r3, #15
 802a188:	2b00      	cmp	r3, #0
 802a18a:	d10a      	bne.n	802a1a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 802a18c:	687b      	ldr	r3, [r7, #4]
 802a18e:	6818      	ldr	r0, [r3, #0]
 802a190:	687b      	ldr	r3, [r7, #4]
 802a192:	691b      	ldr	r3, [r3, #16]
 802a194:	b2d9      	uxtb	r1, r3
 802a196:	687b      	ldr	r3, [r7, #4]
 802a198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a19c:	461a      	mov	r2, r3
 802a19e:	f004 fde7 	bl	802ed70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	2200      	movs	r2, #0
 802a1a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802a1aa:	2300      	movs	r3, #0
}
 802a1ac:	4618      	mov	r0, r3
 802a1ae:	3710      	adds	r7, #16
 802a1b0:	46bd      	mov	sp, r7
 802a1b2:	bd80      	pop	{r7, pc}

0802a1b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802a1b4:	b580      	push	{r7, lr}
 802a1b6:	b084      	sub	sp, #16
 802a1b8:	af00      	add	r7, sp, #0
 802a1ba:	6078      	str	r0, [r7, #4]
 802a1bc:	460b      	mov	r3, r1
 802a1be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 802a1c0:	78fb      	ldrb	r3, [r7, #3]
 802a1c2:	f003 020f 	and.w	r2, r3, #15
 802a1c6:	687b      	ldr	r3, [r7, #4]
 802a1c8:	685b      	ldr	r3, [r3, #4]
 802a1ca:	429a      	cmp	r2, r3
 802a1cc:	d901      	bls.n	802a1d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 802a1ce:	2301      	movs	r3, #1
 802a1d0:	e042      	b.n	802a258 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802a1d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a1d6:	2b00      	cmp	r3, #0
 802a1d8:	da0f      	bge.n	802a1fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802a1da:	78fb      	ldrb	r3, [r7, #3]
 802a1dc:	f003 020f 	and.w	r2, r3, #15
 802a1e0:	4613      	mov	r3, r2
 802a1e2:	00db      	lsls	r3, r3, #3
 802a1e4:	4413      	add	r3, r2
 802a1e6:	009b      	lsls	r3, r3, #2
 802a1e8:	3338      	adds	r3, #56	; 0x38
 802a1ea:	687a      	ldr	r2, [r7, #4]
 802a1ec:	4413      	add	r3, r2
 802a1ee:	3304      	adds	r3, #4
 802a1f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802a1f2:	68fb      	ldr	r3, [r7, #12]
 802a1f4:	2201      	movs	r2, #1
 802a1f6:	705a      	strb	r2, [r3, #1]
 802a1f8:	e00f      	b.n	802a21a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802a1fa:	78fb      	ldrb	r3, [r7, #3]
 802a1fc:	f003 020f 	and.w	r2, r3, #15
 802a200:	4613      	mov	r3, r2
 802a202:	00db      	lsls	r3, r3, #3
 802a204:	4413      	add	r3, r2
 802a206:	009b      	lsls	r3, r3, #2
 802a208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a20c:	687a      	ldr	r2, [r7, #4]
 802a20e:	4413      	add	r3, r2
 802a210:	3304      	adds	r3, #4
 802a212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802a214:	68fb      	ldr	r3, [r7, #12]
 802a216:	2200      	movs	r2, #0
 802a218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 802a21a:	68fb      	ldr	r3, [r7, #12]
 802a21c:	2200      	movs	r2, #0
 802a21e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802a220:	78fb      	ldrb	r3, [r7, #3]
 802a222:	f003 030f 	and.w	r3, r3, #15
 802a226:	b2da      	uxtb	r2, r3
 802a228:	68fb      	ldr	r3, [r7, #12]
 802a22a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802a232:	2b01      	cmp	r3, #1
 802a234:	d101      	bne.n	802a23a <HAL_PCD_EP_ClrStall+0x86>
 802a236:	2302      	movs	r3, #2
 802a238:	e00e      	b.n	802a258 <HAL_PCD_EP_ClrStall+0xa4>
 802a23a:	687b      	ldr	r3, [r7, #4]
 802a23c:	2201      	movs	r2, #1
 802a23e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 802a242:	687b      	ldr	r3, [r7, #4]
 802a244:	681b      	ldr	r3, [r3, #0]
 802a246:	68f9      	ldr	r1, [r7, #12]
 802a248:	4618      	mov	r0, r3
 802a24a:	f004 fbff 	bl	802ea4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 802a24e:	687b      	ldr	r3, [r7, #4]
 802a250:	2200      	movs	r2, #0
 802a252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802a256:	2300      	movs	r3, #0
}
 802a258:	4618      	mov	r0, r3
 802a25a:	3710      	adds	r7, #16
 802a25c:	46bd      	mov	sp, r7
 802a25e:	bd80      	pop	{r7, pc}

0802a260 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802a260:	b580      	push	{r7, lr}
 802a262:	b084      	sub	sp, #16
 802a264:	af00      	add	r7, sp, #0
 802a266:	6078      	str	r0, [r7, #4]
 802a268:	460b      	mov	r3, r1
 802a26a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 802a26c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a270:	2b00      	cmp	r3, #0
 802a272:	da0c      	bge.n	802a28e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802a274:	78fb      	ldrb	r3, [r7, #3]
 802a276:	f003 020f 	and.w	r2, r3, #15
 802a27a:	4613      	mov	r3, r2
 802a27c:	00db      	lsls	r3, r3, #3
 802a27e:	4413      	add	r3, r2
 802a280:	009b      	lsls	r3, r3, #2
 802a282:	3338      	adds	r3, #56	; 0x38
 802a284:	687a      	ldr	r2, [r7, #4]
 802a286:	4413      	add	r3, r2
 802a288:	3304      	adds	r3, #4
 802a28a:	60fb      	str	r3, [r7, #12]
 802a28c:	e00c      	b.n	802a2a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802a28e:	78fb      	ldrb	r3, [r7, #3]
 802a290:	f003 020f 	and.w	r2, r3, #15
 802a294:	4613      	mov	r3, r2
 802a296:	00db      	lsls	r3, r3, #3
 802a298:	4413      	add	r3, r2
 802a29a:	009b      	lsls	r3, r3, #2
 802a29c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a2a0:	687a      	ldr	r2, [r7, #4]
 802a2a2:	4413      	add	r3, r2
 802a2a4:	3304      	adds	r3, #4
 802a2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 802a2a8:	687b      	ldr	r3, [r7, #4]
 802a2aa:	681b      	ldr	r3, [r3, #0]
 802a2ac:	68f9      	ldr	r1, [r7, #12]
 802a2ae:	4618      	mov	r0, r3
 802a2b0:	f004 fa1e 	bl	802e6f0 <USB_EPStopXfer>
 802a2b4:	4603      	mov	r3, r0
 802a2b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 802a2b8:	7afb      	ldrb	r3, [r7, #11]
}
 802a2ba:	4618      	mov	r0, r3
 802a2bc:	3710      	adds	r7, #16
 802a2be:	46bd      	mov	sp, r7
 802a2c0:	bd80      	pop	{r7, pc}

0802a2c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a2c2:	b580      	push	{r7, lr}
 802a2c4:	b08a      	sub	sp, #40	; 0x28
 802a2c6:	af02      	add	r7, sp, #8
 802a2c8:	6078      	str	r0, [r7, #4]
 802a2ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a2cc:	687b      	ldr	r3, [r7, #4]
 802a2ce:	681b      	ldr	r3, [r3, #0]
 802a2d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a2d2:	697b      	ldr	r3, [r7, #20]
 802a2d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 802a2d6:	683a      	ldr	r2, [r7, #0]
 802a2d8:	4613      	mov	r3, r2
 802a2da:	00db      	lsls	r3, r3, #3
 802a2dc:	4413      	add	r3, r2
 802a2de:	009b      	lsls	r3, r3, #2
 802a2e0:	3338      	adds	r3, #56	; 0x38
 802a2e2:	687a      	ldr	r2, [r7, #4]
 802a2e4:	4413      	add	r3, r2
 802a2e6:	3304      	adds	r3, #4
 802a2e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 802a2ea:	68fb      	ldr	r3, [r7, #12]
 802a2ec:	6a1a      	ldr	r2, [r3, #32]
 802a2ee:	68fb      	ldr	r3, [r7, #12]
 802a2f0:	699b      	ldr	r3, [r3, #24]
 802a2f2:	429a      	cmp	r2, r3
 802a2f4:	d901      	bls.n	802a2fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 802a2f6:	2301      	movs	r3, #1
 802a2f8:	e06c      	b.n	802a3d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 802a2fa:	68fb      	ldr	r3, [r7, #12]
 802a2fc:	699a      	ldr	r2, [r3, #24]
 802a2fe:	68fb      	ldr	r3, [r7, #12]
 802a300:	6a1b      	ldr	r3, [r3, #32]
 802a302:	1ad3      	subs	r3, r2, r3
 802a304:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 802a306:	68fb      	ldr	r3, [r7, #12]
 802a308:	68db      	ldr	r3, [r3, #12]
 802a30a:	69fa      	ldr	r2, [r7, #28]
 802a30c:	429a      	cmp	r2, r3
 802a30e:	d902      	bls.n	802a316 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 802a310:	68fb      	ldr	r3, [r7, #12]
 802a312:	68db      	ldr	r3, [r3, #12]
 802a314:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 802a316:	69fb      	ldr	r3, [r7, #28]
 802a318:	3303      	adds	r3, #3
 802a31a:	089b      	lsrs	r3, r3, #2
 802a31c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a31e:	e02b      	b.n	802a378 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 802a320:	68fb      	ldr	r3, [r7, #12]
 802a322:	699a      	ldr	r2, [r3, #24]
 802a324:	68fb      	ldr	r3, [r7, #12]
 802a326:	6a1b      	ldr	r3, [r3, #32]
 802a328:	1ad3      	subs	r3, r2, r3
 802a32a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 802a32c:	68fb      	ldr	r3, [r7, #12]
 802a32e:	68db      	ldr	r3, [r3, #12]
 802a330:	69fa      	ldr	r2, [r7, #28]
 802a332:	429a      	cmp	r2, r3
 802a334:	d902      	bls.n	802a33c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 802a336:	68fb      	ldr	r3, [r7, #12]
 802a338:	68db      	ldr	r3, [r3, #12]
 802a33a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 802a33c:	69fb      	ldr	r3, [r7, #28]
 802a33e:	3303      	adds	r3, #3
 802a340:	089b      	lsrs	r3, r3, #2
 802a342:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 802a344:	68fb      	ldr	r3, [r7, #12]
 802a346:	6919      	ldr	r1, [r3, #16]
 802a348:	683b      	ldr	r3, [r7, #0]
 802a34a:	b2da      	uxtb	r2, r3
 802a34c:	69fb      	ldr	r3, [r7, #28]
 802a34e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 802a350:	687b      	ldr	r3, [r7, #4]
 802a352:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 802a354:	b2db      	uxtb	r3, r3
 802a356:	9300      	str	r3, [sp, #0]
 802a358:	4603      	mov	r3, r0
 802a35a:	6978      	ldr	r0, [r7, #20]
 802a35c:	f004 fa72 	bl	802e844 <USB_WritePacket>

    ep->xfer_buff  += len;
 802a360:	68fb      	ldr	r3, [r7, #12]
 802a362:	691a      	ldr	r2, [r3, #16]
 802a364:	69fb      	ldr	r3, [r7, #28]
 802a366:	441a      	add	r2, r3
 802a368:	68fb      	ldr	r3, [r7, #12]
 802a36a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 802a36c:	68fb      	ldr	r3, [r7, #12]
 802a36e:	6a1a      	ldr	r2, [r3, #32]
 802a370:	69fb      	ldr	r3, [r7, #28]
 802a372:	441a      	add	r2, r3
 802a374:	68fb      	ldr	r3, [r7, #12]
 802a376:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a378:	683b      	ldr	r3, [r7, #0]
 802a37a:	015a      	lsls	r2, r3, #5
 802a37c:	693b      	ldr	r3, [r7, #16]
 802a37e:	4413      	add	r3, r2
 802a380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802a384:	699b      	ldr	r3, [r3, #24]
 802a386:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802a388:	69ba      	ldr	r2, [r7, #24]
 802a38a:	429a      	cmp	r2, r3
 802a38c:	d809      	bhi.n	802a3a2 <PCD_WriteEmptyTxFifo+0xe0>
 802a38e:	68fb      	ldr	r3, [r7, #12]
 802a390:	6a1a      	ldr	r2, [r3, #32]
 802a392:	68fb      	ldr	r3, [r7, #12]
 802a394:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 802a396:	429a      	cmp	r2, r3
 802a398:	d203      	bcs.n	802a3a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 802a39a:	68fb      	ldr	r3, [r7, #12]
 802a39c:	699b      	ldr	r3, [r3, #24]
 802a39e:	2b00      	cmp	r3, #0
 802a3a0:	d1be      	bne.n	802a320 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 802a3a2:	68fb      	ldr	r3, [r7, #12]
 802a3a4:	699a      	ldr	r2, [r3, #24]
 802a3a6:	68fb      	ldr	r3, [r7, #12]
 802a3a8:	6a1b      	ldr	r3, [r3, #32]
 802a3aa:	429a      	cmp	r2, r3
 802a3ac:	d811      	bhi.n	802a3d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802a3ae:	683b      	ldr	r3, [r7, #0]
 802a3b0:	f003 030f 	and.w	r3, r3, #15
 802a3b4:	2201      	movs	r2, #1
 802a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 802a3ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802a3bc:	693b      	ldr	r3, [r7, #16]
 802a3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802a3c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802a3c4:	68bb      	ldr	r3, [r7, #8]
 802a3c6:	43db      	mvns	r3, r3
 802a3c8:	6939      	ldr	r1, [r7, #16]
 802a3ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802a3ce:	4013      	ands	r3, r2
 802a3d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 802a3d2:	2300      	movs	r3, #0
}
 802a3d4:	4618      	mov	r0, r3
 802a3d6:	3720      	adds	r7, #32
 802a3d8:	46bd      	mov	sp, r7
 802a3da:	bd80      	pop	{r7, pc}

0802a3dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a3dc:	b580      	push	{r7, lr}
 802a3de:	b088      	sub	sp, #32
 802a3e0:	af00      	add	r7, sp, #0
 802a3e2:	6078      	str	r0, [r7, #4]
 802a3e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a3e6:	687b      	ldr	r3, [r7, #4]
 802a3e8:	681b      	ldr	r3, [r3, #0]
 802a3ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a3ec:	69fb      	ldr	r3, [r7, #28]
 802a3ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802a3f0:	69fb      	ldr	r3, [r7, #28]
 802a3f2:	333c      	adds	r3, #60	; 0x3c
 802a3f4:	3304      	adds	r3, #4
 802a3f6:	681b      	ldr	r3, [r3, #0]
 802a3f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 802a3fa:	683b      	ldr	r3, [r7, #0]
 802a3fc:	015a      	lsls	r2, r3, #5
 802a3fe:	69bb      	ldr	r3, [r7, #24]
 802a400:	4413      	add	r3, r2
 802a402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a406:	689b      	ldr	r3, [r3, #8]
 802a408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 802a40a:	687b      	ldr	r3, [r7, #4]
 802a40c:	691b      	ldr	r3, [r3, #16]
 802a40e:	2b01      	cmp	r3, #1
 802a410:	d17b      	bne.n	802a50a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 802a412:	693b      	ldr	r3, [r7, #16]
 802a414:	f003 0308 	and.w	r3, r3, #8
 802a418:	2b00      	cmp	r3, #0
 802a41a:	d015      	beq.n	802a448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a41c:	697b      	ldr	r3, [r7, #20]
 802a41e:	4a61      	ldr	r2, [pc, #388]	; (802a5a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802a420:	4293      	cmp	r3, r2
 802a422:	f240 80b9 	bls.w	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a426:	693b      	ldr	r3, [r7, #16]
 802a428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a42c:	2b00      	cmp	r3, #0
 802a42e:	f000 80b3 	beq.w	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a432:	683b      	ldr	r3, [r7, #0]
 802a434:	015a      	lsls	r2, r3, #5
 802a436:	69bb      	ldr	r3, [r7, #24]
 802a438:	4413      	add	r3, r2
 802a43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a43e:	461a      	mov	r2, r3
 802a440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a444:	6093      	str	r3, [r2, #8]
 802a446:	e0a7      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 802a448:	693b      	ldr	r3, [r7, #16]
 802a44a:	f003 0320 	and.w	r3, r3, #32
 802a44e:	2b00      	cmp	r3, #0
 802a450:	d009      	beq.n	802a466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802a452:	683b      	ldr	r3, [r7, #0]
 802a454:	015a      	lsls	r2, r3, #5
 802a456:	69bb      	ldr	r3, [r7, #24]
 802a458:	4413      	add	r3, r2
 802a45a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a45e:	461a      	mov	r2, r3
 802a460:	2320      	movs	r3, #32
 802a462:	6093      	str	r3, [r2, #8]
 802a464:	e098      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 802a466:	693b      	ldr	r3, [r7, #16]
 802a468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802a46c:	2b00      	cmp	r3, #0
 802a46e:	f040 8093 	bne.w	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a472:	697b      	ldr	r3, [r7, #20]
 802a474:	4a4b      	ldr	r2, [pc, #300]	; (802a5a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 802a476:	4293      	cmp	r3, r2
 802a478:	d90f      	bls.n	802a49a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a47a:	693b      	ldr	r3, [r7, #16]
 802a47c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a480:	2b00      	cmp	r3, #0
 802a482:	d00a      	beq.n	802a49a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a484:	683b      	ldr	r3, [r7, #0]
 802a486:	015a      	lsls	r2, r3, #5
 802a488:	69bb      	ldr	r3, [r7, #24]
 802a48a:	4413      	add	r3, r2
 802a48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a490:	461a      	mov	r2, r3
 802a492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a496:	6093      	str	r3, [r2, #8]
 802a498:	e07e      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 802a49a:	683a      	ldr	r2, [r7, #0]
 802a49c:	4613      	mov	r3, r2
 802a49e:	00db      	lsls	r3, r3, #3
 802a4a0:	4413      	add	r3, r2
 802a4a2:	009b      	lsls	r3, r3, #2
 802a4a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802a4a8:	687a      	ldr	r2, [r7, #4]
 802a4aa:	4413      	add	r3, r2
 802a4ac:	3304      	adds	r3, #4
 802a4ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 802a4b0:	68fb      	ldr	r3, [r7, #12]
 802a4b2:	69da      	ldr	r2, [r3, #28]
 802a4b4:	683b      	ldr	r3, [r7, #0]
 802a4b6:	0159      	lsls	r1, r3, #5
 802a4b8:	69bb      	ldr	r3, [r7, #24]
 802a4ba:	440b      	add	r3, r1
 802a4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a4c0:	691b      	ldr	r3, [r3, #16]
 802a4c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802a4c6:	1ad2      	subs	r2, r2, r3
 802a4c8:	68fb      	ldr	r3, [r7, #12]
 802a4ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 802a4cc:	683b      	ldr	r3, [r7, #0]
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	d114      	bne.n	802a4fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 802a4d2:	68fb      	ldr	r3, [r7, #12]
 802a4d4:	699b      	ldr	r3, [r3, #24]
 802a4d6:	2b00      	cmp	r3, #0
 802a4d8:	d109      	bne.n	802a4ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802a4da:	687b      	ldr	r3, [r7, #4]
 802a4dc:	6818      	ldr	r0, [r3, #0]
 802a4de:	687b      	ldr	r3, [r7, #4]
 802a4e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a4e4:	461a      	mov	r2, r3
 802a4e6:	2101      	movs	r1, #1
 802a4e8:	f004 fc42 	bl	802ed70 <USB_EP0_OutStart>
 802a4ec:	e006      	b.n	802a4fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 802a4ee:	68fb      	ldr	r3, [r7, #12]
 802a4f0:	691a      	ldr	r2, [r3, #16]
 802a4f2:	68fb      	ldr	r3, [r7, #12]
 802a4f4:	6a1b      	ldr	r3, [r3, #32]
 802a4f6:	441a      	add	r2, r3
 802a4f8:	68fb      	ldr	r3, [r7, #12]
 802a4fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a4fc:	683b      	ldr	r3, [r7, #0]
 802a4fe:	b2db      	uxtb	r3, r3
 802a500:	4619      	mov	r1, r3
 802a502:	6878      	ldr	r0, [r7, #4]
 802a504:	f007 f912 	bl	803172c <HAL_PCD_DataOutStageCallback>
 802a508:	e046      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 802a50a:	697b      	ldr	r3, [r7, #20]
 802a50c:	4a26      	ldr	r2, [pc, #152]	; (802a5a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 802a50e:	4293      	cmp	r3, r2
 802a510:	d124      	bne.n	802a55c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 802a512:	693b      	ldr	r3, [r7, #16]
 802a514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802a518:	2b00      	cmp	r3, #0
 802a51a:	d00a      	beq.n	802a532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a51c:	683b      	ldr	r3, [r7, #0]
 802a51e:	015a      	lsls	r2, r3, #5
 802a520:	69bb      	ldr	r3, [r7, #24]
 802a522:	4413      	add	r3, r2
 802a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a528:	461a      	mov	r2, r3
 802a52a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a52e:	6093      	str	r3, [r2, #8]
 802a530:	e032      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802a532:	693b      	ldr	r3, [r7, #16]
 802a534:	f003 0320 	and.w	r3, r3, #32
 802a538:	2b00      	cmp	r3, #0
 802a53a:	d008      	beq.n	802a54e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802a53c:	683b      	ldr	r3, [r7, #0]
 802a53e:	015a      	lsls	r2, r3, #5
 802a540:	69bb      	ldr	r3, [r7, #24]
 802a542:	4413      	add	r3, r2
 802a544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a548:	461a      	mov	r2, r3
 802a54a:	2320      	movs	r3, #32
 802a54c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a54e:	683b      	ldr	r3, [r7, #0]
 802a550:	b2db      	uxtb	r3, r3
 802a552:	4619      	mov	r1, r3
 802a554:	6878      	ldr	r0, [r7, #4]
 802a556:	f007 f8e9 	bl	803172c <HAL_PCD_DataOutStageCallback>
 802a55a:	e01d      	b.n	802a598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 802a55c:	683b      	ldr	r3, [r7, #0]
 802a55e:	2b00      	cmp	r3, #0
 802a560:	d114      	bne.n	802a58c <PCD_EP_OutXfrComplete_int+0x1b0>
 802a562:	6879      	ldr	r1, [r7, #4]
 802a564:	683a      	ldr	r2, [r7, #0]
 802a566:	4613      	mov	r3, r2
 802a568:	00db      	lsls	r3, r3, #3
 802a56a:	4413      	add	r3, r2
 802a56c:	009b      	lsls	r3, r3, #2
 802a56e:	440b      	add	r3, r1
 802a570:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802a574:	681b      	ldr	r3, [r3, #0]
 802a576:	2b00      	cmp	r3, #0
 802a578:	d108      	bne.n	802a58c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 802a57a:	687b      	ldr	r3, [r7, #4]
 802a57c:	6818      	ldr	r0, [r3, #0]
 802a57e:	687b      	ldr	r3, [r7, #4]
 802a580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a584:	461a      	mov	r2, r3
 802a586:	2100      	movs	r1, #0
 802a588:	f004 fbf2 	bl	802ed70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 802a58c:	683b      	ldr	r3, [r7, #0]
 802a58e:	b2db      	uxtb	r3, r3
 802a590:	4619      	mov	r1, r3
 802a592:	6878      	ldr	r0, [r7, #4]
 802a594:	f007 f8ca 	bl	803172c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 802a598:	2300      	movs	r3, #0
}
 802a59a:	4618      	mov	r0, r3
 802a59c:	3720      	adds	r7, #32
 802a59e:	46bd      	mov	sp, r7
 802a5a0:	bd80      	pop	{r7, pc}
 802a5a2:	bf00      	nop
 802a5a4:	4f54300a 	.word	0x4f54300a
 802a5a8:	4f54310a 	.word	0x4f54310a

0802a5ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 802a5ac:	b580      	push	{r7, lr}
 802a5ae:	b086      	sub	sp, #24
 802a5b0:	af00      	add	r7, sp, #0
 802a5b2:	6078      	str	r0, [r7, #4]
 802a5b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802a5b6:	687b      	ldr	r3, [r7, #4]
 802a5b8:	681b      	ldr	r3, [r3, #0]
 802a5ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a5bc:	697b      	ldr	r3, [r7, #20]
 802a5be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802a5c0:	697b      	ldr	r3, [r7, #20]
 802a5c2:	333c      	adds	r3, #60	; 0x3c
 802a5c4:	3304      	adds	r3, #4
 802a5c6:	681b      	ldr	r3, [r3, #0]
 802a5c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 802a5ca:	683b      	ldr	r3, [r7, #0]
 802a5cc:	015a      	lsls	r2, r3, #5
 802a5ce:	693b      	ldr	r3, [r7, #16]
 802a5d0:	4413      	add	r3, r2
 802a5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a5d6:	689b      	ldr	r3, [r3, #8]
 802a5d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a5da:	68fb      	ldr	r3, [r7, #12]
 802a5dc:	4a15      	ldr	r2, [pc, #84]	; (802a634 <PCD_EP_OutSetupPacket_int+0x88>)
 802a5de:	4293      	cmp	r3, r2
 802a5e0:	d90e      	bls.n	802a600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 802a5e2:	68bb      	ldr	r3, [r7, #8]
 802a5e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 802a5e8:	2b00      	cmp	r3, #0
 802a5ea:	d009      	beq.n	802a600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 802a5ec:	683b      	ldr	r3, [r7, #0]
 802a5ee:	015a      	lsls	r2, r3, #5
 802a5f0:	693b      	ldr	r3, [r7, #16]
 802a5f2:	4413      	add	r3, r2
 802a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802a5f8:	461a      	mov	r2, r3
 802a5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a5fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 802a600:	6878      	ldr	r0, [r7, #4]
 802a602:	f007 f881 	bl	8031708 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 802a606:	68fb      	ldr	r3, [r7, #12]
 802a608:	4a0a      	ldr	r2, [pc, #40]	; (802a634 <PCD_EP_OutSetupPacket_int+0x88>)
 802a60a:	4293      	cmp	r3, r2
 802a60c:	d90c      	bls.n	802a628 <PCD_EP_OutSetupPacket_int+0x7c>
 802a60e:	687b      	ldr	r3, [r7, #4]
 802a610:	691b      	ldr	r3, [r3, #16]
 802a612:	2b01      	cmp	r3, #1
 802a614:	d108      	bne.n	802a628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	6818      	ldr	r0, [r3, #0]
 802a61a:	687b      	ldr	r3, [r7, #4]
 802a61c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802a620:	461a      	mov	r2, r3
 802a622:	2101      	movs	r1, #1
 802a624:	f004 fba4 	bl	802ed70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 802a628:	2300      	movs	r3, #0
}
 802a62a:	4618      	mov	r0, r3
 802a62c:	3718      	adds	r7, #24
 802a62e:	46bd      	mov	sp, r7
 802a630:	bd80      	pop	{r7, pc}
 802a632:	bf00      	nop
 802a634:	4f54300a 	.word	0x4f54300a

0802a638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 802a638:	b480      	push	{r7}
 802a63a:	b085      	sub	sp, #20
 802a63c:	af00      	add	r7, sp, #0
 802a63e:	6078      	str	r0, [r7, #4]
 802a640:	460b      	mov	r3, r1
 802a642:	70fb      	strb	r3, [r7, #3]
 802a644:	4613      	mov	r3, r2
 802a646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 802a648:	687b      	ldr	r3, [r7, #4]
 802a64a:	681b      	ldr	r3, [r3, #0]
 802a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a64e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 802a650:	78fb      	ldrb	r3, [r7, #3]
 802a652:	2b00      	cmp	r3, #0
 802a654:	d107      	bne.n	802a666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 802a656:	883b      	ldrh	r3, [r7, #0]
 802a658:	0419      	lsls	r1, r3, #16
 802a65a:	687b      	ldr	r3, [r7, #4]
 802a65c:	681b      	ldr	r3, [r3, #0]
 802a65e:	68ba      	ldr	r2, [r7, #8]
 802a660:	430a      	orrs	r2, r1
 802a662:	629a      	str	r2, [r3, #40]	; 0x28
 802a664:	e028      	b.n	802a6b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 802a666:	687b      	ldr	r3, [r7, #4]
 802a668:	681b      	ldr	r3, [r3, #0]
 802a66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a66c:	0c1b      	lsrs	r3, r3, #16
 802a66e:	68ba      	ldr	r2, [r7, #8]
 802a670:	4413      	add	r3, r2
 802a672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 802a674:	2300      	movs	r3, #0
 802a676:	73fb      	strb	r3, [r7, #15]
 802a678:	e00d      	b.n	802a696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 802a67a:	687b      	ldr	r3, [r7, #4]
 802a67c:	681a      	ldr	r2, [r3, #0]
 802a67e:	7bfb      	ldrb	r3, [r7, #15]
 802a680:	3340      	adds	r3, #64	; 0x40
 802a682:	009b      	lsls	r3, r3, #2
 802a684:	4413      	add	r3, r2
 802a686:	685b      	ldr	r3, [r3, #4]
 802a688:	0c1b      	lsrs	r3, r3, #16
 802a68a:	68ba      	ldr	r2, [r7, #8]
 802a68c:	4413      	add	r3, r2
 802a68e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 802a690:	7bfb      	ldrb	r3, [r7, #15]
 802a692:	3301      	adds	r3, #1
 802a694:	73fb      	strb	r3, [r7, #15]
 802a696:	7bfa      	ldrb	r2, [r7, #15]
 802a698:	78fb      	ldrb	r3, [r7, #3]
 802a69a:	3b01      	subs	r3, #1
 802a69c:	429a      	cmp	r2, r3
 802a69e:	d3ec      	bcc.n	802a67a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 802a6a0:	883b      	ldrh	r3, [r7, #0]
 802a6a2:	0418      	lsls	r0, r3, #16
 802a6a4:	687b      	ldr	r3, [r7, #4]
 802a6a6:	6819      	ldr	r1, [r3, #0]
 802a6a8:	78fb      	ldrb	r3, [r7, #3]
 802a6aa:	3b01      	subs	r3, #1
 802a6ac:	68ba      	ldr	r2, [r7, #8]
 802a6ae:	4302      	orrs	r2, r0
 802a6b0:	3340      	adds	r3, #64	; 0x40
 802a6b2:	009b      	lsls	r3, r3, #2
 802a6b4:	440b      	add	r3, r1
 802a6b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 802a6b8:	2300      	movs	r3, #0
}
 802a6ba:	4618      	mov	r0, r3
 802a6bc:	3714      	adds	r7, #20
 802a6be:	46bd      	mov	sp, r7
 802a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6c4:	4770      	bx	lr

0802a6c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 802a6c6:	b480      	push	{r7}
 802a6c8:	b083      	sub	sp, #12
 802a6ca:	af00      	add	r7, sp, #0
 802a6cc:	6078      	str	r0, [r7, #4]
 802a6ce:	460b      	mov	r3, r1
 802a6d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	681b      	ldr	r3, [r3, #0]
 802a6d6:	887a      	ldrh	r2, [r7, #2]
 802a6d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 802a6da:	2300      	movs	r3, #0
}
 802a6dc:	4618      	mov	r0, r3
 802a6de:	370c      	adds	r7, #12
 802a6e0:	46bd      	mov	sp, r7
 802a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6e6:	4770      	bx	lr

0802a6e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 802a6e8:	b480      	push	{r7}
 802a6ea:	b083      	sub	sp, #12
 802a6ec:	af00      	add	r7, sp, #0
 802a6ee:	6078      	str	r0, [r7, #4]
 802a6f0:	460b      	mov	r3, r1
 802a6f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 802a6f4:	bf00      	nop
 802a6f6:	370c      	adds	r7, #12
 802a6f8:	46bd      	mov	sp, r7
 802a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6fe:	4770      	bx	lr

0802a700 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 802a700:	b580      	push	{r7, lr}
 802a702:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 802a704:	4b06      	ldr	r3, [pc, #24]	; (802a720 <HAL_PWR_PVD_IRQHandler+0x20>)
 802a706:	695b      	ldr	r3, [r3, #20]
 802a708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a70c:	2b00      	cmp	r3, #0
 802a70e:	d005      	beq.n	802a71c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 802a710:	f000 f808 	bl	802a724 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 802a714:	4b02      	ldr	r3, [pc, #8]	; (802a720 <HAL_PWR_PVD_IRQHandler+0x20>)
 802a716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802a71a:	615a      	str	r2, [r3, #20]
  }
}
 802a71c:	bf00      	nop
 802a71e:	bd80      	pop	{r7, pc}
 802a720:	40013c00 	.word	0x40013c00

0802a724 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 802a724:	b480      	push	{r7}
 802a726:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 802a728:	bf00      	nop
 802a72a:	46bd      	mov	sp, r7
 802a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a730:	4770      	bx	lr
	...

0802a734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802a734:	b580      	push	{r7, lr}
 802a736:	b086      	sub	sp, #24
 802a738:	af00      	add	r7, sp, #0
 802a73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802a73c:	687b      	ldr	r3, [r7, #4]
 802a73e:	2b00      	cmp	r3, #0
 802a740:	d101      	bne.n	802a746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802a742:	2301      	movs	r3, #1
 802a744:	e267      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802a746:	687b      	ldr	r3, [r7, #4]
 802a748:	681b      	ldr	r3, [r3, #0]
 802a74a:	f003 0301 	and.w	r3, r3, #1
 802a74e:	2b00      	cmp	r3, #0
 802a750:	d075      	beq.n	802a83e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802a752:	4b88      	ldr	r3, [pc, #544]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a754:	689b      	ldr	r3, [r3, #8]
 802a756:	f003 030c 	and.w	r3, r3, #12
 802a75a:	2b04      	cmp	r3, #4
 802a75c:	d00c      	beq.n	802a778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802a75e:	4b85      	ldr	r3, [pc, #532]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a760:	689b      	ldr	r3, [r3, #8]
 802a762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802a766:	2b08      	cmp	r3, #8
 802a768:	d112      	bne.n	802a790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802a76a:	4b82      	ldr	r3, [pc, #520]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a76c:	685b      	ldr	r3, [r3, #4]
 802a76e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802a776:	d10b      	bne.n	802a790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a778:	4b7e      	ldr	r3, [pc, #504]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a77a:	681b      	ldr	r3, [r3, #0]
 802a77c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a780:	2b00      	cmp	r3, #0
 802a782:	d05b      	beq.n	802a83c <HAL_RCC_OscConfig+0x108>
 802a784:	687b      	ldr	r3, [r7, #4]
 802a786:	685b      	ldr	r3, [r3, #4]
 802a788:	2b00      	cmp	r3, #0
 802a78a:	d157      	bne.n	802a83c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802a78c:	2301      	movs	r3, #1
 802a78e:	e242      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802a790:	687b      	ldr	r3, [r7, #4]
 802a792:	685b      	ldr	r3, [r3, #4]
 802a794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a798:	d106      	bne.n	802a7a8 <HAL_RCC_OscConfig+0x74>
 802a79a:	4b76      	ldr	r3, [pc, #472]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a79c:	681b      	ldr	r3, [r3, #0]
 802a79e:	4a75      	ldr	r2, [pc, #468]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a7a4:	6013      	str	r3, [r2, #0]
 802a7a6:	e01d      	b.n	802a7e4 <HAL_RCC_OscConfig+0xb0>
 802a7a8:	687b      	ldr	r3, [r7, #4]
 802a7aa:	685b      	ldr	r3, [r3, #4]
 802a7ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802a7b0:	d10c      	bne.n	802a7cc <HAL_RCC_OscConfig+0x98>
 802a7b2:	4b70      	ldr	r3, [pc, #448]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7b4:	681b      	ldr	r3, [r3, #0]
 802a7b6:	4a6f      	ldr	r2, [pc, #444]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a7bc:	6013      	str	r3, [r2, #0]
 802a7be:	4b6d      	ldr	r3, [pc, #436]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7c0:	681b      	ldr	r3, [r3, #0]
 802a7c2:	4a6c      	ldr	r2, [pc, #432]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a7c8:	6013      	str	r3, [r2, #0]
 802a7ca:	e00b      	b.n	802a7e4 <HAL_RCC_OscConfig+0xb0>
 802a7cc:	4b69      	ldr	r3, [pc, #420]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7ce:	681b      	ldr	r3, [r3, #0]
 802a7d0:	4a68      	ldr	r2, [pc, #416]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a7d6:	6013      	str	r3, [r2, #0]
 802a7d8:	4b66      	ldr	r3, [pc, #408]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7da:	681b      	ldr	r3, [r3, #0]
 802a7dc:	4a65      	ldr	r2, [pc, #404]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a7de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a7e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802a7e4:	687b      	ldr	r3, [r7, #4]
 802a7e6:	685b      	ldr	r3, [r3, #4]
 802a7e8:	2b00      	cmp	r3, #0
 802a7ea:	d013      	beq.n	802a814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a7ec:	f7fd fb6c 	bl	8027ec8 <HAL_GetTick>
 802a7f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a7f2:	e008      	b.n	802a806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a7f4:	f7fd fb68 	bl	8027ec8 <HAL_GetTick>
 802a7f8:	4602      	mov	r2, r0
 802a7fa:	693b      	ldr	r3, [r7, #16]
 802a7fc:	1ad3      	subs	r3, r2, r3
 802a7fe:	2b64      	cmp	r3, #100	; 0x64
 802a800:	d901      	bls.n	802a806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802a802:	2303      	movs	r3, #3
 802a804:	e207      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a806:	4b5b      	ldr	r3, [pc, #364]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a808:	681b      	ldr	r3, [r3, #0]
 802a80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a80e:	2b00      	cmp	r3, #0
 802a810:	d0f0      	beq.n	802a7f4 <HAL_RCC_OscConfig+0xc0>
 802a812:	e014      	b.n	802a83e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a814:	f7fd fb58 	bl	8027ec8 <HAL_GetTick>
 802a818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a81a:	e008      	b.n	802a82e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a81c:	f7fd fb54 	bl	8027ec8 <HAL_GetTick>
 802a820:	4602      	mov	r2, r0
 802a822:	693b      	ldr	r3, [r7, #16]
 802a824:	1ad3      	subs	r3, r2, r3
 802a826:	2b64      	cmp	r3, #100	; 0x64
 802a828:	d901      	bls.n	802a82e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802a82a:	2303      	movs	r3, #3
 802a82c:	e1f3      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a82e:	4b51      	ldr	r3, [pc, #324]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a830:	681b      	ldr	r3, [r3, #0]
 802a832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a836:	2b00      	cmp	r3, #0
 802a838:	d1f0      	bne.n	802a81c <HAL_RCC_OscConfig+0xe8>
 802a83a:	e000      	b.n	802a83e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a83c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802a83e:	687b      	ldr	r3, [r7, #4]
 802a840:	681b      	ldr	r3, [r3, #0]
 802a842:	f003 0302 	and.w	r3, r3, #2
 802a846:	2b00      	cmp	r3, #0
 802a848:	d063      	beq.n	802a912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a84a:	4b4a      	ldr	r3, [pc, #296]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a84c:	689b      	ldr	r3, [r3, #8]
 802a84e:	f003 030c 	and.w	r3, r3, #12
 802a852:	2b00      	cmp	r3, #0
 802a854:	d00b      	beq.n	802a86e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a856:	4b47      	ldr	r3, [pc, #284]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a858:	689b      	ldr	r3, [r3, #8]
 802a85a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a85e:	2b08      	cmp	r3, #8
 802a860:	d11c      	bne.n	802a89c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a862:	4b44      	ldr	r3, [pc, #272]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a864:	685b      	ldr	r3, [r3, #4]
 802a866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a86a:	2b00      	cmp	r3, #0
 802a86c:	d116      	bne.n	802a89c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a86e:	4b41      	ldr	r3, [pc, #260]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a870:	681b      	ldr	r3, [r3, #0]
 802a872:	f003 0302 	and.w	r3, r3, #2
 802a876:	2b00      	cmp	r3, #0
 802a878:	d005      	beq.n	802a886 <HAL_RCC_OscConfig+0x152>
 802a87a:	687b      	ldr	r3, [r7, #4]
 802a87c:	68db      	ldr	r3, [r3, #12]
 802a87e:	2b01      	cmp	r3, #1
 802a880:	d001      	beq.n	802a886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802a882:	2301      	movs	r3, #1
 802a884:	e1c7      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a886:	4b3b      	ldr	r3, [pc, #236]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a888:	681b      	ldr	r3, [r3, #0]
 802a88a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a88e:	687b      	ldr	r3, [r7, #4]
 802a890:	691b      	ldr	r3, [r3, #16]
 802a892:	00db      	lsls	r3, r3, #3
 802a894:	4937      	ldr	r1, [pc, #220]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a896:	4313      	orrs	r3, r2
 802a898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a89a:	e03a      	b.n	802a912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802a89c:	687b      	ldr	r3, [r7, #4]
 802a89e:	68db      	ldr	r3, [r3, #12]
 802a8a0:	2b00      	cmp	r3, #0
 802a8a2:	d020      	beq.n	802a8e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802a8a4:	4b34      	ldr	r3, [pc, #208]	; (802a978 <HAL_RCC_OscConfig+0x244>)
 802a8a6:	2201      	movs	r2, #1
 802a8a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a8aa:	f7fd fb0d 	bl	8027ec8 <HAL_GetTick>
 802a8ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a8b0:	e008      	b.n	802a8c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a8b2:	f7fd fb09 	bl	8027ec8 <HAL_GetTick>
 802a8b6:	4602      	mov	r2, r0
 802a8b8:	693b      	ldr	r3, [r7, #16]
 802a8ba:	1ad3      	subs	r3, r2, r3
 802a8bc:	2b02      	cmp	r3, #2
 802a8be:	d901      	bls.n	802a8c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802a8c0:	2303      	movs	r3, #3
 802a8c2:	e1a8      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a8c4:	4b2b      	ldr	r3, [pc, #172]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a8c6:	681b      	ldr	r3, [r3, #0]
 802a8c8:	f003 0302 	and.w	r3, r3, #2
 802a8cc:	2b00      	cmp	r3, #0
 802a8ce:	d0f0      	beq.n	802a8b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a8d0:	4b28      	ldr	r3, [pc, #160]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a8d2:	681b      	ldr	r3, [r3, #0]
 802a8d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a8d8:	687b      	ldr	r3, [r7, #4]
 802a8da:	691b      	ldr	r3, [r3, #16]
 802a8dc:	00db      	lsls	r3, r3, #3
 802a8de:	4925      	ldr	r1, [pc, #148]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a8e0:	4313      	orrs	r3, r2
 802a8e2:	600b      	str	r3, [r1, #0]
 802a8e4:	e015      	b.n	802a912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a8e6:	4b24      	ldr	r3, [pc, #144]	; (802a978 <HAL_RCC_OscConfig+0x244>)
 802a8e8:	2200      	movs	r2, #0
 802a8ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a8ec:	f7fd faec 	bl	8027ec8 <HAL_GetTick>
 802a8f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a8f2:	e008      	b.n	802a906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a8f4:	f7fd fae8 	bl	8027ec8 <HAL_GetTick>
 802a8f8:	4602      	mov	r2, r0
 802a8fa:	693b      	ldr	r3, [r7, #16]
 802a8fc:	1ad3      	subs	r3, r2, r3
 802a8fe:	2b02      	cmp	r3, #2
 802a900:	d901      	bls.n	802a906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802a902:	2303      	movs	r3, #3
 802a904:	e187      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a906:	4b1b      	ldr	r3, [pc, #108]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a908:	681b      	ldr	r3, [r3, #0]
 802a90a:	f003 0302 	and.w	r3, r3, #2
 802a90e:	2b00      	cmp	r3, #0
 802a910:	d1f0      	bne.n	802a8f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a912:	687b      	ldr	r3, [r7, #4]
 802a914:	681b      	ldr	r3, [r3, #0]
 802a916:	f003 0308 	and.w	r3, r3, #8
 802a91a:	2b00      	cmp	r3, #0
 802a91c:	d036      	beq.n	802a98c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	695b      	ldr	r3, [r3, #20]
 802a922:	2b00      	cmp	r3, #0
 802a924:	d016      	beq.n	802a954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a926:	4b15      	ldr	r3, [pc, #84]	; (802a97c <HAL_RCC_OscConfig+0x248>)
 802a928:	2201      	movs	r2, #1
 802a92a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a92c:	f7fd facc 	bl	8027ec8 <HAL_GetTick>
 802a930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a932:	e008      	b.n	802a946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a934:	f7fd fac8 	bl	8027ec8 <HAL_GetTick>
 802a938:	4602      	mov	r2, r0
 802a93a:	693b      	ldr	r3, [r7, #16]
 802a93c:	1ad3      	subs	r3, r2, r3
 802a93e:	2b02      	cmp	r3, #2
 802a940:	d901      	bls.n	802a946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802a942:	2303      	movs	r3, #3
 802a944:	e167      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a946:	4b0b      	ldr	r3, [pc, #44]	; (802a974 <HAL_RCC_OscConfig+0x240>)
 802a948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a94a:	f003 0302 	and.w	r3, r3, #2
 802a94e:	2b00      	cmp	r3, #0
 802a950:	d0f0      	beq.n	802a934 <HAL_RCC_OscConfig+0x200>
 802a952:	e01b      	b.n	802a98c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a954:	4b09      	ldr	r3, [pc, #36]	; (802a97c <HAL_RCC_OscConfig+0x248>)
 802a956:	2200      	movs	r2, #0
 802a958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a95a:	f7fd fab5 	bl	8027ec8 <HAL_GetTick>
 802a95e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a960:	e00e      	b.n	802a980 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a962:	f7fd fab1 	bl	8027ec8 <HAL_GetTick>
 802a966:	4602      	mov	r2, r0
 802a968:	693b      	ldr	r3, [r7, #16]
 802a96a:	1ad3      	subs	r3, r2, r3
 802a96c:	2b02      	cmp	r3, #2
 802a96e:	d907      	bls.n	802a980 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802a970:	2303      	movs	r3, #3
 802a972:	e150      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
 802a974:	40023800 	.word	0x40023800
 802a978:	42470000 	.word	0x42470000
 802a97c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a980:	4b88      	ldr	r3, [pc, #544]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802a982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a984:	f003 0302 	and.w	r3, r3, #2
 802a988:	2b00      	cmp	r3, #0
 802a98a:	d1ea      	bne.n	802a962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a98c:	687b      	ldr	r3, [r7, #4]
 802a98e:	681b      	ldr	r3, [r3, #0]
 802a990:	f003 0304 	and.w	r3, r3, #4
 802a994:	2b00      	cmp	r3, #0
 802a996:	f000 8097 	beq.w	802aac8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802a99a:	2300      	movs	r3, #0
 802a99c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802a99e:	4b81      	ldr	r3, [pc, #516]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a9a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a9a6:	2b00      	cmp	r3, #0
 802a9a8:	d10f      	bne.n	802a9ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802a9aa:	2300      	movs	r3, #0
 802a9ac:	60bb      	str	r3, [r7, #8]
 802a9ae:	4b7d      	ldr	r3, [pc, #500]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a9b2:	4a7c      	ldr	r2, [pc, #496]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802a9b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a9b8:	6413      	str	r3, [r2, #64]	; 0x40
 802a9ba:	4b7a      	ldr	r3, [pc, #488]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a9c2:	60bb      	str	r3, [r7, #8]
 802a9c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802a9c6:	2301      	movs	r3, #1
 802a9c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a9ca:	4b77      	ldr	r3, [pc, #476]	; (802aba8 <HAL_RCC_OscConfig+0x474>)
 802a9cc:	681b      	ldr	r3, [r3, #0]
 802a9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a9d2:	2b00      	cmp	r3, #0
 802a9d4:	d118      	bne.n	802aa08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802a9d6:	4b74      	ldr	r3, [pc, #464]	; (802aba8 <HAL_RCC_OscConfig+0x474>)
 802a9d8:	681b      	ldr	r3, [r3, #0]
 802a9da:	4a73      	ldr	r2, [pc, #460]	; (802aba8 <HAL_RCC_OscConfig+0x474>)
 802a9dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a9e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802a9e2:	f7fd fa71 	bl	8027ec8 <HAL_GetTick>
 802a9e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a9e8:	e008      	b.n	802a9fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a9ea:	f7fd fa6d 	bl	8027ec8 <HAL_GetTick>
 802a9ee:	4602      	mov	r2, r0
 802a9f0:	693b      	ldr	r3, [r7, #16]
 802a9f2:	1ad3      	subs	r3, r2, r3
 802a9f4:	2b02      	cmp	r3, #2
 802a9f6:	d901      	bls.n	802a9fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802a9f8:	2303      	movs	r3, #3
 802a9fa:	e10c      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a9fc:	4b6a      	ldr	r3, [pc, #424]	; (802aba8 <HAL_RCC_OscConfig+0x474>)
 802a9fe:	681b      	ldr	r3, [r3, #0]
 802aa00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802aa04:	2b00      	cmp	r3, #0
 802aa06:	d0f0      	beq.n	802a9ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802aa08:	687b      	ldr	r3, [r7, #4]
 802aa0a:	689b      	ldr	r3, [r3, #8]
 802aa0c:	2b01      	cmp	r3, #1
 802aa0e:	d106      	bne.n	802aa1e <HAL_RCC_OscConfig+0x2ea>
 802aa10:	4b64      	ldr	r3, [pc, #400]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa14:	4a63      	ldr	r2, [pc, #396]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa16:	f043 0301 	orr.w	r3, r3, #1
 802aa1a:	6713      	str	r3, [r2, #112]	; 0x70
 802aa1c:	e01c      	b.n	802aa58 <HAL_RCC_OscConfig+0x324>
 802aa1e:	687b      	ldr	r3, [r7, #4]
 802aa20:	689b      	ldr	r3, [r3, #8]
 802aa22:	2b05      	cmp	r3, #5
 802aa24:	d10c      	bne.n	802aa40 <HAL_RCC_OscConfig+0x30c>
 802aa26:	4b5f      	ldr	r3, [pc, #380]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa2a:	4a5e      	ldr	r2, [pc, #376]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa2c:	f043 0304 	orr.w	r3, r3, #4
 802aa30:	6713      	str	r3, [r2, #112]	; 0x70
 802aa32:	4b5c      	ldr	r3, [pc, #368]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa36:	4a5b      	ldr	r2, [pc, #364]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa38:	f043 0301 	orr.w	r3, r3, #1
 802aa3c:	6713      	str	r3, [r2, #112]	; 0x70
 802aa3e:	e00b      	b.n	802aa58 <HAL_RCC_OscConfig+0x324>
 802aa40:	4b58      	ldr	r3, [pc, #352]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa44:	4a57      	ldr	r2, [pc, #348]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa46:	f023 0301 	bic.w	r3, r3, #1
 802aa4a:	6713      	str	r3, [r2, #112]	; 0x70
 802aa4c:	4b55      	ldr	r3, [pc, #340]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa50:	4a54      	ldr	r2, [pc, #336]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa52:	f023 0304 	bic.w	r3, r3, #4
 802aa56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802aa58:	687b      	ldr	r3, [r7, #4]
 802aa5a:	689b      	ldr	r3, [r3, #8]
 802aa5c:	2b00      	cmp	r3, #0
 802aa5e:	d015      	beq.n	802aa8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802aa60:	f7fd fa32 	bl	8027ec8 <HAL_GetTick>
 802aa64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802aa66:	e00a      	b.n	802aa7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802aa68:	f7fd fa2e 	bl	8027ec8 <HAL_GetTick>
 802aa6c:	4602      	mov	r2, r0
 802aa6e:	693b      	ldr	r3, [r7, #16]
 802aa70:	1ad3      	subs	r3, r2, r3
 802aa72:	f241 3288 	movw	r2, #5000	; 0x1388
 802aa76:	4293      	cmp	r3, r2
 802aa78:	d901      	bls.n	802aa7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802aa7a:	2303      	movs	r3, #3
 802aa7c:	e0cb      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802aa7e:	4b49      	ldr	r3, [pc, #292]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aa80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aa82:	f003 0302 	and.w	r3, r3, #2
 802aa86:	2b00      	cmp	r3, #0
 802aa88:	d0ee      	beq.n	802aa68 <HAL_RCC_OscConfig+0x334>
 802aa8a:	e014      	b.n	802aab6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802aa8c:	f7fd fa1c 	bl	8027ec8 <HAL_GetTick>
 802aa90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802aa92:	e00a      	b.n	802aaaa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802aa94:	f7fd fa18 	bl	8027ec8 <HAL_GetTick>
 802aa98:	4602      	mov	r2, r0
 802aa9a:	693b      	ldr	r3, [r7, #16]
 802aa9c:	1ad3      	subs	r3, r2, r3
 802aa9e:	f241 3288 	movw	r2, #5000	; 0x1388
 802aaa2:	4293      	cmp	r3, r2
 802aaa4:	d901      	bls.n	802aaaa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802aaa6:	2303      	movs	r3, #3
 802aaa8:	e0b5      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802aaaa:	4b3e      	ldr	r3, [pc, #248]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aaac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802aaae:	f003 0302 	and.w	r3, r3, #2
 802aab2:	2b00      	cmp	r3, #0
 802aab4:	d1ee      	bne.n	802aa94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802aab6:	7dfb      	ldrb	r3, [r7, #23]
 802aab8:	2b01      	cmp	r3, #1
 802aaba:	d105      	bne.n	802aac8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802aabc:	4b39      	ldr	r3, [pc, #228]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802aac0:	4a38      	ldr	r2, [pc, #224]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802aac6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802aac8:	687b      	ldr	r3, [r7, #4]
 802aaca:	699b      	ldr	r3, [r3, #24]
 802aacc:	2b00      	cmp	r3, #0
 802aace:	f000 80a1 	beq.w	802ac14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802aad2:	4b34      	ldr	r3, [pc, #208]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802aad4:	689b      	ldr	r3, [r3, #8]
 802aad6:	f003 030c 	and.w	r3, r3, #12
 802aada:	2b08      	cmp	r3, #8
 802aadc:	d05c      	beq.n	802ab98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802aade:	687b      	ldr	r3, [r7, #4]
 802aae0:	699b      	ldr	r3, [r3, #24]
 802aae2:	2b02      	cmp	r3, #2
 802aae4:	d141      	bne.n	802ab6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802aae6:	4b31      	ldr	r3, [pc, #196]	; (802abac <HAL_RCC_OscConfig+0x478>)
 802aae8:	2200      	movs	r2, #0
 802aaea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802aaec:	f7fd f9ec 	bl	8027ec8 <HAL_GetTick>
 802aaf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802aaf2:	e008      	b.n	802ab06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802aaf4:	f7fd f9e8 	bl	8027ec8 <HAL_GetTick>
 802aaf8:	4602      	mov	r2, r0
 802aafa:	693b      	ldr	r3, [r7, #16]
 802aafc:	1ad3      	subs	r3, r2, r3
 802aafe:	2b02      	cmp	r3, #2
 802ab00:	d901      	bls.n	802ab06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802ab02:	2303      	movs	r3, #3
 802ab04:	e087      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802ab06:	4b27      	ldr	r3, [pc, #156]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802ab08:	681b      	ldr	r3, [r3, #0]
 802ab0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802ab0e:	2b00      	cmp	r3, #0
 802ab10:	d1f0      	bne.n	802aaf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802ab12:	687b      	ldr	r3, [r7, #4]
 802ab14:	69da      	ldr	r2, [r3, #28]
 802ab16:	687b      	ldr	r3, [r7, #4]
 802ab18:	6a1b      	ldr	r3, [r3, #32]
 802ab1a:	431a      	orrs	r2, r3
 802ab1c:	687b      	ldr	r3, [r7, #4]
 802ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ab20:	019b      	lsls	r3, r3, #6
 802ab22:	431a      	orrs	r2, r3
 802ab24:	687b      	ldr	r3, [r7, #4]
 802ab26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ab28:	085b      	lsrs	r3, r3, #1
 802ab2a:	3b01      	subs	r3, #1
 802ab2c:	041b      	lsls	r3, r3, #16
 802ab2e:	431a      	orrs	r2, r3
 802ab30:	687b      	ldr	r3, [r7, #4]
 802ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ab34:	061b      	lsls	r3, r3, #24
 802ab36:	491b      	ldr	r1, [pc, #108]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802ab38:	4313      	orrs	r3, r2
 802ab3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802ab3c:	4b1b      	ldr	r3, [pc, #108]	; (802abac <HAL_RCC_OscConfig+0x478>)
 802ab3e:	2201      	movs	r2, #1
 802ab40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802ab42:	f7fd f9c1 	bl	8027ec8 <HAL_GetTick>
 802ab46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802ab48:	e008      	b.n	802ab5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802ab4a:	f7fd f9bd 	bl	8027ec8 <HAL_GetTick>
 802ab4e:	4602      	mov	r2, r0
 802ab50:	693b      	ldr	r3, [r7, #16]
 802ab52:	1ad3      	subs	r3, r2, r3
 802ab54:	2b02      	cmp	r3, #2
 802ab56:	d901      	bls.n	802ab5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802ab58:	2303      	movs	r3, #3
 802ab5a:	e05c      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802ab5c:	4b11      	ldr	r3, [pc, #68]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802ab5e:	681b      	ldr	r3, [r3, #0]
 802ab60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802ab64:	2b00      	cmp	r3, #0
 802ab66:	d0f0      	beq.n	802ab4a <HAL_RCC_OscConfig+0x416>
 802ab68:	e054      	b.n	802ac14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802ab6a:	4b10      	ldr	r3, [pc, #64]	; (802abac <HAL_RCC_OscConfig+0x478>)
 802ab6c:	2200      	movs	r2, #0
 802ab6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802ab70:	f7fd f9aa 	bl	8027ec8 <HAL_GetTick>
 802ab74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802ab76:	e008      	b.n	802ab8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802ab78:	f7fd f9a6 	bl	8027ec8 <HAL_GetTick>
 802ab7c:	4602      	mov	r2, r0
 802ab7e:	693b      	ldr	r3, [r7, #16]
 802ab80:	1ad3      	subs	r3, r2, r3
 802ab82:	2b02      	cmp	r3, #2
 802ab84:	d901      	bls.n	802ab8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802ab86:	2303      	movs	r3, #3
 802ab88:	e045      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802ab8a:	4b06      	ldr	r3, [pc, #24]	; (802aba4 <HAL_RCC_OscConfig+0x470>)
 802ab8c:	681b      	ldr	r3, [r3, #0]
 802ab8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802ab92:	2b00      	cmp	r3, #0
 802ab94:	d1f0      	bne.n	802ab78 <HAL_RCC_OscConfig+0x444>
 802ab96:	e03d      	b.n	802ac14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802ab98:	687b      	ldr	r3, [r7, #4]
 802ab9a:	699b      	ldr	r3, [r3, #24]
 802ab9c:	2b01      	cmp	r3, #1
 802ab9e:	d107      	bne.n	802abb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802aba0:	2301      	movs	r3, #1
 802aba2:	e038      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
 802aba4:	40023800 	.word	0x40023800
 802aba8:	40007000 	.word	0x40007000
 802abac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802abb0:	4b1b      	ldr	r3, [pc, #108]	; (802ac20 <HAL_RCC_OscConfig+0x4ec>)
 802abb2:	685b      	ldr	r3, [r3, #4]
 802abb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802abb6:	687b      	ldr	r3, [r7, #4]
 802abb8:	699b      	ldr	r3, [r3, #24]
 802abba:	2b01      	cmp	r3, #1
 802abbc:	d028      	beq.n	802ac10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802abbe:	68fb      	ldr	r3, [r7, #12]
 802abc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802abc4:	687b      	ldr	r3, [r7, #4]
 802abc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802abc8:	429a      	cmp	r2, r3
 802abca:	d121      	bne.n	802ac10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802abcc:	68fb      	ldr	r3, [r7, #12]
 802abce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802abd2:	687b      	ldr	r3, [r7, #4]
 802abd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802abd6:	429a      	cmp	r2, r3
 802abd8:	d11a      	bne.n	802ac10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802abda:	68fa      	ldr	r2, [r7, #12]
 802abdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802abe0:	4013      	ands	r3, r2
 802abe2:	687a      	ldr	r2, [r7, #4]
 802abe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802abe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802abe8:	4293      	cmp	r3, r2
 802abea:	d111      	bne.n	802ac10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802abec:	68fb      	ldr	r3, [r7, #12]
 802abee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802abf2:	687b      	ldr	r3, [r7, #4]
 802abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802abf6:	085b      	lsrs	r3, r3, #1
 802abf8:	3b01      	subs	r3, #1
 802abfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802abfc:	429a      	cmp	r2, r3
 802abfe:	d107      	bne.n	802ac10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802ac00:	68fb      	ldr	r3, [r7, #12]
 802ac02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802ac06:	687b      	ldr	r3, [r7, #4]
 802ac08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ac0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802ac0c:	429a      	cmp	r2, r3
 802ac0e:	d001      	beq.n	802ac14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802ac10:	2301      	movs	r3, #1
 802ac12:	e000      	b.n	802ac16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802ac14:	2300      	movs	r3, #0
}
 802ac16:	4618      	mov	r0, r3
 802ac18:	3718      	adds	r7, #24
 802ac1a:	46bd      	mov	sp, r7
 802ac1c:	bd80      	pop	{r7, pc}
 802ac1e:	bf00      	nop
 802ac20:	40023800 	.word	0x40023800

0802ac24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b084      	sub	sp, #16
 802ac28:	af00      	add	r7, sp, #0
 802ac2a:	6078      	str	r0, [r7, #4]
 802ac2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802ac2e:	687b      	ldr	r3, [r7, #4]
 802ac30:	2b00      	cmp	r3, #0
 802ac32:	d101      	bne.n	802ac38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802ac34:	2301      	movs	r3, #1
 802ac36:	e0cc      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802ac38:	4b68      	ldr	r3, [pc, #416]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ac3a:	681b      	ldr	r3, [r3, #0]
 802ac3c:	f003 0307 	and.w	r3, r3, #7
 802ac40:	683a      	ldr	r2, [r7, #0]
 802ac42:	429a      	cmp	r2, r3
 802ac44:	d90c      	bls.n	802ac60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802ac46:	4b65      	ldr	r3, [pc, #404]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ac48:	683a      	ldr	r2, [r7, #0]
 802ac4a:	b2d2      	uxtb	r2, r2
 802ac4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802ac4e:	4b63      	ldr	r3, [pc, #396]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ac50:	681b      	ldr	r3, [r3, #0]
 802ac52:	f003 0307 	and.w	r3, r3, #7
 802ac56:	683a      	ldr	r2, [r7, #0]
 802ac58:	429a      	cmp	r2, r3
 802ac5a:	d001      	beq.n	802ac60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802ac5c:	2301      	movs	r3, #1
 802ac5e:	e0b8      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802ac60:	687b      	ldr	r3, [r7, #4]
 802ac62:	681b      	ldr	r3, [r3, #0]
 802ac64:	f003 0302 	and.w	r3, r3, #2
 802ac68:	2b00      	cmp	r3, #0
 802ac6a:	d020      	beq.n	802acae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802ac6c:	687b      	ldr	r3, [r7, #4]
 802ac6e:	681b      	ldr	r3, [r3, #0]
 802ac70:	f003 0304 	and.w	r3, r3, #4
 802ac74:	2b00      	cmp	r3, #0
 802ac76:	d005      	beq.n	802ac84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802ac78:	4b59      	ldr	r3, [pc, #356]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ac7a:	689b      	ldr	r3, [r3, #8]
 802ac7c:	4a58      	ldr	r2, [pc, #352]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ac7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802ac82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802ac84:	687b      	ldr	r3, [r7, #4]
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	f003 0308 	and.w	r3, r3, #8
 802ac8c:	2b00      	cmp	r3, #0
 802ac8e:	d005      	beq.n	802ac9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802ac90:	4b53      	ldr	r3, [pc, #332]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ac92:	689b      	ldr	r3, [r3, #8]
 802ac94:	4a52      	ldr	r2, [pc, #328]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ac96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802ac9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802ac9c:	4b50      	ldr	r3, [pc, #320]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ac9e:	689b      	ldr	r3, [r3, #8]
 802aca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802aca4:	687b      	ldr	r3, [r7, #4]
 802aca6:	689b      	ldr	r3, [r3, #8]
 802aca8:	494d      	ldr	r1, [pc, #308]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802acaa:	4313      	orrs	r3, r2
 802acac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	681b      	ldr	r3, [r3, #0]
 802acb2:	f003 0301 	and.w	r3, r3, #1
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	d044      	beq.n	802ad44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802acba:	687b      	ldr	r3, [r7, #4]
 802acbc:	685b      	ldr	r3, [r3, #4]
 802acbe:	2b01      	cmp	r3, #1
 802acc0:	d107      	bne.n	802acd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802acc2:	4b47      	ldr	r3, [pc, #284]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802acc4:	681b      	ldr	r3, [r3, #0]
 802acc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802acca:	2b00      	cmp	r3, #0
 802accc:	d119      	bne.n	802ad02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802acce:	2301      	movs	r3, #1
 802acd0:	e07f      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802acd2:	687b      	ldr	r3, [r7, #4]
 802acd4:	685b      	ldr	r3, [r3, #4]
 802acd6:	2b02      	cmp	r3, #2
 802acd8:	d003      	beq.n	802ace2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802acda:	687b      	ldr	r3, [r7, #4]
 802acdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802acde:	2b03      	cmp	r3, #3
 802ace0:	d107      	bne.n	802acf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802ace2:	4b3f      	ldr	r3, [pc, #252]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ace4:	681b      	ldr	r3, [r3, #0]
 802ace6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802acea:	2b00      	cmp	r3, #0
 802acec:	d109      	bne.n	802ad02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802acee:	2301      	movs	r3, #1
 802acf0:	e06f      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802acf2:	4b3b      	ldr	r3, [pc, #236]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802acf4:	681b      	ldr	r3, [r3, #0]
 802acf6:	f003 0302 	and.w	r3, r3, #2
 802acfa:	2b00      	cmp	r3, #0
 802acfc:	d101      	bne.n	802ad02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802acfe:	2301      	movs	r3, #1
 802ad00:	e067      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802ad02:	4b37      	ldr	r3, [pc, #220]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad04:	689b      	ldr	r3, [r3, #8]
 802ad06:	f023 0203 	bic.w	r2, r3, #3
 802ad0a:	687b      	ldr	r3, [r7, #4]
 802ad0c:	685b      	ldr	r3, [r3, #4]
 802ad0e:	4934      	ldr	r1, [pc, #208]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad10:	4313      	orrs	r3, r2
 802ad12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802ad14:	f7fd f8d8 	bl	8027ec8 <HAL_GetTick>
 802ad18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ad1a:	e00a      	b.n	802ad32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802ad1c:	f7fd f8d4 	bl	8027ec8 <HAL_GetTick>
 802ad20:	4602      	mov	r2, r0
 802ad22:	68fb      	ldr	r3, [r7, #12]
 802ad24:	1ad3      	subs	r3, r2, r3
 802ad26:	f241 3288 	movw	r2, #5000	; 0x1388
 802ad2a:	4293      	cmp	r3, r2
 802ad2c:	d901      	bls.n	802ad32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802ad2e:	2303      	movs	r3, #3
 802ad30:	e04f      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802ad32:	4b2b      	ldr	r3, [pc, #172]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad34:	689b      	ldr	r3, [r3, #8]
 802ad36:	f003 020c 	and.w	r2, r3, #12
 802ad3a:	687b      	ldr	r3, [r7, #4]
 802ad3c:	685b      	ldr	r3, [r3, #4]
 802ad3e:	009b      	lsls	r3, r3, #2
 802ad40:	429a      	cmp	r2, r3
 802ad42:	d1eb      	bne.n	802ad1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802ad44:	4b25      	ldr	r3, [pc, #148]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ad46:	681b      	ldr	r3, [r3, #0]
 802ad48:	f003 0307 	and.w	r3, r3, #7
 802ad4c:	683a      	ldr	r2, [r7, #0]
 802ad4e:	429a      	cmp	r2, r3
 802ad50:	d20c      	bcs.n	802ad6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802ad52:	4b22      	ldr	r3, [pc, #136]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ad54:	683a      	ldr	r2, [r7, #0]
 802ad56:	b2d2      	uxtb	r2, r2
 802ad58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802ad5a:	4b20      	ldr	r3, [pc, #128]	; (802addc <HAL_RCC_ClockConfig+0x1b8>)
 802ad5c:	681b      	ldr	r3, [r3, #0]
 802ad5e:	f003 0307 	and.w	r3, r3, #7
 802ad62:	683a      	ldr	r2, [r7, #0]
 802ad64:	429a      	cmp	r2, r3
 802ad66:	d001      	beq.n	802ad6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802ad68:	2301      	movs	r3, #1
 802ad6a:	e032      	b.n	802add2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802ad6c:	687b      	ldr	r3, [r7, #4]
 802ad6e:	681b      	ldr	r3, [r3, #0]
 802ad70:	f003 0304 	and.w	r3, r3, #4
 802ad74:	2b00      	cmp	r3, #0
 802ad76:	d008      	beq.n	802ad8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802ad78:	4b19      	ldr	r3, [pc, #100]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad7a:	689b      	ldr	r3, [r3, #8]
 802ad7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802ad80:	687b      	ldr	r3, [r7, #4]
 802ad82:	68db      	ldr	r3, [r3, #12]
 802ad84:	4916      	ldr	r1, [pc, #88]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad86:	4313      	orrs	r3, r2
 802ad88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802ad8a:	687b      	ldr	r3, [r7, #4]
 802ad8c:	681b      	ldr	r3, [r3, #0]
 802ad8e:	f003 0308 	and.w	r3, r3, #8
 802ad92:	2b00      	cmp	r3, #0
 802ad94:	d009      	beq.n	802adaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802ad96:	4b12      	ldr	r3, [pc, #72]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ad98:	689b      	ldr	r3, [r3, #8]
 802ad9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802ad9e:	687b      	ldr	r3, [r7, #4]
 802ada0:	691b      	ldr	r3, [r3, #16]
 802ada2:	00db      	lsls	r3, r3, #3
 802ada4:	490e      	ldr	r1, [pc, #56]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802ada6:	4313      	orrs	r3, r2
 802ada8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802adaa:	f000 f82d 	bl	802ae08 <HAL_RCC_GetSysClockFreq>
 802adae:	4602      	mov	r2, r0
 802adb0:	4b0b      	ldr	r3, [pc, #44]	; (802ade0 <HAL_RCC_ClockConfig+0x1bc>)
 802adb2:	689b      	ldr	r3, [r3, #8]
 802adb4:	091b      	lsrs	r3, r3, #4
 802adb6:	f003 030f 	and.w	r3, r3, #15
 802adba:	490a      	ldr	r1, [pc, #40]	; (802ade4 <HAL_RCC_ClockConfig+0x1c0>)
 802adbc:	5ccb      	ldrb	r3, [r1, r3]
 802adbe:	fa22 f303 	lsr.w	r3, r2, r3
 802adc2:	4a09      	ldr	r2, [pc, #36]	; (802ade8 <HAL_RCC_ClockConfig+0x1c4>)
 802adc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802adc6:	4b09      	ldr	r3, [pc, #36]	; (802adec <HAL_RCC_ClockConfig+0x1c8>)
 802adc8:	681b      	ldr	r3, [r3, #0]
 802adca:	4618      	mov	r0, r3
 802adcc:	f7fd f838 	bl	8027e40 <HAL_InitTick>

  return HAL_OK;
 802add0:	2300      	movs	r3, #0
}
 802add2:	4618      	mov	r0, r3
 802add4:	3710      	adds	r7, #16
 802add6:	46bd      	mov	sp, r7
 802add8:	bd80      	pop	{r7, pc}
 802adda:	bf00      	nop
 802addc:	40023c00 	.word	0x40023c00
 802ade0:	40023800 	.word	0x40023800
 802ade4:	0803759c 	.word	0x0803759c
 802ade8:	20000138 	.word	0x20000138
 802adec:	2000013c 	.word	0x2000013c

0802adf0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 802adf0:	b480      	push	{r7}
 802adf2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 802adf4:	4b03      	ldr	r3, [pc, #12]	; (802ae04 <HAL_RCC_EnableCSS+0x14>)
 802adf6:	2201      	movs	r2, #1
 802adf8:	601a      	str	r2, [r3, #0]
}
 802adfa:	bf00      	nop
 802adfc:	46bd      	mov	sp, r7
 802adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae02:	4770      	bx	lr
 802ae04:	4247004c 	.word	0x4247004c

0802ae08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802ae08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802ae0c:	b090      	sub	sp, #64	; 0x40
 802ae0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802ae10:	2300      	movs	r3, #0
 802ae12:	637b      	str	r3, [r7, #52]	; 0x34
 802ae14:	2300      	movs	r3, #0
 802ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
 802ae18:	2300      	movs	r3, #0
 802ae1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802ae1c:	2300      	movs	r3, #0
 802ae1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802ae20:	4b59      	ldr	r3, [pc, #356]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802ae22:	689b      	ldr	r3, [r3, #8]
 802ae24:	f003 030c 	and.w	r3, r3, #12
 802ae28:	2b08      	cmp	r3, #8
 802ae2a:	d00d      	beq.n	802ae48 <HAL_RCC_GetSysClockFreq+0x40>
 802ae2c:	2b08      	cmp	r3, #8
 802ae2e:	f200 80a1 	bhi.w	802af74 <HAL_RCC_GetSysClockFreq+0x16c>
 802ae32:	2b00      	cmp	r3, #0
 802ae34:	d002      	beq.n	802ae3c <HAL_RCC_GetSysClockFreq+0x34>
 802ae36:	2b04      	cmp	r3, #4
 802ae38:	d003      	beq.n	802ae42 <HAL_RCC_GetSysClockFreq+0x3a>
 802ae3a:	e09b      	b.n	802af74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802ae3c:	4b53      	ldr	r3, [pc, #332]	; (802af8c <HAL_RCC_GetSysClockFreq+0x184>)
 802ae3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 802ae40:	e09b      	b.n	802af7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802ae42:	4b53      	ldr	r3, [pc, #332]	; (802af90 <HAL_RCC_GetSysClockFreq+0x188>)
 802ae44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802ae46:	e098      	b.n	802af7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802ae48:	4b4f      	ldr	r3, [pc, #316]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802ae4a:	685b      	ldr	r3, [r3, #4]
 802ae4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802ae50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802ae52:	4b4d      	ldr	r3, [pc, #308]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802ae54:	685b      	ldr	r3, [r3, #4]
 802ae56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802ae5a:	2b00      	cmp	r3, #0
 802ae5c:	d028      	beq.n	802aeb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802ae5e:	4b4a      	ldr	r3, [pc, #296]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802ae60:	685b      	ldr	r3, [r3, #4]
 802ae62:	099b      	lsrs	r3, r3, #6
 802ae64:	2200      	movs	r2, #0
 802ae66:	623b      	str	r3, [r7, #32]
 802ae68:	627a      	str	r2, [r7, #36]	; 0x24
 802ae6a:	6a3b      	ldr	r3, [r7, #32]
 802ae6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802ae70:	2100      	movs	r1, #0
 802ae72:	4b47      	ldr	r3, [pc, #284]	; (802af90 <HAL_RCC_GetSysClockFreq+0x188>)
 802ae74:	fb03 f201 	mul.w	r2, r3, r1
 802ae78:	2300      	movs	r3, #0
 802ae7a:	fb00 f303 	mul.w	r3, r0, r3
 802ae7e:	4413      	add	r3, r2
 802ae80:	4a43      	ldr	r2, [pc, #268]	; (802af90 <HAL_RCC_GetSysClockFreq+0x188>)
 802ae82:	fba0 1202 	umull	r1, r2, r0, r2
 802ae86:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ae88:	460a      	mov	r2, r1
 802ae8a:	62ba      	str	r2, [r7, #40]	; 0x28
 802ae8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ae8e:	4413      	add	r3, r2
 802ae90:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ae92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ae94:	2200      	movs	r2, #0
 802ae96:	61bb      	str	r3, [r7, #24]
 802ae98:	61fa      	str	r2, [r7, #28]
 802ae9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802ae9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802aea2:	f7f7 fe81 	bl	8022ba8 <__aeabi_uldivmod>
 802aea6:	4602      	mov	r2, r0
 802aea8:	460b      	mov	r3, r1
 802aeaa:	4613      	mov	r3, r2
 802aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
 802aeae:	e053      	b.n	802af58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802aeb0:	4b35      	ldr	r3, [pc, #212]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802aeb2:	685b      	ldr	r3, [r3, #4]
 802aeb4:	099b      	lsrs	r3, r3, #6
 802aeb6:	2200      	movs	r2, #0
 802aeb8:	613b      	str	r3, [r7, #16]
 802aeba:	617a      	str	r2, [r7, #20]
 802aebc:	693b      	ldr	r3, [r7, #16]
 802aebe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802aec2:	f04f 0b00 	mov.w	fp, #0
 802aec6:	4652      	mov	r2, sl
 802aec8:	465b      	mov	r3, fp
 802aeca:	f04f 0000 	mov.w	r0, #0
 802aece:	f04f 0100 	mov.w	r1, #0
 802aed2:	0159      	lsls	r1, r3, #5
 802aed4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802aed8:	0150      	lsls	r0, r2, #5
 802aeda:	4602      	mov	r2, r0
 802aedc:	460b      	mov	r3, r1
 802aede:	ebb2 080a 	subs.w	r8, r2, sl
 802aee2:	eb63 090b 	sbc.w	r9, r3, fp
 802aee6:	f04f 0200 	mov.w	r2, #0
 802aeea:	f04f 0300 	mov.w	r3, #0
 802aeee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802aef2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802aef6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802aefa:	ebb2 0408 	subs.w	r4, r2, r8
 802aefe:	eb63 0509 	sbc.w	r5, r3, r9
 802af02:	f04f 0200 	mov.w	r2, #0
 802af06:	f04f 0300 	mov.w	r3, #0
 802af0a:	00eb      	lsls	r3, r5, #3
 802af0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802af10:	00e2      	lsls	r2, r4, #3
 802af12:	4614      	mov	r4, r2
 802af14:	461d      	mov	r5, r3
 802af16:	eb14 030a 	adds.w	r3, r4, sl
 802af1a:	603b      	str	r3, [r7, #0]
 802af1c:	eb45 030b 	adc.w	r3, r5, fp
 802af20:	607b      	str	r3, [r7, #4]
 802af22:	f04f 0200 	mov.w	r2, #0
 802af26:	f04f 0300 	mov.w	r3, #0
 802af2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 802af2e:	4629      	mov	r1, r5
 802af30:	028b      	lsls	r3, r1, #10
 802af32:	4621      	mov	r1, r4
 802af34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802af38:	4621      	mov	r1, r4
 802af3a:	028a      	lsls	r2, r1, #10
 802af3c:	4610      	mov	r0, r2
 802af3e:	4619      	mov	r1, r3
 802af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802af42:	2200      	movs	r2, #0
 802af44:	60bb      	str	r3, [r7, #8]
 802af46:	60fa      	str	r2, [r7, #12]
 802af48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802af4c:	f7f7 fe2c 	bl	8022ba8 <__aeabi_uldivmod>
 802af50:	4602      	mov	r2, r0
 802af52:	460b      	mov	r3, r1
 802af54:	4613      	mov	r3, r2
 802af56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802af58:	4b0b      	ldr	r3, [pc, #44]	; (802af88 <HAL_RCC_GetSysClockFreq+0x180>)
 802af5a:	685b      	ldr	r3, [r3, #4]
 802af5c:	0c1b      	lsrs	r3, r3, #16
 802af5e:	f003 0303 	and.w	r3, r3, #3
 802af62:	3301      	adds	r3, #1
 802af64:	005b      	lsls	r3, r3, #1
 802af66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802af68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802af6c:	fbb2 f3f3 	udiv	r3, r2, r3
 802af70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802af72:	e002      	b.n	802af7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802af74:	4b05      	ldr	r3, [pc, #20]	; (802af8c <HAL_RCC_GetSysClockFreq+0x184>)
 802af76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802af78:	bf00      	nop
    }
  }
  return sysclockfreq;
 802af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802af7c:	4618      	mov	r0, r3
 802af7e:	3740      	adds	r7, #64	; 0x40
 802af80:	46bd      	mov	sp, r7
 802af82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802af86:	bf00      	nop
 802af88:	40023800 	.word	0x40023800
 802af8c:	00f42400 	.word	0x00f42400
 802af90:	00989680 	.word	0x00989680

0802af94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802af94:	b480      	push	{r7}
 802af96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802af98:	4b03      	ldr	r3, [pc, #12]	; (802afa8 <HAL_RCC_GetHCLKFreq+0x14>)
 802af9a:	681b      	ldr	r3, [r3, #0]
}
 802af9c:	4618      	mov	r0, r3
 802af9e:	46bd      	mov	sp, r7
 802afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afa4:	4770      	bx	lr
 802afa6:	bf00      	nop
 802afa8:	20000138 	.word	0x20000138

0802afac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802afac:	b580      	push	{r7, lr}
 802afae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802afb0:	f7ff fff0 	bl	802af94 <HAL_RCC_GetHCLKFreq>
 802afb4:	4602      	mov	r2, r0
 802afb6:	4b05      	ldr	r3, [pc, #20]	; (802afcc <HAL_RCC_GetPCLK1Freq+0x20>)
 802afb8:	689b      	ldr	r3, [r3, #8]
 802afba:	0a9b      	lsrs	r3, r3, #10
 802afbc:	f003 0307 	and.w	r3, r3, #7
 802afc0:	4903      	ldr	r1, [pc, #12]	; (802afd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 802afc2:	5ccb      	ldrb	r3, [r1, r3]
 802afc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 802afc8:	4618      	mov	r0, r3
 802afca:	bd80      	pop	{r7, pc}
 802afcc:	40023800 	.word	0x40023800
 802afd0:	080375ac 	.word	0x080375ac

0802afd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802afd4:	b580      	push	{r7, lr}
 802afd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802afd8:	f7ff ffdc 	bl	802af94 <HAL_RCC_GetHCLKFreq>
 802afdc:	4602      	mov	r2, r0
 802afde:	4b05      	ldr	r3, [pc, #20]	; (802aff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 802afe0:	689b      	ldr	r3, [r3, #8]
 802afe2:	0b5b      	lsrs	r3, r3, #13
 802afe4:	f003 0307 	and.w	r3, r3, #7
 802afe8:	4903      	ldr	r1, [pc, #12]	; (802aff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 802afea:	5ccb      	ldrb	r3, [r1, r3]
 802afec:	fa22 f303 	lsr.w	r3, r2, r3
}
 802aff0:	4618      	mov	r0, r3
 802aff2:	bd80      	pop	{r7, pc}
 802aff4:	40023800 	.word	0x40023800
 802aff8:	080375ac 	.word	0x080375ac

0802affc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 802affc:	b580      	push	{r7, lr}
 802affe:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 802b000:	4b06      	ldr	r3, [pc, #24]	; (802b01c <HAL_RCC_NMI_IRQHandler+0x20>)
 802b002:	68db      	ldr	r3, [r3, #12]
 802b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b008:	2b80      	cmp	r3, #128	; 0x80
 802b00a:	d104      	bne.n	802b016 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 802b00c:	f000 f80a 	bl	802b024 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 802b010:	4b03      	ldr	r3, [pc, #12]	; (802b020 <HAL_RCC_NMI_IRQHandler+0x24>)
 802b012:	2280      	movs	r2, #128	; 0x80
 802b014:	701a      	strb	r2, [r3, #0]
  }
}
 802b016:	bf00      	nop
 802b018:	bd80      	pop	{r7, pc}
 802b01a:	bf00      	nop
 802b01c:	40023800 	.word	0x40023800
 802b020:	4002380e 	.word	0x4002380e

0802b024 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 802b024:	b480      	push	{r7}
 802b026:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 802b028:	bf00      	nop
 802b02a:	46bd      	mov	sp, r7
 802b02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b030:	4770      	bx	lr
	...

0802b034 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802b034:	b580      	push	{r7, lr}
 802b036:	b086      	sub	sp, #24
 802b038:	af00      	add	r7, sp, #0
 802b03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802b03c:	2300      	movs	r3, #0
 802b03e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802b040:	2300      	movs	r3, #0
 802b042:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802b044:	687b      	ldr	r3, [r7, #4]
 802b046:	681b      	ldr	r3, [r3, #0]
 802b048:	f003 0301 	and.w	r3, r3, #1
 802b04c:	2b00      	cmp	r3, #0
 802b04e:	d105      	bne.n	802b05c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802b050:	687b      	ldr	r3, [r7, #4]
 802b052:	681b      	ldr	r3, [r3, #0]
 802b054:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802b058:	2b00      	cmp	r3, #0
 802b05a:	d035      	beq.n	802b0c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802b05c:	4b62      	ldr	r3, [pc, #392]	; (802b1e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802b05e:	2200      	movs	r2, #0
 802b060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802b062:	f7fc ff31 	bl	8027ec8 <HAL_GetTick>
 802b066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802b068:	e008      	b.n	802b07c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802b06a:	f7fc ff2d 	bl	8027ec8 <HAL_GetTick>
 802b06e:	4602      	mov	r2, r0
 802b070:	697b      	ldr	r3, [r7, #20]
 802b072:	1ad3      	subs	r3, r2, r3
 802b074:	2b02      	cmp	r3, #2
 802b076:	d901      	bls.n	802b07c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802b078:	2303      	movs	r3, #3
 802b07a:	e0b0      	b.n	802b1de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802b07c:	4b5b      	ldr	r3, [pc, #364]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b07e:	681b      	ldr	r3, [r3, #0]
 802b080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802b084:	2b00      	cmp	r3, #0
 802b086:	d1f0      	bne.n	802b06a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802b088:	687b      	ldr	r3, [r7, #4]
 802b08a:	685b      	ldr	r3, [r3, #4]
 802b08c:	019a      	lsls	r2, r3, #6
 802b08e:	687b      	ldr	r3, [r7, #4]
 802b090:	689b      	ldr	r3, [r3, #8]
 802b092:	071b      	lsls	r3, r3, #28
 802b094:	4955      	ldr	r1, [pc, #340]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b096:	4313      	orrs	r3, r2
 802b098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802b09c:	4b52      	ldr	r3, [pc, #328]	; (802b1e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802b09e:	2201      	movs	r2, #1
 802b0a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802b0a2:	f7fc ff11 	bl	8027ec8 <HAL_GetTick>
 802b0a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802b0a8:	e008      	b.n	802b0bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802b0aa:	f7fc ff0d 	bl	8027ec8 <HAL_GetTick>
 802b0ae:	4602      	mov	r2, r0
 802b0b0:	697b      	ldr	r3, [r7, #20]
 802b0b2:	1ad3      	subs	r3, r2, r3
 802b0b4:	2b02      	cmp	r3, #2
 802b0b6:	d901      	bls.n	802b0bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802b0b8:	2303      	movs	r3, #3
 802b0ba:	e090      	b.n	802b1de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802b0bc:	4b4b      	ldr	r3, [pc, #300]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b0be:	681b      	ldr	r3, [r3, #0]
 802b0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802b0c4:	2b00      	cmp	r3, #0
 802b0c6:	d0f0      	beq.n	802b0aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802b0c8:	687b      	ldr	r3, [r7, #4]
 802b0ca:	681b      	ldr	r3, [r3, #0]
 802b0cc:	f003 0302 	and.w	r3, r3, #2
 802b0d0:	2b00      	cmp	r3, #0
 802b0d2:	f000 8083 	beq.w	802b1dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802b0d6:	2300      	movs	r3, #0
 802b0d8:	60fb      	str	r3, [r7, #12]
 802b0da:	4b44      	ldr	r3, [pc, #272]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b0de:	4a43      	ldr	r2, [pc, #268]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802b0e4:	6413      	str	r3, [r2, #64]	; 0x40
 802b0e6:	4b41      	ldr	r3, [pc, #260]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802b0ee:	60fb      	str	r3, [r7, #12]
 802b0f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802b0f2:	4b3f      	ldr	r3, [pc, #252]	; (802b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802b0f4:	681b      	ldr	r3, [r3, #0]
 802b0f6:	4a3e      	ldr	r2, [pc, #248]	; (802b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802b0f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802b0fe:	f7fc fee3 	bl	8027ec8 <HAL_GetTick>
 802b102:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802b104:	e008      	b.n	802b118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802b106:	f7fc fedf 	bl	8027ec8 <HAL_GetTick>
 802b10a:	4602      	mov	r2, r0
 802b10c:	697b      	ldr	r3, [r7, #20]
 802b10e:	1ad3      	subs	r3, r2, r3
 802b110:	2b02      	cmp	r3, #2
 802b112:	d901      	bls.n	802b118 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 802b114:	2303      	movs	r3, #3
 802b116:	e062      	b.n	802b1de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802b118:	4b35      	ldr	r3, [pc, #212]	; (802b1f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802b11a:	681b      	ldr	r3, [r3, #0]
 802b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b120:	2b00      	cmp	r3, #0
 802b122:	d0f0      	beq.n	802b106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802b124:	4b31      	ldr	r3, [pc, #196]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802b12c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802b12e:	693b      	ldr	r3, [r7, #16]
 802b130:	2b00      	cmp	r3, #0
 802b132:	d02f      	beq.n	802b194 <HAL_RCCEx_PeriphCLKConfig+0x160>
 802b134:	687b      	ldr	r3, [r7, #4]
 802b136:	68db      	ldr	r3, [r3, #12]
 802b138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802b13c:	693a      	ldr	r2, [r7, #16]
 802b13e:	429a      	cmp	r2, r3
 802b140:	d028      	beq.n	802b194 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802b142:	4b2a      	ldr	r3, [pc, #168]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802b14a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802b14c:	4b29      	ldr	r3, [pc, #164]	; (802b1f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802b14e:	2201      	movs	r2, #1
 802b150:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802b152:	4b28      	ldr	r3, [pc, #160]	; (802b1f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802b154:	2200      	movs	r2, #0
 802b156:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802b158:	4a24      	ldr	r2, [pc, #144]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b15a:	693b      	ldr	r3, [r7, #16]
 802b15c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802b15e:	4b23      	ldr	r3, [pc, #140]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b162:	f003 0301 	and.w	r3, r3, #1
 802b166:	2b01      	cmp	r3, #1
 802b168:	d114      	bne.n	802b194 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802b16a:	f7fc fead 	bl	8027ec8 <HAL_GetTick>
 802b16e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802b170:	e00a      	b.n	802b188 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802b172:	f7fc fea9 	bl	8027ec8 <HAL_GetTick>
 802b176:	4602      	mov	r2, r0
 802b178:	697b      	ldr	r3, [r7, #20]
 802b17a:	1ad3      	subs	r3, r2, r3
 802b17c:	f241 3288 	movw	r2, #5000	; 0x1388
 802b180:	4293      	cmp	r3, r2
 802b182:	d901      	bls.n	802b188 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 802b184:	2303      	movs	r3, #3
 802b186:	e02a      	b.n	802b1de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802b188:	4b18      	ldr	r3, [pc, #96]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802b18c:	f003 0302 	and.w	r3, r3, #2
 802b190:	2b00      	cmp	r3, #0
 802b192:	d0ee      	beq.n	802b172 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802b194:	687b      	ldr	r3, [r7, #4]
 802b196:	68db      	ldr	r3, [r3, #12]
 802b198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802b19c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802b1a0:	d10d      	bne.n	802b1be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 802b1a2:	4b12      	ldr	r3, [pc, #72]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1a4:	689b      	ldr	r3, [r3, #8]
 802b1a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802b1aa:	687b      	ldr	r3, [r7, #4]
 802b1ac:	68db      	ldr	r3, [r3, #12]
 802b1ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802b1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802b1b6:	490d      	ldr	r1, [pc, #52]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1b8:	4313      	orrs	r3, r2
 802b1ba:	608b      	str	r3, [r1, #8]
 802b1bc:	e005      	b.n	802b1ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 802b1be:	4b0b      	ldr	r3, [pc, #44]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1c0:	689b      	ldr	r3, [r3, #8]
 802b1c2:	4a0a      	ldr	r2, [pc, #40]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802b1c8:	6093      	str	r3, [r2, #8]
 802b1ca:	4b08      	ldr	r3, [pc, #32]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802b1ce:	687b      	ldr	r3, [r7, #4]
 802b1d0:	68db      	ldr	r3, [r3, #12]
 802b1d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802b1d6:	4905      	ldr	r1, [pc, #20]	; (802b1ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802b1d8:	4313      	orrs	r3, r2
 802b1da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802b1dc:	2300      	movs	r3, #0
}
 802b1de:	4618      	mov	r0, r3
 802b1e0:	3718      	adds	r7, #24
 802b1e2:	46bd      	mov	sp, r7
 802b1e4:	bd80      	pop	{r7, pc}
 802b1e6:	bf00      	nop
 802b1e8:	42470068 	.word	0x42470068
 802b1ec:	40023800 	.word	0x40023800
 802b1f0:	40007000 	.word	0x40007000
 802b1f4:	42470e40 	.word	0x42470e40

0802b1f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802b1f8:	b580      	push	{r7, lr}
 802b1fa:	b084      	sub	sp, #16
 802b1fc:	af00      	add	r7, sp, #0
 802b1fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 802b200:	2301      	movs	r3, #1
 802b202:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 802b204:	687b      	ldr	r3, [r7, #4]
 802b206:	2b00      	cmp	r3, #0
 802b208:	d101      	bne.n	802b20e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802b20a:	2301      	movs	r3, #1
 802b20c:	e066      	b.n	802b2dc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 802b20e:	687b      	ldr	r3, [r7, #4]
 802b210:	7f5b      	ldrb	r3, [r3, #29]
 802b212:	b2db      	uxtb	r3, r3
 802b214:	2b00      	cmp	r3, #0
 802b216:	d105      	bne.n	802b224 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802b218:	687b      	ldr	r3, [r7, #4]
 802b21a:	2200      	movs	r2, #0
 802b21c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802b21e:	6878      	ldr	r0, [r7, #4]
 802b220:	f7fb fbea 	bl	80269f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 802b224:	687b      	ldr	r3, [r7, #4]
 802b226:	2202      	movs	r2, #2
 802b228:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b22a:	687b      	ldr	r3, [r7, #4]
 802b22c:	681b      	ldr	r3, [r3, #0]
 802b22e:	22ca      	movs	r2, #202	; 0xca
 802b230:	625a      	str	r2, [r3, #36]	; 0x24
 802b232:	687b      	ldr	r3, [r7, #4]
 802b234:	681b      	ldr	r3, [r3, #0]
 802b236:	2253      	movs	r2, #83	; 0x53
 802b238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b23a:	6878      	ldr	r0, [r7, #4]
 802b23c:	f000 f998 	bl	802b570 <RTC_EnterInitMode>
 802b240:	4603      	mov	r3, r0
 802b242:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802b244:	7bfb      	ldrb	r3, [r7, #15]
 802b246:	2b00      	cmp	r3, #0
 802b248:	d12c      	bne.n	802b2a4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802b24a:	687b      	ldr	r3, [r7, #4]
 802b24c:	681b      	ldr	r3, [r3, #0]
 802b24e:	689b      	ldr	r3, [r3, #8]
 802b250:	687a      	ldr	r2, [r7, #4]
 802b252:	6812      	ldr	r2, [r2, #0]
 802b254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802b258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b25c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802b25e:	687b      	ldr	r3, [r7, #4]
 802b260:	681b      	ldr	r3, [r3, #0]
 802b262:	6899      	ldr	r1, [r3, #8]
 802b264:	687b      	ldr	r3, [r7, #4]
 802b266:	685a      	ldr	r2, [r3, #4]
 802b268:	687b      	ldr	r3, [r7, #4]
 802b26a:	691b      	ldr	r3, [r3, #16]
 802b26c:	431a      	orrs	r2, r3
 802b26e:	687b      	ldr	r3, [r7, #4]
 802b270:	695b      	ldr	r3, [r3, #20]
 802b272:	431a      	orrs	r2, r3
 802b274:	687b      	ldr	r3, [r7, #4]
 802b276:	681b      	ldr	r3, [r3, #0]
 802b278:	430a      	orrs	r2, r1
 802b27a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802b27c:	687b      	ldr	r3, [r7, #4]
 802b27e:	681b      	ldr	r3, [r3, #0]
 802b280:	687a      	ldr	r2, [r7, #4]
 802b282:	68d2      	ldr	r2, [r2, #12]
 802b284:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 802b286:	687b      	ldr	r3, [r7, #4]
 802b288:	681b      	ldr	r3, [r3, #0]
 802b28a:	6919      	ldr	r1, [r3, #16]
 802b28c:	687b      	ldr	r3, [r7, #4]
 802b28e:	689b      	ldr	r3, [r3, #8]
 802b290:	041a      	lsls	r2, r3, #16
 802b292:	687b      	ldr	r3, [r7, #4]
 802b294:	681b      	ldr	r3, [r3, #0]
 802b296:	430a      	orrs	r2, r1
 802b298:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b29a:	6878      	ldr	r0, [r7, #4]
 802b29c:	f000 f99f 	bl	802b5de <RTC_ExitInitMode>
 802b2a0:	4603      	mov	r3, r0
 802b2a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 802b2a4:	7bfb      	ldrb	r3, [r7, #15]
 802b2a6:	2b00      	cmp	r3, #0
 802b2a8:	d113      	bne.n	802b2d2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 802b2aa:	687b      	ldr	r3, [r7, #4]
 802b2ac:	681b      	ldr	r3, [r3, #0]
 802b2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b2b0:	687b      	ldr	r3, [r7, #4]
 802b2b2:	681b      	ldr	r3, [r3, #0]
 802b2b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802b2b8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802b2ba:	687b      	ldr	r3, [r7, #4]
 802b2bc:	681b      	ldr	r3, [r3, #0]
 802b2be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802b2c0:	687b      	ldr	r3, [r7, #4]
 802b2c2:	699a      	ldr	r2, [r3, #24]
 802b2c4:	687b      	ldr	r3, [r7, #4]
 802b2c6:	681b      	ldr	r3, [r3, #0]
 802b2c8:	430a      	orrs	r2, r1
 802b2ca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 802b2cc:	687b      	ldr	r3, [r7, #4]
 802b2ce:	2201      	movs	r2, #1
 802b2d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b2d2:	687b      	ldr	r3, [r7, #4]
 802b2d4:	681b      	ldr	r3, [r3, #0]
 802b2d6:	22ff      	movs	r2, #255	; 0xff
 802b2d8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 802b2dc:	4618      	mov	r0, r3
 802b2de:	3710      	adds	r7, #16
 802b2e0:	46bd      	mov	sp, r7
 802b2e2:	bd80      	pop	{r7, pc}

0802b2e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802b2e4:	b590      	push	{r4, r7, lr}
 802b2e6:	b087      	sub	sp, #28
 802b2e8:	af00      	add	r7, sp, #0
 802b2ea:	60f8      	str	r0, [r7, #12]
 802b2ec:	60b9      	str	r1, [r7, #8]
 802b2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802b2f0:	2300      	movs	r3, #0
 802b2f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802b2f4:	68fb      	ldr	r3, [r7, #12]
 802b2f6:	7f1b      	ldrb	r3, [r3, #28]
 802b2f8:	2b01      	cmp	r3, #1
 802b2fa:	d101      	bne.n	802b300 <HAL_RTC_SetTime+0x1c>
 802b2fc:	2302      	movs	r3, #2
 802b2fe:	e087      	b.n	802b410 <HAL_RTC_SetTime+0x12c>
 802b300:	68fb      	ldr	r3, [r7, #12]
 802b302:	2201      	movs	r2, #1
 802b304:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802b306:	68fb      	ldr	r3, [r7, #12]
 802b308:	2202      	movs	r2, #2
 802b30a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 802b30c:	687b      	ldr	r3, [r7, #4]
 802b30e:	2b00      	cmp	r3, #0
 802b310:	d126      	bne.n	802b360 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802b312:	68fb      	ldr	r3, [r7, #12]
 802b314:	681b      	ldr	r3, [r3, #0]
 802b316:	689b      	ldr	r3, [r3, #8]
 802b318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b31c:	2b00      	cmp	r3, #0
 802b31e:	d102      	bne.n	802b326 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802b320:	68bb      	ldr	r3, [r7, #8]
 802b322:	2200      	movs	r2, #0
 802b324:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b326:	68bb      	ldr	r3, [r7, #8]
 802b328:	781b      	ldrb	r3, [r3, #0]
 802b32a:	4618      	mov	r0, r3
 802b32c:	f000 f97c 	bl	802b628 <RTC_ByteToBcd2>
 802b330:	4603      	mov	r3, r0
 802b332:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802b334:	68bb      	ldr	r3, [r7, #8]
 802b336:	785b      	ldrb	r3, [r3, #1]
 802b338:	4618      	mov	r0, r3
 802b33a:	f000 f975 	bl	802b628 <RTC_ByteToBcd2>
 802b33e:	4603      	mov	r3, r0
 802b340:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b342:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 802b344:	68bb      	ldr	r3, [r7, #8]
 802b346:	789b      	ldrb	r3, [r3, #2]
 802b348:	4618      	mov	r0, r3
 802b34a:	f000 f96d 	bl	802b628 <RTC_ByteToBcd2>
 802b34e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802b350:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 802b354:	68bb      	ldr	r3, [r7, #8]
 802b356:	78db      	ldrb	r3, [r3, #3]
 802b358:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802b35a:	4313      	orrs	r3, r2
 802b35c:	617b      	str	r3, [r7, #20]
 802b35e:	e018      	b.n	802b392 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802b360:	68fb      	ldr	r3, [r7, #12]
 802b362:	681b      	ldr	r3, [r3, #0]
 802b364:	689b      	ldr	r3, [r3, #8]
 802b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b36a:	2b00      	cmp	r3, #0
 802b36c:	d102      	bne.n	802b374 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802b36e:	68bb      	ldr	r3, [r7, #8]
 802b370:	2200      	movs	r2, #0
 802b372:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b374:	68bb      	ldr	r3, [r7, #8]
 802b376:	781b      	ldrb	r3, [r3, #0]
 802b378:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802b37a:	68bb      	ldr	r3, [r7, #8]
 802b37c:	785b      	ldrb	r3, [r3, #1]
 802b37e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b380:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 802b382:	68ba      	ldr	r2, [r7, #8]
 802b384:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802b386:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 802b388:	68bb      	ldr	r3, [r7, #8]
 802b38a:	78db      	ldrb	r3, [r3, #3]
 802b38c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802b38e:	4313      	orrs	r3, r2
 802b390:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b392:	68fb      	ldr	r3, [r7, #12]
 802b394:	681b      	ldr	r3, [r3, #0]
 802b396:	22ca      	movs	r2, #202	; 0xca
 802b398:	625a      	str	r2, [r3, #36]	; 0x24
 802b39a:	68fb      	ldr	r3, [r7, #12]
 802b39c:	681b      	ldr	r3, [r3, #0]
 802b39e:	2253      	movs	r2, #83	; 0x53
 802b3a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b3a2:	68f8      	ldr	r0, [r7, #12]
 802b3a4:	f000 f8e4 	bl	802b570 <RTC_EnterInitMode>
 802b3a8:	4603      	mov	r3, r0
 802b3aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802b3ac:	7cfb      	ldrb	r3, [r7, #19]
 802b3ae:	2b00      	cmp	r3, #0
 802b3b0:	d120      	bne.n	802b3f4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802b3b2:	68fb      	ldr	r3, [r7, #12]
 802b3b4:	681a      	ldr	r2, [r3, #0]
 802b3b6:	697b      	ldr	r3, [r7, #20]
 802b3b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802b3bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802b3c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 802b3c2:	68fb      	ldr	r3, [r7, #12]
 802b3c4:	681b      	ldr	r3, [r3, #0]
 802b3c6:	689a      	ldr	r2, [r3, #8]
 802b3c8:	68fb      	ldr	r3, [r7, #12]
 802b3ca:	681b      	ldr	r3, [r3, #0]
 802b3cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802b3d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802b3d2:	68fb      	ldr	r3, [r7, #12]
 802b3d4:	681b      	ldr	r3, [r3, #0]
 802b3d6:	6899      	ldr	r1, [r3, #8]
 802b3d8:	68bb      	ldr	r3, [r7, #8]
 802b3da:	68da      	ldr	r2, [r3, #12]
 802b3dc:	68bb      	ldr	r3, [r7, #8]
 802b3de:	691b      	ldr	r3, [r3, #16]
 802b3e0:	431a      	orrs	r2, r3
 802b3e2:	68fb      	ldr	r3, [r7, #12]
 802b3e4:	681b      	ldr	r3, [r3, #0]
 802b3e6:	430a      	orrs	r2, r1
 802b3e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b3ea:	68f8      	ldr	r0, [r7, #12]
 802b3ec:	f000 f8f7 	bl	802b5de <RTC_ExitInitMode>
 802b3f0:	4603      	mov	r3, r0
 802b3f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802b3f4:	7cfb      	ldrb	r3, [r7, #19]
 802b3f6:	2b00      	cmp	r3, #0
 802b3f8:	d102      	bne.n	802b400 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802b3fa:	68fb      	ldr	r3, [r7, #12]
 802b3fc:	2201      	movs	r2, #1
 802b3fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b400:	68fb      	ldr	r3, [r7, #12]
 802b402:	681b      	ldr	r3, [r3, #0]
 802b404:	22ff      	movs	r2, #255	; 0xff
 802b406:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802b408:	68fb      	ldr	r3, [r7, #12]
 802b40a:	2200      	movs	r2, #0
 802b40c:	771a      	strb	r2, [r3, #28]

  return status;
 802b40e:	7cfb      	ldrb	r3, [r7, #19]
}
 802b410:	4618      	mov	r0, r3
 802b412:	371c      	adds	r7, #28
 802b414:	46bd      	mov	sp, r7
 802b416:	bd90      	pop	{r4, r7, pc}

0802b418 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 802b418:	b590      	push	{r4, r7, lr}
 802b41a:	b087      	sub	sp, #28
 802b41c:	af00      	add	r7, sp, #0
 802b41e:	60f8      	str	r0, [r7, #12]
 802b420:	60b9      	str	r1, [r7, #8]
 802b422:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 802b424:	2300      	movs	r3, #0
 802b426:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802b428:	68fb      	ldr	r3, [r7, #12]
 802b42a:	7f1b      	ldrb	r3, [r3, #28]
 802b42c:	2b01      	cmp	r3, #1
 802b42e:	d101      	bne.n	802b434 <HAL_RTC_SetDate+0x1c>
 802b430:	2302      	movs	r3, #2
 802b432:	e071      	b.n	802b518 <HAL_RTC_SetDate+0x100>
 802b434:	68fb      	ldr	r3, [r7, #12]
 802b436:	2201      	movs	r2, #1
 802b438:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802b43a:	68fb      	ldr	r3, [r7, #12]
 802b43c:	2202      	movs	r2, #2
 802b43e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802b440:	687b      	ldr	r3, [r7, #4]
 802b442:	2b00      	cmp	r3, #0
 802b444:	d10e      	bne.n	802b464 <HAL_RTC_SetDate+0x4c>
 802b446:	68bb      	ldr	r3, [r7, #8]
 802b448:	785b      	ldrb	r3, [r3, #1]
 802b44a:	f003 0310 	and.w	r3, r3, #16
 802b44e:	2b00      	cmp	r3, #0
 802b450:	d008      	beq.n	802b464 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802b452:	68bb      	ldr	r3, [r7, #8]
 802b454:	785b      	ldrb	r3, [r3, #1]
 802b456:	f023 0310 	bic.w	r3, r3, #16
 802b45a:	b2db      	uxtb	r3, r3
 802b45c:	330a      	adds	r3, #10
 802b45e:	b2da      	uxtb	r2, r3
 802b460:	68bb      	ldr	r3, [r7, #8]
 802b462:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 802b464:	687b      	ldr	r3, [r7, #4]
 802b466:	2b00      	cmp	r3, #0
 802b468:	d11c      	bne.n	802b4a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b46a:	68bb      	ldr	r3, [r7, #8]
 802b46c:	78db      	ldrb	r3, [r3, #3]
 802b46e:	4618      	mov	r0, r3
 802b470:	f000 f8da 	bl	802b628 <RTC_ByteToBcd2>
 802b474:	4603      	mov	r3, r0
 802b476:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802b478:	68bb      	ldr	r3, [r7, #8]
 802b47a:	785b      	ldrb	r3, [r3, #1]
 802b47c:	4618      	mov	r0, r3
 802b47e:	f000 f8d3 	bl	802b628 <RTC_ByteToBcd2>
 802b482:	4603      	mov	r3, r0
 802b484:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b486:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 802b488:	68bb      	ldr	r3, [r7, #8]
 802b48a:	789b      	ldrb	r3, [r3, #2]
 802b48c:	4618      	mov	r0, r3
 802b48e:	f000 f8cb 	bl	802b628 <RTC_ByteToBcd2>
 802b492:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802b494:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 802b498:	68bb      	ldr	r3, [r7, #8]
 802b49a:	781b      	ldrb	r3, [r3, #0]
 802b49c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802b49e:	4313      	orrs	r3, r2
 802b4a0:	617b      	str	r3, [r7, #20]
 802b4a2:	e00e      	b.n	802b4c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b4a4:	68bb      	ldr	r3, [r7, #8]
 802b4a6:	78db      	ldrb	r3, [r3, #3]
 802b4a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802b4aa:	68bb      	ldr	r3, [r7, #8]
 802b4ac:	785b      	ldrb	r3, [r3, #1]
 802b4ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b4b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 802b4b2:	68ba      	ldr	r2, [r7, #8]
 802b4b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802b4b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 802b4b8:	68bb      	ldr	r3, [r7, #8]
 802b4ba:	781b      	ldrb	r3, [r3, #0]
 802b4bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802b4be:	4313      	orrs	r3, r2
 802b4c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802b4c2:	68fb      	ldr	r3, [r7, #12]
 802b4c4:	681b      	ldr	r3, [r3, #0]
 802b4c6:	22ca      	movs	r2, #202	; 0xca
 802b4c8:	625a      	str	r2, [r3, #36]	; 0x24
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	681b      	ldr	r3, [r3, #0]
 802b4ce:	2253      	movs	r2, #83	; 0x53
 802b4d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802b4d2:	68f8      	ldr	r0, [r7, #12]
 802b4d4:	f000 f84c 	bl	802b570 <RTC_EnterInitMode>
 802b4d8:	4603      	mov	r3, r0
 802b4da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802b4dc:	7cfb      	ldrb	r3, [r7, #19]
 802b4de:	2b00      	cmp	r3, #0
 802b4e0:	d10c      	bne.n	802b4fc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802b4e2:	68fb      	ldr	r3, [r7, #12]
 802b4e4:	681a      	ldr	r2, [r3, #0]
 802b4e6:	697b      	ldr	r3, [r7, #20]
 802b4e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802b4ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802b4f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802b4f2:	68f8      	ldr	r0, [r7, #12]
 802b4f4:	f000 f873 	bl	802b5de <RTC_ExitInitMode>
 802b4f8:	4603      	mov	r3, r0
 802b4fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802b4fc:	7cfb      	ldrb	r3, [r7, #19]
 802b4fe:	2b00      	cmp	r3, #0
 802b500:	d102      	bne.n	802b508 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802b502:	68fb      	ldr	r3, [r7, #12]
 802b504:	2201      	movs	r2, #1
 802b506:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802b508:	68fb      	ldr	r3, [r7, #12]
 802b50a:	681b      	ldr	r3, [r3, #0]
 802b50c:	22ff      	movs	r2, #255	; 0xff
 802b50e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802b510:	68fb      	ldr	r3, [r7, #12]
 802b512:	2200      	movs	r2, #0
 802b514:	771a      	strb	r2, [r3, #28]

  return status;
 802b516:	7cfb      	ldrb	r3, [r7, #19]
}
 802b518:	4618      	mov	r0, r3
 802b51a:	371c      	adds	r7, #28
 802b51c:	46bd      	mov	sp, r7
 802b51e:	bd90      	pop	{r4, r7, pc}

0802b520 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 802b520:	b580      	push	{r7, lr}
 802b522:	b084      	sub	sp, #16
 802b524:	af00      	add	r7, sp, #0
 802b526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802b528:	2300      	movs	r3, #0
 802b52a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802b52c:	687b      	ldr	r3, [r7, #4]
 802b52e:	681b      	ldr	r3, [r3, #0]
 802b530:	68da      	ldr	r2, [r3, #12]
 802b532:	687b      	ldr	r3, [r7, #4]
 802b534:	681b      	ldr	r3, [r3, #0]
 802b536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802b53a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 802b53c:	f7fc fcc4 	bl	8027ec8 <HAL_GetTick>
 802b540:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802b542:	e009      	b.n	802b558 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802b544:	f7fc fcc0 	bl	8027ec8 <HAL_GetTick>
 802b548:	4602      	mov	r2, r0
 802b54a:	68fb      	ldr	r3, [r7, #12]
 802b54c:	1ad3      	subs	r3, r2, r3
 802b54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b552:	d901      	bls.n	802b558 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802b554:	2303      	movs	r3, #3
 802b556:	e007      	b.n	802b568 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802b558:	687b      	ldr	r3, [r7, #4]
 802b55a:	681b      	ldr	r3, [r3, #0]
 802b55c:	68db      	ldr	r3, [r3, #12]
 802b55e:	f003 0320 	and.w	r3, r3, #32
 802b562:	2b00      	cmp	r3, #0
 802b564:	d0ee      	beq.n	802b544 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802b566:	2300      	movs	r3, #0
}
 802b568:	4618      	mov	r0, r3
 802b56a:	3710      	adds	r7, #16
 802b56c:	46bd      	mov	sp, r7
 802b56e:	bd80      	pop	{r7, pc}

0802b570 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802b570:	b580      	push	{r7, lr}
 802b572:	b084      	sub	sp, #16
 802b574:	af00      	add	r7, sp, #0
 802b576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802b578:	2300      	movs	r3, #0
 802b57a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802b57c:	2300      	movs	r3, #0
 802b57e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 802b580:	687b      	ldr	r3, [r7, #4]
 802b582:	681b      	ldr	r3, [r3, #0]
 802b584:	68db      	ldr	r3, [r3, #12]
 802b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b58a:	2b00      	cmp	r3, #0
 802b58c:	d122      	bne.n	802b5d4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802b58e:	687b      	ldr	r3, [r7, #4]
 802b590:	681b      	ldr	r3, [r3, #0]
 802b592:	68da      	ldr	r2, [r3, #12]
 802b594:	687b      	ldr	r3, [r7, #4]
 802b596:	681b      	ldr	r3, [r3, #0]
 802b598:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802b59c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802b59e:	f7fc fc93 	bl	8027ec8 <HAL_GetTick>
 802b5a2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802b5a4:	e00c      	b.n	802b5c0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802b5a6:	f7fc fc8f 	bl	8027ec8 <HAL_GetTick>
 802b5aa:	4602      	mov	r2, r0
 802b5ac:	68bb      	ldr	r3, [r7, #8]
 802b5ae:	1ad3      	subs	r3, r2, r3
 802b5b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b5b4:	d904      	bls.n	802b5c0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 802b5b6:	687b      	ldr	r3, [r7, #4]
 802b5b8:	2204      	movs	r2, #4
 802b5ba:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 802b5bc:	2301      	movs	r3, #1
 802b5be:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802b5c0:	687b      	ldr	r3, [r7, #4]
 802b5c2:	681b      	ldr	r3, [r3, #0]
 802b5c4:	68db      	ldr	r3, [r3, #12]
 802b5c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b5ca:	2b00      	cmp	r3, #0
 802b5cc:	d102      	bne.n	802b5d4 <RTC_EnterInitMode+0x64>
 802b5ce:	7bfb      	ldrb	r3, [r7, #15]
 802b5d0:	2b01      	cmp	r3, #1
 802b5d2:	d1e8      	bne.n	802b5a6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 802b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 802b5d6:	4618      	mov	r0, r3
 802b5d8:	3710      	adds	r7, #16
 802b5da:	46bd      	mov	sp, r7
 802b5dc:	bd80      	pop	{r7, pc}

0802b5de <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802b5de:	b580      	push	{r7, lr}
 802b5e0:	b084      	sub	sp, #16
 802b5e2:	af00      	add	r7, sp, #0
 802b5e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802b5e6:	2300      	movs	r3, #0
 802b5e8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802b5ea:	687b      	ldr	r3, [r7, #4]
 802b5ec:	681b      	ldr	r3, [r3, #0]
 802b5ee:	68da      	ldr	r2, [r3, #12]
 802b5f0:	687b      	ldr	r3, [r7, #4]
 802b5f2:	681b      	ldr	r3, [r3, #0]
 802b5f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802b5f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 802b5fa:	687b      	ldr	r3, [r7, #4]
 802b5fc:	681b      	ldr	r3, [r3, #0]
 802b5fe:	689b      	ldr	r3, [r3, #8]
 802b600:	f003 0320 	and.w	r3, r3, #32
 802b604:	2b00      	cmp	r3, #0
 802b606:	d10a      	bne.n	802b61e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802b608:	6878      	ldr	r0, [r7, #4]
 802b60a:	f7ff ff89 	bl	802b520 <HAL_RTC_WaitForSynchro>
 802b60e:	4603      	mov	r3, r0
 802b610:	2b00      	cmp	r3, #0
 802b612:	d004      	beq.n	802b61e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802b614:	687b      	ldr	r3, [r7, #4]
 802b616:	2204      	movs	r2, #4
 802b618:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 802b61a:	2301      	movs	r3, #1
 802b61c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802b61e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b620:	4618      	mov	r0, r3
 802b622:	3710      	adds	r7, #16
 802b624:	46bd      	mov	sp, r7
 802b626:	bd80      	pop	{r7, pc}

0802b628 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 802b628:	b480      	push	{r7}
 802b62a:	b085      	sub	sp, #20
 802b62c:	af00      	add	r7, sp, #0
 802b62e:	4603      	mov	r3, r0
 802b630:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 802b632:	2300      	movs	r3, #0
 802b634:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 802b636:	e005      	b.n	802b644 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 802b638:	7bfb      	ldrb	r3, [r7, #15]
 802b63a:	3301      	adds	r3, #1
 802b63c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 802b63e:	79fb      	ldrb	r3, [r7, #7]
 802b640:	3b0a      	subs	r3, #10
 802b642:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 802b644:	79fb      	ldrb	r3, [r7, #7]
 802b646:	2b09      	cmp	r3, #9
 802b648:	d8f6      	bhi.n	802b638 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 802b64a:	7bfb      	ldrb	r3, [r7, #15]
 802b64c:	011b      	lsls	r3, r3, #4
 802b64e:	b2da      	uxtb	r2, r3
 802b650:	79fb      	ldrb	r3, [r7, #7]
 802b652:	4313      	orrs	r3, r2
 802b654:	b2db      	uxtb	r3, r3
}
 802b656:	4618      	mov	r0, r3
 802b658:	3714      	adds	r7, #20
 802b65a:	46bd      	mov	sp, r7
 802b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b660:	4770      	bx	lr

0802b662 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802b662:	b580      	push	{r7, lr}
 802b664:	b082      	sub	sp, #8
 802b666:	af00      	add	r7, sp, #0
 802b668:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802b66a:	687b      	ldr	r3, [r7, #4]
 802b66c:	2b00      	cmp	r3, #0
 802b66e:	d101      	bne.n	802b674 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802b670:	2301      	movs	r3, #1
 802b672:	e07b      	b.n	802b76c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802b674:	687b      	ldr	r3, [r7, #4]
 802b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b678:	2b00      	cmp	r3, #0
 802b67a:	d108      	bne.n	802b68e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	685b      	ldr	r3, [r3, #4]
 802b680:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b684:	d009      	beq.n	802b69a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802b686:	687b      	ldr	r3, [r7, #4]
 802b688:	2200      	movs	r2, #0
 802b68a:	61da      	str	r2, [r3, #28]
 802b68c:	e005      	b.n	802b69a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802b68e:	687b      	ldr	r3, [r7, #4]
 802b690:	2200      	movs	r2, #0
 802b692:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802b694:	687b      	ldr	r3, [r7, #4]
 802b696:	2200      	movs	r2, #0
 802b698:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802b69a:	687b      	ldr	r3, [r7, #4]
 802b69c:	2200      	movs	r2, #0
 802b69e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b6a6:	b2db      	uxtb	r3, r3
 802b6a8:	2b00      	cmp	r3, #0
 802b6aa:	d106      	bne.n	802b6ba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	2200      	movs	r2, #0
 802b6b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802b6b4:	6878      	ldr	r0, [r7, #4]
 802b6b6:	f7fb f9ff 	bl	8026ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802b6ba:	687b      	ldr	r3, [r7, #4]
 802b6bc:	2202      	movs	r2, #2
 802b6be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802b6c2:	687b      	ldr	r3, [r7, #4]
 802b6c4:	681b      	ldr	r3, [r3, #0]
 802b6c6:	681a      	ldr	r2, [r3, #0]
 802b6c8:	687b      	ldr	r3, [r7, #4]
 802b6ca:	681b      	ldr	r3, [r3, #0]
 802b6cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b6d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802b6d2:	687b      	ldr	r3, [r7, #4]
 802b6d4:	685b      	ldr	r3, [r3, #4]
 802b6d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802b6da:	687b      	ldr	r3, [r7, #4]
 802b6dc:	689b      	ldr	r3, [r3, #8]
 802b6de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802b6e2:	431a      	orrs	r2, r3
 802b6e4:	687b      	ldr	r3, [r7, #4]
 802b6e6:	68db      	ldr	r3, [r3, #12]
 802b6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802b6ec:	431a      	orrs	r2, r3
 802b6ee:	687b      	ldr	r3, [r7, #4]
 802b6f0:	691b      	ldr	r3, [r3, #16]
 802b6f2:	f003 0302 	and.w	r3, r3, #2
 802b6f6:	431a      	orrs	r2, r3
 802b6f8:	687b      	ldr	r3, [r7, #4]
 802b6fa:	695b      	ldr	r3, [r3, #20]
 802b6fc:	f003 0301 	and.w	r3, r3, #1
 802b700:	431a      	orrs	r2, r3
 802b702:	687b      	ldr	r3, [r7, #4]
 802b704:	699b      	ldr	r3, [r3, #24]
 802b706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b70a:	431a      	orrs	r2, r3
 802b70c:	687b      	ldr	r3, [r7, #4]
 802b70e:	69db      	ldr	r3, [r3, #28]
 802b710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802b714:	431a      	orrs	r2, r3
 802b716:	687b      	ldr	r3, [r7, #4]
 802b718:	6a1b      	ldr	r3, [r3, #32]
 802b71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b71e:	ea42 0103 	orr.w	r1, r2, r3
 802b722:	687b      	ldr	r3, [r7, #4]
 802b724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b726:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802b72a:	687b      	ldr	r3, [r7, #4]
 802b72c:	681b      	ldr	r3, [r3, #0]
 802b72e:	430a      	orrs	r2, r1
 802b730:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802b732:	687b      	ldr	r3, [r7, #4]
 802b734:	699b      	ldr	r3, [r3, #24]
 802b736:	0c1b      	lsrs	r3, r3, #16
 802b738:	f003 0104 	and.w	r1, r3, #4
 802b73c:	687b      	ldr	r3, [r7, #4]
 802b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b740:	f003 0210 	and.w	r2, r3, #16
 802b744:	687b      	ldr	r3, [r7, #4]
 802b746:	681b      	ldr	r3, [r3, #0]
 802b748:	430a      	orrs	r2, r1
 802b74a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802b74c:	687b      	ldr	r3, [r7, #4]
 802b74e:	681b      	ldr	r3, [r3, #0]
 802b750:	69da      	ldr	r2, [r3, #28]
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	681b      	ldr	r3, [r3, #0]
 802b756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802b75a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802b75c:	687b      	ldr	r3, [r7, #4]
 802b75e:	2200      	movs	r2, #0
 802b760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802b762:	687b      	ldr	r3, [r7, #4]
 802b764:	2201      	movs	r2, #1
 802b766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802b76a:	2300      	movs	r3, #0
}
 802b76c:	4618      	mov	r0, r3
 802b76e:	3708      	adds	r7, #8
 802b770:	46bd      	mov	sp, r7
 802b772:	bd80      	pop	{r7, pc}

0802b774 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 802b774:	b480      	push	{r7}
 802b776:	b087      	sub	sp, #28
 802b778:	af00      	add	r7, sp, #0
 802b77a:	60f8      	str	r0, [r7, #12]
 802b77c:	60b9      	str	r1, [r7, #8]
 802b77e:	607a      	str	r2, [r7, #4]
 802b780:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802b782:	2300      	movs	r3, #0
 802b784:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 802b786:	68fb      	ldr	r3, [r7, #12]
 802b788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b78c:	2b01      	cmp	r3, #1
 802b78e:	d101      	bne.n	802b794 <HAL_SPI_TransmitReceive_IT+0x20>
 802b790:	2302      	movs	r3, #2
 802b792:	e075      	b.n	802b880 <HAL_SPI_TransmitReceive_IT+0x10c>
 802b794:	68fb      	ldr	r3, [r7, #12]
 802b796:	2201      	movs	r2, #1
 802b798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802b79c:	68fb      	ldr	r3, [r7, #12]
 802b79e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b7a2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 802b7a4:	68fb      	ldr	r3, [r7, #12]
 802b7a6:	685b      	ldr	r3, [r3, #4]
 802b7a8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802b7aa:	7dbb      	ldrb	r3, [r7, #22]
 802b7ac:	2b01      	cmp	r3, #1
 802b7ae:	d00d      	beq.n	802b7cc <HAL_SPI_TransmitReceive_IT+0x58>
 802b7b0:	693b      	ldr	r3, [r7, #16]
 802b7b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b7b6:	d106      	bne.n	802b7c6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802b7b8:	68fb      	ldr	r3, [r7, #12]
 802b7ba:	689b      	ldr	r3, [r3, #8]
 802b7bc:	2b00      	cmp	r3, #0
 802b7be:	d102      	bne.n	802b7c6 <HAL_SPI_TransmitReceive_IT+0x52>
 802b7c0:	7dbb      	ldrb	r3, [r7, #22]
 802b7c2:	2b04      	cmp	r3, #4
 802b7c4:	d002      	beq.n	802b7cc <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 802b7c6:	2302      	movs	r3, #2
 802b7c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b7ca:	e054      	b.n	802b876 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802b7cc:	68bb      	ldr	r3, [r7, #8]
 802b7ce:	2b00      	cmp	r3, #0
 802b7d0:	d005      	beq.n	802b7de <HAL_SPI_TransmitReceive_IT+0x6a>
 802b7d2:	687b      	ldr	r3, [r7, #4]
 802b7d4:	2b00      	cmp	r3, #0
 802b7d6:	d002      	beq.n	802b7de <HAL_SPI_TransmitReceive_IT+0x6a>
 802b7d8:	887b      	ldrh	r3, [r7, #2]
 802b7da:	2b00      	cmp	r3, #0
 802b7dc:	d102      	bne.n	802b7e4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 802b7de:	2301      	movs	r3, #1
 802b7e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b7e2:	e048      	b.n	802b876 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802b7e4:	68fb      	ldr	r3, [r7, #12]
 802b7e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b7ea:	b2db      	uxtb	r3, r3
 802b7ec:	2b04      	cmp	r3, #4
 802b7ee:	d003      	beq.n	802b7f8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802b7f0:	68fb      	ldr	r3, [r7, #12]
 802b7f2:	2205      	movs	r2, #5
 802b7f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b7f8:	68fb      	ldr	r3, [r7, #12]
 802b7fa:	2200      	movs	r2, #0
 802b7fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802b7fe:	68fb      	ldr	r3, [r7, #12]
 802b800:	68ba      	ldr	r2, [r7, #8]
 802b802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802b804:	68fb      	ldr	r3, [r7, #12]
 802b806:	887a      	ldrh	r2, [r7, #2]
 802b808:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802b80a:	68fb      	ldr	r3, [r7, #12]
 802b80c:	887a      	ldrh	r2, [r7, #2]
 802b80e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802b810:	68fb      	ldr	r3, [r7, #12]
 802b812:	687a      	ldr	r2, [r7, #4]
 802b814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802b816:	68fb      	ldr	r3, [r7, #12]
 802b818:	887a      	ldrh	r2, [r7, #2]
 802b81a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802b81c:	68fb      	ldr	r3, [r7, #12]
 802b81e:	887a      	ldrh	r2, [r7, #2]
 802b820:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802b822:	68fb      	ldr	r3, [r7, #12]
 802b824:	68db      	ldr	r3, [r3, #12]
 802b826:	2b00      	cmp	r3, #0
 802b828:	d006      	beq.n	802b838 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 802b82a:	68fb      	ldr	r3, [r7, #12]
 802b82c:	4a17      	ldr	r2, [pc, #92]	; (802b88c <HAL_SPI_TransmitReceive_IT+0x118>)
 802b82e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 802b830:	68fb      	ldr	r3, [r7, #12]
 802b832:	4a17      	ldr	r2, [pc, #92]	; (802b890 <HAL_SPI_TransmitReceive_IT+0x11c>)
 802b834:	645a      	str	r2, [r3, #68]	; 0x44
 802b836:	e005      	b.n	802b844 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 802b838:	68fb      	ldr	r3, [r7, #12]
 802b83a:	4a16      	ldr	r2, [pc, #88]	; (802b894 <HAL_SPI_TransmitReceive_IT+0x120>)
 802b83c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 802b83e:	68fb      	ldr	r3, [r7, #12]
 802b840:	4a15      	ldr	r2, [pc, #84]	; (802b898 <HAL_SPI_TransmitReceive_IT+0x124>)
 802b842:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802b844:	68fb      	ldr	r3, [r7, #12]
 802b846:	681b      	ldr	r3, [r3, #0]
 802b848:	685a      	ldr	r2, [r3, #4]
 802b84a:	68fb      	ldr	r3, [r7, #12]
 802b84c:	681b      	ldr	r3, [r3, #0]
 802b84e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 802b852:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b854:	68fb      	ldr	r3, [r7, #12]
 802b856:	681b      	ldr	r3, [r3, #0]
 802b858:	681b      	ldr	r3, [r3, #0]
 802b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b85e:	2b40      	cmp	r3, #64	; 0x40
 802b860:	d008      	beq.n	802b874 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b862:	68fb      	ldr	r3, [r7, #12]
 802b864:	681b      	ldr	r3, [r3, #0]
 802b866:	681a      	ldr	r2, [r3, #0]
 802b868:	68fb      	ldr	r3, [r7, #12]
 802b86a:	681b      	ldr	r3, [r3, #0]
 802b86c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b870:	601a      	str	r2, [r3, #0]
 802b872:	e000      	b.n	802b876 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 802b874:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802b876:	68fb      	ldr	r3, [r7, #12]
 802b878:	2200      	movs	r2, #0
 802b87a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b87e:	7dfb      	ldrb	r3, [r7, #23]
}
 802b880:	4618      	mov	r0, r3
 802b882:	371c      	adds	r7, #28
 802b884:	46bd      	mov	sp, r7
 802b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b88a:	4770      	bx	lr
 802b88c:	0802bbad 	.word	0x0802bbad
 802b890:	0802bc0d 	.word	0x0802bc0d
 802b894:	0802bae9 	.word	0x0802bae9
 802b898:	0802bb4d 	.word	0x0802bb4d

0802b89c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b89c:	b580      	push	{r7, lr}
 802b89e:	b088      	sub	sp, #32
 802b8a0:	af00      	add	r7, sp, #0
 802b8a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802b8a4:	687b      	ldr	r3, [r7, #4]
 802b8a6:	681b      	ldr	r3, [r3, #0]
 802b8a8:	685b      	ldr	r3, [r3, #4]
 802b8aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802b8ac:	687b      	ldr	r3, [r7, #4]
 802b8ae:	681b      	ldr	r3, [r3, #0]
 802b8b0:	689b      	ldr	r3, [r3, #8]
 802b8b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b8b4:	69bb      	ldr	r3, [r7, #24]
 802b8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b8ba:	2b00      	cmp	r3, #0
 802b8bc:	d10e      	bne.n	802b8dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b8be:	69bb      	ldr	r3, [r7, #24]
 802b8c0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b8c4:	2b00      	cmp	r3, #0
 802b8c6:	d009      	beq.n	802b8dc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b8c8:	69fb      	ldr	r3, [r7, #28]
 802b8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b8ce:	2b00      	cmp	r3, #0
 802b8d0:	d004      	beq.n	802b8dc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802b8d2:	687b      	ldr	r3, [r7, #4]
 802b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8d6:	6878      	ldr	r0, [r7, #4]
 802b8d8:	4798      	blx	r3
    return;
 802b8da:	e0ce      	b.n	802ba7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802b8dc:	69bb      	ldr	r3, [r7, #24]
 802b8de:	f003 0302 	and.w	r3, r3, #2
 802b8e2:	2b00      	cmp	r3, #0
 802b8e4:	d009      	beq.n	802b8fa <HAL_SPI_IRQHandler+0x5e>
 802b8e6:	69fb      	ldr	r3, [r7, #28]
 802b8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b8ec:	2b00      	cmp	r3, #0
 802b8ee:	d004      	beq.n	802b8fa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802b8f0:	687b      	ldr	r3, [r7, #4]
 802b8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b8f4:	6878      	ldr	r0, [r7, #4]
 802b8f6:	4798      	blx	r3
    return;
 802b8f8:	e0bf      	b.n	802ba7a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b8fa:	69bb      	ldr	r3, [r7, #24]
 802b8fc:	f003 0320 	and.w	r3, r3, #32
 802b900:	2b00      	cmp	r3, #0
 802b902:	d10a      	bne.n	802b91a <HAL_SPI_IRQHandler+0x7e>
 802b904:	69bb      	ldr	r3, [r7, #24]
 802b906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b90a:	2b00      	cmp	r3, #0
 802b90c:	d105      	bne.n	802b91a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802b90e:	69bb      	ldr	r3, [r7, #24]
 802b910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b914:	2b00      	cmp	r3, #0
 802b916:	f000 80b0 	beq.w	802ba7a <HAL_SPI_IRQHandler+0x1de>
 802b91a:	69fb      	ldr	r3, [r7, #28]
 802b91c:	f003 0320 	and.w	r3, r3, #32
 802b920:	2b00      	cmp	r3, #0
 802b922:	f000 80aa 	beq.w	802ba7a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b926:	69bb      	ldr	r3, [r7, #24]
 802b928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b92c:	2b00      	cmp	r3, #0
 802b92e:	d023      	beq.n	802b978 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b930:	687b      	ldr	r3, [r7, #4]
 802b932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b936:	b2db      	uxtb	r3, r3
 802b938:	2b03      	cmp	r3, #3
 802b93a:	d011      	beq.n	802b960 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b940:	f043 0204 	orr.w	r2, r3, #4
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b948:	2300      	movs	r3, #0
 802b94a:	617b      	str	r3, [r7, #20]
 802b94c:	687b      	ldr	r3, [r7, #4]
 802b94e:	681b      	ldr	r3, [r3, #0]
 802b950:	68db      	ldr	r3, [r3, #12]
 802b952:	617b      	str	r3, [r7, #20]
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	681b      	ldr	r3, [r3, #0]
 802b958:	689b      	ldr	r3, [r3, #8]
 802b95a:	617b      	str	r3, [r7, #20]
 802b95c:	697b      	ldr	r3, [r7, #20]
 802b95e:	e00b      	b.n	802b978 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b960:	2300      	movs	r3, #0
 802b962:	613b      	str	r3, [r7, #16]
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	681b      	ldr	r3, [r3, #0]
 802b968:	68db      	ldr	r3, [r3, #12]
 802b96a:	613b      	str	r3, [r7, #16]
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	681b      	ldr	r3, [r3, #0]
 802b970:	689b      	ldr	r3, [r3, #8]
 802b972:	613b      	str	r3, [r7, #16]
 802b974:	693b      	ldr	r3, [r7, #16]
        return;
 802b976:	e080      	b.n	802ba7a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802b978:	69bb      	ldr	r3, [r7, #24]
 802b97a:	f003 0320 	and.w	r3, r3, #32
 802b97e:	2b00      	cmp	r3, #0
 802b980:	d014      	beq.n	802b9ac <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b982:	687b      	ldr	r3, [r7, #4]
 802b984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b986:	f043 0201 	orr.w	r2, r3, #1
 802b98a:	687b      	ldr	r3, [r7, #4]
 802b98c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b98e:	2300      	movs	r3, #0
 802b990:	60fb      	str	r3, [r7, #12]
 802b992:	687b      	ldr	r3, [r7, #4]
 802b994:	681b      	ldr	r3, [r3, #0]
 802b996:	689b      	ldr	r3, [r3, #8]
 802b998:	60fb      	str	r3, [r7, #12]
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	681b      	ldr	r3, [r3, #0]
 802b99e:	681a      	ldr	r2, [r3, #0]
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	681b      	ldr	r3, [r3, #0]
 802b9a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b9a8:	601a      	str	r2, [r3, #0]
 802b9aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802b9ac:	69bb      	ldr	r3, [r7, #24]
 802b9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b9b2:	2b00      	cmp	r3, #0
 802b9b4:	d00c      	beq.n	802b9d0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b9ba:	f043 0208 	orr.w	r2, r3, #8
 802b9be:	687b      	ldr	r3, [r7, #4]
 802b9c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b9c2:	2300      	movs	r3, #0
 802b9c4:	60bb      	str	r3, [r7, #8]
 802b9c6:	687b      	ldr	r3, [r7, #4]
 802b9c8:	681b      	ldr	r3, [r3, #0]
 802b9ca:	689b      	ldr	r3, [r3, #8]
 802b9cc:	60bb      	str	r3, [r7, #8]
 802b9ce:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b9d0:	687b      	ldr	r3, [r7, #4]
 802b9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b9d4:	2b00      	cmp	r3, #0
 802b9d6:	d04f      	beq.n	802ba78 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802b9d8:	687b      	ldr	r3, [r7, #4]
 802b9da:	681b      	ldr	r3, [r3, #0]
 802b9dc:	685a      	ldr	r2, [r3, #4]
 802b9de:	687b      	ldr	r3, [r7, #4]
 802b9e0:	681b      	ldr	r3, [r3, #0]
 802b9e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b9e6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802b9e8:	687b      	ldr	r3, [r7, #4]
 802b9ea:	2201      	movs	r2, #1
 802b9ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802b9f0:	69fb      	ldr	r3, [r7, #28]
 802b9f2:	f003 0302 	and.w	r3, r3, #2
 802b9f6:	2b00      	cmp	r3, #0
 802b9f8:	d104      	bne.n	802ba04 <HAL_SPI_IRQHandler+0x168>
 802b9fa:	69fb      	ldr	r3, [r7, #28]
 802b9fc:	f003 0301 	and.w	r3, r3, #1
 802ba00:	2b00      	cmp	r3, #0
 802ba02:	d034      	beq.n	802ba6e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802ba04:	687b      	ldr	r3, [r7, #4]
 802ba06:	681b      	ldr	r3, [r3, #0]
 802ba08:	685a      	ldr	r2, [r3, #4]
 802ba0a:	687b      	ldr	r3, [r7, #4]
 802ba0c:	681b      	ldr	r3, [r3, #0]
 802ba0e:	f022 0203 	bic.w	r2, r2, #3
 802ba12:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802ba14:	687b      	ldr	r3, [r7, #4]
 802ba16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ba18:	2b00      	cmp	r3, #0
 802ba1a:	d011      	beq.n	802ba40 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802ba1c:	687b      	ldr	r3, [r7, #4]
 802ba1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ba20:	4a17      	ldr	r2, [pc, #92]	; (802ba80 <HAL_SPI_IRQHandler+0x1e4>)
 802ba22:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802ba28:	4618      	mov	r0, r3
 802ba2a:	f7fc fc60 	bl	80282ee <HAL_DMA_Abort_IT>
 802ba2e:	4603      	mov	r3, r0
 802ba30:	2b00      	cmp	r3, #0
 802ba32:	d005      	beq.n	802ba40 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ba38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802ba3c:	687b      	ldr	r3, [r7, #4]
 802ba3e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802ba40:	687b      	ldr	r3, [r7, #4]
 802ba42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ba44:	2b00      	cmp	r3, #0
 802ba46:	d016      	beq.n	802ba76 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802ba48:	687b      	ldr	r3, [r7, #4]
 802ba4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ba4c:	4a0c      	ldr	r2, [pc, #48]	; (802ba80 <HAL_SPI_IRQHandler+0x1e4>)
 802ba4e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802ba50:	687b      	ldr	r3, [r7, #4]
 802ba52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ba54:	4618      	mov	r0, r3
 802ba56:	f7fc fc4a 	bl	80282ee <HAL_DMA_Abort_IT>
 802ba5a:	4603      	mov	r3, r0
 802ba5c:	2b00      	cmp	r3, #0
 802ba5e:	d00a      	beq.n	802ba76 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802ba60:	687b      	ldr	r3, [r7, #4]
 802ba62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ba64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802ba68:	687b      	ldr	r3, [r7, #4]
 802ba6a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802ba6c:	e003      	b.n	802ba76 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802ba6e:	6878      	ldr	r0, [r7, #4]
 802ba70:	f000 f81c 	bl	802baac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802ba74:	e000      	b.n	802ba78 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802ba76:	bf00      	nop
    return;
 802ba78:	bf00      	nop
  }
}
 802ba7a:	3720      	adds	r7, #32
 802ba7c:	46bd      	mov	sp, r7
 802ba7e:	bd80      	pop	{r7, pc}
 802ba80:	0802bac1 	.word	0x0802bac1

0802ba84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802ba84:	b480      	push	{r7}
 802ba86:	b083      	sub	sp, #12
 802ba88:	af00      	add	r7, sp, #0
 802ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802ba8c:	bf00      	nop
 802ba8e:	370c      	adds	r7, #12
 802ba90:	46bd      	mov	sp, r7
 802ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba96:	4770      	bx	lr

0802ba98 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 802ba98:	b480      	push	{r7}
 802ba9a:	b083      	sub	sp, #12
 802ba9c:	af00      	add	r7, sp, #0
 802ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802baa0:	bf00      	nop
 802baa2:	370c      	adds	r7, #12
 802baa4:	46bd      	mov	sp, r7
 802baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802baaa:	4770      	bx	lr

0802baac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802baac:	b480      	push	{r7}
 802baae:	b083      	sub	sp, #12
 802bab0:	af00      	add	r7, sp, #0
 802bab2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802bab4:	bf00      	nop
 802bab6:	370c      	adds	r7, #12
 802bab8:	46bd      	mov	sp, r7
 802baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802babe:	4770      	bx	lr

0802bac0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802bac0:	b580      	push	{r7, lr}
 802bac2:	b084      	sub	sp, #16
 802bac4:	af00      	add	r7, sp, #0
 802bac6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802bac8:	687b      	ldr	r3, [r7, #4]
 802baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bacc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802bace:	68fb      	ldr	r3, [r7, #12]
 802bad0:	2200      	movs	r2, #0
 802bad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802bad4:	68fb      	ldr	r3, [r7, #12]
 802bad6:	2200      	movs	r2, #0
 802bad8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802bada:	68f8      	ldr	r0, [r7, #12]
 802badc:	f7ff ffe6 	bl	802baac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802bae0:	bf00      	nop
 802bae2:	3710      	adds	r7, #16
 802bae4:	46bd      	mov	sp, r7
 802bae6:	bd80      	pop	{r7, pc}

0802bae8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802bae8:	b580      	push	{r7, lr}
 802baea:	b082      	sub	sp, #8
 802baec:	af00      	add	r7, sp, #0
 802baee:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 802baf0:	687b      	ldr	r3, [r7, #4]
 802baf2:	681b      	ldr	r3, [r3, #0]
 802baf4:	f103 020c 	add.w	r2, r3, #12
 802baf8:	687b      	ldr	r3, [r7, #4]
 802bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bafc:	7812      	ldrb	r2, [r2, #0]
 802bafe:	b2d2      	uxtb	r2, r2
 802bb00:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bb06:	1c5a      	adds	r2, r3, #1
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bb10:	b29b      	uxth	r3, r3
 802bb12:	3b01      	subs	r3, #1
 802bb14:	b29a      	uxth	r2, r3
 802bb16:	687b      	ldr	r3, [r7, #4]
 802bb18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 802bb1a:	687b      	ldr	r3, [r7, #4]
 802bb1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bb1e:	b29b      	uxth	r3, r3
 802bb20:	2b00      	cmp	r3, #0
 802bb22:	d10f      	bne.n	802bb44 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802bb24:	687b      	ldr	r3, [r7, #4]
 802bb26:	681b      	ldr	r3, [r3, #0]
 802bb28:	685a      	ldr	r2, [r3, #4]
 802bb2a:	687b      	ldr	r3, [r7, #4]
 802bb2c:	681b      	ldr	r3, [r3, #0]
 802bb2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802bb32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802bb34:	687b      	ldr	r3, [r7, #4]
 802bb36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bb38:	b29b      	uxth	r3, r3
 802bb3a:	2b00      	cmp	r3, #0
 802bb3c:	d102      	bne.n	802bb44 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 802bb3e:	6878      	ldr	r0, [r7, #4]
 802bb40:	f000 f95e 	bl	802be00 <SPI_CloseRxTx_ISR>
    }
  }
}
 802bb44:	bf00      	nop
 802bb46:	3708      	adds	r7, #8
 802bb48:	46bd      	mov	sp, r7
 802bb4a:	bd80      	pop	{r7, pc}

0802bb4c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802bb4c:	b580      	push	{r7, lr}
 802bb4e:	b082      	sub	sp, #8
 802bb50:	af00      	add	r7, sp, #0
 802bb52:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802bb54:	687b      	ldr	r3, [r7, #4]
 802bb56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802bb58:	687b      	ldr	r3, [r7, #4]
 802bb5a:	681b      	ldr	r3, [r3, #0]
 802bb5c:	330c      	adds	r3, #12
 802bb5e:	7812      	ldrb	r2, [r2, #0]
 802bb60:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802bb62:	687b      	ldr	r3, [r7, #4]
 802bb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bb66:	1c5a      	adds	r2, r3, #1
 802bb68:	687b      	ldr	r3, [r7, #4]
 802bb6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802bb6c:	687b      	ldr	r3, [r7, #4]
 802bb6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bb70:	b29b      	uxth	r3, r3
 802bb72:	3b01      	subs	r3, #1
 802bb74:	b29a      	uxth	r2, r3
 802bb76:	687b      	ldr	r3, [r7, #4]
 802bb78:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 802bb7a:	687b      	ldr	r3, [r7, #4]
 802bb7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bb7e:	b29b      	uxth	r3, r3
 802bb80:	2b00      	cmp	r3, #0
 802bb82:	d10f      	bne.n	802bba4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802bb84:	687b      	ldr	r3, [r7, #4]
 802bb86:	681b      	ldr	r3, [r3, #0]
 802bb88:	685a      	ldr	r2, [r3, #4]
 802bb8a:	687b      	ldr	r3, [r7, #4]
 802bb8c:	681b      	ldr	r3, [r3, #0]
 802bb8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802bb92:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802bb94:	687b      	ldr	r3, [r7, #4]
 802bb96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bb98:	b29b      	uxth	r3, r3
 802bb9a:	2b00      	cmp	r3, #0
 802bb9c:	d102      	bne.n	802bba4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802bb9e:	6878      	ldr	r0, [r7, #4]
 802bba0:	f000 f92e 	bl	802be00 <SPI_CloseRxTx_ISR>
    }
  }
}
 802bba4:	bf00      	nop
 802bba6:	3708      	adds	r7, #8
 802bba8:	46bd      	mov	sp, r7
 802bbaa:	bd80      	pop	{r7, pc}

0802bbac <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802bbac:	b580      	push	{r7, lr}
 802bbae:	b082      	sub	sp, #8
 802bbb0:	af00      	add	r7, sp, #0
 802bbb2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 802bbb4:	687b      	ldr	r3, [r7, #4]
 802bbb6:	681b      	ldr	r3, [r3, #0]
 802bbb8:	68da      	ldr	r2, [r3, #12]
 802bbba:	687b      	ldr	r3, [r7, #4]
 802bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bbbe:	b292      	uxth	r2, r2
 802bbc0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802bbc2:	687b      	ldr	r3, [r7, #4]
 802bbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bbc6:	1c9a      	adds	r2, r3, #2
 802bbc8:	687b      	ldr	r3, [r7, #4]
 802bbca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802bbcc:	687b      	ldr	r3, [r7, #4]
 802bbce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bbd0:	b29b      	uxth	r3, r3
 802bbd2:	3b01      	subs	r3, #1
 802bbd4:	b29a      	uxth	r2, r3
 802bbd6:	687b      	ldr	r3, [r7, #4]
 802bbd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 802bbda:	687b      	ldr	r3, [r7, #4]
 802bbdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bbde:	b29b      	uxth	r3, r3
 802bbe0:	2b00      	cmp	r3, #0
 802bbe2:	d10f      	bne.n	802bc04 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 802bbe4:	687b      	ldr	r3, [r7, #4]
 802bbe6:	681b      	ldr	r3, [r3, #0]
 802bbe8:	685a      	ldr	r2, [r3, #4]
 802bbea:	687b      	ldr	r3, [r7, #4]
 802bbec:	681b      	ldr	r3, [r3, #0]
 802bbee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bbf2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802bbf4:	687b      	ldr	r3, [r7, #4]
 802bbf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bbf8:	b29b      	uxth	r3, r3
 802bbfa:	2b00      	cmp	r3, #0
 802bbfc:	d102      	bne.n	802bc04 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802bbfe:	6878      	ldr	r0, [r7, #4]
 802bc00:	f000 f8fe 	bl	802be00 <SPI_CloseRxTx_ISR>
    }
  }
}
 802bc04:	bf00      	nop
 802bc06:	3708      	adds	r7, #8
 802bc08:	46bd      	mov	sp, r7
 802bc0a:	bd80      	pop	{r7, pc}

0802bc0c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802bc0c:	b580      	push	{r7, lr}
 802bc0e:	b082      	sub	sp, #8
 802bc10:	af00      	add	r7, sp, #0
 802bc12:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc18:	881a      	ldrh	r2, [r3, #0]
 802bc1a:	687b      	ldr	r3, [r7, #4]
 802bc1c:	681b      	ldr	r3, [r3, #0]
 802bc1e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802bc20:	687b      	ldr	r3, [r7, #4]
 802bc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802bc24:	1c9a      	adds	r2, r3, #2
 802bc26:	687b      	ldr	r3, [r7, #4]
 802bc28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802bc2a:	687b      	ldr	r3, [r7, #4]
 802bc2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bc2e:	b29b      	uxth	r3, r3
 802bc30:	3b01      	subs	r3, #1
 802bc32:	b29a      	uxth	r2, r3
 802bc34:	687b      	ldr	r3, [r7, #4]
 802bc36:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 802bc38:	687b      	ldr	r3, [r7, #4]
 802bc3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802bc3c:	b29b      	uxth	r3, r3
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	d10f      	bne.n	802bc62 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	681b      	ldr	r3, [r3, #0]
 802bc46:	685a      	ldr	r2, [r3, #4]
 802bc48:	687b      	ldr	r3, [r7, #4]
 802bc4a:	681b      	ldr	r3, [r3, #0]
 802bc4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802bc50:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802bc52:	687b      	ldr	r3, [r7, #4]
 802bc54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802bc56:	b29b      	uxth	r3, r3
 802bc58:	2b00      	cmp	r3, #0
 802bc5a:	d102      	bne.n	802bc62 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 802bc5c:	6878      	ldr	r0, [r7, #4]
 802bc5e:	f000 f8cf 	bl	802be00 <SPI_CloseRxTx_ISR>
    }
  }
}
 802bc62:	bf00      	nop
 802bc64:	3708      	adds	r7, #8
 802bc66:	46bd      	mov	sp, r7
 802bc68:	bd80      	pop	{r7, pc}
	...

0802bc6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802bc6c:	b580      	push	{r7, lr}
 802bc6e:	b088      	sub	sp, #32
 802bc70:	af00      	add	r7, sp, #0
 802bc72:	60f8      	str	r0, [r7, #12]
 802bc74:	60b9      	str	r1, [r7, #8]
 802bc76:	603b      	str	r3, [r7, #0]
 802bc78:	4613      	mov	r3, r2
 802bc7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802bc7c:	f7fc f924 	bl	8027ec8 <HAL_GetTick>
 802bc80:	4602      	mov	r2, r0
 802bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bc84:	1a9b      	subs	r3, r3, r2
 802bc86:	683a      	ldr	r2, [r7, #0]
 802bc88:	4413      	add	r3, r2
 802bc8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802bc8c:	f7fc f91c 	bl	8027ec8 <HAL_GetTick>
 802bc90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802bc92:	4b39      	ldr	r3, [pc, #228]	; (802bd78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802bc94:	681b      	ldr	r3, [r3, #0]
 802bc96:	015b      	lsls	r3, r3, #5
 802bc98:	0d1b      	lsrs	r3, r3, #20
 802bc9a:	69fa      	ldr	r2, [r7, #28]
 802bc9c:	fb02 f303 	mul.w	r3, r2, r3
 802bca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802bca2:	e054      	b.n	802bd4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802bca4:	683b      	ldr	r3, [r7, #0]
 802bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bcaa:	d050      	beq.n	802bd4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802bcac:	f7fc f90c 	bl	8027ec8 <HAL_GetTick>
 802bcb0:	4602      	mov	r2, r0
 802bcb2:	69bb      	ldr	r3, [r7, #24]
 802bcb4:	1ad3      	subs	r3, r2, r3
 802bcb6:	69fa      	ldr	r2, [r7, #28]
 802bcb8:	429a      	cmp	r2, r3
 802bcba:	d902      	bls.n	802bcc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 802bcbc:	69fb      	ldr	r3, [r7, #28]
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	d13d      	bne.n	802bd3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802bcc2:	68fb      	ldr	r3, [r7, #12]
 802bcc4:	681b      	ldr	r3, [r3, #0]
 802bcc6:	685a      	ldr	r2, [r3, #4]
 802bcc8:	68fb      	ldr	r3, [r7, #12]
 802bcca:	681b      	ldr	r3, [r3, #0]
 802bccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802bcd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802bcd2:	68fb      	ldr	r3, [r7, #12]
 802bcd4:	685b      	ldr	r3, [r3, #4]
 802bcd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bcda:	d111      	bne.n	802bd00 <SPI_WaitFlagStateUntilTimeout+0x94>
 802bcdc:	68fb      	ldr	r3, [r7, #12]
 802bcde:	689b      	ldr	r3, [r3, #8]
 802bce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802bce4:	d004      	beq.n	802bcf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802bce6:	68fb      	ldr	r3, [r7, #12]
 802bce8:	689b      	ldr	r3, [r3, #8]
 802bcea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bcee:	d107      	bne.n	802bd00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802bcf0:	68fb      	ldr	r3, [r7, #12]
 802bcf2:	681b      	ldr	r3, [r3, #0]
 802bcf4:	681a      	ldr	r2, [r3, #0]
 802bcf6:	68fb      	ldr	r3, [r7, #12]
 802bcf8:	681b      	ldr	r3, [r3, #0]
 802bcfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bcfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802bd00:	68fb      	ldr	r3, [r7, #12]
 802bd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bd04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802bd08:	d10f      	bne.n	802bd2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802bd0a:	68fb      	ldr	r3, [r7, #12]
 802bd0c:	681b      	ldr	r3, [r3, #0]
 802bd0e:	681a      	ldr	r2, [r3, #0]
 802bd10:	68fb      	ldr	r3, [r7, #12]
 802bd12:	681b      	ldr	r3, [r3, #0]
 802bd14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bd18:	601a      	str	r2, [r3, #0]
 802bd1a:	68fb      	ldr	r3, [r7, #12]
 802bd1c:	681b      	ldr	r3, [r3, #0]
 802bd1e:	681a      	ldr	r2, [r3, #0]
 802bd20:	68fb      	ldr	r3, [r7, #12]
 802bd22:	681b      	ldr	r3, [r3, #0]
 802bd24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bd28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802bd2a:	68fb      	ldr	r3, [r7, #12]
 802bd2c:	2201      	movs	r2, #1
 802bd2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802bd32:	68fb      	ldr	r3, [r7, #12]
 802bd34:	2200      	movs	r2, #0
 802bd36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802bd3a:	2303      	movs	r3, #3
 802bd3c:	e017      	b.n	802bd6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802bd3e:	697b      	ldr	r3, [r7, #20]
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	d101      	bne.n	802bd48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802bd44:	2300      	movs	r3, #0
 802bd46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 802bd48:	697b      	ldr	r3, [r7, #20]
 802bd4a:	3b01      	subs	r3, #1
 802bd4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802bd4e:	68fb      	ldr	r3, [r7, #12]
 802bd50:	681b      	ldr	r3, [r3, #0]
 802bd52:	689a      	ldr	r2, [r3, #8]
 802bd54:	68bb      	ldr	r3, [r7, #8]
 802bd56:	4013      	ands	r3, r2
 802bd58:	68ba      	ldr	r2, [r7, #8]
 802bd5a:	429a      	cmp	r2, r3
 802bd5c:	bf0c      	ite	eq
 802bd5e:	2301      	moveq	r3, #1
 802bd60:	2300      	movne	r3, #0
 802bd62:	b2db      	uxtb	r3, r3
 802bd64:	461a      	mov	r2, r3
 802bd66:	79fb      	ldrb	r3, [r7, #7]
 802bd68:	429a      	cmp	r2, r3
 802bd6a:	d19b      	bne.n	802bca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 802bd6c:	2300      	movs	r3, #0
}
 802bd6e:	4618      	mov	r0, r3
 802bd70:	3720      	adds	r7, #32
 802bd72:	46bd      	mov	sp, r7
 802bd74:	bd80      	pop	{r7, pc}
 802bd76:	bf00      	nop
 802bd78:	20000138 	.word	0x20000138

0802bd7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802bd7c:	b580      	push	{r7, lr}
 802bd7e:	b088      	sub	sp, #32
 802bd80:	af02      	add	r7, sp, #8
 802bd82:	60f8      	str	r0, [r7, #12]
 802bd84:	60b9      	str	r1, [r7, #8]
 802bd86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802bd88:	4b1b      	ldr	r3, [pc, #108]	; (802bdf8 <SPI_EndRxTxTransaction+0x7c>)
 802bd8a:	681b      	ldr	r3, [r3, #0]
 802bd8c:	4a1b      	ldr	r2, [pc, #108]	; (802bdfc <SPI_EndRxTxTransaction+0x80>)
 802bd8e:	fba2 2303 	umull	r2, r3, r2, r3
 802bd92:	0d5b      	lsrs	r3, r3, #21
 802bd94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802bd98:	fb02 f303 	mul.w	r3, r2, r3
 802bd9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bd9e:	68fb      	ldr	r3, [r7, #12]
 802bda0:	685b      	ldr	r3, [r3, #4]
 802bda2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bda6:	d112      	bne.n	802bdce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bda8:	687b      	ldr	r3, [r7, #4]
 802bdaa:	9300      	str	r3, [sp, #0]
 802bdac:	68bb      	ldr	r3, [r7, #8]
 802bdae:	2200      	movs	r2, #0
 802bdb0:	2180      	movs	r1, #128	; 0x80
 802bdb2:	68f8      	ldr	r0, [r7, #12]
 802bdb4:	f7ff ff5a 	bl	802bc6c <SPI_WaitFlagStateUntilTimeout>
 802bdb8:	4603      	mov	r3, r0
 802bdba:	2b00      	cmp	r3, #0
 802bdbc:	d016      	beq.n	802bdec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bdbe:	68fb      	ldr	r3, [r7, #12]
 802bdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bdc2:	f043 0220 	orr.w	r2, r3, #32
 802bdc6:	68fb      	ldr	r3, [r7, #12]
 802bdc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bdca:	2303      	movs	r3, #3
 802bdcc:	e00f      	b.n	802bdee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802bdce:	697b      	ldr	r3, [r7, #20]
 802bdd0:	2b00      	cmp	r3, #0
 802bdd2:	d00a      	beq.n	802bdea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802bdd4:	697b      	ldr	r3, [r7, #20]
 802bdd6:	3b01      	subs	r3, #1
 802bdd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802bdda:	68fb      	ldr	r3, [r7, #12]
 802bddc:	681b      	ldr	r3, [r3, #0]
 802bdde:	689b      	ldr	r3, [r3, #8]
 802bde0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bde4:	2b80      	cmp	r3, #128	; 0x80
 802bde6:	d0f2      	beq.n	802bdce <SPI_EndRxTxTransaction+0x52>
 802bde8:	e000      	b.n	802bdec <SPI_EndRxTxTransaction+0x70>
        break;
 802bdea:	bf00      	nop
  }

  return HAL_OK;
 802bdec:	2300      	movs	r3, #0
}
 802bdee:	4618      	mov	r0, r3
 802bdf0:	3718      	adds	r7, #24
 802bdf2:	46bd      	mov	sp, r7
 802bdf4:	bd80      	pop	{r7, pc}
 802bdf6:	bf00      	nop
 802bdf8:	20000138 	.word	0x20000138
 802bdfc:	165e9f81 	.word	0x165e9f81

0802be00 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 802be00:	b580      	push	{r7, lr}
 802be02:	b086      	sub	sp, #24
 802be04:	af00      	add	r7, sp, #0
 802be06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802be08:	4b35      	ldr	r3, [pc, #212]	; (802bee0 <SPI_CloseRxTx_ISR+0xe0>)
 802be0a:	681b      	ldr	r3, [r3, #0]
 802be0c:	4a35      	ldr	r2, [pc, #212]	; (802bee4 <SPI_CloseRxTx_ISR+0xe4>)
 802be0e:	fba2 2303 	umull	r2, r3, r2, r3
 802be12:	0a5b      	lsrs	r3, r3, #9
 802be14:	2264      	movs	r2, #100	; 0x64
 802be16:	fb02 f303 	mul.w	r3, r2, r3
 802be1a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802be1c:	f7fc f854 	bl	8027ec8 <HAL_GetTick>
 802be20:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802be22:	687b      	ldr	r3, [r7, #4]
 802be24:	681b      	ldr	r3, [r3, #0]
 802be26:	685a      	ldr	r2, [r3, #4]
 802be28:	687b      	ldr	r3, [r7, #4]
 802be2a:	681b      	ldr	r3, [r3, #0]
 802be2c:	f022 0220 	bic.w	r2, r2, #32
 802be30:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802be32:	693b      	ldr	r3, [r7, #16]
 802be34:	2b00      	cmp	r3, #0
 802be36:	d106      	bne.n	802be46 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802be38:	687b      	ldr	r3, [r7, #4]
 802be3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802be3c:	f043 0220 	orr.w	r2, r3, #32
 802be40:	687b      	ldr	r3, [r7, #4]
 802be42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802be44:	e009      	b.n	802be5a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 802be46:	693b      	ldr	r3, [r7, #16]
 802be48:	3b01      	subs	r3, #1
 802be4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802be4c:	687b      	ldr	r3, [r7, #4]
 802be4e:	681b      	ldr	r3, [r3, #0]
 802be50:	689b      	ldr	r3, [r3, #8]
 802be52:	f003 0302 	and.w	r3, r3, #2
 802be56:	2b00      	cmp	r3, #0
 802be58:	d0eb      	beq.n	802be32 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802be5a:	697a      	ldr	r2, [r7, #20]
 802be5c:	2164      	movs	r1, #100	; 0x64
 802be5e:	6878      	ldr	r0, [r7, #4]
 802be60:	f7ff ff8c 	bl	802bd7c <SPI_EndRxTxTransaction>
 802be64:	4603      	mov	r3, r0
 802be66:	2b00      	cmp	r3, #0
 802be68:	d005      	beq.n	802be76 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802be6a:	687b      	ldr	r3, [r7, #4]
 802be6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802be6e:	f043 0220 	orr.w	r2, r3, #32
 802be72:	687b      	ldr	r3, [r7, #4]
 802be74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802be76:	687b      	ldr	r3, [r7, #4]
 802be78:	689b      	ldr	r3, [r3, #8]
 802be7a:	2b00      	cmp	r3, #0
 802be7c:	d10a      	bne.n	802be94 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802be7e:	2300      	movs	r3, #0
 802be80:	60fb      	str	r3, [r7, #12]
 802be82:	687b      	ldr	r3, [r7, #4]
 802be84:	681b      	ldr	r3, [r3, #0]
 802be86:	68db      	ldr	r3, [r3, #12]
 802be88:	60fb      	str	r3, [r7, #12]
 802be8a:	687b      	ldr	r3, [r7, #4]
 802be8c:	681b      	ldr	r3, [r3, #0]
 802be8e:	689b      	ldr	r3, [r3, #8]
 802be90:	60fb      	str	r3, [r7, #12]
 802be92:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 802be94:	687b      	ldr	r3, [r7, #4]
 802be96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802be98:	2b00      	cmp	r3, #0
 802be9a:	d115      	bne.n	802bec8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802be9c:	687b      	ldr	r3, [r7, #4]
 802be9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802bea2:	b2db      	uxtb	r3, r3
 802bea4:	2b04      	cmp	r3, #4
 802bea6:	d107      	bne.n	802beb8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802bea8:	687b      	ldr	r3, [r7, #4]
 802beaa:	2201      	movs	r2, #1
 802beac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 802beb0:	6878      	ldr	r0, [r7, #4]
 802beb2:	f7ff fde7 	bl	802ba84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 802beb6:	e00e      	b.n	802bed6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 802beb8:	687b      	ldr	r3, [r7, #4]
 802beba:	2201      	movs	r2, #1
 802bebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 802bec0:	6878      	ldr	r0, [r7, #4]
 802bec2:	f7ff fde9 	bl	802ba98 <HAL_SPI_TxRxCpltCallback>
}
 802bec6:	e006      	b.n	802bed6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	2201      	movs	r2, #1
 802becc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 802bed0:	6878      	ldr	r0, [r7, #4]
 802bed2:	f7ff fdeb 	bl	802baac <HAL_SPI_ErrorCallback>
}
 802bed6:	bf00      	nop
 802bed8:	3718      	adds	r7, #24
 802beda:	46bd      	mov	sp, r7
 802bedc:	bd80      	pop	{r7, pc}
 802bede:	bf00      	nop
 802bee0:	20000138 	.word	0x20000138
 802bee4:	057619f1 	.word	0x057619f1

0802bee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802bee8:	b580      	push	{r7, lr}
 802beea:	b082      	sub	sp, #8
 802beec:	af00      	add	r7, sp, #0
 802beee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802bef0:	687b      	ldr	r3, [r7, #4]
 802bef2:	2b00      	cmp	r3, #0
 802bef4:	d101      	bne.n	802befa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802bef6:	2301      	movs	r3, #1
 802bef8:	e041      	b.n	802bf7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802befa:	687b      	ldr	r3, [r7, #4]
 802befc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bf00:	b2db      	uxtb	r3, r3
 802bf02:	2b00      	cmp	r3, #0
 802bf04:	d106      	bne.n	802bf14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802bf06:	687b      	ldr	r3, [r7, #4]
 802bf08:	2200      	movs	r2, #0
 802bf0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802bf0e:	6878      	ldr	r0, [r7, #4]
 802bf10:	f7fb feae 	bl	8027c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802bf14:	687b      	ldr	r3, [r7, #4]
 802bf16:	2202      	movs	r2, #2
 802bf18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802bf1c:	687b      	ldr	r3, [r7, #4]
 802bf1e:	681a      	ldr	r2, [r3, #0]
 802bf20:	687b      	ldr	r3, [r7, #4]
 802bf22:	3304      	adds	r3, #4
 802bf24:	4619      	mov	r1, r3
 802bf26:	4610      	mov	r0, r2
 802bf28:	f000 f870 	bl	802c00c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802bf2c:	687b      	ldr	r3, [r7, #4]
 802bf2e:	2201      	movs	r2, #1
 802bf30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802bf34:	687b      	ldr	r3, [r7, #4]
 802bf36:	2201      	movs	r2, #1
 802bf38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 802bf3c:	687b      	ldr	r3, [r7, #4]
 802bf3e:	2201      	movs	r2, #1
 802bf40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	2201      	movs	r2, #1
 802bf48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 802bf4c:	687b      	ldr	r3, [r7, #4]
 802bf4e:	2201      	movs	r2, #1
 802bf50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802bf54:	687b      	ldr	r3, [r7, #4]
 802bf56:	2201      	movs	r2, #1
 802bf58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	2201      	movs	r2, #1
 802bf60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802bf64:	687b      	ldr	r3, [r7, #4]
 802bf66:	2201      	movs	r2, #1
 802bf68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802bf6c:	687b      	ldr	r3, [r7, #4]
 802bf6e:	2201      	movs	r2, #1
 802bf70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802bf74:	687b      	ldr	r3, [r7, #4]
 802bf76:	2201      	movs	r2, #1
 802bf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802bf7c:	2300      	movs	r3, #0
}
 802bf7e:	4618      	mov	r0, r3
 802bf80:	3708      	adds	r7, #8
 802bf82:	46bd      	mov	sp, r7
 802bf84:	bd80      	pop	{r7, pc}

0802bf86 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 802bf86:	b580      	push	{r7, lr}
 802bf88:	b082      	sub	sp, #8
 802bf8a:	af00      	add	r7, sp, #0
 802bf8c:	6078      	str	r0, [r7, #4]
 802bf8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 802bf90:	687b      	ldr	r3, [r7, #4]
 802bf92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802bf96:	2b01      	cmp	r3, #1
 802bf98:	d101      	bne.n	802bf9e <HAL_TIM_SlaveConfigSynchro+0x18>
 802bf9a:	2302      	movs	r3, #2
 802bf9c:	e031      	b.n	802c002 <HAL_TIM_SlaveConfigSynchro+0x7c>
 802bf9e:	687b      	ldr	r3, [r7, #4]
 802bfa0:	2201      	movs	r2, #1
 802bfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802bfa6:	687b      	ldr	r3, [r7, #4]
 802bfa8:	2202      	movs	r2, #2
 802bfaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 802bfae:	6839      	ldr	r1, [r7, #0]
 802bfb0:	6878      	ldr	r0, [r7, #4]
 802bfb2:	f000 f8cb 	bl	802c14c <TIM_SlaveTimer_SetConfig>
 802bfb6:	4603      	mov	r3, r0
 802bfb8:	2b00      	cmp	r3, #0
 802bfba:	d009      	beq.n	802bfd0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 802bfbc:	687b      	ldr	r3, [r7, #4]
 802bfbe:	2201      	movs	r2, #1
 802bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 802bfc4:	687b      	ldr	r3, [r7, #4]
 802bfc6:	2200      	movs	r2, #0
 802bfc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 802bfcc:	2301      	movs	r3, #1
 802bfce:	e018      	b.n	802c002 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 802bfd0:	687b      	ldr	r3, [r7, #4]
 802bfd2:	681b      	ldr	r3, [r3, #0]
 802bfd4:	68da      	ldr	r2, [r3, #12]
 802bfd6:	687b      	ldr	r3, [r7, #4]
 802bfd8:	681b      	ldr	r3, [r3, #0]
 802bfda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bfde:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 802bfe0:	687b      	ldr	r3, [r7, #4]
 802bfe2:	681b      	ldr	r3, [r3, #0]
 802bfe4:	68da      	ldr	r2, [r3, #12]
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	681b      	ldr	r3, [r3, #0]
 802bfea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802bfee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 802bff0:	687b      	ldr	r3, [r7, #4]
 802bff2:	2201      	movs	r2, #1
 802bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802bff8:	687b      	ldr	r3, [r7, #4]
 802bffa:	2200      	movs	r2, #0
 802bffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802c000:	2300      	movs	r3, #0
}
 802c002:	4618      	mov	r0, r3
 802c004:	3708      	adds	r7, #8
 802c006:	46bd      	mov	sp, r7
 802c008:	bd80      	pop	{r7, pc}
	...

0802c00c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802c00c:	b480      	push	{r7}
 802c00e:	b085      	sub	sp, #20
 802c010:	af00      	add	r7, sp, #0
 802c012:	6078      	str	r0, [r7, #4]
 802c014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	681b      	ldr	r3, [r3, #0]
 802c01a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	4a40      	ldr	r2, [pc, #256]	; (802c120 <TIM_Base_SetConfig+0x114>)
 802c020:	4293      	cmp	r3, r2
 802c022:	d013      	beq.n	802c04c <TIM_Base_SetConfig+0x40>
 802c024:	687b      	ldr	r3, [r7, #4]
 802c026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c02a:	d00f      	beq.n	802c04c <TIM_Base_SetConfig+0x40>
 802c02c:	687b      	ldr	r3, [r7, #4]
 802c02e:	4a3d      	ldr	r2, [pc, #244]	; (802c124 <TIM_Base_SetConfig+0x118>)
 802c030:	4293      	cmp	r3, r2
 802c032:	d00b      	beq.n	802c04c <TIM_Base_SetConfig+0x40>
 802c034:	687b      	ldr	r3, [r7, #4]
 802c036:	4a3c      	ldr	r2, [pc, #240]	; (802c128 <TIM_Base_SetConfig+0x11c>)
 802c038:	4293      	cmp	r3, r2
 802c03a:	d007      	beq.n	802c04c <TIM_Base_SetConfig+0x40>
 802c03c:	687b      	ldr	r3, [r7, #4]
 802c03e:	4a3b      	ldr	r2, [pc, #236]	; (802c12c <TIM_Base_SetConfig+0x120>)
 802c040:	4293      	cmp	r3, r2
 802c042:	d003      	beq.n	802c04c <TIM_Base_SetConfig+0x40>
 802c044:	687b      	ldr	r3, [r7, #4]
 802c046:	4a3a      	ldr	r2, [pc, #232]	; (802c130 <TIM_Base_SetConfig+0x124>)
 802c048:	4293      	cmp	r3, r2
 802c04a:	d108      	bne.n	802c05e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802c04c:	68fb      	ldr	r3, [r7, #12]
 802c04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802c054:	683b      	ldr	r3, [r7, #0]
 802c056:	685b      	ldr	r3, [r3, #4]
 802c058:	68fa      	ldr	r2, [r7, #12]
 802c05a:	4313      	orrs	r3, r2
 802c05c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802c05e:	687b      	ldr	r3, [r7, #4]
 802c060:	4a2f      	ldr	r2, [pc, #188]	; (802c120 <TIM_Base_SetConfig+0x114>)
 802c062:	4293      	cmp	r3, r2
 802c064:	d02b      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c066:	687b      	ldr	r3, [r7, #4]
 802c068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c06c:	d027      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	4a2c      	ldr	r2, [pc, #176]	; (802c124 <TIM_Base_SetConfig+0x118>)
 802c072:	4293      	cmp	r3, r2
 802c074:	d023      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c076:	687b      	ldr	r3, [r7, #4]
 802c078:	4a2b      	ldr	r2, [pc, #172]	; (802c128 <TIM_Base_SetConfig+0x11c>)
 802c07a:	4293      	cmp	r3, r2
 802c07c:	d01f      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c07e:	687b      	ldr	r3, [r7, #4]
 802c080:	4a2a      	ldr	r2, [pc, #168]	; (802c12c <TIM_Base_SetConfig+0x120>)
 802c082:	4293      	cmp	r3, r2
 802c084:	d01b      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c086:	687b      	ldr	r3, [r7, #4]
 802c088:	4a29      	ldr	r2, [pc, #164]	; (802c130 <TIM_Base_SetConfig+0x124>)
 802c08a:	4293      	cmp	r3, r2
 802c08c:	d017      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c08e:	687b      	ldr	r3, [r7, #4]
 802c090:	4a28      	ldr	r2, [pc, #160]	; (802c134 <TIM_Base_SetConfig+0x128>)
 802c092:	4293      	cmp	r3, r2
 802c094:	d013      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c096:	687b      	ldr	r3, [r7, #4]
 802c098:	4a27      	ldr	r2, [pc, #156]	; (802c138 <TIM_Base_SetConfig+0x12c>)
 802c09a:	4293      	cmp	r3, r2
 802c09c:	d00f      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c09e:	687b      	ldr	r3, [r7, #4]
 802c0a0:	4a26      	ldr	r2, [pc, #152]	; (802c13c <TIM_Base_SetConfig+0x130>)
 802c0a2:	4293      	cmp	r3, r2
 802c0a4:	d00b      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c0a6:	687b      	ldr	r3, [r7, #4]
 802c0a8:	4a25      	ldr	r2, [pc, #148]	; (802c140 <TIM_Base_SetConfig+0x134>)
 802c0aa:	4293      	cmp	r3, r2
 802c0ac:	d007      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c0ae:	687b      	ldr	r3, [r7, #4]
 802c0b0:	4a24      	ldr	r2, [pc, #144]	; (802c144 <TIM_Base_SetConfig+0x138>)
 802c0b2:	4293      	cmp	r3, r2
 802c0b4:	d003      	beq.n	802c0be <TIM_Base_SetConfig+0xb2>
 802c0b6:	687b      	ldr	r3, [r7, #4]
 802c0b8:	4a23      	ldr	r2, [pc, #140]	; (802c148 <TIM_Base_SetConfig+0x13c>)
 802c0ba:	4293      	cmp	r3, r2
 802c0bc:	d108      	bne.n	802c0d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802c0be:	68fb      	ldr	r3, [r7, #12]
 802c0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802c0c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802c0c6:	683b      	ldr	r3, [r7, #0]
 802c0c8:	68db      	ldr	r3, [r3, #12]
 802c0ca:	68fa      	ldr	r2, [r7, #12]
 802c0cc:	4313      	orrs	r3, r2
 802c0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802c0d0:	68fb      	ldr	r3, [r7, #12]
 802c0d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802c0d6:	683b      	ldr	r3, [r7, #0]
 802c0d8:	695b      	ldr	r3, [r3, #20]
 802c0da:	4313      	orrs	r3, r2
 802c0dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802c0de:	687b      	ldr	r3, [r7, #4]
 802c0e0:	68fa      	ldr	r2, [r7, #12]
 802c0e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802c0e4:	683b      	ldr	r3, [r7, #0]
 802c0e6:	689a      	ldr	r2, [r3, #8]
 802c0e8:	687b      	ldr	r3, [r7, #4]
 802c0ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802c0ec:	683b      	ldr	r3, [r7, #0]
 802c0ee:	681a      	ldr	r2, [r3, #0]
 802c0f0:	687b      	ldr	r3, [r7, #4]
 802c0f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802c0f4:	687b      	ldr	r3, [r7, #4]
 802c0f6:	4a0a      	ldr	r2, [pc, #40]	; (802c120 <TIM_Base_SetConfig+0x114>)
 802c0f8:	4293      	cmp	r3, r2
 802c0fa:	d003      	beq.n	802c104 <TIM_Base_SetConfig+0xf8>
 802c0fc:	687b      	ldr	r3, [r7, #4]
 802c0fe:	4a0c      	ldr	r2, [pc, #48]	; (802c130 <TIM_Base_SetConfig+0x124>)
 802c100:	4293      	cmp	r3, r2
 802c102:	d103      	bne.n	802c10c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802c104:	683b      	ldr	r3, [r7, #0]
 802c106:	691a      	ldr	r2, [r3, #16]
 802c108:	687b      	ldr	r3, [r7, #4]
 802c10a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	2201      	movs	r2, #1
 802c110:	615a      	str	r2, [r3, #20]
}
 802c112:	bf00      	nop
 802c114:	3714      	adds	r7, #20
 802c116:	46bd      	mov	sp, r7
 802c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c11c:	4770      	bx	lr
 802c11e:	bf00      	nop
 802c120:	40010000 	.word	0x40010000
 802c124:	40000400 	.word	0x40000400
 802c128:	40000800 	.word	0x40000800
 802c12c:	40000c00 	.word	0x40000c00
 802c130:	40010400 	.word	0x40010400
 802c134:	40014000 	.word	0x40014000
 802c138:	40014400 	.word	0x40014400
 802c13c:	40014800 	.word	0x40014800
 802c140:	40001800 	.word	0x40001800
 802c144:	40001c00 	.word	0x40001c00
 802c148:	40002000 	.word	0x40002000

0802c14c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 802c14c:	b580      	push	{r7, lr}
 802c14e:	b086      	sub	sp, #24
 802c150:	af00      	add	r7, sp, #0
 802c152:	6078      	str	r0, [r7, #4]
 802c154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802c156:	2300      	movs	r3, #0
 802c158:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802c15a:	687b      	ldr	r3, [r7, #4]
 802c15c:	681b      	ldr	r3, [r3, #0]
 802c15e:	689b      	ldr	r3, [r3, #8]
 802c160:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802c162:	693b      	ldr	r3, [r7, #16]
 802c164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c168:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 802c16a:	683b      	ldr	r3, [r7, #0]
 802c16c:	685b      	ldr	r3, [r3, #4]
 802c16e:	693a      	ldr	r2, [r7, #16]
 802c170:	4313      	orrs	r3, r2
 802c172:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 802c174:	693b      	ldr	r3, [r7, #16]
 802c176:	f023 0307 	bic.w	r3, r3, #7
 802c17a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 802c17c:	683b      	ldr	r3, [r7, #0]
 802c17e:	681b      	ldr	r3, [r3, #0]
 802c180:	693a      	ldr	r2, [r7, #16]
 802c182:	4313      	orrs	r3, r2
 802c184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802c186:	687b      	ldr	r3, [r7, #4]
 802c188:	681b      	ldr	r3, [r3, #0]
 802c18a:	693a      	ldr	r2, [r7, #16]
 802c18c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 802c18e:	683b      	ldr	r3, [r7, #0]
 802c190:	685b      	ldr	r3, [r3, #4]
 802c192:	2b70      	cmp	r3, #112	; 0x70
 802c194:	d01a      	beq.n	802c1cc <TIM_SlaveTimer_SetConfig+0x80>
 802c196:	2b70      	cmp	r3, #112	; 0x70
 802c198:	d860      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c19a:	2b60      	cmp	r3, #96	; 0x60
 802c19c:	d054      	beq.n	802c248 <TIM_SlaveTimer_SetConfig+0xfc>
 802c19e:	2b60      	cmp	r3, #96	; 0x60
 802c1a0:	d85c      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c1a2:	2b50      	cmp	r3, #80	; 0x50
 802c1a4:	d046      	beq.n	802c234 <TIM_SlaveTimer_SetConfig+0xe8>
 802c1a6:	2b50      	cmp	r3, #80	; 0x50
 802c1a8:	d858      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c1aa:	2b40      	cmp	r3, #64	; 0x40
 802c1ac:	d019      	beq.n	802c1e2 <TIM_SlaveTimer_SetConfig+0x96>
 802c1ae:	2b40      	cmp	r3, #64	; 0x40
 802c1b0:	d854      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c1b2:	2b30      	cmp	r3, #48	; 0x30
 802c1b4:	d055      	beq.n	802c262 <TIM_SlaveTimer_SetConfig+0x116>
 802c1b6:	2b30      	cmp	r3, #48	; 0x30
 802c1b8:	d850      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c1ba:	2b20      	cmp	r3, #32
 802c1bc:	d051      	beq.n	802c262 <TIM_SlaveTimer_SetConfig+0x116>
 802c1be:	2b20      	cmp	r3, #32
 802c1c0:	d84c      	bhi.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
 802c1c2:	2b00      	cmp	r3, #0
 802c1c4:	d04d      	beq.n	802c262 <TIM_SlaveTimer_SetConfig+0x116>
 802c1c6:	2b10      	cmp	r3, #16
 802c1c8:	d04b      	beq.n	802c262 <TIM_SlaveTimer_SetConfig+0x116>
 802c1ca:	e047      	b.n	802c25c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 802c1cc:	687b      	ldr	r3, [r7, #4]
 802c1ce:	6818      	ldr	r0, [r3, #0]
 802c1d0:	683b      	ldr	r3, [r7, #0]
 802c1d2:	68d9      	ldr	r1, [r3, #12]
 802c1d4:	683b      	ldr	r3, [r7, #0]
 802c1d6:	689a      	ldr	r2, [r3, #8]
 802c1d8:	683b      	ldr	r3, [r7, #0]
 802c1da:	691b      	ldr	r3, [r3, #16]
 802c1dc:	f000 f8a6 	bl	802c32c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 802c1e0:	e040      	b.n	802c264 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 802c1e2:	683b      	ldr	r3, [r7, #0]
 802c1e4:	681b      	ldr	r3, [r3, #0]
 802c1e6:	2b05      	cmp	r3, #5
 802c1e8:	d101      	bne.n	802c1ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 802c1ea:	2301      	movs	r3, #1
 802c1ec:	e03b      	b.n	802c266 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 802c1ee:	687b      	ldr	r3, [r7, #4]
 802c1f0:	681b      	ldr	r3, [r3, #0]
 802c1f2:	6a1b      	ldr	r3, [r3, #32]
 802c1f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 802c1f6:	687b      	ldr	r3, [r7, #4]
 802c1f8:	681b      	ldr	r3, [r3, #0]
 802c1fa:	6a1a      	ldr	r2, [r3, #32]
 802c1fc:	687b      	ldr	r3, [r7, #4]
 802c1fe:	681b      	ldr	r3, [r3, #0]
 802c200:	f022 0201 	bic.w	r2, r2, #1
 802c204:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	681b      	ldr	r3, [r3, #0]
 802c20a:	699b      	ldr	r3, [r3, #24]
 802c20c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802c20e:	68bb      	ldr	r3, [r7, #8]
 802c210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802c214:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 802c216:	683b      	ldr	r3, [r7, #0]
 802c218:	691b      	ldr	r3, [r3, #16]
 802c21a:	011b      	lsls	r3, r3, #4
 802c21c:	68ba      	ldr	r2, [r7, #8]
 802c21e:	4313      	orrs	r3, r2
 802c220:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 802c222:	687b      	ldr	r3, [r7, #4]
 802c224:	681b      	ldr	r3, [r3, #0]
 802c226:	68ba      	ldr	r2, [r7, #8]
 802c228:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 802c22a:	687b      	ldr	r3, [r7, #4]
 802c22c:	681b      	ldr	r3, [r3, #0]
 802c22e:	68fa      	ldr	r2, [r7, #12]
 802c230:	621a      	str	r2, [r3, #32]
      break;
 802c232:	e017      	b.n	802c264 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 802c234:	687b      	ldr	r3, [r7, #4]
 802c236:	6818      	ldr	r0, [r3, #0]
 802c238:	683b      	ldr	r3, [r7, #0]
 802c23a:	6899      	ldr	r1, [r3, #8]
 802c23c:	683b      	ldr	r3, [r7, #0]
 802c23e:	691b      	ldr	r3, [r3, #16]
 802c240:	461a      	mov	r2, r3
 802c242:	f000 f814 	bl	802c26e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 802c246:	e00d      	b.n	802c264 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 802c248:	687b      	ldr	r3, [r7, #4]
 802c24a:	6818      	ldr	r0, [r3, #0]
 802c24c:	683b      	ldr	r3, [r7, #0]
 802c24e:	6899      	ldr	r1, [r3, #8]
 802c250:	683b      	ldr	r3, [r7, #0]
 802c252:	691b      	ldr	r3, [r3, #16]
 802c254:	461a      	mov	r2, r3
 802c256:	f000 f839 	bl	802c2cc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 802c25a:	e003      	b.n	802c264 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 802c25c:	2301      	movs	r3, #1
 802c25e:	75fb      	strb	r3, [r7, #23]
      break;
 802c260:	e000      	b.n	802c264 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 802c262:	bf00      	nop
  }

  return status;
 802c264:	7dfb      	ldrb	r3, [r7, #23]
}
 802c266:	4618      	mov	r0, r3
 802c268:	3718      	adds	r7, #24
 802c26a:	46bd      	mov	sp, r7
 802c26c:	bd80      	pop	{r7, pc}

0802c26e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802c26e:	b480      	push	{r7}
 802c270:	b087      	sub	sp, #28
 802c272:	af00      	add	r7, sp, #0
 802c274:	60f8      	str	r0, [r7, #12]
 802c276:	60b9      	str	r1, [r7, #8]
 802c278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802c27a:	68fb      	ldr	r3, [r7, #12]
 802c27c:	6a1b      	ldr	r3, [r3, #32]
 802c27e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802c280:	68fb      	ldr	r3, [r7, #12]
 802c282:	6a1b      	ldr	r3, [r3, #32]
 802c284:	f023 0201 	bic.w	r2, r3, #1
 802c288:	68fb      	ldr	r3, [r7, #12]
 802c28a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802c28c:	68fb      	ldr	r3, [r7, #12]
 802c28e:	699b      	ldr	r3, [r3, #24]
 802c290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802c292:	693b      	ldr	r3, [r7, #16]
 802c294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802c298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802c29a:	687b      	ldr	r3, [r7, #4]
 802c29c:	011b      	lsls	r3, r3, #4
 802c29e:	693a      	ldr	r2, [r7, #16]
 802c2a0:	4313      	orrs	r3, r2
 802c2a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802c2a4:	697b      	ldr	r3, [r7, #20]
 802c2a6:	f023 030a 	bic.w	r3, r3, #10
 802c2aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802c2ac:	697a      	ldr	r2, [r7, #20]
 802c2ae:	68bb      	ldr	r3, [r7, #8]
 802c2b0:	4313      	orrs	r3, r2
 802c2b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802c2b4:	68fb      	ldr	r3, [r7, #12]
 802c2b6:	693a      	ldr	r2, [r7, #16]
 802c2b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802c2ba:	68fb      	ldr	r3, [r7, #12]
 802c2bc:	697a      	ldr	r2, [r7, #20]
 802c2be:	621a      	str	r2, [r3, #32]
}
 802c2c0:	bf00      	nop
 802c2c2:	371c      	adds	r7, #28
 802c2c4:	46bd      	mov	sp, r7
 802c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2ca:	4770      	bx	lr

0802c2cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802c2cc:	b480      	push	{r7}
 802c2ce:	b087      	sub	sp, #28
 802c2d0:	af00      	add	r7, sp, #0
 802c2d2:	60f8      	str	r0, [r7, #12]
 802c2d4:	60b9      	str	r1, [r7, #8]
 802c2d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802c2d8:	68fb      	ldr	r3, [r7, #12]
 802c2da:	6a1b      	ldr	r3, [r3, #32]
 802c2dc:	f023 0210 	bic.w	r2, r3, #16
 802c2e0:	68fb      	ldr	r3, [r7, #12]
 802c2e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802c2e4:	68fb      	ldr	r3, [r7, #12]
 802c2e6:	699b      	ldr	r3, [r3, #24]
 802c2e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802c2ea:	68fb      	ldr	r3, [r7, #12]
 802c2ec:	6a1b      	ldr	r3, [r3, #32]
 802c2ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802c2f0:	697b      	ldr	r3, [r7, #20]
 802c2f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802c2f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802c2f8:	687b      	ldr	r3, [r7, #4]
 802c2fa:	031b      	lsls	r3, r3, #12
 802c2fc:	697a      	ldr	r2, [r7, #20]
 802c2fe:	4313      	orrs	r3, r2
 802c300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802c302:	693b      	ldr	r3, [r7, #16]
 802c304:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802c308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802c30a:	68bb      	ldr	r3, [r7, #8]
 802c30c:	011b      	lsls	r3, r3, #4
 802c30e:	693a      	ldr	r2, [r7, #16]
 802c310:	4313      	orrs	r3, r2
 802c312:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802c314:	68fb      	ldr	r3, [r7, #12]
 802c316:	697a      	ldr	r2, [r7, #20]
 802c318:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802c31a:	68fb      	ldr	r3, [r7, #12]
 802c31c:	693a      	ldr	r2, [r7, #16]
 802c31e:	621a      	str	r2, [r3, #32]
}
 802c320:	bf00      	nop
 802c322:	371c      	adds	r7, #28
 802c324:	46bd      	mov	sp, r7
 802c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c32a:	4770      	bx	lr

0802c32c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802c32c:	b480      	push	{r7}
 802c32e:	b087      	sub	sp, #28
 802c330:	af00      	add	r7, sp, #0
 802c332:	60f8      	str	r0, [r7, #12]
 802c334:	60b9      	str	r1, [r7, #8]
 802c336:	607a      	str	r2, [r7, #4]
 802c338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802c33a:	68fb      	ldr	r3, [r7, #12]
 802c33c:	689b      	ldr	r3, [r3, #8]
 802c33e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802c340:	697b      	ldr	r3, [r7, #20]
 802c342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802c346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802c348:	683b      	ldr	r3, [r7, #0]
 802c34a:	021a      	lsls	r2, r3, #8
 802c34c:	687b      	ldr	r3, [r7, #4]
 802c34e:	431a      	orrs	r2, r3
 802c350:	68bb      	ldr	r3, [r7, #8]
 802c352:	4313      	orrs	r3, r2
 802c354:	697a      	ldr	r2, [r7, #20]
 802c356:	4313      	orrs	r3, r2
 802c358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802c35a:	68fb      	ldr	r3, [r7, #12]
 802c35c:	697a      	ldr	r2, [r7, #20]
 802c35e:	609a      	str	r2, [r3, #8]
}
 802c360:	bf00      	nop
 802c362:	371c      	adds	r7, #28
 802c364:	46bd      	mov	sp, r7
 802c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c36a:	4770      	bx	lr

0802c36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802c36c:	b480      	push	{r7}
 802c36e:	b085      	sub	sp, #20
 802c370:	af00      	add	r7, sp, #0
 802c372:	6078      	str	r0, [r7, #4]
 802c374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802c376:	687b      	ldr	r3, [r7, #4]
 802c378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c37c:	2b01      	cmp	r3, #1
 802c37e:	d101      	bne.n	802c384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802c380:	2302      	movs	r3, #2
 802c382:	e05a      	b.n	802c43a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802c384:	687b      	ldr	r3, [r7, #4]
 802c386:	2201      	movs	r2, #1
 802c388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802c38c:	687b      	ldr	r3, [r7, #4]
 802c38e:	2202      	movs	r2, #2
 802c390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802c394:	687b      	ldr	r3, [r7, #4]
 802c396:	681b      	ldr	r3, [r3, #0]
 802c398:	685b      	ldr	r3, [r3, #4]
 802c39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802c39c:	687b      	ldr	r3, [r7, #4]
 802c39e:	681b      	ldr	r3, [r3, #0]
 802c3a0:	689b      	ldr	r3, [r3, #8]
 802c3a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802c3a4:	68fb      	ldr	r3, [r7, #12]
 802c3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802c3aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802c3ac:	683b      	ldr	r3, [r7, #0]
 802c3ae:	681b      	ldr	r3, [r3, #0]
 802c3b0:	68fa      	ldr	r2, [r7, #12]
 802c3b2:	4313      	orrs	r3, r2
 802c3b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	68fa      	ldr	r2, [r7, #12]
 802c3bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	681b      	ldr	r3, [r3, #0]
 802c3c2:	4a21      	ldr	r2, [pc, #132]	; (802c448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802c3c4:	4293      	cmp	r3, r2
 802c3c6:	d022      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3c8:	687b      	ldr	r3, [r7, #4]
 802c3ca:	681b      	ldr	r3, [r3, #0]
 802c3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802c3d0:	d01d      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3d2:	687b      	ldr	r3, [r7, #4]
 802c3d4:	681b      	ldr	r3, [r3, #0]
 802c3d6:	4a1d      	ldr	r2, [pc, #116]	; (802c44c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802c3d8:	4293      	cmp	r3, r2
 802c3da:	d018      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3dc:	687b      	ldr	r3, [r7, #4]
 802c3de:	681b      	ldr	r3, [r3, #0]
 802c3e0:	4a1b      	ldr	r2, [pc, #108]	; (802c450 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802c3e2:	4293      	cmp	r3, r2
 802c3e4:	d013      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3e6:	687b      	ldr	r3, [r7, #4]
 802c3e8:	681b      	ldr	r3, [r3, #0]
 802c3ea:	4a1a      	ldr	r2, [pc, #104]	; (802c454 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802c3ec:	4293      	cmp	r3, r2
 802c3ee:	d00e      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3f0:	687b      	ldr	r3, [r7, #4]
 802c3f2:	681b      	ldr	r3, [r3, #0]
 802c3f4:	4a18      	ldr	r2, [pc, #96]	; (802c458 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802c3f6:	4293      	cmp	r3, r2
 802c3f8:	d009      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c3fa:	687b      	ldr	r3, [r7, #4]
 802c3fc:	681b      	ldr	r3, [r3, #0]
 802c3fe:	4a17      	ldr	r2, [pc, #92]	; (802c45c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802c400:	4293      	cmp	r3, r2
 802c402:	d004      	beq.n	802c40e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802c404:	687b      	ldr	r3, [r7, #4]
 802c406:	681b      	ldr	r3, [r3, #0]
 802c408:	4a15      	ldr	r2, [pc, #84]	; (802c460 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802c40a:	4293      	cmp	r3, r2
 802c40c:	d10c      	bne.n	802c428 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802c40e:	68bb      	ldr	r3, [r7, #8]
 802c410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802c414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802c416:	683b      	ldr	r3, [r7, #0]
 802c418:	685b      	ldr	r3, [r3, #4]
 802c41a:	68ba      	ldr	r2, [r7, #8]
 802c41c:	4313      	orrs	r3, r2
 802c41e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802c420:	687b      	ldr	r3, [r7, #4]
 802c422:	681b      	ldr	r3, [r3, #0]
 802c424:	68ba      	ldr	r2, [r7, #8]
 802c426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802c428:	687b      	ldr	r3, [r7, #4]
 802c42a:	2201      	movs	r2, #1
 802c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802c430:	687b      	ldr	r3, [r7, #4]
 802c432:	2200      	movs	r2, #0
 802c434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802c438:	2300      	movs	r3, #0
}
 802c43a:	4618      	mov	r0, r3
 802c43c:	3714      	adds	r7, #20
 802c43e:	46bd      	mov	sp, r7
 802c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c444:	4770      	bx	lr
 802c446:	bf00      	nop
 802c448:	40010000 	.word	0x40010000
 802c44c:	40000400 	.word	0x40000400
 802c450:	40000800 	.word	0x40000800
 802c454:	40000c00 	.word	0x40000c00
 802c458:	40010400 	.word	0x40010400
 802c45c:	40014000 	.word	0x40014000
 802c460:	40001800 	.word	0x40001800

0802c464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802c464:	b580      	push	{r7, lr}
 802c466:	b082      	sub	sp, #8
 802c468:	af00      	add	r7, sp, #0
 802c46a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802c46c:	687b      	ldr	r3, [r7, #4]
 802c46e:	2b00      	cmp	r3, #0
 802c470:	d101      	bne.n	802c476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802c472:	2301      	movs	r3, #1
 802c474:	e03f      	b.n	802c4f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802c476:	687b      	ldr	r3, [r7, #4]
 802c478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c47c:	b2db      	uxtb	r3, r3
 802c47e:	2b00      	cmp	r3, #0
 802c480:	d106      	bne.n	802c490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802c482:	687b      	ldr	r3, [r7, #4]
 802c484:	2200      	movs	r2, #0
 802c486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802c48a:	6878      	ldr	r0, [r7, #4]
 802c48c:	f7fb fc3c 	bl	8027d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	2224      	movs	r2, #36	; 0x24
 802c494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	681b      	ldr	r3, [r3, #0]
 802c49c:	68da      	ldr	r2, [r3, #12]
 802c49e:	687b      	ldr	r3, [r7, #4]
 802c4a0:	681b      	ldr	r3, [r3, #0]
 802c4a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802c4a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802c4a8:	6878      	ldr	r0, [r7, #4]
 802c4aa:	f000 fd7b 	bl	802cfa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802c4ae:	687b      	ldr	r3, [r7, #4]
 802c4b0:	681b      	ldr	r3, [r3, #0]
 802c4b2:	691a      	ldr	r2, [r3, #16]
 802c4b4:	687b      	ldr	r3, [r7, #4]
 802c4b6:	681b      	ldr	r3, [r3, #0]
 802c4b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802c4bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802c4be:	687b      	ldr	r3, [r7, #4]
 802c4c0:	681b      	ldr	r3, [r3, #0]
 802c4c2:	695a      	ldr	r2, [r3, #20]
 802c4c4:	687b      	ldr	r3, [r7, #4]
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802c4cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	681b      	ldr	r3, [r3, #0]
 802c4d2:	68da      	ldr	r2, [r3, #12]
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	681b      	ldr	r3, [r3, #0]
 802c4d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802c4dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c4de:	687b      	ldr	r3, [r7, #4]
 802c4e0:	2200      	movs	r2, #0
 802c4e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802c4e4:	687b      	ldr	r3, [r7, #4]
 802c4e6:	2220      	movs	r2, #32
 802c4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802c4ec:	687b      	ldr	r3, [r7, #4]
 802c4ee:	2220      	movs	r2, #32
 802c4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802c4f4:	2300      	movs	r3, #0
}
 802c4f6:	4618      	mov	r0, r3
 802c4f8:	3708      	adds	r7, #8
 802c4fa:	46bd      	mov	sp, r7
 802c4fc:	bd80      	pop	{r7, pc}

0802c4fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802c4fe:	b580      	push	{r7, lr}
 802c500:	b08a      	sub	sp, #40	; 0x28
 802c502:	af02      	add	r7, sp, #8
 802c504:	60f8      	str	r0, [r7, #12]
 802c506:	60b9      	str	r1, [r7, #8]
 802c508:	603b      	str	r3, [r7, #0]
 802c50a:	4613      	mov	r3, r2
 802c50c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802c50e:	2300      	movs	r3, #0
 802c510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802c512:	68fb      	ldr	r3, [r7, #12]
 802c514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c518:	b2db      	uxtb	r3, r3
 802c51a:	2b20      	cmp	r3, #32
 802c51c:	d17c      	bne.n	802c618 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802c51e:	68bb      	ldr	r3, [r7, #8]
 802c520:	2b00      	cmp	r3, #0
 802c522:	d002      	beq.n	802c52a <HAL_UART_Transmit+0x2c>
 802c524:	88fb      	ldrh	r3, [r7, #6]
 802c526:	2b00      	cmp	r3, #0
 802c528:	d101      	bne.n	802c52e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802c52a:	2301      	movs	r3, #1
 802c52c:	e075      	b.n	802c61a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802c52e:	68fb      	ldr	r3, [r7, #12]
 802c530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802c534:	2b01      	cmp	r3, #1
 802c536:	d101      	bne.n	802c53c <HAL_UART_Transmit+0x3e>
 802c538:	2302      	movs	r3, #2
 802c53a:	e06e      	b.n	802c61a <HAL_UART_Transmit+0x11c>
 802c53c:	68fb      	ldr	r3, [r7, #12]
 802c53e:	2201      	movs	r2, #1
 802c540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c544:	68fb      	ldr	r3, [r7, #12]
 802c546:	2200      	movs	r2, #0
 802c548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802c54a:	68fb      	ldr	r3, [r7, #12]
 802c54c:	2221      	movs	r2, #33	; 0x21
 802c54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802c552:	f7fb fcb9 	bl	8027ec8 <HAL_GetTick>
 802c556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802c558:	68fb      	ldr	r3, [r7, #12]
 802c55a:	88fa      	ldrh	r2, [r7, #6]
 802c55c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802c55e:	68fb      	ldr	r3, [r7, #12]
 802c560:	88fa      	ldrh	r2, [r7, #6]
 802c562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c564:	68fb      	ldr	r3, [r7, #12]
 802c566:	689b      	ldr	r3, [r3, #8]
 802c568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c56c:	d108      	bne.n	802c580 <HAL_UART_Transmit+0x82>
 802c56e:	68fb      	ldr	r3, [r7, #12]
 802c570:	691b      	ldr	r3, [r3, #16]
 802c572:	2b00      	cmp	r3, #0
 802c574:	d104      	bne.n	802c580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802c576:	2300      	movs	r3, #0
 802c578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802c57a:	68bb      	ldr	r3, [r7, #8]
 802c57c:	61bb      	str	r3, [r7, #24]
 802c57e:	e003      	b.n	802c588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802c580:	68bb      	ldr	r3, [r7, #8]
 802c582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802c584:	2300      	movs	r3, #0
 802c586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802c588:	68fb      	ldr	r3, [r7, #12]
 802c58a:	2200      	movs	r2, #0
 802c58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802c590:	e02a      	b.n	802c5e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802c592:	683b      	ldr	r3, [r7, #0]
 802c594:	9300      	str	r3, [sp, #0]
 802c596:	697b      	ldr	r3, [r7, #20]
 802c598:	2200      	movs	r2, #0
 802c59a:	2180      	movs	r1, #128	; 0x80
 802c59c:	68f8      	ldr	r0, [r7, #12]
 802c59e:	f000 faf9 	bl	802cb94 <UART_WaitOnFlagUntilTimeout>
 802c5a2:	4603      	mov	r3, r0
 802c5a4:	2b00      	cmp	r3, #0
 802c5a6:	d001      	beq.n	802c5ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802c5a8:	2303      	movs	r3, #3
 802c5aa:	e036      	b.n	802c61a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802c5ac:	69fb      	ldr	r3, [r7, #28]
 802c5ae:	2b00      	cmp	r3, #0
 802c5b0:	d10b      	bne.n	802c5ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802c5b2:	69bb      	ldr	r3, [r7, #24]
 802c5b4:	881b      	ldrh	r3, [r3, #0]
 802c5b6:	461a      	mov	r2, r3
 802c5b8:	68fb      	ldr	r3, [r7, #12]
 802c5ba:	681b      	ldr	r3, [r3, #0]
 802c5bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802c5c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802c5c2:	69bb      	ldr	r3, [r7, #24]
 802c5c4:	3302      	adds	r3, #2
 802c5c6:	61bb      	str	r3, [r7, #24]
 802c5c8:	e007      	b.n	802c5da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802c5ca:	69fb      	ldr	r3, [r7, #28]
 802c5cc:	781a      	ldrb	r2, [r3, #0]
 802c5ce:	68fb      	ldr	r3, [r7, #12]
 802c5d0:	681b      	ldr	r3, [r3, #0]
 802c5d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802c5d4:	69fb      	ldr	r3, [r7, #28]
 802c5d6:	3301      	adds	r3, #1
 802c5d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802c5da:	68fb      	ldr	r3, [r7, #12]
 802c5dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802c5de:	b29b      	uxth	r3, r3
 802c5e0:	3b01      	subs	r3, #1
 802c5e2:	b29a      	uxth	r2, r3
 802c5e4:	68fb      	ldr	r3, [r7, #12]
 802c5e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802c5e8:	68fb      	ldr	r3, [r7, #12]
 802c5ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802c5ec:	b29b      	uxth	r3, r3
 802c5ee:	2b00      	cmp	r3, #0
 802c5f0:	d1cf      	bne.n	802c592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802c5f2:	683b      	ldr	r3, [r7, #0]
 802c5f4:	9300      	str	r3, [sp, #0]
 802c5f6:	697b      	ldr	r3, [r7, #20]
 802c5f8:	2200      	movs	r2, #0
 802c5fa:	2140      	movs	r1, #64	; 0x40
 802c5fc:	68f8      	ldr	r0, [r7, #12]
 802c5fe:	f000 fac9 	bl	802cb94 <UART_WaitOnFlagUntilTimeout>
 802c602:	4603      	mov	r3, r0
 802c604:	2b00      	cmp	r3, #0
 802c606:	d001      	beq.n	802c60c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802c608:	2303      	movs	r3, #3
 802c60a:	e006      	b.n	802c61a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802c60c:	68fb      	ldr	r3, [r7, #12]
 802c60e:	2220      	movs	r2, #32
 802c610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802c614:	2300      	movs	r3, #0
 802c616:	e000      	b.n	802c61a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802c618:	2302      	movs	r3, #2
  }
}
 802c61a:	4618      	mov	r0, r3
 802c61c:	3720      	adds	r7, #32
 802c61e:	46bd      	mov	sp, r7
 802c620:	bd80      	pop	{r7, pc}
	...

0802c624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802c624:	b580      	push	{r7, lr}
 802c626:	b0ba      	sub	sp, #232	; 0xe8
 802c628:	af00      	add	r7, sp, #0
 802c62a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802c62c:	687b      	ldr	r3, [r7, #4]
 802c62e:	681b      	ldr	r3, [r3, #0]
 802c630:	681b      	ldr	r3, [r3, #0]
 802c632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802c636:	687b      	ldr	r3, [r7, #4]
 802c638:	681b      	ldr	r3, [r3, #0]
 802c63a:	68db      	ldr	r3, [r3, #12]
 802c63c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802c640:	687b      	ldr	r3, [r7, #4]
 802c642:	681b      	ldr	r3, [r3, #0]
 802c644:	695b      	ldr	r3, [r3, #20]
 802c646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802c64a:	2300      	movs	r3, #0
 802c64c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802c650:	2300      	movs	r3, #0
 802c652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802c656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c65a:	f003 030f 	and.w	r3, r3, #15
 802c65e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802c662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802c666:	2b00      	cmp	r3, #0
 802c668:	d10f      	bne.n	802c68a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802c66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c66e:	f003 0320 	and.w	r3, r3, #32
 802c672:	2b00      	cmp	r3, #0
 802c674:	d009      	beq.n	802c68a <HAL_UART_IRQHandler+0x66>
 802c676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c67a:	f003 0320 	and.w	r3, r3, #32
 802c67e:	2b00      	cmp	r3, #0
 802c680:	d003      	beq.n	802c68a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802c682:	6878      	ldr	r0, [r7, #4]
 802c684:	f000 fbd3 	bl	802ce2e <UART_Receive_IT>
      return;
 802c688:	e256      	b.n	802cb38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802c68a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802c68e:	2b00      	cmp	r3, #0
 802c690:	f000 80de 	beq.w	802c850 <HAL_UART_IRQHandler+0x22c>
 802c694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c698:	f003 0301 	and.w	r3, r3, #1
 802c69c:	2b00      	cmp	r3, #0
 802c69e:	d106      	bne.n	802c6ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802c6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c6a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802c6a8:	2b00      	cmp	r3, #0
 802c6aa:	f000 80d1 	beq.w	802c850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c6b2:	f003 0301 	and.w	r3, r3, #1
 802c6b6:	2b00      	cmp	r3, #0
 802c6b8:	d00b      	beq.n	802c6d2 <HAL_UART_IRQHandler+0xae>
 802c6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802c6c2:	2b00      	cmp	r3, #0
 802c6c4:	d005      	beq.n	802c6d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802c6c6:	687b      	ldr	r3, [r7, #4]
 802c6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c6ca:	f043 0201 	orr.w	r2, r3, #1
 802c6ce:	687b      	ldr	r3, [r7, #4]
 802c6d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802c6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c6d6:	f003 0304 	and.w	r3, r3, #4
 802c6da:	2b00      	cmp	r3, #0
 802c6dc:	d00b      	beq.n	802c6f6 <HAL_UART_IRQHandler+0xd2>
 802c6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c6e2:	f003 0301 	and.w	r3, r3, #1
 802c6e6:	2b00      	cmp	r3, #0
 802c6e8:	d005      	beq.n	802c6f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c6ee:	f043 0202 	orr.w	r2, r3, #2
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802c6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c6fa:	f003 0302 	and.w	r3, r3, #2
 802c6fe:	2b00      	cmp	r3, #0
 802c700:	d00b      	beq.n	802c71a <HAL_UART_IRQHandler+0xf6>
 802c702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c706:	f003 0301 	and.w	r3, r3, #1
 802c70a:	2b00      	cmp	r3, #0
 802c70c:	d005      	beq.n	802c71a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802c70e:	687b      	ldr	r3, [r7, #4]
 802c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c712:	f043 0204 	orr.w	r2, r3, #4
 802c716:	687b      	ldr	r3, [r7, #4]
 802c718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802c71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c71e:	f003 0308 	and.w	r3, r3, #8
 802c722:	2b00      	cmp	r3, #0
 802c724:	d011      	beq.n	802c74a <HAL_UART_IRQHandler+0x126>
 802c726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c72a:	f003 0320 	and.w	r3, r3, #32
 802c72e:	2b00      	cmp	r3, #0
 802c730:	d105      	bne.n	802c73e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802c732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802c736:	f003 0301 	and.w	r3, r3, #1
 802c73a:	2b00      	cmp	r3, #0
 802c73c:	d005      	beq.n	802c74a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802c73e:	687b      	ldr	r3, [r7, #4]
 802c740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c742:	f043 0208 	orr.w	r2, r3, #8
 802c746:	687b      	ldr	r3, [r7, #4]
 802c748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802c74a:	687b      	ldr	r3, [r7, #4]
 802c74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c74e:	2b00      	cmp	r3, #0
 802c750:	f000 81ed 	beq.w	802cb2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802c754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c758:	f003 0320 	and.w	r3, r3, #32
 802c75c:	2b00      	cmp	r3, #0
 802c75e:	d008      	beq.n	802c772 <HAL_UART_IRQHandler+0x14e>
 802c760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c764:	f003 0320 	and.w	r3, r3, #32
 802c768:	2b00      	cmp	r3, #0
 802c76a:	d002      	beq.n	802c772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802c76c:	6878      	ldr	r0, [r7, #4]
 802c76e:	f000 fb5e 	bl	802ce2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802c772:	687b      	ldr	r3, [r7, #4]
 802c774:	681b      	ldr	r3, [r3, #0]
 802c776:	695b      	ldr	r3, [r3, #20]
 802c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c77c:	2b40      	cmp	r3, #64	; 0x40
 802c77e:	bf0c      	ite	eq
 802c780:	2301      	moveq	r3, #1
 802c782:	2300      	movne	r3, #0
 802c784:	b2db      	uxtb	r3, r3
 802c786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802c78a:	687b      	ldr	r3, [r7, #4]
 802c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c78e:	f003 0308 	and.w	r3, r3, #8
 802c792:	2b00      	cmp	r3, #0
 802c794:	d103      	bne.n	802c79e <HAL_UART_IRQHandler+0x17a>
 802c796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802c79a:	2b00      	cmp	r3, #0
 802c79c:	d04f      	beq.n	802c83e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802c79e:	6878      	ldr	r0, [r7, #4]
 802c7a0:	f000 fa66 	bl	802cc70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c7a4:	687b      	ldr	r3, [r7, #4]
 802c7a6:	681b      	ldr	r3, [r3, #0]
 802c7a8:	695b      	ldr	r3, [r3, #20]
 802c7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c7ae:	2b40      	cmp	r3, #64	; 0x40
 802c7b0:	d141      	bne.n	802c836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c7b2:	687b      	ldr	r3, [r7, #4]
 802c7b4:	681b      	ldr	r3, [r3, #0]
 802c7b6:	3314      	adds	r3, #20
 802c7b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c7bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802c7c0:	e853 3f00 	ldrex	r3, [r3]
 802c7c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802c7c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802c7cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c7d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c7d4:	687b      	ldr	r3, [r7, #4]
 802c7d6:	681b      	ldr	r3, [r3, #0]
 802c7d8:	3314      	adds	r3, #20
 802c7da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802c7de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802c7e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c7e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c7ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802c7ee:	e841 2300 	strex	r3, r2, [r1]
 802c7f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802c7f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c7fa:	2b00      	cmp	r3, #0
 802c7fc:	d1d9      	bne.n	802c7b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802c7fe:	687b      	ldr	r3, [r7, #4]
 802c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c802:	2b00      	cmp	r3, #0
 802c804:	d013      	beq.n	802c82e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802c806:	687b      	ldr	r3, [r7, #4]
 802c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c80a:	4a7d      	ldr	r2, [pc, #500]	; (802ca00 <HAL_UART_IRQHandler+0x3dc>)
 802c80c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802c80e:	687b      	ldr	r3, [r7, #4]
 802c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c812:	4618      	mov	r0, r3
 802c814:	f7fb fd6b 	bl	80282ee <HAL_DMA_Abort_IT>
 802c818:	4603      	mov	r3, r0
 802c81a:	2b00      	cmp	r3, #0
 802c81c:	d016      	beq.n	802c84c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802c81e:	687b      	ldr	r3, [r7, #4]
 802c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c824:	687a      	ldr	r2, [r7, #4]
 802c826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c828:	4610      	mov	r0, r2
 802c82a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c82c:	e00e      	b.n	802c84c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802c82e:	6878      	ldr	r0, [r7, #4]
 802c830:	f000 f99a 	bl	802cb68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c834:	e00a      	b.n	802c84c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802c836:	6878      	ldr	r0, [r7, #4]
 802c838:	f000 f996 	bl	802cb68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c83c:	e006      	b.n	802c84c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802c83e:	6878      	ldr	r0, [r7, #4]
 802c840:	f000 f992 	bl	802cb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c844:	687b      	ldr	r3, [r7, #4]
 802c846:	2200      	movs	r2, #0
 802c848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802c84a:	e170      	b.n	802cb2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c84c:	bf00      	nop
    return;
 802c84e:	e16e      	b.n	802cb2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c854:	2b01      	cmp	r3, #1
 802c856:	f040 814a 	bne.w	802caee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802c85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c85e:	f003 0310 	and.w	r3, r3, #16
 802c862:	2b00      	cmp	r3, #0
 802c864:	f000 8143 	beq.w	802caee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802c868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c86c:	f003 0310 	and.w	r3, r3, #16
 802c870:	2b00      	cmp	r3, #0
 802c872:	f000 813c 	beq.w	802caee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c876:	2300      	movs	r3, #0
 802c878:	60bb      	str	r3, [r7, #8]
 802c87a:	687b      	ldr	r3, [r7, #4]
 802c87c:	681b      	ldr	r3, [r3, #0]
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	60bb      	str	r3, [r7, #8]
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	681b      	ldr	r3, [r3, #0]
 802c886:	685b      	ldr	r3, [r3, #4]
 802c888:	60bb      	str	r3, [r7, #8]
 802c88a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	681b      	ldr	r3, [r3, #0]
 802c890:	695b      	ldr	r3, [r3, #20]
 802c892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c896:	2b40      	cmp	r3, #64	; 0x40
 802c898:	f040 80b4 	bne.w	802ca04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c8a0:	681b      	ldr	r3, [r3, #0]
 802c8a2:	685b      	ldr	r3, [r3, #4]
 802c8a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802c8a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802c8ac:	2b00      	cmp	r3, #0
 802c8ae:	f000 8140 	beq.w	802cb32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802c8b2:	687b      	ldr	r3, [r7, #4]
 802c8b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c8b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c8ba:	429a      	cmp	r2, r3
 802c8bc:	f080 8139 	bcs.w	802cb32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802c8c0:	687b      	ldr	r3, [r7, #4]
 802c8c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c8c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802c8c8:	687b      	ldr	r3, [r7, #4]
 802c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c8cc:	69db      	ldr	r3, [r3, #28]
 802c8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c8d2:	f000 8088 	beq.w	802c9e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c8d6:	687b      	ldr	r3, [r7, #4]
 802c8d8:	681b      	ldr	r3, [r3, #0]
 802c8da:	330c      	adds	r3, #12
 802c8dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c8e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c8e4:	e853 3f00 	ldrex	r3, [r3]
 802c8e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802c8ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802c8f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802c8f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c8f8:	687b      	ldr	r3, [r7, #4]
 802c8fa:	681b      	ldr	r3, [r3, #0]
 802c8fc:	330c      	adds	r3, #12
 802c8fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802c902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802c906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c90a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802c90e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802c912:	e841 2300 	strex	r3, r2, [r1]
 802c916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802c91a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c91e:	2b00      	cmp	r3, #0
 802c920:	d1d9      	bne.n	802c8d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	3314      	adds	r3, #20
 802c928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c92c:	e853 3f00 	ldrex	r3, [r3]
 802c930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802c932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c934:	f023 0301 	bic.w	r3, r3, #1
 802c938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802c93c:	687b      	ldr	r3, [r7, #4]
 802c93e:	681b      	ldr	r3, [r3, #0]
 802c940:	3314      	adds	r3, #20
 802c942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802c946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802c94a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c94c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802c94e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802c952:	e841 2300 	strex	r3, r2, [r1]
 802c956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802c958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c95a:	2b00      	cmp	r3, #0
 802c95c:	d1e1      	bne.n	802c922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c95e:	687b      	ldr	r3, [r7, #4]
 802c960:	681b      	ldr	r3, [r3, #0]
 802c962:	3314      	adds	r3, #20
 802c964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c968:	e853 3f00 	ldrex	r3, [r3]
 802c96c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802c96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	681b      	ldr	r3, [r3, #0]
 802c97c:	3314      	adds	r3, #20
 802c97e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802c982:	66fa      	str	r2, [r7, #108]	; 0x6c
 802c984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802c988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802c98a:	e841 2300 	strex	r3, r2, [r1]
 802c98e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802c990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c992:	2b00      	cmp	r3, #0
 802c994:	d1e3      	bne.n	802c95e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802c996:	687b      	ldr	r3, [r7, #4]
 802c998:	2220      	movs	r2, #32
 802c99a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c99e:	687b      	ldr	r3, [r7, #4]
 802c9a0:	2200      	movs	r2, #0
 802c9a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	681b      	ldr	r3, [r3, #0]
 802c9a8:	330c      	adds	r3, #12
 802c9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c9ae:	e853 3f00 	ldrex	r3, [r3]
 802c9b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802c9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c9b6:	f023 0310 	bic.w	r3, r3, #16
 802c9ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802c9be:	687b      	ldr	r3, [r7, #4]
 802c9c0:	681b      	ldr	r3, [r3, #0]
 802c9c2:	330c      	adds	r3, #12
 802c9c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802c9c8:	65ba      	str	r2, [r7, #88]	; 0x58
 802c9ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c9cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802c9ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802c9d0:	e841 2300 	strex	r3, r2, [r1]
 802c9d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802c9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c9d8:	2b00      	cmp	r3, #0
 802c9da:	d1e3      	bne.n	802c9a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802c9dc:	687b      	ldr	r3, [r7, #4]
 802c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c9e0:	4618      	mov	r0, r3
 802c9e2:	f7fb fc14 	bl	802820e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802c9e6:	687b      	ldr	r3, [r7, #4]
 802c9e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c9ea:	687b      	ldr	r3, [r7, #4]
 802c9ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c9ee:	b29b      	uxth	r3, r3
 802c9f0:	1ad3      	subs	r3, r2, r3
 802c9f2:	b29b      	uxth	r3, r3
 802c9f4:	4619      	mov	r1, r3
 802c9f6:	6878      	ldr	r0, [r7, #4]
 802c9f8:	f000 f8c0 	bl	802cb7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c9fc:	e099      	b.n	802cb32 <HAL_UART_IRQHandler+0x50e>
 802c9fe:	bf00      	nop
 802ca00:	0802cd37 	.word	0x0802cd37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802ca08:	687b      	ldr	r3, [r7, #4]
 802ca0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802ca0c:	b29b      	uxth	r3, r3
 802ca0e:	1ad3      	subs	r3, r2, r3
 802ca10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802ca14:	687b      	ldr	r3, [r7, #4]
 802ca16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802ca18:	b29b      	uxth	r3, r3
 802ca1a:	2b00      	cmp	r3, #0
 802ca1c:	f000 808b 	beq.w	802cb36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802ca20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802ca24:	2b00      	cmp	r3, #0
 802ca26:	f000 8086 	beq.w	802cb36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802ca2a:	687b      	ldr	r3, [r7, #4]
 802ca2c:	681b      	ldr	r3, [r3, #0]
 802ca2e:	330c      	adds	r3, #12
 802ca30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ca34:	e853 3f00 	ldrex	r3, [r3]
 802ca38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802ca3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ca3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802ca40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802ca44:	687b      	ldr	r3, [r7, #4]
 802ca46:	681b      	ldr	r3, [r3, #0]
 802ca48:	330c      	adds	r3, #12
 802ca4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802ca4e:	647a      	str	r2, [r7, #68]	; 0x44
 802ca50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ca52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802ca54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802ca56:	e841 2300 	strex	r3, r2, [r1]
 802ca5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802ca5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ca5e:	2b00      	cmp	r3, #0
 802ca60:	d1e3      	bne.n	802ca2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802ca62:	687b      	ldr	r3, [r7, #4]
 802ca64:	681b      	ldr	r3, [r3, #0]
 802ca66:	3314      	adds	r3, #20
 802ca68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ca6c:	e853 3f00 	ldrex	r3, [r3]
 802ca70:	623b      	str	r3, [r7, #32]
   return(result);
 802ca72:	6a3b      	ldr	r3, [r7, #32]
 802ca74:	f023 0301 	bic.w	r3, r3, #1
 802ca78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802ca7c:	687b      	ldr	r3, [r7, #4]
 802ca7e:	681b      	ldr	r3, [r3, #0]
 802ca80:	3314      	adds	r3, #20
 802ca82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802ca86:	633a      	str	r2, [r7, #48]	; 0x30
 802ca88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ca8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802ca8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ca8e:	e841 2300 	strex	r3, r2, [r1]
 802ca92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	d1e3      	bne.n	802ca62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	2220      	movs	r2, #32
 802ca9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802caa2:	687b      	ldr	r3, [r7, #4]
 802caa4:	2200      	movs	r2, #0
 802caa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802caa8:	687b      	ldr	r3, [r7, #4]
 802caaa:	681b      	ldr	r3, [r3, #0]
 802caac:	330c      	adds	r3, #12
 802caae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cab0:	693b      	ldr	r3, [r7, #16]
 802cab2:	e853 3f00 	ldrex	r3, [r3]
 802cab6:	60fb      	str	r3, [r7, #12]
   return(result);
 802cab8:	68fb      	ldr	r3, [r7, #12]
 802caba:	f023 0310 	bic.w	r3, r3, #16
 802cabe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802cac2:	687b      	ldr	r3, [r7, #4]
 802cac4:	681b      	ldr	r3, [r3, #0]
 802cac6:	330c      	adds	r3, #12
 802cac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802cacc:	61fa      	str	r2, [r7, #28]
 802cace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cad0:	69b9      	ldr	r1, [r7, #24]
 802cad2:	69fa      	ldr	r2, [r7, #28]
 802cad4:	e841 2300 	strex	r3, r2, [r1]
 802cad8:	617b      	str	r3, [r7, #20]
   return(result);
 802cada:	697b      	ldr	r3, [r7, #20]
 802cadc:	2b00      	cmp	r3, #0
 802cade:	d1e3      	bne.n	802caa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802cae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802cae4:	4619      	mov	r1, r3
 802cae6:	6878      	ldr	r0, [r7, #4]
 802cae8:	f000 f848 	bl	802cb7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802caec:	e023      	b.n	802cb36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802caee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802caf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802caf6:	2b00      	cmp	r3, #0
 802caf8:	d009      	beq.n	802cb0e <HAL_UART_IRQHandler+0x4ea>
 802cafa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cb02:	2b00      	cmp	r3, #0
 802cb04:	d003      	beq.n	802cb0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802cb06:	6878      	ldr	r0, [r7, #4]
 802cb08:	f000 f929 	bl	802cd5e <UART_Transmit_IT>
    return;
 802cb0c:	e014      	b.n	802cb38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802cb0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802cb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802cb16:	2b00      	cmp	r3, #0
 802cb18:	d00e      	beq.n	802cb38 <HAL_UART_IRQHandler+0x514>
 802cb1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802cb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802cb22:	2b00      	cmp	r3, #0
 802cb24:	d008      	beq.n	802cb38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802cb26:	6878      	ldr	r0, [r7, #4]
 802cb28:	f000 f969 	bl	802cdfe <UART_EndTransmit_IT>
    return;
 802cb2c:	e004      	b.n	802cb38 <HAL_UART_IRQHandler+0x514>
    return;
 802cb2e:	bf00      	nop
 802cb30:	e002      	b.n	802cb38 <HAL_UART_IRQHandler+0x514>
      return;
 802cb32:	bf00      	nop
 802cb34:	e000      	b.n	802cb38 <HAL_UART_IRQHandler+0x514>
      return;
 802cb36:	bf00      	nop
  }
}
 802cb38:	37e8      	adds	r7, #232	; 0xe8
 802cb3a:	46bd      	mov	sp, r7
 802cb3c:	bd80      	pop	{r7, pc}
 802cb3e:	bf00      	nop

0802cb40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802cb40:	b480      	push	{r7}
 802cb42:	b083      	sub	sp, #12
 802cb44:	af00      	add	r7, sp, #0
 802cb46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802cb48:	bf00      	nop
 802cb4a:	370c      	adds	r7, #12
 802cb4c:	46bd      	mov	sp, r7
 802cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb52:	4770      	bx	lr

0802cb54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802cb54:	b480      	push	{r7}
 802cb56:	b083      	sub	sp, #12
 802cb58:	af00      	add	r7, sp, #0
 802cb5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802cb5c:	bf00      	nop
 802cb5e:	370c      	adds	r7, #12
 802cb60:	46bd      	mov	sp, r7
 802cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb66:	4770      	bx	lr

0802cb68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802cb68:	b480      	push	{r7}
 802cb6a:	b083      	sub	sp, #12
 802cb6c:	af00      	add	r7, sp, #0
 802cb6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802cb70:	bf00      	nop
 802cb72:	370c      	adds	r7, #12
 802cb74:	46bd      	mov	sp, r7
 802cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb7a:	4770      	bx	lr

0802cb7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802cb7c:	b480      	push	{r7}
 802cb7e:	b083      	sub	sp, #12
 802cb80:	af00      	add	r7, sp, #0
 802cb82:	6078      	str	r0, [r7, #4]
 802cb84:	460b      	mov	r3, r1
 802cb86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802cb88:	bf00      	nop
 802cb8a:	370c      	adds	r7, #12
 802cb8c:	46bd      	mov	sp, r7
 802cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb92:	4770      	bx	lr

0802cb94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802cb94:	b580      	push	{r7, lr}
 802cb96:	b090      	sub	sp, #64	; 0x40
 802cb98:	af00      	add	r7, sp, #0
 802cb9a:	60f8      	str	r0, [r7, #12]
 802cb9c:	60b9      	str	r1, [r7, #8]
 802cb9e:	603b      	str	r3, [r7, #0]
 802cba0:	4613      	mov	r3, r2
 802cba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802cba4:	e050      	b.n	802cc48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802cba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802cba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 802cbac:	d04c      	beq.n	802cc48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802cbae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	d007      	beq.n	802cbc4 <UART_WaitOnFlagUntilTimeout+0x30>
 802cbb4:	f7fb f988 	bl	8027ec8 <HAL_GetTick>
 802cbb8:	4602      	mov	r2, r0
 802cbba:	683b      	ldr	r3, [r7, #0]
 802cbbc:	1ad3      	subs	r3, r2, r3
 802cbbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802cbc0:	429a      	cmp	r2, r3
 802cbc2:	d241      	bcs.n	802cc48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802cbc4:	68fb      	ldr	r3, [r7, #12]
 802cbc6:	681b      	ldr	r3, [r3, #0]
 802cbc8:	330c      	adds	r3, #12
 802cbca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cbce:	e853 3f00 	ldrex	r3, [r3]
 802cbd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cbd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802cbda:	63fb      	str	r3, [r7, #60]	; 0x3c
 802cbdc:	68fb      	ldr	r3, [r7, #12]
 802cbde:	681b      	ldr	r3, [r3, #0]
 802cbe0:	330c      	adds	r3, #12
 802cbe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802cbe4:	637a      	str	r2, [r7, #52]	; 0x34
 802cbe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cbe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802cbea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802cbec:	e841 2300 	strex	r3, r2, [r1]
 802cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cbf4:	2b00      	cmp	r3, #0
 802cbf6:	d1e5      	bne.n	802cbc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802cbf8:	68fb      	ldr	r3, [r7, #12]
 802cbfa:	681b      	ldr	r3, [r3, #0]
 802cbfc:	3314      	adds	r3, #20
 802cbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc00:	697b      	ldr	r3, [r7, #20]
 802cc02:	e853 3f00 	ldrex	r3, [r3]
 802cc06:	613b      	str	r3, [r7, #16]
   return(result);
 802cc08:	693b      	ldr	r3, [r7, #16]
 802cc0a:	f023 0301 	bic.w	r3, r3, #1
 802cc0e:	63bb      	str	r3, [r7, #56]	; 0x38
 802cc10:	68fb      	ldr	r3, [r7, #12]
 802cc12:	681b      	ldr	r3, [r3, #0]
 802cc14:	3314      	adds	r3, #20
 802cc16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802cc18:	623a      	str	r2, [r7, #32]
 802cc1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cc1c:	69f9      	ldr	r1, [r7, #28]
 802cc1e:	6a3a      	ldr	r2, [r7, #32]
 802cc20:	e841 2300 	strex	r3, r2, [r1]
 802cc24:	61bb      	str	r3, [r7, #24]
   return(result);
 802cc26:	69bb      	ldr	r3, [r7, #24]
 802cc28:	2b00      	cmp	r3, #0
 802cc2a:	d1e5      	bne.n	802cbf8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802cc2c:	68fb      	ldr	r3, [r7, #12]
 802cc2e:	2220      	movs	r2, #32
 802cc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802cc34:	68fb      	ldr	r3, [r7, #12]
 802cc36:	2220      	movs	r2, #32
 802cc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802cc3c:	68fb      	ldr	r3, [r7, #12]
 802cc3e:	2200      	movs	r2, #0
 802cc40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802cc44:	2303      	movs	r3, #3
 802cc46:	e00f      	b.n	802cc68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802cc48:	68fb      	ldr	r3, [r7, #12]
 802cc4a:	681b      	ldr	r3, [r3, #0]
 802cc4c:	681a      	ldr	r2, [r3, #0]
 802cc4e:	68bb      	ldr	r3, [r7, #8]
 802cc50:	4013      	ands	r3, r2
 802cc52:	68ba      	ldr	r2, [r7, #8]
 802cc54:	429a      	cmp	r2, r3
 802cc56:	bf0c      	ite	eq
 802cc58:	2301      	moveq	r3, #1
 802cc5a:	2300      	movne	r3, #0
 802cc5c:	b2db      	uxtb	r3, r3
 802cc5e:	461a      	mov	r2, r3
 802cc60:	79fb      	ldrb	r3, [r7, #7]
 802cc62:	429a      	cmp	r2, r3
 802cc64:	d09f      	beq.n	802cba6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802cc66:	2300      	movs	r3, #0
}
 802cc68:	4618      	mov	r0, r3
 802cc6a:	3740      	adds	r7, #64	; 0x40
 802cc6c:	46bd      	mov	sp, r7
 802cc6e:	bd80      	pop	{r7, pc}

0802cc70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802cc70:	b480      	push	{r7}
 802cc72:	b095      	sub	sp, #84	; 0x54
 802cc74:	af00      	add	r7, sp, #0
 802cc76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802cc78:	687b      	ldr	r3, [r7, #4]
 802cc7a:	681b      	ldr	r3, [r3, #0]
 802cc7c:	330c      	adds	r3, #12
 802cc7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802cc82:	e853 3f00 	ldrex	r3, [r3]
 802cc86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cc8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802cc8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802cc90:	687b      	ldr	r3, [r7, #4]
 802cc92:	681b      	ldr	r3, [r3, #0]
 802cc94:	330c      	adds	r3, #12
 802cc96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802cc98:	643a      	str	r2, [r7, #64]	; 0x40
 802cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cc9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802cc9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802cca0:	e841 2300 	strex	r3, r2, [r1]
 802cca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802cca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cca8:	2b00      	cmp	r3, #0
 802ccaa:	d1e5      	bne.n	802cc78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802ccac:	687b      	ldr	r3, [r7, #4]
 802ccae:	681b      	ldr	r3, [r3, #0]
 802ccb0:	3314      	adds	r3, #20
 802ccb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ccb4:	6a3b      	ldr	r3, [r7, #32]
 802ccb6:	e853 3f00 	ldrex	r3, [r3]
 802ccba:	61fb      	str	r3, [r7, #28]
   return(result);
 802ccbc:	69fb      	ldr	r3, [r7, #28]
 802ccbe:	f023 0301 	bic.w	r3, r3, #1
 802ccc2:	64bb      	str	r3, [r7, #72]	; 0x48
 802ccc4:	687b      	ldr	r3, [r7, #4]
 802ccc6:	681b      	ldr	r3, [r3, #0]
 802ccc8:	3314      	adds	r3, #20
 802ccca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802cccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 802ccce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ccd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802ccd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ccd4:	e841 2300 	strex	r3, r2, [r1]
 802ccd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802ccda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ccdc:	2b00      	cmp	r3, #0
 802ccde:	d1e5      	bne.n	802ccac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802cce0:	687b      	ldr	r3, [r7, #4]
 802cce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cce4:	2b01      	cmp	r3, #1
 802cce6:	d119      	bne.n	802cd1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802cce8:	687b      	ldr	r3, [r7, #4]
 802ccea:	681b      	ldr	r3, [r3, #0]
 802ccec:	330c      	adds	r3, #12
 802ccee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ccf0:	68fb      	ldr	r3, [r7, #12]
 802ccf2:	e853 3f00 	ldrex	r3, [r3]
 802ccf6:	60bb      	str	r3, [r7, #8]
   return(result);
 802ccf8:	68bb      	ldr	r3, [r7, #8]
 802ccfa:	f023 0310 	bic.w	r3, r3, #16
 802ccfe:	647b      	str	r3, [r7, #68]	; 0x44
 802cd00:	687b      	ldr	r3, [r7, #4]
 802cd02:	681b      	ldr	r3, [r3, #0]
 802cd04:	330c      	adds	r3, #12
 802cd06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802cd08:	61ba      	str	r2, [r7, #24]
 802cd0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cd0c:	6979      	ldr	r1, [r7, #20]
 802cd0e:	69ba      	ldr	r2, [r7, #24]
 802cd10:	e841 2300 	strex	r3, r2, [r1]
 802cd14:	613b      	str	r3, [r7, #16]
   return(result);
 802cd16:	693b      	ldr	r3, [r7, #16]
 802cd18:	2b00      	cmp	r3, #0
 802cd1a:	d1e5      	bne.n	802cce8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802cd1c:	687b      	ldr	r3, [r7, #4]
 802cd1e:	2220      	movs	r2, #32
 802cd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	2200      	movs	r2, #0
 802cd28:	631a      	str	r2, [r3, #48]	; 0x30
}
 802cd2a:	bf00      	nop
 802cd2c:	3754      	adds	r7, #84	; 0x54
 802cd2e:	46bd      	mov	sp, r7
 802cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd34:	4770      	bx	lr

0802cd36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802cd36:	b580      	push	{r7, lr}
 802cd38:	b084      	sub	sp, #16
 802cd3a:	af00      	add	r7, sp, #0
 802cd3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802cd3e:	687b      	ldr	r3, [r7, #4]
 802cd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cd42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802cd44:	68fb      	ldr	r3, [r7, #12]
 802cd46:	2200      	movs	r2, #0
 802cd48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802cd4a:	68fb      	ldr	r3, [r7, #12]
 802cd4c:	2200      	movs	r2, #0
 802cd4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802cd50:	68f8      	ldr	r0, [r7, #12]
 802cd52:	f7ff ff09 	bl	802cb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802cd56:	bf00      	nop
 802cd58:	3710      	adds	r7, #16
 802cd5a:	46bd      	mov	sp, r7
 802cd5c:	bd80      	pop	{r7, pc}

0802cd5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802cd5e:	b480      	push	{r7}
 802cd60:	b085      	sub	sp, #20
 802cd62:	af00      	add	r7, sp, #0
 802cd64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802cd66:	687b      	ldr	r3, [r7, #4]
 802cd68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802cd6c:	b2db      	uxtb	r3, r3
 802cd6e:	2b21      	cmp	r3, #33	; 0x21
 802cd70:	d13e      	bne.n	802cdf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802cd72:	687b      	ldr	r3, [r7, #4]
 802cd74:	689b      	ldr	r3, [r3, #8]
 802cd76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802cd7a:	d114      	bne.n	802cda6 <UART_Transmit_IT+0x48>
 802cd7c:	687b      	ldr	r3, [r7, #4]
 802cd7e:	691b      	ldr	r3, [r3, #16]
 802cd80:	2b00      	cmp	r3, #0
 802cd82:	d110      	bne.n	802cda6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	6a1b      	ldr	r3, [r3, #32]
 802cd88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802cd8a:	68fb      	ldr	r3, [r7, #12]
 802cd8c:	881b      	ldrh	r3, [r3, #0]
 802cd8e:	461a      	mov	r2, r3
 802cd90:	687b      	ldr	r3, [r7, #4]
 802cd92:	681b      	ldr	r3, [r3, #0]
 802cd94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802cd98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802cd9a:	687b      	ldr	r3, [r7, #4]
 802cd9c:	6a1b      	ldr	r3, [r3, #32]
 802cd9e:	1c9a      	adds	r2, r3, #2
 802cda0:	687b      	ldr	r3, [r7, #4]
 802cda2:	621a      	str	r2, [r3, #32]
 802cda4:	e008      	b.n	802cdb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802cda6:	687b      	ldr	r3, [r7, #4]
 802cda8:	6a1b      	ldr	r3, [r3, #32]
 802cdaa:	1c59      	adds	r1, r3, #1
 802cdac:	687a      	ldr	r2, [r7, #4]
 802cdae:	6211      	str	r1, [r2, #32]
 802cdb0:	781a      	ldrb	r2, [r3, #0]
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	681b      	ldr	r3, [r3, #0]
 802cdb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802cdb8:	687b      	ldr	r3, [r7, #4]
 802cdba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802cdbc:	b29b      	uxth	r3, r3
 802cdbe:	3b01      	subs	r3, #1
 802cdc0:	b29b      	uxth	r3, r3
 802cdc2:	687a      	ldr	r2, [r7, #4]
 802cdc4:	4619      	mov	r1, r3
 802cdc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 802cdc8:	2b00      	cmp	r3, #0
 802cdca:	d10f      	bne.n	802cdec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802cdcc:	687b      	ldr	r3, [r7, #4]
 802cdce:	681b      	ldr	r3, [r3, #0]
 802cdd0:	68da      	ldr	r2, [r3, #12]
 802cdd2:	687b      	ldr	r3, [r7, #4]
 802cdd4:	681b      	ldr	r3, [r3, #0]
 802cdd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cdda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	681b      	ldr	r3, [r3, #0]
 802cde0:	68da      	ldr	r2, [r3, #12]
 802cde2:	687b      	ldr	r3, [r7, #4]
 802cde4:	681b      	ldr	r3, [r3, #0]
 802cde6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802cdea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802cdec:	2300      	movs	r3, #0
 802cdee:	e000      	b.n	802cdf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802cdf0:	2302      	movs	r3, #2
  }
}
 802cdf2:	4618      	mov	r0, r3
 802cdf4:	3714      	adds	r7, #20
 802cdf6:	46bd      	mov	sp, r7
 802cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdfc:	4770      	bx	lr

0802cdfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802cdfe:	b580      	push	{r7, lr}
 802ce00:	b082      	sub	sp, #8
 802ce02:	af00      	add	r7, sp, #0
 802ce04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802ce06:	687b      	ldr	r3, [r7, #4]
 802ce08:	681b      	ldr	r3, [r3, #0]
 802ce0a:	68da      	ldr	r2, [r3, #12]
 802ce0c:	687b      	ldr	r3, [r7, #4]
 802ce0e:	681b      	ldr	r3, [r3, #0]
 802ce10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ce14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	2220      	movs	r2, #32
 802ce1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802ce1e:	6878      	ldr	r0, [r7, #4]
 802ce20:	f7ff fe8e 	bl	802cb40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802ce24:	2300      	movs	r3, #0
}
 802ce26:	4618      	mov	r0, r3
 802ce28:	3708      	adds	r7, #8
 802ce2a:	46bd      	mov	sp, r7
 802ce2c:	bd80      	pop	{r7, pc}

0802ce2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802ce2e:	b580      	push	{r7, lr}
 802ce30:	b08c      	sub	sp, #48	; 0x30
 802ce32:	af00      	add	r7, sp, #0
 802ce34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802ce36:	687b      	ldr	r3, [r7, #4]
 802ce38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802ce3c:	b2db      	uxtb	r3, r3
 802ce3e:	2b22      	cmp	r3, #34	; 0x22
 802ce40:	f040 80ab 	bne.w	802cf9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802ce44:	687b      	ldr	r3, [r7, #4]
 802ce46:	689b      	ldr	r3, [r3, #8]
 802ce48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ce4c:	d117      	bne.n	802ce7e <UART_Receive_IT+0x50>
 802ce4e:	687b      	ldr	r3, [r7, #4]
 802ce50:	691b      	ldr	r3, [r3, #16]
 802ce52:	2b00      	cmp	r3, #0
 802ce54:	d113      	bne.n	802ce7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802ce56:	2300      	movs	r3, #0
 802ce58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802ce5a:	687b      	ldr	r3, [r7, #4]
 802ce5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ce5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802ce60:	687b      	ldr	r3, [r7, #4]
 802ce62:	681b      	ldr	r3, [r3, #0]
 802ce64:	685b      	ldr	r3, [r3, #4]
 802ce66:	b29b      	uxth	r3, r3
 802ce68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802ce6c:	b29a      	uxth	r2, r3
 802ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802ce72:	687b      	ldr	r3, [r7, #4]
 802ce74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ce76:	1c9a      	adds	r2, r3, #2
 802ce78:	687b      	ldr	r3, [r7, #4]
 802ce7a:	629a      	str	r2, [r3, #40]	; 0x28
 802ce7c:	e026      	b.n	802cecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802ce7e:	687b      	ldr	r3, [r7, #4]
 802ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ce82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802ce84:	2300      	movs	r3, #0
 802ce86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802ce88:	687b      	ldr	r3, [r7, #4]
 802ce8a:	689b      	ldr	r3, [r3, #8]
 802ce8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802ce90:	d007      	beq.n	802cea2 <UART_Receive_IT+0x74>
 802ce92:	687b      	ldr	r3, [r7, #4]
 802ce94:	689b      	ldr	r3, [r3, #8]
 802ce96:	2b00      	cmp	r3, #0
 802ce98:	d10a      	bne.n	802ceb0 <UART_Receive_IT+0x82>
 802ce9a:	687b      	ldr	r3, [r7, #4]
 802ce9c:	691b      	ldr	r3, [r3, #16]
 802ce9e:	2b00      	cmp	r3, #0
 802cea0:	d106      	bne.n	802ceb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	681b      	ldr	r3, [r3, #0]
 802cea6:	685b      	ldr	r3, [r3, #4]
 802cea8:	b2da      	uxtb	r2, r3
 802ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ceac:	701a      	strb	r2, [r3, #0]
 802ceae:	e008      	b.n	802cec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802ceb0:	687b      	ldr	r3, [r7, #4]
 802ceb2:	681b      	ldr	r3, [r3, #0]
 802ceb4:	685b      	ldr	r3, [r3, #4]
 802ceb6:	b2db      	uxtb	r3, r3
 802ceb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802cebc:	b2da      	uxtb	r2, r3
 802cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802cec2:	687b      	ldr	r3, [r7, #4]
 802cec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cec6:	1c5a      	adds	r2, r3, #1
 802cec8:	687b      	ldr	r3, [r7, #4]
 802ceca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802cecc:	687b      	ldr	r3, [r7, #4]
 802cece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802ced0:	b29b      	uxth	r3, r3
 802ced2:	3b01      	subs	r3, #1
 802ced4:	b29b      	uxth	r3, r3
 802ced6:	687a      	ldr	r2, [r7, #4]
 802ced8:	4619      	mov	r1, r3
 802ceda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802cedc:	2b00      	cmp	r3, #0
 802cede:	d15a      	bne.n	802cf96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802cee0:	687b      	ldr	r3, [r7, #4]
 802cee2:	681b      	ldr	r3, [r3, #0]
 802cee4:	68da      	ldr	r2, [r3, #12]
 802cee6:	687b      	ldr	r3, [r7, #4]
 802cee8:	681b      	ldr	r3, [r3, #0]
 802ceea:	f022 0220 	bic.w	r2, r2, #32
 802ceee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	681b      	ldr	r3, [r3, #0]
 802cef4:	68da      	ldr	r2, [r3, #12]
 802cef6:	687b      	ldr	r3, [r7, #4]
 802cef8:	681b      	ldr	r3, [r3, #0]
 802cefa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cefe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802cf00:	687b      	ldr	r3, [r7, #4]
 802cf02:	681b      	ldr	r3, [r3, #0]
 802cf04:	695a      	ldr	r2, [r3, #20]
 802cf06:	687b      	ldr	r3, [r7, #4]
 802cf08:	681b      	ldr	r3, [r3, #0]
 802cf0a:	f022 0201 	bic.w	r2, r2, #1
 802cf0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802cf10:	687b      	ldr	r3, [r7, #4]
 802cf12:	2220      	movs	r2, #32
 802cf14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802cf18:	687b      	ldr	r3, [r7, #4]
 802cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cf1c:	2b01      	cmp	r3, #1
 802cf1e:	d135      	bne.n	802cf8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802cf20:	687b      	ldr	r3, [r7, #4]
 802cf22:	2200      	movs	r2, #0
 802cf24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802cf26:	687b      	ldr	r3, [r7, #4]
 802cf28:	681b      	ldr	r3, [r3, #0]
 802cf2a:	330c      	adds	r3, #12
 802cf2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802cf2e:	697b      	ldr	r3, [r7, #20]
 802cf30:	e853 3f00 	ldrex	r3, [r3]
 802cf34:	613b      	str	r3, [r7, #16]
   return(result);
 802cf36:	693b      	ldr	r3, [r7, #16]
 802cf38:	f023 0310 	bic.w	r3, r3, #16
 802cf3c:	627b      	str	r3, [r7, #36]	; 0x24
 802cf3e:	687b      	ldr	r3, [r7, #4]
 802cf40:	681b      	ldr	r3, [r3, #0]
 802cf42:	330c      	adds	r3, #12
 802cf44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802cf46:	623a      	str	r2, [r7, #32]
 802cf48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802cf4a:	69f9      	ldr	r1, [r7, #28]
 802cf4c:	6a3a      	ldr	r2, [r7, #32]
 802cf4e:	e841 2300 	strex	r3, r2, [r1]
 802cf52:	61bb      	str	r3, [r7, #24]
   return(result);
 802cf54:	69bb      	ldr	r3, [r7, #24]
 802cf56:	2b00      	cmp	r3, #0
 802cf58:	d1e5      	bne.n	802cf26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802cf5a:	687b      	ldr	r3, [r7, #4]
 802cf5c:	681b      	ldr	r3, [r3, #0]
 802cf5e:	681b      	ldr	r3, [r3, #0]
 802cf60:	f003 0310 	and.w	r3, r3, #16
 802cf64:	2b10      	cmp	r3, #16
 802cf66:	d10a      	bne.n	802cf7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802cf68:	2300      	movs	r3, #0
 802cf6a:	60fb      	str	r3, [r7, #12]
 802cf6c:	687b      	ldr	r3, [r7, #4]
 802cf6e:	681b      	ldr	r3, [r3, #0]
 802cf70:	681b      	ldr	r3, [r3, #0]
 802cf72:	60fb      	str	r3, [r7, #12]
 802cf74:	687b      	ldr	r3, [r7, #4]
 802cf76:	681b      	ldr	r3, [r3, #0]
 802cf78:	685b      	ldr	r3, [r3, #4]
 802cf7a:	60fb      	str	r3, [r7, #12]
 802cf7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802cf7e:	687b      	ldr	r3, [r7, #4]
 802cf80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802cf82:	4619      	mov	r1, r3
 802cf84:	6878      	ldr	r0, [r7, #4]
 802cf86:	f7ff fdf9 	bl	802cb7c <HAL_UARTEx_RxEventCallback>
 802cf8a:	e002      	b.n	802cf92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802cf8c:	6878      	ldr	r0, [r7, #4]
 802cf8e:	f7ff fde1 	bl	802cb54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802cf92:	2300      	movs	r3, #0
 802cf94:	e002      	b.n	802cf9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802cf96:	2300      	movs	r3, #0
 802cf98:	e000      	b.n	802cf9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802cf9a:	2302      	movs	r3, #2
  }
}
 802cf9c:	4618      	mov	r0, r3
 802cf9e:	3730      	adds	r7, #48	; 0x30
 802cfa0:	46bd      	mov	sp, r7
 802cfa2:	bd80      	pop	{r7, pc}

0802cfa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802cfa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802cfa8:	b0c0      	sub	sp, #256	; 0x100
 802cfaa:	af00      	add	r7, sp, #0
 802cfac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802cfb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfb4:	681b      	ldr	r3, [r3, #0]
 802cfb6:	691b      	ldr	r3, [r3, #16]
 802cfb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfc0:	68d9      	ldr	r1, [r3, #12]
 802cfc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfc6:	681a      	ldr	r2, [r3, #0]
 802cfc8:	ea40 0301 	orr.w	r3, r0, r1
 802cfcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802cfce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfd2:	689a      	ldr	r2, [r3, #8]
 802cfd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfd8:	691b      	ldr	r3, [r3, #16]
 802cfda:	431a      	orrs	r2, r3
 802cfdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfe0:	695b      	ldr	r3, [r3, #20]
 802cfe2:	431a      	orrs	r2, r3
 802cfe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cfe8:	69db      	ldr	r3, [r3, #28]
 802cfea:	4313      	orrs	r3, r2
 802cfec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802cff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cff4:	681b      	ldr	r3, [r3, #0]
 802cff6:	68db      	ldr	r3, [r3, #12]
 802cff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802cffc:	f021 010c 	bic.w	r1, r1, #12
 802d000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d004:	681a      	ldr	r2, [r3, #0]
 802d006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802d00a:	430b      	orrs	r3, r1
 802d00c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802d00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d012:	681b      	ldr	r3, [r3, #0]
 802d014:	695b      	ldr	r3, [r3, #20]
 802d016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802d01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d01e:	6999      	ldr	r1, [r3, #24]
 802d020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d024:	681a      	ldr	r2, [r3, #0]
 802d026:	ea40 0301 	orr.w	r3, r0, r1
 802d02a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802d02c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d030:	681a      	ldr	r2, [r3, #0]
 802d032:	4b8f      	ldr	r3, [pc, #572]	; (802d270 <UART_SetConfig+0x2cc>)
 802d034:	429a      	cmp	r2, r3
 802d036:	d005      	beq.n	802d044 <UART_SetConfig+0xa0>
 802d038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d03c:	681a      	ldr	r2, [r3, #0]
 802d03e:	4b8d      	ldr	r3, [pc, #564]	; (802d274 <UART_SetConfig+0x2d0>)
 802d040:	429a      	cmp	r2, r3
 802d042:	d104      	bne.n	802d04e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802d044:	f7fd ffc6 	bl	802afd4 <HAL_RCC_GetPCLK2Freq>
 802d048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802d04c:	e003      	b.n	802d056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802d04e:	f7fd ffad 	bl	802afac <HAL_RCC_GetPCLK1Freq>
 802d052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802d056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d05a:	69db      	ldr	r3, [r3, #28]
 802d05c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802d060:	f040 810c 	bne.w	802d27c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802d064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d068:	2200      	movs	r2, #0
 802d06a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802d06e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802d072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802d076:	4622      	mov	r2, r4
 802d078:	462b      	mov	r3, r5
 802d07a:	1891      	adds	r1, r2, r2
 802d07c:	65b9      	str	r1, [r7, #88]	; 0x58
 802d07e:	415b      	adcs	r3, r3
 802d080:	65fb      	str	r3, [r7, #92]	; 0x5c
 802d082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802d086:	4621      	mov	r1, r4
 802d088:	eb12 0801 	adds.w	r8, r2, r1
 802d08c:	4629      	mov	r1, r5
 802d08e:	eb43 0901 	adc.w	r9, r3, r1
 802d092:	f04f 0200 	mov.w	r2, #0
 802d096:	f04f 0300 	mov.w	r3, #0
 802d09a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802d09e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802d0a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802d0a6:	4690      	mov	r8, r2
 802d0a8:	4699      	mov	r9, r3
 802d0aa:	4623      	mov	r3, r4
 802d0ac:	eb18 0303 	adds.w	r3, r8, r3
 802d0b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802d0b4:	462b      	mov	r3, r5
 802d0b6:	eb49 0303 	adc.w	r3, r9, r3
 802d0ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802d0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d0c2:	685b      	ldr	r3, [r3, #4]
 802d0c4:	2200      	movs	r2, #0
 802d0c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802d0ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802d0ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802d0d2:	460b      	mov	r3, r1
 802d0d4:	18db      	adds	r3, r3, r3
 802d0d6:	653b      	str	r3, [r7, #80]	; 0x50
 802d0d8:	4613      	mov	r3, r2
 802d0da:	eb42 0303 	adc.w	r3, r2, r3
 802d0de:	657b      	str	r3, [r7, #84]	; 0x54
 802d0e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802d0e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802d0e8:	f7f5 fd5e 	bl	8022ba8 <__aeabi_uldivmod>
 802d0ec:	4602      	mov	r2, r0
 802d0ee:	460b      	mov	r3, r1
 802d0f0:	4b61      	ldr	r3, [pc, #388]	; (802d278 <UART_SetConfig+0x2d4>)
 802d0f2:	fba3 2302 	umull	r2, r3, r3, r2
 802d0f6:	095b      	lsrs	r3, r3, #5
 802d0f8:	011c      	lsls	r4, r3, #4
 802d0fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d0fe:	2200      	movs	r2, #0
 802d100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802d104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802d108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802d10c:	4642      	mov	r2, r8
 802d10e:	464b      	mov	r3, r9
 802d110:	1891      	adds	r1, r2, r2
 802d112:	64b9      	str	r1, [r7, #72]	; 0x48
 802d114:	415b      	adcs	r3, r3
 802d116:	64fb      	str	r3, [r7, #76]	; 0x4c
 802d118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802d11c:	4641      	mov	r1, r8
 802d11e:	eb12 0a01 	adds.w	sl, r2, r1
 802d122:	4649      	mov	r1, r9
 802d124:	eb43 0b01 	adc.w	fp, r3, r1
 802d128:	f04f 0200 	mov.w	r2, #0
 802d12c:	f04f 0300 	mov.w	r3, #0
 802d130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802d134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802d138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802d13c:	4692      	mov	sl, r2
 802d13e:	469b      	mov	fp, r3
 802d140:	4643      	mov	r3, r8
 802d142:	eb1a 0303 	adds.w	r3, sl, r3
 802d146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802d14a:	464b      	mov	r3, r9
 802d14c:	eb4b 0303 	adc.w	r3, fp, r3
 802d150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802d154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d158:	685b      	ldr	r3, [r3, #4]
 802d15a:	2200      	movs	r2, #0
 802d15c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802d160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802d164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802d168:	460b      	mov	r3, r1
 802d16a:	18db      	adds	r3, r3, r3
 802d16c:	643b      	str	r3, [r7, #64]	; 0x40
 802d16e:	4613      	mov	r3, r2
 802d170:	eb42 0303 	adc.w	r3, r2, r3
 802d174:	647b      	str	r3, [r7, #68]	; 0x44
 802d176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802d17a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802d17e:	f7f5 fd13 	bl	8022ba8 <__aeabi_uldivmod>
 802d182:	4602      	mov	r2, r0
 802d184:	460b      	mov	r3, r1
 802d186:	4611      	mov	r1, r2
 802d188:	4b3b      	ldr	r3, [pc, #236]	; (802d278 <UART_SetConfig+0x2d4>)
 802d18a:	fba3 2301 	umull	r2, r3, r3, r1
 802d18e:	095b      	lsrs	r3, r3, #5
 802d190:	2264      	movs	r2, #100	; 0x64
 802d192:	fb02 f303 	mul.w	r3, r2, r3
 802d196:	1acb      	subs	r3, r1, r3
 802d198:	00db      	lsls	r3, r3, #3
 802d19a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802d19e:	4b36      	ldr	r3, [pc, #216]	; (802d278 <UART_SetConfig+0x2d4>)
 802d1a0:	fba3 2302 	umull	r2, r3, r3, r2
 802d1a4:	095b      	lsrs	r3, r3, #5
 802d1a6:	005b      	lsls	r3, r3, #1
 802d1a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802d1ac:	441c      	add	r4, r3
 802d1ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d1b2:	2200      	movs	r2, #0
 802d1b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802d1b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802d1bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802d1c0:	4642      	mov	r2, r8
 802d1c2:	464b      	mov	r3, r9
 802d1c4:	1891      	adds	r1, r2, r2
 802d1c6:	63b9      	str	r1, [r7, #56]	; 0x38
 802d1c8:	415b      	adcs	r3, r3
 802d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d1cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802d1d0:	4641      	mov	r1, r8
 802d1d2:	1851      	adds	r1, r2, r1
 802d1d4:	6339      	str	r1, [r7, #48]	; 0x30
 802d1d6:	4649      	mov	r1, r9
 802d1d8:	414b      	adcs	r3, r1
 802d1da:	637b      	str	r3, [r7, #52]	; 0x34
 802d1dc:	f04f 0200 	mov.w	r2, #0
 802d1e0:	f04f 0300 	mov.w	r3, #0
 802d1e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802d1e8:	4659      	mov	r1, fp
 802d1ea:	00cb      	lsls	r3, r1, #3
 802d1ec:	4651      	mov	r1, sl
 802d1ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d1f2:	4651      	mov	r1, sl
 802d1f4:	00ca      	lsls	r2, r1, #3
 802d1f6:	4610      	mov	r0, r2
 802d1f8:	4619      	mov	r1, r3
 802d1fa:	4603      	mov	r3, r0
 802d1fc:	4642      	mov	r2, r8
 802d1fe:	189b      	adds	r3, r3, r2
 802d200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802d204:	464b      	mov	r3, r9
 802d206:	460a      	mov	r2, r1
 802d208:	eb42 0303 	adc.w	r3, r2, r3
 802d20c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802d210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d214:	685b      	ldr	r3, [r3, #4]
 802d216:	2200      	movs	r2, #0
 802d218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802d21c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802d220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802d224:	460b      	mov	r3, r1
 802d226:	18db      	adds	r3, r3, r3
 802d228:	62bb      	str	r3, [r7, #40]	; 0x28
 802d22a:	4613      	mov	r3, r2
 802d22c:	eb42 0303 	adc.w	r3, r2, r3
 802d230:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802d236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802d23a:	f7f5 fcb5 	bl	8022ba8 <__aeabi_uldivmod>
 802d23e:	4602      	mov	r2, r0
 802d240:	460b      	mov	r3, r1
 802d242:	4b0d      	ldr	r3, [pc, #52]	; (802d278 <UART_SetConfig+0x2d4>)
 802d244:	fba3 1302 	umull	r1, r3, r3, r2
 802d248:	095b      	lsrs	r3, r3, #5
 802d24a:	2164      	movs	r1, #100	; 0x64
 802d24c:	fb01 f303 	mul.w	r3, r1, r3
 802d250:	1ad3      	subs	r3, r2, r3
 802d252:	00db      	lsls	r3, r3, #3
 802d254:	3332      	adds	r3, #50	; 0x32
 802d256:	4a08      	ldr	r2, [pc, #32]	; (802d278 <UART_SetConfig+0x2d4>)
 802d258:	fba2 2303 	umull	r2, r3, r2, r3
 802d25c:	095b      	lsrs	r3, r3, #5
 802d25e:	f003 0207 	and.w	r2, r3, #7
 802d262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d266:	681b      	ldr	r3, [r3, #0]
 802d268:	4422      	add	r2, r4
 802d26a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802d26c:	e106      	b.n	802d47c <UART_SetConfig+0x4d8>
 802d26e:	bf00      	nop
 802d270:	40011000 	.word	0x40011000
 802d274:	40011400 	.word	0x40011400
 802d278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802d27c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d280:	2200      	movs	r2, #0
 802d282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802d286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802d28a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802d28e:	4642      	mov	r2, r8
 802d290:	464b      	mov	r3, r9
 802d292:	1891      	adds	r1, r2, r2
 802d294:	6239      	str	r1, [r7, #32]
 802d296:	415b      	adcs	r3, r3
 802d298:	627b      	str	r3, [r7, #36]	; 0x24
 802d29a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802d29e:	4641      	mov	r1, r8
 802d2a0:	1854      	adds	r4, r2, r1
 802d2a2:	4649      	mov	r1, r9
 802d2a4:	eb43 0501 	adc.w	r5, r3, r1
 802d2a8:	f04f 0200 	mov.w	r2, #0
 802d2ac:	f04f 0300 	mov.w	r3, #0
 802d2b0:	00eb      	lsls	r3, r5, #3
 802d2b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802d2b6:	00e2      	lsls	r2, r4, #3
 802d2b8:	4614      	mov	r4, r2
 802d2ba:	461d      	mov	r5, r3
 802d2bc:	4643      	mov	r3, r8
 802d2be:	18e3      	adds	r3, r4, r3
 802d2c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802d2c4:	464b      	mov	r3, r9
 802d2c6:	eb45 0303 	adc.w	r3, r5, r3
 802d2ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802d2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d2d2:	685b      	ldr	r3, [r3, #4]
 802d2d4:	2200      	movs	r2, #0
 802d2d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802d2da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802d2de:	f04f 0200 	mov.w	r2, #0
 802d2e2:	f04f 0300 	mov.w	r3, #0
 802d2e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802d2ea:	4629      	mov	r1, r5
 802d2ec:	008b      	lsls	r3, r1, #2
 802d2ee:	4621      	mov	r1, r4
 802d2f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d2f4:	4621      	mov	r1, r4
 802d2f6:	008a      	lsls	r2, r1, #2
 802d2f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802d2fc:	f7f5 fc54 	bl	8022ba8 <__aeabi_uldivmod>
 802d300:	4602      	mov	r2, r0
 802d302:	460b      	mov	r3, r1
 802d304:	4b60      	ldr	r3, [pc, #384]	; (802d488 <UART_SetConfig+0x4e4>)
 802d306:	fba3 2302 	umull	r2, r3, r3, r2
 802d30a:	095b      	lsrs	r3, r3, #5
 802d30c:	011c      	lsls	r4, r3, #4
 802d30e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d312:	2200      	movs	r2, #0
 802d314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802d318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802d31c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802d320:	4642      	mov	r2, r8
 802d322:	464b      	mov	r3, r9
 802d324:	1891      	adds	r1, r2, r2
 802d326:	61b9      	str	r1, [r7, #24]
 802d328:	415b      	adcs	r3, r3
 802d32a:	61fb      	str	r3, [r7, #28]
 802d32c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802d330:	4641      	mov	r1, r8
 802d332:	1851      	adds	r1, r2, r1
 802d334:	6139      	str	r1, [r7, #16]
 802d336:	4649      	mov	r1, r9
 802d338:	414b      	adcs	r3, r1
 802d33a:	617b      	str	r3, [r7, #20]
 802d33c:	f04f 0200 	mov.w	r2, #0
 802d340:	f04f 0300 	mov.w	r3, #0
 802d344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802d348:	4659      	mov	r1, fp
 802d34a:	00cb      	lsls	r3, r1, #3
 802d34c:	4651      	mov	r1, sl
 802d34e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d352:	4651      	mov	r1, sl
 802d354:	00ca      	lsls	r2, r1, #3
 802d356:	4610      	mov	r0, r2
 802d358:	4619      	mov	r1, r3
 802d35a:	4603      	mov	r3, r0
 802d35c:	4642      	mov	r2, r8
 802d35e:	189b      	adds	r3, r3, r2
 802d360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802d364:	464b      	mov	r3, r9
 802d366:	460a      	mov	r2, r1
 802d368:	eb42 0303 	adc.w	r3, r2, r3
 802d36c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802d370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d374:	685b      	ldr	r3, [r3, #4]
 802d376:	2200      	movs	r2, #0
 802d378:	67bb      	str	r3, [r7, #120]	; 0x78
 802d37a:	67fa      	str	r2, [r7, #124]	; 0x7c
 802d37c:	f04f 0200 	mov.w	r2, #0
 802d380:	f04f 0300 	mov.w	r3, #0
 802d384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802d388:	4649      	mov	r1, r9
 802d38a:	008b      	lsls	r3, r1, #2
 802d38c:	4641      	mov	r1, r8
 802d38e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d392:	4641      	mov	r1, r8
 802d394:	008a      	lsls	r2, r1, #2
 802d396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802d39a:	f7f5 fc05 	bl	8022ba8 <__aeabi_uldivmod>
 802d39e:	4602      	mov	r2, r0
 802d3a0:	460b      	mov	r3, r1
 802d3a2:	4611      	mov	r1, r2
 802d3a4:	4b38      	ldr	r3, [pc, #224]	; (802d488 <UART_SetConfig+0x4e4>)
 802d3a6:	fba3 2301 	umull	r2, r3, r3, r1
 802d3aa:	095b      	lsrs	r3, r3, #5
 802d3ac:	2264      	movs	r2, #100	; 0x64
 802d3ae:	fb02 f303 	mul.w	r3, r2, r3
 802d3b2:	1acb      	subs	r3, r1, r3
 802d3b4:	011b      	lsls	r3, r3, #4
 802d3b6:	3332      	adds	r3, #50	; 0x32
 802d3b8:	4a33      	ldr	r2, [pc, #204]	; (802d488 <UART_SetConfig+0x4e4>)
 802d3ba:	fba2 2303 	umull	r2, r3, r2, r3
 802d3be:	095b      	lsrs	r3, r3, #5
 802d3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802d3c4:	441c      	add	r4, r3
 802d3c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802d3ca:	2200      	movs	r2, #0
 802d3cc:	673b      	str	r3, [r7, #112]	; 0x70
 802d3ce:	677a      	str	r2, [r7, #116]	; 0x74
 802d3d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802d3d4:	4642      	mov	r2, r8
 802d3d6:	464b      	mov	r3, r9
 802d3d8:	1891      	adds	r1, r2, r2
 802d3da:	60b9      	str	r1, [r7, #8]
 802d3dc:	415b      	adcs	r3, r3
 802d3de:	60fb      	str	r3, [r7, #12]
 802d3e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802d3e4:	4641      	mov	r1, r8
 802d3e6:	1851      	adds	r1, r2, r1
 802d3e8:	6039      	str	r1, [r7, #0]
 802d3ea:	4649      	mov	r1, r9
 802d3ec:	414b      	adcs	r3, r1
 802d3ee:	607b      	str	r3, [r7, #4]
 802d3f0:	f04f 0200 	mov.w	r2, #0
 802d3f4:	f04f 0300 	mov.w	r3, #0
 802d3f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802d3fc:	4659      	mov	r1, fp
 802d3fe:	00cb      	lsls	r3, r1, #3
 802d400:	4651      	mov	r1, sl
 802d402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d406:	4651      	mov	r1, sl
 802d408:	00ca      	lsls	r2, r1, #3
 802d40a:	4610      	mov	r0, r2
 802d40c:	4619      	mov	r1, r3
 802d40e:	4603      	mov	r3, r0
 802d410:	4642      	mov	r2, r8
 802d412:	189b      	adds	r3, r3, r2
 802d414:	66bb      	str	r3, [r7, #104]	; 0x68
 802d416:	464b      	mov	r3, r9
 802d418:	460a      	mov	r2, r1
 802d41a:	eb42 0303 	adc.w	r3, r2, r3
 802d41e:	66fb      	str	r3, [r7, #108]	; 0x6c
 802d420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d424:	685b      	ldr	r3, [r3, #4]
 802d426:	2200      	movs	r2, #0
 802d428:	663b      	str	r3, [r7, #96]	; 0x60
 802d42a:	667a      	str	r2, [r7, #100]	; 0x64
 802d42c:	f04f 0200 	mov.w	r2, #0
 802d430:	f04f 0300 	mov.w	r3, #0
 802d434:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802d438:	4649      	mov	r1, r9
 802d43a:	008b      	lsls	r3, r1, #2
 802d43c:	4641      	mov	r1, r8
 802d43e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802d442:	4641      	mov	r1, r8
 802d444:	008a      	lsls	r2, r1, #2
 802d446:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802d44a:	f7f5 fbad 	bl	8022ba8 <__aeabi_uldivmod>
 802d44e:	4602      	mov	r2, r0
 802d450:	460b      	mov	r3, r1
 802d452:	4b0d      	ldr	r3, [pc, #52]	; (802d488 <UART_SetConfig+0x4e4>)
 802d454:	fba3 1302 	umull	r1, r3, r3, r2
 802d458:	095b      	lsrs	r3, r3, #5
 802d45a:	2164      	movs	r1, #100	; 0x64
 802d45c:	fb01 f303 	mul.w	r3, r1, r3
 802d460:	1ad3      	subs	r3, r2, r3
 802d462:	011b      	lsls	r3, r3, #4
 802d464:	3332      	adds	r3, #50	; 0x32
 802d466:	4a08      	ldr	r2, [pc, #32]	; (802d488 <UART_SetConfig+0x4e4>)
 802d468:	fba2 2303 	umull	r2, r3, r2, r3
 802d46c:	095b      	lsrs	r3, r3, #5
 802d46e:	f003 020f 	and.w	r2, r3, #15
 802d472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802d476:	681b      	ldr	r3, [r3, #0]
 802d478:	4422      	add	r2, r4
 802d47a:	609a      	str	r2, [r3, #8]
}
 802d47c:	bf00      	nop
 802d47e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802d482:	46bd      	mov	sp, r7
 802d484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d488:	51eb851f 	.word	0x51eb851f

0802d48c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 802d48c:	b480      	push	{r7}
 802d48e:	b083      	sub	sp, #12
 802d490:	af00      	add	r7, sp, #0
 802d492:	6078      	str	r0, [r7, #4]
 802d494:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 802d496:	683b      	ldr	r3, [r7, #0]
 802d498:	681b      	ldr	r3, [r3, #0]
 802d49a:	2b10      	cmp	r3, #16
 802d49c:	d11c      	bne.n	802d4d8 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802d49e:	687b      	ldr	r3, [r7, #4]
 802d4a0:	681a      	ldr	r2, [r3, #0]
 802d4a2:	4b1f      	ldr	r3, [pc, #124]	; (802d520 <FSMC_NAND_Init+0x94>)
 802d4a4:	4013      	ands	r3, r2
 802d4a6:	683a      	ldr	r2, [r7, #0]
 802d4a8:	6851      	ldr	r1, [r2, #4]
 802d4aa:	683a      	ldr	r2, [r7, #0]
 802d4ac:	6892      	ldr	r2, [r2, #8]
 802d4ae:	4311      	orrs	r1, r2
 802d4b0:	683a      	ldr	r2, [r7, #0]
 802d4b2:	68d2      	ldr	r2, [r2, #12]
 802d4b4:	4311      	orrs	r1, r2
 802d4b6:	683a      	ldr	r2, [r7, #0]
 802d4b8:	6912      	ldr	r2, [r2, #16]
 802d4ba:	4311      	orrs	r1, r2
 802d4bc:	683a      	ldr	r2, [r7, #0]
 802d4be:	6952      	ldr	r2, [r2, #20]
 802d4c0:	0252      	lsls	r2, r2, #9
 802d4c2:	4311      	orrs	r1, r2
 802d4c4:	683a      	ldr	r2, [r7, #0]
 802d4c6:	6992      	ldr	r2, [r2, #24]
 802d4c8:	0352      	lsls	r2, r2, #13
 802d4ca:	430a      	orrs	r2, r1
 802d4cc:	4313      	orrs	r3, r2
 802d4ce:	f043 0208 	orr.w	r2, r3, #8
 802d4d2:	687b      	ldr	r3, [r7, #4]
 802d4d4:	601a      	str	r2, [r3, #0]
 802d4d6:	e01b      	b.n	802d510 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802d4d8:	687b      	ldr	r3, [r7, #4]
 802d4da:	6a1a      	ldr	r2, [r3, #32]
 802d4dc:	4b10      	ldr	r3, [pc, #64]	; (802d520 <FSMC_NAND_Init+0x94>)
 802d4de:	4013      	ands	r3, r2
 802d4e0:	683a      	ldr	r2, [r7, #0]
 802d4e2:	6851      	ldr	r1, [r2, #4]
 802d4e4:	683a      	ldr	r2, [r7, #0]
 802d4e6:	6892      	ldr	r2, [r2, #8]
 802d4e8:	4311      	orrs	r1, r2
 802d4ea:	683a      	ldr	r2, [r7, #0]
 802d4ec:	68d2      	ldr	r2, [r2, #12]
 802d4ee:	4311      	orrs	r1, r2
 802d4f0:	683a      	ldr	r2, [r7, #0]
 802d4f2:	6912      	ldr	r2, [r2, #16]
 802d4f4:	4311      	orrs	r1, r2
 802d4f6:	683a      	ldr	r2, [r7, #0]
 802d4f8:	6952      	ldr	r2, [r2, #20]
 802d4fa:	0252      	lsls	r2, r2, #9
 802d4fc:	4311      	orrs	r1, r2
 802d4fe:	683a      	ldr	r2, [r7, #0]
 802d500:	6992      	ldr	r2, [r2, #24]
 802d502:	0352      	lsls	r2, r2, #13
 802d504:	430a      	orrs	r2, r1
 802d506:	4313      	orrs	r3, r2
 802d508:	f043 0208 	orr.w	r2, r3, #8
 802d50c:	687b      	ldr	r3, [r7, #4]
 802d50e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 802d510:	2300      	movs	r3, #0
}
 802d512:	4618      	mov	r0, r3
 802d514:	370c      	adds	r7, #12
 802d516:	46bd      	mov	sp, r7
 802d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d51c:	4770      	bx	lr
 802d51e:	bf00      	nop
 802d520:	fff00181 	.word	0xfff00181

0802d524 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802d524:	b480      	push	{r7}
 802d526:	b085      	sub	sp, #20
 802d528:	af00      	add	r7, sp, #0
 802d52a:	60f8      	str	r0, [r7, #12]
 802d52c:	60b9      	str	r1, [r7, #8]
 802d52e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802d530:	687b      	ldr	r3, [r7, #4]
 802d532:	2b10      	cmp	r3, #16
 802d534:	d112      	bne.n	802d55c <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802d536:	68fb      	ldr	r3, [r7, #12]
 802d538:	689b      	ldr	r3, [r3, #8]
 802d53a:	68bb      	ldr	r3, [r7, #8]
 802d53c:	681a      	ldr	r2, [r3, #0]
 802d53e:	68bb      	ldr	r3, [r7, #8]
 802d540:	685b      	ldr	r3, [r3, #4]
 802d542:	021b      	lsls	r3, r3, #8
 802d544:	431a      	orrs	r2, r3
 802d546:	68bb      	ldr	r3, [r7, #8]
 802d548:	689b      	ldr	r3, [r3, #8]
 802d54a:	041b      	lsls	r3, r3, #16
 802d54c:	431a      	orrs	r2, r3
 802d54e:	68bb      	ldr	r3, [r7, #8]
 802d550:	68db      	ldr	r3, [r3, #12]
 802d552:	061b      	lsls	r3, r3, #24
 802d554:	431a      	orrs	r2, r3
 802d556:	68fb      	ldr	r3, [r7, #12]
 802d558:	609a      	str	r2, [r3, #8]
 802d55a:	e011      	b.n	802d580 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802d55c:	68fb      	ldr	r3, [r7, #12]
 802d55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802d560:	68bb      	ldr	r3, [r7, #8]
 802d562:	681a      	ldr	r2, [r3, #0]
 802d564:	68bb      	ldr	r3, [r7, #8]
 802d566:	685b      	ldr	r3, [r3, #4]
 802d568:	021b      	lsls	r3, r3, #8
 802d56a:	431a      	orrs	r2, r3
 802d56c:	68bb      	ldr	r3, [r7, #8]
 802d56e:	689b      	ldr	r3, [r3, #8]
 802d570:	041b      	lsls	r3, r3, #16
 802d572:	431a      	orrs	r2, r3
 802d574:	68bb      	ldr	r3, [r7, #8]
 802d576:	68db      	ldr	r3, [r3, #12]
 802d578:	061b      	lsls	r3, r3, #24
 802d57a:	431a      	orrs	r2, r3
 802d57c:	68fb      	ldr	r3, [r7, #12]
 802d57e:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 802d580:	2300      	movs	r3, #0
}
 802d582:	4618      	mov	r0, r3
 802d584:	3714      	adds	r7, #20
 802d586:	46bd      	mov	sp, r7
 802d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d58c:	4770      	bx	lr

0802d58e <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802d58e:	b480      	push	{r7}
 802d590:	b085      	sub	sp, #20
 802d592:	af00      	add	r7, sp, #0
 802d594:	60f8      	str	r0, [r7, #12]
 802d596:	60b9      	str	r1, [r7, #8]
 802d598:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802d59a:	687b      	ldr	r3, [r7, #4]
 802d59c:	2b10      	cmp	r3, #16
 802d59e:	d112      	bne.n	802d5c6 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802d5a0:	68fb      	ldr	r3, [r7, #12]
 802d5a2:	68db      	ldr	r3, [r3, #12]
 802d5a4:	68bb      	ldr	r3, [r7, #8]
 802d5a6:	681a      	ldr	r2, [r3, #0]
 802d5a8:	68bb      	ldr	r3, [r7, #8]
 802d5aa:	685b      	ldr	r3, [r3, #4]
 802d5ac:	021b      	lsls	r3, r3, #8
 802d5ae:	431a      	orrs	r2, r3
 802d5b0:	68bb      	ldr	r3, [r7, #8]
 802d5b2:	689b      	ldr	r3, [r3, #8]
 802d5b4:	041b      	lsls	r3, r3, #16
 802d5b6:	431a      	orrs	r2, r3
 802d5b8:	68bb      	ldr	r3, [r7, #8]
 802d5ba:	68db      	ldr	r3, [r3, #12]
 802d5bc:	061b      	lsls	r3, r3, #24
 802d5be:	431a      	orrs	r2, r3
 802d5c0:	68fb      	ldr	r3, [r7, #12]
 802d5c2:	60da      	str	r2, [r3, #12]
 802d5c4:	e011      	b.n	802d5ea <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802d5c6:	68fb      	ldr	r3, [r7, #12]
 802d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d5ca:	68bb      	ldr	r3, [r7, #8]
 802d5cc:	681a      	ldr	r2, [r3, #0]
 802d5ce:	68bb      	ldr	r3, [r7, #8]
 802d5d0:	685b      	ldr	r3, [r3, #4]
 802d5d2:	021b      	lsls	r3, r3, #8
 802d5d4:	431a      	orrs	r2, r3
 802d5d6:	68bb      	ldr	r3, [r7, #8]
 802d5d8:	689b      	ldr	r3, [r3, #8]
 802d5da:	041b      	lsls	r3, r3, #16
 802d5dc:	431a      	orrs	r2, r3
 802d5de:	68bb      	ldr	r3, [r7, #8]
 802d5e0:	68db      	ldr	r3, [r3, #12]
 802d5e2:	061b      	lsls	r3, r3, #24
 802d5e4:	431a      	orrs	r2, r3
 802d5e6:	68fb      	ldr	r3, [r7, #12]
 802d5e8:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 802d5ea:	2300      	movs	r3, #0
}
 802d5ec:	4618      	mov	r0, r3
 802d5ee:	3714      	adds	r7, #20
 802d5f0:	46bd      	mov	sp, r7
 802d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5f6:	4770      	bx	lr

0802d5f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802d5f8:	b084      	sub	sp, #16
 802d5fa:	b580      	push	{r7, lr}
 802d5fc:	b084      	sub	sp, #16
 802d5fe:	af00      	add	r7, sp, #0
 802d600:	6078      	str	r0, [r7, #4]
 802d602:	f107 001c 	add.w	r0, r7, #28
 802d606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d60c:	2b01      	cmp	r3, #1
 802d60e:	d122      	bne.n	802d656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802d610:	687b      	ldr	r3, [r7, #4]
 802d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802d618:	687b      	ldr	r3, [r7, #4]
 802d61a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802d61c:	687b      	ldr	r3, [r7, #4]
 802d61e:	68db      	ldr	r3, [r3, #12]
 802d620:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802d624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802d628:	687a      	ldr	r2, [r7, #4]
 802d62a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802d62c:	687b      	ldr	r3, [r7, #4]
 802d62e:	68db      	ldr	r3, [r3, #12]
 802d630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802d634:	687b      	ldr	r3, [r7, #4]
 802d636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802d638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d63a:	2b01      	cmp	r3, #1
 802d63c:	d105      	bne.n	802d64a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802d63e:	687b      	ldr	r3, [r7, #4]
 802d640:	68db      	ldr	r3, [r3, #12]
 802d642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802d646:	687b      	ldr	r3, [r7, #4]
 802d648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802d64a:	6878      	ldr	r0, [r7, #4]
 802d64c:	f001 fbee 	bl	802ee2c <USB_CoreReset>
 802d650:	4603      	mov	r3, r0
 802d652:	73fb      	strb	r3, [r7, #15]
 802d654:	e01a      	b.n	802d68c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802d656:	687b      	ldr	r3, [r7, #4]
 802d658:	68db      	ldr	r3, [r3, #12]
 802d65a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802d65e:	687b      	ldr	r3, [r7, #4]
 802d660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802d662:	6878      	ldr	r0, [r7, #4]
 802d664:	f001 fbe2 	bl	802ee2c <USB_CoreReset>
 802d668:	4603      	mov	r3, r0
 802d66a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802d66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802d66e:	2b00      	cmp	r3, #0
 802d670:	d106      	bne.n	802d680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802d672:	687b      	ldr	r3, [r7, #4]
 802d674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802d67a:	687b      	ldr	r3, [r7, #4]
 802d67c:	639a      	str	r2, [r3, #56]	; 0x38
 802d67e:	e005      	b.n	802d68c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802d680:	687b      	ldr	r3, [r7, #4]
 802d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802d688:	687b      	ldr	r3, [r7, #4]
 802d68a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d68e:	2b01      	cmp	r3, #1
 802d690:	d10b      	bne.n	802d6aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802d692:	687b      	ldr	r3, [r7, #4]
 802d694:	689b      	ldr	r3, [r3, #8]
 802d696:	f043 0206 	orr.w	r2, r3, #6
 802d69a:	687b      	ldr	r3, [r7, #4]
 802d69c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802d69e:	687b      	ldr	r3, [r7, #4]
 802d6a0:	689b      	ldr	r3, [r3, #8]
 802d6a2:	f043 0220 	orr.w	r2, r3, #32
 802d6a6:	687b      	ldr	r3, [r7, #4]
 802d6a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802d6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 802d6ac:	4618      	mov	r0, r3
 802d6ae:	3710      	adds	r7, #16
 802d6b0:	46bd      	mov	sp, r7
 802d6b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d6b6:	b004      	add	sp, #16
 802d6b8:	4770      	bx	lr
	...

0802d6bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802d6bc:	b480      	push	{r7}
 802d6be:	b087      	sub	sp, #28
 802d6c0:	af00      	add	r7, sp, #0
 802d6c2:	60f8      	str	r0, [r7, #12]
 802d6c4:	60b9      	str	r1, [r7, #8]
 802d6c6:	4613      	mov	r3, r2
 802d6c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802d6ca:	79fb      	ldrb	r3, [r7, #7]
 802d6cc:	2b02      	cmp	r3, #2
 802d6ce:	d165      	bne.n	802d79c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802d6d0:	68bb      	ldr	r3, [r7, #8]
 802d6d2:	4a41      	ldr	r2, [pc, #260]	; (802d7d8 <USB_SetTurnaroundTime+0x11c>)
 802d6d4:	4293      	cmp	r3, r2
 802d6d6:	d906      	bls.n	802d6e6 <USB_SetTurnaroundTime+0x2a>
 802d6d8:	68bb      	ldr	r3, [r7, #8]
 802d6da:	4a40      	ldr	r2, [pc, #256]	; (802d7dc <USB_SetTurnaroundTime+0x120>)
 802d6dc:	4293      	cmp	r3, r2
 802d6de:	d202      	bcs.n	802d6e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802d6e0:	230f      	movs	r3, #15
 802d6e2:	617b      	str	r3, [r7, #20]
 802d6e4:	e062      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802d6e6:	68bb      	ldr	r3, [r7, #8]
 802d6e8:	4a3c      	ldr	r2, [pc, #240]	; (802d7dc <USB_SetTurnaroundTime+0x120>)
 802d6ea:	4293      	cmp	r3, r2
 802d6ec:	d306      	bcc.n	802d6fc <USB_SetTurnaroundTime+0x40>
 802d6ee:	68bb      	ldr	r3, [r7, #8]
 802d6f0:	4a3b      	ldr	r2, [pc, #236]	; (802d7e0 <USB_SetTurnaroundTime+0x124>)
 802d6f2:	4293      	cmp	r3, r2
 802d6f4:	d202      	bcs.n	802d6fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802d6f6:	230e      	movs	r3, #14
 802d6f8:	617b      	str	r3, [r7, #20]
 802d6fa:	e057      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802d6fc:	68bb      	ldr	r3, [r7, #8]
 802d6fe:	4a38      	ldr	r2, [pc, #224]	; (802d7e0 <USB_SetTurnaroundTime+0x124>)
 802d700:	4293      	cmp	r3, r2
 802d702:	d306      	bcc.n	802d712 <USB_SetTurnaroundTime+0x56>
 802d704:	68bb      	ldr	r3, [r7, #8]
 802d706:	4a37      	ldr	r2, [pc, #220]	; (802d7e4 <USB_SetTurnaroundTime+0x128>)
 802d708:	4293      	cmp	r3, r2
 802d70a:	d202      	bcs.n	802d712 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802d70c:	230d      	movs	r3, #13
 802d70e:	617b      	str	r3, [r7, #20]
 802d710:	e04c      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802d712:	68bb      	ldr	r3, [r7, #8]
 802d714:	4a33      	ldr	r2, [pc, #204]	; (802d7e4 <USB_SetTurnaroundTime+0x128>)
 802d716:	4293      	cmp	r3, r2
 802d718:	d306      	bcc.n	802d728 <USB_SetTurnaroundTime+0x6c>
 802d71a:	68bb      	ldr	r3, [r7, #8]
 802d71c:	4a32      	ldr	r2, [pc, #200]	; (802d7e8 <USB_SetTurnaroundTime+0x12c>)
 802d71e:	4293      	cmp	r3, r2
 802d720:	d802      	bhi.n	802d728 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802d722:	230c      	movs	r3, #12
 802d724:	617b      	str	r3, [r7, #20]
 802d726:	e041      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802d728:	68bb      	ldr	r3, [r7, #8]
 802d72a:	4a2f      	ldr	r2, [pc, #188]	; (802d7e8 <USB_SetTurnaroundTime+0x12c>)
 802d72c:	4293      	cmp	r3, r2
 802d72e:	d906      	bls.n	802d73e <USB_SetTurnaroundTime+0x82>
 802d730:	68bb      	ldr	r3, [r7, #8]
 802d732:	4a2e      	ldr	r2, [pc, #184]	; (802d7ec <USB_SetTurnaroundTime+0x130>)
 802d734:	4293      	cmp	r3, r2
 802d736:	d802      	bhi.n	802d73e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802d738:	230b      	movs	r3, #11
 802d73a:	617b      	str	r3, [r7, #20]
 802d73c:	e036      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802d73e:	68bb      	ldr	r3, [r7, #8]
 802d740:	4a2a      	ldr	r2, [pc, #168]	; (802d7ec <USB_SetTurnaroundTime+0x130>)
 802d742:	4293      	cmp	r3, r2
 802d744:	d906      	bls.n	802d754 <USB_SetTurnaroundTime+0x98>
 802d746:	68bb      	ldr	r3, [r7, #8]
 802d748:	4a29      	ldr	r2, [pc, #164]	; (802d7f0 <USB_SetTurnaroundTime+0x134>)
 802d74a:	4293      	cmp	r3, r2
 802d74c:	d802      	bhi.n	802d754 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802d74e:	230a      	movs	r3, #10
 802d750:	617b      	str	r3, [r7, #20]
 802d752:	e02b      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802d754:	68bb      	ldr	r3, [r7, #8]
 802d756:	4a26      	ldr	r2, [pc, #152]	; (802d7f0 <USB_SetTurnaroundTime+0x134>)
 802d758:	4293      	cmp	r3, r2
 802d75a:	d906      	bls.n	802d76a <USB_SetTurnaroundTime+0xae>
 802d75c:	68bb      	ldr	r3, [r7, #8]
 802d75e:	4a25      	ldr	r2, [pc, #148]	; (802d7f4 <USB_SetTurnaroundTime+0x138>)
 802d760:	4293      	cmp	r3, r2
 802d762:	d202      	bcs.n	802d76a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802d764:	2309      	movs	r3, #9
 802d766:	617b      	str	r3, [r7, #20]
 802d768:	e020      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802d76a:	68bb      	ldr	r3, [r7, #8]
 802d76c:	4a21      	ldr	r2, [pc, #132]	; (802d7f4 <USB_SetTurnaroundTime+0x138>)
 802d76e:	4293      	cmp	r3, r2
 802d770:	d306      	bcc.n	802d780 <USB_SetTurnaroundTime+0xc4>
 802d772:	68bb      	ldr	r3, [r7, #8]
 802d774:	4a20      	ldr	r2, [pc, #128]	; (802d7f8 <USB_SetTurnaroundTime+0x13c>)
 802d776:	4293      	cmp	r3, r2
 802d778:	d802      	bhi.n	802d780 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802d77a:	2308      	movs	r3, #8
 802d77c:	617b      	str	r3, [r7, #20]
 802d77e:	e015      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802d780:	68bb      	ldr	r3, [r7, #8]
 802d782:	4a1d      	ldr	r2, [pc, #116]	; (802d7f8 <USB_SetTurnaroundTime+0x13c>)
 802d784:	4293      	cmp	r3, r2
 802d786:	d906      	bls.n	802d796 <USB_SetTurnaroundTime+0xda>
 802d788:	68bb      	ldr	r3, [r7, #8]
 802d78a:	4a1c      	ldr	r2, [pc, #112]	; (802d7fc <USB_SetTurnaroundTime+0x140>)
 802d78c:	4293      	cmp	r3, r2
 802d78e:	d202      	bcs.n	802d796 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802d790:	2307      	movs	r3, #7
 802d792:	617b      	str	r3, [r7, #20]
 802d794:	e00a      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802d796:	2306      	movs	r3, #6
 802d798:	617b      	str	r3, [r7, #20]
 802d79a:	e007      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802d79c:	79fb      	ldrb	r3, [r7, #7]
 802d79e:	2b00      	cmp	r3, #0
 802d7a0:	d102      	bne.n	802d7a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802d7a2:	2309      	movs	r3, #9
 802d7a4:	617b      	str	r3, [r7, #20]
 802d7a6:	e001      	b.n	802d7ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802d7a8:	2309      	movs	r3, #9
 802d7aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802d7ac:	68fb      	ldr	r3, [r7, #12]
 802d7ae:	68db      	ldr	r3, [r3, #12]
 802d7b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802d7b4:	68fb      	ldr	r3, [r7, #12]
 802d7b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802d7b8:	68fb      	ldr	r3, [r7, #12]
 802d7ba:	68da      	ldr	r2, [r3, #12]
 802d7bc:	697b      	ldr	r3, [r7, #20]
 802d7be:	029b      	lsls	r3, r3, #10
 802d7c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802d7c4:	431a      	orrs	r2, r3
 802d7c6:	68fb      	ldr	r3, [r7, #12]
 802d7c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802d7ca:	2300      	movs	r3, #0
}
 802d7cc:	4618      	mov	r0, r3
 802d7ce:	371c      	adds	r7, #28
 802d7d0:	46bd      	mov	sp, r7
 802d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7d6:	4770      	bx	lr
 802d7d8:	00d8acbf 	.word	0x00d8acbf
 802d7dc:	00e4e1c0 	.word	0x00e4e1c0
 802d7e0:	00f42400 	.word	0x00f42400
 802d7e4:	01067380 	.word	0x01067380
 802d7e8:	011a499f 	.word	0x011a499f
 802d7ec:	01312cff 	.word	0x01312cff
 802d7f0:	014ca43f 	.word	0x014ca43f
 802d7f4:	016e3600 	.word	0x016e3600
 802d7f8:	01a6ab1f 	.word	0x01a6ab1f
 802d7fc:	01e84800 	.word	0x01e84800

0802d800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d800:	b480      	push	{r7}
 802d802:	b083      	sub	sp, #12
 802d804:	af00      	add	r7, sp, #0
 802d806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802d808:	687b      	ldr	r3, [r7, #4]
 802d80a:	689b      	ldr	r3, [r3, #8]
 802d80c:	f043 0201 	orr.w	r2, r3, #1
 802d810:	687b      	ldr	r3, [r7, #4]
 802d812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d814:	2300      	movs	r3, #0
}
 802d816:	4618      	mov	r0, r3
 802d818:	370c      	adds	r7, #12
 802d81a:	46bd      	mov	sp, r7
 802d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d820:	4770      	bx	lr

0802d822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d822:	b480      	push	{r7}
 802d824:	b083      	sub	sp, #12
 802d826:	af00      	add	r7, sp, #0
 802d828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802d82a:	687b      	ldr	r3, [r7, #4]
 802d82c:	689b      	ldr	r3, [r3, #8]
 802d82e:	f023 0201 	bic.w	r2, r3, #1
 802d832:	687b      	ldr	r3, [r7, #4]
 802d834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d836:	2300      	movs	r3, #0
}
 802d838:	4618      	mov	r0, r3
 802d83a:	370c      	adds	r7, #12
 802d83c:	46bd      	mov	sp, r7
 802d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d842:	4770      	bx	lr

0802d844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802d844:	b580      	push	{r7, lr}
 802d846:	b084      	sub	sp, #16
 802d848:	af00      	add	r7, sp, #0
 802d84a:	6078      	str	r0, [r7, #4]
 802d84c:	460b      	mov	r3, r1
 802d84e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802d850:	2300      	movs	r3, #0
 802d852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802d854:	687b      	ldr	r3, [r7, #4]
 802d856:	68db      	ldr	r3, [r3, #12]
 802d858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802d85c:	687b      	ldr	r3, [r7, #4]
 802d85e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802d860:	78fb      	ldrb	r3, [r7, #3]
 802d862:	2b01      	cmp	r3, #1
 802d864:	d115      	bne.n	802d892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802d866:	687b      	ldr	r3, [r7, #4]
 802d868:	68db      	ldr	r3, [r3, #12]
 802d86a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802d86e:	687b      	ldr	r3, [r7, #4]
 802d870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d872:	2001      	movs	r0, #1
 802d874:	f7fa fb34 	bl	8027ee0 <HAL_Delay>
      ms++;
 802d878:	68fb      	ldr	r3, [r7, #12]
 802d87a:	3301      	adds	r3, #1
 802d87c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802d87e:	6878      	ldr	r0, [r7, #4]
 802d880:	f001 fa45 	bl	802ed0e <USB_GetMode>
 802d884:	4603      	mov	r3, r0
 802d886:	2b01      	cmp	r3, #1
 802d888:	d01e      	beq.n	802d8c8 <USB_SetCurrentMode+0x84>
 802d88a:	68fb      	ldr	r3, [r7, #12]
 802d88c:	2b31      	cmp	r3, #49	; 0x31
 802d88e:	d9f0      	bls.n	802d872 <USB_SetCurrentMode+0x2e>
 802d890:	e01a      	b.n	802d8c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802d892:	78fb      	ldrb	r3, [r7, #3]
 802d894:	2b00      	cmp	r3, #0
 802d896:	d115      	bne.n	802d8c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802d898:	687b      	ldr	r3, [r7, #4]
 802d89a:	68db      	ldr	r3, [r3, #12]
 802d89c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802d8a0:	687b      	ldr	r3, [r7, #4]
 802d8a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d8a4:	2001      	movs	r0, #1
 802d8a6:	f7fa fb1b 	bl	8027ee0 <HAL_Delay>
      ms++;
 802d8aa:	68fb      	ldr	r3, [r7, #12]
 802d8ac:	3301      	adds	r3, #1
 802d8ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802d8b0:	6878      	ldr	r0, [r7, #4]
 802d8b2:	f001 fa2c 	bl	802ed0e <USB_GetMode>
 802d8b6:	4603      	mov	r3, r0
 802d8b8:	2b00      	cmp	r3, #0
 802d8ba:	d005      	beq.n	802d8c8 <USB_SetCurrentMode+0x84>
 802d8bc:	68fb      	ldr	r3, [r7, #12]
 802d8be:	2b31      	cmp	r3, #49	; 0x31
 802d8c0:	d9f0      	bls.n	802d8a4 <USB_SetCurrentMode+0x60>
 802d8c2:	e001      	b.n	802d8c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802d8c4:	2301      	movs	r3, #1
 802d8c6:	e005      	b.n	802d8d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802d8c8:	68fb      	ldr	r3, [r7, #12]
 802d8ca:	2b32      	cmp	r3, #50	; 0x32
 802d8cc:	d101      	bne.n	802d8d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802d8ce:	2301      	movs	r3, #1
 802d8d0:	e000      	b.n	802d8d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802d8d2:	2300      	movs	r3, #0
}
 802d8d4:	4618      	mov	r0, r3
 802d8d6:	3710      	adds	r7, #16
 802d8d8:	46bd      	mov	sp, r7
 802d8da:	bd80      	pop	{r7, pc}

0802d8dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802d8dc:	b084      	sub	sp, #16
 802d8de:	b580      	push	{r7, lr}
 802d8e0:	b086      	sub	sp, #24
 802d8e2:	af00      	add	r7, sp, #0
 802d8e4:	6078      	str	r0, [r7, #4]
 802d8e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802d8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802d8ee:	2300      	movs	r3, #0
 802d8f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d8f2:	687b      	ldr	r3, [r7, #4]
 802d8f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802d8f6:	2300      	movs	r3, #0
 802d8f8:	613b      	str	r3, [r7, #16]
 802d8fa:	e009      	b.n	802d910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802d8fc:	687a      	ldr	r2, [r7, #4]
 802d8fe:	693b      	ldr	r3, [r7, #16]
 802d900:	3340      	adds	r3, #64	; 0x40
 802d902:	009b      	lsls	r3, r3, #2
 802d904:	4413      	add	r3, r2
 802d906:	2200      	movs	r2, #0
 802d908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802d90a:	693b      	ldr	r3, [r7, #16]
 802d90c:	3301      	adds	r3, #1
 802d90e:	613b      	str	r3, [r7, #16]
 802d910:	693b      	ldr	r3, [r7, #16]
 802d912:	2b0e      	cmp	r3, #14
 802d914:	d9f2      	bls.n	802d8fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802d916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d918:	2b00      	cmp	r3, #0
 802d91a:	d11c      	bne.n	802d956 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802d91c:	68fb      	ldr	r3, [r7, #12]
 802d91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d922:	685b      	ldr	r3, [r3, #4]
 802d924:	68fa      	ldr	r2, [r7, #12]
 802d926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d92a:	f043 0302 	orr.w	r3, r3, #2
 802d92e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802d930:	687b      	ldr	r3, [r7, #4]
 802d932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d938:	687b      	ldr	r3, [r7, #4]
 802d93a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802d93c:	687b      	ldr	r3, [r7, #4]
 802d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d940:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802d944:	687b      	ldr	r3, [r7, #4]
 802d946:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802d948:	687b      	ldr	r3, [r7, #4]
 802d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d94c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802d950:	687b      	ldr	r3, [r7, #4]
 802d952:	639a      	str	r2, [r3, #56]	; 0x38
 802d954:	e00b      	b.n	802d96e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802d956:	687b      	ldr	r3, [r7, #4]
 802d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d95a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802d95e:	687b      	ldr	r3, [r7, #4]
 802d960:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802d962:	687b      	ldr	r3, [r7, #4]
 802d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d966:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802d96a:	687b      	ldr	r3, [r7, #4]
 802d96c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802d96e:	68fb      	ldr	r3, [r7, #12]
 802d970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d974:	461a      	mov	r2, r3
 802d976:	2300      	movs	r3, #0
 802d978:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802d97a:	68fb      	ldr	r3, [r7, #12]
 802d97c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d980:	4619      	mov	r1, r3
 802d982:	68fb      	ldr	r3, [r7, #12]
 802d984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d988:	461a      	mov	r2, r3
 802d98a:	680b      	ldr	r3, [r1, #0]
 802d98c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802d98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d990:	2b01      	cmp	r3, #1
 802d992:	d10c      	bne.n	802d9ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d996:	2b00      	cmp	r3, #0
 802d998:	d104      	bne.n	802d9a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802d99a:	2100      	movs	r1, #0
 802d99c:	6878      	ldr	r0, [r7, #4]
 802d99e:	f000 f965 	bl	802dc6c <USB_SetDevSpeed>
 802d9a2:	e008      	b.n	802d9b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802d9a4:	2101      	movs	r1, #1
 802d9a6:	6878      	ldr	r0, [r7, #4]
 802d9a8:	f000 f960 	bl	802dc6c <USB_SetDevSpeed>
 802d9ac:	e003      	b.n	802d9b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802d9ae:	2103      	movs	r1, #3
 802d9b0:	6878      	ldr	r0, [r7, #4]
 802d9b2:	f000 f95b 	bl	802dc6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802d9b6:	2110      	movs	r1, #16
 802d9b8:	6878      	ldr	r0, [r7, #4]
 802d9ba:	f000 f8f3 	bl	802dba4 <USB_FlushTxFifo>
 802d9be:	4603      	mov	r3, r0
 802d9c0:	2b00      	cmp	r3, #0
 802d9c2:	d001      	beq.n	802d9c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802d9c4:	2301      	movs	r3, #1
 802d9c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802d9c8:	6878      	ldr	r0, [r7, #4]
 802d9ca:	f000 f91f 	bl	802dc0c <USB_FlushRxFifo>
 802d9ce:	4603      	mov	r3, r0
 802d9d0:	2b00      	cmp	r3, #0
 802d9d2:	d001      	beq.n	802d9d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802d9d4:	2301      	movs	r3, #1
 802d9d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802d9d8:	68fb      	ldr	r3, [r7, #12]
 802d9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d9de:	461a      	mov	r2, r3
 802d9e0:	2300      	movs	r3, #0
 802d9e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802d9e4:	68fb      	ldr	r3, [r7, #12]
 802d9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d9ea:	461a      	mov	r2, r3
 802d9ec:	2300      	movs	r3, #0
 802d9ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802d9f0:	68fb      	ldr	r3, [r7, #12]
 802d9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d9f6:	461a      	mov	r2, r3
 802d9f8:	2300      	movs	r3, #0
 802d9fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d9fc:	2300      	movs	r3, #0
 802d9fe:	613b      	str	r3, [r7, #16]
 802da00:	e043      	b.n	802da8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802da02:	693b      	ldr	r3, [r7, #16]
 802da04:	015a      	lsls	r2, r3, #5
 802da06:	68fb      	ldr	r3, [r7, #12]
 802da08:	4413      	add	r3, r2
 802da0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da0e:	681b      	ldr	r3, [r3, #0]
 802da10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802da14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802da18:	d118      	bne.n	802da4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 802da1a:	693b      	ldr	r3, [r7, #16]
 802da1c:	2b00      	cmp	r3, #0
 802da1e:	d10a      	bne.n	802da36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802da20:	693b      	ldr	r3, [r7, #16]
 802da22:	015a      	lsls	r2, r3, #5
 802da24:	68fb      	ldr	r3, [r7, #12]
 802da26:	4413      	add	r3, r2
 802da28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da2c:	461a      	mov	r2, r3
 802da2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802da32:	6013      	str	r3, [r2, #0]
 802da34:	e013      	b.n	802da5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802da36:	693b      	ldr	r3, [r7, #16]
 802da38:	015a      	lsls	r2, r3, #5
 802da3a:	68fb      	ldr	r3, [r7, #12]
 802da3c:	4413      	add	r3, r2
 802da3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da42:	461a      	mov	r2, r3
 802da44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802da48:	6013      	str	r3, [r2, #0]
 802da4a:	e008      	b.n	802da5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802da4c:	693b      	ldr	r3, [r7, #16]
 802da4e:	015a      	lsls	r2, r3, #5
 802da50:	68fb      	ldr	r3, [r7, #12]
 802da52:	4413      	add	r3, r2
 802da54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da58:	461a      	mov	r2, r3
 802da5a:	2300      	movs	r3, #0
 802da5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802da5e:	693b      	ldr	r3, [r7, #16]
 802da60:	015a      	lsls	r2, r3, #5
 802da62:	68fb      	ldr	r3, [r7, #12]
 802da64:	4413      	add	r3, r2
 802da66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da6a:	461a      	mov	r2, r3
 802da6c:	2300      	movs	r3, #0
 802da6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802da70:	693b      	ldr	r3, [r7, #16]
 802da72:	015a      	lsls	r2, r3, #5
 802da74:	68fb      	ldr	r3, [r7, #12]
 802da76:	4413      	add	r3, r2
 802da78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da7c:	461a      	mov	r2, r3
 802da7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802da82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802da84:	693b      	ldr	r3, [r7, #16]
 802da86:	3301      	adds	r3, #1
 802da88:	613b      	str	r3, [r7, #16]
 802da8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da8c:	693a      	ldr	r2, [r7, #16]
 802da8e:	429a      	cmp	r2, r3
 802da90:	d3b7      	bcc.n	802da02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802da92:	2300      	movs	r3, #0
 802da94:	613b      	str	r3, [r7, #16]
 802da96:	e043      	b.n	802db20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802da98:	693b      	ldr	r3, [r7, #16]
 802da9a:	015a      	lsls	r2, r3, #5
 802da9c:	68fb      	ldr	r3, [r7, #12]
 802da9e:	4413      	add	r3, r2
 802daa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802daa4:	681b      	ldr	r3, [r3, #0]
 802daa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802daaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802daae:	d118      	bne.n	802dae2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 802dab0:	693b      	ldr	r3, [r7, #16]
 802dab2:	2b00      	cmp	r3, #0
 802dab4:	d10a      	bne.n	802dacc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802dab6:	693b      	ldr	r3, [r7, #16]
 802dab8:	015a      	lsls	r2, r3, #5
 802daba:	68fb      	ldr	r3, [r7, #12]
 802dabc:	4413      	add	r3, r2
 802dabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dac2:	461a      	mov	r2, r3
 802dac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802dac8:	6013      	str	r3, [r2, #0]
 802daca:	e013      	b.n	802daf4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802dacc:	693b      	ldr	r3, [r7, #16]
 802dace:	015a      	lsls	r2, r3, #5
 802dad0:	68fb      	ldr	r3, [r7, #12]
 802dad2:	4413      	add	r3, r2
 802dad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dad8:	461a      	mov	r2, r3
 802dada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802dade:	6013      	str	r3, [r2, #0]
 802dae0:	e008      	b.n	802daf4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802dae2:	693b      	ldr	r3, [r7, #16]
 802dae4:	015a      	lsls	r2, r3, #5
 802dae6:	68fb      	ldr	r3, [r7, #12]
 802dae8:	4413      	add	r3, r2
 802daea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802daee:	461a      	mov	r2, r3
 802daf0:	2300      	movs	r3, #0
 802daf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802daf4:	693b      	ldr	r3, [r7, #16]
 802daf6:	015a      	lsls	r2, r3, #5
 802daf8:	68fb      	ldr	r3, [r7, #12]
 802dafa:	4413      	add	r3, r2
 802dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db00:	461a      	mov	r2, r3
 802db02:	2300      	movs	r3, #0
 802db04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802db06:	693b      	ldr	r3, [r7, #16]
 802db08:	015a      	lsls	r2, r3, #5
 802db0a:	68fb      	ldr	r3, [r7, #12]
 802db0c:	4413      	add	r3, r2
 802db0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db12:	461a      	mov	r2, r3
 802db14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802db18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802db1a:	693b      	ldr	r3, [r7, #16]
 802db1c:	3301      	adds	r3, #1
 802db1e:	613b      	str	r3, [r7, #16]
 802db20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802db22:	693a      	ldr	r2, [r7, #16]
 802db24:	429a      	cmp	r2, r3
 802db26:	d3b7      	bcc.n	802da98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802db28:	68fb      	ldr	r3, [r7, #12]
 802db2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802db2e:	691b      	ldr	r3, [r3, #16]
 802db30:	68fa      	ldr	r2, [r7, #12]
 802db32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802db36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802db3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802db3c:	687b      	ldr	r3, [r7, #4]
 802db3e:	2200      	movs	r2, #0
 802db40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802db42:	687b      	ldr	r3, [r7, #4]
 802db44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802db48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802db4c:	2b00      	cmp	r3, #0
 802db4e:	d105      	bne.n	802db5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802db50:	687b      	ldr	r3, [r7, #4]
 802db52:	699b      	ldr	r3, [r3, #24]
 802db54:	f043 0210 	orr.w	r2, r3, #16
 802db58:	687b      	ldr	r3, [r7, #4]
 802db5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802db5c:	687b      	ldr	r3, [r7, #4]
 802db5e:	699a      	ldr	r2, [r3, #24]
 802db60:	4b0f      	ldr	r3, [pc, #60]	; (802dba0 <USB_DevInit+0x2c4>)
 802db62:	4313      	orrs	r3, r2
 802db64:	687a      	ldr	r2, [r7, #4]
 802db66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802db68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802db6a:	2b00      	cmp	r3, #0
 802db6c:	d005      	beq.n	802db7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802db6e:	687b      	ldr	r3, [r7, #4]
 802db70:	699b      	ldr	r3, [r3, #24]
 802db72:	f043 0208 	orr.w	r2, r3, #8
 802db76:	687b      	ldr	r3, [r7, #4]
 802db78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802db7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802db7c:	2b01      	cmp	r3, #1
 802db7e:	d107      	bne.n	802db90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802db80:	687b      	ldr	r3, [r7, #4]
 802db82:	699b      	ldr	r3, [r3, #24]
 802db84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802db88:	f043 0304 	orr.w	r3, r3, #4
 802db8c:	687a      	ldr	r2, [r7, #4]
 802db8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802db90:	7dfb      	ldrb	r3, [r7, #23]
}
 802db92:	4618      	mov	r0, r3
 802db94:	3718      	adds	r7, #24
 802db96:	46bd      	mov	sp, r7
 802db98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802db9c:	b004      	add	sp, #16
 802db9e:	4770      	bx	lr
 802dba0:	803c3800 	.word	0x803c3800

0802dba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802dba4:	b480      	push	{r7}
 802dba6:	b085      	sub	sp, #20
 802dba8:	af00      	add	r7, sp, #0
 802dbaa:	6078      	str	r0, [r7, #4]
 802dbac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802dbae:	2300      	movs	r3, #0
 802dbb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802dbb2:	68fb      	ldr	r3, [r7, #12]
 802dbb4:	3301      	adds	r3, #1
 802dbb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802dbb8:	68fb      	ldr	r3, [r7, #12]
 802dbba:	4a13      	ldr	r2, [pc, #76]	; (802dc08 <USB_FlushTxFifo+0x64>)
 802dbbc:	4293      	cmp	r3, r2
 802dbbe:	d901      	bls.n	802dbc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802dbc0:	2303      	movs	r3, #3
 802dbc2:	e01b      	b.n	802dbfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802dbc4:	687b      	ldr	r3, [r7, #4]
 802dbc6:	691b      	ldr	r3, [r3, #16]
 802dbc8:	2b00      	cmp	r3, #0
 802dbca:	daf2      	bge.n	802dbb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802dbcc:	2300      	movs	r3, #0
 802dbce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802dbd0:	683b      	ldr	r3, [r7, #0]
 802dbd2:	019b      	lsls	r3, r3, #6
 802dbd4:	f043 0220 	orr.w	r2, r3, #32
 802dbd8:	687b      	ldr	r3, [r7, #4]
 802dbda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802dbdc:	68fb      	ldr	r3, [r7, #12]
 802dbde:	3301      	adds	r3, #1
 802dbe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802dbe2:	68fb      	ldr	r3, [r7, #12]
 802dbe4:	4a08      	ldr	r2, [pc, #32]	; (802dc08 <USB_FlushTxFifo+0x64>)
 802dbe6:	4293      	cmp	r3, r2
 802dbe8:	d901      	bls.n	802dbee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802dbea:	2303      	movs	r3, #3
 802dbec:	e006      	b.n	802dbfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802dbee:	687b      	ldr	r3, [r7, #4]
 802dbf0:	691b      	ldr	r3, [r3, #16]
 802dbf2:	f003 0320 	and.w	r3, r3, #32
 802dbf6:	2b20      	cmp	r3, #32
 802dbf8:	d0f0      	beq.n	802dbdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802dbfa:	2300      	movs	r3, #0
}
 802dbfc:	4618      	mov	r0, r3
 802dbfe:	3714      	adds	r7, #20
 802dc00:	46bd      	mov	sp, r7
 802dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc06:	4770      	bx	lr
 802dc08:	00030d40 	.word	0x00030d40

0802dc0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802dc0c:	b480      	push	{r7}
 802dc0e:	b085      	sub	sp, #20
 802dc10:	af00      	add	r7, sp, #0
 802dc12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802dc14:	2300      	movs	r3, #0
 802dc16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802dc18:	68fb      	ldr	r3, [r7, #12]
 802dc1a:	3301      	adds	r3, #1
 802dc1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802dc1e:	68fb      	ldr	r3, [r7, #12]
 802dc20:	4a11      	ldr	r2, [pc, #68]	; (802dc68 <USB_FlushRxFifo+0x5c>)
 802dc22:	4293      	cmp	r3, r2
 802dc24:	d901      	bls.n	802dc2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802dc26:	2303      	movs	r3, #3
 802dc28:	e018      	b.n	802dc5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802dc2a:	687b      	ldr	r3, [r7, #4]
 802dc2c:	691b      	ldr	r3, [r3, #16]
 802dc2e:	2b00      	cmp	r3, #0
 802dc30:	daf2      	bge.n	802dc18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802dc32:	2300      	movs	r3, #0
 802dc34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802dc36:	687b      	ldr	r3, [r7, #4]
 802dc38:	2210      	movs	r2, #16
 802dc3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802dc3c:	68fb      	ldr	r3, [r7, #12]
 802dc3e:	3301      	adds	r3, #1
 802dc40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802dc42:	68fb      	ldr	r3, [r7, #12]
 802dc44:	4a08      	ldr	r2, [pc, #32]	; (802dc68 <USB_FlushRxFifo+0x5c>)
 802dc46:	4293      	cmp	r3, r2
 802dc48:	d901      	bls.n	802dc4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802dc4a:	2303      	movs	r3, #3
 802dc4c:	e006      	b.n	802dc5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802dc4e:	687b      	ldr	r3, [r7, #4]
 802dc50:	691b      	ldr	r3, [r3, #16]
 802dc52:	f003 0310 	and.w	r3, r3, #16
 802dc56:	2b10      	cmp	r3, #16
 802dc58:	d0f0      	beq.n	802dc3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802dc5a:	2300      	movs	r3, #0
}
 802dc5c:	4618      	mov	r0, r3
 802dc5e:	3714      	adds	r7, #20
 802dc60:	46bd      	mov	sp, r7
 802dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc66:	4770      	bx	lr
 802dc68:	00030d40 	.word	0x00030d40

0802dc6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802dc6c:	b480      	push	{r7}
 802dc6e:	b085      	sub	sp, #20
 802dc70:	af00      	add	r7, sp, #0
 802dc72:	6078      	str	r0, [r7, #4]
 802dc74:	460b      	mov	r3, r1
 802dc76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dc78:	687b      	ldr	r3, [r7, #4]
 802dc7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802dc7c:	68fb      	ldr	r3, [r7, #12]
 802dc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dc82:	681a      	ldr	r2, [r3, #0]
 802dc84:	78fb      	ldrb	r3, [r7, #3]
 802dc86:	68f9      	ldr	r1, [r7, #12]
 802dc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802dc8c:	4313      	orrs	r3, r2
 802dc8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802dc90:	2300      	movs	r3, #0
}
 802dc92:	4618      	mov	r0, r3
 802dc94:	3714      	adds	r7, #20
 802dc96:	46bd      	mov	sp, r7
 802dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc9c:	4770      	bx	lr

0802dc9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802dc9e:	b480      	push	{r7}
 802dca0:	b087      	sub	sp, #28
 802dca2:	af00      	add	r7, sp, #0
 802dca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dca6:	687b      	ldr	r3, [r7, #4]
 802dca8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802dcaa:	693b      	ldr	r3, [r7, #16]
 802dcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dcb0:	689b      	ldr	r3, [r3, #8]
 802dcb2:	f003 0306 	and.w	r3, r3, #6
 802dcb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802dcb8:	68fb      	ldr	r3, [r7, #12]
 802dcba:	2b00      	cmp	r3, #0
 802dcbc:	d102      	bne.n	802dcc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802dcbe:	2300      	movs	r3, #0
 802dcc0:	75fb      	strb	r3, [r7, #23]
 802dcc2:	e00a      	b.n	802dcda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802dcc4:	68fb      	ldr	r3, [r7, #12]
 802dcc6:	2b02      	cmp	r3, #2
 802dcc8:	d002      	beq.n	802dcd0 <USB_GetDevSpeed+0x32>
 802dcca:	68fb      	ldr	r3, [r7, #12]
 802dccc:	2b06      	cmp	r3, #6
 802dcce:	d102      	bne.n	802dcd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802dcd0:	2302      	movs	r3, #2
 802dcd2:	75fb      	strb	r3, [r7, #23]
 802dcd4:	e001      	b.n	802dcda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802dcd6:	230f      	movs	r3, #15
 802dcd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802dcda:	7dfb      	ldrb	r3, [r7, #23]
}
 802dcdc:	4618      	mov	r0, r3
 802dcde:	371c      	adds	r7, #28
 802dce0:	46bd      	mov	sp, r7
 802dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dce6:	4770      	bx	lr

0802dce8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802dce8:	b480      	push	{r7}
 802dcea:	b085      	sub	sp, #20
 802dcec:	af00      	add	r7, sp, #0
 802dcee:	6078      	str	r0, [r7, #4]
 802dcf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dcf2:	687b      	ldr	r3, [r7, #4]
 802dcf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802dcf6:	683b      	ldr	r3, [r7, #0]
 802dcf8:	781b      	ldrb	r3, [r3, #0]
 802dcfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802dcfc:	683b      	ldr	r3, [r7, #0]
 802dcfe:	785b      	ldrb	r3, [r3, #1]
 802dd00:	2b01      	cmp	r3, #1
 802dd02:	d13a      	bne.n	802dd7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802dd04:	68fb      	ldr	r3, [r7, #12]
 802dd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dd0a:	69da      	ldr	r2, [r3, #28]
 802dd0c:	683b      	ldr	r3, [r7, #0]
 802dd0e:	781b      	ldrb	r3, [r3, #0]
 802dd10:	f003 030f 	and.w	r3, r3, #15
 802dd14:	2101      	movs	r1, #1
 802dd16:	fa01 f303 	lsl.w	r3, r1, r3
 802dd1a:	b29b      	uxth	r3, r3
 802dd1c:	68f9      	ldr	r1, [r7, #12]
 802dd1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802dd22:	4313      	orrs	r3, r2
 802dd24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802dd26:	68bb      	ldr	r3, [r7, #8]
 802dd28:	015a      	lsls	r2, r3, #5
 802dd2a:	68fb      	ldr	r3, [r7, #12]
 802dd2c:	4413      	add	r3, r2
 802dd2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd32:	681b      	ldr	r3, [r3, #0]
 802dd34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802dd38:	2b00      	cmp	r3, #0
 802dd3a:	d155      	bne.n	802dde8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802dd3c:	68bb      	ldr	r3, [r7, #8]
 802dd3e:	015a      	lsls	r2, r3, #5
 802dd40:	68fb      	ldr	r3, [r7, #12]
 802dd42:	4413      	add	r3, r2
 802dd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd48:	681a      	ldr	r2, [r3, #0]
 802dd4a:	683b      	ldr	r3, [r7, #0]
 802dd4c:	68db      	ldr	r3, [r3, #12]
 802dd4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802dd52:	683b      	ldr	r3, [r7, #0]
 802dd54:	791b      	ldrb	r3, [r3, #4]
 802dd56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802dd58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802dd5a:	68bb      	ldr	r3, [r7, #8]
 802dd5c:	059b      	lsls	r3, r3, #22
 802dd5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802dd60:	4313      	orrs	r3, r2
 802dd62:	68ba      	ldr	r2, [r7, #8]
 802dd64:	0151      	lsls	r1, r2, #5
 802dd66:	68fa      	ldr	r2, [r7, #12]
 802dd68:	440a      	add	r2, r1
 802dd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802dd76:	6013      	str	r3, [r2, #0]
 802dd78:	e036      	b.n	802dde8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802dd7a:	68fb      	ldr	r3, [r7, #12]
 802dd7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dd80:	69da      	ldr	r2, [r3, #28]
 802dd82:	683b      	ldr	r3, [r7, #0]
 802dd84:	781b      	ldrb	r3, [r3, #0]
 802dd86:	f003 030f 	and.w	r3, r3, #15
 802dd8a:	2101      	movs	r1, #1
 802dd8c:	fa01 f303 	lsl.w	r3, r1, r3
 802dd90:	041b      	lsls	r3, r3, #16
 802dd92:	68f9      	ldr	r1, [r7, #12]
 802dd94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802dd98:	4313      	orrs	r3, r2
 802dd9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802dd9c:	68bb      	ldr	r3, [r7, #8]
 802dd9e:	015a      	lsls	r2, r3, #5
 802dda0:	68fb      	ldr	r3, [r7, #12]
 802dda2:	4413      	add	r3, r2
 802dda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dda8:	681b      	ldr	r3, [r3, #0]
 802ddaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ddae:	2b00      	cmp	r3, #0
 802ddb0:	d11a      	bne.n	802dde8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802ddb2:	68bb      	ldr	r3, [r7, #8]
 802ddb4:	015a      	lsls	r2, r3, #5
 802ddb6:	68fb      	ldr	r3, [r7, #12]
 802ddb8:	4413      	add	r3, r2
 802ddba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ddbe:	681a      	ldr	r2, [r3, #0]
 802ddc0:	683b      	ldr	r3, [r7, #0]
 802ddc2:	68db      	ldr	r3, [r3, #12]
 802ddc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802ddc8:	683b      	ldr	r3, [r7, #0]
 802ddca:	791b      	ldrb	r3, [r3, #4]
 802ddcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802ddce:	430b      	orrs	r3, r1
 802ddd0:	4313      	orrs	r3, r2
 802ddd2:	68ba      	ldr	r2, [r7, #8]
 802ddd4:	0151      	lsls	r1, r2, #5
 802ddd6:	68fa      	ldr	r2, [r7, #12]
 802ddd8:	440a      	add	r2, r1
 802ddda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ddde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dde2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802dde6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802dde8:	2300      	movs	r3, #0
}
 802ddea:	4618      	mov	r0, r3
 802ddec:	3714      	adds	r7, #20
 802ddee:	46bd      	mov	sp, r7
 802ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ddf4:	4770      	bx	lr
	...

0802ddf8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802ddf8:	b480      	push	{r7}
 802ddfa:	b085      	sub	sp, #20
 802ddfc:	af00      	add	r7, sp, #0
 802ddfe:	6078      	str	r0, [r7, #4]
 802de00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802de02:	687b      	ldr	r3, [r7, #4]
 802de04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802de06:	683b      	ldr	r3, [r7, #0]
 802de08:	781b      	ldrb	r3, [r3, #0]
 802de0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802de0c:	683b      	ldr	r3, [r7, #0]
 802de0e:	785b      	ldrb	r3, [r3, #1]
 802de10:	2b01      	cmp	r3, #1
 802de12:	d161      	bne.n	802ded8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802de14:	68bb      	ldr	r3, [r7, #8]
 802de16:	015a      	lsls	r2, r3, #5
 802de18:	68fb      	ldr	r3, [r7, #12]
 802de1a:	4413      	add	r3, r2
 802de1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de20:	681b      	ldr	r3, [r3, #0]
 802de22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802de26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802de2a:	d11f      	bne.n	802de6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802de2c:	68bb      	ldr	r3, [r7, #8]
 802de2e:	015a      	lsls	r2, r3, #5
 802de30:	68fb      	ldr	r3, [r7, #12]
 802de32:	4413      	add	r3, r2
 802de34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de38:	681b      	ldr	r3, [r3, #0]
 802de3a:	68ba      	ldr	r2, [r7, #8]
 802de3c:	0151      	lsls	r1, r2, #5
 802de3e:	68fa      	ldr	r2, [r7, #12]
 802de40:	440a      	add	r2, r1
 802de42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802de46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802de4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802de4c:	68bb      	ldr	r3, [r7, #8]
 802de4e:	015a      	lsls	r2, r3, #5
 802de50:	68fb      	ldr	r3, [r7, #12]
 802de52:	4413      	add	r3, r2
 802de54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de58:	681b      	ldr	r3, [r3, #0]
 802de5a:	68ba      	ldr	r2, [r7, #8]
 802de5c:	0151      	lsls	r1, r2, #5
 802de5e:	68fa      	ldr	r2, [r7, #12]
 802de60:	440a      	add	r2, r1
 802de62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802de66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802de6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802de6c:	68fb      	ldr	r3, [r7, #12]
 802de6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802de74:	683b      	ldr	r3, [r7, #0]
 802de76:	781b      	ldrb	r3, [r3, #0]
 802de78:	f003 030f 	and.w	r3, r3, #15
 802de7c:	2101      	movs	r1, #1
 802de7e:	fa01 f303 	lsl.w	r3, r1, r3
 802de82:	b29b      	uxth	r3, r3
 802de84:	43db      	mvns	r3, r3
 802de86:	68f9      	ldr	r1, [r7, #12]
 802de88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802de8c:	4013      	ands	r3, r2
 802de8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802de90:	68fb      	ldr	r3, [r7, #12]
 802de92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de96:	69da      	ldr	r2, [r3, #28]
 802de98:	683b      	ldr	r3, [r7, #0]
 802de9a:	781b      	ldrb	r3, [r3, #0]
 802de9c:	f003 030f 	and.w	r3, r3, #15
 802dea0:	2101      	movs	r1, #1
 802dea2:	fa01 f303 	lsl.w	r3, r1, r3
 802dea6:	b29b      	uxth	r3, r3
 802dea8:	43db      	mvns	r3, r3
 802deaa:	68f9      	ldr	r1, [r7, #12]
 802deac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802deb0:	4013      	ands	r3, r2
 802deb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802deb4:	68bb      	ldr	r3, [r7, #8]
 802deb6:	015a      	lsls	r2, r3, #5
 802deb8:	68fb      	ldr	r3, [r7, #12]
 802deba:	4413      	add	r3, r2
 802debc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dec0:	681a      	ldr	r2, [r3, #0]
 802dec2:	68bb      	ldr	r3, [r7, #8]
 802dec4:	0159      	lsls	r1, r3, #5
 802dec6:	68fb      	ldr	r3, [r7, #12]
 802dec8:	440b      	add	r3, r1
 802deca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dece:	4619      	mov	r1, r3
 802ded0:	4b35      	ldr	r3, [pc, #212]	; (802dfa8 <USB_DeactivateEndpoint+0x1b0>)
 802ded2:	4013      	ands	r3, r2
 802ded4:	600b      	str	r3, [r1, #0]
 802ded6:	e060      	b.n	802df9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802ded8:	68bb      	ldr	r3, [r7, #8]
 802deda:	015a      	lsls	r2, r3, #5
 802dedc:	68fb      	ldr	r3, [r7, #12]
 802dede:	4413      	add	r3, r2
 802dee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dee4:	681b      	ldr	r3, [r3, #0]
 802dee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802deea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802deee:	d11f      	bne.n	802df30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802def0:	68bb      	ldr	r3, [r7, #8]
 802def2:	015a      	lsls	r2, r3, #5
 802def4:	68fb      	ldr	r3, [r7, #12]
 802def6:	4413      	add	r3, r2
 802def8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802defc:	681b      	ldr	r3, [r3, #0]
 802defe:	68ba      	ldr	r2, [r7, #8]
 802df00:	0151      	lsls	r1, r2, #5
 802df02:	68fa      	ldr	r2, [r7, #12]
 802df04:	440a      	add	r2, r1
 802df06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802df0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802df10:	68bb      	ldr	r3, [r7, #8]
 802df12:	015a      	lsls	r2, r3, #5
 802df14:	68fb      	ldr	r3, [r7, #12]
 802df16:	4413      	add	r3, r2
 802df18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df1c:	681b      	ldr	r3, [r3, #0]
 802df1e:	68ba      	ldr	r2, [r7, #8]
 802df20:	0151      	lsls	r1, r2, #5
 802df22:	68fa      	ldr	r2, [r7, #12]
 802df24:	440a      	add	r2, r1
 802df26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802df2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802df30:	68fb      	ldr	r3, [r7, #12]
 802df32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802df36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802df38:	683b      	ldr	r3, [r7, #0]
 802df3a:	781b      	ldrb	r3, [r3, #0]
 802df3c:	f003 030f 	and.w	r3, r3, #15
 802df40:	2101      	movs	r1, #1
 802df42:	fa01 f303 	lsl.w	r3, r1, r3
 802df46:	041b      	lsls	r3, r3, #16
 802df48:	43db      	mvns	r3, r3
 802df4a:	68f9      	ldr	r1, [r7, #12]
 802df4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802df50:	4013      	ands	r3, r2
 802df52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802df54:	68fb      	ldr	r3, [r7, #12]
 802df56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802df5a:	69da      	ldr	r2, [r3, #28]
 802df5c:	683b      	ldr	r3, [r7, #0]
 802df5e:	781b      	ldrb	r3, [r3, #0]
 802df60:	f003 030f 	and.w	r3, r3, #15
 802df64:	2101      	movs	r1, #1
 802df66:	fa01 f303 	lsl.w	r3, r1, r3
 802df6a:	041b      	lsls	r3, r3, #16
 802df6c:	43db      	mvns	r3, r3
 802df6e:	68f9      	ldr	r1, [r7, #12]
 802df70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802df74:	4013      	ands	r3, r2
 802df76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802df78:	68bb      	ldr	r3, [r7, #8]
 802df7a:	015a      	lsls	r2, r3, #5
 802df7c:	68fb      	ldr	r3, [r7, #12]
 802df7e:	4413      	add	r3, r2
 802df80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df84:	681a      	ldr	r2, [r3, #0]
 802df86:	68bb      	ldr	r3, [r7, #8]
 802df88:	0159      	lsls	r1, r3, #5
 802df8a:	68fb      	ldr	r3, [r7, #12]
 802df8c:	440b      	add	r3, r1
 802df8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df92:	4619      	mov	r1, r3
 802df94:	4b05      	ldr	r3, [pc, #20]	; (802dfac <USB_DeactivateEndpoint+0x1b4>)
 802df96:	4013      	ands	r3, r2
 802df98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802df9a:	2300      	movs	r3, #0
}
 802df9c:	4618      	mov	r0, r3
 802df9e:	3714      	adds	r7, #20
 802dfa0:	46bd      	mov	sp, r7
 802dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfa6:	4770      	bx	lr
 802dfa8:	ec337800 	.word	0xec337800
 802dfac:	eff37800 	.word	0xeff37800

0802dfb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802dfb0:	b580      	push	{r7, lr}
 802dfb2:	b08a      	sub	sp, #40	; 0x28
 802dfb4:	af02      	add	r7, sp, #8
 802dfb6:	60f8      	str	r0, [r7, #12]
 802dfb8:	60b9      	str	r1, [r7, #8]
 802dfba:	4613      	mov	r3, r2
 802dfbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dfbe:	68fb      	ldr	r3, [r7, #12]
 802dfc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802dfc2:	68bb      	ldr	r3, [r7, #8]
 802dfc4:	781b      	ldrb	r3, [r3, #0]
 802dfc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802dfc8:	68bb      	ldr	r3, [r7, #8]
 802dfca:	785b      	ldrb	r3, [r3, #1]
 802dfcc:	2b01      	cmp	r3, #1
 802dfce:	f040 815c 	bne.w	802e28a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802dfd2:	68bb      	ldr	r3, [r7, #8]
 802dfd4:	699b      	ldr	r3, [r3, #24]
 802dfd6:	2b00      	cmp	r3, #0
 802dfd8:	d132      	bne.n	802e040 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dfda:	69bb      	ldr	r3, [r7, #24]
 802dfdc:	015a      	lsls	r2, r3, #5
 802dfde:	69fb      	ldr	r3, [r7, #28]
 802dfe0:	4413      	add	r3, r2
 802dfe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dfe6:	691b      	ldr	r3, [r3, #16]
 802dfe8:	69ba      	ldr	r2, [r7, #24]
 802dfea:	0151      	lsls	r1, r2, #5
 802dfec:	69fa      	ldr	r2, [r7, #28]
 802dfee:	440a      	add	r2, r1
 802dff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dffe:	69bb      	ldr	r3, [r7, #24]
 802e000:	015a      	lsls	r2, r3, #5
 802e002:	69fb      	ldr	r3, [r7, #28]
 802e004:	4413      	add	r3, r2
 802e006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e00a:	691b      	ldr	r3, [r3, #16]
 802e00c:	69ba      	ldr	r2, [r7, #24]
 802e00e:	0151      	lsls	r1, r2, #5
 802e010:	69fa      	ldr	r2, [r7, #28]
 802e012:	440a      	add	r2, r1
 802e014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e01c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802e01e:	69bb      	ldr	r3, [r7, #24]
 802e020:	015a      	lsls	r2, r3, #5
 802e022:	69fb      	ldr	r3, [r7, #28]
 802e024:	4413      	add	r3, r2
 802e026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e02a:	691b      	ldr	r3, [r3, #16]
 802e02c:	69ba      	ldr	r2, [r7, #24]
 802e02e:	0151      	lsls	r1, r2, #5
 802e030:	69fa      	ldr	r2, [r7, #28]
 802e032:	440a      	add	r2, r1
 802e034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e038:	0cdb      	lsrs	r3, r3, #19
 802e03a:	04db      	lsls	r3, r3, #19
 802e03c:	6113      	str	r3, [r2, #16]
 802e03e:	e074      	b.n	802e12a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802e040:	69bb      	ldr	r3, [r7, #24]
 802e042:	015a      	lsls	r2, r3, #5
 802e044:	69fb      	ldr	r3, [r7, #28]
 802e046:	4413      	add	r3, r2
 802e048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e04c:	691b      	ldr	r3, [r3, #16]
 802e04e:	69ba      	ldr	r2, [r7, #24]
 802e050:	0151      	lsls	r1, r2, #5
 802e052:	69fa      	ldr	r2, [r7, #28]
 802e054:	440a      	add	r2, r1
 802e056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e05a:	0cdb      	lsrs	r3, r3, #19
 802e05c:	04db      	lsls	r3, r3, #19
 802e05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802e060:	69bb      	ldr	r3, [r7, #24]
 802e062:	015a      	lsls	r2, r3, #5
 802e064:	69fb      	ldr	r3, [r7, #28]
 802e066:	4413      	add	r3, r2
 802e068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e06c:	691b      	ldr	r3, [r3, #16]
 802e06e:	69ba      	ldr	r2, [r7, #24]
 802e070:	0151      	lsls	r1, r2, #5
 802e072:	69fa      	ldr	r2, [r7, #28]
 802e074:	440a      	add	r2, r1
 802e076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e07a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802e07e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802e082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802e084:	69bb      	ldr	r3, [r7, #24]
 802e086:	015a      	lsls	r2, r3, #5
 802e088:	69fb      	ldr	r3, [r7, #28]
 802e08a:	4413      	add	r3, r2
 802e08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e090:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802e092:	68bb      	ldr	r3, [r7, #8]
 802e094:	6999      	ldr	r1, [r3, #24]
 802e096:	68bb      	ldr	r3, [r7, #8]
 802e098:	68db      	ldr	r3, [r3, #12]
 802e09a:	440b      	add	r3, r1
 802e09c:	1e59      	subs	r1, r3, #1
 802e09e:	68bb      	ldr	r3, [r7, #8]
 802e0a0:	68db      	ldr	r3, [r3, #12]
 802e0a2:	fbb1 f3f3 	udiv	r3, r1, r3
 802e0a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802e0a8:	4b9d      	ldr	r3, [pc, #628]	; (802e320 <USB_EPStartXfer+0x370>)
 802e0aa:	400b      	ands	r3, r1
 802e0ac:	69b9      	ldr	r1, [r7, #24]
 802e0ae:	0148      	lsls	r0, r1, #5
 802e0b0:	69f9      	ldr	r1, [r7, #28]
 802e0b2:	4401      	add	r1, r0
 802e0b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802e0b8:	4313      	orrs	r3, r2
 802e0ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802e0bc:	69bb      	ldr	r3, [r7, #24]
 802e0be:	015a      	lsls	r2, r3, #5
 802e0c0:	69fb      	ldr	r3, [r7, #28]
 802e0c2:	4413      	add	r3, r2
 802e0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e0c8:	691a      	ldr	r2, [r3, #16]
 802e0ca:	68bb      	ldr	r3, [r7, #8]
 802e0cc:	699b      	ldr	r3, [r3, #24]
 802e0ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802e0d2:	69b9      	ldr	r1, [r7, #24]
 802e0d4:	0148      	lsls	r0, r1, #5
 802e0d6:	69f9      	ldr	r1, [r7, #28]
 802e0d8:	4401      	add	r1, r0
 802e0da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802e0de:	4313      	orrs	r3, r2
 802e0e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802e0e2:	68bb      	ldr	r3, [r7, #8]
 802e0e4:	791b      	ldrb	r3, [r3, #4]
 802e0e6:	2b01      	cmp	r3, #1
 802e0e8:	d11f      	bne.n	802e12a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802e0ea:	69bb      	ldr	r3, [r7, #24]
 802e0ec:	015a      	lsls	r2, r3, #5
 802e0ee:	69fb      	ldr	r3, [r7, #28]
 802e0f0:	4413      	add	r3, r2
 802e0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e0f6:	691b      	ldr	r3, [r3, #16]
 802e0f8:	69ba      	ldr	r2, [r7, #24]
 802e0fa:	0151      	lsls	r1, r2, #5
 802e0fc:	69fa      	ldr	r2, [r7, #28]
 802e0fe:	440a      	add	r2, r1
 802e100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802e108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802e10a:	69bb      	ldr	r3, [r7, #24]
 802e10c:	015a      	lsls	r2, r3, #5
 802e10e:	69fb      	ldr	r3, [r7, #28]
 802e110:	4413      	add	r3, r2
 802e112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e116:	691b      	ldr	r3, [r3, #16]
 802e118:	69ba      	ldr	r2, [r7, #24]
 802e11a:	0151      	lsls	r1, r2, #5
 802e11c:	69fa      	ldr	r2, [r7, #28]
 802e11e:	440a      	add	r2, r1
 802e120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802e128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802e12a:	79fb      	ldrb	r3, [r7, #7]
 802e12c:	2b01      	cmp	r3, #1
 802e12e:	d14b      	bne.n	802e1c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802e130:	68bb      	ldr	r3, [r7, #8]
 802e132:	695b      	ldr	r3, [r3, #20]
 802e134:	2b00      	cmp	r3, #0
 802e136:	d009      	beq.n	802e14c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802e138:	69bb      	ldr	r3, [r7, #24]
 802e13a:	015a      	lsls	r2, r3, #5
 802e13c:	69fb      	ldr	r3, [r7, #28]
 802e13e:	4413      	add	r3, r2
 802e140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e144:	461a      	mov	r2, r3
 802e146:	68bb      	ldr	r3, [r7, #8]
 802e148:	695b      	ldr	r3, [r3, #20]
 802e14a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802e14c:	68bb      	ldr	r3, [r7, #8]
 802e14e:	791b      	ldrb	r3, [r3, #4]
 802e150:	2b01      	cmp	r3, #1
 802e152:	d128      	bne.n	802e1a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802e154:	69fb      	ldr	r3, [r7, #28]
 802e156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e15a:	689b      	ldr	r3, [r3, #8]
 802e15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e160:	2b00      	cmp	r3, #0
 802e162:	d110      	bne.n	802e186 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802e164:	69bb      	ldr	r3, [r7, #24]
 802e166:	015a      	lsls	r2, r3, #5
 802e168:	69fb      	ldr	r3, [r7, #28]
 802e16a:	4413      	add	r3, r2
 802e16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e170:	681b      	ldr	r3, [r3, #0]
 802e172:	69ba      	ldr	r2, [r7, #24]
 802e174:	0151      	lsls	r1, r2, #5
 802e176:	69fa      	ldr	r2, [r7, #28]
 802e178:	440a      	add	r2, r1
 802e17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e17e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802e182:	6013      	str	r3, [r2, #0]
 802e184:	e00f      	b.n	802e1a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802e186:	69bb      	ldr	r3, [r7, #24]
 802e188:	015a      	lsls	r2, r3, #5
 802e18a:	69fb      	ldr	r3, [r7, #28]
 802e18c:	4413      	add	r3, r2
 802e18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e192:	681b      	ldr	r3, [r3, #0]
 802e194:	69ba      	ldr	r2, [r7, #24]
 802e196:	0151      	lsls	r1, r2, #5
 802e198:	69fa      	ldr	r2, [r7, #28]
 802e19a:	440a      	add	r2, r1
 802e19c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e1a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802e1a6:	69bb      	ldr	r3, [r7, #24]
 802e1a8:	015a      	lsls	r2, r3, #5
 802e1aa:	69fb      	ldr	r3, [r7, #28]
 802e1ac:	4413      	add	r3, r2
 802e1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1b2:	681b      	ldr	r3, [r3, #0]
 802e1b4:	69ba      	ldr	r2, [r7, #24]
 802e1b6:	0151      	lsls	r1, r2, #5
 802e1b8:	69fa      	ldr	r2, [r7, #28]
 802e1ba:	440a      	add	r2, r1
 802e1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e1c4:	6013      	str	r3, [r2, #0]
 802e1c6:	e133      	b.n	802e430 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802e1c8:	69bb      	ldr	r3, [r7, #24]
 802e1ca:	015a      	lsls	r2, r3, #5
 802e1cc:	69fb      	ldr	r3, [r7, #28]
 802e1ce:	4413      	add	r3, r2
 802e1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1d4:	681b      	ldr	r3, [r3, #0]
 802e1d6:	69ba      	ldr	r2, [r7, #24]
 802e1d8:	0151      	lsls	r1, r2, #5
 802e1da:	69fa      	ldr	r2, [r7, #28]
 802e1dc:	440a      	add	r2, r1
 802e1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e1e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802e1e8:	68bb      	ldr	r3, [r7, #8]
 802e1ea:	791b      	ldrb	r3, [r3, #4]
 802e1ec:	2b01      	cmp	r3, #1
 802e1ee:	d015      	beq.n	802e21c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802e1f0:	68bb      	ldr	r3, [r7, #8]
 802e1f2:	699b      	ldr	r3, [r3, #24]
 802e1f4:	2b00      	cmp	r3, #0
 802e1f6:	f000 811b 	beq.w	802e430 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802e1fa:	69fb      	ldr	r3, [r7, #28]
 802e1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e202:	68bb      	ldr	r3, [r7, #8]
 802e204:	781b      	ldrb	r3, [r3, #0]
 802e206:	f003 030f 	and.w	r3, r3, #15
 802e20a:	2101      	movs	r1, #1
 802e20c:	fa01 f303 	lsl.w	r3, r1, r3
 802e210:	69f9      	ldr	r1, [r7, #28]
 802e212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802e216:	4313      	orrs	r3, r2
 802e218:	634b      	str	r3, [r1, #52]	; 0x34
 802e21a:	e109      	b.n	802e430 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802e21c:	69fb      	ldr	r3, [r7, #28]
 802e21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e222:	689b      	ldr	r3, [r3, #8]
 802e224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e228:	2b00      	cmp	r3, #0
 802e22a:	d110      	bne.n	802e24e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802e22c:	69bb      	ldr	r3, [r7, #24]
 802e22e:	015a      	lsls	r2, r3, #5
 802e230:	69fb      	ldr	r3, [r7, #28]
 802e232:	4413      	add	r3, r2
 802e234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e238:	681b      	ldr	r3, [r3, #0]
 802e23a:	69ba      	ldr	r2, [r7, #24]
 802e23c:	0151      	lsls	r1, r2, #5
 802e23e:	69fa      	ldr	r2, [r7, #28]
 802e240:	440a      	add	r2, r1
 802e242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802e24a:	6013      	str	r3, [r2, #0]
 802e24c:	e00f      	b.n	802e26e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802e24e:	69bb      	ldr	r3, [r7, #24]
 802e250:	015a      	lsls	r2, r3, #5
 802e252:	69fb      	ldr	r3, [r7, #28]
 802e254:	4413      	add	r3, r2
 802e256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e25a:	681b      	ldr	r3, [r3, #0]
 802e25c:	69ba      	ldr	r2, [r7, #24]
 802e25e:	0151      	lsls	r1, r2, #5
 802e260:	69fa      	ldr	r2, [r7, #28]
 802e262:	440a      	add	r2, r1
 802e264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e26c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802e26e:	68bb      	ldr	r3, [r7, #8]
 802e270:	6919      	ldr	r1, [r3, #16]
 802e272:	68bb      	ldr	r3, [r7, #8]
 802e274:	781a      	ldrb	r2, [r3, #0]
 802e276:	68bb      	ldr	r3, [r7, #8]
 802e278:	699b      	ldr	r3, [r3, #24]
 802e27a:	b298      	uxth	r0, r3
 802e27c:	79fb      	ldrb	r3, [r7, #7]
 802e27e:	9300      	str	r3, [sp, #0]
 802e280:	4603      	mov	r3, r0
 802e282:	68f8      	ldr	r0, [r7, #12]
 802e284:	f000 fade 	bl	802e844 <USB_WritePacket>
 802e288:	e0d2      	b.n	802e430 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802e28a:	69bb      	ldr	r3, [r7, #24]
 802e28c:	015a      	lsls	r2, r3, #5
 802e28e:	69fb      	ldr	r3, [r7, #28]
 802e290:	4413      	add	r3, r2
 802e292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e296:	691b      	ldr	r3, [r3, #16]
 802e298:	69ba      	ldr	r2, [r7, #24]
 802e29a:	0151      	lsls	r1, r2, #5
 802e29c:	69fa      	ldr	r2, [r7, #28]
 802e29e:	440a      	add	r2, r1
 802e2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e2a4:	0cdb      	lsrs	r3, r3, #19
 802e2a6:	04db      	lsls	r3, r3, #19
 802e2a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802e2aa:	69bb      	ldr	r3, [r7, #24]
 802e2ac:	015a      	lsls	r2, r3, #5
 802e2ae:	69fb      	ldr	r3, [r7, #28]
 802e2b0:	4413      	add	r3, r2
 802e2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e2b6:	691b      	ldr	r3, [r3, #16]
 802e2b8:	69ba      	ldr	r2, [r7, #24]
 802e2ba:	0151      	lsls	r1, r2, #5
 802e2bc:	69fa      	ldr	r2, [r7, #28]
 802e2be:	440a      	add	r2, r1
 802e2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e2c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802e2c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802e2cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802e2ce:	68bb      	ldr	r3, [r7, #8]
 802e2d0:	699b      	ldr	r3, [r3, #24]
 802e2d2:	2b00      	cmp	r3, #0
 802e2d4:	d126      	bne.n	802e324 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802e2d6:	69bb      	ldr	r3, [r7, #24]
 802e2d8:	015a      	lsls	r2, r3, #5
 802e2da:	69fb      	ldr	r3, [r7, #28]
 802e2dc:	4413      	add	r3, r2
 802e2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e2e2:	691a      	ldr	r2, [r3, #16]
 802e2e4:	68bb      	ldr	r3, [r7, #8]
 802e2e6:	68db      	ldr	r3, [r3, #12]
 802e2e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802e2ec:	69b9      	ldr	r1, [r7, #24]
 802e2ee:	0148      	lsls	r0, r1, #5
 802e2f0:	69f9      	ldr	r1, [r7, #28]
 802e2f2:	4401      	add	r1, r0
 802e2f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802e2f8:	4313      	orrs	r3, r2
 802e2fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802e2fc:	69bb      	ldr	r3, [r7, #24]
 802e2fe:	015a      	lsls	r2, r3, #5
 802e300:	69fb      	ldr	r3, [r7, #28]
 802e302:	4413      	add	r3, r2
 802e304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e308:	691b      	ldr	r3, [r3, #16]
 802e30a:	69ba      	ldr	r2, [r7, #24]
 802e30c:	0151      	lsls	r1, r2, #5
 802e30e:	69fa      	ldr	r2, [r7, #28]
 802e310:	440a      	add	r2, r1
 802e312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e31a:	6113      	str	r3, [r2, #16]
 802e31c:	e03a      	b.n	802e394 <USB_EPStartXfer+0x3e4>
 802e31e:	bf00      	nop
 802e320:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802e324:	68bb      	ldr	r3, [r7, #8]
 802e326:	699a      	ldr	r2, [r3, #24]
 802e328:	68bb      	ldr	r3, [r7, #8]
 802e32a:	68db      	ldr	r3, [r3, #12]
 802e32c:	4413      	add	r3, r2
 802e32e:	1e5a      	subs	r2, r3, #1
 802e330:	68bb      	ldr	r3, [r7, #8]
 802e332:	68db      	ldr	r3, [r3, #12]
 802e334:	fbb2 f3f3 	udiv	r3, r2, r3
 802e338:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802e33a:	68bb      	ldr	r3, [r7, #8]
 802e33c:	68db      	ldr	r3, [r3, #12]
 802e33e:	8afa      	ldrh	r2, [r7, #22]
 802e340:	fb03 f202 	mul.w	r2, r3, r2
 802e344:	68bb      	ldr	r3, [r7, #8]
 802e346:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802e348:	69bb      	ldr	r3, [r7, #24]
 802e34a:	015a      	lsls	r2, r3, #5
 802e34c:	69fb      	ldr	r3, [r7, #28]
 802e34e:	4413      	add	r3, r2
 802e350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e354:	691a      	ldr	r2, [r3, #16]
 802e356:	8afb      	ldrh	r3, [r7, #22]
 802e358:	04d9      	lsls	r1, r3, #19
 802e35a:	4b38      	ldr	r3, [pc, #224]	; (802e43c <USB_EPStartXfer+0x48c>)
 802e35c:	400b      	ands	r3, r1
 802e35e:	69b9      	ldr	r1, [r7, #24]
 802e360:	0148      	lsls	r0, r1, #5
 802e362:	69f9      	ldr	r1, [r7, #28]
 802e364:	4401      	add	r1, r0
 802e366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802e36a:	4313      	orrs	r3, r2
 802e36c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802e36e:	69bb      	ldr	r3, [r7, #24]
 802e370:	015a      	lsls	r2, r3, #5
 802e372:	69fb      	ldr	r3, [r7, #28]
 802e374:	4413      	add	r3, r2
 802e376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e37a:	691a      	ldr	r2, [r3, #16]
 802e37c:	68bb      	ldr	r3, [r7, #8]
 802e37e:	69db      	ldr	r3, [r3, #28]
 802e380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802e384:	69b9      	ldr	r1, [r7, #24]
 802e386:	0148      	lsls	r0, r1, #5
 802e388:	69f9      	ldr	r1, [r7, #28]
 802e38a:	4401      	add	r1, r0
 802e38c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802e390:	4313      	orrs	r3, r2
 802e392:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802e394:	79fb      	ldrb	r3, [r7, #7]
 802e396:	2b01      	cmp	r3, #1
 802e398:	d10d      	bne.n	802e3b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802e39a:	68bb      	ldr	r3, [r7, #8]
 802e39c:	691b      	ldr	r3, [r3, #16]
 802e39e:	2b00      	cmp	r3, #0
 802e3a0:	d009      	beq.n	802e3b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802e3a2:	68bb      	ldr	r3, [r7, #8]
 802e3a4:	6919      	ldr	r1, [r3, #16]
 802e3a6:	69bb      	ldr	r3, [r7, #24]
 802e3a8:	015a      	lsls	r2, r3, #5
 802e3aa:	69fb      	ldr	r3, [r7, #28]
 802e3ac:	4413      	add	r3, r2
 802e3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e3b2:	460a      	mov	r2, r1
 802e3b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802e3b6:	68bb      	ldr	r3, [r7, #8]
 802e3b8:	791b      	ldrb	r3, [r3, #4]
 802e3ba:	2b01      	cmp	r3, #1
 802e3bc:	d128      	bne.n	802e410 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802e3be:	69fb      	ldr	r3, [r7, #28]
 802e3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3c4:	689b      	ldr	r3, [r3, #8]
 802e3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e3ca:	2b00      	cmp	r3, #0
 802e3cc:	d110      	bne.n	802e3f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802e3ce:	69bb      	ldr	r3, [r7, #24]
 802e3d0:	015a      	lsls	r2, r3, #5
 802e3d2:	69fb      	ldr	r3, [r7, #28]
 802e3d4:	4413      	add	r3, r2
 802e3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e3da:	681b      	ldr	r3, [r3, #0]
 802e3dc:	69ba      	ldr	r2, [r7, #24]
 802e3de:	0151      	lsls	r1, r2, #5
 802e3e0:	69fa      	ldr	r2, [r7, #28]
 802e3e2:	440a      	add	r2, r1
 802e3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e3e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802e3ec:	6013      	str	r3, [r2, #0]
 802e3ee:	e00f      	b.n	802e410 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802e3f0:	69bb      	ldr	r3, [r7, #24]
 802e3f2:	015a      	lsls	r2, r3, #5
 802e3f4:	69fb      	ldr	r3, [r7, #28]
 802e3f6:	4413      	add	r3, r2
 802e3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e3fc:	681b      	ldr	r3, [r3, #0]
 802e3fe:	69ba      	ldr	r2, [r7, #24]
 802e400:	0151      	lsls	r1, r2, #5
 802e402:	69fa      	ldr	r2, [r7, #28]
 802e404:	440a      	add	r2, r1
 802e406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e40e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802e410:	69bb      	ldr	r3, [r7, #24]
 802e412:	015a      	lsls	r2, r3, #5
 802e414:	69fb      	ldr	r3, [r7, #28]
 802e416:	4413      	add	r3, r2
 802e418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e41c:	681b      	ldr	r3, [r3, #0]
 802e41e:	69ba      	ldr	r2, [r7, #24]
 802e420:	0151      	lsls	r1, r2, #5
 802e422:	69fa      	ldr	r2, [r7, #28]
 802e424:	440a      	add	r2, r1
 802e426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e42a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e42e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e430:	2300      	movs	r3, #0
}
 802e432:	4618      	mov	r0, r3
 802e434:	3720      	adds	r7, #32
 802e436:	46bd      	mov	sp, r7
 802e438:	bd80      	pop	{r7, pc}
 802e43a:	bf00      	nop
 802e43c:	1ff80000 	.word	0x1ff80000

0802e440 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802e440:	b480      	push	{r7}
 802e442:	b087      	sub	sp, #28
 802e444:	af00      	add	r7, sp, #0
 802e446:	60f8      	str	r0, [r7, #12]
 802e448:	60b9      	str	r1, [r7, #8]
 802e44a:	4613      	mov	r3, r2
 802e44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e44e:	68fb      	ldr	r3, [r7, #12]
 802e450:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802e452:	68bb      	ldr	r3, [r7, #8]
 802e454:	781b      	ldrb	r3, [r3, #0]
 802e456:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802e458:	68bb      	ldr	r3, [r7, #8]
 802e45a:	785b      	ldrb	r3, [r3, #1]
 802e45c:	2b01      	cmp	r3, #1
 802e45e:	f040 80ce 	bne.w	802e5fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802e462:	68bb      	ldr	r3, [r7, #8]
 802e464:	699b      	ldr	r3, [r3, #24]
 802e466:	2b00      	cmp	r3, #0
 802e468:	d132      	bne.n	802e4d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802e46a:	693b      	ldr	r3, [r7, #16]
 802e46c:	015a      	lsls	r2, r3, #5
 802e46e:	697b      	ldr	r3, [r7, #20]
 802e470:	4413      	add	r3, r2
 802e472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e476:	691b      	ldr	r3, [r3, #16]
 802e478:	693a      	ldr	r2, [r7, #16]
 802e47a:	0151      	lsls	r1, r2, #5
 802e47c:	697a      	ldr	r2, [r7, #20]
 802e47e:	440a      	add	r2, r1
 802e480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802e488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802e48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802e48e:	693b      	ldr	r3, [r7, #16]
 802e490:	015a      	lsls	r2, r3, #5
 802e492:	697b      	ldr	r3, [r7, #20]
 802e494:	4413      	add	r3, r2
 802e496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e49a:	691b      	ldr	r3, [r3, #16]
 802e49c:	693a      	ldr	r2, [r7, #16]
 802e49e:	0151      	lsls	r1, r2, #5
 802e4a0:	697a      	ldr	r2, [r7, #20]
 802e4a2:	440a      	add	r2, r1
 802e4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e4a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e4ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802e4ae:	693b      	ldr	r3, [r7, #16]
 802e4b0:	015a      	lsls	r2, r3, #5
 802e4b2:	697b      	ldr	r3, [r7, #20]
 802e4b4:	4413      	add	r3, r2
 802e4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e4ba:	691b      	ldr	r3, [r3, #16]
 802e4bc:	693a      	ldr	r2, [r7, #16]
 802e4be:	0151      	lsls	r1, r2, #5
 802e4c0:	697a      	ldr	r2, [r7, #20]
 802e4c2:	440a      	add	r2, r1
 802e4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e4c8:	0cdb      	lsrs	r3, r3, #19
 802e4ca:	04db      	lsls	r3, r3, #19
 802e4cc:	6113      	str	r3, [r2, #16]
 802e4ce:	e04e      	b.n	802e56e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802e4d0:	693b      	ldr	r3, [r7, #16]
 802e4d2:	015a      	lsls	r2, r3, #5
 802e4d4:	697b      	ldr	r3, [r7, #20]
 802e4d6:	4413      	add	r3, r2
 802e4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e4dc:	691b      	ldr	r3, [r3, #16]
 802e4de:	693a      	ldr	r2, [r7, #16]
 802e4e0:	0151      	lsls	r1, r2, #5
 802e4e2:	697a      	ldr	r2, [r7, #20]
 802e4e4:	440a      	add	r2, r1
 802e4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e4ea:	0cdb      	lsrs	r3, r3, #19
 802e4ec:	04db      	lsls	r3, r3, #19
 802e4ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802e4f0:	693b      	ldr	r3, [r7, #16]
 802e4f2:	015a      	lsls	r2, r3, #5
 802e4f4:	697b      	ldr	r3, [r7, #20]
 802e4f6:	4413      	add	r3, r2
 802e4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e4fc:	691b      	ldr	r3, [r3, #16]
 802e4fe:	693a      	ldr	r2, [r7, #16]
 802e500:	0151      	lsls	r1, r2, #5
 802e502:	697a      	ldr	r2, [r7, #20]
 802e504:	440a      	add	r2, r1
 802e506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e50a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802e50e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802e512:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802e514:	68bb      	ldr	r3, [r7, #8]
 802e516:	699a      	ldr	r2, [r3, #24]
 802e518:	68bb      	ldr	r3, [r7, #8]
 802e51a:	68db      	ldr	r3, [r3, #12]
 802e51c:	429a      	cmp	r2, r3
 802e51e:	d903      	bls.n	802e528 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802e520:	68bb      	ldr	r3, [r7, #8]
 802e522:	68da      	ldr	r2, [r3, #12]
 802e524:	68bb      	ldr	r3, [r7, #8]
 802e526:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802e528:	693b      	ldr	r3, [r7, #16]
 802e52a:	015a      	lsls	r2, r3, #5
 802e52c:	697b      	ldr	r3, [r7, #20]
 802e52e:	4413      	add	r3, r2
 802e530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e534:	691b      	ldr	r3, [r3, #16]
 802e536:	693a      	ldr	r2, [r7, #16]
 802e538:	0151      	lsls	r1, r2, #5
 802e53a:	697a      	ldr	r2, [r7, #20]
 802e53c:	440a      	add	r2, r1
 802e53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802e548:	693b      	ldr	r3, [r7, #16]
 802e54a:	015a      	lsls	r2, r3, #5
 802e54c:	697b      	ldr	r3, [r7, #20]
 802e54e:	4413      	add	r3, r2
 802e550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e554:	691a      	ldr	r2, [r3, #16]
 802e556:	68bb      	ldr	r3, [r7, #8]
 802e558:	699b      	ldr	r3, [r3, #24]
 802e55a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802e55e:	6939      	ldr	r1, [r7, #16]
 802e560:	0148      	lsls	r0, r1, #5
 802e562:	6979      	ldr	r1, [r7, #20]
 802e564:	4401      	add	r1, r0
 802e566:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802e56a:	4313      	orrs	r3, r2
 802e56c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802e56e:	79fb      	ldrb	r3, [r7, #7]
 802e570:	2b01      	cmp	r3, #1
 802e572:	d11e      	bne.n	802e5b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802e574:	68bb      	ldr	r3, [r7, #8]
 802e576:	695b      	ldr	r3, [r3, #20]
 802e578:	2b00      	cmp	r3, #0
 802e57a:	d009      	beq.n	802e590 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802e57c:	693b      	ldr	r3, [r7, #16]
 802e57e:	015a      	lsls	r2, r3, #5
 802e580:	697b      	ldr	r3, [r7, #20]
 802e582:	4413      	add	r3, r2
 802e584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e588:	461a      	mov	r2, r3
 802e58a:	68bb      	ldr	r3, [r7, #8]
 802e58c:	695b      	ldr	r3, [r3, #20]
 802e58e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802e590:	693b      	ldr	r3, [r7, #16]
 802e592:	015a      	lsls	r2, r3, #5
 802e594:	697b      	ldr	r3, [r7, #20]
 802e596:	4413      	add	r3, r2
 802e598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e59c:	681b      	ldr	r3, [r3, #0]
 802e59e:	693a      	ldr	r2, [r7, #16]
 802e5a0:	0151      	lsls	r1, r2, #5
 802e5a2:	697a      	ldr	r2, [r7, #20]
 802e5a4:	440a      	add	r2, r1
 802e5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e5aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e5ae:	6013      	str	r3, [r2, #0]
 802e5b0:	e097      	b.n	802e6e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802e5b2:	693b      	ldr	r3, [r7, #16]
 802e5b4:	015a      	lsls	r2, r3, #5
 802e5b6:	697b      	ldr	r3, [r7, #20]
 802e5b8:	4413      	add	r3, r2
 802e5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e5be:	681b      	ldr	r3, [r3, #0]
 802e5c0:	693a      	ldr	r2, [r7, #16]
 802e5c2:	0151      	lsls	r1, r2, #5
 802e5c4:	697a      	ldr	r2, [r7, #20]
 802e5c6:	440a      	add	r2, r1
 802e5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e5cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e5d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802e5d2:	68bb      	ldr	r3, [r7, #8]
 802e5d4:	699b      	ldr	r3, [r3, #24]
 802e5d6:	2b00      	cmp	r3, #0
 802e5d8:	f000 8083 	beq.w	802e6e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802e5dc:	697b      	ldr	r3, [r7, #20]
 802e5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e5e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802e5e4:	68bb      	ldr	r3, [r7, #8]
 802e5e6:	781b      	ldrb	r3, [r3, #0]
 802e5e8:	f003 030f 	and.w	r3, r3, #15
 802e5ec:	2101      	movs	r1, #1
 802e5ee:	fa01 f303 	lsl.w	r3, r1, r3
 802e5f2:	6979      	ldr	r1, [r7, #20]
 802e5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802e5f8:	4313      	orrs	r3, r2
 802e5fa:	634b      	str	r3, [r1, #52]	; 0x34
 802e5fc:	e071      	b.n	802e6e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802e5fe:	693b      	ldr	r3, [r7, #16]
 802e600:	015a      	lsls	r2, r3, #5
 802e602:	697b      	ldr	r3, [r7, #20]
 802e604:	4413      	add	r3, r2
 802e606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e60a:	691b      	ldr	r3, [r3, #16]
 802e60c:	693a      	ldr	r2, [r7, #16]
 802e60e:	0151      	lsls	r1, r2, #5
 802e610:	697a      	ldr	r2, [r7, #20]
 802e612:	440a      	add	r2, r1
 802e614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e618:	0cdb      	lsrs	r3, r3, #19
 802e61a:	04db      	lsls	r3, r3, #19
 802e61c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802e61e:	693b      	ldr	r3, [r7, #16]
 802e620:	015a      	lsls	r2, r3, #5
 802e622:	697b      	ldr	r3, [r7, #20]
 802e624:	4413      	add	r3, r2
 802e626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e62a:	691b      	ldr	r3, [r3, #16]
 802e62c:	693a      	ldr	r2, [r7, #16]
 802e62e:	0151      	lsls	r1, r2, #5
 802e630:	697a      	ldr	r2, [r7, #20]
 802e632:	440a      	add	r2, r1
 802e634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802e63c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802e640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802e642:	68bb      	ldr	r3, [r7, #8]
 802e644:	699b      	ldr	r3, [r3, #24]
 802e646:	2b00      	cmp	r3, #0
 802e648:	d003      	beq.n	802e652 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802e64a:	68bb      	ldr	r3, [r7, #8]
 802e64c:	68da      	ldr	r2, [r3, #12]
 802e64e:	68bb      	ldr	r3, [r7, #8]
 802e650:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 802e652:	68bb      	ldr	r3, [r7, #8]
 802e654:	68da      	ldr	r2, [r3, #12]
 802e656:	68bb      	ldr	r3, [r7, #8]
 802e658:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802e65a:	693b      	ldr	r3, [r7, #16]
 802e65c:	015a      	lsls	r2, r3, #5
 802e65e:	697b      	ldr	r3, [r7, #20]
 802e660:	4413      	add	r3, r2
 802e662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e666:	691b      	ldr	r3, [r3, #16]
 802e668:	693a      	ldr	r2, [r7, #16]
 802e66a:	0151      	lsls	r1, r2, #5
 802e66c:	697a      	ldr	r2, [r7, #20]
 802e66e:	440a      	add	r2, r1
 802e670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802e67a:	693b      	ldr	r3, [r7, #16]
 802e67c:	015a      	lsls	r2, r3, #5
 802e67e:	697b      	ldr	r3, [r7, #20]
 802e680:	4413      	add	r3, r2
 802e682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e686:	691a      	ldr	r2, [r3, #16]
 802e688:	68bb      	ldr	r3, [r7, #8]
 802e68a:	69db      	ldr	r3, [r3, #28]
 802e68c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802e690:	6939      	ldr	r1, [r7, #16]
 802e692:	0148      	lsls	r0, r1, #5
 802e694:	6979      	ldr	r1, [r7, #20]
 802e696:	4401      	add	r1, r0
 802e698:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802e69c:	4313      	orrs	r3, r2
 802e69e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802e6a0:	79fb      	ldrb	r3, [r7, #7]
 802e6a2:	2b01      	cmp	r3, #1
 802e6a4:	d10d      	bne.n	802e6c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802e6a6:	68bb      	ldr	r3, [r7, #8]
 802e6a8:	691b      	ldr	r3, [r3, #16]
 802e6aa:	2b00      	cmp	r3, #0
 802e6ac:	d009      	beq.n	802e6c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802e6ae:	68bb      	ldr	r3, [r7, #8]
 802e6b0:	6919      	ldr	r1, [r3, #16]
 802e6b2:	693b      	ldr	r3, [r7, #16]
 802e6b4:	015a      	lsls	r2, r3, #5
 802e6b6:	697b      	ldr	r3, [r7, #20]
 802e6b8:	4413      	add	r3, r2
 802e6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e6be:	460a      	mov	r2, r1
 802e6c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802e6c2:	693b      	ldr	r3, [r7, #16]
 802e6c4:	015a      	lsls	r2, r3, #5
 802e6c6:	697b      	ldr	r3, [r7, #20]
 802e6c8:	4413      	add	r3, r2
 802e6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e6ce:	681b      	ldr	r3, [r3, #0]
 802e6d0:	693a      	ldr	r2, [r7, #16]
 802e6d2:	0151      	lsls	r1, r2, #5
 802e6d4:	697a      	ldr	r2, [r7, #20]
 802e6d6:	440a      	add	r2, r1
 802e6d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e6dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802e6e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e6e2:	2300      	movs	r3, #0
}
 802e6e4:	4618      	mov	r0, r3
 802e6e6:	371c      	adds	r7, #28
 802e6e8:	46bd      	mov	sp, r7
 802e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6ee:	4770      	bx	lr

0802e6f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e6f0:	b480      	push	{r7}
 802e6f2:	b087      	sub	sp, #28
 802e6f4:	af00      	add	r7, sp, #0
 802e6f6:	6078      	str	r0, [r7, #4]
 802e6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802e6fa:	2300      	movs	r3, #0
 802e6fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802e6fe:	2300      	movs	r3, #0
 802e700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e702:	687b      	ldr	r3, [r7, #4]
 802e704:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802e706:	683b      	ldr	r3, [r7, #0]
 802e708:	785b      	ldrb	r3, [r3, #1]
 802e70a:	2b01      	cmp	r3, #1
 802e70c:	d14a      	bne.n	802e7a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802e70e:	683b      	ldr	r3, [r7, #0]
 802e710:	781b      	ldrb	r3, [r3, #0]
 802e712:	015a      	lsls	r2, r3, #5
 802e714:	693b      	ldr	r3, [r7, #16]
 802e716:	4413      	add	r3, r2
 802e718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e71c:	681b      	ldr	r3, [r3, #0]
 802e71e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e726:	f040 8086 	bne.w	802e836 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 802e72a:	683b      	ldr	r3, [r7, #0]
 802e72c:	781b      	ldrb	r3, [r3, #0]
 802e72e:	015a      	lsls	r2, r3, #5
 802e730:	693b      	ldr	r3, [r7, #16]
 802e732:	4413      	add	r3, r2
 802e734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e738:	681b      	ldr	r3, [r3, #0]
 802e73a:	683a      	ldr	r2, [r7, #0]
 802e73c:	7812      	ldrb	r2, [r2, #0]
 802e73e:	0151      	lsls	r1, r2, #5
 802e740:	693a      	ldr	r2, [r7, #16]
 802e742:	440a      	add	r2, r1
 802e744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e748:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802e74c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802e74e:	683b      	ldr	r3, [r7, #0]
 802e750:	781b      	ldrb	r3, [r3, #0]
 802e752:	015a      	lsls	r2, r3, #5
 802e754:	693b      	ldr	r3, [r7, #16]
 802e756:	4413      	add	r3, r2
 802e758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e75c:	681b      	ldr	r3, [r3, #0]
 802e75e:	683a      	ldr	r2, [r7, #0]
 802e760:	7812      	ldrb	r2, [r2, #0]
 802e762:	0151      	lsls	r1, r2, #5
 802e764:	693a      	ldr	r2, [r7, #16]
 802e766:	440a      	add	r2, r1
 802e768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e76c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e770:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802e772:	68fb      	ldr	r3, [r7, #12]
 802e774:	3301      	adds	r3, #1
 802e776:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802e778:	68fb      	ldr	r3, [r7, #12]
 802e77a:	f242 7210 	movw	r2, #10000	; 0x2710
 802e77e:	4293      	cmp	r3, r2
 802e780:	d902      	bls.n	802e788 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 802e782:	2301      	movs	r3, #1
 802e784:	75fb      	strb	r3, [r7, #23]
          break;
 802e786:	e056      	b.n	802e836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 802e788:	683b      	ldr	r3, [r7, #0]
 802e78a:	781b      	ldrb	r3, [r3, #0]
 802e78c:	015a      	lsls	r2, r3, #5
 802e78e:	693b      	ldr	r3, [r7, #16]
 802e790:	4413      	add	r3, r2
 802e792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e796:	681b      	ldr	r3, [r3, #0]
 802e798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e7a0:	d0e7      	beq.n	802e772 <USB_EPStopXfer+0x82>
 802e7a2:	e048      	b.n	802e836 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802e7a4:	683b      	ldr	r3, [r7, #0]
 802e7a6:	781b      	ldrb	r3, [r3, #0]
 802e7a8:	015a      	lsls	r2, r3, #5
 802e7aa:	693b      	ldr	r3, [r7, #16]
 802e7ac:	4413      	add	r3, r2
 802e7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e7b2:	681b      	ldr	r3, [r3, #0]
 802e7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e7bc:	d13b      	bne.n	802e836 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802e7be:	683b      	ldr	r3, [r7, #0]
 802e7c0:	781b      	ldrb	r3, [r3, #0]
 802e7c2:	015a      	lsls	r2, r3, #5
 802e7c4:	693b      	ldr	r3, [r7, #16]
 802e7c6:	4413      	add	r3, r2
 802e7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e7cc:	681b      	ldr	r3, [r3, #0]
 802e7ce:	683a      	ldr	r2, [r7, #0]
 802e7d0:	7812      	ldrb	r2, [r2, #0]
 802e7d2:	0151      	lsls	r1, r2, #5
 802e7d4:	693a      	ldr	r2, [r7, #16]
 802e7d6:	440a      	add	r2, r1
 802e7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e7dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802e7e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802e7e2:	683b      	ldr	r3, [r7, #0]
 802e7e4:	781b      	ldrb	r3, [r3, #0]
 802e7e6:	015a      	lsls	r2, r3, #5
 802e7e8:	693b      	ldr	r3, [r7, #16]
 802e7ea:	4413      	add	r3, r2
 802e7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e7f0:	681b      	ldr	r3, [r3, #0]
 802e7f2:	683a      	ldr	r2, [r7, #0]
 802e7f4:	7812      	ldrb	r2, [r2, #0]
 802e7f6:	0151      	lsls	r1, r2, #5
 802e7f8:	693a      	ldr	r2, [r7, #16]
 802e7fa:	440a      	add	r2, r1
 802e7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e804:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802e806:	68fb      	ldr	r3, [r7, #12]
 802e808:	3301      	adds	r3, #1
 802e80a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802e80c:	68fb      	ldr	r3, [r7, #12]
 802e80e:	f242 7210 	movw	r2, #10000	; 0x2710
 802e812:	4293      	cmp	r3, r2
 802e814:	d902      	bls.n	802e81c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 802e816:	2301      	movs	r3, #1
 802e818:	75fb      	strb	r3, [r7, #23]
          break;
 802e81a:	e00c      	b.n	802e836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 802e81c:	683b      	ldr	r3, [r7, #0]
 802e81e:	781b      	ldrb	r3, [r3, #0]
 802e820:	015a      	lsls	r2, r3, #5
 802e822:	693b      	ldr	r3, [r7, #16]
 802e824:	4413      	add	r3, r2
 802e826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e82a:	681b      	ldr	r3, [r3, #0]
 802e82c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e834:	d0e7      	beq.n	802e806 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 802e836:	7dfb      	ldrb	r3, [r7, #23]
}
 802e838:	4618      	mov	r0, r3
 802e83a:	371c      	adds	r7, #28
 802e83c:	46bd      	mov	sp, r7
 802e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e842:	4770      	bx	lr

0802e844 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802e844:	b480      	push	{r7}
 802e846:	b089      	sub	sp, #36	; 0x24
 802e848:	af00      	add	r7, sp, #0
 802e84a:	60f8      	str	r0, [r7, #12]
 802e84c:	60b9      	str	r1, [r7, #8]
 802e84e:	4611      	mov	r1, r2
 802e850:	461a      	mov	r2, r3
 802e852:	460b      	mov	r3, r1
 802e854:	71fb      	strb	r3, [r7, #7]
 802e856:	4613      	mov	r3, r2
 802e858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e85a:	68fb      	ldr	r3, [r7, #12]
 802e85c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802e85e:	68bb      	ldr	r3, [r7, #8]
 802e860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802e862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802e866:	2b00      	cmp	r3, #0
 802e868:	d123      	bne.n	802e8b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802e86a:	88bb      	ldrh	r3, [r7, #4]
 802e86c:	3303      	adds	r3, #3
 802e86e:	089b      	lsrs	r3, r3, #2
 802e870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802e872:	2300      	movs	r3, #0
 802e874:	61bb      	str	r3, [r7, #24]
 802e876:	e018      	b.n	802e8aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802e878:	79fb      	ldrb	r3, [r7, #7]
 802e87a:	031a      	lsls	r2, r3, #12
 802e87c:	697b      	ldr	r3, [r7, #20]
 802e87e:	4413      	add	r3, r2
 802e880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e884:	461a      	mov	r2, r3
 802e886:	69fb      	ldr	r3, [r7, #28]
 802e888:	681b      	ldr	r3, [r3, #0]
 802e88a:	6013      	str	r3, [r2, #0]
      pSrc++;
 802e88c:	69fb      	ldr	r3, [r7, #28]
 802e88e:	3301      	adds	r3, #1
 802e890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e892:	69fb      	ldr	r3, [r7, #28]
 802e894:	3301      	adds	r3, #1
 802e896:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e898:	69fb      	ldr	r3, [r7, #28]
 802e89a:	3301      	adds	r3, #1
 802e89c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e89e:	69fb      	ldr	r3, [r7, #28]
 802e8a0:	3301      	adds	r3, #1
 802e8a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802e8a4:	69bb      	ldr	r3, [r7, #24]
 802e8a6:	3301      	adds	r3, #1
 802e8a8:	61bb      	str	r3, [r7, #24]
 802e8aa:	69ba      	ldr	r2, [r7, #24]
 802e8ac:	693b      	ldr	r3, [r7, #16]
 802e8ae:	429a      	cmp	r2, r3
 802e8b0:	d3e2      	bcc.n	802e878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802e8b2:	2300      	movs	r3, #0
}
 802e8b4:	4618      	mov	r0, r3
 802e8b6:	3724      	adds	r7, #36	; 0x24
 802e8b8:	46bd      	mov	sp, r7
 802e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8be:	4770      	bx	lr

0802e8c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802e8c0:	b480      	push	{r7}
 802e8c2:	b08b      	sub	sp, #44	; 0x2c
 802e8c4:	af00      	add	r7, sp, #0
 802e8c6:	60f8      	str	r0, [r7, #12]
 802e8c8:	60b9      	str	r1, [r7, #8]
 802e8ca:	4613      	mov	r3, r2
 802e8cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e8ce:	68fb      	ldr	r3, [r7, #12]
 802e8d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802e8d2:	68bb      	ldr	r3, [r7, #8]
 802e8d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802e8d6:	88fb      	ldrh	r3, [r7, #6]
 802e8d8:	089b      	lsrs	r3, r3, #2
 802e8da:	b29b      	uxth	r3, r3
 802e8dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802e8de:	88fb      	ldrh	r3, [r7, #6]
 802e8e0:	f003 0303 	and.w	r3, r3, #3
 802e8e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802e8e6:	2300      	movs	r3, #0
 802e8e8:	623b      	str	r3, [r7, #32]
 802e8ea:	e014      	b.n	802e916 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802e8ec:	69bb      	ldr	r3, [r7, #24]
 802e8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e8f2:	681a      	ldr	r2, [r3, #0]
 802e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e8f6:	601a      	str	r2, [r3, #0]
    pDest++;
 802e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e8fa:	3301      	adds	r3, #1
 802e8fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e900:	3301      	adds	r3, #1
 802e902:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e906:	3301      	adds	r3, #1
 802e908:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e90c:	3301      	adds	r3, #1
 802e90e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802e910:	6a3b      	ldr	r3, [r7, #32]
 802e912:	3301      	adds	r3, #1
 802e914:	623b      	str	r3, [r7, #32]
 802e916:	6a3a      	ldr	r2, [r7, #32]
 802e918:	697b      	ldr	r3, [r7, #20]
 802e91a:	429a      	cmp	r2, r3
 802e91c:	d3e6      	bcc.n	802e8ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802e91e:	8bfb      	ldrh	r3, [r7, #30]
 802e920:	2b00      	cmp	r3, #0
 802e922:	d01e      	beq.n	802e962 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802e924:	2300      	movs	r3, #0
 802e926:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802e928:	69bb      	ldr	r3, [r7, #24]
 802e92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e92e:	461a      	mov	r2, r3
 802e930:	f107 0310 	add.w	r3, r7, #16
 802e934:	6812      	ldr	r2, [r2, #0]
 802e936:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802e938:	693a      	ldr	r2, [r7, #16]
 802e93a:	6a3b      	ldr	r3, [r7, #32]
 802e93c:	b2db      	uxtb	r3, r3
 802e93e:	00db      	lsls	r3, r3, #3
 802e940:	fa22 f303 	lsr.w	r3, r2, r3
 802e944:	b2da      	uxtb	r2, r3
 802e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e948:	701a      	strb	r2, [r3, #0]
      i++;
 802e94a:	6a3b      	ldr	r3, [r7, #32]
 802e94c:	3301      	adds	r3, #1
 802e94e:	623b      	str	r3, [r7, #32]
      pDest++;
 802e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e952:	3301      	adds	r3, #1
 802e954:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802e956:	8bfb      	ldrh	r3, [r7, #30]
 802e958:	3b01      	subs	r3, #1
 802e95a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802e95c:	8bfb      	ldrh	r3, [r7, #30]
 802e95e:	2b00      	cmp	r3, #0
 802e960:	d1ea      	bne.n	802e938 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802e964:	4618      	mov	r0, r3
 802e966:	372c      	adds	r7, #44	; 0x2c
 802e968:	46bd      	mov	sp, r7
 802e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e96e:	4770      	bx	lr

0802e970 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e970:	b480      	push	{r7}
 802e972:	b085      	sub	sp, #20
 802e974:	af00      	add	r7, sp, #0
 802e976:	6078      	str	r0, [r7, #4]
 802e978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e97a:	687b      	ldr	r3, [r7, #4]
 802e97c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e97e:	683b      	ldr	r3, [r7, #0]
 802e980:	781b      	ldrb	r3, [r3, #0]
 802e982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e984:	683b      	ldr	r3, [r7, #0]
 802e986:	785b      	ldrb	r3, [r3, #1]
 802e988:	2b01      	cmp	r3, #1
 802e98a:	d12c      	bne.n	802e9e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e98c:	68bb      	ldr	r3, [r7, #8]
 802e98e:	015a      	lsls	r2, r3, #5
 802e990:	68fb      	ldr	r3, [r7, #12]
 802e992:	4413      	add	r3, r2
 802e994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e998:	681b      	ldr	r3, [r3, #0]
 802e99a:	2b00      	cmp	r3, #0
 802e99c:	db12      	blt.n	802e9c4 <USB_EPSetStall+0x54>
 802e99e:	68bb      	ldr	r3, [r7, #8]
 802e9a0:	2b00      	cmp	r3, #0
 802e9a2:	d00f      	beq.n	802e9c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802e9a4:	68bb      	ldr	r3, [r7, #8]
 802e9a6:	015a      	lsls	r2, r3, #5
 802e9a8:	68fb      	ldr	r3, [r7, #12]
 802e9aa:	4413      	add	r3, r2
 802e9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e9b0:	681b      	ldr	r3, [r3, #0]
 802e9b2:	68ba      	ldr	r2, [r7, #8]
 802e9b4:	0151      	lsls	r1, r2, #5
 802e9b6:	68fa      	ldr	r2, [r7, #12]
 802e9b8:	440a      	add	r2, r1
 802e9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e9be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e9c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802e9c4:	68bb      	ldr	r3, [r7, #8]
 802e9c6:	015a      	lsls	r2, r3, #5
 802e9c8:	68fb      	ldr	r3, [r7, #12]
 802e9ca:	4413      	add	r3, r2
 802e9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e9d0:	681b      	ldr	r3, [r3, #0]
 802e9d2:	68ba      	ldr	r2, [r7, #8]
 802e9d4:	0151      	lsls	r1, r2, #5
 802e9d6:	68fa      	ldr	r2, [r7, #12]
 802e9d8:	440a      	add	r2, r1
 802e9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e9de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e9e2:	6013      	str	r3, [r2, #0]
 802e9e4:	e02b      	b.n	802ea3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e9e6:	68bb      	ldr	r3, [r7, #8]
 802e9e8:	015a      	lsls	r2, r3, #5
 802e9ea:	68fb      	ldr	r3, [r7, #12]
 802e9ec:	4413      	add	r3, r2
 802e9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e9f2:	681b      	ldr	r3, [r3, #0]
 802e9f4:	2b00      	cmp	r3, #0
 802e9f6:	db12      	blt.n	802ea1e <USB_EPSetStall+0xae>
 802e9f8:	68bb      	ldr	r3, [r7, #8]
 802e9fa:	2b00      	cmp	r3, #0
 802e9fc:	d00f      	beq.n	802ea1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802e9fe:	68bb      	ldr	r3, [r7, #8]
 802ea00:	015a      	lsls	r2, r3, #5
 802ea02:	68fb      	ldr	r3, [r7, #12]
 802ea04:	4413      	add	r3, r2
 802ea06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ea0a:	681b      	ldr	r3, [r3, #0]
 802ea0c:	68ba      	ldr	r2, [r7, #8]
 802ea0e:	0151      	lsls	r1, r2, #5
 802ea10:	68fa      	ldr	r2, [r7, #12]
 802ea12:	440a      	add	r2, r1
 802ea14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ea18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ea1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802ea1e:	68bb      	ldr	r3, [r7, #8]
 802ea20:	015a      	lsls	r2, r3, #5
 802ea22:	68fb      	ldr	r3, [r7, #12]
 802ea24:	4413      	add	r3, r2
 802ea26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ea2a:	681b      	ldr	r3, [r3, #0]
 802ea2c:	68ba      	ldr	r2, [r7, #8]
 802ea2e:	0151      	lsls	r1, r2, #5
 802ea30:	68fa      	ldr	r2, [r7, #12]
 802ea32:	440a      	add	r2, r1
 802ea34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ea38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802ea3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802ea3e:	2300      	movs	r3, #0
}
 802ea40:	4618      	mov	r0, r3
 802ea42:	3714      	adds	r7, #20
 802ea44:	46bd      	mov	sp, r7
 802ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea4a:	4770      	bx	lr

0802ea4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802ea4c:	b480      	push	{r7}
 802ea4e:	b085      	sub	sp, #20
 802ea50:	af00      	add	r7, sp, #0
 802ea52:	6078      	str	r0, [r7, #4]
 802ea54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ea56:	687b      	ldr	r3, [r7, #4]
 802ea58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ea5a:	683b      	ldr	r3, [r7, #0]
 802ea5c:	781b      	ldrb	r3, [r3, #0]
 802ea5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802ea60:	683b      	ldr	r3, [r7, #0]
 802ea62:	785b      	ldrb	r3, [r3, #1]
 802ea64:	2b01      	cmp	r3, #1
 802ea66:	d128      	bne.n	802eaba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802ea68:	68bb      	ldr	r3, [r7, #8]
 802ea6a:	015a      	lsls	r2, r3, #5
 802ea6c:	68fb      	ldr	r3, [r7, #12]
 802ea6e:	4413      	add	r3, r2
 802ea70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ea74:	681b      	ldr	r3, [r3, #0]
 802ea76:	68ba      	ldr	r2, [r7, #8]
 802ea78:	0151      	lsls	r1, r2, #5
 802ea7a:	68fa      	ldr	r2, [r7, #12]
 802ea7c:	440a      	add	r2, r1
 802ea7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ea82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ea86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802ea88:	683b      	ldr	r3, [r7, #0]
 802ea8a:	791b      	ldrb	r3, [r3, #4]
 802ea8c:	2b03      	cmp	r3, #3
 802ea8e:	d003      	beq.n	802ea98 <USB_EPClearStall+0x4c>
 802ea90:	683b      	ldr	r3, [r7, #0]
 802ea92:	791b      	ldrb	r3, [r3, #4]
 802ea94:	2b02      	cmp	r3, #2
 802ea96:	d138      	bne.n	802eb0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802ea98:	68bb      	ldr	r3, [r7, #8]
 802ea9a:	015a      	lsls	r2, r3, #5
 802ea9c:	68fb      	ldr	r3, [r7, #12]
 802ea9e:	4413      	add	r3, r2
 802eaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802eaa4:	681b      	ldr	r3, [r3, #0]
 802eaa6:	68ba      	ldr	r2, [r7, #8]
 802eaa8:	0151      	lsls	r1, r2, #5
 802eaaa:	68fa      	ldr	r2, [r7, #12]
 802eaac:	440a      	add	r2, r1
 802eaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802eab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802eab6:	6013      	str	r3, [r2, #0]
 802eab8:	e027      	b.n	802eb0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802eaba:	68bb      	ldr	r3, [r7, #8]
 802eabc:	015a      	lsls	r2, r3, #5
 802eabe:	68fb      	ldr	r3, [r7, #12]
 802eac0:	4413      	add	r3, r2
 802eac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802eac6:	681b      	ldr	r3, [r3, #0]
 802eac8:	68ba      	ldr	r2, [r7, #8]
 802eaca:	0151      	lsls	r1, r2, #5
 802eacc:	68fa      	ldr	r2, [r7, #12]
 802eace:	440a      	add	r2, r1
 802ead0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ead4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802ead8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802eada:	683b      	ldr	r3, [r7, #0]
 802eadc:	791b      	ldrb	r3, [r3, #4]
 802eade:	2b03      	cmp	r3, #3
 802eae0:	d003      	beq.n	802eaea <USB_EPClearStall+0x9e>
 802eae2:	683b      	ldr	r3, [r7, #0]
 802eae4:	791b      	ldrb	r3, [r3, #4]
 802eae6:	2b02      	cmp	r3, #2
 802eae8:	d10f      	bne.n	802eb0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802eaea:	68bb      	ldr	r3, [r7, #8]
 802eaec:	015a      	lsls	r2, r3, #5
 802eaee:	68fb      	ldr	r3, [r7, #12]
 802eaf0:	4413      	add	r3, r2
 802eaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802eaf6:	681b      	ldr	r3, [r3, #0]
 802eaf8:	68ba      	ldr	r2, [r7, #8]
 802eafa:	0151      	lsls	r1, r2, #5
 802eafc:	68fa      	ldr	r2, [r7, #12]
 802eafe:	440a      	add	r2, r1
 802eb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802eb04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802eb08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802eb0a:	2300      	movs	r3, #0
}
 802eb0c:	4618      	mov	r0, r3
 802eb0e:	3714      	adds	r7, #20
 802eb10:	46bd      	mov	sp, r7
 802eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eb16:	4770      	bx	lr

0802eb18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802eb18:	b480      	push	{r7}
 802eb1a:	b085      	sub	sp, #20
 802eb1c:	af00      	add	r7, sp, #0
 802eb1e:	6078      	str	r0, [r7, #4]
 802eb20:	460b      	mov	r3, r1
 802eb22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802eb24:	687b      	ldr	r3, [r7, #4]
 802eb26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802eb28:	68fb      	ldr	r3, [r7, #12]
 802eb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802eb2e:	681b      	ldr	r3, [r3, #0]
 802eb30:	68fa      	ldr	r2, [r7, #12]
 802eb32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802eb36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802eb3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802eb3c:	68fb      	ldr	r3, [r7, #12]
 802eb3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802eb42:	681a      	ldr	r2, [r3, #0]
 802eb44:	78fb      	ldrb	r3, [r7, #3]
 802eb46:	011b      	lsls	r3, r3, #4
 802eb48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802eb4c:	68f9      	ldr	r1, [r7, #12]
 802eb4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802eb52:	4313      	orrs	r3, r2
 802eb54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802eb56:	2300      	movs	r3, #0
}
 802eb58:	4618      	mov	r0, r3
 802eb5a:	3714      	adds	r7, #20
 802eb5c:	46bd      	mov	sp, r7
 802eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eb62:	4770      	bx	lr

0802eb64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802eb64:	b480      	push	{r7}
 802eb66:	b085      	sub	sp, #20
 802eb68:	af00      	add	r7, sp, #0
 802eb6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802eb70:	68fb      	ldr	r3, [r7, #12]
 802eb72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802eb76:	681b      	ldr	r3, [r3, #0]
 802eb78:	68fa      	ldr	r2, [r7, #12]
 802eb7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802eb7e:	f023 0303 	bic.w	r3, r3, #3
 802eb82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802eb84:	68fb      	ldr	r3, [r7, #12]
 802eb86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802eb8a:	685b      	ldr	r3, [r3, #4]
 802eb8c:	68fa      	ldr	r2, [r7, #12]
 802eb8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802eb92:	f023 0302 	bic.w	r3, r3, #2
 802eb96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802eb98:	2300      	movs	r3, #0
}
 802eb9a:	4618      	mov	r0, r3
 802eb9c:	3714      	adds	r7, #20
 802eb9e:	46bd      	mov	sp, r7
 802eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eba4:	4770      	bx	lr

0802eba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802eba6:	b480      	push	{r7}
 802eba8:	b085      	sub	sp, #20
 802ebaa:	af00      	add	r7, sp, #0
 802ebac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ebae:	687b      	ldr	r3, [r7, #4]
 802ebb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802ebb2:	68fb      	ldr	r3, [r7, #12]
 802ebb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802ebb8:	681b      	ldr	r3, [r3, #0]
 802ebba:	68fa      	ldr	r2, [r7, #12]
 802ebbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802ebc0:	f023 0303 	bic.w	r3, r3, #3
 802ebc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802ebc6:	68fb      	ldr	r3, [r7, #12]
 802ebc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ebcc:	685b      	ldr	r3, [r3, #4]
 802ebce:	68fa      	ldr	r2, [r7, #12]
 802ebd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ebd4:	f043 0302 	orr.w	r3, r3, #2
 802ebd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802ebda:	2300      	movs	r3, #0
}
 802ebdc:	4618      	mov	r0, r3
 802ebde:	3714      	adds	r7, #20
 802ebe0:	46bd      	mov	sp, r7
 802ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ebe6:	4770      	bx	lr

0802ebe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802ebe8:	b480      	push	{r7}
 802ebea:	b085      	sub	sp, #20
 802ebec:	af00      	add	r7, sp, #0
 802ebee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802ebf0:	687b      	ldr	r3, [r7, #4]
 802ebf2:	695b      	ldr	r3, [r3, #20]
 802ebf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802ebf6:	687b      	ldr	r3, [r7, #4]
 802ebf8:	699b      	ldr	r3, [r3, #24]
 802ebfa:	68fa      	ldr	r2, [r7, #12]
 802ebfc:	4013      	ands	r3, r2
 802ebfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802ec00:	68fb      	ldr	r3, [r7, #12]
}
 802ec02:	4618      	mov	r0, r3
 802ec04:	3714      	adds	r7, #20
 802ec06:	46bd      	mov	sp, r7
 802ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec0c:	4770      	bx	lr

0802ec0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ec0e:	b480      	push	{r7}
 802ec10:	b085      	sub	sp, #20
 802ec12:	af00      	add	r7, sp, #0
 802ec14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802ec1a:	68fb      	ldr	r3, [r7, #12]
 802ec1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ec20:	699b      	ldr	r3, [r3, #24]
 802ec22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802ec24:	68fb      	ldr	r3, [r7, #12]
 802ec26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ec2a:	69db      	ldr	r3, [r3, #28]
 802ec2c:	68ba      	ldr	r2, [r7, #8]
 802ec2e:	4013      	ands	r3, r2
 802ec30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802ec32:	68bb      	ldr	r3, [r7, #8]
 802ec34:	0c1b      	lsrs	r3, r3, #16
}
 802ec36:	4618      	mov	r0, r3
 802ec38:	3714      	adds	r7, #20
 802ec3a:	46bd      	mov	sp, r7
 802ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec40:	4770      	bx	lr

0802ec42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ec42:	b480      	push	{r7}
 802ec44:	b085      	sub	sp, #20
 802ec46:	af00      	add	r7, sp, #0
 802ec48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ec4a:	687b      	ldr	r3, [r7, #4]
 802ec4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802ec4e:	68fb      	ldr	r3, [r7, #12]
 802ec50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ec54:	699b      	ldr	r3, [r3, #24]
 802ec56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802ec58:	68fb      	ldr	r3, [r7, #12]
 802ec5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ec5e:	69db      	ldr	r3, [r3, #28]
 802ec60:	68ba      	ldr	r2, [r7, #8]
 802ec62:	4013      	ands	r3, r2
 802ec64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802ec66:	68bb      	ldr	r3, [r7, #8]
 802ec68:	b29b      	uxth	r3, r3
}
 802ec6a:	4618      	mov	r0, r3
 802ec6c:	3714      	adds	r7, #20
 802ec6e:	46bd      	mov	sp, r7
 802ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ec74:	4770      	bx	lr

0802ec76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802ec76:	b480      	push	{r7}
 802ec78:	b085      	sub	sp, #20
 802ec7a:	af00      	add	r7, sp, #0
 802ec7c:	6078      	str	r0, [r7, #4]
 802ec7e:	460b      	mov	r3, r1
 802ec80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ec82:	687b      	ldr	r3, [r7, #4]
 802ec84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802ec86:	78fb      	ldrb	r3, [r7, #3]
 802ec88:	015a      	lsls	r2, r3, #5
 802ec8a:	68fb      	ldr	r3, [r7, #12]
 802ec8c:	4413      	add	r3, r2
 802ec8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ec92:	689b      	ldr	r3, [r3, #8]
 802ec94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802ec96:	68fb      	ldr	r3, [r7, #12]
 802ec98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ec9c:	695b      	ldr	r3, [r3, #20]
 802ec9e:	68ba      	ldr	r2, [r7, #8]
 802eca0:	4013      	ands	r3, r2
 802eca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802eca4:	68bb      	ldr	r3, [r7, #8]
}
 802eca6:	4618      	mov	r0, r3
 802eca8:	3714      	adds	r7, #20
 802ecaa:	46bd      	mov	sp, r7
 802ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ecb0:	4770      	bx	lr

0802ecb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802ecb2:	b480      	push	{r7}
 802ecb4:	b087      	sub	sp, #28
 802ecb6:	af00      	add	r7, sp, #0
 802ecb8:	6078      	str	r0, [r7, #4]
 802ecba:	460b      	mov	r3, r1
 802ecbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ecbe:	687b      	ldr	r3, [r7, #4]
 802ecc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802ecc2:	697b      	ldr	r3, [r7, #20]
 802ecc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ecc8:	691b      	ldr	r3, [r3, #16]
 802ecca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802eccc:	697b      	ldr	r3, [r7, #20]
 802ecce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ecd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ecd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802ecd6:	78fb      	ldrb	r3, [r7, #3]
 802ecd8:	f003 030f 	and.w	r3, r3, #15
 802ecdc:	68fa      	ldr	r2, [r7, #12]
 802ecde:	fa22 f303 	lsr.w	r3, r2, r3
 802ece2:	01db      	lsls	r3, r3, #7
 802ece4:	b2db      	uxtb	r3, r3
 802ece6:	693a      	ldr	r2, [r7, #16]
 802ece8:	4313      	orrs	r3, r2
 802ecea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802ecec:	78fb      	ldrb	r3, [r7, #3]
 802ecee:	015a      	lsls	r2, r3, #5
 802ecf0:	697b      	ldr	r3, [r7, #20]
 802ecf2:	4413      	add	r3, r2
 802ecf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ecf8:	689b      	ldr	r3, [r3, #8]
 802ecfa:	693a      	ldr	r2, [r7, #16]
 802ecfc:	4013      	ands	r3, r2
 802ecfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802ed00:	68bb      	ldr	r3, [r7, #8]
}
 802ed02:	4618      	mov	r0, r3
 802ed04:	371c      	adds	r7, #28
 802ed06:	46bd      	mov	sp, r7
 802ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed0c:	4770      	bx	lr

0802ed0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802ed0e:	b480      	push	{r7}
 802ed10:	b083      	sub	sp, #12
 802ed12:	af00      	add	r7, sp, #0
 802ed14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802ed16:	687b      	ldr	r3, [r7, #4]
 802ed18:	695b      	ldr	r3, [r3, #20]
 802ed1a:	f003 0301 	and.w	r3, r3, #1
}
 802ed1e:	4618      	mov	r0, r3
 802ed20:	370c      	adds	r7, #12
 802ed22:	46bd      	mov	sp, r7
 802ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed28:	4770      	bx	lr

0802ed2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802ed2a:	b480      	push	{r7}
 802ed2c:	b085      	sub	sp, #20
 802ed2e:	af00      	add	r7, sp, #0
 802ed30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ed32:	687b      	ldr	r3, [r7, #4]
 802ed34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802ed36:	68fb      	ldr	r3, [r7, #12]
 802ed38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ed3c:	681b      	ldr	r3, [r3, #0]
 802ed3e:	68fa      	ldr	r2, [r7, #12]
 802ed40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ed44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802ed48:	f023 0307 	bic.w	r3, r3, #7
 802ed4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802ed4e:	68fb      	ldr	r3, [r7, #12]
 802ed50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ed54:	685b      	ldr	r3, [r3, #4]
 802ed56:	68fa      	ldr	r2, [r7, #12]
 802ed58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ed5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802ed60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802ed62:	2300      	movs	r3, #0
}
 802ed64:	4618      	mov	r0, r3
 802ed66:	3714      	adds	r7, #20
 802ed68:	46bd      	mov	sp, r7
 802ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed6e:	4770      	bx	lr

0802ed70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802ed70:	b480      	push	{r7}
 802ed72:	b087      	sub	sp, #28
 802ed74:	af00      	add	r7, sp, #0
 802ed76:	60f8      	str	r0, [r7, #12]
 802ed78:	460b      	mov	r3, r1
 802ed7a:	607a      	str	r2, [r7, #4]
 802ed7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ed7e:	68fb      	ldr	r3, [r7, #12]
 802ed80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802ed82:	68fb      	ldr	r3, [r7, #12]
 802ed84:	333c      	adds	r3, #60	; 0x3c
 802ed86:	3304      	adds	r3, #4
 802ed88:	681b      	ldr	r3, [r3, #0]
 802ed8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802ed8c:	693b      	ldr	r3, [r7, #16]
 802ed8e:	4a26      	ldr	r2, [pc, #152]	; (802ee28 <USB_EP0_OutStart+0xb8>)
 802ed90:	4293      	cmp	r3, r2
 802ed92:	d90a      	bls.n	802edaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802ed94:	697b      	ldr	r3, [r7, #20]
 802ed96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ed9a:	681b      	ldr	r3, [r3, #0]
 802ed9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802eda0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802eda4:	d101      	bne.n	802edaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802eda6:	2300      	movs	r3, #0
 802eda8:	e037      	b.n	802ee1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802edaa:	697b      	ldr	r3, [r7, #20]
 802edac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802edb0:	461a      	mov	r2, r3
 802edb2:	2300      	movs	r3, #0
 802edb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802edb6:	697b      	ldr	r3, [r7, #20]
 802edb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802edbc:	691b      	ldr	r3, [r3, #16]
 802edbe:	697a      	ldr	r2, [r7, #20]
 802edc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802edc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802edc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802edca:	697b      	ldr	r3, [r7, #20]
 802edcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802edd0:	691b      	ldr	r3, [r3, #16]
 802edd2:	697a      	ldr	r2, [r7, #20]
 802edd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802edd8:	f043 0318 	orr.w	r3, r3, #24
 802eddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802edde:	697b      	ldr	r3, [r7, #20]
 802ede0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ede4:	691b      	ldr	r3, [r3, #16]
 802ede6:	697a      	ldr	r2, [r7, #20]
 802ede8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802edec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802edf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802edf2:	7afb      	ldrb	r3, [r7, #11]
 802edf4:	2b01      	cmp	r3, #1
 802edf6:	d10f      	bne.n	802ee18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802edf8:	697b      	ldr	r3, [r7, #20]
 802edfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802edfe:	461a      	mov	r2, r3
 802ee00:	687b      	ldr	r3, [r7, #4]
 802ee02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802ee04:	697b      	ldr	r3, [r7, #20]
 802ee06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ee0a:	681b      	ldr	r3, [r3, #0]
 802ee0c:	697a      	ldr	r2, [r7, #20]
 802ee0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802ee12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802ee16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802ee18:	2300      	movs	r3, #0
}
 802ee1a:	4618      	mov	r0, r3
 802ee1c:	371c      	adds	r7, #28
 802ee1e:	46bd      	mov	sp, r7
 802ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee24:	4770      	bx	lr
 802ee26:	bf00      	nop
 802ee28:	4f54300a 	.word	0x4f54300a

0802ee2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802ee2c:	b480      	push	{r7}
 802ee2e:	b085      	sub	sp, #20
 802ee30:	af00      	add	r7, sp, #0
 802ee32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ee34:	2300      	movs	r3, #0
 802ee36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ee38:	68fb      	ldr	r3, [r7, #12]
 802ee3a:	3301      	adds	r3, #1
 802ee3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ee3e:	68fb      	ldr	r3, [r7, #12]
 802ee40:	4a13      	ldr	r2, [pc, #76]	; (802ee90 <USB_CoreReset+0x64>)
 802ee42:	4293      	cmp	r3, r2
 802ee44:	d901      	bls.n	802ee4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802ee46:	2303      	movs	r3, #3
 802ee48:	e01b      	b.n	802ee82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ee4a:	687b      	ldr	r3, [r7, #4]
 802ee4c:	691b      	ldr	r3, [r3, #16]
 802ee4e:	2b00      	cmp	r3, #0
 802ee50:	daf2      	bge.n	802ee38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802ee52:	2300      	movs	r3, #0
 802ee54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802ee56:	687b      	ldr	r3, [r7, #4]
 802ee58:	691b      	ldr	r3, [r3, #16]
 802ee5a:	f043 0201 	orr.w	r2, r3, #1
 802ee5e:	687b      	ldr	r3, [r7, #4]
 802ee60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ee62:	68fb      	ldr	r3, [r7, #12]
 802ee64:	3301      	adds	r3, #1
 802ee66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ee68:	68fb      	ldr	r3, [r7, #12]
 802ee6a:	4a09      	ldr	r2, [pc, #36]	; (802ee90 <USB_CoreReset+0x64>)
 802ee6c:	4293      	cmp	r3, r2
 802ee6e:	d901      	bls.n	802ee74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802ee70:	2303      	movs	r3, #3
 802ee72:	e006      	b.n	802ee82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802ee74:	687b      	ldr	r3, [r7, #4]
 802ee76:	691b      	ldr	r3, [r3, #16]
 802ee78:	f003 0301 	and.w	r3, r3, #1
 802ee7c:	2b01      	cmp	r3, #1
 802ee7e:	d0f0      	beq.n	802ee62 <USB_CoreReset+0x36>

  return HAL_OK;
 802ee80:	2300      	movs	r3, #0
}
 802ee82:	4618      	mov	r0, r3
 802ee84:	3714      	adds	r7, #20
 802ee86:	46bd      	mov	sp, r7
 802ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee8c:	4770      	bx	lr
 802ee8e:	bf00      	nop
 802ee90:	00030d40 	.word	0x00030d40

0802ee94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802ee94:	b580      	push	{r7, lr}
 802ee96:	b084      	sub	sp, #16
 802ee98:	af00      	add	r7, sp, #0
 802ee9a:	6078      	str	r0, [r7, #4]
 802ee9c:	460b      	mov	r3, r1
 802ee9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802eea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802eea4:	f002 fef6 	bl	8031c94 <USBD_static_malloc>
 802eea8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 802eeaa:	68fb      	ldr	r3, [r7, #12]
 802eeac:	2b00      	cmp	r3, #0
 802eeae:	d109      	bne.n	802eec4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802eeb0:	687b      	ldr	r3, [r7, #4]
 802eeb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eeb6:	687b      	ldr	r3, [r7, #4]
 802eeb8:	32b0      	adds	r2, #176	; 0xb0
 802eeba:	2100      	movs	r1, #0
 802eebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 802eec0:	2302      	movs	r3, #2
 802eec2:	e0d4      	b.n	802f06e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 802eec4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 802eec8:	2100      	movs	r1, #0
 802eeca:	68f8      	ldr	r0, [r7, #12]
 802eecc:	f003 f88b 	bl	8031fe6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 802eed0:	687b      	ldr	r3, [r7, #4]
 802eed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eed6:	687b      	ldr	r3, [r7, #4]
 802eed8:	32b0      	adds	r2, #176	; 0xb0
 802eeda:	68f9      	ldr	r1, [r7, #12]
 802eedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 802eee0:	687b      	ldr	r3, [r7, #4]
 802eee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eee6:	687b      	ldr	r3, [r7, #4]
 802eee8:	32b0      	adds	r2, #176	; 0xb0
 802eeea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802eeee:	687b      	ldr	r3, [r7, #4]
 802eef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	7c1b      	ldrb	r3, [r3, #16]
 802eef8:	2b00      	cmp	r3, #0
 802eefa:	d138      	bne.n	802ef6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802eefc:	4b5e      	ldr	r3, [pc, #376]	; (802f078 <USBD_CDC_Init+0x1e4>)
 802eefe:	7819      	ldrb	r1, [r3, #0]
 802ef00:	f44f 7300 	mov.w	r3, #512	; 0x200
 802ef04:	2202      	movs	r2, #2
 802ef06:	6878      	ldr	r0, [r7, #4]
 802ef08:	f002 fda1 	bl	8031a4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802ef0c:	4b5a      	ldr	r3, [pc, #360]	; (802f078 <USBD_CDC_Init+0x1e4>)
 802ef0e:	781b      	ldrb	r3, [r3, #0]
 802ef10:	f003 020f 	and.w	r2, r3, #15
 802ef14:	6879      	ldr	r1, [r7, #4]
 802ef16:	4613      	mov	r3, r2
 802ef18:	009b      	lsls	r3, r3, #2
 802ef1a:	4413      	add	r3, r2
 802ef1c:	009b      	lsls	r3, r3, #2
 802ef1e:	440b      	add	r3, r1
 802ef20:	3324      	adds	r3, #36	; 0x24
 802ef22:	2201      	movs	r2, #1
 802ef24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802ef26:	4b55      	ldr	r3, [pc, #340]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802ef28:	7819      	ldrb	r1, [r3, #0]
 802ef2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802ef2e:	2202      	movs	r2, #2
 802ef30:	6878      	ldr	r0, [r7, #4]
 802ef32:	f002 fd8c 	bl	8031a4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802ef36:	4b51      	ldr	r3, [pc, #324]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802ef38:	781b      	ldrb	r3, [r3, #0]
 802ef3a:	f003 020f 	and.w	r2, r3, #15
 802ef3e:	6879      	ldr	r1, [r7, #4]
 802ef40:	4613      	mov	r3, r2
 802ef42:	009b      	lsls	r3, r3, #2
 802ef44:	4413      	add	r3, r2
 802ef46:	009b      	lsls	r3, r3, #2
 802ef48:	440b      	add	r3, r1
 802ef4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802ef4e:	2201      	movs	r2, #1
 802ef50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802ef52:	4b4b      	ldr	r3, [pc, #300]	; (802f080 <USBD_CDC_Init+0x1ec>)
 802ef54:	781b      	ldrb	r3, [r3, #0]
 802ef56:	f003 020f 	and.w	r2, r3, #15
 802ef5a:	6879      	ldr	r1, [r7, #4]
 802ef5c:	4613      	mov	r3, r2
 802ef5e:	009b      	lsls	r3, r3, #2
 802ef60:	4413      	add	r3, r2
 802ef62:	009b      	lsls	r3, r3, #2
 802ef64:	440b      	add	r3, r1
 802ef66:	3326      	adds	r3, #38	; 0x26
 802ef68:	2210      	movs	r2, #16
 802ef6a:	801a      	strh	r2, [r3, #0]
 802ef6c:	e035      	b.n	802efda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802ef6e:	4b42      	ldr	r3, [pc, #264]	; (802f078 <USBD_CDC_Init+0x1e4>)
 802ef70:	7819      	ldrb	r1, [r3, #0]
 802ef72:	2340      	movs	r3, #64	; 0x40
 802ef74:	2202      	movs	r2, #2
 802ef76:	6878      	ldr	r0, [r7, #4]
 802ef78:	f002 fd69 	bl	8031a4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802ef7c:	4b3e      	ldr	r3, [pc, #248]	; (802f078 <USBD_CDC_Init+0x1e4>)
 802ef7e:	781b      	ldrb	r3, [r3, #0]
 802ef80:	f003 020f 	and.w	r2, r3, #15
 802ef84:	6879      	ldr	r1, [r7, #4]
 802ef86:	4613      	mov	r3, r2
 802ef88:	009b      	lsls	r3, r3, #2
 802ef8a:	4413      	add	r3, r2
 802ef8c:	009b      	lsls	r3, r3, #2
 802ef8e:	440b      	add	r3, r1
 802ef90:	3324      	adds	r3, #36	; 0x24
 802ef92:	2201      	movs	r2, #1
 802ef94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802ef96:	4b39      	ldr	r3, [pc, #228]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802ef98:	7819      	ldrb	r1, [r3, #0]
 802ef9a:	2340      	movs	r3, #64	; 0x40
 802ef9c:	2202      	movs	r2, #2
 802ef9e:	6878      	ldr	r0, [r7, #4]
 802efa0:	f002 fd55 	bl	8031a4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802efa4:	4b35      	ldr	r3, [pc, #212]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802efa6:	781b      	ldrb	r3, [r3, #0]
 802efa8:	f003 020f 	and.w	r2, r3, #15
 802efac:	6879      	ldr	r1, [r7, #4]
 802efae:	4613      	mov	r3, r2
 802efb0:	009b      	lsls	r3, r3, #2
 802efb2:	4413      	add	r3, r2
 802efb4:	009b      	lsls	r3, r3, #2
 802efb6:	440b      	add	r3, r1
 802efb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802efbc:	2201      	movs	r2, #1
 802efbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802efc0:	4b2f      	ldr	r3, [pc, #188]	; (802f080 <USBD_CDC_Init+0x1ec>)
 802efc2:	781b      	ldrb	r3, [r3, #0]
 802efc4:	f003 020f 	and.w	r2, r3, #15
 802efc8:	6879      	ldr	r1, [r7, #4]
 802efca:	4613      	mov	r3, r2
 802efcc:	009b      	lsls	r3, r3, #2
 802efce:	4413      	add	r3, r2
 802efd0:	009b      	lsls	r3, r3, #2
 802efd2:	440b      	add	r3, r1
 802efd4:	3326      	adds	r3, #38	; 0x26
 802efd6:	2210      	movs	r2, #16
 802efd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802efda:	4b29      	ldr	r3, [pc, #164]	; (802f080 <USBD_CDC_Init+0x1ec>)
 802efdc:	7819      	ldrb	r1, [r3, #0]
 802efde:	2308      	movs	r3, #8
 802efe0:	2203      	movs	r2, #3
 802efe2:	6878      	ldr	r0, [r7, #4]
 802efe4:	f002 fd33 	bl	8031a4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 802efe8:	4b25      	ldr	r3, [pc, #148]	; (802f080 <USBD_CDC_Init+0x1ec>)
 802efea:	781b      	ldrb	r3, [r3, #0]
 802efec:	f003 020f 	and.w	r2, r3, #15
 802eff0:	6879      	ldr	r1, [r7, #4]
 802eff2:	4613      	mov	r3, r2
 802eff4:	009b      	lsls	r3, r3, #2
 802eff6:	4413      	add	r3, r2
 802eff8:	009b      	lsls	r3, r3, #2
 802effa:	440b      	add	r3, r1
 802effc:	3324      	adds	r3, #36	; 0x24
 802effe:	2201      	movs	r2, #1
 802f000:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 802f002:	68fb      	ldr	r3, [r7, #12]
 802f004:	2200      	movs	r2, #0
 802f006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 802f00a:	687b      	ldr	r3, [r7, #4]
 802f00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f010:	687a      	ldr	r2, [r7, #4]
 802f012:	33b0      	adds	r3, #176	; 0xb0
 802f014:	009b      	lsls	r3, r3, #2
 802f016:	4413      	add	r3, r2
 802f018:	685b      	ldr	r3, [r3, #4]
 802f01a:	681b      	ldr	r3, [r3, #0]
 802f01c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802f01e:	68fb      	ldr	r3, [r7, #12]
 802f020:	2200      	movs	r2, #0
 802f022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 802f026:	68fb      	ldr	r3, [r7, #12]
 802f028:	2200      	movs	r2, #0
 802f02a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 802f02e:	68fb      	ldr	r3, [r7, #12]
 802f030:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 802f034:	2b00      	cmp	r3, #0
 802f036:	d101      	bne.n	802f03c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 802f038:	2302      	movs	r3, #2
 802f03a:	e018      	b.n	802f06e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f03c:	687b      	ldr	r3, [r7, #4]
 802f03e:	7c1b      	ldrb	r3, [r3, #16]
 802f040:	2b00      	cmp	r3, #0
 802f042:	d10a      	bne.n	802f05a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f044:	4b0d      	ldr	r3, [pc, #52]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802f046:	7819      	ldrb	r1, [r3, #0]
 802f048:	68fb      	ldr	r3, [r7, #12]
 802f04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f052:	6878      	ldr	r0, [r7, #4]
 802f054:	f002 fdea 	bl	8031c2c <USBD_LL_PrepareReceive>
 802f058:	e008      	b.n	802f06c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f05a:	4b08      	ldr	r3, [pc, #32]	; (802f07c <USBD_CDC_Init+0x1e8>)
 802f05c:	7819      	ldrb	r1, [r3, #0]
 802f05e:	68fb      	ldr	r3, [r7, #12]
 802f060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f064:	2340      	movs	r3, #64	; 0x40
 802f066:	6878      	ldr	r0, [r7, #4]
 802f068:	f002 fde0 	bl	8031c2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f06c:	2300      	movs	r3, #0
}
 802f06e:	4618      	mov	r0, r3
 802f070:	3710      	adds	r7, #16
 802f072:	46bd      	mov	sp, r7
 802f074:	bd80      	pop	{r7, pc}
 802f076:	bf00      	nop
 802f078:	200001cb 	.word	0x200001cb
 802f07c:	200001cc 	.word	0x200001cc
 802f080:	200001cd 	.word	0x200001cd

0802f084 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f084:	b580      	push	{r7, lr}
 802f086:	b082      	sub	sp, #8
 802f088:	af00      	add	r7, sp, #0
 802f08a:	6078      	str	r0, [r7, #4]
 802f08c:	460b      	mov	r3, r1
 802f08e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802f090:	4b3a      	ldr	r3, [pc, #232]	; (802f17c <USBD_CDC_DeInit+0xf8>)
 802f092:	781b      	ldrb	r3, [r3, #0]
 802f094:	4619      	mov	r1, r3
 802f096:	6878      	ldr	r0, [r7, #4]
 802f098:	f002 fcff 	bl	8031a9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802f09c:	4b37      	ldr	r3, [pc, #220]	; (802f17c <USBD_CDC_DeInit+0xf8>)
 802f09e:	781b      	ldrb	r3, [r3, #0]
 802f0a0:	f003 020f 	and.w	r2, r3, #15
 802f0a4:	6879      	ldr	r1, [r7, #4]
 802f0a6:	4613      	mov	r3, r2
 802f0a8:	009b      	lsls	r3, r3, #2
 802f0aa:	4413      	add	r3, r2
 802f0ac:	009b      	lsls	r3, r3, #2
 802f0ae:	440b      	add	r3, r1
 802f0b0:	3324      	adds	r3, #36	; 0x24
 802f0b2:	2200      	movs	r2, #0
 802f0b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 802f0b6:	4b32      	ldr	r3, [pc, #200]	; (802f180 <USBD_CDC_DeInit+0xfc>)
 802f0b8:	781b      	ldrb	r3, [r3, #0]
 802f0ba:	4619      	mov	r1, r3
 802f0bc:	6878      	ldr	r0, [r7, #4]
 802f0be:	f002 fcec 	bl	8031a9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802f0c2:	4b2f      	ldr	r3, [pc, #188]	; (802f180 <USBD_CDC_DeInit+0xfc>)
 802f0c4:	781b      	ldrb	r3, [r3, #0]
 802f0c6:	f003 020f 	and.w	r2, r3, #15
 802f0ca:	6879      	ldr	r1, [r7, #4]
 802f0cc:	4613      	mov	r3, r2
 802f0ce:	009b      	lsls	r3, r3, #2
 802f0d0:	4413      	add	r3, r2
 802f0d2:	009b      	lsls	r3, r3, #2
 802f0d4:	440b      	add	r3, r1
 802f0d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802f0da:	2200      	movs	r2, #0
 802f0dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802f0de:	4b29      	ldr	r3, [pc, #164]	; (802f184 <USBD_CDC_DeInit+0x100>)
 802f0e0:	781b      	ldrb	r3, [r3, #0]
 802f0e2:	4619      	mov	r1, r3
 802f0e4:	6878      	ldr	r0, [r7, #4]
 802f0e6:	f002 fcd8 	bl	8031a9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 802f0ea:	4b26      	ldr	r3, [pc, #152]	; (802f184 <USBD_CDC_DeInit+0x100>)
 802f0ec:	781b      	ldrb	r3, [r3, #0]
 802f0ee:	f003 020f 	and.w	r2, r3, #15
 802f0f2:	6879      	ldr	r1, [r7, #4]
 802f0f4:	4613      	mov	r3, r2
 802f0f6:	009b      	lsls	r3, r3, #2
 802f0f8:	4413      	add	r3, r2
 802f0fa:	009b      	lsls	r3, r3, #2
 802f0fc:	440b      	add	r3, r1
 802f0fe:	3324      	adds	r3, #36	; 0x24
 802f100:	2200      	movs	r2, #0
 802f102:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 802f104:	4b1f      	ldr	r3, [pc, #124]	; (802f184 <USBD_CDC_DeInit+0x100>)
 802f106:	781b      	ldrb	r3, [r3, #0]
 802f108:	f003 020f 	and.w	r2, r3, #15
 802f10c:	6879      	ldr	r1, [r7, #4]
 802f10e:	4613      	mov	r3, r2
 802f110:	009b      	lsls	r3, r3, #2
 802f112:	4413      	add	r3, r2
 802f114:	009b      	lsls	r3, r3, #2
 802f116:	440b      	add	r3, r1
 802f118:	3326      	adds	r3, #38	; 0x26
 802f11a:	2200      	movs	r2, #0
 802f11c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 802f11e:	687b      	ldr	r3, [r7, #4]
 802f120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f124:	687b      	ldr	r3, [r7, #4]
 802f126:	32b0      	adds	r2, #176	; 0xb0
 802f128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f12c:	2b00      	cmp	r3, #0
 802f12e:	d01f      	beq.n	802f170 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 802f130:	687b      	ldr	r3, [r7, #4]
 802f132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f136:	687a      	ldr	r2, [r7, #4]
 802f138:	33b0      	adds	r3, #176	; 0xb0
 802f13a:	009b      	lsls	r3, r3, #2
 802f13c:	4413      	add	r3, r2
 802f13e:	685b      	ldr	r3, [r3, #4]
 802f140:	685b      	ldr	r3, [r3, #4]
 802f142:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 802f144:	687b      	ldr	r3, [r7, #4]
 802f146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	32b0      	adds	r2, #176	; 0xb0
 802f14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f152:	4618      	mov	r0, r3
 802f154:	f002 fdac 	bl	8031cb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802f158:	687b      	ldr	r3, [r7, #4]
 802f15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f15e:	687b      	ldr	r3, [r7, #4]
 802f160:	32b0      	adds	r2, #176	; 0xb0
 802f162:	2100      	movs	r1, #0
 802f164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 802f168:	687b      	ldr	r3, [r7, #4]
 802f16a:	2200      	movs	r2, #0
 802f16c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802f170:	2300      	movs	r3, #0
}
 802f172:	4618      	mov	r0, r3
 802f174:	3708      	adds	r7, #8
 802f176:	46bd      	mov	sp, r7
 802f178:	bd80      	pop	{r7, pc}
 802f17a:	bf00      	nop
 802f17c:	200001cb 	.word	0x200001cb
 802f180:	200001cc 	.word	0x200001cc
 802f184:	200001cd 	.word	0x200001cd

0802f188 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802f188:	b580      	push	{r7, lr}
 802f18a:	b086      	sub	sp, #24
 802f18c:	af00      	add	r7, sp, #0
 802f18e:	6078      	str	r0, [r7, #4]
 802f190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f192:	687b      	ldr	r3, [r7, #4]
 802f194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f198:	687b      	ldr	r3, [r7, #4]
 802f19a:	32b0      	adds	r2, #176	; 0xb0
 802f19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f1a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802f1a2:	2300      	movs	r3, #0
 802f1a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802f1a6:	2300      	movs	r3, #0
 802f1a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 802f1aa:	2300      	movs	r3, #0
 802f1ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802f1ae:	693b      	ldr	r3, [r7, #16]
 802f1b0:	2b00      	cmp	r3, #0
 802f1b2:	d101      	bne.n	802f1b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 802f1b4:	2303      	movs	r3, #3
 802f1b6:	e0bf      	b.n	802f338 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f1b8:	683b      	ldr	r3, [r7, #0]
 802f1ba:	781b      	ldrb	r3, [r3, #0]
 802f1bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f1c0:	2b00      	cmp	r3, #0
 802f1c2:	d050      	beq.n	802f266 <USBD_CDC_Setup+0xde>
 802f1c4:	2b20      	cmp	r3, #32
 802f1c6:	f040 80af 	bne.w	802f328 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802f1ca:	683b      	ldr	r3, [r7, #0]
 802f1cc:	88db      	ldrh	r3, [r3, #6]
 802f1ce:	2b00      	cmp	r3, #0
 802f1d0:	d03a      	beq.n	802f248 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802f1d2:	683b      	ldr	r3, [r7, #0]
 802f1d4:	781b      	ldrb	r3, [r3, #0]
 802f1d6:	b25b      	sxtb	r3, r3
 802f1d8:	2b00      	cmp	r3, #0
 802f1da:	da1b      	bge.n	802f214 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802f1dc:	687b      	ldr	r3, [r7, #4]
 802f1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f1e2:	687a      	ldr	r2, [r7, #4]
 802f1e4:	33b0      	adds	r3, #176	; 0xb0
 802f1e6:	009b      	lsls	r3, r3, #2
 802f1e8:	4413      	add	r3, r2
 802f1ea:	685b      	ldr	r3, [r3, #4]
 802f1ec:	689b      	ldr	r3, [r3, #8]
 802f1ee:	683a      	ldr	r2, [r7, #0]
 802f1f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802f1f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802f1f4:	683a      	ldr	r2, [r7, #0]
 802f1f6:	88d2      	ldrh	r2, [r2, #6]
 802f1f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 802f1fa:	683b      	ldr	r3, [r7, #0]
 802f1fc:	88db      	ldrh	r3, [r3, #6]
 802f1fe:	2b07      	cmp	r3, #7
 802f200:	bf28      	it	cs
 802f202:	2307      	movcs	r3, #7
 802f204:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 802f206:	693b      	ldr	r3, [r7, #16]
 802f208:	89fa      	ldrh	r2, [r7, #14]
 802f20a:	4619      	mov	r1, r3
 802f20c:	6878      	ldr	r0, [r7, #4]
 802f20e:	f001 fd89 	bl	8030d24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 802f212:	e090      	b.n	802f336 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 802f214:	683b      	ldr	r3, [r7, #0]
 802f216:	785a      	ldrb	r2, [r3, #1]
 802f218:	693b      	ldr	r3, [r7, #16]
 802f21a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 802f21e:	683b      	ldr	r3, [r7, #0]
 802f220:	88db      	ldrh	r3, [r3, #6]
 802f222:	2b3f      	cmp	r3, #63	; 0x3f
 802f224:	d803      	bhi.n	802f22e <USBD_CDC_Setup+0xa6>
 802f226:	683b      	ldr	r3, [r7, #0]
 802f228:	88db      	ldrh	r3, [r3, #6]
 802f22a:	b2da      	uxtb	r2, r3
 802f22c:	e000      	b.n	802f230 <USBD_CDC_Setup+0xa8>
 802f22e:	2240      	movs	r2, #64	; 0x40
 802f230:	693b      	ldr	r3, [r7, #16]
 802f232:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 802f236:	6939      	ldr	r1, [r7, #16]
 802f238:	693b      	ldr	r3, [r7, #16]
 802f23a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 802f23e:	461a      	mov	r2, r3
 802f240:	6878      	ldr	r0, [r7, #4]
 802f242:	f001 fd9b 	bl	8030d7c <USBD_CtlPrepareRx>
      break;
 802f246:	e076      	b.n	802f336 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802f248:	687b      	ldr	r3, [r7, #4]
 802f24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f24e:	687a      	ldr	r2, [r7, #4]
 802f250:	33b0      	adds	r3, #176	; 0xb0
 802f252:	009b      	lsls	r3, r3, #2
 802f254:	4413      	add	r3, r2
 802f256:	685b      	ldr	r3, [r3, #4]
 802f258:	689b      	ldr	r3, [r3, #8]
 802f25a:	683a      	ldr	r2, [r7, #0]
 802f25c:	7850      	ldrb	r0, [r2, #1]
 802f25e:	2200      	movs	r2, #0
 802f260:	6839      	ldr	r1, [r7, #0]
 802f262:	4798      	blx	r3
      break;
 802f264:	e067      	b.n	802f336 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f266:	683b      	ldr	r3, [r7, #0]
 802f268:	785b      	ldrb	r3, [r3, #1]
 802f26a:	2b0b      	cmp	r3, #11
 802f26c:	d851      	bhi.n	802f312 <USBD_CDC_Setup+0x18a>
 802f26e:	a201      	add	r2, pc, #4	; (adr r2, 802f274 <USBD_CDC_Setup+0xec>)
 802f270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f274:	0802f2a5 	.word	0x0802f2a5
 802f278:	0802f321 	.word	0x0802f321
 802f27c:	0802f313 	.word	0x0802f313
 802f280:	0802f313 	.word	0x0802f313
 802f284:	0802f313 	.word	0x0802f313
 802f288:	0802f313 	.word	0x0802f313
 802f28c:	0802f313 	.word	0x0802f313
 802f290:	0802f313 	.word	0x0802f313
 802f294:	0802f313 	.word	0x0802f313
 802f298:	0802f313 	.word	0x0802f313
 802f29c:	0802f2cf 	.word	0x0802f2cf
 802f2a0:	0802f2f9 	.word	0x0802f2f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f2a4:	687b      	ldr	r3, [r7, #4]
 802f2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f2aa:	b2db      	uxtb	r3, r3
 802f2ac:	2b03      	cmp	r3, #3
 802f2ae:	d107      	bne.n	802f2c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802f2b0:	f107 030a 	add.w	r3, r7, #10
 802f2b4:	2202      	movs	r2, #2
 802f2b6:	4619      	mov	r1, r3
 802f2b8:	6878      	ldr	r0, [r7, #4]
 802f2ba:	f001 fd33 	bl	8030d24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802f2be:	e032      	b.n	802f326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802f2c0:	6839      	ldr	r1, [r7, #0]
 802f2c2:	6878      	ldr	r0, [r7, #4]
 802f2c4:	f001 fcbd 	bl	8030c42 <USBD_CtlError>
            ret = USBD_FAIL;
 802f2c8:	2303      	movs	r3, #3
 802f2ca:	75fb      	strb	r3, [r7, #23]
          break;
 802f2cc:	e02b      	b.n	802f326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f2ce:	687b      	ldr	r3, [r7, #4]
 802f2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f2d4:	b2db      	uxtb	r3, r3
 802f2d6:	2b03      	cmp	r3, #3
 802f2d8:	d107      	bne.n	802f2ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802f2da:	f107 030d 	add.w	r3, r7, #13
 802f2de:	2201      	movs	r2, #1
 802f2e0:	4619      	mov	r1, r3
 802f2e2:	6878      	ldr	r0, [r7, #4]
 802f2e4:	f001 fd1e 	bl	8030d24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802f2e8:	e01d      	b.n	802f326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802f2ea:	6839      	ldr	r1, [r7, #0]
 802f2ec:	6878      	ldr	r0, [r7, #4]
 802f2ee:	f001 fca8 	bl	8030c42 <USBD_CtlError>
            ret = USBD_FAIL;
 802f2f2:	2303      	movs	r3, #3
 802f2f4:	75fb      	strb	r3, [r7, #23]
          break;
 802f2f6:	e016      	b.n	802f326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f2fe:	b2db      	uxtb	r3, r3
 802f300:	2b03      	cmp	r3, #3
 802f302:	d00f      	beq.n	802f324 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 802f304:	6839      	ldr	r1, [r7, #0]
 802f306:	6878      	ldr	r0, [r7, #4]
 802f308:	f001 fc9b 	bl	8030c42 <USBD_CtlError>
            ret = USBD_FAIL;
 802f30c:	2303      	movs	r3, #3
 802f30e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 802f310:	e008      	b.n	802f324 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802f312:	6839      	ldr	r1, [r7, #0]
 802f314:	6878      	ldr	r0, [r7, #4]
 802f316:	f001 fc94 	bl	8030c42 <USBD_CtlError>
          ret = USBD_FAIL;
 802f31a:	2303      	movs	r3, #3
 802f31c:	75fb      	strb	r3, [r7, #23]
          break;
 802f31e:	e002      	b.n	802f326 <USBD_CDC_Setup+0x19e>
          break;
 802f320:	bf00      	nop
 802f322:	e008      	b.n	802f336 <USBD_CDC_Setup+0x1ae>
          break;
 802f324:	bf00      	nop
      }
      break;
 802f326:	e006      	b.n	802f336 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 802f328:	6839      	ldr	r1, [r7, #0]
 802f32a:	6878      	ldr	r0, [r7, #4]
 802f32c:	f001 fc89 	bl	8030c42 <USBD_CtlError>
      ret = USBD_FAIL;
 802f330:	2303      	movs	r3, #3
 802f332:	75fb      	strb	r3, [r7, #23]
      break;
 802f334:	bf00      	nop
  }

  return (uint8_t)ret;
 802f336:	7dfb      	ldrb	r3, [r7, #23]
}
 802f338:	4618      	mov	r0, r3
 802f33a:	3718      	adds	r7, #24
 802f33c:	46bd      	mov	sp, r7
 802f33e:	bd80      	pop	{r7, pc}

0802f340 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802f340:	b580      	push	{r7, lr}
 802f342:	b084      	sub	sp, #16
 802f344:	af00      	add	r7, sp, #0
 802f346:	6078      	str	r0, [r7, #4]
 802f348:	460b      	mov	r3, r1
 802f34a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 802f34c:	687b      	ldr	r3, [r7, #4]
 802f34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802f352:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f354:	687b      	ldr	r3, [r7, #4]
 802f356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f35a:	687b      	ldr	r3, [r7, #4]
 802f35c:	32b0      	adds	r2, #176	; 0xb0
 802f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f362:	2b00      	cmp	r3, #0
 802f364:	d101      	bne.n	802f36a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 802f366:	2303      	movs	r3, #3
 802f368:	e065      	b.n	802f436 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f36a:	687b      	ldr	r3, [r7, #4]
 802f36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f370:	687b      	ldr	r3, [r7, #4]
 802f372:	32b0      	adds	r2, #176	; 0xb0
 802f374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802f37a:	78fb      	ldrb	r3, [r7, #3]
 802f37c:	f003 020f 	and.w	r2, r3, #15
 802f380:	6879      	ldr	r1, [r7, #4]
 802f382:	4613      	mov	r3, r2
 802f384:	009b      	lsls	r3, r3, #2
 802f386:	4413      	add	r3, r2
 802f388:	009b      	lsls	r3, r3, #2
 802f38a:	440b      	add	r3, r1
 802f38c:	3318      	adds	r3, #24
 802f38e:	681b      	ldr	r3, [r3, #0]
 802f390:	2b00      	cmp	r3, #0
 802f392:	d02f      	beq.n	802f3f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 802f394:	78fb      	ldrb	r3, [r7, #3]
 802f396:	f003 020f 	and.w	r2, r3, #15
 802f39a:	6879      	ldr	r1, [r7, #4]
 802f39c:	4613      	mov	r3, r2
 802f39e:	009b      	lsls	r3, r3, #2
 802f3a0:	4413      	add	r3, r2
 802f3a2:	009b      	lsls	r3, r3, #2
 802f3a4:	440b      	add	r3, r1
 802f3a6:	3318      	adds	r3, #24
 802f3a8:	681a      	ldr	r2, [r3, #0]
 802f3aa:	78fb      	ldrb	r3, [r7, #3]
 802f3ac:	f003 010f 	and.w	r1, r3, #15
 802f3b0:	68f8      	ldr	r0, [r7, #12]
 802f3b2:	460b      	mov	r3, r1
 802f3b4:	00db      	lsls	r3, r3, #3
 802f3b6:	440b      	add	r3, r1
 802f3b8:	009b      	lsls	r3, r3, #2
 802f3ba:	4403      	add	r3, r0
 802f3bc:	3348      	adds	r3, #72	; 0x48
 802f3be:	681b      	ldr	r3, [r3, #0]
 802f3c0:	fbb2 f1f3 	udiv	r1, r2, r3
 802f3c4:	fb01 f303 	mul.w	r3, r1, r3
 802f3c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802f3ca:	2b00      	cmp	r3, #0
 802f3cc:	d112      	bne.n	802f3f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802f3ce:	78fb      	ldrb	r3, [r7, #3]
 802f3d0:	f003 020f 	and.w	r2, r3, #15
 802f3d4:	6879      	ldr	r1, [r7, #4]
 802f3d6:	4613      	mov	r3, r2
 802f3d8:	009b      	lsls	r3, r3, #2
 802f3da:	4413      	add	r3, r2
 802f3dc:	009b      	lsls	r3, r3, #2
 802f3de:	440b      	add	r3, r1
 802f3e0:	3318      	adds	r3, #24
 802f3e2:	2200      	movs	r2, #0
 802f3e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802f3e6:	78f9      	ldrb	r1, [r7, #3]
 802f3e8:	2300      	movs	r3, #0
 802f3ea:	2200      	movs	r2, #0
 802f3ec:	6878      	ldr	r0, [r7, #4]
 802f3ee:	f002 fbfc 	bl	8031bea <USBD_LL_Transmit>
 802f3f2:	e01f      	b.n	802f434 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 802f3f4:	68bb      	ldr	r3, [r7, #8]
 802f3f6:	2200      	movs	r2, #0
 802f3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 802f3fc:	687b      	ldr	r3, [r7, #4]
 802f3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f402:	687a      	ldr	r2, [r7, #4]
 802f404:	33b0      	adds	r3, #176	; 0xb0
 802f406:	009b      	lsls	r3, r3, #2
 802f408:	4413      	add	r3, r2
 802f40a:	685b      	ldr	r3, [r3, #4]
 802f40c:	691b      	ldr	r3, [r3, #16]
 802f40e:	2b00      	cmp	r3, #0
 802f410:	d010      	beq.n	802f434 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802f412:	687b      	ldr	r3, [r7, #4]
 802f414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f418:	687a      	ldr	r2, [r7, #4]
 802f41a:	33b0      	adds	r3, #176	; 0xb0
 802f41c:	009b      	lsls	r3, r3, #2
 802f41e:	4413      	add	r3, r2
 802f420:	685b      	ldr	r3, [r3, #4]
 802f422:	691b      	ldr	r3, [r3, #16]
 802f424:	68ba      	ldr	r2, [r7, #8]
 802f426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 802f42a:	68ba      	ldr	r2, [r7, #8]
 802f42c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802f430:	78fa      	ldrb	r2, [r7, #3]
 802f432:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 802f434:	2300      	movs	r3, #0
}
 802f436:	4618      	mov	r0, r3
 802f438:	3710      	adds	r7, #16
 802f43a:	46bd      	mov	sp, r7
 802f43c:	bd80      	pop	{r7, pc}

0802f43e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802f43e:	b580      	push	{r7, lr}
 802f440:	b084      	sub	sp, #16
 802f442:	af00      	add	r7, sp, #0
 802f444:	6078      	str	r0, [r7, #4]
 802f446:	460b      	mov	r3, r1
 802f448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f44a:	687b      	ldr	r3, [r7, #4]
 802f44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f450:	687b      	ldr	r3, [r7, #4]
 802f452:	32b0      	adds	r2, #176	; 0xb0
 802f454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f45a:	687b      	ldr	r3, [r7, #4]
 802f45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f460:	687b      	ldr	r3, [r7, #4]
 802f462:	32b0      	adds	r2, #176	; 0xb0
 802f464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f468:	2b00      	cmp	r3, #0
 802f46a:	d101      	bne.n	802f470 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802f46c:	2303      	movs	r3, #3
 802f46e:	e01a      	b.n	802f4a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802f470:	78fb      	ldrb	r3, [r7, #3]
 802f472:	4619      	mov	r1, r3
 802f474:	6878      	ldr	r0, [r7, #4]
 802f476:	f002 fbfa 	bl	8031c6e <USBD_LL_GetRxDataSize>
 802f47a:	4602      	mov	r2, r0
 802f47c:	68fb      	ldr	r3, [r7, #12]
 802f47e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802f482:	687b      	ldr	r3, [r7, #4]
 802f484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f488:	687a      	ldr	r2, [r7, #4]
 802f48a:	33b0      	adds	r3, #176	; 0xb0
 802f48c:	009b      	lsls	r3, r3, #2
 802f48e:	4413      	add	r3, r2
 802f490:	685b      	ldr	r3, [r3, #4]
 802f492:	68db      	ldr	r3, [r3, #12]
 802f494:	68fa      	ldr	r2, [r7, #12]
 802f496:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 802f49a:	68fa      	ldr	r2, [r7, #12]
 802f49c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802f4a0:	4611      	mov	r1, r2
 802f4a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802f4a4:	2300      	movs	r3, #0
}
 802f4a6:	4618      	mov	r0, r3
 802f4a8:	3710      	adds	r7, #16
 802f4aa:	46bd      	mov	sp, r7
 802f4ac:	bd80      	pop	{r7, pc}

0802f4ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802f4ae:	b580      	push	{r7, lr}
 802f4b0:	b084      	sub	sp, #16
 802f4b2:	af00      	add	r7, sp, #0
 802f4b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f4b6:	687b      	ldr	r3, [r7, #4]
 802f4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f4bc:	687b      	ldr	r3, [r7, #4]
 802f4be:	32b0      	adds	r2, #176	; 0xb0
 802f4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f4c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802f4c6:	68fb      	ldr	r3, [r7, #12]
 802f4c8:	2b00      	cmp	r3, #0
 802f4ca:	d101      	bne.n	802f4d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802f4cc:	2303      	movs	r3, #3
 802f4ce:	e025      	b.n	802f51c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802f4d0:	687b      	ldr	r3, [r7, #4]
 802f4d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f4d6:	687a      	ldr	r2, [r7, #4]
 802f4d8:	33b0      	adds	r3, #176	; 0xb0
 802f4da:	009b      	lsls	r3, r3, #2
 802f4dc:	4413      	add	r3, r2
 802f4de:	685b      	ldr	r3, [r3, #4]
 802f4e0:	2b00      	cmp	r3, #0
 802f4e2:	d01a      	beq.n	802f51a <USBD_CDC_EP0_RxReady+0x6c>
 802f4e4:	68fb      	ldr	r3, [r7, #12]
 802f4e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 802f4ea:	2bff      	cmp	r3, #255	; 0xff
 802f4ec:	d015      	beq.n	802f51a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802f4ee:	687b      	ldr	r3, [r7, #4]
 802f4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f4f4:	687a      	ldr	r2, [r7, #4]
 802f4f6:	33b0      	adds	r3, #176	; 0xb0
 802f4f8:	009b      	lsls	r3, r3, #2
 802f4fa:	4413      	add	r3, r2
 802f4fc:	685b      	ldr	r3, [r3, #4]
 802f4fe:	689b      	ldr	r3, [r3, #8]
 802f500:	68fa      	ldr	r2, [r7, #12]
 802f502:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 802f506:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 802f508:	68fa      	ldr	r2, [r7, #12]
 802f50a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802f50e:	b292      	uxth	r2, r2
 802f510:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802f512:	68fb      	ldr	r3, [r7, #12]
 802f514:	22ff      	movs	r2, #255	; 0xff
 802f516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 802f51a:	2300      	movs	r3, #0
}
 802f51c:	4618      	mov	r0, r3
 802f51e:	3710      	adds	r7, #16
 802f520:	46bd      	mov	sp, r7
 802f522:	bd80      	pop	{r7, pc}

0802f524 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802f524:	b580      	push	{r7, lr}
 802f526:	b086      	sub	sp, #24
 802f528:	af00      	add	r7, sp, #0
 802f52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802f52c:	2182      	movs	r1, #130	; 0x82
 802f52e:	4818      	ldr	r0, [pc, #96]	; (802f590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802f530:	f000 fd4f 	bl	802ffd2 <USBD_GetEpDesc>
 802f534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802f536:	2101      	movs	r1, #1
 802f538:	4815      	ldr	r0, [pc, #84]	; (802f590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802f53a:	f000 fd4a 	bl	802ffd2 <USBD_GetEpDesc>
 802f53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802f540:	2181      	movs	r1, #129	; 0x81
 802f542:	4813      	ldr	r0, [pc, #76]	; (802f590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802f544:	f000 fd45 	bl	802ffd2 <USBD_GetEpDesc>
 802f548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802f54a:	697b      	ldr	r3, [r7, #20]
 802f54c:	2b00      	cmp	r3, #0
 802f54e:	d002      	beq.n	802f556 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802f550:	697b      	ldr	r3, [r7, #20]
 802f552:	2210      	movs	r2, #16
 802f554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802f556:	693b      	ldr	r3, [r7, #16]
 802f558:	2b00      	cmp	r3, #0
 802f55a:	d006      	beq.n	802f56a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802f55c:	693b      	ldr	r3, [r7, #16]
 802f55e:	2200      	movs	r2, #0
 802f560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f564:	711a      	strb	r2, [r3, #4]
 802f566:	2200      	movs	r2, #0
 802f568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802f56a:	68fb      	ldr	r3, [r7, #12]
 802f56c:	2b00      	cmp	r3, #0
 802f56e:	d006      	beq.n	802f57e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802f570:	68fb      	ldr	r3, [r7, #12]
 802f572:	2200      	movs	r2, #0
 802f574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f578:	711a      	strb	r2, [r3, #4]
 802f57a:	2200      	movs	r2, #0
 802f57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802f57e:	687b      	ldr	r3, [r7, #4]
 802f580:	2243      	movs	r2, #67	; 0x43
 802f582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802f584:	4b02      	ldr	r3, [pc, #8]	; (802f590 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 802f586:	4618      	mov	r0, r3
 802f588:	3718      	adds	r7, #24
 802f58a:	46bd      	mov	sp, r7
 802f58c:	bd80      	pop	{r7, pc}
 802f58e:	bf00      	nop
 802f590:	20000188 	.word	0x20000188

0802f594 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802f594:	b580      	push	{r7, lr}
 802f596:	b086      	sub	sp, #24
 802f598:	af00      	add	r7, sp, #0
 802f59a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802f59c:	2182      	movs	r1, #130	; 0x82
 802f59e:	4818      	ldr	r0, [pc, #96]	; (802f600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802f5a0:	f000 fd17 	bl	802ffd2 <USBD_GetEpDesc>
 802f5a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802f5a6:	2101      	movs	r1, #1
 802f5a8:	4815      	ldr	r0, [pc, #84]	; (802f600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802f5aa:	f000 fd12 	bl	802ffd2 <USBD_GetEpDesc>
 802f5ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802f5b0:	2181      	movs	r1, #129	; 0x81
 802f5b2:	4813      	ldr	r0, [pc, #76]	; (802f600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802f5b4:	f000 fd0d 	bl	802ffd2 <USBD_GetEpDesc>
 802f5b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802f5ba:	697b      	ldr	r3, [r7, #20]
 802f5bc:	2b00      	cmp	r3, #0
 802f5be:	d002      	beq.n	802f5c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802f5c0:	697b      	ldr	r3, [r7, #20]
 802f5c2:	2210      	movs	r2, #16
 802f5c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802f5c6:	693b      	ldr	r3, [r7, #16]
 802f5c8:	2b00      	cmp	r3, #0
 802f5ca:	d006      	beq.n	802f5da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802f5cc:	693b      	ldr	r3, [r7, #16]
 802f5ce:	2200      	movs	r2, #0
 802f5d0:	711a      	strb	r2, [r3, #4]
 802f5d2:	2200      	movs	r2, #0
 802f5d4:	f042 0202 	orr.w	r2, r2, #2
 802f5d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802f5da:	68fb      	ldr	r3, [r7, #12]
 802f5dc:	2b00      	cmp	r3, #0
 802f5de:	d006      	beq.n	802f5ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802f5e0:	68fb      	ldr	r3, [r7, #12]
 802f5e2:	2200      	movs	r2, #0
 802f5e4:	711a      	strb	r2, [r3, #4]
 802f5e6:	2200      	movs	r2, #0
 802f5e8:	f042 0202 	orr.w	r2, r2, #2
 802f5ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802f5ee:	687b      	ldr	r3, [r7, #4]
 802f5f0:	2243      	movs	r2, #67	; 0x43
 802f5f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802f5f4:	4b02      	ldr	r3, [pc, #8]	; (802f600 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 802f5f6:	4618      	mov	r0, r3
 802f5f8:	3718      	adds	r7, #24
 802f5fa:	46bd      	mov	sp, r7
 802f5fc:	bd80      	pop	{r7, pc}
 802f5fe:	bf00      	nop
 802f600:	20000188 	.word	0x20000188

0802f604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802f604:	b580      	push	{r7, lr}
 802f606:	b086      	sub	sp, #24
 802f608:	af00      	add	r7, sp, #0
 802f60a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802f60c:	2182      	movs	r1, #130	; 0x82
 802f60e:	4818      	ldr	r0, [pc, #96]	; (802f670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802f610:	f000 fcdf 	bl	802ffd2 <USBD_GetEpDesc>
 802f614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802f616:	2101      	movs	r1, #1
 802f618:	4815      	ldr	r0, [pc, #84]	; (802f670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802f61a:	f000 fcda 	bl	802ffd2 <USBD_GetEpDesc>
 802f61e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802f620:	2181      	movs	r1, #129	; 0x81
 802f622:	4813      	ldr	r0, [pc, #76]	; (802f670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802f624:	f000 fcd5 	bl	802ffd2 <USBD_GetEpDesc>
 802f628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802f62a:	697b      	ldr	r3, [r7, #20]
 802f62c:	2b00      	cmp	r3, #0
 802f62e:	d002      	beq.n	802f636 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802f630:	697b      	ldr	r3, [r7, #20]
 802f632:	2210      	movs	r2, #16
 802f634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802f636:	693b      	ldr	r3, [r7, #16]
 802f638:	2b00      	cmp	r3, #0
 802f63a:	d006      	beq.n	802f64a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802f63c:	693b      	ldr	r3, [r7, #16]
 802f63e:	2200      	movs	r2, #0
 802f640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f644:	711a      	strb	r2, [r3, #4]
 802f646:	2200      	movs	r2, #0
 802f648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802f64a:	68fb      	ldr	r3, [r7, #12]
 802f64c:	2b00      	cmp	r3, #0
 802f64e:	d006      	beq.n	802f65e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802f650:	68fb      	ldr	r3, [r7, #12]
 802f652:	2200      	movs	r2, #0
 802f654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802f658:	711a      	strb	r2, [r3, #4]
 802f65a:	2200      	movs	r2, #0
 802f65c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802f65e:	687b      	ldr	r3, [r7, #4]
 802f660:	2243      	movs	r2, #67	; 0x43
 802f662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802f664:	4b02      	ldr	r3, [pc, #8]	; (802f670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 802f666:	4618      	mov	r0, r3
 802f668:	3718      	adds	r7, #24
 802f66a:	46bd      	mov	sp, r7
 802f66c:	bd80      	pop	{r7, pc}
 802f66e:	bf00      	nop
 802f670:	20000188 	.word	0x20000188

0802f674 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802f674:	b480      	push	{r7}
 802f676:	b083      	sub	sp, #12
 802f678:	af00      	add	r7, sp, #0
 802f67a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802f67c:	687b      	ldr	r3, [r7, #4]
 802f67e:	220a      	movs	r2, #10
 802f680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802f682:	4b03      	ldr	r3, [pc, #12]	; (802f690 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802f684:	4618      	mov	r0, r3
 802f686:	370c      	adds	r7, #12
 802f688:	46bd      	mov	sp, r7
 802f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f68e:	4770      	bx	lr
 802f690:	20000144 	.word	0x20000144

0802f694 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802f694:	b480      	push	{r7}
 802f696:	b083      	sub	sp, #12
 802f698:	af00      	add	r7, sp, #0
 802f69a:	6078      	str	r0, [r7, #4]
 802f69c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802f69e:	683b      	ldr	r3, [r7, #0]
 802f6a0:	2b00      	cmp	r3, #0
 802f6a2:	d101      	bne.n	802f6a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802f6a4:	2303      	movs	r3, #3
 802f6a6:	e009      	b.n	802f6bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 802f6a8:	687b      	ldr	r3, [r7, #4]
 802f6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802f6ae:	687a      	ldr	r2, [r7, #4]
 802f6b0:	33b0      	adds	r3, #176	; 0xb0
 802f6b2:	009b      	lsls	r3, r3, #2
 802f6b4:	4413      	add	r3, r2
 802f6b6:	683a      	ldr	r2, [r7, #0]
 802f6b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 802f6ba:	2300      	movs	r3, #0
}
 802f6bc:	4618      	mov	r0, r3
 802f6be:	370c      	adds	r7, #12
 802f6c0:	46bd      	mov	sp, r7
 802f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6c6:	4770      	bx	lr

0802f6c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802f6c8:	b480      	push	{r7}
 802f6ca:	b087      	sub	sp, #28
 802f6cc:	af00      	add	r7, sp, #0
 802f6ce:	60f8      	str	r0, [r7, #12]
 802f6d0:	60b9      	str	r1, [r7, #8]
 802f6d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f6d4:	68fb      	ldr	r3, [r7, #12]
 802f6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6da:	68fb      	ldr	r3, [r7, #12]
 802f6dc:	32b0      	adds	r2, #176	; 0xb0
 802f6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 802f6e4:	697b      	ldr	r3, [r7, #20]
 802f6e6:	2b00      	cmp	r3, #0
 802f6e8:	d101      	bne.n	802f6ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 802f6ea:	2303      	movs	r3, #3
 802f6ec:	e008      	b.n	802f700 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802f6ee:	697b      	ldr	r3, [r7, #20]
 802f6f0:	68ba      	ldr	r2, [r7, #8]
 802f6f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802f6f6:	697b      	ldr	r3, [r7, #20]
 802f6f8:	687a      	ldr	r2, [r7, #4]
 802f6fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802f6fe:	2300      	movs	r3, #0
}
 802f700:	4618      	mov	r0, r3
 802f702:	371c      	adds	r7, #28
 802f704:	46bd      	mov	sp, r7
 802f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f70a:	4770      	bx	lr

0802f70c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802f70c:	b480      	push	{r7}
 802f70e:	b085      	sub	sp, #20
 802f710:	af00      	add	r7, sp, #0
 802f712:	6078      	str	r0, [r7, #4]
 802f714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f716:	687b      	ldr	r3, [r7, #4]
 802f718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f71c:	687b      	ldr	r3, [r7, #4]
 802f71e:	32b0      	adds	r2, #176	; 0xb0
 802f720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802f726:	68fb      	ldr	r3, [r7, #12]
 802f728:	2b00      	cmp	r3, #0
 802f72a:	d101      	bne.n	802f730 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 802f72c:	2303      	movs	r3, #3
 802f72e:	e004      	b.n	802f73a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802f730:	68fb      	ldr	r3, [r7, #12]
 802f732:	683a      	ldr	r2, [r7, #0]
 802f734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 802f738:	2300      	movs	r3, #0
}
 802f73a:	4618      	mov	r0, r3
 802f73c:	3714      	adds	r7, #20
 802f73e:	46bd      	mov	sp, r7
 802f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f744:	4770      	bx	lr
	...

0802f748 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802f748:	b580      	push	{r7, lr}
 802f74a:	b084      	sub	sp, #16
 802f74c:	af00      	add	r7, sp, #0
 802f74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f750:	687b      	ldr	r3, [r7, #4]
 802f752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f756:	687b      	ldr	r3, [r7, #4]
 802f758:	32b0      	adds	r2, #176	; 0xb0
 802f75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f75e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802f760:	2301      	movs	r3, #1
 802f762:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f764:	687b      	ldr	r3, [r7, #4]
 802f766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f76a:	687b      	ldr	r3, [r7, #4]
 802f76c:	32b0      	adds	r2, #176	; 0xb0
 802f76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f772:	2b00      	cmp	r3, #0
 802f774:	d101      	bne.n	802f77a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802f776:	2303      	movs	r3, #3
 802f778:	e025      	b.n	802f7c6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 802f77a:	68bb      	ldr	r3, [r7, #8]
 802f77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802f780:	2b00      	cmp	r3, #0
 802f782:	d11f      	bne.n	802f7c4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 802f784:	68bb      	ldr	r3, [r7, #8]
 802f786:	2201      	movs	r2, #1
 802f788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802f78c:	4b10      	ldr	r3, [pc, #64]	; (802f7d0 <USBD_CDC_TransmitPacket+0x88>)
 802f78e:	781b      	ldrb	r3, [r3, #0]
 802f790:	f003 020f 	and.w	r2, r3, #15
 802f794:	68bb      	ldr	r3, [r7, #8]
 802f796:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 802f79a:	6878      	ldr	r0, [r7, #4]
 802f79c:	4613      	mov	r3, r2
 802f79e:	009b      	lsls	r3, r3, #2
 802f7a0:	4413      	add	r3, r2
 802f7a2:	009b      	lsls	r3, r3, #2
 802f7a4:	4403      	add	r3, r0
 802f7a6:	3318      	adds	r3, #24
 802f7a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802f7aa:	4b09      	ldr	r3, [pc, #36]	; (802f7d0 <USBD_CDC_TransmitPacket+0x88>)
 802f7ac:	7819      	ldrb	r1, [r3, #0]
 802f7ae:	68bb      	ldr	r3, [r7, #8]
 802f7b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802f7b4:	68bb      	ldr	r3, [r7, #8]
 802f7b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 802f7ba:	6878      	ldr	r0, [r7, #4]
 802f7bc:	f002 fa15 	bl	8031bea <USBD_LL_Transmit>

    ret = USBD_OK;
 802f7c0:	2300      	movs	r3, #0
 802f7c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 802f7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 802f7c6:	4618      	mov	r0, r3
 802f7c8:	3710      	adds	r7, #16
 802f7ca:	46bd      	mov	sp, r7
 802f7cc:	bd80      	pop	{r7, pc}
 802f7ce:	bf00      	nop
 802f7d0:	200001cb 	.word	0x200001cb

0802f7d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802f7d4:	b580      	push	{r7, lr}
 802f7d6:	b084      	sub	sp, #16
 802f7d8:	af00      	add	r7, sp, #0
 802f7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802f7dc:	687b      	ldr	r3, [r7, #4]
 802f7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f7e2:	687b      	ldr	r3, [r7, #4]
 802f7e4:	32b0      	adds	r2, #176	; 0xb0
 802f7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f7ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f7ec:	687b      	ldr	r3, [r7, #4]
 802f7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f7f2:	687b      	ldr	r3, [r7, #4]
 802f7f4:	32b0      	adds	r2, #176	; 0xb0
 802f7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f7fa:	2b00      	cmp	r3, #0
 802f7fc:	d101      	bne.n	802f802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802f7fe:	2303      	movs	r3, #3
 802f800:	e018      	b.n	802f834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f802:	687b      	ldr	r3, [r7, #4]
 802f804:	7c1b      	ldrb	r3, [r3, #16]
 802f806:	2b00      	cmp	r3, #0
 802f808:	d10a      	bne.n	802f820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f80a:	4b0c      	ldr	r3, [pc, #48]	; (802f83c <USBD_CDC_ReceivePacket+0x68>)
 802f80c:	7819      	ldrb	r1, [r3, #0]
 802f80e:	68fb      	ldr	r3, [r7, #12]
 802f810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f814:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f818:	6878      	ldr	r0, [r7, #4]
 802f81a:	f002 fa07 	bl	8031c2c <USBD_LL_PrepareReceive>
 802f81e:	e008      	b.n	802f832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f820:	4b06      	ldr	r3, [pc, #24]	; (802f83c <USBD_CDC_ReceivePacket+0x68>)
 802f822:	7819      	ldrb	r1, [r3, #0]
 802f824:	68fb      	ldr	r3, [r7, #12]
 802f826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f82a:	2340      	movs	r3, #64	; 0x40
 802f82c:	6878      	ldr	r0, [r7, #4]
 802f82e:	f002 f9fd 	bl	8031c2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f832:	2300      	movs	r3, #0
}
 802f834:	4618      	mov	r0, r3
 802f836:	3710      	adds	r7, #16
 802f838:	46bd      	mov	sp, r7
 802f83a:	bd80      	pop	{r7, pc}
 802f83c:	200001cc 	.word	0x200001cc

0802f840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802f840:	b580      	push	{r7, lr}
 802f842:	b086      	sub	sp, #24
 802f844:	af00      	add	r7, sp, #0
 802f846:	60f8      	str	r0, [r7, #12]
 802f848:	60b9      	str	r1, [r7, #8]
 802f84a:	4613      	mov	r3, r2
 802f84c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802f84e:	68fb      	ldr	r3, [r7, #12]
 802f850:	2b00      	cmp	r3, #0
 802f852:	d101      	bne.n	802f858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f854:	2303      	movs	r3, #3
 802f856:	e01f      	b.n	802f898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802f858:	68fb      	ldr	r3, [r7, #12]
 802f85a:	2200      	movs	r2, #0
 802f85c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802f860:	68fb      	ldr	r3, [r7, #12]
 802f862:	2200      	movs	r2, #0
 802f864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802f868:	68fb      	ldr	r3, [r7, #12]
 802f86a:	2200      	movs	r2, #0
 802f86c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802f870:	68bb      	ldr	r3, [r7, #8]
 802f872:	2b00      	cmp	r3, #0
 802f874:	d003      	beq.n	802f87e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802f876:	68fb      	ldr	r3, [r7, #12]
 802f878:	68ba      	ldr	r2, [r7, #8]
 802f87a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f87e:	68fb      	ldr	r3, [r7, #12]
 802f880:	2201      	movs	r2, #1
 802f882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802f886:	68fb      	ldr	r3, [r7, #12]
 802f888:	79fa      	ldrb	r2, [r7, #7]
 802f88a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802f88c:	68f8      	ldr	r0, [r7, #12]
 802f88e:	f002 f82d 	bl	80318ec <USBD_LL_Init>
 802f892:	4603      	mov	r3, r0
 802f894:	75fb      	strb	r3, [r7, #23]

  return ret;
 802f896:	7dfb      	ldrb	r3, [r7, #23]
}
 802f898:	4618      	mov	r0, r3
 802f89a:	3718      	adds	r7, #24
 802f89c:	46bd      	mov	sp, r7
 802f89e:	bd80      	pop	{r7, pc}

0802f8a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802f8a0:	b580      	push	{r7, lr}
 802f8a2:	b084      	sub	sp, #16
 802f8a4:	af00      	add	r7, sp, #0
 802f8a6:	6078      	str	r0, [r7, #4]
 802f8a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f8aa:	2300      	movs	r3, #0
 802f8ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802f8ae:	683b      	ldr	r3, [r7, #0]
 802f8b0:	2b00      	cmp	r3, #0
 802f8b2:	d101      	bne.n	802f8b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f8b4:	2303      	movs	r3, #3
 802f8b6:	e025      	b.n	802f904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802f8b8:	687b      	ldr	r3, [r7, #4]
 802f8ba:	683a      	ldr	r2, [r7, #0]
 802f8bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802f8c0:	687b      	ldr	r3, [r7, #4]
 802f8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f8c6:	687b      	ldr	r3, [r7, #4]
 802f8c8:	32ae      	adds	r2, #174	; 0xae
 802f8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f8d0:	2b00      	cmp	r3, #0
 802f8d2:	d00f      	beq.n	802f8f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802f8d4:	687b      	ldr	r3, [r7, #4]
 802f8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f8da:	687b      	ldr	r3, [r7, #4]
 802f8dc:	32ae      	adds	r2, #174	; 0xae
 802f8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f8e4:	f107 020e 	add.w	r2, r7, #14
 802f8e8:	4610      	mov	r0, r2
 802f8ea:	4798      	blx	r3
 802f8ec:	4602      	mov	r2, r0
 802f8ee:	687b      	ldr	r3, [r7, #4]
 802f8f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 802f8f4:	687b      	ldr	r3, [r7, #4]
 802f8f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802f8fa:	1c5a      	adds	r2, r3, #1
 802f8fc:	687b      	ldr	r3, [r7, #4]
 802f8fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 802f902:	2300      	movs	r3, #0
}
 802f904:	4618      	mov	r0, r3
 802f906:	3710      	adds	r7, #16
 802f908:	46bd      	mov	sp, r7
 802f90a:	bd80      	pop	{r7, pc}

0802f90c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802f90c:	b580      	push	{r7, lr}
 802f90e:	b082      	sub	sp, #8
 802f910:	af00      	add	r7, sp, #0
 802f912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802f914:	6878      	ldr	r0, [r7, #4]
 802f916:	f002 f87f 	bl	8031a18 <USBD_LL_Start>
 802f91a:	4603      	mov	r3, r0
}
 802f91c:	4618      	mov	r0, r3
 802f91e:	3708      	adds	r7, #8
 802f920:	46bd      	mov	sp, r7
 802f922:	bd80      	pop	{r7, pc}

0802f924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 802f924:	b480      	push	{r7}
 802f926:	b083      	sub	sp, #12
 802f928:	af00      	add	r7, sp, #0
 802f92a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f92c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802f92e:	4618      	mov	r0, r3
 802f930:	370c      	adds	r7, #12
 802f932:	46bd      	mov	sp, r7
 802f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f938:	4770      	bx	lr

0802f93a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f93a:	b580      	push	{r7, lr}
 802f93c:	b084      	sub	sp, #16
 802f93e:	af00      	add	r7, sp, #0
 802f940:	6078      	str	r0, [r7, #4]
 802f942:	460b      	mov	r3, r1
 802f944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f946:	2300      	movs	r3, #0
 802f948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f94a:	687b      	ldr	r3, [r7, #4]
 802f94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f950:	2b00      	cmp	r3, #0
 802f952:	d009      	beq.n	802f968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802f954:	687b      	ldr	r3, [r7, #4]
 802f956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f95a:	681b      	ldr	r3, [r3, #0]
 802f95c:	78fa      	ldrb	r2, [r7, #3]
 802f95e:	4611      	mov	r1, r2
 802f960:	6878      	ldr	r0, [r7, #4]
 802f962:	4798      	blx	r3
 802f964:	4603      	mov	r3, r0
 802f966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f968:	7bfb      	ldrb	r3, [r7, #15]
}
 802f96a:	4618      	mov	r0, r3
 802f96c:	3710      	adds	r7, #16
 802f96e:	46bd      	mov	sp, r7
 802f970:	bd80      	pop	{r7, pc}

0802f972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f972:	b580      	push	{r7, lr}
 802f974:	b084      	sub	sp, #16
 802f976:	af00      	add	r7, sp, #0
 802f978:	6078      	str	r0, [r7, #4]
 802f97a:	460b      	mov	r3, r1
 802f97c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f97e:	2300      	movs	r3, #0
 802f980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 802f982:	687b      	ldr	r3, [r7, #4]
 802f984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f988:	685b      	ldr	r3, [r3, #4]
 802f98a:	78fa      	ldrb	r2, [r7, #3]
 802f98c:	4611      	mov	r1, r2
 802f98e:	6878      	ldr	r0, [r7, #4]
 802f990:	4798      	blx	r3
 802f992:	4603      	mov	r3, r0
 802f994:	2b00      	cmp	r3, #0
 802f996:	d001      	beq.n	802f99c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802f998:	2303      	movs	r3, #3
 802f99a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f99c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f99e:	4618      	mov	r0, r3
 802f9a0:	3710      	adds	r7, #16
 802f9a2:	46bd      	mov	sp, r7
 802f9a4:	bd80      	pop	{r7, pc}

0802f9a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802f9a6:	b580      	push	{r7, lr}
 802f9a8:	b084      	sub	sp, #16
 802f9aa:	af00      	add	r7, sp, #0
 802f9ac:	6078      	str	r0, [r7, #4]
 802f9ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802f9b0:	687b      	ldr	r3, [r7, #4]
 802f9b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f9b6:	6839      	ldr	r1, [r7, #0]
 802f9b8:	4618      	mov	r0, r3
 802f9ba:	f001 f908 	bl	8030bce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802f9be:	687b      	ldr	r3, [r7, #4]
 802f9c0:	2201      	movs	r2, #1
 802f9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802f9c6:	687b      	ldr	r3, [r7, #4]
 802f9c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802f9cc:	461a      	mov	r2, r3
 802f9ce:	687b      	ldr	r3, [r7, #4]
 802f9d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802f9d4:	687b      	ldr	r3, [r7, #4]
 802f9d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f9da:	f003 031f 	and.w	r3, r3, #31
 802f9de:	2b02      	cmp	r3, #2
 802f9e0:	d01a      	beq.n	802fa18 <USBD_LL_SetupStage+0x72>
 802f9e2:	2b02      	cmp	r3, #2
 802f9e4:	d822      	bhi.n	802fa2c <USBD_LL_SetupStage+0x86>
 802f9e6:	2b00      	cmp	r3, #0
 802f9e8:	d002      	beq.n	802f9f0 <USBD_LL_SetupStage+0x4a>
 802f9ea:	2b01      	cmp	r3, #1
 802f9ec:	d00a      	beq.n	802fa04 <USBD_LL_SetupStage+0x5e>
 802f9ee:	e01d      	b.n	802fa2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802f9f0:	687b      	ldr	r3, [r7, #4]
 802f9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f9f6:	4619      	mov	r1, r3
 802f9f8:	6878      	ldr	r0, [r7, #4]
 802f9fa:	f000 fb5f 	bl	80300bc <USBD_StdDevReq>
 802f9fe:	4603      	mov	r3, r0
 802fa00:	73fb      	strb	r3, [r7, #15]
      break;
 802fa02:	e020      	b.n	802fa46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802fa04:	687b      	ldr	r3, [r7, #4]
 802fa06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802fa0a:	4619      	mov	r1, r3
 802fa0c:	6878      	ldr	r0, [r7, #4]
 802fa0e:	f000 fbc7 	bl	80301a0 <USBD_StdItfReq>
 802fa12:	4603      	mov	r3, r0
 802fa14:	73fb      	strb	r3, [r7, #15]
      break;
 802fa16:	e016      	b.n	802fa46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802fa18:	687b      	ldr	r3, [r7, #4]
 802fa1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802fa1e:	4619      	mov	r1, r3
 802fa20:	6878      	ldr	r0, [r7, #4]
 802fa22:	f000 fc29 	bl	8030278 <USBD_StdEPReq>
 802fa26:	4603      	mov	r3, r0
 802fa28:	73fb      	strb	r3, [r7, #15]
      break;
 802fa2a:	e00c      	b.n	802fa46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802fa2c:	687b      	ldr	r3, [r7, #4]
 802fa2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802fa32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802fa36:	b2db      	uxtb	r3, r3
 802fa38:	4619      	mov	r1, r3
 802fa3a:	6878      	ldr	r0, [r7, #4]
 802fa3c:	f002 f84c 	bl	8031ad8 <USBD_LL_StallEP>
 802fa40:	4603      	mov	r3, r0
 802fa42:	73fb      	strb	r3, [r7, #15]
      break;
 802fa44:	bf00      	nop
  }

  return ret;
 802fa46:	7bfb      	ldrb	r3, [r7, #15]
}
 802fa48:	4618      	mov	r0, r3
 802fa4a:	3710      	adds	r7, #16
 802fa4c:	46bd      	mov	sp, r7
 802fa4e:	bd80      	pop	{r7, pc}

0802fa50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802fa50:	b580      	push	{r7, lr}
 802fa52:	b086      	sub	sp, #24
 802fa54:	af00      	add	r7, sp, #0
 802fa56:	60f8      	str	r0, [r7, #12]
 802fa58:	460b      	mov	r3, r1
 802fa5a:	607a      	str	r2, [r7, #4]
 802fa5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802fa5e:	2300      	movs	r3, #0
 802fa60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 802fa62:	7afb      	ldrb	r3, [r7, #11]
 802fa64:	2b00      	cmp	r3, #0
 802fa66:	d16e      	bne.n	802fb46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802fa68:	68fb      	ldr	r3, [r7, #12]
 802fa6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802fa6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802fa70:	68fb      	ldr	r3, [r7, #12]
 802fa72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802fa76:	2b03      	cmp	r3, #3
 802fa78:	f040 8098 	bne.w	802fbac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802fa7c:	693b      	ldr	r3, [r7, #16]
 802fa7e:	689a      	ldr	r2, [r3, #8]
 802fa80:	693b      	ldr	r3, [r7, #16]
 802fa82:	68db      	ldr	r3, [r3, #12]
 802fa84:	429a      	cmp	r2, r3
 802fa86:	d913      	bls.n	802fab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802fa88:	693b      	ldr	r3, [r7, #16]
 802fa8a:	689a      	ldr	r2, [r3, #8]
 802fa8c:	693b      	ldr	r3, [r7, #16]
 802fa8e:	68db      	ldr	r3, [r3, #12]
 802fa90:	1ad2      	subs	r2, r2, r3
 802fa92:	693b      	ldr	r3, [r7, #16]
 802fa94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802fa96:	693b      	ldr	r3, [r7, #16]
 802fa98:	68da      	ldr	r2, [r3, #12]
 802fa9a:	693b      	ldr	r3, [r7, #16]
 802fa9c:	689b      	ldr	r3, [r3, #8]
 802fa9e:	4293      	cmp	r3, r2
 802faa0:	bf28      	it	cs
 802faa2:	4613      	movcs	r3, r2
 802faa4:	461a      	mov	r2, r3
 802faa6:	6879      	ldr	r1, [r7, #4]
 802faa8:	68f8      	ldr	r0, [r7, #12]
 802faaa:	f001 f984 	bl	8030db6 <USBD_CtlContinueRx>
 802faae:	e07d      	b.n	802fbac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 802fab0:	68fb      	ldr	r3, [r7, #12]
 802fab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802fab6:	f003 031f 	and.w	r3, r3, #31
 802faba:	2b02      	cmp	r3, #2
 802fabc:	d014      	beq.n	802fae8 <USBD_LL_DataOutStage+0x98>
 802fabe:	2b02      	cmp	r3, #2
 802fac0:	d81d      	bhi.n	802fafe <USBD_LL_DataOutStage+0xae>
 802fac2:	2b00      	cmp	r3, #0
 802fac4:	d002      	beq.n	802facc <USBD_LL_DataOutStage+0x7c>
 802fac6:	2b01      	cmp	r3, #1
 802fac8:	d003      	beq.n	802fad2 <USBD_LL_DataOutStage+0x82>
 802faca:	e018      	b.n	802fafe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 802facc:	2300      	movs	r3, #0
 802face:	75bb      	strb	r3, [r7, #22]
            break;
 802fad0:	e018      	b.n	802fb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 802fad2:	68fb      	ldr	r3, [r7, #12]
 802fad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802fad8:	b2db      	uxtb	r3, r3
 802fada:	4619      	mov	r1, r3
 802fadc:	68f8      	ldr	r0, [r7, #12]
 802fade:	f000 fa5e 	bl	802ff9e <USBD_CoreFindIF>
 802fae2:	4603      	mov	r3, r0
 802fae4:	75bb      	strb	r3, [r7, #22]
            break;
 802fae6:	e00d      	b.n	802fb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802fae8:	68fb      	ldr	r3, [r7, #12]
 802faea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802faee:	b2db      	uxtb	r3, r3
 802faf0:	4619      	mov	r1, r3
 802faf2:	68f8      	ldr	r0, [r7, #12]
 802faf4:	f000 fa60 	bl	802ffb8 <USBD_CoreFindEP>
 802faf8:	4603      	mov	r3, r0
 802fafa:	75bb      	strb	r3, [r7, #22]
            break;
 802fafc:	e002      	b.n	802fb04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 802fafe:	2300      	movs	r3, #0
 802fb00:	75bb      	strb	r3, [r7, #22]
            break;
 802fb02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 802fb04:	7dbb      	ldrb	r3, [r7, #22]
 802fb06:	2b00      	cmp	r3, #0
 802fb08:	d119      	bne.n	802fb3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fb0a:	68fb      	ldr	r3, [r7, #12]
 802fb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb10:	b2db      	uxtb	r3, r3
 802fb12:	2b03      	cmp	r3, #3
 802fb14:	d113      	bne.n	802fb3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 802fb16:	7dba      	ldrb	r2, [r7, #22]
 802fb18:	68fb      	ldr	r3, [r7, #12]
 802fb1a:	32ae      	adds	r2, #174	; 0xae
 802fb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb20:	691b      	ldr	r3, [r3, #16]
 802fb22:	2b00      	cmp	r3, #0
 802fb24:	d00b      	beq.n	802fb3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 802fb26:	7dba      	ldrb	r2, [r7, #22]
 802fb28:	68fb      	ldr	r3, [r7, #12]
 802fb2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802fb2e:	7dba      	ldrb	r2, [r7, #22]
 802fb30:	68fb      	ldr	r3, [r7, #12]
 802fb32:	32ae      	adds	r2, #174	; 0xae
 802fb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb38:	691b      	ldr	r3, [r3, #16]
 802fb3a:	68f8      	ldr	r0, [r7, #12]
 802fb3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802fb3e:	68f8      	ldr	r0, [r7, #12]
 802fb40:	f001 f94a 	bl	8030dd8 <USBD_CtlSendStatus>
 802fb44:	e032      	b.n	802fbac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802fb46:	7afb      	ldrb	r3, [r7, #11]
 802fb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fb4c:	b2db      	uxtb	r3, r3
 802fb4e:	4619      	mov	r1, r3
 802fb50:	68f8      	ldr	r0, [r7, #12]
 802fb52:	f000 fa31 	bl	802ffb8 <USBD_CoreFindEP>
 802fb56:	4603      	mov	r3, r0
 802fb58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fb5a:	7dbb      	ldrb	r3, [r7, #22]
 802fb5c:	2bff      	cmp	r3, #255	; 0xff
 802fb5e:	d025      	beq.n	802fbac <USBD_LL_DataOutStage+0x15c>
 802fb60:	7dbb      	ldrb	r3, [r7, #22]
 802fb62:	2b00      	cmp	r3, #0
 802fb64:	d122      	bne.n	802fbac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fb66:	68fb      	ldr	r3, [r7, #12]
 802fb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb6c:	b2db      	uxtb	r3, r3
 802fb6e:	2b03      	cmp	r3, #3
 802fb70:	d117      	bne.n	802fba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 802fb72:	7dba      	ldrb	r2, [r7, #22]
 802fb74:	68fb      	ldr	r3, [r7, #12]
 802fb76:	32ae      	adds	r2, #174	; 0xae
 802fb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb7c:	699b      	ldr	r3, [r3, #24]
 802fb7e:	2b00      	cmp	r3, #0
 802fb80:	d00f      	beq.n	802fba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 802fb82:	7dba      	ldrb	r2, [r7, #22]
 802fb84:	68fb      	ldr	r3, [r7, #12]
 802fb86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 802fb8a:	7dba      	ldrb	r2, [r7, #22]
 802fb8c:	68fb      	ldr	r3, [r7, #12]
 802fb8e:	32ae      	adds	r2, #174	; 0xae
 802fb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb94:	699b      	ldr	r3, [r3, #24]
 802fb96:	7afa      	ldrb	r2, [r7, #11]
 802fb98:	4611      	mov	r1, r2
 802fb9a:	68f8      	ldr	r0, [r7, #12]
 802fb9c:	4798      	blx	r3
 802fb9e:	4603      	mov	r3, r0
 802fba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 802fba2:	7dfb      	ldrb	r3, [r7, #23]
 802fba4:	2b00      	cmp	r3, #0
 802fba6:	d001      	beq.n	802fbac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802fba8:	7dfb      	ldrb	r3, [r7, #23]
 802fbaa:	e000      	b.n	802fbae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 802fbac:	2300      	movs	r3, #0
}
 802fbae:	4618      	mov	r0, r3
 802fbb0:	3718      	adds	r7, #24
 802fbb2:	46bd      	mov	sp, r7
 802fbb4:	bd80      	pop	{r7, pc}

0802fbb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802fbb6:	b580      	push	{r7, lr}
 802fbb8:	b086      	sub	sp, #24
 802fbba:	af00      	add	r7, sp, #0
 802fbbc:	60f8      	str	r0, [r7, #12]
 802fbbe:	460b      	mov	r3, r1
 802fbc0:	607a      	str	r2, [r7, #4]
 802fbc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802fbc4:	7afb      	ldrb	r3, [r7, #11]
 802fbc6:	2b00      	cmp	r3, #0
 802fbc8:	d16f      	bne.n	802fcaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 802fbca:	68fb      	ldr	r3, [r7, #12]
 802fbcc:	3314      	adds	r3, #20
 802fbce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802fbd0:	68fb      	ldr	r3, [r7, #12]
 802fbd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802fbd6:	2b02      	cmp	r3, #2
 802fbd8:	d15a      	bne.n	802fc90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 802fbda:	693b      	ldr	r3, [r7, #16]
 802fbdc:	689a      	ldr	r2, [r3, #8]
 802fbde:	693b      	ldr	r3, [r7, #16]
 802fbe0:	68db      	ldr	r3, [r3, #12]
 802fbe2:	429a      	cmp	r2, r3
 802fbe4:	d914      	bls.n	802fc10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802fbe6:	693b      	ldr	r3, [r7, #16]
 802fbe8:	689a      	ldr	r2, [r3, #8]
 802fbea:	693b      	ldr	r3, [r7, #16]
 802fbec:	68db      	ldr	r3, [r3, #12]
 802fbee:	1ad2      	subs	r2, r2, r3
 802fbf0:	693b      	ldr	r3, [r7, #16]
 802fbf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802fbf4:	693b      	ldr	r3, [r7, #16]
 802fbf6:	689b      	ldr	r3, [r3, #8]
 802fbf8:	461a      	mov	r2, r3
 802fbfa:	6879      	ldr	r1, [r7, #4]
 802fbfc:	68f8      	ldr	r0, [r7, #12]
 802fbfe:	f001 f8ac 	bl	8030d5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802fc02:	2300      	movs	r3, #0
 802fc04:	2200      	movs	r2, #0
 802fc06:	2100      	movs	r1, #0
 802fc08:	68f8      	ldr	r0, [r7, #12]
 802fc0a:	f002 f80f 	bl	8031c2c <USBD_LL_PrepareReceive>
 802fc0e:	e03f      	b.n	802fc90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802fc10:	693b      	ldr	r3, [r7, #16]
 802fc12:	68da      	ldr	r2, [r3, #12]
 802fc14:	693b      	ldr	r3, [r7, #16]
 802fc16:	689b      	ldr	r3, [r3, #8]
 802fc18:	429a      	cmp	r2, r3
 802fc1a:	d11c      	bne.n	802fc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802fc1c:	693b      	ldr	r3, [r7, #16]
 802fc1e:	685a      	ldr	r2, [r3, #4]
 802fc20:	693b      	ldr	r3, [r7, #16]
 802fc22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802fc24:	429a      	cmp	r2, r3
 802fc26:	d316      	bcc.n	802fc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802fc28:	693b      	ldr	r3, [r7, #16]
 802fc2a:	685a      	ldr	r2, [r3, #4]
 802fc2c:	68fb      	ldr	r3, [r7, #12]
 802fc2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802fc32:	429a      	cmp	r2, r3
 802fc34:	d20f      	bcs.n	802fc56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802fc36:	2200      	movs	r2, #0
 802fc38:	2100      	movs	r1, #0
 802fc3a:	68f8      	ldr	r0, [r7, #12]
 802fc3c:	f001 f88d 	bl	8030d5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802fc40:	68fb      	ldr	r3, [r7, #12]
 802fc42:	2200      	movs	r2, #0
 802fc44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802fc48:	2300      	movs	r3, #0
 802fc4a:	2200      	movs	r2, #0
 802fc4c:	2100      	movs	r1, #0
 802fc4e:	68f8      	ldr	r0, [r7, #12]
 802fc50:	f001 ffec 	bl	8031c2c <USBD_LL_PrepareReceive>
 802fc54:	e01c      	b.n	802fc90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fc56:	68fb      	ldr	r3, [r7, #12]
 802fc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc5c:	b2db      	uxtb	r3, r3
 802fc5e:	2b03      	cmp	r3, #3
 802fc60:	d10f      	bne.n	802fc82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 802fc62:	68fb      	ldr	r3, [r7, #12]
 802fc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fc68:	68db      	ldr	r3, [r3, #12]
 802fc6a:	2b00      	cmp	r3, #0
 802fc6c:	d009      	beq.n	802fc82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802fc6e:	68fb      	ldr	r3, [r7, #12]
 802fc70:	2200      	movs	r2, #0
 802fc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802fc76:	68fb      	ldr	r3, [r7, #12]
 802fc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fc7c:	68db      	ldr	r3, [r3, #12]
 802fc7e:	68f8      	ldr	r0, [r7, #12]
 802fc80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802fc82:	2180      	movs	r1, #128	; 0x80
 802fc84:	68f8      	ldr	r0, [r7, #12]
 802fc86:	f001 ff27 	bl	8031ad8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802fc8a:	68f8      	ldr	r0, [r7, #12]
 802fc8c:	f001 f8b7 	bl	8030dfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802fc90:	68fb      	ldr	r3, [r7, #12]
 802fc92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802fc96:	2b00      	cmp	r3, #0
 802fc98:	d03a      	beq.n	802fd10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 802fc9a:	68f8      	ldr	r0, [r7, #12]
 802fc9c:	f7ff fe42 	bl	802f924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802fca0:	68fb      	ldr	r3, [r7, #12]
 802fca2:	2200      	movs	r2, #0
 802fca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802fca8:	e032      	b.n	802fd10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 802fcaa:	7afb      	ldrb	r3, [r7, #11]
 802fcac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802fcb0:	b2db      	uxtb	r3, r3
 802fcb2:	4619      	mov	r1, r3
 802fcb4:	68f8      	ldr	r0, [r7, #12]
 802fcb6:	f000 f97f 	bl	802ffb8 <USBD_CoreFindEP>
 802fcba:	4603      	mov	r3, r0
 802fcbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fcbe:	7dfb      	ldrb	r3, [r7, #23]
 802fcc0:	2bff      	cmp	r3, #255	; 0xff
 802fcc2:	d025      	beq.n	802fd10 <USBD_LL_DataInStage+0x15a>
 802fcc4:	7dfb      	ldrb	r3, [r7, #23]
 802fcc6:	2b00      	cmp	r3, #0
 802fcc8:	d122      	bne.n	802fd10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fcca:	68fb      	ldr	r3, [r7, #12]
 802fccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fcd0:	b2db      	uxtb	r3, r3
 802fcd2:	2b03      	cmp	r3, #3
 802fcd4:	d11c      	bne.n	802fd10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802fcd6:	7dfa      	ldrb	r2, [r7, #23]
 802fcd8:	68fb      	ldr	r3, [r7, #12]
 802fcda:	32ae      	adds	r2, #174	; 0xae
 802fcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fce0:	695b      	ldr	r3, [r3, #20]
 802fce2:	2b00      	cmp	r3, #0
 802fce4:	d014      	beq.n	802fd10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802fce6:	7dfa      	ldrb	r2, [r7, #23]
 802fce8:	68fb      	ldr	r3, [r7, #12]
 802fcea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 802fcee:	7dfa      	ldrb	r2, [r7, #23]
 802fcf0:	68fb      	ldr	r3, [r7, #12]
 802fcf2:	32ae      	adds	r2, #174	; 0xae
 802fcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fcf8:	695b      	ldr	r3, [r3, #20]
 802fcfa:	7afa      	ldrb	r2, [r7, #11]
 802fcfc:	4611      	mov	r1, r2
 802fcfe:	68f8      	ldr	r0, [r7, #12]
 802fd00:	4798      	blx	r3
 802fd02:	4603      	mov	r3, r0
 802fd04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 802fd06:	7dbb      	ldrb	r3, [r7, #22]
 802fd08:	2b00      	cmp	r3, #0
 802fd0a:	d001      	beq.n	802fd10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 802fd0c:	7dbb      	ldrb	r3, [r7, #22]
 802fd0e:	e000      	b.n	802fd12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 802fd10:	2300      	movs	r3, #0
}
 802fd12:	4618      	mov	r0, r3
 802fd14:	3718      	adds	r7, #24
 802fd16:	46bd      	mov	sp, r7
 802fd18:	bd80      	pop	{r7, pc}

0802fd1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802fd1a:	b580      	push	{r7, lr}
 802fd1c:	b084      	sub	sp, #16
 802fd1e:	af00      	add	r7, sp, #0
 802fd20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 802fd22:	2300      	movs	r3, #0
 802fd24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802fd26:	687b      	ldr	r3, [r7, #4]
 802fd28:	2201      	movs	r2, #1
 802fd2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802fd2e:	687b      	ldr	r3, [r7, #4]
 802fd30:	2200      	movs	r2, #0
 802fd32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802fd36:	687b      	ldr	r3, [r7, #4]
 802fd38:	2200      	movs	r2, #0
 802fd3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802fd3c:	687b      	ldr	r3, [r7, #4]
 802fd3e:	2200      	movs	r2, #0
 802fd40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 802fd44:	687b      	ldr	r3, [r7, #4]
 802fd46:	2200      	movs	r2, #0
 802fd48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 802fd4c:	687b      	ldr	r3, [r7, #4]
 802fd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fd52:	2b00      	cmp	r3, #0
 802fd54:	d014      	beq.n	802fd80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 802fd56:	687b      	ldr	r3, [r7, #4]
 802fd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fd5c:	685b      	ldr	r3, [r3, #4]
 802fd5e:	2b00      	cmp	r3, #0
 802fd60:	d00e      	beq.n	802fd80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 802fd62:	687b      	ldr	r3, [r7, #4]
 802fd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fd68:	685b      	ldr	r3, [r3, #4]
 802fd6a:	687a      	ldr	r2, [r7, #4]
 802fd6c:	6852      	ldr	r2, [r2, #4]
 802fd6e:	b2d2      	uxtb	r2, r2
 802fd70:	4611      	mov	r1, r2
 802fd72:	6878      	ldr	r0, [r7, #4]
 802fd74:	4798      	blx	r3
 802fd76:	4603      	mov	r3, r0
 802fd78:	2b00      	cmp	r3, #0
 802fd7a:	d001      	beq.n	802fd80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 802fd7c:	2303      	movs	r3, #3
 802fd7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802fd80:	2340      	movs	r3, #64	; 0x40
 802fd82:	2200      	movs	r2, #0
 802fd84:	2100      	movs	r1, #0
 802fd86:	6878      	ldr	r0, [r7, #4]
 802fd88:	f001 fe61 	bl	8031a4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802fd8c:	687b      	ldr	r3, [r7, #4]
 802fd8e:	2201      	movs	r2, #1
 802fd90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802fd94:	687b      	ldr	r3, [r7, #4]
 802fd96:	2240      	movs	r2, #64	; 0x40
 802fd98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802fd9c:	2340      	movs	r3, #64	; 0x40
 802fd9e:	2200      	movs	r2, #0
 802fda0:	2180      	movs	r1, #128	; 0x80
 802fda2:	6878      	ldr	r0, [r7, #4]
 802fda4:	f001 fe53 	bl	8031a4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802fda8:	687b      	ldr	r3, [r7, #4]
 802fdaa:	2201      	movs	r2, #1
 802fdac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802fdae:	687b      	ldr	r3, [r7, #4]
 802fdb0:	2240      	movs	r2, #64	; 0x40
 802fdb2:	621a      	str	r2, [r3, #32]

  return ret;
 802fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 802fdb6:	4618      	mov	r0, r3
 802fdb8:	3710      	adds	r7, #16
 802fdba:	46bd      	mov	sp, r7
 802fdbc:	bd80      	pop	{r7, pc}

0802fdbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802fdbe:	b480      	push	{r7}
 802fdc0:	b083      	sub	sp, #12
 802fdc2:	af00      	add	r7, sp, #0
 802fdc4:	6078      	str	r0, [r7, #4]
 802fdc6:	460b      	mov	r3, r1
 802fdc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802fdca:	687b      	ldr	r3, [r7, #4]
 802fdcc:	78fa      	ldrb	r2, [r7, #3]
 802fdce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802fdd0:	2300      	movs	r3, #0
}
 802fdd2:	4618      	mov	r0, r3
 802fdd4:	370c      	adds	r7, #12
 802fdd6:	46bd      	mov	sp, r7
 802fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fddc:	4770      	bx	lr

0802fdde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802fdde:	b480      	push	{r7}
 802fde0:	b083      	sub	sp, #12
 802fde2:	af00      	add	r7, sp, #0
 802fde4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802fde6:	687b      	ldr	r3, [r7, #4]
 802fde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fdec:	b2da      	uxtb	r2, r3
 802fdee:	687b      	ldr	r3, [r7, #4]
 802fdf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802fdf4:	687b      	ldr	r3, [r7, #4]
 802fdf6:	2204      	movs	r2, #4
 802fdf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802fdfc:	2300      	movs	r3, #0
}
 802fdfe:	4618      	mov	r0, r3
 802fe00:	370c      	adds	r7, #12
 802fe02:	46bd      	mov	sp, r7
 802fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fe08:	4770      	bx	lr

0802fe0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802fe0a:	b480      	push	{r7}
 802fe0c:	b083      	sub	sp, #12
 802fe0e:	af00      	add	r7, sp, #0
 802fe10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802fe12:	687b      	ldr	r3, [r7, #4]
 802fe14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fe18:	b2db      	uxtb	r3, r3
 802fe1a:	2b04      	cmp	r3, #4
 802fe1c:	d106      	bne.n	802fe2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802fe1e:	687b      	ldr	r3, [r7, #4]
 802fe20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 802fe24:	b2da      	uxtb	r2, r3
 802fe26:	687b      	ldr	r3, [r7, #4]
 802fe28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802fe2c:	2300      	movs	r3, #0
}
 802fe2e:	4618      	mov	r0, r3
 802fe30:	370c      	adds	r7, #12
 802fe32:	46bd      	mov	sp, r7
 802fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fe38:	4770      	bx	lr

0802fe3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802fe3a:	b580      	push	{r7, lr}
 802fe3c:	b082      	sub	sp, #8
 802fe3e:	af00      	add	r7, sp, #0
 802fe40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fe42:	687b      	ldr	r3, [r7, #4]
 802fe44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fe48:	b2db      	uxtb	r3, r3
 802fe4a:	2b03      	cmp	r3, #3
 802fe4c:	d110      	bne.n	802fe70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 802fe4e:	687b      	ldr	r3, [r7, #4]
 802fe50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe54:	2b00      	cmp	r3, #0
 802fe56:	d00b      	beq.n	802fe70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 802fe58:	687b      	ldr	r3, [r7, #4]
 802fe5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe5e:	69db      	ldr	r3, [r3, #28]
 802fe60:	2b00      	cmp	r3, #0
 802fe62:	d005      	beq.n	802fe70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 802fe64:	687b      	ldr	r3, [r7, #4]
 802fe66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe6a:	69db      	ldr	r3, [r3, #28]
 802fe6c:	6878      	ldr	r0, [r7, #4]
 802fe6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 802fe70:	2300      	movs	r3, #0
}
 802fe72:	4618      	mov	r0, r3
 802fe74:	3708      	adds	r7, #8
 802fe76:	46bd      	mov	sp, r7
 802fe78:	bd80      	pop	{r7, pc}

0802fe7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802fe7a:	b580      	push	{r7, lr}
 802fe7c:	b082      	sub	sp, #8
 802fe7e:	af00      	add	r7, sp, #0
 802fe80:	6078      	str	r0, [r7, #4]
 802fe82:	460b      	mov	r3, r1
 802fe84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802fe86:	687b      	ldr	r3, [r7, #4]
 802fe88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802fe8c:	687b      	ldr	r3, [r7, #4]
 802fe8e:	32ae      	adds	r2, #174	; 0xae
 802fe90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fe94:	2b00      	cmp	r3, #0
 802fe96:	d101      	bne.n	802fe9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 802fe98:	2303      	movs	r3, #3
 802fe9a:	e01c      	b.n	802fed6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fe9c:	687b      	ldr	r3, [r7, #4]
 802fe9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fea2:	b2db      	uxtb	r3, r3
 802fea4:	2b03      	cmp	r3, #3
 802fea6:	d115      	bne.n	802fed4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 802fea8:	687b      	ldr	r3, [r7, #4]
 802feaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802feae:	687b      	ldr	r3, [r7, #4]
 802feb0:	32ae      	adds	r2, #174	; 0xae
 802feb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802feb6:	6a1b      	ldr	r3, [r3, #32]
 802feb8:	2b00      	cmp	r3, #0
 802feba:	d00b      	beq.n	802fed4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 802febc:	687b      	ldr	r3, [r7, #4]
 802febe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802fec2:	687b      	ldr	r3, [r7, #4]
 802fec4:	32ae      	adds	r2, #174	; 0xae
 802fec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802feca:	6a1b      	ldr	r3, [r3, #32]
 802fecc:	78fa      	ldrb	r2, [r7, #3]
 802fece:	4611      	mov	r1, r2
 802fed0:	6878      	ldr	r0, [r7, #4]
 802fed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802fed4:	2300      	movs	r3, #0
}
 802fed6:	4618      	mov	r0, r3
 802fed8:	3708      	adds	r7, #8
 802feda:	46bd      	mov	sp, r7
 802fedc:	bd80      	pop	{r7, pc}

0802fede <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802fede:	b580      	push	{r7, lr}
 802fee0:	b082      	sub	sp, #8
 802fee2:	af00      	add	r7, sp, #0
 802fee4:	6078      	str	r0, [r7, #4]
 802fee6:	460b      	mov	r3, r1
 802fee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802feea:	687b      	ldr	r3, [r7, #4]
 802feec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802fef0:	687b      	ldr	r3, [r7, #4]
 802fef2:	32ae      	adds	r2, #174	; 0xae
 802fef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fef8:	2b00      	cmp	r3, #0
 802fefa:	d101      	bne.n	802ff00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 802fefc:	2303      	movs	r3, #3
 802fefe:	e01c      	b.n	802ff3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ff00:	687b      	ldr	r3, [r7, #4]
 802ff02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802ff06:	b2db      	uxtb	r3, r3
 802ff08:	2b03      	cmp	r3, #3
 802ff0a:	d115      	bne.n	802ff38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 802ff0c:	687b      	ldr	r3, [r7, #4]
 802ff0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ff12:	687b      	ldr	r3, [r7, #4]
 802ff14:	32ae      	adds	r2, #174	; 0xae
 802ff16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ff1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ff1c:	2b00      	cmp	r3, #0
 802ff1e:	d00b      	beq.n	802ff38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 802ff20:	687b      	ldr	r3, [r7, #4]
 802ff22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ff26:	687b      	ldr	r3, [r7, #4]
 802ff28:	32ae      	adds	r2, #174	; 0xae
 802ff2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ff2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ff30:	78fa      	ldrb	r2, [r7, #3]
 802ff32:	4611      	mov	r1, r2
 802ff34:	6878      	ldr	r0, [r7, #4]
 802ff36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802ff38:	2300      	movs	r3, #0
}
 802ff3a:	4618      	mov	r0, r3
 802ff3c:	3708      	adds	r7, #8
 802ff3e:	46bd      	mov	sp, r7
 802ff40:	bd80      	pop	{r7, pc}

0802ff42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802ff42:	b480      	push	{r7}
 802ff44:	b083      	sub	sp, #12
 802ff46:	af00      	add	r7, sp, #0
 802ff48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802ff4a:	2300      	movs	r3, #0
}
 802ff4c:	4618      	mov	r0, r3
 802ff4e:	370c      	adds	r7, #12
 802ff50:	46bd      	mov	sp, r7
 802ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ff56:	4770      	bx	lr

0802ff58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802ff58:	b580      	push	{r7, lr}
 802ff5a:	b084      	sub	sp, #16
 802ff5c:	af00      	add	r7, sp, #0
 802ff5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 802ff60:	2300      	movs	r3, #0
 802ff62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802ff64:	687b      	ldr	r3, [r7, #4]
 802ff66:	2201      	movs	r2, #1
 802ff68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802ff6c:	687b      	ldr	r3, [r7, #4]
 802ff6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ff72:	2b00      	cmp	r3, #0
 802ff74:	d00e      	beq.n	802ff94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802ff76:	687b      	ldr	r3, [r7, #4]
 802ff78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ff7c:	685b      	ldr	r3, [r3, #4]
 802ff7e:	687a      	ldr	r2, [r7, #4]
 802ff80:	6852      	ldr	r2, [r2, #4]
 802ff82:	b2d2      	uxtb	r2, r2
 802ff84:	4611      	mov	r1, r2
 802ff86:	6878      	ldr	r0, [r7, #4]
 802ff88:	4798      	blx	r3
 802ff8a:	4603      	mov	r3, r0
 802ff8c:	2b00      	cmp	r3, #0
 802ff8e:	d001      	beq.n	802ff94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 802ff90:	2303      	movs	r3, #3
 802ff92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802ff94:	7bfb      	ldrb	r3, [r7, #15]
}
 802ff96:	4618      	mov	r0, r3
 802ff98:	3710      	adds	r7, #16
 802ff9a:	46bd      	mov	sp, r7
 802ff9c:	bd80      	pop	{r7, pc}

0802ff9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802ff9e:	b480      	push	{r7}
 802ffa0:	b083      	sub	sp, #12
 802ffa2:	af00      	add	r7, sp, #0
 802ffa4:	6078      	str	r0, [r7, #4]
 802ffa6:	460b      	mov	r3, r1
 802ffa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802ffaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802ffac:	4618      	mov	r0, r3
 802ffae:	370c      	adds	r7, #12
 802ffb0:	46bd      	mov	sp, r7
 802ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ffb6:	4770      	bx	lr

0802ffb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802ffb8:	b480      	push	{r7}
 802ffba:	b083      	sub	sp, #12
 802ffbc:	af00      	add	r7, sp, #0
 802ffbe:	6078      	str	r0, [r7, #4]
 802ffc0:	460b      	mov	r3, r1
 802ffc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802ffc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802ffc6:	4618      	mov	r0, r3
 802ffc8:	370c      	adds	r7, #12
 802ffca:	46bd      	mov	sp, r7
 802ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ffd0:	4770      	bx	lr

0802ffd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 802ffd2:	b580      	push	{r7, lr}
 802ffd4:	b086      	sub	sp, #24
 802ffd6:	af00      	add	r7, sp, #0
 802ffd8:	6078      	str	r0, [r7, #4]
 802ffda:	460b      	mov	r3, r1
 802ffdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 802ffde:	687b      	ldr	r3, [r7, #4]
 802ffe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 802ffe2:	687b      	ldr	r3, [r7, #4]
 802ffe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 802ffe6:	2300      	movs	r3, #0
 802ffe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802ffea:	68fb      	ldr	r3, [r7, #12]
 802ffec:	885b      	ldrh	r3, [r3, #2]
 802ffee:	b29a      	uxth	r2, r3
 802fff0:	68fb      	ldr	r3, [r7, #12]
 802fff2:	781b      	ldrb	r3, [r3, #0]
 802fff4:	b29b      	uxth	r3, r3
 802fff6:	429a      	cmp	r2, r3
 802fff8:	d920      	bls.n	803003c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 802fffa:	68fb      	ldr	r3, [r7, #12]
 802fffc:	781b      	ldrb	r3, [r3, #0]
 802fffe:	b29b      	uxth	r3, r3
 8030000:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8030002:	e013      	b.n	803002c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8030004:	f107 030a 	add.w	r3, r7, #10
 8030008:	4619      	mov	r1, r3
 803000a:	6978      	ldr	r0, [r7, #20]
 803000c:	f000 f81b 	bl	8030046 <USBD_GetNextDesc>
 8030010:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8030012:	697b      	ldr	r3, [r7, #20]
 8030014:	785b      	ldrb	r3, [r3, #1]
 8030016:	2b05      	cmp	r3, #5
 8030018:	d108      	bne.n	803002c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803001a:	697b      	ldr	r3, [r7, #20]
 803001c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803001e:	693b      	ldr	r3, [r7, #16]
 8030020:	789b      	ldrb	r3, [r3, #2]
 8030022:	78fa      	ldrb	r2, [r7, #3]
 8030024:	429a      	cmp	r2, r3
 8030026:	d008      	beq.n	803003a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8030028:	2300      	movs	r3, #0
 803002a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803002c:	68fb      	ldr	r3, [r7, #12]
 803002e:	885b      	ldrh	r3, [r3, #2]
 8030030:	b29a      	uxth	r2, r3
 8030032:	897b      	ldrh	r3, [r7, #10]
 8030034:	429a      	cmp	r2, r3
 8030036:	d8e5      	bhi.n	8030004 <USBD_GetEpDesc+0x32>
 8030038:	e000      	b.n	803003c <USBD_GetEpDesc+0x6a>
          break;
 803003a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803003c:	693b      	ldr	r3, [r7, #16]
}
 803003e:	4618      	mov	r0, r3
 8030040:	3718      	adds	r7, #24
 8030042:	46bd      	mov	sp, r7
 8030044:	bd80      	pop	{r7, pc}

08030046 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8030046:	b480      	push	{r7}
 8030048:	b085      	sub	sp, #20
 803004a:	af00      	add	r7, sp, #0
 803004c:	6078      	str	r0, [r7, #4]
 803004e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8030050:	687b      	ldr	r3, [r7, #4]
 8030052:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8030054:	683b      	ldr	r3, [r7, #0]
 8030056:	881a      	ldrh	r2, [r3, #0]
 8030058:	68fb      	ldr	r3, [r7, #12]
 803005a:	781b      	ldrb	r3, [r3, #0]
 803005c:	b29b      	uxth	r3, r3
 803005e:	4413      	add	r3, r2
 8030060:	b29a      	uxth	r2, r3
 8030062:	683b      	ldr	r3, [r7, #0]
 8030064:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8030066:	68fb      	ldr	r3, [r7, #12]
 8030068:	781b      	ldrb	r3, [r3, #0]
 803006a:	461a      	mov	r2, r3
 803006c:	687b      	ldr	r3, [r7, #4]
 803006e:	4413      	add	r3, r2
 8030070:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8030072:	68fb      	ldr	r3, [r7, #12]
}
 8030074:	4618      	mov	r0, r3
 8030076:	3714      	adds	r7, #20
 8030078:	46bd      	mov	sp, r7
 803007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803007e:	4770      	bx	lr

08030080 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8030080:	b480      	push	{r7}
 8030082:	b087      	sub	sp, #28
 8030084:	af00      	add	r7, sp, #0
 8030086:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8030088:	687b      	ldr	r3, [r7, #4]
 803008a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803008c:	697b      	ldr	r3, [r7, #20]
 803008e:	781b      	ldrb	r3, [r3, #0]
 8030090:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8030092:	697b      	ldr	r3, [r7, #20]
 8030094:	3301      	adds	r3, #1
 8030096:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8030098:	697b      	ldr	r3, [r7, #20]
 803009a:	781b      	ldrb	r3, [r3, #0]
 803009c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803009e:	8a3b      	ldrh	r3, [r7, #16]
 80300a0:	021b      	lsls	r3, r3, #8
 80300a2:	b21a      	sxth	r2, r3
 80300a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80300a8:	4313      	orrs	r3, r2
 80300aa:	b21b      	sxth	r3, r3
 80300ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80300ae:	89fb      	ldrh	r3, [r7, #14]
}
 80300b0:	4618      	mov	r0, r3
 80300b2:	371c      	adds	r7, #28
 80300b4:	46bd      	mov	sp, r7
 80300b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300ba:	4770      	bx	lr

080300bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80300bc:	b580      	push	{r7, lr}
 80300be:	b084      	sub	sp, #16
 80300c0:	af00      	add	r7, sp, #0
 80300c2:	6078      	str	r0, [r7, #4]
 80300c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80300c6:	2300      	movs	r3, #0
 80300c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80300ca:	683b      	ldr	r3, [r7, #0]
 80300cc:	781b      	ldrb	r3, [r3, #0]
 80300ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80300d2:	2b40      	cmp	r3, #64	; 0x40
 80300d4:	d005      	beq.n	80300e2 <USBD_StdDevReq+0x26>
 80300d6:	2b40      	cmp	r3, #64	; 0x40
 80300d8:	d857      	bhi.n	803018a <USBD_StdDevReq+0xce>
 80300da:	2b00      	cmp	r3, #0
 80300dc:	d00f      	beq.n	80300fe <USBD_StdDevReq+0x42>
 80300de:	2b20      	cmp	r3, #32
 80300e0:	d153      	bne.n	803018a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80300e2:	687b      	ldr	r3, [r7, #4]
 80300e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80300e8:	687b      	ldr	r3, [r7, #4]
 80300ea:	32ae      	adds	r2, #174	; 0xae
 80300ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80300f0:	689b      	ldr	r3, [r3, #8]
 80300f2:	6839      	ldr	r1, [r7, #0]
 80300f4:	6878      	ldr	r0, [r7, #4]
 80300f6:	4798      	blx	r3
 80300f8:	4603      	mov	r3, r0
 80300fa:	73fb      	strb	r3, [r7, #15]
      break;
 80300fc:	e04a      	b.n	8030194 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80300fe:	683b      	ldr	r3, [r7, #0]
 8030100:	785b      	ldrb	r3, [r3, #1]
 8030102:	2b09      	cmp	r3, #9
 8030104:	d83b      	bhi.n	803017e <USBD_StdDevReq+0xc2>
 8030106:	a201      	add	r2, pc, #4	; (adr r2, 803010c <USBD_StdDevReq+0x50>)
 8030108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803010c:	08030161 	.word	0x08030161
 8030110:	08030175 	.word	0x08030175
 8030114:	0803017f 	.word	0x0803017f
 8030118:	0803016b 	.word	0x0803016b
 803011c:	0803017f 	.word	0x0803017f
 8030120:	0803013f 	.word	0x0803013f
 8030124:	08030135 	.word	0x08030135
 8030128:	0803017f 	.word	0x0803017f
 803012c:	08030157 	.word	0x08030157
 8030130:	08030149 	.word	0x08030149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8030134:	6839      	ldr	r1, [r7, #0]
 8030136:	6878      	ldr	r0, [r7, #4]
 8030138:	f000 fa3c 	bl	80305b4 <USBD_GetDescriptor>
          break;
 803013c:	e024      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803013e:	6839      	ldr	r1, [r7, #0]
 8030140:	6878      	ldr	r0, [r7, #4]
 8030142:	f000 fba1 	bl	8030888 <USBD_SetAddress>
          break;
 8030146:	e01f      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8030148:	6839      	ldr	r1, [r7, #0]
 803014a:	6878      	ldr	r0, [r7, #4]
 803014c:	f000 fbe0 	bl	8030910 <USBD_SetConfig>
 8030150:	4603      	mov	r3, r0
 8030152:	73fb      	strb	r3, [r7, #15]
          break;
 8030154:	e018      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8030156:	6839      	ldr	r1, [r7, #0]
 8030158:	6878      	ldr	r0, [r7, #4]
 803015a:	f000 fc83 	bl	8030a64 <USBD_GetConfig>
          break;
 803015e:	e013      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8030160:	6839      	ldr	r1, [r7, #0]
 8030162:	6878      	ldr	r0, [r7, #4]
 8030164:	f000 fcb4 	bl	8030ad0 <USBD_GetStatus>
          break;
 8030168:	e00e      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803016a:	6839      	ldr	r1, [r7, #0]
 803016c:	6878      	ldr	r0, [r7, #4]
 803016e:	f000 fce3 	bl	8030b38 <USBD_SetFeature>
          break;
 8030172:	e009      	b.n	8030188 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8030174:	6839      	ldr	r1, [r7, #0]
 8030176:	6878      	ldr	r0, [r7, #4]
 8030178:	f000 fd07 	bl	8030b8a <USBD_ClrFeature>
          break;
 803017c:	e004      	b.n	8030188 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803017e:	6839      	ldr	r1, [r7, #0]
 8030180:	6878      	ldr	r0, [r7, #4]
 8030182:	f000 fd5e 	bl	8030c42 <USBD_CtlError>
          break;
 8030186:	bf00      	nop
      }
      break;
 8030188:	e004      	b.n	8030194 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803018a:	6839      	ldr	r1, [r7, #0]
 803018c:	6878      	ldr	r0, [r7, #4]
 803018e:	f000 fd58 	bl	8030c42 <USBD_CtlError>
      break;
 8030192:	bf00      	nop
  }

  return ret;
 8030194:	7bfb      	ldrb	r3, [r7, #15]
}
 8030196:	4618      	mov	r0, r3
 8030198:	3710      	adds	r7, #16
 803019a:	46bd      	mov	sp, r7
 803019c:	bd80      	pop	{r7, pc}
 803019e:	bf00      	nop

080301a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80301a0:	b580      	push	{r7, lr}
 80301a2:	b084      	sub	sp, #16
 80301a4:	af00      	add	r7, sp, #0
 80301a6:	6078      	str	r0, [r7, #4]
 80301a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80301aa:	2300      	movs	r3, #0
 80301ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80301ae:	683b      	ldr	r3, [r7, #0]
 80301b0:	781b      	ldrb	r3, [r3, #0]
 80301b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80301b6:	2b40      	cmp	r3, #64	; 0x40
 80301b8:	d005      	beq.n	80301c6 <USBD_StdItfReq+0x26>
 80301ba:	2b40      	cmp	r3, #64	; 0x40
 80301bc:	d852      	bhi.n	8030264 <USBD_StdItfReq+0xc4>
 80301be:	2b00      	cmp	r3, #0
 80301c0:	d001      	beq.n	80301c6 <USBD_StdItfReq+0x26>
 80301c2:	2b20      	cmp	r3, #32
 80301c4:	d14e      	bne.n	8030264 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80301cc:	b2db      	uxtb	r3, r3
 80301ce:	3b01      	subs	r3, #1
 80301d0:	2b02      	cmp	r3, #2
 80301d2:	d840      	bhi.n	8030256 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80301d4:	683b      	ldr	r3, [r7, #0]
 80301d6:	889b      	ldrh	r3, [r3, #4]
 80301d8:	b2db      	uxtb	r3, r3
 80301da:	2b01      	cmp	r3, #1
 80301dc:	d836      	bhi.n	803024c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80301de:	683b      	ldr	r3, [r7, #0]
 80301e0:	889b      	ldrh	r3, [r3, #4]
 80301e2:	b2db      	uxtb	r3, r3
 80301e4:	4619      	mov	r1, r3
 80301e6:	6878      	ldr	r0, [r7, #4]
 80301e8:	f7ff fed9 	bl	802ff9e <USBD_CoreFindIF>
 80301ec:	4603      	mov	r3, r0
 80301ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80301f0:	7bbb      	ldrb	r3, [r7, #14]
 80301f2:	2bff      	cmp	r3, #255	; 0xff
 80301f4:	d01d      	beq.n	8030232 <USBD_StdItfReq+0x92>
 80301f6:	7bbb      	ldrb	r3, [r7, #14]
 80301f8:	2b00      	cmp	r3, #0
 80301fa:	d11a      	bne.n	8030232 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80301fc:	7bba      	ldrb	r2, [r7, #14]
 80301fe:	687b      	ldr	r3, [r7, #4]
 8030200:	32ae      	adds	r2, #174	; 0xae
 8030202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030206:	689b      	ldr	r3, [r3, #8]
 8030208:	2b00      	cmp	r3, #0
 803020a:	d00f      	beq.n	803022c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803020c:	7bba      	ldrb	r2, [r7, #14]
 803020e:	687b      	ldr	r3, [r7, #4]
 8030210:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8030214:	7bba      	ldrb	r2, [r7, #14]
 8030216:	687b      	ldr	r3, [r7, #4]
 8030218:	32ae      	adds	r2, #174	; 0xae
 803021a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803021e:	689b      	ldr	r3, [r3, #8]
 8030220:	6839      	ldr	r1, [r7, #0]
 8030222:	6878      	ldr	r0, [r7, #4]
 8030224:	4798      	blx	r3
 8030226:	4603      	mov	r3, r0
 8030228:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803022a:	e004      	b.n	8030236 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803022c:	2303      	movs	r3, #3
 803022e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8030230:	e001      	b.n	8030236 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8030232:	2303      	movs	r3, #3
 8030234:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8030236:	683b      	ldr	r3, [r7, #0]
 8030238:	88db      	ldrh	r3, [r3, #6]
 803023a:	2b00      	cmp	r3, #0
 803023c:	d110      	bne.n	8030260 <USBD_StdItfReq+0xc0>
 803023e:	7bfb      	ldrb	r3, [r7, #15]
 8030240:	2b00      	cmp	r3, #0
 8030242:	d10d      	bne.n	8030260 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8030244:	6878      	ldr	r0, [r7, #4]
 8030246:	f000 fdc7 	bl	8030dd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803024a:	e009      	b.n	8030260 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803024c:	6839      	ldr	r1, [r7, #0]
 803024e:	6878      	ldr	r0, [r7, #4]
 8030250:	f000 fcf7 	bl	8030c42 <USBD_CtlError>
          break;
 8030254:	e004      	b.n	8030260 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8030256:	6839      	ldr	r1, [r7, #0]
 8030258:	6878      	ldr	r0, [r7, #4]
 803025a:	f000 fcf2 	bl	8030c42 <USBD_CtlError>
          break;
 803025e:	e000      	b.n	8030262 <USBD_StdItfReq+0xc2>
          break;
 8030260:	bf00      	nop
      }
      break;
 8030262:	e004      	b.n	803026e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8030264:	6839      	ldr	r1, [r7, #0]
 8030266:	6878      	ldr	r0, [r7, #4]
 8030268:	f000 fceb 	bl	8030c42 <USBD_CtlError>
      break;
 803026c:	bf00      	nop
  }

  return ret;
 803026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030270:	4618      	mov	r0, r3
 8030272:	3710      	adds	r7, #16
 8030274:	46bd      	mov	sp, r7
 8030276:	bd80      	pop	{r7, pc}

08030278 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030278:	b580      	push	{r7, lr}
 803027a:	b084      	sub	sp, #16
 803027c:	af00      	add	r7, sp, #0
 803027e:	6078      	str	r0, [r7, #4]
 8030280:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8030282:	2300      	movs	r3, #0
 8030284:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8030286:	683b      	ldr	r3, [r7, #0]
 8030288:	889b      	ldrh	r3, [r3, #4]
 803028a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803028c:	683b      	ldr	r3, [r7, #0]
 803028e:	781b      	ldrb	r3, [r3, #0]
 8030290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8030294:	2b40      	cmp	r3, #64	; 0x40
 8030296:	d007      	beq.n	80302a8 <USBD_StdEPReq+0x30>
 8030298:	2b40      	cmp	r3, #64	; 0x40
 803029a:	f200 817f 	bhi.w	803059c <USBD_StdEPReq+0x324>
 803029e:	2b00      	cmp	r3, #0
 80302a0:	d02a      	beq.n	80302f8 <USBD_StdEPReq+0x80>
 80302a2:	2b20      	cmp	r3, #32
 80302a4:	f040 817a 	bne.w	803059c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80302a8:	7bbb      	ldrb	r3, [r7, #14]
 80302aa:	4619      	mov	r1, r3
 80302ac:	6878      	ldr	r0, [r7, #4]
 80302ae:	f7ff fe83 	bl	802ffb8 <USBD_CoreFindEP>
 80302b2:	4603      	mov	r3, r0
 80302b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80302b6:	7b7b      	ldrb	r3, [r7, #13]
 80302b8:	2bff      	cmp	r3, #255	; 0xff
 80302ba:	f000 8174 	beq.w	80305a6 <USBD_StdEPReq+0x32e>
 80302be:	7b7b      	ldrb	r3, [r7, #13]
 80302c0:	2b00      	cmp	r3, #0
 80302c2:	f040 8170 	bne.w	80305a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80302c6:	7b7a      	ldrb	r2, [r7, #13]
 80302c8:	687b      	ldr	r3, [r7, #4]
 80302ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80302ce:	7b7a      	ldrb	r2, [r7, #13]
 80302d0:	687b      	ldr	r3, [r7, #4]
 80302d2:	32ae      	adds	r2, #174	; 0xae
 80302d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80302d8:	689b      	ldr	r3, [r3, #8]
 80302da:	2b00      	cmp	r3, #0
 80302dc:	f000 8163 	beq.w	80305a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80302e0:	7b7a      	ldrb	r2, [r7, #13]
 80302e2:	687b      	ldr	r3, [r7, #4]
 80302e4:	32ae      	adds	r2, #174	; 0xae
 80302e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80302ea:	689b      	ldr	r3, [r3, #8]
 80302ec:	6839      	ldr	r1, [r7, #0]
 80302ee:	6878      	ldr	r0, [r7, #4]
 80302f0:	4798      	blx	r3
 80302f2:	4603      	mov	r3, r0
 80302f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80302f6:	e156      	b.n	80305a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80302f8:	683b      	ldr	r3, [r7, #0]
 80302fa:	785b      	ldrb	r3, [r3, #1]
 80302fc:	2b03      	cmp	r3, #3
 80302fe:	d008      	beq.n	8030312 <USBD_StdEPReq+0x9a>
 8030300:	2b03      	cmp	r3, #3
 8030302:	f300 8145 	bgt.w	8030590 <USBD_StdEPReq+0x318>
 8030306:	2b00      	cmp	r3, #0
 8030308:	f000 809b 	beq.w	8030442 <USBD_StdEPReq+0x1ca>
 803030c:	2b01      	cmp	r3, #1
 803030e:	d03c      	beq.n	803038a <USBD_StdEPReq+0x112>
 8030310:	e13e      	b.n	8030590 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030318:	b2db      	uxtb	r3, r3
 803031a:	2b02      	cmp	r3, #2
 803031c:	d002      	beq.n	8030324 <USBD_StdEPReq+0xac>
 803031e:	2b03      	cmp	r3, #3
 8030320:	d016      	beq.n	8030350 <USBD_StdEPReq+0xd8>
 8030322:	e02c      	b.n	803037e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8030324:	7bbb      	ldrb	r3, [r7, #14]
 8030326:	2b00      	cmp	r3, #0
 8030328:	d00d      	beq.n	8030346 <USBD_StdEPReq+0xce>
 803032a:	7bbb      	ldrb	r3, [r7, #14]
 803032c:	2b80      	cmp	r3, #128	; 0x80
 803032e:	d00a      	beq.n	8030346 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8030330:	7bbb      	ldrb	r3, [r7, #14]
 8030332:	4619      	mov	r1, r3
 8030334:	6878      	ldr	r0, [r7, #4]
 8030336:	f001 fbcf 	bl	8031ad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803033a:	2180      	movs	r1, #128	; 0x80
 803033c:	6878      	ldr	r0, [r7, #4]
 803033e:	f001 fbcb 	bl	8031ad8 <USBD_LL_StallEP>
 8030342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8030344:	e020      	b.n	8030388 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8030346:	6839      	ldr	r1, [r7, #0]
 8030348:	6878      	ldr	r0, [r7, #4]
 803034a:	f000 fc7a 	bl	8030c42 <USBD_CtlError>
              break;
 803034e:	e01b      	b.n	8030388 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8030350:	683b      	ldr	r3, [r7, #0]
 8030352:	885b      	ldrh	r3, [r3, #2]
 8030354:	2b00      	cmp	r3, #0
 8030356:	d10e      	bne.n	8030376 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8030358:	7bbb      	ldrb	r3, [r7, #14]
 803035a:	2b00      	cmp	r3, #0
 803035c:	d00b      	beq.n	8030376 <USBD_StdEPReq+0xfe>
 803035e:	7bbb      	ldrb	r3, [r7, #14]
 8030360:	2b80      	cmp	r3, #128	; 0x80
 8030362:	d008      	beq.n	8030376 <USBD_StdEPReq+0xfe>
 8030364:	683b      	ldr	r3, [r7, #0]
 8030366:	88db      	ldrh	r3, [r3, #6]
 8030368:	2b00      	cmp	r3, #0
 803036a:	d104      	bne.n	8030376 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803036c:	7bbb      	ldrb	r3, [r7, #14]
 803036e:	4619      	mov	r1, r3
 8030370:	6878      	ldr	r0, [r7, #4]
 8030372:	f001 fbb1 	bl	8031ad8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8030376:	6878      	ldr	r0, [r7, #4]
 8030378:	f000 fd2e 	bl	8030dd8 <USBD_CtlSendStatus>

              break;
 803037c:	e004      	b.n	8030388 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803037e:	6839      	ldr	r1, [r7, #0]
 8030380:	6878      	ldr	r0, [r7, #4]
 8030382:	f000 fc5e 	bl	8030c42 <USBD_CtlError>
              break;
 8030386:	bf00      	nop
          }
          break;
 8030388:	e107      	b.n	803059a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803038a:	687b      	ldr	r3, [r7, #4]
 803038c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030390:	b2db      	uxtb	r3, r3
 8030392:	2b02      	cmp	r3, #2
 8030394:	d002      	beq.n	803039c <USBD_StdEPReq+0x124>
 8030396:	2b03      	cmp	r3, #3
 8030398:	d016      	beq.n	80303c8 <USBD_StdEPReq+0x150>
 803039a:	e04b      	b.n	8030434 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803039c:	7bbb      	ldrb	r3, [r7, #14]
 803039e:	2b00      	cmp	r3, #0
 80303a0:	d00d      	beq.n	80303be <USBD_StdEPReq+0x146>
 80303a2:	7bbb      	ldrb	r3, [r7, #14]
 80303a4:	2b80      	cmp	r3, #128	; 0x80
 80303a6:	d00a      	beq.n	80303be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80303a8:	7bbb      	ldrb	r3, [r7, #14]
 80303aa:	4619      	mov	r1, r3
 80303ac:	6878      	ldr	r0, [r7, #4]
 80303ae:	f001 fb93 	bl	8031ad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80303b2:	2180      	movs	r1, #128	; 0x80
 80303b4:	6878      	ldr	r0, [r7, #4]
 80303b6:	f001 fb8f 	bl	8031ad8 <USBD_LL_StallEP>
 80303ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80303bc:	e040      	b.n	8030440 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80303be:	6839      	ldr	r1, [r7, #0]
 80303c0:	6878      	ldr	r0, [r7, #4]
 80303c2:	f000 fc3e 	bl	8030c42 <USBD_CtlError>
              break;
 80303c6:	e03b      	b.n	8030440 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80303c8:	683b      	ldr	r3, [r7, #0]
 80303ca:	885b      	ldrh	r3, [r3, #2]
 80303cc:	2b00      	cmp	r3, #0
 80303ce:	d136      	bne.n	803043e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80303d0:	7bbb      	ldrb	r3, [r7, #14]
 80303d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80303d6:	2b00      	cmp	r3, #0
 80303d8:	d004      	beq.n	80303e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80303da:	7bbb      	ldrb	r3, [r7, #14]
 80303dc:	4619      	mov	r1, r3
 80303de:	6878      	ldr	r0, [r7, #4]
 80303e0:	f001 fb99 	bl	8031b16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80303e4:	6878      	ldr	r0, [r7, #4]
 80303e6:	f000 fcf7 	bl	8030dd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80303ea:	7bbb      	ldrb	r3, [r7, #14]
 80303ec:	4619      	mov	r1, r3
 80303ee:	6878      	ldr	r0, [r7, #4]
 80303f0:	f7ff fde2 	bl	802ffb8 <USBD_CoreFindEP>
 80303f4:	4603      	mov	r3, r0
 80303f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80303f8:	7b7b      	ldrb	r3, [r7, #13]
 80303fa:	2bff      	cmp	r3, #255	; 0xff
 80303fc:	d01f      	beq.n	803043e <USBD_StdEPReq+0x1c6>
 80303fe:	7b7b      	ldrb	r3, [r7, #13]
 8030400:	2b00      	cmp	r3, #0
 8030402:	d11c      	bne.n	803043e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8030404:	7b7a      	ldrb	r2, [r7, #13]
 8030406:	687b      	ldr	r3, [r7, #4]
 8030408:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803040c:	7b7a      	ldrb	r2, [r7, #13]
 803040e:	687b      	ldr	r3, [r7, #4]
 8030410:	32ae      	adds	r2, #174	; 0xae
 8030412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030416:	689b      	ldr	r3, [r3, #8]
 8030418:	2b00      	cmp	r3, #0
 803041a:	d010      	beq.n	803043e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803041c:	7b7a      	ldrb	r2, [r7, #13]
 803041e:	687b      	ldr	r3, [r7, #4]
 8030420:	32ae      	adds	r2, #174	; 0xae
 8030422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8030426:	689b      	ldr	r3, [r3, #8]
 8030428:	6839      	ldr	r1, [r7, #0]
 803042a:	6878      	ldr	r0, [r7, #4]
 803042c:	4798      	blx	r3
 803042e:	4603      	mov	r3, r0
 8030430:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8030432:	e004      	b.n	803043e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8030434:	6839      	ldr	r1, [r7, #0]
 8030436:	6878      	ldr	r0, [r7, #4]
 8030438:	f000 fc03 	bl	8030c42 <USBD_CtlError>
              break;
 803043c:	e000      	b.n	8030440 <USBD_StdEPReq+0x1c8>
              break;
 803043e:	bf00      	nop
          }
          break;
 8030440:	e0ab      	b.n	803059a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8030442:	687b      	ldr	r3, [r7, #4]
 8030444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030448:	b2db      	uxtb	r3, r3
 803044a:	2b02      	cmp	r3, #2
 803044c:	d002      	beq.n	8030454 <USBD_StdEPReq+0x1dc>
 803044e:	2b03      	cmp	r3, #3
 8030450:	d032      	beq.n	80304b8 <USBD_StdEPReq+0x240>
 8030452:	e097      	b.n	8030584 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8030454:	7bbb      	ldrb	r3, [r7, #14]
 8030456:	2b00      	cmp	r3, #0
 8030458:	d007      	beq.n	803046a <USBD_StdEPReq+0x1f2>
 803045a:	7bbb      	ldrb	r3, [r7, #14]
 803045c:	2b80      	cmp	r3, #128	; 0x80
 803045e:	d004      	beq.n	803046a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8030460:	6839      	ldr	r1, [r7, #0]
 8030462:	6878      	ldr	r0, [r7, #4]
 8030464:	f000 fbed 	bl	8030c42 <USBD_CtlError>
                break;
 8030468:	e091      	b.n	803058e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803046a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803046e:	2b00      	cmp	r3, #0
 8030470:	da0b      	bge.n	803048a <USBD_StdEPReq+0x212>
 8030472:	7bbb      	ldrb	r3, [r7, #14]
 8030474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8030478:	4613      	mov	r3, r2
 803047a:	009b      	lsls	r3, r3, #2
 803047c:	4413      	add	r3, r2
 803047e:	009b      	lsls	r3, r3, #2
 8030480:	3310      	adds	r3, #16
 8030482:	687a      	ldr	r2, [r7, #4]
 8030484:	4413      	add	r3, r2
 8030486:	3304      	adds	r3, #4
 8030488:	e00b      	b.n	80304a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803048a:	7bbb      	ldrb	r3, [r7, #14]
 803048c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8030490:	4613      	mov	r3, r2
 8030492:	009b      	lsls	r3, r3, #2
 8030494:	4413      	add	r3, r2
 8030496:	009b      	lsls	r3, r3, #2
 8030498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803049c:	687a      	ldr	r2, [r7, #4]
 803049e:	4413      	add	r3, r2
 80304a0:	3304      	adds	r3, #4
 80304a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80304a4:	68bb      	ldr	r3, [r7, #8]
 80304a6:	2200      	movs	r2, #0
 80304a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80304aa:	68bb      	ldr	r3, [r7, #8]
 80304ac:	2202      	movs	r2, #2
 80304ae:	4619      	mov	r1, r3
 80304b0:	6878      	ldr	r0, [r7, #4]
 80304b2:	f000 fc37 	bl	8030d24 <USBD_CtlSendData>
              break;
 80304b6:	e06a      	b.n	803058e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80304b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80304bc:	2b00      	cmp	r3, #0
 80304be:	da11      	bge.n	80304e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80304c0:	7bbb      	ldrb	r3, [r7, #14]
 80304c2:	f003 020f 	and.w	r2, r3, #15
 80304c6:	6879      	ldr	r1, [r7, #4]
 80304c8:	4613      	mov	r3, r2
 80304ca:	009b      	lsls	r3, r3, #2
 80304cc:	4413      	add	r3, r2
 80304ce:	009b      	lsls	r3, r3, #2
 80304d0:	440b      	add	r3, r1
 80304d2:	3324      	adds	r3, #36	; 0x24
 80304d4:	881b      	ldrh	r3, [r3, #0]
 80304d6:	2b00      	cmp	r3, #0
 80304d8:	d117      	bne.n	803050a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80304da:	6839      	ldr	r1, [r7, #0]
 80304dc:	6878      	ldr	r0, [r7, #4]
 80304de:	f000 fbb0 	bl	8030c42 <USBD_CtlError>
                  break;
 80304e2:	e054      	b.n	803058e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80304e4:	7bbb      	ldrb	r3, [r7, #14]
 80304e6:	f003 020f 	and.w	r2, r3, #15
 80304ea:	6879      	ldr	r1, [r7, #4]
 80304ec:	4613      	mov	r3, r2
 80304ee:	009b      	lsls	r3, r3, #2
 80304f0:	4413      	add	r3, r2
 80304f2:	009b      	lsls	r3, r3, #2
 80304f4:	440b      	add	r3, r1
 80304f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80304fa:	881b      	ldrh	r3, [r3, #0]
 80304fc:	2b00      	cmp	r3, #0
 80304fe:	d104      	bne.n	803050a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8030500:	6839      	ldr	r1, [r7, #0]
 8030502:	6878      	ldr	r0, [r7, #4]
 8030504:	f000 fb9d 	bl	8030c42 <USBD_CtlError>
                  break;
 8030508:	e041      	b.n	803058e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803050a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803050e:	2b00      	cmp	r3, #0
 8030510:	da0b      	bge.n	803052a <USBD_StdEPReq+0x2b2>
 8030512:	7bbb      	ldrb	r3, [r7, #14]
 8030514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8030518:	4613      	mov	r3, r2
 803051a:	009b      	lsls	r3, r3, #2
 803051c:	4413      	add	r3, r2
 803051e:	009b      	lsls	r3, r3, #2
 8030520:	3310      	adds	r3, #16
 8030522:	687a      	ldr	r2, [r7, #4]
 8030524:	4413      	add	r3, r2
 8030526:	3304      	adds	r3, #4
 8030528:	e00b      	b.n	8030542 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803052a:	7bbb      	ldrb	r3, [r7, #14]
 803052c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8030530:	4613      	mov	r3, r2
 8030532:	009b      	lsls	r3, r3, #2
 8030534:	4413      	add	r3, r2
 8030536:	009b      	lsls	r3, r3, #2
 8030538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803053c:	687a      	ldr	r2, [r7, #4]
 803053e:	4413      	add	r3, r2
 8030540:	3304      	adds	r3, #4
 8030542:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8030544:	7bbb      	ldrb	r3, [r7, #14]
 8030546:	2b00      	cmp	r3, #0
 8030548:	d002      	beq.n	8030550 <USBD_StdEPReq+0x2d8>
 803054a:	7bbb      	ldrb	r3, [r7, #14]
 803054c:	2b80      	cmp	r3, #128	; 0x80
 803054e:	d103      	bne.n	8030558 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8030550:	68bb      	ldr	r3, [r7, #8]
 8030552:	2200      	movs	r2, #0
 8030554:	601a      	str	r2, [r3, #0]
 8030556:	e00e      	b.n	8030576 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8030558:	7bbb      	ldrb	r3, [r7, #14]
 803055a:	4619      	mov	r1, r3
 803055c:	6878      	ldr	r0, [r7, #4]
 803055e:	f001 faf9 	bl	8031b54 <USBD_LL_IsStallEP>
 8030562:	4603      	mov	r3, r0
 8030564:	2b00      	cmp	r3, #0
 8030566:	d003      	beq.n	8030570 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8030568:	68bb      	ldr	r3, [r7, #8]
 803056a:	2201      	movs	r2, #1
 803056c:	601a      	str	r2, [r3, #0]
 803056e:	e002      	b.n	8030576 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8030570:	68bb      	ldr	r3, [r7, #8]
 8030572:	2200      	movs	r2, #0
 8030574:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8030576:	68bb      	ldr	r3, [r7, #8]
 8030578:	2202      	movs	r2, #2
 803057a:	4619      	mov	r1, r3
 803057c:	6878      	ldr	r0, [r7, #4]
 803057e:	f000 fbd1 	bl	8030d24 <USBD_CtlSendData>
              break;
 8030582:	e004      	b.n	803058e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8030584:	6839      	ldr	r1, [r7, #0]
 8030586:	6878      	ldr	r0, [r7, #4]
 8030588:	f000 fb5b 	bl	8030c42 <USBD_CtlError>
              break;
 803058c:	bf00      	nop
          }
          break;
 803058e:	e004      	b.n	803059a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8030590:	6839      	ldr	r1, [r7, #0]
 8030592:	6878      	ldr	r0, [r7, #4]
 8030594:	f000 fb55 	bl	8030c42 <USBD_CtlError>
          break;
 8030598:	bf00      	nop
      }
      break;
 803059a:	e005      	b.n	80305a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803059c:	6839      	ldr	r1, [r7, #0]
 803059e:	6878      	ldr	r0, [r7, #4]
 80305a0:	f000 fb4f 	bl	8030c42 <USBD_CtlError>
      break;
 80305a4:	e000      	b.n	80305a8 <USBD_StdEPReq+0x330>
      break;
 80305a6:	bf00      	nop
  }

  return ret;
 80305a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80305aa:	4618      	mov	r0, r3
 80305ac:	3710      	adds	r7, #16
 80305ae:	46bd      	mov	sp, r7
 80305b0:	bd80      	pop	{r7, pc}
	...

080305b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80305b4:	b580      	push	{r7, lr}
 80305b6:	b084      	sub	sp, #16
 80305b8:	af00      	add	r7, sp, #0
 80305ba:	6078      	str	r0, [r7, #4]
 80305bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80305be:	2300      	movs	r3, #0
 80305c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80305c2:	2300      	movs	r3, #0
 80305c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80305c6:	2300      	movs	r3, #0
 80305c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80305ca:	683b      	ldr	r3, [r7, #0]
 80305cc:	885b      	ldrh	r3, [r3, #2]
 80305ce:	0a1b      	lsrs	r3, r3, #8
 80305d0:	b29b      	uxth	r3, r3
 80305d2:	3b01      	subs	r3, #1
 80305d4:	2b06      	cmp	r3, #6
 80305d6:	f200 8128 	bhi.w	803082a <USBD_GetDescriptor+0x276>
 80305da:	a201      	add	r2, pc, #4	; (adr r2, 80305e0 <USBD_GetDescriptor+0x2c>)
 80305dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80305e0:	080305fd 	.word	0x080305fd
 80305e4:	08030615 	.word	0x08030615
 80305e8:	08030655 	.word	0x08030655
 80305ec:	0803082b 	.word	0x0803082b
 80305f0:	0803082b 	.word	0x0803082b
 80305f4:	080307cb 	.word	0x080307cb
 80305f8:	080307f7 	.word	0x080307f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80305fc:	687b      	ldr	r3, [r7, #4]
 80305fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030602:	681b      	ldr	r3, [r3, #0]
 8030604:	687a      	ldr	r2, [r7, #4]
 8030606:	7c12      	ldrb	r2, [r2, #16]
 8030608:	f107 0108 	add.w	r1, r7, #8
 803060c:	4610      	mov	r0, r2
 803060e:	4798      	blx	r3
 8030610:	60f8      	str	r0, [r7, #12]
      break;
 8030612:	e112      	b.n	803083a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8030614:	687b      	ldr	r3, [r7, #4]
 8030616:	7c1b      	ldrb	r3, [r3, #16]
 8030618:	2b00      	cmp	r3, #0
 803061a:	d10d      	bne.n	8030638 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803061c:	687b      	ldr	r3, [r7, #4]
 803061e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8030622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030624:	f107 0208 	add.w	r2, r7, #8
 8030628:	4610      	mov	r0, r2
 803062a:	4798      	blx	r3
 803062c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803062e:	68fb      	ldr	r3, [r7, #12]
 8030630:	3301      	adds	r3, #1
 8030632:	2202      	movs	r2, #2
 8030634:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8030636:	e100      	b.n	803083a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8030638:	687b      	ldr	r3, [r7, #4]
 803063a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8030640:	f107 0208 	add.w	r2, r7, #8
 8030644:	4610      	mov	r0, r2
 8030646:	4798      	blx	r3
 8030648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803064a:	68fb      	ldr	r3, [r7, #12]
 803064c:	3301      	adds	r3, #1
 803064e:	2202      	movs	r2, #2
 8030650:	701a      	strb	r2, [r3, #0]
      break;
 8030652:	e0f2      	b.n	803083a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8030654:	683b      	ldr	r3, [r7, #0]
 8030656:	885b      	ldrh	r3, [r3, #2]
 8030658:	b2db      	uxtb	r3, r3
 803065a:	2b05      	cmp	r3, #5
 803065c:	f200 80ac 	bhi.w	80307b8 <USBD_GetDescriptor+0x204>
 8030660:	a201      	add	r2, pc, #4	; (adr r2, 8030668 <USBD_GetDescriptor+0xb4>)
 8030662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030666:	bf00      	nop
 8030668:	08030681 	.word	0x08030681
 803066c:	080306b5 	.word	0x080306b5
 8030670:	080306e9 	.word	0x080306e9
 8030674:	0803071d 	.word	0x0803071d
 8030678:	08030751 	.word	0x08030751
 803067c:	08030785 	.word	0x08030785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8030680:	687b      	ldr	r3, [r7, #4]
 8030682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030686:	685b      	ldr	r3, [r3, #4]
 8030688:	2b00      	cmp	r3, #0
 803068a:	d00b      	beq.n	80306a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803068c:	687b      	ldr	r3, [r7, #4]
 803068e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030692:	685b      	ldr	r3, [r3, #4]
 8030694:	687a      	ldr	r2, [r7, #4]
 8030696:	7c12      	ldrb	r2, [r2, #16]
 8030698:	f107 0108 	add.w	r1, r7, #8
 803069c:	4610      	mov	r0, r2
 803069e:	4798      	blx	r3
 80306a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80306a2:	e091      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80306a4:	6839      	ldr	r1, [r7, #0]
 80306a6:	6878      	ldr	r0, [r7, #4]
 80306a8:	f000 facb 	bl	8030c42 <USBD_CtlError>
            err++;
 80306ac:	7afb      	ldrb	r3, [r7, #11]
 80306ae:	3301      	adds	r3, #1
 80306b0:	72fb      	strb	r3, [r7, #11]
          break;
 80306b2:	e089      	b.n	80307c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80306b4:	687b      	ldr	r3, [r7, #4]
 80306b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80306ba:	689b      	ldr	r3, [r3, #8]
 80306bc:	2b00      	cmp	r3, #0
 80306be:	d00b      	beq.n	80306d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80306c0:	687b      	ldr	r3, [r7, #4]
 80306c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80306c6:	689b      	ldr	r3, [r3, #8]
 80306c8:	687a      	ldr	r2, [r7, #4]
 80306ca:	7c12      	ldrb	r2, [r2, #16]
 80306cc:	f107 0108 	add.w	r1, r7, #8
 80306d0:	4610      	mov	r0, r2
 80306d2:	4798      	blx	r3
 80306d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80306d6:	e077      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80306d8:	6839      	ldr	r1, [r7, #0]
 80306da:	6878      	ldr	r0, [r7, #4]
 80306dc:	f000 fab1 	bl	8030c42 <USBD_CtlError>
            err++;
 80306e0:	7afb      	ldrb	r3, [r7, #11]
 80306e2:	3301      	adds	r3, #1
 80306e4:	72fb      	strb	r3, [r7, #11]
          break;
 80306e6:	e06f      	b.n	80307c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80306e8:	687b      	ldr	r3, [r7, #4]
 80306ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80306ee:	68db      	ldr	r3, [r3, #12]
 80306f0:	2b00      	cmp	r3, #0
 80306f2:	d00b      	beq.n	803070c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80306f4:	687b      	ldr	r3, [r7, #4]
 80306f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80306fa:	68db      	ldr	r3, [r3, #12]
 80306fc:	687a      	ldr	r2, [r7, #4]
 80306fe:	7c12      	ldrb	r2, [r2, #16]
 8030700:	f107 0108 	add.w	r1, r7, #8
 8030704:	4610      	mov	r0, r2
 8030706:	4798      	blx	r3
 8030708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803070a:	e05d      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803070c:	6839      	ldr	r1, [r7, #0]
 803070e:	6878      	ldr	r0, [r7, #4]
 8030710:	f000 fa97 	bl	8030c42 <USBD_CtlError>
            err++;
 8030714:	7afb      	ldrb	r3, [r7, #11]
 8030716:	3301      	adds	r3, #1
 8030718:	72fb      	strb	r3, [r7, #11]
          break;
 803071a:	e055      	b.n	80307c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803071c:	687b      	ldr	r3, [r7, #4]
 803071e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030722:	691b      	ldr	r3, [r3, #16]
 8030724:	2b00      	cmp	r3, #0
 8030726:	d00b      	beq.n	8030740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8030728:	687b      	ldr	r3, [r7, #4]
 803072a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803072e:	691b      	ldr	r3, [r3, #16]
 8030730:	687a      	ldr	r2, [r7, #4]
 8030732:	7c12      	ldrb	r2, [r2, #16]
 8030734:	f107 0108 	add.w	r1, r7, #8
 8030738:	4610      	mov	r0, r2
 803073a:	4798      	blx	r3
 803073c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803073e:	e043      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8030740:	6839      	ldr	r1, [r7, #0]
 8030742:	6878      	ldr	r0, [r7, #4]
 8030744:	f000 fa7d 	bl	8030c42 <USBD_CtlError>
            err++;
 8030748:	7afb      	ldrb	r3, [r7, #11]
 803074a:	3301      	adds	r3, #1
 803074c:	72fb      	strb	r3, [r7, #11]
          break;
 803074e:	e03b      	b.n	80307c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8030750:	687b      	ldr	r3, [r7, #4]
 8030752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030756:	695b      	ldr	r3, [r3, #20]
 8030758:	2b00      	cmp	r3, #0
 803075a:	d00b      	beq.n	8030774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803075c:	687b      	ldr	r3, [r7, #4]
 803075e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030762:	695b      	ldr	r3, [r3, #20]
 8030764:	687a      	ldr	r2, [r7, #4]
 8030766:	7c12      	ldrb	r2, [r2, #16]
 8030768:	f107 0108 	add.w	r1, r7, #8
 803076c:	4610      	mov	r0, r2
 803076e:	4798      	blx	r3
 8030770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8030772:	e029      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8030774:	6839      	ldr	r1, [r7, #0]
 8030776:	6878      	ldr	r0, [r7, #4]
 8030778:	f000 fa63 	bl	8030c42 <USBD_CtlError>
            err++;
 803077c:	7afb      	ldrb	r3, [r7, #11]
 803077e:	3301      	adds	r3, #1
 8030780:	72fb      	strb	r3, [r7, #11]
          break;
 8030782:	e021      	b.n	80307c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8030784:	687b      	ldr	r3, [r7, #4]
 8030786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803078a:	699b      	ldr	r3, [r3, #24]
 803078c:	2b00      	cmp	r3, #0
 803078e:	d00b      	beq.n	80307a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8030790:	687b      	ldr	r3, [r7, #4]
 8030792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8030796:	699b      	ldr	r3, [r3, #24]
 8030798:	687a      	ldr	r2, [r7, #4]
 803079a:	7c12      	ldrb	r2, [r2, #16]
 803079c:	f107 0108 	add.w	r1, r7, #8
 80307a0:	4610      	mov	r0, r2
 80307a2:	4798      	blx	r3
 80307a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80307a6:	e00f      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80307a8:	6839      	ldr	r1, [r7, #0]
 80307aa:	6878      	ldr	r0, [r7, #4]
 80307ac:	f000 fa49 	bl	8030c42 <USBD_CtlError>
            err++;
 80307b0:	7afb      	ldrb	r3, [r7, #11]
 80307b2:	3301      	adds	r3, #1
 80307b4:	72fb      	strb	r3, [r7, #11]
          break;
 80307b6:	e007      	b.n	80307c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80307b8:	6839      	ldr	r1, [r7, #0]
 80307ba:	6878      	ldr	r0, [r7, #4]
 80307bc:	f000 fa41 	bl	8030c42 <USBD_CtlError>
          err++;
 80307c0:	7afb      	ldrb	r3, [r7, #11]
 80307c2:	3301      	adds	r3, #1
 80307c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80307c6:	bf00      	nop
      }
      break;
 80307c8:	e037      	b.n	803083a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80307ca:	687b      	ldr	r3, [r7, #4]
 80307cc:	7c1b      	ldrb	r3, [r3, #16]
 80307ce:	2b00      	cmp	r3, #0
 80307d0:	d109      	bne.n	80307e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80307d2:	687b      	ldr	r3, [r7, #4]
 80307d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80307d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80307da:	f107 0208 	add.w	r2, r7, #8
 80307de:	4610      	mov	r0, r2
 80307e0:	4798      	blx	r3
 80307e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80307e4:	e029      	b.n	803083a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80307e6:	6839      	ldr	r1, [r7, #0]
 80307e8:	6878      	ldr	r0, [r7, #4]
 80307ea:	f000 fa2a 	bl	8030c42 <USBD_CtlError>
        err++;
 80307ee:	7afb      	ldrb	r3, [r7, #11]
 80307f0:	3301      	adds	r3, #1
 80307f2:	72fb      	strb	r3, [r7, #11]
      break;
 80307f4:	e021      	b.n	803083a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80307f6:	687b      	ldr	r3, [r7, #4]
 80307f8:	7c1b      	ldrb	r3, [r3, #16]
 80307fa:	2b00      	cmp	r3, #0
 80307fc:	d10d      	bne.n	803081a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80307fe:	687b      	ldr	r3, [r7, #4]
 8030800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8030804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030806:	f107 0208 	add.w	r2, r7, #8
 803080a:	4610      	mov	r0, r2
 803080c:	4798      	blx	r3
 803080e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8030810:	68fb      	ldr	r3, [r7, #12]
 8030812:	3301      	adds	r3, #1
 8030814:	2207      	movs	r2, #7
 8030816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8030818:	e00f      	b.n	803083a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803081a:	6839      	ldr	r1, [r7, #0]
 803081c:	6878      	ldr	r0, [r7, #4]
 803081e:	f000 fa10 	bl	8030c42 <USBD_CtlError>
        err++;
 8030822:	7afb      	ldrb	r3, [r7, #11]
 8030824:	3301      	adds	r3, #1
 8030826:	72fb      	strb	r3, [r7, #11]
      break;
 8030828:	e007      	b.n	803083a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803082a:	6839      	ldr	r1, [r7, #0]
 803082c:	6878      	ldr	r0, [r7, #4]
 803082e:	f000 fa08 	bl	8030c42 <USBD_CtlError>
      err++;
 8030832:	7afb      	ldrb	r3, [r7, #11]
 8030834:	3301      	adds	r3, #1
 8030836:	72fb      	strb	r3, [r7, #11]
      break;
 8030838:	bf00      	nop
  }

  if (err != 0U)
 803083a:	7afb      	ldrb	r3, [r7, #11]
 803083c:	2b00      	cmp	r3, #0
 803083e:	d11e      	bne.n	803087e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8030840:	683b      	ldr	r3, [r7, #0]
 8030842:	88db      	ldrh	r3, [r3, #6]
 8030844:	2b00      	cmp	r3, #0
 8030846:	d016      	beq.n	8030876 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8030848:	893b      	ldrh	r3, [r7, #8]
 803084a:	2b00      	cmp	r3, #0
 803084c:	d00e      	beq.n	803086c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803084e:	683b      	ldr	r3, [r7, #0]
 8030850:	88da      	ldrh	r2, [r3, #6]
 8030852:	893b      	ldrh	r3, [r7, #8]
 8030854:	4293      	cmp	r3, r2
 8030856:	bf28      	it	cs
 8030858:	4613      	movcs	r3, r2
 803085a:	b29b      	uxth	r3, r3
 803085c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803085e:	893b      	ldrh	r3, [r7, #8]
 8030860:	461a      	mov	r2, r3
 8030862:	68f9      	ldr	r1, [r7, #12]
 8030864:	6878      	ldr	r0, [r7, #4]
 8030866:	f000 fa5d 	bl	8030d24 <USBD_CtlSendData>
 803086a:	e009      	b.n	8030880 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803086c:	6839      	ldr	r1, [r7, #0]
 803086e:	6878      	ldr	r0, [r7, #4]
 8030870:	f000 f9e7 	bl	8030c42 <USBD_CtlError>
 8030874:	e004      	b.n	8030880 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8030876:	6878      	ldr	r0, [r7, #4]
 8030878:	f000 faae 	bl	8030dd8 <USBD_CtlSendStatus>
 803087c:	e000      	b.n	8030880 <USBD_GetDescriptor+0x2cc>
    return;
 803087e:	bf00      	nop
  }
}
 8030880:	3710      	adds	r7, #16
 8030882:	46bd      	mov	sp, r7
 8030884:	bd80      	pop	{r7, pc}
 8030886:	bf00      	nop

08030888 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030888:	b580      	push	{r7, lr}
 803088a:	b084      	sub	sp, #16
 803088c:	af00      	add	r7, sp, #0
 803088e:	6078      	str	r0, [r7, #4]
 8030890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8030892:	683b      	ldr	r3, [r7, #0]
 8030894:	889b      	ldrh	r3, [r3, #4]
 8030896:	2b00      	cmp	r3, #0
 8030898:	d131      	bne.n	80308fe <USBD_SetAddress+0x76>
 803089a:	683b      	ldr	r3, [r7, #0]
 803089c:	88db      	ldrh	r3, [r3, #6]
 803089e:	2b00      	cmp	r3, #0
 80308a0:	d12d      	bne.n	80308fe <USBD_SetAddress+0x76>
 80308a2:	683b      	ldr	r3, [r7, #0]
 80308a4:	885b      	ldrh	r3, [r3, #2]
 80308a6:	2b7f      	cmp	r3, #127	; 0x7f
 80308a8:	d829      	bhi.n	80308fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80308aa:	683b      	ldr	r3, [r7, #0]
 80308ac:	885b      	ldrh	r3, [r3, #2]
 80308ae:	b2db      	uxtb	r3, r3
 80308b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80308b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80308b6:	687b      	ldr	r3, [r7, #4]
 80308b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80308bc:	b2db      	uxtb	r3, r3
 80308be:	2b03      	cmp	r3, #3
 80308c0:	d104      	bne.n	80308cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80308c2:	6839      	ldr	r1, [r7, #0]
 80308c4:	6878      	ldr	r0, [r7, #4]
 80308c6:	f000 f9bc 	bl	8030c42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80308ca:	e01d      	b.n	8030908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80308cc:	687b      	ldr	r3, [r7, #4]
 80308ce:	7bfa      	ldrb	r2, [r7, #15]
 80308d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80308d4:	7bfb      	ldrb	r3, [r7, #15]
 80308d6:	4619      	mov	r1, r3
 80308d8:	6878      	ldr	r0, [r7, #4]
 80308da:	f001 f967 	bl	8031bac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80308de:	6878      	ldr	r0, [r7, #4]
 80308e0:	f000 fa7a 	bl	8030dd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80308e4:	7bfb      	ldrb	r3, [r7, #15]
 80308e6:	2b00      	cmp	r3, #0
 80308e8:	d004      	beq.n	80308f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80308ea:	687b      	ldr	r3, [r7, #4]
 80308ec:	2202      	movs	r2, #2
 80308ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80308f2:	e009      	b.n	8030908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80308f4:	687b      	ldr	r3, [r7, #4]
 80308f6:	2201      	movs	r2, #1
 80308f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80308fc:	e004      	b.n	8030908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80308fe:	6839      	ldr	r1, [r7, #0]
 8030900:	6878      	ldr	r0, [r7, #4]
 8030902:	f000 f99e 	bl	8030c42 <USBD_CtlError>
  }
}
 8030906:	bf00      	nop
 8030908:	bf00      	nop
 803090a:	3710      	adds	r7, #16
 803090c:	46bd      	mov	sp, r7
 803090e:	bd80      	pop	{r7, pc}

08030910 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030910:	b580      	push	{r7, lr}
 8030912:	b084      	sub	sp, #16
 8030914:	af00      	add	r7, sp, #0
 8030916:	6078      	str	r0, [r7, #4]
 8030918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803091a:	2300      	movs	r3, #0
 803091c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803091e:	683b      	ldr	r3, [r7, #0]
 8030920:	885b      	ldrh	r3, [r3, #2]
 8030922:	b2da      	uxtb	r2, r3
 8030924:	4b4e      	ldr	r3, [pc, #312]	; (8030a60 <USBD_SetConfig+0x150>)
 8030926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8030928:	4b4d      	ldr	r3, [pc, #308]	; (8030a60 <USBD_SetConfig+0x150>)
 803092a:	781b      	ldrb	r3, [r3, #0]
 803092c:	2b01      	cmp	r3, #1
 803092e:	d905      	bls.n	803093c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8030930:	6839      	ldr	r1, [r7, #0]
 8030932:	6878      	ldr	r0, [r7, #4]
 8030934:	f000 f985 	bl	8030c42 <USBD_CtlError>
    return USBD_FAIL;
 8030938:	2303      	movs	r3, #3
 803093a:	e08c      	b.n	8030a56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803093c:	687b      	ldr	r3, [r7, #4]
 803093e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030942:	b2db      	uxtb	r3, r3
 8030944:	2b02      	cmp	r3, #2
 8030946:	d002      	beq.n	803094e <USBD_SetConfig+0x3e>
 8030948:	2b03      	cmp	r3, #3
 803094a:	d029      	beq.n	80309a0 <USBD_SetConfig+0x90>
 803094c:	e075      	b.n	8030a3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803094e:	4b44      	ldr	r3, [pc, #272]	; (8030a60 <USBD_SetConfig+0x150>)
 8030950:	781b      	ldrb	r3, [r3, #0]
 8030952:	2b00      	cmp	r3, #0
 8030954:	d020      	beq.n	8030998 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8030956:	4b42      	ldr	r3, [pc, #264]	; (8030a60 <USBD_SetConfig+0x150>)
 8030958:	781b      	ldrb	r3, [r3, #0]
 803095a:	461a      	mov	r2, r3
 803095c:	687b      	ldr	r3, [r7, #4]
 803095e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8030960:	4b3f      	ldr	r3, [pc, #252]	; (8030a60 <USBD_SetConfig+0x150>)
 8030962:	781b      	ldrb	r3, [r3, #0]
 8030964:	4619      	mov	r1, r3
 8030966:	6878      	ldr	r0, [r7, #4]
 8030968:	f7fe ffe7 	bl	802f93a <USBD_SetClassConfig>
 803096c:	4603      	mov	r3, r0
 803096e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8030970:	7bfb      	ldrb	r3, [r7, #15]
 8030972:	2b00      	cmp	r3, #0
 8030974:	d008      	beq.n	8030988 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8030976:	6839      	ldr	r1, [r7, #0]
 8030978:	6878      	ldr	r0, [r7, #4]
 803097a:	f000 f962 	bl	8030c42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803097e:	687b      	ldr	r3, [r7, #4]
 8030980:	2202      	movs	r2, #2
 8030982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8030986:	e065      	b.n	8030a54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030988:	6878      	ldr	r0, [r7, #4]
 803098a:	f000 fa25 	bl	8030dd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803098e:	687b      	ldr	r3, [r7, #4]
 8030990:	2203      	movs	r2, #3
 8030992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8030996:	e05d      	b.n	8030a54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8030998:	6878      	ldr	r0, [r7, #4]
 803099a:	f000 fa1d 	bl	8030dd8 <USBD_CtlSendStatus>
      break;
 803099e:	e059      	b.n	8030a54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80309a0:	4b2f      	ldr	r3, [pc, #188]	; (8030a60 <USBD_SetConfig+0x150>)
 80309a2:	781b      	ldrb	r3, [r3, #0]
 80309a4:	2b00      	cmp	r3, #0
 80309a6:	d112      	bne.n	80309ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80309a8:	687b      	ldr	r3, [r7, #4]
 80309aa:	2202      	movs	r2, #2
 80309ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80309b0:	4b2b      	ldr	r3, [pc, #172]	; (8030a60 <USBD_SetConfig+0x150>)
 80309b2:	781b      	ldrb	r3, [r3, #0]
 80309b4:	461a      	mov	r2, r3
 80309b6:	687b      	ldr	r3, [r7, #4]
 80309b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80309ba:	4b29      	ldr	r3, [pc, #164]	; (8030a60 <USBD_SetConfig+0x150>)
 80309bc:	781b      	ldrb	r3, [r3, #0]
 80309be:	4619      	mov	r1, r3
 80309c0:	6878      	ldr	r0, [r7, #4]
 80309c2:	f7fe ffd6 	bl	802f972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80309c6:	6878      	ldr	r0, [r7, #4]
 80309c8:	f000 fa06 	bl	8030dd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80309cc:	e042      	b.n	8030a54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80309ce:	4b24      	ldr	r3, [pc, #144]	; (8030a60 <USBD_SetConfig+0x150>)
 80309d0:	781b      	ldrb	r3, [r3, #0]
 80309d2:	461a      	mov	r2, r3
 80309d4:	687b      	ldr	r3, [r7, #4]
 80309d6:	685b      	ldr	r3, [r3, #4]
 80309d8:	429a      	cmp	r2, r3
 80309da:	d02a      	beq.n	8030a32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80309dc:	687b      	ldr	r3, [r7, #4]
 80309de:	685b      	ldr	r3, [r3, #4]
 80309e0:	b2db      	uxtb	r3, r3
 80309e2:	4619      	mov	r1, r3
 80309e4:	6878      	ldr	r0, [r7, #4]
 80309e6:	f7fe ffc4 	bl	802f972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80309ea:	4b1d      	ldr	r3, [pc, #116]	; (8030a60 <USBD_SetConfig+0x150>)
 80309ec:	781b      	ldrb	r3, [r3, #0]
 80309ee:	461a      	mov	r2, r3
 80309f0:	687b      	ldr	r3, [r7, #4]
 80309f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80309f4:	4b1a      	ldr	r3, [pc, #104]	; (8030a60 <USBD_SetConfig+0x150>)
 80309f6:	781b      	ldrb	r3, [r3, #0]
 80309f8:	4619      	mov	r1, r3
 80309fa:	6878      	ldr	r0, [r7, #4]
 80309fc:	f7fe ff9d 	bl	802f93a <USBD_SetClassConfig>
 8030a00:	4603      	mov	r3, r0
 8030a02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8030a04:	7bfb      	ldrb	r3, [r7, #15]
 8030a06:	2b00      	cmp	r3, #0
 8030a08:	d00f      	beq.n	8030a2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8030a0a:	6839      	ldr	r1, [r7, #0]
 8030a0c:	6878      	ldr	r0, [r7, #4]
 8030a0e:	f000 f918 	bl	8030c42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8030a12:	687b      	ldr	r3, [r7, #4]
 8030a14:	685b      	ldr	r3, [r3, #4]
 8030a16:	b2db      	uxtb	r3, r3
 8030a18:	4619      	mov	r1, r3
 8030a1a:	6878      	ldr	r0, [r7, #4]
 8030a1c:	f7fe ffa9 	bl	802f972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030a20:	687b      	ldr	r3, [r7, #4]
 8030a22:	2202      	movs	r2, #2
 8030a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8030a28:	e014      	b.n	8030a54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030a2a:	6878      	ldr	r0, [r7, #4]
 8030a2c:	f000 f9d4 	bl	8030dd8 <USBD_CtlSendStatus>
      break;
 8030a30:	e010      	b.n	8030a54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8030a32:	6878      	ldr	r0, [r7, #4]
 8030a34:	f000 f9d0 	bl	8030dd8 <USBD_CtlSendStatus>
      break;
 8030a38:	e00c      	b.n	8030a54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8030a3a:	6839      	ldr	r1, [r7, #0]
 8030a3c:	6878      	ldr	r0, [r7, #4]
 8030a3e:	f000 f900 	bl	8030c42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8030a42:	4b07      	ldr	r3, [pc, #28]	; (8030a60 <USBD_SetConfig+0x150>)
 8030a44:	781b      	ldrb	r3, [r3, #0]
 8030a46:	4619      	mov	r1, r3
 8030a48:	6878      	ldr	r0, [r7, #4]
 8030a4a:	f7fe ff92 	bl	802f972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8030a4e:	2303      	movs	r3, #3
 8030a50:	73fb      	strb	r3, [r7, #15]
      break;
 8030a52:	bf00      	nop
  }

  return ret;
 8030a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8030a56:	4618      	mov	r0, r3
 8030a58:	3710      	adds	r7, #16
 8030a5a:	46bd      	mov	sp, r7
 8030a5c:	bd80      	pop	{r7, pc}
 8030a5e:	bf00      	nop
 8030a60:	200058bc 	.word	0x200058bc

08030a64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030a64:	b580      	push	{r7, lr}
 8030a66:	b082      	sub	sp, #8
 8030a68:	af00      	add	r7, sp, #0
 8030a6a:	6078      	str	r0, [r7, #4]
 8030a6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8030a6e:	683b      	ldr	r3, [r7, #0]
 8030a70:	88db      	ldrh	r3, [r3, #6]
 8030a72:	2b01      	cmp	r3, #1
 8030a74:	d004      	beq.n	8030a80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8030a76:	6839      	ldr	r1, [r7, #0]
 8030a78:	6878      	ldr	r0, [r7, #4]
 8030a7a:	f000 f8e2 	bl	8030c42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8030a7e:	e023      	b.n	8030ac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8030a80:	687b      	ldr	r3, [r7, #4]
 8030a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030a86:	b2db      	uxtb	r3, r3
 8030a88:	2b02      	cmp	r3, #2
 8030a8a:	dc02      	bgt.n	8030a92 <USBD_GetConfig+0x2e>
 8030a8c:	2b00      	cmp	r3, #0
 8030a8e:	dc03      	bgt.n	8030a98 <USBD_GetConfig+0x34>
 8030a90:	e015      	b.n	8030abe <USBD_GetConfig+0x5a>
 8030a92:	2b03      	cmp	r3, #3
 8030a94:	d00b      	beq.n	8030aae <USBD_GetConfig+0x4a>
 8030a96:	e012      	b.n	8030abe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8030a98:	687b      	ldr	r3, [r7, #4]
 8030a9a:	2200      	movs	r2, #0
 8030a9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8030a9e:	687b      	ldr	r3, [r7, #4]
 8030aa0:	3308      	adds	r3, #8
 8030aa2:	2201      	movs	r2, #1
 8030aa4:	4619      	mov	r1, r3
 8030aa6:	6878      	ldr	r0, [r7, #4]
 8030aa8:	f000 f93c 	bl	8030d24 <USBD_CtlSendData>
        break;
 8030aac:	e00c      	b.n	8030ac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8030aae:	687b      	ldr	r3, [r7, #4]
 8030ab0:	3304      	adds	r3, #4
 8030ab2:	2201      	movs	r2, #1
 8030ab4:	4619      	mov	r1, r3
 8030ab6:	6878      	ldr	r0, [r7, #4]
 8030ab8:	f000 f934 	bl	8030d24 <USBD_CtlSendData>
        break;
 8030abc:	e004      	b.n	8030ac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8030abe:	6839      	ldr	r1, [r7, #0]
 8030ac0:	6878      	ldr	r0, [r7, #4]
 8030ac2:	f000 f8be 	bl	8030c42 <USBD_CtlError>
        break;
 8030ac6:	bf00      	nop
}
 8030ac8:	bf00      	nop
 8030aca:	3708      	adds	r7, #8
 8030acc:	46bd      	mov	sp, r7
 8030ace:	bd80      	pop	{r7, pc}

08030ad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030ad0:	b580      	push	{r7, lr}
 8030ad2:	b082      	sub	sp, #8
 8030ad4:	af00      	add	r7, sp, #0
 8030ad6:	6078      	str	r0, [r7, #4]
 8030ad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8030ada:	687b      	ldr	r3, [r7, #4]
 8030adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030ae0:	b2db      	uxtb	r3, r3
 8030ae2:	3b01      	subs	r3, #1
 8030ae4:	2b02      	cmp	r3, #2
 8030ae6:	d81e      	bhi.n	8030b26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8030ae8:	683b      	ldr	r3, [r7, #0]
 8030aea:	88db      	ldrh	r3, [r3, #6]
 8030aec:	2b02      	cmp	r3, #2
 8030aee:	d004      	beq.n	8030afa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8030af0:	6839      	ldr	r1, [r7, #0]
 8030af2:	6878      	ldr	r0, [r7, #4]
 8030af4:	f000 f8a5 	bl	8030c42 <USBD_CtlError>
        break;
 8030af8:	e01a      	b.n	8030b30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8030afa:	687b      	ldr	r3, [r7, #4]
 8030afc:	2201      	movs	r2, #1
 8030afe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8030b00:	687b      	ldr	r3, [r7, #4]
 8030b02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8030b06:	2b00      	cmp	r3, #0
 8030b08:	d005      	beq.n	8030b16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8030b0a:	687b      	ldr	r3, [r7, #4]
 8030b0c:	68db      	ldr	r3, [r3, #12]
 8030b0e:	f043 0202 	orr.w	r2, r3, #2
 8030b12:	687b      	ldr	r3, [r7, #4]
 8030b14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8030b16:	687b      	ldr	r3, [r7, #4]
 8030b18:	330c      	adds	r3, #12
 8030b1a:	2202      	movs	r2, #2
 8030b1c:	4619      	mov	r1, r3
 8030b1e:	6878      	ldr	r0, [r7, #4]
 8030b20:	f000 f900 	bl	8030d24 <USBD_CtlSendData>
      break;
 8030b24:	e004      	b.n	8030b30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8030b26:	6839      	ldr	r1, [r7, #0]
 8030b28:	6878      	ldr	r0, [r7, #4]
 8030b2a:	f000 f88a 	bl	8030c42 <USBD_CtlError>
      break;
 8030b2e:	bf00      	nop
  }
}
 8030b30:	bf00      	nop
 8030b32:	3708      	adds	r7, #8
 8030b34:	46bd      	mov	sp, r7
 8030b36:	bd80      	pop	{r7, pc}

08030b38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030b38:	b580      	push	{r7, lr}
 8030b3a:	b082      	sub	sp, #8
 8030b3c:	af00      	add	r7, sp, #0
 8030b3e:	6078      	str	r0, [r7, #4]
 8030b40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8030b42:	683b      	ldr	r3, [r7, #0]
 8030b44:	885b      	ldrh	r3, [r3, #2]
 8030b46:	2b01      	cmp	r3, #1
 8030b48:	d107      	bne.n	8030b5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8030b4a:	687b      	ldr	r3, [r7, #4]
 8030b4c:	2201      	movs	r2, #1
 8030b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8030b52:	6878      	ldr	r0, [r7, #4]
 8030b54:	f000 f940 	bl	8030dd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8030b58:	e013      	b.n	8030b82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8030b5a:	683b      	ldr	r3, [r7, #0]
 8030b5c:	885b      	ldrh	r3, [r3, #2]
 8030b5e:	2b02      	cmp	r3, #2
 8030b60:	d10b      	bne.n	8030b7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8030b62:	683b      	ldr	r3, [r7, #0]
 8030b64:	889b      	ldrh	r3, [r3, #4]
 8030b66:	0a1b      	lsrs	r3, r3, #8
 8030b68:	b29b      	uxth	r3, r3
 8030b6a:	b2da      	uxtb	r2, r3
 8030b6c:	687b      	ldr	r3, [r7, #4]
 8030b6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8030b72:	6878      	ldr	r0, [r7, #4]
 8030b74:	f000 f930 	bl	8030dd8 <USBD_CtlSendStatus>
}
 8030b78:	e003      	b.n	8030b82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8030b7a:	6839      	ldr	r1, [r7, #0]
 8030b7c:	6878      	ldr	r0, [r7, #4]
 8030b7e:	f000 f860 	bl	8030c42 <USBD_CtlError>
}
 8030b82:	bf00      	nop
 8030b84:	3708      	adds	r7, #8
 8030b86:	46bd      	mov	sp, r7
 8030b88:	bd80      	pop	{r7, pc}

08030b8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030b8a:	b580      	push	{r7, lr}
 8030b8c:	b082      	sub	sp, #8
 8030b8e:	af00      	add	r7, sp, #0
 8030b90:	6078      	str	r0, [r7, #4]
 8030b92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8030b94:	687b      	ldr	r3, [r7, #4]
 8030b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8030b9a:	b2db      	uxtb	r3, r3
 8030b9c:	3b01      	subs	r3, #1
 8030b9e:	2b02      	cmp	r3, #2
 8030ba0:	d80b      	bhi.n	8030bba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8030ba2:	683b      	ldr	r3, [r7, #0]
 8030ba4:	885b      	ldrh	r3, [r3, #2]
 8030ba6:	2b01      	cmp	r3, #1
 8030ba8:	d10c      	bne.n	8030bc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8030baa:	687b      	ldr	r3, [r7, #4]
 8030bac:	2200      	movs	r2, #0
 8030bae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8030bb2:	6878      	ldr	r0, [r7, #4]
 8030bb4:	f000 f910 	bl	8030dd8 <USBD_CtlSendStatus>
      }
      break;
 8030bb8:	e004      	b.n	8030bc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8030bba:	6839      	ldr	r1, [r7, #0]
 8030bbc:	6878      	ldr	r0, [r7, #4]
 8030bbe:	f000 f840 	bl	8030c42 <USBD_CtlError>
      break;
 8030bc2:	e000      	b.n	8030bc6 <USBD_ClrFeature+0x3c>
      break;
 8030bc4:	bf00      	nop
  }
}
 8030bc6:	bf00      	nop
 8030bc8:	3708      	adds	r7, #8
 8030bca:	46bd      	mov	sp, r7
 8030bcc:	bd80      	pop	{r7, pc}

08030bce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8030bce:	b580      	push	{r7, lr}
 8030bd0:	b084      	sub	sp, #16
 8030bd2:	af00      	add	r7, sp, #0
 8030bd4:	6078      	str	r0, [r7, #4]
 8030bd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8030bd8:	683b      	ldr	r3, [r7, #0]
 8030bda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8030bdc:	68fb      	ldr	r3, [r7, #12]
 8030bde:	781a      	ldrb	r2, [r3, #0]
 8030be0:	687b      	ldr	r3, [r7, #4]
 8030be2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8030be4:	68fb      	ldr	r3, [r7, #12]
 8030be6:	3301      	adds	r3, #1
 8030be8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8030bea:	68fb      	ldr	r3, [r7, #12]
 8030bec:	781a      	ldrb	r2, [r3, #0]
 8030bee:	687b      	ldr	r3, [r7, #4]
 8030bf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8030bf2:	68fb      	ldr	r3, [r7, #12]
 8030bf4:	3301      	adds	r3, #1
 8030bf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8030bf8:	68f8      	ldr	r0, [r7, #12]
 8030bfa:	f7ff fa41 	bl	8030080 <SWAPBYTE>
 8030bfe:	4603      	mov	r3, r0
 8030c00:	461a      	mov	r2, r3
 8030c02:	687b      	ldr	r3, [r7, #4]
 8030c04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8030c06:	68fb      	ldr	r3, [r7, #12]
 8030c08:	3301      	adds	r3, #1
 8030c0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8030c0c:	68fb      	ldr	r3, [r7, #12]
 8030c0e:	3301      	adds	r3, #1
 8030c10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8030c12:	68f8      	ldr	r0, [r7, #12]
 8030c14:	f7ff fa34 	bl	8030080 <SWAPBYTE>
 8030c18:	4603      	mov	r3, r0
 8030c1a:	461a      	mov	r2, r3
 8030c1c:	687b      	ldr	r3, [r7, #4]
 8030c1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8030c20:	68fb      	ldr	r3, [r7, #12]
 8030c22:	3301      	adds	r3, #1
 8030c24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8030c26:	68fb      	ldr	r3, [r7, #12]
 8030c28:	3301      	adds	r3, #1
 8030c2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8030c2c:	68f8      	ldr	r0, [r7, #12]
 8030c2e:	f7ff fa27 	bl	8030080 <SWAPBYTE>
 8030c32:	4603      	mov	r3, r0
 8030c34:	461a      	mov	r2, r3
 8030c36:	687b      	ldr	r3, [r7, #4]
 8030c38:	80da      	strh	r2, [r3, #6]
}
 8030c3a:	bf00      	nop
 8030c3c:	3710      	adds	r7, #16
 8030c3e:	46bd      	mov	sp, r7
 8030c40:	bd80      	pop	{r7, pc}

08030c42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030c42:	b580      	push	{r7, lr}
 8030c44:	b082      	sub	sp, #8
 8030c46:	af00      	add	r7, sp, #0
 8030c48:	6078      	str	r0, [r7, #4]
 8030c4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8030c4c:	2180      	movs	r1, #128	; 0x80
 8030c4e:	6878      	ldr	r0, [r7, #4]
 8030c50:	f000 ff42 	bl	8031ad8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8030c54:	2100      	movs	r1, #0
 8030c56:	6878      	ldr	r0, [r7, #4]
 8030c58:	f000 ff3e 	bl	8031ad8 <USBD_LL_StallEP>
}
 8030c5c:	bf00      	nop
 8030c5e:	3708      	adds	r7, #8
 8030c60:	46bd      	mov	sp, r7
 8030c62:	bd80      	pop	{r7, pc}

08030c64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8030c64:	b580      	push	{r7, lr}
 8030c66:	b086      	sub	sp, #24
 8030c68:	af00      	add	r7, sp, #0
 8030c6a:	60f8      	str	r0, [r7, #12]
 8030c6c:	60b9      	str	r1, [r7, #8]
 8030c6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8030c70:	2300      	movs	r3, #0
 8030c72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8030c74:	68fb      	ldr	r3, [r7, #12]
 8030c76:	2b00      	cmp	r3, #0
 8030c78:	d036      	beq.n	8030ce8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8030c7a:	68fb      	ldr	r3, [r7, #12]
 8030c7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8030c7e:	6938      	ldr	r0, [r7, #16]
 8030c80:	f000 f836 	bl	8030cf0 <USBD_GetLen>
 8030c84:	4603      	mov	r3, r0
 8030c86:	3301      	adds	r3, #1
 8030c88:	b29b      	uxth	r3, r3
 8030c8a:	005b      	lsls	r3, r3, #1
 8030c8c:	b29a      	uxth	r2, r3
 8030c8e:	687b      	ldr	r3, [r7, #4]
 8030c90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8030c92:	7dfb      	ldrb	r3, [r7, #23]
 8030c94:	68ba      	ldr	r2, [r7, #8]
 8030c96:	4413      	add	r3, r2
 8030c98:	687a      	ldr	r2, [r7, #4]
 8030c9a:	7812      	ldrb	r2, [r2, #0]
 8030c9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8030c9e:	7dfb      	ldrb	r3, [r7, #23]
 8030ca0:	3301      	adds	r3, #1
 8030ca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8030ca4:	7dfb      	ldrb	r3, [r7, #23]
 8030ca6:	68ba      	ldr	r2, [r7, #8]
 8030ca8:	4413      	add	r3, r2
 8030caa:	2203      	movs	r2, #3
 8030cac:	701a      	strb	r2, [r3, #0]
  idx++;
 8030cae:	7dfb      	ldrb	r3, [r7, #23]
 8030cb0:	3301      	adds	r3, #1
 8030cb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8030cb4:	e013      	b.n	8030cde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8030cb6:	7dfb      	ldrb	r3, [r7, #23]
 8030cb8:	68ba      	ldr	r2, [r7, #8]
 8030cba:	4413      	add	r3, r2
 8030cbc:	693a      	ldr	r2, [r7, #16]
 8030cbe:	7812      	ldrb	r2, [r2, #0]
 8030cc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8030cc2:	693b      	ldr	r3, [r7, #16]
 8030cc4:	3301      	adds	r3, #1
 8030cc6:	613b      	str	r3, [r7, #16]
    idx++;
 8030cc8:	7dfb      	ldrb	r3, [r7, #23]
 8030cca:	3301      	adds	r3, #1
 8030ccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8030cce:	7dfb      	ldrb	r3, [r7, #23]
 8030cd0:	68ba      	ldr	r2, [r7, #8]
 8030cd2:	4413      	add	r3, r2
 8030cd4:	2200      	movs	r2, #0
 8030cd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8030cd8:	7dfb      	ldrb	r3, [r7, #23]
 8030cda:	3301      	adds	r3, #1
 8030cdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8030cde:	693b      	ldr	r3, [r7, #16]
 8030ce0:	781b      	ldrb	r3, [r3, #0]
 8030ce2:	2b00      	cmp	r3, #0
 8030ce4:	d1e7      	bne.n	8030cb6 <USBD_GetString+0x52>
 8030ce6:	e000      	b.n	8030cea <USBD_GetString+0x86>
    return;
 8030ce8:	bf00      	nop
  }
}
 8030cea:	3718      	adds	r7, #24
 8030cec:	46bd      	mov	sp, r7
 8030cee:	bd80      	pop	{r7, pc}

08030cf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8030cf0:	b480      	push	{r7}
 8030cf2:	b085      	sub	sp, #20
 8030cf4:	af00      	add	r7, sp, #0
 8030cf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8030cf8:	2300      	movs	r3, #0
 8030cfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8030cfc:	687b      	ldr	r3, [r7, #4]
 8030cfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8030d00:	e005      	b.n	8030d0e <USBD_GetLen+0x1e>
  {
    len++;
 8030d02:	7bfb      	ldrb	r3, [r7, #15]
 8030d04:	3301      	adds	r3, #1
 8030d06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8030d08:	68bb      	ldr	r3, [r7, #8]
 8030d0a:	3301      	adds	r3, #1
 8030d0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8030d0e:	68bb      	ldr	r3, [r7, #8]
 8030d10:	781b      	ldrb	r3, [r3, #0]
 8030d12:	2b00      	cmp	r3, #0
 8030d14:	d1f5      	bne.n	8030d02 <USBD_GetLen+0x12>
  }

  return len;
 8030d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8030d18:	4618      	mov	r0, r3
 8030d1a:	3714      	adds	r7, #20
 8030d1c:	46bd      	mov	sp, r7
 8030d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d22:	4770      	bx	lr

08030d24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8030d24:	b580      	push	{r7, lr}
 8030d26:	b084      	sub	sp, #16
 8030d28:	af00      	add	r7, sp, #0
 8030d2a:	60f8      	str	r0, [r7, #12]
 8030d2c:	60b9      	str	r1, [r7, #8]
 8030d2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8030d30:	68fb      	ldr	r3, [r7, #12]
 8030d32:	2202      	movs	r2, #2
 8030d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8030d38:	68fb      	ldr	r3, [r7, #12]
 8030d3a:	687a      	ldr	r2, [r7, #4]
 8030d3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8030d3e:	68fb      	ldr	r3, [r7, #12]
 8030d40:	687a      	ldr	r2, [r7, #4]
 8030d42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8030d44:	687b      	ldr	r3, [r7, #4]
 8030d46:	68ba      	ldr	r2, [r7, #8]
 8030d48:	2100      	movs	r1, #0
 8030d4a:	68f8      	ldr	r0, [r7, #12]
 8030d4c:	f000 ff4d 	bl	8031bea <USBD_LL_Transmit>

  return USBD_OK;
 8030d50:	2300      	movs	r3, #0
}
 8030d52:	4618      	mov	r0, r3
 8030d54:	3710      	adds	r7, #16
 8030d56:	46bd      	mov	sp, r7
 8030d58:	bd80      	pop	{r7, pc}

08030d5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8030d5a:	b580      	push	{r7, lr}
 8030d5c:	b084      	sub	sp, #16
 8030d5e:	af00      	add	r7, sp, #0
 8030d60:	60f8      	str	r0, [r7, #12]
 8030d62:	60b9      	str	r1, [r7, #8]
 8030d64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8030d66:	687b      	ldr	r3, [r7, #4]
 8030d68:	68ba      	ldr	r2, [r7, #8]
 8030d6a:	2100      	movs	r1, #0
 8030d6c:	68f8      	ldr	r0, [r7, #12]
 8030d6e:	f000 ff3c 	bl	8031bea <USBD_LL_Transmit>

  return USBD_OK;
 8030d72:	2300      	movs	r3, #0
}
 8030d74:	4618      	mov	r0, r3
 8030d76:	3710      	adds	r7, #16
 8030d78:	46bd      	mov	sp, r7
 8030d7a:	bd80      	pop	{r7, pc}

08030d7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8030d7c:	b580      	push	{r7, lr}
 8030d7e:	b084      	sub	sp, #16
 8030d80:	af00      	add	r7, sp, #0
 8030d82:	60f8      	str	r0, [r7, #12]
 8030d84:	60b9      	str	r1, [r7, #8]
 8030d86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8030d88:	68fb      	ldr	r3, [r7, #12]
 8030d8a:	2203      	movs	r2, #3
 8030d8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8030d90:	68fb      	ldr	r3, [r7, #12]
 8030d92:	687a      	ldr	r2, [r7, #4]
 8030d94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8030d98:	68fb      	ldr	r3, [r7, #12]
 8030d9a:	687a      	ldr	r2, [r7, #4]
 8030d9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8030da0:	687b      	ldr	r3, [r7, #4]
 8030da2:	68ba      	ldr	r2, [r7, #8]
 8030da4:	2100      	movs	r1, #0
 8030da6:	68f8      	ldr	r0, [r7, #12]
 8030da8:	f000 ff40 	bl	8031c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030dac:	2300      	movs	r3, #0
}
 8030dae:	4618      	mov	r0, r3
 8030db0:	3710      	adds	r7, #16
 8030db2:	46bd      	mov	sp, r7
 8030db4:	bd80      	pop	{r7, pc}

08030db6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8030db6:	b580      	push	{r7, lr}
 8030db8:	b084      	sub	sp, #16
 8030dba:	af00      	add	r7, sp, #0
 8030dbc:	60f8      	str	r0, [r7, #12]
 8030dbe:	60b9      	str	r1, [r7, #8]
 8030dc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8030dc2:	687b      	ldr	r3, [r7, #4]
 8030dc4:	68ba      	ldr	r2, [r7, #8]
 8030dc6:	2100      	movs	r1, #0
 8030dc8:	68f8      	ldr	r0, [r7, #12]
 8030dca:	f000 ff2f 	bl	8031c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030dce:	2300      	movs	r3, #0
}
 8030dd0:	4618      	mov	r0, r3
 8030dd2:	3710      	adds	r7, #16
 8030dd4:	46bd      	mov	sp, r7
 8030dd6:	bd80      	pop	{r7, pc}

08030dd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8030dd8:	b580      	push	{r7, lr}
 8030dda:	b082      	sub	sp, #8
 8030ddc:	af00      	add	r7, sp, #0
 8030dde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8030de0:	687b      	ldr	r3, [r7, #4]
 8030de2:	2204      	movs	r2, #4
 8030de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8030de8:	2300      	movs	r3, #0
 8030dea:	2200      	movs	r2, #0
 8030dec:	2100      	movs	r1, #0
 8030dee:	6878      	ldr	r0, [r7, #4]
 8030df0:	f000 fefb 	bl	8031bea <USBD_LL_Transmit>

  return USBD_OK;
 8030df4:	2300      	movs	r3, #0
}
 8030df6:	4618      	mov	r0, r3
 8030df8:	3708      	adds	r7, #8
 8030dfa:	46bd      	mov	sp, r7
 8030dfc:	bd80      	pop	{r7, pc}

08030dfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8030dfe:	b580      	push	{r7, lr}
 8030e00:	b082      	sub	sp, #8
 8030e02:	af00      	add	r7, sp, #0
 8030e04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8030e06:	687b      	ldr	r3, [r7, #4]
 8030e08:	2205      	movs	r2, #5
 8030e0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8030e0e:	2300      	movs	r3, #0
 8030e10:	2200      	movs	r2, #0
 8030e12:	2100      	movs	r1, #0
 8030e14:	6878      	ldr	r0, [r7, #4]
 8030e16:	f000 ff09 	bl	8031c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030e1a:	2300      	movs	r3, #0
}
 8030e1c:	4618      	mov	r0, r3
 8030e1e:	3708      	adds	r7, #8
 8030e20:	46bd      	mov	sp, r7
 8030e22:	bd80      	pop	{r7, pc}

08030e24 <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030e24:	b580      	push	{r7, lr}
 8030e26:	b082      	sub	sp, #8
 8030e28:	af00      	add	r7, sp, #0
 8030e2a:	6078      	str	r0, [r7, #4]
 8030e2c:	460b      	mov	r3, r1
 8030e2e:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8030e30:	78fb      	ldrb	r3, [r7, #3]
 8030e32:	4619      	mov	r1, r3
 8030e34:	6878      	ldr	r0, [r7, #4]
 8030e36:	f000 ff1a 	bl	8031c6e <USBD_LL_GetRxDataSize>
 8030e3a:	4603      	mov	r3, r0
}
 8030e3c:	4618      	mov	r0, r3
 8030e3e:	3708      	adds	r7, #8
 8030e40:	46bd      	mov	sp, r7
 8030e42:	bd80      	pop	{r7, pc}

08030e44 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8030e44:	b580      	push	{r7, lr}
 8030e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8030e48:	2201      	movs	r2, #1
 8030e4a:	4924      	ldr	r1, [pc, #144]	; (8030edc <MX_USB_DEVICE_Init+0x98>)
 8030e4c:	4824      	ldr	r0, [pc, #144]	; (8030ee0 <MX_USB_DEVICE_Init+0x9c>)
 8030e4e:	f7fe fcf7 	bl	802f840 <USBD_Init>
 8030e52:	4603      	mov	r3, r0
 8030e54:	2b00      	cmp	r3, #0
 8030e56:	d001      	beq.n	8030e5c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8030e58:	f7f3 fa8c 	bl	8024374 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8030e5c:	4921      	ldr	r1, [pc, #132]	; (8030ee4 <MX_USB_DEVICE_Init+0xa0>)
 8030e5e:	4820      	ldr	r0, [pc, #128]	; (8030ee0 <MX_USB_DEVICE_Init+0x9c>)
 8030e60:	f7fe fd1e 	bl	802f8a0 <USBD_RegisterClass>
 8030e64:	4603      	mov	r3, r0
 8030e66:	2b00      	cmp	r3, #0
 8030e68:	d001      	beq.n	8030e6e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8030e6a:	f7f3 fa83 	bl	8024374 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8030e6e:	491e      	ldr	r1, [pc, #120]	; (8030ee8 <MX_USB_DEVICE_Init+0xa4>)
 8030e70:	481b      	ldr	r0, [pc, #108]	; (8030ee0 <MX_USB_DEVICE_Init+0x9c>)
 8030e72:	f7fe fc0f 	bl	802f694 <USBD_CDC_RegisterInterface>
 8030e76:	4603      	mov	r3, r0
 8030e78:	2b00      	cmp	r3, #0
 8030e7a:	d001      	beq.n	8030e80 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8030e7c:	f7f3 fa7a 	bl	8024374 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8030e80:	4817      	ldr	r0, [pc, #92]	; (8030ee0 <MX_USB_DEVICE_Init+0x9c>)
 8030e82:	f7fe fd43 	bl	802f90c <USBD_Start>
 8030e86:	4603      	mov	r3, r0
 8030e88:	2b00      	cmp	r3, #0
 8030e8a:	d001      	beq.n	8030e90 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8030e8c:	f7f3 fa72 	bl	8024374 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8030e90:	2200      	movs	r2, #0
 8030e92:	4916      	ldr	r1, [pc, #88]	; (8030eec <MX_USB_DEVICE_Init+0xa8>)
 8030e94:	4816      	ldr	r0, [pc, #88]	; (8030ef0 <MX_USB_DEVICE_Init+0xac>)
 8030e96:	f7fe fcd3 	bl	802f840 <USBD_Init>
 8030e9a:	4603      	mov	r3, r0
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d001      	beq.n	8030ea4 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8030ea0:	f7f3 fa68 	bl	8024374 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8030ea4:	490f      	ldr	r1, [pc, #60]	; (8030ee4 <MX_USB_DEVICE_Init+0xa0>)
 8030ea6:	4812      	ldr	r0, [pc, #72]	; (8030ef0 <MX_USB_DEVICE_Init+0xac>)
 8030ea8:	f7fe fcfa 	bl	802f8a0 <USBD_RegisterClass>
 8030eac:	4603      	mov	r3, r0
 8030eae:	2b00      	cmp	r3, #0
 8030eb0:	d001      	beq.n	8030eb6 <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 8030eb2:	f7f3 fa5f 	bl	8024374 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8030eb6:	490f      	ldr	r1, [pc, #60]	; (8030ef4 <MX_USB_DEVICE_Init+0xb0>)
 8030eb8:	480d      	ldr	r0, [pc, #52]	; (8030ef0 <MX_USB_DEVICE_Init+0xac>)
 8030eba:	f7fe fbeb 	bl	802f694 <USBD_CDC_RegisterInterface>
 8030ebe:	4603      	mov	r3, r0
 8030ec0:	2b00      	cmp	r3, #0
 8030ec2:	d001      	beq.n	8030ec8 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 8030ec4:	f7f3 fa56 	bl	8024374 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8030ec8:	4809      	ldr	r0, [pc, #36]	; (8030ef0 <MX_USB_DEVICE_Init+0xac>)
 8030eca:	f7fe fd1f 	bl	802f90c <USBD_Start>
 8030ece:	4603      	mov	r3, r0
 8030ed0:	2b00      	cmp	r3, #0
 8030ed2:	d001      	beq.n	8030ed8 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 8030ed4:	f7f3 fa4e 	bl	8024374 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8030ed8:	bf00      	nop
 8030eda:	bd80      	pop	{r7, pc}
 8030edc:	20000228 	.word	0x20000228
 8030ee0:	200058c0 	.word	0x200058c0
 8030ee4:	20000150 	.word	0x20000150
 8030ee8:	200001e4 	.word	0x200001e4
 8030eec:	200001f8 	.word	0x200001f8
 8030ef0:	20005b9c 	.word	0x20005b9c
 8030ef4:	200001d0 	.word	0x200001d0

08030ef8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8030ef8:	b580      	push	{r7, lr}
 8030efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8030efc:	2200      	movs	r2, #0
 8030efe:	4905      	ldr	r1, [pc, #20]	; (8030f14 <CDC_Init_FS+0x1c>)
 8030f00:	4805      	ldr	r0, [pc, #20]	; (8030f18 <CDC_Init_FS+0x20>)
 8030f02:	f7fe fbe1 	bl	802f6c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8030f06:	4905      	ldr	r1, [pc, #20]	; (8030f1c <CDC_Init_FS+0x24>)
 8030f08:	4803      	ldr	r0, [pc, #12]	; (8030f18 <CDC_Init_FS+0x20>)
 8030f0a:	f7fe fbff 	bl	802f70c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030f0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8030f10:	4618      	mov	r0, r3
 8030f12:	bd80      	pop	{r7, pc}
 8030f14:	20006678 	.word	0x20006678
 8030f18:	20005b9c 	.word	0x20005b9c
 8030f1c:	20005e78 	.word	0x20005e78

08030f20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8030f20:	b480      	push	{r7}
 8030f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8030f24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8030f26:	4618      	mov	r0, r3
 8030f28:	46bd      	mov	sp, r7
 8030f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030f2e:	4770      	bx	lr

08030f30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030f30:	b480      	push	{r7}
 8030f32:	b083      	sub	sp, #12
 8030f34:	af00      	add	r7, sp, #0
 8030f36:	4603      	mov	r3, r0
 8030f38:	6039      	str	r1, [r7, #0]
 8030f3a:	71fb      	strb	r3, [r7, #7]
 8030f3c:	4613      	mov	r3, r2
 8030f3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8030f40:	79fb      	ldrb	r3, [r7, #7]
 8030f42:	2b23      	cmp	r3, #35	; 0x23
 8030f44:	d84a      	bhi.n	8030fdc <CDC_Control_FS+0xac>
 8030f46:	a201      	add	r2, pc, #4	; (adr r2, 8030f4c <CDC_Control_FS+0x1c>)
 8030f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030f4c:	08030fdd 	.word	0x08030fdd
 8030f50:	08030fdd 	.word	0x08030fdd
 8030f54:	08030fdd 	.word	0x08030fdd
 8030f58:	08030fdd 	.word	0x08030fdd
 8030f5c:	08030fdd 	.word	0x08030fdd
 8030f60:	08030fdd 	.word	0x08030fdd
 8030f64:	08030fdd 	.word	0x08030fdd
 8030f68:	08030fdd 	.word	0x08030fdd
 8030f6c:	08030fdd 	.word	0x08030fdd
 8030f70:	08030fdd 	.word	0x08030fdd
 8030f74:	08030fdd 	.word	0x08030fdd
 8030f78:	08030fdd 	.word	0x08030fdd
 8030f7c:	08030fdd 	.word	0x08030fdd
 8030f80:	08030fdd 	.word	0x08030fdd
 8030f84:	08030fdd 	.word	0x08030fdd
 8030f88:	08030fdd 	.word	0x08030fdd
 8030f8c:	08030fdd 	.word	0x08030fdd
 8030f90:	08030fdd 	.word	0x08030fdd
 8030f94:	08030fdd 	.word	0x08030fdd
 8030f98:	08030fdd 	.word	0x08030fdd
 8030f9c:	08030fdd 	.word	0x08030fdd
 8030fa0:	08030fdd 	.word	0x08030fdd
 8030fa4:	08030fdd 	.word	0x08030fdd
 8030fa8:	08030fdd 	.word	0x08030fdd
 8030fac:	08030fdd 	.word	0x08030fdd
 8030fb0:	08030fdd 	.word	0x08030fdd
 8030fb4:	08030fdd 	.word	0x08030fdd
 8030fb8:	08030fdd 	.word	0x08030fdd
 8030fbc:	08030fdd 	.word	0x08030fdd
 8030fc0:	08030fdd 	.word	0x08030fdd
 8030fc4:	08030fdd 	.word	0x08030fdd
 8030fc8:	08030fdd 	.word	0x08030fdd
 8030fcc:	08030fdd 	.word	0x08030fdd
 8030fd0:	08030fdd 	.word	0x08030fdd
 8030fd4:	08030fdd 	.word	0x08030fdd
 8030fd8:	08030fdd 	.word	0x08030fdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8030fdc:	bf00      	nop
  }

  return (USBD_OK);
 8030fde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8030fe0:	4618      	mov	r0, r3
 8030fe2:	370c      	adds	r7, #12
 8030fe4:	46bd      	mov	sp, r7
 8030fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030fea:	4770      	bx	lr

08030fec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8030fec:	b580      	push	{r7, lr}
 8030fee:	b082      	sub	sp, #8
 8030ff0:	af00      	add	r7, sp, #0
 8030ff2:	6078      	str	r0, [r7, #4]
 8030ff4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  EP3_OUT_Callback(Buf, *Len);
 8030ff6:	683b      	ldr	r3, [r7, #0]
 8030ff8:	681b      	ldr	r3, [r3, #0]
 8030ffa:	4619      	mov	r1, r3
 8030ffc:	6878      	ldr	r0, [r7, #4]
 8030ffe:	f7f2 f863 	bl	80230c8 <EP3_OUT_Callback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8031002:	6879      	ldr	r1, [r7, #4]
 8031004:	4805      	ldr	r0, [pc, #20]	; (803101c <CDC_Receive_FS+0x30>)
 8031006:	f7fe fb81 	bl	802f70c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803100a:	4804      	ldr	r0, [pc, #16]	; (803101c <CDC_Receive_FS+0x30>)
 803100c:	f7fe fbe2 	bl	802f7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8031010:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8031012:	4618      	mov	r0, r3
 8031014:	3708      	adds	r7, #8
 8031016:	46bd      	mov	sp, r7
 8031018:	bd80      	pop	{r7, pc}
 803101a:	bf00      	nop
 803101c:	20005b9c 	.word	0x20005b9c

08031020 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8031020:	b580      	push	{r7, lr}
 8031022:	b084      	sub	sp, #16
 8031024:	af00      	add	r7, sp, #0
 8031026:	6078      	str	r0, [r7, #4]
 8031028:	460b      	mov	r3, r1
 803102a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 803102c:	2300      	movs	r3, #0
 803102e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  EP1_IN_Callback();
 8031030:	f7f1 ffa4 	bl	8022f7c <EP1_IN_Callback>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8031034:	4b0f      	ldr	r3, [pc, #60]	; (8031074 <CDC_Transmit_FS+0x54>)
 8031036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803103a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 803103c:	68bb      	ldr	r3, [r7, #8]
 803103e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8031042:	2b00      	cmp	r3, #0
 8031044:	d001      	beq.n	803104a <CDC_Transmit_FS+0x2a>
    return USBD_BUSY;
 8031046:	2301      	movs	r3, #1
 8031048:	e010      	b.n	803106c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 803104a:	887b      	ldrh	r3, [r7, #2]
 803104c:	461a      	mov	r2, r3
 803104e:	6879      	ldr	r1, [r7, #4]
 8031050:	4808      	ldr	r0, [pc, #32]	; (8031074 <CDC_Transmit_FS+0x54>)
 8031052:	f7fe fb39 	bl	802f6c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8031056:	4807      	ldr	r0, [pc, #28]	; (8031074 <CDC_Transmit_FS+0x54>)
 8031058:	f7fe fb76 	bl	802f748 <USBD_CDC_TransmitPacket>
 803105c:	4603      	mov	r3, r0
 803105e:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(0.02);
 8031060:	2000      	movs	r0, #0
 8031062:	f7f6 ff3d 	bl	8027ee0 <HAL_Delay>
  EP1_IN_Callback();
 8031066:	f7f1 ff89 	bl	8022f7c <EP1_IN_Callback>
  /* USER CODE END 7 */
  return result;
 803106a:	7bfb      	ldrb	r3, [r7, #15]
}
 803106c:	4618      	mov	r0, r3
 803106e:	3710      	adds	r7, #16
 8031070:	46bd      	mov	sp, r7
 8031072:	bd80      	pop	{r7, pc}
 8031074:	20005b9c 	.word	0x20005b9c

08031078 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8031078:	b580      	push	{r7, lr}
 803107a:	b086      	sub	sp, #24
 803107c:	af00      	add	r7, sp, #0
 803107e:	60f8      	str	r0, [r7, #12]
 8031080:	60b9      	str	r1, [r7, #8]
 8031082:	4613      	mov	r3, r2
 8031084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8031086:	2300      	movs	r3, #0
 8031088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  EP1_IN_Callback();
 803108a:	f7f1 ff77 	bl	8022f7c <EP1_IN_Callback>
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  EP1_IN_Callback();
 803108e:	f7f1 ff75 	bl	8022f7c <EP1_IN_Callback>
  /* USER CODE END 13 */
  return result;
 8031092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8031096:	4618      	mov	r0, r3
 8031098:	3718      	adds	r7, #24
 803109a:	46bd      	mov	sp, r7
 803109c:	bd80      	pop	{r7, pc}
	...

080310a0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80310a0:	b580      	push	{r7, lr}
 80310a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80310a4:	2200      	movs	r2, #0
 80310a6:	4905      	ldr	r1, [pc, #20]	; (80310bc <CDC_Init_HS+0x1c>)
 80310a8:	4805      	ldr	r0, [pc, #20]	; (80310c0 <CDC_Init_HS+0x20>)
 80310aa:	f7fe fb0d 	bl	802f6c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80310ae:	4905      	ldr	r1, [pc, #20]	; (80310c4 <CDC_Init_HS+0x24>)
 80310b0:	4803      	ldr	r0, [pc, #12]	; (80310c0 <CDC_Init_HS+0x20>)
 80310b2:	f7fe fb2b 	bl	802f70c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80310b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80310b8:	4618      	mov	r0, r3
 80310ba:	bd80      	pop	{r7, pc}
 80310bc:	20007678 	.word	0x20007678
 80310c0:	200058c0 	.word	0x200058c0
 80310c4:	20006e78 	.word	0x20006e78

080310c8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80310c8:	b480      	push	{r7}
 80310ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80310cc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80310ce:	4618      	mov	r0, r3
 80310d0:	46bd      	mov	sp, r7
 80310d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80310d6:	4770      	bx	lr

080310d8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80310d8:	b480      	push	{r7}
 80310da:	b083      	sub	sp, #12
 80310dc:	af00      	add	r7, sp, #0
 80310de:	4603      	mov	r3, r0
 80310e0:	6039      	str	r1, [r7, #0]
 80310e2:	71fb      	strb	r3, [r7, #7]
 80310e4:	4613      	mov	r3, r2
 80310e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80310e8:	79fb      	ldrb	r3, [r7, #7]
 80310ea:	2b23      	cmp	r3, #35	; 0x23
 80310ec:	d84a      	bhi.n	8031184 <CDC_Control_HS+0xac>
 80310ee:	a201      	add	r2, pc, #4	; (adr r2, 80310f4 <CDC_Control_HS+0x1c>)
 80310f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80310f4:	08031185 	.word	0x08031185
 80310f8:	08031185 	.word	0x08031185
 80310fc:	08031185 	.word	0x08031185
 8031100:	08031185 	.word	0x08031185
 8031104:	08031185 	.word	0x08031185
 8031108:	08031185 	.word	0x08031185
 803110c:	08031185 	.word	0x08031185
 8031110:	08031185 	.word	0x08031185
 8031114:	08031185 	.word	0x08031185
 8031118:	08031185 	.word	0x08031185
 803111c:	08031185 	.word	0x08031185
 8031120:	08031185 	.word	0x08031185
 8031124:	08031185 	.word	0x08031185
 8031128:	08031185 	.word	0x08031185
 803112c:	08031185 	.word	0x08031185
 8031130:	08031185 	.word	0x08031185
 8031134:	08031185 	.word	0x08031185
 8031138:	08031185 	.word	0x08031185
 803113c:	08031185 	.word	0x08031185
 8031140:	08031185 	.word	0x08031185
 8031144:	08031185 	.word	0x08031185
 8031148:	08031185 	.word	0x08031185
 803114c:	08031185 	.word	0x08031185
 8031150:	08031185 	.word	0x08031185
 8031154:	08031185 	.word	0x08031185
 8031158:	08031185 	.word	0x08031185
 803115c:	08031185 	.word	0x08031185
 8031160:	08031185 	.word	0x08031185
 8031164:	08031185 	.word	0x08031185
 8031168:	08031185 	.word	0x08031185
 803116c:	08031185 	.word	0x08031185
 8031170:	08031185 	.word	0x08031185
 8031174:	08031185 	.word	0x08031185
 8031178:	08031185 	.word	0x08031185
 803117c:	08031185 	.word	0x08031185
 8031180:	08031185 	.word	0x08031185
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8031184:	bf00      	nop
  }

  return (USBD_OK);
 8031186:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8031188:	4618      	mov	r0, r3
 803118a:	370c      	adds	r7, #12
 803118c:	46bd      	mov	sp, r7
 803118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031192:	4770      	bx	lr

08031194 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8031194:	b580      	push	{r7, lr}
 8031196:	b082      	sub	sp, #8
 8031198:	af00      	add	r7, sp, #0
 803119a:	6078      	str	r0, [r7, #4]
 803119c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 803119e:	6879      	ldr	r1, [r7, #4]
 80311a0:	4805      	ldr	r0, [pc, #20]	; (80311b8 <CDC_Receive_HS+0x24>)
 80311a2:	f7fe fab3 	bl	802f70c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80311a6:	4804      	ldr	r0, [pc, #16]	; (80311b8 <CDC_Receive_HS+0x24>)
 80311a8:	f7fe fb14 	bl	802f7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80311ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80311ae:	4618      	mov	r0, r3
 80311b0:	3708      	adds	r7, #8
 80311b2:	46bd      	mov	sp, r7
 80311b4:	bd80      	pop	{r7, pc}
 80311b6:	bf00      	nop
 80311b8:	200058c0 	.word	0x200058c0

080311bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80311bc:	b480      	push	{r7}
 80311be:	b087      	sub	sp, #28
 80311c0:	af00      	add	r7, sp, #0
 80311c2:	60f8      	str	r0, [r7, #12]
 80311c4:	60b9      	str	r1, [r7, #8]
 80311c6:	4613      	mov	r3, r2
 80311c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80311ca:	2300      	movs	r3, #0
 80311cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80311ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80311d2:	4618      	mov	r0, r3
 80311d4:	371c      	adds	r7, #28
 80311d6:	46bd      	mov	sp, r7
 80311d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80311dc:	4770      	bx	lr
	...

080311e0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80311e0:	b480      	push	{r7}
 80311e2:	b083      	sub	sp, #12
 80311e4:	af00      	add	r7, sp, #0
 80311e6:	4603      	mov	r3, r0
 80311e8:	6039      	str	r1, [r7, #0]
 80311ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80311ec:	683b      	ldr	r3, [r7, #0]
 80311ee:	2212      	movs	r2, #18
 80311f0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80311f2:	4b03      	ldr	r3, [pc, #12]	; (8031200 <USBD_HS_DeviceDescriptor+0x20>)
}
 80311f4:	4618      	mov	r0, r3
 80311f6:	370c      	adds	r7, #12
 80311f8:	46bd      	mov	sp, r7
 80311fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80311fe:	4770      	bx	lr
 8031200:	20000244 	.word	0x20000244

08031204 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031204:	b480      	push	{r7}
 8031206:	b083      	sub	sp, #12
 8031208:	af00      	add	r7, sp, #0
 803120a:	4603      	mov	r3, r0
 803120c:	6039      	str	r1, [r7, #0]
 803120e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8031210:	683b      	ldr	r3, [r7, #0]
 8031212:	2204      	movs	r2, #4
 8031214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8031216:	4b03      	ldr	r3, [pc, #12]	; (8031224 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8031218:	4618      	mov	r0, r3
 803121a:	370c      	adds	r7, #12
 803121c:	46bd      	mov	sp, r7
 803121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031222:	4770      	bx	lr
 8031224:	20000258 	.word	0x20000258

08031228 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031228:	b580      	push	{r7, lr}
 803122a:	b082      	sub	sp, #8
 803122c:	af00      	add	r7, sp, #0
 803122e:	4603      	mov	r3, r0
 8031230:	6039      	str	r1, [r7, #0]
 8031232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8031234:	79fb      	ldrb	r3, [r7, #7]
 8031236:	2b00      	cmp	r3, #0
 8031238:	d105      	bne.n	8031246 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 803123a:	683a      	ldr	r2, [r7, #0]
 803123c:	4907      	ldr	r1, [pc, #28]	; (803125c <USBD_HS_ProductStrDescriptor+0x34>)
 803123e:	4808      	ldr	r0, [pc, #32]	; (8031260 <USBD_HS_ProductStrDescriptor+0x38>)
 8031240:	f7ff fd10 	bl	8030c64 <USBD_GetString>
 8031244:	e004      	b.n	8031250 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8031246:	683a      	ldr	r2, [r7, #0]
 8031248:	4904      	ldr	r1, [pc, #16]	; (803125c <USBD_HS_ProductStrDescriptor+0x34>)
 803124a:	4805      	ldr	r0, [pc, #20]	; (8031260 <USBD_HS_ProductStrDescriptor+0x38>)
 803124c:	f7ff fd0a 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8031250:	4b02      	ldr	r3, [pc, #8]	; (803125c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8031252:	4618      	mov	r0, r3
 8031254:	3708      	adds	r7, #8
 8031256:	46bd      	mov	sp, r7
 8031258:	bd80      	pop	{r7, pc}
 803125a:	bf00      	nop
 803125c:	20007e78 	.word	0x20007e78
 8031260:	08037554 	.word	0x08037554

08031264 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031264:	b580      	push	{r7, lr}
 8031266:	b082      	sub	sp, #8
 8031268:	af00      	add	r7, sp, #0
 803126a:	4603      	mov	r3, r0
 803126c:	6039      	str	r1, [r7, #0]
 803126e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8031270:	683a      	ldr	r2, [r7, #0]
 8031272:	4904      	ldr	r1, [pc, #16]	; (8031284 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8031274:	4804      	ldr	r0, [pc, #16]	; (8031288 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8031276:	f7ff fcf5 	bl	8030c64 <USBD_GetString>
  return USBD_StrDesc;
 803127a:	4b02      	ldr	r3, [pc, #8]	; (8031284 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 803127c:	4618      	mov	r0, r3
 803127e:	3708      	adds	r7, #8
 8031280:	46bd      	mov	sp, r7
 8031282:	bd80      	pop	{r7, pc}
 8031284:	20007e78 	.word	0x20007e78
 8031288:	0803756c 	.word	0x0803756c

0803128c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803128c:	b580      	push	{r7, lr}
 803128e:	b082      	sub	sp, #8
 8031290:	af00      	add	r7, sp, #0
 8031292:	4603      	mov	r3, r0
 8031294:	6039      	str	r1, [r7, #0]
 8031296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8031298:	683b      	ldr	r3, [r7, #0]
 803129a:	221a      	movs	r2, #26
 803129c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803129e:	f000 f8e7 	bl	8031470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80312a2:	4b02      	ldr	r3, [pc, #8]	; (80312ac <USBD_HS_SerialStrDescriptor+0x20>)
}
 80312a4:	4618      	mov	r0, r3
 80312a6:	3708      	adds	r7, #8
 80312a8:	46bd      	mov	sp, r7
 80312aa:	bd80      	pop	{r7, pc}
 80312ac:	2000025c 	.word	0x2000025c

080312b0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80312b0:	b580      	push	{r7, lr}
 80312b2:	b082      	sub	sp, #8
 80312b4:	af00      	add	r7, sp, #0
 80312b6:	4603      	mov	r3, r0
 80312b8:	6039      	str	r1, [r7, #0]
 80312ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80312bc:	79fb      	ldrb	r3, [r7, #7]
 80312be:	2b00      	cmp	r3, #0
 80312c0:	d105      	bne.n	80312ce <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80312c2:	683a      	ldr	r2, [r7, #0]
 80312c4:	4907      	ldr	r1, [pc, #28]	; (80312e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80312c6:	4808      	ldr	r0, [pc, #32]	; (80312e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80312c8:	f7ff fccc 	bl	8030c64 <USBD_GetString>
 80312cc:	e004      	b.n	80312d8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80312ce:	683a      	ldr	r2, [r7, #0]
 80312d0:	4904      	ldr	r1, [pc, #16]	; (80312e4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80312d2:	4805      	ldr	r0, [pc, #20]	; (80312e8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80312d4:	f7ff fcc6 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80312d8:	4b02      	ldr	r3, [pc, #8]	; (80312e4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80312da:	4618      	mov	r0, r3
 80312dc:	3708      	adds	r7, #8
 80312de:	46bd      	mov	sp, r7
 80312e0:	bd80      	pop	{r7, pc}
 80312e2:	bf00      	nop
 80312e4:	20007e78 	.word	0x20007e78
 80312e8:	08037580 	.word	0x08037580

080312ec <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80312ec:	b580      	push	{r7, lr}
 80312ee:	b082      	sub	sp, #8
 80312f0:	af00      	add	r7, sp, #0
 80312f2:	4603      	mov	r3, r0
 80312f4:	6039      	str	r1, [r7, #0]
 80312f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80312f8:	79fb      	ldrb	r3, [r7, #7]
 80312fa:	2b00      	cmp	r3, #0
 80312fc:	d105      	bne.n	803130a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80312fe:	683a      	ldr	r2, [r7, #0]
 8031300:	4907      	ldr	r1, [pc, #28]	; (8031320 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8031302:	4808      	ldr	r0, [pc, #32]	; (8031324 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8031304:	f7ff fcae 	bl	8030c64 <USBD_GetString>
 8031308:	e004      	b.n	8031314 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 803130a:	683a      	ldr	r2, [r7, #0]
 803130c:	4904      	ldr	r1, [pc, #16]	; (8031320 <USBD_HS_InterfaceStrDescriptor+0x34>)
 803130e:	4805      	ldr	r0, [pc, #20]	; (8031324 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8031310:	f7ff fca8 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8031314:	4b02      	ldr	r3, [pc, #8]	; (8031320 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8031316:	4618      	mov	r0, r3
 8031318:	3708      	adds	r7, #8
 803131a:	46bd      	mov	sp, r7
 803131c:	bd80      	pop	{r7, pc}
 803131e:	bf00      	nop
 8031320:	20007e78 	.word	0x20007e78
 8031324:	0803758c 	.word	0x0803758c

08031328 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031328:	b480      	push	{r7}
 803132a:	b083      	sub	sp, #12
 803132c:	af00      	add	r7, sp, #0
 803132e:	4603      	mov	r3, r0
 8031330:	6039      	str	r1, [r7, #0]
 8031332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8031334:	683b      	ldr	r3, [r7, #0]
 8031336:	2212      	movs	r2, #18
 8031338:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803133a:	4b03      	ldr	r3, [pc, #12]	; (8031348 <USBD_FS_DeviceDescriptor+0x20>)
}
 803133c:	4618      	mov	r0, r3
 803133e:	370c      	adds	r7, #12
 8031340:	46bd      	mov	sp, r7
 8031342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031346:	4770      	bx	lr
 8031348:	20000214 	.word	0x20000214

0803134c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803134c:	b480      	push	{r7}
 803134e:	b083      	sub	sp, #12
 8031350:	af00      	add	r7, sp, #0
 8031352:	4603      	mov	r3, r0
 8031354:	6039      	str	r1, [r7, #0]
 8031356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8031358:	683b      	ldr	r3, [r7, #0]
 803135a:	2204      	movs	r2, #4
 803135c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803135e:	4b03      	ldr	r3, [pc, #12]	; (803136c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8031360:	4618      	mov	r0, r3
 8031362:	370c      	adds	r7, #12
 8031364:	46bd      	mov	sp, r7
 8031366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803136a:	4770      	bx	lr
 803136c:	20000258 	.word	0x20000258

08031370 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031370:	b580      	push	{r7, lr}
 8031372:	b082      	sub	sp, #8
 8031374:	af00      	add	r7, sp, #0
 8031376:	4603      	mov	r3, r0
 8031378:	6039      	str	r1, [r7, #0]
 803137a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803137c:	79fb      	ldrb	r3, [r7, #7]
 803137e:	2b00      	cmp	r3, #0
 8031380:	d105      	bne.n	803138e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8031382:	683a      	ldr	r2, [r7, #0]
 8031384:	4907      	ldr	r1, [pc, #28]	; (80313a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8031386:	4808      	ldr	r0, [pc, #32]	; (80313a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8031388:	f7ff fc6c 	bl	8030c64 <USBD_GetString>
 803138c:	e004      	b.n	8031398 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803138e:	683a      	ldr	r2, [r7, #0]
 8031390:	4904      	ldr	r1, [pc, #16]	; (80313a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8031392:	4805      	ldr	r0, [pc, #20]	; (80313a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8031394:	f7ff fc66 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8031398:	4b02      	ldr	r3, [pc, #8]	; (80313a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803139a:	4618      	mov	r0, r3
 803139c:	3708      	adds	r7, #8
 803139e:	46bd      	mov	sp, r7
 80313a0:	bd80      	pop	{r7, pc}
 80313a2:	bf00      	nop
 80313a4:	20007e78 	.word	0x20007e78
 80313a8:	08037554 	.word	0x08037554

080313ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80313ac:	b580      	push	{r7, lr}
 80313ae:	b082      	sub	sp, #8
 80313b0:	af00      	add	r7, sp, #0
 80313b2:	4603      	mov	r3, r0
 80313b4:	6039      	str	r1, [r7, #0]
 80313b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80313b8:	683a      	ldr	r2, [r7, #0]
 80313ba:	4904      	ldr	r1, [pc, #16]	; (80313cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80313bc:	4804      	ldr	r0, [pc, #16]	; (80313d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80313be:	f7ff fc51 	bl	8030c64 <USBD_GetString>
  return USBD_StrDesc;
 80313c2:	4b02      	ldr	r3, [pc, #8]	; (80313cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80313c4:	4618      	mov	r0, r3
 80313c6:	3708      	adds	r7, #8
 80313c8:	46bd      	mov	sp, r7
 80313ca:	bd80      	pop	{r7, pc}
 80313cc:	20007e78 	.word	0x20007e78
 80313d0:	0803756c 	.word	0x0803756c

080313d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80313d4:	b580      	push	{r7, lr}
 80313d6:	b082      	sub	sp, #8
 80313d8:	af00      	add	r7, sp, #0
 80313da:	4603      	mov	r3, r0
 80313dc:	6039      	str	r1, [r7, #0]
 80313de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80313e0:	683b      	ldr	r3, [r7, #0]
 80313e2:	221a      	movs	r2, #26
 80313e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80313e6:	f000 f843 	bl	8031470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80313ea:	4b02      	ldr	r3, [pc, #8]	; (80313f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80313ec:	4618      	mov	r0, r3
 80313ee:	3708      	adds	r7, #8
 80313f0:	46bd      	mov	sp, r7
 80313f2:	bd80      	pop	{r7, pc}
 80313f4:	2000025c 	.word	0x2000025c

080313f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80313f8:	b580      	push	{r7, lr}
 80313fa:	b082      	sub	sp, #8
 80313fc:	af00      	add	r7, sp, #0
 80313fe:	4603      	mov	r3, r0
 8031400:	6039      	str	r1, [r7, #0]
 8031402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8031404:	79fb      	ldrb	r3, [r7, #7]
 8031406:	2b00      	cmp	r3, #0
 8031408:	d105      	bne.n	8031416 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803140a:	683a      	ldr	r2, [r7, #0]
 803140c:	4907      	ldr	r1, [pc, #28]	; (803142c <USBD_FS_ConfigStrDescriptor+0x34>)
 803140e:	4808      	ldr	r0, [pc, #32]	; (8031430 <USBD_FS_ConfigStrDescriptor+0x38>)
 8031410:	f7ff fc28 	bl	8030c64 <USBD_GetString>
 8031414:	e004      	b.n	8031420 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8031416:	683a      	ldr	r2, [r7, #0]
 8031418:	4904      	ldr	r1, [pc, #16]	; (803142c <USBD_FS_ConfigStrDescriptor+0x34>)
 803141a:	4805      	ldr	r0, [pc, #20]	; (8031430 <USBD_FS_ConfigStrDescriptor+0x38>)
 803141c:	f7ff fc22 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8031420:	4b02      	ldr	r3, [pc, #8]	; (803142c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8031422:	4618      	mov	r0, r3
 8031424:	3708      	adds	r7, #8
 8031426:	46bd      	mov	sp, r7
 8031428:	bd80      	pop	{r7, pc}
 803142a:	bf00      	nop
 803142c:	20007e78 	.word	0x20007e78
 8031430:	08037580 	.word	0x08037580

08031434 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8031434:	b580      	push	{r7, lr}
 8031436:	b082      	sub	sp, #8
 8031438:	af00      	add	r7, sp, #0
 803143a:	4603      	mov	r3, r0
 803143c:	6039      	str	r1, [r7, #0]
 803143e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8031440:	79fb      	ldrb	r3, [r7, #7]
 8031442:	2b00      	cmp	r3, #0
 8031444:	d105      	bne.n	8031452 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8031446:	683a      	ldr	r2, [r7, #0]
 8031448:	4907      	ldr	r1, [pc, #28]	; (8031468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803144a:	4808      	ldr	r0, [pc, #32]	; (803146c <USBD_FS_InterfaceStrDescriptor+0x38>)
 803144c:	f7ff fc0a 	bl	8030c64 <USBD_GetString>
 8031450:	e004      	b.n	803145c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8031452:	683a      	ldr	r2, [r7, #0]
 8031454:	4904      	ldr	r1, [pc, #16]	; (8031468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8031456:	4805      	ldr	r0, [pc, #20]	; (803146c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8031458:	f7ff fc04 	bl	8030c64 <USBD_GetString>
  }
  return USBD_StrDesc;
 803145c:	4b02      	ldr	r3, [pc, #8]	; (8031468 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803145e:	4618      	mov	r0, r3
 8031460:	3708      	adds	r7, #8
 8031462:	46bd      	mov	sp, r7
 8031464:	bd80      	pop	{r7, pc}
 8031466:	bf00      	nop
 8031468:	20007e78 	.word	0x20007e78
 803146c:	0803758c 	.word	0x0803758c

08031470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8031470:	b580      	push	{r7, lr}
 8031472:	b084      	sub	sp, #16
 8031474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8031476:	68fa      	ldr	r2, [r7, #12]
 8031478:	68bb      	ldr	r3, [r7, #8]
 803147a:	4413      	add	r3, r2
 803147c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803147e:	68fb      	ldr	r3, [r7, #12]
 8031480:	2b00      	cmp	r3, #0
 8031482:	d009      	beq.n	8031498 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8031484:	2208      	movs	r2, #8
 8031486:	4906      	ldr	r1, [pc, #24]	; (80314a0 <Get_SerialNum+0x30>)
 8031488:	68f8      	ldr	r0, [r7, #12]
 803148a:	f000 f80d 	bl	80314a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803148e:	2204      	movs	r2, #4
 8031490:	4904      	ldr	r1, [pc, #16]	; (80314a4 <Get_SerialNum+0x34>)
 8031492:	6878      	ldr	r0, [r7, #4]
 8031494:	f000 f808 	bl	80314a8 <IntToUnicode>
  }
}
 8031498:	bf00      	nop
 803149a:	3710      	adds	r7, #16
 803149c:	46bd      	mov	sp, r7
 803149e:	bd80      	pop	{r7, pc}
 80314a0:	2000025e 	.word	0x2000025e
 80314a4:	2000026e 	.word	0x2000026e

080314a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80314a8:	b480      	push	{r7}
 80314aa:	b087      	sub	sp, #28
 80314ac:	af00      	add	r7, sp, #0
 80314ae:	60f8      	str	r0, [r7, #12]
 80314b0:	60b9      	str	r1, [r7, #8]
 80314b2:	4613      	mov	r3, r2
 80314b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80314b6:	2300      	movs	r3, #0
 80314b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80314ba:	2300      	movs	r3, #0
 80314bc:	75fb      	strb	r3, [r7, #23]
 80314be:	e027      	b.n	8031510 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80314c0:	68fb      	ldr	r3, [r7, #12]
 80314c2:	0f1b      	lsrs	r3, r3, #28
 80314c4:	2b09      	cmp	r3, #9
 80314c6:	d80b      	bhi.n	80314e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80314c8:	68fb      	ldr	r3, [r7, #12]
 80314ca:	0f1b      	lsrs	r3, r3, #28
 80314cc:	b2da      	uxtb	r2, r3
 80314ce:	7dfb      	ldrb	r3, [r7, #23]
 80314d0:	005b      	lsls	r3, r3, #1
 80314d2:	4619      	mov	r1, r3
 80314d4:	68bb      	ldr	r3, [r7, #8]
 80314d6:	440b      	add	r3, r1
 80314d8:	3230      	adds	r2, #48	; 0x30
 80314da:	b2d2      	uxtb	r2, r2
 80314dc:	701a      	strb	r2, [r3, #0]
 80314de:	e00a      	b.n	80314f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80314e0:	68fb      	ldr	r3, [r7, #12]
 80314e2:	0f1b      	lsrs	r3, r3, #28
 80314e4:	b2da      	uxtb	r2, r3
 80314e6:	7dfb      	ldrb	r3, [r7, #23]
 80314e8:	005b      	lsls	r3, r3, #1
 80314ea:	4619      	mov	r1, r3
 80314ec:	68bb      	ldr	r3, [r7, #8]
 80314ee:	440b      	add	r3, r1
 80314f0:	3237      	adds	r2, #55	; 0x37
 80314f2:	b2d2      	uxtb	r2, r2
 80314f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80314f6:	68fb      	ldr	r3, [r7, #12]
 80314f8:	011b      	lsls	r3, r3, #4
 80314fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80314fc:	7dfb      	ldrb	r3, [r7, #23]
 80314fe:	005b      	lsls	r3, r3, #1
 8031500:	3301      	adds	r3, #1
 8031502:	68ba      	ldr	r2, [r7, #8]
 8031504:	4413      	add	r3, r2
 8031506:	2200      	movs	r2, #0
 8031508:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803150a:	7dfb      	ldrb	r3, [r7, #23]
 803150c:	3301      	adds	r3, #1
 803150e:	75fb      	strb	r3, [r7, #23]
 8031510:	7dfa      	ldrb	r2, [r7, #23]
 8031512:	79fb      	ldrb	r3, [r7, #7]
 8031514:	429a      	cmp	r2, r3
 8031516:	d3d3      	bcc.n	80314c0 <IntToUnicode+0x18>
  }
}
 8031518:	bf00      	nop
 803151a:	bf00      	nop
 803151c:	371c      	adds	r7, #28
 803151e:	46bd      	mov	sp, r7
 8031520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031524:	4770      	bx	lr
	...

08031528 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8031528:	b580      	push	{r7, lr}
 803152a:	b08e      	sub	sp, #56	; 0x38
 803152c:	af00      	add	r7, sp, #0
 803152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8031530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8031534:	2200      	movs	r2, #0
 8031536:	601a      	str	r2, [r3, #0]
 8031538:	605a      	str	r2, [r3, #4]
 803153a:	609a      	str	r2, [r3, #8]
 803153c:	60da      	str	r2, [r3, #12]
 803153e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8031540:	687b      	ldr	r3, [r7, #4]
 8031542:	681b      	ldr	r3, [r3, #0]
 8031544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8031548:	d13b      	bne.n	80315c2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803154a:	2300      	movs	r3, #0
 803154c:	623b      	str	r3, [r7, #32]
 803154e:	4b69      	ldr	r3, [pc, #420]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 8031550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031552:	4a68      	ldr	r2, [pc, #416]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 8031554:	f043 0301 	orr.w	r3, r3, #1
 8031558:	6313      	str	r3, [r2, #48]	; 0x30
 803155a:	4b66      	ldr	r3, [pc, #408]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803155e:	f003 0301 	and.w	r3, r3, #1
 8031562:	623b      	str	r3, [r7, #32]
 8031564:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8031566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803156c:	2302      	movs	r3, #2
 803156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8031570:	2300      	movs	r3, #0
 8031572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8031574:	2303      	movs	r3, #3
 8031576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8031578:	230a      	movs	r3, #10
 803157a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8031580:	4619      	mov	r1, r3
 8031582:	485d      	ldr	r0, [pc, #372]	; (80316f8 <HAL_PCD_MspInit+0x1d0>)
 8031584:	f7f7 fa62 	bl	8028a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8031588:	4b5a      	ldr	r3, [pc, #360]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803158c:	4a59      	ldr	r2, [pc, #356]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803158e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031592:	6353      	str	r3, [r2, #52]	; 0x34
 8031594:	2300      	movs	r3, #0
 8031596:	61fb      	str	r3, [r7, #28]
 8031598:	4b56      	ldr	r3, [pc, #344]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803159c:	4a55      	ldr	r2, [pc, #340]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80315a2:	6453      	str	r3, [r2, #68]	; 0x44
 80315a4:	4b53      	ldr	r3, [pc, #332]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80315a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80315ac:	61fb      	str	r3, [r7, #28]
 80315ae:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80315b0:	2200      	movs	r2, #0
 80315b2:	2100      	movs	r1, #0
 80315b4:	2043      	movs	r0, #67	; 0x43
 80315b6:	f7f6 fde6 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80315ba:	2043      	movs	r0, #67	; 0x43
 80315bc:	f7f6 fdff 	bl	80281be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80315c0:	e094      	b.n	80316ec <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 80315c2:	687b      	ldr	r3, [r7, #4]
 80315c4:	681b      	ldr	r3, [r3, #0]
 80315c6:	4a4d      	ldr	r2, [pc, #308]	; (80316fc <HAL_PCD_MspInit+0x1d4>)
 80315c8:	4293      	cmp	r3, r2
 80315ca:	f040 808f 	bne.w	80316ec <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80315ce:	2300      	movs	r3, #0
 80315d0:	61bb      	str	r3, [r7, #24]
 80315d2:	4b48      	ldr	r3, [pc, #288]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80315d6:	4a47      	ldr	r2, [pc, #284]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315d8:	f043 0304 	orr.w	r3, r3, #4
 80315dc:	6313      	str	r3, [r2, #48]	; 0x30
 80315de:	4b45      	ldr	r3, [pc, #276]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80315e2:	f003 0304 	and.w	r3, r3, #4
 80315e6:	61bb      	str	r3, [r7, #24]
 80315e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80315ea:	2300      	movs	r3, #0
 80315ec:	617b      	str	r3, [r7, #20]
 80315ee:	4b41      	ldr	r3, [pc, #260]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80315f2:	4a40      	ldr	r2, [pc, #256]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315f4:	f043 0301 	orr.w	r3, r3, #1
 80315f8:	6313      	str	r3, [r2, #48]	; 0x30
 80315fa:	4b3e      	ldr	r3, [pc, #248]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80315fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80315fe:	f003 0301 	and.w	r3, r3, #1
 8031602:	617b      	str	r3, [r7, #20]
 8031604:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8031606:	2300      	movs	r3, #0
 8031608:	613b      	str	r3, [r7, #16]
 803160a:	4b3a      	ldr	r3, [pc, #232]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803160e:	4a39      	ldr	r2, [pc, #228]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 8031610:	f043 0302 	orr.w	r3, r3, #2
 8031614:	6313      	str	r3, [r2, #48]	; 0x30
 8031616:	4b37      	ldr	r3, [pc, #220]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 8031618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803161a:	f003 0302 	and.w	r3, r3, #2
 803161e:	613b      	str	r3, [r7, #16]
 8031620:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8031622:	230d      	movs	r3, #13
 8031624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8031626:	2302      	movs	r3, #2
 8031628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803162a:	2300      	movs	r3, #0
 803162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803162e:	2303      	movs	r3, #3
 8031630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8031632:	230a      	movs	r3, #10
 8031634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8031636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803163a:	4619      	mov	r1, r3
 803163c:	4830      	ldr	r0, [pc, #192]	; (8031700 <HAL_PCD_MspInit+0x1d8>)
 803163e:	f7f7 fa05 	bl	8028a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8031642:	2328      	movs	r3, #40	; 0x28
 8031644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8031646:	2302      	movs	r3, #2
 8031648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803164a:	2300      	movs	r3, #0
 803164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803164e:	2303      	movs	r3, #3
 8031650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8031652:	230a      	movs	r3, #10
 8031654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8031656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803165a:	4619      	mov	r1, r3
 803165c:	4826      	ldr	r0, [pc, #152]	; (80316f8 <HAL_PCD_MspInit+0x1d0>)
 803165e:	f7f7 f9f5 	bl	8028a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8031662:	f643 4323 	movw	r3, #15395	; 0x3c23
 8031666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8031668:	2302      	movs	r3, #2
 803166a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803166c:	2300      	movs	r3, #0
 803166e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8031670:	2303      	movs	r3, #3
 8031672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8031674:	230a      	movs	r3, #10
 8031676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8031678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803167c:	4619      	mov	r1, r3
 803167e:	4821      	ldr	r0, [pc, #132]	; (8031704 <HAL_PCD_MspInit+0x1dc>)
 8031680:	f7f7 f9e4 	bl	8028a4c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8031684:	2300      	movs	r3, #0
 8031686:	60fb      	str	r3, [r7, #12]
 8031688:	4b1a      	ldr	r3, [pc, #104]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803168c:	4a19      	ldr	r2, [pc, #100]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 803168e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8031692:	6313      	str	r3, [r2, #48]	; 0x30
 8031694:	4b17      	ldr	r3, [pc, #92]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 8031696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031698:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803169c:	60fb      	str	r3, [r7, #12]
 803169e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80316a0:	2300      	movs	r3, #0
 80316a2:	60bb      	str	r3, [r7, #8]
 80316a4:	4b13      	ldr	r3, [pc, #76]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80316a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80316a8:	4a12      	ldr	r2, [pc, #72]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80316aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80316ae:	6313      	str	r3, [r2, #48]	; 0x30
 80316b0:	4b10      	ldr	r3, [pc, #64]	; (80316f4 <HAL_PCD_MspInit+0x1cc>)
 80316b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80316b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80316b8:	60bb      	str	r3, [r7, #8]
 80316ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 80316bc:	2200      	movs	r2, #0
 80316be:	2100      	movs	r1, #0
 80316c0:	204a      	movs	r0, #74	; 0x4a
 80316c2:	f7f6 fd60 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 80316c6:	204a      	movs	r0, #74	; 0x4a
 80316c8:	f7f6 fd79 	bl	80281be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 80316cc:	2200      	movs	r2, #0
 80316ce:	2100      	movs	r1, #0
 80316d0:	204b      	movs	r0, #75	; 0x4b
 80316d2:	f7f6 fd58 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 80316d6:	204b      	movs	r0, #75	; 0x4b
 80316d8:	f7f6 fd71 	bl	80281be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80316dc:	2200      	movs	r2, #0
 80316de:	2100      	movs	r1, #0
 80316e0:	204d      	movs	r0, #77	; 0x4d
 80316e2:	f7f6 fd50 	bl	8028186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80316e6:	204d      	movs	r0, #77	; 0x4d
 80316e8:	f7f6 fd69 	bl	80281be <HAL_NVIC_EnableIRQ>
}
 80316ec:	bf00      	nop
 80316ee:	3738      	adds	r7, #56	; 0x38
 80316f0:	46bd      	mov	sp, r7
 80316f2:	bd80      	pop	{r7, pc}
 80316f4:	40023800 	.word	0x40023800
 80316f8:	40020000 	.word	0x40020000
 80316fc:	40040000 	.word	0x40040000
 8031700:	40020800 	.word	0x40020800
 8031704:	40020400 	.word	0x40020400

08031708 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031708:	b580      	push	{r7, lr}
 803170a:	b082      	sub	sp, #8
 803170c:	af00      	add	r7, sp, #0
 803170e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8031710:	687b      	ldr	r3, [r7, #4]
 8031712:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8031716:	687b      	ldr	r3, [r7, #4]
 8031718:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803171c:	4619      	mov	r1, r3
 803171e:	4610      	mov	r0, r2
 8031720:	f7fe f941 	bl	802f9a6 <USBD_LL_SetupStage>
}
 8031724:	bf00      	nop
 8031726:	3708      	adds	r7, #8
 8031728:	46bd      	mov	sp, r7
 803172a:	bd80      	pop	{r7, pc}

0803172c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803172c:	b580      	push	{r7, lr}
 803172e:	b082      	sub	sp, #8
 8031730:	af00      	add	r7, sp, #0
 8031732:	6078      	str	r0, [r7, #4]
 8031734:	460b      	mov	r3, r1
 8031736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8031738:	687b      	ldr	r3, [r7, #4]
 803173a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803173e:	78fa      	ldrb	r2, [r7, #3]
 8031740:	6879      	ldr	r1, [r7, #4]
 8031742:	4613      	mov	r3, r2
 8031744:	00db      	lsls	r3, r3, #3
 8031746:	4413      	add	r3, r2
 8031748:	009b      	lsls	r3, r3, #2
 803174a:	440b      	add	r3, r1
 803174c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8031750:	681a      	ldr	r2, [r3, #0]
 8031752:	78fb      	ldrb	r3, [r7, #3]
 8031754:	4619      	mov	r1, r3
 8031756:	f7fe f97b 	bl	802fa50 <USBD_LL_DataOutStage>
}
 803175a:	bf00      	nop
 803175c:	3708      	adds	r7, #8
 803175e:	46bd      	mov	sp, r7
 8031760:	bd80      	pop	{r7, pc}

08031762 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031762:	b580      	push	{r7, lr}
 8031764:	b082      	sub	sp, #8
 8031766:	af00      	add	r7, sp, #0
 8031768:	6078      	str	r0, [r7, #4]
 803176a:	460b      	mov	r3, r1
 803176c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803176e:	687b      	ldr	r3, [r7, #4]
 8031770:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8031774:	78fa      	ldrb	r2, [r7, #3]
 8031776:	6879      	ldr	r1, [r7, #4]
 8031778:	4613      	mov	r3, r2
 803177a:	00db      	lsls	r3, r3, #3
 803177c:	4413      	add	r3, r2
 803177e:	009b      	lsls	r3, r3, #2
 8031780:	440b      	add	r3, r1
 8031782:	334c      	adds	r3, #76	; 0x4c
 8031784:	681a      	ldr	r2, [r3, #0]
 8031786:	78fb      	ldrb	r3, [r7, #3]
 8031788:	4619      	mov	r1, r3
 803178a:	f7fe fa14 	bl	802fbb6 <USBD_LL_DataInStage>
}
 803178e:	bf00      	nop
 8031790:	3708      	adds	r7, #8
 8031792:	46bd      	mov	sp, r7
 8031794:	bd80      	pop	{r7, pc}

08031796 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031796:	b580      	push	{r7, lr}
 8031798:	b082      	sub	sp, #8
 803179a:	af00      	add	r7, sp, #0
 803179c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803179e:	687b      	ldr	r3, [r7, #4]
 80317a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80317a4:	4618      	mov	r0, r3
 80317a6:	f7fe fb48 	bl	802fe3a <USBD_LL_SOF>
}
 80317aa:	bf00      	nop
 80317ac:	3708      	adds	r7, #8
 80317ae:	46bd      	mov	sp, r7
 80317b0:	bd80      	pop	{r7, pc}

080317b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80317b2:	b580      	push	{r7, lr}
 80317b4:	b084      	sub	sp, #16
 80317b6:	af00      	add	r7, sp, #0
 80317b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80317ba:	2301      	movs	r3, #1
 80317bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80317be:	687b      	ldr	r3, [r7, #4]
 80317c0:	68db      	ldr	r3, [r3, #12]
 80317c2:	2b00      	cmp	r3, #0
 80317c4:	d102      	bne.n	80317cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80317c6:	2300      	movs	r3, #0
 80317c8:	73fb      	strb	r3, [r7, #15]
 80317ca:	e008      	b.n	80317de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80317cc:	687b      	ldr	r3, [r7, #4]
 80317ce:	68db      	ldr	r3, [r3, #12]
 80317d0:	2b02      	cmp	r3, #2
 80317d2:	d102      	bne.n	80317da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80317d4:	2301      	movs	r3, #1
 80317d6:	73fb      	strb	r3, [r7, #15]
 80317d8:	e001      	b.n	80317de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80317da:	f7f2 fdcb 	bl	8024374 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80317de:	687b      	ldr	r3, [r7, #4]
 80317e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80317e4:	7bfa      	ldrb	r2, [r7, #15]
 80317e6:	4611      	mov	r1, r2
 80317e8:	4618      	mov	r0, r3
 80317ea:	f7fe fae8 	bl	802fdbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80317ee:	687b      	ldr	r3, [r7, #4]
 80317f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80317f4:	4618      	mov	r0, r3
 80317f6:	f7fe fa90 	bl	802fd1a <USBD_LL_Reset>
}
 80317fa:	bf00      	nop
 80317fc:	3710      	adds	r7, #16
 80317fe:	46bd      	mov	sp, r7
 8031800:	bd80      	pop	{r7, pc}
	...

08031804 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031804:	b580      	push	{r7, lr}
 8031806:	b082      	sub	sp, #8
 8031808:	af00      	add	r7, sp, #0
 803180a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803180c:	687b      	ldr	r3, [r7, #4]
 803180e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031812:	4618      	mov	r0, r3
 8031814:	f7fe fae3 	bl	802fdde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8031818:	687b      	ldr	r3, [r7, #4]
 803181a:	681b      	ldr	r3, [r3, #0]
 803181c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8031820:	681b      	ldr	r3, [r3, #0]
 8031822:	687a      	ldr	r2, [r7, #4]
 8031824:	6812      	ldr	r2, [r2, #0]
 8031826:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803182a:	f043 0301 	orr.w	r3, r3, #1
 803182e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8031830:	687b      	ldr	r3, [r7, #4]
 8031832:	6a1b      	ldr	r3, [r3, #32]
 8031834:	2b00      	cmp	r3, #0
 8031836:	d005      	beq.n	8031844 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8031838:	4b04      	ldr	r3, [pc, #16]	; (803184c <HAL_PCD_SuspendCallback+0x48>)
 803183a:	691b      	ldr	r3, [r3, #16]
 803183c:	4a03      	ldr	r2, [pc, #12]	; (803184c <HAL_PCD_SuspendCallback+0x48>)
 803183e:	f043 0306 	orr.w	r3, r3, #6
 8031842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8031844:	bf00      	nop
 8031846:	3708      	adds	r7, #8
 8031848:	46bd      	mov	sp, r7
 803184a:	bd80      	pop	{r7, pc}
 803184c:	e000ed00 	.word	0xe000ed00

08031850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031850:	b580      	push	{r7, lr}
 8031852:	b082      	sub	sp, #8
 8031854:	af00      	add	r7, sp, #0
 8031856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8031858:	687b      	ldr	r3, [r7, #4]
 803185a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803185e:	4618      	mov	r0, r3
 8031860:	f7fe fad3 	bl	802fe0a <USBD_LL_Resume>
}
 8031864:	bf00      	nop
 8031866:	3708      	adds	r7, #8
 8031868:	46bd      	mov	sp, r7
 803186a:	bd80      	pop	{r7, pc}

0803186c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803186c:	b580      	push	{r7, lr}
 803186e:	b082      	sub	sp, #8
 8031870:	af00      	add	r7, sp, #0
 8031872:	6078      	str	r0, [r7, #4]
 8031874:	460b      	mov	r3, r1
 8031876:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8031878:	687b      	ldr	r3, [r7, #4]
 803187a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803187e:	78fa      	ldrb	r2, [r7, #3]
 8031880:	4611      	mov	r1, r2
 8031882:	4618      	mov	r0, r3
 8031884:	f7fe fb2b 	bl	802fede <USBD_LL_IsoOUTIncomplete>
}
 8031888:	bf00      	nop
 803188a:	3708      	adds	r7, #8
 803188c:	46bd      	mov	sp, r7
 803188e:	bd80      	pop	{r7, pc}

08031890 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031890:	b580      	push	{r7, lr}
 8031892:	b082      	sub	sp, #8
 8031894:	af00      	add	r7, sp, #0
 8031896:	6078      	str	r0, [r7, #4]
 8031898:	460b      	mov	r3, r1
 803189a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803189c:	687b      	ldr	r3, [r7, #4]
 803189e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80318a2:	78fa      	ldrb	r2, [r7, #3]
 80318a4:	4611      	mov	r1, r2
 80318a6:	4618      	mov	r0, r3
 80318a8:	f7fe fae7 	bl	802fe7a <USBD_LL_IsoINIncomplete>
}
 80318ac:	bf00      	nop
 80318ae:	3708      	adds	r7, #8
 80318b0:	46bd      	mov	sp, r7
 80318b2:	bd80      	pop	{r7, pc}

080318b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80318b4:	b580      	push	{r7, lr}
 80318b6:	b082      	sub	sp, #8
 80318b8:	af00      	add	r7, sp, #0
 80318ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80318bc:	687b      	ldr	r3, [r7, #4]
 80318be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80318c2:	4618      	mov	r0, r3
 80318c4:	f7fe fb3d 	bl	802ff42 <USBD_LL_DevConnected>
}
 80318c8:	bf00      	nop
 80318ca:	3708      	adds	r7, #8
 80318cc:	46bd      	mov	sp, r7
 80318ce:	bd80      	pop	{r7, pc}

080318d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80318d0:	b580      	push	{r7, lr}
 80318d2:	b082      	sub	sp, #8
 80318d4:	af00      	add	r7, sp, #0
 80318d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80318d8:	687b      	ldr	r3, [r7, #4]
 80318da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80318de:	4618      	mov	r0, r3
 80318e0:	f7fe fb3a 	bl	802ff58 <USBD_LL_DevDisconnected>
}
 80318e4:	bf00      	nop
 80318e6:	3708      	adds	r7, #8
 80318e8:	46bd      	mov	sp, r7
 80318ea:	bd80      	pop	{r7, pc}

080318ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80318ec:	b580      	push	{r7, lr}
 80318ee:	b082      	sub	sp, #8
 80318f0:	af00      	add	r7, sp, #0
 80318f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80318f4:	687b      	ldr	r3, [r7, #4]
 80318f6:	781b      	ldrb	r3, [r3, #0]
 80318f8:	2b00      	cmp	r3, #0
 80318fa:	d13c      	bne.n	8031976 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80318fc:	4a43      	ldr	r2, [pc, #268]	; (8031a0c <USBD_LL_Init+0x120>)
 80318fe:	687b      	ldr	r3, [r7, #4]
 8031900:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8031904:	687b      	ldr	r3, [r7, #4]
 8031906:	4a41      	ldr	r2, [pc, #260]	; (8031a0c <USBD_LL_Init+0x120>)
 8031908:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803190c:	4b3f      	ldr	r3, [pc, #252]	; (8031a0c <USBD_LL_Init+0x120>)
 803190e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8031912:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8031914:	4b3d      	ldr	r3, [pc, #244]	; (8031a0c <USBD_LL_Init+0x120>)
 8031916:	2204      	movs	r2, #4
 8031918:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803191a:	4b3c      	ldr	r3, [pc, #240]	; (8031a0c <USBD_LL_Init+0x120>)
 803191c:	2202      	movs	r2, #2
 803191e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8031920:	4b3a      	ldr	r3, [pc, #232]	; (8031a0c <USBD_LL_Init+0x120>)
 8031922:	2200      	movs	r2, #0
 8031924:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8031926:	4b39      	ldr	r3, [pc, #228]	; (8031a0c <USBD_LL_Init+0x120>)
 8031928:	2202      	movs	r2, #2
 803192a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803192c:	4b37      	ldr	r3, [pc, #220]	; (8031a0c <USBD_LL_Init+0x120>)
 803192e:	2200      	movs	r2, #0
 8031930:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8031932:	4b36      	ldr	r3, [pc, #216]	; (8031a0c <USBD_LL_Init+0x120>)
 8031934:	2200      	movs	r2, #0
 8031936:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8031938:	4b34      	ldr	r3, [pc, #208]	; (8031a0c <USBD_LL_Init+0x120>)
 803193a:	2200      	movs	r2, #0
 803193c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803193e:	4b33      	ldr	r3, [pc, #204]	; (8031a0c <USBD_LL_Init+0x120>)
 8031940:	2200      	movs	r2, #0
 8031942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8031944:	4b31      	ldr	r3, [pc, #196]	; (8031a0c <USBD_LL_Init+0x120>)
 8031946:	2200      	movs	r2, #0
 8031948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803194a:	4830      	ldr	r0, [pc, #192]	; (8031a0c <USBD_LL_Init+0x120>)
 803194c:	f7f7 fc5b 	bl	8029206 <HAL_PCD_Init>
 8031950:	4603      	mov	r3, r0
 8031952:	2b00      	cmp	r3, #0
 8031954:	d001      	beq.n	803195a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8031956:	f7f2 fd0d 	bl	8024374 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803195a:	2180      	movs	r1, #128	; 0x80
 803195c:	482b      	ldr	r0, [pc, #172]	; (8031a0c <USBD_LL_Init+0x120>)
 803195e:	f7f8 feb2 	bl	802a6c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8031962:	2240      	movs	r2, #64	; 0x40
 8031964:	2100      	movs	r1, #0
 8031966:	4829      	ldr	r0, [pc, #164]	; (8031a0c <USBD_LL_Init+0x120>)
 8031968:	f7f8 fe66 	bl	802a638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803196c:	2280      	movs	r2, #128	; 0x80
 803196e:	2101      	movs	r1, #1
 8031970:	4826      	ldr	r0, [pc, #152]	; (8031a0c <USBD_LL_Init+0x120>)
 8031972:	f7f8 fe61 	bl	802a638 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8031976:	687b      	ldr	r3, [r7, #4]
 8031978:	781b      	ldrb	r3, [r3, #0]
 803197a:	2b01      	cmp	r3, #1
 803197c:	d140      	bne.n	8031a00 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 803197e:	4a24      	ldr	r2, [pc, #144]	; (8031a10 <USBD_LL_Init+0x124>)
 8031980:	687b      	ldr	r3, [r7, #4]
 8031982:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8031986:	687b      	ldr	r3, [r7, #4]
 8031988:	4a21      	ldr	r2, [pc, #132]	; (8031a10 <USBD_LL_Init+0x124>)
 803198a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 803198e:	4b20      	ldr	r3, [pc, #128]	; (8031a10 <USBD_LL_Init+0x124>)
 8031990:	4a20      	ldr	r2, [pc, #128]	; (8031a14 <USBD_LL_Init+0x128>)
 8031992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8031994:	4b1e      	ldr	r3, [pc, #120]	; (8031a10 <USBD_LL_Init+0x124>)
 8031996:	2206      	movs	r2, #6
 8031998:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 803199a:	4b1d      	ldr	r3, [pc, #116]	; (8031a10 <USBD_LL_Init+0x124>)
 803199c:	2200      	movs	r2, #0
 803199e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80319a0:	4b1b      	ldr	r3, [pc, #108]	; (8031a10 <USBD_LL_Init+0x124>)
 80319a2:	2200      	movs	r2, #0
 80319a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80319a6:	4b1a      	ldr	r3, [pc, #104]	; (8031a10 <USBD_LL_Init+0x124>)
 80319a8:	2201      	movs	r2, #1
 80319aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80319ac:	4b18      	ldr	r3, [pc, #96]	; (8031a10 <USBD_LL_Init+0x124>)
 80319ae:	2200      	movs	r2, #0
 80319b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80319b2:	4b17      	ldr	r3, [pc, #92]	; (8031a10 <USBD_LL_Init+0x124>)
 80319b4:	2200      	movs	r2, #0
 80319b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80319b8:	4b15      	ldr	r3, [pc, #84]	; (8031a10 <USBD_LL_Init+0x124>)
 80319ba:	2200      	movs	r2, #0
 80319bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80319be:	4b14      	ldr	r3, [pc, #80]	; (8031a10 <USBD_LL_Init+0x124>)
 80319c0:	2200      	movs	r2, #0
 80319c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80319c4:	4b12      	ldr	r3, [pc, #72]	; (8031a10 <USBD_LL_Init+0x124>)
 80319c6:	2200      	movs	r2, #0
 80319c8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80319ca:	4b11      	ldr	r3, [pc, #68]	; (8031a10 <USBD_LL_Init+0x124>)
 80319cc:	2200      	movs	r2, #0
 80319ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80319d0:	480f      	ldr	r0, [pc, #60]	; (8031a10 <USBD_LL_Init+0x124>)
 80319d2:	f7f7 fc18 	bl	8029206 <HAL_PCD_Init>
 80319d6:	4603      	mov	r3, r0
 80319d8:	2b00      	cmp	r3, #0
 80319da:	d001      	beq.n	80319e0 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80319dc:	f7f2 fcca 	bl	8024374 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80319e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80319e4:	480a      	ldr	r0, [pc, #40]	; (8031a10 <USBD_LL_Init+0x124>)
 80319e6:	f7f8 fe6e 	bl	802a6c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80319ea:	2280      	movs	r2, #128	; 0x80
 80319ec:	2100      	movs	r1, #0
 80319ee:	4808      	ldr	r0, [pc, #32]	; (8031a10 <USBD_LL_Init+0x124>)
 80319f0:	f7f8 fe22 	bl	802a638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80319f4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80319f8:	2101      	movs	r1, #1
 80319fa:	4805      	ldr	r0, [pc, #20]	; (8031a10 <USBD_LL_Init+0x124>)
 80319fc:	f7f8 fe1c 	bl	802a638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8031a00:	2300      	movs	r3, #0
}
 8031a02:	4618      	mov	r0, r3
 8031a04:	3708      	adds	r7, #8
 8031a06:	46bd      	mov	sp, r7
 8031a08:	bd80      	pop	{r7, pc}
 8031a0a:	bf00      	nop
 8031a0c:	20008078 	.word	0x20008078
 8031a10:	20008584 	.word	0x20008584
 8031a14:	40040000 	.word	0x40040000

08031a18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8031a18:	b580      	push	{r7, lr}
 8031a1a:	b084      	sub	sp, #16
 8031a1c:	af00      	add	r7, sp, #0
 8031a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031a20:	2300      	movs	r3, #0
 8031a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031a24:	2300      	movs	r3, #0
 8031a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8031a28:	687b      	ldr	r3, [r7, #4]
 8031a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031a2e:	4618      	mov	r0, r3
 8031a30:	f7f7 fd06 	bl	8029440 <HAL_PCD_Start>
 8031a34:	4603      	mov	r3, r0
 8031a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031a38:	7bfb      	ldrb	r3, [r7, #15]
 8031a3a:	4618      	mov	r0, r3
 8031a3c:	f000 f942 	bl	8031cc4 <USBD_Get_USB_Status>
 8031a40:	4603      	mov	r3, r0
 8031a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8031a46:	4618      	mov	r0, r3
 8031a48:	3710      	adds	r7, #16
 8031a4a:	46bd      	mov	sp, r7
 8031a4c:	bd80      	pop	{r7, pc}

08031a4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8031a4e:	b580      	push	{r7, lr}
 8031a50:	b084      	sub	sp, #16
 8031a52:	af00      	add	r7, sp, #0
 8031a54:	6078      	str	r0, [r7, #4]
 8031a56:	4608      	mov	r0, r1
 8031a58:	4611      	mov	r1, r2
 8031a5a:	461a      	mov	r2, r3
 8031a5c:	4603      	mov	r3, r0
 8031a5e:	70fb      	strb	r3, [r7, #3]
 8031a60:	460b      	mov	r3, r1
 8031a62:	70bb      	strb	r3, [r7, #2]
 8031a64:	4613      	mov	r3, r2
 8031a66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031a68:	2300      	movs	r3, #0
 8031a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031a6c:	2300      	movs	r3, #0
 8031a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8031a70:	687b      	ldr	r3, [r7, #4]
 8031a72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031a76:	78bb      	ldrb	r3, [r7, #2]
 8031a78:	883a      	ldrh	r2, [r7, #0]
 8031a7a:	78f9      	ldrb	r1, [r7, #3]
 8031a7c:	f7f8 f9d7 	bl	8029e2e <HAL_PCD_EP_Open>
 8031a80:	4603      	mov	r3, r0
 8031a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031a84:	7bfb      	ldrb	r3, [r7, #15]
 8031a86:	4618      	mov	r0, r3
 8031a88:	f000 f91c 	bl	8031cc4 <USBD_Get_USB_Status>
 8031a8c:	4603      	mov	r3, r0
 8031a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8031a92:	4618      	mov	r0, r3
 8031a94:	3710      	adds	r7, #16
 8031a96:	46bd      	mov	sp, r7
 8031a98:	bd80      	pop	{r7, pc}

08031a9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031a9a:	b580      	push	{r7, lr}
 8031a9c:	b084      	sub	sp, #16
 8031a9e:	af00      	add	r7, sp, #0
 8031aa0:	6078      	str	r0, [r7, #4]
 8031aa2:	460b      	mov	r3, r1
 8031aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031aa6:	2300      	movs	r3, #0
 8031aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031aaa:	2300      	movs	r3, #0
 8031aac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8031aae:	687b      	ldr	r3, [r7, #4]
 8031ab0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031ab4:	78fa      	ldrb	r2, [r7, #3]
 8031ab6:	4611      	mov	r1, r2
 8031ab8:	4618      	mov	r0, r3
 8031aba:	f7f8 fa20 	bl	8029efe <HAL_PCD_EP_Close>
 8031abe:	4603      	mov	r3, r0
 8031ac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031ac2:	7bfb      	ldrb	r3, [r7, #15]
 8031ac4:	4618      	mov	r0, r3
 8031ac6:	f000 f8fd 	bl	8031cc4 <USBD_Get_USB_Status>
 8031aca:	4603      	mov	r3, r0
 8031acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8031ad0:	4618      	mov	r0, r3
 8031ad2:	3710      	adds	r7, #16
 8031ad4:	46bd      	mov	sp, r7
 8031ad6:	bd80      	pop	{r7, pc}

08031ad8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031ad8:	b580      	push	{r7, lr}
 8031ada:	b084      	sub	sp, #16
 8031adc:	af00      	add	r7, sp, #0
 8031ade:	6078      	str	r0, [r7, #4]
 8031ae0:	460b      	mov	r3, r1
 8031ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031ae4:	2300      	movs	r3, #0
 8031ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031ae8:	2300      	movs	r3, #0
 8031aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8031aec:	687b      	ldr	r3, [r7, #4]
 8031aee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031af2:	78fa      	ldrb	r2, [r7, #3]
 8031af4:	4611      	mov	r1, r2
 8031af6:	4618      	mov	r0, r3
 8031af8:	f7f8 faf8 	bl	802a0ec <HAL_PCD_EP_SetStall>
 8031afc:	4603      	mov	r3, r0
 8031afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031b00:	7bfb      	ldrb	r3, [r7, #15]
 8031b02:	4618      	mov	r0, r3
 8031b04:	f000 f8de 	bl	8031cc4 <USBD_Get_USB_Status>
 8031b08:	4603      	mov	r3, r0
 8031b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8031b0e:	4618      	mov	r0, r3
 8031b10:	3710      	adds	r7, #16
 8031b12:	46bd      	mov	sp, r7
 8031b14:	bd80      	pop	{r7, pc}

08031b16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031b16:	b580      	push	{r7, lr}
 8031b18:	b084      	sub	sp, #16
 8031b1a:	af00      	add	r7, sp, #0
 8031b1c:	6078      	str	r0, [r7, #4]
 8031b1e:	460b      	mov	r3, r1
 8031b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031b22:	2300      	movs	r3, #0
 8031b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031b26:	2300      	movs	r3, #0
 8031b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8031b2a:	687b      	ldr	r3, [r7, #4]
 8031b2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031b30:	78fa      	ldrb	r2, [r7, #3]
 8031b32:	4611      	mov	r1, r2
 8031b34:	4618      	mov	r0, r3
 8031b36:	f7f8 fb3d 	bl	802a1b4 <HAL_PCD_EP_ClrStall>
 8031b3a:	4603      	mov	r3, r0
 8031b3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031b3e:	7bfb      	ldrb	r3, [r7, #15]
 8031b40:	4618      	mov	r0, r3
 8031b42:	f000 f8bf 	bl	8031cc4 <USBD_Get_USB_Status>
 8031b46:	4603      	mov	r3, r0
 8031b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8031b4c:	4618      	mov	r0, r3
 8031b4e:	3710      	adds	r7, #16
 8031b50:	46bd      	mov	sp, r7
 8031b52:	bd80      	pop	{r7, pc}

08031b54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031b54:	b480      	push	{r7}
 8031b56:	b085      	sub	sp, #20
 8031b58:	af00      	add	r7, sp, #0
 8031b5a:	6078      	str	r0, [r7, #4]
 8031b5c:	460b      	mov	r3, r1
 8031b5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8031b60:	687b      	ldr	r3, [r7, #4]
 8031b62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031b66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8031b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031b6c:	2b00      	cmp	r3, #0
 8031b6e:	da0b      	bge.n	8031b88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8031b70:	78fb      	ldrb	r3, [r7, #3]
 8031b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031b76:	68f9      	ldr	r1, [r7, #12]
 8031b78:	4613      	mov	r3, r2
 8031b7a:	00db      	lsls	r3, r3, #3
 8031b7c:	4413      	add	r3, r2
 8031b7e:	009b      	lsls	r3, r3, #2
 8031b80:	440b      	add	r3, r1
 8031b82:	333e      	adds	r3, #62	; 0x3e
 8031b84:	781b      	ldrb	r3, [r3, #0]
 8031b86:	e00b      	b.n	8031ba0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8031b88:	78fb      	ldrb	r3, [r7, #3]
 8031b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031b8e:	68f9      	ldr	r1, [r7, #12]
 8031b90:	4613      	mov	r3, r2
 8031b92:	00db      	lsls	r3, r3, #3
 8031b94:	4413      	add	r3, r2
 8031b96:	009b      	lsls	r3, r3, #2
 8031b98:	440b      	add	r3, r1
 8031b9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8031b9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8031ba0:	4618      	mov	r0, r3
 8031ba2:	3714      	adds	r7, #20
 8031ba4:	46bd      	mov	sp, r7
 8031ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031baa:	4770      	bx	lr

08031bac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8031bac:	b580      	push	{r7, lr}
 8031bae:	b084      	sub	sp, #16
 8031bb0:	af00      	add	r7, sp, #0
 8031bb2:	6078      	str	r0, [r7, #4]
 8031bb4:	460b      	mov	r3, r1
 8031bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031bb8:	2300      	movs	r3, #0
 8031bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031bbc:	2300      	movs	r3, #0
 8031bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8031bc0:	687b      	ldr	r3, [r7, #4]
 8031bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031bc6:	78fa      	ldrb	r2, [r7, #3]
 8031bc8:	4611      	mov	r1, r2
 8031bca:	4618      	mov	r0, r3
 8031bcc:	f7f8 f90a 	bl	8029de4 <HAL_PCD_SetAddress>
 8031bd0:	4603      	mov	r3, r0
 8031bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031bd4:	7bfb      	ldrb	r3, [r7, #15]
 8031bd6:	4618      	mov	r0, r3
 8031bd8:	f000 f874 	bl	8031cc4 <USBD_Get_USB_Status>
 8031bdc:	4603      	mov	r3, r0
 8031bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8031be2:	4618      	mov	r0, r3
 8031be4:	3710      	adds	r7, #16
 8031be6:	46bd      	mov	sp, r7
 8031be8:	bd80      	pop	{r7, pc}

08031bea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8031bea:	b580      	push	{r7, lr}
 8031bec:	b086      	sub	sp, #24
 8031bee:	af00      	add	r7, sp, #0
 8031bf0:	60f8      	str	r0, [r7, #12]
 8031bf2:	607a      	str	r2, [r7, #4]
 8031bf4:	603b      	str	r3, [r7, #0]
 8031bf6:	460b      	mov	r3, r1
 8031bf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031bfa:	2300      	movs	r3, #0
 8031bfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031bfe:	2300      	movs	r3, #0
 8031c00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8031c02:	68fb      	ldr	r3, [r7, #12]
 8031c04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031c08:	7af9      	ldrb	r1, [r7, #11]
 8031c0a:	683b      	ldr	r3, [r7, #0]
 8031c0c:	687a      	ldr	r2, [r7, #4]
 8031c0e:	f7f8 fa23 	bl	802a058 <HAL_PCD_EP_Transmit>
 8031c12:	4603      	mov	r3, r0
 8031c14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031c16:	7dfb      	ldrb	r3, [r7, #23]
 8031c18:	4618      	mov	r0, r3
 8031c1a:	f000 f853 	bl	8031cc4 <USBD_Get_USB_Status>
 8031c1e:	4603      	mov	r3, r0
 8031c20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031c22:	7dbb      	ldrb	r3, [r7, #22]
}
 8031c24:	4618      	mov	r0, r3
 8031c26:	3718      	adds	r7, #24
 8031c28:	46bd      	mov	sp, r7
 8031c2a:	bd80      	pop	{r7, pc}

08031c2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8031c2c:	b580      	push	{r7, lr}
 8031c2e:	b086      	sub	sp, #24
 8031c30:	af00      	add	r7, sp, #0
 8031c32:	60f8      	str	r0, [r7, #12]
 8031c34:	607a      	str	r2, [r7, #4]
 8031c36:	603b      	str	r3, [r7, #0]
 8031c38:	460b      	mov	r3, r1
 8031c3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031c3c:	2300      	movs	r3, #0
 8031c3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031c40:	2300      	movs	r3, #0
 8031c42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8031c44:	68fb      	ldr	r3, [r7, #12]
 8031c46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031c4a:	7af9      	ldrb	r1, [r7, #11]
 8031c4c:	683b      	ldr	r3, [r7, #0]
 8031c4e:	687a      	ldr	r2, [r7, #4]
 8031c50:	f7f8 f99f 	bl	8029f92 <HAL_PCD_EP_Receive>
 8031c54:	4603      	mov	r3, r0
 8031c56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031c58:	7dfb      	ldrb	r3, [r7, #23]
 8031c5a:	4618      	mov	r0, r3
 8031c5c:	f000 f832 	bl	8031cc4 <USBD_Get_USB_Status>
 8031c60:	4603      	mov	r3, r0
 8031c62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031c64:	7dbb      	ldrb	r3, [r7, #22]
}
 8031c66:	4618      	mov	r0, r3
 8031c68:	3718      	adds	r7, #24
 8031c6a:	46bd      	mov	sp, r7
 8031c6c:	bd80      	pop	{r7, pc}

08031c6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031c6e:	b580      	push	{r7, lr}
 8031c70:	b082      	sub	sp, #8
 8031c72:	af00      	add	r7, sp, #0
 8031c74:	6078      	str	r0, [r7, #4]
 8031c76:	460b      	mov	r3, r1
 8031c78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8031c7a:	687b      	ldr	r3, [r7, #4]
 8031c7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031c80:	78fa      	ldrb	r2, [r7, #3]
 8031c82:	4611      	mov	r1, r2
 8031c84:	4618      	mov	r0, r3
 8031c86:	f7f8 f9cf 	bl	802a028 <HAL_PCD_EP_GetRxCount>
 8031c8a:	4603      	mov	r3, r0
}
 8031c8c:	4618      	mov	r0, r3
 8031c8e:	3708      	adds	r7, #8
 8031c90:	46bd      	mov	sp, r7
 8031c92:	bd80      	pop	{r7, pc}

08031c94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8031c94:	b480      	push	{r7}
 8031c96:	b083      	sub	sp, #12
 8031c98:	af00      	add	r7, sp, #0
 8031c9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8031c9c:	4b03      	ldr	r3, [pc, #12]	; (8031cac <USBD_static_malloc+0x18>)
}
 8031c9e:	4618      	mov	r0, r3
 8031ca0:	370c      	adds	r7, #12
 8031ca2:	46bd      	mov	sp, r7
 8031ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ca8:	4770      	bx	lr
 8031caa:	bf00      	nop
 8031cac:	20008a90 	.word	0x20008a90

08031cb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8031cb0:	b480      	push	{r7}
 8031cb2:	b083      	sub	sp, #12
 8031cb4:	af00      	add	r7, sp, #0
 8031cb6:	6078      	str	r0, [r7, #4]

}
 8031cb8:	bf00      	nop
 8031cba:	370c      	adds	r7, #12
 8031cbc:	46bd      	mov	sp, r7
 8031cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031cc2:	4770      	bx	lr

08031cc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8031cc4:	b480      	push	{r7}
 8031cc6:	b085      	sub	sp, #20
 8031cc8:	af00      	add	r7, sp, #0
 8031cca:	4603      	mov	r3, r0
 8031ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031cce:	2300      	movs	r3, #0
 8031cd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8031cd2:	79fb      	ldrb	r3, [r7, #7]
 8031cd4:	2b03      	cmp	r3, #3
 8031cd6:	d817      	bhi.n	8031d08 <USBD_Get_USB_Status+0x44>
 8031cd8:	a201      	add	r2, pc, #4	; (adr r2, 8031ce0 <USBD_Get_USB_Status+0x1c>)
 8031cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031cde:	bf00      	nop
 8031ce0:	08031cf1 	.word	0x08031cf1
 8031ce4:	08031cf7 	.word	0x08031cf7
 8031ce8:	08031cfd 	.word	0x08031cfd
 8031cec:	08031d03 	.word	0x08031d03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8031cf0:	2300      	movs	r3, #0
 8031cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8031cf4:	e00b      	b.n	8031d0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8031cf6:	2303      	movs	r3, #3
 8031cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8031cfa:	e008      	b.n	8031d0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8031cfc:	2301      	movs	r3, #1
 8031cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8031d00:	e005      	b.n	8031d0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8031d02:	2303      	movs	r3, #3
 8031d04:	73fb      	strb	r3, [r7, #15]
    break;
 8031d06:	e002      	b.n	8031d0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8031d08:	2303      	movs	r3, #3
 8031d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8031d0c:	bf00      	nop
  }
  return usb_status;
 8031d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8031d10:	4618      	mov	r0, r3
 8031d12:	3714      	adds	r7, #20
 8031d14:	46bd      	mov	sp, r7
 8031d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d1a:	4770      	bx	lr

08031d1c <std>:
 8031d1c:	2300      	movs	r3, #0
 8031d1e:	b510      	push	{r4, lr}
 8031d20:	4604      	mov	r4, r0
 8031d22:	e9c0 3300 	strd	r3, r3, [r0]
 8031d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8031d2a:	6083      	str	r3, [r0, #8]
 8031d2c:	8181      	strh	r1, [r0, #12]
 8031d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8031d30:	81c2      	strh	r2, [r0, #14]
 8031d32:	6183      	str	r3, [r0, #24]
 8031d34:	4619      	mov	r1, r3
 8031d36:	2208      	movs	r2, #8
 8031d38:	305c      	adds	r0, #92	; 0x5c
 8031d3a:	f000 f954 	bl	8031fe6 <memset>
 8031d3e:	4b0d      	ldr	r3, [pc, #52]	; (8031d74 <std+0x58>)
 8031d40:	6223      	str	r3, [r4, #32]
 8031d42:	4b0d      	ldr	r3, [pc, #52]	; (8031d78 <std+0x5c>)
 8031d44:	6263      	str	r3, [r4, #36]	; 0x24
 8031d46:	4b0d      	ldr	r3, [pc, #52]	; (8031d7c <std+0x60>)
 8031d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8031d4a:	4b0d      	ldr	r3, [pc, #52]	; (8031d80 <std+0x64>)
 8031d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8031d4e:	4b0d      	ldr	r3, [pc, #52]	; (8031d84 <std+0x68>)
 8031d50:	61e4      	str	r4, [r4, #28]
 8031d52:	429c      	cmp	r4, r3
 8031d54:	d006      	beq.n	8031d64 <std+0x48>
 8031d56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8031d5a:	4294      	cmp	r4, r2
 8031d5c:	d002      	beq.n	8031d64 <std+0x48>
 8031d5e:	33d0      	adds	r3, #208	; 0xd0
 8031d60:	429c      	cmp	r4, r3
 8031d62:	d105      	bne.n	8031d70 <std+0x54>
 8031d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8031d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031d6c:	f000 b9b4 	b.w	80320d8 <__retarget_lock_init_recursive>
 8031d70:	bd10      	pop	{r4, pc}
 8031d72:	bf00      	nop
 8031d74:	08031f61 	.word	0x08031f61
 8031d78:	08031f83 	.word	0x08031f83
 8031d7c:	08031fbb 	.word	0x08031fbb
 8031d80:	08031fdf 	.word	0x08031fdf
 8031d84:	20008cb0 	.word	0x20008cb0

08031d88 <stdio_exit_handler>:
 8031d88:	4a02      	ldr	r2, [pc, #8]	; (8031d94 <stdio_exit_handler+0xc>)
 8031d8a:	4903      	ldr	r1, [pc, #12]	; (8031d98 <stdio_exit_handler+0x10>)
 8031d8c:	4803      	ldr	r0, [pc, #12]	; (8031d9c <stdio_exit_handler+0x14>)
 8031d8e:	f000 b869 	b.w	8031e64 <_fwalk_sglue>
 8031d92:	bf00      	nop
 8031d94:	20000278 	.word	0x20000278
 8031d98:	080346c1 	.word	0x080346c1
 8031d9c:	20000288 	.word	0x20000288

08031da0 <cleanup_stdio>:
 8031da0:	6841      	ldr	r1, [r0, #4]
 8031da2:	4b0c      	ldr	r3, [pc, #48]	; (8031dd4 <cleanup_stdio+0x34>)
 8031da4:	4299      	cmp	r1, r3
 8031da6:	b510      	push	{r4, lr}
 8031da8:	4604      	mov	r4, r0
 8031daa:	d001      	beq.n	8031db0 <cleanup_stdio+0x10>
 8031dac:	f002 fc88 	bl	80346c0 <_fclose_r>
 8031db0:	68a1      	ldr	r1, [r4, #8]
 8031db2:	4b09      	ldr	r3, [pc, #36]	; (8031dd8 <cleanup_stdio+0x38>)
 8031db4:	4299      	cmp	r1, r3
 8031db6:	d002      	beq.n	8031dbe <cleanup_stdio+0x1e>
 8031db8:	4620      	mov	r0, r4
 8031dba:	f002 fc81 	bl	80346c0 <_fclose_r>
 8031dbe:	68e1      	ldr	r1, [r4, #12]
 8031dc0:	4b06      	ldr	r3, [pc, #24]	; (8031ddc <cleanup_stdio+0x3c>)
 8031dc2:	4299      	cmp	r1, r3
 8031dc4:	d004      	beq.n	8031dd0 <cleanup_stdio+0x30>
 8031dc6:	4620      	mov	r0, r4
 8031dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031dcc:	f002 bc78 	b.w	80346c0 <_fclose_r>
 8031dd0:	bd10      	pop	{r4, pc}
 8031dd2:	bf00      	nop
 8031dd4:	20008cb0 	.word	0x20008cb0
 8031dd8:	20008d18 	.word	0x20008d18
 8031ddc:	20008d80 	.word	0x20008d80

08031de0 <global_stdio_init.part.0>:
 8031de0:	b510      	push	{r4, lr}
 8031de2:	4b0b      	ldr	r3, [pc, #44]	; (8031e10 <global_stdio_init.part.0+0x30>)
 8031de4:	4c0b      	ldr	r4, [pc, #44]	; (8031e14 <global_stdio_init.part.0+0x34>)
 8031de6:	4a0c      	ldr	r2, [pc, #48]	; (8031e18 <global_stdio_init.part.0+0x38>)
 8031de8:	601a      	str	r2, [r3, #0]
 8031dea:	4620      	mov	r0, r4
 8031dec:	2200      	movs	r2, #0
 8031dee:	2104      	movs	r1, #4
 8031df0:	f7ff ff94 	bl	8031d1c <std>
 8031df4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8031df8:	2201      	movs	r2, #1
 8031dfa:	2109      	movs	r1, #9
 8031dfc:	f7ff ff8e 	bl	8031d1c <std>
 8031e00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8031e04:	2202      	movs	r2, #2
 8031e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031e0a:	2112      	movs	r1, #18
 8031e0c:	f7ff bf86 	b.w	8031d1c <std>
 8031e10:	20008de8 	.word	0x20008de8
 8031e14:	20008cb0 	.word	0x20008cb0
 8031e18:	08031d89 	.word	0x08031d89

08031e1c <__sfp_lock_acquire>:
 8031e1c:	4801      	ldr	r0, [pc, #4]	; (8031e24 <__sfp_lock_acquire+0x8>)
 8031e1e:	f000 b95d 	b.w	80320dc <__retarget_lock_acquire_recursive>
 8031e22:	bf00      	nop
 8031e24:	20008df2 	.word	0x20008df2

08031e28 <__sfp_lock_release>:
 8031e28:	4801      	ldr	r0, [pc, #4]	; (8031e30 <__sfp_lock_release+0x8>)
 8031e2a:	f000 b958 	b.w	80320de <__retarget_lock_release_recursive>
 8031e2e:	bf00      	nop
 8031e30:	20008df2 	.word	0x20008df2

08031e34 <__sinit>:
 8031e34:	b510      	push	{r4, lr}
 8031e36:	4604      	mov	r4, r0
 8031e38:	f7ff fff0 	bl	8031e1c <__sfp_lock_acquire>
 8031e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8031e3e:	b11b      	cbz	r3, 8031e48 <__sinit+0x14>
 8031e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031e44:	f7ff bff0 	b.w	8031e28 <__sfp_lock_release>
 8031e48:	4b04      	ldr	r3, [pc, #16]	; (8031e5c <__sinit+0x28>)
 8031e4a:	6363      	str	r3, [r4, #52]	; 0x34
 8031e4c:	4b04      	ldr	r3, [pc, #16]	; (8031e60 <__sinit+0x2c>)
 8031e4e:	681b      	ldr	r3, [r3, #0]
 8031e50:	2b00      	cmp	r3, #0
 8031e52:	d1f5      	bne.n	8031e40 <__sinit+0xc>
 8031e54:	f7ff ffc4 	bl	8031de0 <global_stdio_init.part.0>
 8031e58:	e7f2      	b.n	8031e40 <__sinit+0xc>
 8031e5a:	bf00      	nop
 8031e5c:	08031da1 	.word	0x08031da1
 8031e60:	20008de8 	.word	0x20008de8

08031e64 <_fwalk_sglue>:
 8031e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031e68:	4607      	mov	r7, r0
 8031e6a:	4688      	mov	r8, r1
 8031e6c:	4614      	mov	r4, r2
 8031e6e:	2600      	movs	r6, #0
 8031e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031e74:	f1b9 0901 	subs.w	r9, r9, #1
 8031e78:	d505      	bpl.n	8031e86 <_fwalk_sglue+0x22>
 8031e7a:	6824      	ldr	r4, [r4, #0]
 8031e7c:	2c00      	cmp	r4, #0
 8031e7e:	d1f7      	bne.n	8031e70 <_fwalk_sglue+0xc>
 8031e80:	4630      	mov	r0, r6
 8031e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031e86:	89ab      	ldrh	r3, [r5, #12]
 8031e88:	2b01      	cmp	r3, #1
 8031e8a:	d907      	bls.n	8031e9c <_fwalk_sglue+0x38>
 8031e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8031e90:	3301      	adds	r3, #1
 8031e92:	d003      	beq.n	8031e9c <_fwalk_sglue+0x38>
 8031e94:	4629      	mov	r1, r5
 8031e96:	4638      	mov	r0, r7
 8031e98:	47c0      	blx	r8
 8031e9a:	4306      	orrs	r6, r0
 8031e9c:	3568      	adds	r5, #104	; 0x68
 8031e9e:	e7e9      	b.n	8031e74 <_fwalk_sglue+0x10>

08031ea0 <printf>:
 8031ea0:	b40f      	push	{r0, r1, r2, r3}
 8031ea2:	b507      	push	{r0, r1, r2, lr}
 8031ea4:	4906      	ldr	r1, [pc, #24]	; (8031ec0 <printf+0x20>)
 8031ea6:	ab04      	add	r3, sp, #16
 8031ea8:	6808      	ldr	r0, [r1, #0]
 8031eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8031eae:	6881      	ldr	r1, [r0, #8]
 8031eb0:	9301      	str	r3, [sp, #4]
 8031eb2:	f000 fc8d 	bl	80327d0 <_vfprintf_r>
 8031eb6:	b003      	add	sp, #12
 8031eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8031ebc:	b004      	add	sp, #16
 8031ebe:	4770      	bx	lr
 8031ec0:	200003a8 	.word	0x200003a8

08031ec4 <_puts_r>:
 8031ec4:	b530      	push	{r4, r5, lr}
 8031ec6:	4605      	mov	r5, r0
 8031ec8:	b089      	sub	sp, #36	; 0x24
 8031eca:	4608      	mov	r0, r1
 8031ecc:	460c      	mov	r4, r1
 8031ece:	f7f0 f97f 	bl	80221d0 <strlen>
 8031ed2:	4b1e      	ldr	r3, [pc, #120]	; (8031f4c <_puts_r+0x88>)
 8031ed4:	9306      	str	r3, [sp, #24]
 8031ed6:	2301      	movs	r3, #1
 8031ed8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8031edc:	9307      	str	r3, [sp, #28]
 8031ede:	4418      	add	r0, r3
 8031ee0:	ab04      	add	r3, sp, #16
 8031ee2:	9301      	str	r3, [sp, #4]
 8031ee4:	2302      	movs	r3, #2
 8031ee6:	9302      	str	r3, [sp, #8]
 8031ee8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8031eea:	68ac      	ldr	r4, [r5, #8]
 8031eec:	9003      	str	r0, [sp, #12]
 8031eee:	b913      	cbnz	r3, 8031ef6 <_puts_r+0x32>
 8031ef0:	4628      	mov	r0, r5
 8031ef2:	f7ff ff9f 	bl	8031e34 <__sinit>
 8031ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031ef8:	07db      	lsls	r3, r3, #31
 8031efa:	d405      	bmi.n	8031f08 <_puts_r+0x44>
 8031efc:	89a3      	ldrh	r3, [r4, #12]
 8031efe:	0598      	lsls	r0, r3, #22
 8031f00:	d402      	bmi.n	8031f08 <_puts_r+0x44>
 8031f02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031f04:	f000 f8ea 	bl	80320dc <__retarget_lock_acquire_recursive>
 8031f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031f0c:	0499      	lsls	r1, r3, #18
 8031f0e:	d406      	bmi.n	8031f1e <_puts_r+0x5a>
 8031f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8031f14:	81a3      	strh	r3, [r4, #12]
 8031f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8031f1c:	6663      	str	r3, [r4, #100]	; 0x64
 8031f1e:	4628      	mov	r0, r5
 8031f20:	aa01      	add	r2, sp, #4
 8031f22:	4621      	mov	r1, r4
 8031f24:	f002 fcd8 	bl	80348d8 <__sfvwrite_r>
 8031f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031f2a:	2800      	cmp	r0, #0
 8031f2c:	bf14      	ite	ne
 8031f2e:	f04f 35ff 	movne.w	r5, #4294967295
 8031f32:	250a      	moveq	r5, #10
 8031f34:	07da      	lsls	r2, r3, #31
 8031f36:	d405      	bmi.n	8031f44 <_puts_r+0x80>
 8031f38:	89a3      	ldrh	r3, [r4, #12]
 8031f3a:	059b      	lsls	r3, r3, #22
 8031f3c:	d402      	bmi.n	8031f44 <_puts_r+0x80>
 8031f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031f40:	f000 f8cd 	bl	80320de <__retarget_lock_release_recursive>
 8031f44:	4628      	mov	r0, r5
 8031f46:	b009      	add	sp, #36	; 0x24
 8031f48:	bd30      	pop	{r4, r5, pc}
 8031f4a:	bf00      	nop
 8031f4c:	0803793f 	.word	0x0803793f

08031f50 <puts>:
 8031f50:	4b02      	ldr	r3, [pc, #8]	; (8031f5c <puts+0xc>)
 8031f52:	4601      	mov	r1, r0
 8031f54:	6818      	ldr	r0, [r3, #0]
 8031f56:	f7ff bfb5 	b.w	8031ec4 <_puts_r>
 8031f5a:	bf00      	nop
 8031f5c:	200003a8 	.word	0x200003a8

08031f60 <__sread>:
 8031f60:	b510      	push	{r4, lr}
 8031f62:	460c      	mov	r4, r1
 8031f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f68:	f000 f868 	bl	803203c <_read_r>
 8031f6c:	2800      	cmp	r0, #0
 8031f6e:	bfab      	itete	ge
 8031f70:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8031f72:	89a3      	ldrhlt	r3, [r4, #12]
 8031f74:	181b      	addge	r3, r3, r0
 8031f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031f7a:	bfac      	ite	ge
 8031f7c:	6523      	strge	r3, [r4, #80]	; 0x50
 8031f7e:	81a3      	strhlt	r3, [r4, #12]
 8031f80:	bd10      	pop	{r4, pc}

08031f82 <__swrite>:
 8031f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031f86:	461f      	mov	r7, r3
 8031f88:	898b      	ldrh	r3, [r1, #12]
 8031f8a:	05db      	lsls	r3, r3, #23
 8031f8c:	4605      	mov	r5, r0
 8031f8e:	460c      	mov	r4, r1
 8031f90:	4616      	mov	r6, r2
 8031f92:	d505      	bpl.n	8031fa0 <__swrite+0x1e>
 8031f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031f98:	2302      	movs	r3, #2
 8031f9a:	2200      	movs	r2, #0
 8031f9c:	f000 f83c 	bl	8032018 <_lseek_r>
 8031fa0:	89a3      	ldrh	r3, [r4, #12]
 8031fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031faa:	81a3      	strh	r3, [r4, #12]
 8031fac:	4632      	mov	r2, r6
 8031fae:	463b      	mov	r3, r7
 8031fb0:	4628      	mov	r0, r5
 8031fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031fb6:	f000 b853 	b.w	8032060 <_write_r>

08031fba <__sseek>:
 8031fba:	b510      	push	{r4, lr}
 8031fbc:	460c      	mov	r4, r1
 8031fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031fc2:	f000 f829 	bl	8032018 <_lseek_r>
 8031fc6:	1c43      	adds	r3, r0, #1
 8031fc8:	89a3      	ldrh	r3, [r4, #12]
 8031fca:	bf15      	itete	ne
 8031fcc:	6520      	strne	r0, [r4, #80]	; 0x50
 8031fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8031fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031fd6:	81a3      	strheq	r3, [r4, #12]
 8031fd8:	bf18      	it	ne
 8031fda:	81a3      	strhne	r3, [r4, #12]
 8031fdc:	bd10      	pop	{r4, pc}

08031fde <__sclose>:
 8031fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031fe2:	f000 b809 	b.w	8031ff8 <_close_r>

08031fe6 <memset>:
 8031fe6:	4402      	add	r2, r0
 8031fe8:	4603      	mov	r3, r0
 8031fea:	4293      	cmp	r3, r2
 8031fec:	d100      	bne.n	8031ff0 <memset+0xa>
 8031fee:	4770      	bx	lr
 8031ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8031ff4:	e7f9      	b.n	8031fea <memset+0x4>
	...

08031ff8 <_close_r>:
 8031ff8:	b538      	push	{r3, r4, r5, lr}
 8031ffa:	4d06      	ldr	r5, [pc, #24]	; (8032014 <_close_r+0x1c>)
 8031ffc:	2300      	movs	r3, #0
 8031ffe:	4604      	mov	r4, r0
 8032000:	4608      	mov	r0, r1
 8032002:	602b      	str	r3, [r5, #0]
 8032004:	f7f5 fd64 	bl	8027ad0 <_close>
 8032008:	1c43      	adds	r3, r0, #1
 803200a:	d102      	bne.n	8032012 <_close_r+0x1a>
 803200c:	682b      	ldr	r3, [r5, #0]
 803200e:	b103      	cbz	r3, 8032012 <_close_r+0x1a>
 8032010:	6023      	str	r3, [r4, #0]
 8032012:	bd38      	pop	{r3, r4, r5, pc}
 8032014:	20008dec 	.word	0x20008dec

08032018 <_lseek_r>:
 8032018:	b538      	push	{r3, r4, r5, lr}
 803201a:	4d07      	ldr	r5, [pc, #28]	; (8032038 <_lseek_r+0x20>)
 803201c:	4604      	mov	r4, r0
 803201e:	4608      	mov	r0, r1
 8032020:	4611      	mov	r1, r2
 8032022:	2200      	movs	r2, #0
 8032024:	602a      	str	r2, [r5, #0]
 8032026:	461a      	mov	r2, r3
 8032028:	f7f5 fd79 	bl	8027b1e <_lseek>
 803202c:	1c43      	adds	r3, r0, #1
 803202e:	d102      	bne.n	8032036 <_lseek_r+0x1e>
 8032030:	682b      	ldr	r3, [r5, #0]
 8032032:	b103      	cbz	r3, 8032036 <_lseek_r+0x1e>
 8032034:	6023      	str	r3, [r4, #0]
 8032036:	bd38      	pop	{r3, r4, r5, pc}
 8032038:	20008dec 	.word	0x20008dec

0803203c <_read_r>:
 803203c:	b538      	push	{r3, r4, r5, lr}
 803203e:	4d07      	ldr	r5, [pc, #28]	; (803205c <_read_r+0x20>)
 8032040:	4604      	mov	r4, r0
 8032042:	4608      	mov	r0, r1
 8032044:	4611      	mov	r1, r2
 8032046:	2200      	movs	r2, #0
 8032048:	602a      	str	r2, [r5, #0]
 803204a:	461a      	mov	r2, r3
 803204c:	f7f5 fd23 	bl	8027a96 <_read>
 8032050:	1c43      	adds	r3, r0, #1
 8032052:	d102      	bne.n	803205a <_read_r+0x1e>
 8032054:	682b      	ldr	r3, [r5, #0]
 8032056:	b103      	cbz	r3, 803205a <_read_r+0x1e>
 8032058:	6023      	str	r3, [r4, #0]
 803205a:	bd38      	pop	{r3, r4, r5, pc}
 803205c:	20008dec 	.word	0x20008dec

08032060 <_write_r>:
 8032060:	b538      	push	{r3, r4, r5, lr}
 8032062:	4d07      	ldr	r5, [pc, #28]	; (8032080 <_write_r+0x20>)
 8032064:	4604      	mov	r4, r0
 8032066:	4608      	mov	r0, r1
 8032068:	4611      	mov	r1, r2
 803206a:	2200      	movs	r2, #0
 803206c:	602a      	str	r2, [r5, #0]
 803206e:	461a      	mov	r2, r3
 8032070:	f7f2 f89a 	bl	80241a8 <_write>
 8032074:	1c43      	adds	r3, r0, #1
 8032076:	d102      	bne.n	803207e <_write_r+0x1e>
 8032078:	682b      	ldr	r3, [r5, #0]
 803207a:	b103      	cbz	r3, 803207e <_write_r+0x1e>
 803207c:	6023      	str	r3, [r4, #0]
 803207e:	bd38      	pop	{r3, r4, r5, pc}
 8032080:	20008dec 	.word	0x20008dec

08032084 <__errno>:
 8032084:	4b01      	ldr	r3, [pc, #4]	; (803208c <__errno+0x8>)
 8032086:	6818      	ldr	r0, [r3, #0]
 8032088:	4770      	bx	lr
 803208a:	bf00      	nop
 803208c:	200003a8 	.word	0x200003a8

08032090 <__libc_init_array>:
 8032090:	b570      	push	{r4, r5, r6, lr}
 8032092:	4d0d      	ldr	r5, [pc, #52]	; (80320c8 <__libc_init_array+0x38>)
 8032094:	4c0d      	ldr	r4, [pc, #52]	; (80320cc <__libc_init_array+0x3c>)
 8032096:	1b64      	subs	r4, r4, r5
 8032098:	10a4      	asrs	r4, r4, #2
 803209a:	2600      	movs	r6, #0
 803209c:	42a6      	cmp	r6, r4
 803209e:	d109      	bne.n	80320b4 <__libc_init_array+0x24>
 80320a0:	4d0b      	ldr	r5, [pc, #44]	; (80320d0 <__libc_init_array+0x40>)
 80320a2:	4c0c      	ldr	r4, [pc, #48]	; (80320d4 <__libc_init_array+0x44>)
 80320a4:	f004 fbf0 	bl	8036888 <_init>
 80320a8:	1b64      	subs	r4, r4, r5
 80320aa:	10a4      	asrs	r4, r4, #2
 80320ac:	2600      	movs	r6, #0
 80320ae:	42a6      	cmp	r6, r4
 80320b0:	d105      	bne.n	80320be <__libc_init_array+0x2e>
 80320b2:	bd70      	pop	{r4, r5, r6, pc}
 80320b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80320b8:	4798      	blx	r3
 80320ba:	3601      	adds	r6, #1
 80320bc:	e7ee      	b.n	803209c <__libc_init_array+0xc>
 80320be:	f855 3b04 	ldr.w	r3, [r5], #4
 80320c2:	4798      	blx	r3
 80320c4:	3601      	adds	r6, #1
 80320c6:	e7f2      	b.n	80320ae <__libc_init_array+0x1e>
 80320c8:	0803794c 	.word	0x0803794c
 80320cc:	0803794c 	.word	0x0803794c
 80320d0:	0803794c 	.word	0x0803794c
 80320d4:	08037954 	.word	0x08037954

080320d8 <__retarget_lock_init_recursive>:
 80320d8:	4770      	bx	lr

080320da <__retarget_lock_close_recursive>:
 80320da:	4770      	bx	lr

080320dc <__retarget_lock_acquire_recursive>:
 80320dc:	4770      	bx	lr

080320de <__retarget_lock_release_recursive>:
 80320de:	4770      	bx	lr

080320e0 <memcpy>:
 80320e0:	440a      	add	r2, r1
 80320e2:	4291      	cmp	r1, r2
 80320e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80320e8:	d100      	bne.n	80320ec <memcpy+0xc>
 80320ea:	4770      	bx	lr
 80320ec:	b510      	push	{r4, lr}
 80320ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80320f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80320f6:	4291      	cmp	r1, r2
 80320f8:	d1f9      	bne.n	80320ee <memcpy+0xe>
 80320fa:	bd10      	pop	{r4, pc}

080320fc <register_fini>:
 80320fc:	4b02      	ldr	r3, [pc, #8]	; (8032108 <register_fini+0xc>)
 80320fe:	b113      	cbz	r3, 8032106 <register_fini+0xa>
 8032100:	4802      	ldr	r0, [pc, #8]	; (803210c <register_fini+0x10>)
 8032102:	f000 b805 	b.w	8032110 <atexit>
 8032106:	4770      	bx	lr
 8032108:	00000000 	.word	0x00000000
 803210c:	08034d81 	.word	0x08034d81

08032110 <atexit>:
 8032110:	2300      	movs	r3, #0
 8032112:	4601      	mov	r1, r0
 8032114:	461a      	mov	r2, r3
 8032116:	4618      	mov	r0, r3
 8032118:	f002 be8a 	b.w	8034e30 <__register_exitproc>

0803211c <_malloc_trim_r>:
 803211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032120:	4606      	mov	r6, r0
 8032122:	2008      	movs	r0, #8
 8032124:	460c      	mov	r4, r1
 8032126:	f002 fe3f 	bl	8034da8 <sysconf>
 803212a:	4f23      	ldr	r7, [pc, #140]	; (80321b8 <_malloc_trim_r+0x9c>)
 803212c:	4680      	mov	r8, r0
 803212e:	4630      	mov	r0, r6
 8032130:	f000 fb42 	bl	80327b8 <__malloc_lock>
 8032134:	68bb      	ldr	r3, [r7, #8]
 8032136:	685d      	ldr	r5, [r3, #4]
 8032138:	f025 0503 	bic.w	r5, r5, #3
 803213c:	1b2c      	subs	r4, r5, r4
 803213e:	3c11      	subs	r4, #17
 8032140:	4444      	add	r4, r8
 8032142:	fbb4 f4f8 	udiv	r4, r4, r8
 8032146:	3c01      	subs	r4, #1
 8032148:	fb08 f404 	mul.w	r4, r8, r4
 803214c:	45a0      	cmp	r8, r4
 803214e:	dd05      	ble.n	803215c <_malloc_trim_r+0x40>
 8032150:	4630      	mov	r0, r6
 8032152:	f000 fb37 	bl	80327c4 <__malloc_unlock>
 8032156:	2000      	movs	r0, #0
 8032158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803215c:	2100      	movs	r1, #0
 803215e:	4630      	mov	r0, r6
 8032160:	f002 fdfe 	bl	8034d60 <_sbrk_r>
 8032164:	68bb      	ldr	r3, [r7, #8]
 8032166:	442b      	add	r3, r5
 8032168:	4298      	cmp	r0, r3
 803216a:	d1f1      	bne.n	8032150 <_malloc_trim_r+0x34>
 803216c:	4261      	negs	r1, r4
 803216e:	4630      	mov	r0, r6
 8032170:	f002 fdf6 	bl	8034d60 <_sbrk_r>
 8032174:	3001      	adds	r0, #1
 8032176:	d110      	bne.n	803219a <_malloc_trim_r+0x7e>
 8032178:	2100      	movs	r1, #0
 803217a:	4630      	mov	r0, r6
 803217c:	f002 fdf0 	bl	8034d60 <_sbrk_r>
 8032180:	68ba      	ldr	r2, [r7, #8]
 8032182:	1a83      	subs	r3, r0, r2
 8032184:	2b0f      	cmp	r3, #15
 8032186:	dde3      	ble.n	8032150 <_malloc_trim_r+0x34>
 8032188:	490c      	ldr	r1, [pc, #48]	; (80321bc <_malloc_trim_r+0xa0>)
 803218a:	6809      	ldr	r1, [r1, #0]
 803218c:	1a40      	subs	r0, r0, r1
 803218e:	490c      	ldr	r1, [pc, #48]	; (80321c0 <_malloc_trim_r+0xa4>)
 8032190:	f043 0301 	orr.w	r3, r3, #1
 8032194:	6008      	str	r0, [r1, #0]
 8032196:	6053      	str	r3, [r2, #4]
 8032198:	e7da      	b.n	8032150 <_malloc_trim_r+0x34>
 803219a:	68bb      	ldr	r3, [r7, #8]
 803219c:	4a08      	ldr	r2, [pc, #32]	; (80321c0 <_malloc_trim_r+0xa4>)
 803219e:	1b2d      	subs	r5, r5, r4
 80321a0:	f045 0501 	orr.w	r5, r5, #1
 80321a4:	605d      	str	r5, [r3, #4]
 80321a6:	6813      	ldr	r3, [r2, #0]
 80321a8:	4630      	mov	r0, r6
 80321aa:	1b1b      	subs	r3, r3, r4
 80321ac:	6013      	str	r3, [r2, #0]
 80321ae:	f000 fb09 	bl	80327c4 <__malloc_unlock>
 80321b2:	2001      	movs	r0, #1
 80321b4:	e7d0      	b.n	8032158 <_malloc_trim_r+0x3c>
 80321b6:	bf00      	nop
 80321b8:	200003b0 	.word	0x200003b0
 80321bc:	200007b8 	.word	0x200007b8
 80321c0:	20008df8 	.word	0x20008df8

080321c4 <_free_r>:
 80321c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80321c6:	4605      	mov	r5, r0
 80321c8:	460f      	mov	r7, r1
 80321ca:	2900      	cmp	r1, #0
 80321cc:	f000 80b1 	beq.w	8032332 <_free_r+0x16e>
 80321d0:	f000 faf2 	bl	80327b8 <__malloc_lock>
 80321d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80321d8:	4856      	ldr	r0, [pc, #344]	; (8032334 <_free_r+0x170>)
 80321da:	f022 0401 	bic.w	r4, r2, #1
 80321de:	f1a7 0308 	sub.w	r3, r7, #8
 80321e2:	eb03 0c04 	add.w	ip, r3, r4
 80321e6:	6881      	ldr	r1, [r0, #8]
 80321e8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80321ec:	4561      	cmp	r1, ip
 80321ee:	f026 0603 	bic.w	r6, r6, #3
 80321f2:	f002 0201 	and.w	r2, r2, #1
 80321f6:	d11b      	bne.n	8032230 <_free_r+0x6c>
 80321f8:	4426      	add	r6, r4
 80321fa:	b93a      	cbnz	r2, 803220c <_free_r+0x48>
 80321fc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8032200:	1a9b      	subs	r3, r3, r2
 8032202:	4416      	add	r6, r2
 8032204:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8032208:	60ca      	str	r2, [r1, #12]
 803220a:	6091      	str	r1, [r2, #8]
 803220c:	f046 0201 	orr.w	r2, r6, #1
 8032210:	605a      	str	r2, [r3, #4]
 8032212:	6083      	str	r3, [r0, #8]
 8032214:	4b48      	ldr	r3, [pc, #288]	; (8032338 <_free_r+0x174>)
 8032216:	681b      	ldr	r3, [r3, #0]
 8032218:	42b3      	cmp	r3, r6
 803221a:	d804      	bhi.n	8032226 <_free_r+0x62>
 803221c:	4b47      	ldr	r3, [pc, #284]	; (803233c <_free_r+0x178>)
 803221e:	4628      	mov	r0, r5
 8032220:	6819      	ldr	r1, [r3, #0]
 8032222:	f7ff ff7b 	bl	803211c <_malloc_trim_r>
 8032226:	4628      	mov	r0, r5
 8032228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 803222c:	f000 baca 	b.w	80327c4 <__malloc_unlock>
 8032230:	f8cc 6004 	str.w	r6, [ip, #4]
 8032234:	2a00      	cmp	r2, #0
 8032236:	d138      	bne.n	80322aa <_free_r+0xe6>
 8032238:	f857 1c08 	ldr.w	r1, [r7, #-8]
 803223c:	1a5b      	subs	r3, r3, r1
 803223e:	440c      	add	r4, r1
 8032240:	6899      	ldr	r1, [r3, #8]
 8032242:	f100 0708 	add.w	r7, r0, #8
 8032246:	42b9      	cmp	r1, r7
 8032248:	d031      	beq.n	80322ae <_free_r+0xea>
 803224a:	68df      	ldr	r7, [r3, #12]
 803224c:	60cf      	str	r7, [r1, #12]
 803224e:	60b9      	str	r1, [r7, #8]
 8032250:	eb0c 0106 	add.w	r1, ip, r6
 8032254:	6849      	ldr	r1, [r1, #4]
 8032256:	07c9      	lsls	r1, r1, #31
 8032258:	d40b      	bmi.n	8032272 <_free_r+0xae>
 803225a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 803225e:	4434      	add	r4, r6
 8032260:	bb3a      	cbnz	r2, 80322b2 <_free_r+0xee>
 8032262:	4e37      	ldr	r6, [pc, #220]	; (8032340 <_free_r+0x17c>)
 8032264:	42b1      	cmp	r1, r6
 8032266:	d124      	bne.n	80322b2 <_free_r+0xee>
 8032268:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803226c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8032270:	2201      	movs	r2, #1
 8032272:	f044 0101 	orr.w	r1, r4, #1
 8032276:	6059      	str	r1, [r3, #4]
 8032278:	511c      	str	r4, [r3, r4]
 803227a:	2a00      	cmp	r2, #0
 803227c:	d1d3      	bne.n	8032226 <_free_r+0x62>
 803227e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8032282:	d21b      	bcs.n	80322bc <_free_r+0xf8>
 8032284:	08e2      	lsrs	r2, r4, #3
 8032286:	2101      	movs	r1, #1
 8032288:	0964      	lsrs	r4, r4, #5
 803228a:	40a1      	lsls	r1, r4
 803228c:	6844      	ldr	r4, [r0, #4]
 803228e:	3201      	adds	r2, #1
 8032290:	4321      	orrs	r1, r4
 8032292:	6041      	str	r1, [r0, #4]
 8032294:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8032298:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 803229c:	3908      	subs	r1, #8
 803229e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80322a2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80322a6:	60e3      	str	r3, [r4, #12]
 80322a8:	e7bd      	b.n	8032226 <_free_r+0x62>
 80322aa:	2200      	movs	r2, #0
 80322ac:	e7d0      	b.n	8032250 <_free_r+0x8c>
 80322ae:	2201      	movs	r2, #1
 80322b0:	e7ce      	b.n	8032250 <_free_r+0x8c>
 80322b2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80322b6:	60ce      	str	r6, [r1, #12]
 80322b8:	60b1      	str	r1, [r6, #8]
 80322ba:	e7da      	b.n	8032272 <_free_r+0xae>
 80322bc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80322c0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80322c4:	d214      	bcs.n	80322f0 <_free_r+0x12c>
 80322c6:	09a2      	lsrs	r2, r4, #6
 80322c8:	3238      	adds	r2, #56	; 0x38
 80322ca:	1c51      	adds	r1, r2, #1
 80322cc:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80322d0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80322d4:	428e      	cmp	r6, r1
 80322d6:	d125      	bne.n	8032324 <_free_r+0x160>
 80322d8:	2401      	movs	r4, #1
 80322da:	1092      	asrs	r2, r2, #2
 80322dc:	fa04 f202 	lsl.w	r2, r4, r2
 80322e0:	6844      	ldr	r4, [r0, #4]
 80322e2:	4322      	orrs	r2, r4
 80322e4:	6042      	str	r2, [r0, #4]
 80322e6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80322ea:	60b3      	str	r3, [r6, #8]
 80322ec:	60cb      	str	r3, [r1, #12]
 80322ee:	e79a      	b.n	8032226 <_free_r+0x62>
 80322f0:	2a14      	cmp	r2, #20
 80322f2:	d801      	bhi.n	80322f8 <_free_r+0x134>
 80322f4:	325b      	adds	r2, #91	; 0x5b
 80322f6:	e7e8      	b.n	80322ca <_free_r+0x106>
 80322f8:	2a54      	cmp	r2, #84	; 0x54
 80322fa:	d802      	bhi.n	8032302 <_free_r+0x13e>
 80322fc:	0b22      	lsrs	r2, r4, #12
 80322fe:	326e      	adds	r2, #110	; 0x6e
 8032300:	e7e3      	b.n	80322ca <_free_r+0x106>
 8032302:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8032306:	d802      	bhi.n	803230e <_free_r+0x14a>
 8032308:	0be2      	lsrs	r2, r4, #15
 803230a:	3277      	adds	r2, #119	; 0x77
 803230c:	e7dd      	b.n	80322ca <_free_r+0x106>
 803230e:	f240 5154 	movw	r1, #1364	; 0x554
 8032312:	428a      	cmp	r2, r1
 8032314:	bf9a      	itte	ls
 8032316:	0ca2      	lsrls	r2, r4, #18
 8032318:	327c      	addls	r2, #124	; 0x7c
 803231a:	227e      	movhi	r2, #126	; 0x7e
 803231c:	e7d5      	b.n	80322ca <_free_r+0x106>
 803231e:	6889      	ldr	r1, [r1, #8]
 8032320:	428e      	cmp	r6, r1
 8032322:	d004      	beq.n	803232e <_free_r+0x16a>
 8032324:	684a      	ldr	r2, [r1, #4]
 8032326:	f022 0203 	bic.w	r2, r2, #3
 803232a:	42a2      	cmp	r2, r4
 803232c:	d8f7      	bhi.n	803231e <_free_r+0x15a>
 803232e:	68ce      	ldr	r6, [r1, #12]
 8032330:	e7d9      	b.n	80322e6 <_free_r+0x122>
 8032332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8032334:	200003b0 	.word	0x200003b0
 8032338:	200007bc 	.word	0x200007bc
 803233c:	20008e28 	.word	0x20008e28
 8032340:	200003b8 	.word	0x200003b8

08032344 <_malloc_r>:
 8032344:	f101 030b 	add.w	r3, r1, #11
 8032348:	2b16      	cmp	r3, #22
 803234a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803234e:	4605      	mov	r5, r0
 8032350:	d906      	bls.n	8032360 <_malloc_r+0x1c>
 8032352:	f033 0707 	bics.w	r7, r3, #7
 8032356:	d504      	bpl.n	8032362 <_malloc_r+0x1e>
 8032358:	230c      	movs	r3, #12
 803235a:	602b      	str	r3, [r5, #0]
 803235c:	2400      	movs	r4, #0
 803235e:	e1a3      	b.n	80326a8 <_malloc_r+0x364>
 8032360:	2710      	movs	r7, #16
 8032362:	42b9      	cmp	r1, r7
 8032364:	d8f8      	bhi.n	8032358 <_malloc_r+0x14>
 8032366:	4628      	mov	r0, r5
 8032368:	f000 fa26 	bl	80327b8 <__malloc_lock>
 803236c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8032370:	4eaf      	ldr	r6, [pc, #700]	; (8032630 <_malloc_r+0x2ec>)
 8032372:	d237      	bcs.n	80323e4 <_malloc_r+0xa0>
 8032374:	f107 0208 	add.w	r2, r7, #8
 8032378:	4432      	add	r2, r6
 803237a:	f1a2 0108 	sub.w	r1, r2, #8
 803237e:	6854      	ldr	r4, [r2, #4]
 8032380:	428c      	cmp	r4, r1
 8032382:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8032386:	d102      	bne.n	803238e <_malloc_r+0x4a>
 8032388:	68d4      	ldr	r4, [r2, #12]
 803238a:	42a2      	cmp	r2, r4
 803238c:	d010      	beq.n	80323b0 <_malloc_r+0x6c>
 803238e:	6863      	ldr	r3, [r4, #4]
 8032390:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8032394:	f023 0303 	bic.w	r3, r3, #3
 8032398:	60ca      	str	r2, [r1, #12]
 803239a:	4423      	add	r3, r4
 803239c:	6091      	str	r1, [r2, #8]
 803239e:	685a      	ldr	r2, [r3, #4]
 80323a0:	f042 0201 	orr.w	r2, r2, #1
 80323a4:	605a      	str	r2, [r3, #4]
 80323a6:	4628      	mov	r0, r5
 80323a8:	f000 fa0c 	bl	80327c4 <__malloc_unlock>
 80323ac:	3408      	adds	r4, #8
 80323ae:	e17b      	b.n	80326a8 <_malloc_r+0x364>
 80323b0:	3302      	adds	r3, #2
 80323b2:	6934      	ldr	r4, [r6, #16]
 80323b4:	499f      	ldr	r1, [pc, #636]	; (8032634 <_malloc_r+0x2f0>)
 80323b6:	428c      	cmp	r4, r1
 80323b8:	d077      	beq.n	80324aa <_malloc_r+0x166>
 80323ba:	6862      	ldr	r2, [r4, #4]
 80323bc:	f022 0c03 	bic.w	ip, r2, #3
 80323c0:	ebac 0007 	sub.w	r0, ip, r7
 80323c4:	280f      	cmp	r0, #15
 80323c6:	dd48      	ble.n	803245a <_malloc_r+0x116>
 80323c8:	19e2      	adds	r2, r4, r7
 80323ca:	f040 0301 	orr.w	r3, r0, #1
 80323ce:	f047 0701 	orr.w	r7, r7, #1
 80323d2:	6067      	str	r7, [r4, #4]
 80323d4:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80323d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80323dc:	6053      	str	r3, [r2, #4]
 80323de:	f844 000c 	str.w	r0, [r4, ip]
 80323e2:	e7e0      	b.n	80323a6 <_malloc_r+0x62>
 80323e4:	0a7b      	lsrs	r3, r7, #9
 80323e6:	d02a      	beq.n	803243e <_malloc_r+0xfa>
 80323e8:	2b04      	cmp	r3, #4
 80323ea:	d812      	bhi.n	8032412 <_malloc_r+0xce>
 80323ec:	09bb      	lsrs	r3, r7, #6
 80323ee:	3338      	adds	r3, #56	; 0x38
 80323f0:	1c5a      	adds	r2, r3, #1
 80323f2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80323f6:	f1a2 0c08 	sub.w	ip, r2, #8
 80323fa:	6854      	ldr	r4, [r2, #4]
 80323fc:	4564      	cmp	r4, ip
 80323fe:	d006      	beq.n	803240e <_malloc_r+0xca>
 8032400:	6862      	ldr	r2, [r4, #4]
 8032402:	f022 0203 	bic.w	r2, r2, #3
 8032406:	1bd0      	subs	r0, r2, r7
 8032408:	280f      	cmp	r0, #15
 803240a:	dd1c      	ble.n	8032446 <_malloc_r+0x102>
 803240c:	3b01      	subs	r3, #1
 803240e:	3301      	adds	r3, #1
 8032410:	e7cf      	b.n	80323b2 <_malloc_r+0x6e>
 8032412:	2b14      	cmp	r3, #20
 8032414:	d801      	bhi.n	803241a <_malloc_r+0xd6>
 8032416:	335b      	adds	r3, #91	; 0x5b
 8032418:	e7ea      	b.n	80323f0 <_malloc_r+0xac>
 803241a:	2b54      	cmp	r3, #84	; 0x54
 803241c:	d802      	bhi.n	8032424 <_malloc_r+0xe0>
 803241e:	0b3b      	lsrs	r3, r7, #12
 8032420:	336e      	adds	r3, #110	; 0x6e
 8032422:	e7e5      	b.n	80323f0 <_malloc_r+0xac>
 8032424:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8032428:	d802      	bhi.n	8032430 <_malloc_r+0xec>
 803242a:	0bfb      	lsrs	r3, r7, #15
 803242c:	3377      	adds	r3, #119	; 0x77
 803242e:	e7df      	b.n	80323f0 <_malloc_r+0xac>
 8032430:	f240 5254 	movw	r2, #1364	; 0x554
 8032434:	4293      	cmp	r3, r2
 8032436:	d804      	bhi.n	8032442 <_malloc_r+0xfe>
 8032438:	0cbb      	lsrs	r3, r7, #18
 803243a:	337c      	adds	r3, #124	; 0x7c
 803243c:	e7d8      	b.n	80323f0 <_malloc_r+0xac>
 803243e:	233f      	movs	r3, #63	; 0x3f
 8032440:	e7d6      	b.n	80323f0 <_malloc_r+0xac>
 8032442:	237e      	movs	r3, #126	; 0x7e
 8032444:	e7d4      	b.n	80323f0 <_malloc_r+0xac>
 8032446:	2800      	cmp	r0, #0
 8032448:	68e1      	ldr	r1, [r4, #12]
 803244a:	db04      	blt.n	8032456 <_malloc_r+0x112>
 803244c:	68a3      	ldr	r3, [r4, #8]
 803244e:	60d9      	str	r1, [r3, #12]
 8032450:	608b      	str	r3, [r1, #8]
 8032452:	18a3      	adds	r3, r4, r2
 8032454:	e7a3      	b.n	803239e <_malloc_r+0x5a>
 8032456:	460c      	mov	r4, r1
 8032458:	e7d0      	b.n	80323fc <_malloc_r+0xb8>
 803245a:	2800      	cmp	r0, #0
 803245c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8032460:	db07      	blt.n	8032472 <_malloc_r+0x12e>
 8032462:	44a4      	add	ip, r4
 8032464:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8032468:	f043 0301 	orr.w	r3, r3, #1
 803246c:	f8cc 3004 	str.w	r3, [ip, #4]
 8032470:	e799      	b.n	80323a6 <_malloc_r+0x62>
 8032472:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8032476:	6870      	ldr	r0, [r6, #4]
 8032478:	f080 8095 	bcs.w	80325a6 <_malloc_r+0x262>
 803247c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8032480:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8032484:	f04f 0c01 	mov.w	ip, #1
 8032488:	3201      	adds	r2, #1
 803248a:	fa0c fc0e 	lsl.w	ip, ip, lr
 803248e:	ea4c 0000 	orr.w	r0, ip, r0
 8032492:	6070      	str	r0, [r6, #4]
 8032494:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8032498:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 803249c:	3808      	subs	r0, #8
 803249e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80324a2:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80324a6:	f8cc 400c 	str.w	r4, [ip, #12]
 80324aa:	1098      	asrs	r0, r3, #2
 80324ac:	2201      	movs	r2, #1
 80324ae:	4082      	lsls	r2, r0
 80324b0:	6870      	ldr	r0, [r6, #4]
 80324b2:	4290      	cmp	r0, r2
 80324b4:	d326      	bcc.n	8032504 <_malloc_r+0x1c0>
 80324b6:	4210      	tst	r0, r2
 80324b8:	d106      	bne.n	80324c8 <_malloc_r+0x184>
 80324ba:	f023 0303 	bic.w	r3, r3, #3
 80324be:	0052      	lsls	r2, r2, #1
 80324c0:	4210      	tst	r0, r2
 80324c2:	f103 0304 	add.w	r3, r3, #4
 80324c6:	d0fa      	beq.n	80324be <_malloc_r+0x17a>
 80324c8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80324cc:	46c1      	mov	r9, r8
 80324ce:	469e      	mov	lr, r3
 80324d0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80324d4:	454c      	cmp	r4, r9
 80324d6:	f040 80b9 	bne.w	803264c <_malloc_r+0x308>
 80324da:	f10e 0e01 	add.w	lr, lr, #1
 80324de:	f01e 0f03 	tst.w	lr, #3
 80324e2:	f109 0908 	add.w	r9, r9, #8
 80324e6:	d1f3      	bne.n	80324d0 <_malloc_r+0x18c>
 80324e8:	0798      	lsls	r0, r3, #30
 80324ea:	f040 80e3 	bne.w	80326b4 <_malloc_r+0x370>
 80324ee:	6873      	ldr	r3, [r6, #4]
 80324f0:	ea23 0302 	bic.w	r3, r3, r2
 80324f4:	6073      	str	r3, [r6, #4]
 80324f6:	6870      	ldr	r0, [r6, #4]
 80324f8:	0052      	lsls	r2, r2, #1
 80324fa:	4290      	cmp	r0, r2
 80324fc:	d302      	bcc.n	8032504 <_malloc_r+0x1c0>
 80324fe:	2a00      	cmp	r2, #0
 8032500:	f040 80e5 	bne.w	80326ce <_malloc_r+0x38a>
 8032504:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8032508:	f8da 3004 	ldr.w	r3, [sl, #4]
 803250c:	f023 0903 	bic.w	r9, r3, #3
 8032510:	45b9      	cmp	r9, r7
 8032512:	d304      	bcc.n	803251e <_malloc_r+0x1da>
 8032514:	eba9 0207 	sub.w	r2, r9, r7
 8032518:	2a0f      	cmp	r2, #15
 803251a:	f300 8141 	bgt.w	80327a0 <_malloc_r+0x45c>
 803251e:	4b46      	ldr	r3, [pc, #280]	; (8032638 <_malloc_r+0x2f4>)
 8032520:	6819      	ldr	r1, [r3, #0]
 8032522:	3110      	adds	r1, #16
 8032524:	4439      	add	r1, r7
 8032526:	2008      	movs	r0, #8
 8032528:	9101      	str	r1, [sp, #4]
 803252a:	f002 fc3d 	bl	8034da8 <sysconf>
 803252e:	4a43      	ldr	r2, [pc, #268]	; (803263c <_malloc_r+0x2f8>)
 8032530:	9901      	ldr	r1, [sp, #4]
 8032532:	6813      	ldr	r3, [r2, #0]
 8032534:	3301      	adds	r3, #1
 8032536:	bf1f      	itttt	ne
 8032538:	f101 31ff 	addne.w	r1, r1, #4294967295
 803253c:	1809      	addne	r1, r1, r0
 803253e:	4243      	negne	r3, r0
 8032540:	4019      	andne	r1, r3
 8032542:	4680      	mov	r8, r0
 8032544:	4628      	mov	r0, r5
 8032546:	9101      	str	r1, [sp, #4]
 8032548:	f002 fc0a 	bl	8034d60 <_sbrk_r>
 803254c:	1c42      	adds	r2, r0, #1
 803254e:	eb0a 0b09 	add.w	fp, sl, r9
 8032552:	4604      	mov	r4, r0
 8032554:	f000 80f7 	beq.w	8032746 <_malloc_r+0x402>
 8032558:	4583      	cmp	fp, r0
 803255a:	9901      	ldr	r1, [sp, #4]
 803255c:	4a37      	ldr	r2, [pc, #220]	; (803263c <_malloc_r+0x2f8>)
 803255e:	d902      	bls.n	8032566 <_malloc_r+0x222>
 8032560:	45b2      	cmp	sl, r6
 8032562:	f040 80f0 	bne.w	8032746 <_malloc_r+0x402>
 8032566:	4b36      	ldr	r3, [pc, #216]	; (8032640 <_malloc_r+0x2fc>)
 8032568:	6818      	ldr	r0, [r3, #0]
 803256a:	45a3      	cmp	fp, r4
 803256c:	eb00 0e01 	add.w	lr, r0, r1
 8032570:	f8c3 e000 	str.w	lr, [r3]
 8032574:	f108 3cff 	add.w	ip, r8, #4294967295
 8032578:	f040 80ab 	bne.w	80326d2 <_malloc_r+0x38e>
 803257c:	ea1b 0f0c 	tst.w	fp, ip
 8032580:	f040 80a7 	bne.w	80326d2 <_malloc_r+0x38e>
 8032584:	68b2      	ldr	r2, [r6, #8]
 8032586:	4449      	add	r1, r9
 8032588:	f041 0101 	orr.w	r1, r1, #1
 803258c:	6051      	str	r1, [r2, #4]
 803258e:	4a2d      	ldr	r2, [pc, #180]	; (8032644 <_malloc_r+0x300>)
 8032590:	681b      	ldr	r3, [r3, #0]
 8032592:	6811      	ldr	r1, [r2, #0]
 8032594:	428b      	cmp	r3, r1
 8032596:	bf88      	it	hi
 8032598:	6013      	strhi	r3, [r2, #0]
 803259a:	4a2b      	ldr	r2, [pc, #172]	; (8032648 <_malloc_r+0x304>)
 803259c:	6811      	ldr	r1, [r2, #0]
 803259e:	428b      	cmp	r3, r1
 80325a0:	bf88      	it	hi
 80325a2:	6013      	strhi	r3, [r2, #0]
 80325a4:	e0cf      	b.n	8032746 <_malloc_r+0x402>
 80325a6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80325aa:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80325ae:	d218      	bcs.n	80325e2 <_malloc_r+0x29e>
 80325b0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80325b4:	3238      	adds	r2, #56	; 0x38
 80325b6:	f102 0e01 	add.w	lr, r2, #1
 80325ba:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80325be:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80325c2:	45f0      	cmp	r8, lr
 80325c4:	d12b      	bne.n	803261e <_malloc_r+0x2da>
 80325c6:	1092      	asrs	r2, r2, #2
 80325c8:	f04f 0c01 	mov.w	ip, #1
 80325cc:	fa0c f202 	lsl.w	r2, ip, r2
 80325d0:	4302      	orrs	r2, r0
 80325d2:	6072      	str	r2, [r6, #4]
 80325d4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80325d8:	f8c8 4008 	str.w	r4, [r8, #8]
 80325dc:	f8ce 400c 	str.w	r4, [lr, #12]
 80325e0:	e763      	b.n	80324aa <_malloc_r+0x166>
 80325e2:	2a14      	cmp	r2, #20
 80325e4:	d801      	bhi.n	80325ea <_malloc_r+0x2a6>
 80325e6:	325b      	adds	r2, #91	; 0x5b
 80325e8:	e7e5      	b.n	80325b6 <_malloc_r+0x272>
 80325ea:	2a54      	cmp	r2, #84	; 0x54
 80325ec:	d803      	bhi.n	80325f6 <_malloc_r+0x2b2>
 80325ee:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80325f2:	326e      	adds	r2, #110	; 0x6e
 80325f4:	e7df      	b.n	80325b6 <_malloc_r+0x272>
 80325f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80325fa:	d803      	bhi.n	8032604 <_malloc_r+0x2c0>
 80325fc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8032600:	3277      	adds	r2, #119	; 0x77
 8032602:	e7d8      	b.n	80325b6 <_malloc_r+0x272>
 8032604:	f240 5e54 	movw	lr, #1364	; 0x554
 8032608:	4572      	cmp	r2, lr
 803260a:	bf9a      	itte	ls
 803260c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8032610:	327c      	addls	r2, #124	; 0x7c
 8032612:	227e      	movhi	r2, #126	; 0x7e
 8032614:	e7cf      	b.n	80325b6 <_malloc_r+0x272>
 8032616:	f8de e008 	ldr.w	lr, [lr, #8]
 803261a:	45f0      	cmp	r8, lr
 803261c:	d005      	beq.n	803262a <_malloc_r+0x2e6>
 803261e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8032622:	f022 0203 	bic.w	r2, r2, #3
 8032626:	4562      	cmp	r2, ip
 8032628:	d8f5      	bhi.n	8032616 <_malloc_r+0x2d2>
 803262a:	f8de 800c 	ldr.w	r8, [lr, #12]
 803262e:	e7d1      	b.n	80325d4 <_malloc_r+0x290>
 8032630:	200003b0 	.word	0x200003b0
 8032634:	200003b8 	.word	0x200003b8
 8032638:	20008e28 	.word	0x20008e28
 803263c:	200007b8 	.word	0x200007b8
 8032640:	20008df8 	.word	0x20008df8
 8032644:	20008e20 	.word	0x20008e20
 8032648:	20008e24 	.word	0x20008e24
 803264c:	6860      	ldr	r0, [r4, #4]
 803264e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8032652:	f020 0003 	bic.w	r0, r0, #3
 8032656:	eba0 0a07 	sub.w	sl, r0, r7
 803265a:	f1ba 0f0f 	cmp.w	sl, #15
 803265e:	dd12      	ble.n	8032686 <_malloc_r+0x342>
 8032660:	68a3      	ldr	r3, [r4, #8]
 8032662:	19e2      	adds	r2, r4, r7
 8032664:	f047 0701 	orr.w	r7, r7, #1
 8032668:	6067      	str	r7, [r4, #4]
 803266a:	f8c3 c00c 	str.w	ip, [r3, #12]
 803266e:	f8cc 3008 	str.w	r3, [ip, #8]
 8032672:	f04a 0301 	orr.w	r3, sl, #1
 8032676:	e9c6 2204 	strd	r2, r2, [r6, #16]
 803267a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 803267e:	6053      	str	r3, [r2, #4]
 8032680:	f844 a000 	str.w	sl, [r4, r0]
 8032684:	e68f      	b.n	80323a6 <_malloc_r+0x62>
 8032686:	f1ba 0f00 	cmp.w	sl, #0
 803268a:	db11      	blt.n	80326b0 <_malloc_r+0x36c>
 803268c:	4420      	add	r0, r4
 803268e:	6843      	ldr	r3, [r0, #4]
 8032690:	f043 0301 	orr.w	r3, r3, #1
 8032694:	6043      	str	r3, [r0, #4]
 8032696:	f854 3f08 	ldr.w	r3, [r4, #8]!
 803269a:	4628      	mov	r0, r5
 803269c:	f8c3 c00c 	str.w	ip, [r3, #12]
 80326a0:	f8cc 3008 	str.w	r3, [ip, #8]
 80326a4:	f000 f88e 	bl	80327c4 <__malloc_unlock>
 80326a8:	4620      	mov	r0, r4
 80326aa:	b003      	add	sp, #12
 80326ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80326b0:	4664      	mov	r4, ip
 80326b2:	e70f      	b.n	80324d4 <_malloc_r+0x190>
 80326b4:	f858 0908 	ldr.w	r0, [r8], #-8
 80326b8:	4540      	cmp	r0, r8
 80326ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80326be:	f43f af13 	beq.w	80324e8 <_malloc_r+0x1a4>
 80326c2:	e718      	b.n	80324f6 <_malloc_r+0x1b2>
 80326c4:	3304      	adds	r3, #4
 80326c6:	0052      	lsls	r2, r2, #1
 80326c8:	4210      	tst	r0, r2
 80326ca:	d0fb      	beq.n	80326c4 <_malloc_r+0x380>
 80326cc:	e6fc      	b.n	80324c8 <_malloc_r+0x184>
 80326ce:	4673      	mov	r3, lr
 80326d0:	e7fa      	b.n	80326c8 <_malloc_r+0x384>
 80326d2:	6810      	ldr	r0, [r2, #0]
 80326d4:	3001      	adds	r0, #1
 80326d6:	bf1b      	ittet	ne
 80326d8:	eba4 0b0b 	subne.w	fp, r4, fp
 80326dc:	eb0b 020e 	addne.w	r2, fp, lr
 80326e0:	6014      	streq	r4, [r2, #0]
 80326e2:	601a      	strne	r2, [r3, #0]
 80326e4:	f014 0b07 	ands.w	fp, r4, #7
 80326e8:	bf1a      	itte	ne
 80326ea:	f1cb 0008 	rsbne	r0, fp, #8
 80326ee:	1824      	addne	r4, r4, r0
 80326f0:	4658      	moveq	r0, fp
 80326f2:	1862      	adds	r2, r4, r1
 80326f4:	ea02 010c 	and.w	r1, r2, ip
 80326f8:	4480      	add	r8, r0
 80326fa:	eba8 0801 	sub.w	r8, r8, r1
 80326fe:	ea08 080c 	and.w	r8, r8, ip
 8032702:	4641      	mov	r1, r8
 8032704:	4628      	mov	r0, r5
 8032706:	9201      	str	r2, [sp, #4]
 8032708:	f002 fb2a 	bl	8034d60 <_sbrk_r>
 803270c:	1c43      	adds	r3, r0, #1
 803270e:	9a01      	ldr	r2, [sp, #4]
 8032710:	4b28      	ldr	r3, [pc, #160]	; (80327b4 <_malloc_r+0x470>)
 8032712:	d107      	bne.n	8032724 <_malloc_r+0x3e0>
 8032714:	f1bb 0f00 	cmp.w	fp, #0
 8032718:	d023      	beq.n	8032762 <_malloc_r+0x41e>
 803271a:	f1ab 0008 	sub.w	r0, fp, #8
 803271e:	4410      	add	r0, r2
 8032720:	f04f 0800 	mov.w	r8, #0
 8032724:	681a      	ldr	r2, [r3, #0]
 8032726:	60b4      	str	r4, [r6, #8]
 8032728:	1b00      	subs	r0, r0, r4
 803272a:	4440      	add	r0, r8
 803272c:	4442      	add	r2, r8
 803272e:	f040 0001 	orr.w	r0, r0, #1
 8032732:	45b2      	cmp	sl, r6
 8032734:	601a      	str	r2, [r3, #0]
 8032736:	6060      	str	r0, [r4, #4]
 8032738:	f43f af29 	beq.w	803258e <_malloc_r+0x24a>
 803273c:	f1b9 0f0f 	cmp.w	r9, #15
 8032740:	d812      	bhi.n	8032768 <_malloc_r+0x424>
 8032742:	2301      	movs	r3, #1
 8032744:	6063      	str	r3, [r4, #4]
 8032746:	68b3      	ldr	r3, [r6, #8]
 8032748:	685b      	ldr	r3, [r3, #4]
 803274a:	f023 0303 	bic.w	r3, r3, #3
 803274e:	42bb      	cmp	r3, r7
 8032750:	eba3 0207 	sub.w	r2, r3, r7
 8032754:	d301      	bcc.n	803275a <_malloc_r+0x416>
 8032756:	2a0f      	cmp	r2, #15
 8032758:	dc22      	bgt.n	80327a0 <_malloc_r+0x45c>
 803275a:	4628      	mov	r0, r5
 803275c:	f000 f832 	bl	80327c4 <__malloc_unlock>
 8032760:	e5fc      	b.n	803235c <_malloc_r+0x18>
 8032762:	4610      	mov	r0, r2
 8032764:	46d8      	mov	r8, fp
 8032766:	e7dd      	b.n	8032724 <_malloc_r+0x3e0>
 8032768:	f8da 2004 	ldr.w	r2, [sl, #4]
 803276c:	f1a9 090c 	sub.w	r9, r9, #12
 8032770:	f029 0907 	bic.w	r9, r9, #7
 8032774:	f002 0201 	and.w	r2, r2, #1
 8032778:	ea42 0209 	orr.w	r2, r2, r9
 803277c:	f8ca 2004 	str.w	r2, [sl, #4]
 8032780:	2105      	movs	r1, #5
 8032782:	eb0a 0209 	add.w	r2, sl, r9
 8032786:	f1b9 0f0f 	cmp.w	r9, #15
 803278a:	e9c2 1101 	strd	r1, r1, [r2, #4]
 803278e:	f67f aefe 	bls.w	803258e <_malloc_r+0x24a>
 8032792:	f10a 0108 	add.w	r1, sl, #8
 8032796:	4628      	mov	r0, r5
 8032798:	f7ff fd14 	bl	80321c4 <_free_r>
 803279c:	4b05      	ldr	r3, [pc, #20]	; (80327b4 <_malloc_r+0x470>)
 803279e:	e6f6      	b.n	803258e <_malloc_r+0x24a>
 80327a0:	68b4      	ldr	r4, [r6, #8]
 80327a2:	f047 0301 	orr.w	r3, r7, #1
 80327a6:	4427      	add	r7, r4
 80327a8:	f042 0201 	orr.w	r2, r2, #1
 80327ac:	6063      	str	r3, [r4, #4]
 80327ae:	60b7      	str	r7, [r6, #8]
 80327b0:	607a      	str	r2, [r7, #4]
 80327b2:	e5f8      	b.n	80323a6 <_malloc_r+0x62>
 80327b4:	20008df8 	.word	0x20008df8

080327b8 <__malloc_lock>:
 80327b8:	4801      	ldr	r0, [pc, #4]	; (80327c0 <__malloc_lock+0x8>)
 80327ba:	f7ff bc8f 	b.w	80320dc <__retarget_lock_acquire_recursive>
 80327be:	bf00      	nop
 80327c0:	20008df1 	.word	0x20008df1

080327c4 <__malloc_unlock>:
 80327c4:	4801      	ldr	r0, [pc, #4]	; (80327cc <__malloc_unlock+0x8>)
 80327c6:	f7ff bc8a 	b.w	80320de <__retarget_lock_release_recursive>
 80327ca:	bf00      	nop
 80327cc:	20008df1 	.word	0x20008df1

080327d0 <_vfprintf_r>:
 80327d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80327d4:	ed2d 8b04 	vpush	{d8-d9}
 80327d8:	b0cf      	sub	sp, #316	; 0x13c
 80327da:	468b      	mov	fp, r1
 80327dc:	4691      	mov	r9, r2
 80327de:	461c      	mov	r4, r3
 80327e0:	461d      	mov	r5, r3
 80327e2:	4682      	mov	sl, r0
 80327e4:	f002 fab8 	bl	8034d58 <_localeconv_r>
 80327e8:	6803      	ldr	r3, [r0, #0]
 80327ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80327ec:	4618      	mov	r0, r3
 80327ee:	f7ef fcef 	bl	80221d0 <strlen>
 80327f2:	900e      	str	r0, [sp, #56]	; 0x38
 80327f4:	f1ba 0f00 	cmp.w	sl, #0
 80327f8:	d005      	beq.n	8032806 <_vfprintf_r+0x36>
 80327fa:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 80327fe:	b913      	cbnz	r3, 8032806 <_vfprintf_r+0x36>
 8032800:	4650      	mov	r0, sl
 8032802:	f7ff fb17 	bl	8031e34 <__sinit>
 8032806:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 803280a:	07d8      	lsls	r0, r3, #31
 803280c:	d407      	bmi.n	803281e <_vfprintf_r+0x4e>
 803280e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032812:	0599      	lsls	r1, r3, #22
 8032814:	d403      	bmi.n	803281e <_vfprintf_r+0x4e>
 8032816:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 803281a:	f7ff fc5f 	bl	80320dc <__retarget_lock_acquire_recursive>
 803281e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8032822:	049a      	lsls	r2, r3, #18
 8032824:	d409      	bmi.n	803283a <_vfprintf_r+0x6a>
 8032826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 803282a:	f8ab 300c 	strh.w	r3, [fp, #12]
 803282e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8032832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8032836:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 803283a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803283e:	071b      	lsls	r3, r3, #28
 8032840:	d502      	bpl.n	8032848 <_vfprintf_r+0x78>
 8032842:	f8db 3010 	ldr.w	r3, [fp, #16]
 8032846:	b9d3      	cbnz	r3, 803287e <_vfprintf_r+0xae>
 8032848:	4659      	mov	r1, fp
 803284a:	4650      	mov	r0, sl
 803284c:	f002 f98e 	bl	8034b6c <__swsetup_r>
 8032850:	b1a8      	cbz	r0, 803287e <_vfprintf_r+0xae>
 8032852:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8032856:	07df      	lsls	r7, r3, #31
 8032858:	d508      	bpl.n	803286c <_vfprintf_r+0x9c>
 803285a:	f04f 33ff 	mov.w	r3, #4294967295
 803285e:	930f      	str	r3, [sp, #60]	; 0x3c
 8032860:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8032862:	b04f      	add	sp, #316	; 0x13c
 8032864:	ecbd 8b04 	vpop	{d8-d9}
 8032868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803286c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032870:	059e      	lsls	r6, r3, #22
 8032872:	d4f2      	bmi.n	803285a <_vfprintf_r+0x8a>
 8032874:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8032878:	f7ff fc31 	bl	80320de <__retarget_lock_release_recursive>
 803287c:	e7ed      	b.n	803285a <_vfprintf_r+0x8a>
 803287e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032882:	f003 021a 	and.w	r2, r3, #26
 8032886:	2a0a      	cmp	r2, #10
 8032888:	d118      	bne.n	80328bc <_vfprintf_r+0xec>
 803288a:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 803288e:	2a00      	cmp	r2, #0
 8032890:	db14      	blt.n	80328bc <_vfprintf_r+0xec>
 8032892:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8032896:	07d5      	lsls	r5, r2, #31
 8032898:	d405      	bmi.n	80328a6 <_vfprintf_r+0xd6>
 803289a:	0598      	lsls	r0, r3, #22
 803289c:	d403      	bmi.n	80328a6 <_vfprintf_r+0xd6>
 803289e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80328a2:	f7ff fc1c 	bl	80320de <__retarget_lock_release_recursive>
 80328a6:	4623      	mov	r3, r4
 80328a8:	464a      	mov	r2, r9
 80328aa:	4659      	mov	r1, fp
 80328ac:	4650      	mov	r0, sl
 80328ae:	b04f      	add	sp, #316	; 0x13c
 80328b0:	ecbd 8b04 	vpop	{d8-d9}
 80328b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80328b8:	f001 b9be 	b.w	8033c38 <__sbprintf>
 80328bc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8032b08 <_vfprintf_r+0x338>
 80328c0:	2300      	movs	r3, #0
 80328c2:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 80328c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80328ca:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80328ce:	ac25      	add	r4, sp, #148	; 0x94
 80328d0:	9422      	str	r4, [sp, #136]	; 0x88
 80328d2:	9305      	str	r3, [sp, #20]
 80328d4:	930a      	str	r3, [sp, #40]	; 0x28
 80328d6:	9312      	str	r3, [sp, #72]	; 0x48
 80328d8:	9314      	str	r3, [sp, #80]	; 0x50
 80328da:	930f      	str	r3, [sp, #60]	; 0x3c
 80328dc:	464b      	mov	r3, r9
 80328de:	461e      	mov	r6, r3
 80328e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80328e4:	b10a      	cbz	r2, 80328ea <_vfprintf_r+0x11a>
 80328e6:	2a25      	cmp	r2, #37	; 0x25
 80328e8:	d1f9      	bne.n	80328de <_vfprintf_r+0x10e>
 80328ea:	ebb6 0709 	subs.w	r7, r6, r9
 80328ee:	d00d      	beq.n	803290c <_vfprintf_r+0x13c>
 80328f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80328f2:	443b      	add	r3, r7
 80328f4:	9324      	str	r3, [sp, #144]	; 0x90
 80328f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80328f8:	3301      	adds	r3, #1
 80328fa:	2b07      	cmp	r3, #7
 80328fc:	e9c4 9700 	strd	r9, r7, [r4]
 8032900:	9323      	str	r3, [sp, #140]	; 0x8c
 8032902:	dc79      	bgt.n	80329f8 <_vfprintf_r+0x228>
 8032904:	3408      	adds	r4, #8
 8032906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8032908:	443b      	add	r3, r7
 803290a:	930f      	str	r3, [sp, #60]	; 0x3c
 803290c:	7833      	ldrb	r3, [r6, #0]
 803290e:	2b00      	cmp	r3, #0
 8032910:	f001 814e 	beq.w	8033bb0 <_vfprintf_r+0x13e0>
 8032914:	2300      	movs	r3, #0
 8032916:	f04f 32ff 	mov.w	r2, #4294967295
 803291a:	3601      	adds	r6, #1
 803291c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032920:	9204      	str	r2, [sp, #16]
 8032922:	9310      	str	r3, [sp, #64]	; 0x40
 8032924:	4698      	mov	r8, r3
 8032926:	270a      	movs	r7, #10
 8032928:	212b      	movs	r1, #43	; 0x2b
 803292a:	4633      	mov	r3, r6
 803292c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032930:	9207      	str	r2, [sp, #28]
 8032932:	930b      	str	r3, [sp, #44]	; 0x2c
 8032934:	9b07      	ldr	r3, [sp, #28]
 8032936:	3b20      	subs	r3, #32
 8032938:	2b5a      	cmp	r3, #90	; 0x5a
 803293a:	f200 85c4 	bhi.w	80334c6 <_vfprintf_r+0xcf6>
 803293e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8032942:	007e      	.short	0x007e
 8032944:	05c205c2 	.word	0x05c205c2
 8032948:	05c20086 	.word	0x05c20086
 803294c:	05c205c2 	.word	0x05c205c2
 8032950:	05c20065 	.word	0x05c20065
 8032954:	008905c2 	.word	0x008905c2
 8032958:	05c20093 	.word	0x05c20093
 803295c:	00960090 	.word	0x00960090
 8032960:	00b205c2 	.word	0x00b205c2
 8032964:	00b500b5 	.word	0x00b500b5
 8032968:	00b500b5 	.word	0x00b500b5
 803296c:	00b500b5 	.word	0x00b500b5
 8032970:	00b500b5 	.word	0x00b500b5
 8032974:	05c200b5 	.word	0x05c200b5
 8032978:	05c205c2 	.word	0x05c205c2
 803297c:	05c205c2 	.word	0x05c205c2
 8032980:	05c205c2 	.word	0x05c205c2
 8032984:	05c2012a 	.word	0x05c2012a
 8032988:	00fa00e7 	.word	0x00fa00e7
 803298c:	012a012a 	.word	0x012a012a
 8032990:	05c2012a 	.word	0x05c2012a
 8032994:	05c205c2 	.word	0x05c205c2
 8032998:	00c505c2 	.word	0x00c505c2
 803299c:	05c205c2 	.word	0x05c205c2
 80329a0:	05c204a2 	.word	0x05c204a2
 80329a4:	05c205c2 	.word	0x05c205c2
 80329a8:	05c204eb 	.word	0x05c204eb
 80329ac:	05c2050c 	.word	0x05c2050c
 80329b0:	052e05c2 	.word	0x052e05c2
 80329b4:	05c205c2 	.word	0x05c205c2
 80329b8:	05c205c2 	.word	0x05c205c2
 80329bc:	05c205c2 	.word	0x05c205c2
 80329c0:	05c205c2 	.word	0x05c205c2
 80329c4:	05c2012a 	.word	0x05c2012a
 80329c8:	00fc00e7 	.word	0x00fc00e7
 80329cc:	012a012a 	.word	0x012a012a
 80329d0:	00c8012a 	.word	0x00c8012a
 80329d4:	00dc00fc 	.word	0x00dc00fc
 80329d8:	00d505c2 	.word	0x00d505c2
 80329dc:	047d05c2 	.word	0x047d05c2
 80329e0:	04da04a4 	.word	0x04da04a4
 80329e4:	05c200dc 	.word	0x05c200dc
 80329e8:	007c04eb 	.word	0x007c04eb
 80329ec:	05c2050e 	.word	0x05c2050e
 80329f0:	054d05c2 	.word	0x054d05c2
 80329f4:	007c05c2 	.word	0x007c05c2
 80329f8:	aa22      	add	r2, sp, #136	; 0x88
 80329fa:	4659      	mov	r1, fp
 80329fc:	4650      	mov	r0, sl
 80329fe:	f001 f95b 	bl	8033cb8 <__sprint_r>
 8032a02:	2800      	cmp	r0, #0
 8032a04:	f040 8135 	bne.w	8032c72 <_vfprintf_r+0x4a2>
 8032a08:	ac25      	add	r4, sp, #148	; 0x94
 8032a0a:	e77c      	b.n	8032906 <_vfprintf_r+0x136>
 8032a0c:	4650      	mov	r0, sl
 8032a0e:	f002 f9a3 	bl	8034d58 <_localeconv_r>
 8032a12:	6843      	ldr	r3, [r0, #4]
 8032a14:	9314      	str	r3, [sp, #80]	; 0x50
 8032a16:	4618      	mov	r0, r3
 8032a18:	f7ef fbda 	bl	80221d0 <strlen>
 8032a1c:	9012      	str	r0, [sp, #72]	; 0x48
 8032a1e:	4650      	mov	r0, sl
 8032a20:	f002 f99a 	bl	8034d58 <_localeconv_r>
 8032a24:	6883      	ldr	r3, [r0, #8]
 8032a26:	930a      	str	r3, [sp, #40]	; 0x28
 8032a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8032a2a:	212b      	movs	r1, #43	; 0x2b
 8032a2c:	b12b      	cbz	r3, 8032a3a <_vfprintf_r+0x26a>
 8032a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8032a30:	b11b      	cbz	r3, 8032a3a <_vfprintf_r+0x26a>
 8032a32:	781b      	ldrb	r3, [r3, #0]
 8032a34:	b10b      	cbz	r3, 8032a3a <_vfprintf_r+0x26a>
 8032a36:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8032a3a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8032a3c:	e775      	b.n	803292a <_vfprintf_r+0x15a>
 8032a3e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8032a42:	2b00      	cmp	r3, #0
 8032a44:	d1f9      	bne.n	8032a3a <_vfprintf_r+0x26a>
 8032a46:	2320      	movs	r3, #32
 8032a48:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032a4c:	e7f5      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032a4e:	f048 0801 	orr.w	r8, r8, #1
 8032a52:	e7f2      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8032a58:	9310      	str	r3, [sp, #64]	; 0x40
 8032a5a:	2b00      	cmp	r3, #0
 8032a5c:	daed      	bge.n	8032a3a <_vfprintf_r+0x26a>
 8032a5e:	425b      	negs	r3, r3
 8032a60:	9310      	str	r3, [sp, #64]	; 0x40
 8032a62:	f048 0804 	orr.w	r8, r8, #4
 8032a66:	e7e8      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032a68:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8032a6c:	e7e5      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032a74:	9207      	str	r2, [sp, #28]
 8032a76:	2a2a      	cmp	r2, #42	; 0x2a
 8032a78:	d112      	bne.n	8032aa0 <_vfprintf_r+0x2d0>
 8032a7a:	f855 2b04 	ldr.w	r2, [r5], #4
 8032a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8032a80:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8032a84:	9204      	str	r2, [sp, #16]
 8032a86:	e7d8      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032a88:	9804      	ldr	r0, [sp, #16]
 8032a8a:	fb07 2200 	mla	r2, r7, r0, r2
 8032a8e:	9204      	str	r2, [sp, #16]
 8032a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032a94:	9207      	str	r2, [sp, #28]
 8032a96:	9a07      	ldr	r2, [sp, #28]
 8032a98:	3a30      	subs	r2, #48	; 0x30
 8032a9a:	2a09      	cmp	r2, #9
 8032a9c:	d9f4      	bls.n	8032a88 <_vfprintf_r+0x2b8>
 8032a9e:	e748      	b.n	8032932 <_vfprintf_r+0x162>
 8032aa0:	2200      	movs	r2, #0
 8032aa2:	9204      	str	r2, [sp, #16]
 8032aa4:	e7f7      	b.n	8032a96 <_vfprintf_r+0x2c6>
 8032aa6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8032aaa:	e7c6      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032aac:	2200      	movs	r2, #0
 8032aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032ab0:	9210      	str	r2, [sp, #64]	; 0x40
 8032ab2:	9a07      	ldr	r2, [sp, #28]
 8032ab4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8032ab6:	3a30      	subs	r2, #48	; 0x30
 8032ab8:	fb07 2200 	mla	r2, r7, r0, r2
 8032abc:	9210      	str	r2, [sp, #64]	; 0x40
 8032abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8032ac2:	9207      	str	r2, [sp, #28]
 8032ac4:	3a30      	subs	r2, #48	; 0x30
 8032ac6:	2a09      	cmp	r2, #9
 8032ac8:	d9f3      	bls.n	8032ab2 <_vfprintf_r+0x2e2>
 8032aca:	e732      	b.n	8032932 <_vfprintf_r+0x162>
 8032acc:	f048 0808 	orr.w	r8, r8, #8
 8032ad0:	e7b3      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032ad4:	781b      	ldrb	r3, [r3, #0]
 8032ad6:	2b68      	cmp	r3, #104	; 0x68
 8032ad8:	bf01      	itttt	eq
 8032ada:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8032adc:	3301      	addeq	r3, #1
 8032ade:	930b      	streq	r3, [sp, #44]	; 0x2c
 8032ae0:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8032ae4:	bf18      	it	ne
 8032ae6:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8032aea:	e7a6      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032aee:	781b      	ldrb	r3, [r3, #0]
 8032af0:	2b6c      	cmp	r3, #108	; 0x6c
 8032af2:	d105      	bne.n	8032b00 <_vfprintf_r+0x330>
 8032af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8032af6:	3301      	adds	r3, #1
 8032af8:	930b      	str	r3, [sp, #44]	; 0x2c
 8032afa:	f048 0820 	orr.w	r8, r8, #32
 8032afe:	e79c      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032b00:	f048 0810 	orr.w	r8, r8, #16
 8032b04:	e799      	b.n	8032a3a <_vfprintf_r+0x26a>
 8032b06:	bf00      	nop
	...
 8032b10:	462a      	mov	r2, r5
 8032b12:	f852 3b04 	ldr.w	r3, [r2], #4
 8032b16:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8032b1a:	2300      	movs	r3, #0
 8032b1c:	9206      	str	r2, [sp, #24]
 8032b1e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032b22:	2600      	movs	r6, #0
 8032b24:	9303      	str	r3, [sp, #12]
 8032b26:	2301      	movs	r3, #1
 8032b28:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8032b2c:	9304      	str	r3, [sp, #16]
 8032b2e:	4635      	mov	r5, r6
 8032b30:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8032b34:	e1c6      	b.n	8032ec4 <_vfprintf_r+0x6f4>
 8032b36:	f048 0810 	orr.w	r8, r8, #16
 8032b3a:	f018 0f20 	tst.w	r8, #32
 8032b3e:	d012      	beq.n	8032b66 <_vfprintf_r+0x396>
 8032b40:	3507      	adds	r5, #7
 8032b42:	f025 0307 	bic.w	r3, r5, #7
 8032b46:	461a      	mov	r2, r3
 8032b48:	685e      	ldr	r6, [r3, #4]
 8032b4a:	f852 5b08 	ldr.w	r5, [r2], #8
 8032b4e:	9206      	str	r2, [sp, #24]
 8032b50:	2e00      	cmp	r6, #0
 8032b52:	da06      	bge.n	8032b62 <_vfprintf_r+0x392>
 8032b54:	426d      	negs	r5, r5
 8032b56:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8032b5a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8032b5e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032b62:	2301      	movs	r3, #1
 8032b64:	e3a2      	b.n	80332ac <_vfprintf_r+0xadc>
 8032b66:	462b      	mov	r3, r5
 8032b68:	f018 0f10 	tst.w	r8, #16
 8032b6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8032b70:	9306      	str	r3, [sp, #24]
 8032b72:	d002      	beq.n	8032b7a <_vfprintf_r+0x3aa>
 8032b74:	4635      	mov	r5, r6
 8032b76:	17f6      	asrs	r6, r6, #31
 8032b78:	e7ea      	b.n	8032b50 <_vfprintf_r+0x380>
 8032b7a:	f018 0f40 	tst.w	r8, #64	; 0x40
 8032b7e:	d003      	beq.n	8032b88 <_vfprintf_r+0x3b8>
 8032b80:	b235      	sxth	r5, r6
 8032b82:	f346 36c0 	sbfx	r6, r6, #15, #1
 8032b86:	e7e3      	b.n	8032b50 <_vfprintf_r+0x380>
 8032b88:	f418 7f00 	tst.w	r8, #512	; 0x200
 8032b8c:	d0f2      	beq.n	8032b74 <_vfprintf_r+0x3a4>
 8032b8e:	b275      	sxtb	r5, r6
 8032b90:	f346 16c0 	sbfx	r6, r6, #7, #1
 8032b94:	e7dc      	b.n	8032b50 <_vfprintf_r+0x380>
 8032b96:	3507      	adds	r5, #7
 8032b98:	f025 0307 	bic.w	r3, r5, #7
 8032b9c:	ecb3 7b02 	vldmia	r3!, {d7}
 8032ba0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8032ba4:	9306      	str	r3, [sp, #24]
 8032ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8032ba8:	ee09 3a10 	vmov	s18, r3
 8032bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8032bb2:	ee09 3a90 	vmov	s19, r3
 8032bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8032bba:	4b3f      	ldr	r3, [pc, #252]	; (8032cb8 <_vfprintf_r+0x4e8>)
 8032bbc:	ec51 0b19 	vmov	r0, r1, d9
 8032bc0:	f7ef ffb4 	bl	8022b2c <__aeabi_dcmpun>
 8032bc4:	bb10      	cbnz	r0, 8032c0c <_vfprintf_r+0x43c>
 8032bc6:	4b3c      	ldr	r3, [pc, #240]	; (8032cb8 <_vfprintf_r+0x4e8>)
 8032bc8:	ec51 0b19 	vmov	r0, r1, d9
 8032bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8032bd0:	f7ef ff8e 	bl	8022af0 <__aeabi_dcmple>
 8032bd4:	b9d0      	cbnz	r0, 8032c0c <_vfprintf_r+0x43c>
 8032bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8032bda:	2200      	movs	r2, #0
 8032bdc:	2300      	movs	r3, #0
 8032bde:	f7ef ff7d 	bl	8022adc <__aeabi_dcmplt>
 8032be2:	b110      	cbz	r0, 8032bea <_vfprintf_r+0x41a>
 8032be4:	232d      	movs	r3, #45	; 0x2d
 8032be6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032bea:	4a34      	ldr	r2, [pc, #208]	; (8032cbc <_vfprintf_r+0x4ec>)
 8032bec:	4b34      	ldr	r3, [pc, #208]	; (8032cc0 <_vfprintf_r+0x4f0>)
 8032bee:	9907      	ldr	r1, [sp, #28]
 8032bf0:	2947      	cmp	r1, #71	; 0x47
 8032bf2:	bfd4      	ite	le
 8032bf4:	4691      	movle	r9, r2
 8032bf6:	4699      	movgt	r9, r3
 8032bf8:	2100      	movs	r1, #0
 8032bfa:	2303      	movs	r3, #3
 8032bfc:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8032c00:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8032c04:	2600      	movs	r6, #0
 8032c06:	4633      	mov	r3, r6
 8032c08:	f001 b80c 	b.w	8033c24 <_vfprintf_r+0x1454>
 8032c0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8032c10:	4610      	mov	r0, r2
 8032c12:	4619      	mov	r1, r3
 8032c14:	f7ef ff8a 	bl	8022b2c <__aeabi_dcmpun>
 8032c18:	b140      	cbz	r0, 8032c2c <_vfprintf_r+0x45c>
 8032c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032c1c:	4a29      	ldr	r2, [pc, #164]	; (8032cc4 <_vfprintf_r+0x4f4>)
 8032c1e:	2b00      	cmp	r3, #0
 8032c20:	bfbc      	itt	lt
 8032c22:	232d      	movlt	r3, #45	; 0x2d
 8032c24:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8032c28:	4b27      	ldr	r3, [pc, #156]	; (8032cc8 <_vfprintf_r+0x4f8>)
 8032c2a:	e7e0      	b.n	8032bee <_vfprintf_r+0x41e>
 8032c2c:	9b07      	ldr	r3, [sp, #28]
 8032c2e:	f023 0320 	bic.w	r3, r3, #32
 8032c32:	2b41      	cmp	r3, #65	; 0x41
 8032c34:	9308      	str	r3, [sp, #32]
 8032c36:	d12e      	bne.n	8032c96 <_vfprintf_r+0x4c6>
 8032c38:	2330      	movs	r3, #48	; 0x30
 8032c3a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8032c3e:	9b07      	ldr	r3, [sp, #28]
 8032c40:	2b61      	cmp	r3, #97	; 0x61
 8032c42:	bf0c      	ite	eq
 8032c44:	2378      	moveq	r3, #120	; 0x78
 8032c46:	2358      	movne	r3, #88	; 0x58
 8032c48:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8032c4c:	9b04      	ldr	r3, [sp, #16]
 8032c4e:	2b63      	cmp	r3, #99	; 0x63
 8032c50:	f048 0802 	orr.w	r8, r8, #2
 8032c54:	dd3a      	ble.n	8032ccc <_vfprintf_r+0x4fc>
 8032c56:	1c59      	adds	r1, r3, #1
 8032c58:	4650      	mov	r0, sl
 8032c5a:	f7ff fb73 	bl	8032344 <_malloc_r>
 8032c5e:	4681      	mov	r9, r0
 8032c60:	2800      	cmp	r0, #0
 8032c62:	f040 8207 	bne.w	8033074 <_vfprintf_r+0x8a4>
 8032c66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032c6e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8032c72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8032c76:	07d9      	lsls	r1, r3, #31
 8032c78:	d407      	bmi.n	8032c8a <_vfprintf_r+0x4ba>
 8032c7a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032c7e:	059a      	lsls	r2, r3, #22
 8032c80:	d403      	bmi.n	8032c8a <_vfprintf_r+0x4ba>
 8032c82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8032c86:	f7ff fa2a 	bl	80320de <__retarget_lock_release_recursive>
 8032c8a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8032c8e:	065b      	lsls	r3, r3, #25
 8032c90:	f57f ade6 	bpl.w	8032860 <_vfprintf_r+0x90>
 8032c94:	e5e1      	b.n	803285a <_vfprintf_r+0x8a>
 8032c96:	9b04      	ldr	r3, [sp, #16]
 8032c98:	3301      	adds	r3, #1
 8032c9a:	f000 81ed 	beq.w	8033078 <_vfprintf_r+0x8a8>
 8032c9e:	9b08      	ldr	r3, [sp, #32]
 8032ca0:	2b47      	cmp	r3, #71	; 0x47
 8032ca2:	f040 81ec 	bne.w	803307e <_vfprintf_r+0x8ae>
 8032ca6:	9b04      	ldr	r3, [sp, #16]
 8032ca8:	2b00      	cmp	r3, #0
 8032caa:	f040 81e8 	bne.w	803307e <_vfprintf_r+0x8ae>
 8032cae:	9303      	str	r3, [sp, #12]
 8032cb0:	2301      	movs	r3, #1
 8032cb2:	9304      	str	r3, [sp, #16]
 8032cb4:	e00d      	b.n	8032cd2 <_vfprintf_r+0x502>
 8032cb6:	bf00      	nop
 8032cb8:	7fefffff 	.word	0x7fefffff
 8032cbc:	080375b4 	.word	0x080375b4
 8032cc0:	080375b8 	.word	0x080375b8
 8032cc4:	080375bc 	.word	0x080375bc
 8032cc8:	080375c0 	.word	0x080375c0
 8032ccc:	9003      	str	r0, [sp, #12]
 8032cce:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8032cd2:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8032cd6:	9311      	str	r3, [sp, #68]	; 0x44
 8032cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032cda:	2b00      	cmp	r3, #0
 8032cdc:	f280 81d1 	bge.w	8033082 <_vfprintf_r+0x8b2>
 8032ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8032ce2:	ee08 3a10 	vmov	s16, r3
 8032ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8032ce8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8032cec:	ee08 3a90 	vmov	s17, r3
 8032cf0:	232d      	movs	r3, #45	; 0x2d
 8032cf2:	9318      	str	r3, [sp, #96]	; 0x60
 8032cf4:	9b08      	ldr	r3, [sp, #32]
 8032cf6:	2b41      	cmp	r3, #65	; 0x41
 8032cf8:	f040 81e1 	bne.w	80330be <_vfprintf_r+0x8ee>
 8032cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8032d00:	eef0 0a68 	vmov.f32	s1, s17
 8032d04:	a81c      	add	r0, sp, #112	; 0x70
 8032d06:	f002 f85b 	bl	8034dc0 <frexp>
 8032d0a:	2200      	movs	r2, #0
 8032d0c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8032d10:	ec51 0b10 	vmov	r0, r1, d0
 8032d14:	f7ef fc70 	bl	80225f8 <__aeabi_dmul>
 8032d18:	2200      	movs	r2, #0
 8032d1a:	2300      	movs	r3, #0
 8032d1c:	4606      	mov	r6, r0
 8032d1e:	460f      	mov	r7, r1
 8032d20:	f7ef fed2 	bl	8022ac8 <__aeabi_dcmpeq>
 8032d24:	b108      	cbz	r0, 8032d2a <_vfprintf_r+0x55a>
 8032d26:	2301      	movs	r3, #1
 8032d28:	931c      	str	r3, [sp, #112]	; 0x70
 8032d2a:	4ba7      	ldr	r3, [pc, #668]	; (8032fc8 <_vfprintf_r+0x7f8>)
 8032d2c:	4aa7      	ldr	r2, [pc, #668]	; (8032fcc <_vfprintf_r+0x7fc>)
 8032d2e:	9907      	ldr	r1, [sp, #28]
 8032d30:	2961      	cmp	r1, #97	; 0x61
 8032d32:	bf18      	it	ne
 8032d34:	461a      	movne	r2, r3
 8032d36:	9b04      	ldr	r3, [sp, #16]
 8032d38:	9217      	str	r2, [sp, #92]	; 0x5c
 8032d3a:	3b01      	subs	r3, #1
 8032d3c:	9305      	str	r3, [sp, #20]
 8032d3e:	464d      	mov	r5, r9
 8032d40:	4ba3      	ldr	r3, [pc, #652]	; (8032fd0 <_vfprintf_r+0x800>)
 8032d42:	2200      	movs	r2, #0
 8032d44:	4630      	mov	r0, r6
 8032d46:	4639      	mov	r1, r7
 8032d48:	f7ef fc56 	bl	80225f8 <__aeabi_dmul>
 8032d4c:	460f      	mov	r7, r1
 8032d4e:	4606      	mov	r6, r0
 8032d50:	f7ef ff02 	bl	8022b58 <__aeabi_d2iz>
 8032d54:	9019      	str	r0, [sp, #100]	; 0x64
 8032d56:	f7ef fbe5 	bl	8022524 <__aeabi_i2d>
 8032d5a:	4602      	mov	r2, r0
 8032d5c:	460b      	mov	r3, r1
 8032d5e:	4630      	mov	r0, r6
 8032d60:	4639      	mov	r1, r7
 8032d62:	f7ef fa91 	bl	8022288 <__aeabi_dsub>
 8032d66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8032d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8032d6a:	5c9b      	ldrb	r3, [r3, r2]
 8032d6c:	f805 3b01 	strb.w	r3, [r5], #1
 8032d70:	9b05      	ldr	r3, [sp, #20]
 8032d72:	9309      	str	r3, [sp, #36]	; 0x24
 8032d74:	1c5a      	adds	r2, r3, #1
 8032d76:	4606      	mov	r6, r0
 8032d78:	460f      	mov	r7, r1
 8032d7a:	d007      	beq.n	8032d8c <_vfprintf_r+0x5bc>
 8032d7c:	3b01      	subs	r3, #1
 8032d7e:	9305      	str	r3, [sp, #20]
 8032d80:	2200      	movs	r2, #0
 8032d82:	2300      	movs	r3, #0
 8032d84:	f7ef fea0 	bl	8022ac8 <__aeabi_dcmpeq>
 8032d88:	2800      	cmp	r0, #0
 8032d8a:	d0d9      	beq.n	8032d40 <_vfprintf_r+0x570>
 8032d8c:	4b91      	ldr	r3, [pc, #580]	; (8032fd4 <_vfprintf_r+0x804>)
 8032d8e:	2200      	movs	r2, #0
 8032d90:	4630      	mov	r0, r6
 8032d92:	4639      	mov	r1, r7
 8032d94:	f7ef fec0 	bl	8022b18 <__aeabi_dcmpgt>
 8032d98:	b960      	cbnz	r0, 8032db4 <_vfprintf_r+0x5e4>
 8032d9a:	4b8e      	ldr	r3, [pc, #568]	; (8032fd4 <_vfprintf_r+0x804>)
 8032d9c:	2200      	movs	r2, #0
 8032d9e:	4630      	mov	r0, r6
 8032da0:	4639      	mov	r1, r7
 8032da2:	f7ef fe91 	bl	8022ac8 <__aeabi_dcmpeq>
 8032da6:	2800      	cmp	r0, #0
 8032da8:	f000 8184 	beq.w	80330b4 <_vfprintf_r+0x8e4>
 8032dac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8032dae:	07da      	lsls	r2, r3, #31
 8032db0:	f140 8180 	bpl.w	80330b4 <_vfprintf_r+0x8e4>
 8032db4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8032db6:	9520      	str	r5, [sp, #128]	; 0x80
 8032db8:	7bd9      	ldrb	r1, [r3, #15]
 8032dba:	2030      	movs	r0, #48	; 0x30
 8032dbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8032dbe:	1e53      	subs	r3, r2, #1
 8032dc0:	9320      	str	r3, [sp, #128]	; 0x80
 8032dc2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8032dc6:	428b      	cmp	r3, r1
 8032dc8:	f000 8163 	beq.w	8033092 <_vfprintf_r+0x8c2>
 8032dcc:	2b39      	cmp	r3, #57	; 0x39
 8032dce:	bf0b      	itete	eq
 8032dd0:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8032dd2:	3301      	addne	r3, #1
 8032dd4:	7a9b      	ldrbeq	r3, [r3, #10]
 8032dd6:	b2db      	uxtbne	r3, r3
 8032dd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8032ddc:	eba5 0309 	sub.w	r3, r5, r9
 8032de0:	9305      	str	r3, [sp, #20]
 8032de2:	9b08      	ldr	r3, [sp, #32]
 8032de4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8032de6:	2b47      	cmp	r3, #71	; 0x47
 8032de8:	f040 81b3 	bne.w	8033152 <_vfprintf_r+0x982>
 8032dec:	1ceb      	adds	r3, r5, #3
 8032dee:	db03      	blt.n	8032df8 <_vfprintf_r+0x628>
 8032df0:	9b04      	ldr	r3, [sp, #16]
 8032df2:	42ab      	cmp	r3, r5
 8032df4:	f280 81d3 	bge.w	803319e <_vfprintf_r+0x9ce>
 8032df8:	9b07      	ldr	r3, [sp, #28]
 8032dfa:	3b02      	subs	r3, #2
 8032dfc:	9307      	str	r3, [sp, #28]
 8032dfe:	9907      	ldr	r1, [sp, #28]
 8032e00:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8032e04:	f021 0120 	bic.w	r1, r1, #32
 8032e08:	2941      	cmp	r1, #65	; 0x41
 8032e0a:	bf08      	it	eq
 8032e0c:	320f      	addeq	r2, #15
 8032e0e:	f105 33ff 	add.w	r3, r5, #4294967295
 8032e12:	bf06      	itte	eq
 8032e14:	b2d2      	uxtbeq	r2, r2
 8032e16:	2101      	moveq	r1, #1
 8032e18:	2100      	movne	r1, #0
 8032e1a:	2b00      	cmp	r3, #0
 8032e1c:	931c      	str	r3, [sp, #112]	; 0x70
 8032e1e:	bfb8      	it	lt
 8032e20:	f1c5 0301 	rsblt	r3, r5, #1
 8032e24:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8032e28:	bfb4      	ite	lt
 8032e2a:	222d      	movlt	r2, #45	; 0x2d
 8032e2c:	222b      	movge	r2, #43	; 0x2b
 8032e2e:	2b09      	cmp	r3, #9
 8032e30:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8032e34:	f340 81a6 	ble.w	8033184 <_vfprintf_r+0x9b4>
 8032e38:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8032e3c:	260a      	movs	r6, #10
 8032e3e:	4602      	mov	r2, r0
 8032e40:	fb93 f5f6 	sdiv	r5, r3, r6
 8032e44:	fb06 3115 	mls	r1, r6, r5, r3
 8032e48:	3130      	adds	r1, #48	; 0x30
 8032e4a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8032e4e:	4619      	mov	r1, r3
 8032e50:	2963      	cmp	r1, #99	; 0x63
 8032e52:	f100 30ff 	add.w	r0, r0, #4294967295
 8032e56:	462b      	mov	r3, r5
 8032e58:	dcf1      	bgt.n	8032e3e <_vfprintf_r+0x66e>
 8032e5a:	3330      	adds	r3, #48	; 0x30
 8032e5c:	1e91      	subs	r1, r2, #2
 8032e5e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8032e62:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8032e66:	460b      	mov	r3, r1
 8032e68:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8032e6c:	4283      	cmp	r3, r0
 8032e6e:	f0c0 8184 	bcc.w	803317a <_vfprintf_r+0x9aa>
 8032e72:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8032e76:	1a9b      	subs	r3, r3, r2
 8032e78:	4281      	cmp	r1, r0
 8032e7a:	bf88      	it	hi
 8032e7c:	2300      	movhi	r3, #0
 8032e7e:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8032e82:	441a      	add	r2, r3
 8032e84:	ab1e      	add	r3, sp, #120	; 0x78
 8032e86:	1ad3      	subs	r3, r2, r3
 8032e88:	9a05      	ldr	r2, [sp, #20]
 8032e8a:	9315      	str	r3, [sp, #84]	; 0x54
 8032e8c:	2a01      	cmp	r2, #1
 8032e8e:	4413      	add	r3, r2
 8032e90:	9304      	str	r3, [sp, #16]
 8032e92:	dc02      	bgt.n	8032e9a <_vfprintf_r+0x6ca>
 8032e94:	f018 0f01 	tst.w	r8, #1
 8032e98:	d003      	beq.n	8032ea2 <_vfprintf_r+0x6d2>
 8032e9a:	9b04      	ldr	r3, [sp, #16]
 8032e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8032e9e:	4413      	add	r3, r2
 8032ea0:	9304      	str	r3, [sp, #16]
 8032ea2:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8032ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8032eac:	2300      	movs	r3, #0
 8032eae:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8032eb2:	461d      	mov	r5, r3
 8032eb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8032eb6:	b113      	cbz	r3, 8032ebe <_vfprintf_r+0x6ee>
 8032eb8:	232d      	movs	r3, #45	; 0x2d
 8032eba:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8032ebe:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8032ec2:	2600      	movs	r6, #0
 8032ec4:	9b04      	ldr	r3, [sp, #16]
 8032ec6:	42b3      	cmp	r3, r6
 8032ec8:	bfb8      	it	lt
 8032eca:	4633      	movlt	r3, r6
 8032ecc:	9311      	str	r3, [sp, #68]	; 0x44
 8032ece:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8032ed2:	b113      	cbz	r3, 8032eda <_vfprintf_r+0x70a>
 8032ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8032ed6:	3301      	adds	r3, #1
 8032ed8:	9311      	str	r3, [sp, #68]	; 0x44
 8032eda:	f018 0302 	ands.w	r3, r8, #2
 8032ede:	9317      	str	r3, [sp, #92]	; 0x5c
 8032ee0:	bf1e      	ittt	ne
 8032ee2:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8032ee4:	3302      	addne	r3, #2
 8032ee6:	9311      	strne	r3, [sp, #68]	; 0x44
 8032ee8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8032eec:	9318      	str	r3, [sp, #96]	; 0x60
 8032eee:	d11f      	bne.n	8032f30 <_vfprintf_r+0x760>
 8032ef0:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8032ef4:	1a9f      	subs	r7, r3, r2
 8032ef6:	2f00      	cmp	r7, #0
 8032ef8:	dd1a      	ble.n	8032f30 <_vfprintf_r+0x760>
 8032efa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032efe:	4836      	ldr	r0, [pc, #216]	; (8032fd8 <_vfprintf_r+0x808>)
 8032f00:	6020      	str	r0, [r4, #0]
 8032f02:	2f10      	cmp	r7, #16
 8032f04:	f103 0301 	add.w	r3, r3, #1
 8032f08:	f104 0108 	add.w	r1, r4, #8
 8032f0c:	f300 82ea 	bgt.w	80334e4 <_vfprintf_r+0xd14>
 8032f10:	6067      	str	r7, [r4, #4]
 8032f12:	2b07      	cmp	r3, #7
 8032f14:	4417      	add	r7, r2
 8032f16:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8032f1a:	f340 82f6 	ble.w	803350a <_vfprintf_r+0xd3a>
 8032f1e:	aa22      	add	r2, sp, #136	; 0x88
 8032f20:	4659      	mov	r1, fp
 8032f22:	4650      	mov	r0, sl
 8032f24:	f000 fec8 	bl	8033cb8 <__sprint_r>
 8032f28:	2800      	cmp	r0, #0
 8032f2a:	f040 861f 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8032f2e:	ac25      	add	r4, sp, #148	; 0x94
 8032f30:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8032f34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8032f36:	b16a      	cbz	r2, 8032f54 <_vfprintf_r+0x784>
 8032f38:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8032f3c:	6022      	str	r2, [r4, #0]
 8032f3e:	2201      	movs	r2, #1
 8032f40:	4413      	add	r3, r2
 8032f42:	9324      	str	r3, [sp, #144]	; 0x90
 8032f44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032f46:	6062      	str	r2, [r4, #4]
 8032f48:	4413      	add	r3, r2
 8032f4a:	2b07      	cmp	r3, #7
 8032f4c:	9323      	str	r3, [sp, #140]	; 0x8c
 8032f4e:	f300 82de 	bgt.w	803350e <_vfprintf_r+0xd3e>
 8032f52:	3408      	adds	r4, #8
 8032f54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8032f56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8032f58:	b162      	cbz	r2, 8032f74 <_vfprintf_r+0x7a4>
 8032f5a:	aa1b      	add	r2, sp, #108	; 0x6c
 8032f5c:	6022      	str	r2, [r4, #0]
 8032f5e:	2202      	movs	r2, #2
 8032f60:	4413      	add	r3, r2
 8032f62:	9324      	str	r3, [sp, #144]	; 0x90
 8032f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8032f66:	6062      	str	r2, [r4, #4]
 8032f68:	3301      	adds	r3, #1
 8032f6a:	2b07      	cmp	r3, #7
 8032f6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8032f6e:	f300 82d8 	bgt.w	8033522 <_vfprintf_r+0xd52>
 8032f72:	3408      	adds	r4, #8
 8032f74:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8032f76:	2b80      	cmp	r3, #128	; 0x80
 8032f78:	d11f      	bne.n	8032fba <_vfprintf_r+0x7ea>
 8032f7a:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8032f7e:	1a9f      	subs	r7, r3, r2
 8032f80:	2f00      	cmp	r7, #0
 8032f82:	dd1a      	ble.n	8032fba <_vfprintf_r+0x7ea>
 8032f84:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032f88:	4814      	ldr	r0, [pc, #80]	; (8032fdc <_vfprintf_r+0x80c>)
 8032f8a:	6020      	str	r0, [r4, #0]
 8032f8c:	2f10      	cmp	r7, #16
 8032f8e:	f103 0301 	add.w	r3, r3, #1
 8032f92:	f104 0108 	add.w	r1, r4, #8
 8032f96:	f300 82ce 	bgt.w	8033536 <_vfprintf_r+0xd66>
 8032f9a:	6067      	str	r7, [r4, #4]
 8032f9c:	2b07      	cmp	r3, #7
 8032f9e:	4417      	add	r7, r2
 8032fa0:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8032fa4:	f340 82da 	ble.w	803355c <_vfprintf_r+0xd8c>
 8032fa8:	aa22      	add	r2, sp, #136	; 0x88
 8032faa:	4659      	mov	r1, fp
 8032fac:	4650      	mov	r0, sl
 8032fae:	f000 fe83 	bl	8033cb8 <__sprint_r>
 8032fb2:	2800      	cmp	r0, #0
 8032fb4:	f040 85da 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8032fb8:	ac25      	add	r4, sp, #148	; 0x94
 8032fba:	9b04      	ldr	r3, [sp, #16]
 8032fbc:	1af6      	subs	r6, r6, r3
 8032fbe:	2e00      	cmp	r6, #0
 8032fc0:	dd28      	ble.n	8033014 <_vfprintf_r+0x844>
 8032fc2:	4f06      	ldr	r7, [pc, #24]	; (8032fdc <_vfprintf_r+0x80c>)
 8032fc4:	e00c      	b.n	8032fe0 <_vfprintf_r+0x810>
 8032fc6:	bf00      	nop
 8032fc8:	080375d5 	.word	0x080375d5
 8032fcc:	080375c4 	.word	0x080375c4
 8032fd0:	40300000 	.word	0x40300000
 8032fd4:	3fe00000 	.word	0x3fe00000
 8032fd8:	080375e8 	.word	0x080375e8
 8032fdc:	080375f8 	.word	0x080375f8
 8032fe0:	6027      	str	r7, [r4, #0]
 8032fe2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8032fe6:	2e10      	cmp	r6, #16
 8032fe8:	f103 0301 	add.w	r3, r3, #1
 8032fec:	f104 0108 	add.w	r1, r4, #8
 8032ff0:	f300 82b6 	bgt.w	8033560 <_vfprintf_r+0xd90>
 8032ff4:	6066      	str	r6, [r4, #4]
 8032ff6:	2b07      	cmp	r3, #7
 8032ff8:	4416      	add	r6, r2
 8032ffa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8032ffe:	f340 82c2 	ble.w	8033586 <_vfprintf_r+0xdb6>
 8033002:	aa22      	add	r2, sp, #136	; 0x88
 8033004:	4659      	mov	r1, fp
 8033006:	4650      	mov	r0, sl
 8033008:	f000 fe56 	bl	8033cb8 <__sprint_r>
 803300c:	2800      	cmp	r0, #0
 803300e:	f040 85ad 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033012:	ac25      	add	r4, sp, #148	; 0x94
 8033014:	f418 7f80 	tst.w	r8, #256	; 0x100
 8033018:	9e24      	ldr	r6, [sp, #144]	; 0x90
 803301a:	f040 82bb 	bne.w	8033594 <_vfprintf_r+0xdc4>
 803301e:	9b04      	ldr	r3, [sp, #16]
 8033020:	f8c4 9000 	str.w	r9, [r4]
 8033024:	441e      	add	r6, r3
 8033026:	6063      	str	r3, [r4, #4]
 8033028:	9624      	str	r6, [sp, #144]	; 0x90
 803302a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803302c:	3301      	adds	r3, #1
 803302e:	2b07      	cmp	r3, #7
 8033030:	9323      	str	r3, [sp, #140]	; 0x8c
 8033032:	f300 82f4 	bgt.w	803361e <_vfprintf_r+0xe4e>
 8033036:	3408      	adds	r4, #8
 8033038:	f018 0f04 	tst.w	r8, #4
 803303c:	f040 8578 	bne.w	8033b30 <_vfprintf_r+0x1360>
 8033040:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8033044:	9911      	ldr	r1, [sp, #68]	; 0x44
 8033046:	428a      	cmp	r2, r1
 8033048:	bfac      	ite	ge
 803304a:	189b      	addge	r3, r3, r2
 803304c:	185b      	addlt	r3, r3, r1
 803304e:	930f      	str	r3, [sp, #60]	; 0x3c
 8033050:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033052:	b13b      	cbz	r3, 8033064 <_vfprintf_r+0x894>
 8033054:	aa22      	add	r2, sp, #136	; 0x88
 8033056:	4659      	mov	r1, fp
 8033058:	4650      	mov	r0, sl
 803305a:	f000 fe2d 	bl	8033cb8 <__sprint_r>
 803305e:	2800      	cmp	r0, #0
 8033060:	f040 8584 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033064:	2300      	movs	r3, #0
 8033066:	9323      	str	r3, [sp, #140]	; 0x8c
 8033068:	9b03      	ldr	r3, [sp, #12]
 803306a:	2b00      	cmp	r3, #0
 803306c:	f040 859a 	bne.w	8033ba4 <_vfprintf_r+0x13d4>
 8033070:	ac25      	add	r4, sp, #148	; 0x94
 8033072:	e0ee      	b.n	8033252 <_vfprintf_r+0xa82>
 8033074:	9003      	str	r0, [sp, #12]
 8033076:	e62c      	b.n	8032cd2 <_vfprintf_r+0x502>
 8033078:	9003      	str	r0, [sp, #12]
 803307a:	2306      	movs	r3, #6
 803307c:	e619      	b.n	8032cb2 <_vfprintf_r+0x4e2>
 803307e:	9003      	str	r0, [sp, #12]
 8033080:	e627      	b.n	8032cd2 <_vfprintf_r+0x502>
 8033082:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8033086:	2300      	movs	r3, #0
 8033088:	eeb0 8a47 	vmov.f32	s16, s14
 803308c:	eef0 8a67 	vmov.f32	s17, s15
 8033090:	e62f      	b.n	8032cf2 <_vfprintf_r+0x522>
 8033092:	f802 0c01 	strb.w	r0, [r2, #-1]
 8033096:	e691      	b.n	8032dbc <_vfprintf_r+0x5ec>
 8033098:	f803 0b01 	strb.w	r0, [r3], #1
 803309c:	1aca      	subs	r2, r1, r3
 803309e:	2a00      	cmp	r2, #0
 80330a0:	dafa      	bge.n	8033098 <_vfprintf_r+0x8c8>
 80330a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80330a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80330a6:	3201      	adds	r2, #1
 80330a8:	f103 0301 	add.w	r3, r3, #1
 80330ac:	bfb8      	it	lt
 80330ae:	2300      	movlt	r3, #0
 80330b0:	441d      	add	r5, r3
 80330b2:	e693      	b.n	8032ddc <_vfprintf_r+0x60c>
 80330b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80330b6:	462b      	mov	r3, r5
 80330b8:	18a9      	adds	r1, r5, r2
 80330ba:	2030      	movs	r0, #48	; 0x30
 80330bc:	e7ee      	b.n	803309c <_vfprintf_r+0x8cc>
 80330be:	9b08      	ldr	r3, [sp, #32]
 80330c0:	2b46      	cmp	r3, #70	; 0x46
 80330c2:	d005      	beq.n	80330d0 <_vfprintf_r+0x900>
 80330c4:	2b45      	cmp	r3, #69	; 0x45
 80330c6:	d11d      	bne.n	8033104 <_vfprintf_r+0x934>
 80330c8:	9b04      	ldr	r3, [sp, #16]
 80330ca:	1c5d      	adds	r5, r3, #1
 80330cc:	2102      	movs	r1, #2
 80330ce:	e001      	b.n	80330d4 <_vfprintf_r+0x904>
 80330d0:	9d04      	ldr	r5, [sp, #16]
 80330d2:	2103      	movs	r1, #3
 80330d4:	ab20      	add	r3, sp, #128	; 0x80
 80330d6:	9301      	str	r3, [sp, #4]
 80330d8:	ab1d      	add	r3, sp, #116	; 0x74
 80330da:	9300      	str	r3, [sp, #0]
 80330dc:	462a      	mov	r2, r5
 80330de:	ab1c      	add	r3, sp, #112	; 0x70
 80330e0:	4650      	mov	r0, sl
 80330e2:	eeb0 0a48 	vmov.f32	s0, s16
 80330e6:	eef0 0a68 	vmov.f32	s1, s17
 80330ea:	f001 ff69 	bl	8034fc0 <_dtoa_r>
 80330ee:	9b08      	ldr	r3, [sp, #32]
 80330f0:	2b47      	cmp	r3, #71	; 0x47
 80330f2:	4681      	mov	r9, r0
 80330f4:	d108      	bne.n	8033108 <_vfprintf_r+0x938>
 80330f6:	f018 0f01 	tst.w	r8, #1
 80330fa:	d105      	bne.n	8033108 <_vfprintf_r+0x938>
 80330fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80330fe:	eba3 0309 	sub.w	r3, r3, r9
 8033102:	e66d      	b.n	8032de0 <_vfprintf_r+0x610>
 8033104:	9d04      	ldr	r5, [sp, #16]
 8033106:	e7e1      	b.n	80330cc <_vfprintf_r+0x8fc>
 8033108:	9b08      	ldr	r3, [sp, #32]
 803310a:	2b46      	cmp	r3, #70	; 0x46
 803310c:	eb09 0605 	add.w	r6, r9, r5
 8033110:	d10f      	bne.n	8033132 <_vfprintf_r+0x962>
 8033112:	f899 3000 	ldrb.w	r3, [r9]
 8033116:	2b30      	cmp	r3, #48	; 0x30
 8033118:	d109      	bne.n	803312e <_vfprintf_r+0x95e>
 803311a:	ec51 0b18 	vmov	r0, r1, d8
 803311e:	2200      	movs	r2, #0
 8033120:	2300      	movs	r3, #0
 8033122:	f7ef fcd1 	bl	8022ac8 <__aeabi_dcmpeq>
 8033126:	b910      	cbnz	r0, 803312e <_vfprintf_r+0x95e>
 8033128:	f1c5 0501 	rsb	r5, r5, #1
 803312c:	951c      	str	r5, [sp, #112]	; 0x70
 803312e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8033130:	441e      	add	r6, r3
 8033132:	ec51 0b18 	vmov	r0, r1, d8
 8033136:	2200      	movs	r2, #0
 8033138:	2300      	movs	r3, #0
 803313a:	f7ef fcc5 	bl	8022ac8 <__aeabi_dcmpeq>
 803313e:	b100      	cbz	r0, 8033142 <_vfprintf_r+0x972>
 8033140:	9620      	str	r6, [sp, #128]	; 0x80
 8033142:	2230      	movs	r2, #48	; 0x30
 8033144:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8033146:	429e      	cmp	r6, r3
 8033148:	d9d8      	bls.n	80330fc <_vfprintf_r+0x92c>
 803314a:	1c59      	adds	r1, r3, #1
 803314c:	9120      	str	r1, [sp, #128]	; 0x80
 803314e:	701a      	strb	r2, [r3, #0]
 8033150:	e7f8      	b.n	8033144 <_vfprintf_r+0x974>
 8033152:	9b08      	ldr	r3, [sp, #32]
 8033154:	2b46      	cmp	r3, #70	; 0x46
 8033156:	f47f ae52 	bne.w	8032dfe <_vfprintf_r+0x62e>
 803315a:	9a04      	ldr	r2, [sp, #16]
 803315c:	f008 0301 	and.w	r3, r8, #1
 8033160:	2d00      	cmp	r5, #0
 8033162:	ea43 0302 	orr.w	r3, r3, r2
 8033166:	dd29      	ble.n	80331bc <_vfprintf_r+0x9ec>
 8033168:	2b00      	cmp	r3, #0
 803316a:	d034      	beq.n	80331d6 <_vfprintf_r+0xa06>
 803316c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803316e:	18eb      	adds	r3, r5, r3
 8033170:	441a      	add	r2, r3
 8033172:	9204      	str	r2, [sp, #16]
 8033174:	2366      	movs	r3, #102	; 0x66
 8033176:	9307      	str	r3, [sp, #28]
 8033178:	e033      	b.n	80331e2 <_vfprintf_r+0xa12>
 803317a:	f813 6b01 	ldrb.w	r6, [r3], #1
 803317e:	f805 6f01 	strb.w	r6, [r5, #1]!
 8033182:	e673      	b.n	8032e6c <_vfprintf_r+0x69c>
 8033184:	b941      	cbnz	r1, 8033198 <_vfprintf_r+0x9c8>
 8033186:	2230      	movs	r2, #48	; 0x30
 8033188:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 803318c:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8033190:	3330      	adds	r3, #48	; 0x30
 8033192:	f802 3b01 	strb.w	r3, [r2], #1
 8033196:	e675      	b.n	8032e84 <_vfprintf_r+0x6b4>
 8033198:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 803319c:	e7f8      	b.n	8033190 <_vfprintf_r+0x9c0>
 803319e:	9b05      	ldr	r3, [sp, #20]
 80331a0:	42ab      	cmp	r3, r5
 80331a2:	dd10      	ble.n	80331c6 <_vfprintf_r+0x9f6>
 80331a4:	9b05      	ldr	r3, [sp, #20]
 80331a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80331a8:	2d00      	cmp	r5, #0
 80331aa:	4413      	add	r3, r2
 80331ac:	9304      	str	r3, [sp, #16]
 80331ae:	dc10      	bgt.n	80331d2 <_vfprintf_r+0xa02>
 80331b0:	9a04      	ldr	r2, [sp, #16]
 80331b2:	f1c5 0301 	rsb	r3, r5, #1
 80331b6:	441a      	add	r2, r3
 80331b8:	9204      	str	r2, [sp, #16]
 80331ba:	e00a      	b.n	80331d2 <_vfprintf_r+0xa02>
 80331bc:	b16b      	cbz	r3, 80331da <_vfprintf_r+0xa0a>
 80331be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80331c0:	9a04      	ldr	r2, [sp, #16]
 80331c2:	3301      	adds	r3, #1
 80331c4:	e7d4      	b.n	8033170 <_vfprintf_r+0x9a0>
 80331c6:	f018 0f01 	tst.w	r8, #1
 80331ca:	d021      	beq.n	8033210 <_vfprintf_r+0xa40>
 80331cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80331ce:	18eb      	adds	r3, r5, r3
 80331d0:	9304      	str	r3, [sp, #16]
 80331d2:	2367      	movs	r3, #103	; 0x67
 80331d4:	e7cf      	b.n	8033176 <_vfprintf_r+0x9a6>
 80331d6:	9504      	str	r5, [sp, #16]
 80331d8:	e7cc      	b.n	8033174 <_vfprintf_r+0x9a4>
 80331da:	2366      	movs	r3, #102	; 0x66
 80331dc:	9307      	str	r3, [sp, #28]
 80331de:	2301      	movs	r3, #1
 80331e0:	9304      	str	r3, [sp, #16]
 80331e2:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80331e6:	9309      	str	r3, [sp, #36]	; 0x24
 80331e8:	d025      	beq.n	8033236 <_vfprintf_r+0xa66>
 80331ea:	2300      	movs	r3, #0
 80331ec:	2d00      	cmp	r5, #0
 80331ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80331f2:	f77f ae5f 	ble.w	8032eb4 <_vfprintf_r+0x6e4>
 80331f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80331f8:	781b      	ldrb	r3, [r3, #0]
 80331fa:	2bff      	cmp	r3, #255	; 0xff
 80331fc:	d10a      	bne.n	8033214 <_vfprintf_r+0xa44>
 80331fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8033202:	9912      	ldr	r1, [sp, #72]	; 0x48
 8033204:	4413      	add	r3, r2
 8033206:	9a04      	ldr	r2, [sp, #16]
 8033208:	fb01 2303 	mla	r3, r1, r3, r2
 803320c:	9304      	str	r3, [sp, #16]
 803320e:	e651      	b.n	8032eb4 <_vfprintf_r+0x6e4>
 8033210:	9504      	str	r5, [sp, #16]
 8033212:	e7de      	b.n	80331d2 <_vfprintf_r+0xa02>
 8033214:	42ab      	cmp	r3, r5
 8033216:	daf2      	bge.n	80331fe <_vfprintf_r+0xa2e>
 8033218:	1aed      	subs	r5, r5, r3
 803321a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803321c:	785b      	ldrb	r3, [r3, #1]
 803321e:	b133      	cbz	r3, 803322e <_vfprintf_r+0xa5e>
 8033220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033222:	3301      	adds	r3, #1
 8033224:	9309      	str	r3, [sp, #36]	; 0x24
 8033226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033228:	3301      	adds	r3, #1
 803322a:	930a      	str	r3, [sp, #40]	; 0x28
 803322c:	e7e3      	b.n	80331f6 <_vfprintf_r+0xa26>
 803322e:	9b08      	ldr	r3, [sp, #32]
 8033230:	3301      	adds	r3, #1
 8033232:	9308      	str	r3, [sp, #32]
 8033234:	e7df      	b.n	80331f6 <_vfprintf_r+0xa26>
 8033236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033238:	9308      	str	r3, [sp, #32]
 803323a:	e63b      	b.n	8032eb4 <_vfprintf_r+0x6e4>
 803323c:	1d2b      	adds	r3, r5, #4
 803323e:	f018 0f20 	tst.w	r8, #32
 8033242:	9306      	str	r3, [sp, #24]
 8033244:	d00a      	beq.n	803325c <_vfprintf_r+0xa8c>
 8033246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8033248:	682b      	ldr	r3, [r5, #0]
 803324a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 803324c:	17d2      	asrs	r2, r2, #31
 803324e:	e9c3 1200 	strd	r1, r2, [r3]
 8033252:	9d06      	ldr	r5, [sp, #24]
 8033254:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8033258:	f7ff bb40 	b.w	80328dc <_vfprintf_r+0x10c>
 803325c:	f018 0f10 	tst.w	r8, #16
 8033260:	d003      	beq.n	803326a <_vfprintf_r+0xa9a>
 8033262:	682b      	ldr	r3, [r5, #0]
 8033264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8033266:	601a      	str	r2, [r3, #0]
 8033268:	e7f3      	b.n	8033252 <_vfprintf_r+0xa82>
 803326a:	f018 0f40 	tst.w	r8, #64	; 0x40
 803326e:	d003      	beq.n	8033278 <_vfprintf_r+0xaa8>
 8033270:	682b      	ldr	r3, [r5, #0]
 8033272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8033274:	801a      	strh	r2, [r3, #0]
 8033276:	e7ec      	b.n	8033252 <_vfprintf_r+0xa82>
 8033278:	f418 7f00 	tst.w	r8, #512	; 0x200
 803327c:	d0f1      	beq.n	8033262 <_vfprintf_r+0xa92>
 803327e:	682b      	ldr	r3, [r5, #0]
 8033280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8033282:	701a      	strb	r2, [r3, #0]
 8033284:	e7e5      	b.n	8033252 <_vfprintf_r+0xa82>
 8033286:	f048 0810 	orr.w	r8, r8, #16
 803328a:	f018 0320 	ands.w	r3, r8, #32
 803328e:	d01f      	beq.n	80332d0 <_vfprintf_r+0xb00>
 8033290:	3507      	adds	r5, #7
 8033292:	f025 0307 	bic.w	r3, r5, #7
 8033296:	461a      	mov	r2, r3
 8033298:	685e      	ldr	r6, [r3, #4]
 803329a:	f852 5b08 	ldr.w	r5, [r2], #8
 803329e:	9206      	str	r2, [sp, #24]
 80332a0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80332a4:	2300      	movs	r3, #0
 80332a6:	2200      	movs	r2, #0
 80332a8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80332ac:	9a04      	ldr	r2, [sp, #16]
 80332ae:	3201      	adds	r2, #1
 80332b0:	f000 848d 	beq.w	8033bce <_vfprintf_r+0x13fe>
 80332b4:	ea55 0206 	orrs.w	r2, r5, r6
 80332b8:	f028 0780 	bic.w	r7, r8, #128	; 0x80
 80332bc:	f040 848c 	bne.w	8033bd8 <_vfprintf_r+0x1408>
 80332c0:	9a04      	ldr	r2, [sp, #16]
 80332c2:	2a00      	cmp	r2, #0
 80332c4:	f000 80f4 	beq.w	80334b0 <_vfprintf_r+0xce0>
 80332c8:	2b01      	cmp	r3, #1
 80332ca:	f040 8488 	bne.w	8033bde <_vfprintf_r+0x140e>
 80332ce:	e09e      	b.n	803340e <_vfprintf_r+0xc3e>
 80332d0:	462a      	mov	r2, r5
 80332d2:	f018 0610 	ands.w	r6, r8, #16
 80332d6:	f852 5b04 	ldr.w	r5, [r2], #4
 80332da:	9206      	str	r2, [sp, #24]
 80332dc:	d001      	beq.n	80332e2 <_vfprintf_r+0xb12>
 80332de:	461e      	mov	r6, r3
 80332e0:	e7de      	b.n	80332a0 <_vfprintf_r+0xad0>
 80332e2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 80332e6:	d001      	beq.n	80332ec <_vfprintf_r+0xb1c>
 80332e8:	b2ad      	uxth	r5, r5
 80332ea:	e7d9      	b.n	80332a0 <_vfprintf_r+0xad0>
 80332ec:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 80332f0:	d0d6      	beq.n	80332a0 <_vfprintf_r+0xad0>
 80332f2:	b2ed      	uxtb	r5, r5
 80332f4:	e7f3      	b.n	80332de <_vfprintf_r+0xb0e>
 80332f6:	462b      	mov	r3, r5
 80332f8:	2278      	movs	r2, #120	; 0x78
 80332fa:	f853 5b04 	ldr.w	r5, [r3], #4
 80332fe:	9306      	str	r3, [sp, #24]
 8033300:	f647 0330 	movw	r3, #30768	; 0x7830
 8033304:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8033308:	4ba0      	ldr	r3, [pc, #640]	; (803358c <_vfprintf_r+0xdbc>)
 803330a:	9316      	str	r3, [sp, #88]	; 0x58
 803330c:	2600      	movs	r6, #0
 803330e:	f048 0802 	orr.w	r8, r8, #2
 8033312:	2302      	movs	r3, #2
 8033314:	9207      	str	r2, [sp, #28]
 8033316:	e7c6      	b.n	80332a6 <_vfprintf_r+0xad6>
 8033318:	462b      	mov	r3, r5
 803331a:	2500      	movs	r5, #0
 803331c:	f853 9b04 	ldr.w	r9, [r3], #4
 8033320:	9306      	str	r3, [sp, #24]
 8033322:	9b04      	ldr	r3, [sp, #16]
 8033324:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8033328:	1c5e      	adds	r6, r3, #1
 803332a:	d010      	beq.n	803334e <_vfprintf_r+0xb7e>
 803332c:	461a      	mov	r2, r3
 803332e:	4629      	mov	r1, r5
 8033330:	4648      	mov	r0, r9
 8033332:	f7ee ff55 	bl	80221e0 <memchr>
 8033336:	9003      	str	r0, [sp, #12]
 8033338:	2800      	cmp	r0, #0
 803333a:	f000 80d0 	beq.w	80334de <_vfprintf_r+0xd0e>
 803333e:	eba0 0309 	sub.w	r3, r0, r9
 8033342:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8033346:	e9cd 5508 	strd	r5, r5, [sp, #32]
 803334a:	462e      	mov	r6, r5
 803334c:	e5ba      	b.n	8032ec4 <_vfprintf_r+0x6f4>
 803334e:	4648      	mov	r0, r9
 8033350:	f7ee ff3e 	bl	80221d0 <strlen>
 8033354:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8033358:	e454      	b.n	8032c04 <_vfprintf_r+0x434>
 803335a:	f048 0810 	orr.w	r8, r8, #16
 803335e:	f018 0320 	ands.w	r3, r8, #32
 8033362:	d009      	beq.n	8033378 <_vfprintf_r+0xba8>
 8033364:	3507      	adds	r5, #7
 8033366:	f025 0307 	bic.w	r3, r5, #7
 803336a:	461a      	mov	r2, r3
 803336c:	685e      	ldr	r6, [r3, #4]
 803336e:	f852 5b08 	ldr.w	r5, [r2], #8
 8033372:	9206      	str	r2, [sp, #24]
 8033374:	2301      	movs	r3, #1
 8033376:	e796      	b.n	80332a6 <_vfprintf_r+0xad6>
 8033378:	462a      	mov	r2, r5
 803337a:	f018 0610 	ands.w	r6, r8, #16
 803337e:	f852 5b04 	ldr.w	r5, [r2], #4
 8033382:	9206      	str	r2, [sp, #24]
 8033384:	d001      	beq.n	803338a <_vfprintf_r+0xbba>
 8033386:	461e      	mov	r6, r3
 8033388:	e7f4      	b.n	8033374 <_vfprintf_r+0xba4>
 803338a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 803338e:	d001      	beq.n	8033394 <_vfprintf_r+0xbc4>
 8033390:	b2ad      	uxth	r5, r5
 8033392:	e7ef      	b.n	8033374 <_vfprintf_r+0xba4>
 8033394:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8033398:	d0ec      	beq.n	8033374 <_vfprintf_r+0xba4>
 803339a:	b2ed      	uxtb	r5, r5
 803339c:	e7f3      	b.n	8033386 <_vfprintf_r+0xbb6>
 803339e:	4b7c      	ldr	r3, [pc, #496]	; (8033590 <_vfprintf_r+0xdc0>)
 80333a0:	9316      	str	r3, [sp, #88]	; 0x58
 80333a2:	f018 0320 	ands.w	r3, r8, #32
 80333a6:	d01b      	beq.n	80333e0 <_vfprintf_r+0xc10>
 80333a8:	3507      	adds	r5, #7
 80333aa:	f025 0307 	bic.w	r3, r5, #7
 80333ae:	461a      	mov	r2, r3
 80333b0:	685e      	ldr	r6, [r3, #4]
 80333b2:	f852 5b08 	ldr.w	r5, [r2], #8
 80333b6:	9206      	str	r2, [sp, #24]
 80333b8:	f018 0f01 	tst.w	r8, #1
 80333bc:	d00a      	beq.n	80333d4 <_vfprintf_r+0xc04>
 80333be:	ea55 0306 	orrs.w	r3, r5, r6
 80333c2:	d007      	beq.n	80333d4 <_vfprintf_r+0xc04>
 80333c4:	2330      	movs	r3, #48	; 0x30
 80333c6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80333ca:	9b07      	ldr	r3, [sp, #28]
 80333cc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80333d0:	f048 0802 	orr.w	r8, r8, #2
 80333d4:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80333d8:	2302      	movs	r3, #2
 80333da:	e764      	b.n	80332a6 <_vfprintf_r+0xad6>
 80333dc:	4b6b      	ldr	r3, [pc, #428]	; (803358c <_vfprintf_r+0xdbc>)
 80333de:	e7df      	b.n	80333a0 <_vfprintf_r+0xbd0>
 80333e0:	462a      	mov	r2, r5
 80333e2:	f018 0610 	ands.w	r6, r8, #16
 80333e6:	f852 5b04 	ldr.w	r5, [r2], #4
 80333ea:	9206      	str	r2, [sp, #24]
 80333ec:	d001      	beq.n	80333f2 <_vfprintf_r+0xc22>
 80333ee:	461e      	mov	r6, r3
 80333f0:	e7e2      	b.n	80333b8 <_vfprintf_r+0xbe8>
 80333f2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 80333f6:	d001      	beq.n	80333fc <_vfprintf_r+0xc2c>
 80333f8:	b2ad      	uxth	r5, r5
 80333fa:	e7dd      	b.n	80333b8 <_vfprintf_r+0xbe8>
 80333fc:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8033400:	d0da      	beq.n	80333b8 <_vfprintf_r+0xbe8>
 8033402:	b2ed      	uxtb	r5, r5
 8033404:	e7f3      	b.n	80333ee <_vfprintf_r+0xc1e>
 8033406:	2d0a      	cmp	r5, #10
 8033408:	f176 0300 	sbcs.w	r3, r6, #0
 803340c:	d205      	bcs.n	803341a <_vfprintf_r+0xc4a>
 803340e:	3530      	adds	r5, #48	; 0x30
 8033410:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8033414:	f20d 1937 	addw	r9, sp, #311	; 0x137
 8033418:	e3fc      	b.n	8033c14 <_vfprintf_r+0x1444>
 803341a:	2300      	movs	r3, #0
 803341c:	9305      	str	r3, [sp, #20]
 803341e:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 8033422:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 8033426:	9303      	str	r3, [sp, #12]
 8033428:	220a      	movs	r2, #10
 803342a:	2300      	movs	r3, #0
 803342c:	4628      	mov	r0, r5
 803342e:	4631      	mov	r1, r6
 8033430:	f7ef fbba 	bl	8022ba8 <__aeabi_uldivmod>
 8033434:	9b05      	ldr	r3, [sp, #20]
 8033436:	3301      	adds	r3, #1
 8033438:	9305      	str	r3, [sp, #20]
 803343a:	9b03      	ldr	r3, [sp, #12]
 803343c:	3230      	adds	r2, #48	; 0x30
 803343e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8033442:	f108 39ff 	add.w	r9, r8, #4294967295
 8033446:	f808 2c01 	strb.w	r2, [r8, #-1]
 803344a:	b1d3      	cbz	r3, 8033482 <_vfprintf_r+0xcb2>
 803344c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803344e:	9a05      	ldr	r2, [sp, #20]
 8033450:	781b      	ldrb	r3, [r3, #0]
 8033452:	429a      	cmp	r2, r3
 8033454:	d115      	bne.n	8033482 <_vfprintf_r+0xcb2>
 8033456:	2aff      	cmp	r2, #255	; 0xff
 8033458:	d013      	beq.n	8033482 <_vfprintf_r+0xcb2>
 803345a:	2d0a      	cmp	r5, #10
 803345c:	f176 0300 	sbcs.w	r3, r6, #0
 8033460:	d30f      	bcc.n	8033482 <_vfprintf_r+0xcb2>
 8033462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8033464:	9914      	ldr	r1, [sp, #80]	; 0x50
 8033466:	eba9 0903 	sub.w	r9, r9, r3
 803346a:	461a      	mov	r2, r3
 803346c:	4648      	mov	r0, r9
 803346e:	f001 fc5a 	bl	8034d26 <strncpy>
 8033472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033474:	785b      	ldrb	r3, [r3, #1]
 8033476:	b11b      	cbz	r3, 8033480 <_vfprintf_r+0xcb0>
 8033478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803347a:	3301      	adds	r3, #1
 803347c:	930a      	str	r3, [sp, #40]	; 0x28
 803347e:	2300      	movs	r3, #0
 8033480:	9305      	str	r3, [sp, #20]
 8033482:	2d0a      	cmp	r5, #10
 8033484:	f176 0600 	sbcs.w	r6, r6, #0
 8033488:	f0c0 83c4 	bcc.w	8033c14 <_vfprintf_r+0x1444>
 803348c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8033490:	46c8      	mov	r8, r9
 8033492:	e7c9      	b.n	8033428 <_vfprintf_r+0xc58>
 8033494:	f005 030f 	and.w	r3, r5, #15
 8033498:	9a16      	ldr	r2, [sp, #88]	; 0x58
 803349a:	092d      	lsrs	r5, r5, #4
 803349c:	5cd3      	ldrb	r3, [r2, r3]
 803349e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80334a2:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 80334a6:	0936      	lsrs	r6, r6, #4
 80334a8:	ea55 0306 	orrs.w	r3, r5, r6
 80334ac:	d1f2      	bne.n	8033494 <_vfprintf_r+0xcc4>
 80334ae:	e3b1      	b.n	8033c14 <_vfprintf_r+0x1444>
 80334b0:	b933      	cbnz	r3, 80334c0 <_vfprintf_r+0xcf0>
 80334b2:	f018 0f01 	tst.w	r8, #1
 80334b6:	d003      	beq.n	80334c0 <_vfprintf_r+0xcf0>
 80334b8:	2330      	movs	r3, #48	; 0x30
 80334ba:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80334be:	e7a9      	b.n	8033414 <_vfprintf_r+0xc44>
 80334c0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 80334c4:	e3a6      	b.n	8033c14 <_vfprintf_r+0x1444>
 80334c6:	9b07      	ldr	r3, [sp, #28]
 80334c8:	2b00      	cmp	r3, #0
 80334ca:	f000 8371 	beq.w	8033bb0 <_vfprintf_r+0x13e0>
 80334ce:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80334d2:	2300      	movs	r3, #0
 80334d4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80334d8:	9506      	str	r5, [sp, #24]
 80334da:	f7ff bb22 	b.w	8032b22 <_vfprintf_r+0x352>
 80334de:	9e03      	ldr	r6, [sp, #12]
 80334e0:	f7ff bb91 	b.w	8032c06 <_vfprintf_r+0x436>
 80334e4:	2010      	movs	r0, #16
 80334e6:	4402      	add	r2, r0
 80334e8:	2b07      	cmp	r3, #7
 80334ea:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80334ee:	6060      	str	r0, [r4, #4]
 80334f0:	dd08      	ble.n	8033504 <_vfprintf_r+0xd34>
 80334f2:	aa22      	add	r2, sp, #136	; 0x88
 80334f4:	4659      	mov	r1, fp
 80334f6:	4650      	mov	r0, sl
 80334f8:	f000 fbde 	bl	8033cb8 <__sprint_r>
 80334fc:	2800      	cmp	r0, #0
 80334fe:	f040 8335 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033502:	a925      	add	r1, sp, #148	; 0x94
 8033504:	3f10      	subs	r7, #16
 8033506:	460c      	mov	r4, r1
 8033508:	e4f7      	b.n	8032efa <_vfprintf_r+0x72a>
 803350a:	460c      	mov	r4, r1
 803350c:	e510      	b.n	8032f30 <_vfprintf_r+0x760>
 803350e:	aa22      	add	r2, sp, #136	; 0x88
 8033510:	4659      	mov	r1, fp
 8033512:	4650      	mov	r0, sl
 8033514:	f000 fbd0 	bl	8033cb8 <__sprint_r>
 8033518:	2800      	cmp	r0, #0
 803351a:	f040 8327 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803351e:	ac25      	add	r4, sp, #148	; 0x94
 8033520:	e518      	b.n	8032f54 <_vfprintf_r+0x784>
 8033522:	aa22      	add	r2, sp, #136	; 0x88
 8033524:	4659      	mov	r1, fp
 8033526:	4650      	mov	r0, sl
 8033528:	f000 fbc6 	bl	8033cb8 <__sprint_r>
 803352c:	2800      	cmp	r0, #0
 803352e:	f040 831d 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033532:	ac25      	add	r4, sp, #148	; 0x94
 8033534:	e51e      	b.n	8032f74 <_vfprintf_r+0x7a4>
 8033536:	2010      	movs	r0, #16
 8033538:	4402      	add	r2, r0
 803353a:	2b07      	cmp	r3, #7
 803353c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033540:	6060      	str	r0, [r4, #4]
 8033542:	dd08      	ble.n	8033556 <_vfprintf_r+0xd86>
 8033544:	aa22      	add	r2, sp, #136	; 0x88
 8033546:	4659      	mov	r1, fp
 8033548:	4650      	mov	r0, sl
 803354a:	f000 fbb5 	bl	8033cb8 <__sprint_r>
 803354e:	2800      	cmp	r0, #0
 8033550:	f040 830c 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033554:	a925      	add	r1, sp, #148	; 0x94
 8033556:	3f10      	subs	r7, #16
 8033558:	460c      	mov	r4, r1
 803355a:	e513      	b.n	8032f84 <_vfprintf_r+0x7b4>
 803355c:	460c      	mov	r4, r1
 803355e:	e52c      	b.n	8032fba <_vfprintf_r+0x7ea>
 8033560:	2010      	movs	r0, #16
 8033562:	4402      	add	r2, r0
 8033564:	2b07      	cmp	r3, #7
 8033566:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 803356a:	6060      	str	r0, [r4, #4]
 803356c:	dd08      	ble.n	8033580 <_vfprintf_r+0xdb0>
 803356e:	aa22      	add	r2, sp, #136	; 0x88
 8033570:	4659      	mov	r1, fp
 8033572:	4650      	mov	r0, sl
 8033574:	f000 fba0 	bl	8033cb8 <__sprint_r>
 8033578:	2800      	cmp	r0, #0
 803357a:	f040 82f7 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803357e:	a925      	add	r1, sp, #148	; 0x94
 8033580:	3e10      	subs	r6, #16
 8033582:	460c      	mov	r4, r1
 8033584:	e52c      	b.n	8032fe0 <_vfprintf_r+0x810>
 8033586:	460c      	mov	r4, r1
 8033588:	e544      	b.n	8033014 <_vfprintf_r+0x844>
 803358a:	bf00      	nop
 803358c:	080375c4 	.word	0x080375c4
 8033590:	080375d5 	.word	0x080375d5
 8033594:	9b07      	ldr	r3, [sp, #28]
 8033596:	2b65      	cmp	r3, #101	; 0x65
 8033598:	f340 8230 	ble.w	80339fc <_vfprintf_r+0x122c>
 803359c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80335a0:	2200      	movs	r2, #0
 80335a2:	2300      	movs	r3, #0
 80335a4:	f7ef fa90 	bl	8022ac8 <__aeabi_dcmpeq>
 80335a8:	2800      	cmp	r0, #0
 80335aa:	d068      	beq.n	803367e <_vfprintf_r+0xeae>
 80335ac:	4b6d      	ldr	r3, [pc, #436]	; (8033764 <_vfprintf_r+0xf94>)
 80335ae:	6023      	str	r3, [r4, #0]
 80335b0:	2301      	movs	r3, #1
 80335b2:	441e      	add	r6, r3
 80335b4:	6063      	str	r3, [r4, #4]
 80335b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80335b8:	9624      	str	r6, [sp, #144]	; 0x90
 80335ba:	3301      	adds	r3, #1
 80335bc:	2b07      	cmp	r3, #7
 80335be:	9323      	str	r3, [sp, #140]	; 0x8c
 80335c0:	dc37      	bgt.n	8033632 <_vfprintf_r+0xe62>
 80335c2:	3408      	adds	r4, #8
 80335c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80335c6:	9a05      	ldr	r2, [sp, #20]
 80335c8:	4293      	cmp	r3, r2
 80335ca:	db03      	blt.n	80335d4 <_vfprintf_r+0xe04>
 80335cc:	f018 0f01 	tst.w	r8, #1
 80335d0:	f43f ad32 	beq.w	8033038 <_vfprintf_r+0x868>
 80335d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80335d6:	6023      	str	r3, [r4, #0]
 80335d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80335da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80335dc:	6063      	str	r3, [r4, #4]
 80335de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80335e0:	4413      	add	r3, r2
 80335e2:	9324      	str	r3, [sp, #144]	; 0x90
 80335e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80335e6:	3301      	adds	r3, #1
 80335e8:	2b07      	cmp	r3, #7
 80335ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80335ec:	dc2b      	bgt.n	8033646 <_vfprintf_r+0xe76>
 80335ee:	3408      	adds	r4, #8
 80335f0:	9b05      	ldr	r3, [sp, #20]
 80335f2:	1e5d      	subs	r5, r3, #1
 80335f4:	2d00      	cmp	r5, #0
 80335f6:	f77f ad1f 	ble.w	8033038 <_vfprintf_r+0x868>
 80335fa:	4e5b      	ldr	r6, [pc, #364]	; (8033768 <_vfprintf_r+0xf98>)
 80335fc:	2710      	movs	r7, #16
 80335fe:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033602:	2d10      	cmp	r5, #16
 8033604:	f103 0301 	add.w	r3, r3, #1
 8033608:	f104 0108 	add.w	r1, r4, #8
 803360c:	6026      	str	r6, [r4, #0]
 803360e:	dc24      	bgt.n	803365a <_vfprintf_r+0xe8a>
 8033610:	6065      	str	r5, [r4, #4]
 8033612:	2b07      	cmp	r3, #7
 8033614:	4415      	add	r5, r2
 8033616:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 803361a:	f340 8286 	ble.w	8033b2a <_vfprintf_r+0x135a>
 803361e:	aa22      	add	r2, sp, #136	; 0x88
 8033620:	4659      	mov	r1, fp
 8033622:	4650      	mov	r0, sl
 8033624:	f000 fb48 	bl	8033cb8 <__sprint_r>
 8033628:	2800      	cmp	r0, #0
 803362a:	f040 829f 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803362e:	ac25      	add	r4, sp, #148	; 0x94
 8033630:	e502      	b.n	8033038 <_vfprintf_r+0x868>
 8033632:	aa22      	add	r2, sp, #136	; 0x88
 8033634:	4659      	mov	r1, fp
 8033636:	4650      	mov	r0, sl
 8033638:	f000 fb3e 	bl	8033cb8 <__sprint_r>
 803363c:	2800      	cmp	r0, #0
 803363e:	f040 8295 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033642:	ac25      	add	r4, sp, #148	; 0x94
 8033644:	e7be      	b.n	80335c4 <_vfprintf_r+0xdf4>
 8033646:	aa22      	add	r2, sp, #136	; 0x88
 8033648:	4659      	mov	r1, fp
 803364a:	4650      	mov	r0, sl
 803364c:	f000 fb34 	bl	8033cb8 <__sprint_r>
 8033650:	2800      	cmp	r0, #0
 8033652:	f040 828b 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033656:	ac25      	add	r4, sp, #148	; 0x94
 8033658:	e7ca      	b.n	80335f0 <_vfprintf_r+0xe20>
 803365a:	3210      	adds	r2, #16
 803365c:	2b07      	cmp	r3, #7
 803365e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033662:	6067      	str	r7, [r4, #4]
 8033664:	dd08      	ble.n	8033678 <_vfprintf_r+0xea8>
 8033666:	aa22      	add	r2, sp, #136	; 0x88
 8033668:	4659      	mov	r1, fp
 803366a:	4650      	mov	r0, sl
 803366c:	f000 fb24 	bl	8033cb8 <__sprint_r>
 8033670:	2800      	cmp	r0, #0
 8033672:	f040 827b 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033676:	a925      	add	r1, sp, #148	; 0x94
 8033678:	3d10      	subs	r5, #16
 803367a:	460c      	mov	r4, r1
 803367c:	e7bf      	b.n	80335fe <_vfprintf_r+0xe2e>
 803367e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8033680:	2b00      	cmp	r3, #0
 8033682:	dc73      	bgt.n	803376c <_vfprintf_r+0xf9c>
 8033684:	4b37      	ldr	r3, [pc, #220]	; (8033764 <_vfprintf_r+0xf94>)
 8033686:	6023      	str	r3, [r4, #0]
 8033688:	2301      	movs	r3, #1
 803368a:	441e      	add	r6, r3
 803368c:	6063      	str	r3, [r4, #4]
 803368e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033690:	9624      	str	r6, [sp, #144]	; 0x90
 8033692:	3301      	adds	r3, #1
 8033694:	2b07      	cmp	r3, #7
 8033696:	9323      	str	r3, [sp, #140]	; 0x8c
 8033698:	dc3d      	bgt.n	8033716 <_vfprintf_r+0xf46>
 803369a:	3408      	adds	r4, #8
 803369c:	9905      	ldr	r1, [sp, #20]
 803369e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80336a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80336a2:	430b      	orrs	r3, r1
 80336a4:	f008 0101 	and.w	r1, r8, #1
 80336a8:	430b      	orrs	r3, r1
 80336aa:	f43f acc5 	beq.w	8033038 <_vfprintf_r+0x868>
 80336ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80336b0:	6023      	str	r3, [r4, #0]
 80336b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80336b4:	6063      	str	r3, [r4, #4]
 80336b6:	441a      	add	r2, r3
 80336b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80336ba:	9224      	str	r2, [sp, #144]	; 0x90
 80336bc:	3301      	adds	r3, #1
 80336be:	2b07      	cmp	r3, #7
 80336c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80336c2:	dc32      	bgt.n	803372a <_vfprintf_r+0xf5a>
 80336c4:	3408      	adds	r4, #8
 80336c6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80336c8:	2d00      	cmp	r5, #0
 80336ca:	da1b      	bge.n	8033704 <_vfprintf_r+0xf34>
 80336cc:	4e26      	ldr	r6, [pc, #152]	; (8033768 <_vfprintf_r+0xf98>)
 80336ce:	426d      	negs	r5, r5
 80336d0:	4623      	mov	r3, r4
 80336d2:	2710      	movs	r7, #16
 80336d4:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80336d8:	2d10      	cmp	r5, #16
 80336da:	f102 0201 	add.w	r2, r2, #1
 80336de:	f104 0408 	add.w	r4, r4, #8
 80336e2:	601e      	str	r6, [r3, #0]
 80336e4:	dc2b      	bgt.n	803373e <_vfprintf_r+0xf6e>
 80336e6:	605d      	str	r5, [r3, #4]
 80336e8:	2a07      	cmp	r2, #7
 80336ea:	440d      	add	r5, r1
 80336ec:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80336f0:	dd08      	ble.n	8033704 <_vfprintf_r+0xf34>
 80336f2:	aa22      	add	r2, sp, #136	; 0x88
 80336f4:	4659      	mov	r1, fp
 80336f6:	4650      	mov	r0, sl
 80336f8:	f000 fade 	bl	8033cb8 <__sprint_r>
 80336fc:	2800      	cmp	r0, #0
 80336fe:	f040 8235 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033702:	ac25      	add	r4, sp, #148	; 0x94
 8033704:	9b05      	ldr	r3, [sp, #20]
 8033706:	9a05      	ldr	r2, [sp, #20]
 8033708:	6063      	str	r3, [r4, #4]
 803370a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803370c:	f8c4 9000 	str.w	r9, [r4]
 8033710:	4413      	add	r3, r2
 8033712:	9324      	str	r3, [sp, #144]	; 0x90
 8033714:	e489      	b.n	803302a <_vfprintf_r+0x85a>
 8033716:	aa22      	add	r2, sp, #136	; 0x88
 8033718:	4659      	mov	r1, fp
 803371a:	4650      	mov	r0, sl
 803371c:	f000 facc 	bl	8033cb8 <__sprint_r>
 8033720:	2800      	cmp	r0, #0
 8033722:	f040 8223 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033726:	ac25      	add	r4, sp, #148	; 0x94
 8033728:	e7b8      	b.n	803369c <_vfprintf_r+0xecc>
 803372a:	aa22      	add	r2, sp, #136	; 0x88
 803372c:	4659      	mov	r1, fp
 803372e:	4650      	mov	r0, sl
 8033730:	f000 fac2 	bl	8033cb8 <__sprint_r>
 8033734:	2800      	cmp	r0, #0
 8033736:	f040 8219 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803373a:	ac25      	add	r4, sp, #148	; 0x94
 803373c:	e7c3      	b.n	80336c6 <_vfprintf_r+0xef6>
 803373e:	3110      	adds	r1, #16
 8033740:	2a07      	cmp	r2, #7
 8033742:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8033746:	605f      	str	r7, [r3, #4]
 8033748:	dd08      	ble.n	803375c <_vfprintf_r+0xf8c>
 803374a:	aa22      	add	r2, sp, #136	; 0x88
 803374c:	4659      	mov	r1, fp
 803374e:	4650      	mov	r0, sl
 8033750:	f000 fab2 	bl	8033cb8 <__sprint_r>
 8033754:	2800      	cmp	r0, #0
 8033756:	f040 8209 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803375a:	ac25      	add	r4, sp, #148	; 0x94
 803375c:	3d10      	subs	r5, #16
 803375e:	4623      	mov	r3, r4
 8033760:	e7b8      	b.n	80336d4 <_vfprintf_r+0xf04>
 8033762:	bf00      	nop
 8033764:	080375e6 	.word	0x080375e6
 8033768:	080375f8 	.word	0x080375f8
 803376c:	9f05      	ldr	r7, [sp, #20]
 803376e:	42af      	cmp	r7, r5
 8033770:	bfa8      	it	ge
 8033772:	462f      	movge	r7, r5
 8033774:	2f00      	cmp	r7, #0
 8033776:	dd0a      	ble.n	803378e <_vfprintf_r+0xfbe>
 8033778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803377a:	3301      	adds	r3, #1
 803377c:	443e      	add	r6, r7
 803377e:	2b07      	cmp	r3, #7
 8033780:	e9c4 9700 	strd	r9, r7, [r4]
 8033784:	9624      	str	r6, [sp, #144]	; 0x90
 8033786:	9323      	str	r3, [sp, #140]	; 0x8c
 8033788:	f300 8084 	bgt.w	8033894 <_vfprintf_r+0x10c4>
 803378c:	3408      	adds	r4, #8
 803378e:	2f00      	cmp	r7, #0
 8033790:	bfac      	ite	ge
 8033792:	1bee      	subge	r6, r5, r7
 8033794:	462e      	movlt	r6, r5
 8033796:	2e00      	cmp	r6, #0
 8033798:	dd19      	ble.n	80337ce <_vfprintf_r+0xffe>
 803379a:	4f97      	ldr	r7, [pc, #604]	; (80339f8 <_vfprintf_r+0x1228>)
 803379c:	6027      	str	r7, [r4, #0]
 803379e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80337a2:	2e10      	cmp	r6, #16
 80337a4:	f103 0301 	add.w	r3, r3, #1
 80337a8:	f104 0108 	add.w	r1, r4, #8
 80337ac:	dc7c      	bgt.n	80338a8 <_vfprintf_r+0x10d8>
 80337ae:	6066      	str	r6, [r4, #4]
 80337b0:	2b07      	cmp	r3, #7
 80337b2:	4416      	add	r6, r2
 80337b4:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80337b8:	f340 8089 	ble.w	80338ce <_vfprintf_r+0x10fe>
 80337bc:	aa22      	add	r2, sp, #136	; 0x88
 80337be:	4659      	mov	r1, fp
 80337c0:	4650      	mov	r0, sl
 80337c2:	f000 fa79 	bl	8033cb8 <__sprint_r>
 80337c6:	2800      	cmp	r0, #0
 80337c8:	f040 81d0 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80337cc:	ac25      	add	r4, sp, #148	; 0x94
 80337ce:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80337d2:	444d      	add	r5, r9
 80337d4:	d00a      	beq.n	80337ec <_vfprintf_r+0x101c>
 80337d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80337d8:	2b00      	cmp	r3, #0
 80337da:	d17a      	bne.n	80338d2 <_vfprintf_r+0x1102>
 80337dc:	9b08      	ldr	r3, [sp, #32]
 80337de:	2b00      	cmp	r3, #0
 80337e0:	d17a      	bne.n	80338d8 <_vfprintf_r+0x1108>
 80337e2:	9b05      	ldr	r3, [sp, #20]
 80337e4:	444b      	add	r3, r9
 80337e6:	429d      	cmp	r5, r3
 80337e8:	bf28      	it	cs
 80337ea:	461d      	movcs	r5, r3
 80337ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80337ee:	9a05      	ldr	r2, [sp, #20]
 80337f0:	4293      	cmp	r3, r2
 80337f2:	db02      	blt.n	80337fa <_vfprintf_r+0x102a>
 80337f4:	f018 0f01 	tst.w	r8, #1
 80337f8:	d00e      	beq.n	8033818 <_vfprintf_r+0x1048>
 80337fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80337fc:	6023      	str	r3, [r4, #0]
 80337fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8033800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8033802:	6063      	str	r3, [r4, #4]
 8033804:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033806:	4413      	add	r3, r2
 8033808:	9324      	str	r3, [sp, #144]	; 0x90
 803380a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 803380c:	3301      	adds	r3, #1
 803380e:	2b07      	cmp	r3, #7
 8033810:	9323      	str	r3, [sp, #140]	; 0x8c
 8033812:	f300 80dc 	bgt.w	80339ce <_vfprintf_r+0x11fe>
 8033816:	3408      	adds	r4, #8
 8033818:	9b05      	ldr	r3, [sp, #20]
 803381a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 803381c:	1b9e      	subs	r6, r3, r6
 803381e:	444b      	add	r3, r9
 8033820:	1b5b      	subs	r3, r3, r5
 8033822:	429e      	cmp	r6, r3
 8033824:	bfa8      	it	ge
 8033826:	461e      	movge	r6, r3
 8033828:	2e00      	cmp	r6, #0
 803382a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 803382c:	dd0a      	ble.n	8033844 <_vfprintf_r+0x1074>
 803382e:	4433      	add	r3, r6
 8033830:	9324      	str	r3, [sp, #144]	; 0x90
 8033832:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033834:	3301      	adds	r3, #1
 8033836:	2b07      	cmp	r3, #7
 8033838:	e9c4 5600 	strd	r5, r6, [r4]
 803383c:	9323      	str	r3, [sp, #140]	; 0x8c
 803383e:	f300 80d0 	bgt.w	80339e2 <_vfprintf_r+0x1212>
 8033842:	3408      	adds	r4, #8
 8033844:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8033846:	9b05      	ldr	r3, [sp, #20]
 8033848:	2e00      	cmp	r6, #0
 803384a:	eba3 0505 	sub.w	r5, r3, r5
 803384e:	bfa8      	it	ge
 8033850:	1bad      	subge	r5, r5, r6
 8033852:	2d00      	cmp	r5, #0
 8033854:	f77f abf0 	ble.w	8033038 <_vfprintf_r+0x868>
 8033858:	4e67      	ldr	r6, [pc, #412]	; (80339f8 <_vfprintf_r+0x1228>)
 803385a:	2710      	movs	r7, #16
 803385c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033860:	2d10      	cmp	r5, #16
 8033862:	f103 0301 	add.w	r3, r3, #1
 8033866:	f104 0108 	add.w	r1, r4, #8
 803386a:	6026      	str	r6, [r4, #0]
 803386c:	f77f aed0 	ble.w	8033610 <_vfprintf_r+0xe40>
 8033870:	3210      	adds	r2, #16
 8033872:	2b07      	cmp	r3, #7
 8033874:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033878:	6067      	str	r7, [r4, #4]
 803387a:	dd08      	ble.n	803388e <_vfprintf_r+0x10be>
 803387c:	aa22      	add	r2, sp, #136	; 0x88
 803387e:	4659      	mov	r1, fp
 8033880:	4650      	mov	r0, sl
 8033882:	f000 fa19 	bl	8033cb8 <__sprint_r>
 8033886:	2800      	cmp	r0, #0
 8033888:	f040 8170 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803388c:	a925      	add	r1, sp, #148	; 0x94
 803388e:	3d10      	subs	r5, #16
 8033890:	460c      	mov	r4, r1
 8033892:	e7e3      	b.n	803385c <_vfprintf_r+0x108c>
 8033894:	aa22      	add	r2, sp, #136	; 0x88
 8033896:	4659      	mov	r1, fp
 8033898:	4650      	mov	r0, sl
 803389a:	f000 fa0d 	bl	8033cb8 <__sprint_r>
 803389e:	2800      	cmp	r0, #0
 80338a0:	f040 8164 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80338a4:	ac25      	add	r4, sp, #148	; 0x94
 80338a6:	e772      	b.n	803378e <_vfprintf_r+0xfbe>
 80338a8:	2010      	movs	r0, #16
 80338aa:	4402      	add	r2, r0
 80338ac:	2b07      	cmp	r3, #7
 80338ae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80338b2:	6060      	str	r0, [r4, #4]
 80338b4:	dd08      	ble.n	80338c8 <_vfprintf_r+0x10f8>
 80338b6:	aa22      	add	r2, sp, #136	; 0x88
 80338b8:	4659      	mov	r1, fp
 80338ba:	4650      	mov	r0, sl
 80338bc:	f000 f9fc 	bl	8033cb8 <__sprint_r>
 80338c0:	2800      	cmp	r0, #0
 80338c2:	f040 8153 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80338c6:	a925      	add	r1, sp, #148	; 0x94
 80338c8:	3e10      	subs	r6, #16
 80338ca:	460c      	mov	r4, r1
 80338cc:	e766      	b.n	803379c <_vfprintf_r+0xfcc>
 80338ce:	460c      	mov	r4, r1
 80338d0:	e77d      	b.n	80337ce <_vfprintf_r+0xffe>
 80338d2:	9b08      	ldr	r3, [sp, #32]
 80338d4:	2b00      	cmp	r3, #0
 80338d6:	d04a      	beq.n	803396e <_vfprintf_r+0x119e>
 80338d8:	9b08      	ldr	r3, [sp, #32]
 80338da:	3b01      	subs	r3, #1
 80338dc:	9308      	str	r3, [sp, #32]
 80338de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80338e0:	6023      	str	r3, [r4, #0]
 80338e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80338e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80338e6:	6063      	str	r3, [r4, #4]
 80338e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80338ea:	4413      	add	r3, r2
 80338ec:	9324      	str	r3, [sp, #144]	; 0x90
 80338ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80338f0:	3301      	adds	r3, #1
 80338f2:	2b07      	cmp	r3, #7
 80338f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80338f6:	dc41      	bgt.n	803397c <_vfprintf_r+0x11ac>
 80338f8:	3408      	adds	r4, #8
 80338fa:	9b05      	ldr	r3, [sp, #20]
 80338fc:	eb09 0703 	add.w	r7, r9, r3
 8033900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033902:	781b      	ldrb	r3, [r3, #0]
 8033904:	1b7f      	subs	r7, r7, r5
 8033906:	429f      	cmp	r7, r3
 8033908:	bfa8      	it	ge
 803390a:	461f      	movge	r7, r3
 803390c:	2f00      	cmp	r7, #0
 803390e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033910:	dd09      	ble.n	8033926 <_vfprintf_r+0x1156>
 8033912:	443b      	add	r3, r7
 8033914:	9324      	str	r3, [sp, #144]	; 0x90
 8033916:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033918:	3301      	adds	r3, #1
 803391a:	2b07      	cmp	r3, #7
 803391c:	e9c4 5700 	strd	r5, r7, [r4]
 8033920:	9323      	str	r3, [sp, #140]	; 0x8c
 8033922:	dc35      	bgt.n	8033990 <_vfprintf_r+0x11c0>
 8033924:	3408      	adds	r4, #8
 8033926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033928:	781e      	ldrb	r6, [r3, #0]
 803392a:	2f00      	cmp	r7, #0
 803392c:	bfa8      	it	ge
 803392e:	1bf6      	subge	r6, r6, r7
 8033930:	2e00      	cmp	r6, #0
 8033932:	dd18      	ble.n	8033966 <_vfprintf_r+0x1196>
 8033934:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033938:	482f      	ldr	r0, [pc, #188]	; (80339f8 <_vfprintf_r+0x1228>)
 803393a:	6020      	str	r0, [r4, #0]
 803393c:	2e10      	cmp	r6, #16
 803393e:	f103 0301 	add.w	r3, r3, #1
 8033942:	f104 0108 	add.w	r1, r4, #8
 8033946:	dc2d      	bgt.n	80339a4 <_vfprintf_r+0x11d4>
 8033948:	6066      	str	r6, [r4, #4]
 803394a:	2b07      	cmp	r3, #7
 803394c:	4416      	add	r6, r2
 803394e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8033952:	dd3a      	ble.n	80339ca <_vfprintf_r+0x11fa>
 8033954:	aa22      	add	r2, sp, #136	; 0x88
 8033956:	4659      	mov	r1, fp
 8033958:	4650      	mov	r0, sl
 803395a:	f000 f9ad 	bl	8033cb8 <__sprint_r>
 803395e:	2800      	cmp	r0, #0
 8033960:	f040 8104 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033964:	ac25      	add	r4, sp, #148	; 0x94
 8033966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033968:	781b      	ldrb	r3, [r3, #0]
 803396a:	441d      	add	r5, r3
 803396c:	e733      	b.n	80337d6 <_vfprintf_r+0x1006>
 803396e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8033970:	3b01      	subs	r3, #1
 8033972:	930a      	str	r3, [sp, #40]	; 0x28
 8033974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8033976:	3b01      	subs	r3, #1
 8033978:	9309      	str	r3, [sp, #36]	; 0x24
 803397a:	e7b0      	b.n	80338de <_vfprintf_r+0x110e>
 803397c:	aa22      	add	r2, sp, #136	; 0x88
 803397e:	4659      	mov	r1, fp
 8033980:	4650      	mov	r0, sl
 8033982:	f000 f999 	bl	8033cb8 <__sprint_r>
 8033986:	2800      	cmp	r0, #0
 8033988:	f040 80f0 	bne.w	8033b6c <_vfprintf_r+0x139c>
 803398c:	ac25      	add	r4, sp, #148	; 0x94
 803398e:	e7b4      	b.n	80338fa <_vfprintf_r+0x112a>
 8033990:	aa22      	add	r2, sp, #136	; 0x88
 8033992:	4659      	mov	r1, fp
 8033994:	4650      	mov	r0, sl
 8033996:	f000 f98f 	bl	8033cb8 <__sprint_r>
 803399a:	2800      	cmp	r0, #0
 803399c:	f040 80e6 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80339a0:	ac25      	add	r4, sp, #148	; 0x94
 80339a2:	e7c0      	b.n	8033926 <_vfprintf_r+0x1156>
 80339a4:	2010      	movs	r0, #16
 80339a6:	4402      	add	r2, r0
 80339a8:	2b07      	cmp	r3, #7
 80339aa:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80339ae:	6060      	str	r0, [r4, #4]
 80339b0:	dd08      	ble.n	80339c4 <_vfprintf_r+0x11f4>
 80339b2:	aa22      	add	r2, sp, #136	; 0x88
 80339b4:	4659      	mov	r1, fp
 80339b6:	4650      	mov	r0, sl
 80339b8:	f000 f97e 	bl	8033cb8 <__sprint_r>
 80339bc:	2800      	cmp	r0, #0
 80339be:	f040 80d5 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80339c2:	a925      	add	r1, sp, #148	; 0x94
 80339c4:	3e10      	subs	r6, #16
 80339c6:	460c      	mov	r4, r1
 80339c8:	e7b4      	b.n	8033934 <_vfprintf_r+0x1164>
 80339ca:	460c      	mov	r4, r1
 80339cc:	e7cb      	b.n	8033966 <_vfprintf_r+0x1196>
 80339ce:	aa22      	add	r2, sp, #136	; 0x88
 80339d0:	4659      	mov	r1, fp
 80339d2:	4650      	mov	r0, sl
 80339d4:	f000 f970 	bl	8033cb8 <__sprint_r>
 80339d8:	2800      	cmp	r0, #0
 80339da:	f040 80c7 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80339de:	ac25      	add	r4, sp, #148	; 0x94
 80339e0:	e71a      	b.n	8033818 <_vfprintf_r+0x1048>
 80339e2:	aa22      	add	r2, sp, #136	; 0x88
 80339e4:	4659      	mov	r1, fp
 80339e6:	4650      	mov	r0, sl
 80339e8:	f000 f966 	bl	8033cb8 <__sprint_r>
 80339ec:	2800      	cmp	r0, #0
 80339ee:	f040 80bd 	bne.w	8033b6c <_vfprintf_r+0x139c>
 80339f2:	ac25      	add	r4, sp, #148	; 0x94
 80339f4:	e726      	b.n	8033844 <_vfprintf_r+0x1074>
 80339f6:	bf00      	nop
 80339f8:	080375f8 	.word	0x080375f8
 80339fc:	9a05      	ldr	r2, [sp, #20]
 80339fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033a00:	2a01      	cmp	r2, #1
 8033a02:	f106 0601 	add.w	r6, r6, #1
 8033a06:	f103 0301 	add.w	r3, r3, #1
 8033a0a:	f104 0508 	add.w	r5, r4, #8
 8033a0e:	dc02      	bgt.n	8033a16 <_vfprintf_r+0x1246>
 8033a10:	f018 0f01 	tst.w	r8, #1
 8033a14:	d07e      	beq.n	8033b14 <_vfprintf_r+0x1344>
 8033a16:	2201      	movs	r2, #1
 8033a18:	2b07      	cmp	r3, #7
 8033a1a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8033a1e:	f8c4 9000 	str.w	r9, [r4]
 8033a22:	6062      	str	r2, [r4, #4]
 8033a24:	dd08      	ble.n	8033a38 <_vfprintf_r+0x1268>
 8033a26:	aa22      	add	r2, sp, #136	; 0x88
 8033a28:	4659      	mov	r1, fp
 8033a2a:	4650      	mov	r0, sl
 8033a2c:	f000 f944 	bl	8033cb8 <__sprint_r>
 8033a30:	2800      	cmp	r0, #0
 8033a32:	f040 809b 	bne.w	8033b6c <_vfprintf_r+0x139c>
 8033a36:	ad25      	add	r5, sp, #148	; 0x94
 8033a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8033a3a:	602b      	str	r3, [r5, #0]
 8033a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8033a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8033a40:	606b      	str	r3, [r5, #4]
 8033a42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033a44:	4413      	add	r3, r2
 8033a46:	9324      	str	r3, [sp, #144]	; 0x90
 8033a48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033a4a:	3301      	adds	r3, #1
 8033a4c:	2b07      	cmp	r3, #7
 8033a4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8033a50:	dc32      	bgt.n	8033ab8 <_vfprintf_r+0x12e8>
 8033a52:	3508      	adds	r5, #8
 8033a54:	9b05      	ldr	r3, [sp, #20]
 8033a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8033a5a:	1e5c      	subs	r4, r3, #1
 8033a5c:	2200      	movs	r2, #0
 8033a5e:	2300      	movs	r3, #0
 8033a60:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 8033a64:	f7ef f830 	bl	8022ac8 <__aeabi_dcmpeq>
 8033a68:	2800      	cmp	r0, #0
 8033a6a:	d12e      	bne.n	8033aca <_vfprintf_r+0x12fa>
 8033a6c:	f109 0301 	add.w	r3, r9, #1
 8033a70:	e9c5 3400 	strd	r3, r4, [r5]
 8033a74:	9b05      	ldr	r3, [sp, #20]
 8033a76:	3701      	adds	r7, #1
 8033a78:	3e01      	subs	r6, #1
 8033a7a:	441e      	add	r6, r3
 8033a7c:	2f07      	cmp	r7, #7
 8033a7e:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8033a82:	dd50      	ble.n	8033b26 <_vfprintf_r+0x1356>
 8033a84:	aa22      	add	r2, sp, #136	; 0x88
 8033a86:	4659      	mov	r1, fp
 8033a88:	4650      	mov	r0, sl
 8033a8a:	f000 f915 	bl	8033cb8 <__sprint_r>
 8033a8e:	2800      	cmp	r0, #0
 8033a90:	d16c      	bne.n	8033b6c <_vfprintf_r+0x139c>
 8033a92:	ad25      	add	r5, sp, #148	; 0x94
 8033a94:	ab1e      	add	r3, sp, #120	; 0x78
 8033a96:	602b      	str	r3, [r5, #0]
 8033a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8033a9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8033a9c:	606b      	str	r3, [r5, #4]
 8033a9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033aa0:	4413      	add	r3, r2
 8033aa2:	9324      	str	r3, [sp, #144]	; 0x90
 8033aa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8033aa6:	3301      	adds	r3, #1
 8033aa8:	2b07      	cmp	r3, #7
 8033aaa:	9323      	str	r3, [sp, #140]	; 0x8c
 8033aac:	f73f adb7 	bgt.w	803361e <_vfprintf_r+0xe4e>
 8033ab0:	f105 0408 	add.w	r4, r5, #8
 8033ab4:	f7ff bac0 	b.w	8033038 <_vfprintf_r+0x868>
 8033ab8:	aa22      	add	r2, sp, #136	; 0x88
 8033aba:	4659      	mov	r1, fp
 8033abc:	4650      	mov	r0, sl
 8033abe:	f000 f8fb 	bl	8033cb8 <__sprint_r>
 8033ac2:	2800      	cmp	r0, #0
 8033ac4:	d152      	bne.n	8033b6c <_vfprintf_r+0x139c>
 8033ac6:	ad25      	add	r5, sp, #148	; 0x94
 8033ac8:	e7c4      	b.n	8033a54 <_vfprintf_r+0x1284>
 8033aca:	2c00      	cmp	r4, #0
 8033acc:	dde2      	ble.n	8033a94 <_vfprintf_r+0x12c4>
 8033ace:	4e58      	ldr	r6, [pc, #352]	; (8033c30 <_vfprintf_r+0x1460>)
 8033ad0:	2710      	movs	r7, #16
 8033ad2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033ad6:	2c10      	cmp	r4, #16
 8033ad8:	f103 0301 	add.w	r3, r3, #1
 8033adc:	f105 0108 	add.w	r1, r5, #8
 8033ae0:	602e      	str	r6, [r5, #0]
 8033ae2:	dc07      	bgt.n	8033af4 <_vfprintf_r+0x1324>
 8033ae4:	606c      	str	r4, [r5, #4]
 8033ae6:	2b07      	cmp	r3, #7
 8033ae8:	4414      	add	r4, r2
 8033aea:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8033aee:	dcc9      	bgt.n	8033a84 <_vfprintf_r+0x12b4>
 8033af0:	460d      	mov	r5, r1
 8033af2:	e7cf      	b.n	8033a94 <_vfprintf_r+0x12c4>
 8033af4:	3210      	adds	r2, #16
 8033af6:	2b07      	cmp	r3, #7
 8033af8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033afc:	606f      	str	r7, [r5, #4]
 8033afe:	dd06      	ble.n	8033b0e <_vfprintf_r+0x133e>
 8033b00:	aa22      	add	r2, sp, #136	; 0x88
 8033b02:	4659      	mov	r1, fp
 8033b04:	4650      	mov	r0, sl
 8033b06:	f000 f8d7 	bl	8033cb8 <__sprint_r>
 8033b0a:	bb78      	cbnz	r0, 8033b6c <_vfprintf_r+0x139c>
 8033b0c:	a925      	add	r1, sp, #148	; 0x94
 8033b0e:	3c10      	subs	r4, #16
 8033b10:	460d      	mov	r5, r1
 8033b12:	e7de      	b.n	8033ad2 <_vfprintf_r+0x1302>
 8033b14:	2201      	movs	r2, #1
 8033b16:	2b07      	cmp	r3, #7
 8033b18:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8033b1c:	f8c4 9000 	str.w	r9, [r4]
 8033b20:	6062      	str	r2, [r4, #4]
 8033b22:	ddb7      	ble.n	8033a94 <_vfprintf_r+0x12c4>
 8033b24:	e7ae      	b.n	8033a84 <_vfprintf_r+0x12b4>
 8033b26:	3508      	adds	r5, #8
 8033b28:	e7b4      	b.n	8033a94 <_vfprintf_r+0x12c4>
 8033b2a:	460c      	mov	r4, r1
 8033b2c:	f7ff ba84 	b.w	8033038 <_vfprintf_r+0x868>
 8033b30:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8033b34:	1a9d      	subs	r5, r3, r2
 8033b36:	2d00      	cmp	r5, #0
 8033b38:	f77f aa82 	ble.w	8033040 <_vfprintf_r+0x870>
 8033b3c:	4e3d      	ldr	r6, [pc, #244]	; (8033c34 <_vfprintf_r+0x1464>)
 8033b3e:	2710      	movs	r7, #16
 8033b40:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8033b44:	2d10      	cmp	r5, #16
 8033b46:	f103 0301 	add.w	r3, r3, #1
 8033b4a:	6026      	str	r6, [r4, #0]
 8033b4c:	dc18      	bgt.n	8033b80 <_vfprintf_r+0x13b0>
 8033b4e:	6065      	str	r5, [r4, #4]
 8033b50:	2b07      	cmp	r3, #7
 8033b52:	4415      	add	r5, r2
 8033b54:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8033b58:	f77f aa72 	ble.w	8033040 <_vfprintf_r+0x870>
 8033b5c:	aa22      	add	r2, sp, #136	; 0x88
 8033b5e:	4659      	mov	r1, fp
 8033b60:	4650      	mov	r0, sl
 8033b62:	f000 f8a9 	bl	8033cb8 <__sprint_r>
 8033b66:	2800      	cmp	r0, #0
 8033b68:	f43f aa6a 	beq.w	8033040 <_vfprintf_r+0x870>
 8033b6c:	9b03      	ldr	r3, [sp, #12]
 8033b6e:	2b00      	cmp	r3, #0
 8033b70:	f43f a87f 	beq.w	8032c72 <_vfprintf_r+0x4a2>
 8033b74:	4619      	mov	r1, r3
 8033b76:	4650      	mov	r0, sl
 8033b78:	f7fe fb24 	bl	80321c4 <_free_r>
 8033b7c:	f7ff b879 	b.w	8032c72 <_vfprintf_r+0x4a2>
 8033b80:	3210      	adds	r2, #16
 8033b82:	2b07      	cmp	r3, #7
 8033b84:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8033b88:	6067      	str	r7, [r4, #4]
 8033b8a:	dc02      	bgt.n	8033b92 <_vfprintf_r+0x13c2>
 8033b8c:	3408      	adds	r4, #8
 8033b8e:	3d10      	subs	r5, #16
 8033b90:	e7d6      	b.n	8033b40 <_vfprintf_r+0x1370>
 8033b92:	aa22      	add	r2, sp, #136	; 0x88
 8033b94:	4659      	mov	r1, fp
 8033b96:	4650      	mov	r0, sl
 8033b98:	f000 f88e 	bl	8033cb8 <__sprint_r>
 8033b9c:	2800      	cmp	r0, #0
 8033b9e:	d1e5      	bne.n	8033b6c <_vfprintf_r+0x139c>
 8033ba0:	ac25      	add	r4, sp, #148	; 0x94
 8033ba2:	e7f4      	b.n	8033b8e <_vfprintf_r+0x13be>
 8033ba4:	9903      	ldr	r1, [sp, #12]
 8033ba6:	4650      	mov	r0, sl
 8033ba8:	f7fe fb0c 	bl	80321c4 <_free_r>
 8033bac:	f7ff ba60 	b.w	8033070 <_vfprintf_r+0x8a0>
 8033bb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8033bb2:	b91b      	cbnz	r3, 8033bbc <_vfprintf_r+0x13ec>
 8033bb4:	2300      	movs	r3, #0
 8033bb6:	9323      	str	r3, [sp, #140]	; 0x8c
 8033bb8:	f7ff b85b 	b.w	8032c72 <_vfprintf_r+0x4a2>
 8033bbc:	aa22      	add	r2, sp, #136	; 0x88
 8033bbe:	4659      	mov	r1, fp
 8033bc0:	4650      	mov	r0, sl
 8033bc2:	f000 f879 	bl	8033cb8 <__sprint_r>
 8033bc6:	2800      	cmp	r0, #0
 8033bc8:	d0f4      	beq.n	8033bb4 <_vfprintf_r+0x13e4>
 8033bca:	f7ff b852 	b.w	8032c72 <_vfprintf_r+0x4a2>
 8033bce:	ea55 0206 	orrs.w	r2, r5, r6
 8033bd2:	4647      	mov	r7, r8
 8033bd4:	f43f ab78 	beq.w	80332c8 <_vfprintf_r+0xaf8>
 8033bd8:	2b01      	cmp	r3, #1
 8033bda:	f43f ac14 	beq.w	8033406 <_vfprintf_r+0xc36>
 8033bde:	2b02      	cmp	r3, #2
 8033be0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 8033be4:	f43f ac56 	beq.w	8033494 <_vfprintf_r+0xcc4>
 8033be8:	f005 0307 	and.w	r3, r5, #7
 8033bec:	08ed      	lsrs	r5, r5, #3
 8033bee:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8033bf2:	08f6      	lsrs	r6, r6, #3
 8033bf4:	3330      	adds	r3, #48	; 0x30
 8033bf6:	ea55 0106 	orrs.w	r1, r5, r6
 8033bfa:	464a      	mov	r2, r9
 8033bfc:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8033c00:	d1f2      	bne.n	8033be8 <_vfprintf_r+0x1418>
 8033c02:	07f8      	lsls	r0, r7, #31
 8033c04:	d506      	bpl.n	8033c14 <_vfprintf_r+0x1444>
 8033c06:	2b30      	cmp	r3, #48	; 0x30
 8033c08:	d004      	beq.n	8033c14 <_vfprintf_r+0x1444>
 8033c0a:	2330      	movs	r3, #48	; 0x30
 8033c0c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8033c10:	f1a2 0902 	sub.w	r9, r2, #2
 8033c14:	ab4e      	add	r3, sp, #312	; 0x138
 8033c16:	eba3 0309 	sub.w	r3, r3, r9
 8033c1a:	9e04      	ldr	r6, [sp, #16]
 8033c1c:	9304      	str	r3, [sp, #16]
 8033c1e:	2300      	movs	r3, #0
 8033c20:	46b8      	mov	r8, r7
 8033c22:	9303      	str	r3, [sp, #12]
 8033c24:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8033c28:	461d      	mov	r5, r3
 8033c2a:	f7ff b94b 	b.w	8032ec4 <_vfprintf_r+0x6f4>
 8033c2e:	bf00      	nop
 8033c30:	080375f8 	.word	0x080375f8
 8033c34:	080375e8 	.word	0x080375e8

08033c38 <__sbprintf>:
 8033c38:	b570      	push	{r4, r5, r6, lr}
 8033c3a:	460c      	mov	r4, r1
 8033c3c:	8989      	ldrh	r1, [r1, #12]
 8033c3e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8033c42:	f021 0102 	bic.w	r1, r1, #2
 8033c46:	f8ad 1014 	strh.w	r1, [sp, #20]
 8033c4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8033c4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8033c4e:	89e1      	ldrh	r1, [r4, #14]
 8033c50:	f8ad 1016 	strh.w	r1, [sp, #22]
 8033c54:	69e1      	ldr	r1, [r4, #28]
 8033c56:	9109      	str	r1, [sp, #36]	; 0x24
 8033c58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8033c5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8033c5c:	a91c      	add	r1, sp, #112	; 0x70
 8033c5e:	9102      	str	r1, [sp, #8]
 8033c60:	9106      	str	r1, [sp, #24]
 8033c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8033c66:	4606      	mov	r6, r0
 8033c68:	9104      	str	r1, [sp, #16]
 8033c6a:	9107      	str	r1, [sp, #28]
 8033c6c:	a818      	add	r0, sp, #96	; 0x60
 8033c6e:	2100      	movs	r1, #0
 8033c70:	e9cd 3200 	strd	r3, r2, [sp]
 8033c74:	9108      	str	r1, [sp, #32]
 8033c76:	f7fe fa2f 	bl	80320d8 <__retarget_lock_init_recursive>
 8033c7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8033c7e:	a902      	add	r1, sp, #8
 8033c80:	4630      	mov	r0, r6
 8033c82:	f7fe fda5 	bl	80327d0 <_vfprintf_r>
 8033c86:	1e05      	subs	r5, r0, #0
 8033c88:	db07      	blt.n	8033c9a <__sbprintf+0x62>
 8033c8a:	a902      	add	r1, sp, #8
 8033c8c:	4630      	mov	r0, r6
 8033c8e:	f000 fdfd 	bl	803488c <_fflush_r>
 8033c92:	2800      	cmp	r0, #0
 8033c94:	bf18      	it	ne
 8033c96:	f04f 35ff 	movne.w	r5, #4294967295
 8033c9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8033c9e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8033ca0:	065b      	lsls	r3, r3, #25
 8033ca2:	bf42      	ittt	mi
 8033ca4:	89a3      	ldrhmi	r3, [r4, #12]
 8033ca6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8033caa:	81a3      	strhmi	r3, [r4, #12]
 8033cac:	f7fe fa15 	bl	80320da <__retarget_lock_close_recursive>
 8033cb0:	4628      	mov	r0, r5
 8033cb2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8033cb6:	bd70      	pop	{r4, r5, r6, pc}

08033cb8 <__sprint_r>:
 8033cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033cbc:	6893      	ldr	r3, [r2, #8]
 8033cbe:	4680      	mov	r8, r0
 8033cc0:	460f      	mov	r7, r1
 8033cc2:	4614      	mov	r4, r2
 8033cc4:	b343      	cbz	r3, 8033d18 <__sprint_r+0x60>
 8033cc6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8033cc8:	049d      	lsls	r5, r3, #18
 8033cca:	d522      	bpl.n	8033d12 <__sprint_r+0x5a>
 8033ccc:	6815      	ldr	r5, [r2, #0]
 8033cce:	3508      	adds	r5, #8
 8033cd0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8033cd4:	f04f 0900 	mov.w	r9, #0
 8033cd8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8033cdc:	45ca      	cmp	sl, r9
 8033cde:	dc0d      	bgt.n	8033cfc <__sprint_r+0x44>
 8033ce0:	68a3      	ldr	r3, [r4, #8]
 8033ce2:	f026 0603 	bic.w	r6, r6, #3
 8033ce6:	1b98      	subs	r0, r3, r6
 8033ce8:	60a0      	str	r0, [r4, #8]
 8033cea:	3508      	adds	r5, #8
 8033cec:	2800      	cmp	r0, #0
 8033cee:	d1ef      	bne.n	8033cd0 <__sprint_r+0x18>
 8033cf0:	2300      	movs	r3, #0
 8033cf2:	60a3      	str	r3, [r4, #8]
 8033cf4:	2300      	movs	r3, #0
 8033cf6:	6063      	str	r3, [r4, #4]
 8033cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033cfc:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8033d00:	463a      	mov	r2, r7
 8033d02:	4640      	mov	r0, r8
 8033d04:	f000 ffcb 	bl	8034c9e <_fputwc_r>
 8033d08:	1c43      	adds	r3, r0, #1
 8033d0a:	d0f1      	beq.n	8033cf0 <__sprint_r+0x38>
 8033d0c:	f109 0901 	add.w	r9, r9, #1
 8033d10:	e7e4      	b.n	8033cdc <__sprint_r+0x24>
 8033d12:	f000 fde1 	bl	80348d8 <__sfvwrite_r>
 8033d16:	e7eb      	b.n	8033cf0 <__sprint_r+0x38>
 8033d18:	4618      	mov	r0, r3
 8033d1a:	e7eb      	b.n	8033cf4 <__sprint_r+0x3c>

08033d1c <_vfiprintf_r>:
 8033d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033d20:	ed2d 8b02 	vpush	{d8}
 8033d24:	b0bb      	sub	sp, #236	; 0xec
 8033d26:	460f      	mov	r7, r1
 8033d28:	9201      	str	r2, [sp, #4]
 8033d2a:	461d      	mov	r5, r3
 8033d2c:	461c      	mov	r4, r3
 8033d2e:	4681      	mov	r9, r0
 8033d30:	b118      	cbz	r0, 8033d3a <_vfiprintf_r+0x1e>
 8033d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8033d34:	b90b      	cbnz	r3, 8033d3a <_vfiprintf_r+0x1e>
 8033d36:	f7fe f87d 	bl	8031e34 <__sinit>
 8033d3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033d3c:	07d8      	lsls	r0, r3, #31
 8033d3e:	d405      	bmi.n	8033d4c <_vfiprintf_r+0x30>
 8033d40:	89bb      	ldrh	r3, [r7, #12]
 8033d42:	0599      	lsls	r1, r3, #22
 8033d44:	d402      	bmi.n	8033d4c <_vfiprintf_r+0x30>
 8033d46:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8033d48:	f7fe f9c8 	bl	80320dc <__retarget_lock_acquire_recursive>
 8033d4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8033d50:	049a      	lsls	r2, r3, #18
 8033d52:	d406      	bmi.n	8033d62 <_vfiprintf_r+0x46>
 8033d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8033d58:	81bb      	strh	r3, [r7, #12]
 8033d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033d5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8033d60:	667b      	str	r3, [r7, #100]	; 0x64
 8033d62:	89bb      	ldrh	r3, [r7, #12]
 8033d64:	071e      	lsls	r6, r3, #28
 8033d66:	d501      	bpl.n	8033d6c <_vfiprintf_r+0x50>
 8033d68:	693b      	ldr	r3, [r7, #16]
 8033d6a:	b9bb      	cbnz	r3, 8033d9c <_vfiprintf_r+0x80>
 8033d6c:	4639      	mov	r1, r7
 8033d6e:	4648      	mov	r0, r9
 8033d70:	f000 fefc 	bl	8034b6c <__swsetup_r>
 8033d74:	b190      	cbz	r0, 8033d9c <_vfiprintf_r+0x80>
 8033d76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8033d78:	07d8      	lsls	r0, r3, #31
 8033d7a:	d508      	bpl.n	8033d8e <_vfiprintf_r+0x72>
 8033d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8033d80:	9302      	str	r3, [sp, #8]
 8033d82:	9802      	ldr	r0, [sp, #8]
 8033d84:	b03b      	add	sp, #236	; 0xec
 8033d86:	ecbd 8b02 	vpop	{d8}
 8033d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033d8e:	89bb      	ldrh	r3, [r7, #12]
 8033d90:	0599      	lsls	r1, r3, #22
 8033d92:	d4f3      	bmi.n	8033d7c <_vfiprintf_r+0x60>
 8033d94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8033d96:	f7fe f9a2 	bl	80320de <__retarget_lock_release_recursive>
 8033d9a:	e7ef      	b.n	8033d7c <_vfiprintf_r+0x60>
 8033d9c:	89bb      	ldrh	r3, [r7, #12]
 8033d9e:	f003 021a 	and.w	r2, r3, #26
 8033da2:	2a0a      	cmp	r2, #10
 8033da4:	d116      	bne.n	8033dd4 <_vfiprintf_r+0xb8>
 8033da6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8033daa:	2a00      	cmp	r2, #0
 8033dac:	db12      	blt.n	8033dd4 <_vfiprintf_r+0xb8>
 8033dae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8033db0:	07d2      	lsls	r2, r2, #31
 8033db2:	d404      	bmi.n	8033dbe <_vfiprintf_r+0xa2>
 8033db4:	059e      	lsls	r6, r3, #22
 8033db6:	d402      	bmi.n	8033dbe <_vfiprintf_r+0xa2>
 8033db8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8033dba:	f7fe f990 	bl	80320de <__retarget_lock_release_recursive>
 8033dbe:	9a01      	ldr	r2, [sp, #4]
 8033dc0:	462b      	mov	r3, r5
 8033dc2:	4639      	mov	r1, r7
 8033dc4:	4648      	mov	r0, r9
 8033dc6:	b03b      	add	sp, #236	; 0xec
 8033dc8:	ecbd 8b02 	vpop	{d8}
 8033dcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033dd0:	f000 bc36 	b.w	8034640 <__sbprintf>
 8033dd4:	2300      	movs	r3, #0
 8033dd6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8033dda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8033dde:	ae11      	add	r6, sp, #68	; 0x44
 8033de0:	ee08 3a10 	vmov	s16, r3
 8033de4:	960e      	str	r6, [sp, #56]	; 0x38
 8033de6:	9307      	str	r3, [sp, #28]
 8033de8:	9302      	str	r3, [sp, #8]
 8033dea:	9b01      	ldr	r3, [sp, #4]
 8033dec:	461d      	mov	r5, r3
 8033dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8033df2:	b10a      	cbz	r2, 8033df8 <_vfiprintf_r+0xdc>
 8033df4:	2a25      	cmp	r2, #37	; 0x25
 8033df6:	d1f9      	bne.n	8033dec <_vfiprintf_r+0xd0>
 8033df8:	9b01      	ldr	r3, [sp, #4]
 8033dfa:	ebb5 0803 	subs.w	r8, r5, r3
 8033dfe:	d00d      	beq.n	8033e1c <_vfiprintf_r+0x100>
 8033e00:	e9c6 3800 	strd	r3, r8, [r6]
 8033e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8033e06:	4443      	add	r3, r8
 8033e08:	9310      	str	r3, [sp, #64]	; 0x40
 8033e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8033e0c:	3301      	adds	r3, #1
 8033e0e:	2b07      	cmp	r3, #7
 8033e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8033e12:	dc76      	bgt.n	8033f02 <_vfiprintf_r+0x1e6>
 8033e14:	3608      	adds	r6, #8
 8033e16:	9b02      	ldr	r3, [sp, #8]
 8033e18:	4443      	add	r3, r8
 8033e1a:	9302      	str	r3, [sp, #8]
 8033e1c:	782b      	ldrb	r3, [r5, #0]
 8033e1e:	2b00      	cmp	r3, #0
 8033e20:	f000 83d0 	beq.w	80345c4 <_vfiprintf_r+0x8a8>
 8033e24:	2300      	movs	r3, #0
 8033e26:	f04f 32ff 	mov.w	r2, #4294967295
 8033e2a:	3501      	adds	r5, #1
 8033e2c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8033e30:	9200      	str	r2, [sp, #0]
 8033e32:	9303      	str	r3, [sp, #12]
 8033e34:	469a      	mov	sl, r3
 8033e36:	462a      	mov	r2, r5
 8033e38:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033e3c:	9201      	str	r2, [sp, #4]
 8033e3e:	f1a3 0220 	sub.w	r2, r3, #32
 8033e42:	2a5a      	cmp	r2, #90	; 0x5a
 8033e44:	f200 831c 	bhi.w	8034480 <_vfiprintf_r+0x764>
 8033e48:	e8df f012 	tbh	[pc, r2, lsl #1]
 8033e4c:	031a007e 	.word	0x031a007e
 8033e50:	0086031a 	.word	0x0086031a
 8033e54:	031a031a 	.word	0x031a031a
 8033e58:	0065031a 	.word	0x0065031a
 8033e5c:	031a031a 	.word	0x031a031a
 8033e60:	00930089 	.word	0x00930089
 8033e64:	0090031a 	.word	0x0090031a
 8033e68:	031a0095 	.word	0x031a0095
 8033e6c:	00b300b0 	.word	0x00b300b0
 8033e70:	00b300b3 	.word	0x00b300b3
 8033e74:	00b300b3 	.word	0x00b300b3
 8033e78:	00b300b3 	.word	0x00b300b3
 8033e7c:	00b300b3 	.word	0x00b300b3
 8033e80:	031a031a 	.word	0x031a031a
 8033e84:	031a031a 	.word	0x031a031a
 8033e88:	031a031a 	.word	0x031a031a
 8033e8c:	031a031a 	.word	0x031a031a
 8033e90:	00dd031a 	.word	0x00dd031a
 8033e94:	031a00eb 	.word	0x031a00eb
 8033e98:	031a031a 	.word	0x031a031a
 8033e9c:	031a031a 	.word	0x031a031a
 8033ea0:	031a031a 	.word	0x031a031a
 8033ea4:	031a031a 	.word	0x031a031a
 8033ea8:	013b031a 	.word	0x013b031a
 8033eac:	031a031a 	.word	0x031a031a
 8033eb0:	0180031a 	.word	0x0180031a
 8033eb4:	025e031a 	.word	0x025e031a
 8033eb8:	031a031a 	.word	0x031a031a
 8033ebc:	031a027e 	.word	0x031a027e
 8033ec0:	031a031a 	.word	0x031a031a
 8033ec4:	031a031a 	.word	0x031a031a
 8033ec8:	031a031a 	.word	0x031a031a
 8033ecc:	031a031a 	.word	0x031a031a
 8033ed0:	00dd031a 	.word	0x00dd031a
 8033ed4:	031a00ed 	.word	0x031a00ed
 8033ed8:	031a031a 	.word	0x031a031a
 8033edc:	00ed00c3 	.word	0x00ed00c3
 8033ee0:	031a00d7 	.word	0x031a00d7
 8033ee4:	031a00d0 	.word	0x031a00d0
 8033ee8:	013d0119 	.word	0x013d0119
 8033eec:	00d70172 	.word	0x00d70172
 8033ef0:	0180031a 	.word	0x0180031a
 8033ef4:	0260007c 	.word	0x0260007c
 8033ef8:	031a031a 	.word	0x031a031a
 8033efc:	031a029a 	.word	0x031a029a
 8033f00:	007c      	.short	0x007c
 8033f02:	aa0e      	add	r2, sp, #56	; 0x38
 8033f04:	4639      	mov	r1, r7
 8033f06:	4648      	mov	r0, r9
 8033f08:	f7ff fed6 	bl	8033cb8 <__sprint_r>
 8033f0c:	2800      	cmp	r0, #0
 8033f0e:	f040 8338 	bne.w	8034582 <_vfiprintf_r+0x866>
 8033f12:	ae11      	add	r6, sp, #68	; 0x44
 8033f14:	e77f      	b.n	8033e16 <_vfiprintf_r+0xfa>
 8033f16:	4648      	mov	r0, r9
 8033f18:	f000 ff1e 	bl	8034d58 <_localeconv_r>
 8033f1c:	6843      	ldr	r3, [r0, #4]
 8033f1e:	4618      	mov	r0, r3
 8033f20:	ee08 3a10 	vmov	s16, r3
 8033f24:	f7ee f954 	bl	80221d0 <strlen>
 8033f28:	9007      	str	r0, [sp, #28]
 8033f2a:	4648      	mov	r0, r9
 8033f2c:	f000 ff14 	bl	8034d58 <_localeconv_r>
 8033f30:	6883      	ldr	r3, [r0, #8]
 8033f32:	9306      	str	r3, [sp, #24]
 8033f34:	9b07      	ldr	r3, [sp, #28]
 8033f36:	b12b      	cbz	r3, 8033f44 <_vfiprintf_r+0x228>
 8033f38:	9b06      	ldr	r3, [sp, #24]
 8033f3a:	b11b      	cbz	r3, 8033f44 <_vfiprintf_r+0x228>
 8033f3c:	781b      	ldrb	r3, [r3, #0]
 8033f3e:	b10b      	cbz	r3, 8033f44 <_vfiprintf_r+0x228>
 8033f40:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8033f44:	9d01      	ldr	r5, [sp, #4]
 8033f46:	e776      	b.n	8033e36 <_vfiprintf_r+0x11a>
 8033f48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8033f4c:	2b00      	cmp	r3, #0
 8033f4e:	d1f9      	bne.n	8033f44 <_vfiprintf_r+0x228>
 8033f50:	2320      	movs	r3, #32
 8033f52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8033f56:	e7f5      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033f58:	f04a 0a01 	orr.w	sl, sl, #1
 8033f5c:	e7f2      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033f5e:	f854 3b04 	ldr.w	r3, [r4], #4
 8033f62:	9303      	str	r3, [sp, #12]
 8033f64:	2b00      	cmp	r3, #0
 8033f66:	daed      	bge.n	8033f44 <_vfiprintf_r+0x228>
 8033f68:	425b      	negs	r3, r3
 8033f6a:	9303      	str	r3, [sp, #12]
 8033f6c:	f04a 0a04 	orr.w	sl, sl, #4
 8033f70:	e7e8      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033f72:	232b      	movs	r3, #43	; 0x2b
 8033f74:	e7ed      	b.n	8033f52 <_vfiprintf_r+0x236>
 8033f76:	9a01      	ldr	r2, [sp, #4]
 8033f78:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8033f7e:	d112      	bne.n	8033fa6 <_vfiprintf_r+0x28a>
 8033f80:	f854 3b04 	ldr.w	r3, [r4], #4
 8033f84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8033f88:	e9cd 3200 	strd	r3, r2, [sp]
 8033f8c:	e7da      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033f8e:	9b00      	ldr	r3, [sp, #0]
 8033f90:	200a      	movs	r0, #10
 8033f92:	fb00 1303 	mla	r3, r0, r3, r1
 8033f96:	9300      	str	r3, [sp, #0]
 8033f98:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033f9c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8033fa0:	2909      	cmp	r1, #9
 8033fa2:	d9f4      	bls.n	8033f8e <_vfiprintf_r+0x272>
 8033fa4:	e74a      	b.n	8033e3c <_vfiprintf_r+0x120>
 8033fa6:	2100      	movs	r1, #0
 8033fa8:	9100      	str	r1, [sp, #0]
 8033faa:	e7f7      	b.n	8033f9c <_vfiprintf_r+0x280>
 8033fac:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8033fb0:	e7c8      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033fb2:	2100      	movs	r1, #0
 8033fb4:	9a01      	ldr	r2, [sp, #4]
 8033fb6:	9103      	str	r1, [sp, #12]
 8033fb8:	9903      	ldr	r1, [sp, #12]
 8033fba:	3b30      	subs	r3, #48	; 0x30
 8033fbc:	200a      	movs	r0, #10
 8033fbe:	fb00 3301 	mla	r3, r0, r1, r3
 8033fc2:	9303      	str	r3, [sp, #12]
 8033fc4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8033fc8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8033fcc:	2909      	cmp	r1, #9
 8033fce:	d9f3      	bls.n	8033fb8 <_vfiprintf_r+0x29c>
 8033fd0:	e734      	b.n	8033e3c <_vfiprintf_r+0x120>
 8033fd2:	9b01      	ldr	r3, [sp, #4]
 8033fd4:	781b      	ldrb	r3, [r3, #0]
 8033fd6:	2b68      	cmp	r3, #104	; 0x68
 8033fd8:	bf01      	itttt	eq
 8033fda:	9b01      	ldreq	r3, [sp, #4]
 8033fdc:	3301      	addeq	r3, #1
 8033fde:	9301      	streq	r3, [sp, #4]
 8033fe0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8033fe4:	bf18      	it	ne
 8033fe6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8033fea:	e7ab      	b.n	8033f44 <_vfiprintf_r+0x228>
 8033fec:	9b01      	ldr	r3, [sp, #4]
 8033fee:	781b      	ldrb	r3, [r3, #0]
 8033ff0:	2b6c      	cmp	r3, #108	; 0x6c
 8033ff2:	d105      	bne.n	8034000 <_vfiprintf_r+0x2e4>
 8033ff4:	9b01      	ldr	r3, [sp, #4]
 8033ff6:	3301      	adds	r3, #1
 8033ff8:	9301      	str	r3, [sp, #4]
 8033ffa:	f04a 0a20 	orr.w	sl, sl, #32
 8033ffe:	e7a1      	b.n	8033f44 <_vfiprintf_r+0x228>
 8034000:	f04a 0a10 	orr.w	sl, sl, #16
 8034004:	e79e      	b.n	8033f44 <_vfiprintf_r+0x228>
 8034006:	46a0      	mov	r8, r4
 8034008:	f858 3b04 	ldr.w	r3, [r8], #4
 803400c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8034010:	2300      	movs	r3, #0
 8034012:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8034016:	2201      	movs	r2, #1
 8034018:	9200      	str	r2, [sp, #0]
 803401a:	461d      	mov	r5, r3
 803401c:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 8034020:	e0a9      	b.n	8034176 <_vfiprintf_r+0x45a>
 8034022:	f04a 0a10 	orr.w	sl, sl, #16
 8034026:	f01a 0f20 	tst.w	sl, #32
 803402a:	d011      	beq.n	8034050 <_vfiprintf_r+0x334>
 803402c:	3407      	adds	r4, #7
 803402e:	f024 0307 	bic.w	r3, r4, #7
 8034032:	4698      	mov	r8, r3
 8034034:	685d      	ldr	r5, [r3, #4]
 8034036:	f858 4b08 	ldr.w	r4, [r8], #8
 803403a:	2d00      	cmp	r5, #0
 803403c:	da06      	bge.n	803404c <_vfiprintf_r+0x330>
 803403e:	4264      	negs	r4, r4
 8034040:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8034044:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8034048:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 803404c:	2301      	movs	r3, #1
 803404e:	e04a      	b.n	80340e6 <_vfiprintf_r+0x3ca>
 8034050:	46a0      	mov	r8, r4
 8034052:	f01a 0f10 	tst.w	sl, #16
 8034056:	f858 5b04 	ldr.w	r5, [r8], #4
 803405a:	d002      	beq.n	8034062 <_vfiprintf_r+0x346>
 803405c:	462c      	mov	r4, r5
 803405e:	17ed      	asrs	r5, r5, #31
 8034060:	e7eb      	b.n	803403a <_vfiprintf_r+0x31e>
 8034062:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8034066:	d003      	beq.n	8034070 <_vfiprintf_r+0x354>
 8034068:	b22c      	sxth	r4, r5
 803406a:	f345 35c0 	sbfx	r5, r5, #15, #1
 803406e:	e7e4      	b.n	803403a <_vfiprintf_r+0x31e>
 8034070:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8034074:	d0f2      	beq.n	803405c <_vfiprintf_r+0x340>
 8034076:	b26c      	sxtb	r4, r5
 8034078:	f345 15c0 	sbfx	r5, r5, #7, #1
 803407c:	e7dd      	b.n	803403a <_vfiprintf_r+0x31e>
 803407e:	f01a 0f20 	tst.w	sl, #32
 8034082:	f104 0804 	add.w	r8, r4, #4
 8034086:	d007      	beq.n	8034098 <_vfiprintf_r+0x37c>
 8034088:	9a02      	ldr	r2, [sp, #8]
 803408a:	6823      	ldr	r3, [r4, #0]
 803408c:	9902      	ldr	r1, [sp, #8]
 803408e:	17d2      	asrs	r2, r2, #31
 8034090:	e9c3 1200 	strd	r1, r2, [r3]
 8034094:	4644      	mov	r4, r8
 8034096:	e6a8      	b.n	8033dea <_vfiprintf_r+0xce>
 8034098:	f01a 0f10 	tst.w	sl, #16
 803409c:	d003      	beq.n	80340a6 <_vfiprintf_r+0x38a>
 803409e:	6823      	ldr	r3, [r4, #0]
 80340a0:	9a02      	ldr	r2, [sp, #8]
 80340a2:	601a      	str	r2, [r3, #0]
 80340a4:	e7f6      	b.n	8034094 <_vfiprintf_r+0x378>
 80340a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80340aa:	d003      	beq.n	80340b4 <_vfiprintf_r+0x398>
 80340ac:	6823      	ldr	r3, [r4, #0]
 80340ae:	9a02      	ldr	r2, [sp, #8]
 80340b0:	801a      	strh	r2, [r3, #0]
 80340b2:	e7ef      	b.n	8034094 <_vfiprintf_r+0x378>
 80340b4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80340b8:	d0f1      	beq.n	803409e <_vfiprintf_r+0x382>
 80340ba:	6823      	ldr	r3, [r4, #0]
 80340bc:	9a02      	ldr	r2, [sp, #8]
 80340be:	701a      	strb	r2, [r3, #0]
 80340c0:	e7e8      	b.n	8034094 <_vfiprintf_r+0x378>
 80340c2:	f04a 0a10 	orr.w	sl, sl, #16
 80340c6:	f01a 0320 	ands.w	r3, sl, #32
 80340ca:	d01f      	beq.n	803410c <_vfiprintf_r+0x3f0>
 80340cc:	3407      	adds	r4, #7
 80340ce:	f024 0307 	bic.w	r3, r4, #7
 80340d2:	4698      	mov	r8, r3
 80340d4:	685d      	ldr	r5, [r3, #4]
 80340d6:	f858 4b08 	ldr.w	r4, [r8], #8
 80340da:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80340de:	2300      	movs	r3, #0
 80340e0:	2200      	movs	r2, #0
 80340e2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80340e6:	9a00      	ldr	r2, [sp, #0]
 80340e8:	3201      	adds	r2, #1
 80340ea:	f000 8278 	beq.w	80345de <_vfiprintf_r+0x8c2>
 80340ee:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80340f2:	9204      	str	r2, [sp, #16]
 80340f4:	ea54 0205 	orrs.w	r2, r4, r5
 80340f8:	f040 8277 	bne.w	80345ea <_vfiprintf_r+0x8ce>
 80340fc:	9a00      	ldr	r2, [sp, #0]
 80340fe:	2a00      	cmp	r2, #0
 8034100:	f000 81b3 	beq.w	803446a <_vfiprintf_r+0x74e>
 8034104:	2b01      	cmp	r3, #1
 8034106:	f040 8273 	bne.w	80345f0 <_vfiprintf_r+0x8d4>
 803410a:	e151      	b.n	80343b0 <_vfiprintf_r+0x694>
 803410c:	46a0      	mov	r8, r4
 803410e:	f01a 0510 	ands.w	r5, sl, #16
 8034112:	f858 4b04 	ldr.w	r4, [r8], #4
 8034116:	d001      	beq.n	803411c <_vfiprintf_r+0x400>
 8034118:	461d      	mov	r5, r3
 803411a:	e7de      	b.n	80340da <_vfiprintf_r+0x3be>
 803411c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8034120:	d001      	beq.n	8034126 <_vfiprintf_r+0x40a>
 8034122:	b2a4      	uxth	r4, r4
 8034124:	e7d9      	b.n	80340da <_vfiprintf_r+0x3be>
 8034126:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 803412a:	d0d6      	beq.n	80340da <_vfiprintf_r+0x3be>
 803412c:	b2e4      	uxtb	r4, r4
 803412e:	e7f3      	b.n	8034118 <_vfiprintf_r+0x3fc>
 8034130:	46a0      	mov	r8, r4
 8034132:	f647 0330 	movw	r3, #30768	; 0x7830
 8034136:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 803413a:	f858 4b04 	ldr.w	r4, [r8], #4
 803413e:	4b9f      	ldr	r3, [pc, #636]	; (80343bc <_vfiprintf_r+0x6a0>)
 8034140:	9305      	str	r3, [sp, #20]
 8034142:	2500      	movs	r5, #0
 8034144:	f04a 0a02 	orr.w	sl, sl, #2
 8034148:	2302      	movs	r3, #2
 803414a:	e7c9      	b.n	80340e0 <_vfiprintf_r+0x3c4>
 803414c:	9b00      	ldr	r3, [sp, #0]
 803414e:	46a0      	mov	r8, r4
 8034150:	2500      	movs	r5, #0
 8034152:	1c5c      	adds	r4, r3, #1
 8034154:	f858 bb04 	ldr.w	fp, [r8], #4
 8034158:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 803415c:	f000 80cf 	beq.w	80342fe <_vfiprintf_r+0x5e2>
 8034160:	461a      	mov	r2, r3
 8034162:	4629      	mov	r1, r5
 8034164:	4658      	mov	r0, fp
 8034166:	f7ee f83b 	bl	80221e0 <memchr>
 803416a:	2800      	cmp	r0, #0
 803416c:	f000 8192 	beq.w	8034494 <_vfiprintf_r+0x778>
 8034170:	eba0 030b 	sub.w	r3, r0, fp
 8034174:	9300      	str	r3, [sp, #0]
 8034176:	9b00      	ldr	r3, [sp, #0]
 8034178:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 803417c:	42ab      	cmp	r3, r5
 803417e:	bfb8      	it	lt
 8034180:	462b      	movlt	r3, r5
 8034182:	9304      	str	r3, [sp, #16]
 8034184:	b10a      	cbz	r2, 803418a <_vfiprintf_r+0x46e>
 8034186:	3301      	adds	r3, #1
 8034188:	9304      	str	r3, [sp, #16]
 803418a:	f01a 0302 	ands.w	r3, sl, #2
 803418e:	9308      	str	r3, [sp, #32]
 8034190:	bf1e      	ittt	ne
 8034192:	9b04      	ldrne	r3, [sp, #16]
 8034194:	3302      	addne	r3, #2
 8034196:	9304      	strne	r3, [sp, #16]
 8034198:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 803419c:	9309      	str	r3, [sp, #36]	; 0x24
 803419e:	d11f      	bne.n	80341e0 <_vfiprintf_r+0x4c4>
 80341a0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80341a4:	1a9c      	subs	r4, r3, r2
 80341a6:	2c00      	cmp	r4, #0
 80341a8:	dd1a      	ble.n	80341e0 <_vfiprintf_r+0x4c4>
 80341aa:	4b85      	ldr	r3, [pc, #532]	; (80343c0 <_vfiprintf_r+0x6a4>)
 80341ac:	6033      	str	r3, [r6, #0]
 80341ae:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 80341b2:	2c10      	cmp	r4, #16
 80341b4:	f102 0201 	add.w	r2, r2, #1
 80341b8:	f106 0008 	add.w	r0, r6, #8
 80341bc:	f300 816c 	bgt.w	8034498 <_vfiprintf_r+0x77c>
 80341c0:	6074      	str	r4, [r6, #4]
 80341c2:	2a07      	cmp	r2, #7
 80341c4:	4464      	add	r4, ip
 80341c6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 80341ca:	f340 8178 	ble.w	80344be <_vfiprintf_r+0x7a2>
 80341ce:	aa0e      	add	r2, sp, #56	; 0x38
 80341d0:	4639      	mov	r1, r7
 80341d2:	4648      	mov	r0, r9
 80341d4:	f7ff fd70 	bl	8033cb8 <__sprint_r>
 80341d8:	2800      	cmp	r0, #0
 80341da:	f040 81d2 	bne.w	8034582 <_vfiprintf_r+0x866>
 80341de:	ae11      	add	r6, sp, #68	; 0x44
 80341e0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80341e4:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80341e8:	b160      	cbz	r0, 8034204 <_vfiprintf_r+0x4e8>
 80341ea:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 80341ee:	3201      	adds	r2, #1
 80341f0:	6030      	str	r0, [r6, #0]
 80341f2:	2001      	movs	r0, #1
 80341f4:	4401      	add	r1, r0
 80341f6:	2a07      	cmp	r2, #7
 80341f8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80341fc:	6070      	str	r0, [r6, #4]
 80341fe:	f300 8160 	bgt.w	80344c2 <_vfiprintf_r+0x7a6>
 8034202:	3608      	adds	r6, #8
 8034204:	9b08      	ldr	r3, [sp, #32]
 8034206:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 803420a:	b15b      	cbz	r3, 8034224 <_vfiprintf_r+0x508>
 803420c:	a80d      	add	r0, sp, #52	; 0x34
 803420e:	3201      	adds	r2, #1
 8034210:	6030      	str	r0, [r6, #0]
 8034212:	2002      	movs	r0, #2
 8034214:	4401      	add	r1, r0
 8034216:	2a07      	cmp	r2, #7
 8034218:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 803421c:	6070      	str	r0, [r6, #4]
 803421e:	f300 8159 	bgt.w	80344d4 <_vfiprintf_r+0x7b8>
 8034222:	3608      	adds	r6, #8
 8034224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8034226:	2b80      	cmp	r3, #128	; 0x80
 8034228:	d11f      	bne.n	803426a <_vfiprintf_r+0x54e>
 803422a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 803422e:	1a9c      	subs	r4, r3, r2
 8034230:	2c00      	cmp	r4, #0
 8034232:	dd1a      	ble.n	803426a <_vfiprintf_r+0x54e>
 8034234:	4b63      	ldr	r3, [pc, #396]	; (80343c4 <_vfiprintf_r+0x6a8>)
 8034236:	6033      	str	r3, [r6, #0]
 8034238:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 803423c:	2c10      	cmp	r4, #16
 803423e:	f102 0201 	add.w	r2, r2, #1
 8034242:	f106 0008 	add.w	r0, r6, #8
 8034246:	f300 814e 	bgt.w	80344e6 <_vfiprintf_r+0x7ca>
 803424a:	6074      	str	r4, [r6, #4]
 803424c:	2a07      	cmp	r2, #7
 803424e:	4464      	add	r4, ip
 8034250:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8034254:	f340 815a 	ble.w	803450c <_vfiprintf_r+0x7f0>
 8034258:	aa0e      	add	r2, sp, #56	; 0x38
 803425a:	4639      	mov	r1, r7
 803425c:	4648      	mov	r0, r9
 803425e:	f7ff fd2b 	bl	8033cb8 <__sprint_r>
 8034262:	2800      	cmp	r0, #0
 8034264:	f040 818d 	bne.w	8034582 <_vfiprintf_r+0x866>
 8034268:	ae11      	add	r6, sp, #68	; 0x44
 803426a:	9b00      	ldr	r3, [sp, #0]
 803426c:	1aec      	subs	r4, r5, r3
 803426e:	2c00      	cmp	r4, #0
 8034270:	dd1b      	ble.n	80342aa <_vfiprintf_r+0x58e>
 8034272:	4d54      	ldr	r5, [pc, #336]	; (80343c4 <_vfiprintf_r+0x6a8>)
 8034274:	2310      	movs	r3, #16
 8034276:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 803427a:	2c10      	cmp	r4, #16
 803427c:	f102 0201 	add.w	r2, r2, #1
 8034280:	f106 0008 	add.w	r0, r6, #8
 8034284:	6035      	str	r5, [r6, #0]
 8034286:	f300 8143 	bgt.w	8034510 <_vfiprintf_r+0x7f4>
 803428a:	6074      	str	r4, [r6, #4]
 803428c:	2a07      	cmp	r2, #7
 803428e:	440c      	add	r4, r1
 8034290:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8034294:	f340 814d 	ble.w	8034532 <_vfiprintf_r+0x816>
 8034298:	aa0e      	add	r2, sp, #56	; 0x38
 803429a:	4639      	mov	r1, r7
 803429c:	4648      	mov	r0, r9
 803429e:	f7ff fd0b 	bl	8033cb8 <__sprint_r>
 80342a2:	2800      	cmp	r0, #0
 80342a4:	f040 816d 	bne.w	8034582 <_vfiprintf_r+0x866>
 80342a8:	ae11      	add	r6, sp, #68	; 0x44
 80342aa:	9b00      	ldr	r3, [sp, #0]
 80342ac:	9a00      	ldr	r2, [sp, #0]
 80342ae:	6073      	str	r3, [r6, #4]
 80342b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80342b2:	f8c6 b000 	str.w	fp, [r6]
 80342b6:	4413      	add	r3, r2
 80342b8:	9310      	str	r3, [sp, #64]	; 0x40
 80342ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80342bc:	3301      	adds	r3, #1
 80342be:	2b07      	cmp	r3, #7
 80342c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80342c2:	f300 8138 	bgt.w	8034536 <_vfiprintf_r+0x81a>
 80342c6:	f106 0308 	add.w	r3, r6, #8
 80342ca:	f01a 0f04 	tst.w	sl, #4
 80342ce:	f040 813a 	bne.w	8034546 <_vfiprintf_r+0x82a>
 80342d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80342d6:	9904      	ldr	r1, [sp, #16]
 80342d8:	428a      	cmp	r2, r1
 80342da:	bfac      	ite	ge
 80342dc:	189b      	addge	r3, r3, r2
 80342de:	185b      	addlt	r3, r3, r1
 80342e0:	9302      	str	r3, [sp, #8]
 80342e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80342e4:	b13b      	cbz	r3, 80342f6 <_vfiprintf_r+0x5da>
 80342e6:	aa0e      	add	r2, sp, #56	; 0x38
 80342e8:	4639      	mov	r1, r7
 80342ea:	4648      	mov	r0, r9
 80342ec:	f7ff fce4 	bl	8033cb8 <__sprint_r>
 80342f0:	2800      	cmp	r0, #0
 80342f2:	f040 8146 	bne.w	8034582 <_vfiprintf_r+0x866>
 80342f6:	2300      	movs	r3, #0
 80342f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80342fa:	ae11      	add	r6, sp, #68	; 0x44
 80342fc:	e6ca      	b.n	8034094 <_vfiprintf_r+0x378>
 80342fe:	4658      	mov	r0, fp
 8034300:	f7ed ff66 	bl	80221d0 <strlen>
 8034304:	9000      	str	r0, [sp, #0]
 8034306:	e736      	b.n	8034176 <_vfiprintf_r+0x45a>
 8034308:	f04a 0a10 	orr.w	sl, sl, #16
 803430c:	f01a 0320 	ands.w	r3, sl, #32
 8034310:	d008      	beq.n	8034324 <_vfiprintf_r+0x608>
 8034312:	3407      	adds	r4, #7
 8034314:	f024 0307 	bic.w	r3, r4, #7
 8034318:	4698      	mov	r8, r3
 803431a:	685d      	ldr	r5, [r3, #4]
 803431c:	f858 4b08 	ldr.w	r4, [r8], #8
 8034320:	2301      	movs	r3, #1
 8034322:	e6dd      	b.n	80340e0 <_vfiprintf_r+0x3c4>
 8034324:	46a0      	mov	r8, r4
 8034326:	f01a 0510 	ands.w	r5, sl, #16
 803432a:	f858 4b04 	ldr.w	r4, [r8], #4
 803432e:	d001      	beq.n	8034334 <_vfiprintf_r+0x618>
 8034330:	461d      	mov	r5, r3
 8034332:	e7f5      	b.n	8034320 <_vfiprintf_r+0x604>
 8034334:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8034338:	d001      	beq.n	803433e <_vfiprintf_r+0x622>
 803433a:	b2a4      	uxth	r4, r4
 803433c:	e7f0      	b.n	8034320 <_vfiprintf_r+0x604>
 803433e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8034342:	d0ed      	beq.n	8034320 <_vfiprintf_r+0x604>
 8034344:	b2e4      	uxtb	r4, r4
 8034346:	e7f3      	b.n	8034330 <_vfiprintf_r+0x614>
 8034348:	4a1f      	ldr	r2, [pc, #124]	; (80343c8 <_vfiprintf_r+0x6ac>)
 803434a:	9205      	str	r2, [sp, #20]
 803434c:	f01a 0220 	ands.w	r2, sl, #32
 8034350:	d018      	beq.n	8034384 <_vfiprintf_r+0x668>
 8034352:	3407      	adds	r4, #7
 8034354:	f024 0207 	bic.w	r2, r4, #7
 8034358:	4690      	mov	r8, r2
 803435a:	6855      	ldr	r5, [r2, #4]
 803435c:	f858 4b08 	ldr.w	r4, [r8], #8
 8034360:	f01a 0f01 	tst.w	sl, #1
 8034364:	d009      	beq.n	803437a <_vfiprintf_r+0x65e>
 8034366:	ea54 0205 	orrs.w	r2, r4, r5
 803436a:	bf1f      	itttt	ne
 803436c:	2230      	movne	r2, #48	; 0x30
 803436e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8034372:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8034376:	f04a 0a02 	orrne.w	sl, sl, #2
 803437a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 803437e:	e6e3      	b.n	8034148 <_vfiprintf_r+0x42c>
 8034380:	4a0e      	ldr	r2, [pc, #56]	; (80343bc <_vfiprintf_r+0x6a0>)
 8034382:	e7e2      	b.n	803434a <_vfiprintf_r+0x62e>
 8034384:	46a0      	mov	r8, r4
 8034386:	f01a 0510 	ands.w	r5, sl, #16
 803438a:	f858 4b04 	ldr.w	r4, [r8], #4
 803438e:	d001      	beq.n	8034394 <_vfiprintf_r+0x678>
 8034390:	4615      	mov	r5, r2
 8034392:	e7e5      	b.n	8034360 <_vfiprintf_r+0x644>
 8034394:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8034398:	d001      	beq.n	803439e <_vfiprintf_r+0x682>
 803439a:	b2a4      	uxth	r4, r4
 803439c:	e7e0      	b.n	8034360 <_vfiprintf_r+0x644>
 803439e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80343a2:	d0dd      	beq.n	8034360 <_vfiprintf_r+0x644>
 80343a4:	b2e4      	uxtb	r4, r4
 80343a6:	e7f3      	b.n	8034390 <_vfiprintf_r+0x674>
 80343a8:	2c0a      	cmp	r4, #10
 80343aa:	f175 0300 	sbcs.w	r3, r5, #0
 80343ae:	d20d      	bcs.n	80343cc <_vfiprintf_r+0x6b0>
 80343b0:	3430      	adds	r4, #48	; 0x30
 80343b2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 80343b6:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 80343ba:	e135      	b.n	8034628 <_vfiprintf_r+0x90c>
 80343bc:	080375c4 	.word	0x080375c4
 80343c0:	08037608 	.word	0x08037608
 80343c4:	08037618 	.word	0x08037618
 80343c8:	080375d5 	.word	0x080375d5
 80343cc:	ab3a      	add	r3, sp, #232	; 0xe8
 80343ce:	9308      	str	r3, [sp, #32]
 80343d0:	9b04      	ldr	r3, [sp, #16]
 80343d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80343d6:	f04f 0a00 	mov.w	sl, #0
 80343da:	9309      	str	r3, [sp, #36]	; 0x24
 80343dc:	220a      	movs	r2, #10
 80343de:	2300      	movs	r3, #0
 80343e0:	4620      	mov	r0, r4
 80343e2:	4629      	mov	r1, r5
 80343e4:	f7ee fbe0 	bl	8022ba8 <__aeabi_uldivmod>
 80343e8:	9b08      	ldr	r3, [sp, #32]
 80343ea:	3230      	adds	r2, #48	; 0x30
 80343ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80343f0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80343f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80343f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80343fa:	f10a 0a01 	add.w	sl, sl, #1
 80343fe:	b1d3      	cbz	r3, 8034436 <_vfiprintf_r+0x71a>
 8034400:	9b06      	ldr	r3, [sp, #24]
 8034402:	781a      	ldrb	r2, [r3, #0]
 8034404:	4552      	cmp	r2, sl
 8034406:	d116      	bne.n	8034436 <_vfiprintf_r+0x71a>
 8034408:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 803440c:	d013      	beq.n	8034436 <_vfiprintf_r+0x71a>
 803440e:	2c0a      	cmp	r4, #10
 8034410:	f175 0200 	sbcs.w	r2, r5, #0
 8034414:	d30f      	bcc.n	8034436 <_vfiprintf_r+0x71a>
 8034416:	9b07      	ldr	r3, [sp, #28]
 8034418:	ebab 0b03 	sub.w	fp, fp, r3
 803441c:	461a      	mov	r2, r3
 803441e:	ee18 1a10 	vmov	r1, s16
 8034422:	4658      	mov	r0, fp
 8034424:	f000 fc7f 	bl	8034d26 <strncpy>
 8034428:	9b06      	ldr	r3, [sp, #24]
 803442a:	785a      	ldrb	r2, [r3, #1]
 803442c:	b16a      	cbz	r2, 803444a <_vfiprintf_r+0x72e>
 803442e:	3301      	adds	r3, #1
 8034430:	9306      	str	r3, [sp, #24]
 8034432:	f04f 0a00 	mov.w	sl, #0
 8034436:	2c0a      	cmp	r4, #10
 8034438:	f175 0500 	sbcs.w	r5, r5, #0
 803443c:	f0c0 80f4 	bcc.w	8034628 <_vfiprintf_r+0x90c>
 8034440:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8034444:	f8cd b020 	str.w	fp, [sp, #32]
 8034448:	e7c8      	b.n	80343dc <_vfiprintf_r+0x6c0>
 803444a:	4692      	mov	sl, r2
 803444c:	e7f3      	b.n	8034436 <_vfiprintf_r+0x71a>
 803444e:	f004 020f 	and.w	r2, r4, #15
 8034452:	9b05      	ldr	r3, [sp, #20]
 8034454:	0924      	lsrs	r4, r4, #4
 8034456:	5c9a      	ldrb	r2, [r3, r2]
 8034458:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 803445c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8034460:	092d      	lsrs	r5, r5, #4
 8034462:	ea54 0205 	orrs.w	r2, r4, r5
 8034466:	d1f2      	bne.n	803444e <_vfiprintf_r+0x732>
 8034468:	e0de      	b.n	8034628 <_vfiprintf_r+0x90c>
 803446a:	b933      	cbnz	r3, 803447a <_vfiprintf_r+0x75e>
 803446c:	f01a 0f01 	tst.w	sl, #1
 8034470:	d003      	beq.n	803447a <_vfiprintf_r+0x75e>
 8034472:	2330      	movs	r3, #48	; 0x30
 8034474:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8034478:	e79d      	b.n	80343b6 <_vfiprintf_r+0x69a>
 803447a:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 803447e:	e0d3      	b.n	8034628 <_vfiprintf_r+0x90c>
 8034480:	2b00      	cmp	r3, #0
 8034482:	f000 809f 	beq.w	80345c4 <_vfiprintf_r+0x8a8>
 8034486:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 803448a:	2300      	movs	r3, #0
 803448c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8034490:	46a0      	mov	r8, r4
 8034492:	e5c0      	b.n	8034016 <_vfiprintf_r+0x2fa>
 8034494:	4605      	mov	r5, r0
 8034496:	e66e      	b.n	8034176 <_vfiprintf_r+0x45a>
 8034498:	2110      	movs	r1, #16
 803449a:	6071      	str	r1, [r6, #4]
 803449c:	2a07      	cmp	r2, #7
 803449e:	4461      	add	r1, ip
 80344a0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80344a4:	dd08      	ble.n	80344b8 <_vfiprintf_r+0x79c>
 80344a6:	aa0e      	add	r2, sp, #56	; 0x38
 80344a8:	4639      	mov	r1, r7
 80344aa:	4648      	mov	r0, r9
 80344ac:	f7ff fc04 	bl	8033cb8 <__sprint_r>
 80344b0:	2800      	cmp	r0, #0
 80344b2:	d166      	bne.n	8034582 <_vfiprintf_r+0x866>
 80344b4:	4b60      	ldr	r3, [pc, #384]	; (8034638 <_vfiprintf_r+0x91c>)
 80344b6:	a811      	add	r0, sp, #68	; 0x44
 80344b8:	3c10      	subs	r4, #16
 80344ba:	4606      	mov	r6, r0
 80344bc:	e676      	b.n	80341ac <_vfiprintf_r+0x490>
 80344be:	4606      	mov	r6, r0
 80344c0:	e68e      	b.n	80341e0 <_vfiprintf_r+0x4c4>
 80344c2:	aa0e      	add	r2, sp, #56	; 0x38
 80344c4:	4639      	mov	r1, r7
 80344c6:	4648      	mov	r0, r9
 80344c8:	f7ff fbf6 	bl	8033cb8 <__sprint_r>
 80344cc:	2800      	cmp	r0, #0
 80344ce:	d158      	bne.n	8034582 <_vfiprintf_r+0x866>
 80344d0:	ae11      	add	r6, sp, #68	; 0x44
 80344d2:	e697      	b.n	8034204 <_vfiprintf_r+0x4e8>
 80344d4:	aa0e      	add	r2, sp, #56	; 0x38
 80344d6:	4639      	mov	r1, r7
 80344d8:	4648      	mov	r0, r9
 80344da:	f7ff fbed 	bl	8033cb8 <__sprint_r>
 80344de:	2800      	cmp	r0, #0
 80344e0:	d14f      	bne.n	8034582 <_vfiprintf_r+0x866>
 80344e2:	ae11      	add	r6, sp, #68	; 0x44
 80344e4:	e69e      	b.n	8034224 <_vfiprintf_r+0x508>
 80344e6:	2110      	movs	r1, #16
 80344e8:	6071      	str	r1, [r6, #4]
 80344ea:	2a07      	cmp	r2, #7
 80344ec:	4461      	add	r1, ip
 80344ee:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80344f2:	dd08      	ble.n	8034506 <_vfiprintf_r+0x7ea>
 80344f4:	aa0e      	add	r2, sp, #56	; 0x38
 80344f6:	4639      	mov	r1, r7
 80344f8:	4648      	mov	r0, r9
 80344fa:	f7ff fbdd 	bl	8033cb8 <__sprint_r>
 80344fe:	2800      	cmp	r0, #0
 8034500:	d13f      	bne.n	8034582 <_vfiprintf_r+0x866>
 8034502:	4b4e      	ldr	r3, [pc, #312]	; (803463c <_vfiprintf_r+0x920>)
 8034504:	a811      	add	r0, sp, #68	; 0x44
 8034506:	3c10      	subs	r4, #16
 8034508:	4606      	mov	r6, r0
 803450a:	e694      	b.n	8034236 <_vfiprintf_r+0x51a>
 803450c:	4606      	mov	r6, r0
 803450e:	e6ac      	b.n	803426a <_vfiprintf_r+0x54e>
 8034510:	3110      	adds	r1, #16
 8034512:	2a07      	cmp	r2, #7
 8034514:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8034518:	6073      	str	r3, [r6, #4]
 803451a:	dd07      	ble.n	803452c <_vfiprintf_r+0x810>
 803451c:	aa0e      	add	r2, sp, #56	; 0x38
 803451e:	4639      	mov	r1, r7
 8034520:	4648      	mov	r0, r9
 8034522:	f7ff fbc9 	bl	8033cb8 <__sprint_r>
 8034526:	bb60      	cbnz	r0, 8034582 <_vfiprintf_r+0x866>
 8034528:	a811      	add	r0, sp, #68	; 0x44
 803452a:	2310      	movs	r3, #16
 803452c:	3c10      	subs	r4, #16
 803452e:	4606      	mov	r6, r0
 8034530:	e6a1      	b.n	8034276 <_vfiprintf_r+0x55a>
 8034532:	4606      	mov	r6, r0
 8034534:	e6b9      	b.n	80342aa <_vfiprintf_r+0x58e>
 8034536:	aa0e      	add	r2, sp, #56	; 0x38
 8034538:	4639      	mov	r1, r7
 803453a:	4648      	mov	r0, r9
 803453c:	f7ff fbbc 	bl	8033cb8 <__sprint_r>
 8034540:	b9f8      	cbnz	r0, 8034582 <_vfiprintf_r+0x866>
 8034542:	ab11      	add	r3, sp, #68	; 0x44
 8034544:	e6c1      	b.n	80342ca <_vfiprintf_r+0x5ae>
 8034546:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 803454a:	1a54      	subs	r4, r2, r1
 803454c:	2c00      	cmp	r4, #0
 803454e:	f77f aec0 	ble.w	80342d2 <_vfiprintf_r+0x5b6>
 8034552:	4d39      	ldr	r5, [pc, #228]	; (8034638 <_vfiprintf_r+0x91c>)
 8034554:	2610      	movs	r6, #16
 8034556:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 803455a:	2c10      	cmp	r4, #16
 803455c:	f102 0201 	add.w	r2, r2, #1
 8034560:	601d      	str	r5, [r3, #0]
 8034562:	dc1d      	bgt.n	80345a0 <_vfiprintf_r+0x884>
 8034564:	605c      	str	r4, [r3, #4]
 8034566:	2a07      	cmp	r2, #7
 8034568:	440c      	add	r4, r1
 803456a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 803456e:	f77f aeb0 	ble.w	80342d2 <_vfiprintf_r+0x5b6>
 8034572:	aa0e      	add	r2, sp, #56	; 0x38
 8034574:	4639      	mov	r1, r7
 8034576:	4648      	mov	r0, r9
 8034578:	f7ff fb9e 	bl	8033cb8 <__sprint_r>
 803457c:	2800      	cmp	r0, #0
 803457e:	f43f aea8 	beq.w	80342d2 <_vfiprintf_r+0x5b6>
 8034582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8034584:	07d9      	lsls	r1, r3, #31
 8034586:	d405      	bmi.n	8034594 <_vfiprintf_r+0x878>
 8034588:	89bb      	ldrh	r3, [r7, #12]
 803458a:	059a      	lsls	r2, r3, #22
 803458c:	d402      	bmi.n	8034594 <_vfiprintf_r+0x878>
 803458e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8034590:	f7fd fda5 	bl	80320de <__retarget_lock_release_recursive>
 8034594:	89bb      	ldrh	r3, [r7, #12]
 8034596:	065b      	lsls	r3, r3, #25
 8034598:	f57f abf3 	bpl.w	8033d82 <_vfiprintf_r+0x66>
 803459c:	f7ff bbee 	b.w	8033d7c <_vfiprintf_r+0x60>
 80345a0:	3110      	adds	r1, #16
 80345a2:	2a07      	cmp	r2, #7
 80345a4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80345a8:	605e      	str	r6, [r3, #4]
 80345aa:	dc02      	bgt.n	80345b2 <_vfiprintf_r+0x896>
 80345ac:	3308      	adds	r3, #8
 80345ae:	3c10      	subs	r4, #16
 80345b0:	e7d1      	b.n	8034556 <_vfiprintf_r+0x83a>
 80345b2:	aa0e      	add	r2, sp, #56	; 0x38
 80345b4:	4639      	mov	r1, r7
 80345b6:	4648      	mov	r0, r9
 80345b8:	f7ff fb7e 	bl	8033cb8 <__sprint_r>
 80345bc:	2800      	cmp	r0, #0
 80345be:	d1e0      	bne.n	8034582 <_vfiprintf_r+0x866>
 80345c0:	ab11      	add	r3, sp, #68	; 0x44
 80345c2:	e7f4      	b.n	80345ae <_vfiprintf_r+0x892>
 80345c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80345c6:	b913      	cbnz	r3, 80345ce <_vfiprintf_r+0x8b2>
 80345c8:	2300      	movs	r3, #0
 80345ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80345cc:	e7d9      	b.n	8034582 <_vfiprintf_r+0x866>
 80345ce:	aa0e      	add	r2, sp, #56	; 0x38
 80345d0:	4639      	mov	r1, r7
 80345d2:	4648      	mov	r0, r9
 80345d4:	f7ff fb70 	bl	8033cb8 <__sprint_r>
 80345d8:	2800      	cmp	r0, #0
 80345da:	d0f5      	beq.n	80345c8 <_vfiprintf_r+0x8ac>
 80345dc:	e7d1      	b.n	8034582 <_vfiprintf_r+0x866>
 80345de:	ea54 0205 	orrs.w	r2, r4, r5
 80345e2:	f8cd a010 	str.w	sl, [sp, #16]
 80345e6:	f43f ad8d 	beq.w	8034104 <_vfiprintf_r+0x3e8>
 80345ea:	2b01      	cmp	r3, #1
 80345ec:	f43f aedc 	beq.w	80343a8 <_vfiprintf_r+0x68c>
 80345f0:	2b02      	cmp	r3, #2
 80345f2:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 80345f6:	f43f af2a 	beq.w	803444e <_vfiprintf_r+0x732>
 80345fa:	f004 0207 	and.w	r2, r4, #7
 80345fe:	08e4      	lsrs	r4, r4, #3
 8034600:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8034604:	08ed      	lsrs	r5, r5, #3
 8034606:	3230      	adds	r2, #48	; 0x30
 8034608:	ea54 0005 	orrs.w	r0, r4, r5
 803460c:	4659      	mov	r1, fp
 803460e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8034612:	d1f2      	bne.n	80345fa <_vfiprintf_r+0x8de>
 8034614:	9b04      	ldr	r3, [sp, #16]
 8034616:	07d8      	lsls	r0, r3, #31
 8034618:	d506      	bpl.n	8034628 <_vfiprintf_r+0x90c>
 803461a:	2a30      	cmp	r2, #48	; 0x30
 803461c:	d004      	beq.n	8034628 <_vfiprintf_r+0x90c>
 803461e:	2230      	movs	r2, #48	; 0x30
 8034620:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8034624:	f1a1 0b02 	sub.w	fp, r1, #2
 8034628:	ab3a      	add	r3, sp, #232	; 0xe8
 803462a:	eba3 030b 	sub.w	r3, r3, fp
 803462e:	9d00      	ldr	r5, [sp, #0]
 8034630:	f8dd a010 	ldr.w	sl, [sp, #16]
 8034634:	9300      	str	r3, [sp, #0]
 8034636:	e59e      	b.n	8034176 <_vfiprintf_r+0x45a>
 8034638:	08037608 	.word	0x08037608
 803463c:	08037618 	.word	0x08037618

08034640 <__sbprintf>:
 8034640:	b570      	push	{r4, r5, r6, lr}
 8034642:	460c      	mov	r4, r1
 8034644:	8989      	ldrh	r1, [r1, #12]
 8034646:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 803464a:	f021 0102 	bic.w	r1, r1, #2
 803464e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8034652:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8034654:	911b      	str	r1, [sp, #108]	; 0x6c
 8034656:	89e1      	ldrh	r1, [r4, #14]
 8034658:	f8ad 1016 	strh.w	r1, [sp, #22]
 803465c:	69e1      	ldr	r1, [r4, #28]
 803465e:	9109      	str	r1, [sp, #36]	; 0x24
 8034660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8034662:	910b      	str	r1, [sp, #44]	; 0x2c
 8034664:	a91c      	add	r1, sp, #112	; 0x70
 8034666:	9102      	str	r1, [sp, #8]
 8034668:	9106      	str	r1, [sp, #24]
 803466a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 803466e:	4606      	mov	r6, r0
 8034670:	9104      	str	r1, [sp, #16]
 8034672:	9107      	str	r1, [sp, #28]
 8034674:	a818      	add	r0, sp, #96	; 0x60
 8034676:	2100      	movs	r1, #0
 8034678:	e9cd 3200 	strd	r3, r2, [sp]
 803467c:	9108      	str	r1, [sp, #32]
 803467e:	f7fd fd2b 	bl	80320d8 <__retarget_lock_init_recursive>
 8034682:	e9dd 3200 	ldrd	r3, r2, [sp]
 8034686:	a902      	add	r1, sp, #8
 8034688:	4630      	mov	r0, r6
 803468a:	f7ff fb47 	bl	8033d1c <_vfiprintf_r>
 803468e:	1e05      	subs	r5, r0, #0
 8034690:	db07      	blt.n	80346a2 <__sbprintf+0x62>
 8034692:	a902      	add	r1, sp, #8
 8034694:	4630      	mov	r0, r6
 8034696:	f000 f8f9 	bl	803488c <_fflush_r>
 803469a:	2800      	cmp	r0, #0
 803469c:	bf18      	it	ne
 803469e:	f04f 35ff 	movne.w	r5, #4294967295
 80346a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80346a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80346a8:	065b      	lsls	r3, r3, #25
 80346aa:	bf42      	ittt	mi
 80346ac:	89a3      	ldrhmi	r3, [r4, #12]
 80346ae:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80346b2:	81a3      	strhmi	r3, [r4, #12]
 80346b4:	f7fd fd11 	bl	80320da <__retarget_lock_close_recursive>
 80346b8:	4628      	mov	r0, r5
 80346ba:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80346be:	bd70      	pop	{r4, r5, r6, pc}

080346c0 <_fclose_r>:
 80346c0:	b570      	push	{r4, r5, r6, lr}
 80346c2:	4606      	mov	r6, r0
 80346c4:	460c      	mov	r4, r1
 80346c6:	b911      	cbnz	r1, 80346ce <_fclose_r+0xe>
 80346c8:	2500      	movs	r5, #0
 80346ca:	4628      	mov	r0, r5
 80346cc:	bd70      	pop	{r4, r5, r6, pc}
 80346ce:	b118      	cbz	r0, 80346d8 <_fclose_r+0x18>
 80346d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80346d2:	b90b      	cbnz	r3, 80346d8 <_fclose_r+0x18>
 80346d4:	f7fd fbae 	bl	8031e34 <__sinit>
 80346d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80346da:	07d8      	lsls	r0, r3, #31
 80346dc:	d405      	bmi.n	80346ea <_fclose_r+0x2a>
 80346de:	89a3      	ldrh	r3, [r4, #12]
 80346e0:	0599      	lsls	r1, r3, #22
 80346e2:	d402      	bmi.n	80346ea <_fclose_r+0x2a>
 80346e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80346e6:	f7fd fcf9 	bl	80320dc <__retarget_lock_acquire_recursive>
 80346ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80346ee:	b93b      	cbnz	r3, 8034700 <_fclose_r+0x40>
 80346f0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80346f2:	f015 0501 	ands.w	r5, r5, #1
 80346f6:	d1e7      	bne.n	80346c8 <_fclose_r+0x8>
 80346f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80346fa:	f7fd fcf0 	bl	80320de <__retarget_lock_release_recursive>
 80346fe:	e7e4      	b.n	80346ca <_fclose_r+0xa>
 8034700:	4621      	mov	r1, r4
 8034702:	4630      	mov	r0, r6
 8034704:	f000 f834 	bl	8034770 <__sflush_r>
 8034708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 803470a:	4605      	mov	r5, r0
 803470c:	b133      	cbz	r3, 803471c <_fclose_r+0x5c>
 803470e:	69e1      	ldr	r1, [r4, #28]
 8034710:	4630      	mov	r0, r6
 8034712:	4798      	blx	r3
 8034714:	2800      	cmp	r0, #0
 8034716:	bfb8      	it	lt
 8034718:	f04f 35ff 	movlt.w	r5, #4294967295
 803471c:	89a3      	ldrh	r3, [r4, #12]
 803471e:	061a      	lsls	r2, r3, #24
 8034720:	d503      	bpl.n	803472a <_fclose_r+0x6a>
 8034722:	6921      	ldr	r1, [r4, #16]
 8034724:	4630      	mov	r0, r6
 8034726:	f7fd fd4d 	bl	80321c4 <_free_r>
 803472a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 803472c:	b141      	cbz	r1, 8034740 <_fclose_r+0x80>
 803472e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8034732:	4299      	cmp	r1, r3
 8034734:	d002      	beq.n	803473c <_fclose_r+0x7c>
 8034736:	4630      	mov	r0, r6
 8034738:	f7fd fd44 	bl	80321c4 <_free_r>
 803473c:	2300      	movs	r3, #0
 803473e:	6323      	str	r3, [r4, #48]	; 0x30
 8034740:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8034742:	b121      	cbz	r1, 803474e <_fclose_r+0x8e>
 8034744:	4630      	mov	r0, r6
 8034746:	f7fd fd3d 	bl	80321c4 <_free_r>
 803474a:	2300      	movs	r3, #0
 803474c:	6463      	str	r3, [r4, #68]	; 0x44
 803474e:	f7fd fb65 	bl	8031e1c <__sfp_lock_acquire>
 8034752:	2300      	movs	r3, #0
 8034754:	81a3      	strh	r3, [r4, #12]
 8034756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8034758:	07db      	lsls	r3, r3, #31
 803475a:	d402      	bmi.n	8034762 <_fclose_r+0xa2>
 803475c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803475e:	f7fd fcbe 	bl	80320de <__retarget_lock_release_recursive>
 8034762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8034764:	f7fd fcb9 	bl	80320da <__retarget_lock_close_recursive>
 8034768:	f7fd fb5e 	bl	8031e28 <__sfp_lock_release>
 803476c:	e7ad      	b.n	80346ca <_fclose_r+0xa>
	...

08034770 <__sflush_r>:
 8034770:	898b      	ldrh	r3, [r1, #12]
 8034772:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8034776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803477a:	4605      	mov	r5, r0
 803477c:	0718      	lsls	r0, r3, #28
 803477e:	460c      	mov	r4, r1
 8034780:	d45f      	bmi.n	8034842 <__sflush_r+0xd2>
 8034782:	684b      	ldr	r3, [r1, #4]
 8034784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8034788:	2b00      	cmp	r3, #0
 803478a:	818a      	strh	r2, [r1, #12]
 803478c:	dc05      	bgt.n	803479a <__sflush_r+0x2a>
 803478e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8034790:	2b00      	cmp	r3, #0
 8034792:	dc02      	bgt.n	803479a <__sflush_r+0x2a>
 8034794:	2000      	movs	r0, #0
 8034796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803479a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803479c:	2e00      	cmp	r6, #0
 803479e:	d0f9      	beq.n	8034794 <__sflush_r+0x24>
 80347a0:	2300      	movs	r3, #0
 80347a2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80347a6:	682f      	ldr	r7, [r5, #0]
 80347a8:	69e1      	ldr	r1, [r4, #28]
 80347aa:	602b      	str	r3, [r5, #0]
 80347ac:	d036      	beq.n	803481c <__sflush_r+0xac>
 80347ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80347b0:	89a3      	ldrh	r3, [r4, #12]
 80347b2:	075a      	lsls	r2, r3, #29
 80347b4:	d505      	bpl.n	80347c2 <__sflush_r+0x52>
 80347b6:	6863      	ldr	r3, [r4, #4]
 80347b8:	1ac0      	subs	r0, r0, r3
 80347ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80347bc:	b10b      	cbz	r3, 80347c2 <__sflush_r+0x52>
 80347be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80347c0:	1ac0      	subs	r0, r0, r3
 80347c2:	2300      	movs	r3, #0
 80347c4:	4602      	mov	r2, r0
 80347c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80347c8:	69e1      	ldr	r1, [r4, #28]
 80347ca:	4628      	mov	r0, r5
 80347cc:	47b0      	blx	r6
 80347ce:	1c43      	adds	r3, r0, #1
 80347d0:	89a3      	ldrh	r3, [r4, #12]
 80347d2:	d106      	bne.n	80347e2 <__sflush_r+0x72>
 80347d4:	6829      	ldr	r1, [r5, #0]
 80347d6:	291d      	cmp	r1, #29
 80347d8:	d82f      	bhi.n	803483a <__sflush_r+0xca>
 80347da:	4a2b      	ldr	r2, [pc, #172]	; (8034888 <__sflush_r+0x118>)
 80347dc:	410a      	asrs	r2, r1
 80347de:	07d6      	lsls	r6, r2, #31
 80347e0:	d42b      	bmi.n	803483a <__sflush_r+0xca>
 80347e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80347e6:	b21b      	sxth	r3, r3
 80347e8:	2200      	movs	r2, #0
 80347ea:	6062      	str	r2, [r4, #4]
 80347ec:	04d9      	lsls	r1, r3, #19
 80347ee:	6922      	ldr	r2, [r4, #16]
 80347f0:	81a3      	strh	r3, [r4, #12]
 80347f2:	6022      	str	r2, [r4, #0]
 80347f4:	d504      	bpl.n	8034800 <__sflush_r+0x90>
 80347f6:	1c42      	adds	r2, r0, #1
 80347f8:	d101      	bne.n	80347fe <__sflush_r+0x8e>
 80347fa:	682b      	ldr	r3, [r5, #0]
 80347fc:	b903      	cbnz	r3, 8034800 <__sflush_r+0x90>
 80347fe:	6520      	str	r0, [r4, #80]	; 0x50
 8034800:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8034802:	602f      	str	r7, [r5, #0]
 8034804:	2900      	cmp	r1, #0
 8034806:	d0c5      	beq.n	8034794 <__sflush_r+0x24>
 8034808:	f104 0340 	add.w	r3, r4, #64	; 0x40
 803480c:	4299      	cmp	r1, r3
 803480e:	d002      	beq.n	8034816 <__sflush_r+0xa6>
 8034810:	4628      	mov	r0, r5
 8034812:	f7fd fcd7 	bl	80321c4 <_free_r>
 8034816:	2000      	movs	r0, #0
 8034818:	6320      	str	r0, [r4, #48]	; 0x30
 803481a:	e7bc      	b.n	8034796 <__sflush_r+0x26>
 803481c:	2301      	movs	r3, #1
 803481e:	4628      	mov	r0, r5
 8034820:	47b0      	blx	r6
 8034822:	1c41      	adds	r1, r0, #1
 8034824:	d1c4      	bne.n	80347b0 <__sflush_r+0x40>
 8034826:	682b      	ldr	r3, [r5, #0]
 8034828:	2b00      	cmp	r3, #0
 803482a:	d0c1      	beq.n	80347b0 <__sflush_r+0x40>
 803482c:	2b1d      	cmp	r3, #29
 803482e:	d001      	beq.n	8034834 <__sflush_r+0xc4>
 8034830:	2b16      	cmp	r3, #22
 8034832:	d101      	bne.n	8034838 <__sflush_r+0xc8>
 8034834:	602f      	str	r7, [r5, #0]
 8034836:	e7ad      	b.n	8034794 <__sflush_r+0x24>
 8034838:	89a3      	ldrh	r3, [r4, #12]
 803483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803483e:	81a3      	strh	r3, [r4, #12]
 8034840:	e7a9      	b.n	8034796 <__sflush_r+0x26>
 8034842:	690f      	ldr	r7, [r1, #16]
 8034844:	2f00      	cmp	r7, #0
 8034846:	d0a5      	beq.n	8034794 <__sflush_r+0x24>
 8034848:	079b      	lsls	r3, r3, #30
 803484a:	680e      	ldr	r6, [r1, #0]
 803484c:	bf08      	it	eq
 803484e:	694b      	ldreq	r3, [r1, #20]
 8034850:	600f      	str	r7, [r1, #0]
 8034852:	bf18      	it	ne
 8034854:	2300      	movne	r3, #0
 8034856:	eba6 0807 	sub.w	r8, r6, r7
 803485a:	608b      	str	r3, [r1, #8]
 803485c:	f1b8 0f00 	cmp.w	r8, #0
 8034860:	dd98      	ble.n	8034794 <__sflush_r+0x24>
 8034862:	69e1      	ldr	r1, [r4, #28]
 8034864:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8034866:	4643      	mov	r3, r8
 8034868:	463a      	mov	r2, r7
 803486a:	4628      	mov	r0, r5
 803486c:	47b0      	blx	r6
 803486e:	2800      	cmp	r0, #0
 8034870:	dc06      	bgt.n	8034880 <__sflush_r+0x110>
 8034872:	89a3      	ldrh	r3, [r4, #12]
 8034874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034878:	81a3      	strh	r3, [r4, #12]
 803487a:	f04f 30ff 	mov.w	r0, #4294967295
 803487e:	e78a      	b.n	8034796 <__sflush_r+0x26>
 8034880:	4407      	add	r7, r0
 8034882:	eba8 0800 	sub.w	r8, r8, r0
 8034886:	e7e9      	b.n	803485c <__sflush_r+0xec>
 8034888:	dfbffffe 	.word	0xdfbffffe

0803488c <_fflush_r>:
 803488c:	b538      	push	{r3, r4, r5, lr}
 803488e:	460c      	mov	r4, r1
 8034890:	4605      	mov	r5, r0
 8034892:	b118      	cbz	r0, 803489c <_fflush_r+0x10>
 8034894:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8034896:	b90b      	cbnz	r3, 803489c <_fflush_r+0x10>
 8034898:	f7fd facc 	bl	8031e34 <__sinit>
 803489c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80348a0:	b1bb      	cbz	r3, 80348d2 <_fflush_r+0x46>
 80348a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80348a4:	07d0      	lsls	r0, r2, #31
 80348a6:	d404      	bmi.n	80348b2 <_fflush_r+0x26>
 80348a8:	0599      	lsls	r1, r3, #22
 80348aa:	d402      	bmi.n	80348b2 <_fflush_r+0x26>
 80348ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80348ae:	f7fd fc15 	bl	80320dc <__retarget_lock_acquire_recursive>
 80348b2:	4628      	mov	r0, r5
 80348b4:	4621      	mov	r1, r4
 80348b6:	f7ff ff5b 	bl	8034770 <__sflush_r>
 80348ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80348bc:	07da      	lsls	r2, r3, #31
 80348be:	4605      	mov	r5, r0
 80348c0:	d405      	bmi.n	80348ce <_fflush_r+0x42>
 80348c2:	89a3      	ldrh	r3, [r4, #12]
 80348c4:	059b      	lsls	r3, r3, #22
 80348c6:	d402      	bmi.n	80348ce <_fflush_r+0x42>
 80348c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80348ca:	f7fd fc08 	bl	80320de <__retarget_lock_release_recursive>
 80348ce:	4628      	mov	r0, r5
 80348d0:	bd38      	pop	{r3, r4, r5, pc}
 80348d2:	461d      	mov	r5, r3
 80348d4:	e7fb      	b.n	80348ce <_fflush_r+0x42>
	...

080348d8 <__sfvwrite_r>:
 80348d8:	6893      	ldr	r3, [r2, #8]
 80348da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80348de:	4606      	mov	r6, r0
 80348e0:	460c      	mov	r4, r1
 80348e2:	4691      	mov	r9, r2
 80348e4:	b91b      	cbnz	r3, 80348ee <__sfvwrite_r+0x16>
 80348e6:	2000      	movs	r0, #0
 80348e8:	b003      	add	sp, #12
 80348ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80348ee:	898b      	ldrh	r3, [r1, #12]
 80348f0:	0718      	lsls	r0, r3, #28
 80348f2:	d54f      	bpl.n	8034994 <__sfvwrite_r+0xbc>
 80348f4:	690b      	ldr	r3, [r1, #16]
 80348f6:	2b00      	cmp	r3, #0
 80348f8:	d04c      	beq.n	8034994 <__sfvwrite_r+0xbc>
 80348fa:	89a3      	ldrh	r3, [r4, #12]
 80348fc:	f8d9 8000 	ldr.w	r8, [r9]
 8034900:	f013 0702 	ands.w	r7, r3, #2
 8034904:	d16b      	bne.n	80349de <__sfvwrite_r+0x106>
 8034906:	f013 0301 	ands.w	r3, r3, #1
 803490a:	f000 809b 	beq.w	8034a44 <__sfvwrite_r+0x16c>
 803490e:	4638      	mov	r0, r7
 8034910:	46ba      	mov	sl, r7
 8034912:	46bb      	mov	fp, r7
 8034914:	f1bb 0f00 	cmp.w	fp, #0
 8034918:	f000 8102 	beq.w	8034b20 <__sfvwrite_r+0x248>
 803491c:	b950      	cbnz	r0, 8034934 <__sfvwrite_r+0x5c>
 803491e:	465a      	mov	r2, fp
 8034920:	210a      	movs	r1, #10
 8034922:	4650      	mov	r0, sl
 8034924:	f7ed fc5c 	bl	80221e0 <memchr>
 8034928:	2800      	cmp	r0, #0
 803492a:	f000 80ff 	beq.w	8034b2c <__sfvwrite_r+0x254>
 803492e:	3001      	adds	r0, #1
 8034930:	eba0 070a 	sub.w	r7, r0, sl
 8034934:	6820      	ldr	r0, [r4, #0]
 8034936:	6921      	ldr	r1, [r4, #16]
 8034938:	68a5      	ldr	r5, [r4, #8]
 803493a:	6963      	ldr	r3, [r4, #20]
 803493c:	455f      	cmp	r7, fp
 803493e:	463a      	mov	r2, r7
 8034940:	bf28      	it	cs
 8034942:	465a      	movcs	r2, fp
 8034944:	4288      	cmp	r0, r1
 8034946:	f240 80f4 	bls.w	8034b32 <__sfvwrite_r+0x25a>
 803494a:	441d      	add	r5, r3
 803494c:	42aa      	cmp	r2, r5
 803494e:	f340 80f0 	ble.w	8034b32 <__sfvwrite_r+0x25a>
 8034952:	4651      	mov	r1, sl
 8034954:	462a      	mov	r2, r5
 8034956:	f000 f9cc 	bl	8034cf2 <memmove>
 803495a:	6823      	ldr	r3, [r4, #0]
 803495c:	442b      	add	r3, r5
 803495e:	6023      	str	r3, [r4, #0]
 8034960:	4621      	mov	r1, r4
 8034962:	4630      	mov	r0, r6
 8034964:	f7ff ff92 	bl	803488c <_fflush_r>
 8034968:	2800      	cmp	r0, #0
 803496a:	d166      	bne.n	8034a3a <__sfvwrite_r+0x162>
 803496c:	1b7f      	subs	r7, r7, r5
 803496e:	f040 80f8 	bne.w	8034b62 <__sfvwrite_r+0x28a>
 8034972:	4621      	mov	r1, r4
 8034974:	4630      	mov	r0, r6
 8034976:	f7ff ff89 	bl	803488c <_fflush_r>
 803497a:	2800      	cmp	r0, #0
 803497c:	d15d      	bne.n	8034a3a <__sfvwrite_r+0x162>
 803497e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8034982:	1b5b      	subs	r3, r3, r5
 8034984:	44aa      	add	sl, r5
 8034986:	ebab 0b05 	sub.w	fp, fp, r5
 803498a:	f8c9 3008 	str.w	r3, [r9, #8]
 803498e:	2b00      	cmp	r3, #0
 8034990:	d1c0      	bne.n	8034914 <__sfvwrite_r+0x3c>
 8034992:	e7a8      	b.n	80348e6 <__sfvwrite_r+0xe>
 8034994:	4621      	mov	r1, r4
 8034996:	4630      	mov	r0, r6
 8034998:	f000 f8e8 	bl	8034b6c <__swsetup_r>
 803499c:	2800      	cmp	r0, #0
 803499e:	d0ac      	beq.n	80348fa <__sfvwrite_r+0x22>
 80349a0:	f04f 30ff 	mov.w	r0, #4294967295
 80349a4:	e7a0      	b.n	80348e8 <__sfvwrite_r+0x10>
 80349a6:	e9d8 a500 	ldrd	sl, r5, [r8]
 80349aa:	f108 0808 	add.w	r8, r8, #8
 80349ae:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80349b2:	69e1      	ldr	r1, [r4, #28]
 80349b4:	2d00      	cmp	r5, #0
 80349b6:	d0f6      	beq.n	80349a6 <__sfvwrite_r+0xce>
 80349b8:	42bd      	cmp	r5, r7
 80349ba:	462b      	mov	r3, r5
 80349bc:	4652      	mov	r2, sl
 80349be:	bf28      	it	cs
 80349c0:	463b      	movcs	r3, r7
 80349c2:	4630      	mov	r0, r6
 80349c4:	47d8      	blx	fp
 80349c6:	2800      	cmp	r0, #0
 80349c8:	dd37      	ble.n	8034a3a <__sfvwrite_r+0x162>
 80349ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80349ce:	1a1b      	subs	r3, r3, r0
 80349d0:	4482      	add	sl, r0
 80349d2:	1a2d      	subs	r5, r5, r0
 80349d4:	f8c9 3008 	str.w	r3, [r9, #8]
 80349d8:	2b00      	cmp	r3, #0
 80349da:	d1e8      	bne.n	80349ae <__sfvwrite_r+0xd6>
 80349dc:	e783      	b.n	80348e6 <__sfvwrite_r+0xe>
 80349de:	f04f 0a00 	mov.w	sl, #0
 80349e2:	4f61      	ldr	r7, [pc, #388]	; (8034b68 <__sfvwrite_r+0x290>)
 80349e4:	4655      	mov	r5, sl
 80349e6:	e7e2      	b.n	80349ae <__sfvwrite_r+0xd6>
 80349e8:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80349ec:	f108 0808 	add.w	r8, r8, #8
 80349f0:	6820      	ldr	r0, [r4, #0]
 80349f2:	68a2      	ldr	r2, [r4, #8]
 80349f4:	f1ba 0f00 	cmp.w	sl, #0
 80349f8:	d0f6      	beq.n	80349e8 <__sfvwrite_r+0x110>
 80349fa:	89a3      	ldrh	r3, [r4, #12]
 80349fc:	0599      	lsls	r1, r3, #22
 80349fe:	d563      	bpl.n	8034ac8 <__sfvwrite_r+0x1f0>
 8034a00:	4552      	cmp	r2, sl
 8034a02:	d836      	bhi.n	8034a72 <__sfvwrite_r+0x19a>
 8034a04:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8034a08:	d033      	beq.n	8034a72 <__sfvwrite_r+0x19a>
 8034a0a:	6921      	ldr	r1, [r4, #16]
 8034a0c:	6965      	ldr	r5, [r4, #20]
 8034a0e:	eba0 0b01 	sub.w	fp, r0, r1
 8034a12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8034a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8034a1a:	f10b 0201 	add.w	r2, fp, #1
 8034a1e:	106d      	asrs	r5, r5, #1
 8034a20:	4452      	add	r2, sl
 8034a22:	4295      	cmp	r5, r2
 8034a24:	bf38      	it	cc
 8034a26:	4615      	movcc	r5, r2
 8034a28:	055b      	lsls	r3, r3, #21
 8034a2a:	d53d      	bpl.n	8034aa8 <__sfvwrite_r+0x1d0>
 8034a2c:	4629      	mov	r1, r5
 8034a2e:	4630      	mov	r0, r6
 8034a30:	f7fd fc88 	bl	8032344 <_malloc_r>
 8034a34:	b948      	cbnz	r0, 8034a4a <__sfvwrite_r+0x172>
 8034a36:	230c      	movs	r3, #12
 8034a38:	6033      	str	r3, [r6, #0]
 8034a3a:	89a3      	ldrh	r3, [r4, #12]
 8034a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034a40:	81a3      	strh	r3, [r4, #12]
 8034a42:	e7ad      	b.n	80349a0 <__sfvwrite_r+0xc8>
 8034a44:	461f      	mov	r7, r3
 8034a46:	469a      	mov	sl, r3
 8034a48:	e7d2      	b.n	80349f0 <__sfvwrite_r+0x118>
 8034a4a:	465a      	mov	r2, fp
 8034a4c:	6921      	ldr	r1, [r4, #16]
 8034a4e:	9001      	str	r0, [sp, #4]
 8034a50:	f7fd fb46 	bl	80320e0 <memcpy>
 8034a54:	89a2      	ldrh	r2, [r4, #12]
 8034a56:	9b01      	ldr	r3, [sp, #4]
 8034a58:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8034a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8034a60:	81a2      	strh	r2, [r4, #12]
 8034a62:	6123      	str	r3, [r4, #16]
 8034a64:	6165      	str	r5, [r4, #20]
 8034a66:	445b      	add	r3, fp
 8034a68:	eba5 050b 	sub.w	r5, r5, fp
 8034a6c:	6023      	str	r3, [r4, #0]
 8034a6e:	4652      	mov	r2, sl
 8034a70:	60a5      	str	r5, [r4, #8]
 8034a72:	4552      	cmp	r2, sl
 8034a74:	bf28      	it	cs
 8034a76:	4652      	movcs	r2, sl
 8034a78:	6820      	ldr	r0, [r4, #0]
 8034a7a:	9201      	str	r2, [sp, #4]
 8034a7c:	4639      	mov	r1, r7
 8034a7e:	f000 f938 	bl	8034cf2 <memmove>
 8034a82:	68a3      	ldr	r3, [r4, #8]
 8034a84:	9a01      	ldr	r2, [sp, #4]
 8034a86:	1a9b      	subs	r3, r3, r2
 8034a88:	60a3      	str	r3, [r4, #8]
 8034a8a:	6823      	ldr	r3, [r4, #0]
 8034a8c:	4413      	add	r3, r2
 8034a8e:	4655      	mov	r5, sl
 8034a90:	6023      	str	r3, [r4, #0]
 8034a92:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8034a96:	1b5b      	subs	r3, r3, r5
 8034a98:	442f      	add	r7, r5
 8034a9a:	ebaa 0a05 	sub.w	sl, sl, r5
 8034a9e:	f8c9 3008 	str.w	r3, [r9, #8]
 8034aa2:	2b00      	cmp	r3, #0
 8034aa4:	d1a4      	bne.n	80349f0 <__sfvwrite_r+0x118>
 8034aa6:	e71e      	b.n	80348e6 <__sfvwrite_r+0xe>
 8034aa8:	462a      	mov	r2, r5
 8034aaa:	4630      	mov	r0, r6
 8034aac:	f001 fb9e 	bl	80361ec <_realloc_r>
 8034ab0:	4603      	mov	r3, r0
 8034ab2:	2800      	cmp	r0, #0
 8034ab4:	d1d5      	bne.n	8034a62 <__sfvwrite_r+0x18a>
 8034ab6:	6921      	ldr	r1, [r4, #16]
 8034ab8:	4630      	mov	r0, r6
 8034aba:	f7fd fb83 	bl	80321c4 <_free_r>
 8034abe:	89a3      	ldrh	r3, [r4, #12]
 8034ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034ac4:	81a3      	strh	r3, [r4, #12]
 8034ac6:	e7b6      	b.n	8034a36 <__sfvwrite_r+0x15e>
 8034ac8:	6923      	ldr	r3, [r4, #16]
 8034aca:	4283      	cmp	r3, r0
 8034acc:	d302      	bcc.n	8034ad4 <__sfvwrite_r+0x1fc>
 8034ace:	6961      	ldr	r1, [r4, #20]
 8034ad0:	4551      	cmp	r1, sl
 8034ad2:	d915      	bls.n	8034b00 <__sfvwrite_r+0x228>
 8034ad4:	4552      	cmp	r2, sl
 8034ad6:	bf28      	it	cs
 8034ad8:	4652      	movcs	r2, sl
 8034ada:	4639      	mov	r1, r7
 8034adc:	4615      	mov	r5, r2
 8034ade:	f000 f908 	bl	8034cf2 <memmove>
 8034ae2:	68a3      	ldr	r3, [r4, #8]
 8034ae4:	6822      	ldr	r2, [r4, #0]
 8034ae6:	1b5b      	subs	r3, r3, r5
 8034ae8:	442a      	add	r2, r5
 8034aea:	60a3      	str	r3, [r4, #8]
 8034aec:	6022      	str	r2, [r4, #0]
 8034aee:	2b00      	cmp	r3, #0
 8034af0:	d1cf      	bne.n	8034a92 <__sfvwrite_r+0x1ba>
 8034af2:	4621      	mov	r1, r4
 8034af4:	4630      	mov	r0, r6
 8034af6:	f7ff fec9 	bl	803488c <_fflush_r>
 8034afa:	2800      	cmp	r0, #0
 8034afc:	d0c9      	beq.n	8034a92 <__sfvwrite_r+0x1ba>
 8034afe:	e79c      	b.n	8034a3a <__sfvwrite_r+0x162>
 8034b00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8034b04:	459a      	cmp	sl, r3
 8034b06:	bf38      	it	cc
 8034b08:	4653      	movcc	r3, sl
 8034b0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8034b0c:	fb93 f3f1 	sdiv	r3, r3, r1
 8034b10:	463a      	mov	r2, r7
 8034b12:	434b      	muls	r3, r1
 8034b14:	4630      	mov	r0, r6
 8034b16:	69e1      	ldr	r1, [r4, #28]
 8034b18:	47a8      	blx	r5
 8034b1a:	1e05      	subs	r5, r0, #0
 8034b1c:	dcb9      	bgt.n	8034a92 <__sfvwrite_r+0x1ba>
 8034b1e:	e78c      	b.n	8034a3a <__sfvwrite_r+0x162>
 8034b20:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8034b24:	2000      	movs	r0, #0
 8034b26:	f108 0808 	add.w	r8, r8, #8
 8034b2a:	e6f3      	b.n	8034914 <__sfvwrite_r+0x3c>
 8034b2c:	f10b 0701 	add.w	r7, fp, #1
 8034b30:	e700      	b.n	8034934 <__sfvwrite_r+0x5c>
 8034b32:	4293      	cmp	r3, r2
 8034b34:	dc08      	bgt.n	8034b48 <__sfvwrite_r+0x270>
 8034b36:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8034b38:	69e1      	ldr	r1, [r4, #28]
 8034b3a:	4652      	mov	r2, sl
 8034b3c:	4630      	mov	r0, r6
 8034b3e:	47a8      	blx	r5
 8034b40:	1e05      	subs	r5, r0, #0
 8034b42:	f73f af13 	bgt.w	803496c <__sfvwrite_r+0x94>
 8034b46:	e778      	b.n	8034a3a <__sfvwrite_r+0x162>
 8034b48:	4651      	mov	r1, sl
 8034b4a:	9201      	str	r2, [sp, #4]
 8034b4c:	f000 f8d1 	bl	8034cf2 <memmove>
 8034b50:	9a01      	ldr	r2, [sp, #4]
 8034b52:	68a3      	ldr	r3, [r4, #8]
 8034b54:	1a9b      	subs	r3, r3, r2
 8034b56:	60a3      	str	r3, [r4, #8]
 8034b58:	6823      	ldr	r3, [r4, #0]
 8034b5a:	4413      	add	r3, r2
 8034b5c:	6023      	str	r3, [r4, #0]
 8034b5e:	4615      	mov	r5, r2
 8034b60:	e704      	b.n	803496c <__sfvwrite_r+0x94>
 8034b62:	2001      	movs	r0, #1
 8034b64:	e70b      	b.n	803497e <__sfvwrite_r+0xa6>
 8034b66:	bf00      	nop
 8034b68:	7ffffc00 	.word	0x7ffffc00

08034b6c <__swsetup_r>:
 8034b6c:	b538      	push	{r3, r4, r5, lr}
 8034b6e:	4b2a      	ldr	r3, [pc, #168]	; (8034c18 <__swsetup_r+0xac>)
 8034b70:	4605      	mov	r5, r0
 8034b72:	6818      	ldr	r0, [r3, #0]
 8034b74:	460c      	mov	r4, r1
 8034b76:	b118      	cbz	r0, 8034b80 <__swsetup_r+0x14>
 8034b78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8034b7a:	b90b      	cbnz	r3, 8034b80 <__swsetup_r+0x14>
 8034b7c:	f7fd f95a 	bl	8031e34 <__sinit>
 8034b80:	89a3      	ldrh	r3, [r4, #12]
 8034b82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8034b86:	0718      	lsls	r0, r3, #28
 8034b88:	d422      	bmi.n	8034bd0 <__swsetup_r+0x64>
 8034b8a:	06d9      	lsls	r1, r3, #27
 8034b8c:	d407      	bmi.n	8034b9e <__swsetup_r+0x32>
 8034b8e:	2309      	movs	r3, #9
 8034b90:	602b      	str	r3, [r5, #0]
 8034b92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8034b96:	81a3      	strh	r3, [r4, #12]
 8034b98:	f04f 30ff 	mov.w	r0, #4294967295
 8034b9c:	e034      	b.n	8034c08 <__swsetup_r+0x9c>
 8034b9e:	0758      	lsls	r0, r3, #29
 8034ba0:	d512      	bpl.n	8034bc8 <__swsetup_r+0x5c>
 8034ba2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8034ba4:	b141      	cbz	r1, 8034bb8 <__swsetup_r+0x4c>
 8034ba6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8034baa:	4299      	cmp	r1, r3
 8034bac:	d002      	beq.n	8034bb4 <__swsetup_r+0x48>
 8034bae:	4628      	mov	r0, r5
 8034bb0:	f7fd fb08 	bl	80321c4 <_free_r>
 8034bb4:	2300      	movs	r3, #0
 8034bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8034bb8:	89a3      	ldrh	r3, [r4, #12]
 8034bba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8034bbe:	81a3      	strh	r3, [r4, #12]
 8034bc0:	2300      	movs	r3, #0
 8034bc2:	6063      	str	r3, [r4, #4]
 8034bc4:	6923      	ldr	r3, [r4, #16]
 8034bc6:	6023      	str	r3, [r4, #0]
 8034bc8:	89a3      	ldrh	r3, [r4, #12]
 8034bca:	f043 0308 	orr.w	r3, r3, #8
 8034bce:	81a3      	strh	r3, [r4, #12]
 8034bd0:	6923      	ldr	r3, [r4, #16]
 8034bd2:	b94b      	cbnz	r3, 8034be8 <__swsetup_r+0x7c>
 8034bd4:	89a3      	ldrh	r3, [r4, #12]
 8034bd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8034bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8034bde:	d003      	beq.n	8034be8 <__swsetup_r+0x7c>
 8034be0:	4621      	mov	r1, r4
 8034be2:	4628      	mov	r0, r5
 8034be4:	f001 fcf6 	bl	80365d4 <__smakebuf_r>
 8034be8:	89a0      	ldrh	r0, [r4, #12]
 8034bea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8034bee:	f010 0301 	ands.w	r3, r0, #1
 8034bf2:	d00a      	beq.n	8034c0a <__swsetup_r+0x9e>
 8034bf4:	2300      	movs	r3, #0
 8034bf6:	60a3      	str	r3, [r4, #8]
 8034bf8:	6963      	ldr	r3, [r4, #20]
 8034bfa:	425b      	negs	r3, r3
 8034bfc:	61a3      	str	r3, [r4, #24]
 8034bfe:	6923      	ldr	r3, [r4, #16]
 8034c00:	b943      	cbnz	r3, 8034c14 <__swsetup_r+0xa8>
 8034c02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8034c06:	d1c4      	bne.n	8034b92 <__swsetup_r+0x26>
 8034c08:	bd38      	pop	{r3, r4, r5, pc}
 8034c0a:	0781      	lsls	r1, r0, #30
 8034c0c:	bf58      	it	pl
 8034c0e:	6963      	ldrpl	r3, [r4, #20]
 8034c10:	60a3      	str	r3, [r4, #8]
 8034c12:	e7f4      	b.n	8034bfe <__swsetup_r+0x92>
 8034c14:	2000      	movs	r0, #0
 8034c16:	e7f7      	b.n	8034c08 <__swsetup_r+0x9c>
 8034c18:	200003a8 	.word	0x200003a8

08034c1c <__fputwc>:
 8034c1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8034c20:	4680      	mov	r8, r0
 8034c22:	460e      	mov	r6, r1
 8034c24:	4615      	mov	r5, r2
 8034c26:	f000 f891 	bl	8034d4c <__locale_mb_cur_max>
 8034c2a:	2801      	cmp	r0, #1
 8034c2c:	d11c      	bne.n	8034c68 <__fputwc+0x4c>
 8034c2e:	1e73      	subs	r3, r6, #1
 8034c30:	2bfe      	cmp	r3, #254	; 0xfe
 8034c32:	d819      	bhi.n	8034c68 <__fputwc+0x4c>
 8034c34:	f88d 6004 	strb.w	r6, [sp, #4]
 8034c38:	4604      	mov	r4, r0
 8034c3a:	2700      	movs	r7, #0
 8034c3c:	f10d 0904 	add.w	r9, sp, #4
 8034c40:	42a7      	cmp	r7, r4
 8034c42:	d020      	beq.n	8034c86 <__fputwc+0x6a>
 8034c44:	68ab      	ldr	r3, [r5, #8]
 8034c46:	f817 1009 	ldrb.w	r1, [r7, r9]
 8034c4a:	3b01      	subs	r3, #1
 8034c4c:	2b00      	cmp	r3, #0
 8034c4e:	60ab      	str	r3, [r5, #8]
 8034c50:	da04      	bge.n	8034c5c <__fputwc+0x40>
 8034c52:	69aa      	ldr	r2, [r5, #24]
 8034c54:	4293      	cmp	r3, r2
 8034c56:	db1a      	blt.n	8034c8e <__fputwc+0x72>
 8034c58:	290a      	cmp	r1, #10
 8034c5a:	d018      	beq.n	8034c8e <__fputwc+0x72>
 8034c5c:	682b      	ldr	r3, [r5, #0]
 8034c5e:	1c5a      	adds	r2, r3, #1
 8034c60:	602a      	str	r2, [r5, #0]
 8034c62:	7019      	strb	r1, [r3, #0]
 8034c64:	3701      	adds	r7, #1
 8034c66:	e7eb      	b.n	8034c40 <__fputwc+0x24>
 8034c68:	a901      	add	r1, sp, #4
 8034c6a:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8034c6e:	4632      	mov	r2, r6
 8034c70:	4640      	mov	r0, r8
 8034c72:	f001 fc71 	bl	8036558 <_wcrtomb_r>
 8034c76:	1c41      	adds	r1, r0, #1
 8034c78:	4604      	mov	r4, r0
 8034c7a:	d1de      	bne.n	8034c3a <__fputwc+0x1e>
 8034c7c:	89ab      	ldrh	r3, [r5, #12]
 8034c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034c82:	81ab      	strh	r3, [r5, #12]
 8034c84:	4606      	mov	r6, r0
 8034c86:	4630      	mov	r0, r6
 8034c88:	b003      	add	sp, #12
 8034c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034c8e:	462a      	mov	r2, r5
 8034c90:	4640      	mov	r0, r8
 8034c92:	f001 fcdb 	bl	803664c <__swbuf_r>
 8034c96:	1c42      	adds	r2, r0, #1
 8034c98:	d1e4      	bne.n	8034c64 <__fputwc+0x48>
 8034c9a:	4606      	mov	r6, r0
 8034c9c:	e7f3      	b.n	8034c86 <__fputwc+0x6a>

08034c9e <_fputwc_r>:
 8034c9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8034ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8034ca2:	4614      	mov	r4, r2
 8034ca4:	07da      	lsls	r2, r3, #31
 8034ca6:	4605      	mov	r5, r0
 8034ca8:	d407      	bmi.n	8034cba <_fputwc_r+0x1c>
 8034caa:	89a3      	ldrh	r3, [r4, #12]
 8034cac:	059b      	lsls	r3, r3, #22
 8034cae:	d404      	bmi.n	8034cba <_fputwc_r+0x1c>
 8034cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8034cb2:	9101      	str	r1, [sp, #4]
 8034cb4:	f7fd fa12 	bl	80320dc <__retarget_lock_acquire_recursive>
 8034cb8:	9901      	ldr	r1, [sp, #4]
 8034cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8034cbe:	0498      	lsls	r0, r3, #18
 8034cc0:	d406      	bmi.n	8034cd0 <_fputwc_r+0x32>
 8034cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8034cc6:	81a3      	strh	r3, [r4, #12]
 8034cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8034cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8034cce:	6663      	str	r3, [r4, #100]	; 0x64
 8034cd0:	4622      	mov	r2, r4
 8034cd2:	4628      	mov	r0, r5
 8034cd4:	f7ff ffa2 	bl	8034c1c <__fputwc>
 8034cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8034cda:	07da      	lsls	r2, r3, #31
 8034cdc:	4605      	mov	r5, r0
 8034cde:	d405      	bmi.n	8034cec <_fputwc_r+0x4e>
 8034ce0:	89a3      	ldrh	r3, [r4, #12]
 8034ce2:	059b      	lsls	r3, r3, #22
 8034ce4:	d402      	bmi.n	8034cec <_fputwc_r+0x4e>
 8034ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8034ce8:	f7fd f9f9 	bl	80320de <__retarget_lock_release_recursive>
 8034cec:	4628      	mov	r0, r5
 8034cee:	b003      	add	sp, #12
 8034cf0:	bd30      	pop	{r4, r5, pc}

08034cf2 <memmove>:
 8034cf2:	4288      	cmp	r0, r1
 8034cf4:	b510      	push	{r4, lr}
 8034cf6:	eb01 0402 	add.w	r4, r1, r2
 8034cfa:	d902      	bls.n	8034d02 <memmove+0x10>
 8034cfc:	4284      	cmp	r4, r0
 8034cfe:	4623      	mov	r3, r4
 8034d00:	d807      	bhi.n	8034d12 <memmove+0x20>
 8034d02:	1e43      	subs	r3, r0, #1
 8034d04:	42a1      	cmp	r1, r4
 8034d06:	d008      	beq.n	8034d1a <memmove+0x28>
 8034d08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8034d0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8034d10:	e7f8      	b.n	8034d04 <memmove+0x12>
 8034d12:	4402      	add	r2, r0
 8034d14:	4601      	mov	r1, r0
 8034d16:	428a      	cmp	r2, r1
 8034d18:	d100      	bne.n	8034d1c <memmove+0x2a>
 8034d1a:	bd10      	pop	{r4, pc}
 8034d1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8034d20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8034d24:	e7f7      	b.n	8034d16 <memmove+0x24>

08034d26 <strncpy>:
 8034d26:	b510      	push	{r4, lr}
 8034d28:	3901      	subs	r1, #1
 8034d2a:	4603      	mov	r3, r0
 8034d2c:	b132      	cbz	r2, 8034d3c <strncpy+0x16>
 8034d2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8034d32:	f803 4b01 	strb.w	r4, [r3], #1
 8034d36:	3a01      	subs	r2, #1
 8034d38:	2c00      	cmp	r4, #0
 8034d3a:	d1f7      	bne.n	8034d2c <strncpy+0x6>
 8034d3c:	441a      	add	r2, r3
 8034d3e:	2100      	movs	r1, #0
 8034d40:	4293      	cmp	r3, r2
 8034d42:	d100      	bne.n	8034d46 <strncpy+0x20>
 8034d44:	bd10      	pop	{r4, pc}
 8034d46:	f803 1b01 	strb.w	r1, [r3], #1
 8034d4a:	e7f9      	b.n	8034d40 <strncpy+0x1a>

08034d4c <__locale_mb_cur_max>:
 8034d4c:	4b01      	ldr	r3, [pc, #4]	; (8034d54 <__locale_mb_cur_max+0x8>)
 8034d4e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8034d52:	4770      	bx	lr
 8034d54:	200007c0 	.word	0x200007c0

08034d58 <_localeconv_r>:
 8034d58:	4800      	ldr	r0, [pc, #0]	; (8034d5c <_localeconv_r+0x4>)
 8034d5a:	4770      	bx	lr
 8034d5c:	200008b0 	.word	0x200008b0

08034d60 <_sbrk_r>:
 8034d60:	b538      	push	{r3, r4, r5, lr}
 8034d62:	4d06      	ldr	r5, [pc, #24]	; (8034d7c <_sbrk_r+0x1c>)
 8034d64:	2300      	movs	r3, #0
 8034d66:	4604      	mov	r4, r0
 8034d68:	4608      	mov	r0, r1
 8034d6a:	602b      	str	r3, [r5, #0]
 8034d6c:	f7f2 fee4 	bl	8027b38 <_sbrk>
 8034d70:	1c43      	adds	r3, r0, #1
 8034d72:	d102      	bne.n	8034d7a <_sbrk_r+0x1a>
 8034d74:	682b      	ldr	r3, [r5, #0]
 8034d76:	b103      	cbz	r3, 8034d7a <_sbrk_r+0x1a>
 8034d78:	6023      	str	r3, [r4, #0]
 8034d7a:	bd38      	pop	{r3, r4, r5, pc}
 8034d7c:	20008dec 	.word	0x20008dec

08034d80 <__libc_fini_array>:
 8034d80:	b538      	push	{r3, r4, r5, lr}
 8034d82:	4d07      	ldr	r5, [pc, #28]	; (8034da0 <__libc_fini_array+0x20>)
 8034d84:	4c07      	ldr	r4, [pc, #28]	; (8034da4 <__libc_fini_array+0x24>)
 8034d86:	1b64      	subs	r4, r4, r5
 8034d88:	10a4      	asrs	r4, r4, #2
 8034d8a:	b91c      	cbnz	r4, 8034d94 <__libc_fini_array+0x14>
 8034d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034d90:	f001 bd80 	b.w	8036894 <_fini>
 8034d94:	3c01      	subs	r4, #1
 8034d96:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8034d9a:	4798      	blx	r3
 8034d9c:	e7f5      	b.n	8034d8a <__libc_fini_array+0xa>
 8034d9e:	bf00      	nop
 8034da0:	08037954 	.word	0x08037954
 8034da4:	08037958 	.word	0x08037958

08034da8 <sysconf>:
 8034da8:	2808      	cmp	r0, #8
 8034daa:	b508      	push	{r3, lr}
 8034dac:	d006      	beq.n	8034dbc <sysconf+0x14>
 8034dae:	f7fd f969 	bl	8032084 <__errno>
 8034db2:	2316      	movs	r3, #22
 8034db4:	6003      	str	r3, [r0, #0]
 8034db6:	f04f 30ff 	mov.w	r0, #4294967295
 8034dba:	bd08      	pop	{r3, pc}
 8034dbc:	2080      	movs	r0, #128	; 0x80
 8034dbe:	e7fc      	b.n	8034dba <sysconf+0x12>

08034dc0 <frexp>:
 8034dc0:	b570      	push	{r4, r5, r6, lr}
 8034dc2:	2100      	movs	r1, #0
 8034dc4:	ec55 4b10 	vmov	r4, r5, d0
 8034dc8:	6001      	str	r1, [r0, #0]
 8034dca:	4916      	ldr	r1, [pc, #88]	; (8034e24 <frexp+0x64>)
 8034dcc:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8034dd0:	428a      	cmp	r2, r1
 8034dd2:	4606      	mov	r6, r0
 8034dd4:	462b      	mov	r3, r5
 8034dd6:	dc22      	bgt.n	8034e1e <frexp+0x5e>
 8034dd8:	ee10 1a10 	vmov	r1, s0
 8034ddc:	4311      	orrs	r1, r2
 8034dde:	d01e      	beq.n	8034e1e <frexp+0x5e>
 8034de0:	4911      	ldr	r1, [pc, #68]	; (8034e28 <frexp+0x68>)
 8034de2:	4029      	ands	r1, r5
 8034de4:	b969      	cbnz	r1, 8034e02 <frexp+0x42>
 8034de6:	4b11      	ldr	r3, [pc, #68]	; (8034e2c <frexp+0x6c>)
 8034de8:	2200      	movs	r2, #0
 8034dea:	ee10 0a10 	vmov	r0, s0
 8034dee:	4629      	mov	r1, r5
 8034df0:	f7ed fc02 	bl	80225f8 <__aeabi_dmul>
 8034df4:	460b      	mov	r3, r1
 8034df6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8034dfa:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8034dfe:	4604      	mov	r4, r0
 8034e00:	6031      	str	r1, [r6, #0]
 8034e02:	6831      	ldr	r1, [r6, #0]
 8034e04:	1512      	asrs	r2, r2, #20
 8034e06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8034e0a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8034e0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8034e12:	4411      	add	r1, r2
 8034e14:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8034e18:	6031      	str	r1, [r6, #0]
 8034e1a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8034e1e:	ec45 4b10 	vmov	d0, r4, r5
 8034e22:	bd70      	pop	{r4, r5, r6, pc}
 8034e24:	7fefffff 	.word	0x7fefffff
 8034e28:	7ff00000 	.word	0x7ff00000
 8034e2c:	43500000 	.word	0x43500000

08034e30 <__register_exitproc>:
 8034e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034e34:	f8df a074 	ldr.w	sl, [pc, #116]	; 8034eac <__register_exitproc+0x7c>
 8034e38:	4606      	mov	r6, r0
 8034e3a:	f8da 0000 	ldr.w	r0, [sl]
 8034e3e:	4698      	mov	r8, r3
 8034e40:	460f      	mov	r7, r1
 8034e42:	4691      	mov	r9, r2
 8034e44:	f7fd f94a 	bl	80320dc <__retarget_lock_acquire_recursive>
 8034e48:	4b16      	ldr	r3, [pc, #88]	; (8034ea4 <__register_exitproc+0x74>)
 8034e4a:	681c      	ldr	r4, [r3, #0]
 8034e4c:	b90c      	cbnz	r4, 8034e52 <__register_exitproc+0x22>
 8034e4e:	4c16      	ldr	r4, [pc, #88]	; (8034ea8 <__register_exitproc+0x78>)
 8034e50:	601c      	str	r4, [r3, #0]
 8034e52:	6865      	ldr	r5, [r4, #4]
 8034e54:	f8da 0000 	ldr.w	r0, [sl]
 8034e58:	2d1f      	cmp	r5, #31
 8034e5a:	dd05      	ble.n	8034e68 <__register_exitproc+0x38>
 8034e5c:	f7fd f93f 	bl	80320de <__retarget_lock_release_recursive>
 8034e60:	f04f 30ff 	mov.w	r0, #4294967295
 8034e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034e68:	b19e      	cbz	r6, 8034e92 <__register_exitproc+0x62>
 8034e6a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8034e6e:	2201      	movs	r2, #1
 8034e70:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8034e74:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8034e78:	40aa      	lsls	r2, r5
 8034e7a:	4313      	orrs	r3, r2
 8034e7c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8034e80:	2e02      	cmp	r6, #2
 8034e82:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8034e86:	bf02      	ittt	eq
 8034e88:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8034e8c:	4313      	orreq	r3, r2
 8034e8e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8034e92:	1c6b      	adds	r3, r5, #1
 8034e94:	3502      	adds	r5, #2
 8034e96:	6063      	str	r3, [r4, #4]
 8034e98:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8034e9c:	f7fd f91f 	bl	80320de <__retarget_lock_release_recursive>
 8034ea0:	2000      	movs	r0, #0
 8034ea2:	e7df      	b.n	8034e64 <__register_exitproc+0x34>
 8034ea4:	20008df4 	.word	0x20008df4
 8034ea8:	20008e2c 	.word	0x20008e2c
 8034eac:	200003ac 	.word	0x200003ac

08034eb0 <quorem>:
 8034eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034eb4:	6903      	ldr	r3, [r0, #16]
 8034eb6:	690c      	ldr	r4, [r1, #16]
 8034eb8:	42a3      	cmp	r3, r4
 8034eba:	4607      	mov	r7, r0
 8034ebc:	db7e      	blt.n	8034fbc <quorem+0x10c>
 8034ebe:	3c01      	subs	r4, #1
 8034ec0:	f101 0814 	add.w	r8, r1, #20
 8034ec4:	f100 0514 	add.w	r5, r0, #20
 8034ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034ecc:	9301      	str	r3, [sp, #4]
 8034ece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8034ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8034ed6:	3301      	adds	r3, #1
 8034ed8:	429a      	cmp	r2, r3
 8034eda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8034ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8034ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8034ee6:	d331      	bcc.n	8034f4c <quorem+0x9c>
 8034ee8:	f04f 0e00 	mov.w	lr, #0
 8034eec:	4640      	mov	r0, r8
 8034eee:	46ac      	mov	ip, r5
 8034ef0:	46f2      	mov	sl, lr
 8034ef2:	f850 2b04 	ldr.w	r2, [r0], #4
 8034ef6:	b293      	uxth	r3, r2
 8034ef8:	fb06 e303 	mla	r3, r6, r3, lr
 8034efc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8034f00:	0c1a      	lsrs	r2, r3, #16
 8034f02:	b29b      	uxth	r3, r3
 8034f04:	ebaa 0303 	sub.w	r3, sl, r3
 8034f08:	f8dc a000 	ldr.w	sl, [ip]
 8034f0c:	fa13 f38a 	uxtah	r3, r3, sl
 8034f10:	fb06 220e 	mla	r2, r6, lr, r2
 8034f14:	9300      	str	r3, [sp, #0]
 8034f16:	9b00      	ldr	r3, [sp, #0]
 8034f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8034f1c:	b292      	uxth	r2, r2
 8034f1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8034f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8034f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8034f2a:	4581      	cmp	r9, r0
 8034f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034f30:	f84c 3b04 	str.w	r3, [ip], #4
 8034f34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8034f38:	d2db      	bcs.n	8034ef2 <quorem+0x42>
 8034f3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8034f3e:	b92b      	cbnz	r3, 8034f4c <quorem+0x9c>
 8034f40:	9b01      	ldr	r3, [sp, #4]
 8034f42:	3b04      	subs	r3, #4
 8034f44:	429d      	cmp	r5, r3
 8034f46:	461a      	mov	r2, r3
 8034f48:	d32c      	bcc.n	8034fa4 <quorem+0xf4>
 8034f4a:	613c      	str	r4, [r7, #16]
 8034f4c:	4638      	mov	r0, r7
 8034f4e:	f001 f84d 	bl	8035fec <__mcmp>
 8034f52:	2800      	cmp	r0, #0
 8034f54:	db22      	blt.n	8034f9c <quorem+0xec>
 8034f56:	3601      	adds	r6, #1
 8034f58:	4629      	mov	r1, r5
 8034f5a:	2000      	movs	r0, #0
 8034f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8034f60:	f8d1 c000 	ldr.w	ip, [r1]
 8034f64:	b293      	uxth	r3, r2
 8034f66:	1ac3      	subs	r3, r0, r3
 8034f68:	0c12      	lsrs	r2, r2, #16
 8034f6a:	fa13 f38c 	uxtah	r3, r3, ip
 8034f6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8034f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8034f76:	b29b      	uxth	r3, r3
 8034f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8034f7c:	45c1      	cmp	r9, r8
 8034f7e:	f841 3b04 	str.w	r3, [r1], #4
 8034f82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8034f86:	d2e9      	bcs.n	8034f5c <quorem+0xac>
 8034f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8034f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8034f90:	b922      	cbnz	r2, 8034f9c <quorem+0xec>
 8034f92:	3b04      	subs	r3, #4
 8034f94:	429d      	cmp	r5, r3
 8034f96:	461a      	mov	r2, r3
 8034f98:	d30a      	bcc.n	8034fb0 <quorem+0x100>
 8034f9a:	613c      	str	r4, [r7, #16]
 8034f9c:	4630      	mov	r0, r6
 8034f9e:	b003      	add	sp, #12
 8034fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034fa4:	6812      	ldr	r2, [r2, #0]
 8034fa6:	3b04      	subs	r3, #4
 8034fa8:	2a00      	cmp	r2, #0
 8034faa:	d1ce      	bne.n	8034f4a <quorem+0x9a>
 8034fac:	3c01      	subs	r4, #1
 8034fae:	e7c9      	b.n	8034f44 <quorem+0x94>
 8034fb0:	6812      	ldr	r2, [r2, #0]
 8034fb2:	3b04      	subs	r3, #4
 8034fb4:	2a00      	cmp	r2, #0
 8034fb6:	d1f0      	bne.n	8034f9a <quorem+0xea>
 8034fb8:	3c01      	subs	r4, #1
 8034fba:	e7eb      	b.n	8034f94 <quorem+0xe4>
 8034fbc:	2000      	movs	r0, #0
 8034fbe:	e7ee      	b.n	8034f9e <quorem+0xee>

08034fc0 <_dtoa_r>:
 8034fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034fc4:	ed2d 8b04 	vpush	{d8-d9}
 8034fc8:	b093      	sub	sp, #76	; 0x4c
 8034fca:	ed8d 0b02 	vstr	d0, [sp, #8]
 8034fce:	9107      	str	r1, [sp, #28]
 8034fd0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8034fd2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8034fd4:	920a      	str	r2, [sp, #40]	; 0x28
 8034fd6:	ec57 6b10 	vmov	r6, r7, d0
 8034fda:	4604      	mov	r4, r0
 8034fdc:	930d      	str	r3, [sp, #52]	; 0x34
 8034fde:	b141      	cbz	r1, 8034ff2 <_dtoa_r+0x32>
 8034fe0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8034fe2:	604a      	str	r2, [r1, #4]
 8034fe4:	2301      	movs	r3, #1
 8034fe6:	4093      	lsls	r3, r2
 8034fe8:	608b      	str	r3, [r1, #8]
 8034fea:	f000 fdf6 	bl	8035bda <_Bfree>
 8034fee:	2300      	movs	r3, #0
 8034ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8034ff2:	1e3b      	subs	r3, r7, #0
 8034ff4:	bfb9      	ittee	lt
 8034ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8034ffa:	9303      	strlt	r3, [sp, #12]
 8034ffc:	2300      	movge	r3, #0
 8034ffe:	602b      	strge	r3, [r5, #0]
 8035000:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8035004:	4ba2      	ldr	r3, [pc, #648]	; (8035290 <_dtoa_r+0x2d0>)
 8035006:	bfbc      	itt	lt
 8035008:	2201      	movlt	r2, #1
 803500a:	602a      	strlt	r2, [r5, #0]
 803500c:	ea33 0308 	bics.w	r3, r3, r8
 8035010:	d11b      	bne.n	803504a <_dtoa_r+0x8a>
 8035012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8035014:	f242 730f 	movw	r3, #9999	; 0x270f
 8035018:	6013      	str	r3, [r2, #0]
 803501a:	f3c8 0313 	ubfx	r3, r8, #0, #20
 803501e:	4333      	orrs	r3, r6
 8035020:	f000 858f 	beq.w	8035b42 <_dtoa_r+0xb82>
 8035024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8035026:	b90b      	cbnz	r3, 803502c <_dtoa_r+0x6c>
 8035028:	4b9a      	ldr	r3, [pc, #616]	; (8035294 <_dtoa_r+0x2d4>)
 803502a:	e027      	b.n	803507c <_dtoa_r+0xbc>
 803502c:	4b99      	ldr	r3, [pc, #612]	; (8035294 <_dtoa_r+0x2d4>)
 803502e:	9300      	str	r3, [sp, #0]
 8035030:	3303      	adds	r3, #3
 8035032:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8035034:	6013      	str	r3, [r2, #0]
 8035036:	9800      	ldr	r0, [sp, #0]
 8035038:	b013      	add	sp, #76	; 0x4c
 803503a:	ecbd 8b04 	vpop	{d8-d9}
 803503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035042:	4b95      	ldr	r3, [pc, #596]	; (8035298 <_dtoa_r+0x2d8>)
 8035044:	9300      	str	r3, [sp, #0]
 8035046:	3308      	adds	r3, #8
 8035048:	e7f3      	b.n	8035032 <_dtoa_r+0x72>
 803504a:	ed9d 7b02 	vldr	d7, [sp, #8]
 803504e:	2200      	movs	r2, #0
 8035050:	ec51 0b17 	vmov	r0, r1, d7
 8035054:	eeb0 8a47 	vmov.f32	s16, s14
 8035058:	eef0 8a67 	vmov.f32	s17, s15
 803505c:	2300      	movs	r3, #0
 803505e:	f7ed fd33 	bl	8022ac8 <__aeabi_dcmpeq>
 8035062:	4681      	mov	r9, r0
 8035064:	b160      	cbz	r0, 8035080 <_dtoa_r+0xc0>
 8035066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8035068:	2301      	movs	r3, #1
 803506a:	6013      	str	r3, [r2, #0]
 803506c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803506e:	2b00      	cmp	r3, #0
 8035070:	f000 8564 	beq.w	8035b3c <_dtoa_r+0xb7c>
 8035074:	4b89      	ldr	r3, [pc, #548]	; (803529c <_dtoa_r+0x2dc>)
 8035076:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8035078:	6013      	str	r3, [r2, #0]
 803507a:	3b01      	subs	r3, #1
 803507c:	9300      	str	r3, [sp, #0]
 803507e:	e7da      	b.n	8035036 <_dtoa_r+0x76>
 8035080:	aa10      	add	r2, sp, #64	; 0x40
 8035082:	a911      	add	r1, sp, #68	; 0x44
 8035084:	4620      	mov	r0, r4
 8035086:	eeb0 0a48 	vmov.f32	s0, s16
 803508a:	eef0 0a68 	vmov.f32	s1, s17
 803508e:	f001 f853 	bl	8036138 <__d2b>
 8035092:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8035096:	4682      	mov	sl, r0
 8035098:	2d00      	cmp	r5, #0
 803509a:	d07e      	beq.n	803519a <_dtoa_r+0x1da>
 803509c:	ee18 3a90 	vmov	r3, s17
 80350a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80350a4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80350a8:	ec51 0b18 	vmov	r0, r1, d8
 80350ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80350b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80350b4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80350b8:	4619      	mov	r1, r3
 80350ba:	2200      	movs	r2, #0
 80350bc:	4b78      	ldr	r3, [pc, #480]	; (80352a0 <_dtoa_r+0x2e0>)
 80350be:	f7ed f8e3 	bl	8022288 <__aeabi_dsub>
 80350c2:	a36d      	add	r3, pc, #436	; (adr r3, 8035278 <_dtoa_r+0x2b8>)
 80350c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80350c8:	f7ed fa96 	bl	80225f8 <__aeabi_dmul>
 80350cc:	a36c      	add	r3, pc, #432	; (adr r3, 8035280 <_dtoa_r+0x2c0>)
 80350ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80350d2:	f7ed f8db 	bl	802228c <__adddf3>
 80350d6:	4606      	mov	r6, r0
 80350d8:	4628      	mov	r0, r5
 80350da:	460f      	mov	r7, r1
 80350dc:	f7ed fa22 	bl	8022524 <__aeabi_i2d>
 80350e0:	a369      	add	r3, pc, #420	; (adr r3, 8035288 <_dtoa_r+0x2c8>)
 80350e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80350e6:	f7ed fa87 	bl	80225f8 <__aeabi_dmul>
 80350ea:	4602      	mov	r2, r0
 80350ec:	460b      	mov	r3, r1
 80350ee:	4630      	mov	r0, r6
 80350f0:	4639      	mov	r1, r7
 80350f2:	f7ed f8cb 	bl	802228c <__adddf3>
 80350f6:	4606      	mov	r6, r0
 80350f8:	460f      	mov	r7, r1
 80350fa:	f7ed fd2d 	bl	8022b58 <__aeabi_d2iz>
 80350fe:	2200      	movs	r2, #0
 8035100:	4683      	mov	fp, r0
 8035102:	2300      	movs	r3, #0
 8035104:	4630      	mov	r0, r6
 8035106:	4639      	mov	r1, r7
 8035108:	f7ed fce8 	bl	8022adc <__aeabi_dcmplt>
 803510c:	b148      	cbz	r0, 8035122 <_dtoa_r+0x162>
 803510e:	4658      	mov	r0, fp
 8035110:	f7ed fa08 	bl	8022524 <__aeabi_i2d>
 8035114:	4632      	mov	r2, r6
 8035116:	463b      	mov	r3, r7
 8035118:	f7ed fcd6 	bl	8022ac8 <__aeabi_dcmpeq>
 803511c:	b908      	cbnz	r0, 8035122 <_dtoa_r+0x162>
 803511e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8035122:	f1bb 0f16 	cmp.w	fp, #22
 8035126:	d856      	bhi.n	80351d6 <_dtoa_r+0x216>
 8035128:	4b5e      	ldr	r3, [pc, #376]	; (80352a4 <_dtoa_r+0x2e4>)
 803512a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 803512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035132:	ec51 0b18 	vmov	r0, r1, d8
 8035136:	f7ed fcd1 	bl	8022adc <__aeabi_dcmplt>
 803513a:	2800      	cmp	r0, #0
 803513c:	d04d      	beq.n	80351da <_dtoa_r+0x21a>
 803513e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8035142:	2300      	movs	r3, #0
 8035144:	930c      	str	r3, [sp, #48]	; 0x30
 8035146:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8035148:	1b5b      	subs	r3, r3, r5
 803514a:	1e5a      	subs	r2, r3, #1
 803514c:	bf45      	ittet	mi
 803514e:	f1c3 0301 	rsbmi	r3, r3, #1
 8035152:	9305      	strmi	r3, [sp, #20]
 8035154:	2300      	movpl	r3, #0
 8035156:	2300      	movmi	r3, #0
 8035158:	9206      	str	r2, [sp, #24]
 803515a:	bf54      	ite	pl
 803515c:	9305      	strpl	r3, [sp, #20]
 803515e:	9306      	strmi	r3, [sp, #24]
 8035160:	f1bb 0f00 	cmp.w	fp, #0
 8035164:	db3b      	blt.n	80351de <_dtoa_r+0x21e>
 8035166:	9b06      	ldr	r3, [sp, #24]
 8035168:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 803516c:	445b      	add	r3, fp
 803516e:	9306      	str	r3, [sp, #24]
 8035170:	2300      	movs	r3, #0
 8035172:	9308      	str	r3, [sp, #32]
 8035174:	9b07      	ldr	r3, [sp, #28]
 8035176:	2b09      	cmp	r3, #9
 8035178:	d868      	bhi.n	803524c <_dtoa_r+0x28c>
 803517a:	2b05      	cmp	r3, #5
 803517c:	bfc4      	itt	gt
 803517e:	3b04      	subgt	r3, #4
 8035180:	9307      	strgt	r3, [sp, #28]
 8035182:	9b07      	ldr	r3, [sp, #28]
 8035184:	f1a3 0302 	sub.w	r3, r3, #2
 8035188:	bfcc      	ite	gt
 803518a:	2500      	movgt	r5, #0
 803518c:	2501      	movle	r5, #1
 803518e:	2b03      	cmp	r3, #3
 8035190:	d867      	bhi.n	8035262 <_dtoa_r+0x2a2>
 8035192:	e8df f003 	tbb	[pc, r3]
 8035196:	3b2e      	.short	0x3b2e
 8035198:	5939      	.short	0x5939
 803519a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 803519e:	441d      	add	r5, r3
 80351a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80351a4:	2b20      	cmp	r3, #32
 80351a6:	bfc1      	itttt	gt
 80351a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80351ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80351b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80351b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80351b8:	bfd6      	itet	le
 80351ba:	f1c3 0320 	rsble	r3, r3, #32
 80351be:	ea48 0003 	orrgt.w	r0, r8, r3
 80351c2:	fa06 f003 	lslle.w	r0, r6, r3
 80351c6:	f7ed f99d 	bl	8022504 <__aeabi_ui2d>
 80351ca:	2201      	movs	r2, #1
 80351cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80351d0:	3d01      	subs	r5, #1
 80351d2:	920e      	str	r2, [sp, #56]	; 0x38
 80351d4:	e770      	b.n	80350b8 <_dtoa_r+0xf8>
 80351d6:	2301      	movs	r3, #1
 80351d8:	e7b4      	b.n	8035144 <_dtoa_r+0x184>
 80351da:	900c      	str	r0, [sp, #48]	; 0x30
 80351dc:	e7b3      	b.n	8035146 <_dtoa_r+0x186>
 80351de:	9b05      	ldr	r3, [sp, #20]
 80351e0:	eba3 030b 	sub.w	r3, r3, fp
 80351e4:	9305      	str	r3, [sp, #20]
 80351e6:	f1cb 0300 	rsb	r3, fp, #0
 80351ea:	9308      	str	r3, [sp, #32]
 80351ec:	2300      	movs	r3, #0
 80351ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80351f0:	e7c0      	b.n	8035174 <_dtoa_r+0x1b4>
 80351f2:	2300      	movs	r3, #0
 80351f4:	9309      	str	r3, [sp, #36]	; 0x24
 80351f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80351f8:	2b00      	cmp	r3, #0
 80351fa:	dc35      	bgt.n	8035268 <_dtoa_r+0x2a8>
 80351fc:	2301      	movs	r3, #1
 80351fe:	9301      	str	r3, [sp, #4]
 8035200:	9304      	str	r3, [sp, #16]
 8035202:	461a      	mov	r2, r3
 8035204:	920a      	str	r2, [sp, #40]	; 0x28
 8035206:	e00b      	b.n	8035220 <_dtoa_r+0x260>
 8035208:	2301      	movs	r3, #1
 803520a:	e7f3      	b.n	80351f4 <_dtoa_r+0x234>
 803520c:	2300      	movs	r3, #0
 803520e:	9309      	str	r3, [sp, #36]	; 0x24
 8035210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035212:	445b      	add	r3, fp
 8035214:	9301      	str	r3, [sp, #4]
 8035216:	3301      	adds	r3, #1
 8035218:	2b01      	cmp	r3, #1
 803521a:	9304      	str	r3, [sp, #16]
 803521c:	bfb8      	it	lt
 803521e:	2301      	movlt	r3, #1
 8035220:	2100      	movs	r1, #0
 8035222:	2204      	movs	r2, #4
 8035224:	f102 0014 	add.w	r0, r2, #20
 8035228:	4298      	cmp	r0, r3
 803522a:	d921      	bls.n	8035270 <_dtoa_r+0x2b0>
 803522c:	63e1      	str	r1, [r4, #60]	; 0x3c
 803522e:	4620      	mov	r0, r4
 8035230:	f000 fcae 	bl	8035b90 <_Balloc>
 8035234:	9000      	str	r0, [sp, #0]
 8035236:	2800      	cmp	r0, #0
 8035238:	d13a      	bne.n	80352b0 <_dtoa_r+0x2f0>
 803523a:	4b1b      	ldr	r3, [pc, #108]	; (80352a8 <_dtoa_r+0x2e8>)
 803523c:	4602      	mov	r2, r0
 803523e:	f240 11af 	movw	r1, #431	; 0x1af
 8035242:	481a      	ldr	r0, [pc, #104]	; (80352ac <_dtoa_r+0x2ec>)
 8035244:	f001 fa6e 	bl	8036724 <__assert_func>
 8035248:	2301      	movs	r3, #1
 803524a:	e7e0      	b.n	803520e <_dtoa_r+0x24e>
 803524c:	2501      	movs	r5, #1
 803524e:	2300      	movs	r3, #0
 8035250:	9307      	str	r3, [sp, #28]
 8035252:	9509      	str	r5, [sp, #36]	; 0x24
 8035254:	f04f 33ff 	mov.w	r3, #4294967295
 8035258:	9301      	str	r3, [sp, #4]
 803525a:	9304      	str	r3, [sp, #16]
 803525c:	2200      	movs	r2, #0
 803525e:	2312      	movs	r3, #18
 8035260:	e7d0      	b.n	8035204 <_dtoa_r+0x244>
 8035262:	2301      	movs	r3, #1
 8035264:	9309      	str	r3, [sp, #36]	; 0x24
 8035266:	e7f5      	b.n	8035254 <_dtoa_r+0x294>
 8035268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803526a:	9301      	str	r3, [sp, #4]
 803526c:	9304      	str	r3, [sp, #16]
 803526e:	e7d7      	b.n	8035220 <_dtoa_r+0x260>
 8035270:	3101      	adds	r1, #1
 8035272:	0052      	lsls	r2, r2, #1
 8035274:	e7d6      	b.n	8035224 <_dtoa_r+0x264>
 8035276:	bf00      	nop
 8035278:	636f4361 	.word	0x636f4361
 803527c:	3fd287a7 	.word	0x3fd287a7
 8035280:	8b60c8b3 	.word	0x8b60c8b3
 8035284:	3fc68a28 	.word	0x3fc68a28
 8035288:	509f79fb 	.word	0x509f79fb
 803528c:	3fd34413 	.word	0x3fd34413
 8035290:	7ff00000 	.word	0x7ff00000
 8035294:	0803763b 	.word	0x0803763b
 8035298:	08037632 	.word	0x08037632
 803529c:	080375e7 	.word	0x080375e7
 80352a0:	3ff80000 	.word	0x3ff80000
 80352a4:	08037730 	.word	0x08037730
 80352a8:	0803763f 	.word	0x0803763f
 80352ac:	08037650 	.word	0x08037650
 80352b0:	9b00      	ldr	r3, [sp, #0]
 80352b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80352b4:	9b04      	ldr	r3, [sp, #16]
 80352b6:	2b0e      	cmp	r3, #14
 80352b8:	f200 80a8 	bhi.w	803540c <_dtoa_r+0x44c>
 80352bc:	2d00      	cmp	r5, #0
 80352be:	f000 80a5 	beq.w	803540c <_dtoa_r+0x44c>
 80352c2:	f1bb 0f00 	cmp.w	fp, #0
 80352c6:	dd38      	ble.n	803533a <_dtoa_r+0x37a>
 80352c8:	4bbf      	ldr	r3, [pc, #764]	; (80355c8 <_dtoa_r+0x608>)
 80352ca:	f00b 020f 	and.w	r2, fp, #15
 80352ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80352d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80352d6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80352da:	ea4f 182b 	mov.w	r8, fp, asr #4
 80352de:	d019      	beq.n	8035314 <_dtoa_r+0x354>
 80352e0:	4bba      	ldr	r3, [pc, #744]	; (80355cc <_dtoa_r+0x60c>)
 80352e2:	ec51 0b18 	vmov	r0, r1, d8
 80352e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80352ea:	f7ed faaf 	bl	802284c <__aeabi_ddiv>
 80352ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80352f2:	f008 080f 	and.w	r8, r8, #15
 80352f6:	2503      	movs	r5, #3
 80352f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80355cc <_dtoa_r+0x60c>
 80352fc:	f1b8 0f00 	cmp.w	r8, #0
 8035300:	d10a      	bne.n	8035318 <_dtoa_r+0x358>
 8035302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8035306:	4632      	mov	r2, r6
 8035308:	463b      	mov	r3, r7
 803530a:	f7ed fa9f 	bl	802284c <__aeabi_ddiv>
 803530e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8035312:	e02b      	b.n	803536c <_dtoa_r+0x3ac>
 8035314:	2502      	movs	r5, #2
 8035316:	e7ef      	b.n	80352f8 <_dtoa_r+0x338>
 8035318:	f018 0f01 	tst.w	r8, #1
 803531c:	d008      	beq.n	8035330 <_dtoa_r+0x370>
 803531e:	4630      	mov	r0, r6
 8035320:	4639      	mov	r1, r7
 8035322:	e9d9 2300 	ldrd	r2, r3, [r9]
 8035326:	f7ed f967 	bl	80225f8 <__aeabi_dmul>
 803532a:	3501      	adds	r5, #1
 803532c:	4606      	mov	r6, r0
 803532e:	460f      	mov	r7, r1
 8035330:	ea4f 0868 	mov.w	r8, r8, asr #1
 8035334:	f109 0908 	add.w	r9, r9, #8
 8035338:	e7e0      	b.n	80352fc <_dtoa_r+0x33c>
 803533a:	f000 809f 	beq.w	803547c <_dtoa_r+0x4bc>
 803533e:	f1cb 0600 	rsb	r6, fp, #0
 8035342:	4ba1      	ldr	r3, [pc, #644]	; (80355c8 <_dtoa_r+0x608>)
 8035344:	4fa1      	ldr	r7, [pc, #644]	; (80355cc <_dtoa_r+0x60c>)
 8035346:	f006 020f 	and.w	r2, r6, #15
 803534a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8035352:	ec51 0b18 	vmov	r0, r1, d8
 8035356:	f7ed f94f 	bl	80225f8 <__aeabi_dmul>
 803535a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803535e:	1136      	asrs	r6, r6, #4
 8035360:	2300      	movs	r3, #0
 8035362:	2502      	movs	r5, #2
 8035364:	2e00      	cmp	r6, #0
 8035366:	d17e      	bne.n	8035466 <_dtoa_r+0x4a6>
 8035368:	2b00      	cmp	r3, #0
 803536a:	d1d0      	bne.n	803530e <_dtoa_r+0x34e>
 803536c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803536e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8035372:	2b00      	cmp	r3, #0
 8035374:	f000 8084 	beq.w	8035480 <_dtoa_r+0x4c0>
 8035378:	4b95      	ldr	r3, [pc, #596]	; (80355d0 <_dtoa_r+0x610>)
 803537a:	2200      	movs	r2, #0
 803537c:	4640      	mov	r0, r8
 803537e:	4649      	mov	r1, r9
 8035380:	f7ed fbac 	bl	8022adc <__aeabi_dcmplt>
 8035384:	2800      	cmp	r0, #0
 8035386:	d07b      	beq.n	8035480 <_dtoa_r+0x4c0>
 8035388:	9b04      	ldr	r3, [sp, #16]
 803538a:	2b00      	cmp	r3, #0
 803538c:	d078      	beq.n	8035480 <_dtoa_r+0x4c0>
 803538e:	9b01      	ldr	r3, [sp, #4]
 8035390:	2b00      	cmp	r3, #0
 8035392:	dd39      	ble.n	8035408 <_dtoa_r+0x448>
 8035394:	4b8f      	ldr	r3, [pc, #572]	; (80355d4 <_dtoa_r+0x614>)
 8035396:	2200      	movs	r2, #0
 8035398:	4640      	mov	r0, r8
 803539a:	4649      	mov	r1, r9
 803539c:	f7ed f92c 	bl	80225f8 <__aeabi_dmul>
 80353a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80353a4:	9e01      	ldr	r6, [sp, #4]
 80353a6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80353aa:	3501      	adds	r5, #1
 80353ac:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80353b0:	4628      	mov	r0, r5
 80353b2:	f7ed f8b7 	bl	8022524 <__aeabi_i2d>
 80353b6:	4642      	mov	r2, r8
 80353b8:	464b      	mov	r3, r9
 80353ba:	f7ed f91d 	bl	80225f8 <__aeabi_dmul>
 80353be:	4b86      	ldr	r3, [pc, #536]	; (80355d8 <_dtoa_r+0x618>)
 80353c0:	2200      	movs	r2, #0
 80353c2:	f7ec ff63 	bl	802228c <__adddf3>
 80353c6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80353ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80353ce:	9303      	str	r3, [sp, #12]
 80353d0:	2e00      	cmp	r6, #0
 80353d2:	d158      	bne.n	8035486 <_dtoa_r+0x4c6>
 80353d4:	4b81      	ldr	r3, [pc, #516]	; (80355dc <_dtoa_r+0x61c>)
 80353d6:	2200      	movs	r2, #0
 80353d8:	4640      	mov	r0, r8
 80353da:	4649      	mov	r1, r9
 80353dc:	f7ec ff54 	bl	8022288 <__aeabi_dsub>
 80353e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80353e4:	4680      	mov	r8, r0
 80353e6:	4689      	mov	r9, r1
 80353e8:	f7ed fb96 	bl	8022b18 <__aeabi_dcmpgt>
 80353ec:	2800      	cmp	r0, #0
 80353ee:	f040 8295 	bne.w	803591c <_dtoa_r+0x95c>
 80353f2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80353f6:	4640      	mov	r0, r8
 80353f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80353fc:	4649      	mov	r1, r9
 80353fe:	f7ed fb6d 	bl	8022adc <__aeabi_dcmplt>
 8035402:	2800      	cmp	r0, #0
 8035404:	f040 8288 	bne.w	8035918 <_dtoa_r+0x958>
 8035408:	ed8d 8b02 	vstr	d8, [sp, #8]
 803540c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803540e:	2b00      	cmp	r3, #0
 8035410:	f2c0 814d 	blt.w	80356ae <_dtoa_r+0x6ee>
 8035414:	f1bb 0f0e 	cmp.w	fp, #14
 8035418:	f300 8149 	bgt.w	80356ae <_dtoa_r+0x6ee>
 803541c:	4b6a      	ldr	r3, [pc, #424]	; (80355c8 <_dtoa_r+0x608>)
 803541e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8035422:	e9d3 8900 	ldrd	r8, r9, [r3]
 8035426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8035428:	2b00      	cmp	r3, #0
 803542a:	f280 80db 	bge.w	80355e4 <_dtoa_r+0x624>
 803542e:	9b04      	ldr	r3, [sp, #16]
 8035430:	2b00      	cmp	r3, #0
 8035432:	f300 80d7 	bgt.w	80355e4 <_dtoa_r+0x624>
 8035436:	f040 826e 	bne.w	8035916 <_dtoa_r+0x956>
 803543a:	4b68      	ldr	r3, [pc, #416]	; (80355dc <_dtoa_r+0x61c>)
 803543c:	2200      	movs	r2, #0
 803543e:	4640      	mov	r0, r8
 8035440:	4649      	mov	r1, r9
 8035442:	f7ed f8d9 	bl	80225f8 <__aeabi_dmul>
 8035446:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803544a:	f7ed fb5b 	bl	8022b04 <__aeabi_dcmpge>
 803544e:	9e04      	ldr	r6, [sp, #16]
 8035450:	4637      	mov	r7, r6
 8035452:	2800      	cmp	r0, #0
 8035454:	f040 8244 	bne.w	80358e0 <_dtoa_r+0x920>
 8035458:	9d00      	ldr	r5, [sp, #0]
 803545a:	2331      	movs	r3, #49	; 0x31
 803545c:	f805 3b01 	strb.w	r3, [r5], #1
 8035460:	f10b 0b01 	add.w	fp, fp, #1
 8035464:	e240      	b.n	80358e8 <_dtoa_r+0x928>
 8035466:	07f2      	lsls	r2, r6, #31
 8035468:	d505      	bpl.n	8035476 <_dtoa_r+0x4b6>
 803546a:	e9d7 2300 	ldrd	r2, r3, [r7]
 803546e:	f7ed f8c3 	bl	80225f8 <__aeabi_dmul>
 8035472:	3501      	adds	r5, #1
 8035474:	2301      	movs	r3, #1
 8035476:	1076      	asrs	r6, r6, #1
 8035478:	3708      	adds	r7, #8
 803547a:	e773      	b.n	8035364 <_dtoa_r+0x3a4>
 803547c:	2502      	movs	r5, #2
 803547e:	e775      	b.n	803536c <_dtoa_r+0x3ac>
 8035480:	9e04      	ldr	r6, [sp, #16]
 8035482:	465f      	mov	r7, fp
 8035484:	e792      	b.n	80353ac <_dtoa_r+0x3ec>
 8035486:	9900      	ldr	r1, [sp, #0]
 8035488:	4b4f      	ldr	r3, [pc, #316]	; (80355c8 <_dtoa_r+0x608>)
 803548a:	ed9d 7b02 	vldr	d7, [sp, #8]
 803548e:	4431      	add	r1, r6
 8035490:	9102      	str	r1, [sp, #8]
 8035492:	9909      	ldr	r1, [sp, #36]	; 0x24
 8035494:	eeb0 9a47 	vmov.f32	s18, s14
 8035498:	eef0 9a67 	vmov.f32	s19, s15
 803549c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80354a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80354a4:	2900      	cmp	r1, #0
 80354a6:	d044      	beq.n	8035532 <_dtoa_r+0x572>
 80354a8:	494d      	ldr	r1, [pc, #308]	; (80355e0 <_dtoa_r+0x620>)
 80354aa:	2000      	movs	r0, #0
 80354ac:	f7ed f9ce 	bl	802284c <__aeabi_ddiv>
 80354b0:	ec53 2b19 	vmov	r2, r3, d9
 80354b4:	f7ec fee8 	bl	8022288 <__aeabi_dsub>
 80354b8:	9d00      	ldr	r5, [sp, #0]
 80354ba:	ec41 0b19 	vmov	d9, r0, r1
 80354be:	4649      	mov	r1, r9
 80354c0:	4640      	mov	r0, r8
 80354c2:	f7ed fb49 	bl	8022b58 <__aeabi_d2iz>
 80354c6:	4606      	mov	r6, r0
 80354c8:	f7ed f82c 	bl	8022524 <__aeabi_i2d>
 80354cc:	4602      	mov	r2, r0
 80354ce:	460b      	mov	r3, r1
 80354d0:	4640      	mov	r0, r8
 80354d2:	4649      	mov	r1, r9
 80354d4:	f7ec fed8 	bl	8022288 <__aeabi_dsub>
 80354d8:	3630      	adds	r6, #48	; 0x30
 80354da:	f805 6b01 	strb.w	r6, [r5], #1
 80354de:	ec53 2b19 	vmov	r2, r3, d9
 80354e2:	4680      	mov	r8, r0
 80354e4:	4689      	mov	r9, r1
 80354e6:	f7ed faf9 	bl	8022adc <__aeabi_dcmplt>
 80354ea:	2800      	cmp	r0, #0
 80354ec:	d164      	bne.n	80355b8 <_dtoa_r+0x5f8>
 80354ee:	4642      	mov	r2, r8
 80354f0:	464b      	mov	r3, r9
 80354f2:	4937      	ldr	r1, [pc, #220]	; (80355d0 <_dtoa_r+0x610>)
 80354f4:	2000      	movs	r0, #0
 80354f6:	f7ec fec7 	bl	8022288 <__aeabi_dsub>
 80354fa:	ec53 2b19 	vmov	r2, r3, d9
 80354fe:	f7ed faed 	bl	8022adc <__aeabi_dcmplt>
 8035502:	2800      	cmp	r0, #0
 8035504:	f040 80b5 	bne.w	8035672 <_dtoa_r+0x6b2>
 8035508:	9b02      	ldr	r3, [sp, #8]
 803550a:	429d      	cmp	r5, r3
 803550c:	f43f af7c 	beq.w	8035408 <_dtoa_r+0x448>
 8035510:	4b30      	ldr	r3, [pc, #192]	; (80355d4 <_dtoa_r+0x614>)
 8035512:	ec51 0b19 	vmov	r0, r1, d9
 8035516:	2200      	movs	r2, #0
 8035518:	f7ed f86e 	bl	80225f8 <__aeabi_dmul>
 803551c:	4b2d      	ldr	r3, [pc, #180]	; (80355d4 <_dtoa_r+0x614>)
 803551e:	ec41 0b19 	vmov	d9, r0, r1
 8035522:	2200      	movs	r2, #0
 8035524:	4640      	mov	r0, r8
 8035526:	4649      	mov	r1, r9
 8035528:	f7ed f866 	bl	80225f8 <__aeabi_dmul>
 803552c:	4680      	mov	r8, r0
 803552e:	4689      	mov	r9, r1
 8035530:	e7c5      	b.n	80354be <_dtoa_r+0x4fe>
 8035532:	ec51 0b17 	vmov	r0, r1, d7
 8035536:	f7ed f85f 	bl	80225f8 <__aeabi_dmul>
 803553a:	9b02      	ldr	r3, [sp, #8]
 803553c:	9d00      	ldr	r5, [sp, #0]
 803553e:	930f      	str	r3, [sp, #60]	; 0x3c
 8035540:	ec41 0b19 	vmov	d9, r0, r1
 8035544:	4649      	mov	r1, r9
 8035546:	4640      	mov	r0, r8
 8035548:	f7ed fb06 	bl	8022b58 <__aeabi_d2iz>
 803554c:	4606      	mov	r6, r0
 803554e:	f7ec ffe9 	bl	8022524 <__aeabi_i2d>
 8035552:	3630      	adds	r6, #48	; 0x30
 8035554:	4602      	mov	r2, r0
 8035556:	460b      	mov	r3, r1
 8035558:	4640      	mov	r0, r8
 803555a:	4649      	mov	r1, r9
 803555c:	f7ec fe94 	bl	8022288 <__aeabi_dsub>
 8035560:	f805 6b01 	strb.w	r6, [r5], #1
 8035564:	9b02      	ldr	r3, [sp, #8]
 8035566:	429d      	cmp	r5, r3
 8035568:	4680      	mov	r8, r0
 803556a:	4689      	mov	r9, r1
 803556c:	f04f 0200 	mov.w	r2, #0
 8035570:	d124      	bne.n	80355bc <_dtoa_r+0x5fc>
 8035572:	4b1b      	ldr	r3, [pc, #108]	; (80355e0 <_dtoa_r+0x620>)
 8035574:	ec51 0b19 	vmov	r0, r1, d9
 8035578:	f7ec fe88 	bl	802228c <__adddf3>
 803557c:	4602      	mov	r2, r0
 803557e:	460b      	mov	r3, r1
 8035580:	4640      	mov	r0, r8
 8035582:	4649      	mov	r1, r9
 8035584:	f7ed fac8 	bl	8022b18 <__aeabi_dcmpgt>
 8035588:	2800      	cmp	r0, #0
 803558a:	d172      	bne.n	8035672 <_dtoa_r+0x6b2>
 803558c:	ec53 2b19 	vmov	r2, r3, d9
 8035590:	4913      	ldr	r1, [pc, #76]	; (80355e0 <_dtoa_r+0x620>)
 8035592:	2000      	movs	r0, #0
 8035594:	f7ec fe78 	bl	8022288 <__aeabi_dsub>
 8035598:	4602      	mov	r2, r0
 803559a:	460b      	mov	r3, r1
 803559c:	4640      	mov	r0, r8
 803559e:	4649      	mov	r1, r9
 80355a0:	f7ed fa9c 	bl	8022adc <__aeabi_dcmplt>
 80355a4:	2800      	cmp	r0, #0
 80355a6:	f43f af2f 	beq.w	8035408 <_dtoa_r+0x448>
 80355aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80355ac:	1e6b      	subs	r3, r5, #1
 80355ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80355b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80355b4:	2b30      	cmp	r3, #48	; 0x30
 80355b6:	d0f8      	beq.n	80355aa <_dtoa_r+0x5ea>
 80355b8:	46bb      	mov	fp, r7
 80355ba:	e049      	b.n	8035650 <_dtoa_r+0x690>
 80355bc:	4b05      	ldr	r3, [pc, #20]	; (80355d4 <_dtoa_r+0x614>)
 80355be:	f7ed f81b 	bl	80225f8 <__aeabi_dmul>
 80355c2:	4680      	mov	r8, r0
 80355c4:	4689      	mov	r9, r1
 80355c6:	e7bd      	b.n	8035544 <_dtoa_r+0x584>
 80355c8:	08037730 	.word	0x08037730
 80355cc:	08037708 	.word	0x08037708
 80355d0:	3ff00000 	.word	0x3ff00000
 80355d4:	40240000 	.word	0x40240000
 80355d8:	401c0000 	.word	0x401c0000
 80355dc:	40140000 	.word	0x40140000
 80355e0:	3fe00000 	.word	0x3fe00000
 80355e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80355e8:	9d00      	ldr	r5, [sp, #0]
 80355ea:	4642      	mov	r2, r8
 80355ec:	464b      	mov	r3, r9
 80355ee:	4630      	mov	r0, r6
 80355f0:	4639      	mov	r1, r7
 80355f2:	f7ed f92b 	bl	802284c <__aeabi_ddiv>
 80355f6:	f7ed faaf 	bl	8022b58 <__aeabi_d2iz>
 80355fa:	9001      	str	r0, [sp, #4]
 80355fc:	f7ec ff92 	bl	8022524 <__aeabi_i2d>
 8035600:	4642      	mov	r2, r8
 8035602:	464b      	mov	r3, r9
 8035604:	f7ec fff8 	bl	80225f8 <__aeabi_dmul>
 8035608:	4602      	mov	r2, r0
 803560a:	460b      	mov	r3, r1
 803560c:	4630      	mov	r0, r6
 803560e:	4639      	mov	r1, r7
 8035610:	f7ec fe3a 	bl	8022288 <__aeabi_dsub>
 8035614:	9e01      	ldr	r6, [sp, #4]
 8035616:	9f04      	ldr	r7, [sp, #16]
 8035618:	3630      	adds	r6, #48	; 0x30
 803561a:	f805 6b01 	strb.w	r6, [r5], #1
 803561e:	9e00      	ldr	r6, [sp, #0]
 8035620:	1bae      	subs	r6, r5, r6
 8035622:	42b7      	cmp	r7, r6
 8035624:	4602      	mov	r2, r0
 8035626:	460b      	mov	r3, r1
 8035628:	d134      	bne.n	8035694 <_dtoa_r+0x6d4>
 803562a:	f7ec fe2f 	bl	802228c <__adddf3>
 803562e:	4642      	mov	r2, r8
 8035630:	464b      	mov	r3, r9
 8035632:	4606      	mov	r6, r0
 8035634:	460f      	mov	r7, r1
 8035636:	f7ed fa6f 	bl	8022b18 <__aeabi_dcmpgt>
 803563a:	b9c8      	cbnz	r0, 8035670 <_dtoa_r+0x6b0>
 803563c:	4642      	mov	r2, r8
 803563e:	464b      	mov	r3, r9
 8035640:	4630      	mov	r0, r6
 8035642:	4639      	mov	r1, r7
 8035644:	f7ed fa40 	bl	8022ac8 <__aeabi_dcmpeq>
 8035648:	b110      	cbz	r0, 8035650 <_dtoa_r+0x690>
 803564a:	9b01      	ldr	r3, [sp, #4]
 803564c:	07db      	lsls	r3, r3, #31
 803564e:	d40f      	bmi.n	8035670 <_dtoa_r+0x6b0>
 8035650:	4651      	mov	r1, sl
 8035652:	4620      	mov	r0, r4
 8035654:	f000 fac1 	bl	8035bda <_Bfree>
 8035658:	2300      	movs	r3, #0
 803565a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 803565c:	702b      	strb	r3, [r5, #0]
 803565e:	f10b 0301 	add.w	r3, fp, #1
 8035662:	6013      	str	r3, [r2, #0]
 8035664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8035666:	2b00      	cmp	r3, #0
 8035668:	f43f ace5 	beq.w	8035036 <_dtoa_r+0x76>
 803566c:	601d      	str	r5, [r3, #0]
 803566e:	e4e2      	b.n	8035036 <_dtoa_r+0x76>
 8035670:	465f      	mov	r7, fp
 8035672:	462b      	mov	r3, r5
 8035674:	461d      	mov	r5, r3
 8035676:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803567a:	2a39      	cmp	r2, #57	; 0x39
 803567c:	d106      	bne.n	803568c <_dtoa_r+0x6cc>
 803567e:	9a00      	ldr	r2, [sp, #0]
 8035680:	429a      	cmp	r2, r3
 8035682:	d1f7      	bne.n	8035674 <_dtoa_r+0x6b4>
 8035684:	9900      	ldr	r1, [sp, #0]
 8035686:	2230      	movs	r2, #48	; 0x30
 8035688:	3701      	adds	r7, #1
 803568a:	700a      	strb	r2, [r1, #0]
 803568c:	781a      	ldrb	r2, [r3, #0]
 803568e:	3201      	adds	r2, #1
 8035690:	701a      	strb	r2, [r3, #0]
 8035692:	e791      	b.n	80355b8 <_dtoa_r+0x5f8>
 8035694:	4ba3      	ldr	r3, [pc, #652]	; (8035924 <_dtoa_r+0x964>)
 8035696:	2200      	movs	r2, #0
 8035698:	f7ec ffae 	bl	80225f8 <__aeabi_dmul>
 803569c:	2200      	movs	r2, #0
 803569e:	2300      	movs	r3, #0
 80356a0:	4606      	mov	r6, r0
 80356a2:	460f      	mov	r7, r1
 80356a4:	f7ed fa10 	bl	8022ac8 <__aeabi_dcmpeq>
 80356a8:	2800      	cmp	r0, #0
 80356aa:	d09e      	beq.n	80355ea <_dtoa_r+0x62a>
 80356ac:	e7d0      	b.n	8035650 <_dtoa_r+0x690>
 80356ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80356b0:	2a00      	cmp	r2, #0
 80356b2:	f000 80ca 	beq.w	803584a <_dtoa_r+0x88a>
 80356b6:	9a07      	ldr	r2, [sp, #28]
 80356b8:	2a01      	cmp	r2, #1
 80356ba:	f300 80ad 	bgt.w	8035818 <_dtoa_r+0x858>
 80356be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80356c0:	2a00      	cmp	r2, #0
 80356c2:	f000 80a5 	beq.w	8035810 <_dtoa_r+0x850>
 80356c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80356ca:	9e08      	ldr	r6, [sp, #32]
 80356cc:	9d05      	ldr	r5, [sp, #20]
 80356ce:	9a05      	ldr	r2, [sp, #20]
 80356d0:	441a      	add	r2, r3
 80356d2:	9205      	str	r2, [sp, #20]
 80356d4:	9a06      	ldr	r2, [sp, #24]
 80356d6:	2101      	movs	r1, #1
 80356d8:	441a      	add	r2, r3
 80356da:	4620      	mov	r0, r4
 80356dc:	9206      	str	r2, [sp, #24]
 80356de:	f000 fb19 	bl	8035d14 <__i2b>
 80356e2:	4607      	mov	r7, r0
 80356e4:	b165      	cbz	r5, 8035700 <_dtoa_r+0x740>
 80356e6:	9b06      	ldr	r3, [sp, #24]
 80356e8:	2b00      	cmp	r3, #0
 80356ea:	dd09      	ble.n	8035700 <_dtoa_r+0x740>
 80356ec:	42ab      	cmp	r3, r5
 80356ee:	9a05      	ldr	r2, [sp, #20]
 80356f0:	bfa8      	it	ge
 80356f2:	462b      	movge	r3, r5
 80356f4:	1ad2      	subs	r2, r2, r3
 80356f6:	9205      	str	r2, [sp, #20]
 80356f8:	9a06      	ldr	r2, [sp, #24]
 80356fa:	1aed      	subs	r5, r5, r3
 80356fc:	1ad3      	subs	r3, r2, r3
 80356fe:	9306      	str	r3, [sp, #24]
 8035700:	9b08      	ldr	r3, [sp, #32]
 8035702:	b1f3      	cbz	r3, 8035742 <_dtoa_r+0x782>
 8035704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8035706:	2b00      	cmp	r3, #0
 8035708:	f000 80a3 	beq.w	8035852 <_dtoa_r+0x892>
 803570c:	2e00      	cmp	r6, #0
 803570e:	dd10      	ble.n	8035732 <_dtoa_r+0x772>
 8035710:	4639      	mov	r1, r7
 8035712:	4632      	mov	r2, r6
 8035714:	4620      	mov	r0, r4
 8035716:	f000 fbbd 	bl	8035e94 <__pow5mult>
 803571a:	4652      	mov	r2, sl
 803571c:	4601      	mov	r1, r0
 803571e:	4607      	mov	r7, r0
 8035720:	4620      	mov	r0, r4
 8035722:	f000 fb0d 	bl	8035d40 <__multiply>
 8035726:	4651      	mov	r1, sl
 8035728:	4680      	mov	r8, r0
 803572a:	4620      	mov	r0, r4
 803572c:	f000 fa55 	bl	8035bda <_Bfree>
 8035730:	46c2      	mov	sl, r8
 8035732:	9b08      	ldr	r3, [sp, #32]
 8035734:	1b9a      	subs	r2, r3, r6
 8035736:	d004      	beq.n	8035742 <_dtoa_r+0x782>
 8035738:	4651      	mov	r1, sl
 803573a:	4620      	mov	r0, r4
 803573c:	f000 fbaa 	bl	8035e94 <__pow5mult>
 8035740:	4682      	mov	sl, r0
 8035742:	2101      	movs	r1, #1
 8035744:	4620      	mov	r0, r4
 8035746:	f000 fae5 	bl	8035d14 <__i2b>
 803574a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803574c:	2b00      	cmp	r3, #0
 803574e:	4606      	mov	r6, r0
 8035750:	f340 8081 	ble.w	8035856 <_dtoa_r+0x896>
 8035754:	461a      	mov	r2, r3
 8035756:	4601      	mov	r1, r0
 8035758:	4620      	mov	r0, r4
 803575a:	f000 fb9b 	bl	8035e94 <__pow5mult>
 803575e:	9b07      	ldr	r3, [sp, #28]
 8035760:	2b01      	cmp	r3, #1
 8035762:	4606      	mov	r6, r0
 8035764:	dd7a      	ble.n	803585c <_dtoa_r+0x89c>
 8035766:	f04f 0800 	mov.w	r8, #0
 803576a:	6933      	ldr	r3, [r6, #16]
 803576c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8035770:	6918      	ldr	r0, [r3, #16]
 8035772:	f000 fa81 	bl	8035c78 <__hi0bits>
 8035776:	f1c0 0020 	rsb	r0, r0, #32
 803577a:	9b06      	ldr	r3, [sp, #24]
 803577c:	4418      	add	r0, r3
 803577e:	f010 001f 	ands.w	r0, r0, #31
 8035782:	f000 8094 	beq.w	80358ae <_dtoa_r+0x8ee>
 8035786:	f1c0 0320 	rsb	r3, r0, #32
 803578a:	2b04      	cmp	r3, #4
 803578c:	f340 8085 	ble.w	803589a <_dtoa_r+0x8da>
 8035790:	9b05      	ldr	r3, [sp, #20]
 8035792:	f1c0 001c 	rsb	r0, r0, #28
 8035796:	4403      	add	r3, r0
 8035798:	9305      	str	r3, [sp, #20]
 803579a:	9b06      	ldr	r3, [sp, #24]
 803579c:	4403      	add	r3, r0
 803579e:	4405      	add	r5, r0
 80357a0:	9306      	str	r3, [sp, #24]
 80357a2:	9b05      	ldr	r3, [sp, #20]
 80357a4:	2b00      	cmp	r3, #0
 80357a6:	dd05      	ble.n	80357b4 <_dtoa_r+0x7f4>
 80357a8:	4651      	mov	r1, sl
 80357aa:	461a      	mov	r2, r3
 80357ac:	4620      	mov	r0, r4
 80357ae:	f000 fbb1 	bl	8035f14 <__lshift>
 80357b2:	4682      	mov	sl, r0
 80357b4:	9b06      	ldr	r3, [sp, #24]
 80357b6:	2b00      	cmp	r3, #0
 80357b8:	dd05      	ble.n	80357c6 <_dtoa_r+0x806>
 80357ba:	4631      	mov	r1, r6
 80357bc:	461a      	mov	r2, r3
 80357be:	4620      	mov	r0, r4
 80357c0:	f000 fba8 	bl	8035f14 <__lshift>
 80357c4:	4606      	mov	r6, r0
 80357c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80357c8:	2b00      	cmp	r3, #0
 80357ca:	d072      	beq.n	80358b2 <_dtoa_r+0x8f2>
 80357cc:	4631      	mov	r1, r6
 80357ce:	4650      	mov	r0, sl
 80357d0:	f000 fc0c 	bl	8035fec <__mcmp>
 80357d4:	2800      	cmp	r0, #0
 80357d6:	da6c      	bge.n	80358b2 <_dtoa_r+0x8f2>
 80357d8:	2300      	movs	r3, #0
 80357da:	4651      	mov	r1, sl
 80357dc:	220a      	movs	r2, #10
 80357de:	4620      	mov	r0, r4
 80357e0:	f000 fa04 	bl	8035bec <__multadd>
 80357e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80357e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80357ea:	4682      	mov	sl, r0
 80357ec:	2b00      	cmp	r3, #0
 80357ee:	f000 81af 	beq.w	8035b50 <_dtoa_r+0xb90>
 80357f2:	2300      	movs	r3, #0
 80357f4:	4639      	mov	r1, r7
 80357f6:	220a      	movs	r2, #10
 80357f8:	4620      	mov	r0, r4
 80357fa:	f000 f9f7 	bl	8035bec <__multadd>
 80357fe:	9b01      	ldr	r3, [sp, #4]
 8035800:	2b00      	cmp	r3, #0
 8035802:	4607      	mov	r7, r0
 8035804:	f300 8096 	bgt.w	8035934 <_dtoa_r+0x974>
 8035808:	9b07      	ldr	r3, [sp, #28]
 803580a:	2b02      	cmp	r3, #2
 803580c:	dc59      	bgt.n	80358c2 <_dtoa_r+0x902>
 803580e:	e091      	b.n	8035934 <_dtoa_r+0x974>
 8035810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8035812:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8035816:	e758      	b.n	80356ca <_dtoa_r+0x70a>
 8035818:	9b04      	ldr	r3, [sp, #16]
 803581a:	1e5e      	subs	r6, r3, #1
 803581c:	9b08      	ldr	r3, [sp, #32]
 803581e:	42b3      	cmp	r3, r6
 8035820:	bfbf      	itttt	lt
 8035822:	9b08      	ldrlt	r3, [sp, #32]
 8035824:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8035826:	9608      	strlt	r6, [sp, #32]
 8035828:	1af3      	sublt	r3, r6, r3
 803582a:	bfb4      	ite	lt
 803582c:	18d2      	addlt	r2, r2, r3
 803582e:	1b9e      	subge	r6, r3, r6
 8035830:	9b04      	ldr	r3, [sp, #16]
 8035832:	bfbc      	itt	lt
 8035834:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8035836:	2600      	movlt	r6, #0
 8035838:	2b00      	cmp	r3, #0
 803583a:	bfb7      	itett	lt
 803583c:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8035840:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8035844:	1a9d      	sublt	r5, r3, r2
 8035846:	2300      	movlt	r3, #0
 8035848:	e741      	b.n	80356ce <_dtoa_r+0x70e>
 803584a:	9e08      	ldr	r6, [sp, #32]
 803584c:	9d05      	ldr	r5, [sp, #20]
 803584e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8035850:	e748      	b.n	80356e4 <_dtoa_r+0x724>
 8035852:	9a08      	ldr	r2, [sp, #32]
 8035854:	e770      	b.n	8035738 <_dtoa_r+0x778>
 8035856:	9b07      	ldr	r3, [sp, #28]
 8035858:	2b01      	cmp	r3, #1
 803585a:	dc19      	bgt.n	8035890 <_dtoa_r+0x8d0>
 803585c:	9b02      	ldr	r3, [sp, #8]
 803585e:	b9bb      	cbnz	r3, 8035890 <_dtoa_r+0x8d0>
 8035860:	9b03      	ldr	r3, [sp, #12]
 8035862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8035866:	b99b      	cbnz	r3, 8035890 <_dtoa_r+0x8d0>
 8035868:	9b03      	ldr	r3, [sp, #12]
 803586a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803586e:	0d1b      	lsrs	r3, r3, #20
 8035870:	051b      	lsls	r3, r3, #20
 8035872:	b183      	cbz	r3, 8035896 <_dtoa_r+0x8d6>
 8035874:	9b05      	ldr	r3, [sp, #20]
 8035876:	3301      	adds	r3, #1
 8035878:	9305      	str	r3, [sp, #20]
 803587a:	9b06      	ldr	r3, [sp, #24]
 803587c:	3301      	adds	r3, #1
 803587e:	9306      	str	r3, [sp, #24]
 8035880:	f04f 0801 	mov.w	r8, #1
 8035884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8035886:	2b00      	cmp	r3, #0
 8035888:	f47f af6f 	bne.w	803576a <_dtoa_r+0x7aa>
 803588c:	2001      	movs	r0, #1
 803588e:	e774      	b.n	803577a <_dtoa_r+0x7ba>
 8035890:	f04f 0800 	mov.w	r8, #0
 8035894:	e7f6      	b.n	8035884 <_dtoa_r+0x8c4>
 8035896:	4698      	mov	r8, r3
 8035898:	e7f4      	b.n	8035884 <_dtoa_r+0x8c4>
 803589a:	d082      	beq.n	80357a2 <_dtoa_r+0x7e2>
 803589c:	9a05      	ldr	r2, [sp, #20]
 803589e:	331c      	adds	r3, #28
 80358a0:	441a      	add	r2, r3
 80358a2:	9205      	str	r2, [sp, #20]
 80358a4:	9a06      	ldr	r2, [sp, #24]
 80358a6:	441a      	add	r2, r3
 80358a8:	441d      	add	r5, r3
 80358aa:	9206      	str	r2, [sp, #24]
 80358ac:	e779      	b.n	80357a2 <_dtoa_r+0x7e2>
 80358ae:	4603      	mov	r3, r0
 80358b0:	e7f4      	b.n	803589c <_dtoa_r+0x8dc>
 80358b2:	9b04      	ldr	r3, [sp, #16]
 80358b4:	2b00      	cmp	r3, #0
 80358b6:	dc37      	bgt.n	8035928 <_dtoa_r+0x968>
 80358b8:	9b07      	ldr	r3, [sp, #28]
 80358ba:	2b02      	cmp	r3, #2
 80358bc:	dd34      	ble.n	8035928 <_dtoa_r+0x968>
 80358be:	9b04      	ldr	r3, [sp, #16]
 80358c0:	9301      	str	r3, [sp, #4]
 80358c2:	9b01      	ldr	r3, [sp, #4]
 80358c4:	b963      	cbnz	r3, 80358e0 <_dtoa_r+0x920>
 80358c6:	4631      	mov	r1, r6
 80358c8:	2205      	movs	r2, #5
 80358ca:	4620      	mov	r0, r4
 80358cc:	f000 f98e 	bl	8035bec <__multadd>
 80358d0:	4601      	mov	r1, r0
 80358d2:	4606      	mov	r6, r0
 80358d4:	4650      	mov	r0, sl
 80358d6:	f000 fb89 	bl	8035fec <__mcmp>
 80358da:	2800      	cmp	r0, #0
 80358dc:	f73f adbc 	bgt.w	8035458 <_dtoa_r+0x498>
 80358e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80358e2:	9d00      	ldr	r5, [sp, #0]
 80358e4:	ea6f 0b03 	mvn.w	fp, r3
 80358e8:	f04f 0800 	mov.w	r8, #0
 80358ec:	4631      	mov	r1, r6
 80358ee:	4620      	mov	r0, r4
 80358f0:	f000 f973 	bl	8035bda <_Bfree>
 80358f4:	2f00      	cmp	r7, #0
 80358f6:	f43f aeab 	beq.w	8035650 <_dtoa_r+0x690>
 80358fa:	f1b8 0f00 	cmp.w	r8, #0
 80358fe:	d005      	beq.n	803590c <_dtoa_r+0x94c>
 8035900:	45b8      	cmp	r8, r7
 8035902:	d003      	beq.n	803590c <_dtoa_r+0x94c>
 8035904:	4641      	mov	r1, r8
 8035906:	4620      	mov	r0, r4
 8035908:	f000 f967 	bl	8035bda <_Bfree>
 803590c:	4639      	mov	r1, r7
 803590e:	4620      	mov	r0, r4
 8035910:	f000 f963 	bl	8035bda <_Bfree>
 8035914:	e69c      	b.n	8035650 <_dtoa_r+0x690>
 8035916:	2600      	movs	r6, #0
 8035918:	4637      	mov	r7, r6
 803591a:	e7e1      	b.n	80358e0 <_dtoa_r+0x920>
 803591c:	46bb      	mov	fp, r7
 803591e:	4637      	mov	r7, r6
 8035920:	e59a      	b.n	8035458 <_dtoa_r+0x498>
 8035922:	bf00      	nop
 8035924:	40240000 	.word	0x40240000
 8035928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803592a:	2b00      	cmp	r3, #0
 803592c:	f000 80c7 	beq.w	8035abe <_dtoa_r+0xafe>
 8035930:	9b04      	ldr	r3, [sp, #16]
 8035932:	9301      	str	r3, [sp, #4]
 8035934:	2d00      	cmp	r5, #0
 8035936:	dd05      	ble.n	8035944 <_dtoa_r+0x984>
 8035938:	4639      	mov	r1, r7
 803593a:	462a      	mov	r2, r5
 803593c:	4620      	mov	r0, r4
 803593e:	f000 fae9 	bl	8035f14 <__lshift>
 8035942:	4607      	mov	r7, r0
 8035944:	f1b8 0f00 	cmp.w	r8, #0
 8035948:	d05a      	beq.n	8035a00 <_dtoa_r+0xa40>
 803594a:	6879      	ldr	r1, [r7, #4]
 803594c:	4620      	mov	r0, r4
 803594e:	f000 f91f 	bl	8035b90 <_Balloc>
 8035952:	4605      	mov	r5, r0
 8035954:	b920      	cbnz	r0, 8035960 <_dtoa_r+0x9a0>
 8035956:	4b82      	ldr	r3, [pc, #520]	; (8035b60 <_dtoa_r+0xba0>)
 8035958:	4602      	mov	r2, r0
 803595a:	f240 21ef 	movw	r1, #751	; 0x2ef
 803595e:	e470      	b.n	8035242 <_dtoa_r+0x282>
 8035960:	693a      	ldr	r2, [r7, #16]
 8035962:	3202      	adds	r2, #2
 8035964:	0092      	lsls	r2, r2, #2
 8035966:	f107 010c 	add.w	r1, r7, #12
 803596a:	300c      	adds	r0, #12
 803596c:	f7fc fbb8 	bl	80320e0 <memcpy>
 8035970:	2201      	movs	r2, #1
 8035972:	4629      	mov	r1, r5
 8035974:	4620      	mov	r0, r4
 8035976:	f000 facd 	bl	8035f14 <__lshift>
 803597a:	9b00      	ldr	r3, [sp, #0]
 803597c:	3301      	adds	r3, #1
 803597e:	9304      	str	r3, [sp, #16]
 8035980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8035984:	4413      	add	r3, r2
 8035986:	9308      	str	r3, [sp, #32]
 8035988:	9b02      	ldr	r3, [sp, #8]
 803598a:	f003 0301 	and.w	r3, r3, #1
 803598e:	46b8      	mov	r8, r7
 8035990:	9306      	str	r3, [sp, #24]
 8035992:	4607      	mov	r7, r0
 8035994:	9b04      	ldr	r3, [sp, #16]
 8035996:	4631      	mov	r1, r6
 8035998:	3b01      	subs	r3, #1
 803599a:	4650      	mov	r0, sl
 803599c:	9301      	str	r3, [sp, #4]
 803599e:	f7ff fa87 	bl	8034eb0 <quorem>
 80359a2:	4641      	mov	r1, r8
 80359a4:	9002      	str	r0, [sp, #8]
 80359a6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80359aa:	4650      	mov	r0, sl
 80359ac:	f000 fb1e 	bl	8035fec <__mcmp>
 80359b0:	463a      	mov	r2, r7
 80359b2:	9005      	str	r0, [sp, #20]
 80359b4:	4631      	mov	r1, r6
 80359b6:	4620      	mov	r0, r4
 80359b8:	f000 fb34 	bl	8036024 <__mdiff>
 80359bc:	68c2      	ldr	r2, [r0, #12]
 80359be:	4605      	mov	r5, r0
 80359c0:	bb02      	cbnz	r2, 8035a04 <_dtoa_r+0xa44>
 80359c2:	4601      	mov	r1, r0
 80359c4:	4650      	mov	r0, sl
 80359c6:	f000 fb11 	bl	8035fec <__mcmp>
 80359ca:	4602      	mov	r2, r0
 80359cc:	4629      	mov	r1, r5
 80359ce:	4620      	mov	r0, r4
 80359d0:	9209      	str	r2, [sp, #36]	; 0x24
 80359d2:	f000 f902 	bl	8035bda <_Bfree>
 80359d6:	9b07      	ldr	r3, [sp, #28]
 80359d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80359da:	9d04      	ldr	r5, [sp, #16]
 80359dc:	ea43 0102 	orr.w	r1, r3, r2
 80359e0:	9b06      	ldr	r3, [sp, #24]
 80359e2:	4319      	orrs	r1, r3
 80359e4:	d110      	bne.n	8035a08 <_dtoa_r+0xa48>
 80359e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80359ea:	d029      	beq.n	8035a40 <_dtoa_r+0xa80>
 80359ec:	9b05      	ldr	r3, [sp, #20]
 80359ee:	2b00      	cmp	r3, #0
 80359f0:	dd02      	ble.n	80359f8 <_dtoa_r+0xa38>
 80359f2:	9b02      	ldr	r3, [sp, #8]
 80359f4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80359f8:	9b01      	ldr	r3, [sp, #4]
 80359fa:	f883 9000 	strb.w	r9, [r3]
 80359fe:	e775      	b.n	80358ec <_dtoa_r+0x92c>
 8035a00:	4638      	mov	r0, r7
 8035a02:	e7ba      	b.n	803597a <_dtoa_r+0x9ba>
 8035a04:	2201      	movs	r2, #1
 8035a06:	e7e1      	b.n	80359cc <_dtoa_r+0xa0c>
 8035a08:	9b05      	ldr	r3, [sp, #20]
 8035a0a:	2b00      	cmp	r3, #0
 8035a0c:	db04      	blt.n	8035a18 <_dtoa_r+0xa58>
 8035a0e:	9907      	ldr	r1, [sp, #28]
 8035a10:	430b      	orrs	r3, r1
 8035a12:	9906      	ldr	r1, [sp, #24]
 8035a14:	430b      	orrs	r3, r1
 8035a16:	d120      	bne.n	8035a5a <_dtoa_r+0xa9a>
 8035a18:	2a00      	cmp	r2, #0
 8035a1a:	dded      	ble.n	80359f8 <_dtoa_r+0xa38>
 8035a1c:	4651      	mov	r1, sl
 8035a1e:	2201      	movs	r2, #1
 8035a20:	4620      	mov	r0, r4
 8035a22:	f000 fa77 	bl	8035f14 <__lshift>
 8035a26:	4631      	mov	r1, r6
 8035a28:	4682      	mov	sl, r0
 8035a2a:	f000 fadf 	bl	8035fec <__mcmp>
 8035a2e:	2800      	cmp	r0, #0
 8035a30:	dc03      	bgt.n	8035a3a <_dtoa_r+0xa7a>
 8035a32:	d1e1      	bne.n	80359f8 <_dtoa_r+0xa38>
 8035a34:	f019 0f01 	tst.w	r9, #1
 8035a38:	d0de      	beq.n	80359f8 <_dtoa_r+0xa38>
 8035a3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8035a3e:	d1d8      	bne.n	80359f2 <_dtoa_r+0xa32>
 8035a40:	9a01      	ldr	r2, [sp, #4]
 8035a42:	2339      	movs	r3, #57	; 0x39
 8035a44:	7013      	strb	r3, [r2, #0]
 8035a46:	462b      	mov	r3, r5
 8035a48:	461d      	mov	r5, r3
 8035a4a:	3b01      	subs	r3, #1
 8035a4c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8035a50:	2a39      	cmp	r2, #57	; 0x39
 8035a52:	d06c      	beq.n	8035b2e <_dtoa_r+0xb6e>
 8035a54:	3201      	adds	r2, #1
 8035a56:	701a      	strb	r2, [r3, #0]
 8035a58:	e748      	b.n	80358ec <_dtoa_r+0x92c>
 8035a5a:	2a00      	cmp	r2, #0
 8035a5c:	dd07      	ble.n	8035a6e <_dtoa_r+0xaae>
 8035a5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8035a62:	d0ed      	beq.n	8035a40 <_dtoa_r+0xa80>
 8035a64:	9a01      	ldr	r2, [sp, #4]
 8035a66:	f109 0301 	add.w	r3, r9, #1
 8035a6a:	7013      	strb	r3, [r2, #0]
 8035a6c:	e73e      	b.n	80358ec <_dtoa_r+0x92c>
 8035a6e:	9b04      	ldr	r3, [sp, #16]
 8035a70:	9a08      	ldr	r2, [sp, #32]
 8035a72:	f803 9c01 	strb.w	r9, [r3, #-1]
 8035a76:	4293      	cmp	r3, r2
 8035a78:	d043      	beq.n	8035b02 <_dtoa_r+0xb42>
 8035a7a:	4651      	mov	r1, sl
 8035a7c:	2300      	movs	r3, #0
 8035a7e:	220a      	movs	r2, #10
 8035a80:	4620      	mov	r0, r4
 8035a82:	f000 f8b3 	bl	8035bec <__multadd>
 8035a86:	45b8      	cmp	r8, r7
 8035a88:	4682      	mov	sl, r0
 8035a8a:	f04f 0300 	mov.w	r3, #0
 8035a8e:	f04f 020a 	mov.w	r2, #10
 8035a92:	4641      	mov	r1, r8
 8035a94:	4620      	mov	r0, r4
 8035a96:	d107      	bne.n	8035aa8 <_dtoa_r+0xae8>
 8035a98:	f000 f8a8 	bl	8035bec <__multadd>
 8035a9c:	4680      	mov	r8, r0
 8035a9e:	4607      	mov	r7, r0
 8035aa0:	9b04      	ldr	r3, [sp, #16]
 8035aa2:	3301      	adds	r3, #1
 8035aa4:	9304      	str	r3, [sp, #16]
 8035aa6:	e775      	b.n	8035994 <_dtoa_r+0x9d4>
 8035aa8:	f000 f8a0 	bl	8035bec <__multadd>
 8035aac:	4639      	mov	r1, r7
 8035aae:	4680      	mov	r8, r0
 8035ab0:	2300      	movs	r3, #0
 8035ab2:	220a      	movs	r2, #10
 8035ab4:	4620      	mov	r0, r4
 8035ab6:	f000 f899 	bl	8035bec <__multadd>
 8035aba:	4607      	mov	r7, r0
 8035abc:	e7f0      	b.n	8035aa0 <_dtoa_r+0xae0>
 8035abe:	9b04      	ldr	r3, [sp, #16]
 8035ac0:	9301      	str	r3, [sp, #4]
 8035ac2:	9d00      	ldr	r5, [sp, #0]
 8035ac4:	4631      	mov	r1, r6
 8035ac6:	4650      	mov	r0, sl
 8035ac8:	f7ff f9f2 	bl	8034eb0 <quorem>
 8035acc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8035ad0:	9b00      	ldr	r3, [sp, #0]
 8035ad2:	f805 9b01 	strb.w	r9, [r5], #1
 8035ad6:	1aea      	subs	r2, r5, r3
 8035ad8:	9b01      	ldr	r3, [sp, #4]
 8035ada:	4293      	cmp	r3, r2
 8035adc:	dd07      	ble.n	8035aee <_dtoa_r+0xb2e>
 8035ade:	4651      	mov	r1, sl
 8035ae0:	2300      	movs	r3, #0
 8035ae2:	220a      	movs	r2, #10
 8035ae4:	4620      	mov	r0, r4
 8035ae6:	f000 f881 	bl	8035bec <__multadd>
 8035aea:	4682      	mov	sl, r0
 8035aec:	e7ea      	b.n	8035ac4 <_dtoa_r+0xb04>
 8035aee:	9b01      	ldr	r3, [sp, #4]
 8035af0:	2b00      	cmp	r3, #0
 8035af2:	bfc8      	it	gt
 8035af4:	461d      	movgt	r5, r3
 8035af6:	9b00      	ldr	r3, [sp, #0]
 8035af8:	bfd8      	it	le
 8035afa:	2501      	movle	r5, #1
 8035afc:	441d      	add	r5, r3
 8035afe:	f04f 0800 	mov.w	r8, #0
 8035b02:	4651      	mov	r1, sl
 8035b04:	2201      	movs	r2, #1
 8035b06:	4620      	mov	r0, r4
 8035b08:	f000 fa04 	bl	8035f14 <__lshift>
 8035b0c:	4631      	mov	r1, r6
 8035b0e:	4682      	mov	sl, r0
 8035b10:	f000 fa6c 	bl	8035fec <__mcmp>
 8035b14:	2800      	cmp	r0, #0
 8035b16:	dc96      	bgt.n	8035a46 <_dtoa_r+0xa86>
 8035b18:	d102      	bne.n	8035b20 <_dtoa_r+0xb60>
 8035b1a:	f019 0f01 	tst.w	r9, #1
 8035b1e:	d192      	bne.n	8035a46 <_dtoa_r+0xa86>
 8035b20:	462b      	mov	r3, r5
 8035b22:	461d      	mov	r5, r3
 8035b24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8035b28:	2a30      	cmp	r2, #48	; 0x30
 8035b2a:	d0fa      	beq.n	8035b22 <_dtoa_r+0xb62>
 8035b2c:	e6de      	b.n	80358ec <_dtoa_r+0x92c>
 8035b2e:	9a00      	ldr	r2, [sp, #0]
 8035b30:	429a      	cmp	r2, r3
 8035b32:	d189      	bne.n	8035a48 <_dtoa_r+0xa88>
 8035b34:	f10b 0b01 	add.w	fp, fp, #1
 8035b38:	2331      	movs	r3, #49	; 0x31
 8035b3a:	e796      	b.n	8035a6a <_dtoa_r+0xaaa>
 8035b3c:	4b09      	ldr	r3, [pc, #36]	; (8035b64 <_dtoa_r+0xba4>)
 8035b3e:	f7ff ba9d 	b.w	803507c <_dtoa_r+0xbc>
 8035b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8035b44:	2b00      	cmp	r3, #0
 8035b46:	f47f aa7c 	bne.w	8035042 <_dtoa_r+0x82>
 8035b4a:	4b07      	ldr	r3, [pc, #28]	; (8035b68 <_dtoa_r+0xba8>)
 8035b4c:	f7ff ba96 	b.w	803507c <_dtoa_r+0xbc>
 8035b50:	9b01      	ldr	r3, [sp, #4]
 8035b52:	2b00      	cmp	r3, #0
 8035b54:	dcb5      	bgt.n	8035ac2 <_dtoa_r+0xb02>
 8035b56:	9b07      	ldr	r3, [sp, #28]
 8035b58:	2b02      	cmp	r3, #2
 8035b5a:	f73f aeb2 	bgt.w	80358c2 <_dtoa_r+0x902>
 8035b5e:	e7b0      	b.n	8035ac2 <_dtoa_r+0xb02>
 8035b60:	0803763f 	.word	0x0803763f
 8035b64:	080375e6 	.word	0x080375e6
 8035b68:	08037632 	.word	0x08037632

08035b6c <__ascii_mbtowc>:
 8035b6c:	b082      	sub	sp, #8
 8035b6e:	b901      	cbnz	r1, 8035b72 <__ascii_mbtowc+0x6>
 8035b70:	a901      	add	r1, sp, #4
 8035b72:	b142      	cbz	r2, 8035b86 <__ascii_mbtowc+0x1a>
 8035b74:	b14b      	cbz	r3, 8035b8a <__ascii_mbtowc+0x1e>
 8035b76:	7813      	ldrb	r3, [r2, #0]
 8035b78:	600b      	str	r3, [r1, #0]
 8035b7a:	7812      	ldrb	r2, [r2, #0]
 8035b7c:	1e10      	subs	r0, r2, #0
 8035b7e:	bf18      	it	ne
 8035b80:	2001      	movne	r0, #1
 8035b82:	b002      	add	sp, #8
 8035b84:	4770      	bx	lr
 8035b86:	4610      	mov	r0, r2
 8035b88:	e7fb      	b.n	8035b82 <__ascii_mbtowc+0x16>
 8035b8a:	f06f 0001 	mvn.w	r0, #1
 8035b8e:	e7f8      	b.n	8035b82 <__ascii_mbtowc+0x16>

08035b90 <_Balloc>:
 8035b90:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8035b92:	b570      	push	{r4, r5, r6, lr}
 8035b94:	4605      	mov	r5, r0
 8035b96:	460c      	mov	r4, r1
 8035b98:	b17b      	cbz	r3, 8035bba <_Balloc+0x2a>
 8035b9a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8035b9c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8035ba0:	b9a0      	cbnz	r0, 8035bcc <_Balloc+0x3c>
 8035ba2:	2101      	movs	r1, #1
 8035ba4:	fa01 f604 	lsl.w	r6, r1, r4
 8035ba8:	1d72      	adds	r2, r6, #5
 8035baa:	0092      	lsls	r2, r2, #2
 8035bac:	4628      	mov	r0, r5
 8035bae:	f000 fdd7 	bl	8036760 <_calloc_r>
 8035bb2:	b148      	cbz	r0, 8035bc8 <_Balloc+0x38>
 8035bb4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8035bb8:	e00b      	b.n	8035bd2 <_Balloc+0x42>
 8035bba:	2221      	movs	r2, #33	; 0x21
 8035bbc:	2104      	movs	r1, #4
 8035bbe:	f000 fdcf 	bl	8036760 <_calloc_r>
 8035bc2:	6468      	str	r0, [r5, #68]	; 0x44
 8035bc4:	2800      	cmp	r0, #0
 8035bc6:	d1e8      	bne.n	8035b9a <_Balloc+0xa>
 8035bc8:	2000      	movs	r0, #0
 8035bca:	bd70      	pop	{r4, r5, r6, pc}
 8035bcc:	6802      	ldr	r2, [r0, #0]
 8035bce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8035bd2:	2300      	movs	r3, #0
 8035bd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8035bd8:	e7f7      	b.n	8035bca <_Balloc+0x3a>

08035bda <_Bfree>:
 8035bda:	b131      	cbz	r1, 8035bea <_Bfree+0x10>
 8035bdc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8035bde:	684a      	ldr	r2, [r1, #4]
 8035be0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8035be4:	6008      	str	r0, [r1, #0]
 8035be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8035bea:	4770      	bx	lr

08035bec <__multadd>:
 8035bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8035bf0:	690d      	ldr	r5, [r1, #16]
 8035bf2:	4607      	mov	r7, r0
 8035bf4:	460c      	mov	r4, r1
 8035bf6:	461e      	mov	r6, r3
 8035bf8:	f101 0c14 	add.w	ip, r1, #20
 8035bfc:	2000      	movs	r0, #0
 8035bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8035c02:	b299      	uxth	r1, r3
 8035c04:	fb02 6101 	mla	r1, r2, r1, r6
 8035c08:	0c1e      	lsrs	r6, r3, #16
 8035c0a:	0c0b      	lsrs	r3, r1, #16
 8035c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8035c10:	b289      	uxth	r1, r1
 8035c12:	3001      	adds	r0, #1
 8035c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8035c18:	4285      	cmp	r5, r0
 8035c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8035c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8035c22:	dcec      	bgt.n	8035bfe <__multadd+0x12>
 8035c24:	b30e      	cbz	r6, 8035c6a <__multadd+0x7e>
 8035c26:	68a3      	ldr	r3, [r4, #8]
 8035c28:	42ab      	cmp	r3, r5
 8035c2a:	dc19      	bgt.n	8035c60 <__multadd+0x74>
 8035c2c:	6861      	ldr	r1, [r4, #4]
 8035c2e:	4638      	mov	r0, r7
 8035c30:	3101      	adds	r1, #1
 8035c32:	f7ff ffad 	bl	8035b90 <_Balloc>
 8035c36:	4680      	mov	r8, r0
 8035c38:	b928      	cbnz	r0, 8035c46 <__multadd+0x5a>
 8035c3a:	4602      	mov	r2, r0
 8035c3c:	4b0c      	ldr	r3, [pc, #48]	; (8035c70 <__multadd+0x84>)
 8035c3e:	480d      	ldr	r0, [pc, #52]	; (8035c74 <__multadd+0x88>)
 8035c40:	21ba      	movs	r1, #186	; 0xba
 8035c42:	f000 fd6f 	bl	8036724 <__assert_func>
 8035c46:	6922      	ldr	r2, [r4, #16]
 8035c48:	3202      	adds	r2, #2
 8035c4a:	f104 010c 	add.w	r1, r4, #12
 8035c4e:	0092      	lsls	r2, r2, #2
 8035c50:	300c      	adds	r0, #12
 8035c52:	f7fc fa45 	bl	80320e0 <memcpy>
 8035c56:	4621      	mov	r1, r4
 8035c58:	4638      	mov	r0, r7
 8035c5a:	f7ff ffbe 	bl	8035bda <_Bfree>
 8035c5e:	4644      	mov	r4, r8
 8035c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8035c64:	3501      	adds	r5, #1
 8035c66:	615e      	str	r6, [r3, #20]
 8035c68:	6125      	str	r5, [r4, #16]
 8035c6a:	4620      	mov	r0, r4
 8035c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8035c70:	0803763f 	.word	0x0803763f
 8035c74:	080376a8 	.word	0x080376a8

08035c78 <__hi0bits>:
 8035c78:	0c03      	lsrs	r3, r0, #16
 8035c7a:	041b      	lsls	r3, r3, #16
 8035c7c:	b9d3      	cbnz	r3, 8035cb4 <__hi0bits+0x3c>
 8035c7e:	0400      	lsls	r0, r0, #16
 8035c80:	2310      	movs	r3, #16
 8035c82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8035c86:	bf04      	itt	eq
 8035c88:	0200      	lsleq	r0, r0, #8
 8035c8a:	3308      	addeq	r3, #8
 8035c8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8035c90:	bf04      	itt	eq
 8035c92:	0100      	lsleq	r0, r0, #4
 8035c94:	3304      	addeq	r3, #4
 8035c96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8035c9a:	bf04      	itt	eq
 8035c9c:	0080      	lsleq	r0, r0, #2
 8035c9e:	3302      	addeq	r3, #2
 8035ca0:	2800      	cmp	r0, #0
 8035ca2:	db05      	blt.n	8035cb0 <__hi0bits+0x38>
 8035ca4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8035ca8:	f103 0301 	add.w	r3, r3, #1
 8035cac:	bf08      	it	eq
 8035cae:	2320      	moveq	r3, #32
 8035cb0:	4618      	mov	r0, r3
 8035cb2:	4770      	bx	lr
 8035cb4:	2300      	movs	r3, #0
 8035cb6:	e7e4      	b.n	8035c82 <__hi0bits+0xa>

08035cb8 <__lo0bits>:
 8035cb8:	6803      	ldr	r3, [r0, #0]
 8035cba:	f013 0207 	ands.w	r2, r3, #7
 8035cbe:	d00c      	beq.n	8035cda <__lo0bits+0x22>
 8035cc0:	07d9      	lsls	r1, r3, #31
 8035cc2:	d422      	bmi.n	8035d0a <__lo0bits+0x52>
 8035cc4:	079a      	lsls	r2, r3, #30
 8035cc6:	bf49      	itett	mi
 8035cc8:	085b      	lsrmi	r3, r3, #1
 8035cca:	089b      	lsrpl	r3, r3, #2
 8035ccc:	6003      	strmi	r3, [r0, #0]
 8035cce:	2201      	movmi	r2, #1
 8035cd0:	bf5c      	itt	pl
 8035cd2:	6003      	strpl	r3, [r0, #0]
 8035cd4:	2202      	movpl	r2, #2
 8035cd6:	4610      	mov	r0, r2
 8035cd8:	4770      	bx	lr
 8035cda:	b299      	uxth	r1, r3
 8035cdc:	b909      	cbnz	r1, 8035ce2 <__lo0bits+0x2a>
 8035cde:	0c1b      	lsrs	r3, r3, #16
 8035ce0:	2210      	movs	r2, #16
 8035ce2:	b2d9      	uxtb	r1, r3
 8035ce4:	b909      	cbnz	r1, 8035cea <__lo0bits+0x32>
 8035ce6:	3208      	adds	r2, #8
 8035ce8:	0a1b      	lsrs	r3, r3, #8
 8035cea:	0719      	lsls	r1, r3, #28
 8035cec:	bf04      	itt	eq
 8035cee:	091b      	lsreq	r3, r3, #4
 8035cf0:	3204      	addeq	r2, #4
 8035cf2:	0799      	lsls	r1, r3, #30
 8035cf4:	bf04      	itt	eq
 8035cf6:	089b      	lsreq	r3, r3, #2
 8035cf8:	3202      	addeq	r2, #2
 8035cfa:	07d9      	lsls	r1, r3, #31
 8035cfc:	d403      	bmi.n	8035d06 <__lo0bits+0x4e>
 8035cfe:	085b      	lsrs	r3, r3, #1
 8035d00:	f102 0201 	add.w	r2, r2, #1
 8035d04:	d003      	beq.n	8035d0e <__lo0bits+0x56>
 8035d06:	6003      	str	r3, [r0, #0]
 8035d08:	e7e5      	b.n	8035cd6 <__lo0bits+0x1e>
 8035d0a:	2200      	movs	r2, #0
 8035d0c:	e7e3      	b.n	8035cd6 <__lo0bits+0x1e>
 8035d0e:	2220      	movs	r2, #32
 8035d10:	e7e1      	b.n	8035cd6 <__lo0bits+0x1e>
	...

08035d14 <__i2b>:
 8035d14:	b510      	push	{r4, lr}
 8035d16:	460c      	mov	r4, r1
 8035d18:	2101      	movs	r1, #1
 8035d1a:	f7ff ff39 	bl	8035b90 <_Balloc>
 8035d1e:	4602      	mov	r2, r0
 8035d20:	b928      	cbnz	r0, 8035d2e <__i2b+0x1a>
 8035d22:	4b05      	ldr	r3, [pc, #20]	; (8035d38 <__i2b+0x24>)
 8035d24:	4805      	ldr	r0, [pc, #20]	; (8035d3c <__i2b+0x28>)
 8035d26:	f240 1145 	movw	r1, #325	; 0x145
 8035d2a:	f000 fcfb 	bl	8036724 <__assert_func>
 8035d2e:	2301      	movs	r3, #1
 8035d30:	6144      	str	r4, [r0, #20]
 8035d32:	6103      	str	r3, [r0, #16]
 8035d34:	bd10      	pop	{r4, pc}
 8035d36:	bf00      	nop
 8035d38:	0803763f 	.word	0x0803763f
 8035d3c:	080376a8 	.word	0x080376a8

08035d40 <__multiply>:
 8035d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035d44:	4691      	mov	r9, r2
 8035d46:	690a      	ldr	r2, [r1, #16]
 8035d48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8035d4c:	429a      	cmp	r2, r3
 8035d4e:	bfb8      	it	lt
 8035d50:	460b      	movlt	r3, r1
 8035d52:	460c      	mov	r4, r1
 8035d54:	bfbc      	itt	lt
 8035d56:	464c      	movlt	r4, r9
 8035d58:	4699      	movlt	r9, r3
 8035d5a:	6927      	ldr	r7, [r4, #16]
 8035d5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8035d60:	68a3      	ldr	r3, [r4, #8]
 8035d62:	6861      	ldr	r1, [r4, #4]
 8035d64:	eb07 060a 	add.w	r6, r7, sl
 8035d68:	42b3      	cmp	r3, r6
 8035d6a:	b085      	sub	sp, #20
 8035d6c:	bfb8      	it	lt
 8035d6e:	3101      	addlt	r1, #1
 8035d70:	f7ff ff0e 	bl	8035b90 <_Balloc>
 8035d74:	b930      	cbnz	r0, 8035d84 <__multiply+0x44>
 8035d76:	4602      	mov	r2, r0
 8035d78:	4b44      	ldr	r3, [pc, #272]	; (8035e8c <__multiply+0x14c>)
 8035d7a:	4845      	ldr	r0, [pc, #276]	; (8035e90 <__multiply+0x150>)
 8035d7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8035d80:	f000 fcd0 	bl	8036724 <__assert_func>
 8035d84:	f100 0514 	add.w	r5, r0, #20
 8035d88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8035d8c:	462b      	mov	r3, r5
 8035d8e:	2200      	movs	r2, #0
 8035d90:	4543      	cmp	r3, r8
 8035d92:	d321      	bcc.n	8035dd8 <__multiply+0x98>
 8035d94:	f104 0314 	add.w	r3, r4, #20
 8035d98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8035d9c:	f109 0314 	add.w	r3, r9, #20
 8035da0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8035da4:	9202      	str	r2, [sp, #8]
 8035da6:	1b3a      	subs	r2, r7, r4
 8035da8:	3a15      	subs	r2, #21
 8035daa:	f022 0203 	bic.w	r2, r2, #3
 8035dae:	3204      	adds	r2, #4
 8035db0:	f104 0115 	add.w	r1, r4, #21
 8035db4:	428f      	cmp	r7, r1
 8035db6:	bf38      	it	cc
 8035db8:	2204      	movcc	r2, #4
 8035dba:	9201      	str	r2, [sp, #4]
 8035dbc:	9a02      	ldr	r2, [sp, #8]
 8035dbe:	9303      	str	r3, [sp, #12]
 8035dc0:	429a      	cmp	r2, r3
 8035dc2:	d80c      	bhi.n	8035dde <__multiply+0x9e>
 8035dc4:	2e00      	cmp	r6, #0
 8035dc6:	dd03      	ble.n	8035dd0 <__multiply+0x90>
 8035dc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8035dcc:	2b00      	cmp	r3, #0
 8035dce:	d05b      	beq.n	8035e88 <__multiply+0x148>
 8035dd0:	6106      	str	r6, [r0, #16]
 8035dd2:	b005      	add	sp, #20
 8035dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035dd8:	f843 2b04 	str.w	r2, [r3], #4
 8035ddc:	e7d8      	b.n	8035d90 <__multiply+0x50>
 8035dde:	f8b3 a000 	ldrh.w	sl, [r3]
 8035de2:	f1ba 0f00 	cmp.w	sl, #0
 8035de6:	d024      	beq.n	8035e32 <__multiply+0xf2>
 8035de8:	f104 0e14 	add.w	lr, r4, #20
 8035dec:	46a9      	mov	r9, r5
 8035dee:	f04f 0c00 	mov.w	ip, #0
 8035df2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8035df6:	f8d9 1000 	ldr.w	r1, [r9]
 8035dfa:	fa1f fb82 	uxth.w	fp, r2
 8035dfe:	b289      	uxth	r1, r1
 8035e00:	fb0a 110b 	mla	r1, sl, fp, r1
 8035e04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8035e08:	f8d9 2000 	ldr.w	r2, [r9]
 8035e0c:	4461      	add	r1, ip
 8035e0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8035e12:	fb0a c20b 	mla	r2, sl, fp, ip
 8035e16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8035e1a:	b289      	uxth	r1, r1
 8035e1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8035e20:	4577      	cmp	r7, lr
 8035e22:	f849 1b04 	str.w	r1, [r9], #4
 8035e26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8035e2a:	d8e2      	bhi.n	8035df2 <__multiply+0xb2>
 8035e2c:	9a01      	ldr	r2, [sp, #4]
 8035e2e:	f845 c002 	str.w	ip, [r5, r2]
 8035e32:	9a03      	ldr	r2, [sp, #12]
 8035e34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8035e38:	3304      	adds	r3, #4
 8035e3a:	f1b9 0f00 	cmp.w	r9, #0
 8035e3e:	d021      	beq.n	8035e84 <__multiply+0x144>
 8035e40:	6829      	ldr	r1, [r5, #0]
 8035e42:	f104 0c14 	add.w	ip, r4, #20
 8035e46:	46ae      	mov	lr, r5
 8035e48:	f04f 0a00 	mov.w	sl, #0
 8035e4c:	f8bc b000 	ldrh.w	fp, [ip]
 8035e50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8035e54:	fb09 220b 	mla	r2, r9, fp, r2
 8035e58:	4452      	add	r2, sl
 8035e5a:	b289      	uxth	r1, r1
 8035e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8035e60:	f84e 1b04 	str.w	r1, [lr], #4
 8035e64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8035e68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8035e6c:	f8be 1000 	ldrh.w	r1, [lr]
 8035e70:	fb09 110a 	mla	r1, r9, sl, r1
 8035e74:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8035e78:	4567      	cmp	r7, ip
 8035e7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8035e7e:	d8e5      	bhi.n	8035e4c <__multiply+0x10c>
 8035e80:	9a01      	ldr	r2, [sp, #4]
 8035e82:	50a9      	str	r1, [r5, r2]
 8035e84:	3504      	adds	r5, #4
 8035e86:	e799      	b.n	8035dbc <__multiply+0x7c>
 8035e88:	3e01      	subs	r6, #1
 8035e8a:	e79b      	b.n	8035dc4 <__multiply+0x84>
 8035e8c:	0803763f 	.word	0x0803763f
 8035e90:	080376a8 	.word	0x080376a8

08035e94 <__pow5mult>:
 8035e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8035e98:	4615      	mov	r5, r2
 8035e9a:	f012 0203 	ands.w	r2, r2, #3
 8035e9e:	4606      	mov	r6, r0
 8035ea0:	460f      	mov	r7, r1
 8035ea2:	d007      	beq.n	8035eb4 <__pow5mult+0x20>
 8035ea4:	4c1a      	ldr	r4, [pc, #104]	; (8035f10 <__pow5mult+0x7c>)
 8035ea6:	3a01      	subs	r2, #1
 8035ea8:	2300      	movs	r3, #0
 8035eaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8035eae:	f7ff fe9d 	bl	8035bec <__multadd>
 8035eb2:	4607      	mov	r7, r0
 8035eb4:	10ad      	asrs	r5, r5, #2
 8035eb6:	d027      	beq.n	8035f08 <__pow5mult+0x74>
 8035eb8:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8035eba:	b944      	cbnz	r4, 8035ece <__pow5mult+0x3a>
 8035ebc:	f240 2171 	movw	r1, #625	; 0x271
 8035ec0:	4630      	mov	r0, r6
 8035ec2:	f7ff ff27 	bl	8035d14 <__i2b>
 8035ec6:	2300      	movs	r3, #0
 8035ec8:	6430      	str	r0, [r6, #64]	; 0x40
 8035eca:	4604      	mov	r4, r0
 8035ecc:	6003      	str	r3, [r0, #0]
 8035ece:	f04f 0900 	mov.w	r9, #0
 8035ed2:	07eb      	lsls	r3, r5, #31
 8035ed4:	d50a      	bpl.n	8035eec <__pow5mult+0x58>
 8035ed6:	4639      	mov	r1, r7
 8035ed8:	4622      	mov	r2, r4
 8035eda:	4630      	mov	r0, r6
 8035edc:	f7ff ff30 	bl	8035d40 <__multiply>
 8035ee0:	4639      	mov	r1, r7
 8035ee2:	4680      	mov	r8, r0
 8035ee4:	4630      	mov	r0, r6
 8035ee6:	f7ff fe78 	bl	8035bda <_Bfree>
 8035eea:	4647      	mov	r7, r8
 8035eec:	106d      	asrs	r5, r5, #1
 8035eee:	d00b      	beq.n	8035f08 <__pow5mult+0x74>
 8035ef0:	6820      	ldr	r0, [r4, #0]
 8035ef2:	b938      	cbnz	r0, 8035f04 <__pow5mult+0x70>
 8035ef4:	4622      	mov	r2, r4
 8035ef6:	4621      	mov	r1, r4
 8035ef8:	4630      	mov	r0, r6
 8035efa:	f7ff ff21 	bl	8035d40 <__multiply>
 8035efe:	6020      	str	r0, [r4, #0]
 8035f00:	f8c0 9000 	str.w	r9, [r0]
 8035f04:	4604      	mov	r4, r0
 8035f06:	e7e4      	b.n	8035ed2 <__pow5mult+0x3e>
 8035f08:	4638      	mov	r0, r7
 8035f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8035f0e:	bf00      	nop
 8035f10:	080377f8 	.word	0x080377f8

08035f14 <__lshift>:
 8035f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8035f18:	460c      	mov	r4, r1
 8035f1a:	6849      	ldr	r1, [r1, #4]
 8035f1c:	6923      	ldr	r3, [r4, #16]
 8035f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8035f22:	68a3      	ldr	r3, [r4, #8]
 8035f24:	4607      	mov	r7, r0
 8035f26:	4691      	mov	r9, r2
 8035f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8035f2c:	f108 0601 	add.w	r6, r8, #1
 8035f30:	42b3      	cmp	r3, r6
 8035f32:	db0b      	blt.n	8035f4c <__lshift+0x38>
 8035f34:	4638      	mov	r0, r7
 8035f36:	f7ff fe2b 	bl	8035b90 <_Balloc>
 8035f3a:	4605      	mov	r5, r0
 8035f3c:	b948      	cbnz	r0, 8035f52 <__lshift+0x3e>
 8035f3e:	4602      	mov	r2, r0
 8035f40:	4b28      	ldr	r3, [pc, #160]	; (8035fe4 <__lshift+0xd0>)
 8035f42:	4829      	ldr	r0, [pc, #164]	; (8035fe8 <__lshift+0xd4>)
 8035f44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8035f48:	f000 fbec 	bl	8036724 <__assert_func>
 8035f4c:	3101      	adds	r1, #1
 8035f4e:	005b      	lsls	r3, r3, #1
 8035f50:	e7ee      	b.n	8035f30 <__lshift+0x1c>
 8035f52:	2300      	movs	r3, #0
 8035f54:	f100 0114 	add.w	r1, r0, #20
 8035f58:	f100 0210 	add.w	r2, r0, #16
 8035f5c:	4618      	mov	r0, r3
 8035f5e:	4553      	cmp	r3, sl
 8035f60:	db33      	blt.n	8035fca <__lshift+0xb6>
 8035f62:	6920      	ldr	r0, [r4, #16]
 8035f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8035f68:	f104 0314 	add.w	r3, r4, #20
 8035f6c:	f019 091f 	ands.w	r9, r9, #31
 8035f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8035f74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8035f78:	d02b      	beq.n	8035fd2 <__lshift+0xbe>
 8035f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8035f7e:	468a      	mov	sl, r1
 8035f80:	2200      	movs	r2, #0
 8035f82:	6818      	ldr	r0, [r3, #0]
 8035f84:	fa00 f009 	lsl.w	r0, r0, r9
 8035f88:	4310      	orrs	r0, r2
 8035f8a:	f84a 0b04 	str.w	r0, [sl], #4
 8035f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8035f92:	459c      	cmp	ip, r3
 8035f94:	fa22 f20e 	lsr.w	r2, r2, lr
 8035f98:	d8f3      	bhi.n	8035f82 <__lshift+0x6e>
 8035f9a:	ebac 0304 	sub.w	r3, ip, r4
 8035f9e:	3b15      	subs	r3, #21
 8035fa0:	f023 0303 	bic.w	r3, r3, #3
 8035fa4:	3304      	adds	r3, #4
 8035fa6:	f104 0015 	add.w	r0, r4, #21
 8035faa:	4584      	cmp	ip, r0
 8035fac:	bf38      	it	cc
 8035fae:	2304      	movcc	r3, #4
 8035fb0:	50ca      	str	r2, [r1, r3]
 8035fb2:	b10a      	cbz	r2, 8035fb8 <__lshift+0xa4>
 8035fb4:	f108 0602 	add.w	r6, r8, #2
 8035fb8:	3e01      	subs	r6, #1
 8035fba:	4638      	mov	r0, r7
 8035fbc:	612e      	str	r6, [r5, #16]
 8035fbe:	4621      	mov	r1, r4
 8035fc0:	f7ff fe0b 	bl	8035bda <_Bfree>
 8035fc4:	4628      	mov	r0, r5
 8035fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8035fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8035fce:	3301      	adds	r3, #1
 8035fd0:	e7c5      	b.n	8035f5e <__lshift+0x4a>
 8035fd2:	3904      	subs	r1, #4
 8035fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8035fd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8035fdc:	459c      	cmp	ip, r3
 8035fde:	d8f9      	bhi.n	8035fd4 <__lshift+0xc0>
 8035fe0:	e7ea      	b.n	8035fb8 <__lshift+0xa4>
 8035fe2:	bf00      	nop
 8035fe4:	0803763f 	.word	0x0803763f
 8035fe8:	080376a8 	.word	0x080376a8

08035fec <__mcmp>:
 8035fec:	b530      	push	{r4, r5, lr}
 8035fee:	6902      	ldr	r2, [r0, #16]
 8035ff0:	690c      	ldr	r4, [r1, #16]
 8035ff2:	1b12      	subs	r2, r2, r4
 8035ff4:	d10e      	bne.n	8036014 <__mcmp+0x28>
 8035ff6:	f100 0314 	add.w	r3, r0, #20
 8035ffa:	3114      	adds	r1, #20
 8035ffc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8036000:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8036004:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8036008:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 803600c:	42a5      	cmp	r5, r4
 803600e:	d003      	beq.n	8036018 <__mcmp+0x2c>
 8036010:	d305      	bcc.n	803601e <__mcmp+0x32>
 8036012:	2201      	movs	r2, #1
 8036014:	4610      	mov	r0, r2
 8036016:	bd30      	pop	{r4, r5, pc}
 8036018:	4283      	cmp	r3, r0
 803601a:	d3f3      	bcc.n	8036004 <__mcmp+0x18>
 803601c:	e7fa      	b.n	8036014 <__mcmp+0x28>
 803601e:	f04f 32ff 	mov.w	r2, #4294967295
 8036022:	e7f7      	b.n	8036014 <__mcmp+0x28>

08036024 <__mdiff>:
 8036024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8036028:	460c      	mov	r4, r1
 803602a:	4606      	mov	r6, r0
 803602c:	4611      	mov	r1, r2
 803602e:	4620      	mov	r0, r4
 8036030:	4690      	mov	r8, r2
 8036032:	f7ff ffdb 	bl	8035fec <__mcmp>
 8036036:	1e05      	subs	r5, r0, #0
 8036038:	d110      	bne.n	803605c <__mdiff+0x38>
 803603a:	4629      	mov	r1, r5
 803603c:	4630      	mov	r0, r6
 803603e:	f7ff fda7 	bl	8035b90 <_Balloc>
 8036042:	b930      	cbnz	r0, 8036052 <__mdiff+0x2e>
 8036044:	4b3a      	ldr	r3, [pc, #232]	; (8036130 <__mdiff+0x10c>)
 8036046:	4602      	mov	r2, r0
 8036048:	f240 2137 	movw	r1, #567	; 0x237
 803604c:	4839      	ldr	r0, [pc, #228]	; (8036134 <__mdiff+0x110>)
 803604e:	f000 fb69 	bl	8036724 <__assert_func>
 8036052:	2301      	movs	r3, #1
 8036054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8036058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803605c:	bfa4      	itt	ge
 803605e:	4643      	movge	r3, r8
 8036060:	46a0      	movge	r8, r4
 8036062:	4630      	mov	r0, r6
 8036064:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8036068:	bfa6      	itte	ge
 803606a:	461c      	movge	r4, r3
 803606c:	2500      	movge	r5, #0
 803606e:	2501      	movlt	r5, #1
 8036070:	f7ff fd8e 	bl	8035b90 <_Balloc>
 8036074:	b920      	cbnz	r0, 8036080 <__mdiff+0x5c>
 8036076:	4b2e      	ldr	r3, [pc, #184]	; (8036130 <__mdiff+0x10c>)
 8036078:	4602      	mov	r2, r0
 803607a:	f240 2145 	movw	r1, #581	; 0x245
 803607e:	e7e5      	b.n	803604c <__mdiff+0x28>
 8036080:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8036084:	6926      	ldr	r6, [r4, #16]
 8036086:	60c5      	str	r5, [r0, #12]
 8036088:	f104 0914 	add.w	r9, r4, #20
 803608c:	f108 0514 	add.w	r5, r8, #20
 8036090:	f100 0e14 	add.w	lr, r0, #20
 8036094:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8036098:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 803609c:	f108 0210 	add.w	r2, r8, #16
 80360a0:	46f2      	mov	sl, lr
 80360a2:	2100      	movs	r1, #0
 80360a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80360a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80360ac:	fa11 f88b 	uxtah	r8, r1, fp
 80360b0:	b299      	uxth	r1, r3
 80360b2:	0c1b      	lsrs	r3, r3, #16
 80360b4:	eba8 0801 	sub.w	r8, r8, r1
 80360b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80360bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80360c0:	fa1f f888 	uxth.w	r8, r8
 80360c4:	1419      	asrs	r1, r3, #16
 80360c6:	454e      	cmp	r6, r9
 80360c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80360cc:	f84a 3b04 	str.w	r3, [sl], #4
 80360d0:	d8e8      	bhi.n	80360a4 <__mdiff+0x80>
 80360d2:	1b33      	subs	r3, r6, r4
 80360d4:	3b15      	subs	r3, #21
 80360d6:	f023 0303 	bic.w	r3, r3, #3
 80360da:	3304      	adds	r3, #4
 80360dc:	3415      	adds	r4, #21
 80360de:	42a6      	cmp	r6, r4
 80360e0:	bf38      	it	cc
 80360e2:	2304      	movcc	r3, #4
 80360e4:	441d      	add	r5, r3
 80360e6:	4473      	add	r3, lr
 80360e8:	469e      	mov	lr, r3
 80360ea:	462e      	mov	r6, r5
 80360ec:	4566      	cmp	r6, ip
 80360ee:	d30e      	bcc.n	803610e <__mdiff+0xea>
 80360f0:	f10c 0203 	add.w	r2, ip, #3
 80360f4:	1b52      	subs	r2, r2, r5
 80360f6:	f022 0203 	bic.w	r2, r2, #3
 80360fa:	3d03      	subs	r5, #3
 80360fc:	45ac      	cmp	ip, r5
 80360fe:	bf38      	it	cc
 8036100:	2200      	movcc	r2, #0
 8036102:	4413      	add	r3, r2
 8036104:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8036108:	b17a      	cbz	r2, 803612a <__mdiff+0x106>
 803610a:	6107      	str	r7, [r0, #16]
 803610c:	e7a4      	b.n	8036058 <__mdiff+0x34>
 803610e:	f856 8b04 	ldr.w	r8, [r6], #4
 8036112:	fa11 f288 	uxtah	r2, r1, r8
 8036116:	1414      	asrs	r4, r2, #16
 8036118:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 803611c:	b292      	uxth	r2, r2
 803611e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8036122:	f84e 2b04 	str.w	r2, [lr], #4
 8036126:	1421      	asrs	r1, r4, #16
 8036128:	e7e0      	b.n	80360ec <__mdiff+0xc8>
 803612a:	3f01      	subs	r7, #1
 803612c:	e7ea      	b.n	8036104 <__mdiff+0xe0>
 803612e:	bf00      	nop
 8036130:	0803763f 	.word	0x0803763f
 8036134:	080376a8 	.word	0x080376a8

08036138 <__d2b>:
 8036138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803613c:	460f      	mov	r7, r1
 803613e:	2101      	movs	r1, #1
 8036140:	ec59 8b10 	vmov	r8, r9, d0
 8036144:	4616      	mov	r6, r2
 8036146:	f7ff fd23 	bl	8035b90 <_Balloc>
 803614a:	4604      	mov	r4, r0
 803614c:	b930      	cbnz	r0, 803615c <__d2b+0x24>
 803614e:	4602      	mov	r2, r0
 8036150:	4b24      	ldr	r3, [pc, #144]	; (80361e4 <__d2b+0xac>)
 8036152:	4825      	ldr	r0, [pc, #148]	; (80361e8 <__d2b+0xb0>)
 8036154:	f240 310f 	movw	r1, #783	; 0x30f
 8036158:	f000 fae4 	bl	8036724 <__assert_func>
 803615c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8036160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036164:	bb2d      	cbnz	r5, 80361b2 <__d2b+0x7a>
 8036166:	9301      	str	r3, [sp, #4]
 8036168:	f1b8 0300 	subs.w	r3, r8, #0
 803616c:	d026      	beq.n	80361bc <__d2b+0x84>
 803616e:	4668      	mov	r0, sp
 8036170:	9300      	str	r3, [sp, #0]
 8036172:	f7ff fda1 	bl	8035cb8 <__lo0bits>
 8036176:	e9dd 1200 	ldrd	r1, r2, [sp]
 803617a:	b1e8      	cbz	r0, 80361b8 <__d2b+0x80>
 803617c:	f1c0 0320 	rsb	r3, r0, #32
 8036180:	fa02 f303 	lsl.w	r3, r2, r3
 8036184:	430b      	orrs	r3, r1
 8036186:	40c2      	lsrs	r2, r0
 8036188:	6163      	str	r3, [r4, #20]
 803618a:	9201      	str	r2, [sp, #4]
 803618c:	9b01      	ldr	r3, [sp, #4]
 803618e:	61a3      	str	r3, [r4, #24]
 8036190:	2b00      	cmp	r3, #0
 8036192:	bf14      	ite	ne
 8036194:	2202      	movne	r2, #2
 8036196:	2201      	moveq	r2, #1
 8036198:	6122      	str	r2, [r4, #16]
 803619a:	b1bd      	cbz	r5, 80361cc <__d2b+0x94>
 803619c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80361a0:	4405      	add	r5, r0
 80361a2:	603d      	str	r5, [r7, #0]
 80361a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80361a8:	6030      	str	r0, [r6, #0]
 80361aa:	4620      	mov	r0, r4
 80361ac:	b003      	add	sp, #12
 80361ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80361b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80361b6:	e7d6      	b.n	8036166 <__d2b+0x2e>
 80361b8:	6161      	str	r1, [r4, #20]
 80361ba:	e7e7      	b.n	803618c <__d2b+0x54>
 80361bc:	a801      	add	r0, sp, #4
 80361be:	f7ff fd7b 	bl	8035cb8 <__lo0bits>
 80361c2:	9b01      	ldr	r3, [sp, #4]
 80361c4:	6163      	str	r3, [r4, #20]
 80361c6:	3020      	adds	r0, #32
 80361c8:	2201      	movs	r2, #1
 80361ca:	e7e5      	b.n	8036198 <__d2b+0x60>
 80361cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80361d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80361d4:	6038      	str	r0, [r7, #0]
 80361d6:	6918      	ldr	r0, [r3, #16]
 80361d8:	f7ff fd4e 	bl	8035c78 <__hi0bits>
 80361dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80361e0:	e7e2      	b.n	80361a8 <__d2b+0x70>
 80361e2:	bf00      	nop
 80361e4:	0803763f 	.word	0x0803763f
 80361e8:	080376a8 	.word	0x080376a8

080361ec <_realloc_r>:
 80361ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80361f0:	4682      	mov	sl, r0
 80361f2:	460c      	mov	r4, r1
 80361f4:	b929      	cbnz	r1, 8036202 <_realloc_r+0x16>
 80361f6:	4611      	mov	r1, r2
 80361f8:	b003      	add	sp, #12
 80361fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80361fe:	f7fc b8a1 	b.w	8032344 <_malloc_r>
 8036202:	9201      	str	r2, [sp, #4]
 8036204:	f7fc fad8 	bl	80327b8 <__malloc_lock>
 8036208:	9a01      	ldr	r2, [sp, #4]
 803620a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 803620e:	f102 080b 	add.w	r8, r2, #11
 8036212:	f1b8 0f16 	cmp.w	r8, #22
 8036216:	d90b      	bls.n	8036230 <_realloc_r+0x44>
 8036218:	f038 0807 	bics.w	r8, r8, #7
 803621c:	d50a      	bpl.n	8036234 <_realloc_r+0x48>
 803621e:	230c      	movs	r3, #12
 8036220:	f8ca 3000 	str.w	r3, [sl]
 8036224:	f04f 0b00 	mov.w	fp, #0
 8036228:	4658      	mov	r0, fp
 803622a:	b003      	add	sp, #12
 803622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036230:	f04f 0810 	mov.w	r8, #16
 8036234:	4590      	cmp	r8, r2
 8036236:	d3f2      	bcc.n	803621e <_realloc_r+0x32>
 8036238:	f025 0603 	bic.w	r6, r5, #3
 803623c:	45b0      	cmp	r8, r6
 803623e:	f1a4 0908 	sub.w	r9, r4, #8
 8036242:	f340 8170 	ble.w	8036526 <_realloc_r+0x33a>
 8036246:	499c      	ldr	r1, [pc, #624]	; (80364b8 <_realloc_r+0x2cc>)
 8036248:	f8d1 c008 	ldr.w	ip, [r1, #8]
 803624c:	eb09 0306 	add.w	r3, r9, r6
 8036250:	459c      	cmp	ip, r3
 8036252:	6859      	ldr	r1, [r3, #4]
 8036254:	d005      	beq.n	8036262 <_realloc_r+0x76>
 8036256:	f021 0001 	bic.w	r0, r1, #1
 803625a:	4418      	add	r0, r3
 803625c:	6840      	ldr	r0, [r0, #4]
 803625e:	07c7      	lsls	r7, r0, #31
 8036260:	d447      	bmi.n	80362f2 <_realloc_r+0x106>
 8036262:	f021 0103 	bic.w	r1, r1, #3
 8036266:	459c      	cmp	ip, r3
 8036268:	eb06 0701 	add.w	r7, r6, r1
 803626c:	d119      	bne.n	80362a2 <_realloc_r+0xb6>
 803626e:	f108 0010 	add.w	r0, r8, #16
 8036272:	42b8      	cmp	r0, r7
 8036274:	dc3f      	bgt.n	80362f6 <_realloc_r+0x10a>
 8036276:	eb09 0308 	add.w	r3, r9, r8
 803627a:	4a8f      	ldr	r2, [pc, #572]	; (80364b8 <_realloc_r+0x2cc>)
 803627c:	eba7 0708 	sub.w	r7, r7, r8
 8036280:	f047 0701 	orr.w	r7, r7, #1
 8036284:	6093      	str	r3, [r2, #8]
 8036286:	605f      	str	r7, [r3, #4]
 8036288:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803628c:	f003 0301 	and.w	r3, r3, #1
 8036290:	ea43 0308 	orr.w	r3, r3, r8
 8036294:	f844 3c04 	str.w	r3, [r4, #-4]
 8036298:	4650      	mov	r0, sl
 803629a:	f7fc fa93 	bl	80327c4 <__malloc_unlock>
 803629e:	46a3      	mov	fp, r4
 80362a0:	e7c2      	b.n	8036228 <_realloc_r+0x3c>
 80362a2:	45b8      	cmp	r8, r7
 80362a4:	dc27      	bgt.n	80362f6 <_realloc_r+0x10a>
 80362a6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80362aa:	60da      	str	r2, [r3, #12]
 80362ac:	6093      	str	r3, [r2, #8]
 80362ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80362b2:	eba7 0008 	sub.w	r0, r7, r8
 80362b6:	280f      	cmp	r0, #15
 80362b8:	f003 0301 	and.w	r3, r3, #1
 80362bc:	eb09 0207 	add.w	r2, r9, r7
 80362c0:	f240 8133 	bls.w	803652a <_realloc_r+0x33e>
 80362c4:	eb09 0108 	add.w	r1, r9, r8
 80362c8:	ea48 0303 	orr.w	r3, r8, r3
 80362cc:	f040 0001 	orr.w	r0, r0, #1
 80362d0:	f8c9 3004 	str.w	r3, [r9, #4]
 80362d4:	6048      	str	r0, [r1, #4]
 80362d6:	6853      	ldr	r3, [r2, #4]
 80362d8:	f043 0301 	orr.w	r3, r3, #1
 80362dc:	6053      	str	r3, [r2, #4]
 80362de:	3108      	adds	r1, #8
 80362e0:	4650      	mov	r0, sl
 80362e2:	f7fb ff6f 	bl	80321c4 <_free_r>
 80362e6:	4650      	mov	r0, sl
 80362e8:	f7fc fa6c 	bl	80327c4 <__malloc_unlock>
 80362ec:	f109 0b08 	add.w	fp, r9, #8
 80362f0:	e79a      	b.n	8036228 <_realloc_r+0x3c>
 80362f2:	2100      	movs	r1, #0
 80362f4:	460b      	mov	r3, r1
 80362f6:	07e8      	lsls	r0, r5, #31
 80362f8:	f100 80c6 	bmi.w	8036488 <_realloc_r+0x29c>
 80362fc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8036300:	eba9 0505 	sub.w	r5, r9, r5
 8036304:	6868      	ldr	r0, [r5, #4]
 8036306:	f020 0003 	bic.w	r0, r0, #3
 803630a:	eb00 0b06 	add.w	fp, r0, r6
 803630e:	2b00      	cmp	r3, #0
 8036310:	f000 8086 	beq.w	8036420 <_realloc_r+0x234>
 8036314:	459c      	cmp	ip, r3
 8036316:	eb01 070b 	add.w	r7, r1, fp
 803631a:	d149      	bne.n	80363b0 <_realloc_r+0x1c4>
 803631c:	f108 0310 	add.w	r3, r8, #16
 8036320:	42bb      	cmp	r3, r7
 8036322:	dc7d      	bgt.n	8036420 <_realloc_r+0x234>
 8036324:	46ab      	mov	fp, r5
 8036326:	68eb      	ldr	r3, [r5, #12]
 8036328:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 803632c:	60d3      	str	r3, [r2, #12]
 803632e:	609a      	str	r2, [r3, #8]
 8036330:	1f32      	subs	r2, r6, #4
 8036332:	2a24      	cmp	r2, #36	; 0x24
 8036334:	d837      	bhi.n	80363a6 <_realloc_r+0x1ba>
 8036336:	2a13      	cmp	r2, #19
 8036338:	d933      	bls.n	80363a2 <_realloc_r+0x1b6>
 803633a:	6823      	ldr	r3, [r4, #0]
 803633c:	60ab      	str	r3, [r5, #8]
 803633e:	6863      	ldr	r3, [r4, #4]
 8036340:	60eb      	str	r3, [r5, #12]
 8036342:	2a1b      	cmp	r2, #27
 8036344:	d81b      	bhi.n	803637e <_realloc_r+0x192>
 8036346:	3408      	adds	r4, #8
 8036348:	f105 0310 	add.w	r3, r5, #16
 803634c:	6822      	ldr	r2, [r4, #0]
 803634e:	601a      	str	r2, [r3, #0]
 8036350:	6862      	ldr	r2, [r4, #4]
 8036352:	605a      	str	r2, [r3, #4]
 8036354:	68a2      	ldr	r2, [r4, #8]
 8036356:	609a      	str	r2, [r3, #8]
 8036358:	eb05 0308 	add.w	r3, r5, r8
 803635c:	4a56      	ldr	r2, [pc, #344]	; (80364b8 <_realloc_r+0x2cc>)
 803635e:	eba7 0708 	sub.w	r7, r7, r8
 8036362:	f047 0701 	orr.w	r7, r7, #1
 8036366:	6093      	str	r3, [r2, #8]
 8036368:	605f      	str	r7, [r3, #4]
 803636a:	686b      	ldr	r3, [r5, #4]
 803636c:	f003 0301 	and.w	r3, r3, #1
 8036370:	ea43 0308 	orr.w	r3, r3, r8
 8036374:	606b      	str	r3, [r5, #4]
 8036376:	4650      	mov	r0, sl
 8036378:	f7fc fa24 	bl	80327c4 <__malloc_unlock>
 803637c:	e754      	b.n	8036228 <_realloc_r+0x3c>
 803637e:	68a3      	ldr	r3, [r4, #8]
 8036380:	612b      	str	r3, [r5, #16]
 8036382:	68e3      	ldr	r3, [r4, #12]
 8036384:	616b      	str	r3, [r5, #20]
 8036386:	2a24      	cmp	r2, #36	; 0x24
 8036388:	bf01      	itttt	eq
 803638a:	6923      	ldreq	r3, [r4, #16]
 803638c:	61ab      	streq	r3, [r5, #24]
 803638e:	6962      	ldreq	r2, [r4, #20]
 8036390:	61ea      	streq	r2, [r5, #28]
 8036392:	bf19      	ittee	ne
 8036394:	3410      	addne	r4, #16
 8036396:	f105 0318 	addne.w	r3, r5, #24
 803639a:	f105 0320 	addeq.w	r3, r5, #32
 803639e:	3418      	addeq	r4, #24
 80363a0:	e7d4      	b.n	803634c <_realloc_r+0x160>
 80363a2:	465b      	mov	r3, fp
 80363a4:	e7d2      	b.n	803634c <_realloc_r+0x160>
 80363a6:	4621      	mov	r1, r4
 80363a8:	4658      	mov	r0, fp
 80363aa:	f7fe fca2 	bl	8034cf2 <memmove>
 80363ae:	e7d3      	b.n	8036358 <_realloc_r+0x16c>
 80363b0:	45b8      	cmp	r8, r7
 80363b2:	dc35      	bgt.n	8036420 <_realloc_r+0x234>
 80363b4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80363b8:	4628      	mov	r0, r5
 80363ba:	60da      	str	r2, [r3, #12]
 80363bc:	6093      	str	r3, [r2, #8]
 80363be:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80363c2:	68eb      	ldr	r3, [r5, #12]
 80363c4:	60d3      	str	r3, [r2, #12]
 80363c6:	609a      	str	r2, [r3, #8]
 80363c8:	1f32      	subs	r2, r6, #4
 80363ca:	2a24      	cmp	r2, #36	; 0x24
 80363cc:	d824      	bhi.n	8036418 <_realloc_r+0x22c>
 80363ce:	2a13      	cmp	r2, #19
 80363d0:	d908      	bls.n	80363e4 <_realloc_r+0x1f8>
 80363d2:	6823      	ldr	r3, [r4, #0]
 80363d4:	60ab      	str	r3, [r5, #8]
 80363d6:	6863      	ldr	r3, [r4, #4]
 80363d8:	60eb      	str	r3, [r5, #12]
 80363da:	2a1b      	cmp	r2, #27
 80363dc:	d80a      	bhi.n	80363f4 <_realloc_r+0x208>
 80363de:	3408      	adds	r4, #8
 80363e0:	f105 0010 	add.w	r0, r5, #16
 80363e4:	6823      	ldr	r3, [r4, #0]
 80363e6:	6003      	str	r3, [r0, #0]
 80363e8:	6863      	ldr	r3, [r4, #4]
 80363ea:	6043      	str	r3, [r0, #4]
 80363ec:	68a3      	ldr	r3, [r4, #8]
 80363ee:	6083      	str	r3, [r0, #8]
 80363f0:	46a9      	mov	r9, r5
 80363f2:	e75c      	b.n	80362ae <_realloc_r+0xc2>
 80363f4:	68a3      	ldr	r3, [r4, #8]
 80363f6:	612b      	str	r3, [r5, #16]
 80363f8:	68e3      	ldr	r3, [r4, #12]
 80363fa:	616b      	str	r3, [r5, #20]
 80363fc:	2a24      	cmp	r2, #36	; 0x24
 80363fe:	bf01      	itttt	eq
 8036400:	6923      	ldreq	r3, [r4, #16]
 8036402:	61ab      	streq	r3, [r5, #24]
 8036404:	6963      	ldreq	r3, [r4, #20]
 8036406:	61eb      	streq	r3, [r5, #28]
 8036408:	bf19      	ittee	ne
 803640a:	3410      	addne	r4, #16
 803640c:	f105 0018 	addne.w	r0, r5, #24
 8036410:	f105 0020 	addeq.w	r0, r5, #32
 8036414:	3418      	addeq	r4, #24
 8036416:	e7e5      	b.n	80363e4 <_realloc_r+0x1f8>
 8036418:	4621      	mov	r1, r4
 803641a:	f7fe fc6a 	bl	8034cf2 <memmove>
 803641e:	e7e7      	b.n	80363f0 <_realloc_r+0x204>
 8036420:	45d8      	cmp	r8, fp
 8036422:	dc31      	bgt.n	8036488 <_realloc_r+0x29c>
 8036424:	4628      	mov	r0, r5
 8036426:	68eb      	ldr	r3, [r5, #12]
 8036428:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803642c:	60d3      	str	r3, [r2, #12]
 803642e:	609a      	str	r2, [r3, #8]
 8036430:	1f32      	subs	r2, r6, #4
 8036432:	2a24      	cmp	r2, #36	; 0x24
 8036434:	d824      	bhi.n	8036480 <_realloc_r+0x294>
 8036436:	2a13      	cmp	r2, #19
 8036438:	d908      	bls.n	803644c <_realloc_r+0x260>
 803643a:	6823      	ldr	r3, [r4, #0]
 803643c:	60ab      	str	r3, [r5, #8]
 803643e:	6863      	ldr	r3, [r4, #4]
 8036440:	60eb      	str	r3, [r5, #12]
 8036442:	2a1b      	cmp	r2, #27
 8036444:	d80a      	bhi.n	803645c <_realloc_r+0x270>
 8036446:	3408      	adds	r4, #8
 8036448:	f105 0010 	add.w	r0, r5, #16
 803644c:	6823      	ldr	r3, [r4, #0]
 803644e:	6003      	str	r3, [r0, #0]
 8036450:	6863      	ldr	r3, [r4, #4]
 8036452:	6043      	str	r3, [r0, #4]
 8036454:	68a3      	ldr	r3, [r4, #8]
 8036456:	6083      	str	r3, [r0, #8]
 8036458:	465f      	mov	r7, fp
 803645a:	e7c9      	b.n	80363f0 <_realloc_r+0x204>
 803645c:	68a3      	ldr	r3, [r4, #8]
 803645e:	612b      	str	r3, [r5, #16]
 8036460:	68e3      	ldr	r3, [r4, #12]
 8036462:	616b      	str	r3, [r5, #20]
 8036464:	2a24      	cmp	r2, #36	; 0x24
 8036466:	bf01      	itttt	eq
 8036468:	6923      	ldreq	r3, [r4, #16]
 803646a:	61ab      	streq	r3, [r5, #24]
 803646c:	6963      	ldreq	r3, [r4, #20]
 803646e:	61eb      	streq	r3, [r5, #28]
 8036470:	bf19      	ittee	ne
 8036472:	3410      	addne	r4, #16
 8036474:	f105 0018 	addne.w	r0, r5, #24
 8036478:	f105 0020 	addeq.w	r0, r5, #32
 803647c:	3418      	addeq	r4, #24
 803647e:	e7e5      	b.n	803644c <_realloc_r+0x260>
 8036480:	4621      	mov	r1, r4
 8036482:	f7fe fc36 	bl	8034cf2 <memmove>
 8036486:	e7e7      	b.n	8036458 <_realloc_r+0x26c>
 8036488:	4611      	mov	r1, r2
 803648a:	4650      	mov	r0, sl
 803648c:	f7fb ff5a 	bl	8032344 <_malloc_r>
 8036490:	4683      	mov	fp, r0
 8036492:	2800      	cmp	r0, #0
 8036494:	f43f af6f 	beq.w	8036376 <_realloc_r+0x18a>
 8036498:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803649c:	f023 0301 	bic.w	r3, r3, #1
 80364a0:	444b      	add	r3, r9
 80364a2:	f1a0 0208 	sub.w	r2, r0, #8
 80364a6:	4293      	cmp	r3, r2
 80364a8:	d108      	bne.n	80364bc <_realloc_r+0x2d0>
 80364aa:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80364ae:	f027 0703 	bic.w	r7, r7, #3
 80364b2:	4437      	add	r7, r6
 80364b4:	e6fb      	b.n	80362ae <_realloc_r+0xc2>
 80364b6:	bf00      	nop
 80364b8:	200003b0 	.word	0x200003b0
 80364bc:	1f32      	subs	r2, r6, #4
 80364be:	2a24      	cmp	r2, #36	; 0x24
 80364c0:	d82d      	bhi.n	803651e <_realloc_r+0x332>
 80364c2:	2a13      	cmp	r2, #19
 80364c4:	d928      	bls.n	8036518 <_realloc_r+0x32c>
 80364c6:	6823      	ldr	r3, [r4, #0]
 80364c8:	6003      	str	r3, [r0, #0]
 80364ca:	6863      	ldr	r3, [r4, #4]
 80364cc:	6043      	str	r3, [r0, #4]
 80364ce:	2a1b      	cmp	r2, #27
 80364d0:	d80e      	bhi.n	80364f0 <_realloc_r+0x304>
 80364d2:	f104 0208 	add.w	r2, r4, #8
 80364d6:	f100 0308 	add.w	r3, r0, #8
 80364da:	6811      	ldr	r1, [r2, #0]
 80364dc:	6019      	str	r1, [r3, #0]
 80364de:	6851      	ldr	r1, [r2, #4]
 80364e0:	6059      	str	r1, [r3, #4]
 80364e2:	6892      	ldr	r2, [r2, #8]
 80364e4:	609a      	str	r2, [r3, #8]
 80364e6:	4621      	mov	r1, r4
 80364e8:	4650      	mov	r0, sl
 80364ea:	f7fb fe6b 	bl	80321c4 <_free_r>
 80364ee:	e742      	b.n	8036376 <_realloc_r+0x18a>
 80364f0:	68a3      	ldr	r3, [r4, #8]
 80364f2:	6083      	str	r3, [r0, #8]
 80364f4:	68e3      	ldr	r3, [r4, #12]
 80364f6:	60c3      	str	r3, [r0, #12]
 80364f8:	2a24      	cmp	r2, #36	; 0x24
 80364fa:	bf01      	itttt	eq
 80364fc:	6923      	ldreq	r3, [r4, #16]
 80364fe:	6103      	streq	r3, [r0, #16]
 8036500:	6961      	ldreq	r1, [r4, #20]
 8036502:	6141      	streq	r1, [r0, #20]
 8036504:	bf19      	ittee	ne
 8036506:	f104 0210 	addne.w	r2, r4, #16
 803650a:	f100 0310 	addne.w	r3, r0, #16
 803650e:	f104 0218 	addeq.w	r2, r4, #24
 8036512:	f100 0318 	addeq.w	r3, r0, #24
 8036516:	e7e0      	b.n	80364da <_realloc_r+0x2ee>
 8036518:	4603      	mov	r3, r0
 803651a:	4622      	mov	r2, r4
 803651c:	e7dd      	b.n	80364da <_realloc_r+0x2ee>
 803651e:	4621      	mov	r1, r4
 8036520:	f7fe fbe7 	bl	8034cf2 <memmove>
 8036524:	e7df      	b.n	80364e6 <_realloc_r+0x2fa>
 8036526:	4637      	mov	r7, r6
 8036528:	e6c1      	b.n	80362ae <_realloc_r+0xc2>
 803652a:	431f      	orrs	r7, r3
 803652c:	f8c9 7004 	str.w	r7, [r9, #4]
 8036530:	6853      	ldr	r3, [r2, #4]
 8036532:	f043 0301 	orr.w	r3, r3, #1
 8036536:	6053      	str	r3, [r2, #4]
 8036538:	e6d5      	b.n	80362e6 <_realloc_r+0xfa>
 803653a:	bf00      	nop

0803653c <__ascii_wctomb>:
 803653c:	b149      	cbz	r1, 8036552 <__ascii_wctomb+0x16>
 803653e:	2aff      	cmp	r2, #255	; 0xff
 8036540:	bf85      	ittet	hi
 8036542:	238a      	movhi	r3, #138	; 0x8a
 8036544:	6003      	strhi	r3, [r0, #0]
 8036546:	700a      	strbls	r2, [r1, #0]
 8036548:	f04f 30ff 	movhi.w	r0, #4294967295
 803654c:	bf98      	it	ls
 803654e:	2001      	movls	r0, #1
 8036550:	4770      	bx	lr
 8036552:	4608      	mov	r0, r1
 8036554:	4770      	bx	lr
	...

08036558 <_wcrtomb_r>:
 8036558:	b5f0      	push	{r4, r5, r6, r7, lr}
 803655a:	4c09      	ldr	r4, [pc, #36]	; (8036580 <_wcrtomb_r+0x28>)
 803655c:	b085      	sub	sp, #20
 803655e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8036562:	4605      	mov	r5, r0
 8036564:	461e      	mov	r6, r3
 8036566:	b909      	cbnz	r1, 803656c <_wcrtomb_r+0x14>
 8036568:	460a      	mov	r2, r1
 803656a:	a901      	add	r1, sp, #4
 803656c:	47b8      	blx	r7
 803656e:	1c43      	adds	r3, r0, #1
 8036570:	bf01      	itttt	eq
 8036572:	2300      	moveq	r3, #0
 8036574:	6033      	streq	r3, [r6, #0]
 8036576:	238a      	moveq	r3, #138	; 0x8a
 8036578:	602b      	streq	r3, [r5, #0]
 803657a:	b005      	add	sp, #20
 803657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803657e:	bf00      	nop
 8036580:	200007c0 	.word	0x200007c0

08036584 <__swhatbuf_r>:
 8036584:	b570      	push	{r4, r5, r6, lr}
 8036586:	460c      	mov	r4, r1
 8036588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803658c:	2900      	cmp	r1, #0
 803658e:	b096      	sub	sp, #88	; 0x58
 8036590:	4615      	mov	r5, r2
 8036592:	461e      	mov	r6, r3
 8036594:	da07      	bge.n	80365a6 <__swhatbuf_r+0x22>
 8036596:	89a1      	ldrh	r1, [r4, #12]
 8036598:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 803659c:	d017      	beq.n	80365ce <__swhatbuf_r+0x4a>
 803659e:	2100      	movs	r1, #0
 80365a0:	2340      	movs	r3, #64	; 0x40
 80365a2:	4608      	mov	r0, r1
 80365a4:	e00f      	b.n	80365c6 <__swhatbuf_r+0x42>
 80365a6:	466a      	mov	r2, sp
 80365a8:	f000 f89a 	bl	80366e0 <_fstat_r>
 80365ac:	2800      	cmp	r0, #0
 80365ae:	dbf2      	blt.n	8036596 <__swhatbuf_r+0x12>
 80365b0:	9901      	ldr	r1, [sp, #4]
 80365b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80365b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80365ba:	4259      	negs	r1, r3
 80365bc:	4159      	adcs	r1, r3
 80365be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80365c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80365c6:	6031      	str	r1, [r6, #0]
 80365c8:	602b      	str	r3, [r5, #0]
 80365ca:	b016      	add	sp, #88	; 0x58
 80365cc:	bd70      	pop	{r4, r5, r6, pc}
 80365ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80365d2:	e7e6      	b.n	80365a2 <__swhatbuf_r+0x1e>

080365d4 <__smakebuf_r>:
 80365d4:	898b      	ldrh	r3, [r1, #12]
 80365d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80365d8:	079d      	lsls	r5, r3, #30
 80365da:	4606      	mov	r6, r0
 80365dc:	460c      	mov	r4, r1
 80365de:	d507      	bpl.n	80365f0 <__smakebuf_r+0x1c>
 80365e0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80365e4:	6023      	str	r3, [r4, #0]
 80365e6:	6123      	str	r3, [r4, #16]
 80365e8:	2301      	movs	r3, #1
 80365ea:	6163      	str	r3, [r4, #20]
 80365ec:	b002      	add	sp, #8
 80365ee:	bd70      	pop	{r4, r5, r6, pc}
 80365f0:	ab01      	add	r3, sp, #4
 80365f2:	466a      	mov	r2, sp
 80365f4:	f7ff ffc6 	bl	8036584 <__swhatbuf_r>
 80365f8:	9900      	ldr	r1, [sp, #0]
 80365fa:	4605      	mov	r5, r0
 80365fc:	4630      	mov	r0, r6
 80365fe:	f7fb fea1 	bl	8032344 <_malloc_r>
 8036602:	b948      	cbnz	r0, 8036618 <__smakebuf_r+0x44>
 8036604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036608:	059a      	lsls	r2, r3, #22
 803660a:	d4ef      	bmi.n	80365ec <__smakebuf_r+0x18>
 803660c:	f023 0303 	bic.w	r3, r3, #3
 8036610:	f043 0302 	orr.w	r3, r3, #2
 8036614:	81a3      	strh	r3, [r4, #12]
 8036616:	e7e3      	b.n	80365e0 <__smakebuf_r+0xc>
 8036618:	89a3      	ldrh	r3, [r4, #12]
 803661a:	6020      	str	r0, [r4, #0]
 803661c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8036620:	81a3      	strh	r3, [r4, #12]
 8036622:	9b00      	ldr	r3, [sp, #0]
 8036624:	6163      	str	r3, [r4, #20]
 8036626:	9b01      	ldr	r3, [sp, #4]
 8036628:	6120      	str	r0, [r4, #16]
 803662a:	b15b      	cbz	r3, 8036644 <__smakebuf_r+0x70>
 803662c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8036630:	4630      	mov	r0, r6
 8036632:	f000 f867 	bl	8036704 <_isatty_r>
 8036636:	b128      	cbz	r0, 8036644 <__smakebuf_r+0x70>
 8036638:	89a3      	ldrh	r3, [r4, #12]
 803663a:	f023 0303 	bic.w	r3, r3, #3
 803663e:	f043 0301 	orr.w	r3, r3, #1
 8036642:	81a3      	strh	r3, [r4, #12]
 8036644:	89a3      	ldrh	r3, [r4, #12]
 8036646:	431d      	orrs	r5, r3
 8036648:	81a5      	strh	r5, [r4, #12]
 803664a:	e7cf      	b.n	80365ec <__smakebuf_r+0x18>

0803664c <__swbuf_r>:
 803664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803664e:	460e      	mov	r6, r1
 8036650:	4614      	mov	r4, r2
 8036652:	4605      	mov	r5, r0
 8036654:	b118      	cbz	r0, 803665e <__swbuf_r+0x12>
 8036656:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8036658:	b90b      	cbnz	r3, 803665e <__swbuf_r+0x12>
 803665a:	f7fb fbeb 	bl	8031e34 <__sinit>
 803665e:	69a3      	ldr	r3, [r4, #24]
 8036660:	60a3      	str	r3, [r4, #8]
 8036662:	89a3      	ldrh	r3, [r4, #12]
 8036664:	0719      	lsls	r1, r3, #28
 8036666:	d529      	bpl.n	80366bc <__swbuf_r+0x70>
 8036668:	6923      	ldr	r3, [r4, #16]
 803666a:	b33b      	cbz	r3, 80366bc <__swbuf_r+0x70>
 803666c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8036670:	b2f6      	uxtb	r6, r6
 8036672:	049a      	lsls	r2, r3, #18
 8036674:	4637      	mov	r7, r6
 8036676:	d52a      	bpl.n	80366ce <__swbuf_r+0x82>
 8036678:	6823      	ldr	r3, [r4, #0]
 803667a:	6922      	ldr	r2, [r4, #16]
 803667c:	1a98      	subs	r0, r3, r2
 803667e:	6963      	ldr	r3, [r4, #20]
 8036680:	4283      	cmp	r3, r0
 8036682:	dc04      	bgt.n	803668e <__swbuf_r+0x42>
 8036684:	4621      	mov	r1, r4
 8036686:	4628      	mov	r0, r5
 8036688:	f7fe f900 	bl	803488c <_fflush_r>
 803668c:	b9e0      	cbnz	r0, 80366c8 <__swbuf_r+0x7c>
 803668e:	68a3      	ldr	r3, [r4, #8]
 8036690:	3b01      	subs	r3, #1
 8036692:	60a3      	str	r3, [r4, #8]
 8036694:	6823      	ldr	r3, [r4, #0]
 8036696:	1c5a      	adds	r2, r3, #1
 8036698:	6022      	str	r2, [r4, #0]
 803669a:	701e      	strb	r6, [r3, #0]
 803669c:	6962      	ldr	r2, [r4, #20]
 803669e:	1c43      	adds	r3, r0, #1
 80366a0:	429a      	cmp	r2, r3
 80366a2:	d004      	beq.n	80366ae <__swbuf_r+0x62>
 80366a4:	89a3      	ldrh	r3, [r4, #12]
 80366a6:	07db      	lsls	r3, r3, #31
 80366a8:	d506      	bpl.n	80366b8 <__swbuf_r+0x6c>
 80366aa:	2e0a      	cmp	r6, #10
 80366ac:	d104      	bne.n	80366b8 <__swbuf_r+0x6c>
 80366ae:	4621      	mov	r1, r4
 80366b0:	4628      	mov	r0, r5
 80366b2:	f7fe f8eb 	bl	803488c <_fflush_r>
 80366b6:	b938      	cbnz	r0, 80366c8 <__swbuf_r+0x7c>
 80366b8:	4638      	mov	r0, r7
 80366ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80366bc:	4621      	mov	r1, r4
 80366be:	4628      	mov	r0, r5
 80366c0:	f7fe fa54 	bl	8034b6c <__swsetup_r>
 80366c4:	2800      	cmp	r0, #0
 80366c6:	d0d1      	beq.n	803666c <__swbuf_r+0x20>
 80366c8:	f04f 37ff 	mov.w	r7, #4294967295
 80366cc:	e7f4      	b.n	80366b8 <__swbuf_r+0x6c>
 80366ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80366d2:	81a3      	strh	r3, [r4, #12]
 80366d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80366d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80366da:	6663      	str	r3, [r4, #100]	; 0x64
 80366dc:	e7cc      	b.n	8036678 <__swbuf_r+0x2c>
	...

080366e0 <_fstat_r>:
 80366e0:	b538      	push	{r3, r4, r5, lr}
 80366e2:	4d07      	ldr	r5, [pc, #28]	; (8036700 <_fstat_r+0x20>)
 80366e4:	2300      	movs	r3, #0
 80366e6:	4604      	mov	r4, r0
 80366e8:	4608      	mov	r0, r1
 80366ea:	4611      	mov	r1, r2
 80366ec:	602b      	str	r3, [r5, #0]
 80366ee:	f7f1 f9fb 	bl	8027ae8 <_fstat>
 80366f2:	1c43      	adds	r3, r0, #1
 80366f4:	d102      	bne.n	80366fc <_fstat_r+0x1c>
 80366f6:	682b      	ldr	r3, [r5, #0]
 80366f8:	b103      	cbz	r3, 80366fc <_fstat_r+0x1c>
 80366fa:	6023      	str	r3, [r4, #0]
 80366fc:	bd38      	pop	{r3, r4, r5, pc}
 80366fe:	bf00      	nop
 8036700:	20008dec 	.word	0x20008dec

08036704 <_isatty_r>:
 8036704:	b538      	push	{r3, r4, r5, lr}
 8036706:	4d06      	ldr	r5, [pc, #24]	; (8036720 <_isatty_r+0x1c>)
 8036708:	2300      	movs	r3, #0
 803670a:	4604      	mov	r4, r0
 803670c:	4608      	mov	r0, r1
 803670e:	602b      	str	r3, [r5, #0]
 8036710:	f7f1 f9fa 	bl	8027b08 <_isatty>
 8036714:	1c43      	adds	r3, r0, #1
 8036716:	d102      	bne.n	803671e <_isatty_r+0x1a>
 8036718:	682b      	ldr	r3, [r5, #0]
 803671a:	b103      	cbz	r3, 803671e <_isatty_r+0x1a>
 803671c:	6023      	str	r3, [r4, #0]
 803671e:	bd38      	pop	{r3, r4, r5, pc}
 8036720:	20008dec 	.word	0x20008dec

08036724 <__assert_func>:
 8036724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8036726:	4614      	mov	r4, r2
 8036728:	461a      	mov	r2, r3
 803672a:	4b09      	ldr	r3, [pc, #36]	; (8036750 <__assert_func+0x2c>)
 803672c:	681b      	ldr	r3, [r3, #0]
 803672e:	4605      	mov	r5, r0
 8036730:	68d8      	ldr	r0, [r3, #12]
 8036732:	b14c      	cbz	r4, 8036748 <__assert_func+0x24>
 8036734:	4b07      	ldr	r3, [pc, #28]	; (8036754 <__assert_func+0x30>)
 8036736:	9100      	str	r1, [sp, #0]
 8036738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803673c:	4906      	ldr	r1, [pc, #24]	; (8036758 <__assert_func+0x34>)
 803673e:	462b      	mov	r3, r5
 8036740:	f000 f844 	bl	80367cc <fiprintf>
 8036744:	f000 f854 	bl	80367f0 <abort>
 8036748:	4b04      	ldr	r3, [pc, #16]	; (803675c <__assert_func+0x38>)
 803674a:	461c      	mov	r4, r3
 803674c:	e7f3      	b.n	8036736 <__assert_func+0x12>
 803674e:	bf00      	nop
 8036750:	200003a8 	.word	0x200003a8
 8036754:	08037905 	.word	0x08037905
 8036758:	08037912 	.word	0x08037912
 803675c:	08037940 	.word	0x08037940

08036760 <_calloc_r>:
 8036760:	b538      	push	{r3, r4, r5, lr}
 8036762:	fba1 1502 	umull	r1, r5, r1, r2
 8036766:	b92d      	cbnz	r5, 8036774 <_calloc_r+0x14>
 8036768:	f7fb fdec 	bl	8032344 <_malloc_r>
 803676c:	4604      	mov	r4, r0
 803676e:	b938      	cbnz	r0, 8036780 <_calloc_r+0x20>
 8036770:	4620      	mov	r0, r4
 8036772:	bd38      	pop	{r3, r4, r5, pc}
 8036774:	f7fb fc86 	bl	8032084 <__errno>
 8036778:	230c      	movs	r3, #12
 803677a:	6003      	str	r3, [r0, #0]
 803677c:	2400      	movs	r4, #0
 803677e:	e7f7      	b.n	8036770 <_calloc_r+0x10>
 8036780:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8036784:	f022 0203 	bic.w	r2, r2, #3
 8036788:	3a04      	subs	r2, #4
 803678a:	2a24      	cmp	r2, #36	; 0x24
 803678c:	d819      	bhi.n	80367c2 <_calloc_r+0x62>
 803678e:	2a13      	cmp	r2, #19
 8036790:	d915      	bls.n	80367be <_calloc_r+0x5e>
 8036792:	2a1b      	cmp	r2, #27
 8036794:	e9c0 5500 	strd	r5, r5, [r0]
 8036798:	d806      	bhi.n	80367a8 <_calloc_r+0x48>
 803679a:	f100 0308 	add.w	r3, r0, #8
 803679e:	2200      	movs	r2, #0
 80367a0:	e9c3 2200 	strd	r2, r2, [r3]
 80367a4:	609a      	str	r2, [r3, #8]
 80367a6:	e7e3      	b.n	8036770 <_calloc_r+0x10>
 80367a8:	2a24      	cmp	r2, #36	; 0x24
 80367aa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80367ae:	bf11      	iteee	ne
 80367b0:	f100 0310 	addne.w	r3, r0, #16
 80367b4:	6105      	streq	r5, [r0, #16]
 80367b6:	f100 0318 	addeq.w	r3, r0, #24
 80367ba:	6145      	streq	r5, [r0, #20]
 80367bc:	e7ef      	b.n	803679e <_calloc_r+0x3e>
 80367be:	4603      	mov	r3, r0
 80367c0:	e7ed      	b.n	803679e <_calloc_r+0x3e>
 80367c2:	4629      	mov	r1, r5
 80367c4:	f7fb fc0f 	bl	8031fe6 <memset>
 80367c8:	e7d2      	b.n	8036770 <_calloc_r+0x10>
	...

080367cc <fiprintf>:
 80367cc:	b40e      	push	{r1, r2, r3}
 80367ce:	b503      	push	{r0, r1, lr}
 80367d0:	4601      	mov	r1, r0
 80367d2:	ab03      	add	r3, sp, #12
 80367d4:	4805      	ldr	r0, [pc, #20]	; (80367ec <fiprintf+0x20>)
 80367d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80367da:	6800      	ldr	r0, [r0, #0]
 80367dc:	9301      	str	r3, [sp, #4]
 80367de:	f7fd fa9d 	bl	8033d1c <_vfiprintf_r>
 80367e2:	b002      	add	sp, #8
 80367e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80367e8:	b003      	add	sp, #12
 80367ea:	4770      	bx	lr
 80367ec:	200003a8 	.word	0x200003a8

080367f0 <abort>:
 80367f0:	b508      	push	{r3, lr}
 80367f2:	2006      	movs	r0, #6
 80367f4:	f000 f82c 	bl	8036850 <raise>
 80367f8:	2001      	movs	r0, #1
 80367fa:	f7f1 f942 	bl	8027a82 <_exit>

080367fe <_raise_r>:
 80367fe:	291f      	cmp	r1, #31
 8036800:	b538      	push	{r3, r4, r5, lr}
 8036802:	4604      	mov	r4, r0
 8036804:	460d      	mov	r5, r1
 8036806:	d904      	bls.n	8036812 <_raise_r+0x14>
 8036808:	2316      	movs	r3, #22
 803680a:	6003      	str	r3, [r0, #0]
 803680c:	f04f 30ff 	mov.w	r0, #4294967295
 8036810:	bd38      	pop	{r3, r4, r5, pc}
 8036812:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8036816:	b112      	cbz	r2, 803681e <_raise_r+0x20>
 8036818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803681c:	b94b      	cbnz	r3, 8036832 <_raise_r+0x34>
 803681e:	4620      	mov	r0, r4
 8036820:	f000 f830 	bl	8036884 <_getpid_r>
 8036824:	462a      	mov	r2, r5
 8036826:	4601      	mov	r1, r0
 8036828:	4620      	mov	r0, r4
 803682a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803682e:	f000 b817 	b.w	8036860 <_kill_r>
 8036832:	2b01      	cmp	r3, #1
 8036834:	d00a      	beq.n	803684c <_raise_r+0x4e>
 8036836:	1c59      	adds	r1, r3, #1
 8036838:	d103      	bne.n	8036842 <_raise_r+0x44>
 803683a:	2316      	movs	r3, #22
 803683c:	6003      	str	r3, [r0, #0]
 803683e:	2001      	movs	r0, #1
 8036840:	e7e6      	b.n	8036810 <_raise_r+0x12>
 8036842:	2400      	movs	r4, #0
 8036844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8036848:	4628      	mov	r0, r5
 803684a:	4798      	blx	r3
 803684c:	2000      	movs	r0, #0
 803684e:	e7df      	b.n	8036810 <_raise_r+0x12>

08036850 <raise>:
 8036850:	4b02      	ldr	r3, [pc, #8]	; (803685c <raise+0xc>)
 8036852:	4601      	mov	r1, r0
 8036854:	6818      	ldr	r0, [r3, #0]
 8036856:	f7ff bfd2 	b.w	80367fe <_raise_r>
 803685a:	bf00      	nop
 803685c:	200003a8 	.word	0x200003a8

08036860 <_kill_r>:
 8036860:	b538      	push	{r3, r4, r5, lr}
 8036862:	4d07      	ldr	r5, [pc, #28]	; (8036880 <_kill_r+0x20>)
 8036864:	2300      	movs	r3, #0
 8036866:	4604      	mov	r4, r0
 8036868:	4608      	mov	r0, r1
 803686a:	4611      	mov	r1, r2
 803686c:	602b      	str	r3, [r5, #0]
 803686e:	f7f1 f8f8 	bl	8027a62 <_kill>
 8036872:	1c43      	adds	r3, r0, #1
 8036874:	d102      	bne.n	803687c <_kill_r+0x1c>
 8036876:	682b      	ldr	r3, [r5, #0]
 8036878:	b103      	cbz	r3, 803687c <_kill_r+0x1c>
 803687a:	6023      	str	r3, [r4, #0]
 803687c:	bd38      	pop	{r3, r4, r5, pc}
 803687e:	bf00      	nop
 8036880:	20008dec 	.word	0x20008dec

08036884 <_getpid_r>:
 8036884:	f7f1 b8e5 	b.w	8027a52 <_getpid>

08036888 <_init>:
 8036888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803688a:	bf00      	nop
 803688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803688e:	bc08      	pop	{r3}
 8036890:	469e      	mov	lr, r3
 8036892:	4770      	bx	lr

08036894 <_fini>:
 8036894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036896:	bf00      	nop
 8036898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803689a:	bc08      	pop	{r3}
 803689c:	469e      	mov	lr, r3
 803689e:	4770      	bx	lr
