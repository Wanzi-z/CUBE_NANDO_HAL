
programmer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f8  08022190  08022190  00002190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  08032488  08032488  00012488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803335c  0803335c  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0803335c  0803335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033364  08033364  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033364  08033364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033368  08033368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0803336c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00008484  200002d8  200002d8  000202d8  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  2000875c  2000875c  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021adc  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000064fb  00000000  00000000  00041e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be0  00000000  00000000  00048320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014ed  00000000  00000000  00049f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002987b  00000000  00000000  0004b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000289c4  00000000  00000000  00074c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7b36  00000000  00000000  0009d62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007668  00000000  00000000  00175164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08022190 <__do_global_dtors_aux>:
 8022190:	b510      	push	{r4, lr}
 8022192:	4c05      	ldr	r4, [pc, #20]	; (80221a8 <__do_global_dtors_aux+0x18>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	b933      	cbnz	r3, 80221a6 <__do_global_dtors_aux+0x16>
 8022198:	4b04      	ldr	r3, [pc, #16]	; (80221ac <__do_global_dtors_aux+0x1c>)
 802219a:	b113      	cbz	r3, 80221a2 <__do_global_dtors_aux+0x12>
 802219c:	4804      	ldr	r0, [pc, #16]	; (80221b0 <__do_global_dtors_aux+0x20>)
 802219e:	f3af 8000 	nop.w
 80221a2:	2301      	movs	r3, #1
 80221a4:	7023      	strb	r3, [r4, #0]
 80221a6:	bd10      	pop	{r4, pc}
 80221a8:	200002d8 	.word	0x200002d8
 80221ac:	00000000 	.word	0x00000000
 80221b0:	08032470 	.word	0x08032470

080221b4 <frame_dummy>:
 80221b4:	b508      	push	{r3, lr}
 80221b6:	4b03      	ldr	r3, [pc, #12]	; (80221c4 <frame_dummy+0x10>)
 80221b8:	b11b      	cbz	r3, 80221c2 <frame_dummy+0xe>
 80221ba:	4903      	ldr	r1, [pc, #12]	; (80221c8 <frame_dummy+0x14>)
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <frame_dummy+0x18>)
 80221be:	f3af 8000 	nop.w
 80221c2:	bd08      	pop	{r3, pc}
 80221c4:	00000000 	.word	0x00000000
 80221c8:	200002dc 	.word	0x200002dc
 80221cc:	08032470 	.word	0x08032470

080221d0 <memchr>:
 80221d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80221d4:	2a10      	cmp	r2, #16
 80221d6:	db2b      	blt.n	8022230 <memchr+0x60>
 80221d8:	f010 0f07 	tst.w	r0, #7
 80221dc:	d008      	beq.n	80221f0 <memchr+0x20>
 80221de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80221e2:	3a01      	subs	r2, #1
 80221e4:	428b      	cmp	r3, r1
 80221e6:	d02d      	beq.n	8022244 <memchr+0x74>
 80221e8:	f010 0f07 	tst.w	r0, #7
 80221ec:	b342      	cbz	r2, 8022240 <memchr+0x70>
 80221ee:	d1f6      	bne.n	80221de <memchr+0xe>
 80221f0:	b4f0      	push	{r4, r5, r6, r7}
 80221f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80221f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80221fa:	f022 0407 	bic.w	r4, r2, #7
 80221fe:	f07f 0700 	mvns.w	r7, #0
 8022202:	2300      	movs	r3, #0
 8022204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022208:	3c08      	subs	r4, #8
 802220a:	ea85 0501 	eor.w	r5, r5, r1
 802220e:	ea86 0601 	eor.w	r6, r6, r1
 8022212:	fa85 f547 	uadd8	r5, r5, r7
 8022216:	faa3 f587 	sel	r5, r3, r7
 802221a:	fa86 f647 	uadd8	r6, r6, r7
 802221e:	faa5 f687 	sel	r6, r5, r7
 8022222:	b98e      	cbnz	r6, 8022248 <memchr+0x78>
 8022224:	d1ee      	bne.n	8022204 <memchr+0x34>
 8022226:	bcf0      	pop	{r4, r5, r6, r7}
 8022228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802222c:	f002 0207 	and.w	r2, r2, #7
 8022230:	b132      	cbz	r2, 8022240 <memchr+0x70>
 8022232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022236:	3a01      	subs	r2, #1
 8022238:	ea83 0301 	eor.w	r3, r3, r1
 802223c:	b113      	cbz	r3, 8022244 <memchr+0x74>
 802223e:	d1f8      	bne.n	8022232 <memchr+0x62>
 8022240:	2000      	movs	r0, #0
 8022242:	4770      	bx	lr
 8022244:	3801      	subs	r0, #1
 8022246:	4770      	bx	lr
 8022248:	2d00      	cmp	r5, #0
 802224a:	bf06      	itte	eq
 802224c:	4635      	moveq	r5, r6
 802224e:	3803      	subeq	r0, #3
 8022250:	3807      	subne	r0, #7
 8022252:	f015 0f01 	tst.w	r5, #1
 8022256:	d107      	bne.n	8022268 <memchr+0x98>
 8022258:	3001      	adds	r0, #1
 802225a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802225e:	bf02      	ittt	eq
 8022260:	3001      	addeq	r0, #1
 8022262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8022266:	3001      	addeq	r0, #1
 8022268:	bcf0      	pop	{r4, r5, r6, r7}
 802226a:	3801      	subs	r0, #1
 802226c:	4770      	bx	lr
 802226e:	bf00      	nop

08022270 <__aeabi_uldivmod>:
 8022270:	b953      	cbnz	r3, 8022288 <__aeabi_uldivmod+0x18>
 8022272:	b94a      	cbnz	r2, 8022288 <__aeabi_uldivmod+0x18>
 8022274:	2900      	cmp	r1, #0
 8022276:	bf08      	it	eq
 8022278:	2800      	cmpeq	r0, #0
 802227a:	bf1c      	itt	ne
 802227c:	f04f 31ff 	movne.w	r1, #4294967295
 8022280:	f04f 30ff 	movne.w	r0, #4294967295
 8022284:	f000 b970 	b.w	8022568 <__aeabi_idiv0>
 8022288:	f1ad 0c08 	sub.w	ip, sp, #8
 802228c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022290:	f000 f806 	bl	80222a0 <__udivmoddi4>
 8022294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802229c:	b004      	add	sp, #16
 802229e:	4770      	bx	lr

080222a0 <__udivmoddi4>:
 80222a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222a4:	9e08      	ldr	r6, [sp, #32]
 80222a6:	460d      	mov	r5, r1
 80222a8:	4604      	mov	r4, r0
 80222aa:	460f      	mov	r7, r1
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d14a      	bne.n	8022346 <__udivmoddi4+0xa6>
 80222b0:	428a      	cmp	r2, r1
 80222b2:	4694      	mov	ip, r2
 80222b4:	d965      	bls.n	8022382 <__udivmoddi4+0xe2>
 80222b6:	fab2 f382 	clz	r3, r2
 80222ba:	b143      	cbz	r3, 80222ce <__udivmoddi4+0x2e>
 80222bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80222c0:	f1c3 0220 	rsb	r2, r3, #32
 80222c4:	409f      	lsls	r7, r3
 80222c6:	fa20 f202 	lsr.w	r2, r0, r2
 80222ca:	4317      	orrs	r7, r2
 80222cc:	409c      	lsls	r4, r3
 80222ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80222d2:	fa1f f58c 	uxth.w	r5, ip
 80222d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80222da:	0c22      	lsrs	r2, r4, #16
 80222dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80222e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80222e4:	fb01 f005 	mul.w	r0, r1, r5
 80222e8:	4290      	cmp	r0, r2
 80222ea:	d90a      	bls.n	8022302 <__udivmoddi4+0x62>
 80222ec:	eb1c 0202 	adds.w	r2, ip, r2
 80222f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80222f4:	f080 811c 	bcs.w	8022530 <__udivmoddi4+0x290>
 80222f8:	4290      	cmp	r0, r2
 80222fa:	f240 8119 	bls.w	8022530 <__udivmoddi4+0x290>
 80222fe:	3902      	subs	r1, #2
 8022300:	4462      	add	r2, ip
 8022302:	1a12      	subs	r2, r2, r0
 8022304:	b2a4      	uxth	r4, r4
 8022306:	fbb2 f0fe 	udiv	r0, r2, lr
 802230a:	fb0e 2210 	mls	r2, lr, r0, r2
 802230e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022312:	fb00 f505 	mul.w	r5, r0, r5
 8022316:	42a5      	cmp	r5, r4
 8022318:	d90a      	bls.n	8022330 <__udivmoddi4+0x90>
 802231a:	eb1c 0404 	adds.w	r4, ip, r4
 802231e:	f100 32ff 	add.w	r2, r0, #4294967295
 8022322:	f080 8107 	bcs.w	8022534 <__udivmoddi4+0x294>
 8022326:	42a5      	cmp	r5, r4
 8022328:	f240 8104 	bls.w	8022534 <__udivmoddi4+0x294>
 802232c:	4464      	add	r4, ip
 802232e:	3802      	subs	r0, #2
 8022330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022334:	1b64      	subs	r4, r4, r5
 8022336:	2100      	movs	r1, #0
 8022338:	b11e      	cbz	r6, 8022342 <__udivmoddi4+0xa2>
 802233a:	40dc      	lsrs	r4, r3
 802233c:	2300      	movs	r3, #0
 802233e:	e9c6 4300 	strd	r4, r3, [r6]
 8022342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022346:	428b      	cmp	r3, r1
 8022348:	d908      	bls.n	802235c <__udivmoddi4+0xbc>
 802234a:	2e00      	cmp	r6, #0
 802234c:	f000 80ed 	beq.w	802252a <__udivmoddi4+0x28a>
 8022350:	2100      	movs	r1, #0
 8022352:	e9c6 0500 	strd	r0, r5, [r6]
 8022356:	4608      	mov	r0, r1
 8022358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802235c:	fab3 f183 	clz	r1, r3
 8022360:	2900      	cmp	r1, #0
 8022362:	d149      	bne.n	80223f8 <__udivmoddi4+0x158>
 8022364:	42ab      	cmp	r3, r5
 8022366:	d302      	bcc.n	802236e <__udivmoddi4+0xce>
 8022368:	4282      	cmp	r2, r0
 802236a:	f200 80f8 	bhi.w	802255e <__udivmoddi4+0x2be>
 802236e:	1a84      	subs	r4, r0, r2
 8022370:	eb65 0203 	sbc.w	r2, r5, r3
 8022374:	2001      	movs	r0, #1
 8022376:	4617      	mov	r7, r2
 8022378:	2e00      	cmp	r6, #0
 802237a:	d0e2      	beq.n	8022342 <__udivmoddi4+0xa2>
 802237c:	e9c6 4700 	strd	r4, r7, [r6]
 8022380:	e7df      	b.n	8022342 <__udivmoddi4+0xa2>
 8022382:	b902      	cbnz	r2, 8022386 <__udivmoddi4+0xe6>
 8022384:	deff      	udf	#255	; 0xff
 8022386:	fab2 f382 	clz	r3, r2
 802238a:	2b00      	cmp	r3, #0
 802238c:	f040 8090 	bne.w	80224b0 <__udivmoddi4+0x210>
 8022390:	1a8a      	subs	r2, r1, r2
 8022392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022396:	fa1f fe8c 	uxth.w	lr, ip
 802239a:	2101      	movs	r1, #1
 802239c:	fbb2 f5f7 	udiv	r5, r2, r7
 80223a0:	fb07 2015 	mls	r0, r7, r5, r2
 80223a4:	0c22      	lsrs	r2, r4, #16
 80223a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80223aa:	fb0e f005 	mul.w	r0, lr, r5
 80223ae:	4290      	cmp	r0, r2
 80223b0:	d908      	bls.n	80223c4 <__udivmoddi4+0x124>
 80223b2:	eb1c 0202 	adds.w	r2, ip, r2
 80223b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80223ba:	d202      	bcs.n	80223c2 <__udivmoddi4+0x122>
 80223bc:	4290      	cmp	r0, r2
 80223be:	f200 80cb 	bhi.w	8022558 <__udivmoddi4+0x2b8>
 80223c2:	4645      	mov	r5, r8
 80223c4:	1a12      	subs	r2, r2, r0
 80223c6:	b2a4      	uxth	r4, r4
 80223c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80223cc:	fb07 2210 	mls	r2, r7, r0, r2
 80223d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80223d4:	fb0e fe00 	mul.w	lr, lr, r0
 80223d8:	45a6      	cmp	lr, r4
 80223da:	d908      	bls.n	80223ee <__udivmoddi4+0x14e>
 80223dc:	eb1c 0404 	adds.w	r4, ip, r4
 80223e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80223e4:	d202      	bcs.n	80223ec <__udivmoddi4+0x14c>
 80223e6:	45a6      	cmp	lr, r4
 80223e8:	f200 80bb 	bhi.w	8022562 <__udivmoddi4+0x2c2>
 80223ec:	4610      	mov	r0, r2
 80223ee:	eba4 040e 	sub.w	r4, r4, lr
 80223f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80223f6:	e79f      	b.n	8022338 <__udivmoddi4+0x98>
 80223f8:	f1c1 0720 	rsb	r7, r1, #32
 80223fc:	408b      	lsls	r3, r1
 80223fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8022402:	ea4c 0c03 	orr.w	ip, ip, r3
 8022406:	fa05 f401 	lsl.w	r4, r5, r1
 802240a:	fa20 f307 	lsr.w	r3, r0, r7
 802240e:	40fd      	lsrs	r5, r7
 8022410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022414:	4323      	orrs	r3, r4
 8022416:	fbb5 f8f9 	udiv	r8, r5, r9
 802241a:	fa1f fe8c 	uxth.w	lr, ip
 802241e:	fb09 5518 	mls	r5, r9, r8, r5
 8022422:	0c1c      	lsrs	r4, r3, #16
 8022424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8022428:	fb08 f50e 	mul.w	r5, r8, lr
 802242c:	42a5      	cmp	r5, r4
 802242e:	fa02 f201 	lsl.w	r2, r2, r1
 8022432:	fa00 f001 	lsl.w	r0, r0, r1
 8022436:	d90b      	bls.n	8022450 <__udivmoddi4+0x1b0>
 8022438:	eb1c 0404 	adds.w	r4, ip, r4
 802243c:	f108 3aff 	add.w	sl, r8, #4294967295
 8022440:	f080 8088 	bcs.w	8022554 <__udivmoddi4+0x2b4>
 8022444:	42a5      	cmp	r5, r4
 8022446:	f240 8085 	bls.w	8022554 <__udivmoddi4+0x2b4>
 802244a:	f1a8 0802 	sub.w	r8, r8, #2
 802244e:	4464      	add	r4, ip
 8022450:	1b64      	subs	r4, r4, r5
 8022452:	b29d      	uxth	r5, r3
 8022454:	fbb4 f3f9 	udiv	r3, r4, r9
 8022458:	fb09 4413 	mls	r4, r9, r3, r4
 802245c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8022460:	fb03 fe0e 	mul.w	lr, r3, lr
 8022464:	45a6      	cmp	lr, r4
 8022466:	d908      	bls.n	802247a <__udivmoddi4+0x1da>
 8022468:	eb1c 0404 	adds.w	r4, ip, r4
 802246c:	f103 35ff 	add.w	r5, r3, #4294967295
 8022470:	d26c      	bcs.n	802254c <__udivmoddi4+0x2ac>
 8022472:	45a6      	cmp	lr, r4
 8022474:	d96a      	bls.n	802254c <__udivmoddi4+0x2ac>
 8022476:	3b02      	subs	r3, #2
 8022478:	4464      	add	r4, ip
 802247a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 802247e:	fba3 9502 	umull	r9, r5, r3, r2
 8022482:	eba4 040e 	sub.w	r4, r4, lr
 8022486:	42ac      	cmp	r4, r5
 8022488:	46c8      	mov	r8, r9
 802248a:	46ae      	mov	lr, r5
 802248c:	d356      	bcc.n	802253c <__udivmoddi4+0x29c>
 802248e:	d053      	beq.n	8022538 <__udivmoddi4+0x298>
 8022490:	b156      	cbz	r6, 80224a8 <__udivmoddi4+0x208>
 8022492:	ebb0 0208 	subs.w	r2, r0, r8
 8022496:	eb64 040e 	sbc.w	r4, r4, lr
 802249a:	fa04 f707 	lsl.w	r7, r4, r7
 802249e:	40ca      	lsrs	r2, r1
 80224a0:	40cc      	lsrs	r4, r1
 80224a2:	4317      	orrs	r7, r2
 80224a4:	e9c6 7400 	strd	r7, r4, [r6]
 80224a8:	4618      	mov	r0, r3
 80224aa:	2100      	movs	r1, #0
 80224ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224b0:	f1c3 0120 	rsb	r1, r3, #32
 80224b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80224b8:	fa20 f201 	lsr.w	r2, r0, r1
 80224bc:	fa25 f101 	lsr.w	r1, r5, r1
 80224c0:	409d      	lsls	r5, r3
 80224c2:	432a      	orrs	r2, r5
 80224c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80224c8:	fa1f fe8c 	uxth.w	lr, ip
 80224cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80224d0:	fb07 1510 	mls	r5, r7, r0, r1
 80224d4:	0c11      	lsrs	r1, r2, #16
 80224d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80224da:	fb00 f50e 	mul.w	r5, r0, lr
 80224de:	428d      	cmp	r5, r1
 80224e0:	fa04 f403 	lsl.w	r4, r4, r3
 80224e4:	d908      	bls.n	80224f8 <__udivmoddi4+0x258>
 80224e6:	eb1c 0101 	adds.w	r1, ip, r1
 80224ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80224ee:	d22f      	bcs.n	8022550 <__udivmoddi4+0x2b0>
 80224f0:	428d      	cmp	r5, r1
 80224f2:	d92d      	bls.n	8022550 <__udivmoddi4+0x2b0>
 80224f4:	3802      	subs	r0, #2
 80224f6:	4461      	add	r1, ip
 80224f8:	1b49      	subs	r1, r1, r5
 80224fa:	b292      	uxth	r2, r2
 80224fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8022500:	fb07 1115 	mls	r1, r7, r5, r1
 8022504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022508:	fb05 f10e 	mul.w	r1, r5, lr
 802250c:	4291      	cmp	r1, r2
 802250e:	d908      	bls.n	8022522 <__udivmoddi4+0x282>
 8022510:	eb1c 0202 	adds.w	r2, ip, r2
 8022514:	f105 38ff 	add.w	r8, r5, #4294967295
 8022518:	d216      	bcs.n	8022548 <__udivmoddi4+0x2a8>
 802251a:	4291      	cmp	r1, r2
 802251c:	d914      	bls.n	8022548 <__udivmoddi4+0x2a8>
 802251e:	3d02      	subs	r5, #2
 8022520:	4462      	add	r2, ip
 8022522:	1a52      	subs	r2, r2, r1
 8022524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8022528:	e738      	b.n	802239c <__udivmoddi4+0xfc>
 802252a:	4631      	mov	r1, r6
 802252c:	4630      	mov	r0, r6
 802252e:	e708      	b.n	8022342 <__udivmoddi4+0xa2>
 8022530:	4639      	mov	r1, r7
 8022532:	e6e6      	b.n	8022302 <__udivmoddi4+0x62>
 8022534:	4610      	mov	r0, r2
 8022536:	e6fb      	b.n	8022330 <__udivmoddi4+0x90>
 8022538:	4548      	cmp	r0, r9
 802253a:	d2a9      	bcs.n	8022490 <__udivmoddi4+0x1f0>
 802253c:	ebb9 0802 	subs.w	r8, r9, r2
 8022540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8022544:	3b01      	subs	r3, #1
 8022546:	e7a3      	b.n	8022490 <__udivmoddi4+0x1f0>
 8022548:	4645      	mov	r5, r8
 802254a:	e7ea      	b.n	8022522 <__udivmoddi4+0x282>
 802254c:	462b      	mov	r3, r5
 802254e:	e794      	b.n	802247a <__udivmoddi4+0x1da>
 8022550:	4640      	mov	r0, r8
 8022552:	e7d1      	b.n	80224f8 <__udivmoddi4+0x258>
 8022554:	46d0      	mov	r8, sl
 8022556:	e77b      	b.n	8022450 <__udivmoddi4+0x1b0>
 8022558:	3d02      	subs	r5, #2
 802255a:	4462      	add	r2, ip
 802255c:	e732      	b.n	80223c4 <__udivmoddi4+0x124>
 802255e:	4608      	mov	r0, r1
 8022560:	e70a      	b.n	8022378 <__udivmoddi4+0xd8>
 8022562:	4464      	add	r4, ip
 8022564:	3802      	subs	r0, #2
 8022566:	e742      	b.n	80223ee <__udivmoddi4+0x14e>

08022568 <__aeabi_idiv0>:
 8022568:	4770      	bx	lr
 802256a:	bf00      	nop

0802256c <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b084      	sub	sp, #16
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
 8022574:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8022576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802257a:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 802257c:	f000 f97c 	bl	8022878 <CDC_IsPacketSent>
 8022580:	4603      	mov	r3, r0
 8022582:	2b00      	cmp	r3, #0
 8022584:	d117      	bne.n	80225b6 <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022586:	4816      	ldr	r0, [pc, #88]	; (80225e0 <cdc_send+0x74>)
 8022588:	f00f f8fa 	bl	8031780 <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 802258c:	bf00      	nop
 802258e:	f000 f973 	bl	8022878 <CDC_IsPacketSent>
 8022592:	4603      	mov	r3, r0
 8022594:	2b00      	cmp	r3, #0
 8022596:	d105      	bne.n	80225a4 <cdc_send+0x38>
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	3b01      	subs	r3, #1
 802259c:	60fb      	str	r3, [r7, #12]
 802259e:	68fb      	ldr	r3, [r7, #12]
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d1f4      	bne.n	802258e <cdc_send+0x22>
        if (!timeout)
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d105      	bne.n	80225b6 <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 80225aa:	480e      	ldr	r0, [pc, #56]	; (80225e4 <cdc_send+0x78>)
 80225ac:	f00f f8e8 	bl	8031780 <puts>
            return -1;                                          // 返回错误代码
 80225b0:	f04f 33ff 	mov.w	r3, #4294967295
 80225b4:	e00f      	b.n	80225d6 <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 80225b6:	683b      	ldr	r3, [r7, #0]
 80225b8:	b2db      	uxtb	r3, r3
 80225ba:	4619      	mov	r1, r3
 80225bc:	6878      	ldr	r0, [r7, #4]
 80225be:	f000 f935 	bl	802282c <CDC_Send_DATA>
 80225c2:	4603      	mov	r3, r0
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d105      	bne.n	80225d4 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 80225c8:	4807      	ldr	r0, [pc, #28]	; (80225e8 <cdc_send+0x7c>)
 80225ca:	f00f f8d9 	bl	8031780 <puts>
        return -1;                                              // 返回错误代码
 80225ce:	f04f 33ff 	mov.w	r3, #4294967295
 80225d2:	e000      	b.n	80225d6 <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 80225d4:	2300      	movs	r3, #0
}
 80225d6:	4618      	mov	r0, r3
 80225d8:	3710      	adds	r7, #16
 80225da:	46bd      	mov	sp, r7
 80225dc:	bd80      	pop	{r7, pc}
 80225de:	bf00      	nop
 80225e0:	08032488 	.word	0x08032488
 80225e4:	080324a4 	.word	0x080324a4
 80225e8:	080324d0 	.word	0x080324d0

080225ec <cdc_send_ready>:

static int cdc_send_ready()
{
 80225ec:	b580      	push	{r7, lr}
 80225ee:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80225f0:	f000 f942 	bl	8022878 <CDC_IsPacketSent>
 80225f4:	4603      	mov	r3, r0
}
 80225f6:	4618      	mov	r0, r3
 80225f8:	bd80      	pop	{r7, pc}

080225fa <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80225fa:	b580      	push	{r7, lr}
 80225fc:	b082      	sub	sp, #8
 80225fe:	af00      	add	r7, sp, #0
 8022600:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f000 f81e 	bl	8022644 <USB_Data_Peek>
 8022608:	4603      	mov	r3, r0
}
 802260a:	4618      	mov	r0, r3
 802260c:	3708      	adds	r7, #8
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}

08022612 <cdc_consume>:

static void cdc_consume()
{
 8022612:	b580      	push	{r7, lr}
 8022614:	b082      	sub	sp, #8
 8022616:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022618:	1d3b      	adds	r3, r7, #4
 802261a:	4618      	mov	r0, r3
 802261c:	f000 f842 	bl	80226a4 <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022620:	f000 f8a0 	bl	8022764 <USB_DataRx_Sched>
}
 8022624:	bf00      	nop
 8022626:	3708      	adds	r7, #8
 8022628:	46bd      	mov	sp, r7
 802262a:	bd80      	pop	{r7, pc}

0802262c <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 802262c:	b580      	push	{r7, lr}
 802262e:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022630:	4803      	ldr	r0, [pc, #12]	; (8022640 <cdc_init+0x14>)
 8022632:	f003 fccb 	bl	8025fcc <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022636:	f000 f915 	bl	8022864 <CDC_Receive_DATA>
}
 802263a:	bf00      	nop
 802263c:	bd80      	pop	{r7, pc}
 802263e:	bf00      	nop
 8022640:	20000000 	.word	0x20000000

08022644 <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 8022644:	b480      	push	{r7}
 8022646:	b083      	sub	sp, #12
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
  if (!size)
 802264c:	4b12      	ldr	r3, [pc, #72]	; (8022698 <USB_Data_Peek+0x54>)
 802264e:	781b      	ldrb	r3, [r3, #0]
 8022650:	b2db      	uxtb	r3, r3
 8022652:	2b00      	cmp	r3, #0
 8022654:	d101      	bne.n	802265a <USB_Data_Peek+0x16>
    return 0;
 8022656:	2300      	movs	r3, #0
 8022658:	e017      	b.n	802268a <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 802265a:	4b10      	ldr	r3, [pc, #64]	; (802269c <USB_Data_Peek+0x58>)
 802265c:	781b      	ldrb	r3, [r3, #0]
 802265e:	b2db      	uxtb	r3, r3
 8022660:	461a      	mov	r2, r3
 8022662:	4613      	mov	r3, r2
 8022664:	011b      	lsls	r3, r3, #4
 8022666:	4413      	add	r3, r2
 8022668:	009b      	lsls	r3, r3, #2
 802266a:	4a0d      	ldr	r2, [pc, #52]	; (80226a0 <USB_Data_Peek+0x5c>)
 802266c:	441a      	add	r2, r3
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 8022672:	4b0a      	ldr	r3, [pc, #40]	; (802269c <USB_Data_Peek+0x58>)
 8022674:	781b      	ldrb	r3, [r3, #0]
 8022676:	b2db      	uxtb	r3, r3
 8022678:	4619      	mov	r1, r3
 802267a:	4a09      	ldr	r2, [pc, #36]	; (80226a0 <USB_Data_Peek+0x5c>)
 802267c:	460b      	mov	r3, r1
 802267e:	011b      	lsls	r3, r3, #4
 8022680:	440b      	add	r3, r1
 8022682:	009b      	lsls	r3, r3, #2
 8022684:	4413      	add	r3, r2
 8022686:	3340      	adds	r3, #64	; 0x40
 8022688:	681b      	ldr	r3, [r3, #0]
}
 802268a:	4618      	mov	r0, r3
 802268c:	370c      	adds	r7, #12
 802268e:	46bd      	mov	sp, r7
 8022690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022694:	4770      	bx	lr
 8022696:	bf00      	nop
 8022698:	20000c01 	.word	0x20000c01
 802269c:	20000c00 	.word	0x20000c00
 80226a0:	200002f8 	.word	0x200002f8

080226a4 <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 80226a4:	b480      	push	{r7}
 80226a6:	b085      	sub	sp, #20
 80226a8:	af00      	add	r7, sp, #0
 80226aa:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 80226ac:	4b21      	ldr	r3, [pc, #132]	; (8022734 <USB_Data_Get+0x90>)
 80226ae:	781b      	ldrb	r3, [r3, #0]
 80226b0:	b2db      	uxtb	r3, r3
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d101      	bne.n	80226ba <USB_Data_Get+0x16>
    return 0;
 80226b6:	2300      	movs	r3, #0
 80226b8:	e036      	b.n	8022728 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 80226ba:	4b1f      	ldr	r3, [pc, #124]	; (8022738 <USB_Data_Get+0x94>)
 80226bc:	781b      	ldrb	r3, [r3, #0]
 80226be:	b2db      	uxtb	r3, r3
 80226c0:	461a      	mov	r2, r3
 80226c2:	4613      	mov	r3, r2
 80226c4:	011b      	lsls	r3, r3, #4
 80226c6:	4413      	add	r3, r2
 80226c8:	009b      	lsls	r3, r3, #2
 80226ca:	4a1c      	ldr	r2, [pc, #112]	; (802273c <USB_Data_Get+0x98>)
 80226cc:	441a      	add	r2, r3
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 80226d2:	4b19      	ldr	r3, [pc, #100]	; (8022738 <USB_Data_Get+0x94>)
 80226d4:	781b      	ldrb	r3, [r3, #0]
 80226d6:	b2db      	uxtb	r3, r3
 80226d8:	4619      	mov	r1, r3
 80226da:	4a18      	ldr	r2, [pc, #96]	; (802273c <USB_Data_Get+0x98>)
 80226dc:	460b      	mov	r3, r1
 80226de:	011b      	lsls	r3, r3, #4
 80226e0:	440b      	add	r3, r1
 80226e2:	009b      	lsls	r3, r3, #2
 80226e4:	4413      	add	r3, r2
 80226e6:	3340      	adds	r3, #64	; 0x40
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 80226ec:	4b12      	ldr	r3, [pc, #72]	; (8022738 <USB_Data_Get+0x94>)
 80226ee:	781b      	ldrb	r3, [r3, #0]
 80226f0:	b2db      	uxtb	r3, r3
 80226f2:	1c5a      	adds	r2, r3, #1
 80226f4:	4b12      	ldr	r3, [pc, #72]	; (8022740 <USB_Data_Get+0x9c>)
 80226f6:	fb83 1302 	smull	r1, r3, r3, r2
 80226fa:	1119      	asrs	r1, r3, #4
 80226fc:	17d3      	asrs	r3, r2, #31
 80226fe:	1ac9      	subs	r1, r1, r3
 8022700:	460b      	mov	r3, r1
 8022702:	011b      	lsls	r3, r3, #4
 8022704:	440b      	add	r3, r1
 8022706:	005b      	lsls	r3, r3, #1
 8022708:	1ad1      	subs	r1, r2, r3
 802270a:	b2ca      	uxtb	r2, r1
 802270c:	4b0a      	ldr	r3, [pc, #40]	; (8022738 <USB_Data_Get+0x94>)
 802270e:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022710:	b672      	cpsid	i
}
 8022712:	bf00      	nop
  __disable_irq();
  size--;
 8022714:	4b07      	ldr	r3, [pc, #28]	; (8022734 <USB_Data_Get+0x90>)
 8022716:	781b      	ldrb	r3, [r3, #0]
 8022718:	b2db      	uxtb	r3, r3
 802271a:	3b01      	subs	r3, #1
 802271c:	b2da      	uxtb	r2, r3
 802271e:	4b05      	ldr	r3, [pc, #20]	; (8022734 <USB_Data_Get+0x90>)
 8022720:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8022722:	b662      	cpsie	i
}
 8022724:	bf00      	nop
  __enable_irq();

  return len;
 8022726:	68fb      	ldr	r3, [r7, #12]
}
 8022728:	4618      	mov	r0, r3
 802272a:	3714      	adds	r7, #20
 802272c:	46bd      	mov	sp, r7
 802272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022732:	4770      	bx	lr
 8022734:	20000c01 	.word	0x20000c01
 8022738:	20000c00 	.word	0x20000c00
 802273c:	200002f8 	.word	0x200002f8
 8022740:	78787879 	.word	0x78787879

08022744 <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 8022744:	b580      	push	{r7, lr}
 8022746:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8022748:	4b04      	ldr	r3, [pc, #16]	; (802275c <USB_DataRx_Sched_Internal+0x18>)
 802274a:	781b      	ldrb	r3, [r3, #0]
 802274c:	b2db      	uxtb	r3, r3
 802274e:	2b21      	cmp	r3, #33	; 0x21
 8022750:	d802      	bhi.n	8022758 <USB_DataRx_Sched_Internal+0x14>
//    SetEPRxValid(ENDP3);
	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 8022752:	4803      	ldr	r0, [pc, #12]	; (8022760 <USB_DataRx_Sched_Internal+0x1c>)
 8022754:	f00d ff5f 	bl	8030616 <USBD_CtlReceiveStatus>
}
 8022758:	bf00      	nop
 802275a:	bd80      	pop	{r7, pc}
 802275c:	20000c01 	.word	0x20000c01
 8022760:	20005220 	.word	0x20005220

08022764 <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 8022764:	b580      	push	{r7, lr}
 8022766:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8022768:	b672      	cpsid	i
}
 802276a:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 802276c:	f7ff ffea 	bl	8022744 <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 8022770:	b662      	cpsie	i
}
 8022772:	bf00      	nop
  __enable_irq();
}
 8022774:	bf00      	nop
 8022776:	bd80      	pop	{r7, pc}

08022778 <CDC_Receive_handler>:

// CDC接收数据回调函数
void CDC_Receive_handler(uint8_t* Buf, uint32_t Len)
{
 8022778:	b580      	push	{r7, lr}
 802277a:	b082      	sub	sp, #8
 802277c:	af00      	add	r7, sp, #0
 802277e:	6078      	str	r0, [r7, #4]
 8022780:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
 8022782:	2101      	movs	r1, #1
 8022784:	4823      	ldr	r0, [pc, #140]	; (8022814 <CDC_Receive_handler+0x9c>)
 8022786:	f00d ff59 	bl	803063c <USBD_GetRxCount>
 802278a:	4603      	mov	r3, r0
 802278c:	4a22      	ldr	r2, [pc, #136]	; (8022818 <CDC_Receive_handler+0xa0>)
 802278e:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 8022790:	4b22      	ldr	r3, [pc, #136]	; (802281c <CDC_Receive_handler+0xa4>)
 8022792:	781b      	ldrb	r3, [r3, #0]
 8022794:	b2db      	uxtb	r3, r3
 8022796:	2b21      	cmp	r3, #33	; 0x21
 8022798:	d838      	bhi.n	802280c <CDC_Receive_handler+0x94>
    {
        // 循环缓冲区索引移动
        tail = (tail + 1) % CIRC_BUF_SIZE;
 802279a:	4b21      	ldr	r3, [pc, #132]	; (8022820 <CDC_Receive_handler+0xa8>)
 802279c:	781b      	ldrb	r3, [r3, #0]
 802279e:	b2db      	uxtb	r3, r3
 80227a0:	1c5a      	adds	r2, r3, #1
 80227a2:	4b20      	ldr	r3, [pc, #128]	; (8022824 <CDC_Receive_handler+0xac>)
 80227a4:	fb83 1302 	smull	r1, r3, r3, r2
 80227a8:	1119      	asrs	r1, r3, #4
 80227aa:	17d3      	asrs	r3, r2, #31
 80227ac:	1ac9      	subs	r1, r1, r3
 80227ae:	460b      	mov	r3, r1
 80227b0:	011b      	lsls	r3, r3, #4
 80227b2:	440b      	add	r3, r1
 80227b4:	005b      	lsls	r3, r3, #1
 80227b6:	1ad1      	subs	r1, r2, r3
 80227b8:	b2ca      	uxtb	r2, r1
 80227ba:	4b19      	ldr	r3, [pc, #100]	; (8022820 <CDC_Receive_handler+0xa8>)
 80227bc:	701a      	strb	r2, [r3, #0]
        // 将接收到的数据复制到循环缓冲区
        // 将数据从 Buf 复制到 circ_buf[tail].pbuf
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 80227be:	4b18      	ldr	r3, [pc, #96]	; (8022820 <CDC_Receive_handler+0xa8>)
 80227c0:	781b      	ldrb	r3, [r3, #0]
 80227c2:	b2db      	uxtb	r3, r3
 80227c4:	461a      	mov	r2, r3
 80227c6:	4613      	mov	r3, r2
 80227c8:	011b      	lsls	r3, r3, #4
 80227ca:	4413      	add	r3, r2
 80227cc:	009b      	lsls	r3, r3, #2
 80227ce:	4a16      	ldr	r2, [pc, #88]	; (8022828 <CDC_Receive_handler+0xb0>)
 80227d0:	4413      	add	r3, r2
 80227d2:	4a11      	ldr	r2, [pc, #68]	; (8022818 <CDC_Receive_handler+0xa0>)
 80227d4:	6812      	ldr	r2, [r2, #0]
 80227d6:	6879      	ldr	r1, [r7, #4]
 80227d8:	4618      	mov	r0, r3
 80227da:	f00f f92c 	bl	8031a36 <memcpy>
        circ_buf[tail].len = Receive_length;
 80227de:	4b10      	ldr	r3, [pc, #64]	; (8022820 <CDC_Receive_handler+0xa8>)
 80227e0:	781b      	ldrb	r3, [r3, #0]
 80227e2:	b2db      	uxtb	r3, r3
 80227e4:	4618      	mov	r0, r3
 80227e6:	4b0c      	ldr	r3, [pc, #48]	; (8022818 <CDC_Receive_handler+0xa0>)
 80227e8:	681a      	ldr	r2, [r3, #0]
 80227ea:	490f      	ldr	r1, [pc, #60]	; (8022828 <CDC_Receive_handler+0xb0>)
 80227ec:	4603      	mov	r3, r0
 80227ee:	011b      	lsls	r3, r3, #4
 80227f0:	4403      	add	r3, r0
 80227f2:	009b      	lsls	r3, r3, #2
 80227f4:	440b      	add	r3, r1
 80227f6:	3340      	adds	r3, #64	; 0x40
 80227f8:	601a      	str	r2, [r3, #0]
        size++;
 80227fa:	4b08      	ldr	r3, [pc, #32]	; (802281c <CDC_Receive_handler+0xa4>)
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	b2db      	uxtb	r3, r3
 8022800:	3301      	adds	r3, #1
 8022802:	b2da      	uxtb	r2, r3
 8022804:	4b05      	ldr	r3, [pc, #20]	; (802281c <CDC_Receive_handler+0xa4>)
 8022806:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8022808:	f7ff ff9c 	bl	8022744 <USB_DataRx_Sched_Internal>
    // 发送数据到USART1
//    HAL_UART_Transmit(&huart1, circ_buf[tail].pbuf, Receive_length, HAL_MAX_DELAY);

    // 发送数据回USB HS
//    CDC_Transmit_HS(circ_buf[tail].pbuf, Receive_length); // 假设存在一个名为USBD_CDC_Transmit_HS的函数
}
 802280c:	bf00      	nop
 802280e:	3708      	adds	r7, #8
 8022810:	46bd      	mov	sp, r7
 8022812:	bd80      	pop	{r7, pc}
 8022814:	20005220 	.word	0x20005220
 8022818:	200002f4 	.word	0x200002f4
 802281c:	20000c01 	.word	0x20000c01
 8022820:	20000010 	.word	0x20000010
 8022824:	78787879 	.word	0x78787879
 8022828:	200002f8 	.word	0x200002f8

0802282c <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b082      	sub	sp, #8
 8022830:	af00      	add	r7, sp, #0
 8022832:	6078      	str	r0, [r7, #4]
 8022834:	460b      	mov	r3, r1
 8022836:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= VIRTUAL_COM_PORT_DATA_SIZE)
 8022838:	78fb      	ldrb	r3, [r7, #3]
 802283a:	2b40      	cmp	r3, #64	; 0x40
 802283c:	d80a      	bhi.n	8022854 <CDC_Send_DATA+0x28>
/*packet_sent = 0;
  memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
  CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
单次发送
 */
	  packet_sent = 0;
 802283e:	4b08      	ldr	r3, [pc, #32]	; (8022860 <CDC_Send_DATA+0x34>)
 8022840:	2200      	movs	r2, #0
 8022842:	601a      	str	r2, [r3, #0]
//	  uint8_t result = USBD_OK;
//      memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
      CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
 8022844:	78fb      	ldrb	r3, [r7, #3]
 8022846:	b29b      	uxth	r3, r3
 8022848:	4619      	mov	r1, r3
 802284a:	6878      	ldr	r0, [r7, #4]
 802284c:	f00e f892 	bl	8030974 <CDC_Transmit_HS>
  else
  {
    return 0;
    return USBD_OK;
  }
  return 1;
 8022850:	2301      	movs	r3, #1
 8022852:	e000      	b.n	8022856 <CDC_Send_DATA+0x2a>
    return 0;
 8022854:	2300      	movs	r3, #0
  return USBD_BUSY;
}
 8022856:	4618      	mov	r0, r3
 8022858:	3708      	adds	r7, #8
 802285a:	46bd      	mov	sp, r7
 802285c:	bd80      	pop	{r7, pc}
 802285e:	bf00      	nop
 8022860:	20000014 	.word	0x20000014

08022864 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8022864:	b580      	push	{r7, lr}
 8022866:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 8022868:	4802      	ldr	r0, [pc, #8]	; (8022874 <CDC_Receive_DATA+0x10>)
 802286a:	f00d fed4 	bl	8030616 <USBD_CtlReceiveStatus>
  return 1 ;
 802286e:	2301      	movs	r3, #1
}
 8022870:	4618      	mov	r0, r3
 8022872:	bd80      	pop	{r7, pc}
 8022874:	20005220 	.word	0x20005220

08022878 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 8022878:	b480      	push	{r7}
 802287a:	af00      	add	r7, sp, #0
  return packet_sent;
 802287c:	4b03      	ldr	r3, [pc, #12]	; (802288c <CDC_IsPacketSent+0x14>)
 802287e:	681b      	ldr	r3, [r3, #0]
}
 8022880:	4618      	mov	r0, r3
 8022882:	46bd      	mov	sp, r7
 8022884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022888:	4770      	bx	lr
 802288a:	bf00      	nop
 802288c:	20000014 	.word	0x20000014

08022890 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 8022890:	b480      	push	{r7}
 8022892:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 8022894:	4b06      	ldr	r3, [pc, #24]	; (80228b0 <is_external_clock_avail+0x20>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802289c:	2b00      	cmp	r3, #0
 802289e:	bf14      	ite	ne
 80228a0:	2301      	movne	r3, #1
 80228a2:	2300      	moveq	r3, #0
 80228a4:	b2db      	uxtb	r3, r3
}
 80228a6:	4618      	mov	r0, r3
 80228a8:	46bd      	mov	sp, r7
 80228aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ae:	4770      	bx	lr
 80228b0:	40023800 	.word	0x40023800

080228b4 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 80228b4:	b580      	push	{r7, lr}
 80228b6:	b088      	sub	sp, #32
 80228b8:	af00      	add	r7, sp, #0
 80228ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 80228bc:	f005 fa5e 	bl	8027d7c <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80228c0:	2300      	movs	r3, #0
 80228c2:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 80228c4:	2300      	movs	r3, #0
 80228c6:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 80228c8:	2301      	movs	r3, #1
 80228ca:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 80228cc:	2302      	movs	r3, #2
 80228ce:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 80228d0:	f107 0308 	add.w	r3, r7, #8
 80228d4:	2100      	movs	r1, #0
 80228d6:	4618      	mov	r0, r3
 80228d8:	f005 fbb2 	bl	8028040 <HAL_FLASHEx_Erase>
 80228dc:	4603      	mov	r3, r0
 80228de:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 80228e0:	f005 fa6e 	bl	8027dc0 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 80228e4:	7ffb      	ldrb	r3, [r7, #31]
 80228e6:	2b00      	cmp	r3, #0
 80228e8:	d002      	beq.n	80228f0 <flash_page_erase+0x3c>
 80228ea:	f04f 33ff 	mov.w	r3, #4294967295
 80228ee:	e000      	b.n	80228f2 <flash_page_erase+0x3e>
 80228f0:	2300      	movs	r3, #0
}
 80228f2:	4618      	mov	r0, r3
 80228f4:	3720      	adds	r7, #32
 80228f6:	46bd      	mov	sp, r7
 80228f8:	bd80      	pop	{r7, pc}

080228fa <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 80228fa:	b5b0      	push	{r4, r5, r7, lr}
 80228fc:	b088      	sub	sp, #32
 80228fe:	af00      	add	r7, sp, #0
 8022900:	60f8      	str	r0, [r7, #12]
 8022902:	60b9      	str	r1, [r7, #8]
 8022904:	607a      	str	r2, [r7, #4]
    int ret = -1;
 8022906:	f04f 33ff 	mov.w	r3, #4294967295
 802290a:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 802290c:	f005 fa36 	bl	8027d7c <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 8022910:	2300      	movs	r3, #0
 8022912:	61bb      	str	r3, [r7, #24]
 8022914:	e017      	b.n	8022946 <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 8022916:	68ba      	ldr	r2, [r7, #8]
 8022918:	69bb      	ldr	r3, [r7, #24]
 802291a:	4413      	add	r3, r2
 802291c:	681b      	ldr	r3, [r3, #0]
 802291e:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 8022920:	697b      	ldr	r3, [r7, #20]
 8022922:	2200      	movs	r2, #0
 8022924:	461c      	mov	r4, r3
 8022926:	4615      	mov	r5, r2
 8022928:	4622      	mov	r2, r4
 802292a:	462b      	mov	r3, r5
 802292c:	68f9      	ldr	r1, [r7, #12]
 802292e:	2002      	movs	r0, #2
 8022930:	f005 f91c 	bl	8027b6c <HAL_FLASH_Program>
 8022934:	4603      	mov	r3, r0
 8022936:	2b00      	cmp	r3, #0
 8022938:	d10c      	bne.n	8022954 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	3304      	adds	r3, #4
 802293e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 8022940:	69bb      	ldr	r3, [r7, #24]
 8022942:	3304      	adds	r3, #4
 8022944:	61bb      	str	r3, [r7, #24]
 8022946:	69ba      	ldr	r2, [r7, #24]
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	429a      	cmp	r2, r3
 802294c:	d3e3      	bcc.n	8022916 <flash_write+0x1c>
    }

    ret = data_len;
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	61fb      	str	r3, [r7, #28]
 8022952:	e000      	b.n	8022956 <flash_write+0x5c>
            goto Exit;
 8022954:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 8022956:	f005 fa33 	bl	8027dc0 <HAL_FLASH_Lock>

    return ret;
 802295a:	69fb      	ldr	r3, [r7, #28]
}
 802295c:	4618      	mov	r0, r3
 802295e:	3720      	adds	r7, #32
 8022960:	46bd      	mov	sp, r7
 8022962:	bdb0      	pop	{r4, r5, r7, pc}

08022964 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8022964:	b480      	push	{r7}
 8022966:	b087      	sub	sp, #28
 8022968:	af00      	add	r7, sp, #0
 802296a:	60f8      	str	r0, [r7, #12]
 802296c:	60b9      	str	r1, [r7, #8]
 802296e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 8022970:	2300      	movs	r3, #0
 8022972:	617b      	str	r3, [r7, #20]
 8022974:	e00c      	b.n	8022990 <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 8022976:	68fa      	ldr	r2, [r7, #12]
 8022978:	697b      	ldr	r3, [r7, #20]
 802297a:	4413      	add	r3, r2
 802297c:	4619      	mov	r1, r3
 802297e:	68ba      	ldr	r2, [r7, #8]
 8022980:	697b      	ldr	r3, [r7, #20]
 8022982:	4413      	add	r3, r2
 8022984:	780a      	ldrb	r2, [r1, #0]
 8022986:	b2d2      	uxtb	r2, r2
 8022988:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 802298a:	697b      	ldr	r3, [r7, #20]
 802298c:	3301      	adds	r3, #1
 802298e:	617b      	str	r3, [r7, #20]
 8022990:	697a      	ldr	r2, [r7, #20]
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	429a      	cmp	r2, r3
 8022996:	d3ee      	bcc.n	8022976 <flash_read+0x12>
    }

    return i;
 8022998:	697b      	ldr	r3, [r7, #20]
}
 802299a:	4618      	mov	r0, r3
 802299c:	371c      	adds	r7, #28
 802299e:	46bd      	mov	sp, r7
 80229a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229a4:	4770      	bx	lr
	...

080229a8 <MX_FSMC_Init>:

NAND_HandleTypeDef hnand1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80229a8:	b580      	push	{r7, lr}
 80229aa:	b088      	sub	sp, #32
 80229ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80229ae:	f107 0310 	add.w	r3, r7, #16
 80229b2:	2200      	movs	r2, #0
 80229b4:	601a      	str	r2, [r3, #0]
 80229b6:	605a      	str	r2, [r3, #4]
 80229b8:	609a      	str	r2, [r3, #8]
 80229ba:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80229bc:	463b      	mov	r3, r7
 80229be:	2200      	movs	r2, #0
 80229c0:	601a      	str	r2, [r3, #0]
 80229c2:	605a      	str	r2, [r3, #4]
 80229c4:	609a      	str	r2, [r3, #8]
 80229c6:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 80229c8:	4b26      	ldr	r3, [pc, #152]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229ca:	4a27      	ldr	r2, [pc, #156]	; (8022a68 <MX_FSMC_Init+0xc0>)
 80229cc:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80229ce:	4b25      	ldr	r3, [pc, #148]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229d0:	2210      	movs	r2, #16
 80229d2:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80229d4:	4b23      	ldr	r3, [pc, #140]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229d6:	2202      	movs	r2, #2
 80229d8:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 80229da:	4b22      	ldr	r3, [pc, #136]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229dc:	2200      	movs	r2, #0
 80229de:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 80229e0:	4b20      	ldr	r3, [pc, #128]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229e2:	2200      	movs	r2, #0
 80229e4:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 80229e6:	4b1f      	ldr	r3, [pc, #124]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229e8:	2200      	movs	r2, #0
 80229ea:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 80229ec:	4b1d      	ldr	r3, [pc, #116]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229ee:	2200      	movs	r2, #0
 80229f0:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 80229f2:	4b1c      	ldr	r3, [pc, #112]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229f4:	2200      	movs	r2, #0
 80229f6:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 80229f8:	4b1a      	ldr	r3, [pc, #104]	; (8022a64 <MX_FSMC_Init+0xbc>)
 80229fa:	2200      	movs	r2, #0
 80229fc:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 80229fe:	4b19      	ldr	r3, [pc, #100]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a00:	2200      	movs	r2, #0
 8022a02:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8022a04:	4b17      	ldr	r3, [pc, #92]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a06:	2200      	movs	r2, #0
 8022a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8022a0a:	4b16      	ldr	r3, [pc, #88]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8022a10:	4b14      	ldr	r3, [pc, #80]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a12:	2200      	movs	r2, #0
 8022a14:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8022a16:	4b13      	ldr	r3, [pc, #76]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a18:	2200      	movs	r2, #0
 8022a1a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 8022a1c:	4b11      	ldr	r3, [pc, #68]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a1e:	2201      	movs	r2, #1
 8022a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8022a24:	23fc      	movs	r3, #252	; 0xfc
 8022a26:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8022a28:	23fc      	movs	r3, #252	; 0xfc
 8022a2a:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8022a2c:	23fc      	movs	r3, #252	; 0xfc
 8022a2e:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8022a30:	23fc      	movs	r3, #252	; 0xfc
 8022a32:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8022a34:	23fc      	movs	r3, #252	; 0xfc
 8022a36:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8022a38:	23fc      	movs	r3, #252	; 0xfc
 8022a3a:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8022a3c:	23fc      	movs	r3, #252	; 0xfc
 8022a3e:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8022a40:	23fc      	movs	r3, #252	; 0xfc
 8022a42:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8022a44:	463a      	mov	r2, r7
 8022a46:	f107 0310 	add.w	r3, r7, #16
 8022a4a:	4619      	mov	r1, r3
 8022a4c:	4805      	ldr	r0, [pc, #20]	; (8022a64 <MX_FSMC_Init+0xbc>)
 8022a4e:	f005 feca 	bl	80287e6 <HAL_NAND_Init>
 8022a52:	4603      	mov	r3, r0
 8022a54:	2b00      	cmp	r3, #0
 8022a56:	d001      	beq.n	8022a5c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8022a58:	f000 ffe0 	bl	8023a1c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8022a5c:	bf00      	nop
 8022a5e:	3720      	adds	r7, #32
 8022a60:	46bd      	mov	sp, r7
 8022a62:	bd80      	pop	{r7, pc}
 8022a64:	20000c04 	.word	0x20000c04
 8022a68:	a0000060 	.word	0xa0000060

08022a6c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8022a6c:	b580      	push	{r7, lr}
 8022a6e:	b086      	sub	sp, #24
 8022a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022a72:	1d3b      	adds	r3, r7, #4
 8022a74:	2200      	movs	r2, #0
 8022a76:	601a      	str	r2, [r3, #0]
 8022a78:	605a      	str	r2, [r3, #4]
 8022a7a:	609a      	str	r2, [r3, #8]
 8022a7c:	60da      	str	r2, [r3, #12]
 8022a7e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8022a80:	4b20      	ldr	r3, [pc, #128]	; (8022b04 <HAL_FSMC_MspInit+0x98>)
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	2b00      	cmp	r3, #0
 8022a86:	d139      	bne.n	8022afc <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8022a88:	4b1e      	ldr	r3, [pc, #120]	; (8022b04 <HAL_FSMC_MspInit+0x98>)
 8022a8a:	2201      	movs	r2, #1
 8022a8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8022a8e:	2300      	movs	r3, #0
 8022a90:	603b      	str	r3, [r7, #0]
 8022a92:	4b1d      	ldr	r3, [pc, #116]	; (8022b08 <HAL_FSMC_MspInit+0x9c>)
 8022a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a96:	4a1c      	ldr	r2, [pc, #112]	; (8022b08 <HAL_FSMC_MspInit+0x9c>)
 8022a98:	f043 0301 	orr.w	r3, r3, #1
 8022a9c:	6393      	str	r3, [r2, #56]	; 0x38
 8022a9e:	4b1a      	ldr	r3, [pc, #104]	; (8022b08 <HAL_FSMC_MspInit+0x9c>)
 8022aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022aa2:	f003 0301 	and.w	r3, r3, #1
 8022aa6:	603b      	str	r3, [r7, #0]
 8022aa8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8022aaa:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8022aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022ab0:	2302      	movs	r3, #2
 8022ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ab4:	2300      	movs	r3, #0
 8022ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022ab8:	2303      	movs	r3, #3
 8022aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022abc:	230c      	movs	r3, #12
 8022abe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022ac0:	1d3b      	adds	r3, r7, #4
 8022ac2:	4619      	mov	r1, r3
 8022ac4:	4811      	ldr	r0, [pc, #68]	; (8022b0c <HAL_FSMC_MspInit+0xa0>)
 8022ac6:	f005 fbdd 	bl	8028284 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8022aca:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8022ace:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022ad0:	2302      	movs	r3, #2
 8022ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ad4:	2300      	movs	r3, #0
 8022ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022ad8:	2303      	movs	r3, #3
 8022ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022adc:	230c      	movs	r3, #12
 8022ade:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022ae0:	1d3b      	adds	r3, r7, #4
 8022ae2:	4619      	mov	r1, r3
 8022ae4:	480a      	ldr	r0, [pc, #40]	; (8022b10 <HAL_FSMC_MspInit+0xa4>)
 8022ae6:	f005 fbcd 	bl	8028284 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022aea:	2200      	movs	r2, #0
 8022aec:	2100      	movs	r1, #0
 8022aee:	2030      	movs	r0, #48	; 0x30
 8022af0:	f004 ff65 	bl	80279be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022af4:	2030      	movs	r0, #48	; 0x30
 8022af6:	f004 ff7e 	bl	80279f6 <HAL_NVIC_EnableIRQ>
 8022afa:	e000      	b.n	8022afe <HAL_FSMC_MspInit+0x92>
    return;
 8022afc:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8022afe:	3718      	adds	r7, #24
 8022b00:	46bd      	mov	sp, r7
 8022b02:	bd80      	pop	{r7, pc}
 8022b04:	20000c44 	.word	0x20000c44
 8022b08:	40023800 	.word	0x40023800
 8022b0c:	40021000 	.word	0x40021000
 8022b10:	40020c00 	.word	0x40020c00

08022b14 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8022b14:	b580      	push	{r7, lr}
 8022b16:	b082      	sub	sp, #8
 8022b18:	af00      	add	r7, sp, #0
 8022b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8022b1c:	f7ff ffa6 	bl	8022a6c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8022b20:	bf00      	nop
 8022b22:	3708      	adds	r7, #8
 8022b24:	46bd      	mov	sp, r7
 8022b26:	bd80      	pop	{r7, pc}

08022b28 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8022b28:	b580      	push	{r7, lr}
 8022b2a:	b086      	sub	sp, #24
 8022b2c:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN FSMC_MspInit 0 */

	  /* USER CODE END FSMC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022b2e:	1d3b      	adds	r3, r7, #4
 8022b30:	2200      	movs	r2, #0
 8022b32:	601a      	str	r2, [r3, #0]
 8022b34:	605a      	str	r2, [r3, #4]
 8022b36:	609a      	str	r2, [r3, #8]
 8022b38:	60da      	str	r2, [r3, #12]
 8022b3a:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8022b3c:	4b20      	ldr	r3, [pc, #128]	; (8022bc0 <nand_gpio_init+0x98>)
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d139      	bne.n	8022bb8 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8022b44:	4b1e      	ldr	r3, [pc, #120]	; (8022bc0 <nand_gpio_init+0x98>)
 8022b46:	2201      	movs	r2, #1
 8022b48:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	603b      	str	r3, [r7, #0]
 8022b4e:	4b1d      	ldr	r3, [pc, #116]	; (8022bc4 <nand_gpio_init+0x9c>)
 8022b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b52:	4a1c      	ldr	r2, [pc, #112]	; (8022bc4 <nand_gpio_init+0x9c>)
 8022b54:	f043 0301 	orr.w	r3, r3, #1
 8022b58:	6393      	str	r3, [r2, #56]	; 0x38
 8022b5a:	4b1a      	ldr	r3, [pc, #104]	; (8022bc4 <nand_gpio_init+0x9c>)
 8022b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b5e:	f003 0301 	and.w	r3, r3, #1
 8022b62:	603b      	str	r3, [r7, #0]
 8022b64:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8022b66:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8022b6a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022b6c:	2302      	movs	r3, #2
 8022b6e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022b70:	2300      	movs	r3, #0
 8022b72:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022b74:	2303      	movs	r3, #3
 8022b76:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022b78:	230c      	movs	r3, #12
 8022b7a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022b7c:	1d3b      	adds	r3, r7, #4
 8022b7e:	4619      	mov	r1, r3
 8022b80:	4811      	ldr	r0, [pc, #68]	; (8022bc8 <nand_gpio_init+0xa0>)
 8022b82:	f005 fb7f 	bl	8028284 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8022b86:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8022b8a:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
	                          |GPIO_PIN_6|GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022b8c:	2302      	movs	r3, #2
 8022b8e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022b90:	2300      	movs	r3, #0
 8022b92:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022b94:	2303      	movs	r3, #3
 8022b96:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022b98:	230c      	movs	r3, #12
 8022b9a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022b9c:	1d3b      	adds	r3, r7, #4
 8022b9e:	4619      	mov	r1, r3
 8022ba0:	480a      	ldr	r0, [pc, #40]	; (8022bcc <nand_gpio_init+0xa4>)
 8022ba2:	f005 fb6f 	bl	8028284 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022ba6:	2200      	movs	r2, #0
 8022ba8:	2100      	movs	r1, #0
 8022baa:	2030      	movs	r0, #48	; 0x30
 8022bac:	f004 ff07 	bl	80279be <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022bb0:	2030      	movs	r0, #48	; 0x30
 8022bb2:	f004 ff20 	bl	80279f6 <HAL_NVIC_EnableIRQ>
 8022bb6:	e000      	b.n	8022bba <nand_gpio_init+0x92>
	    return;
 8022bb8:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8022bba:	3718      	adds	r7, #24
 8022bbc:	46bd      	mov	sp, r7
 8022bbe:	bd80      	pop	{r7, pc}
 8022bc0:	20000c60 	.word	0x20000c60
 8022bc4:	40023800 	.word	0x40023800
 8022bc8:	40021000 	.word	0x40021000
 8022bcc:	40020c00 	.word	0x40020c00

08022bd0 <nand_fsmc_init>:

extern NAND_HandleTypeDef hnand1;

static void nand_fsmc_init()
{
 8022bd0:	b580      	push	{r7, lr}
 8022bd2:	b090      	sub	sp, #64	; 0x40
 8022bd4:	af00      	add	r7, sp, #0
    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8022bd6:	f107 0314 	add.w	r3, r7, #20
 8022bda:	2200      	movs	r2, #0
 8022bdc:	601a      	str	r2, [r3, #0]
 8022bde:	605a      	str	r2, [r3, #4]
 8022be0:	609a      	str	r2, [r3, #8]
 8022be2:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8022be4:	1d3b      	adds	r3, r7, #4
 8022be6:	2200      	movs	r2, #0
 8022be8:	601a      	str	r2, [r3, #0]
 8022bea:	605a      	str	r2, [r3, #4]
 8022bec:	609a      	str	r2, [r3, #8]
 8022bee:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
    __HAL_RCC_FSMC_CLK_ENABLE();
 8022bf0:	2300      	movs	r3, #0
 8022bf2:	603b      	str	r3, [r7, #0]
 8022bf4:	4b26      	ldr	r3, [pc, #152]	; (8022c90 <nand_fsmc_init+0xc0>)
 8022bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bf8:	4a25      	ldr	r2, [pc, #148]	; (8022c90 <nand_fsmc_init+0xc0>)
 8022bfa:	f043 0301 	orr.w	r3, r3, #1
 8022bfe:	6393      	str	r3, [r2, #56]	; 0x38
 8022c00:	4b23      	ldr	r3, [pc, #140]	; (8022c90 <nand_fsmc_init+0xc0>)
 8022c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022c04:	f003 0301 	and.w	r3, r3, #1
 8022c08:	603b      	str	r3, [r7, #0]
 8022c0a:	683b      	ldr	r3, [r7, #0]

//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8022c0c:	4b21      	ldr	r3, [pc, #132]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c0e:	781b      	ldrb	r3, [r3, #0]
 8022c10:	617b      	str	r3, [r7, #20]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8022c12:	4b20      	ldr	r3, [pc, #128]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c14:	785b      	ldrb	r3, [r3, #1]
 8022c16:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8022c18:	4b1e      	ldr	r3, [pc, #120]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c1a:	789b      	ldrb	r3, [r3, #2]
 8022c1c:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8022c1e:	4b1d      	ldr	r3, [pc, #116]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c20:	78db      	ldrb	r3, [r3, #3]
 8022c22:	623b      	str	r3, [r7, #32]

    hnand1.Instance = FSMC_NAND_DEVICE;
 8022c24:	4b1c      	ldr	r3, [pc, #112]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c26:	4a1d      	ldr	r2, [pc, #116]	; (8022c9c <nand_fsmc_init+0xcc>)
 8022c28:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_Bank_NAND;
 8022c2a:	4b1b      	ldr	r3, [pc, #108]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c2c:	4a1b      	ldr	r2, [pc, #108]	; (8022c9c <nand_fsmc_init+0xcc>)
 8022c2e:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8022c30:	4b19      	ldr	r3, [pc, #100]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c32:	2202      	movs	r2, #2
 8022c34:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8022c36:	4b18      	ldr	r3, [pc, #96]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c38:	2200      	movs	r2, #0
 8022c3a:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_ENABLE;
 8022c3c:	4b16      	ldr	r3, [pc, #88]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c3e:	2240      	movs	r2, #64	; 0x40
 8022c40:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_2048BYTE;
 8022c42:	4b15      	ldr	r3, [pc, #84]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c44:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8022c48:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8022c4a:	4b12      	ldr	r3, [pc, #72]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c4c:	791b      	ldrb	r3, [r3, #4]
 8022c4e:	461a      	mov	r2, r3
 8022c50:	4b11      	ldr	r3, [pc, #68]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c52:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8022c54:	4b0f      	ldr	r3, [pc, #60]	; (8022c94 <nand_fsmc_init+0xc4>)
 8022c56:	795b      	ldrb	r3, [r3, #5]
 8022c58:	461a      	mov	r2, r3
 8022c5a:	4b0f      	ldr	r3, [pc, #60]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c5c:	61da      	str	r2, [r3, #28]
/*    ComSpaceTiming.SetupTime = 252;
    ComSpaceTiming.WaitSetupTime = 252;
    ComSpaceTiming.HoldSetupTime = 252;
    ComSpaceTiming.HiZSetupTime = 252;*/
//    fsmc_init.FSMC_AttributeSpaceTimingStruct = &timing_init;
    AttSpaceTiming.SetupTime = 252;
 8022c5e:	23fc      	movs	r3, #252	; 0xfc
 8022c60:	607b      	str	r3, [r7, #4]
    AttSpaceTiming.WaitSetupTime = 252;
 8022c62:	23fc      	movs	r3, #252	; 0xfc
 8022c64:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.HoldSetupTime = 252;
 8022c66:	23fc      	movs	r3, #252	; 0xfc
 8022c68:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HiZSetupTime = 252;
 8022c6a:	23fc      	movs	r3, #252	; 0xfc
 8022c6c:	613b      	str	r3, [r7, #16]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8022c6e:	1d3a      	adds	r2, r7, #4
 8022c70:	f107 0314 	add.w	r3, r7, #20
 8022c74:	4619      	mov	r1, r3
 8022c76:	4808      	ldr	r0, [pc, #32]	; (8022c98 <nand_fsmc_init+0xc8>)
 8022c78:	f005 fdb5 	bl	80287e6 <HAL_NAND_Init>
 8022c7c:	4603      	mov	r3, r0
 8022c7e:	2b00      	cmp	r3, #0
 8022c80:	d001      	beq.n	8022c86 <nand_fsmc_init+0xb6>
    {
      Error_Handler( );
 8022c82:	f000 fecb 	bl	8023a1c <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
}
 8022c86:	bf00      	nop
 8022c88:	3740      	adds	r7, #64	; 0x40
 8022c8a:	46bd      	mov	sp, r7
 8022c8c:	bd80      	pop	{r7, pc}
 8022c8e:	bf00      	nop
 8022c90:	40023800 	.word	0x40023800
 8022c94:	20000c48 	.word	0x20000c48
 8022c98:	20000c04 	.word	0x20000c04
 8022c9c:	a0000060 	.word	0xa0000060

08022ca0 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8022ca0:	b580      	push	{r7, lr}
 8022ca2:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8022ca4:	4b42      	ldr	r3, [pc, #264]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022ca6:	781b      	ldrb	r3, [r3, #0]
 8022ca8:	4619      	mov	r1, r3
 8022caa:	4842      	ldr	r0, [pc, #264]	; (8022db4 <nand_print_fsmc_info+0x114>)
 8022cac:	f00e fd02 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8022cb0:	4b3f      	ldr	r3, [pc, #252]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cb2:	785b      	ldrb	r3, [r3, #1]
 8022cb4:	4619      	mov	r1, r3
 8022cb6:	4840      	ldr	r0, [pc, #256]	; (8022db8 <nand_print_fsmc_info+0x118>)
 8022cb8:	f00e fcfc 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8022cbc:	4b3c      	ldr	r3, [pc, #240]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cbe:	789b      	ldrb	r3, [r3, #2]
 8022cc0:	4619      	mov	r1, r3
 8022cc2:	483e      	ldr	r0, [pc, #248]	; (8022dbc <nand_print_fsmc_info+0x11c>)
 8022cc4:	f00e fcf6 	bl	80316b4 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8022cc8:	4b39      	ldr	r3, [pc, #228]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cca:	78db      	ldrb	r3, [r3, #3]
 8022ccc:	4619      	mov	r1, r3
 8022cce:	483c      	ldr	r0, [pc, #240]	; (8022dc0 <nand_print_fsmc_info+0x120>)
 8022cd0:	f00e fcf0 	bl	80316b4 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8022cd4:	4b36      	ldr	r3, [pc, #216]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cd6:	791b      	ldrb	r3, [r3, #4]
 8022cd8:	4619      	mov	r1, r3
 8022cda:	483a      	ldr	r0, [pc, #232]	; (8022dc4 <nand_print_fsmc_info+0x124>)
 8022cdc:	f00e fcea 	bl	80316b4 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8022ce0:	4b33      	ldr	r3, [pc, #204]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022ce2:	795b      	ldrb	r3, [r3, #5]
 8022ce4:	4619      	mov	r1, r3
 8022ce6:	4838      	ldr	r0, [pc, #224]	; (8022dc8 <nand_print_fsmc_info+0x128>)
 8022ce8:	f00e fce4 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8022cec:	4b30      	ldr	r3, [pc, #192]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cee:	799b      	ldrb	r3, [r3, #6]
 8022cf0:	4619      	mov	r1, r3
 8022cf2:	4836      	ldr	r0, [pc, #216]	; (8022dcc <nand_print_fsmc_info+0x12c>)
 8022cf4:	f00e fcde 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8022cf8:	4b2d      	ldr	r3, [pc, #180]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022cfa:	79db      	ldrb	r3, [r3, #7]
 8022cfc:	4619      	mov	r1, r3
 8022cfe:	4834      	ldr	r0, [pc, #208]	; (8022dd0 <nand_print_fsmc_info+0x130>)
 8022d00:	f00e fcd8 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8022d04:	4b2a      	ldr	r3, [pc, #168]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d06:	7a1b      	ldrb	r3, [r3, #8]
 8022d08:	4619      	mov	r1, r3
 8022d0a:	4832      	ldr	r0, [pc, #200]	; (8022dd4 <nand_print_fsmc_info+0x134>)
 8022d0c:	f00e fcd2 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8022d10:	4b27      	ldr	r3, [pc, #156]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d12:	7a5b      	ldrb	r3, [r3, #9]
 8022d14:	4619      	mov	r1, r3
 8022d16:	4830      	ldr	r0, [pc, #192]	; (8022dd8 <nand_print_fsmc_info+0x138>)
 8022d18:	f00e fccc 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8022d1c:	4b24      	ldr	r3, [pc, #144]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d1e:	7a9b      	ldrb	r3, [r3, #10]
 8022d20:	4619      	mov	r1, r3
 8022d22:	482e      	ldr	r0, [pc, #184]	; (8022ddc <nand_print_fsmc_info+0x13c>)
 8022d24:	f00e fcc6 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8022d28:	4b21      	ldr	r3, [pc, #132]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d2a:	7adb      	ldrb	r3, [r3, #11]
 8022d2c:	4619      	mov	r1, r3
 8022d2e:	482c      	ldr	r0, [pc, #176]	; (8022de0 <nand_print_fsmc_info+0x140>)
 8022d30:	f00e fcc0 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8022d34:	4b1e      	ldr	r3, [pc, #120]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d36:	7b1b      	ldrb	r3, [r3, #12]
 8022d38:	4619      	mov	r1, r3
 8022d3a:	482a      	ldr	r0, [pc, #168]	; (8022de4 <nand_print_fsmc_info+0x144>)
 8022d3c:	f00e fcba 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8022d40:	4b1b      	ldr	r3, [pc, #108]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d42:	7b5b      	ldrb	r3, [r3, #13]
 8022d44:	4619      	mov	r1, r3
 8022d46:	4828      	ldr	r0, [pc, #160]	; (8022de8 <nand_print_fsmc_info+0x148>)
 8022d48:	f00e fcb4 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8022d4c:	4b18      	ldr	r3, [pc, #96]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d4e:	7b9b      	ldrb	r3, [r3, #14]
 8022d50:	4619      	mov	r1, r3
 8022d52:	4826      	ldr	r0, [pc, #152]	; (8022dec <nand_print_fsmc_info+0x14c>)
 8022d54:	f00e fcae 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8022d58:	4b15      	ldr	r3, [pc, #84]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d5a:	7bdb      	ldrb	r3, [r3, #15]
 8022d5c:	4619      	mov	r1, r3
 8022d5e:	4824      	ldr	r0, [pc, #144]	; (8022df0 <nand_print_fsmc_info+0x150>)
 8022d60:	f00e fca8 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8022d64:	4b12      	ldr	r3, [pc, #72]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d66:	7c1b      	ldrb	r3, [r3, #16]
 8022d68:	4619      	mov	r1, r3
 8022d6a:	4822      	ldr	r0, [pc, #136]	; (8022df4 <nand_print_fsmc_info+0x154>)
 8022d6c:	f00e fca2 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8022d70:	4b0f      	ldr	r3, [pc, #60]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d72:	7c5b      	ldrb	r3, [r3, #17]
 8022d74:	4619      	mov	r1, r3
 8022d76:	4820      	ldr	r0, [pc, #128]	; (8022df8 <nand_print_fsmc_info+0x158>)
 8022d78:	f00e fc9c 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8022d7c:	4b0c      	ldr	r3, [pc, #48]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d7e:	7c9b      	ldrb	r3, [r3, #18]
 8022d80:	4619      	mov	r1, r3
 8022d82:	481e      	ldr	r0, [pc, #120]	; (8022dfc <nand_print_fsmc_info+0x15c>)
 8022d84:	f00e fc96 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8022d88:	4b09      	ldr	r3, [pc, #36]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d8a:	7cdb      	ldrb	r3, [r3, #19]
 8022d8c:	4619      	mov	r1, r3
 8022d8e:	481c      	ldr	r0, [pc, #112]	; (8022e00 <nand_print_fsmc_info+0x160>)
 8022d90:	f00e fc90 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8022d94:	4b06      	ldr	r3, [pc, #24]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022d96:	7d1b      	ldrb	r3, [r3, #20]
 8022d98:	4619      	mov	r1, r3
 8022d9a:	481a      	ldr	r0, [pc, #104]	; (8022e04 <nand_print_fsmc_info+0x164>)
 8022d9c:	f00e fc8a 	bl	80316b4 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8022da0:	4b03      	ldr	r3, [pc, #12]	; (8022db0 <nand_print_fsmc_info+0x110>)
 8022da2:	7d5b      	ldrb	r3, [r3, #21]
 8022da4:	4619      	mov	r1, r3
 8022da6:	4818      	ldr	r0, [pc, #96]	; (8022e08 <nand_print_fsmc_info+0x168>)
 8022da8:	f00e fc84 	bl	80316b4 <iprintf>
}
 8022dac:	bf00      	nop
 8022dae:	bd80      	pop	{r7, pc}
 8022db0:	20000c48 	.word	0x20000c48
 8022db4:	080324ec 	.word	0x080324ec
 8022db8:	08032500 	.word	0x08032500
 8022dbc:	08032518 	.word	0x08032518
 8022dc0:	08032530 	.word	0x08032530
 8022dc4:	08032548 	.word	0x08032548
 8022dc8:	08032560 	.word	0x08032560
 8022dcc:	08032574 	.word	0x08032574
 8022dd0:	08032588 	.word	0x08032588
 8022dd4:	0803259c 	.word	0x0803259c
 8022dd8:	080325b4 	.word	0x080325b4
 8022ddc:	080325cc 	.word	0x080325cc
 8022de0:	080325e8 	.word	0x080325e8
 8022de4:	08032600 	.word	0x08032600
 8022de8:	08032614 	.word	0x08032614
 8022dec:	0803262c 	.word	0x0803262c
 8022df0:	08032644 	.word	0x08032644
 8022df4:	0803265c 	.word	0x0803265c
 8022df8:	08032674 	.word	0x08032674
 8022dfc:	0803268c 	.word	0x0803268c
 8022e00:	080326a8 	.word	0x080326a8
 8022e04:	080326c4 	.word	0x080326c4
 8022e08:	080326dc 	.word	0x080326dc

08022e0c <nand_reset>:

static void nand_reset()
{
 8022e0c:	b480      	push	{r7}
 8022e0e:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8022e10:	4b04      	ldr	r3, [pc, #16]	; (8022e24 <nand_reset+0x18>)
 8022e12:	4a05      	ldr	r2, [pc, #20]	; (8022e28 <nand_reset+0x1c>)
 8022e14:	7b12      	ldrb	r2, [r2, #12]
 8022e16:	701a      	strb	r2, [r3, #0]
}
 8022e18:	bf00      	nop
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e20:	4770      	bx	lr
 8022e22:	bf00      	nop
 8022e24:	70010000 	.word	0x70010000
 8022e28:	20000c48 	.word	0x20000c48

08022e2c <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8022e2c:	b5b0      	push	{r4, r5, r7, lr}
 8022e2e:	b082      	sub	sp, #8
 8022e30:	af00      	add	r7, sp, #0
 8022e32:	6078      	str	r0, [r7, #4]
 8022e34:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8022e36:	683b      	ldr	r3, [r7, #0]
 8022e38:	2b15      	cmp	r3, #21
 8022e3a:	d802      	bhi.n	8022e42 <nand_init+0x16>
        return -1;
 8022e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8022e40:	e015      	b.n	8022e6e <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8022e42:	4a0d      	ldr	r2, [pc, #52]	; (8022e78 <nand_init+0x4c>)
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	4614      	mov	r4, r2
 8022e48:	461d      	mov	r5, r3
 8022e4a:	6828      	ldr	r0, [r5, #0]
 8022e4c:	6869      	ldr	r1, [r5, #4]
 8022e4e:	68aa      	ldr	r2, [r5, #8]
 8022e50:	68eb      	ldr	r3, [r5, #12]
 8022e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022e54:	6928      	ldr	r0, [r5, #16]
 8022e56:	6020      	str	r0, [r4, #0]
 8022e58:	8aab      	ldrh	r3, [r5, #20]
 8022e5a:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8022e5c:	f7ff fe64 	bl	8022b28 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8022e60:	f7ff feb6 	bl	8022bd0 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8022e64:	f7ff ff1c 	bl	8022ca0 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8022e68:	f7ff ffd0 	bl	8022e0c <nand_reset>

    return 0;
 8022e6c:	2300      	movs	r3, #0
}
 8022e6e:	4618      	mov	r0, r3
 8022e70:	3708      	adds	r7, #8
 8022e72:	46bd      	mov	sp, r7
 8022e74:	bdb0      	pop	{r4, r5, r7, pc}
 8022e76:	bf00      	nop
 8022e78:	20000c48 	.word	0x20000c48

08022e7c <nand_uninit>:

static void nand_uninit()
{
 8022e7c:	b480      	push	{r7}
 8022e7e:	af00      	add	r7, sp, #0
    //TODO
}
 8022e80:	bf00      	nop
 8022e82:	46bd      	mov	sp, r7
 8022e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e88:	4770      	bx	lr
	...

08022e8c <nand_read_status>:

static uint32_t nand_read_status()
{
 8022e8c:	b480      	push	{r7}
 8022e8e:	b083      	sub	sp, #12
 8022e90:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8022e92:	4b11      	ldr	r3, [pc, #68]	; (8022ed8 <nand_read_status+0x4c>)
 8022e94:	4a11      	ldr	r2, [pc, #68]	; (8022edc <nand_read_status+0x50>)
 8022e96:	7c52      	ldrb	r2, [r2, #17]
 8022e98:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8022e9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022e9e:	781b      	ldrb	r3, [r3, #0]
 8022ea0:	b2db      	uxtb	r3, r3
 8022ea2:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8022ea4:	683b      	ldr	r3, [r7, #0]
 8022ea6:	f003 0301 	and.w	r3, r3, #1
 8022eaa:	2b00      	cmp	r3, #0
 8022eac:	d002      	beq.n	8022eb4 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8022eae:	2302      	movs	r3, #2
 8022eb0:	607b      	str	r3, [r7, #4]
 8022eb2:	e009      	b.n	8022ec8 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8022eb4:	683b      	ldr	r3, [r7, #0]
 8022eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	d002      	beq.n	8022ec4 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8022ebe:	2300      	movs	r3, #0
 8022ec0:	607b      	str	r3, [r7, #4]
 8022ec2:	e001      	b.n	8022ec8 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8022ec4:	2301      	movs	r3, #1
 8022ec6:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8022ec8:	687b      	ldr	r3, [r7, #4]
}
 8022eca:	4618      	mov	r0, r3
 8022ecc:	370c      	adds	r7, #12
 8022ece:	46bd      	mov	sp, r7
 8022ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed4:	4770      	bx	lr
 8022ed6:	bf00      	nop
 8022ed8:	70010000 	.word	0x70010000
 8022edc:	20000c48 	.word	0x20000c48

08022ee0 <nand_get_status>:

static uint32_t nand_get_status()
{
 8022ee0:	b580      	push	{r7, lr}
 8022ee2:	b082      	sub	sp, #8
 8022ee4:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8022ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022eea:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8022eec:	f7ff ffce 	bl	8022e8c <nand_read_status>
 8022ef0:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8022ef2:	e005      	b.n	8022f00 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8022ef4:	f7ff ffca 	bl	8022e8c <nand_read_status>
 8022ef8:	6078      	str	r0, [r7, #4]
        timeout --;
 8022efa:	683b      	ldr	r3, [r7, #0]
 8022efc:	3b01      	subs	r3, #1
 8022efe:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	2b01      	cmp	r3, #1
 8022f04:	d102      	bne.n	8022f0c <nand_get_status+0x2c>
 8022f06:	683b      	ldr	r3, [r7, #0]
 8022f08:	2b00      	cmp	r3, #0
 8022f0a:	d1f3      	bne.n	8022ef4 <nand_get_status+0x14>
    }

    if (!timeout)
 8022f0c:	683b      	ldr	r3, [r7, #0]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d101      	bne.n	8022f16 <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8022f12:	2303      	movs	r3, #3
 8022f14:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8022f16:	687b      	ldr	r3, [r7, #4]
}
 8022f18:	4618      	mov	r0, r3
 8022f1a:	3708      	adds	r7, #8
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	bd80      	pop	{r7, pc}

08022f20 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8022f20:	b480      	push	{r7}
 8022f22:	b085      	sub	sp, #20
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8022f28:	2300      	movs	r3, #0
 8022f2a:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8022f2c:	4b17      	ldr	r3, [pc, #92]	; (8022f8c <nand_read_id+0x6c>)
 8022f2e:	4a18      	ldr	r2, [pc, #96]	; (8022f90 <nand_read_id+0x70>)
 8022f30:	7ad2      	ldrb	r2, [r2, #11]
 8022f32:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f34:	4b17      	ldr	r3, [pc, #92]	; (8022f94 <nand_read_id+0x74>)
 8022f36:	2200      	movs	r2, #0
 8022f38:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8022f3a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	b2da      	uxtb	r2, r3
 8022f46:	687b      	ldr	r3, [r7, #4]
 8022f48:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8022f4a:	68fb      	ldr	r3, [r7, #12]
 8022f4c:	0a1b      	lsrs	r3, r3, #8
 8022f4e:	b2da      	uxtb	r2, r3
 8022f50:	687b      	ldr	r3, [r7, #4]
 8022f52:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8022f54:	68fb      	ldr	r3, [r7, #12]
 8022f56:	0c1b      	lsrs	r3, r3, #16
 8022f58:	b2da      	uxtb	r2, r3
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8022f5e:	68fb      	ldr	r3, [r7, #12]
 8022f60:	0e1b      	lsrs	r3, r3, #24
 8022f62:	b2da      	uxtb	r2, r3
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8022f68:	4b0b      	ldr	r3, [pc, #44]	; (8022f98 <nand_read_id+0x78>)
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	b2da      	uxtb	r2, r3
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8022f76:	68fb      	ldr	r3, [r7, #12]
 8022f78:	0a1b      	lsrs	r3, r3, #8
 8022f7a:	b2da      	uxtb	r2, r3
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	715a      	strb	r2, [r3, #5]
}
 8022f80:	bf00      	nop
 8022f82:	3714      	adds	r7, #20
 8022f84:	46bd      	mov	sp, r7
 8022f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8a:	4770      	bx	lr
 8022f8c:	70010000 	.word	0x70010000
 8022f90:	20000c48 	.word	0x20000c48
 8022f94:	70020000 	.word	0x70020000
 8022f98:	70000004 	.word	0x70000004

08022f9c <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8022f9c:	b480      	push	{r7}
 8022f9e:	b087      	sub	sp, #28
 8022fa0:	af00      	add	r7, sp, #0
 8022fa2:	60f8      	str	r0, [r7, #12]
 8022fa4:	60b9      	str	r1, [r7, #8]
 8022fa6:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8022fa8:	4b4c      	ldr	r3, [pc, #304]	; (80230dc <nand_write_page_async+0x140>)
 8022faa:	4a4d      	ldr	r2, [pc, #308]	; (80230e0 <nand_write_page_async+0x144>)
 8022fac:	7b52      	ldrb	r2, [r2, #13]
 8022fae:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8022fb0:	4b4b      	ldr	r3, [pc, #300]	; (80230e0 <nand_write_page_async+0x144>)
 8022fb2:	79db      	ldrb	r3, [r3, #7]
 8022fb4:	3b01      	subs	r3, #1
 8022fb6:	2b03      	cmp	r3, #3
 8022fb8:	d82c      	bhi.n	8023014 <nand_write_page_async+0x78>
 8022fba:	a201      	add	r2, pc, #4	; (adr r2, 8022fc0 <nand_write_page_async+0x24>)
 8022fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fc0:	08022fd1 	.word	0x08022fd1
 8022fc4:	08022fd9 	.word	0x08022fd9
 8022fc8:	08022fe7 	.word	0x08022fe7
 8022fcc:	08022ffb 	.word	0x08022ffb
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022fd0:	4b44      	ldr	r3, [pc, #272]	; (80230e4 <nand_write_page_async+0x148>)
 8022fd2:	2200      	movs	r2, #0
 8022fd4:	701a      	strb	r2, [r3, #0]
        break;
 8022fd6:	e01e      	b.n	8023016 <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022fd8:	4b42      	ldr	r3, [pc, #264]	; (80230e4 <nand_write_page_async+0x148>)
 8022fda:	2200      	movs	r2, #0
 8022fdc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022fde:	4b41      	ldr	r3, [pc, #260]	; (80230e4 <nand_write_page_async+0x148>)
 8022fe0:	2200      	movs	r2, #0
 8022fe2:	701a      	strb	r2, [r3, #0]
        break;
 8022fe4:	e017      	b.n	8023016 <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022fe6:	4b3f      	ldr	r3, [pc, #252]	; (80230e4 <nand_write_page_async+0x148>)
 8022fe8:	2200      	movs	r2, #0
 8022fea:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022fec:	4b3d      	ldr	r3, [pc, #244]	; (80230e4 <nand_write_page_async+0x148>)
 8022fee:	2200      	movs	r2, #0
 8022ff0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022ff2:	4b3c      	ldr	r3, [pc, #240]	; (80230e4 <nand_write_page_async+0x148>)
 8022ff4:	2200      	movs	r2, #0
 8022ff6:	701a      	strb	r2, [r3, #0]
        break;
 8022ff8:	e00d      	b.n	8023016 <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022ffa:	4b3a      	ldr	r3, [pc, #232]	; (80230e4 <nand_write_page_async+0x148>)
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023000:	4b38      	ldr	r3, [pc, #224]	; (80230e4 <nand_write_page_async+0x148>)
 8023002:	2200      	movs	r2, #0
 8023004:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023006:	4b37      	ldr	r3, [pc, #220]	; (80230e4 <nand_write_page_async+0x148>)
 8023008:	2200      	movs	r2, #0
 802300a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802300c:	4b35      	ldr	r3, [pc, #212]	; (80230e4 <nand_write_page_async+0x148>)
 802300e:	2200      	movs	r2, #0
 8023010:	701a      	strb	r2, [r3, #0]
        break;
 8023012:	e000      	b.n	8023016 <nand_write_page_async+0x7a>
    default:
        break;
 8023014:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023016:	4b32      	ldr	r3, [pc, #200]	; (80230e0 <nand_write_page_async+0x144>)
 8023018:	799b      	ldrb	r3, [r3, #6]
 802301a:	3b01      	subs	r3, #1
 802301c:	2b03      	cmp	r3, #3
 802301e:	d83d      	bhi.n	802309c <nand_write_page_async+0x100>
 8023020:	a201      	add	r2, pc, #4	; (adr r2, 8023028 <nand_write_page_async+0x8c>)
 8023022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023026:	bf00      	nop
 8023028:	08023039 	.word	0x08023039
 802302c:	08023043 	.word	0x08023043
 8023030:	08023057 	.word	0x08023057
 8023034:	08023075 	.word	0x08023075
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023038:	4b2a      	ldr	r3, [pc, #168]	; (80230e4 <nand_write_page_async+0x148>)
 802303a:	68ba      	ldr	r2, [r7, #8]
 802303c:	b2d2      	uxtb	r2, r2
 802303e:	701a      	strb	r2, [r3, #0]
        break;
 8023040:	e02d      	b.n	802309e <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023042:	4b28      	ldr	r3, [pc, #160]	; (80230e4 <nand_write_page_async+0x148>)
 8023044:	68ba      	ldr	r2, [r7, #8]
 8023046:	b2d2      	uxtb	r2, r2
 8023048:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802304a:	68bb      	ldr	r3, [r7, #8]
 802304c:	0a1a      	lsrs	r2, r3, #8
 802304e:	4b25      	ldr	r3, [pc, #148]	; (80230e4 <nand_write_page_async+0x148>)
 8023050:	b2d2      	uxtb	r2, r2
 8023052:	701a      	strb	r2, [r3, #0]
        break;
 8023054:	e023      	b.n	802309e <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023056:	4b23      	ldr	r3, [pc, #140]	; (80230e4 <nand_write_page_async+0x148>)
 8023058:	68ba      	ldr	r2, [r7, #8]
 802305a:	b2d2      	uxtb	r2, r2
 802305c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802305e:	68bb      	ldr	r3, [r7, #8]
 8023060:	0a1a      	lsrs	r2, r3, #8
 8023062:	4b20      	ldr	r3, [pc, #128]	; (80230e4 <nand_write_page_async+0x148>)
 8023064:	b2d2      	uxtb	r2, r2
 8023066:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023068:	68bb      	ldr	r3, [r7, #8]
 802306a:	0c1a      	lsrs	r2, r3, #16
 802306c:	4b1d      	ldr	r3, [pc, #116]	; (80230e4 <nand_write_page_async+0x148>)
 802306e:	b2d2      	uxtb	r2, r2
 8023070:	701a      	strb	r2, [r3, #0]
        break;
 8023072:	e014      	b.n	802309e <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023074:	4b1b      	ldr	r3, [pc, #108]	; (80230e4 <nand_write_page_async+0x148>)
 8023076:	68ba      	ldr	r2, [r7, #8]
 8023078:	b2d2      	uxtb	r2, r2
 802307a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802307c:	68bb      	ldr	r3, [r7, #8]
 802307e:	0a1a      	lsrs	r2, r3, #8
 8023080:	4b18      	ldr	r3, [pc, #96]	; (80230e4 <nand_write_page_async+0x148>)
 8023082:	b2d2      	uxtb	r2, r2
 8023084:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023086:	68bb      	ldr	r3, [r7, #8]
 8023088:	0c1a      	lsrs	r2, r3, #16
 802308a:	4b16      	ldr	r3, [pc, #88]	; (80230e4 <nand_write_page_async+0x148>)
 802308c:	b2d2      	uxtb	r2, r2
 802308e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023090:	68bb      	ldr	r3, [r7, #8]
 8023092:	0e1a      	lsrs	r2, r3, #24
 8023094:	4b13      	ldr	r3, [pc, #76]	; (80230e4 <nand_write_page_async+0x148>)
 8023096:	b2d2      	uxtb	r2, r2
 8023098:	701a      	strb	r2, [r3, #0]
        break;
 802309a:	e000      	b.n	802309e <nand_write_page_async+0x102>
    default:
        break;
 802309c:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 802309e:	2300      	movs	r3, #0
 80230a0:	617b      	str	r3, [r7, #20]
 80230a2:	e009      	b.n	80230b8 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 80230a4:	68fa      	ldr	r2, [r7, #12]
 80230a6:	697b      	ldr	r3, [r7, #20]
 80230a8:	4413      	add	r3, r2
 80230aa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80230ae:	781b      	ldrb	r3, [r3, #0]
 80230b0:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 80230b2:	697b      	ldr	r3, [r7, #20]
 80230b4:	3301      	adds	r3, #1
 80230b6:	617b      	str	r3, [r7, #20]
 80230b8:	697a      	ldr	r2, [r7, #20]
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	429a      	cmp	r2, r3
 80230be:	d3f1      	bcc.n	80230a4 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 80230c0:	4b07      	ldr	r3, [pc, #28]	; (80230e0 <nand_write_page_async+0x144>)
 80230c2:	7b9b      	ldrb	r3, [r3, #14]
 80230c4:	2bff      	cmp	r3, #255	; 0xff
 80230c6:	d003      	beq.n	80230d0 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 80230c8:	4b04      	ldr	r3, [pc, #16]	; (80230dc <nand_write_page_async+0x140>)
 80230ca:	4a05      	ldr	r2, [pc, #20]	; (80230e0 <nand_write_page_async+0x144>)
 80230cc:	7b92      	ldrb	r2, [r2, #14]
 80230ce:	701a      	strb	r2, [r3, #0]
}
 80230d0:	bf00      	nop
 80230d2:	371c      	adds	r7, #28
 80230d4:	46bd      	mov	sp, r7
 80230d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230da:	4770      	bx	lr
 80230dc:	70010000 	.word	0x70010000
 80230e0:	20000c48 	.word	0x20000c48
 80230e4:	70020000 	.word	0x70020000

080230e8 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 80230e8:	b580      	push	{r7, lr}
 80230ea:	b086      	sub	sp, #24
 80230ec:	af00      	add	r7, sp, #0
 80230ee:	60f8      	str	r0, [r7, #12]
 80230f0:	60b9      	str	r1, [r7, #8]
 80230f2:	607a      	str	r2, [r7, #4]
 80230f4:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 80230f6:	4b55      	ldr	r3, [pc, #340]	; (802324c <nand_read_data+0x164>)
 80230f8:	4a55      	ldr	r2, [pc, #340]	; (8023250 <nand_read_data+0x168>)
 80230fa:	7a12      	ldrb	r2, [r2, #8]
 80230fc:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 80230fe:	4b54      	ldr	r3, [pc, #336]	; (8023250 <nand_read_data+0x168>)
 8023100:	79db      	ldrb	r3, [r3, #7]
 8023102:	3b01      	subs	r3, #1
 8023104:	2b03      	cmp	r3, #3
 8023106:	d83c      	bhi.n	8023182 <nand_read_data+0x9a>
 8023108:	a201      	add	r2, pc, #4	; (adr r2, 8023110 <nand_read_data+0x28>)
 802310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802310e:	bf00      	nop
 8023110:	08023121 	.word	0x08023121
 8023114:	0802312b 	.word	0x0802312b
 8023118:	0802313f 	.word	0x0802313f
 802311c:	0802315d 	.word	0x0802315d
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023120:	4b4c      	ldr	r3, [pc, #304]	; (8023254 <nand_read_data+0x16c>)
 8023122:	687a      	ldr	r2, [r7, #4]
 8023124:	b2d2      	uxtb	r2, r2
 8023126:	701a      	strb	r2, [r3, #0]
        break;
 8023128:	e02c      	b.n	8023184 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802312a:	4b4a      	ldr	r3, [pc, #296]	; (8023254 <nand_read_data+0x16c>)
 802312c:	687a      	ldr	r2, [r7, #4]
 802312e:	b2d2      	uxtb	r2, r2
 8023130:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	0a1a      	lsrs	r2, r3, #8
 8023136:	4b47      	ldr	r3, [pc, #284]	; (8023254 <nand_read_data+0x16c>)
 8023138:	b2d2      	uxtb	r2, r2
 802313a:	701a      	strb	r2, [r3, #0]
        break;
 802313c:	e022      	b.n	8023184 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802313e:	4b45      	ldr	r3, [pc, #276]	; (8023254 <nand_read_data+0x16c>)
 8023140:	687a      	ldr	r2, [r7, #4]
 8023142:	b2d2      	uxtb	r2, r2
 8023144:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	0a1a      	lsrs	r2, r3, #8
 802314a:	4b42      	ldr	r3, [pc, #264]	; (8023254 <nand_read_data+0x16c>)
 802314c:	b2d2      	uxtb	r2, r2
 802314e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	0c1a      	lsrs	r2, r3, #16
 8023154:	4b3f      	ldr	r3, [pc, #252]	; (8023254 <nand_read_data+0x16c>)
 8023156:	b2d2      	uxtb	r2, r2
 8023158:	701a      	strb	r2, [r3, #0]
        break;
 802315a:	e013      	b.n	8023184 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802315c:	4b3d      	ldr	r3, [pc, #244]	; (8023254 <nand_read_data+0x16c>)
 802315e:	687a      	ldr	r2, [r7, #4]
 8023160:	b2d2      	uxtb	r2, r2
 8023162:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	0a1a      	lsrs	r2, r3, #8
 8023168:	4b3a      	ldr	r3, [pc, #232]	; (8023254 <nand_read_data+0x16c>)
 802316a:	b2d2      	uxtb	r2, r2
 802316c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	0c1a      	lsrs	r2, r3, #16
 8023172:	4b38      	ldr	r3, [pc, #224]	; (8023254 <nand_read_data+0x16c>)
 8023174:	b2d2      	uxtb	r2, r2
 8023176:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 8023178:	687b      	ldr	r3, [r7, #4]
 802317a:	0e1a      	lsrs	r2, r3, #24
 802317c:	4b35      	ldr	r3, [pc, #212]	; (8023254 <nand_read_data+0x16c>)
 802317e:	b2d2      	uxtb	r2, r2
 8023180:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023182:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023184:	4b32      	ldr	r3, [pc, #200]	; (8023250 <nand_read_data+0x168>)
 8023186:	799b      	ldrb	r3, [r3, #6]
 8023188:	3b01      	subs	r3, #1
 802318a:	2b03      	cmp	r3, #3
 802318c:	d83c      	bhi.n	8023208 <nand_read_data+0x120>
 802318e:	a201      	add	r2, pc, #4	; (adr r2, 8023194 <nand_read_data+0xac>)
 8023190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023194:	080231a5 	.word	0x080231a5
 8023198:	080231af 	.word	0x080231af
 802319c:	080231c3 	.word	0x080231c3
 80231a0:	080231e1 	.word	0x080231e1
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231a4:	4b2b      	ldr	r3, [pc, #172]	; (8023254 <nand_read_data+0x16c>)
 80231a6:	68ba      	ldr	r2, [r7, #8]
 80231a8:	b2d2      	uxtb	r2, r2
 80231aa:	701a      	strb	r2, [r3, #0]
        break;
 80231ac:	e02d      	b.n	802320a <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231ae:	4b29      	ldr	r3, [pc, #164]	; (8023254 <nand_read_data+0x16c>)
 80231b0:	68ba      	ldr	r2, [r7, #8]
 80231b2:	b2d2      	uxtb	r2, r2
 80231b4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80231b6:	68bb      	ldr	r3, [r7, #8]
 80231b8:	0a1a      	lsrs	r2, r3, #8
 80231ba:	4b26      	ldr	r3, [pc, #152]	; (8023254 <nand_read_data+0x16c>)
 80231bc:	b2d2      	uxtb	r2, r2
 80231be:	701a      	strb	r2, [r3, #0]
        break;
 80231c0:	e023      	b.n	802320a <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231c2:	4b24      	ldr	r3, [pc, #144]	; (8023254 <nand_read_data+0x16c>)
 80231c4:	68ba      	ldr	r2, [r7, #8]
 80231c6:	b2d2      	uxtb	r2, r2
 80231c8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80231ca:	68bb      	ldr	r3, [r7, #8]
 80231cc:	0a1a      	lsrs	r2, r3, #8
 80231ce:	4b21      	ldr	r3, [pc, #132]	; (8023254 <nand_read_data+0x16c>)
 80231d0:	b2d2      	uxtb	r2, r2
 80231d2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80231d4:	68bb      	ldr	r3, [r7, #8]
 80231d6:	0c1a      	lsrs	r2, r3, #16
 80231d8:	4b1e      	ldr	r3, [pc, #120]	; (8023254 <nand_read_data+0x16c>)
 80231da:	b2d2      	uxtb	r2, r2
 80231dc:	701a      	strb	r2, [r3, #0]
        break;
 80231de:	e014      	b.n	802320a <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231e0:	4b1c      	ldr	r3, [pc, #112]	; (8023254 <nand_read_data+0x16c>)
 80231e2:	68ba      	ldr	r2, [r7, #8]
 80231e4:	b2d2      	uxtb	r2, r2
 80231e6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80231e8:	68bb      	ldr	r3, [r7, #8]
 80231ea:	0a1a      	lsrs	r2, r3, #8
 80231ec:	4b19      	ldr	r3, [pc, #100]	; (8023254 <nand_read_data+0x16c>)
 80231ee:	b2d2      	uxtb	r2, r2
 80231f0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80231f2:	68bb      	ldr	r3, [r7, #8]
 80231f4:	0c1a      	lsrs	r2, r3, #16
 80231f6:	4b17      	ldr	r3, [pc, #92]	; (8023254 <nand_read_data+0x16c>)
 80231f8:	b2d2      	uxtb	r2, r2
 80231fa:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80231fc:	68bb      	ldr	r3, [r7, #8]
 80231fe:	0e1a      	lsrs	r2, r3, #24
 8023200:	4b14      	ldr	r3, [pc, #80]	; (8023254 <nand_read_data+0x16c>)
 8023202:	b2d2      	uxtb	r2, r2
 8023204:	701a      	strb	r2, [r3, #0]
        break;
 8023206:	e000      	b.n	802320a <nand_read_data+0x122>
    default:
        break;
 8023208:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 802320a:	4b11      	ldr	r3, [pc, #68]	; (8023250 <nand_read_data+0x168>)
 802320c:	7a5b      	ldrb	r3, [r3, #9]
 802320e:	2bff      	cmp	r3, #255	; 0xff
 8023210:	d003      	beq.n	802321a <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 8023212:	4b0e      	ldr	r3, [pc, #56]	; (802324c <nand_read_data+0x164>)
 8023214:	4a0e      	ldr	r2, [pc, #56]	; (8023250 <nand_read_data+0x168>)
 8023216:	7a52      	ldrb	r2, [r2, #9]
 8023218:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 802321a:	2300      	movs	r3, #0
 802321c:	617b      	str	r3, [r7, #20]
 802321e:	e00a      	b.n	8023236 <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023220:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023224:	68fa      	ldr	r2, [r7, #12]
 8023226:	697b      	ldr	r3, [r7, #20]
 8023228:	4413      	add	r3, r2
 802322a:	780a      	ldrb	r2, [r1, #0]
 802322c:	b2d2      	uxtb	r2, r2
 802322e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023230:	697b      	ldr	r3, [r7, #20]
 8023232:	3301      	adds	r3, #1
 8023234:	617b      	str	r3, [r7, #20]
 8023236:	697a      	ldr	r2, [r7, #20]
 8023238:	683b      	ldr	r3, [r7, #0]
 802323a:	429a      	cmp	r2, r3
 802323c:	d3f0      	bcc.n	8023220 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 802323e:	f7ff fe4f 	bl	8022ee0 <nand_get_status>
 8023242:	4603      	mov	r3, r0
}
 8023244:	4618      	mov	r0, r3
 8023246:	3718      	adds	r7, #24
 8023248:	46bd      	mov	sp, r7
 802324a:	bd80      	pop	{r7, pc}
 802324c:	70010000 	.word	0x70010000
 8023250:	20000c48 	.word	0x20000c48
 8023254:	70020000 	.word	0x70020000

08023258 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023258:	b580      	push	{r7, lr}
 802325a:	b084      	sub	sp, #16
 802325c:	af00      	add	r7, sp, #0
 802325e:	60f8      	str	r0, [r7, #12]
 8023260:	60b9      	str	r1, [r7, #8]
 8023262:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	2200      	movs	r2, #0
 8023268:	68b9      	ldr	r1, [r7, #8]
 802326a:	68f8      	ldr	r0, [r7, #12]
 802326c:	f7ff ff3c 	bl	80230e8 <nand_read_data>
 8023270:	4603      	mov	r3, r0
}
 8023272:	4618      	mov	r0, r3
 8023274:	3710      	adds	r7, #16
 8023276:	46bd      	mov	sp, r7
 8023278:	bd80      	pop	{r7, pc}
	...

0802327c <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 802327c:	b580      	push	{r7, lr}
 802327e:	b086      	sub	sp, #24
 8023280:	af00      	add	r7, sp, #0
 8023282:	60f8      	str	r0, [r7, #12]
 8023284:	60b9      	str	r1, [r7, #8]
 8023286:	607a      	str	r2, [r7, #4]
 8023288:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 802328a:	4b54      	ldr	r3, [pc, #336]	; (80233dc <nand_read_spare_data+0x160>)
 802328c:	7a9b      	ldrb	r3, [r3, #10]
 802328e:	2bff      	cmp	r3, #255	; 0xff
 8023290:	d101      	bne.n	8023296 <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 8023292:	2304      	movs	r3, #4
 8023294:	e09e      	b.n	80233d4 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 8023296:	4b52      	ldr	r3, [pc, #328]	; (80233e0 <nand_read_spare_data+0x164>)
 8023298:	4a50      	ldr	r2, [pc, #320]	; (80233dc <nand_read_spare_data+0x160>)
 802329a:	7a92      	ldrb	r2, [r2, #10]
 802329c:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 802329e:	4b4f      	ldr	r3, [pc, #316]	; (80233dc <nand_read_spare_data+0x160>)
 80232a0:	79db      	ldrb	r3, [r3, #7]
 80232a2:	3b01      	subs	r3, #1
 80232a4:	2b03      	cmp	r3, #3
 80232a6:	d83c      	bhi.n	8023322 <nand_read_spare_data+0xa6>
 80232a8:	a201      	add	r2, pc, #4	; (adr r2, 80232b0 <nand_read_spare_data+0x34>)
 80232aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232ae:	bf00      	nop
 80232b0:	080232c1 	.word	0x080232c1
 80232b4:	080232cb 	.word	0x080232cb
 80232b8:	080232df 	.word	0x080232df
 80232bc:	080232fd 	.word	0x080232fd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232c0:	4b48      	ldr	r3, [pc, #288]	; (80233e4 <nand_read_spare_data+0x168>)
 80232c2:	687a      	ldr	r2, [r7, #4]
 80232c4:	b2d2      	uxtb	r2, r2
 80232c6:	701a      	strb	r2, [r3, #0]
        break;
 80232c8:	e02c      	b.n	8023324 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232ca:	4b46      	ldr	r3, [pc, #280]	; (80233e4 <nand_read_spare_data+0x168>)
 80232cc:	687a      	ldr	r2, [r7, #4]
 80232ce:	b2d2      	uxtb	r2, r2
 80232d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	0a1a      	lsrs	r2, r3, #8
 80232d6:	4b43      	ldr	r3, [pc, #268]	; (80233e4 <nand_read_spare_data+0x168>)
 80232d8:	b2d2      	uxtb	r2, r2
 80232da:	701a      	strb	r2, [r3, #0]
        break;
 80232dc:	e022      	b.n	8023324 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232de:	4b41      	ldr	r3, [pc, #260]	; (80233e4 <nand_read_spare_data+0x168>)
 80232e0:	687a      	ldr	r2, [r7, #4]
 80232e2:	b2d2      	uxtb	r2, r2
 80232e4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80232e6:	687b      	ldr	r3, [r7, #4]
 80232e8:	0a1a      	lsrs	r2, r3, #8
 80232ea:	4b3e      	ldr	r3, [pc, #248]	; (80233e4 <nand_read_spare_data+0x168>)
 80232ec:	b2d2      	uxtb	r2, r2
 80232ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 80232f0:	687b      	ldr	r3, [r7, #4]
 80232f2:	0c1a      	lsrs	r2, r3, #16
 80232f4:	4b3b      	ldr	r3, [pc, #236]	; (80233e4 <nand_read_spare_data+0x168>)
 80232f6:	b2d2      	uxtb	r2, r2
 80232f8:	701a      	strb	r2, [r3, #0]
        break;
 80232fa:	e013      	b.n	8023324 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232fc:	4b39      	ldr	r3, [pc, #228]	; (80233e4 <nand_read_spare_data+0x168>)
 80232fe:	687a      	ldr	r2, [r7, #4]
 8023300:	b2d2      	uxtb	r2, r2
 8023302:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	0a1a      	lsrs	r2, r3, #8
 8023308:	4b36      	ldr	r3, [pc, #216]	; (80233e4 <nand_read_spare_data+0x168>)
 802330a:	b2d2      	uxtb	r2, r2
 802330c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	0c1a      	lsrs	r2, r3, #16
 8023312:	4b34      	ldr	r3, [pc, #208]	; (80233e4 <nand_read_spare_data+0x168>)
 8023314:	b2d2      	uxtb	r2, r2
 8023316:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	0e1a      	lsrs	r2, r3, #24
 802331c:	4b31      	ldr	r3, [pc, #196]	; (80233e4 <nand_read_spare_data+0x168>)
 802331e:	b2d2      	uxtb	r2, r2
 8023320:	701a      	strb	r2, [r3, #0]
    default:
        break;
 8023322:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023324:	4b2d      	ldr	r3, [pc, #180]	; (80233dc <nand_read_spare_data+0x160>)
 8023326:	799b      	ldrb	r3, [r3, #6]
 8023328:	3b01      	subs	r3, #1
 802332a:	2b03      	cmp	r3, #3
 802332c:	d83c      	bhi.n	80233a8 <nand_read_spare_data+0x12c>
 802332e:	a201      	add	r2, pc, #4	; (adr r2, 8023334 <nand_read_spare_data+0xb8>)
 8023330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023334:	08023345 	.word	0x08023345
 8023338:	0802334f 	.word	0x0802334f
 802333c:	08023363 	.word	0x08023363
 8023340:	08023381 	.word	0x08023381
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023344:	4b27      	ldr	r3, [pc, #156]	; (80233e4 <nand_read_spare_data+0x168>)
 8023346:	68ba      	ldr	r2, [r7, #8]
 8023348:	b2d2      	uxtb	r2, r2
 802334a:	701a      	strb	r2, [r3, #0]
        break;
 802334c:	e02d      	b.n	80233aa <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802334e:	4b25      	ldr	r3, [pc, #148]	; (80233e4 <nand_read_spare_data+0x168>)
 8023350:	68ba      	ldr	r2, [r7, #8]
 8023352:	b2d2      	uxtb	r2, r2
 8023354:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023356:	68bb      	ldr	r3, [r7, #8]
 8023358:	0a1a      	lsrs	r2, r3, #8
 802335a:	4b22      	ldr	r3, [pc, #136]	; (80233e4 <nand_read_spare_data+0x168>)
 802335c:	b2d2      	uxtb	r2, r2
 802335e:	701a      	strb	r2, [r3, #0]
        break;
 8023360:	e023      	b.n	80233aa <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023362:	4b20      	ldr	r3, [pc, #128]	; (80233e4 <nand_read_spare_data+0x168>)
 8023364:	68ba      	ldr	r2, [r7, #8]
 8023366:	b2d2      	uxtb	r2, r2
 8023368:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 802336a:	68bb      	ldr	r3, [r7, #8]
 802336c:	0a1a      	lsrs	r2, r3, #8
 802336e:	4b1d      	ldr	r3, [pc, #116]	; (80233e4 <nand_read_spare_data+0x168>)
 8023370:	b2d2      	uxtb	r2, r2
 8023372:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023374:	68bb      	ldr	r3, [r7, #8]
 8023376:	0c1a      	lsrs	r2, r3, #16
 8023378:	4b1a      	ldr	r3, [pc, #104]	; (80233e4 <nand_read_spare_data+0x168>)
 802337a:	b2d2      	uxtb	r2, r2
 802337c:	701a      	strb	r2, [r3, #0]
        break;
 802337e:	e014      	b.n	80233aa <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023380:	4b18      	ldr	r3, [pc, #96]	; (80233e4 <nand_read_spare_data+0x168>)
 8023382:	68ba      	ldr	r2, [r7, #8]
 8023384:	b2d2      	uxtb	r2, r2
 8023386:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023388:	68bb      	ldr	r3, [r7, #8]
 802338a:	0a1a      	lsrs	r2, r3, #8
 802338c:	4b15      	ldr	r3, [pc, #84]	; (80233e4 <nand_read_spare_data+0x168>)
 802338e:	b2d2      	uxtb	r2, r2
 8023390:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023392:	68bb      	ldr	r3, [r7, #8]
 8023394:	0c1a      	lsrs	r2, r3, #16
 8023396:	4b13      	ldr	r3, [pc, #76]	; (80233e4 <nand_read_spare_data+0x168>)
 8023398:	b2d2      	uxtb	r2, r2
 802339a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 802339c:	68bb      	ldr	r3, [r7, #8]
 802339e:	0e1a      	lsrs	r2, r3, #24
 80233a0:	4b10      	ldr	r3, [pc, #64]	; (80233e4 <nand_read_spare_data+0x168>)
 80233a2:	b2d2      	uxtb	r2, r2
 80233a4:	701a      	strb	r2, [r3, #0]
        break;
 80233a6:	e000      	b.n	80233aa <nand_read_spare_data+0x12e>
    default:
        break;
 80233a8:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 80233aa:	2300      	movs	r3, #0
 80233ac:	617b      	str	r3, [r7, #20]
 80233ae:	e00a      	b.n	80233c6 <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80233b0:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80233b4:	68fa      	ldr	r2, [r7, #12]
 80233b6:	697b      	ldr	r3, [r7, #20]
 80233b8:	4413      	add	r3, r2
 80233ba:	780a      	ldrb	r2, [r1, #0]
 80233bc:	b2d2      	uxtb	r2, r2
 80233be:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 80233c0:	697b      	ldr	r3, [r7, #20]
 80233c2:	3301      	adds	r3, #1
 80233c4:	617b      	str	r3, [r7, #20]
 80233c6:	697a      	ldr	r2, [r7, #20]
 80233c8:	683b      	ldr	r3, [r7, #0]
 80233ca:	429a      	cmp	r2, r3
 80233cc:	d3f0      	bcc.n	80233b0 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 80233ce:	f7ff fd87 	bl	8022ee0 <nand_get_status>
 80233d2:	4603      	mov	r3, r0
}
 80233d4:	4618      	mov	r0, r3
 80233d6:	3718      	adds	r7, #24
 80233d8:	46bd      	mov	sp, r7
 80233da:	bd80      	pop	{r7, pc}
 80233dc:	20000c48 	.word	0x20000c48
 80233e0:	70010000 	.word	0x70010000
 80233e4:	70020000 	.word	0x70020000

080233e8 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 80233e8:	b580      	push	{r7, lr}
 80233ea:	b082      	sub	sp, #8
 80233ec:	af00      	add	r7, sp, #0
 80233ee:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 80233f0:	4b2a      	ldr	r3, [pc, #168]	; (802349c <nand_erase_block+0xb4>)
 80233f2:	4a2b      	ldr	r2, [pc, #172]	; (80234a0 <nand_erase_block+0xb8>)
 80233f4:	7bd2      	ldrb	r2, [r2, #15]
 80233f6:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 80233f8:	4b29      	ldr	r3, [pc, #164]	; (80234a0 <nand_erase_block+0xb8>)
 80233fa:	799b      	ldrb	r3, [r3, #6]
 80233fc:	3b01      	subs	r3, #1
 80233fe:	2b03      	cmp	r3, #3
 8023400:	d83c      	bhi.n	802347c <nand_erase_block+0x94>
 8023402:	a201      	add	r2, pc, #4	; (adr r2, 8023408 <nand_erase_block+0x20>)
 8023404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023408:	08023419 	.word	0x08023419
 802340c:	08023423 	.word	0x08023423
 8023410:	08023437 	.word	0x08023437
 8023414:	08023455 	.word	0x08023455
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023418:	4b22      	ldr	r3, [pc, #136]	; (80234a4 <nand_erase_block+0xbc>)
 802341a:	687a      	ldr	r2, [r7, #4]
 802341c:	b2d2      	uxtb	r2, r2
 802341e:	701a      	strb	r2, [r3, #0]
        break;
 8023420:	e02d      	b.n	802347e <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023422:	4b20      	ldr	r3, [pc, #128]	; (80234a4 <nand_erase_block+0xbc>)
 8023424:	687a      	ldr	r2, [r7, #4]
 8023426:	b2d2      	uxtb	r2, r2
 8023428:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 802342a:	687b      	ldr	r3, [r7, #4]
 802342c:	0a1a      	lsrs	r2, r3, #8
 802342e:	4b1d      	ldr	r3, [pc, #116]	; (80234a4 <nand_erase_block+0xbc>)
 8023430:	b2d2      	uxtb	r2, r2
 8023432:	701a      	strb	r2, [r3, #0]
        break;
 8023434:	e023      	b.n	802347e <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023436:	4b1b      	ldr	r3, [pc, #108]	; (80234a4 <nand_erase_block+0xbc>)
 8023438:	687a      	ldr	r2, [r7, #4]
 802343a:	b2d2      	uxtb	r2, r2
 802343c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 802343e:	687b      	ldr	r3, [r7, #4]
 8023440:	0a1a      	lsrs	r2, r3, #8
 8023442:	4b18      	ldr	r3, [pc, #96]	; (80234a4 <nand_erase_block+0xbc>)
 8023444:	b2d2      	uxtb	r2, r2
 8023446:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	0c1a      	lsrs	r2, r3, #16
 802344c:	4b15      	ldr	r3, [pc, #84]	; (80234a4 <nand_erase_block+0xbc>)
 802344e:	b2d2      	uxtb	r2, r2
 8023450:	701a      	strb	r2, [r3, #0]
        break;
 8023452:	e014      	b.n	802347e <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023454:	4b13      	ldr	r3, [pc, #76]	; (80234a4 <nand_erase_block+0xbc>)
 8023456:	687a      	ldr	r2, [r7, #4]
 8023458:	b2d2      	uxtb	r2, r2
 802345a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 802345c:	687b      	ldr	r3, [r7, #4]
 802345e:	0a1a      	lsrs	r2, r3, #8
 8023460:	4b10      	ldr	r3, [pc, #64]	; (80234a4 <nand_erase_block+0xbc>)
 8023462:	b2d2      	uxtb	r2, r2
 8023464:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	0c1a      	lsrs	r2, r3, #16
 802346a:	4b0e      	ldr	r3, [pc, #56]	; (80234a4 <nand_erase_block+0xbc>)
 802346c:	b2d2      	uxtb	r2, r2
 802346e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	0e1a      	lsrs	r2, r3, #24
 8023474:	4b0b      	ldr	r3, [pc, #44]	; (80234a4 <nand_erase_block+0xbc>)
 8023476:	b2d2      	uxtb	r2, r2
 8023478:	701a      	strb	r2, [r3, #0]
        break;
 802347a:	e000      	b.n	802347e <nand_erase_block+0x96>
    default:
        break;
 802347c:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 802347e:	4b08      	ldr	r3, [pc, #32]	; (80234a0 <nand_erase_block+0xb8>)
 8023480:	7c1b      	ldrb	r3, [r3, #16]
 8023482:	2bff      	cmp	r3, #255	; 0xff
 8023484:	d003      	beq.n	802348e <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 8023486:	4b05      	ldr	r3, [pc, #20]	; (802349c <nand_erase_block+0xb4>)
 8023488:	4a05      	ldr	r2, [pc, #20]	; (80234a0 <nand_erase_block+0xb8>)
 802348a:	7c12      	ldrb	r2, [r2, #16]
 802348c:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 802348e:	f7ff fd27 	bl	8022ee0 <nand_get_status>
 8023492:	4603      	mov	r3, r0
}
 8023494:	4618      	mov	r0, r3
 8023496:	3708      	adds	r7, #8
 8023498:	46bd      	mov	sp, r7
 802349a:	bd80      	pop	{r7, pc}
 802349c:	70010000 	.word	0x70010000
 80234a0:	20000c48 	.word	0x20000c48
 80234a4:	70020000 	.word	0x70020000

080234a8 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 80234a8:	b480      	push	{r7}
 80234aa:	af00      	add	r7, sp, #0
    return true;
 80234ac:	2301      	movs	r3, #1
}
 80234ae:	4618      	mov	r0, r3
 80234b0:	46bd      	mov	sp, r7
 80234b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234b6:	4770      	bx	lr

080234b8 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 80234b8:	b480      	push	{r7}
 80234ba:	b085      	sub	sp, #20
 80234bc:	af00      	add	r7, sp, #0
 80234be:	4603      	mov	r3, r0
 80234c0:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 80234c2:	4b17      	ldr	r3, [pc, #92]	; (8023520 <nand_enable_hw_ecc+0x68>)
 80234c4:	7c9b      	ldrb	r3, [r3, #18]
 80234c6:	2bff      	cmp	r3, #255	; 0xff
 80234c8:	d101      	bne.n	80234ce <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 80234ca:	2304      	movs	r3, #4
 80234cc:	e021      	b.n	8023512 <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80234ce:	79fb      	ldrb	r3, [r7, #7]
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	d002      	beq.n	80234da <nand_enable_hw_ecc+0x22>
 80234d4:	4b12      	ldr	r3, [pc, #72]	; (8023520 <nand_enable_hw_ecc+0x68>)
 80234d6:	7d1b      	ldrb	r3, [r3, #20]
 80234d8:	e001      	b.n	80234de <nand_enable_hw_ecc+0x26>
 80234da:	4b11      	ldr	r3, [pc, #68]	; (8023520 <nand_enable_hw_ecc+0x68>)
 80234dc:	7d5b      	ldrb	r3, [r3, #21]
 80234de:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 80234e0:	4b10      	ldr	r3, [pc, #64]	; (8023524 <nand_enable_hw_ecc+0x6c>)
 80234e2:	4a0f      	ldr	r2, [pc, #60]	; (8023520 <nand_enable_hw_ecc+0x68>)
 80234e4:	7c92      	ldrb	r2, [r2, #18]
 80234e6:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 80234e8:	4b0f      	ldr	r3, [pc, #60]	; (8023528 <nand_enable_hw_ecc+0x70>)
 80234ea:	4a0d      	ldr	r2, [pc, #52]	; (8023520 <nand_enable_hw_ecc+0x68>)
 80234ec:	7cd2      	ldrb	r2, [r2, #19]
 80234ee:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 80234f0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80234f4:	7bfb      	ldrb	r3, [r7, #15]
 80234f6:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 80234f8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80234fc:	2200      	movs	r2, #0
 80234fe:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023500:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023504:	2200      	movs	r2, #0
 8023506:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023508:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802350c:	2200      	movs	r2, #0
 802350e:	701a      	strb	r2, [r3, #0]

    return 0;
 8023510:	2300      	movs	r3, #0
}
 8023512:	4618      	mov	r0, r3
 8023514:	3714      	adds	r7, #20
 8023516:	46bd      	mov	sp, r7
 8023518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351c:	4770      	bx	lr
 802351e:	bf00      	nop
 8023520:	20000c48 	.word	0x20000c48
 8023524:	70010000 	.word	0x70010000
 8023528:	70020000 	.word	0x70020000

0802352c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 802352c:	b580      	push	{r7, lr}
 802352e:	b08c      	sub	sp, #48	; 0x30
 8023530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023532:	f107 031c 	add.w	r3, r7, #28
 8023536:	2200      	movs	r2, #0
 8023538:	601a      	str	r2, [r3, #0]
 802353a:	605a      	str	r2, [r3, #4]
 802353c:	609a      	str	r2, [r3, #8]
 802353e:	60da      	str	r2, [r3, #12]
 8023540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023542:	2300      	movs	r3, #0
 8023544:	61bb      	str	r3, [r7, #24]
 8023546:	4b69      	ldr	r3, [pc, #420]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802354a:	4a68      	ldr	r2, [pc, #416]	; (80236ec <MX_GPIO_Init+0x1c0>)
 802354c:	f043 0310 	orr.w	r3, r3, #16
 8023550:	6313      	str	r3, [r2, #48]	; 0x30
 8023552:	4b66      	ldr	r3, [pc, #408]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023556:	f003 0310 	and.w	r3, r3, #16
 802355a:	61bb      	str	r3, [r7, #24]
 802355c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802355e:	2300      	movs	r3, #0
 8023560:	617b      	str	r3, [r7, #20]
 8023562:	4b62      	ldr	r3, [pc, #392]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023566:	4a61      	ldr	r2, [pc, #388]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023568:	f043 0304 	orr.w	r3, r3, #4
 802356c:	6313      	str	r3, [r2, #48]	; 0x30
 802356e:	4b5f      	ldr	r3, [pc, #380]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023572:	f003 0304 	and.w	r3, r3, #4
 8023576:	617b      	str	r3, [r7, #20]
 8023578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802357a:	2300      	movs	r3, #0
 802357c:	613b      	str	r3, [r7, #16]
 802357e:	4b5b      	ldr	r3, [pc, #364]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023582:	4a5a      	ldr	r2, [pc, #360]	; (80236ec <MX_GPIO_Init+0x1c0>)
 8023584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023588:	6313      	str	r3, [r2, #48]	; 0x30
 802358a:	4b58      	ldr	r3, [pc, #352]	; (80236ec <MX_GPIO_Init+0x1c0>)
 802358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023592:	613b      	str	r3, [r7, #16]
 8023594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023596:	2300      	movs	r3, #0
 8023598:	60fb      	str	r3, [r7, #12]
 802359a:	4b54      	ldr	r3, [pc, #336]	; (80236ec <MX_GPIO_Init+0x1c0>)
 802359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802359e:	4a53      	ldr	r2, [pc, #332]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235a0:	f043 0301 	orr.w	r3, r3, #1
 80235a4:	6313      	str	r3, [r2, #48]	; 0x30
 80235a6:	4b51      	ldr	r3, [pc, #324]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235aa:	f003 0301 	and.w	r3, r3, #1
 80235ae:	60fb      	str	r3, [r7, #12]
 80235b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80235b2:	2300      	movs	r3, #0
 80235b4:	60bb      	str	r3, [r7, #8]
 80235b6:	4b4d      	ldr	r3, [pc, #308]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235ba:	4a4c      	ldr	r2, [pc, #304]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235bc:	f043 0302 	orr.w	r3, r3, #2
 80235c0:	6313      	str	r3, [r2, #48]	; 0x30
 80235c2:	4b4a      	ldr	r3, [pc, #296]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235c6:	f003 0302 	and.w	r3, r3, #2
 80235ca:	60bb      	str	r3, [r7, #8]
 80235cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80235ce:	2300      	movs	r3, #0
 80235d0:	607b      	str	r3, [r7, #4]
 80235d2:	4b46      	ldr	r3, [pc, #280]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235d6:	4a45      	ldr	r2, [pc, #276]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235d8:	f043 0308 	orr.w	r3, r3, #8
 80235dc:	6313      	str	r3, [r2, #48]	; 0x30
 80235de:	4b43      	ldr	r3, [pc, #268]	; (80236ec <MX_GPIO_Init+0x1c0>)
 80235e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235e2:	f003 0308 	and.w	r3, r3, #8
 80235e6:	607b      	str	r3, [r7, #4]
 80235e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80235ea:	2201      	movs	r2, #1
 80235ec:	2140      	movs	r1, #64	; 0x40
 80235ee:	4840      	ldr	r0, [pc, #256]	; (80236f0 <MX_GPIO_Init+0x1c4>)
 80235f0:	f005 f8e0 	bl	80287b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80235f4:	2201      	movs	r2, #1
 80235f6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80235fa:	483e      	ldr	r0, [pc, #248]	; (80236f4 <MX_GPIO_Init+0x1c8>)
 80235fc:	f005 f8da 	bl	80287b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8023600:	2200      	movs	r2, #0
 8023602:	2110      	movs	r1, #16
 8023604:	483c      	ldr	r0, [pc, #240]	; (80236f8 <MX_GPIO_Init+0x1cc>)
 8023606:	f005 f8d5 	bl	80287b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802360a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802360e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023610:	2303      	movs	r3, #3
 8023612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023614:	2300      	movs	r3, #0
 8023616:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8023618:	f107 031c 	add.w	r3, r7, #28
 802361c:	4619      	mov	r1, r3
 802361e:	4834      	ldr	r0, [pc, #208]	; (80236f0 <MX_GPIO_Init+0x1c4>)
 8023620:	f004 fe30 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8023624:	2340      	movs	r3, #64	; 0x40
 8023626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023628:	2301      	movs	r3, #1
 802362a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802362c:	2301      	movs	r3, #1
 802362e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023630:	2300      	movs	r3, #0
 8023632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8023634:	f107 031c 	add.w	r3, r7, #28
 8023638:	4619      	mov	r1, r3
 802363a:	482d      	ldr	r0, [pc, #180]	; (80236f0 <MX_GPIO_Init+0x1c4>)
 802363c:	f004 fe22 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8023640:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023646:	2301      	movs	r3, #1
 8023648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802364a:	2301      	movs	r3, #1
 802364c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802364e:	2300      	movs	r3, #0
 8023650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023652:	f107 031c 	add.w	r3, r7, #28
 8023656:	4619      	mov	r1, r3
 8023658:	4826      	ldr	r0, [pc, #152]	; (80236f4 <MX_GPIO_Init+0x1c8>)
 802365a:	f004 fe13 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 802365e:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 8023662:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023664:	2303      	movs	r3, #3
 8023666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023668:	2300      	movs	r3, #0
 802366a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802366c:	f107 031c 	add.w	r3, r7, #28
 8023670:	4619      	mov	r1, r3
 8023672:	4820      	ldr	r0, [pc, #128]	; (80236f4 <MX_GPIO_Init+0x1c8>)
 8023674:	f004 fe06 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 8023678:	f248 1307 	movw	r3, #33031	; 0x8107
 802367c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802367e:	2303      	movs	r3, #3
 8023680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023682:	2300      	movs	r3, #0
 8023684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023686:	f107 031c 	add.w	r3, r7, #28
 802368a:	4619      	mov	r1, r3
 802368c:	481a      	ldr	r0, [pc, #104]	; (80236f8 <MX_GPIO_Init+0x1cc>)
 802368e:	f004 fdf9 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8023692:	2310      	movs	r3, #16
 8023694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023696:	2301      	movs	r3, #1
 8023698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802369a:	2300      	movs	r3, #0
 802369c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802369e:	2300      	movs	r3, #0
 80236a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80236a2:	f107 031c 	add.w	r3, r7, #28
 80236a6:	4619      	mov	r1, r3
 80236a8:	4813      	ldr	r0, [pc, #76]	; (80236f8 <MX_GPIO_Init+0x1cc>)
 80236aa:	f004 fdeb 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80236ae:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 80236b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80236b4:	2303      	movs	r3, #3
 80236b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236b8:	2300      	movs	r3, #0
 80236ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80236bc:	f107 031c 	add.w	r3, r7, #28
 80236c0:	4619      	mov	r1, r3
 80236c2:	480e      	ldr	r0, [pc, #56]	; (80236fc <MX_GPIO_Init+0x1d0>)
 80236c4:	f004 fdde 	bl	8028284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD13
                           PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80236c8:	f242 730c 	movw	r3, #9996	; 0x270c
 80236cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80236ce:	2303      	movs	r3, #3
 80236d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236d2:	2300      	movs	r3, #0
 80236d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80236d6:	f107 031c 	add.w	r3, r7, #28
 80236da:	4619      	mov	r1, r3
 80236dc:	4808      	ldr	r0, [pc, #32]	; (8023700 <MX_GPIO_Init+0x1d4>)
 80236de:	f004 fdd1 	bl	8028284 <HAL_GPIO_Init>

}
 80236e2:	bf00      	nop
 80236e4:	3730      	adds	r7, #48	; 0x30
 80236e6:	46bd      	mov	sp, r7
 80236e8:	bd80      	pop	{r7, pc}
 80236ea:	bf00      	nop
 80236ec:	40023800 	.word	0x40023800
 80236f0:	40021000 	.word	0x40021000
 80236f4:	40020800 	.word	0x40020800
 80236f8:	40020000 	.word	0x40020000
 80236fc:	40020400 	.word	0x40020400
 8023700:	40020c00 	.word	0x40020c00

08023704 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8023704:	b580      	push	{r7, lr}
 8023706:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 8023708:	f004 f82a 	bl	8027760 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 802370c:	f004 f848 	bl	80277a0 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8023710:	f004 f836 	bl	8027780 <HAL_DBGMCU_EnableDBGStopMode>
}
 8023714:	bf00      	nop
 8023716:	bd80      	pop	{r7, pc}

08023718 <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 8023718:	b580      	push	{r7, lr}
 802371a:	b088      	sub	sp, #32
 802371c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 802371e:	f107 030c 	add.w	r3, r7, #12
 8023722:	2200      	movs	r2, #0
 8023724:	601a      	str	r2, [r3, #0]
 8023726:	605a      	str	r2, [r3, #4]
 8023728:	609a      	str	r2, [r3, #8]
 802372a:	60da      	str	r2, [r3, #12]
 802372c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 802372e:	2300      	movs	r3, #0
 8023730:	60bb      	str	r3, [r7, #8]
 8023732:	4b26      	ldr	r3, [pc, #152]	; (80237cc <led_init+0xb4>)
 8023734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023736:	4a25      	ldr	r2, [pc, #148]	; (80237cc <led_init+0xb4>)
 8023738:	f043 0310 	orr.w	r3, r3, #16
 802373c:	6313      	str	r3, [r2, #48]	; 0x30
 802373e:	4b23      	ldr	r3, [pc, #140]	; (80237cc <led_init+0xb4>)
 8023740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023742:	f003 0310 	and.w	r3, r3, #16
 8023746:	60bb      	str	r3, [r7, #8]
 8023748:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 802374a:	2300      	movs	r3, #0
 802374c:	607b      	str	r3, [r7, #4]
 802374e:	4b1f      	ldr	r3, [pc, #124]	; (80237cc <led_init+0xb4>)
 8023750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023752:	4a1e      	ldr	r2, [pc, #120]	; (80237cc <led_init+0xb4>)
 8023754:	f043 0304 	orr.w	r3, r3, #4
 8023758:	6313      	str	r3, [r2, #48]	; 0x30
 802375a:	4b1c      	ldr	r3, [pc, #112]	; (80237cc <led_init+0xb4>)
 802375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802375e:	f003 0304 	and.w	r3, r3, #4
 8023762:	607b      	str	r3, [r7, #4]
 8023764:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8023766:	2201      	movs	r2, #1
 8023768:	2140      	movs	r1, #64	; 0x40
 802376a:	4819      	ldr	r0, [pc, #100]	; (80237d0 <led_init+0xb8>)
 802376c:	f005 f822 	bl	80287b4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8023770:	2201      	movs	r2, #1
 8023772:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023776:	4817      	ldr	r0, [pc, #92]	; (80237d4 <led_init+0xbc>)
 8023778:	f005 f81c 	bl	80287b4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 802377c:	2340      	movs	r3, #64	; 0x40
 802377e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023780:	2301      	movs	r3, #1
 8023782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023784:	2301      	movs	r3, #1
 8023786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023788:	2300      	movs	r3, #0
 802378a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 802378c:	f107 030c 	add.w	r3, r7, #12
 8023790:	4619      	mov	r1, r3
 8023792:	480f      	ldr	r0, [pc, #60]	; (80237d0 <led_init+0xb8>)
 8023794:	f004 fd76 	bl	8028284 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8023798:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 802379c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802379e:	2301      	movs	r3, #1
 80237a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80237a2:	2301      	movs	r3, #1
 80237a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80237a6:	2300      	movs	r3, #0
 80237a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80237aa:	f107 030c 	add.w	r3, r7, #12
 80237ae:	4619      	mov	r1, r3
 80237b0:	4808      	ldr	r0, [pc, #32]	; (80237d4 <led_init+0xbc>)
 80237b2:	f004 fd67 	bl	8028284 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 80237b6:	2200      	movs	r2, #0
 80237b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80237bc:	4805      	ldr	r0, [pc, #20]	; (80237d4 <led_init+0xbc>)
 80237be:	f004 fff9 	bl	80287b4 <HAL_GPIO_WritePin>
}
 80237c2:	bf00      	nop
 80237c4:	3720      	adds	r7, #32
 80237c6:	46bd      	mov	sp, r7
 80237c8:	bd80      	pop	{r7, pc}
 80237ca:	bf00      	nop
 80237cc:	40023800 	.word	0x40023800
 80237d0:	40021000 	.word	0x40021000
 80237d4:	40020800 	.word	0x40020800

080237d8 <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 80237d8:	b580      	push	{r7, lr}
 80237da:	b082      	sub	sp, #8
 80237dc:	af00      	add	r7, sp, #0
 80237de:	6078      	str	r0, [r7, #4]
 80237e0:	460b      	mov	r3, r1
 80237e2:	807b      	strh	r3, [r7, #2]
 80237e4:	4613      	mov	r3, r2
 80237e6:	707b      	strb	r3, [r7, #1]
    if (on)
 80237e8:	787b      	ldrb	r3, [r7, #1]
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	d006      	beq.n	80237fc <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 80237ee:	887b      	ldrh	r3, [r7, #2]
 80237f0:	2201      	movs	r2, #1
 80237f2:	4619      	mov	r1, r3
 80237f4:	6878      	ldr	r0, [r7, #4]
 80237f6:	f004 ffdd 	bl	80287b4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 80237fa:	e005      	b.n	8023808 <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 80237fc:	887b      	ldrh	r3, [r7, #2]
 80237fe:	2200      	movs	r2, #0
 8023800:	4619      	mov	r1, r3
 8023802:	6878      	ldr	r0, [r7, #4]
 8023804:	f004 ffd6 	bl	80287b4 <HAL_GPIO_WritePin>
}
 8023808:	bf00      	nop
 802380a:	3708      	adds	r7, #8
 802380c:	46bd      	mov	sp, r7
 802380e:	bd80      	pop	{r7, pc}

08023810 <led_wr_set>:

void led_wr_set(bool on)
{
 8023810:	b580      	push	{r7, lr}
 8023812:	b082      	sub	sp, #8
 8023814:	af00      	add	r7, sp, #0
 8023816:	4603      	mov	r3, r0
 8023818:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 802381a:	79fb      	ldrb	r3, [r7, #7]
 802381c:	461a      	mov	r2, r3
 802381e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8023822:	4803      	ldr	r0, [pc, #12]	; (8023830 <led_wr_set+0x20>)
 8023824:	f7ff ffd8 	bl	80237d8 <led_set>
}
 8023828:	bf00      	nop
 802382a:	3708      	adds	r7, #8
 802382c:	46bd      	mov	sp, r7
 802382e:	bd80      	pop	{r7, pc}
 8023830:	40020800 	.word	0x40020800

08023834 <led_rd_set>:

void led_rd_set(bool on)
{
 8023834:	b580      	push	{r7, lr}
 8023836:	b082      	sub	sp, #8
 8023838:	af00      	add	r7, sp, #0
 802383a:	4603      	mov	r3, r0
 802383c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 802383e:	79fb      	ldrb	r3, [r7, #7]
 8023840:	461a      	mov	r2, r3
 8023842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8023846:	4803      	ldr	r0, [pc, #12]	; (8023854 <led_rd_set+0x20>)
 8023848:	f7ff ffc6 	bl	80237d8 <led_set>
}
 802384c:	bf00      	nop
 802384e:	3708      	adds	r7, #8
 8023850:	46bd      	mov	sp, r7
 8023852:	bd80      	pop	{r7, pc}
 8023854:	40020800 	.word	0x40020800

08023858 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8023858:	b580      	push	{r7, lr}
 802385a:	b084      	sub	sp, #16
 802385c:	af00      	add	r7, sp, #0
 802385e:	60f8      	str	r0, [r7, #12]
 8023860:	60b9      	str	r1, [r7, #8]
 8023862:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	b29a      	uxth	r2, r3
 8023868:	f04f 33ff 	mov.w	r3, #4294967295
 802386c:	68b9      	ldr	r1, [r7, #8]
 802386e:	4804      	ldr	r0, [pc, #16]	; (8023880 <_write+0x28>)
 8023870:	f008 fa51 	bl	802bd16 <HAL_UART_Transmit>
    return len;
 8023874:	687b      	ldr	r3, [r7, #4]
}
 8023876:	4618      	mov	r0, r3
 8023878:	3710      	adds	r7, #16
 802387a:	46bd      	mov	sp, r7
 802387c:	bd80      	pop	{r7, pc}
 802387e:	bf00      	nop
 8023880:	200051b4 	.word	0x200051b4

08023884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023884:	b580      	push	{r7, lr}
 8023886:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8023888:	b662      	cpsie	i
}
 802388a:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802388c:	f003 fed2 	bl	8027634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8023890:	f000 f856 	bl	8023940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8023894:	f7ff fe4a 	bl	802352c <MX_GPIO_Init>
  MX_FSMC_Init();
 8023898:	f7ff f886 	bl	80229a8 <MX_FSMC_Init>
  MX_RTC_Init();
 802389c:	f002 fba6 	bl	8025fec <MX_RTC_Init>
  MX_SPI1_Init();
 80238a0:	f002 fc28 	bl	80260f4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80238a4:	f003 fe22 	bl	80274ec <MX_USART1_UART_Init>
//  device_id = W25QXX_ReadID();
//  printf("W25Q256jv Device ID is 0x%04x\r\n", device_id);
//  JEDEC_ID = W25QXX_ReadJDID();
//  printf("----W25X_JEDEC_DEVICE_ID = %08x\r\n", JEDEC_ID);

  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 80238a8:	2300      	movs	r3, #0
 80238aa:	2205      	movs	r2, #5
 80238ac:	2103      	movs	r1, #3
 80238ae:	481c      	ldr	r0, [pc, #112]	; (8023920 <main+0x9c>)
 80238b0:	f00d ff00 	bl	80316b4 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 80238b4:	f7fe ffec 	bl	8022890 <is_external_clock_avail>
 80238b8:	4603      	mov	r3, r0
 80238ba:	f083 0301 	eor.w	r3, r3, #1
 80238be:	b2db      	uxtb	r3, r3
 80238c0:	2b00      	cmp	r3, #0
 80238c2:	d002      	beq.n	80238ca <main+0x46>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 80238c4:	4817      	ldr	r0, [pc, #92]	; (8023924 <main+0xa0>)
 80238c6:	f00d ff5b 	bl	8031780 <puts>

  printf("JTAG init...");
 80238ca:	4817      	ldr	r0, [pc, #92]	; (8023928 <main+0xa4>)
 80238cc:	f00d fef2 	bl	80316b4 <iprintf>
  jtag_init();
 80238d0:	f7ff ff18 	bl	8023704 <jtag_init>
  printf("done.\r\n");
 80238d4:	4815      	ldr	r0, [pc, #84]	; (802392c <main+0xa8>)
 80238d6:	f00d ff53 	bl	8031780 <puts>

  printf("LED init...");
 80238da:	4815      	ldr	r0, [pc, #84]	; (8023930 <main+0xac>)
 80238dc:	f00d feea 	bl	80316b4 <iprintf>
  led_init();
 80238e0:	f7ff ff1a 	bl	8023718 <led_init>
  printf("done.\r\n");
 80238e4:	4811      	ldr	r0, [pc, #68]	; (802392c <main+0xa8>)
 80238e6:	f00d ff4b 	bl	8031780 <puts>

  printf("USB init...");
 80238ea:	4812      	ldr	r0, [pc, #72]	; (8023934 <main+0xb0>)
 80238ec:	f00d fee2 	bl	80316b4 <iprintf>
  MX_USB_DEVICE_Init();
 80238f0:	f00c feb4 	bl	803065c <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 80238f4:	480d      	ldr	r0, [pc, #52]	; (802392c <main+0xa8>)
 80238f6:	f00d ff43 	bl	8031780 <puts>

  printf("CDC init...");
 80238fa:	480f      	ldr	r0, [pc, #60]	; (8023938 <main+0xb4>)
 80238fc:	f00d feda 	bl	80316b4 <iprintf>
  cdc_init();
 8023900:	f7fe fe94 	bl	802262c <cdc_init>
  printf("done.\r\n");
 8023904:	4809      	ldr	r0, [pc, #36]	; (802392c <main+0xa8>)
 8023906:	f00d ff3b 	bl	8031780 <puts>

  printf("Programmer init...");
 802390a:	480c      	ldr	r0, [pc, #48]	; (802393c <main+0xb8>)
 802390c:	f00d fed2 	bl	80316b4 <iprintf>
  np_init();
 8023910:	f002 fb40 	bl	8025f94 <np_init>
  printf("done.\r\n");
 8023914:	4805      	ldr	r0, [pc, #20]	; (802392c <main+0xa8>)
 8023916:	f00d ff33 	bl	8031780 <puts>

  while (1)
      np_handler();
 802391a:	f002 fb4b 	bl	8025fb4 <np_handler>
 802391e:	e7fc      	b.n	802391a <main+0x96>
 8023920:	080326f4 	.word	0x080326f4
 8023924:	08032718 	.word	0x08032718
 8023928:	08032754 	.word	0x08032754
 802392c:	08032764 	.word	0x08032764
 8023930:	0803276c 	.word	0x0803276c
 8023934:	08032778 	.word	0x08032778
 8023938:	08032784 	.word	0x08032784
 802393c:	08032790 	.word	0x08032790

08023940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023940:	b580      	push	{r7, lr}
 8023942:	b094      	sub	sp, #80	; 0x50
 8023944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023946:	f107 0320 	add.w	r3, r7, #32
 802394a:	2230      	movs	r2, #48	; 0x30
 802394c:	2100      	movs	r1, #0
 802394e:	4618      	mov	r0, r3
 8023950:	f00d fff6 	bl	8031940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023954:	f107 030c 	add.w	r3, r7, #12
 8023958:	2200      	movs	r2, #0
 802395a:	601a      	str	r2, [r3, #0]
 802395c:	605a      	str	r2, [r3, #4]
 802395e:	609a      	str	r2, [r3, #8]
 8023960:	60da      	str	r2, [r3, #12]
 8023962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023964:	2300      	movs	r3, #0
 8023966:	60bb      	str	r3, [r7, #8]
 8023968:	4b2a      	ldr	r3, [pc, #168]	; (8023a14 <SystemClock_Config+0xd4>)
 802396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802396c:	4a29      	ldr	r2, [pc, #164]	; (8023a14 <SystemClock_Config+0xd4>)
 802396e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023972:	6413      	str	r3, [r2, #64]	; 0x40
 8023974:	4b27      	ldr	r3, [pc, #156]	; (8023a14 <SystemClock_Config+0xd4>)
 8023976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802397c:	60bb      	str	r3, [r7, #8]
 802397e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023980:	2300      	movs	r3, #0
 8023982:	607b      	str	r3, [r7, #4]
 8023984:	4b24      	ldr	r3, [pc, #144]	; (8023a18 <SystemClock_Config+0xd8>)
 8023986:	681b      	ldr	r3, [r3, #0]
 8023988:	4a23      	ldr	r2, [pc, #140]	; (8023a18 <SystemClock_Config+0xd8>)
 802398a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802398e:	6013      	str	r3, [r2, #0]
 8023990:	4b21      	ldr	r3, [pc, #132]	; (8023a18 <SystemClock_Config+0xd8>)
 8023992:	681b      	ldr	r3, [r3, #0]
 8023994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023998:	607b      	str	r3, [r7, #4]
 802399a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 802399c:	2309      	movs	r3, #9
 802399e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80239a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80239a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80239a6:	2301      	movs	r3, #1
 80239a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80239aa:	2302      	movs	r3, #2
 80239ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80239ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80239b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80239b4:	2305      	movs	r3, #5
 80239b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80239b8:	23a8      	movs	r3, #168	; 0xa8
 80239ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80239bc:	2302      	movs	r3, #2
 80239be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80239c0:	2307      	movs	r3, #7
 80239c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80239c4:	f107 0320 	add.w	r3, r7, #32
 80239c8:	4618      	mov	r0, r3
 80239ca:	f006 facf 	bl	8029f6c <HAL_RCC_OscConfig>
 80239ce:	4603      	mov	r3, r0
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d001      	beq.n	80239d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80239d4:	f000 f822 	bl	8023a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80239d8:	230f      	movs	r3, #15
 80239da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80239dc:	2302      	movs	r3, #2
 80239de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80239e0:	2300      	movs	r3, #0
 80239e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80239e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80239e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80239ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80239ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80239f0:	f107 030c 	add.w	r3, r7, #12
 80239f4:	2105      	movs	r1, #5
 80239f6:	4618      	mov	r0, r3
 80239f8:	f006 fd30 	bl	802a45c <HAL_RCC_ClockConfig>
 80239fc:	4603      	mov	r3, r0
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d001      	beq.n	8023a06 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8023a02:	f000 f80b 	bl	8023a1c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8023a06:	f006 fe0f 	bl	802a628 <HAL_RCC_EnableCSS>
}
 8023a0a:	bf00      	nop
 8023a0c:	3750      	adds	r7, #80	; 0x50
 8023a0e:	46bd      	mov	sp, r7
 8023a10:	bd80      	pop	{r7, pc}
 8023a12:	bf00      	nop
 8023a14:	40023800 	.word	0x40023800
 8023a18:	40007000 	.word	0x40007000

08023a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023a1c:	b480      	push	{r7}
 8023a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8023a20:	b672      	cpsid	i
}
 8023a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023a24:	e7fe      	b.n	8023a24 <Error_Handler+0x8>
	...

08023a28 <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8023a28:	b580      	push	{r7, lr}
 8023a2a:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8023a2c:	2250      	movs	r2, #80	; 0x50
 8023a2e:	2100      	movs	r1, #0
 8023a30:	4803      	ldr	r0, [pc, #12]	; (8023a40 <nand_bad_block_table_init+0x18>)
 8023a32:	f00d ff85 	bl	8031940 <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 8023a36:	4b03      	ldr	r3, [pc, #12]	; (8023a44 <nand_bad_block_table_init+0x1c>)
 8023a38:	2200      	movs	r2, #0
 8023a3a:	601a      	str	r2, [r3, #0]
}
 8023a3c:	bf00      	nop
 8023a3e:	bd80      	pop	{r7, pc}
 8023a40:	20000c68 	.word	0x20000c68
 8023a44:	20000c64 	.word	0x20000c64

08023a48 <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 8023a48:	b480      	push	{r7}
 8023a4a:	b083      	sub	sp, #12
 8023a4c:	af00      	add	r7, sp, #0
 8023a4e:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8023a50:	4b0b      	ldr	r3, [pc, #44]	; (8023a80 <nand_bad_block_table_add+0x38>)
 8023a52:	681b      	ldr	r3, [r3, #0]
 8023a54:	2b14      	cmp	r3, #20
 8023a56:	d102      	bne.n	8023a5e <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 8023a58:	f04f 33ff 	mov.w	r3, #4294967295
 8023a5c:	e009      	b.n	8023a72 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 8023a5e:	4b08      	ldr	r3, [pc, #32]	; (8023a80 <nand_bad_block_table_add+0x38>)
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	1c5a      	adds	r2, r3, #1
 8023a64:	4906      	ldr	r1, [pc, #24]	; (8023a80 <nand_bad_block_table_add+0x38>)
 8023a66:	600a      	str	r2, [r1, #0]
 8023a68:	4906      	ldr	r1, [pc, #24]	; (8023a84 <nand_bad_block_table_add+0x3c>)
 8023a6a:	687a      	ldr	r2, [r7, #4]
 8023a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 8023a70:	2300      	movs	r3, #0
}
 8023a72:	4618      	mov	r0, r3
 8023a74:	370c      	adds	r7, #12
 8023a76:	46bd      	mov	sp, r7
 8023a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a7c:	4770      	bx	lr
 8023a7e:	bf00      	nop
 8023a80:	20000c64 	.word	0x20000c64
 8023a84:	20000c68 	.word	0x20000c68

08023a88 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 8023a88:	b480      	push	{r7}
 8023a8a:	b085      	sub	sp, #20
 8023a8c:	af00      	add	r7, sp, #0
 8023a8e:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8023a90:	2300      	movs	r3, #0
 8023a92:	60fb      	str	r3, [r7, #12]
 8023a94:	e00b      	b.n	8023aae <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 8023a96:	4a0c      	ldr	r2, [pc, #48]	; (8023ac8 <nand_bad_block_table_lookup+0x40>)
 8023a98:	68fb      	ldr	r3, [r7, #12]
 8023a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023a9e:	687a      	ldr	r2, [r7, #4]
 8023aa0:	429a      	cmp	r2, r3
 8023aa2:	d101      	bne.n	8023aa8 <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8023aa4:	2301      	movs	r3, #1
 8023aa6:	e008      	b.n	8023aba <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8023aa8:	68fb      	ldr	r3, [r7, #12]
 8023aaa:	3301      	adds	r3, #1
 8023aac:	60fb      	str	r3, [r7, #12]
 8023aae:	4b07      	ldr	r3, [pc, #28]	; (8023acc <nand_bad_block_table_lookup+0x44>)
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	68fa      	ldr	r2, [r7, #12]
 8023ab4:	429a      	cmp	r2, r3
 8023ab6:	d3ee      	bcc.n	8023a96 <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8023ab8:	2300      	movs	r3, #0
}
 8023aba:	4618      	mov	r0, r3
 8023abc:	3714      	adds	r7, #20
 8023abe:	46bd      	mov	sp, r7
 8023ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ac4:	4770      	bx	lr
 8023ac6:	bf00      	nop
 8023ac8:	20000c68 	.word	0x20000c68
 8023acc:	20000c64 	.word	0x20000c64

08023ad0 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8023ad0:	b480      	push	{r7}
 8023ad2:	b083      	sub	sp, #12
 8023ad4:	af00      	add	r7, sp, #0
 8023ad6:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8023ad8:	4b08      	ldr	r3, [pc, #32]	; (8023afc <nand_bad_block_table_iter_alloc+0x2c>)
 8023ada:	681b      	ldr	r3, [r3, #0]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d101      	bne.n	8023ae4 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8023ae0:	2300      	movs	r3, #0
 8023ae2:	e004      	b.n	8023aee <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8023ae4:	4b06      	ldr	r3, [pc, #24]	; (8023b00 <nand_bad_block_table_iter_alloc+0x30>)
 8023ae6:	681a      	ldr	r2, [r3, #0]
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8023aec:	4b04      	ldr	r3, [pc, #16]	; (8023b00 <nand_bad_block_table_iter_alloc+0x30>)
}
 8023aee:	4618      	mov	r0, r3
 8023af0:	370c      	adds	r7, #12
 8023af2:	46bd      	mov	sp, r7
 8023af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af8:	4770      	bx	lr
 8023afa:	bf00      	nop
 8023afc:	20000c64 	.word	0x20000c64
 8023b00:	20000c68 	.word	0x20000c68

08023b04 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8023b04:	b480      	push	{r7}
 8023b06:	b085      	sub	sp, #20
 8023b08:	af00      	add	r7, sp, #0
 8023b0a:	6078      	str	r0, [r7, #4]
 8023b0c:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 8023b12:	68fb      	ldr	r3, [r7, #12]
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d101      	bne.n	8023b1c <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8023b18:	2300      	movs	r3, #0
 8023b1a:	e012      	b.n	8023b42 <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8023b1c:	68fb      	ldr	r3, [r7, #12]
 8023b1e:	3304      	adds	r3, #4
 8023b20:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8023b22:	68fb      	ldr	r3, [r7, #12]
 8023b24:	4a0a      	ldr	r2, [pc, #40]	; (8023b50 <nand_bad_block_table_iter_next+0x4c>)
 8023b26:	1a9b      	subs	r3, r3, r2
 8023b28:	109b      	asrs	r3, r3, #2
 8023b2a:	461a      	mov	r2, r3
 8023b2c:	4b09      	ldr	r3, [pc, #36]	; (8023b54 <nand_bad_block_table_iter_next+0x50>)
 8023b2e:	681b      	ldr	r3, [r3, #0]
 8023b30:	429a      	cmp	r2, r3
 8023b32:	d301      	bcc.n	8023b38 <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8023b34:	2300      	movs	r3, #0
 8023b36:	e004      	b.n	8023b42 <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8023b38:	68fb      	ldr	r3, [r7, #12]
 8023b3a:	681a      	ldr	r2, [r3, #0]
 8023b3c:	683b      	ldr	r3, [r7, #0]
 8023b3e:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8023b40:	68fb      	ldr	r3, [r7, #12]
}
 8023b42:	4618      	mov	r0, r3
 8023b44:	3714      	adds	r7, #20
 8023b46:	46bd      	mov	sp, r7
 8023b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b4c:	4770      	bx	lr
 8023b4e:	bf00      	nop
 8023b50:	20000c68 	.word	0x20000c68
 8023b54:	20000c64 	.word	0x20000c64

08023b58 <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8023b58:	b580      	push	{r7, lr}
 8023b5a:	b082      	sub	sp, #8
 8023b5c:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8023b5e:	2301      	movs	r3, #1
 8023b60:	703b      	strb	r3, [r7, #0]
 8023b62:	2300      	movs	r3, #0
 8023b64:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8023b66:	2302      	movs	r3, #2
 8023b68:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8023b6a:	4b08      	ldr	r3, [pc, #32]	; (8023b8c <np_send_ok_status+0x34>)
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	2b00      	cmp	r3, #0
 8023b70:	d006      	beq.n	8023b80 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8023b72:	4b06      	ldr	r3, [pc, #24]	; (8023b8c <np_send_ok_status+0x34>)
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	463a      	mov	r2, r7
 8023b7a:	6879      	ldr	r1, [r7, #4]
 8023b7c:	4610      	mov	r0, r2
 8023b7e:	4798      	blx	r3

    return 0;
 8023b80:	2300      	movs	r3, #0
}
 8023b82:	4618      	mov	r0, r3
 8023b84:	3708      	adds	r7, #8
 8023b86:	46bd      	mov	sp, r7
 8023b88:	bd80      	pop	{r7, pc}
 8023b8a:	bf00      	nop
 8023b8c:	20000cb8 	.word	0x20000cb8

08023b90 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8023b90:	b580      	push	{r7, lr}
 8023b92:	b086      	sub	sp, #24
 8023b94:	af00      	add	r7, sp, #0
 8023b96:	4603      	mov	r3, r0
 8023b98:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8023b9a:	4b0d      	ldr	r3, [pc, #52]	; (8023bd0 <np_send_error+0x40>)
 8023b9c:	881b      	ldrh	r3, [r3, #0]
 8023b9e:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8023ba0:	8a3b      	ldrh	r3, [r7, #16]
 8023ba2:	81bb      	strh	r3, [r7, #12]
 8023ba4:	79fb      	ldrb	r3, [r7, #7]
 8023ba6:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8023ba8:	2303      	movs	r3, #3
 8023baa:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8023bac:	4b09      	ldr	r3, [pc, #36]	; (8023bd4 <np_send_error+0x44>)
 8023bae:	681b      	ldr	r3, [r3, #0]
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d007      	beq.n	8023bc4 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8023bb4:	4b07      	ldr	r3, [pc, #28]	; (8023bd4 <np_send_error+0x44>)
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	f107 020c 	add.w	r2, r7, #12
 8023bbe:	6979      	ldr	r1, [r7, #20]
 8023bc0:	4610      	mov	r0, r2
 8023bc2:	4798      	blx	r3

    return 0;
 8023bc4:	2300      	movs	r3, #0
}
 8023bc6:	4618      	mov	r0, r3
 8023bc8:	3718      	adds	r7, #24
 8023bca:	46bd      	mov	sp, r7
 8023bcc:	bd80      	pop	{r7, pc}
 8023bce:	bf00      	nop
 8023bd0:	080327a4 	.word	0x080327a4
 8023bd4:	20000cb8 	.word	0x20000cb8

08023bd8 <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8023bd8:	b580      	push	{r7, lr}
 8023bda:	b08a      	sub	sp, #40	; 0x28
 8023bdc:	af00      	add	r7, sp, #0
 8023bde:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8023be2:	607a      	str	r2, [r7, #4]
 8023be4:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8023be6:	78fb      	ldrb	r3, [r7, #3]
 8023be8:	2b00      	cmp	r3, #0
 8023bea:	d001      	beq.n	8023bf0 <np_send_bad_block_info+0x18>
 8023bec:	2304      	movs	r3, #4
 8023bee:	e000      	b.n	8023bf2 <np_send_bad_block_info+0x1a>
 8023bf0:	2302      	movs	r3, #2
 8023bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8023bf6:	2301      	movs	r3, #1
 8023bf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8023bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023c00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8023c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c06:	82bb      	strh	r3, [r7, #20]
 8023c08:	f107 0318 	add.w	r3, r7, #24
 8023c0c:	3b02      	subs	r3, #2
 8023c0e:	68ba      	ldr	r2, [r7, #8]
 8023c10:	601a      	str	r2, [r3, #0]
 8023c12:	68fa      	ldr	r2, [r7, #12]
 8023c14:	605a      	str	r2, [r3, #4]
 8023c16:	687b      	ldr	r3, [r7, #4]
 8023c18:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8023c1c:	4b09      	ldr	r3, [pc, #36]	; (8023c44 <np_send_bad_block_info+0x6c>)
 8023c1e:	681b      	ldr	r3, [r3, #0]
 8023c20:	681b      	ldr	r3, [r3, #0]
 8023c22:	f107 0214 	add.w	r2, r7, #20
 8023c26:	210e      	movs	r1, #14
 8023c28:	4610      	mov	r0, r2
 8023c2a:	4798      	blx	r3
 8023c2c:	4603      	mov	r3, r0
 8023c2e:	2b00      	cmp	r3, #0
 8023c30:	d002      	beq.n	8023c38 <np_send_bad_block_info+0x60>
        return -1;
 8023c32:	f04f 33ff 	mov.w	r3, #4294967295
 8023c36:	e000      	b.n	8023c3a <np_send_bad_block_info+0x62>

    return 0;
 8023c38:	2300      	movs	r3, #0
}
 8023c3a:	4618      	mov	r0, r3
 8023c3c:	3728      	adds	r7, #40	; 0x28
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	bd80      	pop	{r7, pc}
 8023c42:	bf00      	nop
 8023c44:	20000cb8 	.word	0x20000cb8

08023c48 <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8023c48:	b580      	push	{r7, lr}
 8023c4a:	b086      	sub	sp, #24
 8023c4c:	af00      	add	r7, sp, #0
 8023c4e:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8023c52:	4b0f      	ldr	r3, [pc, #60]	; (8023c90 <np_send_progress+0x48>)
 8023c54:	881b      	ldrh	r3, [r3, #0]
 8023c56:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8023c58:	8abb      	ldrh	r3, [r7, #20]
 8023c5a:	813b      	strh	r3, [r7, #8]
 8023c5c:	f107 0308 	add.w	r3, r7, #8
 8023c60:	3302      	adds	r3, #2
 8023c62:	683a      	ldr	r2, [r7, #0]
 8023c64:	601a      	str	r2, [r3, #0]
 8023c66:	687a      	ldr	r2, [r7, #4]
 8023c68:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8023c6a:	4b0a      	ldr	r3, [pc, #40]	; (8023c94 <np_send_progress+0x4c>)
 8023c6c:	681b      	ldr	r3, [r3, #0]
 8023c6e:	681b      	ldr	r3, [r3, #0]
 8023c70:	f107 0208 	add.w	r2, r7, #8
 8023c74:	210a      	movs	r1, #10
 8023c76:	4610      	mov	r0, r2
 8023c78:	4798      	blx	r3
 8023c7a:	4603      	mov	r3, r0
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	d002      	beq.n	8023c86 <np_send_progress+0x3e>
        return -1;
 8023c80:	f04f 33ff 	mov.w	r3, #4294967295
 8023c84:	e000      	b.n	8023c88 <np_send_progress+0x40>

    return 0;
 8023c86:	2300      	movs	r3, #0
}
 8023c88:	4618      	mov	r0, r3
 8023c8a:	3718      	adds	r7, #24
 8023c8c:	46bd      	mov	sp, r7
 8023c8e:	bd80      	pop	{r7, pc}
 8023c90:	080327a8 	.word	0x080327a8
 8023c94:	20000cb8 	.word	0x20000cb8

08023c98 <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8023c98:	b5b0      	push	{r4, r5, r7, lr}
 8023c9a:	b08a      	sub	sp, #40	; 0x28
 8023c9c:	af04      	add	r7, sp, #16
 8023c9e:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8023ca0:	2308      	movs	r3, #8
 8023ca2:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8023ca4:	481d      	ldr	r0, [pc, #116]	; (8023d1c <_np_cmd_nand_read_id+0x84>)
 8023ca6:	f00d fd6b 	bl	8031780 <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8023caa:	2300      	movs	r3, #0
 8023cac:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8023cae:	697b      	ldr	r3, [r7, #20]
 8023cb0:	b2db      	uxtb	r3, r3
 8023cb2:	3b02      	subs	r3, #2
 8023cb4:	b2db      	uxtb	r3, r3
 8023cb6:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cbe:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023cc2:	461a      	mov	r2, r3
 8023cc4:	4b16      	ldr	r3, [pc, #88]	; (8023d20 <_np_cmd_nand_read_id+0x88>)
 8023cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023cca:	689b      	ldr	r3, [r3, #8]
 8023ccc:	f107 020c 	add.w	r2, r7, #12
 8023cd0:	3202      	adds	r2, #2
 8023cd2:	4610      	mov	r0, r2
 8023cd4:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8023cd6:	4b13      	ldr	r3, [pc, #76]	; (8023d24 <_np_cmd_nand_read_id+0x8c>)
 8023cd8:	681b      	ldr	r3, [r3, #0]
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	d007      	beq.n	8023cee <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8023cde:	4b11      	ldr	r3, [pc, #68]	; (8023d24 <_np_cmd_nand_read_id+0x8c>)
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	681b      	ldr	r3, [r3, #0]
 8023ce4:	f107 020c 	add.w	r2, r7, #12
 8023ce8:	6979      	ldr	r1, [r7, #20]
 8023cea:	4610      	mov	r0, r2
 8023cec:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023cee:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023cf0:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023cf2:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023cf4:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023cf6:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023cf8:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8023cfa:	7c7b      	ldrb	r3, [r7, #17]
 8023cfc:	7cba      	ldrb	r2, [r7, #18]
 8023cfe:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023d00:	9102      	str	r1, [sp, #8]
 8023d02:	9201      	str	r2, [sp, #4]
 8023d04:	9300      	str	r3, [sp, #0]
 8023d06:	462b      	mov	r3, r5
 8023d08:	4622      	mov	r2, r4
 8023d0a:	4601      	mov	r1, r0
 8023d0c:	4806      	ldr	r0, [pc, #24]	; (8023d28 <_np_cmd_nand_read_id+0x90>)
 8023d0e:	f00d fcd1 	bl	80316b4 <iprintf>

    return 0;
 8023d12:	2300      	movs	r3, #0
}
 8023d14:	4618      	mov	r0, r3
 8023d16:	3718      	adds	r7, #24
 8023d18:	46bd      	mov	sp, r7
 8023d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8023d1c:	080327ac 	.word	0x080327ac
 8023d20:	20000040 	.word	0x20000040
 8023d24:	20000cb8 	.word	0x20000cb8
 8023d28:	080327c0 	.word	0x080327c0

08023d2c <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8023d2c:	b580      	push	{r7, lr}
 8023d2e:	b084      	sub	sp, #16
 8023d30:	af00      	add	r7, sp, #0
 8023d32:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8023d34:	2001      	movs	r0, #1
 8023d36:	f7ff fd7d 	bl	8023834 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8023d3a:	6878      	ldr	r0, [r7, #4]
 8023d3c:	f7ff ffac 	bl	8023c98 <_np_cmd_nand_read_id>
 8023d40:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8023d42:	2000      	movs	r0, #0
 8023d44:	f7ff fd76 	bl	8023834 <led_rd_set>

    return ret;
 8023d48:	68fb      	ldr	r3, [r7, #12]
}
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	3710      	adds	r7, #16
 8023d4e:	46bd      	mov	sp, r7
 8023d50:	bd80      	pop	{r7, pc}
	...

08023d54 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8023d54:	b5b0      	push	{r4, r5, r7, lr}
 8023d56:	b08a      	sub	sp, #40	; 0x28
 8023d58:	af00      	add	r7, sp, #0
 8023d5a:	60f8      	str	r0, [r7, #12]
 8023d5c:	60b9      	str	r1, [r7, #8]
 8023d5e:	607a      	str	r2, [r7, #4]
 8023d60:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023d68:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023d6c:	68ba      	ldr	r2, [r7, #8]
 8023d6e:	fb02 f303 	mul.w	r3, r2, r3
 8023d72:	2200      	movs	r2, #0
 8023d74:	461c      	mov	r4, r3
 8023d76:	4615      	mov	r5, r2
 8023d78:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023d7c:	68fb      	ldr	r3, [r7, #12]
 8023d7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023d82:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8023d86:	68fa      	ldr	r2, [r7, #12]
 8023d88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023d8c:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023d90:	4413      	add	r3, r2
 8023d92:	3338      	adds	r3, #56	; 0x38
 8023d94:	68fa      	ldr	r2, [r7, #12]
 8023d96:	4413      	add	r3, r2
 8023d98:	3304      	adds	r3, #4
 8023d9a:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023d9c:	68fb      	ldr	r3, [r7, #12]
 8023d9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023da2:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023da6:	461a      	mov	r2, r3
 8023da8:	4b35      	ldr	r3, [pc, #212]	; (8023e80 <np_read_bad_block_info_from_page+0x12c>)
 8023daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023dae:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8023db0:	68fb      	ldr	r3, [r7, #12]
 8023db2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023db6:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023dba:	461a      	mov	r2, r3
 8023dbc:	2301      	movs	r3, #1
 8023dbe:	6879      	ldr	r1, [r7, #4]
 8023dc0:	6978      	ldr	r0, [r7, #20]
 8023dc2:	47a0      	blx	r4
 8023dc4:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8023dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023dc8:	2b04      	cmp	r3, #4
 8023dca:	d11a      	bne.n	8023e02 <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023dcc:	68fb      	ldr	r3, [r7, #12]
 8023dce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023dd2:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023dd6:	461a      	mov	r2, r3
 8023dd8:	4b29      	ldr	r3, [pc, #164]	; (8023e80 <np_read_bad_block_info_from_page+0x12c>)
 8023dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023dde:	691b      	ldr	r3, [r3, #16]
 8023de0:	68fa      	ldr	r2, [r7, #12]
 8023de2:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8023de6:	68fa      	ldr	r2, [r7, #12]
 8023de8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023dec:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8023df0:	68fa      	ldr	r2, [r7, #12]
 8023df2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023df6:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023dfa:	440a      	add	r2, r1
 8023dfc:	6879      	ldr	r1, [r7, #4]
 8023dfe:	4798      	blx	r3
 8023e00:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8023e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e04:	2b03      	cmp	r3, #3
 8023e06:	d010      	beq.n	8023e2a <np_read_bad_block_info_from_page+0xd6>
 8023e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e0a:	2b03      	cmp	r3, #3
 8023e0c:	d815      	bhi.n	8023e3a <np_read_bad_block_info_from_page+0xe6>
 8023e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e10:	2b00      	cmp	r3, #0
 8023e12:	d018      	beq.n	8023e46 <np_read_bad_block_info_from_page+0xf2>
 8023e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e16:	2b02      	cmp	r3, #2
 8023e18:	d10f      	bne.n	8023e3a <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8023e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023e1e:	4819      	ldr	r0, [pc, #100]	; (8023e84 <np_read_bad_block_info_from_page+0x130>)
 8023e20:	f00d fc48 	bl	80316b4 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8023e24:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e28:	e025      	b.n	8023e76 <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8023e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023e2e:	4816      	ldr	r0, [pc, #88]	; (8023e88 <np_read_bad_block_info_from_page+0x134>)
 8023e30:	f00d fc40 	bl	80316b4 <iprintf>
        return NP_ERR_NAND_RD;
 8023e34:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e38:	e01d      	b.n	8023e76 <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8023e3a:	4814      	ldr	r0, [pc, #80]	; (8023e8c <np_read_bad_block_info_from_page+0x138>)
 8023e3c:	f00d fca0 	bl	8031780 <puts>
        return NP_ERR_NAND_RD;
 8023e40:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e44:	e017      	b.n	8023e76 <np_read_bad_block_info_from_page+0x122>
        break;
 8023e46:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e4e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023e52:	68fa      	ldr	r2, [r7, #12]
 8023e54:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023e58:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023e5c:	4413      	add	r3, r2
 8023e5e:	68fa      	ldr	r2, [r7, #12]
 8023e60:	4413      	add	r3, r2
 8023e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023e66:	2bff      	cmp	r3, #255	; 0xff
 8023e68:	bf14      	ite	ne
 8023e6a:	2301      	movne	r3, #1
 8023e6c:	2300      	moveq	r3, #0
 8023e6e:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023e70:	683b      	ldr	r3, [r7, #0]
 8023e72:	701a      	strb	r2, [r3, #0]

    return 0;
 8023e74:	2300      	movs	r3, #0
}
 8023e76:	4618      	mov	r0, r3
 8023e78:	3728      	adds	r7, #40	; 0x28
 8023e7a:	46bd      	mov	sp, r7
 8023e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8023e7e:	bf00      	nop
 8023e80:	20000040 	.word	0x20000040
 8023e84:	080327ec 	.word	0x080327ec
 8023e88:	08032820 	.word	0x08032820
 8023e8c:	08032848 	.word	0x08032848

08023e90 <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8023e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8023e94:	b088      	sub	sp, #32
 8023e96:	af00      	add	r7, sp, #0
 8023e98:	6078      	str	r0, [r7, #4]
 8023e9a:	460b      	mov	r3, r1
 8023e9c:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023ea4:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	4b40      	ldr	r3, [pc, #256]	; (8023fac <_np_cmd_read_bad_blocks+0x11c>)
 8023eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023eb0:	6a1b      	ldr	r3, [r3, #32]
 8023eb2:	4798      	blx	r3
 8023eb4:	4603      	mov	r3, r0
 8023eb6:	f083 0301 	eor.w	r3, r3, #1
 8023eba:	b2db      	uxtb	r3, r3
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d16a      	bne.n	8023f96 <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8023ec0:	687b      	ldr	r3, [r7, #4]
 8023ec2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8023ec6:	3330      	adds	r3, #48	; 0x30
 8023ec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023ed2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023ed6:	2200      	movs	r2, #0
 8023ed8:	4698      	mov	r8, r3
 8023eda:	4691      	mov	r9, r2
 8023edc:	4642      	mov	r2, r8
 8023ede:	464b      	mov	r3, r9
 8023ee0:	f7fe f9c6 	bl	8022270 <__aeabi_uldivmod>
 8023ee4:	4602      	mov	r2, r0
 8023ee6:	460b      	mov	r3, r1
 8023ee8:	4613      	mov	r3, r2
 8023eea:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023ef2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8023ef6:	687b      	ldr	r3, [r7, #4]
 8023ef8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023efc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8023f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8023f04:	617b      	str	r3, [r7, #20]
    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */

    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8023f06:	2300      	movs	r3, #0
 8023f08:	61fb      	str	r3, [r7, #28]
 8023f0a:	e03f      	b.n	8023f8c <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8023f0c:	69fb      	ldr	r3, [r7, #28]
 8023f0e:	697a      	ldr	r2, [r7, #20]
 8023f10:	fb02 f303 	mul.w	r3, r2, r3
 8023f14:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8023f16:	78fb      	ldrb	r3, [r7, #3]
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	d007      	beq.n	8023f2c <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8023f1c:	693b      	ldr	r3, [r7, #16]
 8023f1e:	2200      	movs	r2, #0
 8023f20:	461c      	mov	r4, r3
 8023f22:	4615      	mov	r5, r2
 8023f24:	4620      	mov	r0, r4
 8023f26:	4629      	mov	r1, r5
 8023f28:	f7ff fe8e 	bl	8023c48 <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8023f2c:	f107 030b 	add.w	r3, r7, #11
 8023f30:	693a      	ldr	r2, [r7, #16]
 8023f32:	69f9      	ldr	r1, [r7, #28]
 8023f34:	6878      	ldr	r0, [r7, #4]
 8023f36:	f7ff ff0d 	bl	8023d54 <np_read_bad_block_info_from_page>
 8023f3a:	60f8      	str	r0, [r7, #12]
 8023f3c:	68fb      	ldr	r3, [r7, #12]
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d001      	beq.n	8023f46 <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	e02c      	b.n	8023fa0 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8023f46:	7afb      	ldrb	r3, [r7, #11]
 8023f48:	f083 0301 	eor.w	r3, r3, #1
 8023f4c:	b2db      	uxtb	r3, r3
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	d00d      	beq.n	8023f6e <_np_cmd_read_bad_blocks+0xde>
 8023f52:	693b      	ldr	r3, [r7, #16]
 8023f54:	1c5a      	adds	r2, r3, #1
 8023f56:	f107 030b 	add.w	r3, r7, #11
 8023f5a:	69f9      	ldr	r1, [r7, #28]
 8023f5c:	6878      	ldr	r0, [r7, #4]
 8023f5e:	f7ff fef9 	bl	8023d54 <np_read_bad_block_info_from_page>
 8023f62:	60f8      	str	r0, [r7, #12]
 8023f64:	68fb      	ldr	r3, [r7, #12]
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	d001      	beq.n	8023f6e <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8023f6a:	68fb      	ldr	r3, [r7, #12]
 8023f6c:	e018      	b.n	8023fa0 <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8023f6e:	7afb      	ldrb	r3, [r7, #11]
 8023f70:	2b00      	cmp	r3, #0
 8023f72:	d008      	beq.n	8023f86 <_np_cmd_read_bad_blocks+0xf6>
 8023f74:	6938      	ldr	r0, [r7, #16]
 8023f76:	f7ff fd67 	bl	8023a48 <nand_bad_block_table_add>
 8023f7a:	4603      	mov	r3, r0
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	d002      	beq.n	8023f86 <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8023f80:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8023f84:	e00c      	b.n	8023fa0 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8023f86:	69fb      	ldr	r3, [r7, #28]
 8023f88:	3301      	adds	r3, #1
 8023f8a:	61fb      	str	r3, [r7, #28]
 8023f8c:	69fa      	ldr	r2, [r7, #28]
 8023f8e:	69bb      	ldr	r3, [r7, #24]
 8023f90:	429a      	cmp	r2, r3
 8023f92:	d3bb      	bcc.n	8023f0c <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8023f94:	e000      	b.n	8023f98 <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 8023f96:	bf00      	nop
    prog->bb_is_read = 1;
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	2201      	movs	r2, #1
 8023f9c:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8023f9e:	2300      	movs	r3, #0
}
 8023fa0:	4618      	mov	r0, r3
 8023fa2:	3720      	adds	r7, #32
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8023faa:	bf00      	nop
 8023fac:	20000040 	.word	0x20000040

08023fb0 <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8023fb0:	b580      	push	{r7, lr}
 8023fb2:	b086      	sub	sp, #24
 8023fb4:	af00      	add	r7, sp, #0
 8023fb6:	6078      	str	r0, [r7, #4]
 8023fb8:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8023fba:	6879      	ldr	r1, [r7, #4]
 8023fbc:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8023fc0:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8023fc4:	6838      	ldr	r0, [r7, #0]
 8023fc6:	fb00 f101 	mul.w	r1, r0, r1
 8023fca:	2000      	movs	r0, #0
 8023fcc:	460a      	mov	r2, r1
 8023fce:	4603      	mov	r3, r0
 8023fd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND擦除地址：0x%" PRIx64 "\r\n", addr);
 8023fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023fd8:	481f      	ldr	r0, [pc, #124]	; (8024058 <np_nand_erase+0xa8>)
 8023fda:	f00d fb6b 	bl	80316b4 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8023fde:	687b      	ldr	r3, [r7, #4]
 8023fe0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023fe4:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023fe8:	461a      	mov	r2, r3
 8023fea:	4b1c      	ldr	r3, [pc, #112]	; (802405c <np_nand_erase+0xac>)
 8023fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ff0:	68db      	ldr	r3, [r3, #12]
 8023ff2:	6838      	ldr	r0, [r7, #0]
 8023ff4:	4798      	blx	r3
 8023ff6:	60f8      	str	r0, [r7, #12]
    switch (status)
 8023ff8:	68fb      	ldr	r3, [r7, #12]
 8023ffa:	2b03      	cmp	r3, #3
 8023ffc:	d018      	beq.n	8024030 <np_nand_erase+0x80>
 8023ffe:	68fb      	ldr	r3, [r7, #12]
 8024000:	2b03      	cmp	r3, #3
 8024002:	d81b      	bhi.n	802403c <np_nand_erase+0x8c>
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	2b00      	cmp	r3, #0
 8024008:	d01e      	beq.n	8024048 <np_nand_erase+0x98>
 802400a:	68fb      	ldr	r3, [r7, #12]
 802400c:	2b02      	cmp	r3, #2
 802400e:	d115      	bne.n	802403c <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024016:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802401a:	2300      	movs	r3, #0
 802401c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024020:	f7ff fdda 	bl	8023bd8 <np_send_bad_block_info>
 8024024:	4603      	mov	r3, r0
 8024026:	2b00      	cmp	r3, #0
 8024028:	d010      	beq.n	802404c <np_nand_erase+0x9c>
            return -1;
 802402a:	f04f 33ff 	mov.w	r3, #4294967295
 802402e:	e00f      	b.n	8024050 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND擦除超时，地址：0x%" PRIx64 "\r\n", addr);
 8024030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024034:	480a      	ldr	r0, [pc, #40]	; (8024060 <np_nand_erase+0xb0>)
 8024036:	f00d fb3d 	bl	80316b4 <iprintf>
        break;
 802403a:	e008      	b.n	802404e <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 802403c:	4809      	ldr	r0, [pc, #36]	; (8024064 <np_nand_erase+0xb4>)
 802403e:	f00d fb9f 	bl	8031780 <puts>
        return -1;
 8024042:	f04f 33ff 	mov.w	r3, #4294967295
 8024046:	e003      	b.n	8024050 <np_nand_erase+0xa0>
        break;
 8024048:	bf00      	nop
 802404a:	e000      	b.n	802404e <np_nand_erase+0x9e>
        break;
 802404c:	bf00      	nop
    }

    return 0;
 802404e:	2300      	movs	r3, #0
}
 8024050:	4618      	mov	r0, r3
 8024052:	3718      	adds	r7, #24
 8024054:	46bd      	mov	sp, r7
 8024056:	bd80      	pop	{r7, pc}
 8024058:	08032864 	.word	0x08032864
 802405c:	20000040 	.word	0x20000040
 8024060:	08032880 	.word	0x08032880
 8024064:	080328ac 	.word	0x080328ac

08024068 <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 8024068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802406c:	b0ac      	sub	sp, #176	; 0xb0
 802406e:	af04      	add	r7, sp, #16
 8024070:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 8024072:	2300      	movs	r3, #0
 8024074:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 8024078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802407a:	685b      	ldr	r3, [r3, #4]
 802407c:	2b11      	cmp	r3, #17
 802407e:	d808      	bhi.n	8024092 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("擦除命令的缓冲区长度错误：%lu\r\n",
 8024080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024082:	685b      	ldr	r3, [r3, #4]
 8024084:	4619      	mov	r1, r3
 8024086:	48b0      	ldr	r0, [pc, #704]	; (8024348 <_np_cmd_nand_erase+0x2e0>)
 8024088:	f00d fb14 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802408c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024090:	e1c0      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8024092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 8024098:	6f79      	ldr	r1, [r7, #116]	; 0x74
 802409a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 802409e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80240a2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80240a6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80240aa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 80240ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80240b0:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80240b4:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80240b8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 80240bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240be:	7c5b      	ldrb	r3, [r3, #17]
 80240c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80240c4:	b2db      	uxtb	r3, r3
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	bf14      	ite	ne
 80240ca:	2301      	movne	r3, #1
 80240cc:	2300      	moveq	r3, #0
 80240ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 80240d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240d4:	7c5b      	ldrb	r3, [r3, #17]
 80240d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80240da:	b2db      	uxtb	r3, r3
 80240dc:	2b00      	cmp	r3, #0
 80240de:	bf14      	ite	ne
 80240e0:	2301      	movne	r3, #1
 80240e2:	2300      	moveq	r3, #0
 80240e4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("擦除地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n", addr,
 80240e8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80240ec:	e9cd 2300 	strd	r2, r3, [sp]
 80240f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80240f4:	4895      	ldr	r0, [pc, #596]	; (802434c <_np_cmd_nand_erase+0x2e4>)
 80240f6:	f00d fadd 	bl	80316b4 <iprintf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 80240fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024100:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024106:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802410a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024112:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8024114:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8024118:	2b00      	cmp	r3, #0
 802411a:	d03f      	beq.n	802419c <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 802411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802411e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024122:	3330      	adds	r3, #48	; 0x30
 8024124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802412a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802412e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024132:	2200      	movs	r2, #0
 8024134:	64bb      	str	r3, [r7, #72]	; 0x48
 8024136:	64fa      	str	r2, [r7, #76]	; 0x4c
 8024138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802413c:	f7fe f898 	bl	8022270 <__aeabi_uldivmod>
 8024140:	4602      	mov	r2, r0
 8024142:	460b      	mov	r3, r1
 8024144:	4613      	mov	r3, r2
 8024146:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802414a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802414e:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024158:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 802415c:	4413      	add	r3, r2
 802415e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 8024162:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8024168:	fb02 f303 	mul.w	r3, r2, r3
 802416c:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 802416e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8024170:	2200      	movs	r2, #0
 8024172:	469a      	mov	sl, r3
 8024174:	4693      	mov	fp, r2
 8024176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802417a:	2200      	movs	r2, #0
 802417c:	4698      	mov	r8, r3
 802417e:	4691      	mov	r9, r2
 8024180:	fb08 f20b 	mul.w	r2, r8, fp
 8024184:	fb0a f309 	mul.w	r3, sl, r9
 8024188:	4413      	add	r3, r2
 802418a:	fbaa 4508 	umull	r4, r5, sl, r8
 802418e:	442b      	add	r3, r5
 8024190:	461d      	mov	r5, r3
 8024192:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 8024196:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 802419a:	e014      	b.n	80241c6 <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 802419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802419e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80241a2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80241a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 80241aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80241b0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80241b4:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 80241b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241b8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80241bc:	3330      	adds	r3, #48	; 0x30
 80241be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241c2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog, false)))
 80241c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80241ca:	2b00      	cmp	r3, #0
 80241cc:	d00d      	beq.n	80241ea <_np_cmd_nand_erase+0x182>
 80241ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80241d2:	2b00      	cmp	r3, #0
 80241d4:	d109      	bne.n	80241ea <_np_cmd_nand_erase+0x182>
 80241d6:	2100      	movs	r1, #0
 80241d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80241da:	f7ff fe59 	bl	8023e90 <_np_cmd_read_bad_blocks>
 80241de:	65b8      	str	r0, [r7, #88]	; 0x58
 80241e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d001      	beq.n	80241ea <_np_cmd_nand_erase+0x182>
    {
        return ret;
 80241e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80241e8:	e114      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 80241ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80241ec:	2200      	movs	r2, #0
 80241ee:	643b      	str	r3, [r7, #64]	; 0x40
 80241f0:	647a      	str	r2, [r7, #68]	; 0x44
 80241f2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80241f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80241fa:	f7fe f839 	bl	8022270 <__aeabi_uldivmod>
 80241fe:	4313      	orrs	r3, r2
 8024200:	d009      	beq.n	8024216 <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到块大小0x%lx\r\n", addr, block_size);
 8024202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024204:	9300      	str	r3, [sp, #0]
 8024206:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802420a:	4851      	ldr	r0, [pc, #324]	; (8024350 <_np_cmd_nand_erase+0x2e8>)
 802420c:	f00d fa52 	bl	80316b4 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8024210:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024214:	e0fe      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 8024216:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802421a:	4313      	orrs	r3, r2
 802421c:	d105      	bne.n	802422a <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("长度为零\r\n");
 802421e:	484d      	ldr	r0, [pc, #308]	; (8024354 <_np_cmd_nand_erase+0x2ec>)
 8024220:	f00d faae 	bl	8031780 <puts>
        return NP_ERR_LEN_INVALID;
 8024224:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024228:	e0f4      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 802422a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802422c:	2200      	movs	r2, #0
 802422e:	63bb      	str	r3, [r7, #56]	; 0x38
 8024230:	63fa      	str	r2, [r7, #60]	; 0x3c
 8024232:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8024236:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802423a:	f7fe f819 	bl	8022270 <__aeabi_uldivmod>
 802423e:	4313      	orrs	r3, r2
 8024240:	d009      	beq.n	8024256 <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到块大小0x%lx\r\n", len, block_size);
 8024242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024244:	9300      	str	r3, [sp, #0]
 8024246:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802424a:	4843      	ldr	r0, [pc, #268]	; (8024358 <_np_cmd_nand_erase+0x2f0>)
 802424c:	f00d fa32 	bl	80316b4 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 8024250:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024254:	e0de      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 8024256:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802425a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802425e:	1884      	adds	r4, r0, r2
 8024260:	633c      	str	r4, [r7, #48]	; 0x30
 8024262:	eb41 0303 	adc.w	r3, r1, r3
 8024266:	637b      	str	r3, [r7, #52]	; 0x34
 8024268:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802426c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8024270:	4621      	mov	r1, r4
 8024272:	428a      	cmp	r2, r1
 8024274:	4629      	mov	r1, r5
 8024276:	418b      	sbcs	r3, r1
 8024278:	d20f      	bcs.n	802429a <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("擦除地址超出范围：0x%" PRIx64 "+0x%" PRIx64 "大于芯片大小0x%" PRIx64 "\r\n", addr, len, total_size);
 802427a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802427e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024282:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024286:	e9cd 2300 	strd	r2, r3, [sp]
 802428a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802428e:	4833      	ldr	r0, [pc, #204]	; (802435c <_np_cmd_nand_erase+0x2f4>)
 8024290:	f00d fa10 	bl	80316b4 <iprintf>
        return NP_ERR_ADDR_EXCEEDED;
 8024294:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024298:	e0bc      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 802429a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802429e:	2200      	movs	r2, #0
 80242a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80242a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80242a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80242a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80242ac:	f7fd ffe0 	bl	8022270 <__aeabi_uldivmod>
 80242b0:	4602      	mov	r2, r0
 80242b2:	460b      	mov	r3, r1
 80242b4:	4613      	mov	r3, r2
 80242b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 80242ba:	e0a3      	b.n	8024404 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 80242bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80242c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80242c4:	4290      	cmp	r0, r2
 80242c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80242ca:	d30b      	bcc.n	80242e4 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("擦除地址0x%" PRIx64 "超出范围：0x%" PRIx64 "\r\n", addr, total_size);
 80242cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80242d0:	e9cd 2300 	strd	r2, r3, [sp]
 80242d4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80242d8:	4821      	ldr	r0, [pc, #132]	; (8024360 <_np_cmd_nand_erase+0x2f8>)
 80242da:	f00d f9eb 	bl	80316b4 <iprintf>
            return NP_ERR_ADDR_EXCEEDED;
 80242de:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80242e2:	e097      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 80242e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80242e8:	2b00      	cmp	r3, #0
 80242ea:	d01b      	beq.n	8024324 <_np_cmd_nand_erase+0x2bc>
 80242ec:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80242f0:	f7ff fbca 	bl	8023a88 <nand_bad_block_table_lookup>
 80242f4:	4603      	mov	r3, r0
 80242f6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80242fa:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80242fe:	2b00      	cmp	r3, #0
 8024300:	d010      	beq.n	8024324 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", addr);
 8024302:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024306:	4817      	ldr	r0, [pc, #92]	; (8024364 <_np_cmd_nand_erase+0x2fc>)
 8024308:	f00d f9d4 	bl	80316b4 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 802430c:	2301      	movs	r3, #1
 802430e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024314:	f7ff fc60 	bl	8023bd8 <np_send_bad_block_info>
 8024318:	4603      	mov	r3, r0
 802431a:	2b00      	cmp	r3, #0
 802431c:	d002      	beq.n	8024324 <_np_cmd_nand_erase+0x2bc>
                return -1;
 802431e:	f04f 33ff 	mov.w	r3, #4294967295
 8024322:	e077      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8024324:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024328:	f083 0301 	eor.w	r3, r3, #1
 802432c:	b2db      	uxtb	r3, r3
 802432e:	2b00      	cmp	r3, #0
 8024330:	d01a      	beq.n	8024368 <_np_cmd_nand_erase+0x300>
 8024332:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8024336:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024338:	f7ff fe3a 	bl	8023fb0 <np_nand_erase>
 802433c:	4603      	mov	r3, r0
 802433e:	2b00      	cmp	r3, #0
 8024340:	d012      	beq.n	8024368 <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 8024342:	f06f 0368 	mvn.w	r3, #104	; 0x68
 8024346:	e065      	b.n	8024414 <_np_cmd_nand_erase+0x3ac>
 8024348:	080328c8 	.word	0x080328c8
 802434c:	080328fc 	.word	0x080328fc
 8024350:	0803292c 	.word	0x0803292c
 8024354:	0803295c 	.word	0x0803295c
 8024358:	08032974 	.word	0x08032974
 802435c:	080329a4 	.word	0x080329a4
 8024360:	080329f0 	.word	0x080329f0
 8024364:	08032a24 	.word	0x08032a24

        addr += block_size;
 8024368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802436a:	2200      	movs	r2, #0
 802436c:	623b      	str	r3, [r7, #32]
 802436e:	627a      	str	r2, [r7, #36]	; 0x24
 8024370:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024374:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8024378:	4621      	mov	r1, r4
 802437a:	1851      	adds	r1, r2, r1
 802437c:	60b9      	str	r1, [r7, #8]
 802437e:	4629      	mov	r1, r5
 8024380:	414b      	adcs	r3, r1
 8024382:	60fb      	str	r3, [r7, #12]
 8024384:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8024388:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 802438c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8024392:	4413      	add	r3, r2
 8024394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 8024398:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802439c:	f083 0301 	eor.w	r3, r3, #1
 80243a0:	b2db      	uxtb	r3, r3
 80243a2:	2b00      	cmp	r3, #0
 80243a4:	d10e      	bne.n	80243c4 <_np_cmd_nand_erase+0x35c>
 80243a6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d01d      	beq.n	80243ea <_np_cmd_nand_erase+0x382>
 80243ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80243b0:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80243b4:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80243b8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80243bc:	4299      	cmp	r1, r3
 80243be:	bf08      	it	eq
 80243c0:	4290      	cmpeq	r0, r2
 80243c2:	d112      	bne.n	80243ea <_np_cmd_nand_erase+0x382>
            len -= block_size;
 80243c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80243c6:	2200      	movs	r2, #0
 80243c8:	61bb      	str	r3, [r7, #24]
 80243ca:	61fa      	str	r2, [r7, #28]
 80243cc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80243d0:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80243d4:	4621      	mov	r1, r4
 80243d6:	1a51      	subs	r1, r2, r1
 80243d8:	6039      	str	r1, [r7, #0]
 80243da:	4629      	mov	r1, r5
 80243dc:	eb63 0301 	sbc.w	r3, r3, r1
 80243e0:	607b      	str	r3, [r7, #4]
 80243e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80243e6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 80243ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80243ee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80243f2:	1a84      	subs	r4, r0, r2
 80243f4:	613c      	str	r4, [r7, #16]
 80243f6:	eb61 0303 	sbc.w	r3, r1, r3
 80243fa:	617b      	str	r3, [r7, #20]
 80243fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024400:	f7ff fc22 	bl	8023c48 <np_send_progress>
    while (len)
 8024404:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024408:	4313      	orrs	r3, r2
 802440a:	f47f af57 	bne.w	80242bc <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 802440e:	f7ff fba3 	bl	8023b58 <np_send_ok_status>
 8024412:	4603      	mov	r3, r0
}
 8024414:	4618      	mov	r0, r3
 8024416:	37a0      	adds	r7, #160	; 0xa0
 8024418:	46bd      	mov	sp, r7
 802441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802441e:	bf00      	nop

08024420 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8024420:	b580      	push	{r7, lr}
 8024422:	b084      	sub	sp, #16
 8024424:	af00      	add	r7, sp, #0
 8024426:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 8024428:	2001      	movs	r0, #1
 802442a:	f7ff f9f1 	bl	8023810 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 802442e:	6878      	ldr	r0, [r7, #4]
 8024430:	f7ff fe1a 	bl	8024068 <_np_cmd_nand_erase>
 8024434:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 8024436:	2000      	movs	r0, #0
 8024438:	f7ff f9ea 	bl	8023810 <led_wr_set>

    return ret;
 802443c:	68fb      	ldr	r3, [r7, #12]
}
 802443e:	4618      	mov	r0, r3
 8024440:	3710      	adds	r7, #16
 8024442:	46bd      	mov	sp, r7
 8024444:	bd80      	pop	{r7, pc}
	...

08024448 <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 8024448:	b580      	push	{r7, lr}
 802444a:	b086      	sub	sp, #24
 802444c:	af00      	add	r7, sp, #0
 802444e:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8024452:	4b0f      	ldr	r3, [pc, #60]	; (8024490 <np_send_write_ack+0x48>)
 8024454:	881b      	ldrh	r3, [r3, #0]
 8024456:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 8024458:	8abb      	ldrh	r3, [r7, #20]
 802445a:	813b      	strh	r3, [r7, #8]
 802445c:	f107 0308 	add.w	r3, r7, #8
 8024460:	3302      	adds	r3, #2
 8024462:	683a      	ldr	r2, [r7, #0]
 8024464:	601a      	str	r2, [r3, #0]
 8024466:	687a      	ldr	r2, [r7, #4]
 8024468:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 802446a:	4b0a      	ldr	r3, [pc, #40]	; (8024494 <np_send_write_ack+0x4c>)
 802446c:	681b      	ldr	r3, [r3, #0]
 802446e:	681b      	ldr	r3, [r3, #0]
 8024470:	f107 0208 	add.w	r2, r7, #8
 8024474:	210a      	movs	r1, #10
 8024476:	4610      	mov	r0, r2
 8024478:	4798      	blx	r3
 802447a:	4603      	mov	r3, r0
 802447c:	2b00      	cmp	r3, #0
 802447e:	d002      	beq.n	8024486 <np_send_write_ack+0x3e>
        return -1;
 8024480:	f04f 33ff 	mov.w	r3, #4294967295
 8024484:	e000      	b.n	8024488 <np_send_write_ack+0x40>

    return 0;
 8024486:	2300      	movs	r3, #0
}
 8024488:	4618      	mov	r0, r3
 802448a:	3718      	adds	r7, #24
 802448c:	46bd      	mov	sp, r7
 802448e:	bd80      	pop	{r7, pc}
 8024490:	08032a48 	.word	0x08032a48
 8024494:	20000cb8 	.word	0x20000cb8

08024498 <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 8024498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802449c:	b09a      	sub	sp, #104	; 0x68
 802449e:	af04      	add	r7, sp, #16
 80244a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80244a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244a4:	685b      	ldr	r3, [r3, #4]
 80244a6:	2b11      	cmp	r3, #17
 80244a8:	d808      	bhi.n	80244bc <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误：%lu\r\n",
 80244aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244ac:	685b      	ldr	r3, [r3, #4]
 80244ae:	4619      	mov	r1, r3
 80244b0:	489d      	ldr	r0, [pc, #628]	; (8024728 <np_cmd_nand_write_start+0x290>)
 80244b2:	f00d f8ff 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80244b6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80244ba:	e184      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80244bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244be:	681b      	ldr	r3, [r3, #0]
 80244c0:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 80244c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244c8:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80244cc:	461a      	mov	r2, r3
 80244ce:	4b97      	ldr	r3, [pc, #604]	; (802472c <np_cmd_nand_write_start+0x294>)
 80244d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80244d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80244d6:	2b00      	cmp	r3, #0
 80244d8:	d015      	beq.n	8024506 <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 80244da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244e0:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80244e4:	461a      	mov	r2, r3
 80244e6:	4b91      	ldr	r3, [pc, #580]	; (802472c <np_cmd_nand_write_start+0x294>)
 80244e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80244ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80244ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80244f0:	7c5b      	ldrb	r3, [r3, #17]
 80244f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80244f6:	b2db      	uxtb	r3, r3
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	bf14      	ite	ne
 80244fc:	2301      	movne	r3, #1
 80244fe:	2300      	moveq	r3, #0
 8024500:	b2db      	uxtb	r3, r3
 8024502:	4618      	mov	r0, r3
 8024504:	4790      	blx	r2

    addr = write_start_cmd->addr;
 8024506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024508:	f8d1 2001 	ldr.w	r2, [r1, #1]
 802450c:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024510:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8024514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024516:	f8d1 2009 	ldr.w	r2, [r1, #9]
 802451a:	f8d1 300d 	ldr.w	r3, [r1, #13]
 802451e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("写入地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n",
 8024522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024526:	e9cd 2300 	strd	r2, r3, [sp]
 802452a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802452e:	4880      	ldr	r0, [pc, #512]	; (8024730 <np_cmd_nand_write_start+0x298>)
 8024530:	f00d f8c0 	bl	80316b4 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 8024534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024536:	7c5b      	ldrb	r3, [r3, #17]
 8024538:	f003 0302 	and.w	r3, r3, #2
 802453c:	b2db      	uxtb	r3, r3
 802453e:	2b00      	cmp	r3, #0
 8024540:	d051      	beq.n	80245e6 <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024544:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024548:	3330      	adds	r3, #48	; 0x30
 802454a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024550:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024554:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024558:	2200      	movs	r2, #0
 802455a:	623b      	str	r3, [r7, #32]
 802455c:	627a      	str	r2, [r7, #36]	; 0x24
 802455e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024562:	f7fd fe85 	bl	8022270 <__aeabi_uldivmod>
 8024566:	4602      	mov	r2, r0
 8024568:	460b      	mov	r3, r1
 802456a:	4613      	mov	r3, r2
 802456c:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 802456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024570:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024574:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802457a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802457e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024582:	fbb2 f3f3 	udiv	r3, r2, r3
 8024586:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 8024588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802458a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802458e:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 8024592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024594:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024598:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 802459c:	441a      	add	r2, r3
 802459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245a0:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 80245a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245a4:	6a1a      	ldr	r2, [r3, #32]
 80245a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245a8:	fb03 f202 	mul.w	r2, r3, r2
 80245ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245ae:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 80245b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80245b2:	2200      	movs	r2, #0
 80245b4:	469a      	mov	sl, r3
 80245b6:	4693      	mov	fp, r2
 80245b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245ba:	6a1b      	ldr	r3, [r3, #32]
 80245bc:	2200      	movs	r2, #0
 80245be:	61bb      	str	r3, [r7, #24]
 80245c0:	61fa      	str	r2, [r7, #28]
 80245c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80245c6:	4603      	mov	r3, r0
 80245c8:	fb03 f20b 	mul.w	r2, r3, fp
 80245cc:	460b      	mov	r3, r1
 80245ce:	fb0a f303 	mul.w	r3, sl, r3
 80245d2:	4413      	add	r3, r2
 80245d4:	4602      	mov	r2, r0
 80245d6:	fbaa 4502 	umull	r4, r5, sl, r2
 80245da:	442b      	add	r3, r5
 80245dc:	461d      	mov	r5, r3
 80245de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245e0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 80245e4:	e016      	b.n	8024614 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 80245e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245ec:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80245f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245f2:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 80245f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245fa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80245fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024600:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8024602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024604:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024608:	3330      	adds	r3, #48	; 0x30
 802460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802460e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024610:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 8024614:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024618:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802461c:	eb10 0802 	adds.w	r8, r0, r2
 8024620:	eb41 0903 	adc.w	r9, r1, r3
 8024624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024626:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802462a:	4542      	cmp	r2, r8
 802462c:	eb73 0309 	sbcs.w	r3, r3, r9
 8024630:	d210      	bcs.n	8024654 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("写入地址0x%" PRIx64 "+0x%" PRIx64
 8024632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024634:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802463c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024640:	e9cd 2300 	strd	r2, r3, [sp]
 8024644:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024648:	483a      	ldr	r0, [pc, #232]	; (8024734 <np_cmd_nand_write_start+0x29c>)
 802464a:	f00d f833 	bl	80316b4 <iprintf>
            "超出芯片大小0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 802464e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024652:	e0b8      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 8024654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024656:	6a1b      	ldr	r3, [r3, #32]
 8024658:	2200      	movs	r2, #0
 802465a:	613b      	str	r3, [r7, #16]
 802465c:	617a      	str	r2, [r7, #20]
 802465e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024666:	f7fd fe03 	bl	8022270 <__aeabi_uldivmod>
 802466a:	4313      	orrs	r3, r2
 802466c:	d00a      	beq.n	8024684 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到页大小0x%lx\r\n", addr, prog->page_size);
 802466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024670:	6a1b      	ldr	r3, [r3, #32]
 8024672:	9300      	str	r3, [sp, #0]
 8024674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024678:	482f      	ldr	r0, [pc, #188]	; (8024738 <np_cmd_nand_write_start+0x2a0>)
 802467a:	f00d f81b 	bl	80316b4 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 802467e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024682:	e0a0      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 8024684:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024688:	4313      	orrs	r3, r2
 802468a:	d105      	bne.n	8024698 <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("长度为零\r\n");
 802468c:	482b      	ldr	r0, [pc, #172]	; (802473c <np_cmd_nand_write_start+0x2a4>)
 802468e:	f00d f877 	bl	8031780 <puts>
        return NP_ERR_LEN_INVALID;
 8024692:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024696:	e096      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 8024698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802469a:	6a1b      	ldr	r3, [r3, #32]
 802469c:	2200      	movs	r2, #0
 802469e:	60bb      	str	r3, [r7, #8]
 80246a0:	60fa      	str	r2, [r7, #12]
 80246a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80246a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80246aa:	f7fd fde1 	bl	8022270 <__aeabi_uldivmod>
 80246ae:	4313      	orrs	r3, r2
 80246b0:	d00a      	beq.n	80246c8 <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到页大小0x%lx\r\n", len, prog->page_size);
 80246b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246b4:	6a1b      	ldr	r3, [r3, #32]
 80246b6:	9300      	str	r3, [sp, #0]
 80246b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80246bc:	4820      	ldr	r0, [pc, #128]	; (8024740 <np_cmd_nand_write_start+0x2a8>)
 80246be:	f00c fff9 	bl	80316b4 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 80246c2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80246c6:	e07e      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 80246c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80246ca:	7c5b      	ldrb	r3, [r3, #17]
 80246cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80246d0:	b2db      	uxtb	r3, r3
 80246d2:	461a      	mov	r2, r3
 80246d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 80246de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80246e8:	2b00      	cmp	r3, #0
 80246ea:	d00d      	beq.n	8024708 <np_cmd_nand_write_start+0x270>
 80246ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80246f0:	2b00      	cmp	r3, #0
 80246f2:	d109      	bne.n	8024708 <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 80246f4:	2100      	movs	r1, #0
 80246f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80246f8:	f7ff fbca 	bl	8023e90 <_np_cmd_read_bad_blocks>
 80246fc:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 80246fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024700:	2b00      	cmp	r3, #0
 8024702:	d001      	beq.n	8024708 <np_cmd_nand_write_start+0x270>
    {
        return ret;
 8024704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024706:	e05e      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 8024708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802470a:	6a1b      	ldr	r3, [r3, #32]
 802470c:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8024710:	d91a      	bls.n	8024748 <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("页大小0x%lx超过缓冲区大小0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
 8024712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024714:	6a1b      	ldr	r3, [r3, #32]
 8024716:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 802471a:	4619      	mov	r1, r3
 802471c:	4809      	ldr	r0, [pc, #36]	; (8024744 <np_cmd_nand_write_start+0x2ac>)
 802471e:	f00c ffc9 	bl	80316b4 <iprintf>
        return NP_ERR_BUF_OVERFLOW;
 8024722:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 8024726:	e04e      	b.n	80247c6 <np_cmd_nand_write_start+0x32e>
 8024728:	08032a4c 	.word	0x08032a4c
 802472c:	20000040 	.word	0x20000040
 8024730:	08032a88 	.word	0x08032a88
 8024734:	08032ab8 	.word	0x08032ab8
 8024738:	08032af4 	.word	0x08032af4
 802473c:	0803295c 	.word	0x0803295c
 8024740:	08032b24 	.word	0x08032b24
 8024744:	08032b54 	.word	0x08032b54
    }

    // 设置写入相关的参数
    prog->addr = addr;
 8024748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802474a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802474e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8024752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024754:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024758:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 802475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802475e:	2201      	movs	r2, #1
 8024760:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8024762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024764:	6a1b      	ldr	r3, [r3, #32]
 8024766:	2200      	movs	r2, #0
 8024768:	603b      	str	r3, [r7, #0]
 802476a:	607a      	str	r2, [r7, #4]
 802476c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024770:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024774:	f7fd fd7c 	bl	8022270 <__aeabi_uldivmod>
 8024778:	4602      	mov	r2, r0
 802477a:	460b      	mov	r3, r1
 802477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802477e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024782:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8024786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024788:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802478c:	461a      	mov	r2, r3
 802478e:	2300      	movs	r3, #0
 8024790:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8024794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024796:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802479a:	3310      	adds	r3, #16
 802479c:	4619      	mov	r1, r3
 802479e:	f04f 0200 	mov.w	r2, #0
 80247a2:	f04f 0300 	mov.w	r3, #0
 80247a6:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 80247aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247ac:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80247b0:	3310      	adds	r3, #16
 80247b2:	4619      	mov	r1, r3
 80247b4:	f04f 0200 	mov.w	r2, #0
 80247b8:	f04f 0300 	mov.w	r3, #0
 80247bc:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 80247c0:	f7ff f9ca 	bl	8023b58 <np_send_ok_status>
 80247c4:	4603      	mov	r3, r0
}
 80247c6:	4618      	mov	r0, r3
 80247c8:	3758      	adds	r7, #88	; 0x58
 80247ca:	46bd      	mov	sp, r7
 80247cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080247d0 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 80247d0:	b580      	push	{r7, lr}
 80247d2:	b082      	sub	sp, #8
 80247d4:	af00      	add	r7, sp, #0
 80247d6:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247de:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80247e2:	461a      	mov	r2, r3
 80247e4:	4b37      	ldr	r3, [pc, #220]	; (80248c4 <np_nand_handle_status+0xf4>)
 80247e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80247ea:	69db      	ldr	r3, [r3, #28]
 80247ec:	4798      	blx	r3
 80247ee:	4603      	mov	r3, r0
 80247f0:	2b02      	cmp	r3, #2
 80247f2:	d006      	beq.n	8024802 <np_nand_handle_status+0x32>
 80247f4:	2b02      	cmp	r3, #2
 80247f6:	d84b      	bhi.n	8024890 <np_nand_handle_status+0xc0>
 80247f8:	2b00      	cmp	r3, #0
 80247fa:	d010      	beq.n	802481e <np_nand_handle_status+0x4e>
 80247fc:	2b01      	cmp	r3, #1
 80247fe:	d01d      	beq.n	802483c <np_nand_handle_status+0x6c>
 8024800:	e046      	b.n	8024890 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8024802:	687b      	ldr	r3, [r7, #4]
 8024804:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802480c:	2300      	movs	r3, #0
 802480e:	f7ff f9e3 	bl	8023bd8 <np_send_bad_block_info>
 8024812:	4603      	mov	r3, r0
 8024814:	2b00      	cmp	r3, #0
 8024816:	d002      	beq.n	802481e <np_nand_handle_status+0x4e>
            return -1;
 8024818:	f04f 33ff 	mov.w	r3, #4294967295
 802481c:	e04e      	b.n	80248bc <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 802481e:	687b      	ldr	r3, [r7, #4]
 8024820:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024824:	461a      	mov	r2, r3
 8024826:	2300      	movs	r3, #0
 8024828:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 802482c:	687b      	ldr	r3, [r7, #4]
 802482e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024832:	461a      	mov	r2, r3
 8024834:	2300      	movs	r3, #0
 8024836:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 802483a:	e03e      	b.n	80248ba <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024842:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8024846:	3301      	adds	r3, #1
 8024848:	687a      	ldr	r2, [r7, #4]
 802484a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802484e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024858:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802485c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024860:	d12a      	bne.n	80248b8 <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND写入超时，地址：0x%" PRIx64 "\r\n", prog->addr);
 8024862:	687b      	ldr	r3, [r7, #4]
 8024864:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024868:	4817      	ldr	r0, [pc, #92]	; (80248c8 <np_nand_handle_status+0xf8>)
 802486a:	f00c ff23 	bl	80316b4 <iprintf>
            prog->nand_wr_in_progress = 0;
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024874:	461a      	mov	r2, r3
 8024876:	2300      	movs	r3, #0
 8024878:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 802487c:	687b      	ldr	r3, [r7, #4]
 802487e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024882:	461a      	mov	r2, r3
 8024884:	2300      	movs	r3, #0
 8024886:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 802488a:	f04f 33ff 	mov.w	r3, #4294967295
 802488e:	e015      	b.n	80248bc <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8024890:	480e      	ldr	r0, [pc, #56]	; (80248cc <np_nand_handle_status+0xfc>)
 8024892:	f00c ff75 	bl	8031780 <puts>
        prog->nand_wr_in_progress = 0;
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802489c:	461a      	mov	r2, r3
 802489e:	2300      	movs	r3, #0
 80248a0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248aa:	461a      	mov	r2, r3
 80248ac:	2300      	movs	r3, #0
 80248ae:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 80248b2:	f04f 33ff 	mov.w	r3, #4294967295
 80248b6:	e001      	b.n	80248bc <np_nand_handle_status+0xec>
        break;
 80248b8:	bf00      	nop
    }

    return 0;
 80248ba:	2300      	movs	r3, #0
}
 80248bc:	4618      	mov	r0, r3
 80248be:	3708      	adds	r7, #8
 80248c0:	46bd      	mov	sp, r7
 80248c2:	bd80      	pop	{r7, pc}
 80248c4:	20000040 	.word	0x20000040
 80248c8:	08032b88 	.word	0x08032b88
 80248cc:	080328ac 	.word	0x080328ac

080248d0 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 80248d0:	b580      	push	{r7, lr}
 80248d2:	b084      	sub	sp, #16
 80248d4:	af02      	add	r7, sp, #8
 80248d6:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248de:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80248e2:	2b00      	cmp	r3, #0
 80248e4:	d012      	beq.n	802490c <np_nand_write+0x3c>
    {
        DEBUG_PRINT("等待上一次NAND写入完成\r\n");
 80248e6:	481e      	ldr	r0, [pc, #120]	; (8024960 <np_nand_write+0x90>)
 80248e8:	f00c ff4a 	bl	8031780 <puts>
        do
        {
            if (np_nand_handle_status(prog))
 80248ec:	6878      	ldr	r0, [r7, #4]
 80248ee:	f7ff ff6f 	bl	80247d0 <np_nand_handle_status>
 80248f2:	4603      	mov	r3, r0
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	d002      	beq.n	80248fe <np_nand_write+0x2e>
                return -1;
 80248f8:	f04f 33ff 	mov.w	r3, #4294967295
 80248fc:	e02c      	b.n	8024958 <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024904:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8024908:	2b00      	cmp	r3, #0
 802490a:	d1ef      	bne.n	80248ec <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND写入，地址：0x%" PRIx64 "，长度：%lu字节\r\n", prog->addr,
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024912:	6879      	ldr	r1, [r7, #4]
 8024914:	6a09      	ldr	r1, [r1, #32]
 8024916:	9100      	str	r1, [sp, #0]
 8024918:	4812      	ldr	r0, [pc, #72]	; (8024964 <np_nand_write+0x94>)
 802491a:	f00c fecb 	bl	80316b4 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024924:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024928:	461a      	mov	r2, r3
 802492a:	4b0f      	ldr	r3, [pc, #60]	; (8024968 <np_nand_write+0x98>)
 802492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024930:	699b      	ldr	r3, [r3, #24]
 8024932:	687a      	ldr	r2, [r7, #4]
 8024934:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8024938:	687a      	ldr	r2, [r7, #4]
 802493a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802493e:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 8024942:	687a      	ldr	r2, [r7, #4]
 8024944:	6a12      	ldr	r2, [r2, #32]
 8024946:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802494e:	461a      	mov	r2, r3
 8024950:	2301      	movs	r3, #1
 8024952:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 8024956:	2300      	movs	r3, #0
}
 8024958:	4618      	mov	r0, r3
 802495a:	3708      	adds	r7, #8
 802495c:	46bd      	mov	sp, r7
 802495e:	bd80      	pop	{r7, pc}
 8024960:	08032bb4 	.word	0x08032bb4
 8024964:	08032bd8 	.word	0x08032bd8
 8024968:	20000040 	.word	0x20000040

0802496c <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 802496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024970:	b092      	sub	sp, #72	; 0x48
 8024972:	af02      	add	r7, sp, #8
 8024974:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8024976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024978:	685b      	ldr	r3, [r3, #4]
 802497a:	2b01      	cmp	r3, #1
 802497c:	d808      	bhi.n	8024990 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误：%lu\r\n",
 802497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024980:	685b      	ldr	r3, [r3, #4]
 8024982:	4619      	mov	r1, r3
 8024984:	486e      	ldr	r0, [pc, #440]	; (8024b40 <np_cmd_nand_write_data+0x1d4>)
 8024986:	f00c fe95 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802498a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802498e:	e1a1      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 8024990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024992:	681b      	ldr	r3, [r3, #0]
 8024994:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 8024996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024998:	785b      	ldrb	r3, [r3, #1]
 802499a:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 802499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802499e:	3302      	adds	r3, #2
 80249a0:	2b40      	cmp	r3, #64	; 0x40
 80249a2:	d906      	bls.n	80249b2 <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("数据大小错误：0x%lx\r\n", len);
 80249a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80249a6:	4867      	ldr	r0, [pc, #412]	; (8024b44 <np_cmd_nand_write_data+0x1d8>)
 80249a8:	f00c fe84 	bl	80316b4 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80249ac:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80249b0:	e190      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80249b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249b4:	1c9a      	adds	r2, r3, #2
 80249b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249b8:	685b      	ldr	r3, [r3, #4]
 80249ba:	429a      	cmp	r2, r3
 80249bc:	d00a      	beq.n	80249d4 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("缓冲区长度0x%lx大于命令长度0x%lx\r\n",
 80249be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249c0:	6859      	ldr	r1, [r3, #4]
 80249c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249c4:	3302      	adds	r3, #2
 80249c6:	461a      	mov	r2, r3
 80249c8:	485f      	ldr	r0, [pc, #380]	; (8024b48 <np_cmd_nand_write_data+0x1dc>)
 80249ca:	f00c fe73 	bl	80316b4 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 80249ce:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80249d2:	e17f      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 80249d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249d8:	2b00      	cmp	r3, #0
 80249da:	d105      	bne.n	80249e8 <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 80249dc:	485b      	ldr	r0, [pc, #364]	; (8024b4c <np_cmd_nand_write_data+0x1e0>)
 80249de:	f00c fecf 	bl	8031780 <puts>
        return NP_ERR_ADDR_INVALID;
 80249e2:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80249e6:	e175      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 80249e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80249ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80249f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249f4:	441a      	add	r2, r3
 80249f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249f8:	6a1b      	ldr	r3, [r3, #32]
 80249fa:	429a      	cmp	r2, r3
 80249fc:	d909      	bls.n	8024a12 <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 80249fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a00:	6a1a      	ldr	r2, [r3, #32]
 8024a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024a0c:	1ad3      	subs	r3, r2, r3
 8024a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024a10:	e001      	b.n	8024a16 <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 8024a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024a14:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8024a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a18:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8024a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024a26:	18d0      	adds	r0, r2, r3
 8024a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024a2a:	3302      	adds	r3, #2
 8024a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a2e:	4619      	mov	r1, r3
 8024a30:	f00d f801 	bl	8031a36 <memcpy>
    prog->page.offset += write_len;
 8024a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a3a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024a40:	441a      	add	r2, r3
 8024a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a44:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8024a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a58:	6a1b      	ldr	r3, [r3, #32]
 8024a5a:	429a      	cmp	r2, r3
 8024a5c:	f040 80a2 	bne.w	8024ba4 <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024a60:	e038      	b.n	8024ad4 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", prog->addr);
 8024a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024a68:	4839      	ldr	r0, [pc, #228]	; (8024b50 <np_cmd_nand_write_data+0x1e4>)
 8024a6a:	f00c fe23 	bl	80316b4 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8024a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024a78:	2301      	movs	r3, #1
 8024a7a:	f7ff f8ad 	bl	8023bd8 <np_send_bad_block_info>
 8024a7e:	4603      	mov	r3, r0
 8024a80:	2b00      	cmp	r3, #0
 8024a82:	d002      	beq.n	8024a8a <np_cmd_nand_write_data+0x11e>
                return -1;
 8024a84:	f04f 33ff 	mov.w	r3, #4294967295
 8024a88:	e124      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 8024a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a8c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a94:	2200      	movs	r2, #0
 8024a96:	623b      	str	r3, [r7, #32]
 8024a98:	627a      	str	r2, [r7, #36]	; 0x24
 8024a9a:	6a3b      	ldr	r3, [r7, #32]
 8024a9c:	18c3      	adds	r3, r0, r3
 8024a9e:	613b      	str	r3, [r7, #16]
 8024aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024aa2:	eb41 0303 	adc.w	r3, r1, r3
 8024aa6:	617b      	str	r3, [r7, #20]
 8024aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aaa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8024aae:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 8024ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ab4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ab8:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8024abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ac2:	6a1b      	ldr	r3, [r3, #32]
 8024ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8024ac8:	18ca      	adds	r2, r1, r3
 8024aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024acc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ad0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ad6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ada:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	d00a      	beq.n	8024af8 <np_cmd_nand_write_data+0x18c>
 8024ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ae4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ae8:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024aec:	4618      	mov	r0, r3
 8024aee:	f7fe ffcb 	bl	8023a88 <nand_bad_block_table_lookup>
 8024af2:	4603      	mov	r3, r0
 8024af4:	2b00      	cmp	r3, #0
 8024af6:	d1b4      	bne.n	8024a62 <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 8024af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024afa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024b04:	4290      	cmp	r0, r2
 8024b06:	eb71 0303 	sbcs.w	r3, r1, r3
 8024b0a:	d30f      	bcc.n	8024b2c <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("写入地址0x%" PRIx64 "超过芯片大小0x%" PRIx64 "\r\n", prog->addr,
 8024b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b0e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b14:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024b18:	e9cd 2300 	strd	r2, r3, [sp]
 8024b1c:	4602      	mov	r2, r0
 8024b1e:	460b      	mov	r3, r1
 8024b20:	480c      	ldr	r0, [pc, #48]	; (8024b54 <np_cmd_nand_write_data+0x1e8>)
 8024b22:	f00c fdc7 	bl	80316b4 <iprintf>
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8024b26:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024b2a:	e0d3      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8024b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024b2e:	f7ff fecf 	bl	80248d0 <np_nand_write>
 8024b32:	4603      	mov	r3, r0
 8024b34:	2b00      	cmp	r3, #0
 8024b36:	d00f      	beq.n	8024b58 <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8024b38:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024b3c:	e0ca      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
 8024b3e:	bf00      	nop
 8024b40:	08032c0c 	.word	0x08032c0c
 8024b44:	08032c48 	.word	0x08032c48
 8024b48:	08032c6c 	.word	0x08032c6c
 8024b4c:	08032ca4 	.word	0x08032ca4
 8024b50:	08032a24 	.word	0x08032a24
 8024b54:	08032cc4 	.word	0x08032cc4

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8024b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b5a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b60:	6a1b      	ldr	r3, [r3, #32]
 8024b62:	2200      	movs	r2, #0
 8024b64:	61bb      	str	r3, [r7, #24]
 8024b66:	61fa      	str	r2, [r7, #28]
 8024b68:	69bb      	ldr	r3, [r7, #24]
 8024b6a:	18c3      	adds	r3, r0, r3
 8024b6c:	60bb      	str	r3, [r7, #8]
 8024b6e:	69fb      	ldr	r3, [r7, #28]
 8024b70:	eb41 0303 	adc.w	r3, r1, r3
 8024b74:	60fb      	str	r3, [r7, #12]
 8024b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8024b7c:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8024b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b86:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024b8a:	3301      	adds	r3, #1
 8024b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024b8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024b92:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8024b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b9c:	461a      	mov	r2, r3
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8024ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024ba8:	1ad3      	subs	r3, r2, r3
 8024baa:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8024bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bae:	2b00      	cmp	r3, #0
 8024bb0:	d016      	beq.n	8024be0 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8024bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bb4:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8024bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024bba:	1c9a      	adds	r2, r3, #2
 8024bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bbe:	4413      	add	r3, r2
 8024bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024bc2:	4619      	mov	r1, r3
 8024bc4:	f00c ff37 	bl	8031a36 <memcpy>
        prog->page.offset += bytes_left;
 8024bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024bce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024bd4:	4413      	add	r3, r2
 8024bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024bd8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024bdc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8024be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024be2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024be6:	3310      	adds	r3, #16
 8024be8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024bec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024bee:	2000      	movs	r0, #0
 8024bf0:	468a      	mov	sl, r1
 8024bf2:	4683      	mov	fp, r0
 8024bf4:	eb12 010a 	adds.w	r1, r2, sl
 8024bf8:	6039      	str	r1, [r7, #0]
 8024bfa:	eb43 030b 	adc.w	r3, r3, fp
 8024bfe:	607b      	str	r3, [r7, #4]
 8024c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c02:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c06:	3310      	adds	r3, #16
 8024c08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8024c0c:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c12:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c16:	3310      	adds	r3, #16
 8024c18:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c1e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c22:	3310      	adds	r3, #16
 8024c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c28:	1a84      	subs	r4, r0, r2
 8024c2a:	eb61 0503 	sbc.w	r5, r1, r3
 8024c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c30:	6a1b      	ldr	r3, [r3, #32]
 8024c32:	2200      	movs	r2, #0
 8024c34:	4698      	mov	r8, r3
 8024c36:	4691      	mov	r9, r2
 8024c38:	4544      	cmp	r4, r8
 8024c3a:	eb75 0309 	sbcs.w	r3, r5, r9
 8024c3e:	d20c      	bcs.n	8024c5a <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8024c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c42:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c46:	3310      	adds	r3, #16
 8024c48:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024c52:	4299      	cmp	r1, r3
 8024c54:	bf08      	it	eq
 8024c56:	4290      	cmpeq	r0, r2
 8024c58:	d11b      	bne.n	8024c92 <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8024c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c5c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c60:	3310      	adds	r3, #16
 8024c62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024c66:	4610      	mov	r0, r2
 8024c68:	4619      	mov	r1, r3
 8024c6a:	f7ff fbed 	bl	8024448 <np_send_write_ack>
 8024c6e:	4603      	mov	r3, r0
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d002      	beq.n	8024c7a <np_cmd_nand_write_data+0x30e>
            return -1;
 8024c74:	f04f 33ff 	mov.w	r3, #4294967295
 8024c78:	e02c      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8024c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c7c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c80:	3310      	adds	r3, #16
 8024c82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c88:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c8c:	3310      	adds	r3, #16
 8024c8e:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8024c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c94:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c98:	3310      	adds	r3, #16
 8024c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024ca0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8024ca4:	4290      	cmp	r0, r2
 8024ca6:	eb71 0303 	sbcs.w	r3, r1, r3
 8024caa:	d212      	bcs.n	8024cd2 <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("实际写入数据长度0x%" PRIx64 "超过0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
 8024cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cae:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024cb2:	3310      	adds	r3, #16
 8024cb4:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8024cbe:	e9cd 2300 	strd	r2, r3, [sp]
 8024cc2:	4602      	mov	r2, r0
 8024cc4:	460b      	mov	r3, r1
 8024cc6:	4806      	ldr	r0, [pc, #24]	; (8024ce0 <np_cmd_nand_write_data+0x374>)
 8024cc8:	f00c fcf4 	bl	80316b4 <iprintf>
        return NP_ERR_LEN_EXCEEDED;
 8024ccc:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8024cd0:	e000      	b.n	8024cd4 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8024cd2:	2300      	movs	r3, #0
}
 8024cd4:	4618      	mov	r0, r3
 8024cd6:	3740      	adds	r7, #64	; 0x40
 8024cd8:	46bd      	mov	sp, r7
 8024cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024cde:	bf00      	nop
 8024ce0:	08032cf8 	.word	0x08032cf8

08024ce4 <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8024ce4:	b580      	push	{r7, lr}
 8024ce6:	b082      	sub	sp, #8
 8024ce8:	af00      	add	r7, sp, #0
 8024cea:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	2200      	movs	r2, #0
 8024cf0:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d00b      	beq.n	8024d18 <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("未写入长度为0x%lx的数据\r\n",
 8024d00:	687b      	ldr	r3, [r7, #4]
 8024d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024d0a:	4619      	mov	r1, r3
 8024d0c:	4806      	ldr	r0, [pc, #24]	; (8024d28 <np_cmd_nand_write_end+0x44>)
 8024d0e:	f00c fcd1 	bl	80316b4 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8024d12:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024d16:	e002      	b.n	8024d1e <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8024d18:	f7fe ff1e 	bl	8023b58 <np_send_ok_status>
 8024d1c:	4603      	mov	r3, r0
}
 8024d1e:	4618      	mov	r0, r3
 8024d20:	3708      	adds	r7, #8
 8024d22:	46bd      	mov	sp, r7
 8024d24:	bd80      	pop	{r7, pc}
 8024d26:	bf00      	nop
 8024d28:	08032d2c 	.word	0x08032d2c

08024d2c <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8024d2c:	b580      	push	{r7, lr}
 8024d2e:	b084      	sub	sp, #16
 8024d30:	af00      	add	r7, sp, #0
 8024d32:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	681b      	ldr	r3, [r3, #0]
 8024d38:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8024d3a:	2300      	movs	r3, #0
 8024d3c:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8024d3e:	68bb      	ldr	r3, [r7, #8]
 8024d40:	781b      	ldrb	r3, [r3, #0]
 8024d42:	2b05      	cmp	r3, #5
 8024d44:	d013      	beq.n	8024d6e <np_cmd_nand_write+0x42>
 8024d46:	2b05      	cmp	r3, #5
 8024d48:	dc19      	bgt.n	8024d7e <np_cmd_nand_write+0x52>
 8024d4a:	2b03      	cmp	r3, #3
 8024d4c:	d002      	beq.n	8024d54 <np_cmd_nand_write+0x28>
 8024d4e:	2b04      	cmp	r3, #4
 8024d50:	d008      	beq.n	8024d64 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8024d52:	e014      	b.n	8024d7e <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8024d54:	2001      	movs	r0, #1
 8024d56:	f7fe fd5b 	bl	8023810 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8024d5a:	6878      	ldr	r0, [r7, #4]
 8024d5c:	f7ff fb9c 	bl	8024498 <np_cmd_nand_write_start>
 8024d60:	60f8      	str	r0, [r7, #12]
        break;
 8024d62:	e00d      	b.n	8024d80 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8024d64:	6878      	ldr	r0, [r7, #4]
 8024d66:	f7ff fe01 	bl	802496c <np_cmd_nand_write_data>
 8024d6a:	60f8      	str	r0, [r7, #12]
        break;
 8024d6c:	e008      	b.n	8024d80 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8024d6e:	6878      	ldr	r0, [r7, #4]
 8024d70:	f7ff ffb8 	bl	8024ce4 <np_cmd_nand_write_end>
 8024d74:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8024d76:	2000      	movs	r0, #0
 8024d78:	f7fe fd4a 	bl	8023810 <led_wr_set>
        break;
 8024d7c:	e000      	b.n	8024d80 <np_cmd_nand_write+0x54>
        break;
 8024d7e:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8024d80:	68fb      	ldr	r3, [r7, #12]
 8024d82:	2b00      	cmp	r3, #0
 8024d84:	da02      	bge.n	8024d8c <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8024d86:	2000      	movs	r0, #0
 8024d88:	f7fe fd42 	bl	8023810 <led_wr_set>

    return ret;
 8024d8c:	68fb      	ldr	r3, [r7, #12]
}
 8024d8e:	4618      	mov	r0, r3
 8024d90:	3710      	adds	r7, #16
 8024d92:	46bd      	mov	sp, r7
 8024d94:	bd80      	pop	{r7, pc}
	...

08024d98 <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8024d98:	b580      	push	{r7, lr}
 8024d9a:	b086      	sub	sp, #24
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8024da2:	607a      	str	r2, [r7, #4]
 8024da4:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8024da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024dac:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024db0:	461a      	mov	r2, r3
 8024db2:	4b1c      	ldr	r3, [pc, #112]	; (8024e24 <np_nand_read+0x8c>)
 8024db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024db8:	691b      	ldr	r3, [r3, #16]
 8024dba:	6878      	ldr	r0, [r7, #4]
 8024dbc:	687a      	ldr	r2, [r7, #4]
 8024dbe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024dc2:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8024dc6:	683a      	ldr	r2, [r7, #0]
 8024dc8:	4798      	blx	r3
 8024dca:	6178      	str	r0, [r7, #20]
    switch (status)
 8024dcc:	697b      	ldr	r3, [r7, #20]
 8024dce:	2b03      	cmp	r3, #3
 8024dd0:	d014      	beq.n	8024dfc <np_nand_read+0x64>
 8024dd2:	697b      	ldr	r3, [r7, #20]
 8024dd4:	2b03      	cmp	r3, #3
 8024dd6:	d817      	bhi.n	8024e08 <np_nand_read+0x70>
 8024dd8:	697b      	ldr	r3, [r7, #20]
 8024dda:	2b00      	cmp	r3, #0
 8024ddc:	d01a      	beq.n	8024e14 <np_nand_read+0x7c>
 8024dde:	697b      	ldr	r3, [r7, #20]
 8024de0:	2b02      	cmp	r3, #2
 8024de2:	d111      	bne.n	8024e08 <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8024de4:	2300      	movs	r3, #0
 8024de6:	6a3a      	ldr	r2, [r7, #32]
 8024de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024dec:	f7fe fef4 	bl	8023bd8 <np_send_bad_block_info>
 8024df0:	4603      	mov	r3, r0
 8024df2:	2b00      	cmp	r3, #0
 8024df4:	d010      	beq.n	8024e18 <np_nand_read+0x80>
            return -1;
 8024df6:	f04f 33ff 	mov.w	r3, #4294967295
 8024dfa:	e00f      	b.n	8024e1c <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND读取超时，地址：0x%" PRIx64 "\r\n", addr);
 8024dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024e00:	4809      	ldr	r0, [pc, #36]	; (8024e28 <np_nand_read+0x90>)
 8024e02:	f00c fc57 	bl	80316b4 <iprintf>
        break;
 8024e06:	e008      	b.n	8024e1a <np_nand_read+0x82>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8024e08:	4808      	ldr	r0, [pc, #32]	; (8024e2c <np_nand_read+0x94>)
 8024e0a:	f00c fcb9 	bl	8031780 <puts>
        return -1;
 8024e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8024e12:	e003      	b.n	8024e1c <np_nand_read+0x84>
        break;
 8024e14:	bf00      	nop
 8024e16:	e000      	b.n	8024e1a <np_nand_read+0x82>
        break;
 8024e18:	bf00      	nop
    }

    return 0;
 8024e1a:	2300      	movs	r3, #0
}
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	3718      	adds	r7, #24
 8024e20:	46bd      	mov	sp, r7
 8024e22:	bd80      	pop	{r7, pc}
 8024e24:	20000040 	.word	0x20000040
 8024e28:	08032d58 	.word	0x08032d58
 8024e2c:	080328ac 	.word	0x080328ac

08024e30 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8024e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024e34:	b0b4      	sub	sp, #208	; 0xd0
 8024e36:	af04      	add	r7, sp, #16
 8024e38:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8024e3a:	2302      	movs	r3, #2
 8024e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8024e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024e44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8024e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8024e4c:	4bb9      	ldr	r3, [pc, #740]	; (8025134 <_np_cmd_nand_read+0x304>)
 8024e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8024e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e54:	685b      	ldr	r3, [r3, #4]
 8024e56:	2b11      	cmp	r3, #17
 8024e58:	d808      	bhi.n	8024e6c <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("读取命令缓冲区长度错误 %lu\r\n",
 8024e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e5c:	685b      	ldr	r3, [r3, #4]
 8024e5e:	4619      	mov	r1, r3
 8024e60:	48b5      	ldr	r0, [pc, #724]	; (8025138 <_np_cmd_nand_read+0x308>)
 8024e62:	f00c fc27 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024e66:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024e6a:	e283      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8024e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8024e74:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024e78:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024e7c:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024e80:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8024e84:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024e88:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024e8c:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024e90:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8024e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024e98:	7c5b      	ldrb	r3, [r3, #17]
 8024e9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024e9e:	b2db      	uxtb	r3, r3
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	bf14      	ite	ne
 8024ea4:	2301      	movne	r3, #1
 8024ea6:	2300      	moveq	r3, #0
 8024ea8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8024eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024eb0:	7c5b      	ldrb	r3, [r3, #17]
 8024eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8024eb6:	b2db      	uxtb	r3, r3
 8024eb8:	2b00      	cmp	r3, #0
 8024eba:	bf14      	ite	ne
 8024ebc:	2301      	movne	r3, #1
 8024ebe:	2300      	moveq	r3, #0
 8024ec0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("读取地址 0x%" PRIx64 " 长度为 0x%" PRIx64 " 的数据命令\r\n", addr,
 8024ec4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8024ecc:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024ed0:	489a      	ldr	r0, [pc, #616]	; (802513c <_np_cmd_nand_read+0x30c>)
 8024ed2:	f00c fbef 	bl	80316b4 <iprintf>
        len);

    if (inc_spare)
 8024ed6:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	d056      	beq.n	8024f8c <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ee0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ee4:	3330      	adds	r3, #48	; 0x30
 8024ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024eec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ef0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024ef4:	2200      	movs	r2, #0
 8024ef6:	66bb      	str	r3, [r7, #104]	; 0x68
 8024ef8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8024efa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8024efe:	f7fd f9b7 	bl	8022270 <__aeabi_uldivmod>
 8024f02:	4602      	mov	r2, r0
 8024f04:	460b      	mov	r3, r1
 8024f06:	4613      	mov	r3, r2
 8024f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8024f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f0e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f12:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f1c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8024f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f2e:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f38:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8024f3c:	4413      	add	r3, r2
 8024f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8024f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f4a:	fb02 f303 	mul.w	r3, r2, r3
 8024f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8024f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024f56:	2200      	movs	r2, #0
 8024f58:	663b      	str	r3, [r7, #96]	; 0x60
 8024f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8024f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f60:	2200      	movs	r2, #0
 8024f62:	4698      	mov	r8, r3
 8024f64:	4691      	mov	r9, r2
 8024f66:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8024f6a:	460b      	mov	r3, r1
 8024f6c:	fb08 f203 	mul.w	r2, r8, r3
 8024f70:	4603      	mov	r3, r0
 8024f72:	fb03 f309 	mul.w	r3, r3, r9
 8024f76:	4413      	add	r3, r2
 8024f78:	4602      	mov	r2, r0
 8024f7a:	fba2 4508 	umull	r4, r5, r2, r8
 8024f7e:	442b      	add	r3, r5
 8024f80:	461d      	mov	r5, r3
 8024f82:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024f86:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024f8a:	e015      	b.n	8024fb8 <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8024f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f92:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 8024f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024fa0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8024fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024faa:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024fae:	3330      	adds	r3, #48	; 0x30
 8024fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fb4:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8024fb8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8024fbc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024fc0:	eb10 0a02 	adds.w	sl, r0, r2
 8024fc4:	eb41 0b03 	adc.w	fp, r1, r3
 8024fc8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8024fcc:	4552      	cmp	r2, sl
 8024fce:	eb73 030b 	sbcs.w	r3, r3, fp
 8024fd2:	d20f      	bcs.n	8024ff4 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64 "+0x%" PRIx64
 8024fd4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8024fd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024fdc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024fe0:	e9cd 2300 	strd	r2, r3, [sp]
 8024fe4:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024fe8:	4855      	ldr	r0, [pc, #340]	; (8025140 <_np_cmd_nand_read+0x310>)
 8024fea:	f00c fb63 	bl	80316b4 <iprintf>
            " 超出芯片大小 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024fee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024ff2:	e1bf      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8024ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024ff8:	2200      	movs	r2, #0
 8024ffa:	65bb      	str	r3, [r7, #88]	; 0x58
 8024ffc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8024ffe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8025006:	f7fd f933 	bl	8022270 <__aeabi_uldivmod>
 802500a:	4313      	orrs	r3, r2
 802500c:	d00a      	beq.n	8025024 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64
 802500e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025012:	9300      	str	r3, [sp, #0]
 8025014:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025018:	484a      	ldr	r0, [pc, #296]	; (8025144 <_np_cmd_nand_read+0x314>)
 802501a:	f00c fb4b 	bl	80316b4 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 802501e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8025022:	e1a7      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8025024:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025028:	4313      	orrs	r3, r2
 802502a:	d105      	bne.n	8025038 <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("长度为0\r\n");
 802502c:	4846      	ldr	r0, [pc, #280]	; (8025148 <_np_cmd_nand_read+0x318>)
 802502e:	f00c fba7 	bl	8031780 <puts>
        return NP_ERR_LEN_INVALID;
 8025032:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025036:	e19d      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 8025038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802503c:	2200      	movs	r2, #0
 802503e:	653b      	str	r3, [r7, #80]	; 0x50
 8025040:	657a      	str	r2, [r7, #84]	; 0x54
 8025042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8025046:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802504a:	f7fd f911 	bl	8022270 <__aeabi_uldivmod>
 802504e:	4313      	orrs	r3, r2
 8025050:	d00a      	beq.n	8025068 <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("读取长度 0x%" PRIx64
 8025052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025056:	9300      	str	r3, [sp, #0]
 8025058:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802505c:	483b      	ldr	r0, [pc, #236]	; (802514c <_np_cmd_nand_read+0x31c>)
 802505e:	f00c fb29 	bl	80316b4 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8025062:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8025066:	e185      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8025068:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 802506c:	2b00      	cmp	r3, #0
 802506e:	d00d      	beq.n	802508c <_np_cmd_nand_read+0x25c>
 8025070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025074:	2b00      	cmp	r3, #0
 8025076:	d109      	bne.n	802508c <_np_cmd_nand_read+0x25c>
 8025078:	2100      	movs	r1, #0
 802507a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 802507c:	f7fe ff08 	bl	8023e90 <_np_cmd_read_bad_blocks>
 8025080:	67f8      	str	r0, [r7, #124]	; 0x7c
 8025082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025084:	2b00      	cmp	r3, #0
 8025086:	d001      	beq.n	802508c <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 8025088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802508a:	e173      	b.n	8025374 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 802508c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025090:	2200      	movs	r2, #0
 8025092:	64bb      	str	r3, [r7, #72]	; 0x48
 8025094:	64fa      	str	r2, [r7, #76]	; 0x4c
 8025096:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802509a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 802509e:	f7fd f8e7 	bl	8022270 <__aeabi_uldivmod>
 80250a2:	4602      	mov	r2, r0
 80250a4:	460b      	mov	r3, r1
 80250a6:	4b2a      	ldr	r3, [pc, #168]	; (8025150 <_np_cmd_nand_read+0x320>)
 80250a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250ac:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 80250b0:	4b27      	ldr	r3, [pc, #156]	; (8025150 <_np_cmd_nand_read+0x320>)
 80250b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250b6:	461a      	mov	r2, r3
 80250b8:	2300      	movs	r3, #0
 80250ba:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 80250be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80250c2:	2300      	movs	r3, #0
 80250c4:	7013      	strb	r3, [r2, #0]

    while (len)
 80250c6:	e14f      	b.n	8025368 <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 80250c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80250cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80250d0:	4290      	cmp	r0, r2
 80250d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80250d6:	d30b      	bcc.n	80250f0 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("读取地址 0x%" PRIx64
 80250d8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80250dc:	e9cd 2300 	strd	r2, r3, [sp]
 80250e0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80250e4:	481b      	ldr	r0, [pc, #108]	; (8025154 <_np_cmd_nand_read+0x324>)
 80250e6:	f00c fae5 	bl	80316b4 <iprintf>
                " 超出芯片大小 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 80250ea:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80250ee:	e141      	b.n	8025374 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 80250f0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80250f4:	2b00      	cmp	r3, #0
 80250f6:	d076      	beq.n	80251e6 <_np_cmd_nand_read+0x3b6>
 80250f8:	4b15      	ldr	r3, [pc, #84]	; (8025150 <_np_cmd_nand_read+0x320>)
 80250fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250fe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025102:	4618      	mov	r0, r3
 8025104:	f7fe fcc0 	bl	8023a88 <nand_bad_block_table_lookup>
 8025108:	4603      	mov	r3, r0
 802510a:	2b00      	cmp	r3, #0
 802510c:	d06b      	beq.n	80251e6 <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("跳过坏块地址 0x%" PRIx64 "\r\n", addr);
 802510e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025112:	4811      	ldr	r0, [pc, #68]	; (8025158 <_np_cmd_nand_read+0x328>)
 8025114:	f00c face 	bl	80316b4 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8025118:	2301      	movs	r3, #1
 802511a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 802511e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025122:	f7fe fd59 	bl	8023bd8 <np_send_bad_block_info>
 8025126:	4603      	mov	r3, r0
 8025128:	2b00      	cmp	r3, #0
 802512a:	d017      	beq.n	802515c <_np_cmd_nand_read+0x32c>
                return -1;
 802512c:	f04f 33ff 	mov.w	r3, #4294967295
 8025130:	e120      	b.n	8025374 <_np_cmd_nand_read+0x544>
 8025132:	bf00      	nop
 8025134:	20002f08 	.word	0x20002f08
 8025138:	08032d84 	.word	0x08032d84
 802513c:	08032db4 	.word	0x08032db4
 8025140:	08032dec 	.word	0x08032dec
 8025144:	08032e2c 	.word	0x08032e2c
 8025148:	08032e68 	.word	0x08032e68
 802514c:	08032e7c 	.word	0x08032e7c
 8025150:	20002f48 	.word	0x20002f48
 8025154:	08032eb8 	.word	0x08032eb8
 8025158:	08032ef0 	.word	0x08032ef0

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 802515c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025160:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8025164:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8025168:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 802516c:	428b      	cmp	r3, r1
 802516e:	bf08      	it	eq
 8025170:	4282      	cmpeq	r2, r0
 8025172:	d113      	bne.n	802519c <_np_cmd_nand_read+0x36c>
                len -= block_size;
 8025174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025178:	2200      	movs	r2, #0
 802517a:	643b      	str	r3, [r7, #64]	; 0x40
 802517c:	647a      	str	r2, [r7, #68]	; 0x44
 802517e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025182:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8025186:	4621      	mov	r1, r4
 8025188:	1a51      	subs	r1, r2, r1
 802518a:	61b9      	str	r1, [r7, #24]
 802518c:	4629      	mov	r1, r5
 802518e:	eb63 0301 	sbc.w	r3, r3, r1
 8025192:	61fb      	str	r3, [r7, #28]
 8025194:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8025198:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 802519c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80251a0:	2200      	movs	r2, #0
 80251a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80251a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80251a6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80251aa:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80251ae:	4621      	mov	r1, r4
 80251b0:	1851      	adds	r1, r2, r1
 80251b2:	6139      	str	r1, [r7, #16]
 80251b4:	4629      	mov	r1, r5
 80251b6:	414b      	adcs	r3, r1
 80251b8:	617b      	str	r3, [r7, #20]
 80251ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80251be:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 80251c2:	4b6f      	ldr	r3, [pc, #444]	; (8025380 <_np_cmd_nand_read+0x550>)
 80251c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251c8:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 80251cc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80251d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80251d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80251d8:	18ca      	adds	r2, r1, r3
 80251da:	4b69      	ldr	r3, [pc, #420]	; (8025380 <_np_cmd_nand_read+0x550>)
 80251dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251e0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 80251e4:	e0c0      	b.n	8025368 <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 80251e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80251e8:	9301      	str	r3, [sp, #4]
 80251ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80251ee:	9300      	str	r3, [sp, #0]
 80251f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80251f4:	4a62      	ldr	r2, [pc, #392]	; (8025380 <_np_cmd_nand_read+0x550>)
 80251f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80251fa:	f7ff fdcd 	bl	8024d98 <np_nand_read>
 80251fe:	4603      	mov	r3, r0
 8025200:	2b00      	cmp	r3, #0
 8025202:	d07e      	beq.n	8025302 <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8025204:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8025208:	e0b4      	b.n	8025374 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 802520a:	4b5d      	ldr	r3, [pc, #372]	; (8025380 <_np_cmd_nand_read+0x550>)
 802520c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025210:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025218:	1a9a      	subs	r2, r3, r2
 802521a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802521e:	4293      	cmp	r3, r2
 8025220:	d804      	bhi.n	802522c <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8025222:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802522a:	e009      	b.n	8025240 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 802522c:	4b54      	ldr	r3, [pc, #336]	; (8025380 <_np_cmd_nand_read+0x550>)
 802522e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025232:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802523a:	1a9b      	subs	r3, r3, r2
 802523c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8025240:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025244:	2200      	movs	r2, #0
 8025246:	633b      	str	r3, [r7, #48]	; 0x30
 8025248:	637a      	str	r2, [r7, #52]	; 0x34
 802524a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802524e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8025252:	4621      	mov	r1, r4
 8025254:	428a      	cmp	r2, r1
 8025256:	4629      	mov	r1, r5
 8025258:	418b      	sbcs	r3, r1
 802525a:	d203      	bcs.n	8025264 <_np_cmd_nand_read+0x434>
                send_len = len;
 802525c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8025260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8025264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8025268:	1c98      	adds	r0, r3, #2
 802526a:	4b45      	ldr	r3, [pc, #276]	; (8025380 <_np_cmd_nand_read+0x550>)
 802526c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025270:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025274:	4b42      	ldr	r3, [pc, #264]	; (8025380 <_np_cmd_nand_read+0x550>)
 8025276:	4413      	add	r3, r2
 8025278:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 802527c:	4619      	mov	r1, r3
 802527e:	f00c fbda 	bl	8031a36 <memcpy>

            while (!np_comm_cb->send_ready());
 8025282:	bf00      	nop
 8025284:	4b3f      	ldr	r3, [pc, #252]	; (8025384 <_np_cmd_nand_read+0x554>)
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	685b      	ldr	r3, [r3, #4]
 802528a:	4798      	blx	r3
 802528c:	4603      	mov	r3, r0
 802528e:	2b00      	cmp	r3, #0
 8025290:	d0f8      	beq.n	8025284 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 8025292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025296:	b2db      	uxtb	r3, r3
 8025298:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802529c:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 802529e:	4b39      	ldr	r3, [pc, #228]	; (8025384 <_np_cmd_nand_read+0x554>)
 80252a0:	681b      	ldr	r3, [r3, #0]
 80252a2:	681c      	ldr	r4, [r3, #0]
 80252a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80252a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80252ac:	4413      	add	r3, r2
 80252ae:	4619      	mov	r1, r3
 80252b0:	4835      	ldr	r0, [pc, #212]	; (8025388 <_np_cmd_nand_read+0x558>)
 80252b2:	47a0      	blx	r4
 80252b4:	4603      	mov	r3, r0
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	d002      	beq.n	80252c0 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 80252ba:	f04f 33ff 	mov.w	r3, #4294967295
 80252be:	e059      	b.n	8025374 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 80252c0:	4b2f      	ldr	r3, [pc, #188]	; (8025380 <_np_cmd_nand_read+0x550>)
 80252c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252c6:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80252ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80252ce:	441a      	add	r2, r3
 80252d0:	4b2b      	ldr	r3, [pc, #172]	; (8025380 <_np_cmd_nand_read+0x550>)
 80252d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252d6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 80252da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80252de:	2200      	movs	r2, #0
 80252e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80252e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80252e4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80252e8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80252ec:	4621      	mov	r1, r4
 80252ee:	1a51      	subs	r1, r2, r1
 80252f0:	60b9      	str	r1, [r7, #8]
 80252f2:	4629      	mov	r1, r5
 80252f4:	eb63 0301 	sbc.w	r3, r3, r1
 80252f8:	60fb      	str	r3, [r7, #12]
 80252fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80252fe:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8025302:	4b1f      	ldr	r3, [pc, #124]	; (8025380 <_np_cmd_nand_read+0x550>)
 8025304:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025308:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 802530c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025310:	4293      	cmp	r3, r2
 8025312:	d904      	bls.n	802531e <_np_cmd_nand_read+0x4ee>
 8025314:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025318:	4313      	orrs	r3, r2
 802531a:	f47f af76 	bne.w	802520a <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 802531e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025322:	2200      	movs	r2, #0
 8025324:	623b      	str	r3, [r7, #32]
 8025326:	627a      	str	r2, [r7, #36]	; 0x24
 8025328:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802532c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8025330:	4621      	mov	r1, r4
 8025332:	1851      	adds	r1, r2, r1
 8025334:	6039      	str	r1, [r7, #0]
 8025336:	4629      	mov	r1, r5
 8025338:	414b      	adcs	r3, r1
 802533a:	607b      	str	r3, [r7, #4]
 802533c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025340:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 8025344:	4b0e      	ldr	r3, [pc, #56]	; (8025380 <_np_cmd_nand_read+0x550>)
 8025346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802534a:	461a      	mov	r2, r3
 802534c:	2300      	movs	r3, #0
 802534e:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 8025352:	4b0b      	ldr	r3, [pc, #44]	; (8025380 <_np_cmd_nand_read+0x550>)
 8025354:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025358:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 802535c:	1c5a      	adds	r2, r3, #1
 802535e:	4b08      	ldr	r3, [pc, #32]	; (8025380 <_np_cmd_nand_read+0x550>)
 8025360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025364:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 8025368:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802536c:	4313      	orrs	r3, r2
 802536e:	f47f aeab 	bne.w	80250c8 <_np_cmd_nand_read+0x298>
    }

    return 0;
 8025372:	2300      	movs	r3, #0
}
 8025374:	4618      	mov	r0, r3
 8025376:	37c0      	adds	r7, #192	; 0xc0
 8025378:	46bd      	mov	sp, r7
 802537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802537e:	bf00      	nop
 8025380:	20002f48 	.word	0x20002f48
 8025384:	20000cb8 	.word	0x20000cb8
 8025388:	20002f08 	.word	0x20002f08

0802538c <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 802538c:	b580      	push	{r7, lr}
 802538e:	b084      	sub	sp, #16
 8025390:	af00      	add	r7, sp, #0
 8025392:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 8025394:	2001      	movs	r0, #1
 8025396:	f7fe fa4d 	bl	8023834 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 802539a:	6878      	ldr	r0, [r7, #4]
 802539c:	f7ff fd48 	bl	8024e30 <_np_cmd_nand_read>
 80253a0:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80253a2:	2000      	movs	r0, #0
 80253a4:	f7fe fa46 	bl	8023834 <led_rd_set>

    return ret;
 80253a8:	68fb      	ldr	r3, [r7, #12]
}
 80253aa:	4618      	mov	r0, r3
 80253ac:	3710      	adds	r7, #16
 80253ae:	46bd      	mov	sp, r7
 80253b0:	bd80      	pop	{r7, pc}

080253b2 <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 80253b2:	b480      	push	{r7}
 80253b4:	b083      	sub	sp, #12
 80253b6:	af00      	add	r7, sp, #0
 80253b8:	6078      	str	r0, [r7, #4]
 80253ba:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80253c2:	683a      	ldr	r2, [r7, #0]
 80253c4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80253c8:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 80253cc:	687b      	ldr	r3, [r7, #4]
 80253ce:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80253d2:	683a      	ldr	r2, [r7, #0]
 80253d4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80253d8:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 80253dc:	6879      	ldr	r1, [r7, #4]
 80253de:	f8d1 200a 	ldr.w	r2, [r1, #10]
 80253e2:	f8d1 300e 	ldr.w	r3, [r1, #14]
 80253e6:	6839      	ldr	r1, [r7, #0]
 80253e8:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 80253ec:	3130      	adds	r1, #48	; 0x30
 80253ee:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 80253f2:	687b      	ldr	r3, [r7, #4]
 80253f4:	f8d3 3012 	ldr.w	r3, [r3, #18]
 80253f8:	683a      	ldr	r2, [r7, #0]
 80253fa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80253fe:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	7d9a      	ldrb	r2, [r3, #22]
 8025406:	683b      	ldr	r3, [r7, #0]
 8025408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802540c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8025410:	683b      	ldr	r3, [r7, #0]
 8025412:	2201      	movs	r2, #1
 8025414:	639a      	str	r2, [r3, #56]	; 0x38
}
 8025416:	bf00      	nop
 8025418:	370c      	adds	r7, #12
 802541a:	46bd      	mov	sp, r7
 802541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025420:	4770      	bx	lr
	...

08025424 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 8025424:	b580      	push	{r7, lr}
 8025426:	b082      	sub	sp, #8
 8025428:	af00      	add	r7, sp, #0
 802542a:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("页面大小: %lu\r\n", prog->chip_info.page_size);
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025432:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025436:	4619      	mov	r1, r3
 8025438:	4815      	ldr	r0, [pc, #84]	; (8025490 <np_print_chip_info+0x6c>)
 802543a:	f00c f93b 	bl	80316b4 <iprintf>
    DEBUG_PRINT("块大小: %lu\r\n", prog->chip_info.block_size);
 802543e:	687b      	ldr	r3, [r7, #4]
 8025440:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025444:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8025448:	4619      	mov	r1, r3
 802544a:	4812      	ldr	r0, [pc, #72]	; (8025494 <np_print_chip_info+0x70>)
 802544c:	f00c f932 	bl	80316b4 <iprintf>
    DEBUG_PRINT("总大小: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025456:	3330      	adds	r3, #48	; 0x30
 8025458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802545c:	480e      	ldr	r0, [pc, #56]	; (8025498 <np_print_chip_info+0x74>)
 802545e:	f00c f929 	bl	80316b4 <iprintf>
    DEBUG_PRINT("备用区大小: %lu\r\n", prog->chip_info.spare_size);
 8025462:	687b      	ldr	r3, [r7, #4]
 8025464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025468:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 802546c:	4619      	mov	r1, r3
 802546e:	480b      	ldr	r0, [pc, #44]	; (802549c <np_print_chip_info+0x78>)
 8025470:	f00c f920 	bl	80316b4 <iprintf>
    DEBUG_PRINT("坏块标记偏移量: %d\r\n", prog->chip_info.bb_mark_off);
 8025474:	687b      	ldr	r3, [r7, #4]
 8025476:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802547a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 802547e:	4619      	mov	r1, r3
 8025480:	4807      	ldr	r0, [pc, #28]	; (80254a0 <np_print_chip_info+0x7c>)
 8025482:	f00c f917 	bl	80316b4 <iprintf>
}
 8025486:	bf00      	nop
 8025488:	3708      	adds	r7, #8
 802548a:	46bd      	mov	sp, r7
 802548c:	bd80      	pop	{r7, pc}
 802548e:	bf00      	nop
 8025490:	08032f0c 	.word	0x08032f0c
 8025494:	08032f20 	.word	0x08032f20
 8025498:	08032f34 	.word	0x08032f34
 802549c:	08032f48 	.word	0x08032f48
 80254a0:	08032f60 	.word	0x08032f60

080254a4 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 80254a4:	b580      	push	{r7, lr}
 80254a6:	b084      	sub	sp, #16
 80254a8:	af00      	add	r7, sp, #0
 80254aa:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("芯片配置命令\r\n");
 80254ac:	4825      	ldr	r0, [pc, #148]	; (8025544 <np_cmd_nand_conf+0xa0>)
 80254ae:	f00c f967 	bl	8031780 <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	685b      	ldr	r3, [r3, #4]
 80254b6:	2b16      	cmp	r3, #22
 80254b8:	d808      	bhi.n	80254cc <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("配置命令缓冲区长度错误 %lu\r\n",
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	685b      	ldr	r3, [r3, #4]
 80254be:	4619      	mov	r1, r3
 80254c0:	4821      	ldr	r0, [pc, #132]	; (8025548 <np_cmd_nand_conf+0xa4>)
 80254c2:	f00c f8f7 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80254c6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80254ca:	e036      	b.n	802553a <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 80254d2:	6879      	ldr	r1, [r7, #4]
 80254d4:	68f8      	ldr	r0, [r7, #12]
 80254d6:	f7ff ff6c 	bl	80253b2 <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 80254da:	6878      	ldr	r0, [r7, #4]
 80254dc:	f7ff ffa2 	bl	8025424 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 80254e0:	68fb      	ldr	r3, [r7, #12]
 80254e2:	785a      	ldrb	r2, [r3, #1]
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254ea:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 80254ee:	687b      	ldr	r3, [r7, #4]
 80254f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254f4:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 80254f8:	461a      	mov	r2, r3
 80254fa:	4b14      	ldr	r3, [pc, #80]	; (802554c <np_cmd_nand_conf+0xa8>)
 80254fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025500:	681b      	ldr	r3, [r3, #0]
 8025502:	68fa      	ldr	r2, [r7, #12]
 8025504:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 8025508:	687a      	ldr	r2, [r7, #4]
 802550a:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 802550c:	3a17      	subs	r2, #23
 802550e:	4611      	mov	r1, r2
 8025510:	4798      	blx	r3
 8025512:	4603      	mov	r3, r0
 8025514:	2b00      	cmp	r3, #0
 8025516:	d008      	beq.n	802552a <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("HAL配置命令缓冲区长度错误 %lu\r\n",
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	685b      	ldr	r3, [r3, #4]
 802551c:	4619      	mov	r1, r3
 802551e:	480c      	ldr	r0, [pc, #48]	; (8025550 <np_cmd_nand_conf+0xac>)
 8025520:	f00c f8c8 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025524:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025528:	e007      	b.n	802553a <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 802552a:	f7fe fa7d 	bl	8023a28 <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 802552e:	687b      	ldr	r3, [r7, #4]
 8025530:	2200      	movs	r2, #0
 8025532:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8025534:	f7fe fb10 	bl	8023b58 <np_send_ok_status>
 8025538:	4603      	mov	r3, r0
}
 802553a:	4618      	mov	r0, r3
 802553c:	3710      	adds	r7, #16
 802553e:	46bd      	mov	sp, r7
 8025540:	bd80      	pop	{r7, pc}
 8025542:	bf00      	nop
 8025544:	08032f7c 	.word	0x08032f7c
 8025548:	08032f90 	.word	0x08032f90
 802554c:	20000040 	.word	0x20000040
 8025550:	08032fc0 	.word	0x08032fc0

08025554 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 8025554:	b5b0      	push	{r4, r5, r7, lr}
 8025556:	b084      	sub	sp, #16
 8025558:	af00      	add	r7, sp, #0
 802555a:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 802555c:	f107 0308 	add.w	r3, r7, #8
 8025560:	4618      	mov	r0, r3
 8025562:	f7fe fab5 	bl	8023ad0 <nand_bad_block_table_iter_alloc>
 8025566:	60f8      	str	r0, [r7, #12]
 8025568:	e021      	b.n	80255ae <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025570:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8025574:	68ba      	ldr	r2, [r7, #8]
 8025576:	fb02 f303 	mul.w	r3, r2, r3
 802557a:	2200      	movs	r2, #0
 802557c:	461c      	mov	r4, r3
 802557e:	4615      	mov	r5, r2
 8025580:	687b      	ldr	r3, [r7, #4]
 8025582:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025586:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802558a:	2300      	movs	r3, #0
 802558c:	4620      	mov	r0, r4
 802558e:	4629      	mov	r1, r5
 8025590:	f7fe fb22 	bl	8023bd8 <np_send_bad_block_info>
 8025594:	4603      	mov	r3, r0
 8025596:	2b00      	cmp	r3, #0
 8025598:	d002      	beq.n	80255a0 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 802559a:	f04f 33ff 	mov.w	r3, #4294967295
 802559e:	e00a      	b.n	80255b6 <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 80255a0:	f107 0308 	add.w	r3, r7, #8
 80255a4:	4619      	mov	r1, r3
 80255a6:	68f8      	ldr	r0, [r7, #12]
 80255a8:	f7fe faac 	bl	8023b04 <nand_bad_block_table_iter_next>
 80255ac:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80255ae:	68fb      	ldr	r3, [r7, #12]
 80255b0:	2b00      	cmp	r3, #0
 80255b2:	d1da      	bne.n	802556a <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 80255b4:	2300      	movs	r3, #0
}
 80255b6:	4618      	mov	r0, r3
 80255b8:	3710      	adds	r7, #16
 80255ba:	46bd      	mov	sp, r7
 80255bc:	bdb0      	pop	{r4, r5, r7, pc}

080255be <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 80255be:	b580      	push	{r7, lr}
 80255c0:	b084      	sub	sp, #16
 80255c2:	af00      	add	r7, sp, #0
 80255c4:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80255c6:	2001      	movs	r0, #1
 80255c8:	f7fe f934 	bl	8023834 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 80255cc:	f7fe fa2c 	bl	8023a28 <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 80255d0:	2101      	movs	r1, #1
 80255d2:	6878      	ldr	r0, [r7, #4]
 80255d4:	f7fe fc5c 	bl	8023e90 <_np_cmd_read_bad_blocks>
 80255d8:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80255da:	2000      	movs	r0, #0
 80255dc:	f7fe f92a 	bl	8023834 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 80255e0:	68fb      	ldr	r3, [r7, #12]
 80255e2:	2b00      	cmp	r3, #0
 80255e4:	d106      	bne.n	80255f4 <np_cmd_read_bad_blocks+0x36>
 80255e6:	6878      	ldr	r0, [r7, #4]
 80255e8:	f7ff ffb4 	bl	8025554 <np_send_bad_blocks>
 80255ec:	60f8      	str	r0, [r7, #12]
 80255ee:	68fb      	ldr	r3, [r7, #12]
 80255f0:	2b00      	cmp	r3, #0
 80255f2:	d001      	beq.n	80255f8 <np_cmd_read_bad_blocks+0x3a>
        return ret;
 80255f4:	68fb      	ldr	r3, [r7, #12]
 80255f6:	e002      	b.n	80255fe <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 80255f8:	f7fe faae 	bl	8023b58 <np_send_ok_status>
 80255fc:	4603      	mov	r3, r0
}
 80255fe:	4618      	mov	r0, r3
 8025600:	3710      	adds	r7, #16
 8025602:	46bd      	mov	sp, r7
 8025604:	bd80      	pop	{r7, pc}
	...

08025608 <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 8025608:	b580      	push	{r7, lr}
 802560a:	b086      	sub	sp, #24
 802560c:	af00      	add	r7, sp, #0
 802560e:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8025610:	2306      	movs	r3, #6
 8025612:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("读取版本号命令\r\n");
 8025614:	4810      	ldr	r0, [pc, #64]	; (8025658 <np_cmd_version_get+0x50>)
 8025616:	f00c f8b3 	bl	8031780 <puts>

    resp.header.code = NP_RESP_DATA;
 802561a:	2300      	movs	r3, #0
 802561c:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 802561e:	697b      	ldr	r3, [r7, #20]
 8025620:	b2db      	uxtb	r3, r3
 8025622:	3b02      	subs	r3, #2
 8025624:	b2db      	uxtb	r3, r3
 8025626:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 8025628:	2303      	movs	r3, #3
 802562a:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 802562c:	2305      	movs	r3, #5
 802562e:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8025630:	2300      	movs	r3, #0
 8025632:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8025634:	4b09      	ldr	r3, [pc, #36]	; (802565c <np_cmd_version_get+0x54>)
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	2b00      	cmp	r3, #0
 802563a:	d007      	beq.n	802564c <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 802563c:	4b07      	ldr	r3, [pc, #28]	; (802565c <np_cmd_version_get+0x54>)
 802563e:	681b      	ldr	r3, [r3, #0]
 8025640:	681b      	ldr	r3, [r3, #0]
 8025642:	f107 020c 	add.w	r2, r7, #12
 8025646:	6979      	ldr	r1, [r7, #20]
 8025648:	4610      	mov	r0, r2
 802564a:	4798      	blx	r3

    return 0;
 802564c:	2300      	movs	r3, #0
}
 802564e:	4618      	mov	r0, r3
 8025650:	3718      	adds	r7, #24
 8025652:	46bd      	mov	sp, r7
 8025654:	bd80      	pop	{r7, pc}
 8025656:	bf00      	nop
 8025658:	08032ff4 	.word	0x08032ff4
 802565c:	20000cb8 	.word	0x20000cb8

08025660 <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 8025660:	b580      	push	{r7, lr}
 8025662:	b082      	sub	sp, #8
 8025664:	af00      	add	r7, sp, #0
 8025666:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 8025668:	2201      	movs	r2, #1
 802566a:	6879      	ldr	r1, [r7, #4]
 802566c:	4806      	ldr	r0, [pc, #24]	; (8025688 <np_boot_config_read+0x28>)
 802566e:	f7fd f979 	bl	8022964 <flash_read>
 8025672:	4603      	mov	r3, r0
 8025674:	2b00      	cmp	r3, #0
 8025676:	da02      	bge.n	802567e <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 8025678:	f04f 33ff 	mov.w	r3, #4294967295
 802567c:	e000      	b.n	8025680 <np_boot_config_read+0x20>
    }
    
    return 0;
 802567e:	2300      	movs	r3, #0
}
 8025680:	4618      	mov	r0, r3
 8025682:	3708      	adds	r7, #8
 8025684:	46bd      	mov	sp, r7
 8025686:	bd80      	pop	{r7, pc}
 8025688:	08003800 	.word	0x08003800

0802568c <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 802568c:	b580      	push	{r7, lr}
 802568e:	b082      	sub	sp, #8
 8025690:	af00      	add	r7, sp, #0
 8025692:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 8025694:	480c      	ldr	r0, [pc, #48]	; (80256c8 <np_boot_config_write+0x3c>)
 8025696:	f7fd f90d 	bl	80228b4 <flash_page_erase>
 802569a:	4603      	mov	r3, r0
 802569c:	2b00      	cmp	r3, #0
 802569e:	da02      	bge.n	80256a6 <np_boot_config_write+0x1a>
        return -1;
 80256a0:	f04f 33ff 	mov.w	r3, #4294967295
 80256a4:	e00b      	b.n	80256be <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80256a6:	2201      	movs	r2, #1
 80256a8:	6879      	ldr	r1, [r7, #4]
 80256aa:	4807      	ldr	r0, [pc, #28]	; (80256c8 <np_boot_config_write+0x3c>)
 80256ac:	f7fd f925 	bl	80228fa <flash_write>
 80256b0:	4603      	mov	r3, r0
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	da02      	bge.n	80256bc <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 80256b6:	f04f 33ff 	mov.w	r3, #4294967295
 80256ba:	e000      	b.n	80256be <np_boot_config_write+0x32>
    }

    return 0;
 80256bc:	2300      	movs	r3, #0
}
 80256be:	4618      	mov	r0, r3
 80256c0:	3708      	adds	r7, #8
 80256c2:	46bd      	mov	sp, r7
 80256c4:	bd80      	pop	{r7, pc}
 80256c6:	bf00      	nop
 80256c8:	08003800 	.word	0x08003800

080256cc <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 80256cc:	b580      	push	{r7, lr}
 80256ce:	b086      	sub	sp, #24
 80256d0:	af00      	add	r7, sp, #0
 80256d2:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 80256d4:	2303      	movs	r3, #3
 80256d6:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("获取活动镜像命令\r\n");
 80256d8:	481c      	ldr	r0, [pc, #112]	; (802574c <np_cmd_active_image_get+0x80>)
 80256da:	f00c f851 	bl	8031780 <puts>

    if (prog->active_image == 0xff)
 80256de:	687b      	ldr	r3, [r7, #4]
 80256e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80256e4:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80256e8:	2bff      	cmp	r3, #255	; 0xff
 80256ea:	d110      	bne.n	802570e <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 80256ec:	f107 0310 	add.w	r3, r7, #16
 80256f0:	4618      	mov	r0, r3
 80256f2:	f7ff ffb5 	bl	8025660 <np_boot_config_read>
 80256f6:	4603      	mov	r3, r0
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	d002      	beq.n	8025702 <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 80256fc:	f04f 33ff 	mov.w	r3, #4294967295
 8025700:	e01f      	b.n	8025742 <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 8025702:	7c3a      	ldrb	r2, [r7, #16]
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802570a:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 802570e:	2300      	movs	r3, #0
 8025710:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025712:	697b      	ldr	r3, [r7, #20]
 8025714:	b2db      	uxtb	r3, r3
 8025716:	3b02      	subs	r3, #2
 8025718:	b2db      	uxtb	r3, r3
 802571a:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 802571c:	687b      	ldr	r3, [r7, #4]
 802571e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025722:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025726:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 8025728:	4b09      	ldr	r3, [pc, #36]	; (8025750 <np_cmd_active_image_get+0x84>)
 802572a:	681b      	ldr	r3, [r3, #0]
 802572c:	2b00      	cmp	r3, #0
 802572e:	d007      	beq.n	8025740 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025730:	4b07      	ldr	r3, [pc, #28]	; (8025750 <np_cmd_active_image_get+0x84>)
 8025732:	681b      	ldr	r3, [r3, #0]
 8025734:	681b      	ldr	r3, [r3, #0]
 8025736:	f107 020c 	add.w	r2, r7, #12
 802573a:	6979      	ldr	r1, [r7, #20]
 802573c:	4610      	mov	r0, r2
 802573e:	4798      	blx	r3

    return 0;
 8025740:	2300      	movs	r3, #0
}
 8025742:	4618      	mov	r0, r3
 8025744:	3718      	adds	r7, #24
 8025746:	46bd      	mov	sp, r7
 8025748:	bd80      	pop	{r7, pc}
 802574a:	bf00      	nop
 802574c:	0803300c 	.word	0x0803300c
 8025750:	20000cb8 	.word	0x20000cb8

08025754 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 8025754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025758:	b092      	sub	sp, #72	; 0x48
 802575a:	af04      	add	r7, sp, #16
 802575c:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 802575e:	69fb      	ldr	r3, [r7, #28]
 8025760:	685b      	ldr	r3, [r3, #4]
 8025762:	2b11      	cmp	r3, #17
 8025764:	d808      	bhi.n	8025778 <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误 %lu\r\n",
 8025766:	69fb      	ldr	r3, [r7, #28]
 8025768:	685b      	ldr	r3, [r3, #4]
 802576a:	4619      	mov	r1, r3
 802576c:	4870      	ldr	r0, [pc, #448]	; (8025930 <np_cmd_fw_update_start+0x1dc>)
 802576e:	f00b ffa1 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025772:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025776:	e0d5      	b.n	8025924 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8025778:	69fb      	ldr	r3, [r7, #28]
 802577a:	681b      	ldr	r3, [r3, #0]
 802577c:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 802577e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025780:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8025784:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8025788:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 802578c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802578e:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8025792:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8025796:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("写入命令 0x%" PRIx64 " 地址 0x%" PRIx64 " 字节\r\n", addr,
 802579a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802579e:	e9cd 2300 	strd	r2, r3, [sp]
 80257a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80257a6:	4863      	ldr	r0, [pc, #396]	; (8025934 <np_cmd_fw_update_start+0x1e0>)
 80257a8:	f00b ff84 	bl	80316b4 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 80257ac:	69f9      	ldr	r1, [r7, #28]
 80257ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80257b2:	f04f 0300 	mov.w	r3, #0
 80257b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 80257ba:	69fb      	ldr	r3, [r7, #28]
 80257bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257c0:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 80257c2:	69fb      	ldr	r3, [r7, #28]
 80257c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257c8:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 80257ca:	69f9      	ldr	r1, [r7, #28]
 80257cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80257d0:	f04f 0300 	mov.w	r3, #0
 80257d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 80257d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80257dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80257e0:	1884      	adds	r4, r0, r2
 80257e2:	eb41 0503 	adc.w	r5, r1, r3
 80257e6:	69fb      	ldr	r3, [r7, #28]
 80257e8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80257ec:	69fb      	ldr	r3, [r7, #28]
 80257ee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80257f2:	eb10 0802 	adds.w	r8, r0, r2
 80257f6:	eb41 0903 	adc.w	r9, r1, r3
 80257fa:	45a0      	cmp	r8, r4
 80257fc:	eb79 0305 	sbcs.w	r3, r9, r5
 8025800:	d217      	bcs.n	8025832 <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("写入地址 0x%" PRIx64 "+0x%" PRIx64
 8025802:	69fb      	ldr	r3, [r7, #28]
 8025804:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025808:	69fb      	ldr	r3, [r7, #28]
 802580a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802580e:	eb10 0a02 	adds.w	sl, r0, r2
 8025812:	eb41 0b03 	adc.w	fp, r1, r3
 8025816:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802581a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802581e:	e9cd 2300 	strd	r2, r3, [sp]
 8025822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8025826:	4844      	ldr	r0, [pc, #272]	; (8025938 <np_cmd_fw_update_start+0x1e4>)
 8025828:	f00b ff44 	bl	80316b4 <iprintf>
            " 超过闪存大小 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 802582c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025830:	e078      	b.n	8025924 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 8025832:	69fb      	ldr	r3, [r7, #28]
 8025834:	6a1b      	ldr	r3, [r3, #32]
 8025836:	2200      	movs	r2, #0
 8025838:	613b      	str	r3, [r7, #16]
 802583a:	617a      	str	r2, [r7, #20]
 802583c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8025844:	f7fc fd14 	bl	8022270 <__aeabi_uldivmod>
 8025848:	4313      	orrs	r3, r2
 802584a:	d00a      	beq.n	8025862 <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("地址 0x%" PRIx64
 802584c:	69fb      	ldr	r3, [r7, #28]
 802584e:	6a1b      	ldr	r3, [r3, #32]
 8025850:	9300      	str	r3, [sp, #0]
 8025852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8025856:	4839      	ldr	r0, [pc, #228]	; (802593c <np_cmd_fw_update_start+0x1e8>)
 8025858:	f00b ff2c 	bl	80316b4 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 802585c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8025860:	e060      	b.n	8025924 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 8025862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025866:	4313      	orrs	r3, r2
 8025868:	d105      	bne.n	8025876 <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("长度为0\r\n");
 802586a:	4835      	ldr	r0, [pc, #212]	; (8025940 <np_cmd_fw_update_start+0x1ec>)
 802586c:	f00b ff88 	bl	8031780 <puts>
        return NP_ERR_LEN_INVALID;
 8025870:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025874:	e056      	b.n	8025924 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 8025876:	69fb      	ldr	r3, [r7, #28]
 8025878:	6a1b      	ldr	r3, [r3, #32]
 802587a:	2200      	movs	r2, #0
 802587c:	60bb      	str	r3, [r7, #8]
 802587e:	60fa      	str	r2, [r7, #12]
 8025880:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8025884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025888:	f7fc fcf2 	bl	8022270 <__aeabi_uldivmod>
 802588c:	4313      	orrs	r3, r2
 802588e:	d00a      	beq.n	80258a6 <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("长度 0x%" PRIx64
 8025890:	69fb      	ldr	r3, [r7, #28]
 8025892:	6a1b      	ldr	r3, [r3, #32]
 8025894:	9300      	str	r3, [sp, #0]
 8025896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802589a:	482a      	ldr	r0, [pc, #168]	; (8025944 <np_cmd_fw_update_start+0x1f0>)
 802589c:	f00b ff0a 	bl	80316b4 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80258a0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80258a4:	e03e      	b.n	8025924 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 80258a6:	69f9      	ldr	r1, [r7, #28]
 80258a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80258ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80258b0:	69f9      	ldr	r1, [r7, #28]
 80258b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80258b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80258ba:	69fb      	ldr	r3, [r7, #28]
 80258bc:	2201      	movs	r2, #1
 80258be:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80258c0:	69fb      	ldr	r3, [r7, #28]
 80258c2:	6a1b      	ldr	r3, [r3, #32]
 80258c4:	2200      	movs	r2, #0
 80258c6:	603b      	str	r3, [r7, #0]
 80258c8:	607a      	str	r2, [r7, #4]
 80258ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80258ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80258d2:	f7fc fccd 	bl	8022270 <__aeabi_uldivmod>
 80258d6:	4602      	mov	r2, r0
 80258d8:	460b      	mov	r3, r1
 80258da:	69fb      	ldr	r3, [r7, #28]
 80258dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80258e0:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80258e4:	69fb      	ldr	r3, [r7, #28]
 80258e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80258ea:	461a      	mov	r2, r3
 80258ec:	2300      	movs	r3, #0
 80258ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80258f2:	69fb      	ldr	r3, [r7, #28]
 80258f4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80258f8:	3310      	adds	r3, #16
 80258fa:	4619      	mov	r1, r3
 80258fc:	f04f 0200 	mov.w	r2, #0
 8025900:	f04f 0300 	mov.w	r3, #0
 8025904:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 8025908:	69fb      	ldr	r3, [r7, #28]
 802590a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802590e:	3310      	adds	r3, #16
 8025910:	4619      	mov	r1, r3
 8025912:	f04f 0200 	mov.w	r2, #0
 8025916:	f04f 0300 	mov.w	r3, #0
 802591a:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 802591e:	f7fe f91b 	bl	8023b58 <np_send_ok_status>
 8025922:	4603      	mov	r3, r0
}
 8025924:	4618      	mov	r0, r3
 8025926:	3738      	adds	r7, #56	; 0x38
 8025928:	46bd      	mov	sp, r7
 802592a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802592e:	bf00      	nop
 8025930:	08033028 	.word	0x08033028
 8025934:	08033060 	.word	0x08033060
 8025938:	0803308c 	.word	0x0803308c
 802593c:	080330cc 	.word	0x080330cc
 8025940:	08032e68 	.word	0x08032e68
 8025944:	08033100 	.word	0x08033100

08025948 <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 8025948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802594c:	b0a7      	sub	sp, #156	; 0x9c
 802594e:	af02      	add	r7, sp, #8
 8025950:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8025952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025954:	685b      	ldr	r3, [r3, #4]
 8025956:	2b01      	cmp	r3, #1
 8025958:	d808      	bhi.n	802596c <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误 %lu\r\n",
 802595a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802595c:	685b      	ldr	r3, [r3, #4]
 802595e:	4619      	mov	r1, r3
 8025960:	487c      	ldr	r0, [pc, #496]	; (8025b54 <np_cmd_fw_update_data+0x20c>)
 8025962:	f00b fea7 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025966:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802596a:	e1d6      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 802596c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802596e:	681b      	ldr	r3, [r3, #0]
 8025970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 8025974:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025978:	785b      	ldrb	r3, [r3, #1]
 802597a:	b2db      	uxtb	r3, r3
 802597c:	2200      	movs	r2, #0
 802597e:	60bb      	str	r3, [r7, #8]
 8025980:	60fa      	str	r2, [r7, #12]
 8025982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8025986:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 802598a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802598e:	1c94      	adds	r4, r2, #2
 8025990:	f143 0500 	adc.w	r5, r3, #0
 8025994:	2c41      	cmp	r4, #65	; 0x41
 8025996:	f175 0300 	sbcs.w	r3, r5, #0
 802599a:	d307      	bcc.n	80259ac <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("数据大小错误 0x%" PRIx64 "\r\n", len);
 802599c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259a0:	486d      	ldr	r0, [pc, #436]	; (8025b58 <np_cmd_fw_update_data+0x210>)
 80259a2:	f00b fe87 	bl	80316b4 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80259a6:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80259aa:	e1b6      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80259ac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259b0:	f112 0802 	adds.w	r8, r2, #2
 80259b4:	f143 0900 	adc.w	r9, r3, #0
 80259b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ba:	685b      	ldr	r3, [r3, #4]
 80259bc:	2200      	movs	r2, #0
 80259be:	469a      	mov	sl, r3
 80259c0:	4693      	mov	fp, r2
 80259c2:	45d9      	cmp	r9, fp
 80259c4:	bf08      	it	eq
 80259c6:	45d0      	cmpeq	r8, sl
 80259c8:	d010      	beq.n	80259ec <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("缓冲区长度 0x%lx 大于命令长度 0x%" PRIx64 "\r\n",
 80259ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259cc:	6859      	ldr	r1, [r3, #4]
 80259ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259d2:	1c90      	adds	r0, r2, #2
 80259d4:	66b8      	str	r0, [r7, #104]	; 0x68
 80259d6:	f143 0300 	adc.w	r3, r3, #0
 80259da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80259dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80259e0:	485e      	ldr	r0, [pc, #376]	; (8025b5c <np_cmd_fw_update_data+0x214>)
 80259e2:	f00b fe67 	bl	80316b4 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 80259e6:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80259ea:	e196      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 80259ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259f0:	2b00      	cmp	r3, #0
 80259f2:	d105      	bne.n	8025a00 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 80259f4:	485a      	ldr	r0, [pc, #360]	; (8025b60 <np_cmd_fw_update_data+0x218>)
 80259f6:	f00b fec3 	bl	8031780 <puts>
        return NP_ERR_ADDR_INVALID;
 80259fa:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80259fe:	e18c      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8025a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025a0a:	2200      	movs	r2, #0
 8025a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8025a0e:	667a      	str	r2, [r7, #100]	; 0x64
 8025a10:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025a14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8025a18:	4621      	mov	r1, r4
 8025a1a:	1889      	adds	r1, r1, r2
 8025a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8025a1e:	4629      	mov	r1, r5
 8025a20:	eb43 0101 	adc.w	r1, r3, r1
 8025a24:	65f9      	str	r1, [r7, #92]	; 0x5c
 8025a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a28:	6a1b      	ldr	r3, [r3, #32]
 8025a2a:	2200      	movs	r2, #0
 8025a2c:	653b      	str	r3, [r7, #80]	; 0x50
 8025a2e:	657a      	str	r2, [r7, #84]	; 0x54
 8025a30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8025a34:	4623      	mov	r3, r4
 8025a36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8025a3a:	4602      	mov	r2, r0
 8025a3c:	4293      	cmp	r3, r2
 8025a3e:	462b      	mov	r3, r5
 8025a40:	460a      	mov	r2, r1
 8025a42:	4193      	sbcs	r3, r2
 8025a44:	d20a      	bcs.n	8025a5c <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 8025a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a48:	6a1a      	ldr	r2, [r3, #32]
 8025a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025a54:	1ad3      	subs	r3, r2, r3
 8025a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025a5a:	e003      	b.n	8025a64 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 8025a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8025a64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a66:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8025a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025a74:	18d0      	adds	r0, r2, r3
 8025a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025a7a:	3302      	adds	r3, #2
 8025a7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8025a80:	4619      	mov	r1, r3
 8025a82:	f00b ffd8 	bl	8031a36 <memcpy>
    prog->page.offset += write_len;
 8025a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025a94:	441a      	add	r2, r3
 8025a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 8025aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025aa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025aa6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025aac:	6a1b      	ldr	r3, [r3, #32]
 8025aae:	429a      	cmp	r2, r3
 8025ab0:	f040 8082 	bne.w	8025bb8 <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8025ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ab6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025abc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ac2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025ac6:	1886      	adds	r6, r0, r2
 8025ac8:	64be      	str	r6, [r7, #72]	; 0x48
 8025aca:	eb41 0303 	adc.w	r3, r1, r3
 8025ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025ad0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8025ad4:	460b      	mov	r3, r1
 8025ad6:	429c      	cmp	r4, r3
 8025ad8:	4613      	mov	r3, r2
 8025ada:	eb75 0303 	sbcs.w	r3, r5, r3
 8025ade:	d319      	bcc.n	8025b14 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("写入地址 0x%" PRIx64
 8025ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ae2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ae8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025aee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025af2:	1886      	adds	r6, r0, r2
 8025af4:	643e      	str	r6, [r7, #64]	; 0x40
 8025af6:	eb41 0303 	adc.w	r3, r1, r3
 8025afa:	647b      	str	r3, [r7, #68]	; 0x44
 8025afc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8025b00:	e9cd 2300 	strd	r2, r3, [sp]
 8025b04:	4622      	mov	r2, r4
 8025b06:	462b      	mov	r3, r5
 8025b08:	4816      	ldr	r0, [pc, #88]	; (8025b64 <np_cmd_fw_update_data+0x21c>)
 8025b0a:	f00b fdd3 	bl	80316b4 <iprintf>
                " 超过闪存大小 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8025b0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025b12:	e102      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 8025b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025b1a:	4613      	mov	r3, r2
 8025b1c:	4618      	mov	r0, r3
 8025b1e:	f7fc fec9 	bl	80228b4 <flash_page_erase>
 8025b22:	4603      	mov	r3, r0
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	da02      	bge.n	8025b2e <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8025b28:	f04f 33ff 	mov.w	r3, #4294967295
 8025b2c:	e0f5      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8025b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025b34:	4610      	mov	r0, r2
 8025b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8025b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b3e:	6a1b      	ldr	r3, [r3, #32]
 8025b40:	461a      	mov	r2, r3
 8025b42:	f7fc feda 	bl	80228fa <flash_write>
 8025b46:	4603      	mov	r3, r0
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	da0d      	bge.n	8025b68 <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8025b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8025b50:	e0e3      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
 8025b52:	bf00      	nop
 8025b54:	08033134 	.word	0x08033134
 8025b58:	0803316c 	.word	0x0803316c
 8025b5c:	08033190 	.word	0x08033190
 8025b60:	08032ca4 	.word	0x08032ca4
 8025b64:	080331cc 	.word	0x080331cc
        }

        prog->addr += prog->page_size;
 8025b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b70:	6a1b      	ldr	r3, [r3, #32]
 8025b72:	2200      	movs	r2, #0
 8025b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8025b76:	63fa      	str	r2, [r7, #60]	; 0x3c
 8025b78:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8025b7c:	4623      	mov	r3, r4
 8025b7e:	18c3      	adds	r3, r0, r3
 8025b80:	633b      	str	r3, [r7, #48]	; 0x30
 8025b82:	462b      	mov	r3, r5
 8025b84:	eb41 0303 	adc.w	r3, r1, r3
 8025b88:	637b      	str	r3, [r7, #52]	; 0x34
 8025b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8025b90:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8025b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b9a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8025b9e:	3301      	adds	r3, #1
 8025ba0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025ba2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025ba6:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8025baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bb0:	461a      	mov	r2, r3
 8025bb2:	2300      	movs	r3, #0
 8025bb4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8025bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025bbc:	2200      	movs	r2, #0
 8025bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8025bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025bc2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025bc6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025bca:	4621      	mov	r1, r4
 8025bcc:	1a51      	subs	r1, r2, r1
 8025bce:	6039      	str	r1, [r7, #0]
 8025bd0:	4629      	mov	r1, r5
 8025bd2:	eb63 0301 	sbc.w	r3, r3, r1
 8025bd6:	607b      	str	r3, [r7, #4]
 8025bd8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025bdc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8025be0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8025be4:	4313      	orrs	r3, r2
 8025be6:	d018      	beq.n	8025c1a <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8025be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8025bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025bf2:	1c9a      	adds	r2, r3, #2
 8025bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025bf8:	4413      	add	r3, r2
 8025bfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025bfc:	4619      	mov	r1, r3
 8025bfe:	f00b ff1a 	bl	8031a36 <memcpy>
        prog->page.offset += bytes_left;
 8025c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025c0e:	4413      	add	r3, r2
 8025c10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025c12:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025c16:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8025c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c1c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c20:	3310      	adds	r3, #16
 8025c22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c26:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025c2a:	1884      	adds	r4, r0, r2
 8025c2c:	623c      	str	r4, [r7, #32]
 8025c2e:	eb41 0303 	adc.w	r3, r1, r3
 8025c32:	627b      	str	r3, [r7, #36]	; 0x24
 8025c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c36:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c3a:	3310      	adds	r3, #16
 8025c3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8025c40:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c46:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c4a:	3310      	adds	r3, #16
 8025c4c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c52:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c56:	3310      	adds	r3, #16
 8025c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c5c:	1a84      	subs	r4, r0, r2
 8025c5e:	61bc      	str	r4, [r7, #24]
 8025c60:	eb61 0303 	sbc.w	r3, r1, r3
 8025c64:	61fb      	str	r3, [r7, #28]
 8025c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c68:	6a1b      	ldr	r3, [r3, #32]
 8025c6a:	2200      	movs	r2, #0
 8025c6c:	613b      	str	r3, [r7, #16]
 8025c6e:	617a      	str	r2, [r7, #20]
 8025c70:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8025c74:	4623      	mov	r3, r4
 8025c76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8025c7a:	4602      	mov	r2, r0
 8025c7c:	4293      	cmp	r3, r2
 8025c7e:	462b      	mov	r3, r5
 8025c80:	460a      	mov	r2, r1
 8025c82:	4193      	sbcs	r3, r2
 8025c84:	d20c      	bcs.n	8025ca0 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8025c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c88:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c8c:	3310      	adds	r3, #16
 8025c8e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025c98:	4299      	cmp	r1, r3
 8025c9a:	bf08      	it	eq
 8025c9c:	4290      	cmpeq	r0, r2
 8025c9e:	d11b      	bne.n	8025cd8 <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8025ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ca2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025ca6:	3310      	adds	r3, #16
 8025ca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025cac:	4610      	mov	r0, r2
 8025cae:	4619      	mov	r1, r3
 8025cb0:	f7fe fbca 	bl	8024448 <np_send_write_ack>
 8025cb4:	4603      	mov	r3, r0
 8025cb6:	2b00      	cmp	r3, #0
 8025cb8:	d002      	beq.n	8025cc0 <np_cmd_fw_update_data+0x378>
            return -1;
 8025cba:	f04f 33ff 	mov.w	r3, #4294967295
 8025cbe:	e02c      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8025cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cc2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cc6:	3310      	adds	r3, #16
 8025cc8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cce:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cd2:	3310      	adds	r3, #16
 8025cd4:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8025cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cda:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cde:	3310      	adds	r3, #16
 8025ce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025ce4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8025ce6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8025cea:	4290      	cmp	r0, r2
 8025cec:	eb71 0303 	sbcs.w	r3, r1, r3
 8025cf0:	d212      	bcs.n	8025d18 <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("实际写入数据长度 0x%" PRIx64
 8025cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cf4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cf8:	3310      	adds	r3, #16
 8025cfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8025d04:	e9cd 2300 	strd	r2, r3, [sp]
 8025d08:	4602      	mov	r2, r0
 8025d0a:	460b      	mov	r3, r1
 8025d0c:	4805      	ldr	r0, [pc, #20]	; (8025d24 <np_cmd_fw_update_data+0x3dc>)
 8025d0e:	f00b fcd1 	bl	80316b4 <iprintf>
            " 超过 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8025d12:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8025d16:	e000      	b.n	8025d1a <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8025d18:	2300      	movs	r3, #0
}
 8025d1a:	4618      	mov	r0, r3
 8025d1c:	3794      	adds	r7, #148	; 0x94
 8025d1e:	46bd      	mov	sp, r7
 8025d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d24:	08033204 	.word	0x08033204

08025d28 <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8025d28:	b580      	push	{r7, lr}
 8025d2a:	b084      	sub	sp, #16
 8025d2c:	af00      	add	r7, sp, #0
 8025d2e:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8025d30:	687b      	ldr	r3, [r7, #4]
 8025d32:	2200      	movs	r2, #0
 8025d34:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025d40:	2b00      	cmp	r3, #0
 8025d42:	d00b      	beq.n	8025d5c <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("未写入长度为 0x%lx 的数据\r\n",
 8025d44:	687b      	ldr	r3, [r7, #4]
 8025d46:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025d4e:	4619      	mov	r1, r3
 8025d50:	481d      	ldr	r0, [pc, #116]	; (8025dc8 <np_cmd_fw_update_end+0xa0>)
 8025d52:	f00b fcaf 	bl	80316b4 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8025d56:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8025d5a:	e030      	b.n	8025dbe <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8025d5c:	f107 030c 	add.w	r3, r7, #12
 8025d60:	4618      	mov	r0, r3
 8025d62:	f7ff fc7d 	bl	8025660 <np_boot_config_read>
 8025d66:	4603      	mov	r3, r0
 8025d68:	2b00      	cmp	r3, #0
 8025d6a:	d002      	beq.n	8025d72 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8025d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8025d70:	e025      	b.n	8025dbe <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d78:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025d7c:	2bff      	cmp	r3, #255	; 0xff
 8025d7e:	d105      	bne.n	8025d8c <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8025d80:	7b3a      	ldrb	r2, [r7, #12]
 8025d82:	687b      	ldr	r3, [r7, #4]
 8025d84:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d88:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8025d8c:	687b      	ldr	r3, [r7, #4]
 8025d8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d92:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025d96:	2b00      	cmp	r3, #0
 8025d98:	bf0c      	ite	eq
 8025d9a:	2301      	moveq	r3, #1
 8025d9c:	2300      	movne	r3, #0
 8025d9e:	b2db      	uxtb	r3, r3
 8025da0:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8025da2:	f107 030c 	add.w	r3, r7, #12
 8025da6:	4618      	mov	r0, r3
 8025da8:	f7ff fc70 	bl	802568c <np_boot_config_write>
 8025dac:	4603      	mov	r3, r0
 8025dae:	2b00      	cmp	r3, #0
 8025db0:	d002      	beq.n	8025db8 <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8025db2:	f04f 33ff 	mov.w	r3, #4294967295
 8025db6:	e002      	b.n	8025dbe <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8025db8:	f7fd fece 	bl	8023b58 <np_send_ok_status>
 8025dbc:	4603      	mov	r3, r0
}
 8025dbe:	4618      	mov	r0, r3
 8025dc0:	3710      	adds	r7, #16
 8025dc2:	46bd      	mov	sp, r7
 8025dc4:	bd80      	pop	{r7, pc}
 8025dc6:	bf00      	nop
 8025dc8:	0803323c 	.word	0x0803323c

08025dcc <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8025dcc:	b580      	push	{r7, lr}
 8025dce:	b084      	sub	sp, #16
 8025dd0:	af00      	add	r7, sp, #0
 8025dd2:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8025dd4:	687b      	ldr	r3, [r7, #4]
 8025dd6:	681b      	ldr	r3, [r3, #0]
 8025dd8:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8025dda:	2300      	movs	r3, #0
 8025ddc:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8025dde:	68bb      	ldr	r3, [r7, #8]
 8025de0:	781b      	ldrb	r3, [r3, #0]
 8025de2:	2b0c      	cmp	r3, #12
 8025de4:	d013      	beq.n	8025e0e <np_cmd_fw_update+0x42>
 8025de6:	2b0c      	cmp	r3, #12
 8025de8:	dc19      	bgt.n	8025e1e <np_cmd_fw_update+0x52>
 8025dea:	2b0a      	cmp	r3, #10
 8025dec:	d002      	beq.n	8025df4 <np_cmd_fw_update+0x28>
 8025dee:	2b0b      	cmp	r3, #11
 8025df0:	d008      	beq.n	8025e04 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8025df2:	e014      	b.n	8025e1e <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8025df4:	2001      	movs	r0, #1
 8025df6:	f7fd fd0b 	bl	8023810 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8025dfa:	6878      	ldr	r0, [r7, #4]
 8025dfc:	f7ff fcaa 	bl	8025754 <np_cmd_fw_update_start>
 8025e00:	60f8      	str	r0, [r7, #12]
        break;
 8025e02:	e00d      	b.n	8025e20 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8025e04:	6878      	ldr	r0, [r7, #4]
 8025e06:	f7ff fd9f 	bl	8025948 <np_cmd_fw_update_data>
 8025e0a:	60f8      	str	r0, [r7, #12]
        break;
 8025e0c:	e008      	b.n	8025e20 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8025e0e:	6878      	ldr	r0, [r7, #4]
 8025e10:	f7ff ff8a 	bl	8025d28 <np_cmd_fw_update_end>
 8025e14:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8025e16:	2000      	movs	r0, #0
 8025e18:	f7fd fcfa 	bl	8023810 <led_wr_set>
        break;
 8025e1c:	e000      	b.n	8025e20 <np_cmd_fw_update+0x54>
        break;
 8025e1e:	bf00      	nop
    }

    if (ret < 0)
 8025e20:	68fb      	ldr	r3, [r7, #12]
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	da02      	bge.n	8025e2c <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8025e26:	2000      	movs	r0, #0
 8025e28:	f7fd fcf2 	bl	8023810 <led_wr_set>

    return ret;
 8025e2c:	68fb      	ldr	r3, [r7, #12]
}
 8025e2e:	4618      	mov	r0, r3
 8025e30:	3710      	adds	r7, #16
 8025e32:	46bd      	mov	sp, r7
 8025e34:	bd80      	pop	{r7, pc}

08025e36 <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8025e36:	b480      	push	{r7}
 8025e38:	b083      	sub	sp, #12
 8025e3a:	af00      	add	r7, sp, #0
 8025e3c:	4603      	mov	r3, r0
 8025e3e:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8025e40:	79fb      	ldrb	r3, [r7, #7]
 8025e42:	2b0c      	cmp	r3, #12
 8025e44:	bf94      	ite	ls
 8025e46:	2301      	movls	r3, #1
 8025e48:	2300      	movhi	r3, #0
 8025e4a:	b2db      	uxtb	r3, r3
}
 8025e4c:	4618      	mov	r0, r3
 8025e4e:	370c      	adds	r7, #12
 8025e50:	46bd      	mov	sp, r7
 8025e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e56:	4770      	bx	lr

08025e58 <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8025e58:	b580      	push	{r7, lr}
 8025e5a:	b084      	sub	sp, #16
 8025e5c:	af00      	add	r7, sp, #0
 8025e5e:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8025e60:	687b      	ldr	r3, [r7, #4]
 8025e62:	685b      	ldr	r3, [r3, #4]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d108      	bne.n	8025e7a <np_cmd_handler+0x22>
    {
        ERROR_PRINT("命令长度错误：%lu\r\n",
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	685b      	ldr	r3, [r3, #4]
 8025e6c:	4619      	mov	r1, r3
 8025e6e:	4823      	ldr	r0, [pc, #140]	; (8025efc <np_cmd_handler+0xa4>)
 8025e70:	f00b fc20 	bl	80316b4 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025e74:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025e78:	e03b      	b.n	8025ef2 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8025e80:	68fb      	ldr	r3, [r7, #12]
 8025e82:	781b      	ldrb	r3, [r3, #0]
 8025e84:	4618      	mov	r0, r3
 8025e86:	f7ff ffd6 	bl	8025e36 <np_cmd_is_valid>
 8025e8a:	4603      	mov	r3, r0
 8025e8c:	f083 0301 	eor.w	r3, r3, #1
 8025e90:	b2db      	uxtb	r3, r3
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	d008      	beq.n	8025ea8 <np_cmd_handler+0x50>
    {
        ERROR_PRINT("无效的命令码：%d\r\n", cmd->code);
 8025e96:	68fb      	ldr	r3, [r7, #12]
 8025e98:	781b      	ldrb	r3, [r3, #0]
 8025e9a:	4619      	mov	r1, r3
 8025e9c:	4818      	ldr	r0, [pc, #96]	; (8025f00 <np_cmd_handler+0xa8>)
 8025e9e:	f00b fc09 	bl	80316b4 <iprintf>
        return NP_ERR_CMD_INVALID;
 8025ea2:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8025ea6:	e024      	b.n	8025ef2 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8025ea8:	687b      	ldr	r3, [r7, #4]
 8025eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	d112      	bne.n	8025ed6 <np_cmd_handler+0x7e>
 8025eb0:	68fb      	ldr	r3, [r7, #12]
 8025eb2:	781b      	ldrb	r3, [r3, #0]
 8025eb4:	4619      	mov	r1, r3
 8025eb6:	4a13      	ldr	r2, [pc, #76]	; (8025f04 <np_cmd_handler+0xac>)
 8025eb8:	460b      	mov	r3, r1
 8025eba:	005b      	lsls	r3, r3, #1
 8025ebc:	440b      	add	r3, r1
 8025ebe:	009b      	lsls	r3, r3, #2
 8025ec0:	4413      	add	r3, r2
 8025ec2:	3304      	adds	r3, #4
 8025ec4:	781b      	ldrb	r3, [r3, #0]
 8025ec6:	2b00      	cmp	r3, #0
 8025ec8:	d005      	beq.n	8025ed6 <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("芯片未配置\r\n");
 8025eca:	480f      	ldr	r0, [pc, #60]	; (8025f08 <np_cmd_handler+0xb0>)
 8025ecc:	f00b fc58 	bl	8031780 <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8025ed0:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8025ed4:	e00d      	b.n	8025ef2 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8025ed6:	68fb      	ldr	r3, [r7, #12]
 8025ed8:	781b      	ldrb	r3, [r3, #0]
 8025eda:	4619      	mov	r1, r3
 8025edc:	4a09      	ldr	r2, [pc, #36]	; (8025f04 <np_cmd_handler+0xac>)
 8025ede:	460b      	mov	r3, r1
 8025ee0:	005b      	lsls	r3, r3, #1
 8025ee2:	440b      	add	r3, r1
 8025ee4:	009b      	lsls	r3, r3, #2
 8025ee6:	4413      	add	r3, r2
 8025ee8:	3308      	adds	r3, #8
 8025eea:	681b      	ldr	r3, [r3, #0]
 8025eec:	6878      	ldr	r0, [r7, #4]
 8025eee:	4798      	blx	r3
 8025ef0:	4603      	mov	r3, r0
}
 8025ef2:	4618      	mov	r0, r3
 8025ef4:	3710      	adds	r7, #16
 8025ef6:	46bd      	mov	sp, r7
 8025ef8:	bd80      	pop	{r7, pc}
 8025efa:	bf00      	nop
 8025efc:	08033268 	.word	0x08033268
 8025f00:	0803328c 	.word	0x0803328c
 8025f04:	2000004c 	.word	0x2000004c
 8025f08:	080332b0 	.word	0x080332b0

08025f0c <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8025f0c:	b580      	push	{r7, lr}
 8025f0e:	b084      	sub	sp, #16
 8025f10:	af00      	add	r7, sp, #0
 8025f12:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025f14:	4b12      	ldr	r3, [pc, #72]	; (8025f60 <np_packet_handler+0x54>)
 8025f16:	681b      	ldr	r3, [r3, #0]
 8025f18:	689b      	ldr	r3, [r3, #8]
 8025f1a:	687a      	ldr	r2, [r7, #4]
 8025f1c:	4610      	mov	r0, r2
 8025f1e:	4798      	blx	r3
 8025f20:	4602      	mov	r2, r0
 8025f22:	687b      	ldr	r3, [r7, #4]
 8025f24:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8025f26:	687b      	ldr	r3, [r7, #4]
 8025f28:	685b      	ldr	r3, [r3, #4]
 8025f2a:	2b00      	cmp	r3, #0
 8025f2c:	d012      	beq.n	8025f54 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8025f2e:	6878      	ldr	r0, [r7, #4]
 8025f30:	f7ff ff92 	bl	8025e58 <np_cmd_handler>
 8025f34:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8025f36:	4b0a      	ldr	r3, [pc, #40]	; (8025f60 <np_packet_handler+0x54>)
 8025f38:	681b      	ldr	r3, [r3, #0]
 8025f3a:	68db      	ldr	r3, [r3, #12]
 8025f3c:	4798      	blx	r3

        if (ret < 0)
 8025f3e:	68fb      	ldr	r3, [r7, #12]
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	dae7      	bge.n	8025f14 <np_packet_handler+0x8>
            np_send_error(-ret);
 8025f44:	68fb      	ldr	r3, [r7, #12]
 8025f46:	b2db      	uxtb	r3, r3
 8025f48:	425b      	negs	r3, r3
 8025f4a:	b2db      	uxtb	r3, r3
 8025f4c:	4618      	mov	r0, r3
 8025f4e:	f7fd fe1f 	bl	8023b90 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025f52:	e7df      	b.n	8025f14 <np_packet_handler+0x8>
            break;
 8025f54:	bf00      	nop
    }
    while (1);
}
 8025f56:	bf00      	nop
 8025f58:	3710      	adds	r7, #16
 8025f5a:	46bd      	mov	sp, r7
 8025f5c:	bd80      	pop	{r7, pc}
 8025f5e:	bf00      	nop
 8025f60:	20000cb8 	.word	0x20000cb8

08025f64 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8025f64:	b580      	push	{r7, lr}
 8025f66:	b082      	sub	sp, #8
 8025f68:	af00      	add	r7, sp, #0
 8025f6a:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8025f6c:	687b      	ldr	r3, [r7, #4]
 8025f6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025f72:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	d008      	beq.n	8025f8c <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8025f7a:	6878      	ldr	r0, [r7, #4]
 8025f7c:	f7fe fc28 	bl	80247d0 <np_nand_handle_status>
 8025f80:	4603      	mov	r3, r0
 8025f82:	2b00      	cmp	r3, #0
 8025f84:	d002      	beq.n	8025f8c <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8025f86:	2099      	movs	r0, #153	; 0x99
 8025f88:	f7fd fe02 	bl	8023b90 <np_send_error>
    }
}
 8025f8c:	bf00      	nop
 8025f8e:	3708      	adds	r7, #8
 8025f90:	46bd      	mov	sp, r7
 8025f92:	bd80      	pop	{r7, pc}

08025f94 <np_init>:

// NP 初始化函数
void np_init()
{
 8025f94:	b480      	push	{r7}
 8025f96:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8025f98:	4b05      	ldr	r3, [pc, #20]	; (8025fb0 <np_init+0x1c>)
 8025f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025f9e:	22ff      	movs	r2, #255	; 0xff
 8025fa0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8025fa4:	bf00      	nop
 8025fa6:	46bd      	mov	sp, r7
 8025fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fac:	4770      	bx	lr
 8025fae:	bf00      	nop
 8025fb0:	20000cc0 	.word	0x20000cc0

08025fb4 <np_handler>:

// NP 处理函数
void np_handler()
{
 8025fb4:	b580      	push	{r7, lr}
 8025fb6:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8025fb8:	4803      	ldr	r0, [pc, #12]	; (8025fc8 <np_handler+0x14>)
 8025fba:	f7ff ffa7 	bl	8025f0c <np_packet_handler>
    np_nand_handler(&prog);
 8025fbe:	4802      	ldr	r0, [pc, #8]	; (8025fc8 <np_handler+0x14>)
 8025fc0:	f7ff ffd0 	bl	8025f64 <np_nand_handler>
}
 8025fc4:	bf00      	nop
 8025fc6:	bd80      	pop	{r7, pc}
 8025fc8:	20000cc0 	.word	0x20000cc0

08025fcc <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8025fcc:	b480      	push	{r7}
 8025fce:	b083      	sub	sp, #12
 8025fd0:	af00      	add	r7, sp, #0
 8025fd2:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8025fd4:	4a04      	ldr	r2, [pc, #16]	; (8025fe8 <np_comm_register+0x1c>)
 8025fd6:	687b      	ldr	r3, [r7, #4]
 8025fd8:	6013      	str	r3, [r2, #0]

    return 0;
 8025fda:	2300      	movs	r3, #0
}
 8025fdc:	4618      	mov	r0, r3
 8025fde:	370c      	adds	r7, #12
 8025fe0:	46bd      	mov	sp, r7
 8025fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe6:	4770      	bx	lr
 8025fe8:	20000cb8 	.word	0x20000cb8

08025fec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8025fec:	b580      	push	{r7, lr}
 8025fee:	b086      	sub	sp, #24
 8025ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8025ff2:	1d3b      	adds	r3, r7, #4
 8025ff4:	2200      	movs	r2, #0
 8025ff6:	601a      	str	r2, [r3, #0]
 8025ff8:	605a      	str	r2, [r3, #4]
 8025ffa:	609a      	str	r2, [r3, #8]
 8025ffc:	60da      	str	r2, [r3, #12]
 8025ffe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8026000:	2300      	movs	r3, #0
 8026002:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8026004:	4b24      	ldr	r3, [pc, #144]	; (8026098 <MX_RTC_Init+0xac>)
 8026006:	4a25      	ldr	r2, [pc, #148]	; (802609c <MX_RTC_Init+0xb0>)
 8026008:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 802600a:	4b23      	ldr	r3, [pc, #140]	; (8026098 <MX_RTC_Init+0xac>)
 802600c:	2200      	movs	r2, #0
 802600e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8026010:	4b21      	ldr	r3, [pc, #132]	; (8026098 <MX_RTC_Init+0xac>)
 8026012:	227f      	movs	r2, #127	; 0x7f
 8026014:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8026016:	4b20      	ldr	r3, [pc, #128]	; (8026098 <MX_RTC_Init+0xac>)
 8026018:	22ff      	movs	r2, #255	; 0xff
 802601a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 802601c:	4b1e      	ldr	r3, [pc, #120]	; (8026098 <MX_RTC_Init+0xac>)
 802601e:	2200      	movs	r2, #0
 8026020:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8026022:	4b1d      	ldr	r3, [pc, #116]	; (8026098 <MX_RTC_Init+0xac>)
 8026024:	2200      	movs	r2, #0
 8026026:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8026028:	4b1b      	ldr	r3, [pc, #108]	; (8026098 <MX_RTC_Init+0xac>)
 802602a:	2200      	movs	r2, #0
 802602c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 802602e:	481a      	ldr	r0, [pc, #104]	; (8026098 <MX_RTC_Init+0xac>)
 8026030:	f004 fcfe 	bl	802aa30 <HAL_RTC_Init>
 8026034:	4603      	mov	r3, r0
 8026036:	2b00      	cmp	r3, #0
 8026038:	d001      	beq.n	802603e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 802603a:	f7fd fcef 	bl	8023a1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 802603e:	2300      	movs	r3, #0
 8026040:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8026042:	2300      	movs	r3, #0
 8026044:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8026046:	2300      	movs	r3, #0
 8026048:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 802604a:	2300      	movs	r3, #0
 802604c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 802604e:	2300      	movs	r3, #0
 8026050:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8026052:	1d3b      	adds	r3, r7, #4
 8026054:	2201      	movs	r2, #1
 8026056:	4619      	mov	r1, r3
 8026058:	480f      	ldr	r0, [pc, #60]	; (8026098 <MX_RTC_Init+0xac>)
 802605a:	f004 fd5f 	bl	802ab1c <HAL_RTC_SetTime>
 802605e:	4603      	mov	r3, r0
 8026060:	2b00      	cmp	r3, #0
 8026062:	d001      	beq.n	8026068 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8026064:	f7fd fcda 	bl	8023a1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8026068:	2301      	movs	r3, #1
 802606a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 802606c:	2301      	movs	r3, #1
 802606e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8026070:	2301      	movs	r3, #1
 8026072:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8026074:	2300      	movs	r3, #0
 8026076:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8026078:	463b      	mov	r3, r7
 802607a:	2201      	movs	r2, #1
 802607c:	4619      	mov	r1, r3
 802607e:	4806      	ldr	r0, [pc, #24]	; (8026098 <MX_RTC_Init+0xac>)
 8026080:	f004 fde6 	bl	802ac50 <HAL_RTC_SetDate>
 8026084:	4603      	mov	r3, r0
 8026086:	2b00      	cmp	r3, #0
 8026088:	d001      	beq.n	802608e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 802608a:	f7fd fcc7 	bl	8023a1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 802608e:	bf00      	nop
 8026090:	3718      	adds	r7, #24
 8026092:	46bd      	mov	sp, r7
 8026094:	bd80      	pop	{r7, pc}
 8026096:	bf00      	nop
 8026098:	20005110 	.word	0x20005110
 802609c:	40002800 	.word	0x40002800

080260a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80260a0:	b580      	push	{r7, lr}
 80260a2:	b086      	sub	sp, #24
 80260a4:	af00      	add	r7, sp, #0
 80260a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80260a8:	f107 0308 	add.w	r3, r7, #8
 80260ac:	2200      	movs	r2, #0
 80260ae:	601a      	str	r2, [r3, #0]
 80260b0:	605a      	str	r2, [r3, #4]
 80260b2:	609a      	str	r2, [r3, #8]
 80260b4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80260b6:	687b      	ldr	r3, [r7, #4]
 80260b8:	681b      	ldr	r3, [r3, #0]
 80260ba:	4a0c      	ldr	r2, [pc, #48]	; (80260ec <HAL_RTC_MspInit+0x4c>)
 80260bc:	4293      	cmp	r3, r2
 80260be:	d111      	bne.n	80260e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80260c0:	2302      	movs	r3, #2
 80260c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80260c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80260c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80260ca:	f107 0308 	add.w	r3, r7, #8
 80260ce:	4618      	mov	r0, r3
 80260d0:	f004 fbcc 	bl	802a86c <HAL_RCCEx_PeriphCLKConfig>
 80260d4:	4603      	mov	r3, r0
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	d001      	beq.n	80260de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80260da:	f7fd fc9f 	bl	8023a1c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80260de:	4b04      	ldr	r3, [pc, #16]	; (80260f0 <HAL_RTC_MspInit+0x50>)
 80260e0:	2201      	movs	r2, #1
 80260e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80260e4:	bf00      	nop
 80260e6:	3718      	adds	r7, #24
 80260e8:	46bd      	mov	sp, r7
 80260ea:	bd80      	pop	{r7, pc}
 80260ec:	40002800 	.word	0x40002800
 80260f0:	42470e3c 	.word	0x42470e3c

080260f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80260f4:	b580      	push	{r7, lr}
 80260f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80260f8:	4b17      	ldr	r3, [pc, #92]	; (8026158 <MX_SPI1_Init+0x64>)
 80260fa:	4a18      	ldr	r2, [pc, #96]	; (802615c <MX_SPI1_Init+0x68>)
 80260fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80260fe:	4b16      	ldr	r3, [pc, #88]	; (8026158 <MX_SPI1_Init+0x64>)
 8026100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026106:	4b14      	ldr	r3, [pc, #80]	; (8026158 <MX_SPI1_Init+0x64>)
 8026108:	2200      	movs	r2, #0
 802610a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802610c:	4b12      	ldr	r3, [pc, #72]	; (8026158 <MX_SPI1_Init+0x64>)
 802610e:	2200      	movs	r2, #0
 8026110:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026112:	4b11      	ldr	r3, [pc, #68]	; (8026158 <MX_SPI1_Init+0x64>)
 8026114:	2202      	movs	r2, #2
 8026116:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026118:	4b0f      	ldr	r3, [pc, #60]	; (8026158 <MX_SPI1_Init+0x64>)
 802611a:	2201      	movs	r2, #1
 802611c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802611e:	4b0e      	ldr	r3, [pc, #56]	; (8026158 <MX_SPI1_Init+0x64>)
 8026120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026124:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8026126:	4b0c      	ldr	r3, [pc, #48]	; (8026158 <MX_SPI1_Init+0x64>)
 8026128:	2200      	movs	r2, #0
 802612a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802612c:	4b0a      	ldr	r3, [pc, #40]	; (8026158 <MX_SPI1_Init+0x64>)
 802612e:	2200      	movs	r2, #0
 8026130:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026132:	4b09      	ldr	r3, [pc, #36]	; (8026158 <MX_SPI1_Init+0x64>)
 8026134:	2200      	movs	r2, #0
 8026136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026138:	4b07      	ldr	r3, [pc, #28]	; (8026158 <MX_SPI1_Init+0x64>)
 802613a:	2200      	movs	r2, #0
 802613c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 802613e:	4b06      	ldr	r3, [pc, #24]	; (8026158 <MX_SPI1_Init+0x64>)
 8026140:	220a      	movs	r2, #10
 8026142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026144:	4804      	ldr	r0, [pc, #16]	; (8026158 <MX_SPI1_Init+0x64>)
 8026146:	f004 fea8 	bl	802ae9a <HAL_SPI_Init>
 802614a:	4603      	mov	r3, r0
 802614c:	2b00      	cmp	r3, #0
 802614e:	d001      	beq.n	8026154 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8026150:	f7fd fc64 	bl	8023a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8026154:	bf00      	nop
 8026156:	bd80      	pop	{r7, pc}
 8026158:	20005130 	.word	0x20005130
 802615c:	40013000 	.word	0x40013000

08026160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8026160:	b580      	push	{r7, lr}
 8026162:	b08a      	sub	sp, #40	; 0x28
 8026164:	af00      	add	r7, sp, #0
 8026166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026168:	f107 0314 	add.w	r3, r7, #20
 802616c:	2200      	movs	r2, #0
 802616e:	601a      	str	r2, [r3, #0]
 8026170:	605a      	str	r2, [r3, #4]
 8026172:	609a      	str	r2, [r3, #8]
 8026174:	60da      	str	r2, [r3, #12]
 8026176:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8026178:	687b      	ldr	r3, [r7, #4]
 802617a:	681b      	ldr	r3, [r3, #0]
 802617c:	4a2c      	ldr	r2, [pc, #176]	; (8026230 <HAL_SPI_MspInit+0xd0>)
 802617e:	4293      	cmp	r3, r2
 8026180:	d151      	bne.n	8026226 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8026182:	2300      	movs	r3, #0
 8026184:	613b      	str	r3, [r7, #16]
 8026186:	4b2b      	ldr	r3, [pc, #172]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 8026188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802618a:	4a2a      	ldr	r2, [pc, #168]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 802618c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026190:	6453      	str	r3, [r2, #68]	; 0x44
 8026192:	4b28      	ldr	r3, [pc, #160]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 8026194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802619a:	613b      	str	r3, [r7, #16]
 802619c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802619e:	2300      	movs	r3, #0
 80261a0:	60fb      	str	r3, [r7, #12]
 80261a2:	4b24      	ldr	r3, [pc, #144]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261a6:	4a23      	ldr	r2, [pc, #140]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261a8:	f043 0301 	orr.w	r3, r3, #1
 80261ac:	6313      	str	r3, [r2, #48]	; 0x30
 80261ae:	4b21      	ldr	r3, [pc, #132]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261b2:	f003 0301 	and.w	r3, r3, #1
 80261b6:	60fb      	str	r3, [r7, #12]
 80261b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80261ba:	2300      	movs	r3, #0
 80261bc:	60bb      	str	r3, [r7, #8]
 80261be:	4b1d      	ldr	r3, [pc, #116]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261c2:	4a1c      	ldr	r2, [pc, #112]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261c4:	f043 0302 	orr.w	r3, r3, #2
 80261c8:	6313      	str	r3, [r2, #48]	; 0x30
 80261ca:	4b1a      	ldr	r3, [pc, #104]	; (8026234 <HAL_SPI_MspInit+0xd4>)
 80261cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ce:	f003 0302 	and.w	r3, r3, #2
 80261d2:	60bb      	str	r3, [r7, #8]
 80261d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80261d6:	23c0      	movs	r3, #192	; 0xc0
 80261d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261da:	2302      	movs	r3, #2
 80261dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80261de:	2300      	movs	r3, #0
 80261e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80261e2:	2303      	movs	r3, #3
 80261e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80261e6:	2305      	movs	r3, #5
 80261e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80261ea:	f107 0314 	add.w	r3, r7, #20
 80261ee:	4619      	mov	r1, r3
 80261f0:	4811      	ldr	r0, [pc, #68]	; (8026238 <HAL_SPI_MspInit+0xd8>)
 80261f2:	f002 f847 	bl	8028284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80261f6:	2308      	movs	r3, #8
 80261f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261fa:	2302      	movs	r3, #2
 80261fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80261fe:	2300      	movs	r3, #0
 8026200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026202:	2303      	movs	r3, #3
 8026204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026206:	2305      	movs	r3, #5
 8026208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 802620a:	f107 0314 	add.w	r3, r7, #20
 802620e:	4619      	mov	r1, r3
 8026210:	480a      	ldr	r0, [pc, #40]	; (802623c <HAL_SPI_MspInit+0xdc>)
 8026212:	f002 f837 	bl	8028284 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8026216:	2200      	movs	r2, #0
 8026218:	2100      	movs	r1, #0
 802621a:	2023      	movs	r0, #35	; 0x23
 802621c:	f001 fbcf 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026220:	2023      	movs	r0, #35	; 0x23
 8026222:	f001 fbe8 	bl	80279f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8026226:	bf00      	nop
 8026228:	3728      	adds	r7, #40	; 0x28
 802622a:	46bd      	mov	sp, r7
 802622c:	bd80      	pop	{r7, pc}
 802622e:	bf00      	nop
 8026230:	40013000 	.word	0x40013000
 8026234:	40023800 	.word	0x40023800
 8026238:	40020000 	.word	0x40020000
 802623c:	40020400 	.word	0x40020400

08026240 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8026240:	b580      	push	{r7, lr}
 8026242:	b082      	sub	sp, #8
 8026244:	af00      	add	r7, sp, #0
 8026246:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	4a0b      	ldr	r2, [pc, #44]	; (802627c <HAL_SPI_MspDeInit+0x3c>)
 802624e:	4293      	cmp	r3, r2
 8026250:	d110      	bne.n	8026274 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8026252:	4b0b      	ldr	r3, [pc, #44]	; (8026280 <HAL_SPI_MspDeInit+0x40>)
 8026254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026256:	4a0a      	ldr	r2, [pc, #40]	; (8026280 <HAL_SPI_MspDeInit+0x40>)
 8026258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802625c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 802625e:	21c0      	movs	r1, #192	; 0xc0
 8026260:	4808      	ldr	r0, [pc, #32]	; (8026284 <HAL_SPI_MspDeInit+0x44>)
 8026262:	f002 f9ab 	bl	80285bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8026266:	2108      	movs	r1, #8
 8026268:	4807      	ldr	r0, [pc, #28]	; (8026288 <HAL_SPI_MspDeInit+0x48>)
 802626a:	f002 f9a7 	bl	80285bc <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 802626e:	2023      	movs	r0, #35	; 0x23
 8026270:	f001 fbcf 	bl	8027a12 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8026274:	bf00      	nop
 8026276:	3708      	adds	r7, #8
 8026278:	46bd      	mov	sp, r7
 802627a:	bd80      	pop	{r7, pc}
 802627c:	40013000 	.word	0x40013000
 8026280:	40023800 	.word	0x40023800
 8026284:	40020000 	.word	0x40020000
 8026288:	40020400 	.word	0x40020400

0802628c <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 802628c:	b580      	push	{r7, lr}
 802628e:	b088      	sub	sp, #32
 8026290:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026292:	f107 030c 	add.w	r3, r7, #12
 8026296:	2200      	movs	r2, #0
 8026298:	601a      	str	r2, [r3, #0]
 802629a:	605a      	str	r2, [r3, #4]
 802629c:	609a      	str	r2, [r3, #8]
 802629e:	60da      	str	r2, [r3, #12]
 80262a0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_ENABLE();
 80262a2:	2300      	movs	r3, #0
 80262a4:	60bb      	str	r3, [r7, #8]
 80262a6:	4b33      	ldr	r3, [pc, #204]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262aa:	4a32      	ldr	r2, [pc, #200]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80262b0:	6453      	str	r3, [r2, #68]	; 0x44
 80262b2:	4b30      	ldr	r3, [pc, #192]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80262ba:	60bb      	str	r3, [r7, #8]
 80262bc:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80262be:	2300      	movs	r3, #0
 80262c0:	607b      	str	r3, [r7, #4]
 80262c2:	4b2c      	ldr	r3, [pc, #176]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262c6:	4a2b      	ldr	r2, [pc, #172]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262c8:	f043 0301 	orr.w	r3, r3, #1
 80262cc:	6313      	str	r3, [r2, #48]	; 0x30
 80262ce:	4b29      	ldr	r3, [pc, #164]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262d2:	f003 0301 	and.w	r3, r3, #1
 80262d6:	607b      	str	r3, [r7, #4]
 80262d8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80262da:	2300      	movs	r3, #0
 80262dc:	603b      	str	r3, [r7, #0]
 80262de:	4b25      	ldr	r3, [pc, #148]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262e2:	4a24      	ldr	r2, [pc, #144]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262e4:	f043 0302 	orr.w	r3, r3, #2
 80262e8:	6313      	str	r3, [r2, #48]	; 0x30
 80262ea:	4b22      	ldr	r3, [pc, #136]	; (8026374 <spi_flash_gpio_init+0xe8>)
 80262ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262ee:	f003 0302 	and.w	r3, r3, #2
 80262f2:	603b      	str	r3, [r7, #0]
 80262f4:	683b      	ldr	r3, [r7, #0]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80262f6:	2308      	movs	r3, #8
 80262f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80262fa:	2302      	movs	r3, #2
 80262fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80262fe:	2300      	movs	r3, #0
 8026300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026302:	2301      	movs	r3, #1
 8026304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026306:	2305      	movs	r3, #5
 8026308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 802630a:	f107 030c 	add.w	r3, r7, #12
 802630e:	4619      	mov	r1, r3
 8026310:	4819      	ldr	r0, [pc, #100]	; (8026378 <spi_flash_gpio_init+0xec>)
 8026312:	f001 ffb7 	bl	8028284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8026316:	2380      	movs	r3, #128	; 0x80
 8026318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802631a:	2302      	movs	r3, #2
 802631c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802631e:	2300      	movs	r3, #0
 8026320:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026322:	2305      	movs	r3, #5
 8026324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026326:	f107 030c 	add.w	r3, r7, #12
 802632a:	4619      	mov	r1, r3
 802632c:	4813      	ldr	r0, [pc, #76]	; (802637c <spi_flash_gpio_init+0xf0>)
 802632e:	f001 ffa9 	bl	8028284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8026332:	2340      	movs	r3, #64	; 0x40
 8026334:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026336:	2300      	movs	r3, #0
 8026338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802633a:	2300      	movs	r3, #0
 802633c:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802633e:	2305      	movs	r3, #5
 8026340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026342:	f107 030c 	add.w	r3, r7, #12
 8026346:	4619      	mov	r1, r3
 8026348:	480c      	ldr	r0, [pc, #48]	; (802637c <spi_flash_gpio_init+0xf0>)
 802634a:	f001 ff9b 	bl	8028284 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 802634e:	2310      	movs	r3, #16
 8026350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026352:	2301      	movs	r3, #1
 8026354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026356:	2300      	movs	r3, #0
 8026358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 802635a:	2301      	movs	r3, #1
 802635c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 802635e:	f107 030c 	add.w	r3, r7, #12
 8026362:	4619      	mov	r1, r3
 8026364:	4805      	ldr	r0, [pc, #20]	; (802637c <spi_flash_gpio_init+0xf0>)
 8026366:	f001 ff8d 	bl	8028284 <HAL_GPIO_Init>
}
 802636a:	bf00      	nop
 802636c:	3720      	adds	r7, #32
 802636e:	46bd      	mov	sp, r7
 8026370:	bd80      	pop	{r7, pc}
 8026372:	bf00      	nop
 8026374:	40023800 	.word	0x40023800
 8026378:	40020400 	.word	0x40020400
 802637c:	40020000 	.word	0x40020000

08026380 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 8026380:	b580      	push	{r7, lr}
 8026382:	b086      	sub	sp, #24
 8026384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026386:	1d3b      	adds	r3, r7, #4
 8026388:	2200      	movs	r2, #0
 802638a:	601a      	str	r2, [r3, #0]
 802638c:	605a      	str	r2, [r3, #4]
 802638e:	609a      	str	r2, [r3, #8]
 8026390:	60da      	str	r2, [r3, #12]
 8026392:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_DISABLE();
 8026394:	4b1a      	ldr	r3, [pc, #104]	; (8026400 <spi_flash_gpio_uninit+0x80>)
 8026396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026398:	4a19      	ldr	r2, [pc, #100]	; (8026400 <spi_flash_gpio_uninit+0x80>)
 802639a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802639e:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80263a0:	2308      	movs	r3, #8
 80263a2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80263a4:	2300      	movs	r3, #0
 80263a6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263a8:	2300      	movs	r3, #0
 80263aa:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80263ac:	2305      	movs	r3, #5
 80263ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80263b0:	1d3b      	adds	r3, r7, #4
 80263b2:	4619      	mov	r1, r3
 80263b4:	4813      	ldr	r0, [pc, #76]	; (8026404 <spi_flash_gpio_uninit+0x84>)
 80263b6:	f001 ff65 	bl	8028284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80263ba:	2380      	movs	r3, #128	; 0x80
 80263bc:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263be:	2300      	movs	r3, #0
 80263c0:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80263c2:	2305      	movs	r3, #5
 80263c4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80263c6:	1d3b      	adds	r3, r7, #4
 80263c8:	4619      	mov	r1, r3
 80263ca:	480f      	ldr	r0, [pc, #60]	; (8026408 <spi_flash_gpio_uninit+0x88>)
 80263cc:	f001 ff5a 	bl	8028284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80263d0:	2340      	movs	r3, #64	; 0x40
 80263d2:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263d4:	2300      	movs	r3, #0
 80263d6:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80263d8:	2305      	movs	r3, #5
 80263da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80263dc:	1d3b      	adds	r3, r7, #4
 80263de:	4619      	mov	r1, r3
 80263e0:	4809      	ldr	r0, [pc, #36]	; (8026408 <spi_flash_gpio_uninit+0x88>)
 80263e2:	f001 ff4f 	bl	8028284 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80263e6:	2310      	movs	r3, #16
 80263e8:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263ea:	2300      	movs	r3, #0
 80263ec:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80263ee:	1d3b      	adds	r3, r7, #4
 80263f0:	4619      	mov	r1, r3
 80263f2:	4805      	ldr	r0, [pc, #20]	; (8026408 <spi_flash_gpio_uninit+0x88>)
 80263f4:	f001 ff46 	bl	8028284 <HAL_GPIO_Init>
}
 80263f8:	bf00      	nop
 80263fa:	3718      	adds	r7, #24
 80263fc:	46bd      	mov	sp, r7
 80263fe:	bd80      	pop	{r7, pc}
 8026400:	40023800 	.word	0x40023800
 8026404:	40020400 	.word	0x40020400
 8026408:	40020000 	.word	0x40020000

0802640c <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 802640c:	b580      	push	{r7, lr}
 802640e:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026410:	2200      	movs	r2, #0
 8026412:	2110      	movs	r1, #16
 8026414:	4802      	ldr	r0, [pc, #8]	; (8026420 <spi_flash_select_chip+0x14>)
 8026416:	f002 f9cd 	bl	80287b4 <HAL_GPIO_WritePin>
}
 802641a:	bf00      	nop
 802641c:	bd80      	pop	{r7, pc}
 802641e:	bf00      	nop
 8026420:	40020000 	.word	0x40020000

08026424 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026424:	b580      	push	{r7, lr}
 8026426:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026428:	2201      	movs	r2, #1
 802642a:	2110      	movs	r1, #16
 802642c:	4802      	ldr	r0, [pc, #8]	; (8026438 <spi_flash_deselect_chip+0x14>)
 802642e:	f002 f9c1 	bl	80287b4 <HAL_GPIO_WritePin>
}
 8026432:	bf00      	nop
 8026434:	bd80      	pop	{r7, pc}
 8026436:	bf00      	nop
 8026438:	40020000 	.word	0x40020000

0802643c <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 802643c:	b480      	push	{r7}
 802643e:	b085      	sub	sp, #20
 8026440:	af00      	add	r7, sp, #0
 8026442:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026444:	4b1f      	ldr	r3, [pc, #124]	; (80264c4 <spi_flash_get_baud_rate_prescaler+0x88>)
 8026446:	681b      	ldr	r3, [r3, #0]
 8026448:	4a1f      	ldr	r2, [pc, #124]	; (80264c8 <spi_flash_get_baud_rate_prescaler+0x8c>)
 802644a:	fba2 2303 	umull	r2, r3, r2, r3
 802644e:	099b      	lsrs	r3, r3, #6
 8026450:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026452:	68fb      	ldr	r3, [r7, #12]
 8026454:	085b      	lsrs	r3, r3, #1
 8026456:	687a      	ldr	r2, [r7, #4]
 8026458:	429a      	cmp	r2, r3
 802645a:	d301      	bcc.n	8026460 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 802645c:	2300      	movs	r3, #0
 802645e:	e02a      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026460:	68fb      	ldr	r3, [r7, #12]
 8026462:	089b      	lsrs	r3, r3, #2
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	429a      	cmp	r2, r3
 8026468:	d301      	bcc.n	802646e <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 802646a:	2308      	movs	r3, #8
 802646c:	e023      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 802646e:	68fb      	ldr	r3, [r7, #12]
 8026470:	08db      	lsrs	r3, r3, #3
 8026472:	687a      	ldr	r2, [r7, #4]
 8026474:	429a      	cmp	r2, r3
 8026476:	d301      	bcc.n	802647c <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8026478:	2310      	movs	r3, #16
 802647a:	e01c      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 802647c:	68fb      	ldr	r3, [r7, #12]
 802647e:	091b      	lsrs	r3, r3, #4
 8026480:	687a      	ldr	r2, [r7, #4]
 8026482:	429a      	cmp	r2, r3
 8026484:	d301      	bcc.n	802648a <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 8026486:	2318      	movs	r3, #24
 8026488:	e015      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 802648a:	68fb      	ldr	r3, [r7, #12]
 802648c:	095b      	lsrs	r3, r3, #5
 802648e:	687a      	ldr	r2, [r7, #4]
 8026490:	429a      	cmp	r2, r3
 8026492:	d301      	bcc.n	8026498 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8026494:	2320      	movs	r3, #32
 8026496:	e00e      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	099b      	lsrs	r3, r3, #6
 802649c:	687a      	ldr	r2, [r7, #4]
 802649e:	429a      	cmp	r2, r3
 80264a0:	d301      	bcc.n	80264a6 <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 80264a2:	2328      	movs	r3, #40	; 0x28
 80264a4:	e007      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 80264a6:	68fb      	ldr	r3, [r7, #12]
 80264a8:	09db      	lsrs	r3, r3, #7
 80264aa:	687a      	ldr	r2, [r7, #4]
 80264ac:	429a      	cmp	r2, r3
 80264ae:	d301      	bcc.n	80264b4 <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 80264b0:	2330      	movs	r3, #48	; 0x30
 80264b2:	e000      	b.n	80264b6 <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 80264b4:	2338      	movs	r3, #56	; 0x38
}
 80264b6:	4618      	mov	r0, r3
 80264b8:	3714      	adds	r7, #20
 80264ba:	46bd      	mov	sp, r7
 80264bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264c0:	4770      	bx	lr
 80264c2:	bf00      	nop
 80264c4:	20000138 	.word	0x20000138
 80264c8:	10624dd3 	.word	0x10624dd3

080264cc <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 80264cc:	b590      	push	{r4, r7, lr}
 80264ce:	b08f      	sub	sp, #60	; 0x3c
 80264d0:	af00      	add	r7, sp, #0
 80264d2:	6078      	str	r0, [r7, #4]
 80264d4:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 80264d6:	683b      	ldr	r3, [r7, #0]
 80264d8:	2b0e      	cmp	r3, #14
 80264da:	d802      	bhi.n	80264e2 <spi_flash_init+0x16>
        return -1; 
 80264dc:	f04f 33ff 	mov.w	r3, #4294967295
 80264e0:	e041      	b.n	8026566 <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 80264e2:	4b23      	ldr	r3, [pc, #140]	; (8026570 <spi_flash_init+0xa4>)
 80264e4:	687a      	ldr	r2, [r7, #4]
 80264e6:	4614      	mov	r4, r2
 80264e8:	6820      	ldr	r0, [r4, #0]
 80264ea:	6861      	ldr	r1, [r4, #4]
 80264ec:	68a2      	ldr	r2, [r4, #8]
 80264ee:	c307      	stmia	r3!, {r0, r1, r2}
 80264f0:	89a2      	ldrh	r2, [r4, #12]
 80264f2:	7ba1      	ldrb	r1, [r4, #14]
 80264f4:	801a      	strh	r2, [r3, #0]
 80264f6:	460a      	mov	r2, r1
 80264f8:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 80264fa:	f7ff fec7 	bl	802628c <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80264fe:	f7ff ff91 	bl	8026424 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 8026502:	4b1c      	ldr	r3, [pc, #112]	; (8026574 <spi_flash_init+0xa8>)
 8026504:	2200      	movs	r2, #0
 8026506:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 8026508:	4b1a      	ldr	r3, [pc, #104]	; (8026574 <spi_flash_init+0xa8>)
 802650a:	f44f 7282 	mov.w	r2, #260	; 0x104
 802650e:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 8026510:	4b18      	ldr	r3, [pc, #96]	; (8026574 <spi_flash_init+0xa8>)
 8026512:	2200      	movs	r2, #0
 8026514:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 8026516:	4b17      	ldr	r3, [pc, #92]	; (8026574 <spi_flash_init+0xa8>)
 8026518:	2202      	movs	r2, #2
 802651a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 802651c:	4b15      	ldr	r3, [pc, #84]	; (8026574 <spi_flash_init+0xa8>)
 802651e:	2201      	movs	r2, #1
 8026520:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 8026522:	4b14      	ldr	r3, [pc, #80]	; (8026574 <spi_flash_init+0xa8>)
 8026524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026528:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 802652a:	4b11      	ldr	r3, [pc, #68]	; (8026570 <spi_flash_init+0xa4>)
 802652c:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8026530:	4618      	mov	r0, r3
 8026532:	f7ff ff83 	bl	802643c <spi_flash_get_baud_rate_prescaler>
 8026536:	4603      	mov	r3, r0
 8026538:	461a      	mov	r2, r3
 802653a:	4b0e      	ldr	r3, [pc, #56]	; (8026574 <spi_flash_init+0xa8>)
 802653c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 802653e:	4b0d      	ldr	r3, [pc, #52]	; (8026574 <spi_flash_init+0xa8>)
 8026540:	2200      	movs	r2, #0
 8026542:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 8026544:	4b0b      	ldr	r3, [pc, #44]	; (8026574 <spi_flash_init+0xa8>)
 8026546:	2200      	movs	r2, #0
 8026548:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 802654a:	4b0a      	ldr	r3, [pc, #40]	; (8026574 <spi_flash_init+0xa8>)
 802654c:	220a      	movs	r2, #10
 802654e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026550:	4808      	ldr	r0, [pc, #32]	; (8026574 <spi_flash_init+0xa8>)
 8026552:	f004 fca2 	bl	802ae9a <HAL_SPI_Init>
 8026556:	4603      	mov	r3, r0
 8026558:	2b00      	cmp	r3, #0
 802655a:	d001      	beq.n	8026560 <spi_flash_init+0x94>
    {
      Error_Handler();
 802655c:	f7fd fa5e 	bl	8023a1c <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 8026560:	f000 f95a 	bl	8026818 <spi_flash_chip_init>

    return 0;
 8026564:	2300      	movs	r3, #0
}
 8026566:	4618      	mov	r0, r3
 8026568:	373c      	adds	r7, #60	; 0x3c
 802656a:	46bd      	mov	sp, r7
 802656c:	bd90      	pop	{r4, r7, pc}
 802656e:	bf00      	nop
 8026570:	20005188 	.word	0x20005188
 8026574:	20005130 	.word	0x20005130

08026578 <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8026578:	b580      	push	{r7, lr}
 802657a:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 802657c:	f7ff ff00 	bl	8026380 <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 8026580:	4802      	ldr	r0, [pc, #8]	; (802658c <spi_flash_uninit+0x14>)
 8026582:	f004 fd13 	bl	802afac <HAL_SPI_DeInit>
}
 8026586:	bf00      	nop
 8026588:	bd80      	pop	{r7, pc}
 802658a:	bf00      	nop
 802658c:	20005130 	.word	0x20005130

08026590 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026590:	b580      	push	{r7, lr}
 8026592:	b084      	sub	sp, #16
 8026594:	af00      	add	r7, sp, #0
 8026596:	4603      	mov	r3, r0
 8026598:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // 等待SPI空闲
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 802659a:	bf00      	nop
 802659c:	480c      	ldr	r0, [pc, #48]	; (80265d0 <spi_flash_send_byte+0x40>)
 802659e:	f005 fa1b 	bl	802b9d8 <HAL_SPI_GetState>
 80265a2:	4603      	mov	r3, r0
 80265a4:	2b01      	cmp	r3, #1
 80265a6:	d1f9      	bne.n	802659c <spi_flash_send_byte+0xc>

    // 发送数据
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80265a8:	1df9      	adds	r1, r7, #7
 80265aa:	f04f 33ff 	mov.w	r3, #4294967295
 80265ae:	2201      	movs	r2, #1
 80265b0:	4807      	ldr	r0, [pc, #28]	; (80265d0 <spi_flash_send_byte+0x40>)
 80265b2:	f004 fd23 	bl	802affc <HAL_SPI_Transmit>

    // 接收数据
    HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 80265b6:	f107 010f 	add.w	r1, r7, #15
 80265ba:	f04f 33ff 	mov.w	r3, #4294967295
 80265be:	2201      	movs	r2, #1
 80265c0:	4803      	ldr	r0, [pc, #12]	; (80265d0 <spi_flash_send_byte+0x40>)
 80265c2:	f004 fe57 	bl	802b274 <HAL_SPI_Receive>

    return rxData;
 80265c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80265c8:	4618      	mov	r0, r3
 80265ca:	3710      	adds	r7, #16
 80265cc:	46bd      	mov	sp, r7
 80265ce:	bd80      	pop	{r7, pc}
 80265d0:	20005130 	.word	0x20005130

080265d4 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 80265d4:	b580      	push	{r7, lr}
 80265d6:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80265d8:	20ff      	movs	r0, #255	; 0xff
 80265da:	f7ff ffd9 	bl	8026590 <spi_flash_send_byte>
 80265de:	4603      	mov	r3, r0
}
 80265e0:	4618      	mov	r0, r3
 80265e2:	bd80      	pop	{r7, pc}

080265e4 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 80265e4:	b580      	push	{r7, lr}
 80265e6:	b082      	sub	sp, #8
 80265e8:	af00      	add	r7, sp, #0
 80265ea:	4603      	mov	r3, r0
 80265ec:	460a      	mov	r2, r1
 80265ee:	71fb      	strb	r3, [r7, #7]
 80265f0:	4613      	mov	r3, r2
 80265f2:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 80265f4:	f7ff ff0a 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 80265f8:	201f      	movs	r0, #31
 80265fa:	f7ff ffc9 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80265fe:	79fb      	ldrb	r3, [r7, #7]
 8026600:	4618      	mov	r0, r3
 8026602:	f7ff ffc5 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 8026606:	79bb      	ldrb	r3, [r7, #6]
 8026608:	4618      	mov	r0, r3
 802660a:	f7ff ffc1 	bl	8026590 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 802660e:	f7ff ff09 	bl	8026424 <spi_flash_deselect_chip>
}
 8026612:	bf00      	nop
 8026614:	3708      	adds	r7, #8
 8026616:	46bd      	mov	sp, r7
 8026618:	bd80      	pop	{r7, pc}

0802661a <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 802661a:	b580      	push	{r7, lr}
 802661c:	b082      	sub	sp, #8
 802661e:	af00      	add	r7, sp, #0
 8026620:	4603      	mov	r3, r0
 8026622:	6039      	str	r1, [r7, #0]
 8026624:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 8026626:	f7ff fef1 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 802662a:	200f      	movs	r0, #15
 802662c:	f7ff ffb0 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026630:	79fb      	ldrb	r3, [r7, #7]
 8026632:	4618      	mov	r0, r3
 8026634:	f7ff ffac 	bl	8026590 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 8026638:	f7ff ffcc 	bl	80265d4 <spi_flash_read_byte>
 802663c:	4603      	mov	r3, r0
 802663e:	461a      	mov	r2, r3
 8026640:	683b      	ldr	r3, [r7, #0]
 8026642:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026644:	f7ff feee 	bl	8026424 <spi_flash_deselect_chip>
}
 8026648:	bf00      	nop
 802664a:	3708      	adds	r7, #8
 802664c:	46bd      	mov	sp, r7
 802664e:	bd80      	pop	{r7, pc}

08026650 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026650:	b580      	push	{r7, lr}
 8026652:	b082      	sub	sp, #8
 8026654:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 8026656:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802665a:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 802665c:	1cfb      	adds	r3, r7, #3
 802665e:	4619      	mov	r1, r3
 8026660:	20c0      	movs	r0, #192	; 0xc0
 8026662:	f7ff ffda 	bl	802661a <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 8026666:	78fb      	ldrb	r3, [r7, #3]
 8026668:	f003 0301 	and.w	r3, r3, #1
 802666c:	2b00      	cmp	r3, #0
 802666e:	d002      	beq.n	8026676 <spi_flash_read_status+0x26>
 8026670:	687b      	ldr	r3, [r7, #4]
 8026672:	2b00      	cmp	r3, #0
 8026674:	d1f2      	bne.n	802665c <spi_flash_read_status+0xc>

    if (!timeout)
 8026676:	687b      	ldr	r3, [r7, #4]
 8026678:	2b00      	cmp	r3, #0
 802667a:	d101      	bne.n	8026680 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 802667c:	2303      	movs	r3, #3
 802667e:	e02b      	b.n	80266d8 <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 8026680:	4b17      	ldr	r3, [pc, #92]	; (80266e0 <spi_flash_read_status+0x90>)
 8026682:	681b      	ldr	r3, [r3, #0]
 8026684:	2b03      	cmp	r3, #3
 8026686:	d014      	beq.n	80266b2 <spi_flash_read_status+0x62>
 8026688:	2b03      	cmp	r3, #3
 802668a:	d81d      	bhi.n	80266c8 <spi_flash_read_status+0x78>
 802668c:	2b01      	cmp	r3, #1
 802668e:	d002      	beq.n	8026696 <spi_flash_read_status+0x46>
 8026690:	2b02      	cmp	r3, #2
 8026692:	d007      	beq.n	80266a4 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 8026694:	e018      	b.n	80266c8 <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 8026696:	78fb      	ldrb	r3, [r7, #3]
 8026698:	f003 0304 	and.w	r3, r3, #4
 802669c:	2b00      	cmp	r3, #0
 802669e:	d015      	beq.n	80266cc <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 80266a0:	2302      	movs	r3, #2
 80266a2:	e019      	b.n	80266d8 <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 80266a4:	78fb      	ldrb	r3, [r7, #3]
 80266a6:	f003 0308 	and.w	r3, r3, #8
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d010      	beq.n	80266d0 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 80266ae:	2302      	movs	r3, #2
 80266b0:	e012      	b.n	80266d8 <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 80266b2:	4b0c      	ldr	r3, [pc, #48]	; (80266e4 <spi_flash_read_status+0x94>)
 80266b4:	799a      	ldrb	r2, [r3, #6]
 80266b6:	78fb      	ldrb	r3, [r7, #3]
 80266b8:	4013      	ands	r3, r2
 80266ba:	b2da      	uxtb	r2, r3
 80266bc:	4b09      	ldr	r3, [pc, #36]	; (80266e4 <spi_flash_read_status+0x94>)
 80266be:	79db      	ldrb	r3, [r3, #7]
 80266c0:	429a      	cmp	r2, r3
 80266c2:	d107      	bne.n	80266d4 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 80266c4:	2302      	movs	r3, #2
 80266c6:	e007      	b.n	80266d8 <spi_flash_read_status+0x88>
            break;
 80266c8:	bf00      	nop
 80266ca:	e004      	b.n	80266d6 <spi_flash_read_status+0x86>
            break;
 80266cc:	bf00      	nop
 80266ce:	e002      	b.n	80266d6 <spi_flash_read_status+0x86>
            break;
 80266d0:	bf00      	nop
 80266d2:	e000      	b.n	80266d6 <spi_flash_read_status+0x86>
            break;
 80266d4:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 80266d6:	2300      	movs	r3, #0
}
 80266d8:	4618      	mov	r0, r3
 80266da:	3708      	adds	r7, #8
 80266dc:	46bd      	mov	sp, r7
 80266de:	bd80      	pop	{r7, pc}
 80266e0:	20005198 	.word	0x20005198
 80266e4:	20005188 	.word	0x20005188

080266e8 <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 80266e8:	b580      	push	{r7, lr}
 80266ea:	b084      	sub	sp, #16
 80266ec:	af00      	add	r7, sp, #0
 80266ee:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 80266f0:	4b18      	ldr	r3, [pc, #96]	; (8026754 <spi_flash_select_die_cmd+0x6c>)
 80266f2:	7a9b      	ldrb	r3, [r3, #10]
 80266f4:	2b01      	cmp	r3, #1
 80266f6:	d002      	beq.n	80266fe <spi_flash_select_die_cmd+0x16>
 80266f8:	2b02      	cmp	r3, #2
 80266fa:	d00d      	beq.n	8026718 <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 80266fc:	e026      	b.n	802674c <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 80266fe:	f7ff fe85 	bl	802640c <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 8026702:	20c2      	movs	r0, #194	; 0xc2
 8026704:	f7ff ff44 	bl	8026590 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	b2db      	uxtb	r3, r3
 802670c:	4618      	mov	r0, r3
 802670e:	f7ff ff3f 	bl	8026590 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8026712:	f7ff fe87 	bl	8026424 <spi_flash_deselect_chip>
        break;
 8026716:	e019      	b.n	802674c <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 8026718:	f107 030f 	add.w	r3, r7, #15
 802671c:	4619      	mov	r1, r3
 802671e:	20d0      	movs	r0, #208	; 0xd0
 8026720:	f7ff ff7b 	bl	802661a <spi_flash_get_feature>
        if(die == 0) {
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	2b00      	cmp	r3, #0
 8026728:	d105      	bne.n	8026736 <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 802672a:	7bfb      	ldrb	r3, [r7, #15]
 802672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026730:	b2db      	uxtb	r3, r3
 8026732:	73fb      	strb	r3, [r7, #15]
 8026734:	e004      	b.n	8026740 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 8026736:	7bfb      	ldrb	r3, [r7, #15]
 8026738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802673c:	b2db      	uxtb	r3, r3
 802673e:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8026740:	7bfb      	ldrb	r3, [r7, #15]
 8026742:	4619      	mov	r1, r3
 8026744:	20d0      	movs	r0, #208	; 0xd0
 8026746:	f7ff ff4d 	bl	80265e4 <spi_flash_set_feature>
        break;
 802674a:	bf00      	nop
    }
}
 802674c:	bf00      	nop
 802674e:	3710      	adds	r7, #16
 8026750:	46bd      	mov	sp, r7
 8026752:	bd80      	pop	{r7, pc}
 8026754:	20005188 	.word	0x20005188

08026758 <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 8026758:	b580      	push	{r7, lr}
 802675a:	b084      	sub	sp, #16
 802675c:	af00      	add	r7, sp, #0
 802675e:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8026760:	2300      	movs	r3, #0
 8026762:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8026764:	4b0f      	ldr	r3, [pc, #60]	; (80267a4 <spi_flash_select_die+0x4c>)
 8026766:	7a9b      	ldrb	r3, [r3, #10]
 8026768:	2b00      	cmp	r3, #0
 802676a:	d017      	beq.n	802679c <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 802676c:	4b0d      	ldr	r3, [pc, #52]	; (80267a4 <spi_flash_select_die+0x4c>)
 802676e:	7a5b      	ldrb	r3, [r3, #9]
 8026770:	2b00      	cmp	r3, #0
 8026772:	d104      	bne.n	802677e <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	0c1b      	lsrs	r3, r3, #16
 8026778:	b2db      	uxtb	r3, r3
 802677a:	60fb      	str	r3, [r7, #12]
 802677c:	e003      	b.n	8026786 <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	0c5b      	lsrs	r3, r3, #17
 8026782:	b2db      	uxtb	r3, r3
 8026784:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 8026786:	4b08      	ldr	r3, [pc, #32]	; (80267a8 <spi_flash_select_die+0x50>)
 8026788:	681b      	ldr	r3, [r3, #0]
 802678a:	68fa      	ldr	r2, [r7, #12]
 802678c:	429a      	cmp	r2, r3
 802678e:	d005      	beq.n	802679c <spi_flash_select_die+0x44>
            current_die = die;
 8026790:	4a05      	ldr	r2, [pc, #20]	; (80267a8 <spi_flash_select_die+0x50>)
 8026792:	68fb      	ldr	r3, [r7, #12]
 8026794:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 8026796:	68f8      	ldr	r0, [r7, #12]
 8026798:	f7ff ffa6 	bl	80266e8 <spi_flash_select_die_cmd>
        }
    }
}
 802679c:	bf00      	nop
 802679e:	3710      	adds	r7, #16
 80267a0:	46bd      	mov	sp, r7
 80267a2:	bd80      	pop	{r7, pc}
 80267a4:	20005188 	.word	0x20005188
 80267a8:	2000519c 	.word	0x2000519c

080267ac <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 80267ac:	b580      	push	{r7, lr}
 80267ae:	b082      	sub	sp, #8
 80267b0:	af00      	add	r7, sp, #0
 80267b2:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80267b4:	f7ff fe2a 	bl	802640c <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 80267b8:	209f      	movs	r0, #159	; 0x9f
 80267ba:	f7ff fee9 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 80267be:	2000      	movs	r0, #0
 80267c0:	f7ff fee6 	bl	8026590 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 80267c4:	f7ff ff06 	bl	80265d4 <spi_flash_read_byte>
 80267c8:	4603      	mov	r3, r0
 80267ca:	461a      	mov	r2, r3
 80267cc:	687b      	ldr	r3, [r7, #4]
 80267ce:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 80267d0:	f7ff ff00 	bl	80265d4 <spi_flash_read_byte>
 80267d4:	4603      	mov	r3, r0
 80267d6:	461a      	mov	r2, r3
 80267d8:	687b      	ldr	r3, [r7, #4]
 80267da:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 80267dc:	f7ff fefa 	bl	80265d4 <spi_flash_read_byte>
 80267e0:	4603      	mov	r3, r0
 80267e2:	461a      	mov	r2, r3
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 80267e8:	f7ff fef4 	bl	80265d4 <spi_flash_read_byte>
 80267ec:	4603      	mov	r3, r0
 80267ee:	461a      	mov	r2, r3
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 80267f4:	f7ff feee 	bl	80265d4 <spi_flash_read_byte>
 80267f8:	4603      	mov	r3, r0
 80267fa:	461a      	mov	r2, r3
 80267fc:	687b      	ldr	r3, [r7, #4]
 80267fe:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8026800:	f7ff fee8 	bl	80265d4 <spi_flash_read_byte>
 8026804:	4603      	mov	r3, r0
 8026806:	461a      	mov	r2, r3
 8026808:	687b      	ldr	r3, [r7, #4]
 802680a:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 802680c:	f7ff fe0a 	bl	8026424 <spi_flash_deselect_chip>
}
 8026810:	bf00      	nop
 8026812:	3708      	adds	r7, #8
 8026814:	46bd      	mov	sp, r7
 8026816:	bd80      	pop	{r7, pc}

08026818 <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 8026818:	b580      	push	{r7, lr}
 802681a:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 802681c:	4b19      	ldr	r3, [pc, #100]	; (8026884 <spi_flash_chip_init+0x6c>)
 802681e:	7a9b      	ldrb	r3, [r3, #10]
 8026820:	2b00      	cmp	r3, #0
 8026822:	d019      	beq.n	8026858 <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 8026824:	2000      	movs	r0, #0
 8026826:	f7ff ff5f 	bl	80266e8 <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 802682a:	4b16      	ldr	r3, [pc, #88]	; (8026884 <spi_flash_chip_init+0x6c>)
 802682c:	791b      	ldrb	r3, [r3, #4]
 802682e:	2bff      	cmp	r3, #255	; 0xff
 8026830:	d005      	beq.n	802683e <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8026832:	4b14      	ldr	r3, [pc, #80]	; (8026884 <spi_flash_chip_init+0x6c>)
 8026834:	791b      	ldrb	r3, [r3, #4]
 8026836:	4619      	mov	r1, r3
 8026838:	20b0      	movs	r0, #176	; 0xb0
 802683a:	f7ff fed3 	bl	80265e4 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 802683e:	4b11      	ldr	r3, [pc, #68]	; (8026884 <spi_flash_chip_init+0x6c>)
 8026840:	795b      	ldrb	r3, [r3, #5]
 8026842:	2bff      	cmp	r3, #255	; 0xff
 8026844:	d005      	beq.n	8026852 <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 8026846:	4b0f      	ldr	r3, [pc, #60]	; (8026884 <spi_flash_chip_init+0x6c>)
 8026848:	795b      	ldrb	r3, [r3, #5]
 802684a:	4619      	mov	r1, r3
 802684c:	20a0      	movs	r0, #160	; 0xa0
 802684e:	f7ff fec9 	bl	80265e4 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 8026852:	2001      	movs	r0, #1
 8026854:	f7ff ff48 	bl	80266e8 <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 8026858:	4b0a      	ldr	r3, [pc, #40]	; (8026884 <spi_flash_chip_init+0x6c>)
 802685a:	791b      	ldrb	r3, [r3, #4]
 802685c:	2bff      	cmp	r3, #255	; 0xff
 802685e:	d005      	beq.n	802686c <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8026860:	4b08      	ldr	r3, [pc, #32]	; (8026884 <spi_flash_chip_init+0x6c>)
 8026862:	791b      	ldrb	r3, [r3, #4]
 8026864:	4619      	mov	r1, r3
 8026866:	20b0      	movs	r0, #176	; 0xb0
 8026868:	f7ff febc 	bl	80265e4 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 802686c:	4b05      	ldr	r3, [pc, #20]	; (8026884 <spi_flash_chip_init+0x6c>)
 802686e:	795b      	ldrb	r3, [r3, #5]
 8026870:	2bff      	cmp	r3, #255	; 0xff
 8026872:	d005      	beq.n	8026880 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 8026874:	4b03      	ldr	r3, [pc, #12]	; (8026884 <spi_flash_chip_init+0x6c>)
 8026876:	795b      	ldrb	r3, [r3, #5]
 8026878:	4619      	mov	r1, r3
 802687a:	20a0      	movs	r0, #160	; 0xa0
 802687c:	f7ff feb2 	bl	80265e4 <spi_flash_set_feature>
}
 8026880:	bf00      	nop
 8026882:	bd80      	pop	{r7, pc}
 8026884:	20005188 	.word	0x20005188

08026888 <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 8026888:	b580      	push	{r7, lr}
 802688a:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 802688c:	f7ff fdbe 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8026890:	2006      	movs	r0, #6
 8026892:	f7ff fe7d 	bl	8026590 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 8026896:	f7ff fdc5 	bl	8026424 <spi_flash_deselect_chip>
}
 802689a:	bf00      	nop
 802689c:	bd80      	pop	{r7, pc}
	...

080268a0 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 80268a0:	b580      	push	{r7, lr}
 80268a2:	b086      	sub	sp, #24
 80268a4:	af00      	add	r7, sp, #0
 80268a6:	60f8      	str	r0, [r7, #12]
 80268a8:	60b9      	str	r1, [r7, #8]
 80268aa:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 80268ac:	2300      	movs	r3, #0
 80268ae:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80268b0:	f7ff fdac 	bl	802640c <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 80268b4:	2002      	movs	r0, #2
 80268b6:	f7ff fe6b 	bl	8026590 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 80268ba:	4b1f      	ldr	r3, [pc, #124]	; (8026938 <spi_flash_program_load+0x98>)
 80268bc:	7a5b      	ldrb	r3, [r3, #9]
 80268be:	2b00      	cmp	r3, #0
 80268c0:	d018      	beq.n	80268f4 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 80268c2:	687b      	ldr	r3, [r7, #4]
 80268c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80268c8:	2b00      	cmp	r3, #0
 80268ca:	d009      	beq.n	80268e0 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 80268cc:	693b      	ldr	r3, [r7, #16]
 80268ce:	0a1b      	lsrs	r3, r3, #8
 80268d0:	b2db      	uxtb	r3, r3
 80268d2:	f043 0310 	orr.w	r3, r3, #16
 80268d6:	b2db      	uxtb	r3, r3
 80268d8:	4618      	mov	r0, r3
 80268da:	f7ff fe59 	bl	8026590 <spi_flash_send_byte>
 80268de:	e00f      	b.n	8026900 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 80268e0:	693b      	ldr	r3, [r7, #16]
 80268e2:	0a1b      	lsrs	r3, r3, #8
 80268e4:	b2db      	uxtb	r3, r3
 80268e6:	f023 0310 	bic.w	r3, r3, #16
 80268ea:	b2db      	uxtb	r3, r3
 80268ec:	4618      	mov	r0, r3
 80268ee:	f7ff fe4f 	bl	8026590 <spi_flash_send_byte>
 80268f2:	e005      	b.n	8026900 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 80268f4:	693b      	ldr	r3, [r7, #16]
 80268f6:	0a1b      	lsrs	r3, r3, #8
 80268f8:	b2db      	uxtb	r3, r3
 80268fa:	4618      	mov	r0, r3
 80268fc:	f7ff fe48 	bl	8026590 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8026900:	693b      	ldr	r3, [r7, #16]
 8026902:	b2db      	uxtb	r3, r3
 8026904:	4618      	mov	r0, r3
 8026906:	f7ff fe43 	bl	8026590 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 802690a:	2300      	movs	r3, #0
 802690c:	617b      	str	r3, [r7, #20]
 802690e:	e009      	b.n	8026924 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8026910:	68fa      	ldr	r2, [r7, #12]
 8026912:	697b      	ldr	r3, [r7, #20]
 8026914:	4413      	add	r3, r2
 8026916:	781b      	ldrb	r3, [r3, #0]
 8026918:	4618      	mov	r0, r3
 802691a:	f7ff fe39 	bl	8026590 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 802691e:	697b      	ldr	r3, [r7, #20]
 8026920:	3301      	adds	r3, #1
 8026922:	617b      	str	r3, [r7, #20]
 8026924:	697a      	ldr	r2, [r7, #20]
 8026926:	68bb      	ldr	r3, [r7, #8]
 8026928:	429a      	cmp	r2, r3
 802692a:	d3f1      	bcc.n	8026910 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 802692c:	f7ff fd7a 	bl	8026424 <spi_flash_deselect_chip>
}
 8026930:	bf00      	nop
 8026932:	3718      	adds	r7, #24
 8026934:	46bd      	mov	sp, r7
 8026936:	bd80      	pop	{r7, pc}
 8026938:	20005188 	.word	0x20005188

0802693c <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 802693c:	b580      	push	{r7, lr}
 802693e:	b084      	sub	sp, #16
 8026940:	af00      	add	r7, sp, #0
 8026942:	60f8      	str	r0, [r7, #12]
 8026944:	60b9      	str	r1, [r7, #8]
 8026946:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026948:	68b8      	ldr	r0, [r7, #8]
 802694a:	f7ff ff05 	bl	8026758 <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 802694e:	68ba      	ldr	r2, [r7, #8]
 8026950:	6879      	ldr	r1, [r7, #4]
 8026952:	68f8      	ldr	r0, [r7, #12]
 8026954:	f7ff ffa4 	bl	80268a0 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 8026958:	f7ff ff96 	bl	8026888 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 802695c:	f7ff fd56 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 8026960:	2010      	movs	r0, #16
 8026962:	f7ff fe15 	bl	8026590 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 8026966:	4b0d      	ldr	r3, [pc, #52]	; (802699c <spi_flash_write_page_async+0x60>)
 8026968:	2202      	movs	r2, #2
 802696a:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 802696c:	68bb      	ldr	r3, [r7, #8]
 802696e:	0c1b      	lsrs	r3, r3, #16
 8026970:	b2db      	uxtb	r3, r3
 8026972:	4618      	mov	r0, r3
 8026974:	f7ff fe0c 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026978:	68bb      	ldr	r3, [r7, #8]
 802697a:	0a1b      	lsrs	r3, r3, #8
 802697c:	b2db      	uxtb	r3, r3
 802697e:	4618      	mov	r0, r3
 8026980:	f7ff fe06 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026984:	68bb      	ldr	r3, [r7, #8]
 8026986:	b2db      	uxtb	r3, r3
 8026988:	4618      	mov	r0, r3
 802698a:	f7ff fe01 	bl	8026590 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 802698e:	f7ff fd49 	bl	8026424 <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 8026992:	bf00      	nop
 8026994:	3710      	adds	r7, #16
 8026996:	46bd      	mov	sp, r7
 8026998:	bd80      	pop	{r7, pc}
 802699a:	bf00      	nop
 802699c:	20005198 	.word	0x20005198

080269a0 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 80269a0:	b580      	push	{r7, lr}
 80269a2:	b082      	sub	sp, #8
 80269a4:	af00      	add	r7, sp, #0
 80269a6:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 80269a8:	6878      	ldr	r0, [r7, #4]
 80269aa:	f7ff fed5 	bl	8026758 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 80269ae:	f7ff fd2d 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 80269b2:	2013      	movs	r0, #19
 80269b4:	f7ff fdec 	bl	8026590 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 80269b8:	4b0e      	ldr	r3, [pc, #56]	; (80269f4 <spi_flash_load_page_into_cache+0x54>)
 80269ba:	2203      	movs	r2, #3
 80269bc:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80269be:	687b      	ldr	r3, [r7, #4]
 80269c0:	0c1b      	lsrs	r3, r3, #16
 80269c2:	b2db      	uxtb	r3, r3
 80269c4:	4618      	mov	r0, r3
 80269c6:	f7ff fde3 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	0a1b      	lsrs	r3, r3, #8
 80269ce:	b2db      	uxtb	r3, r3
 80269d0:	4618      	mov	r0, r3
 80269d2:	f7ff fddd 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80269d6:	687b      	ldr	r3, [r7, #4]
 80269d8:	b2db      	uxtb	r3, r3
 80269da:	4618      	mov	r0, r3
 80269dc:	f7ff fdd8 	bl	8026590 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80269e0:	f7ff fd20 	bl	8026424 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 80269e4:	f7ff fe34 	bl	8026650 <spi_flash_read_status>
 80269e8:	4603      	mov	r3, r0
}
 80269ea:	4618      	mov	r0, r3
 80269ec:	3708      	adds	r7, #8
 80269ee:	46bd      	mov	sp, r7
 80269f0:	bd80      	pop	{r7, pc}
 80269f2:	bf00      	nop
 80269f4:	20005198 	.word	0x20005198

080269f8 <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 80269f8:	b590      	push	{r4, r7, lr}
 80269fa:	b089      	sub	sp, #36	; 0x24
 80269fc:	af00      	add	r7, sp, #0
 80269fe:	60f8      	str	r0, [r7, #12]
 8026a00:	60b9      	str	r1, [r7, #8]
 8026a02:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8026a04:	68b8      	ldr	r0, [r7, #8]
 8026a06:	f7ff ffcb 	bl	80269a0 <spi_flash_load_page_into_cache>
 8026a0a:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8026a0c:	2300      	movs	r3, #0
 8026a0e:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8026a10:	f7ff fcfc 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8026a14:	2003      	movs	r0, #3
 8026a16:	f7ff fdbb 	bl	8026590 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8026a1a:	4b27      	ldr	r3, [pc, #156]	; (8026ab8 <spi_flash_read_page+0xc0>)
 8026a1c:	7a1b      	ldrb	r3, [r3, #8]
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d002      	beq.n	8026a28 <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8026a22:	20ff      	movs	r0, #255	; 0xff
 8026a24:	f7ff fdb4 	bl	8026590 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 8026a28:	4b23      	ldr	r3, [pc, #140]	; (8026ab8 <spi_flash_read_page+0xc0>)
 8026a2a:	7a5b      	ldrb	r3, [r3, #9]
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d018      	beq.n	8026a62 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8026a30:	68bb      	ldr	r3, [r7, #8]
 8026a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026a36:	2b00      	cmp	r3, #0
 8026a38:	d009      	beq.n	8026a4e <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 8026a3a:	697b      	ldr	r3, [r7, #20]
 8026a3c:	0a1b      	lsrs	r3, r3, #8
 8026a3e:	b2db      	uxtb	r3, r3
 8026a40:	f043 0310 	orr.w	r3, r3, #16
 8026a44:	b2db      	uxtb	r3, r3
 8026a46:	4618      	mov	r0, r3
 8026a48:	f7ff fda2 	bl	8026590 <spi_flash_send_byte>
 8026a4c:	e00f      	b.n	8026a6e <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8026a4e:	697b      	ldr	r3, [r7, #20]
 8026a50:	0a1b      	lsrs	r3, r3, #8
 8026a52:	b2db      	uxtb	r3, r3
 8026a54:	f023 0310 	bic.w	r3, r3, #16
 8026a58:	b2db      	uxtb	r3, r3
 8026a5a:	4618      	mov	r0, r3
 8026a5c:	f7ff fd98 	bl	8026590 <spi_flash_send_byte>
 8026a60:	e005      	b.n	8026a6e <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 8026a62:	697b      	ldr	r3, [r7, #20]
 8026a64:	0a1b      	lsrs	r3, r3, #8
 8026a66:	b2db      	uxtb	r3, r3
 8026a68:	4618      	mov	r0, r3
 8026a6a:	f7ff fd91 	bl	8026590 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8026a6e:	697b      	ldr	r3, [r7, #20]
 8026a70:	b2db      	uxtb	r3, r3
 8026a72:	4618      	mov	r0, r3
 8026a74:	f7ff fd8c 	bl	8026590 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026a78:	4b0f      	ldr	r3, [pc, #60]	; (8026ab8 <spi_flash_read_page+0xc0>)
 8026a7a:	7a1b      	ldrb	r3, [r3, #8]
 8026a7c:	2b00      	cmp	r3, #0
 8026a7e:	d102      	bne.n	8026a86 <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026a80:	20ff      	movs	r0, #255	; 0xff
 8026a82:	f7ff fd85 	bl	8026590 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8026a86:	2300      	movs	r3, #0
 8026a88:	61fb      	str	r3, [r7, #28]
 8026a8a:	e009      	b.n	8026aa0 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026a8c:	68fa      	ldr	r2, [r7, #12]
 8026a8e:	69fb      	ldr	r3, [r7, #28]
 8026a90:	18d4      	adds	r4, r2, r3
 8026a92:	f7ff fd9f 	bl	80265d4 <spi_flash_read_byte>
 8026a96:	4603      	mov	r3, r0
 8026a98:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026a9a:	69fb      	ldr	r3, [r7, #28]
 8026a9c:	3301      	adds	r3, #1
 8026a9e:	61fb      	str	r3, [r7, #28]
 8026aa0:	69fa      	ldr	r2, [r7, #28]
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	429a      	cmp	r2, r3
 8026aa6:	d3f1      	bcc.n	8026a8c <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026aa8:	f7ff fcbc 	bl	8026424 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026aac:	69bb      	ldr	r3, [r7, #24]
}
 8026aae:	4618      	mov	r0, r3
 8026ab0:	3724      	adds	r7, #36	; 0x24
 8026ab2:	46bd      	mov	sp, r7
 8026ab4:	bd90      	pop	{r4, r7, pc}
 8026ab6:	bf00      	nop
 8026ab8:	20005188 	.word	0x20005188

08026abc <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8026abc:	b590      	push	{r4, r7, lr}
 8026abe:	b087      	sub	sp, #28
 8026ac0:	af00      	add	r7, sp, #0
 8026ac2:	60f8      	str	r0, [r7, #12]
 8026ac4:	60b9      	str	r1, [r7, #8]
 8026ac6:	607a      	str	r2, [r7, #4]
 8026ac8:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 8026aca:	68b8      	ldr	r0, [r7, #8]
 8026acc:	f7ff fe44 	bl	8026758 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8026ad0:	f7ff fc9c 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8026ad4:	2013      	movs	r0, #19
 8026ad6:	f7ff fd5b 	bl	8026590 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 8026ada:	4b38      	ldr	r3, [pc, #224]	; (8026bbc <spi_flash_read_spare_data+0x100>)
 8026adc:	2204      	movs	r2, #4
 8026ade:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026ae0:	68bb      	ldr	r3, [r7, #8]
 8026ae2:	0c1b      	lsrs	r3, r3, #16
 8026ae4:	b2db      	uxtb	r3, r3
 8026ae6:	4618      	mov	r0, r3
 8026ae8:	f7ff fd52 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026aec:	68bb      	ldr	r3, [r7, #8]
 8026aee:	0a1b      	lsrs	r3, r3, #8
 8026af0:	b2db      	uxtb	r3, r3
 8026af2:	4618      	mov	r0, r3
 8026af4:	f7ff fd4c 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026af8:	68bb      	ldr	r3, [r7, #8]
 8026afa:	b2db      	uxtb	r3, r3
 8026afc:	4618      	mov	r0, r3
 8026afe:	f7ff fd47 	bl	8026590 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026b02:	f7ff fc8f 	bl	8026424 <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 8026b06:	f7ff fda3 	bl	8026650 <spi_flash_read_status>
 8026b0a:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8026b0c:	f7ff fc7e 	bl	802640c <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8026b10:	2003      	movs	r0, #3
 8026b12:	f7ff fd3d 	bl	8026590 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8026b16:	4b2a      	ldr	r3, [pc, #168]	; (8026bc0 <spi_flash_read_spare_data+0x104>)
 8026b18:	7a1b      	ldrb	r3, [r3, #8]
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d002      	beq.n	8026b24 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8026b1e:	20ff      	movs	r0, #255	; 0xff
 8026b20:	f7ff fd36 	bl	8026590 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8026b24:	4b26      	ldr	r3, [pc, #152]	; (8026bc0 <spi_flash_read_spare_data+0x104>)
 8026b26:	681b      	ldr	r3, [r3, #0]
 8026b28:	687a      	ldr	r2, [r7, #4]
 8026b2a:	4413      	add	r3, r2
 8026b2c:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8026b2e:	4b24      	ldr	r3, [pc, #144]	; (8026bc0 <spi_flash_read_spare_data+0x104>)
 8026b30:	7a5b      	ldrb	r3, [r3, #9]
 8026b32:	2b00      	cmp	r3, #0
 8026b34:	d018      	beq.n	8026b68 <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 8026b36:	68bb      	ldr	r3, [r7, #8]
 8026b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	d009      	beq.n	8026b54 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8026b40:	687b      	ldr	r3, [r7, #4]
 8026b42:	0a1b      	lsrs	r3, r3, #8
 8026b44:	b2db      	uxtb	r3, r3
 8026b46:	f043 0310 	orr.w	r3, r3, #16
 8026b4a:	b2db      	uxtb	r3, r3
 8026b4c:	4618      	mov	r0, r3
 8026b4e:	f7ff fd1f 	bl	8026590 <spi_flash_send_byte>
 8026b52:	e00f      	b.n	8026b74 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8026b54:	687b      	ldr	r3, [r7, #4]
 8026b56:	0a1b      	lsrs	r3, r3, #8
 8026b58:	b2db      	uxtb	r3, r3
 8026b5a:	f023 0310 	bic.w	r3, r3, #16
 8026b5e:	b2db      	uxtb	r3, r3
 8026b60:	4618      	mov	r0, r3
 8026b62:	f7ff fd15 	bl	8026590 <spi_flash_send_byte>
 8026b66:	e005      	b.n	8026b74 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	0a1b      	lsrs	r3, r3, #8
 8026b6c:	b2db      	uxtb	r3, r3
 8026b6e:	4618      	mov	r0, r3
 8026b70:	f7ff fd0e 	bl	8026590 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8026b74:	687b      	ldr	r3, [r7, #4]
 8026b76:	b2db      	uxtb	r3, r3
 8026b78:	4618      	mov	r0, r3
 8026b7a:	f7ff fd09 	bl	8026590 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026b7e:	4b10      	ldr	r3, [pc, #64]	; (8026bc0 <spi_flash_read_spare_data+0x104>)
 8026b80:	7a1b      	ldrb	r3, [r3, #8]
 8026b82:	2b00      	cmp	r3, #0
 8026b84:	d102      	bne.n	8026b8c <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026b86:	20ff      	movs	r0, #255	; 0xff
 8026b88:	f7ff fd02 	bl	8026590 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8026b8c:	2300      	movs	r3, #0
 8026b8e:	617b      	str	r3, [r7, #20]
 8026b90:	e009      	b.n	8026ba6 <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026b92:	68fa      	ldr	r2, [r7, #12]
 8026b94:	697b      	ldr	r3, [r7, #20]
 8026b96:	18d4      	adds	r4, r2, r3
 8026b98:	f7ff fd1c 	bl	80265d4 <spi_flash_read_byte>
 8026b9c:	4603      	mov	r3, r0
 8026b9e:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026ba0:	697b      	ldr	r3, [r7, #20]
 8026ba2:	3301      	adds	r3, #1
 8026ba4:	617b      	str	r3, [r7, #20]
 8026ba6:	697a      	ldr	r2, [r7, #20]
 8026ba8:	683b      	ldr	r3, [r7, #0]
 8026baa:	429a      	cmp	r2, r3
 8026bac:	d3f1      	bcc.n	8026b92 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026bae:	f7ff fc39 	bl	8026424 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026bb2:	693b      	ldr	r3, [r7, #16]
}
 8026bb4:	4618      	mov	r0, r3
 8026bb6:	371c      	adds	r7, #28
 8026bb8:	46bd      	mov	sp, r7
 8026bba:	bd90      	pop	{r4, r7, pc}
 8026bbc:	20005198 	.word	0x20005198
 8026bc0:	20005188 	.word	0x20005188

08026bc4 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8026bc4:	b580      	push	{r7, lr}
 8026bc6:	b082      	sub	sp, #8
 8026bc8:	af00      	add	r7, sp, #0
 8026bca:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026bcc:	6878      	ldr	r0, [r7, #4]
 8026bce:	f7ff fdc3 	bl	8026758 <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8026bd2:	f7ff fe59 	bl	8026888 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026bd6:	f7ff fc19 	bl	802640c <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8026bda:	20d8      	movs	r0, #216	; 0xd8
 8026bdc:	f7ff fcd8 	bl	8026590 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8026be0:	4b0e      	ldr	r3, [pc, #56]	; (8026c1c <spi_flash_erase_block+0x58>)
 8026be2:	2201      	movs	r2, #1
 8026be4:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026be6:	687b      	ldr	r3, [r7, #4]
 8026be8:	0c1b      	lsrs	r3, r3, #16
 8026bea:	b2db      	uxtb	r3, r3
 8026bec:	4618      	mov	r0, r3
 8026bee:	f7ff fccf 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	0a1b      	lsrs	r3, r3, #8
 8026bf6:	b2db      	uxtb	r3, r3
 8026bf8:	4618      	mov	r0, r3
 8026bfa:	f7ff fcc9 	bl	8026590 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026bfe:	687b      	ldr	r3, [r7, #4]
 8026c00:	b2db      	uxtb	r3, r3
 8026c02:	4618      	mov	r0, r3
 8026c04:	f7ff fcc4 	bl	8026590 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026c08:	f7ff fc0c 	bl	8026424 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8026c0c:	f7ff fd20 	bl	8026650 <spi_flash_read_status>
 8026c10:	4603      	mov	r3, r0
}
 8026c12:	4618      	mov	r0, r3
 8026c14:	3708      	adds	r7, #8
 8026c16:	46bd      	mov	sp, r7
 8026c18:	bd80      	pop	{r7, pc}
 8026c1a:	bf00      	nop
 8026c1c:	20005198 	.word	0x20005198

08026c20 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8026c20:	b480      	push	{r7}
 8026c22:	af00      	add	r7, sp, #0
    return true;
 8026c24:	2301      	movs	r3, #1
}
 8026c26:	4618      	mov	r0, r3
 8026c28:	46bd      	mov	sp, r7
 8026c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c2e:	4770      	bx	lr

08026c30 <spi_flash_gpio_init>:

static spi_conf_t spi_conf;

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init()
{
 8026c30:	b580      	push	{r7, lr}
 8026c32:	b088      	sub	sp, #32
 8026c34:	af00      	add	r7, sp, #0
	  SPI_HandleTypeDef* spiHandle;

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026c36:	f107 030c 	add.w	r3, r7, #12
 8026c3a:	2200      	movs	r2, #0
 8026c3c:	601a      	str	r2, [r3, #0]
 8026c3e:	605a      	str	r2, [r3, #4]
 8026c40:	609a      	str	r2, [r3, #8]
 8026c42:	60da      	str	r2, [r3, #12]
 8026c44:	611a      	str	r2, [r3, #16]

	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8026c46:	2300      	movs	r3, #0
 8026c48:	60bb      	str	r3, [r7, #8]
 8026c4a:	4b33      	ldr	r3, [pc, #204]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c4e:	4a32      	ldr	r2, [pc, #200]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026c54:	6453      	str	r3, [r2, #68]	; 0x44
 8026c56:	4b30      	ldr	r3, [pc, #192]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026c5e:	60bb      	str	r3, [r7, #8]
 8026c60:	68bb      	ldr	r3, [r7, #8]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026c62:	2300      	movs	r3, #0
 8026c64:	607b      	str	r3, [r7, #4]
 8026c66:	4b2c      	ldr	r3, [pc, #176]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c6a:	4a2b      	ldr	r2, [pc, #172]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c6c:	f043 0301 	orr.w	r3, r3, #1
 8026c70:	6313      	str	r3, [r2, #48]	; 0x30
 8026c72:	4b29      	ldr	r3, [pc, #164]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c76:	f003 0301 	and.w	r3, r3, #1
 8026c7a:	607b      	str	r3, [r7, #4]
 8026c7c:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026c7e:	2300      	movs	r3, #0
 8026c80:	603b      	str	r3, [r7, #0]
 8026c82:	4b25      	ldr	r3, [pc, #148]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c86:	4a24      	ldr	r2, [pc, #144]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c88:	f043 0302 	orr.w	r3, r3, #2
 8026c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8026c8e:	4b22      	ldr	r3, [pc, #136]	; (8026d18 <spi_flash_gpio_init+0xe8>)
 8026c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c92:	f003 0302 	and.w	r3, r3, #2
 8026c96:	603b      	str	r3, [r7, #0]
 8026c98:	683b      	ldr	r3, [r7, #0]
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    /*Configure SPI1_SCK pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8026c9a:	2308      	movs	r3, #8
 8026c9c:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026c9e:	2302      	movs	r3, #2
 8026ca0:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026ca2:	2300      	movs	r3, #0
 8026ca4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026ca6:	2301      	movs	r3, #1
 8026ca8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026caa:	2305      	movs	r3, #5
 8026cac:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8026cae:	f107 030c 	add.w	r3, r7, #12
 8026cb2:	4619      	mov	r1, r3
 8026cb4:	4819      	ldr	r0, [pc, #100]	; (8026d1c <spi_flash_gpio_init+0xec>)
 8026cb6:	f001 fae5 	bl	8028284 <HAL_GPIO_Init>

	    /*Configure SPI1_MOSI pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8026cba:	2380      	movs	r3, #128	; 0x80
 8026cbc:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026cbe:	2302      	movs	r3, #2
 8026cc0:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026cc2:	2300      	movs	r3, #0
 8026cc4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026cc6:	2301      	movs	r3, #1
 8026cc8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026cca:	2305      	movs	r3, #5
 8026ccc:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8026cce:	f107 030c 	add.w	r3, r7, #12
 8026cd2:	4619      	mov	r1, r3
 8026cd4:	4812      	ldr	r0, [pc, #72]	; (8026d20 <spi_flash_gpio_init+0xf0>)
 8026cd6:	f001 fad5 	bl	8028284 <HAL_GPIO_Init>

	    /*Configure SPI1_MISO pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8026cda:	2340      	movs	r3, #64	; 0x40
 8026cdc:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026cde:	2300      	movs	r3, #0
 8026ce0:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026ce2:	2301      	movs	r3, #1
 8026ce4:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8026ce6:	f107 030c 	add.w	r3, r7, #12
 8026cea:	4619      	mov	r1, r3
 8026cec:	480c      	ldr	r0, [pc, #48]	; (8026d20 <spi_flash_gpio_init+0xf0>)
 8026cee:	f001 fac9 	bl	8028284 <HAL_GPIO_Init>

	    /*Configure SPI1_CS pin : PtPin */
	    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8026cf2:	2310      	movs	r3, #16
 8026cf4:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026cf6:	2301      	movs	r3, #1
 8026cf8:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026cfa:	2300      	movs	r3, #0
 8026cfc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026cfe:	2300      	movs	r3, #0
 8026d00:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8026d02:	f107 030c 	add.w	r3, r7, #12
 8026d06:	4619      	mov	r1, r3
 8026d08:	4805      	ldr	r0, [pc, #20]	; (8026d20 <spi_flash_gpio_init+0xf0>)
 8026d0a:	f001 fabb 	bl	8028284 <HAL_GPIO_Init>
}
 8026d0e:	bf00      	nop
 8026d10:	3720      	adds	r7, #32
 8026d12:	46bd      	mov	sp, r7
 8026d14:	bd80      	pop	{r7, pc}
 8026d16:	bf00      	nop
 8026d18:	40023800 	.word	0x40023800
 8026d1c:	40020400 	.word	0x40020400
 8026d20:	40020000 	.word	0x40020000

08026d24 <spi_flash_select_chip>:
	    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
}

// 选中SPI Flash芯片
static inline void spi_flash_select_chip()
{
 8026d24:	b580      	push	{r7, lr}
 8026d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026d28:	2200      	movs	r2, #0
 8026d2a:	2110      	movs	r1, #16
 8026d2c:	4802      	ldr	r0, [pc, #8]	; (8026d38 <spi_flash_select_chip+0x14>)
 8026d2e:	f001 fd41 	bl	80287b4 <HAL_GPIO_WritePin>
}
 8026d32:	bf00      	nop
 8026d34:	bd80      	pop	{r7, pc}
 8026d36:	bf00      	nop
 8026d38:	40020000 	.word	0x40020000

08026d3c <spi_flash_deselect_chip>:

// 取消选中SPI Flash芯片
static inline void spi_flash_deselect_chip()
{
 8026d3c:	b580      	push	{r7, lr}
 8026d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026d40:	2201      	movs	r2, #1
 8026d42:	2110      	movs	r1, #16
 8026d44:	4802      	ldr	r0, [pc, #8]	; (8026d50 <spi_flash_deselect_chip+0x14>)
 8026d46:	f001 fd35 	bl	80287b4 <HAL_GPIO_WritePin>
}
 8026d4a:	bf00      	nop
 8026d4c:	bd80      	pop	{r7, pc}
 8026d4e:	bf00      	nop
 8026d50:	40020000 	.word	0x40020000

08026d54 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_HandleTypeDef* hspi, SPI_InitTypeDef* SPI_InitStruct)
{
 8026d54:	b580      	push	{r7, lr}
 8026d56:	b082      	sub	sp, #8
 8026d58:	af00      	add	r7, sp, #0
 8026d5a:	6078      	str	r0, [r7, #4]
 8026d5c:	6039      	str	r1, [r7, #0]
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));

    /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
       master/slave mode, CPOL and CPHA */
    hspi->Init.Direction = SPI_InitStruct->Direction;
 8026d5e:	683b      	ldr	r3, [r7, #0]
 8026d60:	685a      	ldr	r2, [r3, #4]
 8026d62:	687b      	ldr	r3, [r7, #4]
 8026d64:	609a      	str	r2, [r3, #8]
    hspi->Init.Mode = SPI_InitStruct->Mode;
 8026d66:	683b      	ldr	r3, [r7, #0]
 8026d68:	681a      	ldr	r2, [r3, #0]
 8026d6a:	687b      	ldr	r3, [r7, #4]
 8026d6c:	605a      	str	r2, [r3, #4]
    hspi->Init.DataSize = SPI_InitStruct->DataSize;
 8026d6e:	683b      	ldr	r3, [r7, #0]
 8026d70:	689a      	ldr	r2, [r3, #8]
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	60da      	str	r2, [r3, #12]
    hspi->Init.CLKPolarity = SPI_InitStruct->CLKPolarity;
 8026d76:	683b      	ldr	r3, [r7, #0]
 8026d78:	68da      	ldr	r2, [r3, #12]
 8026d7a:	687b      	ldr	r3, [r7, #4]
 8026d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase = SPI_InitStruct->CLKPhase;
 8026d7e:	683b      	ldr	r3, [r7, #0]
 8026d80:	691a      	ldr	r2, [r3, #16]
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	615a      	str	r2, [r3, #20]
    hspi->Init.NSS = SPI_InitStruct->NSS;
 8026d86:	683b      	ldr	r3, [r7, #0]
 8026d88:	695a      	ldr	r2, [r3, #20]
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	619a      	str	r2, [r3, #24]
    hspi->Init.BaudRatePrescaler = SPI_InitStruct->BaudRatePrescaler;
 8026d8e:	683b      	ldr	r3, [r7, #0]
 8026d90:	699a      	ldr	r2, [r3, #24]
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	61da      	str	r2, [r3, #28]
    hspi->Init.FirstBit = SPI_InitStruct->FirstBit;
 8026d96:	683b      	ldr	r3, [r7, #0]
 8026d98:	69da      	ldr	r2, [r3, #28]
 8026d9a:	687b      	ldr	r3, [r7, #4]
 8026d9c:	621a      	str	r2, [r3, #32]
    hspi->Init.TIMode = SPI_InitStruct->TIMode;
 8026d9e:	683b      	ldr	r3, [r7, #0]
 8026da0:	6a1a      	ldr	r2, [r3, #32]
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the SPI peripheral */
    if (HAL_SPI_Init(hspi) != HAL_OK)
 8026da6:	6878      	ldr	r0, [r7, #4]
 8026da8:	f004 f877 	bl	802ae9a <HAL_SPI_Init>
 8026dac:	4603      	mov	r3, r0
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d001      	beq.n	8026db6 <SPI_Init+0x62>
    {
        Error_Handler();
 8026db2:	f7fc fe33 	bl	8023a1c <Error_Handler>
    }
}
 8026db6:	bf00      	nop
 8026db8:	3708      	adds	r7, #8
 8026dba:	46bd      	mov	sp, r7
 8026dbc:	bd80      	pop	{r7, pc}
	...

08026dc0 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026dc0:	b590      	push	{r4, r7, lr}
 8026dc2:	b08f      	sub	sp, #60	; 0x3c
 8026dc4:	af00      	add	r7, sp, #0
 8026dc6:	6078      	str	r0, [r7, #4]
 8026dc8:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 8026dca:	683b      	ldr	r3, [r7, #0]
 8026dcc:	2b0c      	cmp	r3, #12
 8026dce:	d802      	bhi.n	8026dd6 <spi_flash_init+0x16>
        return -1; 
 8026dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8026dd4:	e041      	b.n	8026e5a <spi_flash_init+0x9a>

    spi_conf = *(spi_conf_t *)conf;
 8026dd6:	4b23      	ldr	r3, [pc, #140]	; (8026e64 <spi_flash_init+0xa4>)
 8026dd8:	687a      	ldr	r2, [r7, #4]
 8026dda:	4614      	mov	r4, r2
 8026ddc:	6820      	ldr	r0, [r4, #0]
 8026dde:	6861      	ldr	r1, [r4, #4]
 8026de0:	68a2      	ldr	r2, [r4, #8]
 8026de2:	c307      	stmia	r3!, {r0, r1, r2}
 8026de4:	7b22      	ldrb	r2, [r4, #12]
 8026de6:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init();
 8026de8:	f7ff ff22 	bl	8026c30 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8026dec:	f7ff ffa6 	bl	8026d3c <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8026df0:	4b1d      	ldr	r3, [pc, #116]	; (8026e68 <spi_flash_init+0xa8>)
 8026df2:	4a1e      	ldr	r2, [pc, #120]	; (8026e6c <spi_flash_init+0xac>)
 8026df4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8026df6:	4b1c      	ldr	r3, [pc, #112]	; (8026e68 <spi_flash_init+0xa8>)
 8026df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026dfc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026dfe:	4b1a      	ldr	r3, [pc, #104]	; (8026e68 <spi_flash_init+0xa8>)
 8026e00:	2200      	movs	r2, #0
 8026e02:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026e04:	4b18      	ldr	r3, [pc, #96]	; (8026e68 <spi_flash_init+0xa8>)
 8026e06:	2200      	movs	r2, #0
 8026e08:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026e0a:	4b17      	ldr	r3, [pc, #92]	; (8026e68 <spi_flash_init+0xa8>)
 8026e0c:	2202      	movs	r2, #2
 8026e0e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026e10:	4b15      	ldr	r3, [pc, #84]	; (8026e68 <spi_flash_init+0xa8>)
 8026e12:	2201      	movs	r2, #1
 8026e14:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8026e16:	4b14      	ldr	r3, [pc, #80]	; (8026e68 <spi_flash_init+0xa8>)
 8026e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026e1c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8026e1e:	4b12      	ldr	r3, [pc, #72]	; (8026e68 <spi_flash_init+0xa8>)
 8026e20:	2200      	movs	r2, #0
 8026e22:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026e24:	4b10      	ldr	r3, [pc, #64]	; (8026e68 <spi_flash_init+0xa8>)
 8026e26:	2200      	movs	r2, #0
 8026e28:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026e2a:	4b0f      	ldr	r3, [pc, #60]	; (8026e68 <spi_flash_init+0xa8>)
 8026e2c:	2200      	movs	r2, #0
 8026e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026e30:	4b0d      	ldr	r3, [pc, #52]	; (8026e68 <spi_flash_init+0xa8>)
 8026e32:	2200      	movs	r2, #0
 8026e34:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8026e36:	4b0c      	ldr	r3, [pc, #48]	; (8026e68 <spi_flash_init+0xa8>)
 8026e38:	220a      	movs	r2, #10
 8026e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    SPI_Init(&hspi1, &spi_init);
 8026e3c:	f107 030c 	add.w	r3, r7, #12
 8026e40:	4619      	mov	r1, r3
 8026e42:	4809      	ldr	r0, [pc, #36]	; (8026e68 <spi_flash_init+0xa8>)
 8026e44:	f7ff ff86 	bl	8026d54 <SPI_Init>
//    MX_SPI1_Init(&hspi1);

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    __HAL_SPI_ENABLE(&hspi1);
 8026e48:	4b07      	ldr	r3, [pc, #28]	; (8026e68 <spi_flash_init+0xa8>)
 8026e4a:	681b      	ldr	r3, [r3, #0]
 8026e4c:	681a      	ldr	r2, [r3, #0]
 8026e4e:	4b06      	ldr	r3, [pc, #24]	; (8026e68 <spi_flash_init+0xa8>)
 8026e50:	681b      	ldr	r3, [r3, #0]
 8026e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026e56:	601a      	str	r2, [r3, #0]

    return 0;
 8026e58:	2300      	movs	r3, #0
}
 8026e5a:	4618      	mov	r0, r3
 8026e5c:	373c      	adds	r7, #60	; 0x3c
 8026e5e:	46bd      	mov	sp, r7
 8026e60:	bd90      	pop	{r4, r7, pc}
 8026e62:	bf00      	nop
 8026e64:	200051a0 	.word	0x200051a0
 8026e68:	20005130 	.word	0x20005130
 8026e6c:	40013000 	.word	0x40013000

08026e70 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8026e70:	b580      	push	{r7, lr}
 8026e72:	af00      	add	r7, sp, #0
//    spi_flash_gpio_uninit(&hspi1);
	HAL_SPI_MspDeInit(&hspi1);
 8026e74:	4806      	ldr	r0, [pc, #24]	; (8026e90 <spi_flash_uninit+0x20>)
 8026e76:	f7ff f9e3 	bl	8026240 <HAL_SPI_MspDeInit>
    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8026e7a:	4b05      	ldr	r3, [pc, #20]	; (8026e90 <spi_flash_uninit+0x20>)
 8026e7c:	681b      	ldr	r3, [r3, #0]
 8026e7e:	681a      	ldr	r2, [r3, #0]
 8026e80:	4b03      	ldr	r3, [pc, #12]	; (8026e90 <spi_flash_uninit+0x20>)
 8026e82:	681b      	ldr	r3, [r3, #0]
 8026e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026e88:	601a      	str	r2, [r3, #0]
}
 8026e8a:	bf00      	nop
 8026e8c:	bd80      	pop	{r7, pc}
 8026e8e:	bf00      	nop
 8026e90:	20005130 	.word	0x20005130

08026e94 <spi_flash_send_byte>:
}


// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026e94:	b580      	push	{r7, lr}
 8026e96:	b084      	sub	sp, #16
 8026e98:	af00      	add	r7, sp, #0
 8026e9a:	4603      	mov	r3, r0
 8026e9c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_byte;

    spi_flash_select_chip();
 8026e9e:	f7ff ff41 	bl	8026d24 <spi_flash_select_chip>
    // 等待TXE标志位设置，表示发送缓冲区为空
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8026ea2:	bf00      	nop
 8026ea4:	4815      	ldr	r0, [pc, #84]	; (8026efc <spi_flash_send_byte+0x68>)
 8026ea6:	f004 fd97 	bl	802b9d8 <HAL_SPI_GetState>
 8026eaa:	4603      	mov	r3, r0
 8026eac:	2b01      	cmp	r3, #1
 8026eae:	d1f9      	bne.n	8026ea4 <spi_flash_send_byte+0x10>

    // 发送一个字节
    if (HAL_OK == HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY))
 8026eb0:	1df9      	adds	r1, r7, #7
 8026eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8026eb6:	2201      	movs	r2, #1
 8026eb8:	4810      	ldr	r0, [pc, #64]	; (8026efc <spi_flash_send_byte+0x68>)
 8026eba:	f004 f89f 	bl	802affc <HAL_SPI_Transmit>
 8026ebe:	4603      	mov	r3, r0
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	d113      	bne.n	8026eec <spi_flash_send_byte+0x58>
    {
        // 等待RXNE标志位设置，表示接收缓冲区非空
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8026ec4:	bf00      	nop
 8026ec6:	480d      	ldr	r0, [pc, #52]	; (8026efc <spi_flash_send_byte+0x68>)
 8026ec8:	f004 fd86 	bl	802b9d8 <HAL_SPI_GetState>
 8026ecc:	4603      	mov	r3, r0
 8026ece:	2b01      	cmp	r3, #1
 8026ed0:	d1f9      	bne.n	8026ec6 <spi_flash_send_byte+0x32>

        // 接收一个字节
        if (HAL_OK == HAL_SPI_Receive(&hspi1, &rx_byte, 1, HAL_MAX_DELAY))
 8026ed2:	f107 010f 	add.w	r1, r7, #15
 8026ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8026eda:	2201      	movs	r2, #1
 8026edc:	4807      	ldr	r0, [pc, #28]	; (8026efc <spi_flash_send_byte+0x68>)
 8026ede:	f004 f9c9 	bl	802b274 <HAL_SPI_Receive>
 8026ee2:	4603      	mov	r3, r0
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d101      	bne.n	8026eec <spi_flash_send_byte+0x58>
        {
            return rx_byte;
 8026ee8:	7bfb      	ldrb	r3, [r7, #15]
 8026eea:	e002      	b.n	8026ef2 <spi_flash_send_byte+0x5e>
        }
    }

    spi_flash_deselect_chip();
 8026eec:	f7ff ff26 	bl	8026d3c <spi_flash_deselect_chip>

    return 0; // 发送或接收出现问题，返回0或者根据需求返回其他错误值
 8026ef0:	2300      	movs	r3, #0
}
 8026ef2:	4618      	mov	r0, r3
 8026ef4:	3710      	adds	r7, #16
 8026ef6:	46bd      	mov	sp, r7
 8026ef8:	bd80      	pop	{r7, pc}
 8026efa:	bf00      	nop
 8026efc:	20005130 	.word	0x20005130

08026f00 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8026f00:	b580      	push	{r7, lr}
 8026f02:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8026f04:	20a5      	movs	r0, #165	; 0xa5
 8026f06:	f7ff ffc5 	bl	8026e94 <spi_flash_send_byte>
 8026f0a:	4603      	mov	r3, r0
}
 8026f0c:	4618      	mov	r0, r3
 8026f0e:	bd80      	pop	{r7, pc}

08026f10 <spi_flash_read_status>:

// 读取SPI Flash的状态寄存器值
static uint32_t spi_flash_read_status()
{
 8026f10:	b580      	push	{r7, lr}
 8026f12:	b082      	sub	sp, #8
 8026f14:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_STATUS_READY;
 8026f16:	2300      	movs	r3, #0
 8026f18:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8026f1a:	f7ff ff03 	bl	8026d24 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8026f1e:	4b16      	ldr	r3, [pc, #88]	; (8026f78 <spi_flash_read_status+0x68>)
 8026f20:	799b      	ldrb	r3, [r3, #6]
 8026f22:	4618      	mov	r0, r3
 8026f24:	f7ff ffb6 	bl	8026e94 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8026f28:	f7ff ffea 	bl	8026f00 <spi_flash_read_byte>
 8026f2c:	4603      	mov	r3, r0
 8026f2e:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8026f30:	4b11      	ldr	r3, [pc, #68]	; (8026f78 <spi_flash_read_status+0x68>)
 8026f32:	7a1b      	ldrb	r3, [r3, #8]
 8026f34:	2b01      	cmp	r3, #1
 8026f36:	d10a      	bne.n	8026f4e <spi_flash_read_status+0x3e>
 8026f38:	78fb      	ldrb	r3, [r7, #3]
 8026f3a:	4a0f      	ldr	r2, [pc, #60]	; (8026f78 <spi_flash_read_status+0x68>)
 8026f3c:	79d2      	ldrb	r2, [r2, #7]
 8026f3e:	4113      	asrs	r3, r2
 8026f40:	f003 0301 	and.w	r3, r3, #1
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	d002      	beq.n	8026f4e <spi_flash_read_status+0x3e>
        flash_status = FLASH_STATUS_BUSY;
 8026f48:	2301      	movs	r3, #1
 8026f4a:	607b      	str	r3, [r7, #4]
 8026f4c:	e00d      	b.n	8026f6a <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8026f4e:	4b0a      	ldr	r3, [pc, #40]	; (8026f78 <spi_flash_read_status+0x68>)
 8026f50:	7a1b      	ldrb	r3, [r3, #8]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d109      	bne.n	8026f6a <spi_flash_read_status+0x5a>
 8026f56:	78fb      	ldrb	r3, [r7, #3]
 8026f58:	4a07      	ldr	r2, [pc, #28]	; (8026f78 <spi_flash_read_status+0x68>)
 8026f5a:	79d2      	ldrb	r2, [r2, #7]
 8026f5c:	4113      	asrs	r3, r2
 8026f5e:	f003 0301 	and.w	r3, r3, #1
 8026f62:	2b00      	cmp	r3, #0
 8026f64:	d101      	bne.n	8026f6a <spi_flash_read_status+0x5a>
        flash_status = FLASH_STATUS_BUSY;
 8026f66:	2301      	movs	r3, #1
 8026f68:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8026f6a:	f7ff fee7 	bl	8026d3c <spi_flash_deselect_chip>

    return flash_status;
 8026f6e:	687b      	ldr	r3, [r7, #4]
}
 8026f70:	4618      	mov	r0, r3
 8026f72:	3708      	adds	r7, #8
 8026f74:	46bd      	mov	sp, r7
 8026f76:	bd80      	pop	{r7, pc}
 8026f78:	200051a0 	.word	0x200051a0

08026f7c <spi_flash_get_status>:

// 获取SPI Flash的状态，等待操作完成或超时
static uint32_t spi_flash_get_status()
{
 8026f7c:	b580      	push	{r7, lr}
 8026f7e:	b082      	sub	sp, #8
 8026f80:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8026f82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026f86:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8026f88:	f7ff ffc2 	bl	8026f10 <spi_flash_read_status>
 8026f8c:	6078      	str	r0, [r7, #4]

    /* 等待操作完成或超时 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8026f8e:	e005      	b.n	8026f9c <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8026f90:	f7ff ffbe 	bl	8026f10 <spi_flash_read_status>
 8026f94:	6078      	str	r0, [r7, #4]
        timeout --;
 8026f96:	683b      	ldr	r3, [r7, #0]
 8026f98:	3b01      	subs	r3, #1
 8026f9a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8026f9c:	687b      	ldr	r3, [r7, #4]
 8026f9e:	2b01      	cmp	r3, #1
 8026fa0:	d102      	bne.n	8026fa8 <spi_flash_get_status+0x2c>
 8026fa2:	683b      	ldr	r3, [r7, #0]
 8026fa4:	2b00      	cmp	r3, #0
 8026fa6:	d1f3      	bne.n	8026f90 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8026fa8:	683b      	ldr	r3, [r7, #0]
 8026faa:	2b00      	cmp	r3, #0
 8026fac:	d101      	bne.n	8026fb2 <spi_flash_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8026fae:	2303      	movs	r3, #3
 8026fb0:	607b      	str	r3, [r7, #4]

    return status;
 8026fb2:	687b      	ldr	r3, [r7, #4]
}
 8026fb4:	4618      	mov	r0, r3
 8026fb6:	3708      	adds	r7, #8
 8026fb8:	46bd      	mov	sp, r7
 8026fba:	bd80      	pop	{r7, pc}

08026fbc <spi_flash_read_id>:

// 读取SPI Flash的ID
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8026fbc:	b580      	push	{r7, lr}
 8026fbe:	b082      	sub	sp, #8
 8026fc0:	af00      	add	r7, sp, #0
 8026fc2:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8026fc4:	f7ff feae 	bl	8026d24 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8026fc8:	4b17      	ldr	r3, [pc, #92]	; (8027028 <spi_flash_read_id+0x6c>)
 8026fca:	789b      	ldrb	r3, [r3, #2]
 8026fcc:	4618      	mov	r0, r3
 8026fce:	f7ff ff61 	bl	8026e94 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8026fd2:	f7ff ff95 	bl	8026f00 <spi_flash_read_byte>
 8026fd6:	4603      	mov	r3, r0
 8026fd8:	461a      	mov	r2, r3
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8026fde:	f7ff ff8f 	bl	8026f00 <spi_flash_read_byte>
 8026fe2:	4603      	mov	r3, r0
 8026fe4:	461a      	mov	r2, r3
 8026fe6:	687b      	ldr	r3, [r7, #4]
 8026fe8:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 8026fea:	f7ff ff89 	bl	8026f00 <spi_flash_read_byte>
 8026fee:	4603      	mov	r3, r0
 8026ff0:	461a      	mov	r2, r3
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8026ff6:	f7ff ff83 	bl	8026f00 <spi_flash_read_byte>
 8026ffa:	4603      	mov	r3, r0
 8026ffc:	461a      	mov	r2, r3
 8026ffe:	687b      	ldr	r3, [r7, #4]
 8027000:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 8027002:	f7ff ff7d 	bl	8026f00 <spi_flash_read_byte>
 8027006:	4603      	mov	r3, r0
 8027008:	461a      	mov	r2, r3
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 802700e:	f7ff ff77 	bl	8026f00 <spi_flash_read_byte>
 8027012:	4603      	mov	r3, r0
 8027014:	461a      	mov	r2, r3
 8027016:	687b      	ldr	r3, [r7, #4]
 8027018:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 802701a:	f7ff fe8f 	bl	8026d3c <spi_flash_deselect_chip>
}
 802701e:	bf00      	nop
 8027020:	3708      	adds	r7, #8
 8027022:	46bd      	mov	sp, r7
 8027024:	bd80      	pop	{r7, pc}
 8027026:	bf00      	nop
 8027028:	200051a0 	.word	0x200051a0

0802702c <spi_flash_write_enable>:

// 启用SPI Flash的写使能
static void spi_flash_write_enable()
{
 802702c:	b580      	push	{r7, lr}
 802702e:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8027030:	4b07      	ldr	r3, [pc, #28]	; (8027050 <spi_flash_write_enable+0x24>)
 8027032:	791b      	ldrb	r3, [r3, #4]
 8027034:	2bff      	cmp	r3, #255	; 0xff
 8027036:	d009      	beq.n	802704c <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 8027038:	f7ff fe74 	bl	8026d24 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 802703c:	4b04      	ldr	r3, [pc, #16]	; (8027050 <spi_flash_write_enable+0x24>)
 802703e:	791b      	ldrb	r3, [r3, #4]
 8027040:	4618      	mov	r0, r3
 8027042:	f7ff ff27 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8027046:	f7ff fe79 	bl	8026d3c <spi_flash_deselect_chip>
 802704a:	e000      	b.n	802704e <spi_flash_write_enable+0x22>
        return;
 802704c:	bf00      	nop
}
 802704e:	bd80      	pop	{r7, pc}
 8027050:	200051a0 	.word	0x200051a0

08027054 <spi_flash_write_page_async>:

// 异步写入SPI Flash的一页数据
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8027054:	b580      	push	{r7, lr}
 8027056:	b086      	sub	sp, #24
 8027058:	af00      	add	r7, sp, #0
 802705a:	60f8      	str	r0, [r7, #12]
 802705c:	60b9      	str	r1, [r7, #8]
 802705e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 8027060:	f7ff ffe4 	bl	802702c <spi_flash_write_enable>

    spi_flash_select_chip();
 8027064:	f7ff fe5e 	bl	8026d24 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8027068:	4b19      	ldr	r3, [pc, #100]	; (80270d0 <spi_flash_write_page_async+0x7c>)
 802706a:	78db      	ldrb	r3, [r3, #3]
 802706c:	4618      	mov	r0, r3
 802706e:	f7ff ff11 	bl	8026e94 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8027072:	4b17      	ldr	r3, [pc, #92]	; (80270d0 <spi_flash_write_page_async+0x7c>)
 8027074:	781b      	ldrb	r3, [r3, #0]
 8027076:	461a      	mov	r2, r3
 8027078:	68bb      	ldr	r3, [r7, #8]
 802707a:	4093      	lsls	r3, r2
 802707c:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 802707e:	68bb      	ldr	r3, [r7, #8]
 8027080:	0c1b      	lsrs	r3, r3, #16
 8027082:	b2db      	uxtb	r3, r3
 8027084:	4618      	mov	r0, r3
 8027086:	f7ff ff05 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 802708a:	68bb      	ldr	r3, [r7, #8]
 802708c:	0a1b      	lsrs	r3, r3, #8
 802708e:	b2db      	uxtb	r3, r3
 8027090:	4618      	mov	r0, r3
 8027092:	f7ff feff 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8027096:	68bb      	ldr	r3, [r7, #8]
 8027098:	b2db      	uxtb	r3, r3
 802709a:	4618      	mov	r0, r3
 802709c:	f7ff fefa 	bl	8026e94 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 80270a0:	2300      	movs	r3, #0
 80270a2:	617b      	str	r3, [r7, #20]
 80270a4:	e009      	b.n	80270ba <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 80270a6:	68fa      	ldr	r2, [r7, #12]
 80270a8:	697b      	ldr	r3, [r7, #20]
 80270aa:	4413      	add	r3, r2
 80270ac:	781b      	ldrb	r3, [r3, #0]
 80270ae:	4618      	mov	r0, r3
 80270b0:	f7ff fef0 	bl	8026e94 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 80270b4:	697b      	ldr	r3, [r7, #20]
 80270b6:	3301      	adds	r3, #1
 80270b8:	617b      	str	r3, [r7, #20]
 80270ba:	697a      	ldr	r2, [r7, #20]
 80270bc:	687b      	ldr	r3, [r7, #4]
 80270be:	429a      	cmp	r2, r3
 80270c0:	d3f1      	bcc.n	80270a6 <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 80270c2:	f7ff fe3b 	bl	8026d3c <spi_flash_deselect_chip>
}
 80270c6:	bf00      	nop
 80270c8:	3718      	adds	r7, #24
 80270ca:	46bd      	mov	sp, r7
 80270cc:	bd80      	pop	{r7, pc}
 80270ce:	bf00      	nop
 80270d0:	200051a0 	.word	0x200051a0

080270d4 <spi_flash_read_data>:

// 从指定地址读取数据到缓冲区
static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 80270d4:	b590      	push	{r4, r7, lr}
 80270d6:	b087      	sub	sp, #28
 80270d8:	af00      	add	r7, sp, #0
 80270da:	60f8      	str	r0, [r7, #12]
 80270dc:	60b9      	str	r1, [r7, #8]
 80270de:	607a      	str	r2, [r7, #4]
 80270e0:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 80270e2:	4b1d      	ldr	r3, [pc, #116]	; (8027158 <spi_flash_read_data+0x84>)
 80270e4:	781b      	ldrb	r3, [r3, #0]
 80270e6:	461a      	mov	r2, r3
 80270e8:	68bb      	ldr	r3, [r7, #8]
 80270ea:	4093      	lsls	r3, r2
 80270ec:	687a      	ldr	r2, [r7, #4]
 80270ee:	4413      	add	r3, r2
 80270f0:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 80270f2:	f7ff fe17 	bl	8026d24 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 80270f6:	4b18      	ldr	r3, [pc, #96]	; (8027158 <spi_flash_read_data+0x84>)
 80270f8:	785b      	ldrb	r3, [r3, #1]
 80270fa:	4618      	mov	r0, r3
 80270fc:	f7ff feca 	bl	8026e94 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027100:	693b      	ldr	r3, [r7, #16]
 8027102:	0c1b      	lsrs	r3, r3, #16
 8027104:	b2db      	uxtb	r3, r3
 8027106:	4618      	mov	r0, r3
 8027108:	f7ff fec4 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 802710c:	693b      	ldr	r3, [r7, #16]
 802710e:	0a1b      	lsrs	r3, r3, #8
 8027110:	b2db      	uxtb	r3, r3
 8027112:	4618      	mov	r0, r3
 8027114:	f7ff febe 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8027118:	693b      	ldr	r3, [r7, #16]
 802711a:	b2db      	uxtb	r3, r3
 802711c:	4618      	mov	r0, r3
 802711e:	f7ff feb9 	bl	8026e94 <spi_flash_send_byte>

    /* AT45DB要求在地址后写入虚拟字节 */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8027122:	20a5      	movs	r0, #165	; 0xa5
 8027124:	f7ff feb6 	bl	8026e94 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 8027128:	2300      	movs	r3, #0
 802712a:	617b      	str	r3, [r7, #20]
 802712c:	e009      	b.n	8027142 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 802712e:	68fa      	ldr	r2, [r7, #12]
 8027130:	697b      	ldr	r3, [r7, #20]
 8027132:	18d4      	adds	r4, r2, r3
 8027134:	f7ff fee4 	bl	8026f00 <spi_flash_read_byte>
 8027138:	4603      	mov	r3, r0
 802713a:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 802713c:	697b      	ldr	r3, [r7, #20]
 802713e:	3301      	adds	r3, #1
 8027140:	617b      	str	r3, [r7, #20]
 8027142:	697a      	ldr	r2, [r7, #20]
 8027144:	683b      	ldr	r3, [r7, #0]
 8027146:	429a      	cmp	r2, r3
 8027148:	d3f1      	bcc.n	802712e <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 802714a:	f7ff fdf7 	bl	8026d3c <spi_flash_deselect_chip>

    return FLASH_STATUS_READY;
 802714e:	2300      	movs	r3, #0
}
 8027150:	4618      	mov	r0, r3
 8027152:	371c      	adds	r7, #28
 8027154:	46bd      	mov	sp, r7
 8027156:	bd90      	pop	{r4, r7, pc}
 8027158:	200051a0 	.word	0x200051a0

0802715c <spi_flash_read_page>:

// 从指定页读取数据到缓冲区
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 802715c:	b580      	push	{r7, lr}
 802715e:	b084      	sub	sp, #16
 8027160:	af00      	add	r7, sp, #0
 8027162:	60f8      	str	r0, [r7, #12]
 8027164:	60b9      	str	r1, [r7, #8]
 8027166:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	2200      	movs	r2, #0
 802716c:	68b9      	ldr	r1, [r7, #8]
 802716e:	68f8      	ldr	r0, [r7, #12]
 8027170:	f7ff ffb0 	bl	80270d4 <spi_flash_read_data>
 8027174:	4603      	mov	r3, r0
}
 8027176:	4618      	mov	r0, r3
 8027178:	3710      	adds	r7, #16
 802717a:	46bd      	mov	sp, r7
 802717c:	bd80      	pop	{r7, pc}

0802717e <spi_flash_read_spare_data>:

// 从指定页的偏移量读取备用数据到缓冲区
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 802717e:	b480      	push	{r7}
 8027180:	b085      	sub	sp, #20
 8027182:	af00      	add	r7, sp, #0
 8027184:	60f8      	str	r0, [r7, #12]
 8027186:	60b9      	str	r1, [r7, #8]
 8027188:	607a      	str	r2, [r7, #4]
 802718a:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 802718c:	2304      	movs	r3, #4
}
 802718e:	4618      	mov	r0, r3
 8027190:	3714      	adds	r7, #20
 8027192:	46bd      	mov	sp, r7
 8027194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027198:	4770      	bx	lr
	...

0802719c <spi_flash_erase_block>:

// 擦除指定块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 802719c:	b580      	push	{r7, lr}
 802719e:	b084      	sub	sp, #16
 80271a0:	af00      	add	r7, sp, #0
 80271a2:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 80271a4:	4b14      	ldr	r3, [pc, #80]	; (80271f8 <spi_flash_erase_block+0x5c>)
 80271a6:	781b      	ldrb	r3, [r3, #0]
 80271a8:	461a      	mov	r2, r3
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	4093      	lsls	r3, r2
 80271ae:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 80271b0:	f7ff ff3c 	bl	802702c <spi_flash_write_enable>

    spi_flash_select_chip();
 80271b4:	f7ff fdb6 	bl	8026d24 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 80271b8:	4b0f      	ldr	r3, [pc, #60]	; (80271f8 <spi_flash_erase_block+0x5c>)
 80271ba:	795b      	ldrb	r3, [r3, #5]
 80271bc:	4618      	mov	r0, r3
 80271be:	f7ff fe69 	bl	8026e94 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 80271c2:	68fb      	ldr	r3, [r7, #12]
 80271c4:	0c1b      	lsrs	r3, r3, #16
 80271c6:	b2db      	uxtb	r3, r3
 80271c8:	4618      	mov	r0, r3
 80271ca:	f7ff fe63 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 80271ce:	68fb      	ldr	r3, [r7, #12]
 80271d0:	0a1b      	lsrs	r3, r3, #8
 80271d2:	b2db      	uxtb	r3, r3
 80271d4:	4618      	mov	r0, r3
 80271d6:	f7ff fe5d 	bl	8026e94 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 80271da:	68fb      	ldr	r3, [r7, #12]
 80271dc:	b2db      	uxtb	r3, r3
 80271de:	4618      	mov	r0, r3
 80271e0:	f7ff fe58 	bl	8026e94 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 80271e4:	f7ff fdaa 	bl	8026d3c <spi_flash_deselect_chip>

    return spi_flash_get_status();
 80271e8:	f7ff fec8 	bl	8026f7c <spi_flash_get_status>
 80271ec:	4603      	mov	r3, r0
}
 80271ee:	4618      	mov	r0, r3
 80271f0:	3710      	adds	r7, #16
 80271f2:	46bd      	mov	sp, r7
 80271f4:	bd80      	pop	{r7, pc}
 80271f6:	bf00      	nop
 80271f8:	200051a0 	.word	0x200051a0

080271fc <spi_flash_is_bb_supported>:

// 检查是否支持坏块管理
static inline bool spi_flash_is_bb_supported()
{
 80271fc:	b480      	push	{r7}
 80271fe:	af00      	add	r7, sp, #0
    return false;
 8027200:	2300      	movs	r3, #0
}
 8027202:	4618      	mov	r0, r3
 8027204:	46bd      	mov	sp, r7
 8027206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802720a:	4770      	bx	lr

0802720c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802720c:	b580      	push	{r7, lr}
 802720e:	b082      	sub	sp, #8
 8027210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027212:	2300      	movs	r3, #0
 8027214:	607b      	str	r3, [r7, #4]
 8027216:	4b1f      	ldr	r3, [pc, #124]	; (8027294 <HAL_MspInit+0x88>)
 8027218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802721a:	4a1e      	ldr	r2, [pc, #120]	; (8027294 <HAL_MspInit+0x88>)
 802721c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027220:	6453      	str	r3, [r2, #68]	; 0x44
 8027222:	4b1c      	ldr	r3, [pc, #112]	; (8027294 <HAL_MspInit+0x88>)
 8027224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802722a:	607b      	str	r3, [r7, #4]
 802722c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802722e:	2300      	movs	r3, #0
 8027230:	603b      	str	r3, [r7, #0]
 8027232:	4b18      	ldr	r3, [pc, #96]	; (8027294 <HAL_MspInit+0x88>)
 8027234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027236:	4a17      	ldr	r2, [pc, #92]	; (8027294 <HAL_MspInit+0x88>)
 8027238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802723c:	6413      	str	r3, [r2, #64]	; 0x40
 802723e:	4b15      	ldr	r3, [pc, #84]	; (8027294 <HAL_MspInit+0x88>)
 8027240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027246:	603b      	str	r3, [r7, #0]
 8027248:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 802724a:	2200      	movs	r2, #0
 802724c:	2100      	movs	r1, #0
 802724e:	2001      	movs	r0, #1
 8027250:	f000 fbb5 	bl	80279be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8027254:	2001      	movs	r0, #1
 8027256:	f000 fbce 	bl	80279f6 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 802725a:	2200      	movs	r2, #0
 802725c:	2100      	movs	r1, #0
 802725e:	2004      	movs	r0, #4
 8027260:	f000 fbad 	bl	80279be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8027264:	2004      	movs	r0, #4
 8027266:	f000 fbc6 	bl	80279f6 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 802726a:	2200      	movs	r2, #0
 802726c:	2100      	movs	r1, #0
 802726e:	2005      	movs	r0, #5
 8027270:	f000 fba5 	bl	80279be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8027274:	2005      	movs	r0, #5
 8027276:	f000 fbbe 	bl	80279f6 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 802727a:	2200      	movs	r2, #0
 802727c:	2100      	movs	r1, #0
 802727e:	2051      	movs	r0, #81	; 0x51
 8027280:	f000 fb9d 	bl	80279be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8027284:	2051      	movs	r0, #81	; 0x51
 8027286:	f000 fbb6 	bl	80279f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802728a:	bf00      	nop
 802728c:	3708      	adds	r7, #8
 802728e:	46bd      	mov	sp, r7
 8027290:	bd80      	pop	{r7, pc}
 8027292:	bf00      	nop
 8027294:	40023800 	.word	0x40023800

08027298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8027298:	b580      	push	{r7, lr}
 802729a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 802729c:	f003 faca 	bl	802a834 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80272a0:	e7fe      	b.n	80272a0 <NMI_Handler+0x8>

080272a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80272a2:	b480      	push	{r7}
 80272a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80272a6:	e7fe      	b.n	80272a6 <HardFault_Handler+0x4>

080272a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80272a8:	b480      	push	{r7}
 80272aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80272ac:	e7fe      	b.n	80272ac <MemManage_Handler+0x4>

080272ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80272ae:	b480      	push	{r7}
 80272b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80272b2:	e7fe      	b.n	80272b2 <BusFault_Handler+0x4>

080272b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80272b4:	b480      	push	{r7}
 80272b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80272b8:	e7fe      	b.n	80272b8 <UsageFault_Handler+0x4>

080272ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80272ba:	b480      	push	{r7}
 80272bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80272be:	bf00      	nop
 80272c0:	46bd      	mov	sp, r7
 80272c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272c6:	4770      	bx	lr

080272c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80272c8:	b480      	push	{r7}
 80272ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80272cc:	bf00      	nop
 80272ce:	46bd      	mov	sp, r7
 80272d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272d4:	4770      	bx	lr

080272d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80272d6:	b480      	push	{r7}
 80272d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80272da:	bf00      	nop
 80272dc:	46bd      	mov	sp, r7
 80272de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272e2:	4770      	bx	lr

080272e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80272e4:	b580      	push	{r7, lr}
 80272e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80272e8:	f000 f9f6 	bl	80276d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80272ec:	bf00      	nop
 80272ee:	bd80      	pop	{r7, pc}

080272f0 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80272f0:	b580      	push	{r7, lr}
 80272f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80272f4:	f002 fe20 	bl	8029f38 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80272f8:	bf00      	nop
 80272fa:	bd80      	pop	{r7, pc}

080272fc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80272fc:	b580      	push	{r7, lr}
 80272fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8027300:	f000 fc88 	bl	8027c14 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8027304:	bf00      	nop
 8027306:	bd80      	pop	{r7, pc}

08027308 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8027308:	b480      	push	{r7}
 802730a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 802730c:	bf00      	nop
 802730e:	46bd      	mov	sp, r7
 8027310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027314:	4770      	bx	lr
	...

08027318 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8027318:	b580      	push	{r7, lr}
 802731a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802731c:	4802      	ldr	r0, [pc, #8]	; (8027328 <SPI1_IRQHandler+0x10>)
 802731e:	f004 fa5d 	bl	802b7dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8027322:	bf00      	nop
 8027324:	bd80      	pop	{r7, pc}
 8027326:	bf00      	nop
 8027328:	20005130 	.word	0x20005130

0802732c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802732c:	b580      	push	{r7, lr}
 802732e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8027330:	4802      	ldr	r0, [pc, #8]	; (802733c <USART1_IRQHandler+0x10>)
 8027332:	f004 fd83 	bl	802be3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8027336:	bf00      	nop
 8027338:	bd80      	pop	{r7, pc}
 802733a:	bf00      	nop
 802733c:	200051b4 	.word	0x200051b4

08027340 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8027340:	b580      	push	{r7, lr}
 8027342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8027344:	4802      	ldr	r0, [pc, #8]	; (8027350 <FSMC_IRQHandler+0x10>)
 8027346:	f001 fa9c 	bl	8028882 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 802734a:	bf00      	nop
 802734c:	bd80      	pop	{r7, pc}
 802734e:	bf00      	nop
 8027350:	20000c04 	.word	0x20000c04

08027354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8027354:	b580      	push	{r7, lr}
 8027356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8027358:	4802      	ldr	r0, [pc, #8]	; (8027364 <OTG_FS_IRQHandler+0x10>)
 802735a:	f001 fcc0 	bl	8028cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802735e:	bf00      	nop
 8027360:	bd80      	pop	{r7, pc}
 8027362:	bf00      	nop
 8027364:	200079d8 	.word	0x200079d8

08027368 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8027368:	b580      	push	{r7, lr}
 802736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 802736c:	4802      	ldr	r0, [pc, #8]	; (8027378 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 802736e:	f001 fcb6 	bl	8028cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8027372:	bf00      	nop
 8027374:	bd80      	pop	{r7, pc}
 8027376:	bf00      	nop
 8027378:	20007ee4 	.word	0x20007ee4

0802737c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 802737c:	b580      	push	{r7, lr}
 802737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027380:	4802      	ldr	r0, [pc, #8]	; (802738c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8027382:	f001 fcac 	bl	8028cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8027386:	bf00      	nop
 8027388:	bd80      	pop	{r7, pc}
 802738a:	bf00      	nop
 802738c:	20007ee4 	.word	0x20007ee4

08027390 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8027390:	b580      	push	{r7, lr}
 8027392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8027394:	4802      	ldr	r0, [pc, #8]	; (80273a0 <OTG_HS_IRQHandler+0x10>)
 8027396:	f001 fca2 	bl	8028cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 802739a:	bf00      	nop
 802739c:	bd80      	pop	{r7, pc}
 802739e:	bf00      	nop
 80273a0:	20007ee4 	.word	0x20007ee4

080273a4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80273a4:	b480      	push	{r7}
 80273a6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80273a8:	bf00      	nop
 80273aa:	46bd      	mov	sp, r7
 80273ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b0:	4770      	bx	lr

080273b2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80273b2:	b580      	push	{r7, lr}
 80273b4:	b086      	sub	sp, #24
 80273b6:	af00      	add	r7, sp, #0
 80273b8:	60f8      	str	r0, [r7, #12]
 80273ba:	60b9      	str	r1, [r7, #8]
 80273bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80273be:	2300      	movs	r3, #0
 80273c0:	617b      	str	r3, [r7, #20]
 80273c2:	e00a      	b.n	80273da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80273c4:	f3af 8000 	nop.w
 80273c8:	4601      	mov	r1, r0
 80273ca:	68bb      	ldr	r3, [r7, #8]
 80273cc:	1c5a      	adds	r2, r3, #1
 80273ce:	60ba      	str	r2, [r7, #8]
 80273d0:	b2ca      	uxtb	r2, r1
 80273d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80273d4:	697b      	ldr	r3, [r7, #20]
 80273d6:	3301      	adds	r3, #1
 80273d8:	617b      	str	r3, [r7, #20]
 80273da:	697a      	ldr	r2, [r7, #20]
 80273dc:	687b      	ldr	r3, [r7, #4]
 80273de:	429a      	cmp	r2, r3
 80273e0:	dbf0      	blt.n	80273c4 <_read+0x12>
  }

  return len;
 80273e2:	687b      	ldr	r3, [r7, #4]
}
 80273e4:	4618      	mov	r0, r3
 80273e6:	3718      	adds	r7, #24
 80273e8:	46bd      	mov	sp, r7
 80273ea:	bd80      	pop	{r7, pc}

080273ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80273ec:	b480      	push	{r7}
 80273ee:	b083      	sub	sp, #12
 80273f0:	af00      	add	r7, sp, #0
 80273f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80273f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80273f8:	4618      	mov	r0, r3
 80273fa:	370c      	adds	r7, #12
 80273fc:	46bd      	mov	sp, r7
 80273fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027402:	4770      	bx	lr

08027404 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8027404:	b480      	push	{r7}
 8027406:	b083      	sub	sp, #12
 8027408:	af00      	add	r7, sp, #0
 802740a:	6078      	str	r0, [r7, #4]
 802740c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802740e:	683b      	ldr	r3, [r7, #0]
 8027410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027414:	605a      	str	r2, [r3, #4]
  return 0;
 8027416:	2300      	movs	r3, #0
}
 8027418:	4618      	mov	r0, r3
 802741a:	370c      	adds	r7, #12
 802741c:	46bd      	mov	sp, r7
 802741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027422:	4770      	bx	lr

08027424 <_isatty>:

int _isatty(int file)
{
 8027424:	b480      	push	{r7}
 8027426:	b083      	sub	sp, #12
 8027428:	af00      	add	r7, sp, #0
 802742a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802742c:	2301      	movs	r3, #1
}
 802742e:	4618      	mov	r0, r3
 8027430:	370c      	adds	r7, #12
 8027432:	46bd      	mov	sp, r7
 8027434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027438:	4770      	bx	lr

0802743a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802743a:	b480      	push	{r7}
 802743c:	b085      	sub	sp, #20
 802743e:	af00      	add	r7, sp, #0
 8027440:	60f8      	str	r0, [r7, #12]
 8027442:	60b9      	str	r1, [r7, #8]
 8027444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8027446:	2300      	movs	r3, #0
}
 8027448:	4618      	mov	r0, r3
 802744a:	3714      	adds	r7, #20
 802744c:	46bd      	mov	sp, r7
 802744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027452:	4770      	bx	lr

08027454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8027454:	b580      	push	{r7, lr}
 8027456:	b086      	sub	sp, #24
 8027458:	af00      	add	r7, sp, #0
 802745a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802745c:	4a14      	ldr	r2, [pc, #80]	; (80274b0 <_sbrk+0x5c>)
 802745e:	4b15      	ldr	r3, [pc, #84]	; (80274b4 <_sbrk+0x60>)
 8027460:	1ad3      	subs	r3, r2, r3
 8027462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8027464:	697b      	ldr	r3, [r7, #20]
 8027466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8027468:	4b13      	ldr	r3, [pc, #76]	; (80274b8 <_sbrk+0x64>)
 802746a:	681b      	ldr	r3, [r3, #0]
 802746c:	2b00      	cmp	r3, #0
 802746e:	d102      	bne.n	8027476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8027470:	4b11      	ldr	r3, [pc, #68]	; (80274b8 <_sbrk+0x64>)
 8027472:	4a12      	ldr	r2, [pc, #72]	; (80274bc <_sbrk+0x68>)
 8027474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8027476:	4b10      	ldr	r3, [pc, #64]	; (80274b8 <_sbrk+0x64>)
 8027478:	681a      	ldr	r2, [r3, #0]
 802747a:	687b      	ldr	r3, [r7, #4]
 802747c:	4413      	add	r3, r2
 802747e:	693a      	ldr	r2, [r7, #16]
 8027480:	429a      	cmp	r2, r3
 8027482:	d207      	bcs.n	8027494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8027484:	f00a faaa 	bl	80319dc <__errno>
 8027488:	4603      	mov	r3, r0
 802748a:	220c      	movs	r2, #12
 802748c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802748e:	f04f 33ff 	mov.w	r3, #4294967295
 8027492:	e009      	b.n	80274a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8027494:	4b08      	ldr	r3, [pc, #32]	; (80274b8 <_sbrk+0x64>)
 8027496:	681b      	ldr	r3, [r3, #0]
 8027498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802749a:	4b07      	ldr	r3, [pc, #28]	; (80274b8 <_sbrk+0x64>)
 802749c:	681a      	ldr	r2, [r3, #0]
 802749e:	687b      	ldr	r3, [r7, #4]
 80274a0:	4413      	add	r3, r2
 80274a2:	4a05      	ldr	r2, [pc, #20]	; (80274b8 <_sbrk+0x64>)
 80274a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80274a6:	68fb      	ldr	r3, [r7, #12]
}
 80274a8:	4618      	mov	r0, r3
 80274aa:	3718      	adds	r7, #24
 80274ac:	46bd      	mov	sp, r7
 80274ae:	bd80      	pop	{r7, pc}
 80274b0:	2000c000 	.word	0x2000c000
 80274b4:	00001000 	.word	0x00001000
 80274b8:	200051b0 	.word	0x200051b0
 80274bc:	20008760 	.word	0x20008760

080274c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80274c0:	b480      	push	{r7}
 80274c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80274c4:	4b07      	ldr	r3, [pc, #28]	; (80274e4 <SystemInit+0x24>)
 80274c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80274ca:	4a06      	ldr	r2, [pc, #24]	; (80274e4 <SystemInit+0x24>)
 80274cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80274d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80274d4:	4b03      	ldr	r3, [pc, #12]	; (80274e4 <SystemInit+0x24>)
 80274d6:	4a04      	ldr	r2, [pc, #16]	; (80274e8 <SystemInit+0x28>)
 80274d8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80274da:	bf00      	nop
 80274dc:	46bd      	mov	sp, r7
 80274de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274e2:	4770      	bx	lr
 80274e4:	e000ed00 	.word	0xe000ed00
 80274e8:	08022000 	.word	0x08022000

080274ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80274ec:	b580      	push	{r7, lr}
 80274ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80274f0:	4b11      	ldr	r3, [pc, #68]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 80274f2:	4a12      	ldr	r2, [pc, #72]	; (802753c <MX_USART1_UART_Init+0x50>)
 80274f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80274f6:	4b10      	ldr	r3, [pc, #64]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 80274f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80274fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80274fe:	4b0e      	ldr	r3, [pc, #56]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 8027500:	2200      	movs	r2, #0
 8027502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027504:	4b0c      	ldr	r3, [pc, #48]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 8027506:	2200      	movs	r2, #0
 8027508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802750a:	4b0b      	ldr	r3, [pc, #44]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 802750c:	2200      	movs	r2, #0
 802750e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8027510:	4b09      	ldr	r3, [pc, #36]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 8027512:	220c      	movs	r2, #12
 8027514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027516:	4b08      	ldr	r3, [pc, #32]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 8027518:	2200      	movs	r2, #0
 802751a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802751c:	4b06      	ldr	r3, [pc, #24]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 802751e:	2200      	movs	r2, #0
 8027520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027522:	4805      	ldr	r0, [pc, #20]	; (8027538 <MX_USART1_UART_Init+0x4c>)
 8027524:	f004 fbaa 	bl	802bc7c <HAL_UART_Init>
 8027528:	4603      	mov	r3, r0
 802752a:	2b00      	cmp	r3, #0
 802752c:	d001      	beq.n	8027532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 802752e:	f7fc fa75 	bl	8023a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8027532:	bf00      	nop
 8027534:	bd80      	pop	{r7, pc}
 8027536:	bf00      	nop
 8027538:	200051b4 	.word	0x200051b4
 802753c:	40011000 	.word	0x40011000

08027540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027540:	b580      	push	{r7, lr}
 8027542:	b08a      	sub	sp, #40	; 0x28
 8027544:	af00      	add	r7, sp, #0
 8027546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027548:	f107 0314 	add.w	r3, r7, #20
 802754c:	2200      	movs	r2, #0
 802754e:	601a      	str	r2, [r3, #0]
 8027550:	605a      	str	r2, [r3, #4]
 8027552:	609a      	str	r2, [r3, #8]
 8027554:	60da      	str	r2, [r3, #12]
 8027556:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8027558:	687b      	ldr	r3, [r7, #4]
 802755a:	681b      	ldr	r3, [r3, #0]
 802755c:	4a1d      	ldr	r2, [pc, #116]	; (80275d4 <HAL_UART_MspInit+0x94>)
 802755e:	4293      	cmp	r3, r2
 8027560:	d134      	bne.n	80275cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8027562:	2300      	movs	r3, #0
 8027564:	613b      	str	r3, [r7, #16]
 8027566:	4b1c      	ldr	r3, [pc, #112]	; (80275d8 <HAL_UART_MspInit+0x98>)
 8027568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802756a:	4a1b      	ldr	r2, [pc, #108]	; (80275d8 <HAL_UART_MspInit+0x98>)
 802756c:	f043 0310 	orr.w	r3, r3, #16
 8027570:	6453      	str	r3, [r2, #68]	; 0x44
 8027572:	4b19      	ldr	r3, [pc, #100]	; (80275d8 <HAL_UART_MspInit+0x98>)
 8027574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027576:	f003 0310 	and.w	r3, r3, #16
 802757a:	613b      	str	r3, [r7, #16]
 802757c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802757e:	2300      	movs	r3, #0
 8027580:	60fb      	str	r3, [r7, #12]
 8027582:	4b15      	ldr	r3, [pc, #84]	; (80275d8 <HAL_UART_MspInit+0x98>)
 8027584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027586:	4a14      	ldr	r2, [pc, #80]	; (80275d8 <HAL_UART_MspInit+0x98>)
 8027588:	f043 0301 	orr.w	r3, r3, #1
 802758c:	6313      	str	r3, [r2, #48]	; 0x30
 802758e:	4b12      	ldr	r3, [pc, #72]	; (80275d8 <HAL_UART_MspInit+0x98>)
 8027590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027592:	f003 0301 	and.w	r3, r3, #1
 8027596:	60fb      	str	r3, [r7, #12]
 8027598:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 802759a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802759e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80275a0:	2302      	movs	r3, #2
 80275a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80275a4:	2300      	movs	r3, #0
 80275a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80275a8:	2303      	movs	r3, #3
 80275aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80275ac:	2307      	movs	r3, #7
 80275ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80275b0:	f107 0314 	add.w	r3, r7, #20
 80275b4:	4619      	mov	r1, r3
 80275b6:	4809      	ldr	r0, [pc, #36]	; (80275dc <HAL_UART_MspInit+0x9c>)
 80275b8:	f000 fe64 	bl	8028284 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80275bc:	2200      	movs	r2, #0
 80275be:	2100      	movs	r1, #0
 80275c0:	2025      	movs	r0, #37	; 0x25
 80275c2:	f000 f9fc 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80275c6:	2025      	movs	r0, #37	; 0x25
 80275c8:	f000 fa15 	bl	80279f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80275cc:	bf00      	nop
 80275ce:	3728      	adds	r7, #40	; 0x28
 80275d0:	46bd      	mov	sp, r7
 80275d2:	bd80      	pop	{r7, pc}
 80275d4:	40011000 	.word	0x40011000
 80275d8:	40023800 	.word	0x40023800
 80275dc:	40020000 	.word	0x40020000

080275e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80275e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8027618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80275e4:	480d      	ldr	r0, [pc, #52]	; (802761c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80275e6:	490e      	ldr	r1, [pc, #56]	; (8027620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80275e8:	4a0e      	ldr	r2, [pc, #56]	; (8027624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80275ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80275ec:	e002      	b.n	80275f4 <LoopCopyDataInit>

080275ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80275ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80275f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80275f2:	3304      	adds	r3, #4

080275f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80275f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80275f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80275f8:	d3f9      	bcc.n	80275ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80275fa:	4a0b      	ldr	r2, [pc, #44]	; (8027628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80275fc:	4c0b      	ldr	r4, [pc, #44]	; (802762c <LoopFillZerobss+0x26>)
  movs r3, #0
 80275fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027600:	e001      	b.n	8027606 <LoopFillZerobss>

08027602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027604:	3204      	adds	r2, #4

08027606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8027606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8027608:	d3fb      	bcc.n	8027602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802760a:	f7ff ff59 	bl	80274c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802760e:	f00a f9eb 	bl	80319e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027612:	f7fc f937 	bl	8023884 <main>
  bx  lr    
 8027616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8027618:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 802761c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8027620:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8027624:	0803336c 	.word	0x0803336c
  ldr r2, =_sbss
 8027628:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 802762c:	2000875c 	.word	0x2000875c

08027630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027630:	e7fe      	b.n	8027630 <ADC_IRQHandler>
	...

08027634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8027634:	b580      	push	{r7, lr}
 8027636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027638:	4b0e      	ldr	r3, [pc, #56]	; (8027674 <HAL_Init+0x40>)
 802763a:	681b      	ldr	r3, [r3, #0]
 802763c:	4a0d      	ldr	r2, [pc, #52]	; (8027674 <HAL_Init+0x40>)
 802763e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8027644:	4b0b      	ldr	r3, [pc, #44]	; (8027674 <HAL_Init+0x40>)
 8027646:	681b      	ldr	r3, [r3, #0]
 8027648:	4a0a      	ldr	r2, [pc, #40]	; (8027674 <HAL_Init+0x40>)
 802764a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802764e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8027650:	4b08      	ldr	r3, [pc, #32]	; (8027674 <HAL_Init+0x40>)
 8027652:	681b      	ldr	r3, [r3, #0]
 8027654:	4a07      	ldr	r2, [pc, #28]	; (8027674 <HAL_Init+0x40>)
 8027656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802765a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802765c:	2003      	movs	r0, #3
 802765e:	f000 f9a3 	bl	80279a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8027662:	200f      	movs	r0, #15
 8027664:	f000 f808 	bl	8027678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8027668:	f7ff fdd0 	bl	802720c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802766c:	2300      	movs	r3, #0
}
 802766e:	4618      	mov	r0, r3
 8027670:	bd80      	pop	{r7, pc}
 8027672:	bf00      	nop
 8027674:	40023c00 	.word	0x40023c00

08027678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8027678:	b580      	push	{r7, lr}
 802767a:	b082      	sub	sp, #8
 802767c:	af00      	add	r7, sp, #0
 802767e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8027680:	4b12      	ldr	r3, [pc, #72]	; (80276cc <HAL_InitTick+0x54>)
 8027682:	681a      	ldr	r2, [r3, #0]
 8027684:	4b12      	ldr	r3, [pc, #72]	; (80276d0 <HAL_InitTick+0x58>)
 8027686:	781b      	ldrb	r3, [r3, #0]
 8027688:	4619      	mov	r1, r3
 802768a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802768e:	fbb3 f3f1 	udiv	r3, r3, r1
 8027692:	fbb2 f3f3 	udiv	r3, r2, r3
 8027696:	4618      	mov	r0, r3
 8027698:	f000 f9c9 	bl	8027a2e <HAL_SYSTICK_Config>
 802769c:	4603      	mov	r3, r0
 802769e:	2b00      	cmp	r3, #0
 80276a0:	d001      	beq.n	80276a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80276a2:	2301      	movs	r3, #1
 80276a4:	e00e      	b.n	80276c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80276a6:	687b      	ldr	r3, [r7, #4]
 80276a8:	2b0f      	cmp	r3, #15
 80276aa:	d80a      	bhi.n	80276c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80276ac:	2200      	movs	r2, #0
 80276ae:	6879      	ldr	r1, [r7, #4]
 80276b0:	f04f 30ff 	mov.w	r0, #4294967295
 80276b4:	f000 f983 	bl	80279be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80276b8:	4a06      	ldr	r2, [pc, #24]	; (80276d4 <HAL_InitTick+0x5c>)
 80276ba:	687b      	ldr	r3, [r7, #4]
 80276bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80276be:	2300      	movs	r3, #0
 80276c0:	e000      	b.n	80276c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80276c2:	2301      	movs	r3, #1
}
 80276c4:	4618      	mov	r0, r3
 80276c6:	3708      	adds	r7, #8
 80276c8:	46bd      	mov	sp, r7
 80276ca:	bd80      	pop	{r7, pc}
 80276cc:	20000138 	.word	0x20000138
 80276d0:	20000140 	.word	0x20000140
 80276d4:	2000013c 	.word	0x2000013c

080276d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80276d8:	b480      	push	{r7}
 80276da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80276dc:	4b06      	ldr	r3, [pc, #24]	; (80276f8 <HAL_IncTick+0x20>)
 80276de:	781b      	ldrb	r3, [r3, #0]
 80276e0:	461a      	mov	r2, r3
 80276e2:	4b06      	ldr	r3, [pc, #24]	; (80276fc <HAL_IncTick+0x24>)
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	4413      	add	r3, r2
 80276e8:	4a04      	ldr	r2, [pc, #16]	; (80276fc <HAL_IncTick+0x24>)
 80276ea:	6013      	str	r3, [r2, #0]
}
 80276ec:	bf00      	nop
 80276ee:	46bd      	mov	sp, r7
 80276f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276f4:	4770      	bx	lr
 80276f6:	bf00      	nop
 80276f8:	20000140 	.word	0x20000140
 80276fc:	200051f8 	.word	0x200051f8

08027700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8027700:	b480      	push	{r7}
 8027702:	af00      	add	r7, sp, #0
  return uwTick;
 8027704:	4b03      	ldr	r3, [pc, #12]	; (8027714 <HAL_GetTick+0x14>)
 8027706:	681b      	ldr	r3, [r3, #0]
}
 8027708:	4618      	mov	r0, r3
 802770a:	46bd      	mov	sp, r7
 802770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027710:	4770      	bx	lr
 8027712:	bf00      	nop
 8027714:	200051f8 	.word	0x200051f8

08027718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8027718:	b580      	push	{r7, lr}
 802771a:	b084      	sub	sp, #16
 802771c:	af00      	add	r7, sp, #0
 802771e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8027720:	f7ff ffee 	bl	8027700 <HAL_GetTick>
 8027724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8027726:	687b      	ldr	r3, [r7, #4]
 8027728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802772a:	68fb      	ldr	r3, [r7, #12]
 802772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027730:	d005      	beq.n	802773e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8027732:	4b0a      	ldr	r3, [pc, #40]	; (802775c <HAL_Delay+0x44>)
 8027734:	781b      	ldrb	r3, [r3, #0]
 8027736:	461a      	mov	r2, r3
 8027738:	68fb      	ldr	r3, [r7, #12]
 802773a:	4413      	add	r3, r2
 802773c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802773e:	bf00      	nop
 8027740:	f7ff ffde 	bl	8027700 <HAL_GetTick>
 8027744:	4602      	mov	r2, r0
 8027746:	68bb      	ldr	r3, [r7, #8]
 8027748:	1ad3      	subs	r3, r2, r3
 802774a:	68fa      	ldr	r2, [r7, #12]
 802774c:	429a      	cmp	r2, r3
 802774e:	d8f7      	bhi.n	8027740 <HAL_Delay+0x28>
  {
  }
}
 8027750:	bf00      	nop
 8027752:	bf00      	nop
 8027754:	3710      	adds	r7, #16
 8027756:	46bd      	mov	sp, r7
 8027758:	bd80      	pop	{r7, pc}
 802775a:	bf00      	nop
 802775c:	20000140 	.word	0x20000140

08027760 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8027760:	b480      	push	{r7}
 8027762:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8027764:	4b05      	ldr	r3, [pc, #20]	; (802777c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8027766:	685b      	ldr	r3, [r3, #4]
 8027768:	4a04      	ldr	r2, [pc, #16]	; (802777c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 802776a:	f043 0301 	orr.w	r3, r3, #1
 802776e:	6053      	str	r3, [r2, #4]
}
 8027770:	bf00      	nop
 8027772:	46bd      	mov	sp, r7
 8027774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027778:	4770      	bx	lr
 802777a:	bf00      	nop
 802777c:	e0042000 	.word	0xe0042000

08027780 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8027780:	b480      	push	{r7}
 8027782:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8027784:	4b05      	ldr	r3, [pc, #20]	; (802779c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8027786:	685b      	ldr	r3, [r3, #4]
 8027788:	4a04      	ldr	r2, [pc, #16]	; (802779c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 802778a:	f043 0302 	orr.w	r3, r3, #2
 802778e:	6053      	str	r3, [r2, #4]
}
 8027790:	bf00      	nop
 8027792:	46bd      	mov	sp, r7
 8027794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027798:	4770      	bx	lr
 802779a:	bf00      	nop
 802779c:	e0042000 	.word	0xe0042000

080277a0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80277a0:	b480      	push	{r7}
 80277a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80277a4:	4b05      	ldr	r3, [pc, #20]	; (80277bc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80277a6:	685b      	ldr	r3, [r3, #4]
 80277a8:	4a04      	ldr	r2, [pc, #16]	; (80277bc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80277aa:	f043 0304 	orr.w	r3, r3, #4
 80277ae:	6053      	str	r3, [r2, #4]
}
 80277b0:	bf00      	nop
 80277b2:	46bd      	mov	sp, r7
 80277b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b8:	4770      	bx	lr
 80277ba:	bf00      	nop
 80277bc:	e0042000 	.word	0xe0042000

080277c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80277c0:	b480      	push	{r7}
 80277c2:	b085      	sub	sp, #20
 80277c4:	af00      	add	r7, sp, #0
 80277c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80277c8:	687b      	ldr	r3, [r7, #4]
 80277ca:	f003 0307 	and.w	r3, r3, #7
 80277ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80277d0:	4b0c      	ldr	r3, [pc, #48]	; (8027804 <__NVIC_SetPriorityGrouping+0x44>)
 80277d2:	68db      	ldr	r3, [r3, #12]
 80277d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80277d6:	68ba      	ldr	r2, [r7, #8]
 80277d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80277dc:	4013      	ands	r3, r2
 80277de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80277e0:	68fb      	ldr	r3, [r7, #12]
 80277e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80277e4:	68bb      	ldr	r3, [r7, #8]
 80277e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80277e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80277ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80277f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80277f2:	4a04      	ldr	r2, [pc, #16]	; (8027804 <__NVIC_SetPriorityGrouping+0x44>)
 80277f4:	68bb      	ldr	r3, [r7, #8]
 80277f6:	60d3      	str	r3, [r2, #12]
}
 80277f8:	bf00      	nop
 80277fa:	3714      	adds	r7, #20
 80277fc:	46bd      	mov	sp, r7
 80277fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027802:	4770      	bx	lr
 8027804:	e000ed00 	.word	0xe000ed00

08027808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8027808:	b480      	push	{r7}
 802780a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802780c:	4b04      	ldr	r3, [pc, #16]	; (8027820 <__NVIC_GetPriorityGrouping+0x18>)
 802780e:	68db      	ldr	r3, [r3, #12]
 8027810:	0a1b      	lsrs	r3, r3, #8
 8027812:	f003 0307 	and.w	r3, r3, #7
}
 8027816:	4618      	mov	r0, r3
 8027818:	46bd      	mov	sp, r7
 802781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802781e:	4770      	bx	lr
 8027820:	e000ed00 	.word	0xe000ed00

08027824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027824:	b480      	push	{r7}
 8027826:	b083      	sub	sp, #12
 8027828:	af00      	add	r7, sp, #0
 802782a:	4603      	mov	r3, r0
 802782c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802782e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027832:	2b00      	cmp	r3, #0
 8027834:	db0b      	blt.n	802784e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027836:	79fb      	ldrb	r3, [r7, #7]
 8027838:	f003 021f 	and.w	r2, r3, #31
 802783c:	4907      	ldr	r1, [pc, #28]	; (802785c <__NVIC_EnableIRQ+0x38>)
 802783e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027842:	095b      	lsrs	r3, r3, #5
 8027844:	2001      	movs	r0, #1
 8027846:	fa00 f202 	lsl.w	r2, r0, r2
 802784a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802784e:	bf00      	nop
 8027850:	370c      	adds	r7, #12
 8027852:	46bd      	mov	sp, r7
 8027854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027858:	4770      	bx	lr
 802785a:	bf00      	nop
 802785c:	e000e100 	.word	0xe000e100

08027860 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027860:	b480      	push	{r7}
 8027862:	b083      	sub	sp, #12
 8027864:	af00      	add	r7, sp, #0
 8027866:	4603      	mov	r3, r0
 8027868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802786a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802786e:	2b00      	cmp	r3, #0
 8027870:	db12      	blt.n	8027898 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027872:	79fb      	ldrb	r3, [r7, #7]
 8027874:	f003 021f 	and.w	r2, r3, #31
 8027878:	490a      	ldr	r1, [pc, #40]	; (80278a4 <__NVIC_DisableIRQ+0x44>)
 802787a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802787e:	095b      	lsrs	r3, r3, #5
 8027880:	2001      	movs	r0, #1
 8027882:	fa00 f202 	lsl.w	r2, r0, r2
 8027886:	3320      	adds	r3, #32
 8027888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 802788c:	f3bf 8f4f 	dsb	sy
}
 8027890:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8027892:	f3bf 8f6f 	isb	sy
}
 8027896:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8027898:	bf00      	nop
 802789a:	370c      	adds	r7, #12
 802789c:	46bd      	mov	sp, r7
 802789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278a2:	4770      	bx	lr
 80278a4:	e000e100 	.word	0xe000e100

080278a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80278a8:	b480      	push	{r7}
 80278aa:	b083      	sub	sp, #12
 80278ac:	af00      	add	r7, sp, #0
 80278ae:	4603      	mov	r3, r0
 80278b0:	6039      	str	r1, [r7, #0]
 80278b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80278b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278b8:	2b00      	cmp	r3, #0
 80278ba:	db0a      	blt.n	80278d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80278bc:	683b      	ldr	r3, [r7, #0]
 80278be:	b2da      	uxtb	r2, r3
 80278c0:	490c      	ldr	r1, [pc, #48]	; (80278f4 <__NVIC_SetPriority+0x4c>)
 80278c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278c6:	0112      	lsls	r2, r2, #4
 80278c8:	b2d2      	uxtb	r2, r2
 80278ca:	440b      	add	r3, r1
 80278cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80278d0:	e00a      	b.n	80278e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80278d2:	683b      	ldr	r3, [r7, #0]
 80278d4:	b2da      	uxtb	r2, r3
 80278d6:	4908      	ldr	r1, [pc, #32]	; (80278f8 <__NVIC_SetPriority+0x50>)
 80278d8:	79fb      	ldrb	r3, [r7, #7]
 80278da:	f003 030f 	and.w	r3, r3, #15
 80278de:	3b04      	subs	r3, #4
 80278e0:	0112      	lsls	r2, r2, #4
 80278e2:	b2d2      	uxtb	r2, r2
 80278e4:	440b      	add	r3, r1
 80278e6:	761a      	strb	r2, [r3, #24]
}
 80278e8:	bf00      	nop
 80278ea:	370c      	adds	r7, #12
 80278ec:	46bd      	mov	sp, r7
 80278ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278f2:	4770      	bx	lr
 80278f4:	e000e100 	.word	0xe000e100
 80278f8:	e000ed00 	.word	0xe000ed00

080278fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80278fc:	b480      	push	{r7}
 80278fe:	b089      	sub	sp, #36	; 0x24
 8027900:	af00      	add	r7, sp, #0
 8027902:	60f8      	str	r0, [r7, #12]
 8027904:	60b9      	str	r1, [r7, #8]
 8027906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8027908:	68fb      	ldr	r3, [r7, #12]
 802790a:	f003 0307 	and.w	r3, r3, #7
 802790e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8027910:	69fb      	ldr	r3, [r7, #28]
 8027912:	f1c3 0307 	rsb	r3, r3, #7
 8027916:	2b04      	cmp	r3, #4
 8027918:	bf28      	it	cs
 802791a:	2304      	movcs	r3, #4
 802791c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802791e:	69fb      	ldr	r3, [r7, #28]
 8027920:	3304      	adds	r3, #4
 8027922:	2b06      	cmp	r3, #6
 8027924:	d902      	bls.n	802792c <NVIC_EncodePriority+0x30>
 8027926:	69fb      	ldr	r3, [r7, #28]
 8027928:	3b03      	subs	r3, #3
 802792a:	e000      	b.n	802792e <NVIC_EncodePriority+0x32>
 802792c:	2300      	movs	r3, #0
 802792e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027930:	f04f 32ff 	mov.w	r2, #4294967295
 8027934:	69bb      	ldr	r3, [r7, #24]
 8027936:	fa02 f303 	lsl.w	r3, r2, r3
 802793a:	43da      	mvns	r2, r3
 802793c:	68bb      	ldr	r3, [r7, #8]
 802793e:	401a      	ands	r2, r3
 8027940:	697b      	ldr	r3, [r7, #20]
 8027942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027944:	f04f 31ff 	mov.w	r1, #4294967295
 8027948:	697b      	ldr	r3, [r7, #20]
 802794a:	fa01 f303 	lsl.w	r3, r1, r3
 802794e:	43d9      	mvns	r1, r3
 8027950:	687b      	ldr	r3, [r7, #4]
 8027952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027954:	4313      	orrs	r3, r2
         );
}
 8027956:	4618      	mov	r0, r3
 8027958:	3724      	adds	r7, #36	; 0x24
 802795a:	46bd      	mov	sp, r7
 802795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027960:	4770      	bx	lr
	...

08027964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8027964:	b580      	push	{r7, lr}
 8027966:	b082      	sub	sp, #8
 8027968:	af00      	add	r7, sp, #0
 802796a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802796c:	687b      	ldr	r3, [r7, #4]
 802796e:	3b01      	subs	r3, #1
 8027970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8027974:	d301      	bcc.n	802797a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8027976:	2301      	movs	r3, #1
 8027978:	e00f      	b.n	802799a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802797a:	4a0a      	ldr	r2, [pc, #40]	; (80279a4 <SysTick_Config+0x40>)
 802797c:	687b      	ldr	r3, [r7, #4]
 802797e:	3b01      	subs	r3, #1
 8027980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8027982:	210f      	movs	r1, #15
 8027984:	f04f 30ff 	mov.w	r0, #4294967295
 8027988:	f7ff ff8e 	bl	80278a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802798c:	4b05      	ldr	r3, [pc, #20]	; (80279a4 <SysTick_Config+0x40>)
 802798e:	2200      	movs	r2, #0
 8027990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8027992:	4b04      	ldr	r3, [pc, #16]	; (80279a4 <SysTick_Config+0x40>)
 8027994:	2207      	movs	r2, #7
 8027996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8027998:	2300      	movs	r3, #0
}
 802799a:	4618      	mov	r0, r3
 802799c:	3708      	adds	r7, #8
 802799e:	46bd      	mov	sp, r7
 80279a0:	bd80      	pop	{r7, pc}
 80279a2:	bf00      	nop
 80279a4:	e000e010 	.word	0xe000e010

080279a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80279a8:	b580      	push	{r7, lr}
 80279aa:	b082      	sub	sp, #8
 80279ac:	af00      	add	r7, sp, #0
 80279ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80279b0:	6878      	ldr	r0, [r7, #4]
 80279b2:	f7ff ff05 	bl	80277c0 <__NVIC_SetPriorityGrouping>
}
 80279b6:	bf00      	nop
 80279b8:	3708      	adds	r7, #8
 80279ba:	46bd      	mov	sp, r7
 80279bc:	bd80      	pop	{r7, pc}

080279be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80279be:	b580      	push	{r7, lr}
 80279c0:	b086      	sub	sp, #24
 80279c2:	af00      	add	r7, sp, #0
 80279c4:	4603      	mov	r3, r0
 80279c6:	60b9      	str	r1, [r7, #8]
 80279c8:	607a      	str	r2, [r7, #4]
 80279ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80279cc:	2300      	movs	r3, #0
 80279ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80279d0:	f7ff ff1a 	bl	8027808 <__NVIC_GetPriorityGrouping>
 80279d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80279d6:	687a      	ldr	r2, [r7, #4]
 80279d8:	68b9      	ldr	r1, [r7, #8]
 80279da:	6978      	ldr	r0, [r7, #20]
 80279dc:	f7ff ff8e 	bl	80278fc <NVIC_EncodePriority>
 80279e0:	4602      	mov	r2, r0
 80279e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80279e6:	4611      	mov	r1, r2
 80279e8:	4618      	mov	r0, r3
 80279ea:	f7ff ff5d 	bl	80278a8 <__NVIC_SetPriority>
}
 80279ee:	bf00      	nop
 80279f0:	3718      	adds	r7, #24
 80279f2:	46bd      	mov	sp, r7
 80279f4:	bd80      	pop	{r7, pc}

080279f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80279f6:	b580      	push	{r7, lr}
 80279f8:	b082      	sub	sp, #8
 80279fa:	af00      	add	r7, sp, #0
 80279fc:	4603      	mov	r3, r0
 80279fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8027a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027a04:	4618      	mov	r0, r3
 8027a06:	f7ff ff0d 	bl	8027824 <__NVIC_EnableIRQ>
}
 8027a0a:	bf00      	nop
 8027a0c:	3708      	adds	r7, #8
 8027a0e:	46bd      	mov	sp, r7
 8027a10:	bd80      	pop	{r7, pc}

08027a12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027a12:	b580      	push	{r7, lr}
 8027a14:	b082      	sub	sp, #8
 8027a16:	af00      	add	r7, sp, #0
 8027a18:	4603      	mov	r3, r0
 8027a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8027a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027a20:	4618      	mov	r0, r3
 8027a22:	f7ff ff1d 	bl	8027860 <__NVIC_DisableIRQ>
}
 8027a26:	bf00      	nop
 8027a28:	3708      	adds	r7, #8
 8027a2a:	46bd      	mov	sp, r7
 8027a2c:	bd80      	pop	{r7, pc}

08027a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8027a2e:	b580      	push	{r7, lr}
 8027a30:	b082      	sub	sp, #8
 8027a32:	af00      	add	r7, sp, #0
 8027a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8027a36:	6878      	ldr	r0, [r7, #4]
 8027a38:	f7ff ff94 	bl	8027964 <SysTick_Config>
 8027a3c:	4603      	mov	r3, r0
}
 8027a3e:	4618      	mov	r0, r3
 8027a40:	3708      	adds	r7, #8
 8027a42:	46bd      	mov	sp, r7
 8027a44:	bd80      	pop	{r7, pc}

08027a46 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8027a46:	b580      	push	{r7, lr}
 8027a48:	b084      	sub	sp, #16
 8027a4a:	af00      	add	r7, sp, #0
 8027a4c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027a4e:	687b      	ldr	r3, [r7, #4]
 8027a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a52:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8027a54:	f7ff fe54 	bl	8027700 <HAL_GetTick>
 8027a58:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8027a5a:	687b      	ldr	r3, [r7, #4]
 8027a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027a60:	b2db      	uxtb	r3, r3
 8027a62:	2b02      	cmp	r3, #2
 8027a64:	d008      	beq.n	8027a78 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8027a66:	687b      	ldr	r3, [r7, #4]
 8027a68:	2280      	movs	r2, #128	; 0x80
 8027a6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8027a6c:	687b      	ldr	r3, [r7, #4]
 8027a6e:	2200      	movs	r2, #0
 8027a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8027a74:	2301      	movs	r3, #1
 8027a76:	e052      	b.n	8027b1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8027a78:	687b      	ldr	r3, [r7, #4]
 8027a7a:	681b      	ldr	r3, [r3, #0]
 8027a7c:	681a      	ldr	r2, [r3, #0]
 8027a7e:	687b      	ldr	r3, [r7, #4]
 8027a80:	681b      	ldr	r3, [r3, #0]
 8027a82:	f022 0216 	bic.w	r2, r2, #22
 8027a86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8027a88:	687b      	ldr	r3, [r7, #4]
 8027a8a:	681b      	ldr	r3, [r3, #0]
 8027a8c:	695a      	ldr	r2, [r3, #20]
 8027a8e:	687b      	ldr	r3, [r7, #4]
 8027a90:	681b      	ldr	r3, [r3, #0]
 8027a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027a96:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8027a98:	687b      	ldr	r3, [r7, #4]
 8027a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027a9c:	2b00      	cmp	r3, #0
 8027a9e:	d103      	bne.n	8027aa8 <HAL_DMA_Abort+0x62>
 8027aa0:	687b      	ldr	r3, [r7, #4]
 8027aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027aa4:	2b00      	cmp	r3, #0
 8027aa6:	d007      	beq.n	8027ab8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027aa8:	687b      	ldr	r3, [r7, #4]
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	681a      	ldr	r2, [r3, #0]
 8027aae:	687b      	ldr	r3, [r7, #4]
 8027ab0:	681b      	ldr	r3, [r3, #0]
 8027ab2:	f022 0208 	bic.w	r2, r2, #8
 8027ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027ab8:	687b      	ldr	r3, [r7, #4]
 8027aba:	681b      	ldr	r3, [r3, #0]
 8027abc:	681a      	ldr	r2, [r3, #0]
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	681b      	ldr	r3, [r3, #0]
 8027ac2:	f022 0201 	bic.w	r2, r2, #1
 8027ac6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027ac8:	e013      	b.n	8027af2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8027aca:	f7ff fe19 	bl	8027700 <HAL_GetTick>
 8027ace:	4602      	mov	r2, r0
 8027ad0:	68bb      	ldr	r3, [r7, #8]
 8027ad2:	1ad3      	subs	r3, r2, r3
 8027ad4:	2b05      	cmp	r3, #5
 8027ad6:	d90c      	bls.n	8027af2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027ad8:	687b      	ldr	r3, [r7, #4]
 8027ada:	2220      	movs	r2, #32
 8027adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8027ade:	687b      	ldr	r3, [r7, #4]
 8027ae0:	2203      	movs	r2, #3
 8027ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	2200      	movs	r2, #0
 8027aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8027aee:	2303      	movs	r3, #3
 8027af0:	e015      	b.n	8027b1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	681b      	ldr	r3, [r3, #0]
 8027af6:	681b      	ldr	r3, [r3, #0]
 8027af8:	f003 0301 	and.w	r3, r3, #1
 8027afc:	2b00      	cmp	r3, #0
 8027afe:	d1e4      	bne.n	8027aca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027b00:	687b      	ldr	r3, [r7, #4]
 8027b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b04:	223f      	movs	r2, #63	; 0x3f
 8027b06:	409a      	lsls	r2, r3
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	2201      	movs	r2, #1
 8027b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8027b14:	687b      	ldr	r3, [r7, #4]
 8027b16:	2200      	movs	r2, #0
 8027b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8027b1c:	2300      	movs	r3, #0
}
 8027b1e:	4618      	mov	r0, r3
 8027b20:	3710      	adds	r7, #16
 8027b22:	46bd      	mov	sp, r7
 8027b24:	bd80      	pop	{r7, pc}

08027b26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8027b26:	b480      	push	{r7}
 8027b28:	b083      	sub	sp, #12
 8027b2a:	af00      	add	r7, sp, #0
 8027b2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8027b2e:	687b      	ldr	r3, [r7, #4]
 8027b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027b34:	b2db      	uxtb	r3, r3
 8027b36:	2b02      	cmp	r3, #2
 8027b38:	d004      	beq.n	8027b44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8027b3a:	687b      	ldr	r3, [r7, #4]
 8027b3c:	2280      	movs	r2, #128	; 0x80
 8027b3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8027b40:	2301      	movs	r3, #1
 8027b42:	e00c      	b.n	8027b5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8027b44:	687b      	ldr	r3, [r7, #4]
 8027b46:	2205      	movs	r2, #5
 8027b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027b4c:	687b      	ldr	r3, [r7, #4]
 8027b4e:	681b      	ldr	r3, [r3, #0]
 8027b50:	681a      	ldr	r2, [r3, #0]
 8027b52:	687b      	ldr	r3, [r7, #4]
 8027b54:	681b      	ldr	r3, [r3, #0]
 8027b56:	f022 0201 	bic.w	r2, r2, #1
 8027b5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8027b5c:	2300      	movs	r3, #0
}
 8027b5e:	4618      	mov	r0, r3
 8027b60:	370c      	adds	r7, #12
 8027b62:	46bd      	mov	sp, r7
 8027b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b68:	4770      	bx	lr
	...

08027b6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027b6c:	b580      	push	{r7, lr}
 8027b6e:	b086      	sub	sp, #24
 8027b70:	af00      	add	r7, sp, #0
 8027b72:	60f8      	str	r0, [r7, #12]
 8027b74:	60b9      	str	r1, [r7, #8]
 8027b76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027b7a:	2301      	movs	r3, #1
 8027b7c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027b7e:	4b23      	ldr	r3, [pc, #140]	; (8027c0c <HAL_FLASH_Program+0xa0>)
 8027b80:	7e1b      	ldrb	r3, [r3, #24]
 8027b82:	2b01      	cmp	r3, #1
 8027b84:	d101      	bne.n	8027b8a <HAL_FLASH_Program+0x1e>
 8027b86:	2302      	movs	r3, #2
 8027b88:	e03b      	b.n	8027c02 <HAL_FLASH_Program+0x96>
 8027b8a:	4b20      	ldr	r3, [pc, #128]	; (8027c0c <HAL_FLASH_Program+0xa0>)
 8027b8c:	2201      	movs	r2, #1
 8027b8e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027b90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027b94:	f000 f924 	bl	8027de0 <FLASH_WaitForLastOperation>
 8027b98:	4603      	mov	r3, r0
 8027b9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027b9c:	7dfb      	ldrb	r3, [r7, #23]
 8027b9e:	2b00      	cmp	r3, #0
 8027ba0:	d12b      	bne.n	8027bfa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027ba2:	68fb      	ldr	r3, [r7, #12]
 8027ba4:	2b00      	cmp	r3, #0
 8027ba6:	d105      	bne.n	8027bb4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027ba8:	783b      	ldrb	r3, [r7, #0]
 8027baa:	4619      	mov	r1, r3
 8027bac:	68b8      	ldr	r0, [r7, #8]
 8027bae:	f000 f9cf 	bl	8027f50 <FLASH_Program_Byte>
 8027bb2:	e016      	b.n	8027be2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027bb4:	68fb      	ldr	r3, [r7, #12]
 8027bb6:	2b01      	cmp	r3, #1
 8027bb8:	d105      	bne.n	8027bc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8027bba:	883b      	ldrh	r3, [r7, #0]
 8027bbc:	4619      	mov	r1, r3
 8027bbe:	68b8      	ldr	r0, [r7, #8]
 8027bc0:	f000 f9a2 	bl	8027f08 <FLASH_Program_HalfWord>
 8027bc4:	e00d      	b.n	8027be2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027bc6:	68fb      	ldr	r3, [r7, #12]
 8027bc8:	2b02      	cmp	r3, #2
 8027bca:	d105      	bne.n	8027bd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027bcc:	683b      	ldr	r3, [r7, #0]
 8027bce:	4619      	mov	r1, r3
 8027bd0:	68b8      	ldr	r0, [r7, #8]
 8027bd2:	f000 f977 	bl	8027ec4 <FLASH_Program_Word>
 8027bd6:	e004      	b.n	8027be2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027bdc:	68b8      	ldr	r0, [r7, #8]
 8027bde:	f000 f93f 	bl	8027e60 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027be2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027be6:	f000 f8fb 	bl	8027de0 <FLASH_WaitForLastOperation>
 8027bea:	4603      	mov	r3, r0
 8027bec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027bee:	4b08      	ldr	r3, [pc, #32]	; (8027c10 <HAL_FLASH_Program+0xa4>)
 8027bf0:	691b      	ldr	r3, [r3, #16]
 8027bf2:	4a07      	ldr	r2, [pc, #28]	; (8027c10 <HAL_FLASH_Program+0xa4>)
 8027bf4:	f023 0301 	bic.w	r3, r3, #1
 8027bf8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027bfa:	4b04      	ldr	r3, [pc, #16]	; (8027c0c <HAL_FLASH_Program+0xa0>)
 8027bfc:	2200      	movs	r2, #0
 8027bfe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8027c02:	4618      	mov	r0, r3
 8027c04:	3718      	adds	r7, #24
 8027c06:	46bd      	mov	sp, r7
 8027c08:	bd80      	pop	{r7, pc}
 8027c0a:	bf00      	nop
 8027c0c:	200051fc 	.word	0x200051fc
 8027c10:	40023c00 	.word	0x40023c00

08027c14 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8027c14:	b580      	push	{r7, lr}
 8027c16:	b082      	sub	sp, #8
 8027c18:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8027c1a:	2300      	movs	r3, #0
 8027c1c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027c1e:	4b4b      	ldr	r3, [pc, #300]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027c20:	68db      	ldr	r3, [r3, #12]
 8027c22:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027c26:	2b00      	cmp	r3, #0
 8027c28:	d020      	beq.n	8027c6c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027c2a:	4b49      	ldr	r3, [pc, #292]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c2c:	781b      	ldrb	r3, [r3, #0]
 8027c2e:	b2db      	uxtb	r3, r3
 8027c30:	2b01      	cmp	r3, #1
 8027c32:	d107      	bne.n	8027c44 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8027c34:	4b46      	ldr	r3, [pc, #280]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c36:	68db      	ldr	r3, [r3, #12]
 8027c38:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8027c3a:	4b45      	ldr	r3, [pc, #276]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8027c40:	60da      	str	r2, [r3, #12]
 8027c42:	e00b      	b.n	8027c5c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8027c44:	4b42      	ldr	r3, [pc, #264]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c46:	781b      	ldrb	r3, [r3, #0]
 8027c48:	b2db      	uxtb	r3, r3
 8027c4a:	2b02      	cmp	r3, #2
 8027c4c:	d103      	bne.n	8027c56 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8027c4e:	4b40      	ldr	r3, [pc, #256]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c50:	691b      	ldr	r3, [r3, #16]
 8027c52:	607b      	str	r3, [r7, #4]
 8027c54:	e002      	b.n	8027c5c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8027c56:	4b3e      	ldr	r3, [pc, #248]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c58:	695b      	ldr	r3, [r3, #20]
 8027c5a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8027c5c:	f000 f99a 	bl	8027f94 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8027c60:	6878      	ldr	r0, [r7, #4]
 8027c62:	f000 f881 	bl	8027d68 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027c66:	4b3a      	ldr	r3, [pc, #232]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c68:	2200      	movs	r2, #0
 8027c6a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027c6c:	4b37      	ldr	r3, [pc, #220]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027c6e:	68db      	ldr	r3, [r3, #12]
 8027c70:	f003 0301 	and.w	r3, r3, #1
 8027c74:	2b00      	cmp	r3, #0
 8027c76:	d04a      	beq.n	8027d0e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027c78:	4b34      	ldr	r3, [pc, #208]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027c7a:	2201      	movs	r2, #1
 8027c7c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027c7e:	4b34      	ldr	r3, [pc, #208]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c80:	781b      	ldrb	r3, [r3, #0]
 8027c82:	b2db      	uxtb	r3, r3
 8027c84:	2b01      	cmp	r3, #1
 8027c86:	d12d      	bne.n	8027ce4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8027c88:	4b31      	ldr	r3, [pc, #196]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c8a:	685b      	ldr	r3, [r3, #4]
 8027c8c:	3b01      	subs	r3, #1
 8027c8e:	4a30      	ldr	r2, [pc, #192]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c90:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8027c92:	4b2f      	ldr	r3, [pc, #188]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c94:	685b      	ldr	r3, [r3, #4]
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	d015      	beq.n	8027cc6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8027c9a:	4b2d      	ldr	r3, [pc, #180]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027c9c:	68db      	ldr	r3, [r3, #12]
 8027c9e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027ca0:	6878      	ldr	r0, [r7, #4]
 8027ca2:	f000 f857 	bl	8027d54 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8027ca6:	4b2a      	ldr	r3, [pc, #168]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027ca8:	68db      	ldr	r3, [r3, #12]
 8027caa:	3301      	adds	r3, #1
 8027cac:	4a28      	ldr	r2, [pc, #160]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cae:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8027cb0:	4b27      	ldr	r3, [pc, #156]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cb2:	68db      	ldr	r3, [r3, #12]
 8027cb4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8027cb6:	4b26      	ldr	r3, [pc, #152]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cb8:	7a1b      	ldrb	r3, [r3, #8]
 8027cba:	b2db      	uxtb	r3, r3
 8027cbc:	4619      	mov	r1, r3
 8027cbe:	6878      	ldr	r0, [r7, #4]
 8027cc0:	f000 fa52 	bl	8028168 <FLASH_Erase_Sector>
 8027cc4:	e023      	b.n	8027d0e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8027cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8027cca:	607b      	str	r3, [r7, #4]
 8027ccc:	4a20      	ldr	r2, [pc, #128]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cce:	687b      	ldr	r3, [r7, #4]
 8027cd0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027cd2:	4b1f      	ldr	r3, [pc, #124]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cd4:	2200      	movs	r2, #0
 8027cd6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027cd8:	f000 fa8e 	bl	80281f8 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027cdc:	6878      	ldr	r0, [r7, #4]
 8027cde:	f000 f839 	bl	8027d54 <HAL_FLASH_EndOfOperationCallback>
 8027ce2:	e014      	b.n	8027d0e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8027ce4:	4b1a      	ldr	r3, [pc, #104]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027ce6:	781b      	ldrb	r3, [r3, #0]
 8027ce8:	b2db      	uxtb	r3, r3
 8027cea:	2b02      	cmp	r3, #2
 8027cec:	d107      	bne.n	8027cfe <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027cee:	f000 fa83 	bl	80281f8 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8027cf2:	4b17      	ldr	r3, [pc, #92]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027cf4:	691b      	ldr	r3, [r3, #16]
 8027cf6:	4618      	mov	r0, r3
 8027cf8:	f000 f82c 	bl	8027d54 <HAL_FLASH_EndOfOperationCallback>
 8027cfc:	e004      	b.n	8027d08 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8027cfe:	4b14      	ldr	r3, [pc, #80]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027d00:	695b      	ldr	r3, [r3, #20]
 8027d02:	4618      	mov	r0, r3
 8027d04:	f000 f826 	bl	8027d54 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027d08:	4b11      	ldr	r3, [pc, #68]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027d0a:	2200      	movs	r2, #0
 8027d0c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8027d0e:	4b10      	ldr	r3, [pc, #64]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027d10:	781b      	ldrb	r3, [r3, #0]
 8027d12:	b2db      	uxtb	r3, r3
 8027d14:	2b00      	cmp	r3, #0
 8027d16:	d114      	bne.n	8027d42 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8027d18:	4b0c      	ldr	r3, [pc, #48]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d1a:	691b      	ldr	r3, [r3, #16]
 8027d1c:	4a0b      	ldr	r2, [pc, #44]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027d22:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8027d24:	4b09      	ldr	r3, [pc, #36]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d26:	691b      	ldr	r3, [r3, #16]
 8027d28:	4a08      	ldr	r2, [pc, #32]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027d2e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8027d30:	4b06      	ldr	r3, [pc, #24]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d32:	691b      	ldr	r3, [r3, #16]
 8027d34:	4a05      	ldr	r2, [pc, #20]	; (8027d4c <HAL_FLASH_IRQHandler+0x138>)
 8027d36:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8027d3a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8027d3c:	4b04      	ldr	r3, [pc, #16]	; (8027d50 <HAL_FLASH_IRQHandler+0x13c>)
 8027d3e:	2200      	movs	r2, #0
 8027d40:	761a      	strb	r2, [r3, #24]
  }
}
 8027d42:	bf00      	nop
 8027d44:	3708      	adds	r7, #8
 8027d46:	46bd      	mov	sp, r7
 8027d48:	bd80      	pop	{r7, pc}
 8027d4a:	bf00      	nop
 8027d4c:	40023c00 	.word	0x40023c00
 8027d50:	200051fc 	.word	0x200051fc

08027d54 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8027d54:	b480      	push	{r7}
 8027d56:	b083      	sub	sp, #12
 8027d58:	af00      	add	r7, sp, #0
 8027d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8027d5c:	bf00      	nop
 8027d5e:	370c      	adds	r7, #12
 8027d60:	46bd      	mov	sp, r7
 8027d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d66:	4770      	bx	lr

08027d68 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8027d68:	b480      	push	{r7}
 8027d6a:	b083      	sub	sp, #12
 8027d6c:	af00      	add	r7, sp, #0
 8027d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8027d70:	bf00      	nop
 8027d72:	370c      	adds	r7, #12
 8027d74:	46bd      	mov	sp, r7
 8027d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d7a:	4770      	bx	lr

08027d7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027d7c:	b480      	push	{r7}
 8027d7e:	b083      	sub	sp, #12
 8027d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027d82:	2300      	movs	r3, #0
 8027d84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027d86:	4b0b      	ldr	r3, [pc, #44]	; (8027db4 <HAL_FLASH_Unlock+0x38>)
 8027d88:	691b      	ldr	r3, [r3, #16]
 8027d8a:	2b00      	cmp	r3, #0
 8027d8c:	da0b      	bge.n	8027da6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027d8e:	4b09      	ldr	r3, [pc, #36]	; (8027db4 <HAL_FLASH_Unlock+0x38>)
 8027d90:	4a09      	ldr	r2, [pc, #36]	; (8027db8 <HAL_FLASH_Unlock+0x3c>)
 8027d92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027d94:	4b07      	ldr	r3, [pc, #28]	; (8027db4 <HAL_FLASH_Unlock+0x38>)
 8027d96:	4a09      	ldr	r2, [pc, #36]	; (8027dbc <HAL_FLASH_Unlock+0x40>)
 8027d98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027d9a:	4b06      	ldr	r3, [pc, #24]	; (8027db4 <HAL_FLASH_Unlock+0x38>)
 8027d9c:	691b      	ldr	r3, [r3, #16]
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	da01      	bge.n	8027da6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027da2:	2301      	movs	r3, #1
 8027da4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027da6:	79fb      	ldrb	r3, [r7, #7]
}
 8027da8:	4618      	mov	r0, r3
 8027daa:	370c      	adds	r7, #12
 8027dac:	46bd      	mov	sp, r7
 8027dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027db2:	4770      	bx	lr
 8027db4:	40023c00 	.word	0x40023c00
 8027db8:	45670123 	.word	0x45670123
 8027dbc:	cdef89ab 	.word	0xcdef89ab

08027dc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027dc0:	b480      	push	{r7}
 8027dc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027dc4:	4b05      	ldr	r3, [pc, #20]	; (8027ddc <HAL_FLASH_Lock+0x1c>)
 8027dc6:	691b      	ldr	r3, [r3, #16]
 8027dc8:	4a04      	ldr	r2, [pc, #16]	; (8027ddc <HAL_FLASH_Lock+0x1c>)
 8027dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027dce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027dd0:	2300      	movs	r3, #0
}
 8027dd2:	4618      	mov	r0, r3
 8027dd4:	46bd      	mov	sp, r7
 8027dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dda:	4770      	bx	lr
 8027ddc:	40023c00 	.word	0x40023c00

08027de0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027de0:	b580      	push	{r7, lr}
 8027de2:	b084      	sub	sp, #16
 8027de4:	af00      	add	r7, sp, #0
 8027de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027de8:	2300      	movs	r3, #0
 8027dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027dec:	4b1a      	ldr	r3, [pc, #104]	; (8027e58 <FLASH_WaitForLastOperation+0x78>)
 8027dee:	2200      	movs	r2, #0
 8027df0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027df2:	f7ff fc85 	bl	8027700 <HAL_GetTick>
 8027df6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027df8:	e010      	b.n	8027e1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027dfa:	687b      	ldr	r3, [r7, #4]
 8027dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e00:	d00c      	beq.n	8027e1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8027e02:	687b      	ldr	r3, [r7, #4]
 8027e04:	2b00      	cmp	r3, #0
 8027e06:	d007      	beq.n	8027e18 <FLASH_WaitForLastOperation+0x38>
 8027e08:	f7ff fc7a 	bl	8027700 <HAL_GetTick>
 8027e0c:	4602      	mov	r2, r0
 8027e0e:	68fb      	ldr	r3, [r7, #12]
 8027e10:	1ad3      	subs	r3, r2, r3
 8027e12:	687a      	ldr	r2, [r7, #4]
 8027e14:	429a      	cmp	r2, r3
 8027e16:	d201      	bcs.n	8027e1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027e18:	2303      	movs	r3, #3
 8027e1a:	e019      	b.n	8027e50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027e1c:	4b0f      	ldr	r3, [pc, #60]	; (8027e5c <FLASH_WaitForLastOperation+0x7c>)
 8027e1e:	68db      	ldr	r3, [r3, #12]
 8027e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027e24:	2b00      	cmp	r3, #0
 8027e26:	d1e8      	bne.n	8027dfa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027e28:	4b0c      	ldr	r3, [pc, #48]	; (8027e5c <FLASH_WaitForLastOperation+0x7c>)
 8027e2a:	68db      	ldr	r3, [r3, #12]
 8027e2c:	f003 0301 	and.w	r3, r3, #1
 8027e30:	2b00      	cmp	r3, #0
 8027e32:	d002      	beq.n	8027e3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027e34:	4b09      	ldr	r3, [pc, #36]	; (8027e5c <FLASH_WaitForLastOperation+0x7c>)
 8027e36:	2201      	movs	r2, #1
 8027e38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027e3a:	4b08      	ldr	r3, [pc, #32]	; (8027e5c <FLASH_WaitForLastOperation+0x7c>)
 8027e3c:	68db      	ldr	r3, [r3, #12]
 8027e3e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027e42:	2b00      	cmp	r3, #0
 8027e44:	d003      	beq.n	8027e4e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027e46:	f000 f8a5 	bl	8027f94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027e4a:	2301      	movs	r3, #1
 8027e4c:	e000      	b.n	8027e50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027e4e:	2300      	movs	r3, #0
  
}  
 8027e50:	4618      	mov	r0, r3
 8027e52:	3710      	adds	r7, #16
 8027e54:	46bd      	mov	sp, r7
 8027e56:	bd80      	pop	{r7, pc}
 8027e58:	200051fc 	.word	0x200051fc
 8027e5c:	40023c00 	.word	0x40023c00

08027e60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027e60:	b480      	push	{r7}
 8027e62:	b085      	sub	sp, #20
 8027e64:	af00      	add	r7, sp, #0
 8027e66:	60f8      	str	r0, [r7, #12]
 8027e68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027e6c:	4b14      	ldr	r3, [pc, #80]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e6e:	691b      	ldr	r3, [r3, #16]
 8027e70:	4a13      	ldr	r2, [pc, #76]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027e78:	4b11      	ldr	r3, [pc, #68]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e7a:	691b      	ldr	r3, [r3, #16]
 8027e7c:	4a10      	ldr	r2, [pc, #64]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e7e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027e84:	4b0e      	ldr	r3, [pc, #56]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e86:	691b      	ldr	r3, [r3, #16]
 8027e88:	4a0d      	ldr	r2, [pc, #52]	; (8027ec0 <FLASH_Program_DoubleWord+0x60>)
 8027e8a:	f043 0301 	orr.w	r3, r3, #1
 8027e8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027e90:	68fb      	ldr	r3, [r7, #12]
 8027e92:	683a      	ldr	r2, [r7, #0]
 8027e94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8027e96:	f3bf 8f6f 	isb	sy
}
 8027e9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8027ea0:	f04f 0200 	mov.w	r2, #0
 8027ea4:	f04f 0300 	mov.w	r3, #0
 8027ea8:	000a      	movs	r2, r1
 8027eaa:	2300      	movs	r3, #0
 8027eac:	68f9      	ldr	r1, [r7, #12]
 8027eae:	3104      	adds	r1, #4
 8027eb0:	4613      	mov	r3, r2
 8027eb2:	600b      	str	r3, [r1, #0]
}
 8027eb4:	bf00      	nop
 8027eb6:	3714      	adds	r7, #20
 8027eb8:	46bd      	mov	sp, r7
 8027eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ebe:	4770      	bx	lr
 8027ec0:	40023c00 	.word	0x40023c00

08027ec4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027ec4:	b480      	push	{r7}
 8027ec6:	b083      	sub	sp, #12
 8027ec8:	af00      	add	r7, sp, #0
 8027eca:	6078      	str	r0, [r7, #4]
 8027ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027ece:	4b0d      	ldr	r3, [pc, #52]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027ed0:	691b      	ldr	r3, [r3, #16]
 8027ed2:	4a0c      	ldr	r2, [pc, #48]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027ed8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027eda:	4b0a      	ldr	r3, [pc, #40]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027edc:	691b      	ldr	r3, [r3, #16]
 8027ede:	4a09      	ldr	r2, [pc, #36]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027ee4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027ee6:	4b07      	ldr	r3, [pc, #28]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027ee8:	691b      	ldr	r3, [r3, #16]
 8027eea:	4a06      	ldr	r2, [pc, #24]	; (8027f04 <FLASH_Program_Word+0x40>)
 8027eec:	f043 0301 	orr.w	r3, r3, #1
 8027ef0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	683a      	ldr	r2, [r7, #0]
 8027ef6:	601a      	str	r2, [r3, #0]
}
 8027ef8:	bf00      	nop
 8027efa:	370c      	adds	r7, #12
 8027efc:	46bd      	mov	sp, r7
 8027efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f02:	4770      	bx	lr
 8027f04:	40023c00 	.word	0x40023c00

08027f08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027f08:	b480      	push	{r7}
 8027f0a:	b083      	sub	sp, #12
 8027f0c:	af00      	add	r7, sp, #0
 8027f0e:	6078      	str	r0, [r7, #4]
 8027f10:	460b      	mov	r3, r1
 8027f12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027f14:	4b0d      	ldr	r3, [pc, #52]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f16:	691b      	ldr	r3, [r3, #16]
 8027f18:	4a0c      	ldr	r2, [pc, #48]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027f20:	4b0a      	ldr	r3, [pc, #40]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f22:	691b      	ldr	r3, [r3, #16]
 8027f24:	4a09      	ldr	r2, [pc, #36]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027f2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027f2c:	4b07      	ldr	r3, [pc, #28]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f2e:	691b      	ldr	r3, [r3, #16]
 8027f30:	4a06      	ldr	r2, [pc, #24]	; (8027f4c <FLASH_Program_HalfWord+0x44>)
 8027f32:	f043 0301 	orr.w	r3, r3, #1
 8027f36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027f38:	687b      	ldr	r3, [r7, #4]
 8027f3a:	887a      	ldrh	r2, [r7, #2]
 8027f3c:	801a      	strh	r2, [r3, #0]
}
 8027f3e:	bf00      	nop
 8027f40:	370c      	adds	r7, #12
 8027f42:	46bd      	mov	sp, r7
 8027f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f48:	4770      	bx	lr
 8027f4a:	bf00      	nop
 8027f4c:	40023c00 	.word	0x40023c00

08027f50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027f50:	b480      	push	{r7}
 8027f52:	b083      	sub	sp, #12
 8027f54:	af00      	add	r7, sp, #0
 8027f56:	6078      	str	r0, [r7, #4]
 8027f58:	460b      	mov	r3, r1
 8027f5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027f5c:	4b0c      	ldr	r3, [pc, #48]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f5e:	691b      	ldr	r3, [r3, #16]
 8027f60:	4a0b      	ldr	r2, [pc, #44]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027f68:	4b09      	ldr	r3, [pc, #36]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f6a:	4a09      	ldr	r2, [pc, #36]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f6c:	691b      	ldr	r3, [r3, #16]
 8027f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027f70:	4b07      	ldr	r3, [pc, #28]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f72:	691b      	ldr	r3, [r3, #16]
 8027f74:	4a06      	ldr	r2, [pc, #24]	; (8027f90 <FLASH_Program_Byte+0x40>)
 8027f76:	f043 0301 	orr.w	r3, r3, #1
 8027f7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	78fa      	ldrb	r2, [r7, #3]
 8027f80:	701a      	strb	r2, [r3, #0]
}
 8027f82:	bf00      	nop
 8027f84:	370c      	adds	r7, #12
 8027f86:	46bd      	mov	sp, r7
 8027f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f8c:	4770      	bx	lr
 8027f8e:	bf00      	nop
 8027f90:	40023c00 	.word	0x40023c00

08027f94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027f94:	b480      	push	{r7}
 8027f96:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027f98:	4b27      	ldr	r3, [pc, #156]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027f9a:	68db      	ldr	r3, [r3, #12]
 8027f9c:	f003 0310 	and.w	r3, r3, #16
 8027fa0:	2b00      	cmp	r3, #0
 8027fa2:	d008      	beq.n	8027fb6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027fa4:	4b25      	ldr	r3, [pc, #148]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fa6:	69db      	ldr	r3, [r3, #28]
 8027fa8:	f043 0310 	orr.w	r3, r3, #16
 8027fac:	4a23      	ldr	r2, [pc, #140]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027fb0:	4b21      	ldr	r3, [pc, #132]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027fb2:	2210      	movs	r2, #16
 8027fb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027fb6:	4b20      	ldr	r3, [pc, #128]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027fb8:	68db      	ldr	r3, [r3, #12]
 8027fba:	f003 0320 	and.w	r3, r3, #32
 8027fbe:	2b00      	cmp	r3, #0
 8027fc0:	d008      	beq.n	8027fd4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027fc2:	4b1e      	ldr	r3, [pc, #120]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fc4:	69db      	ldr	r3, [r3, #28]
 8027fc6:	f043 0308 	orr.w	r3, r3, #8
 8027fca:	4a1c      	ldr	r2, [pc, #112]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fcc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027fce:	4b1a      	ldr	r3, [pc, #104]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027fd0:	2220      	movs	r2, #32
 8027fd2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027fd4:	4b18      	ldr	r3, [pc, #96]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027fd6:	68db      	ldr	r3, [r3, #12]
 8027fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d008      	beq.n	8027ff2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027fe0:	4b16      	ldr	r3, [pc, #88]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fe2:	69db      	ldr	r3, [r3, #28]
 8027fe4:	f043 0304 	orr.w	r3, r3, #4
 8027fe8:	4a14      	ldr	r2, [pc, #80]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8027fea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027fec:	4b12      	ldr	r3, [pc, #72]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027fee:	2240      	movs	r2, #64	; 0x40
 8027ff0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027ff2:	4b11      	ldr	r3, [pc, #68]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8027ff4:	68db      	ldr	r3, [r3, #12]
 8027ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	d008      	beq.n	8028010 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027ffe:	4b0f      	ldr	r3, [pc, #60]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8028000:	69db      	ldr	r3, [r3, #28]
 8028002:	f043 0302 	orr.w	r3, r3, #2
 8028006:	4a0d      	ldr	r2, [pc, #52]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8028008:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802800a:	4b0b      	ldr	r3, [pc, #44]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 802800c:	2280      	movs	r2, #128	; 0x80
 802800e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8028010:	4b09      	ldr	r3, [pc, #36]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 8028012:	68db      	ldr	r3, [r3, #12]
 8028014:	f003 0302 	and.w	r3, r3, #2
 8028018:	2b00      	cmp	r3, #0
 802801a:	d008      	beq.n	802802e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 802801c:	4b07      	ldr	r3, [pc, #28]	; (802803c <FLASH_SetErrorCode+0xa8>)
 802801e:	69db      	ldr	r3, [r3, #28]
 8028020:	f043 0320 	orr.w	r3, r3, #32
 8028024:	4a05      	ldr	r2, [pc, #20]	; (802803c <FLASH_SetErrorCode+0xa8>)
 8028026:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8028028:	4b03      	ldr	r3, [pc, #12]	; (8028038 <FLASH_SetErrorCode+0xa4>)
 802802a:	2202      	movs	r2, #2
 802802c:	60da      	str	r2, [r3, #12]
  }
}
 802802e:	bf00      	nop
 8028030:	46bd      	mov	sp, r7
 8028032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028036:	4770      	bx	lr
 8028038:	40023c00 	.word	0x40023c00
 802803c:	200051fc 	.word	0x200051fc

08028040 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8028040:	b580      	push	{r7, lr}
 8028042:	b084      	sub	sp, #16
 8028044:	af00      	add	r7, sp, #0
 8028046:	6078      	str	r0, [r7, #4]
 8028048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802804a:	2301      	movs	r3, #1
 802804c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802804e:	2300      	movs	r3, #0
 8028050:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8028052:	4b31      	ldr	r3, [pc, #196]	; (8028118 <HAL_FLASHEx_Erase+0xd8>)
 8028054:	7e1b      	ldrb	r3, [r3, #24]
 8028056:	2b01      	cmp	r3, #1
 8028058:	d101      	bne.n	802805e <HAL_FLASHEx_Erase+0x1e>
 802805a:	2302      	movs	r3, #2
 802805c:	e058      	b.n	8028110 <HAL_FLASHEx_Erase+0xd0>
 802805e:	4b2e      	ldr	r3, [pc, #184]	; (8028118 <HAL_FLASHEx_Erase+0xd8>)
 8028060:	2201      	movs	r2, #1
 8028062:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028064:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028068:	f7ff feba 	bl	8027de0 <FLASH_WaitForLastOperation>
 802806c:	4603      	mov	r3, r0
 802806e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8028070:	7bfb      	ldrb	r3, [r7, #15]
 8028072:	2b00      	cmp	r3, #0
 8028074:	d148      	bne.n	8028108 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8028076:	683b      	ldr	r3, [r7, #0]
 8028078:	f04f 32ff 	mov.w	r2, #4294967295
 802807c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802807e:	687b      	ldr	r3, [r7, #4]
 8028080:	681b      	ldr	r3, [r3, #0]
 8028082:	2b01      	cmp	r3, #1
 8028084:	d115      	bne.n	80280b2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8028086:	687b      	ldr	r3, [r7, #4]
 8028088:	691b      	ldr	r3, [r3, #16]
 802808a:	b2da      	uxtb	r2, r3
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	685b      	ldr	r3, [r3, #4]
 8028090:	4619      	mov	r1, r3
 8028092:	4610      	mov	r0, r2
 8028094:	f000 f844 	bl	8028120 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028098:	f24c 3050 	movw	r0, #50000	; 0xc350
 802809c:	f7ff fea0 	bl	8027de0 <FLASH_WaitForLastOperation>
 80280a0:	4603      	mov	r3, r0
 80280a2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80280a4:	4b1d      	ldr	r3, [pc, #116]	; (802811c <HAL_FLASHEx_Erase+0xdc>)
 80280a6:	691b      	ldr	r3, [r3, #16]
 80280a8:	4a1c      	ldr	r2, [pc, #112]	; (802811c <HAL_FLASHEx_Erase+0xdc>)
 80280aa:	f023 0304 	bic.w	r3, r3, #4
 80280ae:	6113      	str	r3, [r2, #16]
 80280b0:	e028      	b.n	8028104 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80280b2:	687b      	ldr	r3, [r7, #4]
 80280b4:	689b      	ldr	r3, [r3, #8]
 80280b6:	60bb      	str	r3, [r7, #8]
 80280b8:	e01c      	b.n	80280f4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80280ba:	687b      	ldr	r3, [r7, #4]
 80280bc:	691b      	ldr	r3, [r3, #16]
 80280be:	b2db      	uxtb	r3, r3
 80280c0:	4619      	mov	r1, r3
 80280c2:	68b8      	ldr	r0, [r7, #8]
 80280c4:	f000 f850 	bl	8028168 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80280c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80280cc:	f7ff fe88 	bl	8027de0 <FLASH_WaitForLastOperation>
 80280d0:	4603      	mov	r3, r0
 80280d2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80280d4:	4b11      	ldr	r3, [pc, #68]	; (802811c <HAL_FLASHEx_Erase+0xdc>)
 80280d6:	691b      	ldr	r3, [r3, #16]
 80280d8:	4a10      	ldr	r2, [pc, #64]	; (802811c <HAL_FLASHEx_Erase+0xdc>)
 80280da:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80280de:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80280e0:	7bfb      	ldrb	r3, [r7, #15]
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d003      	beq.n	80280ee <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80280e6:	683b      	ldr	r3, [r7, #0]
 80280e8:	68ba      	ldr	r2, [r7, #8]
 80280ea:	601a      	str	r2, [r3, #0]
          break;
 80280ec:	e00a      	b.n	8028104 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80280ee:	68bb      	ldr	r3, [r7, #8]
 80280f0:	3301      	adds	r3, #1
 80280f2:	60bb      	str	r3, [r7, #8]
 80280f4:	687b      	ldr	r3, [r7, #4]
 80280f6:	68da      	ldr	r2, [r3, #12]
 80280f8:	687b      	ldr	r3, [r7, #4]
 80280fa:	689b      	ldr	r3, [r3, #8]
 80280fc:	4413      	add	r3, r2
 80280fe:	68ba      	ldr	r2, [r7, #8]
 8028100:	429a      	cmp	r2, r3
 8028102:	d3da      	bcc.n	80280ba <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8028104:	f000 f878 	bl	80281f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8028108:	4b03      	ldr	r3, [pc, #12]	; (8028118 <HAL_FLASHEx_Erase+0xd8>)
 802810a:	2200      	movs	r2, #0
 802810c:	761a      	strb	r2, [r3, #24]

  return status;
 802810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8028110:	4618      	mov	r0, r3
 8028112:	3710      	adds	r7, #16
 8028114:	46bd      	mov	sp, r7
 8028116:	bd80      	pop	{r7, pc}
 8028118:	200051fc 	.word	0x200051fc
 802811c:	40023c00 	.word	0x40023c00

08028120 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8028120:	b480      	push	{r7}
 8028122:	b083      	sub	sp, #12
 8028124:	af00      	add	r7, sp, #0
 8028126:	4603      	mov	r3, r0
 8028128:	6039      	str	r1, [r7, #0]
 802812a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802812c:	4b0d      	ldr	r3, [pc, #52]	; (8028164 <FLASH_MassErase+0x44>)
 802812e:	691b      	ldr	r3, [r3, #16]
 8028130:	4a0c      	ldr	r2, [pc, #48]	; (8028164 <FLASH_MassErase+0x44>)
 8028132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8028138:	4b0a      	ldr	r3, [pc, #40]	; (8028164 <FLASH_MassErase+0x44>)
 802813a:	691b      	ldr	r3, [r3, #16]
 802813c:	4a09      	ldr	r2, [pc, #36]	; (8028164 <FLASH_MassErase+0x44>)
 802813e:	f043 0304 	orr.w	r3, r3, #4
 8028142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8028144:	4b07      	ldr	r3, [pc, #28]	; (8028164 <FLASH_MassErase+0x44>)
 8028146:	691a      	ldr	r2, [r3, #16]
 8028148:	79fb      	ldrb	r3, [r7, #7]
 802814a:	021b      	lsls	r3, r3, #8
 802814c:	4313      	orrs	r3, r2
 802814e:	4a05      	ldr	r2, [pc, #20]	; (8028164 <FLASH_MassErase+0x44>)
 8028150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028154:	6113      	str	r3, [r2, #16]
}
 8028156:	bf00      	nop
 8028158:	370c      	adds	r7, #12
 802815a:	46bd      	mov	sp, r7
 802815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028160:	4770      	bx	lr
 8028162:	bf00      	nop
 8028164:	40023c00 	.word	0x40023c00

08028168 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8028168:	b480      	push	{r7}
 802816a:	b085      	sub	sp, #20
 802816c:	af00      	add	r7, sp, #0
 802816e:	6078      	str	r0, [r7, #4]
 8028170:	460b      	mov	r3, r1
 8028172:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8028174:	2300      	movs	r3, #0
 8028176:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8028178:	78fb      	ldrb	r3, [r7, #3]
 802817a:	2b00      	cmp	r3, #0
 802817c:	d102      	bne.n	8028184 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 802817e:	2300      	movs	r3, #0
 8028180:	60fb      	str	r3, [r7, #12]
 8028182:	e010      	b.n	80281a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8028184:	78fb      	ldrb	r3, [r7, #3]
 8028186:	2b01      	cmp	r3, #1
 8028188:	d103      	bne.n	8028192 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802818a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802818e:	60fb      	str	r3, [r7, #12]
 8028190:	e009      	b.n	80281a6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8028192:	78fb      	ldrb	r3, [r7, #3]
 8028194:	2b02      	cmp	r3, #2
 8028196:	d103      	bne.n	80281a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8028198:	f44f 7300 	mov.w	r3, #512	; 0x200
 802819c:	60fb      	str	r3, [r7, #12]
 802819e:	e002      	b.n	80281a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80281a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80281a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80281a6:	4b13      	ldr	r3, [pc, #76]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281a8:	691b      	ldr	r3, [r3, #16]
 80281aa:	4a12      	ldr	r2, [pc, #72]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80281b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80281b2:	4b10      	ldr	r3, [pc, #64]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281b4:	691a      	ldr	r2, [r3, #16]
 80281b6:	490f      	ldr	r1, [pc, #60]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281b8:	68fb      	ldr	r3, [r7, #12]
 80281ba:	4313      	orrs	r3, r2
 80281bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80281be:	4b0d      	ldr	r3, [pc, #52]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281c0:	691b      	ldr	r3, [r3, #16]
 80281c2:	4a0c      	ldr	r2, [pc, #48]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80281c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80281ca:	4b0a      	ldr	r3, [pc, #40]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281cc:	691a      	ldr	r2, [r3, #16]
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	00db      	lsls	r3, r3, #3
 80281d2:	4313      	orrs	r3, r2
 80281d4:	4a07      	ldr	r2, [pc, #28]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281d6:	f043 0302 	orr.w	r3, r3, #2
 80281da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80281dc:	4b05      	ldr	r3, [pc, #20]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281de:	691b      	ldr	r3, [r3, #16]
 80281e0:	4a04      	ldr	r2, [pc, #16]	; (80281f4 <FLASH_Erase_Sector+0x8c>)
 80281e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80281e6:	6113      	str	r3, [r2, #16]
}
 80281e8:	bf00      	nop
 80281ea:	3714      	adds	r7, #20
 80281ec:	46bd      	mov	sp, r7
 80281ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281f2:	4770      	bx	lr
 80281f4:	40023c00 	.word	0x40023c00

080281f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80281f8:	b480      	push	{r7}
 80281fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80281fc:	4b20      	ldr	r3, [pc, #128]	; (8028280 <FLASH_FlushCaches+0x88>)
 80281fe:	681b      	ldr	r3, [r3, #0]
 8028200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028204:	2b00      	cmp	r3, #0
 8028206:	d017      	beq.n	8028238 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8028208:	4b1d      	ldr	r3, [pc, #116]	; (8028280 <FLASH_FlushCaches+0x88>)
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	4a1c      	ldr	r2, [pc, #112]	; (8028280 <FLASH_FlushCaches+0x88>)
 802820e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8028212:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8028214:	4b1a      	ldr	r3, [pc, #104]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028216:	681b      	ldr	r3, [r3, #0]
 8028218:	4a19      	ldr	r2, [pc, #100]	; (8028280 <FLASH_FlushCaches+0x88>)
 802821a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802821e:	6013      	str	r3, [r2, #0]
 8028220:	4b17      	ldr	r3, [pc, #92]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028222:	681b      	ldr	r3, [r3, #0]
 8028224:	4a16      	ldr	r2, [pc, #88]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802822a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802822c:	4b14      	ldr	r3, [pc, #80]	; (8028280 <FLASH_FlushCaches+0x88>)
 802822e:	681b      	ldr	r3, [r3, #0]
 8028230:	4a13      	ldr	r2, [pc, #76]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028236:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8028238:	4b11      	ldr	r3, [pc, #68]	; (8028280 <FLASH_FlushCaches+0x88>)
 802823a:	681b      	ldr	r3, [r3, #0]
 802823c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028240:	2b00      	cmp	r3, #0
 8028242:	d017      	beq.n	8028274 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8028244:	4b0e      	ldr	r3, [pc, #56]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028246:	681b      	ldr	r3, [r3, #0]
 8028248:	4a0d      	ldr	r2, [pc, #52]	; (8028280 <FLASH_FlushCaches+0x88>)
 802824a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802824e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028250:	4b0b      	ldr	r3, [pc, #44]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028252:	681b      	ldr	r3, [r3, #0]
 8028254:	4a0a      	ldr	r2, [pc, #40]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802825a:	6013      	str	r3, [r2, #0]
 802825c:	4b08      	ldr	r3, [pc, #32]	; (8028280 <FLASH_FlushCaches+0x88>)
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	4a07      	ldr	r2, [pc, #28]	; (8028280 <FLASH_FlushCaches+0x88>)
 8028262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028266:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8028268:	4b05      	ldr	r3, [pc, #20]	; (8028280 <FLASH_FlushCaches+0x88>)
 802826a:	681b      	ldr	r3, [r3, #0]
 802826c:	4a04      	ldr	r2, [pc, #16]	; (8028280 <FLASH_FlushCaches+0x88>)
 802826e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028272:	6013      	str	r3, [r2, #0]
  }
}
 8028274:	bf00      	nop
 8028276:	46bd      	mov	sp, r7
 8028278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802827c:	4770      	bx	lr
 802827e:	bf00      	nop
 8028280:	40023c00 	.word	0x40023c00

08028284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8028284:	b480      	push	{r7}
 8028286:	b089      	sub	sp, #36	; 0x24
 8028288:	af00      	add	r7, sp, #0
 802828a:	6078      	str	r0, [r7, #4]
 802828c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802828e:	2300      	movs	r3, #0
 8028290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8028292:	2300      	movs	r3, #0
 8028294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8028296:	2300      	movs	r3, #0
 8028298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802829a:	2300      	movs	r3, #0
 802829c:	61fb      	str	r3, [r7, #28]
 802829e:	e16b      	b.n	8028578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80282a0:	2201      	movs	r2, #1
 80282a2:	69fb      	ldr	r3, [r7, #28]
 80282a4:	fa02 f303 	lsl.w	r3, r2, r3
 80282a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80282aa:	683b      	ldr	r3, [r7, #0]
 80282ac:	681b      	ldr	r3, [r3, #0]
 80282ae:	697a      	ldr	r2, [r7, #20]
 80282b0:	4013      	ands	r3, r2
 80282b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80282b4:	693a      	ldr	r2, [r7, #16]
 80282b6:	697b      	ldr	r3, [r7, #20]
 80282b8:	429a      	cmp	r2, r3
 80282ba:	f040 815a 	bne.w	8028572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80282be:	683b      	ldr	r3, [r7, #0]
 80282c0:	685b      	ldr	r3, [r3, #4]
 80282c2:	f003 0303 	and.w	r3, r3, #3
 80282c6:	2b01      	cmp	r3, #1
 80282c8:	d005      	beq.n	80282d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80282ca:	683b      	ldr	r3, [r7, #0]
 80282cc:	685b      	ldr	r3, [r3, #4]
 80282ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80282d2:	2b02      	cmp	r3, #2
 80282d4:	d130      	bne.n	8028338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80282d6:	687b      	ldr	r3, [r7, #4]
 80282d8:	689b      	ldr	r3, [r3, #8]
 80282da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80282dc:	69fb      	ldr	r3, [r7, #28]
 80282de:	005b      	lsls	r3, r3, #1
 80282e0:	2203      	movs	r2, #3
 80282e2:	fa02 f303 	lsl.w	r3, r2, r3
 80282e6:	43db      	mvns	r3, r3
 80282e8:	69ba      	ldr	r2, [r7, #24]
 80282ea:	4013      	ands	r3, r2
 80282ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80282ee:	683b      	ldr	r3, [r7, #0]
 80282f0:	68da      	ldr	r2, [r3, #12]
 80282f2:	69fb      	ldr	r3, [r7, #28]
 80282f4:	005b      	lsls	r3, r3, #1
 80282f6:	fa02 f303 	lsl.w	r3, r2, r3
 80282fa:	69ba      	ldr	r2, [r7, #24]
 80282fc:	4313      	orrs	r3, r2
 80282fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8028300:	687b      	ldr	r3, [r7, #4]
 8028302:	69ba      	ldr	r2, [r7, #24]
 8028304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8028306:	687b      	ldr	r3, [r7, #4]
 8028308:	685b      	ldr	r3, [r3, #4]
 802830a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802830c:	2201      	movs	r2, #1
 802830e:	69fb      	ldr	r3, [r7, #28]
 8028310:	fa02 f303 	lsl.w	r3, r2, r3
 8028314:	43db      	mvns	r3, r3
 8028316:	69ba      	ldr	r2, [r7, #24]
 8028318:	4013      	ands	r3, r2
 802831a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802831c:	683b      	ldr	r3, [r7, #0]
 802831e:	685b      	ldr	r3, [r3, #4]
 8028320:	091b      	lsrs	r3, r3, #4
 8028322:	f003 0201 	and.w	r2, r3, #1
 8028326:	69fb      	ldr	r3, [r7, #28]
 8028328:	fa02 f303 	lsl.w	r3, r2, r3
 802832c:	69ba      	ldr	r2, [r7, #24]
 802832e:	4313      	orrs	r3, r2
 8028330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	69ba      	ldr	r2, [r7, #24]
 8028336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8028338:	683b      	ldr	r3, [r7, #0]
 802833a:	685b      	ldr	r3, [r3, #4]
 802833c:	f003 0303 	and.w	r3, r3, #3
 8028340:	2b03      	cmp	r3, #3
 8028342:	d017      	beq.n	8028374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8028344:	687b      	ldr	r3, [r7, #4]
 8028346:	68db      	ldr	r3, [r3, #12]
 8028348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802834a:	69fb      	ldr	r3, [r7, #28]
 802834c:	005b      	lsls	r3, r3, #1
 802834e:	2203      	movs	r2, #3
 8028350:	fa02 f303 	lsl.w	r3, r2, r3
 8028354:	43db      	mvns	r3, r3
 8028356:	69ba      	ldr	r2, [r7, #24]
 8028358:	4013      	ands	r3, r2
 802835a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802835c:	683b      	ldr	r3, [r7, #0]
 802835e:	689a      	ldr	r2, [r3, #8]
 8028360:	69fb      	ldr	r3, [r7, #28]
 8028362:	005b      	lsls	r3, r3, #1
 8028364:	fa02 f303 	lsl.w	r3, r2, r3
 8028368:	69ba      	ldr	r2, [r7, #24]
 802836a:	4313      	orrs	r3, r2
 802836c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802836e:	687b      	ldr	r3, [r7, #4]
 8028370:	69ba      	ldr	r2, [r7, #24]
 8028372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8028374:	683b      	ldr	r3, [r7, #0]
 8028376:	685b      	ldr	r3, [r3, #4]
 8028378:	f003 0303 	and.w	r3, r3, #3
 802837c:	2b02      	cmp	r3, #2
 802837e:	d123      	bne.n	80283c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8028380:	69fb      	ldr	r3, [r7, #28]
 8028382:	08da      	lsrs	r2, r3, #3
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	3208      	adds	r2, #8
 8028388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802838c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802838e:	69fb      	ldr	r3, [r7, #28]
 8028390:	f003 0307 	and.w	r3, r3, #7
 8028394:	009b      	lsls	r3, r3, #2
 8028396:	220f      	movs	r2, #15
 8028398:	fa02 f303 	lsl.w	r3, r2, r3
 802839c:	43db      	mvns	r3, r3
 802839e:	69ba      	ldr	r2, [r7, #24]
 80283a0:	4013      	ands	r3, r2
 80283a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80283a4:	683b      	ldr	r3, [r7, #0]
 80283a6:	691a      	ldr	r2, [r3, #16]
 80283a8:	69fb      	ldr	r3, [r7, #28]
 80283aa:	f003 0307 	and.w	r3, r3, #7
 80283ae:	009b      	lsls	r3, r3, #2
 80283b0:	fa02 f303 	lsl.w	r3, r2, r3
 80283b4:	69ba      	ldr	r2, [r7, #24]
 80283b6:	4313      	orrs	r3, r2
 80283b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80283ba:	69fb      	ldr	r3, [r7, #28]
 80283bc:	08da      	lsrs	r2, r3, #3
 80283be:	687b      	ldr	r3, [r7, #4]
 80283c0:	3208      	adds	r2, #8
 80283c2:	69b9      	ldr	r1, [r7, #24]
 80283c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80283c8:	687b      	ldr	r3, [r7, #4]
 80283ca:	681b      	ldr	r3, [r3, #0]
 80283cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80283ce:	69fb      	ldr	r3, [r7, #28]
 80283d0:	005b      	lsls	r3, r3, #1
 80283d2:	2203      	movs	r2, #3
 80283d4:	fa02 f303 	lsl.w	r3, r2, r3
 80283d8:	43db      	mvns	r3, r3
 80283da:	69ba      	ldr	r2, [r7, #24]
 80283dc:	4013      	ands	r3, r2
 80283de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80283e0:	683b      	ldr	r3, [r7, #0]
 80283e2:	685b      	ldr	r3, [r3, #4]
 80283e4:	f003 0203 	and.w	r2, r3, #3
 80283e8:	69fb      	ldr	r3, [r7, #28]
 80283ea:	005b      	lsls	r3, r3, #1
 80283ec:	fa02 f303 	lsl.w	r3, r2, r3
 80283f0:	69ba      	ldr	r2, [r7, #24]
 80283f2:	4313      	orrs	r3, r2
 80283f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80283f6:	687b      	ldr	r3, [r7, #4]
 80283f8:	69ba      	ldr	r2, [r7, #24]
 80283fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80283fc:	683b      	ldr	r3, [r7, #0]
 80283fe:	685b      	ldr	r3, [r3, #4]
 8028400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8028404:	2b00      	cmp	r3, #0
 8028406:	f000 80b4 	beq.w	8028572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802840a:	2300      	movs	r3, #0
 802840c:	60fb      	str	r3, [r7, #12]
 802840e:	4b60      	ldr	r3, [pc, #384]	; (8028590 <HAL_GPIO_Init+0x30c>)
 8028410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028412:	4a5f      	ldr	r2, [pc, #380]	; (8028590 <HAL_GPIO_Init+0x30c>)
 8028414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028418:	6453      	str	r3, [r2, #68]	; 0x44
 802841a:	4b5d      	ldr	r3, [pc, #372]	; (8028590 <HAL_GPIO_Init+0x30c>)
 802841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802841e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028422:	60fb      	str	r3, [r7, #12]
 8028424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8028426:	4a5b      	ldr	r2, [pc, #364]	; (8028594 <HAL_GPIO_Init+0x310>)
 8028428:	69fb      	ldr	r3, [r7, #28]
 802842a:	089b      	lsrs	r3, r3, #2
 802842c:	3302      	adds	r3, #2
 802842e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028434:	69fb      	ldr	r3, [r7, #28]
 8028436:	f003 0303 	and.w	r3, r3, #3
 802843a:	009b      	lsls	r3, r3, #2
 802843c:	220f      	movs	r2, #15
 802843e:	fa02 f303 	lsl.w	r3, r2, r3
 8028442:	43db      	mvns	r3, r3
 8028444:	69ba      	ldr	r2, [r7, #24]
 8028446:	4013      	ands	r3, r2
 8028448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	4a52      	ldr	r2, [pc, #328]	; (8028598 <HAL_GPIO_Init+0x314>)
 802844e:	4293      	cmp	r3, r2
 8028450:	d02b      	beq.n	80284aa <HAL_GPIO_Init+0x226>
 8028452:	687b      	ldr	r3, [r7, #4]
 8028454:	4a51      	ldr	r2, [pc, #324]	; (802859c <HAL_GPIO_Init+0x318>)
 8028456:	4293      	cmp	r3, r2
 8028458:	d025      	beq.n	80284a6 <HAL_GPIO_Init+0x222>
 802845a:	687b      	ldr	r3, [r7, #4]
 802845c:	4a50      	ldr	r2, [pc, #320]	; (80285a0 <HAL_GPIO_Init+0x31c>)
 802845e:	4293      	cmp	r3, r2
 8028460:	d01f      	beq.n	80284a2 <HAL_GPIO_Init+0x21e>
 8028462:	687b      	ldr	r3, [r7, #4]
 8028464:	4a4f      	ldr	r2, [pc, #316]	; (80285a4 <HAL_GPIO_Init+0x320>)
 8028466:	4293      	cmp	r3, r2
 8028468:	d019      	beq.n	802849e <HAL_GPIO_Init+0x21a>
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	4a4e      	ldr	r2, [pc, #312]	; (80285a8 <HAL_GPIO_Init+0x324>)
 802846e:	4293      	cmp	r3, r2
 8028470:	d013      	beq.n	802849a <HAL_GPIO_Init+0x216>
 8028472:	687b      	ldr	r3, [r7, #4]
 8028474:	4a4d      	ldr	r2, [pc, #308]	; (80285ac <HAL_GPIO_Init+0x328>)
 8028476:	4293      	cmp	r3, r2
 8028478:	d00d      	beq.n	8028496 <HAL_GPIO_Init+0x212>
 802847a:	687b      	ldr	r3, [r7, #4]
 802847c:	4a4c      	ldr	r2, [pc, #304]	; (80285b0 <HAL_GPIO_Init+0x32c>)
 802847e:	4293      	cmp	r3, r2
 8028480:	d007      	beq.n	8028492 <HAL_GPIO_Init+0x20e>
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	4a4b      	ldr	r2, [pc, #300]	; (80285b4 <HAL_GPIO_Init+0x330>)
 8028486:	4293      	cmp	r3, r2
 8028488:	d101      	bne.n	802848e <HAL_GPIO_Init+0x20a>
 802848a:	2307      	movs	r3, #7
 802848c:	e00e      	b.n	80284ac <HAL_GPIO_Init+0x228>
 802848e:	2308      	movs	r3, #8
 8028490:	e00c      	b.n	80284ac <HAL_GPIO_Init+0x228>
 8028492:	2306      	movs	r3, #6
 8028494:	e00a      	b.n	80284ac <HAL_GPIO_Init+0x228>
 8028496:	2305      	movs	r3, #5
 8028498:	e008      	b.n	80284ac <HAL_GPIO_Init+0x228>
 802849a:	2304      	movs	r3, #4
 802849c:	e006      	b.n	80284ac <HAL_GPIO_Init+0x228>
 802849e:	2303      	movs	r3, #3
 80284a0:	e004      	b.n	80284ac <HAL_GPIO_Init+0x228>
 80284a2:	2302      	movs	r3, #2
 80284a4:	e002      	b.n	80284ac <HAL_GPIO_Init+0x228>
 80284a6:	2301      	movs	r3, #1
 80284a8:	e000      	b.n	80284ac <HAL_GPIO_Init+0x228>
 80284aa:	2300      	movs	r3, #0
 80284ac:	69fa      	ldr	r2, [r7, #28]
 80284ae:	f002 0203 	and.w	r2, r2, #3
 80284b2:	0092      	lsls	r2, r2, #2
 80284b4:	4093      	lsls	r3, r2
 80284b6:	69ba      	ldr	r2, [r7, #24]
 80284b8:	4313      	orrs	r3, r2
 80284ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80284bc:	4935      	ldr	r1, [pc, #212]	; (8028594 <HAL_GPIO_Init+0x310>)
 80284be:	69fb      	ldr	r3, [r7, #28]
 80284c0:	089b      	lsrs	r3, r3, #2
 80284c2:	3302      	adds	r3, #2
 80284c4:	69ba      	ldr	r2, [r7, #24]
 80284c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80284ca:	4b3b      	ldr	r3, [pc, #236]	; (80285b8 <HAL_GPIO_Init+0x334>)
 80284cc:	689b      	ldr	r3, [r3, #8]
 80284ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80284d0:	693b      	ldr	r3, [r7, #16]
 80284d2:	43db      	mvns	r3, r3
 80284d4:	69ba      	ldr	r2, [r7, #24]
 80284d6:	4013      	ands	r3, r2
 80284d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80284da:	683b      	ldr	r3, [r7, #0]
 80284dc:	685b      	ldr	r3, [r3, #4]
 80284de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80284e2:	2b00      	cmp	r3, #0
 80284e4:	d003      	beq.n	80284ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80284e6:	69ba      	ldr	r2, [r7, #24]
 80284e8:	693b      	ldr	r3, [r7, #16]
 80284ea:	4313      	orrs	r3, r2
 80284ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80284ee:	4a32      	ldr	r2, [pc, #200]	; (80285b8 <HAL_GPIO_Init+0x334>)
 80284f0:	69bb      	ldr	r3, [r7, #24]
 80284f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80284f4:	4b30      	ldr	r3, [pc, #192]	; (80285b8 <HAL_GPIO_Init+0x334>)
 80284f6:	68db      	ldr	r3, [r3, #12]
 80284f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80284fa:	693b      	ldr	r3, [r7, #16]
 80284fc:	43db      	mvns	r3, r3
 80284fe:	69ba      	ldr	r2, [r7, #24]
 8028500:	4013      	ands	r3, r2
 8028502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8028504:	683b      	ldr	r3, [r7, #0]
 8028506:	685b      	ldr	r3, [r3, #4]
 8028508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802850c:	2b00      	cmp	r3, #0
 802850e:	d003      	beq.n	8028518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028510:	69ba      	ldr	r2, [r7, #24]
 8028512:	693b      	ldr	r3, [r7, #16]
 8028514:	4313      	orrs	r3, r2
 8028516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028518:	4a27      	ldr	r2, [pc, #156]	; (80285b8 <HAL_GPIO_Init+0x334>)
 802851a:	69bb      	ldr	r3, [r7, #24]
 802851c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802851e:	4b26      	ldr	r3, [pc, #152]	; (80285b8 <HAL_GPIO_Init+0x334>)
 8028520:	685b      	ldr	r3, [r3, #4]
 8028522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028524:	693b      	ldr	r3, [r7, #16]
 8028526:	43db      	mvns	r3, r3
 8028528:	69ba      	ldr	r2, [r7, #24]
 802852a:	4013      	ands	r3, r2
 802852c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802852e:	683b      	ldr	r3, [r7, #0]
 8028530:	685b      	ldr	r3, [r3, #4]
 8028532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028536:	2b00      	cmp	r3, #0
 8028538:	d003      	beq.n	8028542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802853a:	69ba      	ldr	r2, [r7, #24]
 802853c:	693b      	ldr	r3, [r7, #16]
 802853e:	4313      	orrs	r3, r2
 8028540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028542:	4a1d      	ldr	r2, [pc, #116]	; (80285b8 <HAL_GPIO_Init+0x334>)
 8028544:	69bb      	ldr	r3, [r7, #24]
 8028546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8028548:	4b1b      	ldr	r3, [pc, #108]	; (80285b8 <HAL_GPIO_Init+0x334>)
 802854a:	681b      	ldr	r3, [r3, #0]
 802854c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802854e:	693b      	ldr	r3, [r7, #16]
 8028550:	43db      	mvns	r3, r3
 8028552:	69ba      	ldr	r2, [r7, #24]
 8028554:	4013      	ands	r3, r2
 8028556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8028558:	683b      	ldr	r3, [r7, #0]
 802855a:	685b      	ldr	r3, [r3, #4]
 802855c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8028560:	2b00      	cmp	r3, #0
 8028562:	d003      	beq.n	802856c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8028564:	69ba      	ldr	r2, [r7, #24]
 8028566:	693b      	ldr	r3, [r7, #16]
 8028568:	4313      	orrs	r3, r2
 802856a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802856c:	4a12      	ldr	r2, [pc, #72]	; (80285b8 <HAL_GPIO_Init+0x334>)
 802856e:	69bb      	ldr	r3, [r7, #24]
 8028570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028572:	69fb      	ldr	r3, [r7, #28]
 8028574:	3301      	adds	r3, #1
 8028576:	61fb      	str	r3, [r7, #28]
 8028578:	69fb      	ldr	r3, [r7, #28]
 802857a:	2b0f      	cmp	r3, #15
 802857c:	f67f ae90 	bls.w	80282a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028580:	bf00      	nop
 8028582:	bf00      	nop
 8028584:	3724      	adds	r7, #36	; 0x24
 8028586:	46bd      	mov	sp, r7
 8028588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802858c:	4770      	bx	lr
 802858e:	bf00      	nop
 8028590:	40023800 	.word	0x40023800
 8028594:	40013800 	.word	0x40013800
 8028598:	40020000 	.word	0x40020000
 802859c:	40020400 	.word	0x40020400
 80285a0:	40020800 	.word	0x40020800
 80285a4:	40020c00 	.word	0x40020c00
 80285a8:	40021000 	.word	0x40021000
 80285ac:	40021400 	.word	0x40021400
 80285b0:	40021800 	.word	0x40021800
 80285b4:	40021c00 	.word	0x40021c00
 80285b8:	40013c00 	.word	0x40013c00

080285bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80285bc:	b480      	push	{r7}
 80285be:	b087      	sub	sp, #28
 80285c0:	af00      	add	r7, sp, #0
 80285c2:	6078      	str	r0, [r7, #4]
 80285c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80285c6:	2300      	movs	r3, #0
 80285c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80285ca:	2300      	movs	r3, #0
 80285cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80285ce:	2300      	movs	r3, #0
 80285d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80285d2:	2300      	movs	r3, #0
 80285d4:	617b      	str	r3, [r7, #20]
 80285d6:	e0cd      	b.n	8028774 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80285d8:	2201      	movs	r2, #1
 80285da:	697b      	ldr	r3, [r7, #20]
 80285dc:	fa02 f303 	lsl.w	r3, r2, r3
 80285e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80285e2:	683a      	ldr	r2, [r7, #0]
 80285e4:	693b      	ldr	r3, [r7, #16]
 80285e6:	4013      	ands	r3, r2
 80285e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80285ea:	68fa      	ldr	r2, [r7, #12]
 80285ec:	693b      	ldr	r3, [r7, #16]
 80285ee:	429a      	cmp	r2, r3
 80285f0:	f040 80bd 	bne.w	802876e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80285f4:	4a65      	ldr	r2, [pc, #404]	; (802878c <HAL_GPIO_DeInit+0x1d0>)
 80285f6:	697b      	ldr	r3, [r7, #20]
 80285f8:	089b      	lsrs	r3, r3, #2
 80285fa:	3302      	adds	r3, #2
 80285fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028600:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8028602:	697b      	ldr	r3, [r7, #20]
 8028604:	f003 0303 	and.w	r3, r3, #3
 8028608:	009b      	lsls	r3, r3, #2
 802860a:	220f      	movs	r2, #15
 802860c:	fa02 f303 	lsl.w	r3, r2, r3
 8028610:	68ba      	ldr	r2, [r7, #8]
 8028612:	4013      	ands	r3, r2
 8028614:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	4a5d      	ldr	r2, [pc, #372]	; (8028790 <HAL_GPIO_DeInit+0x1d4>)
 802861a:	4293      	cmp	r3, r2
 802861c:	d02b      	beq.n	8028676 <HAL_GPIO_DeInit+0xba>
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	4a5c      	ldr	r2, [pc, #368]	; (8028794 <HAL_GPIO_DeInit+0x1d8>)
 8028622:	4293      	cmp	r3, r2
 8028624:	d025      	beq.n	8028672 <HAL_GPIO_DeInit+0xb6>
 8028626:	687b      	ldr	r3, [r7, #4]
 8028628:	4a5b      	ldr	r2, [pc, #364]	; (8028798 <HAL_GPIO_DeInit+0x1dc>)
 802862a:	4293      	cmp	r3, r2
 802862c:	d01f      	beq.n	802866e <HAL_GPIO_DeInit+0xb2>
 802862e:	687b      	ldr	r3, [r7, #4]
 8028630:	4a5a      	ldr	r2, [pc, #360]	; (802879c <HAL_GPIO_DeInit+0x1e0>)
 8028632:	4293      	cmp	r3, r2
 8028634:	d019      	beq.n	802866a <HAL_GPIO_DeInit+0xae>
 8028636:	687b      	ldr	r3, [r7, #4]
 8028638:	4a59      	ldr	r2, [pc, #356]	; (80287a0 <HAL_GPIO_DeInit+0x1e4>)
 802863a:	4293      	cmp	r3, r2
 802863c:	d013      	beq.n	8028666 <HAL_GPIO_DeInit+0xaa>
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	4a58      	ldr	r2, [pc, #352]	; (80287a4 <HAL_GPIO_DeInit+0x1e8>)
 8028642:	4293      	cmp	r3, r2
 8028644:	d00d      	beq.n	8028662 <HAL_GPIO_DeInit+0xa6>
 8028646:	687b      	ldr	r3, [r7, #4]
 8028648:	4a57      	ldr	r2, [pc, #348]	; (80287a8 <HAL_GPIO_DeInit+0x1ec>)
 802864a:	4293      	cmp	r3, r2
 802864c:	d007      	beq.n	802865e <HAL_GPIO_DeInit+0xa2>
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	4a56      	ldr	r2, [pc, #344]	; (80287ac <HAL_GPIO_DeInit+0x1f0>)
 8028652:	4293      	cmp	r3, r2
 8028654:	d101      	bne.n	802865a <HAL_GPIO_DeInit+0x9e>
 8028656:	2307      	movs	r3, #7
 8028658:	e00e      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 802865a:	2308      	movs	r3, #8
 802865c:	e00c      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 802865e:	2306      	movs	r3, #6
 8028660:	e00a      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 8028662:	2305      	movs	r3, #5
 8028664:	e008      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 8028666:	2304      	movs	r3, #4
 8028668:	e006      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 802866a:	2303      	movs	r3, #3
 802866c:	e004      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 802866e:	2302      	movs	r3, #2
 8028670:	e002      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 8028672:	2301      	movs	r3, #1
 8028674:	e000      	b.n	8028678 <HAL_GPIO_DeInit+0xbc>
 8028676:	2300      	movs	r3, #0
 8028678:	697a      	ldr	r2, [r7, #20]
 802867a:	f002 0203 	and.w	r2, r2, #3
 802867e:	0092      	lsls	r2, r2, #2
 8028680:	4093      	lsls	r3, r2
 8028682:	68ba      	ldr	r2, [r7, #8]
 8028684:	429a      	cmp	r2, r3
 8028686:	d132      	bne.n	80286ee <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8028688:	4b49      	ldr	r3, [pc, #292]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 802868a:	681a      	ldr	r2, [r3, #0]
 802868c:	68fb      	ldr	r3, [r7, #12]
 802868e:	43db      	mvns	r3, r3
 8028690:	4947      	ldr	r1, [pc, #284]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 8028692:	4013      	ands	r3, r2
 8028694:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8028696:	4b46      	ldr	r3, [pc, #280]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 8028698:	685a      	ldr	r2, [r3, #4]
 802869a:	68fb      	ldr	r3, [r7, #12]
 802869c:	43db      	mvns	r3, r3
 802869e:	4944      	ldr	r1, [pc, #272]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 80286a0:	4013      	ands	r3, r2
 80286a2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80286a4:	4b42      	ldr	r3, [pc, #264]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 80286a6:	68da      	ldr	r2, [r3, #12]
 80286a8:	68fb      	ldr	r3, [r7, #12]
 80286aa:	43db      	mvns	r3, r3
 80286ac:	4940      	ldr	r1, [pc, #256]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 80286ae:	4013      	ands	r3, r2
 80286b0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80286b2:	4b3f      	ldr	r3, [pc, #252]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 80286b4:	689a      	ldr	r2, [r3, #8]
 80286b6:	68fb      	ldr	r3, [r7, #12]
 80286b8:	43db      	mvns	r3, r3
 80286ba:	493d      	ldr	r1, [pc, #244]	; (80287b0 <HAL_GPIO_DeInit+0x1f4>)
 80286bc:	4013      	ands	r3, r2
 80286be:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80286c0:	697b      	ldr	r3, [r7, #20]
 80286c2:	f003 0303 	and.w	r3, r3, #3
 80286c6:	009b      	lsls	r3, r3, #2
 80286c8:	220f      	movs	r2, #15
 80286ca:	fa02 f303 	lsl.w	r3, r2, r3
 80286ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80286d0:	4a2e      	ldr	r2, [pc, #184]	; (802878c <HAL_GPIO_DeInit+0x1d0>)
 80286d2:	697b      	ldr	r3, [r7, #20]
 80286d4:	089b      	lsrs	r3, r3, #2
 80286d6:	3302      	adds	r3, #2
 80286d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80286dc:	68bb      	ldr	r3, [r7, #8]
 80286de:	43da      	mvns	r2, r3
 80286e0:	482a      	ldr	r0, [pc, #168]	; (802878c <HAL_GPIO_DeInit+0x1d0>)
 80286e2:	697b      	ldr	r3, [r7, #20]
 80286e4:	089b      	lsrs	r3, r3, #2
 80286e6:	400a      	ands	r2, r1
 80286e8:	3302      	adds	r3, #2
 80286ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	681a      	ldr	r2, [r3, #0]
 80286f2:	697b      	ldr	r3, [r7, #20]
 80286f4:	005b      	lsls	r3, r3, #1
 80286f6:	2103      	movs	r1, #3
 80286f8:	fa01 f303 	lsl.w	r3, r1, r3
 80286fc:	43db      	mvns	r3, r3
 80286fe:	401a      	ands	r2, r3
 8028700:	687b      	ldr	r3, [r7, #4]
 8028702:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028704:	697b      	ldr	r3, [r7, #20]
 8028706:	08da      	lsrs	r2, r3, #3
 8028708:	687b      	ldr	r3, [r7, #4]
 802870a:	3208      	adds	r2, #8
 802870c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028710:	697b      	ldr	r3, [r7, #20]
 8028712:	f003 0307 	and.w	r3, r3, #7
 8028716:	009b      	lsls	r3, r3, #2
 8028718:	220f      	movs	r2, #15
 802871a:	fa02 f303 	lsl.w	r3, r2, r3
 802871e:	43db      	mvns	r3, r3
 8028720:	697a      	ldr	r2, [r7, #20]
 8028722:	08d2      	lsrs	r2, r2, #3
 8028724:	4019      	ands	r1, r3
 8028726:	687b      	ldr	r3, [r7, #4]
 8028728:	3208      	adds	r2, #8
 802872a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	68da      	ldr	r2, [r3, #12]
 8028732:	697b      	ldr	r3, [r7, #20]
 8028734:	005b      	lsls	r3, r3, #1
 8028736:	2103      	movs	r1, #3
 8028738:	fa01 f303 	lsl.w	r3, r1, r3
 802873c:	43db      	mvns	r3, r3
 802873e:	401a      	ands	r2, r3
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028744:	687b      	ldr	r3, [r7, #4]
 8028746:	685a      	ldr	r2, [r3, #4]
 8028748:	2101      	movs	r1, #1
 802874a:	697b      	ldr	r3, [r7, #20]
 802874c:	fa01 f303 	lsl.w	r3, r1, r3
 8028750:	43db      	mvns	r3, r3
 8028752:	401a      	ands	r2, r3
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028758:	687b      	ldr	r3, [r7, #4]
 802875a:	689a      	ldr	r2, [r3, #8]
 802875c:	697b      	ldr	r3, [r7, #20]
 802875e:	005b      	lsls	r3, r3, #1
 8028760:	2103      	movs	r1, #3
 8028762:	fa01 f303 	lsl.w	r3, r1, r3
 8028766:	43db      	mvns	r3, r3
 8028768:	401a      	ands	r2, r3
 802876a:	687b      	ldr	r3, [r7, #4]
 802876c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802876e:	697b      	ldr	r3, [r7, #20]
 8028770:	3301      	adds	r3, #1
 8028772:	617b      	str	r3, [r7, #20]
 8028774:	697b      	ldr	r3, [r7, #20]
 8028776:	2b0f      	cmp	r3, #15
 8028778:	f67f af2e 	bls.w	80285d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802877c:	bf00      	nop
 802877e:	bf00      	nop
 8028780:	371c      	adds	r7, #28
 8028782:	46bd      	mov	sp, r7
 8028784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028788:	4770      	bx	lr
 802878a:	bf00      	nop
 802878c:	40013800 	.word	0x40013800
 8028790:	40020000 	.word	0x40020000
 8028794:	40020400 	.word	0x40020400
 8028798:	40020800 	.word	0x40020800
 802879c:	40020c00 	.word	0x40020c00
 80287a0:	40021000 	.word	0x40021000
 80287a4:	40021400 	.word	0x40021400
 80287a8:	40021800 	.word	0x40021800
 80287ac:	40021c00 	.word	0x40021c00
 80287b0:	40013c00 	.word	0x40013c00

080287b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80287b4:	b480      	push	{r7}
 80287b6:	b083      	sub	sp, #12
 80287b8:	af00      	add	r7, sp, #0
 80287ba:	6078      	str	r0, [r7, #4]
 80287bc:	460b      	mov	r3, r1
 80287be:	807b      	strh	r3, [r7, #2]
 80287c0:	4613      	mov	r3, r2
 80287c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80287c4:	787b      	ldrb	r3, [r7, #1]
 80287c6:	2b00      	cmp	r3, #0
 80287c8:	d003      	beq.n	80287d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80287ca:	887a      	ldrh	r2, [r7, #2]
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80287d0:	e003      	b.n	80287da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80287d2:	887b      	ldrh	r3, [r7, #2]
 80287d4:	041a      	lsls	r2, r3, #16
 80287d6:	687b      	ldr	r3, [r7, #4]
 80287d8:	619a      	str	r2, [r3, #24]
}
 80287da:	bf00      	nop
 80287dc:	370c      	adds	r7, #12
 80287de:	46bd      	mov	sp, r7
 80287e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287e4:	4770      	bx	lr

080287e6 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80287e6:	b580      	push	{r7, lr}
 80287e8:	b084      	sub	sp, #16
 80287ea:	af00      	add	r7, sp, #0
 80287ec:	60f8      	str	r0, [r7, #12]
 80287ee:	60b9      	str	r1, [r7, #8]
 80287f0:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 80287f2:	68fb      	ldr	r3, [r7, #12]
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d101      	bne.n	80287fc <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 80287f8:	2301      	movs	r3, #1
 80287fa:	e03e      	b.n	802887a <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 80287fc:	68fb      	ldr	r3, [r7, #12]
 80287fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028802:	b2db      	uxtb	r3, r3
 8028804:	2b00      	cmp	r3, #0
 8028806:	d106      	bne.n	8028816 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8028808:	68fb      	ldr	r3, [r7, #12]
 802880a:	2200      	movs	r2, #0
 802880c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8028810:	68f8      	ldr	r0, [r7, #12]
 8028812:	f7fa f97f 	bl	8022b14 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8028816:	68fb      	ldr	r3, [r7, #12]
 8028818:	681a      	ldr	r2, [r3, #0]
 802881a:	68fb      	ldr	r3, [r7, #12]
 802881c:	3304      	adds	r3, #4
 802881e:	4619      	mov	r1, r3
 8028820:	4610      	mov	r0, r2
 8028822:	f004 fa3f 	bl	802cca4 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8028826:	68fb      	ldr	r3, [r7, #12]
 8028828:	6818      	ldr	r0, [r3, #0]
 802882a:	68fb      	ldr	r3, [r7, #12]
 802882c:	685b      	ldr	r3, [r3, #4]
 802882e:	461a      	mov	r2, r3
 8028830:	68b9      	ldr	r1, [r7, #8]
 8028832:	f004 fa83 	bl	802cd3c <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8028836:	68fb      	ldr	r3, [r7, #12]
 8028838:	6818      	ldr	r0, [r3, #0]
 802883a:	68fb      	ldr	r3, [r7, #12]
 802883c:	685b      	ldr	r3, [r3, #4]
 802883e:	461a      	mov	r2, r3
 8028840:	6879      	ldr	r1, [r7, #4]
 8028842:	f004 fab0 	bl	802cda6 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8028846:	68fb      	ldr	r3, [r7, #12]
 8028848:	685b      	ldr	r3, [r3, #4]
 802884a:	2b10      	cmp	r3, #16
 802884c:	d108      	bne.n	8028860 <HAL_NAND_Init+0x7a>
 802884e:	68fb      	ldr	r3, [r7, #12]
 8028850:	681b      	ldr	r3, [r3, #0]
 8028852:	681a      	ldr	r2, [r3, #0]
 8028854:	68fb      	ldr	r3, [r7, #12]
 8028856:	681b      	ldr	r3, [r3, #0]
 8028858:	f042 0204 	orr.w	r2, r2, #4
 802885c:	601a      	str	r2, [r3, #0]
 802885e:	e007      	b.n	8028870 <HAL_NAND_Init+0x8a>
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	681b      	ldr	r3, [r3, #0]
 8028864:	6a1a      	ldr	r2, [r3, #32]
 8028866:	68fb      	ldr	r3, [r7, #12]
 8028868:	681b      	ldr	r3, [r3, #0]
 802886a:	f042 0204 	orr.w	r2, r2, #4
 802886e:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8028870:	68fb      	ldr	r3, [r7, #12]
 8028872:	2201      	movs	r2, #1
 8028874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8028878:	2300      	movs	r3, #0
}
 802887a:	4618      	mov	r0, r3
 802887c:	3710      	adds	r7, #16
 802887e:	46bd      	mov	sp, r7
 8028880:	bd80      	pop	{r7, pc}

08028882 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8028882:	b580      	push	{r7, lr}
 8028884:	b082      	sub	sp, #8
 8028886:	af00      	add	r7, sp, #0
 8028888:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 802888a:	687b      	ldr	r3, [r7, #4]
 802888c:	685b      	ldr	r3, [r3, #4]
 802888e:	2b10      	cmp	r3, #16
 8028890:	d10a      	bne.n	80288a8 <HAL_NAND_IRQHandler+0x26>
 8028892:	687b      	ldr	r3, [r7, #4]
 8028894:	681b      	ldr	r3, [r3, #0]
 8028896:	685b      	ldr	r3, [r3, #4]
 8028898:	f003 0301 	and.w	r3, r3, #1
 802889c:	2b01      	cmp	r3, #1
 802889e:	bf0c      	ite	eq
 80288a0:	2301      	moveq	r3, #1
 80288a2:	2300      	movne	r3, #0
 80288a4:	b2db      	uxtb	r3, r3
 80288a6:	e009      	b.n	80288bc <HAL_NAND_IRQHandler+0x3a>
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	681b      	ldr	r3, [r3, #0]
 80288ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80288ae:	f003 0301 	and.w	r3, r3, #1
 80288b2:	2b01      	cmp	r3, #1
 80288b4:	bf0c      	ite	eq
 80288b6:	2301      	moveq	r3, #1
 80288b8:	2300      	movne	r3, #0
 80288ba:	b2db      	uxtb	r3, r3
 80288bc:	2b00      	cmp	r3, #0
 80288be:	d017      	beq.n	80288f0 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80288c0:	6878      	ldr	r0, [r7, #4]
 80288c2:	f000 f8b2 	bl	8028a2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	685b      	ldr	r3, [r3, #4]
 80288ca:	2b10      	cmp	r3, #16
 80288cc:	d108      	bne.n	80288e0 <HAL_NAND_IRQHandler+0x5e>
 80288ce:	687b      	ldr	r3, [r7, #4]
 80288d0:	681b      	ldr	r3, [r3, #0]
 80288d2:	685a      	ldr	r2, [r3, #4]
 80288d4:	687b      	ldr	r3, [r7, #4]
 80288d6:	681b      	ldr	r3, [r3, #0]
 80288d8:	f022 0201 	bic.w	r2, r2, #1
 80288dc:	605a      	str	r2, [r3, #4]
 80288de:	e007      	b.n	80288f0 <HAL_NAND_IRQHandler+0x6e>
 80288e0:	687b      	ldr	r3, [r7, #4]
 80288e2:	681b      	ldr	r3, [r3, #0]
 80288e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80288e6:	687b      	ldr	r3, [r7, #4]
 80288e8:	681b      	ldr	r3, [r3, #0]
 80288ea:	f022 0201 	bic.w	r2, r2, #1
 80288ee:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80288f0:	687b      	ldr	r3, [r7, #4]
 80288f2:	685b      	ldr	r3, [r3, #4]
 80288f4:	2b10      	cmp	r3, #16
 80288f6:	d10a      	bne.n	802890e <HAL_NAND_IRQHandler+0x8c>
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	681b      	ldr	r3, [r3, #0]
 80288fc:	685b      	ldr	r3, [r3, #4]
 80288fe:	f003 0302 	and.w	r3, r3, #2
 8028902:	2b02      	cmp	r3, #2
 8028904:	bf0c      	ite	eq
 8028906:	2301      	moveq	r3, #1
 8028908:	2300      	movne	r3, #0
 802890a:	b2db      	uxtb	r3, r3
 802890c:	e009      	b.n	8028922 <HAL_NAND_IRQHandler+0xa0>
 802890e:	687b      	ldr	r3, [r7, #4]
 8028910:	681b      	ldr	r3, [r3, #0]
 8028912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028914:	f003 0302 	and.w	r3, r3, #2
 8028918:	2b02      	cmp	r3, #2
 802891a:	bf0c      	ite	eq
 802891c:	2301      	moveq	r3, #1
 802891e:	2300      	movne	r3, #0
 8028920:	b2db      	uxtb	r3, r3
 8028922:	2b00      	cmp	r3, #0
 8028924:	d017      	beq.n	8028956 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028926:	6878      	ldr	r0, [r7, #4]
 8028928:	f000 f87f 	bl	8028a2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	685b      	ldr	r3, [r3, #4]
 8028930:	2b10      	cmp	r3, #16
 8028932:	d108      	bne.n	8028946 <HAL_NAND_IRQHandler+0xc4>
 8028934:	687b      	ldr	r3, [r7, #4]
 8028936:	681b      	ldr	r3, [r3, #0]
 8028938:	685a      	ldr	r2, [r3, #4]
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	681b      	ldr	r3, [r3, #0]
 802893e:	f022 0202 	bic.w	r2, r2, #2
 8028942:	605a      	str	r2, [r3, #4]
 8028944:	e007      	b.n	8028956 <HAL_NAND_IRQHandler+0xd4>
 8028946:	687b      	ldr	r3, [r7, #4]
 8028948:	681b      	ldr	r3, [r3, #0]
 802894a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802894c:	687b      	ldr	r3, [r7, #4]
 802894e:	681b      	ldr	r3, [r3, #0]
 8028950:	f022 0202 	bic.w	r2, r2, #2
 8028954:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8028956:	687b      	ldr	r3, [r7, #4]
 8028958:	685b      	ldr	r3, [r3, #4]
 802895a:	2b10      	cmp	r3, #16
 802895c:	d10a      	bne.n	8028974 <HAL_NAND_IRQHandler+0xf2>
 802895e:	687b      	ldr	r3, [r7, #4]
 8028960:	681b      	ldr	r3, [r3, #0]
 8028962:	685b      	ldr	r3, [r3, #4]
 8028964:	f003 0304 	and.w	r3, r3, #4
 8028968:	2b04      	cmp	r3, #4
 802896a:	bf0c      	ite	eq
 802896c:	2301      	moveq	r3, #1
 802896e:	2300      	movne	r3, #0
 8028970:	b2db      	uxtb	r3, r3
 8028972:	e009      	b.n	8028988 <HAL_NAND_IRQHandler+0x106>
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802897a:	f003 0304 	and.w	r3, r3, #4
 802897e:	2b04      	cmp	r3, #4
 8028980:	bf0c      	ite	eq
 8028982:	2301      	moveq	r3, #1
 8028984:	2300      	movne	r3, #0
 8028986:	b2db      	uxtb	r3, r3
 8028988:	2b00      	cmp	r3, #0
 802898a:	d017      	beq.n	80289bc <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 802898c:	6878      	ldr	r0, [r7, #4]
 802898e:	f000 f84c 	bl	8028a2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8028992:	687b      	ldr	r3, [r7, #4]
 8028994:	685b      	ldr	r3, [r3, #4]
 8028996:	2b10      	cmp	r3, #16
 8028998:	d108      	bne.n	80289ac <HAL_NAND_IRQHandler+0x12a>
 802899a:	687b      	ldr	r3, [r7, #4]
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	685a      	ldr	r2, [r3, #4]
 80289a0:	687b      	ldr	r3, [r7, #4]
 80289a2:	681b      	ldr	r3, [r3, #0]
 80289a4:	f022 0204 	bic.w	r2, r2, #4
 80289a8:	605a      	str	r2, [r3, #4]
 80289aa:	e007      	b.n	80289bc <HAL_NAND_IRQHandler+0x13a>
 80289ac:	687b      	ldr	r3, [r7, #4]
 80289ae:	681b      	ldr	r3, [r3, #0]
 80289b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80289b2:	687b      	ldr	r3, [r7, #4]
 80289b4:	681b      	ldr	r3, [r3, #0]
 80289b6:	f022 0204 	bic.w	r2, r2, #4
 80289ba:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80289bc:	687b      	ldr	r3, [r7, #4]
 80289be:	685b      	ldr	r3, [r3, #4]
 80289c0:	2b10      	cmp	r3, #16
 80289c2:	d10a      	bne.n	80289da <HAL_NAND_IRQHandler+0x158>
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	681b      	ldr	r3, [r3, #0]
 80289c8:	685b      	ldr	r3, [r3, #4]
 80289ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80289ce:	2b40      	cmp	r3, #64	; 0x40
 80289d0:	bf0c      	ite	eq
 80289d2:	2301      	moveq	r3, #1
 80289d4:	2300      	movne	r3, #0
 80289d6:	b2db      	uxtb	r3, r3
 80289d8:	e009      	b.n	80289ee <HAL_NAND_IRQHandler+0x16c>
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	681b      	ldr	r3, [r3, #0]
 80289de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80289e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80289e4:	2b40      	cmp	r3, #64	; 0x40
 80289e6:	bf0c      	ite	eq
 80289e8:	2301      	moveq	r3, #1
 80289ea:	2300      	movne	r3, #0
 80289ec:	b2db      	uxtb	r3, r3
 80289ee:	2b00      	cmp	r3, #0
 80289f0:	d017      	beq.n	8028a22 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80289f2:	6878      	ldr	r0, [r7, #4]
 80289f4:	f000 f819 	bl	8028a2a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80289f8:	687b      	ldr	r3, [r7, #4]
 80289fa:	685b      	ldr	r3, [r3, #4]
 80289fc:	2b10      	cmp	r3, #16
 80289fe:	d108      	bne.n	8028a12 <HAL_NAND_IRQHandler+0x190>
 8028a00:	687b      	ldr	r3, [r7, #4]
 8028a02:	681b      	ldr	r3, [r3, #0]
 8028a04:	685a      	ldr	r2, [r3, #4]
 8028a06:	687b      	ldr	r3, [r7, #4]
 8028a08:	681b      	ldr	r3, [r3, #0]
 8028a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028a0e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8028a10:	e007      	b.n	8028a22 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028a12:	687b      	ldr	r3, [r7, #4]
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028a18:	687b      	ldr	r3, [r7, #4]
 8028a1a:	681b      	ldr	r3, [r3, #0]
 8028a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028a20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8028a22:	bf00      	nop
 8028a24:	3708      	adds	r7, #8
 8028a26:	46bd      	mov	sp, r7
 8028a28:	bd80      	pop	{r7, pc}

08028a2a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8028a2a:	b480      	push	{r7}
 8028a2c:	b083      	sub	sp, #12
 8028a2e:	af00      	add	r7, sp, #0
 8028a30:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8028a32:	bf00      	nop
 8028a34:	370c      	adds	r7, #12
 8028a36:	46bd      	mov	sp, r7
 8028a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a3c:	4770      	bx	lr

08028a3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8028a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a40:	b08f      	sub	sp, #60	; 0x3c
 8028a42:	af0a      	add	r7, sp, #40	; 0x28
 8028a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	d101      	bne.n	8028a50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8028a4c:	2301      	movs	r3, #1
 8028a4e:	e10f      	b.n	8028c70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8028a50:	687b      	ldr	r3, [r7, #4]
 8028a52:	681b      	ldr	r3, [r3, #0]
 8028a54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8028a56:	687b      	ldr	r3, [r7, #4]
 8028a58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8028a5c:	b2db      	uxtb	r3, r3
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	d106      	bne.n	8028a70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8028a62:	687b      	ldr	r3, [r7, #4]
 8028a64:	2200      	movs	r2, #0
 8028a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8028a6a:	6878      	ldr	r0, [r7, #4]
 8028a6c:	f008 f966 	bl	8030d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8028a70:	687b      	ldr	r3, [r7, #4]
 8028a72:	2203      	movs	r2, #3
 8028a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8028a78:	68bb      	ldr	r3, [r7, #8]
 8028a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028a80:	2b00      	cmp	r3, #0
 8028a82:	d102      	bne.n	8028a8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	2200      	movs	r2, #0
 8028a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8028a8a:	687b      	ldr	r3, [r7, #4]
 8028a8c:	681b      	ldr	r3, [r3, #0]
 8028a8e:	4618      	mov	r0, r3
 8028a90:	f004 fad3 	bl	802d03a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8028a94:	687b      	ldr	r3, [r7, #4]
 8028a96:	681b      	ldr	r3, [r3, #0]
 8028a98:	603b      	str	r3, [r7, #0]
 8028a9a:	687e      	ldr	r6, [r7, #4]
 8028a9c:	466d      	mov	r5, sp
 8028a9e:	f106 0410 	add.w	r4, r6, #16
 8028aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8028ab2:	1d33      	adds	r3, r6, #4
 8028ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028ab6:	6838      	ldr	r0, [r7, #0]
 8028ab8:	f004 f9aa 	bl	802ce10 <USB_CoreInit>
 8028abc:	4603      	mov	r3, r0
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d005      	beq.n	8028ace <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028ac2:	687b      	ldr	r3, [r7, #4]
 8028ac4:	2202      	movs	r2, #2
 8028ac6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028aca:	2301      	movs	r3, #1
 8028acc:	e0d0      	b.n	8028c70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8028ace:	687b      	ldr	r3, [r7, #4]
 8028ad0:	681b      	ldr	r3, [r3, #0]
 8028ad2:	2100      	movs	r1, #0
 8028ad4:	4618      	mov	r0, r3
 8028ad6:	f004 fac1 	bl	802d05c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028ada:	2300      	movs	r3, #0
 8028adc:	73fb      	strb	r3, [r7, #15]
 8028ade:	e04a      	b.n	8028b76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8028ae0:	7bfa      	ldrb	r2, [r7, #15]
 8028ae2:	6879      	ldr	r1, [r7, #4]
 8028ae4:	4613      	mov	r3, r2
 8028ae6:	00db      	lsls	r3, r3, #3
 8028ae8:	4413      	add	r3, r2
 8028aea:	009b      	lsls	r3, r3, #2
 8028aec:	440b      	add	r3, r1
 8028aee:	333d      	adds	r3, #61	; 0x3d
 8028af0:	2201      	movs	r2, #1
 8028af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8028af4:	7bfa      	ldrb	r2, [r7, #15]
 8028af6:	6879      	ldr	r1, [r7, #4]
 8028af8:	4613      	mov	r3, r2
 8028afa:	00db      	lsls	r3, r3, #3
 8028afc:	4413      	add	r3, r2
 8028afe:	009b      	lsls	r3, r3, #2
 8028b00:	440b      	add	r3, r1
 8028b02:	333c      	adds	r3, #60	; 0x3c
 8028b04:	7bfa      	ldrb	r2, [r7, #15]
 8028b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8028b08:	7bfa      	ldrb	r2, [r7, #15]
 8028b0a:	7bfb      	ldrb	r3, [r7, #15]
 8028b0c:	b298      	uxth	r0, r3
 8028b0e:	6879      	ldr	r1, [r7, #4]
 8028b10:	4613      	mov	r3, r2
 8028b12:	00db      	lsls	r3, r3, #3
 8028b14:	4413      	add	r3, r2
 8028b16:	009b      	lsls	r3, r3, #2
 8028b18:	440b      	add	r3, r1
 8028b1a:	3344      	adds	r3, #68	; 0x44
 8028b1c:	4602      	mov	r2, r0
 8028b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8028b20:	7bfa      	ldrb	r2, [r7, #15]
 8028b22:	6879      	ldr	r1, [r7, #4]
 8028b24:	4613      	mov	r3, r2
 8028b26:	00db      	lsls	r3, r3, #3
 8028b28:	4413      	add	r3, r2
 8028b2a:	009b      	lsls	r3, r3, #2
 8028b2c:	440b      	add	r3, r1
 8028b2e:	3340      	adds	r3, #64	; 0x40
 8028b30:	2200      	movs	r2, #0
 8028b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8028b34:	7bfa      	ldrb	r2, [r7, #15]
 8028b36:	6879      	ldr	r1, [r7, #4]
 8028b38:	4613      	mov	r3, r2
 8028b3a:	00db      	lsls	r3, r3, #3
 8028b3c:	4413      	add	r3, r2
 8028b3e:	009b      	lsls	r3, r3, #2
 8028b40:	440b      	add	r3, r1
 8028b42:	3348      	adds	r3, #72	; 0x48
 8028b44:	2200      	movs	r2, #0
 8028b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8028b48:	7bfa      	ldrb	r2, [r7, #15]
 8028b4a:	6879      	ldr	r1, [r7, #4]
 8028b4c:	4613      	mov	r3, r2
 8028b4e:	00db      	lsls	r3, r3, #3
 8028b50:	4413      	add	r3, r2
 8028b52:	009b      	lsls	r3, r3, #2
 8028b54:	440b      	add	r3, r1
 8028b56:	334c      	adds	r3, #76	; 0x4c
 8028b58:	2200      	movs	r2, #0
 8028b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8028b5c:	7bfa      	ldrb	r2, [r7, #15]
 8028b5e:	6879      	ldr	r1, [r7, #4]
 8028b60:	4613      	mov	r3, r2
 8028b62:	00db      	lsls	r3, r3, #3
 8028b64:	4413      	add	r3, r2
 8028b66:	009b      	lsls	r3, r3, #2
 8028b68:	440b      	add	r3, r1
 8028b6a:	3354      	adds	r3, #84	; 0x54
 8028b6c:	2200      	movs	r2, #0
 8028b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028b70:	7bfb      	ldrb	r3, [r7, #15]
 8028b72:	3301      	adds	r3, #1
 8028b74:	73fb      	strb	r3, [r7, #15]
 8028b76:	7bfa      	ldrb	r2, [r7, #15]
 8028b78:	687b      	ldr	r3, [r7, #4]
 8028b7a:	685b      	ldr	r3, [r3, #4]
 8028b7c:	429a      	cmp	r2, r3
 8028b7e:	d3af      	bcc.n	8028ae0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028b80:	2300      	movs	r3, #0
 8028b82:	73fb      	strb	r3, [r7, #15]
 8028b84:	e044      	b.n	8028c10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8028b86:	7bfa      	ldrb	r2, [r7, #15]
 8028b88:	6879      	ldr	r1, [r7, #4]
 8028b8a:	4613      	mov	r3, r2
 8028b8c:	00db      	lsls	r3, r3, #3
 8028b8e:	4413      	add	r3, r2
 8028b90:	009b      	lsls	r3, r3, #2
 8028b92:	440b      	add	r3, r1
 8028b94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8028b98:	2200      	movs	r2, #0
 8028b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8028b9c:	7bfa      	ldrb	r2, [r7, #15]
 8028b9e:	6879      	ldr	r1, [r7, #4]
 8028ba0:	4613      	mov	r3, r2
 8028ba2:	00db      	lsls	r3, r3, #3
 8028ba4:	4413      	add	r3, r2
 8028ba6:	009b      	lsls	r3, r3, #2
 8028ba8:	440b      	add	r3, r1
 8028baa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8028bae:	7bfa      	ldrb	r2, [r7, #15]
 8028bb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8028bb2:	7bfa      	ldrb	r2, [r7, #15]
 8028bb4:	6879      	ldr	r1, [r7, #4]
 8028bb6:	4613      	mov	r3, r2
 8028bb8:	00db      	lsls	r3, r3, #3
 8028bba:	4413      	add	r3, r2
 8028bbc:	009b      	lsls	r3, r3, #2
 8028bbe:	440b      	add	r3, r1
 8028bc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8028bc4:	2200      	movs	r2, #0
 8028bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8028bc8:	7bfa      	ldrb	r2, [r7, #15]
 8028bca:	6879      	ldr	r1, [r7, #4]
 8028bcc:	4613      	mov	r3, r2
 8028bce:	00db      	lsls	r3, r3, #3
 8028bd0:	4413      	add	r3, r2
 8028bd2:	009b      	lsls	r3, r3, #2
 8028bd4:	440b      	add	r3, r1
 8028bd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8028bda:	2200      	movs	r2, #0
 8028bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8028bde:	7bfa      	ldrb	r2, [r7, #15]
 8028be0:	6879      	ldr	r1, [r7, #4]
 8028be2:	4613      	mov	r3, r2
 8028be4:	00db      	lsls	r3, r3, #3
 8028be6:	4413      	add	r3, r2
 8028be8:	009b      	lsls	r3, r3, #2
 8028bea:	440b      	add	r3, r1
 8028bec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8028bf0:	2200      	movs	r2, #0
 8028bf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8028bf4:	7bfa      	ldrb	r2, [r7, #15]
 8028bf6:	6879      	ldr	r1, [r7, #4]
 8028bf8:	4613      	mov	r3, r2
 8028bfa:	00db      	lsls	r3, r3, #3
 8028bfc:	4413      	add	r3, r2
 8028bfe:	009b      	lsls	r3, r3, #2
 8028c00:	440b      	add	r3, r1
 8028c02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8028c06:	2200      	movs	r2, #0
 8028c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028c0a:	7bfb      	ldrb	r3, [r7, #15]
 8028c0c:	3301      	adds	r3, #1
 8028c0e:	73fb      	strb	r3, [r7, #15]
 8028c10:	7bfa      	ldrb	r2, [r7, #15]
 8028c12:	687b      	ldr	r3, [r7, #4]
 8028c14:	685b      	ldr	r3, [r3, #4]
 8028c16:	429a      	cmp	r2, r3
 8028c18:	d3b5      	bcc.n	8028b86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8028c1a:	687b      	ldr	r3, [r7, #4]
 8028c1c:	681b      	ldr	r3, [r3, #0]
 8028c1e:	603b      	str	r3, [r7, #0]
 8028c20:	687e      	ldr	r6, [r7, #4]
 8028c22:	466d      	mov	r5, sp
 8028c24:	f106 0410 	add.w	r4, r6, #16
 8028c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028c34:	e885 0003 	stmia.w	r5, {r0, r1}
 8028c38:	1d33      	adds	r3, r6, #4
 8028c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028c3c:	6838      	ldr	r0, [r7, #0]
 8028c3e:	f004 fa59 	bl	802d0f4 <USB_DevInit>
 8028c42:	4603      	mov	r3, r0
 8028c44:	2b00      	cmp	r3, #0
 8028c46:	d005      	beq.n	8028c54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028c48:	687b      	ldr	r3, [r7, #4]
 8028c4a:	2202      	movs	r2, #2
 8028c4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028c50:	2301      	movs	r3, #1
 8028c52:	e00d      	b.n	8028c70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8028c54:	687b      	ldr	r3, [r7, #4]
 8028c56:	2200      	movs	r2, #0
 8028c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8028c5c:	687b      	ldr	r3, [r7, #4]
 8028c5e:	2201      	movs	r2, #1
 8028c60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8028c64:	687b      	ldr	r3, [r7, #4]
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	4618      	mov	r0, r3
 8028c6a:	f005 fba8 	bl	802e3be <USB_DevDisconnect>

  return HAL_OK;
 8028c6e:	2300      	movs	r3, #0
}
 8028c70:	4618      	mov	r0, r3
 8028c72:	3714      	adds	r7, #20
 8028c74:	46bd      	mov	sp, r7
 8028c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028c78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8028c78:	b580      	push	{r7, lr}
 8028c7a:	b084      	sub	sp, #16
 8028c7c:	af00      	add	r7, sp, #0
 8028c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028c80:	687b      	ldr	r3, [r7, #4]
 8028c82:	681b      	ldr	r3, [r3, #0]
 8028c84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8028c86:	687b      	ldr	r3, [r7, #4]
 8028c88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8028c8c:	2b01      	cmp	r3, #1
 8028c8e:	d101      	bne.n	8028c94 <HAL_PCD_Start+0x1c>
 8028c90:	2302      	movs	r3, #2
 8028c92:	e020      	b.n	8028cd6 <HAL_PCD_Start+0x5e>
 8028c94:	687b      	ldr	r3, [r7, #4]
 8028c96:	2201      	movs	r2, #1
 8028c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028c9c:	687b      	ldr	r3, [r7, #4]
 8028c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ca0:	2b01      	cmp	r3, #1
 8028ca2:	d109      	bne.n	8028cb8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028ca8:	2b01      	cmp	r3, #1
 8028caa:	d005      	beq.n	8028cb8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028cb4:	68fb      	ldr	r3, [r7, #12]
 8028cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8028cb8:	687b      	ldr	r3, [r7, #4]
 8028cba:	681b      	ldr	r3, [r3, #0]
 8028cbc:	4618      	mov	r0, r3
 8028cbe:	f004 f9ab 	bl	802d018 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8028cc2:	687b      	ldr	r3, [r7, #4]
 8028cc4:	681b      	ldr	r3, [r3, #0]
 8028cc6:	4618      	mov	r0, r3
 8028cc8:	f005 fb58 	bl	802e37c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8028ccc:	687b      	ldr	r3, [r7, #4]
 8028cce:	2200      	movs	r2, #0
 8028cd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8028cd4:	2300      	movs	r3, #0
}
 8028cd6:	4618      	mov	r0, r3
 8028cd8:	3710      	adds	r7, #16
 8028cda:	46bd      	mov	sp, r7
 8028cdc:	bd80      	pop	{r7, pc}

08028cde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8028cde:	b590      	push	{r4, r7, lr}
 8028ce0:	b08d      	sub	sp, #52	; 0x34
 8028ce2:	af00      	add	r7, sp, #0
 8028ce4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028cec:	6a3b      	ldr	r3, [r7, #32]
 8028cee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8028cf0:	687b      	ldr	r3, [r7, #4]
 8028cf2:	681b      	ldr	r3, [r3, #0]
 8028cf4:	4618      	mov	r0, r3
 8028cf6:	f005 fc16 	bl	802e526 <USB_GetMode>
 8028cfa:	4603      	mov	r3, r0
 8028cfc:	2b00      	cmp	r3, #0
 8028cfe:	f040 848a 	bne.w	8029616 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8028d02:	687b      	ldr	r3, [r7, #4]
 8028d04:	681b      	ldr	r3, [r3, #0]
 8028d06:	4618      	mov	r0, r3
 8028d08:	f005 fb7a 	bl	802e400 <USB_ReadInterrupts>
 8028d0c:	4603      	mov	r3, r0
 8028d0e:	2b00      	cmp	r3, #0
 8028d10:	f000 8480 	beq.w	8029614 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8028d14:	69fb      	ldr	r3, [r7, #28]
 8028d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028d1a:	689b      	ldr	r3, [r3, #8]
 8028d1c:	0a1b      	lsrs	r3, r3, #8
 8028d1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8028d22:	687b      	ldr	r3, [r7, #4]
 8028d24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8028d28:	687b      	ldr	r3, [r7, #4]
 8028d2a:	681b      	ldr	r3, [r3, #0]
 8028d2c:	4618      	mov	r0, r3
 8028d2e:	f005 fb67 	bl	802e400 <USB_ReadInterrupts>
 8028d32:	4603      	mov	r3, r0
 8028d34:	f003 0302 	and.w	r3, r3, #2
 8028d38:	2b02      	cmp	r3, #2
 8028d3a:	d107      	bne.n	8028d4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8028d3c:	687b      	ldr	r3, [r7, #4]
 8028d3e:	681b      	ldr	r3, [r3, #0]
 8028d40:	695a      	ldr	r2, [r3, #20]
 8028d42:	687b      	ldr	r3, [r7, #4]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	f002 0202 	and.w	r2, r2, #2
 8028d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8028d4c:	687b      	ldr	r3, [r7, #4]
 8028d4e:	681b      	ldr	r3, [r3, #0]
 8028d50:	4618      	mov	r0, r3
 8028d52:	f005 fb55 	bl	802e400 <USB_ReadInterrupts>
 8028d56:	4603      	mov	r3, r0
 8028d58:	f003 0310 	and.w	r3, r3, #16
 8028d5c:	2b10      	cmp	r3, #16
 8028d5e:	d161      	bne.n	8028e24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028d60:	687b      	ldr	r3, [r7, #4]
 8028d62:	681b      	ldr	r3, [r3, #0]
 8028d64:	699a      	ldr	r2, [r3, #24]
 8028d66:	687b      	ldr	r3, [r7, #4]
 8028d68:	681b      	ldr	r3, [r3, #0]
 8028d6a:	f022 0210 	bic.w	r2, r2, #16
 8028d6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8028d70:	6a3b      	ldr	r3, [r7, #32]
 8028d72:	6a1b      	ldr	r3, [r3, #32]
 8028d74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8028d76:	69bb      	ldr	r3, [r7, #24]
 8028d78:	f003 020f 	and.w	r2, r3, #15
 8028d7c:	4613      	mov	r3, r2
 8028d7e:	00db      	lsls	r3, r3, #3
 8028d80:	4413      	add	r3, r2
 8028d82:	009b      	lsls	r3, r3, #2
 8028d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028d88:	687a      	ldr	r2, [r7, #4]
 8028d8a:	4413      	add	r3, r2
 8028d8c:	3304      	adds	r3, #4
 8028d8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8028d90:	69bb      	ldr	r3, [r7, #24]
 8028d92:	0c5b      	lsrs	r3, r3, #17
 8028d94:	f003 030f 	and.w	r3, r3, #15
 8028d98:	2b02      	cmp	r3, #2
 8028d9a:	d124      	bne.n	8028de6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8028d9c:	69ba      	ldr	r2, [r7, #24]
 8028d9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8028da2:	4013      	ands	r3, r2
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d035      	beq.n	8028e14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028da8:	697b      	ldr	r3, [r7, #20]
 8028daa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8028dac:	69bb      	ldr	r3, [r7, #24]
 8028dae:	091b      	lsrs	r3, r3, #4
 8028db0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028db6:	b29b      	uxth	r3, r3
 8028db8:	461a      	mov	r2, r3
 8028dba:	6a38      	ldr	r0, [r7, #32]
 8028dbc:	f005 f98c 	bl	802e0d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028dc0:	697b      	ldr	r3, [r7, #20]
 8028dc2:	691a      	ldr	r2, [r3, #16]
 8028dc4:	69bb      	ldr	r3, [r7, #24]
 8028dc6:	091b      	lsrs	r3, r3, #4
 8028dc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028dcc:	441a      	add	r2, r3
 8028dce:	697b      	ldr	r3, [r7, #20]
 8028dd0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028dd2:	697b      	ldr	r3, [r7, #20]
 8028dd4:	6a1a      	ldr	r2, [r3, #32]
 8028dd6:	69bb      	ldr	r3, [r7, #24]
 8028dd8:	091b      	lsrs	r3, r3, #4
 8028dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028dde:	441a      	add	r2, r3
 8028de0:	697b      	ldr	r3, [r7, #20]
 8028de2:	621a      	str	r2, [r3, #32]
 8028de4:	e016      	b.n	8028e14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8028de6:	69bb      	ldr	r3, [r7, #24]
 8028de8:	0c5b      	lsrs	r3, r3, #17
 8028dea:	f003 030f 	and.w	r3, r3, #15
 8028dee:	2b06      	cmp	r3, #6
 8028df0:	d110      	bne.n	8028e14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8028df2:	687b      	ldr	r3, [r7, #4]
 8028df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8028df8:	2208      	movs	r2, #8
 8028dfa:	4619      	mov	r1, r3
 8028dfc:	6a38      	ldr	r0, [r7, #32]
 8028dfe:	f005 f96b 	bl	802e0d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028e02:	697b      	ldr	r3, [r7, #20]
 8028e04:	6a1a      	ldr	r2, [r3, #32]
 8028e06:	69bb      	ldr	r3, [r7, #24]
 8028e08:	091b      	lsrs	r3, r3, #4
 8028e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028e0e:	441a      	add	r2, r3
 8028e10:	697b      	ldr	r3, [r7, #20]
 8028e12:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028e14:	687b      	ldr	r3, [r7, #4]
 8028e16:	681b      	ldr	r3, [r3, #0]
 8028e18:	699a      	ldr	r2, [r3, #24]
 8028e1a:	687b      	ldr	r3, [r7, #4]
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	f042 0210 	orr.w	r2, r2, #16
 8028e22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	681b      	ldr	r3, [r3, #0]
 8028e28:	4618      	mov	r0, r3
 8028e2a:	f005 fae9 	bl	802e400 <USB_ReadInterrupts>
 8028e2e:	4603      	mov	r3, r0
 8028e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028e34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8028e38:	f040 80a7 	bne.w	8028f8a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8028e3c:	2300      	movs	r3, #0
 8028e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	681b      	ldr	r3, [r3, #0]
 8028e44:	4618      	mov	r0, r3
 8028e46:	f005 faee 	bl	802e426 <USB_ReadDevAllOutEpInterrupt>
 8028e4a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8028e4c:	e099      	b.n	8028f82 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8028e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e50:	f003 0301 	and.w	r3, r3, #1
 8028e54:	2b00      	cmp	r3, #0
 8028e56:	f000 808e 	beq.w	8028f76 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8028e5a:	687b      	ldr	r3, [r7, #4]
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e60:	b2d2      	uxtb	r2, r2
 8028e62:	4611      	mov	r1, r2
 8028e64:	4618      	mov	r0, r3
 8028e66:	f005 fb12 	bl	802e48e <USB_ReadDevOutEPInterrupt>
 8028e6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8028e6c:	693b      	ldr	r3, [r7, #16]
 8028e6e:	f003 0301 	and.w	r3, r3, #1
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d00c      	beq.n	8028e90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8028e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e78:	015a      	lsls	r2, r3, #5
 8028e7a:	69fb      	ldr	r3, [r7, #28]
 8028e7c:	4413      	add	r3, r2
 8028e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028e82:	461a      	mov	r2, r3
 8028e84:	2301      	movs	r3, #1
 8028e86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8028e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028e8a:	6878      	ldr	r0, [r7, #4]
 8028e8c:	f000 fec2 	bl	8029c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8028e90:	693b      	ldr	r3, [r7, #16]
 8028e92:	f003 0308 	and.w	r3, r3, #8
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d00c      	beq.n	8028eb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8028e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e9c:	015a      	lsls	r2, r3, #5
 8028e9e:	69fb      	ldr	r3, [r7, #28]
 8028ea0:	4413      	add	r3, r2
 8028ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028ea6:	461a      	mov	r2, r3
 8028ea8:	2308      	movs	r3, #8
 8028eaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8028eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028eae:	6878      	ldr	r0, [r7, #4]
 8028eb0:	f000 ff98 	bl	8029de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8028eb4:	693b      	ldr	r3, [r7, #16]
 8028eb6:	f003 0310 	and.w	r3, r3, #16
 8028eba:	2b00      	cmp	r3, #0
 8028ebc:	d008      	beq.n	8028ed0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8028ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ec0:	015a      	lsls	r2, r3, #5
 8028ec2:	69fb      	ldr	r3, [r7, #28]
 8028ec4:	4413      	add	r3, r2
 8028ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028eca:	461a      	mov	r2, r3
 8028ecc:	2310      	movs	r3, #16
 8028ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8028ed0:	693b      	ldr	r3, [r7, #16]
 8028ed2:	f003 0302 	and.w	r3, r3, #2
 8028ed6:	2b00      	cmp	r3, #0
 8028ed8:	d030      	beq.n	8028f3c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8028eda:	6a3b      	ldr	r3, [r7, #32]
 8028edc:	695b      	ldr	r3, [r3, #20]
 8028ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028ee2:	2b80      	cmp	r3, #128	; 0x80
 8028ee4:	d109      	bne.n	8028efa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8028ee6:	69fb      	ldr	r3, [r7, #28]
 8028ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028eec:	685b      	ldr	r3, [r3, #4]
 8028eee:	69fa      	ldr	r2, [r7, #28]
 8028ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8028ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028ef8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8028efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028efc:	4613      	mov	r3, r2
 8028efe:	00db      	lsls	r3, r3, #3
 8028f00:	4413      	add	r3, r2
 8028f02:	009b      	lsls	r3, r3, #2
 8028f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028f08:	687a      	ldr	r2, [r7, #4]
 8028f0a:	4413      	add	r3, r2
 8028f0c:	3304      	adds	r3, #4
 8028f0e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8028f10:	697b      	ldr	r3, [r7, #20]
 8028f12:	78db      	ldrb	r3, [r3, #3]
 8028f14:	2b01      	cmp	r3, #1
 8028f16:	d108      	bne.n	8028f2a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8028f18:	697b      	ldr	r3, [r7, #20]
 8028f1a:	2200      	movs	r2, #0
 8028f1c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8028f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f20:	b2db      	uxtb	r3, r3
 8028f22:	4619      	mov	r1, r3
 8028f24:	6878      	ldr	r0, [r7, #4]
 8028f26:	f008 f8ab 	bl	8031080 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8028f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f2c:	015a      	lsls	r2, r3, #5
 8028f2e:	69fb      	ldr	r3, [r7, #28]
 8028f30:	4413      	add	r3, r2
 8028f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f36:	461a      	mov	r2, r3
 8028f38:	2302      	movs	r3, #2
 8028f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8028f3c:	693b      	ldr	r3, [r7, #16]
 8028f3e:	f003 0320 	and.w	r3, r3, #32
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	d008      	beq.n	8028f58 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8028f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f48:	015a      	lsls	r2, r3, #5
 8028f4a:	69fb      	ldr	r3, [r7, #28]
 8028f4c:	4413      	add	r3, r2
 8028f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f52:	461a      	mov	r2, r3
 8028f54:	2320      	movs	r3, #32
 8028f56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8028f58:	693b      	ldr	r3, [r7, #16]
 8028f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8028f5e:	2b00      	cmp	r3, #0
 8028f60:	d009      	beq.n	8028f76 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8028f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f64:	015a      	lsls	r2, r3, #5
 8028f66:	69fb      	ldr	r3, [r7, #28]
 8028f68:	4413      	add	r3, r2
 8028f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f6e:	461a      	mov	r2, r3
 8028f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8028f74:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8028f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f78:	3301      	adds	r3, #1
 8028f7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8028f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f7e:	085b      	lsrs	r3, r3, #1
 8028f80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8028f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f84:	2b00      	cmp	r3, #0
 8028f86:	f47f af62 	bne.w	8028e4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8028f8a:	687b      	ldr	r3, [r7, #4]
 8028f8c:	681b      	ldr	r3, [r3, #0]
 8028f8e:	4618      	mov	r0, r3
 8028f90:	f005 fa36 	bl	802e400 <USB_ReadInterrupts>
 8028f94:	4603      	mov	r3, r0
 8028f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8028f9e:	f040 80db 	bne.w	8029158 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8028fa2:	687b      	ldr	r3, [r7, #4]
 8028fa4:	681b      	ldr	r3, [r3, #0]
 8028fa6:	4618      	mov	r0, r3
 8028fa8:	f005 fa57 	bl	802e45a <USB_ReadDevAllInEpInterrupt>
 8028fac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8028fae:	2300      	movs	r3, #0
 8028fb0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8028fb2:	e0cd      	b.n	8029150 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8028fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fb6:	f003 0301 	and.w	r3, r3, #1
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	f000 80c2 	beq.w	8029144 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8028fc0:	687b      	ldr	r3, [r7, #4]
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fc6:	b2d2      	uxtb	r2, r2
 8028fc8:	4611      	mov	r1, r2
 8028fca:	4618      	mov	r0, r3
 8028fcc:	f005 fa7d 	bl	802e4ca <USB_ReadDevInEPInterrupt>
 8028fd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8028fd2:	693b      	ldr	r3, [r7, #16]
 8028fd4:	f003 0301 	and.w	r3, r3, #1
 8028fd8:	2b00      	cmp	r3, #0
 8028fda:	d057      	beq.n	802908c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8028fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fde:	f003 030f 	and.w	r3, r3, #15
 8028fe2:	2201      	movs	r2, #1
 8028fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8028fe8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8028fea:	69fb      	ldr	r3, [r7, #28]
 8028fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ff2:	68fb      	ldr	r3, [r7, #12]
 8028ff4:	43db      	mvns	r3, r3
 8028ff6:	69f9      	ldr	r1, [r7, #28]
 8028ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8028ffc:	4013      	ands	r3, r2
 8028ffe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8029000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029002:	015a      	lsls	r2, r3, #5
 8029004:	69fb      	ldr	r3, [r7, #28]
 8029006:	4413      	add	r3, r2
 8029008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802900c:	461a      	mov	r2, r3
 802900e:	2301      	movs	r3, #1
 8029010:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	691b      	ldr	r3, [r3, #16]
 8029016:	2b01      	cmp	r3, #1
 8029018:	d132      	bne.n	8029080 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802901a:	6879      	ldr	r1, [r7, #4]
 802901c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802901e:	4613      	mov	r3, r2
 8029020:	00db      	lsls	r3, r3, #3
 8029022:	4413      	add	r3, r2
 8029024:	009b      	lsls	r3, r3, #2
 8029026:	440b      	add	r3, r1
 8029028:	334c      	adds	r3, #76	; 0x4c
 802902a:	6819      	ldr	r1, [r3, #0]
 802902c:	6878      	ldr	r0, [r7, #4]
 802902e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029030:	4613      	mov	r3, r2
 8029032:	00db      	lsls	r3, r3, #3
 8029034:	4413      	add	r3, r2
 8029036:	009b      	lsls	r3, r3, #2
 8029038:	4403      	add	r3, r0
 802903a:	3348      	adds	r3, #72	; 0x48
 802903c:	681b      	ldr	r3, [r3, #0]
 802903e:	4419      	add	r1, r3
 8029040:	6878      	ldr	r0, [r7, #4]
 8029042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029044:	4613      	mov	r3, r2
 8029046:	00db      	lsls	r3, r3, #3
 8029048:	4413      	add	r3, r2
 802904a:	009b      	lsls	r3, r3, #2
 802904c:	4403      	add	r3, r0
 802904e:	334c      	adds	r3, #76	; 0x4c
 8029050:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8029052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029054:	2b00      	cmp	r3, #0
 8029056:	d113      	bne.n	8029080 <HAL_PCD_IRQHandler+0x3a2>
 8029058:	6879      	ldr	r1, [r7, #4]
 802905a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802905c:	4613      	mov	r3, r2
 802905e:	00db      	lsls	r3, r3, #3
 8029060:	4413      	add	r3, r2
 8029062:	009b      	lsls	r3, r3, #2
 8029064:	440b      	add	r3, r1
 8029066:	3354      	adds	r3, #84	; 0x54
 8029068:	681b      	ldr	r3, [r3, #0]
 802906a:	2b00      	cmp	r3, #0
 802906c:	d108      	bne.n	8029080 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	6818      	ldr	r0, [r3, #0]
 8029072:	687b      	ldr	r3, [r7, #4]
 8029074:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029078:	461a      	mov	r2, r3
 802907a:	2101      	movs	r1, #1
 802907c:	f005 fa84 	bl	802e588 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8029080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029082:	b2db      	uxtb	r3, r3
 8029084:	4619      	mov	r1, r3
 8029086:	6878      	ldr	r0, [r7, #4]
 8029088:	f007 ff75 	bl	8030f76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802908c:	693b      	ldr	r3, [r7, #16]
 802908e:	f003 0308 	and.w	r3, r3, #8
 8029092:	2b00      	cmp	r3, #0
 8029094:	d008      	beq.n	80290a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8029096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029098:	015a      	lsls	r2, r3, #5
 802909a:	69fb      	ldr	r3, [r7, #28]
 802909c:	4413      	add	r3, r2
 802909e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80290a2:	461a      	mov	r2, r3
 80290a4:	2308      	movs	r3, #8
 80290a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80290a8:	693b      	ldr	r3, [r7, #16]
 80290aa:	f003 0310 	and.w	r3, r3, #16
 80290ae:	2b00      	cmp	r3, #0
 80290b0:	d008      	beq.n	80290c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80290b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290b4:	015a      	lsls	r2, r3, #5
 80290b6:	69fb      	ldr	r3, [r7, #28]
 80290b8:	4413      	add	r3, r2
 80290ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80290be:	461a      	mov	r2, r3
 80290c0:	2310      	movs	r3, #16
 80290c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80290c4:	693b      	ldr	r3, [r7, #16]
 80290c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d008      	beq.n	80290e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80290ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290d0:	015a      	lsls	r2, r3, #5
 80290d2:	69fb      	ldr	r3, [r7, #28]
 80290d4:	4413      	add	r3, r2
 80290d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80290da:	461a      	mov	r2, r3
 80290dc:	2340      	movs	r3, #64	; 0x40
 80290de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80290e0:	693b      	ldr	r3, [r7, #16]
 80290e2:	f003 0302 	and.w	r3, r3, #2
 80290e6:	2b00      	cmp	r3, #0
 80290e8:	d023      	beq.n	8029132 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80290ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80290ec:	6a38      	ldr	r0, [r7, #32]
 80290ee:	f004 f965 	bl	802d3bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80290f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80290f4:	4613      	mov	r3, r2
 80290f6:	00db      	lsls	r3, r3, #3
 80290f8:	4413      	add	r3, r2
 80290fa:	009b      	lsls	r3, r3, #2
 80290fc:	3338      	adds	r3, #56	; 0x38
 80290fe:	687a      	ldr	r2, [r7, #4]
 8029100:	4413      	add	r3, r2
 8029102:	3304      	adds	r3, #4
 8029104:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8029106:	697b      	ldr	r3, [r7, #20]
 8029108:	78db      	ldrb	r3, [r3, #3]
 802910a:	2b01      	cmp	r3, #1
 802910c:	d108      	bne.n	8029120 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802910e:	697b      	ldr	r3, [r7, #20]
 8029110:	2200      	movs	r2, #0
 8029112:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8029114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029116:	b2db      	uxtb	r3, r3
 8029118:	4619      	mov	r1, r3
 802911a:	6878      	ldr	r0, [r7, #4]
 802911c:	f007 ffc2 	bl	80310a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8029120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029122:	015a      	lsls	r2, r3, #5
 8029124:	69fb      	ldr	r3, [r7, #28]
 8029126:	4413      	add	r3, r2
 8029128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802912c:	461a      	mov	r2, r3
 802912e:	2302      	movs	r3, #2
 8029130:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8029132:	693b      	ldr	r3, [r7, #16]
 8029134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029138:	2b00      	cmp	r3, #0
 802913a:	d003      	beq.n	8029144 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802913c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802913e:	6878      	ldr	r0, [r7, #4]
 8029140:	f000 fcdb 	bl	8029afa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8029144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029146:	3301      	adds	r3, #1
 8029148:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802914c:	085b      	lsrs	r3, r3, #1
 802914e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8029150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029152:	2b00      	cmp	r3, #0
 8029154:	f47f af2e 	bne.w	8028fb4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	4618      	mov	r0, r3
 802915e:	f005 f94f 	bl	802e400 <USB_ReadInterrupts>
 8029162:	4603      	mov	r3, r0
 8029164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8029168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802916c:	d122      	bne.n	80291b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802916e:	69fb      	ldr	r3, [r7, #28]
 8029170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029174:	685b      	ldr	r3, [r3, #4]
 8029176:	69fa      	ldr	r2, [r7, #28]
 8029178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802917c:	f023 0301 	bic.w	r3, r3, #1
 8029180:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8029188:	2b01      	cmp	r3, #1
 802918a:	d108      	bne.n	802919e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	2200      	movs	r2, #0
 8029190:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8029194:	2100      	movs	r1, #0
 8029196:	6878      	ldr	r0, [r7, #4]
 8029198:	f000 fec2 	bl	8029f20 <HAL_PCDEx_LPM_Callback>
 802919c:	e002      	b.n	80291a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802919e:	6878      	ldr	r0, [r7, #4]
 80291a0:	f007 ff60 	bl	8031064 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80291a4:	687b      	ldr	r3, [r7, #4]
 80291a6:	681b      	ldr	r3, [r3, #0]
 80291a8:	695a      	ldr	r2, [r3, #20]
 80291aa:	687b      	ldr	r3, [r7, #4]
 80291ac:	681b      	ldr	r3, [r3, #0]
 80291ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80291b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80291b4:	687b      	ldr	r3, [r7, #4]
 80291b6:	681b      	ldr	r3, [r3, #0]
 80291b8:	4618      	mov	r0, r3
 80291ba:	f005 f921 	bl	802e400 <USB_ReadInterrupts>
 80291be:	4603      	mov	r3, r0
 80291c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80291c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80291c8:	d112      	bne.n	80291f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80291ca:	69fb      	ldr	r3, [r7, #28]
 80291cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80291d0:	689b      	ldr	r3, [r3, #8]
 80291d2:	f003 0301 	and.w	r3, r3, #1
 80291d6:	2b01      	cmp	r3, #1
 80291d8:	d102      	bne.n	80291e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80291da:	6878      	ldr	r0, [r7, #4]
 80291dc:	f007 ff1c 	bl	8031018 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	695a      	ldr	r2, [r3, #20]
 80291e6:	687b      	ldr	r3, [r7, #4]
 80291e8:	681b      	ldr	r3, [r3, #0]
 80291ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80291ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	681b      	ldr	r3, [r3, #0]
 80291f4:	4618      	mov	r0, r3
 80291f6:	f005 f903 	bl	802e400 <USB_ReadInterrupts>
 80291fa:	4603      	mov	r3, r0
 80291fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029204:	f040 80b7 	bne.w	8029376 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8029208:	69fb      	ldr	r3, [r7, #28]
 802920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802920e:	685b      	ldr	r3, [r3, #4]
 8029210:	69fa      	ldr	r2, [r7, #28]
 8029212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029216:	f023 0301 	bic.w	r3, r3, #1
 802921a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	2110      	movs	r1, #16
 8029222:	4618      	mov	r0, r3
 8029224:	f004 f8ca 	bl	802d3bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029228:	2300      	movs	r3, #0
 802922a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802922c:	e046      	b.n	80292bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029230:	015a      	lsls	r2, r3, #5
 8029232:	69fb      	ldr	r3, [r7, #28]
 8029234:	4413      	add	r3, r2
 8029236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802923a:	461a      	mov	r2, r3
 802923c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029240:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8029242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029244:	015a      	lsls	r2, r3, #5
 8029246:	69fb      	ldr	r3, [r7, #28]
 8029248:	4413      	add	r3, r2
 802924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802924e:	681b      	ldr	r3, [r3, #0]
 8029250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029252:	0151      	lsls	r1, r2, #5
 8029254:	69fa      	ldr	r2, [r7, #28]
 8029256:	440a      	add	r2, r1
 8029258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802925c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029260:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8029262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029264:	015a      	lsls	r2, r3, #5
 8029266:	69fb      	ldr	r3, [r7, #28]
 8029268:	4413      	add	r3, r2
 802926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802926e:	461a      	mov	r2, r3
 8029270:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029274:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8029276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029278:	015a      	lsls	r2, r3, #5
 802927a:	69fb      	ldr	r3, [r7, #28]
 802927c:	4413      	add	r3, r2
 802927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029282:	681b      	ldr	r3, [r3, #0]
 8029284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029286:	0151      	lsls	r1, r2, #5
 8029288:	69fa      	ldr	r2, [r7, #28]
 802928a:	440a      	add	r2, r1
 802928c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029290:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8029294:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8029296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029298:	015a      	lsls	r2, r3, #5
 802929a:	69fb      	ldr	r3, [r7, #28]
 802929c:	4413      	add	r3, r2
 802929e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80292a2:	681b      	ldr	r3, [r3, #0]
 80292a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292a6:	0151      	lsls	r1, r2, #5
 80292a8:	69fa      	ldr	r2, [r7, #28]
 80292aa:	440a      	add	r2, r1
 80292ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80292b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80292b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80292b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292b8:	3301      	adds	r3, #1
 80292ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80292bc:	687b      	ldr	r3, [r7, #4]
 80292be:	685b      	ldr	r3, [r3, #4]
 80292c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292c2:	429a      	cmp	r2, r3
 80292c4:	d3b3      	bcc.n	802922e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80292c6:	69fb      	ldr	r3, [r7, #28]
 80292c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80292cc:	69db      	ldr	r3, [r3, #28]
 80292ce:	69fa      	ldr	r2, [r7, #28]
 80292d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80292d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80292d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80292da:	687b      	ldr	r3, [r7, #4]
 80292dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80292de:	2b00      	cmp	r3, #0
 80292e0:	d016      	beq.n	8029310 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80292e2:	69fb      	ldr	r3, [r7, #28]
 80292e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80292e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80292ec:	69fa      	ldr	r2, [r7, #28]
 80292ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80292f2:	f043 030b 	orr.w	r3, r3, #11
 80292f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80292fa:	69fb      	ldr	r3, [r7, #28]
 80292fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029302:	69fa      	ldr	r2, [r7, #28]
 8029304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029308:	f043 030b 	orr.w	r3, r3, #11
 802930c:	6453      	str	r3, [r2, #68]	; 0x44
 802930e:	e015      	b.n	802933c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8029310:	69fb      	ldr	r3, [r7, #28]
 8029312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029316:	695b      	ldr	r3, [r3, #20]
 8029318:	69fa      	ldr	r2, [r7, #28]
 802931a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802931e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8029322:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8029326:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8029328:	69fb      	ldr	r3, [r7, #28]
 802932a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802932e:	691b      	ldr	r3, [r3, #16]
 8029330:	69fa      	ldr	r2, [r7, #28]
 8029332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029336:	f043 030b 	orr.w	r3, r3, #11
 802933a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802933c:	69fb      	ldr	r3, [r7, #28]
 802933e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029342:	681b      	ldr	r3, [r3, #0]
 8029344:	69fa      	ldr	r2, [r7, #28]
 8029346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802934a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802934e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	6818      	ldr	r0, [r3, #0]
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	691b      	ldr	r3, [r3, #16]
 8029358:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802935a:	687b      	ldr	r3, [r7, #4]
 802935c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029360:	461a      	mov	r2, r3
 8029362:	f005 f911 	bl	802e588 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8029366:	687b      	ldr	r3, [r7, #4]
 8029368:	681b      	ldr	r3, [r3, #0]
 802936a:	695a      	ldr	r2, [r3, #20]
 802936c:	687b      	ldr	r3, [r7, #4]
 802936e:	681b      	ldr	r3, [r3, #0]
 8029370:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8029374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8029376:	687b      	ldr	r3, [r7, #4]
 8029378:	681b      	ldr	r3, [r3, #0]
 802937a:	4618      	mov	r0, r3
 802937c:	f005 f840 	bl	802e400 <USB_ReadInterrupts>
 8029380:	4603      	mov	r3, r0
 8029382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8029386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802938a:	d124      	bne.n	80293d6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802938c:	687b      	ldr	r3, [r7, #4]
 802938e:	681b      	ldr	r3, [r3, #0]
 8029390:	4618      	mov	r0, r3
 8029392:	f005 f8d6 	bl	802e542 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8029396:	687b      	ldr	r3, [r7, #4]
 8029398:	681b      	ldr	r3, [r3, #0]
 802939a:	4618      	mov	r0, r3
 802939c:	f004 f88b 	bl	802d4b6 <USB_GetDevSpeed>
 80293a0:	4603      	mov	r3, r0
 80293a2:	461a      	mov	r2, r3
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80293a8:	687b      	ldr	r3, [r7, #4]
 80293aa:	681c      	ldr	r4, [r3, #0]
 80293ac:	f001 fa0e 	bl	802a7cc <HAL_RCC_GetHCLKFreq>
 80293b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80293b6:	b2db      	uxtb	r3, r3
 80293b8:	461a      	mov	r2, r3
 80293ba:	4620      	mov	r0, r4
 80293bc:	f003 fd8a 	bl	802ced4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80293c0:	6878      	ldr	r0, [r7, #4]
 80293c2:	f007 fe00 	bl	8030fc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80293c6:	687b      	ldr	r3, [r7, #4]
 80293c8:	681b      	ldr	r3, [r3, #0]
 80293ca:	695a      	ldr	r2, [r3, #20]
 80293cc:	687b      	ldr	r3, [r7, #4]
 80293ce:	681b      	ldr	r3, [r3, #0]
 80293d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80293d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80293d6:	687b      	ldr	r3, [r7, #4]
 80293d8:	681b      	ldr	r3, [r3, #0]
 80293da:	4618      	mov	r0, r3
 80293dc:	f005 f810 	bl	802e400 <USB_ReadInterrupts>
 80293e0:	4603      	mov	r3, r0
 80293e2:	f003 0308 	and.w	r3, r3, #8
 80293e6:	2b08      	cmp	r3, #8
 80293e8:	d10a      	bne.n	8029400 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80293ea:	6878      	ldr	r0, [r7, #4]
 80293ec:	f007 fddd 	bl	8030faa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	681b      	ldr	r3, [r3, #0]
 80293f4:	695a      	ldr	r2, [r3, #20]
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	f002 0208 	and.w	r2, r2, #8
 80293fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8029400:	687b      	ldr	r3, [r7, #4]
 8029402:	681b      	ldr	r3, [r3, #0]
 8029404:	4618      	mov	r0, r3
 8029406:	f004 fffb 	bl	802e400 <USB_ReadInterrupts>
 802940a:	4603      	mov	r3, r0
 802940c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029410:	2b80      	cmp	r3, #128	; 0x80
 8029412:	d122      	bne.n	802945a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8029414:	6a3b      	ldr	r3, [r7, #32]
 8029416:	699b      	ldr	r3, [r3, #24]
 8029418:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802941c:	6a3b      	ldr	r3, [r7, #32]
 802941e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029420:	2301      	movs	r3, #1
 8029422:	627b      	str	r3, [r7, #36]	; 0x24
 8029424:	e014      	b.n	8029450 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8029426:	6879      	ldr	r1, [r7, #4]
 8029428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802942a:	4613      	mov	r3, r2
 802942c:	00db      	lsls	r3, r3, #3
 802942e:	4413      	add	r3, r2
 8029430:	009b      	lsls	r3, r3, #2
 8029432:	440b      	add	r3, r1
 8029434:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029438:	781b      	ldrb	r3, [r3, #0]
 802943a:	2b01      	cmp	r3, #1
 802943c:	d105      	bne.n	802944a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 802943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029440:	b2db      	uxtb	r3, r3
 8029442:	4619      	mov	r1, r3
 8029444:	6878      	ldr	r0, [r7, #4]
 8029446:	f000 fb27 	bl	8029a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802944c:	3301      	adds	r3, #1
 802944e:	627b      	str	r3, [r7, #36]	; 0x24
 8029450:	687b      	ldr	r3, [r7, #4]
 8029452:	685b      	ldr	r3, [r3, #4]
 8029454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029456:	429a      	cmp	r2, r3
 8029458:	d3e5      	bcc.n	8029426 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	681b      	ldr	r3, [r3, #0]
 802945e:	4618      	mov	r0, r3
 8029460:	f004 ffce 	bl	802e400 <USB_ReadInterrupts>
 8029464:	4603      	mov	r3, r0
 8029466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802946a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802946e:	d13b      	bne.n	80294e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029470:	2301      	movs	r3, #1
 8029472:	627b      	str	r3, [r7, #36]	; 0x24
 8029474:	e02b      	b.n	80294ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8029476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029478:	015a      	lsls	r2, r3, #5
 802947a:	69fb      	ldr	r3, [r7, #28]
 802947c:	4413      	add	r3, r2
 802947e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029482:	681b      	ldr	r3, [r3, #0]
 8029484:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8029486:	6879      	ldr	r1, [r7, #4]
 8029488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802948a:	4613      	mov	r3, r2
 802948c:	00db      	lsls	r3, r3, #3
 802948e:	4413      	add	r3, r2
 8029490:	009b      	lsls	r3, r3, #2
 8029492:	440b      	add	r3, r1
 8029494:	3340      	adds	r3, #64	; 0x40
 8029496:	781b      	ldrb	r3, [r3, #0]
 8029498:	2b01      	cmp	r3, #1
 802949a:	d115      	bne.n	80294c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 802949c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 802949e:	2b00      	cmp	r3, #0
 80294a0:	da12      	bge.n	80294c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80294a2:	6879      	ldr	r1, [r7, #4]
 80294a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294a6:	4613      	mov	r3, r2
 80294a8:	00db      	lsls	r3, r3, #3
 80294aa:	4413      	add	r3, r2
 80294ac:	009b      	lsls	r3, r3, #2
 80294ae:	440b      	add	r3, r1
 80294b0:	333f      	adds	r3, #63	; 0x3f
 80294b2:	2201      	movs	r2, #1
 80294b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80294b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294b8:	b2db      	uxtb	r3, r3
 80294ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80294be:	b2db      	uxtb	r3, r3
 80294c0:	4619      	mov	r1, r3
 80294c2:	6878      	ldr	r0, [r7, #4]
 80294c4:	f000 fae8 	bl	8029a98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80294c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294ca:	3301      	adds	r3, #1
 80294cc:	627b      	str	r3, [r7, #36]	; 0x24
 80294ce:	687b      	ldr	r3, [r7, #4]
 80294d0:	685b      	ldr	r3, [r3, #4]
 80294d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294d4:	429a      	cmp	r2, r3
 80294d6:	d3ce      	bcc.n	8029476 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	681b      	ldr	r3, [r3, #0]
 80294dc:	695a      	ldr	r2, [r3, #20]
 80294de:	687b      	ldr	r3, [r7, #4]
 80294e0:	681b      	ldr	r3, [r3, #0]
 80294e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80294e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	4618      	mov	r0, r3
 80294ee:	f004 ff87 	bl	802e400 <USB_ReadInterrupts>
 80294f2:	4603      	mov	r3, r0
 80294f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80294f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80294fc:	d155      	bne.n	80295aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80294fe:	2301      	movs	r3, #1
 8029500:	627b      	str	r3, [r7, #36]	; 0x24
 8029502:	e045      	b.n	8029590 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8029504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029506:	015a      	lsls	r2, r3, #5
 8029508:	69fb      	ldr	r3, [r7, #28]
 802950a:	4413      	add	r3, r2
 802950c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029510:	681b      	ldr	r3, [r3, #0]
 8029512:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029514:	6879      	ldr	r1, [r7, #4]
 8029516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029518:	4613      	mov	r3, r2
 802951a:	00db      	lsls	r3, r3, #3
 802951c:	4413      	add	r3, r2
 802951e:	009b      	lsls	r3, r3, #2
 8029520:	440b      	add	r3, r1
 8029522:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8029526:	781b      	ldrb	r3, [r3, #0]
 8029528:	2b01      	cmp	r3, #1
 802952a:	d12e      	bne.n	802958a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802952c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 802952e:	2b00      	cmp	r3, #0
 8029530:	da2b      	bge.n	802958a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8029532:	69bb      	ldr	r3, [r7, #24]
 8029534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8029538:	687b      	ldr	r3, [r7, #4]
 802953a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 802953e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029542:	429a      	cmp	r2, r3
 8029544:	d121      	bne.n	802958a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8029546:	6879      	ldr	r1, [r7, #4]
 8029548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802954a:	4613      	mov	r3, r2
 802954c:	00db      	lsls	r3, r3, #3
 802954e:	4413      	add	r3, r2
 8029550:	009b      	lsls	r3, r3, #2
 8029552:	440b      	add	r3, r1
 8029554:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029558:	2201      	movs	r2, #1
 802955a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 802955c:	6a3b      	ldr	r3, [r7, #32]
 802955e:	699b      	ldr	r3, [r3, #24]
 8029560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8029564:	6a3b      	ldr	r3, [r7, #32]
 8029566:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8029568:	6a3b      	ldr	r3, [r7, #32]
 802956a:	695b      	ldr	r3, [r3, #20]
 802956c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029570:	2b00      	cmp	r3, #0
 8029572:	d10a      	bne.n	802958a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8029574:	69fb      	ldr	r3, [r7, #28]
 8029576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802957a:	685b      	ldr	r3, [r3, #4]
 802957c:	69fa      	ldr	r2, [r7, #28]
 802957e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8029586:	6053      	str	r3, [r2, #4]
            break;
 8029588:	e007      	b.n	802959a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802958c:	3301      	adds	r3, #1
 802958e:	627b      	str	r3, [r7, #36]	; 0x24
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	685b      	ldr	r3, [r3, #4]
 8029594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029596:	429a      	cmp	r2, r3
 8029598:	d3b4      	bcc.n	8029504 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	681b      	ldr	r3, [r3, #0]
 802959e:	695a      	ldr	r2, [r3, #20]
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	681b      	ldr	r3, [r3, #0]
 80295a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80295a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	681b      	ldr	r3, [r3, #0]
 80295ae:	4618      	mov	r0, r3
 80295b0:	f004 ff26 	bl	802e400 <USB_ReadInterrupts>
 80295b4:	4603      	mov	r3, r0
 80295b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80295ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80295be:	d10a      	bne.n	80295d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80295c0:	6878      	ldr	r0, [r7, #4]
 80295c2:	f007 fd81 	bl	80310c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	681b      	ldr	r3, [r3, #0]
 80295ca:	695a      	ldr	r2, [r3, #20]
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	681b      	ldr	r3, [r3, #0]
 80295d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80295d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80295d6:	687b      	ldr	r3, [r7, #4]
 80295d8:	681b      	ldr	r3, [r3, #0]
 80295da:	4618      	mov	r0, r3
 80295dc:	f004 ff10 	bl	802e400 <USB_ReadInterrupts>
 80295e0:	4603      	mov	r3, r0
 80295e2:	f003 0304 	and.w	r3, r3, #4
 80295e6:	2b04      	cmp	r3, #4
 80295e8:	d115      	bne.n	8029616 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	681b      	ldr	r3, [r3, #0]
 80295ee:	685b      	ldr	r3, [r3, #4]
 80295f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80295f2:	69bb      	ldr	r3, [r7, #24]
 80295f4:	f003 0304 	and.w	r3, r3, #4
 80295f8:	2b00      	cmp	r3, #0
 80295fa:	d002      	beq.n	8029602 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80295fc:	6878      	ldr	r0, [r7, #4]
 80295fe:	f007 fd71 	bl	80310e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	681b      	ldr	r3, [r3, #0]
 8029606:	6859      	ldr	r1, [r3, #4]
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	681b      	ldr	r3, [r3, #0]
 802960c:	69ba      	ldr	r2, [r7, #24]
 802960e:	430a      	orrs	r2, r1
 8029610:	605a      	str	r2, [r3, #4]
 8029612:	e000      	b.n	8029616 <HAL_PCD_IRQHandler+0x938>
      return;
 8029614:	bf00      	nop
    }
  }
}
 8029616:	3734      	adds	r7, #52	; 0x34
 8029618:	46bd      	mov	sp, r7
 802961a:	bd90      	pop	{r4, r7, pc}

0802961c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 802961c:	b580      	push	{r7, lr}
 802961e:	b082      	sub	sp, #8
 8029620:	af00      	add	r7, sp, #0
 8029622:	6078      	str	r0, [r7, #4]
 8029624:	460b      	mov	r3, r1
 8029626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8029628:	687b      	ldr	r3, [r7, #4]
 802962a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802962e:	2b01      	cmp	r3, #1
 8029630:	d101      	bne.n	8029636 <HAL_PCD_SetAddress+0x1a>
 8029632:	2302      	movs	r3, #2
 8029634:	e013      	b.n	802965e <HAL_PCD_SetAddress+0x42>
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	2201      	movs	r2, #1
 802963a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	78fa      	ldrb	r2, [r7, #3]
 8029642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8029646:	687b      	ldr	r3, [r7, #4]
 8029648:	681b      	ldr	r3, [r3, #0]
 802964a:	78fa      	ldrb	r2, [r7, #3]
 802964c:	4611      	mov	r1, r2
 802964e:	4618      	mov	r0, r3
 8029650:	f004 fe6e 	bl	802e330 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8029654:	687b      	ldr	r3, [r7, #4]
 8029656:	2200      	movs	r2, #0
 8029658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802965c:	2300      	movs	r3, #0
}
 802965e:	4618      	mov	r0, r3
 8029660:	3708      	adds	r7, #8
 8029662:	46bd      	mov	sp, r7
 8029664:	bd80      	pop	{r7, pc}

08029666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8029666:	b580      	push	{r7, lr}
 8029668:	b084      	sub	sp, #16
 802966a:	af00      	add	r7, sp, #0
 802966c:	6078      	str	r0, [r7, #4]
 802966e:	4608      	mov	r0, r1
 8029670:	4611      	mov	r1, r2
 8029672:	461a      	mov	r2, r3
 8029674:	4603      	mov	r3, r0
 8029676:	70fb      	strb	r3, [r7, #3]
 8029678:	460b      	mov	r3, r1
 802967a:	803b      	strh	r3, [r7, #0]
 802967c:	4613      	mov	r3, r2
 802967e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8029680:	2300      	movs	r3, #0
 8029682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029688:	2b00      	cmp	r3, #0
 802968a:	da0f      	bge.n	80296ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802968c:	78fb      	ldrb	r3, [r7, #3]
 802968e:	f003 020f 	and.w	r2, r3, #15
 8029692:	4613      	mov	r3, r2
 8029694:	00db      	lsls	r3, r3, #3
 8029696:	4413      	add	r3, r2
 8029698:	009b      	lsls	r3, r3, #2
 802969a:	3338      	adds	r3, #56	; 0x38
 802969c:	687a      	ldr	r2, [r7, #4]
 802969e:	4413      	add	r3, r2
 80296a0:	3304      	adds	r3, #4
 80296a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80296a4:	68fb      	ldr	r3, [r7, #12]
 80296a6:	2201      	movs	r2, #1
 80296a8:	705a      	strb	r2, [r3, #1]
 80296aa:	e00f      	b.n	80296cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80296ac:	78fb      	ldrb	r3, [r7, #3]
 80296ae:	f003 020f 	and.w	r2, r3, #15
 80296b2:	4613      	mov	r3, r2
 80296b4:	00db      	lsls	r3, r3, #3
 80296b6:	4413      	add	r3, r2
 80296b8:	009b      	lsls	r3, r3, #2
 80296ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80296be:	687a      	ldr	r2, [r7, #4]
 80296c0:	4413      	add	r3, r2
 80296c2:	3304      	adds	r3, #4
 80296c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80296c6:	68fb      	ldr	r3, [r7, #12]
 80296c8:	2200      	movs	r2, #0
 80296ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80296cc:	78fb      	ldrb	r3, [r7, #3]
 80296ce:	f003 030f 	and.w	r3, r3, #15
 80296d2:	b2da      	uxtb	r2, r3
 80296d4:	68fb      	ldr	r3, [r7, #12]
 80296d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80296d8:	883a      	ldrh	r2, [r7, #0]
 80296da:	68fb      	ldr	r3, [r7, #12]
 80296dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80296de:	68fb      	ldr	r3, [r7, #12]
 80296e0:	78ba      	ldrb	r2, [r7, #2]
 80296e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80296e4:	68fb      	ldr	r3, [r7, #12]
 80296e6:	785b      	ldrb	r3, [r3, #1]
 80296e8:	2b00      	cmp	r3, #0
 80296ea:	d004      	beq.n	80296f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80296ec:	68fb      	ldr	r3, [r7, #12]
 80296ee:	781b      	ldrb	r3, [r3, #0]
 80296f0:	b29a      	uxth	r2, r3
 80296f2:	68fb      	ldr	r3, [r7, #12]
 80296f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80296f6:	78bb      	ldrb	r3, [r7, #2]
 80296f8:	2b02      	cmp	r3, #2
 80296fa:	d102      	bne.n	8029702 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80296fc:	68fb      	ldr	r3, [r7, #12]
 80296fe:	2200      	movs	r2, #0
 8029700:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8029702:	687b      	ldr	r3, [r7, #4]
 8029704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029708:	2b01      	cmp	r3, #1
 802970a:	d101      	bne.n	8029710 <HAL_PCD_EP_Open+0xaa>
 802970c:	2302      	movs	r3, #2
 802970e:	e00e      	b.n	802972e <HAL_PCD_EP_Open+0xc8>
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	2201      	movs	r2, #1
 8029714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	681b      	ldr	r3, [r3, #0]
 802971c:	68f9      	ldr	r1, [r7, #12]
 802971e:	4618      	mov	r0, r3
 8029720:	f003 feee 	bl	802d500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	2200      	movs	r2, #0
 8029728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 802972c:	7afb      	ldrb	r3, [r7, #11]
}
 802972e:	4618      	mov	r0, r3
 8029730:	3710      	adds	r7, #16
 8029732:	46bd      	mov	sp, r7
 8029734:	bd80      	pop	{r7, pc}

08029736 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029736:	b580      	push	{r7, lr}
 8029738:	b084      	sub	sp, #16
 802973a:	af00      	add	r7, sp, #0
 802973c:	6078      	str	r0, [r7, #4]
 802973e:	460b      	mov	r3, r1
 8029740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029746:	2b00      	cmp	r3, #0
 8029748:	da0f      	bge.n	802976a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802974a:	78fb      	ldrb	r3, [r7, #3]
 802974c:	f003 020f 	and.w	r2, r3, #15
 8029750:	4613      	mov	r3, r2
 8029752:	00db      	lsls	r3, r3, #3
 8029754:	4413      	add	r3, r2
 8029756:	009b      	lsls	r3, r3, #2
 8029758:	3338      	adds	r3, #56	; 0x38
 802975a:	687a      	ldr	r2, [r7, #4]
 802975c:	4413      	add	r3, r2
 802975e:	3304      	adds	r3, #4
 8029760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029762:	68fb      	ldr	r3, [r7, #12]
 8029764:	2201      	movs	r2, #1
 8029766:	705a      	strb	r2, [r3, #1]
 8029768:	e00f      	b.n	802978a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802976a:	78fb      	ldrb	r3, [r7, #3]
 802976c:	f003 020f 	and.w	r2, r3, #15
 8029770:	4613      	mov	r3, r2
 8029772:	00db      	lsls	r3, r3, #3
 8029774:	4413      	add	r3, r2
 8029776:	009b      	lsls	r3, r3, #2
 8029778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802977c:	687a      	ldr	r2, [r7, #4]
 802977e:	4413      	add	r3, r2
 8029780:	3304      	adds	r3, #4
 8029782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029784:	68fb      	ldr	r3, [r7, #12]
 8029786:	2200      	movs	r2, #0
 8029788:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 802978a:	78fb      	ldrb	r3, [r7, #3]
 802978c:	f003 030f 	and.w	r3, r3, #15
 8029790:	b2da      	uxtb	r2, r3
 8029792:	68fb      	ldr	r3, [r7, #12]
 8029794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029796:	687b      	ldr	r3, [r7, #4]
 8029798:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802979c:	2b01      	cmp	r3, #1
 802979e:	d101      	bne.n	80297a4 <HAL_PCD_EP_Close+0x6e>
 80297a0:	2302      	movs	r3, #2
 80297a2:	e00e      	b.n	80297c2 <HAL_PCD_EP_Close+0x8c>
 80297a4:	687b      	ldr	r3, [r7, #4]
 80297a6:	2201      	movs	r2, #1
 80297a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80297ac:	687b      	ldr	r3, [r7, #4]
 80297ae:	681b      	ldr	r3, [r3, #0]
 80297b0:	68f9      	ldr	r1, [r7, #12]
 80297b2:	4618      	mov	r0, r3
 80297b4:	f003 ff2c 	bl	802d610 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80297b8:	687b      	ldr	r3, [r7, #4]
 80297ba:	2200      	movs	r2, #0
 80297bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80297c0:	2300      	movs	r3, #0
}
 80297c2:	4618      	mov	r0, r3
 80297c4:	3710      	adds	r7, #16
 80297c6:	46bd      	mov	sp, r7
 80297c8:	bd80      	pop	{r7, pc}

080297ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80297ca:	b580      	push	{r7, lr}
 80297cc:	b086      	sub	sp, #24
 80297ce:	af00      	add	r7, sp, #0
 80297d0:	60f8      	str	r0, [r7, #12]
 80297d2:	607a      	str	r2, [r7, #4]
 80297d4:	603b      	str	r3, [r7, #0]
 80297d6:	460b      	mov	r3, r1
 80297d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80297da:	7afb      	ldrb	r3, [r7, #11]
 80297dc:	f003 020f 	and.w	r2, r3, #15
 80297e0:	4613      	mov	r3, r2
 80297e2:	00db      	lsls	r3, r3, #3
 80297e4:	4413      	add	r3, r2
 80297e6:	009b      	lsls	r3, r3, #2
 80297e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80297ec:	68fa      	ldr	r2, [r7, #12]
 80297ee:	4413      	add	r3, r2
 80297f0:	3304      	adds	r3, #4
 80297f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80297f4:	697b      	ldr	r3, [r7, #20]
 80297f6:	687a      	ldr	r2, [r7, #4]
 80297f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80297fa:	697b      	ldr	r3, [r7, #20]
 80297fc:	683a      	ldr	r2, [r7, #0]
 80297fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029800:	697b      	ldr	r3, [r7, #20]
 8029802:	2200      	movs	r2, #0
 8029804:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8029806:	697b      	ldr	r3, [r7, #20]
 8029808:	2200      	movs	r2, #0
 802980a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 802980c:	7afb      	ldrb	r3, [r7, #11]
 802980e:	f003 030f 	and.w	r3, r3, #15
 8029812:	b2da      	uxtb	r2, r3
 8029814:	697b      	ldr	r3, [r7, #20]
 8029816:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029818:	68fb      	ldr	r3, [r7, #12]
 802981a:	691b      	ldr	r3, [r3, #16]
 802981c:	2b01      	cmp	r3, #1
 802981e:	d102      	bne.n	8029826 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029820:	687a      	ldr	r2, [r7, #4]
 8029822:	697b      	ldr	r3, [r7, #20]
 8029824:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029826:	7afb      	ldrb	r3, [r7, #11]
 8029828:	f003 030f 	and.w	r3, r3, #15
 802982c:	2b00      	cmp	r3, #0
 802982e:	d109      	bne.n	8029844 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029830:	68fb      	ldr	r3, [r7, #12]
 8029832:	6818      	ldr	r0, [r3, #0]
 8029834:	68fb      	ldr	r3, [r7, #12]
 8029836:	691b      	ldr	r3, [r3, #16]
 8029838:	b2db      	uxtb	r3, r3
 802983a:	461a      	mov	r2, r3
 802983c:	6979      	ldr	r1, [r7, #20]
 802983e:	f004 fa0b 	bl	802dc58 <USB_EP0StartXfer>
 8029842:	e008      	b.n	8029856 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	6818      	ldr	r0, [r3, #0]
 8029848:	68fb      	ldr	r3, [r7, #12]
 802984a:	691b      	ldr	r3, [r3, #16]
 802984c:	b2db      	uxtb	r3, r3
 802984e:	461a      	mov	r2, r3
 8029850:	6979      	ldr	r1, [r7, #20]
 8029852:	f003 ffb9 	bl	802d7c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8029856:	2300      	movs	r3, #0
}
 8029858:	4618      	mov	r0, r3
 802985a:	3718      	adds	r7, #24
 802985c:	46bd      	mov	sp, r7
 802985e:	bd80      	pop	{r7, pc}

08029860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029860:	b480      	push	{r7}
 8029862:	b083      	sub	sp, #12
 8029864:	af00      	add	r7, sp, #0
 8029866:	6078      	str	r0, [r7, #4]
 8029868:	460b      	mov	r3, r1
 802986a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 802986c:	78fb      	ldrb	r3, [r7, #3]
 802986e:	f003 020f 	and.w	r2, r3, #15
 8029872:	6879      	ldr	r1, [r7, #4]
 8029874:	4613      	mov	r3, r2
 8029876:	00db      	lsls	r3, r3, #3
 8029878:	4413      	add	r3, r2
 802987a:	009b      	lsls	r3, r3, #2
 802987c:	440b      	add	r3, r1
 802987e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8029882:	681b      	ldr	r3, [r3, #0]
}
 8029884:	4618      	mov	r0, r3
 8029886:	370c      	adds	r7, #12
 8029888:	46bd      	mov	sp, r7
 802988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802988e:	4770      	bx	lr

08029890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8029890:	b580      	push	{r7, lr}
 8029892:	b086      	sub	sp, #24
 8029894:	af00      	add	r7, sp, #0
 8029896:	60f8      	str	r0, [r7, #12]
 8029898:	607a      	str	r2, [r7, #4]
 802989a:	603b      	str	r3, [r7, #0]
 802989c:	460b      	mov	r3, r1
 802989e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80298a0:	7afb      	ldrb	r3, [r7, #11]
 80298a2:	f003 020f 	and.w	r2, r3, #15
 80298a6:	4613      	mov	r3, r2
 80298a8:	00db      	lsls	r3, r3, #3
 80298aa:	4413      	add	r3, r2
 80298ac:	009b      	lsls	r3, r3, #2
 80298ae:	3338      	adds	r3, #56	; 0x38
 80298b0:	68fa      	ldr	r2, [r7, #12]
 80298b2:	4413      	add	r3, r2
 80298b4:	3304      	adds	r3, #4
 80298b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80298b8:	697b      	ldr	r3, [r7, #20]
 80298ba:	687a      	ldr	r2, [r7, #4]
 80298bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80298be:	697b      	ldr	r3, [r7, #20]
 80298c0:	683a      	ldr	r2, [r7, #0]
 80298c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80298c4:	697b      	ldr	r3, [r7, #20]
 80298c6:	2200      	movs	r2, #0
 80298c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80298ca:	697b      	ldr	r3, [r7, #20]
 80298cc:	2201      	movs	r2, #1
 80298ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80298d0:	7afb      	ldrb	r3, [r7, #11]
 80298d2:	f003 030f 	and.w	r3, r3, #15
 80298d6:	b2da      	uxtb	r2, r3
 80298d8:	697b      	ldr	r3, [r7, #20]
 80298da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80298dc:	68fb      	ldr	r3, [r7, #12]
 80298de:	691b      	ldr	r3, [r3, #16]
 80298e0:	2b01      	cmp	r3, #1
 80298e2:	d102      	bne.n	80298ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80298e4:	687a      	ldr	r2, [r7, #4]
 80298e6:	697b      	ldr	r3, [r7, #20]
 80298e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80298ea:	7afb      	ldrb	r3, [r7, #11]
 80298ec:	f003 030f 	and.w	r3, r3, #15
 80298f0:	2b00      	cmp	r3, #0
 80298f2:	d109      	bne.n	8029908 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80298f4:	68fb      	ldr	r3, [r7, #12]
 80298f6:	6818      	ldr	r0, [r3, #0]
 80298f8:	68fb      	ldr	r3, [r7, #12]
 80298fa:	691b      	ldr	r3, [r3, #16]
 80298fc:	b2db      	uxtb	r3, r3
 80298fe:	461a      	mov	r2, r3
 8029900:	6979      	ldr	r1, [r7, #20]
 8029902:	f004 f9a9 	bl	802dc58 <USB_EP0StartXfer>
 8029906:	e008      	b.n	802991a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029908:	68fb      	ldr	r3, [r7, #12]
 802990a:	6818      	ldr	r0, [r3, #0]
 802990c:	68fb      	ldr	r3, [r7, #12]
 802990e:	691b      	ldr	r3, [r3, #16]
 8029910:	b2db      	uxtb	r3, r3
 8029912:	461a      	mov	r2, r3
 8029914:	6979      	ldr	r1, [r7, #20]
 8029916:	f003 ff57 	bl	802d7c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 802991a:	2300      	movs	r3, #0
}
 802991c:	4618      	mov	r0, r3
 802991e:	3718      	adds	r7, #24
 8029920:	46bd      	mov	sp, r7
 8029922:	bd80      	pop	{r7, pc}

08029924 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029924:	b580      	push	{r7, lr}
 8029926:	b084      	sub	sp, #16
 8029928:	af00      	add	r7, sp, #0
 802992a:	6078      	str	r0, [r7, #4]
 802992c:	460b      	mov	r3, r1
 802992e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8029930:	78fb      	ldrb	r3, [r7, #3]
 8029932:	f003 020f 	and.w	r2, r3, #15
 8029936:	687b      	ldr	r3, [r7, #4]
 8029938:	685b      	ldr	r3, [r3, #4]
 802993a:	429a      	cmp	r2, r3
 802993c:	d901      	bls.n	8029942 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 802993e:	2301      	movs	r3, #1
 8029940:	e050      	b.n	80299e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029946:	2b00      	cmp	r3, #0
 8029948:	da0f      	bge.n	802996a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802994a:	78fb      	ldrb	r3, [r7, #3]
 802994c:	f003 020f 	and.w	r2, r3, #15
 8029950:	4613      	mov	r3, r2
 8029952:	00db      	lsls	r3, r3, #3
 8029954:	4413      	add	r3, r2
 8029956:	009b      	lsls	r3, r3, #2
 8029958:	3338      	adds	r3, #56	; 0x38
 802995a:	687a      	ldr	r2, [r7, #4]
 802995c:	4413      	add	r3, r2
 802995e:	3304      	adds	r3, #4
 8029960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	2201      	movs	r2, #1
 8029966:	705a      	strb	r2, [r3, #1]
 8029968:	e00d      	b.n	8029986 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 802996a:	78fa      	ldrb	r2, [r7, #3]
 802996c:	4613      	mov	r3, r2
 802996e:	00db      	lsls	r3, r3, #3
 8029970:	4413      	add	r3, r2
 8029972:	009b      	lsls	r3, r3, #2
 8029974:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029978:	687a      	ldr	r2, [r7, #4]
 802997a:	4413      	add	r3, r2
 802997c:	3304      	adds	r3, #4
 802997e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029980:	68fb      	ldr	r3, [r7, #12]
 8029982:	2200      	movs	r2, #0
 8029984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	2201      	movs	r2, #1
 802998a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 802998c:	78fb      	ldrb	r3, [r7, #3]
 802998e:	f003 030f 	and.w	r3, r3, #15
 8029992:	b2da      	uxtb	r2, r3
 8029994:	68fb      	ldr	r3, [r7, #12]
 8029996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029998:	687b      	ldr	r3, [r7, #4]
 802999a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802999e:	2b01      	cmp	r3, #1
 80299a0:	d101      	bne.n	80299a6 <HAL_PCD_EP_SetStall+0x82>
 80299a2:	2302      	movs	r3, #2
 80299a4:	e01e      	b.n	80299e4 <HAL_PCD_EP_SetStall+0xc0>
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	2201      	movs	r2, #1
 80299aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	681b      	ldr	r3, [r3, #0]
 80299b2:	68f9      	ldr	r1, [r7, #12]
 80299b4:	4618      	mov	r0, r3
 80299b6:	f004 fbe7 	bl	802e188 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80299ba:	78fb      	ldrb	r3, [r7, #3]
 80299bc:	f003 030f 	and.w	r3, r3, #15
 80299c0:	2b00      	cmp	r3, #0
 80299c2:	d10a      	bne.n	80299da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80299c4:	687b      	ldr	r3, [r7, #4]
 80299c6:	6818      	ldr	r0, [r3, #0]
 80299c8:	687b      	ldr	r3, [r7, #4]
 80299ca:	691b      	ldr	r3, [r3, #16]
 80299cc:	b2d9      	uxtb	r1, r3
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80299d4:	461a      	mov	r2, r3
 80299d6:	f004 fdd7 	bl	802e588 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80299da:	687b      	ldr	r3, [r7, #4]
 80299dc:	2200      	movs	r2, #0
 80299de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80299e2:	2300      	movs	r3, #0
}
 80299e4:	4618      	mov	r0, r3
 80299e6:	3710      	adds	r7, #16
 80299e8:	46bd      	mov	sp, r7
 80299ea:	bd80      	pop	{r7, pc}

080299ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80299ec:	b580      	push	{r7, lr}
 80299ee:	b084      	sub	sp, #16
 80299f0:	af00      	add	r7, sp, #0
 80299f2:	6078      	str	r0, [r7, #4]
 80299f4:	460b      	mov	r3, r1
 80299f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80299f8:	78fb      	ldrb	r3, [r7, #3]
 80299fa:	f003 020f 	and.w	r2, r3, #15
 80299fe:	687b      	ldr	r3, [r7, #4]
 8029a00:	685b      	ldr	r3, [r3, #4]
 8029a02:	429a      	cmp	r2, r3
 8029a04:	d901      	bls.n	8029a0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8029a06:	2301      	movs	r3, #1
 8029a08:	e042      	b.n	8029a90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029a0e:	2b00      	cmp	r3, #0
 8029a10:	da0f      	bge.n	8029a32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029a12:	78fb      	ldrb	r3, [r7, #3]
 8029a14:	f003 020f 	and.w	r2, r3, #15
 8029a18:	4613      	mov	r3, r2
 8029a1a:	00db      	lsls	r3, r3, #3
 8029a1c:	4413      	add	r3, r2
 8029a1e:	009b      	lsls	r3, r3, #2
 8029a20:	3338      	adds	r3, #56	; 0x38
 8029a22:	687a      	ldr	r2, [r7, #4]
 8029a24:	4413      	add	r3, r2
 8029a26:	3304      	adds	r3, #4
 8029a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029a2a:	68fb      	ldr	r3, [r7, #12]
 8029a2c:	2201      	movs	r2, #1
 8029a2e:	705a      	strb	r2, [r3, #1]
 8029a30:	e00f      	b.n	8029a52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029a32:	78fb      	ldrb	r3, [r7, #3]
 8029a34:	f003 020f 	and.w	r2, r3, #15
 8029a38:	4613      	mov	r3, r2
 8029a3a:	00db      	lsls	r3, r3, #3
 8029a3c:	4413      	add	r3, r2
 8029a3e:	009b      	lsls	r3, r3, #2
 8029a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029a44:	687a      	ldr	r2, [r7, #4]
 8029a46:	4413      	add	r3, r2
 8029a48:	3304      	adds	r3, #4
 8029a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029a4c:	68fb      	ldr	r3, [r7, #12]
 8029a4e:	2200      	movs	r2, #0
 8029a50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8029a52:	68fb      	ldr	r3, [r7, #12]
 8029a54:	2200      	movs	r2, #0
 8029a56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029a58:	78fb      	ldrb	r3, [r7, #3]
 8029a5a:	f003 030f 	and.w	r3, r3, #15
 8029a5e:	b2da      	uxtb	r2, r3
 8029a60:	68fb      	ldr	r3, [r7, #12]
 8029a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029a64:	687b      	ldr	r3, [r7, #4]
 8029a66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029a6a:	2b01      	cmp	r3, #1
 8029a6c:	d101      	bne.n	8029a72 <HAL_PCD_EP_ClrStall+0x86>
 8029a6e:	2302      	movs	r3, #2
 8029a70:	e00e      	b.n	8029a90 <HAL_PCD_EP_ClrStall+0xa4>
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	2201      	movs	r2, #1
 8029a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	681b      	ldr	r3, [r3, #0]
 8029a7e:	68f9      	ldr	r1, [r7, #12]
 8029a80:	4618      	mov	r0, r3
 8029a82:	f004 fbef 	bl	802e264 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	2200      	movs	r2, #0
 8029a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029a8e:	2300      	movs	r3, #0
}
 8029a90:	4618      	mov	r0, r3
 8029a92:	3710      	adds	r7, #16
 8029a94:	46bd      	mov	sp, r7
 8029a96:	bd80      	pop	{r7, pc}

08029a98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029a98:	b580      	push	{r7, lr}
 8029a9a:	b084      	sub	sp, #16
 8029a9c:	af00      	add	r7, sp, #0
 8029a9e:	6078      	str	r0, [r7, #4]
 8029aa0:	460b      	mov	r3, r1
 8029aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8029aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029aa8:	2b00      	cmp	r3, #0
 8029aaa:	da0c      	bge.n	8029ac6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029aac:	78fb      	ldrb	r3, [r7, #3]
 8029aae:	f003 020f 	and.w	r2, r3, #15
 8029ab2:	4613      	mov	r3, r2
 8029ab4:	00db      	lsls	r3, r3, #3
 8029ab6:	4413      	add	r3, r2
 8029ab8:	009b      	lsls	r3, r3, #2
 8029aba:	3338      	adds	r3, #56	; 0x38
 8029abc:	687a      	ldr	r2, [r7, #4]
 8029abe:	4413      	add	r3, r2
 8029ac0:	3304      	adds	r3, #4
 8029ac2:	60fb      	str	r3, [r7, #12]
 8029ac4:	e00c      	b.n	8029ae0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029ac6:	78fb      	ldrb	r3, [r7, #3]
 8029ac8:	f003 020f 	and.w	r2, r3, #15
 8029acc:	4613      	mov	r3, r2
 8029ace:	00db      	lsls	r3, r3, #3
 8029ad0:	4413      	add	r3, r2
 8029ad2:	009b      	lsls	r3, r3, #2
 8029ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029ad8:	687a      	ldr	r2, [r7, #4]
 8029ada:	4413      	add	r3, r2
 8029adc:	3304      	adds	r3, #4
 8029ade:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8029ae0:	687b      	ldr	r3, [r7, #4]
 8029ae2:	681b      	ldr	r3, [r3, #0]
 8029ae4:	68f9      	ldr	r1, [r7, #12]
 8029ae6:	4618      	mov	r0, r3
 8029ae8:	f004 fa0e 	bl	802df08 <USB_EPStopXfer>
 8029aec:	4603      	mov	r3, r0
 8029aee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8029af0:	7afb      	ldrb	r3, [r7, #11]
}
 8029af2:	4618      	mov	r0, r3
 8029af4:	3710      	adds	r7, #16
 8029af6:	46bd      	mov	sp, r7
 8029af8:	bd80      	pop	{r7, pc}

08029afa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029afa:	b580      	push	{r7, lr}
 8029afc:	b08a      	sub	sp, #40	; 0x28
 8029afe:	af02      	add	r7, sp, #8
 8029b00:	6078      	str	r0, [r7, #4]
 8029b02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029b04:	687b      	ldr	r3, [r7, #4]
 8029b06:	681b      	ldr	r3, [r3, #0]
 8029b08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029b0a:	697b      	ldr	r3, [r7, #20]
 8029b0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8029b0e:	683a      	ldr	r2, [r7, #0]
 8029b10:	4613      	mov	r3, r2
 8029b12:	00db      	lsls	r3, r3, #3
 8029b14:	4413      	add	r3, r2
 8029b16:	009b      	lsls	r3, r3, #2
 8029b18:	3338      	adds	r3, #56	; 0x38
 8029b1a:	687a      	ldr	r2, [r7, #4]
 8029b1c:	4413      	add	r3, r2
 8029b1e:	3304      	adds	r3, #4
 8029b20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8029b22:	68fb      	ldr	r3, [r7, #12]
 8029b24:	6a1a      	ldr	r2, [r3, #32]
 8029b26:	68fb      	ldr	r3, [r7, #12]
 8029b28:	699b      	ldr	r3, [r3, #24]
 8029b2a:	429a      	cmp	r2, r3
 8029b2c:	d901      	bls.n	8029b32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8029b2e:	2301      	movs	r3, #1
 8029b30:	e06c      	b.n	8029c0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	699a      	ldr	r2, [r3, #24]
 8029b36:	68fb      	ldr	r3, [r7, #12]
 8029b38:	6a1b      	ldr	r3, [r3, #32]
 8029b3a:	1ad3      	subs	r3, r2, r3
 8029b3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8029b3e:	68fb      	ldr	r3, [r7, #12]
 8029b40:	68db      	ldr	r3, [r3, #12]
 8029b42:	69fa      	ldr	r2, [r7, #28]
 8029b44:	429a      	cmp	r2, r3
 8029b46:	d902      	bls.n	8029b4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8029b48:	68fb      	ldr	r3, [r7, #12]
 8029b4a:	68db      	ldr	r3, [r3, #12]
 8029b4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8029b4e:	69fb      	ldr	r3, [r7, #28]
 8029b50:	3303      	adds	r3, #3
 8029b52:	089b      	lsrs	r3, r3, #2
 8029b54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029b56:	e02b      	b.n	8029bb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8029b58:	68fb      	ldr	r3, [r7, #12]
 8029b5a:	699a      	ldr	r2, [r3, #24]
 8029b5c:	68fb      	ldr	r3, [r7, #12]
 8029b5e:	6a1b      	ldr	r3, [r3, #32]
 8029b60:	1ad3      	subs	r3, r2, r3
 8029b62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8029b64:	68fb      	ldr	r3, [r7, #12]
 8029b66:	68db      	ldr	r3, [r3, #12]
 8029b68:	69fa      	ldr	r2, [r7, #28]
 8029b6a:	429a      	cmp	r2, r3
 8029b6c:	d902      	bls.n	8029b74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8029b6e:	68fb      	ldr	r3, [r7, #12]
 8029b70:	68db      	ldr	r3, [r3, #12]
 8029b72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8029b74:	69fb      	ldr	r3, [r7, #28]
 8029b76:	3303      	adds	r3, #3
 8029b78:	089b      	lsrs	r3, r3, #2
 8029b7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029b7c:	68fb      	ldr	r3, [r7, #12]
 8029b7e:	6919      	ldr	r1, [r3, #16]
 8029b80:	683b      	ldr	r3, [r7, #0]
 8029b82:	b2da      	uxtb	r2, r3
 8029b84:	69fb      	ldr	r3, [r7, #28]
 8029b86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029b8c:	b2db      	uxtb	r3, r3
 8029b8e:	9300      	str	r3, [sp, #0]
 8029b90:	4603      	mov	r3, r0
 8029b92:	6978      	ldr	r0, [r7, #20]
 8029b94:	f004 fa62 	bl	802e05c <USB_WritePacket>

    ep->xfer_buff  += len;
 8029b98:	68fb      	ldr	r3, [r7, #12]
 8029b9a:	691a      	ldr	r2, [r3, #16]
 8029b9c:	69fb      	ldr	r3, [r7, #28]
 8029b9e:	441a      	add	r2, r3
 8029ba0:	68fb      	ldr	r3, [r7, #12]
 8029ba2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8029ba4:	68fb      	ldr	r3, [r7, #12]
 8029ba6:	6a1a      	ldr	r2, [r3, #32]
 8029ba8:	69fb      	ldr	r3, [r7, #28]
 8029baa:	441a      	add	r2, r3
 8029bac:	68fb      	ldr	r3, [r7, #12]
 8029bae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029bb0:	683b      	ldr	r3, [r7, #0]
 8029bb2:	015a      	lsls	r2, r3, #5
 8029bb4:	693b      	ldr	r3, [r7, #16]
 8029bb6:	4413      	add	r3, r2
 8029bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029bbc:	699b      	ldr	r3, [r3, #24]
 8029bbe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029bc0:	69ba      	ldr	r2, [r7, #24]
 8029bc2:	429a      	cmp	r2, r3
 8029bc4:	d809      	bhi.n	8029bda <PCD_WriteEmptyTxFifo+0xe0>
 8029bc6:	68fb      	ldr	r3, [r7, #12]
 8029bc8:	6a1a      	ldr	r2, [r3, #32]
 8029bca:	68fb      	ldr	r3, [r7, #12]
 8029bcc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029bce:	429a      	cmp	r2, r3
 8029bd0:	d203      	bcs.n	8029bda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029bd2:	68fb      	ldr	r3, [r7, #12]
 8029bd4:	699b      	ldr	r3, [r3, #24]
 8029bd6:	2b00      	cmp	r3, #0
 8029bd8:	d1be      	bne.n	8029b58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8029bda:	68fb      	ldr	r3, [r7, #12]
 8029bdc:	699a      	ldr	r2, [r3, #24]
 8029bde:	68fb      	ldr	r3, [r7, #12]
 8029be0:	6a1b      	ldr	r3, [r3, #32]
 8029be2:	429a      	cmp	r2, r3
 8029be4:	d811      	bhi.n	8029c0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8029be6:	683b      	ldr	r3, [r7, #0]
 8029be8:	f003 030f 	and.w	r3, r3, #15
 8029bec:	2201      	movs	r2, #1
 8029bee:	fa02 f303 	lsl.w	r3, r2, r3
 8029bf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8029bf4:	693b      	ldr	r3, [r7, #16]
 8029bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029bfc:	68bb      	ldr	r3, [r7, #8]
 8029bfe:	43db      	mvns	r3, r3
 8029c00:	6939      	ldr	r1, [r7, #16]
 8029c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8029c06:	4013      	ands	r3, r2
 8029c08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8029c0a:	2300      	movs	r3, #0
}
 8029c0c:	4618      	mov	r0, r3
 8029c0e:	3720      	adds	r7, #32
 8029c10:	46bd      	mov	sp, r7
 8029c12:	bd80      	pop	{r7, pc}

08029c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029c14:	b580      	push	{r7, lr}
 8029c16:	b088      	sub	sp, #32
 8029c18:	af00      	add	r7, sp, #0
 8029c1a:	6078      	str	r0, [r7, #4]
 8029c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029c1e:	687b      	ldr	r3, [r7, #4]
 8029c20:	681b      	ldr	r3, [r3, #0]
 8029c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029c24:	69fb      	ldr	r3, [r7, #28]
 8029c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029c28:	69fb      	ldr	r3, [r7, #28]
 8029c2a:	333c      	adds	r3, #60	; 0x3c
 8029c2c:	3304      	adds	r3, #4
 8029c2e:	681b      	ldr	r3, [r3, #0]
 8029c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029c32:	683b      	ldr	r3, [r7, #0]
 8029c34:	015a      	lsls	r2, r3, #5
 8029c36:	69bb      	ldr	r3, [r7, #24]
 8029c38:	4413      	add	r3, r2
 8029c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c3e:	689b      	ldr	r3, [r3, #8]
 8029c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8029c42:	687b      	ldr	r3, [r7, #4]
 8029c44:	691b      	ldr	r3, [r3, #16]
 8029c46:	2b01      	cmp	r3, #1
 8029c48:	d17b      	bne.n	8029d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8029c4a:	693b      	ldr	r3, [r7, #16]
 8029c4c:	f003 0308 	and.w	r3, r3, #8
 8029c50:	2b00      	cmp	r3, #0
 8029c52:	d015      	beq.n	8029c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029c54:	697b      	ldr	r3, [r7, #20]
 8029c56:	4a61      	ldr	r2, [pc, #388]	; (8029ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029c58:	4293      	cmp	r3, r2
 8029c5a:	f240 80b9 	bls.w	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029c5e:	693b      	ldr	r3, [r7, #16]
 8029c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029c64:	2b00      	cmp	r3, #0
 8029c66:	f000 80b3 	beq.w	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029c6a:	683b      	ldr	r3, [r7, #0]
 8029c6c:	015a      	lsls	r2, r3, #5
 8029c6e:	69bb      	ldr	r3, [r7, #24]
 8029c70:	4413      	add	r3, r2
 8029c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c76:	461a      	mov	r2, r3
 8029c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029c7c:	6093      	str	r3, [r2, #8]
 8029c7e:	e0a7      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8029c80:	693b      	ldr	r3, [r7, #16]
 8029c82:	f003 0320 	and.w	r3, r3, #32
 8029c86:	2b00      	cmp	r3, #0
 8029c88:	d009      	beq.n	8029c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029c8a:	683b      	ldr	r3, [r7, #0]
 8029c8c:	015a      	lsls	r2, r3, #5
 8029c8e:	69bb      	ldr	r3, [r7, #24]
 8029c90:	4413      	add	r3, r2
 8029c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c96:	461a      	mov	r2, r3
 8029c98:	2320      	movs	r3, #32
 8029c9a:	6093      	str	r3, [r2, #8]
 8029c9c:	e098      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8029c9e:	693b      	ldr	r3, [r7, #16]
 8029ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8029ca4:	2b00      	cmp	r3, #0
 8029ca6:	f040 8093 	bne.w	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029caa:	697b      	ldr	r3, [r7, #20]
 8029cac:	4a4b      	ldr	r2, [pc, #300]	; (8029ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029cae:	4293      	cmp	r3, r2
 8029cb0:	d90f      	bls.n	8029cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029cb2:	693b      	ldr	r3, [r7, #16]
 8029cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029cb8:	2b00      	cmp	r3, #0
 8029cba:	d00a      	beq.n	8029cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029cbc:	683b      	ldr	r3, [r7, #0]
 8029cbe:	015a      	lsls	r2, r3, #5
 8029cc0:	69bb      	ldr	r3, [r7, #24]
 8029cc2:	4413      	add	r3, r2
 8029cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cc8:	461a      	mov	r2, r3
 8029cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029cce:	6093      	str	r3, [r2, #8]
 8029cd0:	e07e      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8029cd2:	683a      	ldr	r2, [r7, #0]
 8029cd4:	4613      	mov	r3, r2
 8029cd6:	00db      	lsls	r3, r3, #3
 8029cd8:	4413      	add	r3, r2
 8029cda:	009b      	lsls	r3, r3, #2
 8029cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029ce0:	687a      	ldr	r2, [r7, #4]
 8029ce2:	4413      	add	r3, r2
 8029ce4:	3304      	adds	r3, #4
 8029ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8029ce8:	68fb      	ldr	r3, [r7, #12]
 8029cea:	69da      	ldr	r2, [r3, #28]
 8029cec:	683b      	ldr	r3, [r7, #0]
 8029cee:	0159      	lsls	r1, r3, #5
 8029cf0:	69bb      	ldr	r3, [r7, #24]
 8029cf2:	440b      	add	r3, r1
 8029cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cf8:	691b      	ldr	r3, [r3, #16]
 8029cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8029cfe:	1ad2      	subs	r2, r2, r3
 8029d00:	68fb      	ldr	r3, [r7, #12]
 8029d02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8029d04:	683b      	ldr	r3, [r7, #0]
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	d114      	bne.n	8029d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8029d0a:	68fb      	ldr	r3, [r7, #12]
 8029d0c:	699b      	ldr	r3, [r3, #24]
 8029d0e:	2b00      	cmp	r3, #0
 8029d10:	d109      	bne.n	8029d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	6818      	ldr	r0, [r3, #0]
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029d1c:	461a      	mov	r2, r3
 8029d1e:	2101      	movs	r1, #1
 8029d20:	f004 fc32 	bl	802e588 <USB_EP0_OutStart>
 8029d24:	e006      	b.n	8029d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8029d26:	68fb      	ldr	r3, [r7, #12]
 8029d28:	691a      	ldr	r2, [r3, #16]
 8029d2a:	68fb      	ldr	r3, [r7, #12]
 8029d2c:	6a1b      	ldr	r3, [r3, #32]
 8029d2e:	441a      	add	r2, r3
 8029d30:	68fb      	ldr	r3, [r7, #12]
 8029d32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029d34:	683b      	ldr	r3, [r7, #0]
 8029d36:	b2db      	uxtb	r3, r3
 8029d38:	4619      	mov	r1, r3
 8029d3a:	6878      	ldr	r0, [r7, #4]
 8029d3c:	f007 f900 	bl	8030f40 <HAL_PCD_DataOutStageCallback>
 8029d40:	e046      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8029d42:	697b      	ldr	r3, [r7, #20]
 8029d44:	4a26      	ldr	r2, [pc, #152]	; (8029de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8029d46:	4293      	cmp	r3, r2
 8029d48:	d124      	bne.n	8029d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8029d4a:	693b      	ldr	r3, [r7, #16]
 8029d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8029d50:	2b00      	cmp	r3, #0
 8029d52:	d00a      	beq.n	8029d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029d54:	683b      	ldr	r3, [r7, #0]
 8029d56:	015a      	lsls	r2, r3, #5
 8029d58:	69bb      	ldr	r3, [r7, #24]
 8029d5a:	4413      	add	r3, r2
 8029d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d60:	461a      	mov	r2, r3
 8029d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029d66:	6093      	str	r3, [r2, #8]
 8029d68:	e032      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8029d6a:	693b      	ldr	r3, [r7, #16]
 8029d6c:	f003 0320 	and.w	r3, r3, #32
 8029d70:	2b00      	cmp	r3, #0
 8029d72:	d008      	beq.n	8029d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029d74:	683b      	ldr	r3, [r7, #0]
 8029d76:	015a      	lsls	r2, r3, #5
 8029d78:	69bb      	ldr	r3, [r7, #24]
 8029d7a:	4413      	add	r3, r2
 8029d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d80:	461a      	mov	r2, r3
 8029d82:	2320      	movs	r3, #32
 8029d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029d86:	683b      	ldr	r3, [r7, #0]
 8029d88:	b2db      	uxtb	r3, r3
 8029d8a:	4619      	mov	r1, r3
 8029d8c:	6878      	ldr	r0, [r7, #4]
 8029d8e:	f007 f8d7 	bl	8030f40 <HAL_PCD_DataOutStageCallback>
 8029d92:	e01d      	b.n	8029dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8029d94:	683b      	ldr	r3, [r7, #0]
 8029d96:	2b00      	cmp	r3, #0
 8029d98:	d114      	bne.n	8029dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8029d9a:	6879      	ldr	r1, [r7, #4]
 8029d9c:	683a      	ldr	r2, [r7, #0]
 8029d9e:	4613      	mov	r3, r2
 8029da0:	00db      	lsls	r3, r3, #3
 8029da2:	4413      	add	r3, r2
 8029da4:	009b      	lsls	r3, r3, #2
 8029da6:	440b      	add	r3, r1
 8029da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8029dac:	681b      	ldr	r3, [r3, #0]
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	d108      	bne.n	8029dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	6818      	ldr	r0, [r3, #0]
 8029db6:	687b      	ldr	r3, [r7, #4]
 8029db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029dbc:	461a      	mov	r2, r3
 8029dbe:	2100      	movs	r1, #0
 8029dc0:	f004 fbe2 	bl	802e588 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029dc4:	683b      	ldr	r3, [r7, #0]
 8029dc6:	b2db      	uxtb	r3, r3
 8029dc8:	4619      	mov	r1, r3
 8029dca:	6878      	ldr	r0, [r7, #4]
 8029dcc:	f007 f8b8 	bl	8030f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8029dd0:	2300      	movs	r3, #0
}
 8029dd2:	4618      	mov	r0, r3
 8029dd4:	3720      	adds	r7, #32
 8029dd6:	46bd      	mov	sp, r7
 8029dd8:	bd80      	pop	{r7, pc}
 8029dda:	bf00      	nop
 8029ddc:	4f54300a 	.word	0x4f54300a
 8029de0:	4f54310a 	.word	0x4f54310a

08029de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029de4:	b580      	push	{r7, lr}
 8029de6:	b086      	sub	sp, #24
 8029de8:	af00      	add	r7, sp, #0
 8029dea:	6078      	str	r0, [r7, #4]
 8029dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029dee:	687b      	ldr	r3, [r7, #4]
 8029df0:	681b      	ldr	r3, [r3, #0]
 8029df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029df4:	697b      	ldr	r3, [r7, #20]
 8029df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029df8:	697b      	ldr	r3, [r7, #20]
 8029dfa:	333c      	adds	r3, #60	; 0x3c
 8029dfc:	3304      	adds	r3, #4
 8029dfe:	681b      	ldr	r3, [r3, #0]
 8029e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029e02:	683b      	ldr	r3, [r7, #0]
 8029e04:	015a      	lsls	r2, r3, #5
 8029e06:	693b      	ldr	r3, [r7, #16]
 8029e08:	4413      	add	r3, r2
 8029e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029e0e:	689b      	ldr	r3, [r3, #8]
 8029e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029e12:	68fb      	ldr	r3, [r7, #12]
 8029e14:	4a15      	ldr	r2, [pc, #84]	; (8029e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8029e16:	4293      	cmp	r3, r2
 8029e18:	d90e      	bls.n	8029e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029e1a:	68bb      	ldr	r3, [r7, #8]
 8029e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029e20:	2b00      	cmp	r3, #0
 8029e22:	d009      	beq.n	8029e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029e24:	683b      	ldr	r3, [r7, #0]
 8029e26:	015a      	lsls	r2, r3, #5
 8029e28:	693b      	ldr	r3, [r7, #16]
 8029e2a:	4413      	add	r3, r2
 8029e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029e30:	461a      	mov	r2, r3
 8029e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8029e38:	6878      	ldr	r0, [r7, #4]
 8029e3a:	f007 f86f 	bl	8030f1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8029e3e:	68fb      	ldr	r3, [r7, #12]
 8029e40:	4a0a      	ldr	r2, [pc, #40]	; (8029e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8029e42:	4293      	cmp	r3, r2
 8029e44:	d90c      	bls.n	8029e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	691b      	ldr	r3, [r3, #16]
 8029e4a:	2b01      	cmp	r3, #1
 8029e4c:	d108      	bne.n	8029e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029e4e:	687b      	ldr	r3, [r7, #4]
 8029e50:	6818      	ldr	r0, [r3, #0]
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029e58:	461a      	mov	r2, r3
 8029e5a:	2101      	movs	r1, #1
 8029e5c:	f004 fb94 	bl	802e588 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8029e60:	2300      	movs	r3, #0
}
 8029e62:	4618      	mov	r0, r3
 8029e64:	3718      	adds	r7, #24
 8029e66:	46bd      	mov	sp, r7
 8029e68:	bd80      	pop	{r7, pc}
 8029e6a:	bf00      	nop
 8029e6c:	4f54300a 	.word	0x4f54300a

08029e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8029e70:	b480      	push	{r7}
 8029e72:	b085      	sub	sp, #20
 8029e74:	af00      	add	r7, sp, #0
 8029e76:	6078      	str	r0, [r7, #4]
 8029e78:	460b      	mov	r3, r1
 8029e7a:	70fb      	strb	r3, [r7, #3]
 8029e7c:	4613      	mov	r3, r2
 8029e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8029e80:	687b      	ldr	r3, [r7, #4]
 8029e82:	681b      	ldr	r3, [r3, #0]
 8029e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8029e88:	78fb      	ldrb	r3, [r7, #3]
 8029e8a:	2b00      	cmp	r3, #0
 8029e8c:	d107      	bne.n	8029e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8029e8e:	883b      	ldrh	r3, [r7, #0]
 8029e90:	0419      	lsls	r1, r3, #16
 8029e92:	687b      	ldr	r3, [r7, #4]
 8029e94:	681b      	ldr	r3, [r3, #0]
 8029e96:	68ba      	ldr	r2, [r7, #8]
 8029e98:	430a      	orrs	r2, r1
 8029e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8029e9c:	e028      	b.n	8029ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	681b      	ldr	r3, [r3, #0]
 8029ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ea4:	0c1b      	lsrs	r3, r3, #16
 8029ea6:	68ba      	ldr	r2, [r7, #8]
 8029ea8:	4413      	add	r3, r2
 8029eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029eac:	2300      	movs	r3, #0
 8029eae:	73fb      	strb	r3, [r7, #15]
 8029eb0:	e00d      	b.n	8029ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	681a      	ldr	r2, [r3, #0]
 8029eb6:	7bfb      	ldrb	r3, [r7, #15]
 8029eb8:	3340      	adds	r3, #64	; 0x40
 8029eba:	009b      	lsls	r3, r3, #2
 8029ebc:	4413      	add	r3, r2
 8029ebe:	685b      	ldr	r3, [r3, #4]
 8029ec0:	0c1b      	lsrs	r3, r3, #16
 8029ec2:	68ba      	ldr	r2, [r7, #8]
 8029ec4:	4413      	add	r3, r2
 8029ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029ec8:	7bfb      	ldrb	r3, [r7, #15]
 8029eca:	3301      	adds	r3, #1
 8029ecc:	73fb      	strb	r3, [r7, #15]
 8029ece:	7bfa      	ldrb	r2, [r7, #15]
 8029ed0:	78fb      	ldrb	r3, [r7, #3]
 8029ed2:	3b01      	subs	r3, #1
 8029ed4:	429a      	cmp	r2, r3
 8029ed6:	d3ec      	bcc.n	8029eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8029ed8:	883b      	ldrh	r3, [r7, #0]
 8029eda:	0418      	lsls	r0, r3, #16
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	6819      	ldr	r1, [r3, #0]
 8029ee0:	78fb      	ldrb	r3, [r7, #3]
 8029ee2:	3b01      	subs	r3, #1
 8029ee4:	68ba      	ldr	r2, [r7, #8]
 8029ee6:	4302      	orrs	r2, r0
 8029ee8:	3340      	adds	r3, #64	; 0x40
 8029eea:	009b      	lsls	r3, r3, #2
 8029eec:	440b      	add	r3, r1
 8029eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8029ef0:	2300      	movs	r3, #0
}
 8029ef2:	4618      	mov	r0, r3
 8029ef4:	3714      	adds	r7, #20
 8029ef6:	46bd      	mov	sp, r7
 8029ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029efc:	4770      	bx	lr

08029efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8029efe:	b480      	push	{r7}
 8029f00:	b083      	sub	sp, #12
 8029f02:	af00      	add	r7, sp, #0
 8029f04:	6078      	str	r0, [r7, #4]
 8029f06:	460b      	mov	r3, r1
 8029f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8029f0a:	687b      	ldr	r3, [r7, #4]
 8029f0c:	681b      	ldr	r3, [r3, #0]
 8029f0e:	887a      	ldrh	r2, [r7, #2]
 8029f10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8029f12:	2300      	movs	r3, #0
}
 8029f14:	4618      	mov	r0, r3
 8029f16:	370c      	adds	r7, #12
 8029f18:	46bd      	mov	sp, r7
 8029f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f1e:	4770      	bx	lr

08029f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8029f20:	b480      	push	{r7}
 8029f22:	b083      	sub	sp, #12
 8029f24:	af00      	add	r7, sp, #0
 8029f26:	6078      	str	r0, [r7, #4]
 8029f28:	460b      	mov	r3, r1
 8029f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8029f2c:	bf00      	nop
 8029f2e:	370c      	adds	r7, #12
 8029f30:	46bd      	mov	sp, r7
 8029f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f36:	4770      	bx	lr

08029f38 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8029f38:	b580      	push	{r7, lr}
 8029f3a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8029f3c:	4b06      	ldr	r3, [pc, #24]	; (8029f58 <HAL_PWR_PVD_IRQHandler+0x20>)
 8029f3e:	695b      	ldr	r3, [r3, #20]
 8029f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029f44:	2b00      	cmp	r3, #0
 8029f46:	d005      	beq.n	8029f54 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8029f48:	f000 f808 	bl	8029f5c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8029f4c:	4b02      	ldr	r3, [pc, #8]	; (8029f58 <HAL_PWR_PVD_IRQHandler+0x20>)
 8029f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029f52:	615a      	str	r2, [r3, #20]
  }
}
 8029f54:	bf00      	nop
 8029f56:	bd80      	pop	{r7, pc}
 8029f58:	40013c00 	.word	0x40013c00

08029f5c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8029f5c:	b480      	push	{r7}
 8029f5e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8029f60:	bf00      	nop
 8029f62:	46bd      	mov	sp, r7
 8029f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f68:	4770      	bx	lr
	...

08029f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8029f6c:	b580      	push	{r7, lr}
 8029f6e:	b086      	sub	sp, #24
 8029f70:	af00      	add	r7, sp, #0
 8029f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8029f74:	687b      	ldr	r3, [r7, #4]
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d101      	bne.n	8029f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8029f7a:	2301      	movs	r3, #1
 8029f7c:	e267      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8029f7e:	687b      	ldr	r3, [r7, #4]
 8029f80:	681b      	ldr	r3, [r3, #0]
 8029f82:	f003 0301 	and.w	r3, r3, #1
 8029f86:	2b00      	cmp	r3, #0
 8029f88:	d075      	beq.n	802a076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029f8a:	4b88      	ldr	r3, [pc, #544]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029f8c:	689b      	ldr	r3, [r3, #8]
 8029f8e:	f003 030c 	and.w	r3, r3, #12
 8029f92:	2b04      	cmp	r3, #4
 8029f94:	d00c      	beq.n	8029fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029f96:	4b85      	ldr	r3, [pc, #532]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029f98:	689b      	ldr	r3, [r3, #8]
 8029f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029f9e:	2b08      	cmp	r3, #8
 8029fa0:	d112      	bne.n	8029fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029fa2:	4b82      	ldr	r3, [pc, #520]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029fa4:	685b      	ldr	r3, [r3, #4]
 8029fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8029fae:	d10b      	bne.n	8029fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029fb0:	4b7e      	ldr	r3, [pc, #504]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029fb2:	681b      	ldr	r3, [r3, #0]
 8029fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029fb8:	2b00      	cmp	r3, #0
 8029fba:	d05b      	beq.n	802a074 <HAL_RCC_OscConfig+0x108>
 8029fbc:	687b      	ldr	r3, [r7, #4]
 8029fbe:	685b      	ldr	r3, [r3, #4]
 8029fc0:	2b00      	cmp	r3, #0
 8029fc2:	d157      	bne.n	802a074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8029fc4:	2301      	movs	r3, #1
 8029fc6:	e242      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8029fc8:	687b      	ldr	r3, [r7, #4]
 8029fca:	685b      	ldr	r3, [r3, #4]
 8029fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029fd0:	d106      	bne.n	8029fe0 <HAL_RCC_OscConfig+0x74>
 8029fd2:	4b76      	ldr	r3, [pc, #472]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029fd4:	681b      	ldr	r3, [r3, #0]
 8029fd6:	4a75      	ldr	r2, [pc, #468]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029fdc:	6013      	str	r3, [r2, #0]
 8029fde:	e01d      	b.n	802a01c <HAL_RCC_OscConfig+0xb0>
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	685b      	ldr	r3, [r3, #4]
 8029fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8029fe8:	d10c      	bne.n	802a004 <HAL_RCC_OscConfig+0x98>
 8029fea:	4b70      	ldr	r3, [pc, #448]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029fec:	681b      	ldr	r3, [r3, #0]
 8029fee:	4a6f      	ldr	r2, [pc, #444]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8029ff4:	6013      	str	r3, [r2, #0]
 8029ff6:	4b6d      	ldr	r3, [pc, #436]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029ff8:	681b      	ldr	r3, [r3, #0]
 8029ffa:	4a6c      	ldr	r2, [pc, #432]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 8029ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a000:	6013      	str	r3, [r2, #0]
 802a002:	e00b      	b.n	802a01c <HAL_RCC_OscConfig+0xb0>
 802a004:	4b69      	ldr	r3, [pc, #420]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a006:	681b      	ldr	r3, [r3, #0]
 802a008:	4a68      	ldr	r2, [pc, #416]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a00a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a00e:	6013      	str	r3, [r2, #0]
 802a010:	4b66      	ldr	r3, [pc, #408]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a012:	681b      	ldr	r3, [r3, #0]
 802a014:	4a65      	ldr	r2, [pc, #404]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a01a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802a01c:	687b      	ldr	r3, [r7, #4]
 802a01e:	685b      	ldr	r3, [r3, #4]
 802a020:	2b00      	cmp	r3, #0
 802a022:	d013      	beq.n	802a04c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a024:	f7fd fb6c 	bl	8027700 <HAL_GetTick>
 802a028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a02a:	e008      	b.n	802a03e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a02c:	f7fd fb68 	bl	8027700 <HAL_GetTick>
 802a030:	4602      	mov	r2, r0
 802a032:	693b      	ldr	r3, [r7, #16]
 802a034:	1ad3      	subs	r3, r2, r3
 802a036:	2b64      	cmp	r3, #100	; 0x64
 802a038:	d901      	bls.n	802a03e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802a03a:	2303      	movs	r3, #3
 802a03c:	e207      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a03e:	4b5b      	ldr	r3, [pc, #364]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a040:	681b      	ldr	r3, [r3, #0]
 802a042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a046:	2b00      	cmp	r3, #0
 802a048:	d0f0      	beq.n	802a02c <HAL_RCC_OscConfig+0xc0>
 802a04a:	e014      	b.n	802a076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a04c:	f7fd fb58 	bl	8027700 <HAL_GetTick>
 802a050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a052:	e008      	b.n	802a066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a054:	f7fd fb54 	bl	8027700 <HAL_GetTick>
 802a058:	4602      	mov	r2, r0
 802a05a:	693b      	ldr	r3, [r7, #16]
 802a05c:	1ad3      	subs	r3, r2, r3
 802a05e:	2b64      	cmp	r3, #100	; 0x64
 802a060:	d901      	bls.n	802a066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802a062:	2303      	movs	r3, #3
 802a064:	e1f3      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a066:	4b51      	ldr	r3, [pc, #324]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a068:	681b      	ldr	r3, [r3, #0]
 802a06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a06e:	2b00      	cmp	r3, #0
 802a070:	d1f0      	bne.n	802a054 <HAL_RCC_OscConfig+0xe8>
 802a072:	e000      	b.n	802a076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802a076:	687b      	ldr	r3, [r7, #4]
 802a078:	681b      	ldr	r3, [r3, #0]
 802a07a:	f003 0302 	and.w	r3, r3, #2
 802a07e:	2b00      	cmp	r3, #0
 802a080:	d063      	beq.n	802a14a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a082:	4b4a      	ldr	r3, [pc, #296]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a084:	689b      	ldr	r3, [r3, #8]
 802a086:	f003 030c 	and.w	r3, r3, #12
 802a08a:	2b00      	cmp	r3, #0
 802a08c:	d00b      	beq.n	802a0a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a08e:	4b47      	ldr	r3, [pc, #284]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a090:	689b      	ldr	r3, [r3, #8]
 802a092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a096:	2b08      	cmp	r3, #8
 802a098:	d11c      	bne.n	802a0d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a09a:	4b44      	ldr	r3, [pc, #272]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a09c:	685b      	ldr	r3, [r3, #4]
 802a09e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a0a2:	2b00      	cmp	r3, #0
 802a0a4:	d116      	bne.n	802a0d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a0a6:	4b41      	ldr	r3, [pc, #260]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a0a8:	681b      	ldr	r3, [r3, #0]
 802a0aa:	f003 0302 	and.w	r3, r3, #2
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d005      	beq.n	802a0be <HAL_RCC_OscConfig+0x152>
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	68db      	ldr	r3, [r3, #12]
 802a0b6:	2b01      	cmp	r3, #1
 802a0b8:	d001      	beq.n	802a0be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802a0ba:	2301      	movs	r3, #1
 802a0bc:	e1c7      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a0be:	4b3b      	ldr	r3, [pc, #236]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a0c0:	681b      	ldr	r3, [r3, #0]
 802a0c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a0c6:	687b      	ldr	r3, [r7, #4]
 802a0c8:	691b      	ldr	r3, [r3, #16]
 802a0ca:	00db      	lsls	r3, r3, #3
 802a0cc:	4937      	ldr	r1, [pc, #220]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a0ce:	4313      	orrs	r3, r2
 802a0d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a0d2:	e03a      	b.n	802a14a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802a0d4:	687b      	ldr	r3, [r7, #4]
 802a0d6:	68db      	ldr	r3, [r3, #12]
 802a0d8:	2b00      	cmp	r3, #0
 802a0da:	d020      	beq.n	802a11e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802a0dc:	4b34      	ldr	r3, [pc, #208]	; (802a1b0 <HAL_RCC_OscConfig+0x244>)
 802a0de:	2201      	movs	r2, #1
 802a0e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a0e2:	f7fd fb0d 	bl	8027700 <HAL_GetTick>
 802a0e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a0e8:	e008      	b.n	802a0fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a0ea:	f7fd fb09 	bl	8027700 <HAL_GetTick>
 802a0ee:	4602      	mov	r2, r0
 802a0f0:	693b      	ldr	r3, [r7, #16]
 802a0f2:	1ad3      	subs	r3, r2, r3
 802a0f4:	2b02      	cmp	r3, #2
 802a0f6:	d901      	bls.n	802a0fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802a0f8:	2303      	movs	r3, #3
 802a0fa:	e1a8      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a0fc:	4b2b      	ldr	r3, [pc, #172]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a0fe:	681b      	ldr	r3, [r3, #0]
 802a100:	f003 0302 	and.w	r3, r3, #2
 802a104:	2b00      	cmp	r3, #0
 802a106:	d0f0      	beq.n	802a0ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a108:	4b28      	ldr	r3, [pc, #160]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a10a:	681b      	ldr	r3, [r3, #0]
 802a10c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a110:	687b      	ldr	r3, [r7, #4]
 802a112:	691b      	ldr	r3, [r3, #16]
 802a114:	00db      	lsls	r3, r3, #3
 802a116:	4925      	ldr	r1, [pc, #148]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a118:	4313      	orrs	r3, r2
 802a11a:	600b      	str	r3, [r1, #0]
 802a11c:	e015      	b.n	802a14a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a11e:	4b24      	ldr	r3, [pc, #144]	; (802a1b0 <HAL_RCC_OscConfig+0x244>)
 802a120:	2200      	movs	r2, #0
 802a122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a124:	f7fd faec 	bl	8027700 <HAL_GetTick>
 802a128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a12a:	e008      	b.n	802a13e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a12c:	f7fd fae8 	bl	8027700 <HAL_GetTick>
 802a130:	4602      	mov	r2, r0
 802a132:	693b      	ldr	r3, [r7, #16]
 802a134:	1ad3      	subs	r3, r2, r3
 802a136:	2b02      	cmp	r3, #2
 802a138:	d901      	bls.n	802a13e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802a13a:	2303      	movs	r3, #3
 802a13c:	e187      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a13e:	4b1b      	ldr	r3, [pc, #108]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a140:	681b      	ldr	r3, [r3, #0]
 802a142:	f003 0302 	and.w	r3, r3, #2
 802a146:	2b00      	cmp	r3, #0
 802a148:	d1f0      	bne.n	802a12c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a14a:	687b      	ldr	r3, [r7, #4]
 802a14c:	681b      	ldr	r3, [r3, #0]
 802a14e:	f003 0308 	and.w	r3, r3, #8
 802a152:	2b00      	cmp	r3, #0
 802a154:	d036      	beq.n	802a1c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802a156:	687b      	ldr	r3, [r7, #4]
 802a158:	695b      	ldr	r3, [r3, #20]
 802a15a:	2b00      	cmp	r3, #0
 802a15c:	d016      	beq.n	802a18c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a15e:	4b15      	ldr	r3, [pc, #84]	; (802a1b4 <HAL_RCC_OscConfig+0x248>)
 802a160:	2201      	movs	r2, #1
 802a162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a164:	f7fd facc 	bl	8027700 <HAL_GetTick>
 802a168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a16a:	e008      	b.n	802a17e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a16c:	f7fd fac8 	bl	8027700 <HAL_GetTick>
 802a170:	4602      	mov	r2, r0
 802a172:	693b      	ldr	r3, [r7, #16]
 802a174:	1ad3      	subs	r3, r2, r3
 802a176:	2b02      	cmp	r3, #2
 802a178:	d901      	bls.n	802a17e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802a17a:	2303      	movs	r3, #3
 802a17c:	e167      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a17e:	4b0b      	ldr	r3, [pc, #44]	; (802a1ac <HAL_RCC_OscConfig+0x240>)
 802a180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a182:	f003 0302 	and.w	r3, r3, #2
 802a186:	2b00      	cmp	r3, #0
 802a188:	d0f0      	beq.n	802a16c <HAL_RCC_OscConfig+0x200>
 802a18a:	e01b      	b.n	802a1c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a18c:	4b09      	ldr	r3, [pc, #36]	; (802a1b4 <HAL_RCC_OscConfig+0x248>)
 802a18e:	2200      	movs	r2, #0
 802a190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a192:	f7fd fab5 	bl	8027700 <HAL_GetTick>
 802a196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a198:	e00e      	b.n	802a1b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a19a:	f7fd fab1 	bl	8027700 <HAL_GetTick>
 802a19e:	4602      	mov	r2, r0
 802a1a0:	693b      	ldr	r3, [r7, #16]
 802a1a2:	1ad3      	subs	r3, r2, r3
 802a1a4:	2b02      	cmp	r3, #2
 802a1a6:	d907      	bls.n	802a1b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802a1a8:	2303      	movs	r3, #3
 802a1aa:	e150      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
 802a1ac:	40023800 	.word	0x40023800
 802a1b0:	42470000 	.word	0x42470000
 802a1b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a1b8:	4b88      	ldr	r3, [pc, #544]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a1ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a1bc:	f003 0302 	and.w	r3, r3, #2
 802a1c0:	2b00      	cmp	r3, #0
 802a1c2:	d1ea      	bne.n	802a19a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a1c4:	687b      	ldr	r3, [r7, #4]
 802a1c6:	681b      	ldr	r3, [r3, #0]
 802a1c8:	f003 0304 	and.w	r3, r3, #4
 802a1cc:	2b00      	cmp	r3, #0
 802a1ce:	f000 8097 	beq.w	802a300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802a1d2:	2300      	movs	r3, #0
 802a1d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802a1d6:	4b81      	ldr	r3, [pc, #516]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a1da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a1de:	2b00      	cmp	r3, #0
 802a1e0:	d10f      	bne.n	802a202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802a1e2:	2300      	movs	r3, #0
 802a1e4:	60bb      	str	r3, [r7, #8]
 802a1e6:	4b7d      	ldr	r3, [pc, #500]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a1ea:	4a7c      	ldr	r2, [pc, #496]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a1f0:	6413      	str	r3, [r2, #64]	; 0x40
 802a1f2:	4b7a      	ldr	r3, [pc, #488]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a1f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a1fa:	60bb      	str	r3, [r7, #8]
 802a1fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802a1fe:	2301      	movs	r3, #1
 802a200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a202:	4b77      	ldr	r3, [pc, #476]	; (802a3e0 <HAL_RCC_OscConfig+0x474>)
 802a204:	681b      	ldr	r3, [r3, #0]
 802a206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a20a:	2b00      	cmp	r3, #0
 802a20c:	d118      	bne.n	802a240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802a20e:	4b74      	ldr	r3, [pc, #464]	; (802a3e0 <HAL_RCC_OscConfig+0x474>)
 802a210:	681b      	ldr	r3, [r3, #0]
 802a212:	4a73      	ldr	r2, [pc, #460]	; (802a3e0 <HAL_RCC_OscConfig+0x474>)
 802a214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802a21a:	f7fd fa71 	bl	8027700 <HAL_GetTick>
 802a21e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a220:	e008      	b.n	802a234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a222:	f7fd fa6d 	bl	8027700 <HAL_GetTick>
 802a226:	4602      	mov	r2, r0
 802a228:	693b      	ldr	r3, [r7, #16]
 802a22a:	1ad3      	subs	r3, r2, r3
 802a22c:	2b02      	cmp	r3, #2
 802a22e:	d901      	bls.n	802a234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802a230:	2303      	movs	r3, #3
 802a232:	e10c      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a234:	4b6a      	ldr	r3, [pc, #424]	; (802a3e0 <HAL_RCC_OscConfig+0x474>)
 802a236:	681b      	ldr	r3, [r3, #0]
 802a238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a23c:	2b00      	cmp	r3, #0
 802a23e:	d0f0      	beq.n	802a222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802a240:	687b      	ldr	r3, [r7, #4]
 802a242:	689b      	ldr	r3, [r3, #8]
 802a244:	2b01      	cmp	r3, #1
 802a246:	d106      	bne.n	802a256 <HAL_RCC_OscConfig+0x2ea>
 802a248:	4b64      	ldr	r3, [pc, #400]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a24c:	4a63      	ldr	r2, [pc, #396]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a24e:	f043 0301 	orr.w	r3, r3, #1
 802a252:	6713      	str	r3, [r2, #112]	; 0x70
 802a254:	e01c      	b.n	802a290 <HAL_RCC_OscConfig+0x324>
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	689b      	ldr	r3, [r3, #8]
 802a25a:	2b05      	cmp	r3, #5
 802a25c:	d10c      	bne.n	802a278 <HAL_RCC_OscConfig+0x30c>
 802a25e:	4b5f      	ldr	r3, [pc, #380]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a262:	4a5e      	ldr	r2, [pc, #376]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a264:	f043 0304 	orr.w	r3, r3, #4
 802a268:	6713      	str	r3, [r2, #112]	; 0x70
 802a26a:	4b5c      	ldr	r3, [pc, #368]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a26e:	4a5b      	ldr	r2, [pc, #364]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a270:	f043 0301 	orr.w	r3, r3, #1
 802a274:	6713      	str	r3, [r2, #112]	; 0x70
 802a276:	e00b      	b.n	802a290 <HAL_RCC_OscConfig+0x324>
 802a278:	4b58      	ldr	r3, [pc, #352]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a27c:	4a57      	ldr	r2, [pc, #348]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a27e:	f023 0301 	bic.w	r3, r3, #1
 802a282:	6713      	str	r3, [r2, #112]	; 0x70
 802a284:	4b55      	ldr	r3, [pc, #340]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a288:	4a54      	ldr	r2, [pc, #336]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a28a:	f023 0304 	bic.w	r3, r3, #4
 802a28e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802a290:	687b      	ldr	r3, [r7, #4]
 802a292:	689b      	ldr	r3, [r3, #8]
 802a294:	2b00      	cmp	r3, #0
 802a296:	d015      	beq.n	802a2c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a298:	f7fd fa32 	bl	8027700 <HAL_GetTick>
 802a29c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a29e:	e00a      	b.n	802a2b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a2a0:	f7fd fa2e 	bl	8027700 <HAL_GetTick>
 802a2a4:	4602      	mov	r2, r0
 802a2a6:	693b      	ldr	r3, [r7, #16]
 802a2a8:	1ad3      	subs	r3, r2, r3
 802a2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 802a2ae:	4293      	cmp	r3, r2
 802a2b0:	d901      	bls.n	802a2b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802a2b2:	2303      	movs	r3, #3
 802a2b4:	e0cb      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a2b6:	4b49      	ldr	r3, [pc, #292]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2ba:	f003 0302 	and.w	r3, r3, #2
 802a2be:	2b00      	cmp	r3, #0
 802a2c0:	d0ee      	beq.n	802a2a0 <HAL_RCC_OscConfig+0x334>
 802a2c2:	e014      	b.n	802a2ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a2c4:	f7fd fa1c 	bl	8027700 <HAL_GetTick>
 802a2c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a2ca:	e00a      	b.n	802a2e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a2cc:	f7fd fa18 	bl	8027700 <HAL_GetTick>
 802a2d0:	4602      	mov	r2, r0
 802a2d2:	693b      	ldr	r3, [r7, #16]
 802a2d4:	1ad3      	subs	r3, r2, r3
 802a2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 802a2da:	4293      	cmp	r3, r2
 802a2dc:	d901      	bls.n	802a2e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802a2de:	2303      	movs	r3, #3
 802a2e0:	e0b5      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a2e2:	4b3e      	ldr	r3, [pc, #248]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2e6:	f003 0302 	and.w	r3, r3, #2
 802a2ea:	2b00      	cmp	r3, #0
 802a2ec:	d1ee      	bne.n	802a2cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802a2ee:	7dfb      	ldrb	r3, [r7, #23]
 802a2f0:	2b01      	cmp	r3, #1
 802a2f2:	d105      	bne.n	802a300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802a2f4:	4b39      	ldr	r3, [pc, #228]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a2f8:	4a38      	ldr	r2, [pc, #224]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a2fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802a2fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802a300:	687b      	ldr	r3, [r7, #4]
 802a302:	699b      	ldr	r3, [r3, #24]
 802a304:	2b00      	cmp	r3, #0
 802a306:	f000 80a1 	beq.w	802a44c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802a30a:	4b34      	ldr	r3, [pc, #208]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a30c:	689b      	ldr	r3, [r3, #8]
 802a30e:	f003 030c 	and.w	r3, r3, #12
 802a312:	2b08      	cmp	r3, #8
 802a314:	d05c      	beq.n	802a3d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802a316:	687b      	ldr	r3, [r7, #4]
 802a318:	699b      	ldr	r3, [r3, #24]
 802a31a:	2b02      	cmp	r3, #2
 802a31c:	d141      	bne.n	802a3a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a31e:	4b31      	ldr	r3, [pc, #196]	; (802a3e4 <HAL_RCC_OscConfig+0x478>)
 802a320:	2200      	movs	r2, #0
 802a322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a324:	f7fd f9ec 	bl	8027700 <HAL_GetTick>
 802a328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a32a:	e008      	b.n	802a33e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a32c:	f7fd f9e8 	bl	8027700 <HAL_GetTick>
 802a330:	4602      	mov	r2, r0
 802a332:	693b      	ldr	r3, [r7, #16]
 802a334:	1ad3      	subs	r3, r2, r3
 802a336:	2b02      	cmp	r3, #2
 802a338:	d901      	bls.n	802a33e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802a33a:	2303      	movs	r3, #3
 802a33c:	e087      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a33e:	4b27      	ldr	r3, [pc, #156]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a340:	681b      	ldr	r3, [r3, #0]
 802a342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a346:	2b00      	cmp	r3, #0
 802a348:	d1f0      	bne.n	802a32c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	69da      	ldr	r2, [r3, #28]
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	6a1b      	ldr	r3, [r3, #32]
 802a352:	431a      	orrs	r2, r3
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a358:	019b      	lsls	r3, r3, #6
 802a35a:	431a      	orrs	r2, r3
 802a35c:	687b      	ldr	r3, [r7, #4]
 802a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a360:	085b      	lsrs	r3, r3, #1
 802a362:	3b01      	subs	r3, #1
 802a364:	041b      	lsls	r3, r3, #16
 802a366:	431a      	orrs	r2, r3
 802a368:	687b      	ldr	r3, [r7, #4]
 802a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a36c:	061b      	lsls	r3, r3, #24
 802a36e:	491b      	ldr	r1, [pc, #108]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a370:	4313      	orrs	r3, r2
 802a372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802a374:	4b1b      	ldr	r3, [pc, #108]	; (802a3e4 <HAL_RCC_OscConfig+0x478>)
 802a376:	2201      	movs	r2, #1
 802a378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a37a:	f7fd f9c1 	bl	8027700 <HAL_GetTick>
 802a37e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a380:	e008      	b.n	802a394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a382:	f7fd f9bd 	bl	8027700 <HAL_GetTick>
 802a386:	4602      	mov	r2, r0
 802a388:	693b      	ldr	r3, [r7, #16]
 802a38a:	1ad3      	subs	r3, r2, r3
 802a38c:	2b02      	cmp	r3, #2
 802a38e:	d901      	bls.n	802a394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802a390:	2303      	movs	r3, #3
 802a392:	e05c      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a394:	4b11      	ldr	r3, [pc, #68]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a396:	681b      	ldr	r3, [r3, #0]
 802a398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a39c:	2b00      	cmp	r3, #0
 802a39e:	d0f0      	beq.n	802a382 <HAL_RCC_OscConfig+0x416>
 802a3a0:	e054      	b.n	802a44c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a3a2:	4b10      	ldr	r3, [pc, #64]	; (802a3e4 <HAL_RCC_OscConfig+0x478>)
 802a3a4:	2200      	movs	r2, #0
 802a3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a3a8:	f7fd f9aa 	bl	8027700 <HAL_GetTick>
 802a3ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a3ae:	e008      	b.n	802a3c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a3b0:	f7fd f9a6 	bl	8027700 <HAL_GetTick>
 802a3b4:	4602      	mov	r2, r0
 802a3b6:	693b      	ldr	r3, [r7, #16]
 802a3b8:	1ad3      	subs	r3, r2, r3
 802a3ba:	2b02      	cmp	r3, #2
 802a3bc:	d901      	bls.n	802a3c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802a3be:	2303      	movs	r3, #3
 802a3c0:	e045      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a3c2:	4b06      	ldr	r3, [pc, #24]	; (802a3dc <HAL_RCC_OscConfig+0x470>)
 802a3c4:	681b      	ldr	r3, [r3, #0]
 802a3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a3ca:	2b00      	cmp	r3, #0
 802a3cc:	d1f0      	bne.n	802a3b0 <HAL_RCC_OscConfig+0x444>
 802a3ce:	e03d      	b.n	802a44c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802a3d0:	687b      	ldr	r3, [r7, #4]
 802a3d2:	699b      	ldr	r3, [r3, #24]
 802a3d4:	2b01      	cmp	r3, #1
 802a3d6:	d107      	bne.n	802a3e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802a3d8:	2301      	movs	r3, #1
 802a3da:	e038      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
 802a3dc:	40023800 	.word	0x40023800
 802a3e0:	40007000 	.word	0x40007000
 802a3e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802a3e8:	4b1b      	ldr	r3, [pc, #108]	; (802a458 <HAL_RCC_OscConfig+0x4ec>)
 802a3ea:	685b      	ldr	r3, [r3, #4]
 802a3ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a3ee:	687b      	ldr	r3, [r7, #4]
 802a3f0:	699b      	ldr	r3, [r3, #24]
 802a3f2:	2b01      	cmp	r3, #1
 802a3f4:	d028      	beq.n	802a448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a3f6:	68fb      	ldr	r3, [r7, #12]
 802a3f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802a3fc:	687b      	ldr	r3, [r7, #4]
 802a3fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a400:	429a      	cmp	r2, r3
 802a402:	d121      	bne.n	802a448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a404:	68fb      	ldr	r3, [r7, #12]
 802a406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802a40a:	687b      	ldr	r3, [r7, #4]
 802a40c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a40e:	429a      	cmp	r2, r3
 802a410:	d11a      	bne.n	802a448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a412:	68fa      	ldr	r2, [r7, #12]
 802a414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802a418:	4013      	ands	r3, r2
 802a41a:	687a      	ldr	r2, [r7, #4]
 802a41c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a41e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a420:	4293      	cmp	r3, r2
 802a422:	d111      	bne.n	802a448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a424:	68fb      	ldr	r3, [r7, #12]
 802a426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a42e:	085b      	lsrs	r3, r3, #1
 802a430:	3b01      	subs	r3, #1
 802a432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a434:	429a      	cmp	r2, r3
 802a436:	d107      	bne.n	802a448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802a438:	68fb      	ldr	r3, [r7, #12]
 802a43a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802a43e:	687b      	ldr	r3, [r7, #4]
 802a440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a444:	429a      	cmp	r2, r3
 802a446:	d001      	beq.n	802a44c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802a448:	2301      	movs	r3, #1
 802a44a:	e000      	b.n	802a44e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802a44c:	2300      	movs	r3, #0
}
 802a44e:	4618      	mov	r0, r3
 802a450:	3718      	adds	r7, #24
 802a452:	46bd      	mov	sp, r7
 802a454:	bd80      	pop	{r7, pc}
 802a456:	bf00      	nop
 802a458:	40023800 	.word	0x40023800

0802a45c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802a45c:	b580      	push	{r7, lr}
 802a45e:	b084      	sub	sp, #16
 802a460:	af00      	add	r7, sp, #0
 802a462:	6078      	str	r0, [r7, #4]
 802a464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802a466:	687b      	ldr	r3, [r7, #4]
 802a468:	2b00      	cmp	r3, #0
 802a46a:	d101      	bne.n	802a470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802a46c:	2301      	movs	r3, #1
 802a46e:	e0cc      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802a470:	4b68      	ldr	r3, [pc, #416]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a472:	681b      	ldr	r3, [r3, #0]
 802a474:	f003 0307 	and.w	r3, r3, #7
 802a478:	683a      	ldr	r2, [r7, #0]
 802a47a:	429a      	cmp	r2, r3
 802a47c:	d90c      	bls.n	802a498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a47e:	4b65      	ldr	r3, [pc, #404]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a480:	683a      	ldr	r2, [r7, #0]
 802a482:	b2d2      	uxtb	r2, r2
 802a484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a486:	4b63      	ldr	r3, [pc, #396]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a488:	681b      	ldr	r3, [r3, #0]
 802a48a:	f003 0307 	and.w	r3, r3, #7
 802a48e:	683a      	ldr	r2, [r7, #0]
 802a490:	429a      	cmp	r2, r3
 802a492:	d001      	beq.n	802a498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802a494:	2301      	movs	r3, #1
 802a496:	e0b8      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802a498:	687b      	ldr	r3, [r7, #4]
 802a49a:	681b      	ldr	r3, [r3, #0]
 802a49c:	f003 0302 	and.w	r3, r3, #2
 802a4a0:	2b00      	cmp	r3, #0
 802a4a2:	d020      	beq.n	802a4e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a4a4:	687b      	ldr	r3, [r7, #4]
 802a4a6:	681b      	ldr	r3, [r3, #0]
 802a4a8:	f003 0304 	and.w	r3, r3, #4
 802a4ac:	2b00      	cmp	r3, #0
 802a4ae:	d005      	beq.n	802a4bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802a4b0:	4b59      	ldr	r3, [pc, #356]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4b2:	689b      	ldr	r3, [r3, #8]
 802a4b4:	4a58      	ldr	r2, [pc, #352]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802a4ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a4bc:	687b      	ldr	r3, [r7, #4]
 802a4be:	681b      	ldr	r3, [r3, #0]
 802a4c0:	f003 0308 	and.w	r3, r3, #8
 802a4c4:	2b00      	cmp	r3, #0
 802a4c6:	d005      	beq.n	802a4d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802a4c8:	4b53      	ldr	r3, [pc, #332]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4ca:	689b      	ldr	r3, [r3, #8]
 802a4cc:	4a52      	ldr	r2, [pc, #328]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802a4d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802a4d4:	4b50      	ldr	r3, [pc, #320]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4d6:	689b      	ldr	r3, [r3, #8]
 802a4d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802a4dc:	687b      	ldr	r3, [r7, #4]
 802a4de:	689b      	ldr	r3, [r3, #8]
 802a4e0:	494d      	ldr	r1, [pc, #308]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4e2:	4313      	orrs	r3, r2
 802a4e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802a4e6:	687b      	ldr	r3, [r7, #4]
 802a4e8:	681b      	ldr	r3, [r3, #0]
 802a4ea:	f003 0301 	and.w	r3, r3, #1
 802a4ee:	2b00      	cmp	r3, #0
 802a4f0:	d044      	beq.n	802a57c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802a4f2:	687b      	ldr	r3, [r7, #4]
 802a4f4:	685b      	ldr	r3, [r3, #4]
 802a4f6:	2b01      	cmp	r3, #1
 802a4f8:	d107      	bne.n	802a50a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a4fa:	4b47      	ldr	r3, [pc, #284]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a4fc:	681b      	ldr	r3, [r3, #0]
 802a4fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a502:	2b00      	cmp	r3, #0
 802a504:	d119      	bne.n	802a53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a506:	2301      	movs	r3, #1
 802a508:	e07f      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a50a:	687b      	ldr	r3, [r7, #4]
 802a50c:	685b      	ldr	r3, [r3, #4]
 802a50e:	2b02      	cmp	r3, #2
 802a510:	d003      	beq.n	802a51a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802a512:	687b      	ldr	r3, [r7, #4]
 802a514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a516:	2b03      	cmp	r3, #3
 802a518:	d107      	bne.n	802a52a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a51a:	4b3f      	ldr	r3, [pc, #252]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a51c:	681b      	ldr	r3, [r3, #0]
 802a51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a522:	2b00      	cmp	r3, #0
 802a524:	d109      	bne.n	802a53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a526:	2301      	movs	r3, #1
 802a528:	e06f      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a52a:	4b3b      	ldr	r3, [pc, #236]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a52c:	681b      	ldr	r3, [r3, #0]
 802a52e:	f003 0302 	and.w	r3, r3, #2
 802a532:	2b00      	cmp	r3, #0
 802a534:	d101      	bne.n	802a53a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a536:	2301      	movs	r3, #1
 802a538:	e067      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802a53a:	4b37      	ldr	r3, [pc, #220]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a53c:	689b      	ldr	r3, [r3, #8]
 802a53e:	f023 0203 	bic.w	r2, r3, #3
 802a542:	687b      	ldr	r3, [r7, #4]
 802a544:	685b      	ldr	r3, [r3, #4]
 802a546:	4934      	ldr	r1, [pc, #208]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a548:	4313      	orrs	r3, r2
 802a54a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802a54c:	f7fd f8d8 	bl	8027700 <HAL_GetTick>
 802a550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a552:	e00a      	b.n	802a56a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802a554:	f7fd f8d4 	bl	8027700 <HAL_GetTick>
 802a558:	4602      	mov	r2, r0
 802a55a:	68fb      	ldr	r3, [r7, #12]
 802a55c:	1ad3      	subs	r3, r2, r3
 802a55e:	f241 3288 	movw	r2, #5000	; 0x1388
 802a562:	4293      	cmp	r3, r2
 802a564:	d901      	bls.n	802a56a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802a566:	2303      	movs	r3, #3
 802a568:	e04f      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a56a:	4b2b      	ldr	r3, [pc, #172]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a56c:	689b      	ldr	r3, [r3, #8]
 802a56e:	f003 020c 	and.w	r2, r3, #12
 802a572:	687b      	ldr	r3, [r7, #4]
 802a574:	685b      	ldr	r3, [r3, #4]
 802a576:	009b      	lsls	r3, r3, #2
 802a578:	429a      	cmp	r2, r3
 802a57a:	d1eb      	bne.n	802a554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802a57c:	4b25      	ldr	r3, [pc, #148]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a57e:	681b      	ldr	r3, [r3, #0]
 802a580:	f003 0307 	and.w	r3, r3, #7
 802a584:	683a      	ldr	r2, [r7, #0]
 802a586:	429a      	cmp	r2, r3
 802a588:	d20c      	bcs.n	802a5a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a58a:	4b22      	ldr	r3, [pc, #136]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a58c:	683a      	ldr	r2, [r7, #0]
 802a58e:	b2d2      	uxtb	r2, r2
 802a590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a592:	4b20      	ldr	r3, [pc, #128]	; (802a614 <HAL_RCC_ClockConfig+0x1b8>)
 802a594:	681b      	ldr	r3, [r3, #0]
 802a596:	f003 0307 	and.w	r3, r3, #7
 802a59a:	683a      	ldr	r2, [r7, #0]
 802a59c:	429a      	cmp	r2, r3
 802a59e:	d001      	beq.n	802a5a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802a5a0:	2301      	movs	r3, #1
 802a5a2:	e032      	b.n	802a60a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a5a4:	687b      	ldr	r3, [r7, #4]
 802a5a6:	681b      	ldr	r3, [r3, #0]
 802a5a8:	f003 0304 	and.w	r3, r3, #4
 802a5ac:	2b00      	cmp	r3, #0
 802a5ae:	d008      	beq.n	802a5c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802a5b0:	4b19      	ldr	r3, [pc, #100]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a5b2:	689b      	ldr	r3, [r3, #8]
 802a5b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802a5b8:	687b      	ldr	r3, [r7, #4]
 802a5ba:	68db      	ldr	r3, [r3, #12]
 802a5bc:	4916      	ldr	r1, [pc, #88]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a5be:	4313      	orrs	r3, r2
 802a5c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a5c2:	687b      	ldr	r3, [r7, #4]
 802a5c4:	681b      	ldr	r3, [r3, #0]
 802a5c6:	f003 0308 	and.w	r3, r3, #8
 802a5ca:	2b00      	cmp	r3, #0
 802a5cc:	d009      	beq.n	802a5e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802a5ce:	4b12      	ldr	r3, [pc, #72]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a5d0:	689b      	ldr	r3, [r3, #8]
 802a5d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802a5d6:	687b      	ldr	r3, [r7, #4]
 802a5d8:	691b      	ldr	r3, [r3, #16]
 802a5da:	00db      	lsls	r3, r3, #3
 802a5dc:	490e      	ldr	r1, [pc, #56]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a5de:	4313      	orrs	r3, r2
 802a5e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802a5e2:	f000 f82d 	bl	802a640 <HAL_RCC_GetSysClockFreq>
 802a5e6:	4602      	mov	r2, r0
 802a5e8:	4b0b      	ldr	r3, [pc, #44]	; (802a618 <HAL_RCC_ClockConfig+0x1bc>)
 802a5ea:	689b      	ldr	r3, [r3, #8]
 802a5ec:	091b      	lsrs	r3, r3, #4
 802a5ee:	f003 030f 	and.w	r3, r3, #15
 802a5f2:	490a      	ldr	r1, [pc, #40]	; (802a61c <HAL_RCC_ClockConfig+0x1c0>)
 802a5f4:	5ccb      	ldrb	r3, [r1, r3]
 802a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 802a5fa:	4a09      	ldr	r2, [pc, #36]	; (802a620 <HAL_RCC_ClockConfig+0x1c4>)
 802a5fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802a5fe:	4b09      	ldr	r3, [pc, #36]	; (802a624 <HAL_RCC_ClockConfig+0x1c8>)
 802a600:	681b      	ldr	r3, [r3, #0]
 802a602:	4618      	mov	r0, r3
 802a604:	f7fd f838 	bl	8027678 <HAL_InitTick>

  return HAL_OK;
 802a608:	2300      	movs	r3, #0
}
 802a60a:	4618      	mov	r0, r3
 802a60c:	3710      	adds	r7, #16
 802a60e:	46bd      	mov	sp, r7
 802a610:	bd80      	pop	{r7, pc}
 802a612:	bf00      	nop
 802a614:	40023c00 	.word	0x40023c00
 802a618:	40023800 	.word	0x40023800
 802a61c:	08033310 	.word	0x08033310
 802a620:	20000138 	.word	0x20000138
 802a624:	2000013c 	.word	0x2000013c

0802a628 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 802a628:	b480      	push	{r7}
 802a62a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 802a62c:	4b03      	ldr	r3, [pc, #12]	; (802a63c <HAL_RCC_EnableCSS+0x14>)
 802a62e:	2201      	movs	r2, #1
 802a630:	601a      	str	r2, [r3, #0]
}
 802a632:	bf00      	nop
 802a634:	46bd      	mov	sp, r7
 802a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a63a:	4770      	bx	lr
 802a63c:	4247004c 	.word	0x4247004c

0802a640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802a640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a644:	b090      	sub	sp, #64	; 0x40
 802a646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802a648:	2300      	movs	r3, #0
 802a64a:	637b      	str	r3, [r7, #52]	; 0x34
 802a64c:	2300      	movs	r3, #0
 802a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a650:	2300      	movs	r3, #0
 802a652:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802a654:	2300      	movs	r3, #0
 802a656:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802a658:	4b59      	ldr	r3, [pc, #356]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a65a:	689b      	ldr	r3, [r3, #8]
 802a65c:	f003 030c 	and.w	r3, r3, #12
 802a660:	2b08      	cmp	r3, #8
 802a662:	d00d      	beq.n	802a680 <HAL_RCC_GetSysClockFreq+0x40>
 802a664:	2b08      	cmp	r3, #8
 802a666:	f200 80a1 	bhi.w	802a7ac <HAL_RCC_GetSysClockFreq+0x16c>
 802a66a:	2b00      	cmp	r3, #0
 802a66c:	d002      	beq.n	802a674 <HAL_RCC_GetSysClockFreq+0x34>
 802a66e:	2b04      	cmp	r3, #4
 802a670:	d003      	beq.n	802a67a <HAL_RCC_GetSysClockFreq+0x3a>
 802a672:	e09b      	b.n	802a7ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802a674:	4b53      	ldr	r3, [pc, #332]	; (802a7c4 <HAL_RCC_GetSysClockFreq+0x184>)
 802a676:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 802a678:	e09b      	b.n	802a7b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802a67a:	4b53      	ldr	r3, [pc, #332]	; (802a7c8 <HAL_RCC_GetSysClockFreq+0x188>)
 802a67c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a67e:	e098      	b.n	802a7b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802a680:	4b4f      	ldr	r3, [pc, #316]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a682:	685b      	ldr	r3, [r3, #4]
 802a684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802a688:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802a68a:	4b4d      	ldr	r3, [pc, #308]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a68c:	685b      	ldr	r3, [r3, #4]
 802a68e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a692:	2b00      	cmp	r3, #0
 802a694:	d028      	beq.n	802a6e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a696:	4b4a      	ldr	r3, [pc, #296]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a698:	685b      	ldr	r3, [r3, #4]
 802a69a:	099b      	lsrs	r3, r3, #6
 802a69c:	2200      	movs	r2, #0
 802a69e:	623b      	str	r3, [r7, #32]
 802a6a0:	627a      	str	r2, [r7, #36]	; 0x24
 802a6a2:	6a3b      	ldr	r3, [r7, #32]
 802a6a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802a6a8:	2100      	movs	r1, #0
 802a6aa:	4b47      	ldr	r3, [pc, #284]	; (802a7c8 <HAL_RCC_GetSysClockFreq+0x188>)
 802a6ac:	fb03 f201 	mul.w	r2, r3, r1
 802a6b0:	2300      	movs	r3, #0
 802a6b2:	fb00 f303 	mul.w	r3, r0, r3
 802a6b6:	4413      	add	r3, r2
 802a6b8:	4a43      	ldr	r2, [pc, #268]	; (802a7c8 <HAL_RCC_GetSysClockFreq+0x188>)
 802a6ba:	fba0 1202 	umull	r1, r2, r0, r2
 802a6be:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a6c0:	460a      	mov	r2, r1
 802a6c2:	62ba      	str	r2, [r7, #40]	; 0x28
 802a6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a6c6:	4413      	add	r3, r2
 802a6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a6cc:	2200      	movs	r2, #0
 802a6ce:	61bb      	str	r3, [r7, #24]
 802a6d0:	61fa      	str	r2, [r7, #28]
 802a6d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a6d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802a6da:	f7f7 fdc9 	bl	8022270 <__aeabi_uldivmod>
 802a6de:	4602      	mov	r2, r0
 802a6e0:	460b      	mov	r3, r1
 802a6e2:	4613      	mov	r3, r2
 802a6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a6e6:	e053      	b.n	802a790 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a6e8:	4b35      	ldr	r3, [pc, #212]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a6ea:	685b      	ldr	r3, [r3, #4]
 802a6ec:	099b      	lsrs	r3, r3, #6
 802a6ee:	2200      	movs	r2, #0
 802a6f0:	613b      	str	r3, [r7, #16]
 802a6f2:	617a      	str	r2, [r7, #20]
 802a6f4:	693b      	ldr	r3, [r7, #16]
 802a6f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802a6fa:	f04f 0b00 	mov.w	fp, #0
 802a6fe:	4652      	mov	r2, sl
 802a700:	465b      	mov	r3, fp
 802a702:	f04f 0000 	mov.w	r0, #0
 802a706:	f04f 0100 	mov.w	r1, #0
 802a70a:	0159      	lsls	r1, r3, #5
 802a70c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802a710:	0150      	lsls	r0, r2, #5
 802a712:	4602      	mov	r2, r0
 802a714:	460b      	mov	r3, r1
 802a716:	ebb2 080a 	subs.w	r8, r2, sl
 802a71a:	eb63 090b 	sbc.w	r9, r3, fp
 802a71e:	f04f 0200 	mov.w	r2, #0
 802a722:	f04f 0300 	mov.w	r3, #0
 802a726:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802a72a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802a72e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802a732:	ebb2 0408 	subs.w	r4, r2, r8
 802a736:	eb63 0509 	sbc.w	r5, r3, r9
 802a73a:	f04f 0200 	mov.w	r2, #0
 802a73e:	f04f 0300 	mov.w	r3, #0
 802a742:	00eb      	lsls	r3, r5, #3
 802a744:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a748:	00e2      	lsls	r2, r4, #3
 802a74a:	4614      	mov	r4, r2
 802a74c:	461d      	mov	r5, r3
 802a74e:	eb14 030a 	adds.w	r3, r4, sl
 802a752:	603b      	str	r3, [r7, #0]
 802a754:	eb45 030b 	adc.w	r3, r5, fp
 802a758:	607b      	str	r3, [r7, #4]
 802a75a:	f04f 0200 	mov.w	r2, #0
 802a75e:	f04f 0300 	mov.w	r3, #0
 802a762:	e9d7 4500 	ldrd	r4, r5, [r7]
 802a766:	4629      	mov	r1, r5
 802a768:	028b      	lsls	r3, r1, #10
 802a76a:	4621      	mov	r1, r4
 802a76c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802a770:	4621      	mov	r1, r4
 802a772:	028a      	lsls	r2, r1, #10
 802a774:	4610      	mov	r0, r2
 802a776:	4619      	mov	r1, r3
 802a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a77a:	2200      	movs	r2, #0
 802a77c:	60bb      	str	r3, [r7, #8]
 802a77e:	60fa      	str	r2, [r7, #12]
 802a780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a784:	f7f7 fd74 	bl	8022270 <__aeabi_uldivmod>
 802a788:	4602      	mov	r2, r0
 802a78a:	460b      	mov	r3, r1
 802a78c:	4613      	mov	r3, r2
 802a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802a790:	4b0b      	ldr	r3, [pc, #44]	; (802a7c0 <HAL_RCC_GetSysClockFreq+0x180>)
 802a792:	685b      	ldr	r3, [r3, #4]
 802a794:	0c1b      	lsrs	r3, r3, #16
 802a796:	f003 0303 	and.w	r3, r3, #3
 802a79a:	3301      	adds	r3, #1
 802a79c:	005b      	lsls	r3, r3, #1
 802a79e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802a7a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 802a7a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a7aa:	e002      	b.n	802a7b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802a7ac:	4b05      	ldr	r3, [pc, #20]	; (802a7c4 <HAL_RCC_GetSysClockFreq+0x184>)
 802a7ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a7b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 802a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802a7b4:	4618      	mov	r0, r3
 802a7b6:	3740      	adds	r7, #64	; 0x40
 802a7b8:	46bd      	mov	sp, r7
 802a7ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a7be:	bf00      	nop
 802a7c0:	40023800 	.word	0x40023800
 802a7c4:	00f42400 	.word	0x00f42400
 802a7c8:	00989680 	.word	0x00989680

0802a7cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802a7cc:	b480      	push	{r7}
 802a7ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802a7d0:	4b03      	ldr	r3, [pc, #12]	; (802a7e0 <HAL_RCC_GetHCLKFreq+0x14>)
 802a7d2:	681b      	ldr	r3, [r3, #0]
}
 802a7d4:	4618      	mov	r0, r3
 802a7d6:	46bd      	mov	sp, r7
 802a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7dc:	4770      	bx	lr
 802a7de:	bf00      	nop
 802a7e0:	20000138 	.word	0x20000138

0802a7e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802a7e4:	b580      	push	{r7, lr}
 802a7e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802a7e8:	f7ff fff0 	bl	802a7cc <HAL_RCC_GetHCLKFreq>
 802a7ec:	4602      	mov	r2, r0
 802a7ee:	4b05      	ldr	r3, [pc, #20]	; (802a804 <HAL_RCC_GetPCLK1Freq+0x20>)
 802a7f0:	689b      	ldr	r3, [r3, #8]
 802a7f2:	0a9b      	lsrs	r3, r3, #10
 802a7f4:	f003 0307 	and.w	r3, r3, #7
 802a7f8:	4903      	ldr	r1, [pc, #12]	; (802a808 <HAL_RCC_GetPCLK1Freq+0x24>)
 802a7fa:	5ccb      	ldrb	r3, [r1, r3]
 802a7fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a800:	4618      	mov	r0, r3
 802a802:	bd80      	pop	{r7, pc}
 802a804:	40023800 	.word	0x40023800
 802a808:	08033320 	.word	0x08033320

0802a80c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802a80c:	b580      	push	{r7, lr}
 802a80e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802a810:	f7ff ffdc 	bl	802a7cc <HAL_RCC_GetHCLKFreq>
 802a814:	4602      	mov	r2, r0
 802a816:	4b05      	ldr	r3, [pc, #20]	; (802a82c <HAL_RCC_GetPCLK2Freq+0x20>)
 802a818:	689b      	ldr	r3, [r3, #8]
 802a81a:	0b5b      	lsrs	r3, r3, #13
 802a81c:	f003 0307 	and.w	r3, r3, #7
 802a820:	4903      	ldr	r1, [pc, #12]	; (802a830 <HAL_RCC_GetPCLK2Freq+0x24>)
 802a822:	5ccb      	ldrb	r3, [r1, r3]
 802a824:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a828:	4618      	mov	r0, r3
 802a82a:	bd80      	pop	{r7, pc}
 802a82c:	40023800 	.word	0x40023800
 802a830:	08033320 	.word	0x08033320

0802a834 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 802a834:	b580      	push	{r7, lr}
 802a836:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 802a838:	4b06      	ldr	r3, [pc, #24]	; (802a854 <HAL_RCC_NMI_IRQHandler+0x20>)
 802a83a:	68db      	ldr	r3, [r3, #12]
 802a83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a840:	2b80      	cmp	r3, #128	; 0x80
 802a842:	d104      	bne.n	802a84e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 802a844:	f000 f80a 	bl	802a85c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 802a848:	4b03      	ldr	r3, [pc, #12]	; (802a858 <HAL_RCC_NMI_IRQHandler+0x24>)
 802a84a:	2280      	movs	r2, #128	; 0x80
 802a84c:	701a      	strb	r2, [r3, #0]
  }
}
 802a84e:	bf00      	nop
 802a850:	bd80      	pop	{r7, pc}
 802a852:	bf00      	nop
 802a854:	40023800 	.word	0x40023800
 802a858:	4002380e 	.word	0x4002380e

0802a85c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 802a85c:	b480      	push	{r7}
 802a85e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 802a860:	bf00      	nop
 802a862:	46bd      	mov	sp, r7
 802a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a868:	4770      	bx	lr
	...

0802a86c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802a86c:	b580      	push	{r7, lr}
 802a86e:	b086      	sub	sp, #24
 802a870:	af00      	add	r7, sp, #0
 802a872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802a874:	2300      	movs	r3, #0
 802a876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802a878:	2300      	movs	r3, #0
 802a87a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a87c:	687b      	ldr	r3, [r7, #4]
 802a87e:	681b      	ldr	r3, [r3, #0]
 802a880:	f003 0301 	and.w	r3, r3, #1
 802a884:	2b00      	cmp	r3, #0
 802a886:	d105      	bne.n	802a894 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802a888:	687b      	ldr	r3, [r7, #4]
 802a88a:	681b      	ldr	r3, [r3, #0]
 802a88c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a890:	2b00      	cmp	r3, #0
 802a892:	d035      	beq.n	802a900 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802a894:	4b62      	ldr	r3, [pc, #392]	; (802aa20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a896:	2200      	movs	r2, #0
 802a898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a89a:	f7fc ff31 	bl	8027700 <HAL_GetTick>
 802a89e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a8a0:	e008      	b.n	802a8b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a8a2:	f7fc ff2d 	bl	8027700 <HAL_GetTick>
 802a8a6:	4602      	mov	r2, r0
 802a8a8:	697b      	ldr	r3, [r7, #20]
 802a8aa:	1ad3      	subs	r3, r2, r3
 802a8ac:	2b02      	cmp	r3, #2
 802a8ae:	d901      	bls.n	802a8b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a8b0:	2303      	movs	r3, #3
 802a8b2:	e0b0      	b.n	802aa16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a8b4:	4b5b      	ldr	r3, [pc, #364]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8b6:	681b      	ldr	r3, [r3, #0]
 802a8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a8bc:	2b00      	cmp	r3, #0
 802a8be:	d1f0      	bne.n	802a8a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802a8c0:	687b      	ldr	r3, [r7, #4]
 802a8c2:	685b      	ldr	r3, [r3, #4]
 802a8c4:	019a      	lsls	r2, r3, #6
 802a8c6:	687b      	ldr	r3, [r7, #4]
 802a8c8:	689b      	ldr	r3, [r3, #8]
 802a8ca:	071b      	lsls	r3, r3, #28
 802a8cc:	4955      	ldr	r1, [pc, #340]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8ce:	4313      	orrs	r3, r2
 802a8d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802a8d4:	4b52      	ldr	r3, [pc, #328]	; (802aa20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a8d6:	2201      	movs	r2, #1
 802a8d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a8da:	f7fc ff11 	bl	8027700 <HAL_GetTick>
 802a8de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a8e0:	e008      	b.n	802a8f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a8e2:	f7fc ff0d 	bl	8027700 <HAL_GetTick>
 802a8e6:	4602      	mov	r2, r0
 802a8e8:	697b      	ldr	r3, [r7, #20]
 802a8ea:	1ad3      	subs	r3, r2, r3
 802a8ec:	2b02      	cmp	r3, #2
 802a8ee:	d901      	bls.n	802a8f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a8f0:	2303      	movs	r3, #3
 802a8f2:	e090      	b.n	802aa16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a8f4:	4b4b      	ldr	r3, [pc, #300]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8f6:	681b      	ldr	r3, [r3, #0]
 802a8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a8fc:	2b00      	cmp	r3, #0
 802a8fe:	d0f0      	beq.n	802a8e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802a900:	687b      	ldr	r3, [r7, #4]
 802a902:	681b      	ldr	r3, [r3, #0]
 802a904:	f003 0302 	and.w	r3, r3, #2
 802a908:	2b00      	cmp	r3, #0
 802a90a:	f000 8083 	beq.w	802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802a90e:	2300      	movs	r3, #0
 802a910:	60fb      	str	r3, [r7, #12]
 802a912:	4b44      	ldr	r3, [pc, #272]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a916:	4a43      	ldr	r2, [pc, #268]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a91c:	6413      	str	r3, [r2, #64]	; 0x40
 802a91e:	4b41      	ldr	r3, [pc, #260]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a926:	60fb      	str	r3, [r7, #12]
 802a928:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802a92a:	4b3f      	ldr	r3, [pc, #252]	; (802aa28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a92c:	681b      	ldr	r3, [r3, #0]
 802a92e:	4a3e      	ldr	r2, [pc, #248]	; (802aa28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a934:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802a936:	f7fc fee3 	bl	8027700 <HAL_GetTick>
 802a93a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a93c:	e008      	b.n	802a950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802a93e:	f7fc fedf 	bl	8027700 <HAL_GetTick>
 802a942:	4602      	mov	r2, r0
 802a944:	697b      	ldr	r3, [r7, #20]
 802a946:	1ad3      	subs	r3, r2, r3
 802a948:	2b02      	cmp	r3, #2
 802a94a:	d901      	bls.n	802a950 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 802a94c:	2303      	movs	r3, #3
 802a94e:	e062      	b.n	802aa16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a950:	4b35      	ldr	r3, [pc, #212]	; (802aa28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a952:	681b      	ldr	r3, [r3, #0]
 802a954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a958:	2b00      	cmp	r3, #0
 802a95a:	d0f0      	beq.n	802a93e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802a95c:	4b31      	ldr	r3, [pc, #196]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a964:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802a966:	693b      	ldr	r3, [r7, #16]
 802a968:	2b00      	cmp	r3, #0
 802a96a:	d02f      	beq.n	802a9cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 802a96c:	687b      	ldr	r3, [r7, #4]
 802a96e:	68db      	ldr	r3, [r3, #12]
 802a970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a974:	693a      	ldr	r2, [r7, #16]
 802a976:	429a      	cmp	r2, r3
 802a978:	d028      	beq.n	802a9cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802a97a:	4b2a      	ldr	r3, [pc, #168]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a97e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a982:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802a984:	4b29      	ldr	r3, [pc, #164]	; (802aa2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a986:	2201      	movs	r2, #1
 802a988:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802a98a:	4b28      	ldr	r3, [pc, #160]	; (802aa2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a98c:	2200      	movs	r2, #0
 802a98e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802a990:	4a24      	ldr	r2, [pc, #144]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a992:	693b      	ldr	r3, [r7, #16]
 802a994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802a996:	4b23      	ldr	r3, [pc, #140]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a99a:	f003 0301 	and.w	r3, r3, #1
 802a99e:	2b01      	cmp	r3, #1
 802a9a0:	d114      	bne.n	802a9cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802a9a2:	f7fc fead 	bl	8027700 <HAL_GetTick>
 802a9a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a9a8:	e00a      	b.n	802a9c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a9aa:	f7fc fea9 	bl	8027700 <HAL_GetTick>
 802a9ae:	4602      	mov	r2, r0
 802a9b0:	697b      	ldr	r3, [r7, #20]
 802a9b2:	1ad3      	subs	r3, r2, r3
 802a9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 802a9b8:	4293      	cmp	r3, r2
 802a9ba:	d901      	bls.n	802a9c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 802a9bc:	2303      	movs	r3, #3
 802a9be:	e02a      	b.n	802aa16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a9c0:	4b18      	ldr	r3, [pc, #96]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a9c4:	f003 0302 	and.w	r3, r3, #2
 802a9c8:	2b00      	cmp	r3, #0
 802a9ca:	d0ee      	beq.n	802a9aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802a9cc:	687b      	ldr	r3, [r7, #4]
 802a9ce:	68db      	ldr	r3, [r3, #12]
 802a9d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a9d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802a9d8:	d10d      	bne.n	802a9f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 802a9da:	4b12      	ldr	r3, [pc, #72]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9dc:	689b      	ldr	r3, [r3, #8]
 802a9de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802a9e2:	687b      	ldr	r3, [r7, #4]
 802a9e4:	68db      	ldr	r3, [r3, #12]
 802a9e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802a9ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a9ee:	490d      	ldr	r1, [pc, #52]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9f0:	4313      	orrs	r3, r2
 802a9f2:	608b      	str	r3, [r1, #8]
 802a9f4:	e005      	b.n	802aa02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 802a9f6:	4b0b      	ldr	r3, [pc, #44]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9f8:	689b      	ldr	r3, [r3, #8]
 802a9fa:	4a0a      	ldr	r2, [pc, #40]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802aa00:	6093      	str	r3, [r2, #8]
 802aa02:	4b08      	ldr	r3, [pc, #32]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aa04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802aa06:	687b      	ldr	r3, [r7, #4]
 802aa08:	68db      	ldr	r3, [r3, #12]
 802aa0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802aa0e:	4905      	ldr	r1, [pc, #20]	; (802aa24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aa10:	4313      	orrs	r3, r2
 802aa12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802aa14:	2300      	movs	r3, #0
}
 802aa16:	4618      	mov	r0, r3
 802aa18:	3718      	adds	r7, #24
 802aa1a:	46bd      	mov	sp, r7
 802aa1c:	bd80      	pop	{r7, pc}
 802aa1e:	bf00      	nop
 802aa20:	42470068 	.word	0x42470068
 802aa24:	40023800 	.word	0x40023800
 802aa28:	40007000 	.word	0x40007000
 802aa2c:	42470e40 	.word	0x42470e40

0802aa30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802aa30:	b580      	push	{r7, lr}
 802aa32:	b084      	sub	sp, #16
 802aa34:	af00      	add	r7, sp, #0
 802aa36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 802aa38:	2301      	movs	r3, #1
 802aa3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 802aa3c:	687b      	ldr	r3, [r7, #4]
 802aa3e:	2b00      	cmp	r3, #0
 802aa40:	d101      	bne.n	802aa46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802aa42:	2301      	movs	r3, #1
 802aa44:	e066      	b.n	802ab14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 802aa46:	687b      	ldr	r3, [r7, #4]
 802aa48:	7f5b      	ldrb	r3, [r3, #29]
 802aa4a:	b2db      	uxtb	r3, r3
 802aa4c:	2b00      	cmp	r3, #0
 802aa4e:	d105      	bne.n	802aa5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802aa50:	687b      	ldr	r3, [r7, #4]
 802aa52:	2200      	movs	r2, #0
 802aa54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802aa56:	6878      	ldr	r0, [r7, #4]
 802aa58:	f7fb fb22 	bl	80260a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 802aa5c:	687b      	ldr	r3, [r7, #4]
 802aa5e:	2202      	movs	r2, #2
 802aa60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802aa62:	687b      	ldr	r3, [r7, #4]
 802aa64:	681b      	ldr	r3, [r3, #0]
 802aa66:	22ca      	movs	r2, #202	; 0xca
 802aa68:	625a      	str	r2, [r3, #36]	; 0x24
 802aa6a:	687b      	ldr	r3, [r7, #4]
 802aa6c:	681b      	ldr	r3, [r3, #0]
 802aa6e:	2253      	movs	r2, #83	; 0x53
 802aa70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802aa72:	6878      	ldr	r0, [r7, #4]
 802aa74:	f000 f998 	bl	802ada8 <RTC_EnterInitMode>
 802aa78:	4603      	mov	r3, r0
 802aa7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802aa7c:	7bfb      	ldrb	r3, [r7, #15]
 802aa7e:	2b00      	cmp	r3, #0
 802aa80:	d12c      	bne.n	802aadc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802aa82:	687b      	ldr	r3, [r7, #4]
 802aa84:	681b      	ldr	r3, [r3, #0]
 802aa86:	689b      	ldr	r3, [r3, #8]
 802aa88:	687a      	ldr	r2, [r7, #4]
 802aa8a:	6812      	ldr	r2, [r2, #0]
 802aa8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802aa90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802aa94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802aa96:	687b      	ldr	r3, [r7, #4]
 802aa98:	681b      	ldr	r3, [r3, #0]
 802aa9a:	6899      	ldr	r1, [r3, #8]
 802aa9c:	687b      	ldr	r3, [r7, #4]
 802aa9e:	685a      	ldr	r2, [r3, #4]
 802aaa0:	687b      	ldr	r3, [r7, #4]
 802aaa2:	691b      	ldr	r3, [r3, #16]
 802aaa4:	431a      	orrs	r2, r3
 802aaa6:	687b      	ldr	r3, [r7, #4]
 802aaa8:	695b      	ldr	r3, [r3, #20]
 802aaaa:	431a      	orrs	r2, r3
 802aaac:	687b      	ldr	r3, [r7, #4]
 802aaae:	681b      	ldr	r3, [r3, #0]
 802aab0:	430a      	orrs	r2, r1
 802aab2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	681b      	ldr	r3, [r3, #0]
 802aab8:	687a      	ldr	r2, [r7, #4]
 802aaba:	68d2      	ldr	r2, [r2, #12]
 802aabc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 802aabe:	687b      	ldr	r3, [r7, #4]
 802aac0:	681b      	ldr	r3, [r3, #0]
 802aac2:	6919      	ldr	r1, [r3, #16]
 802aac4:	687b      	ldr	r3, [r7, #4]
 802aac6:	689b      	ldr	r3, [r3, #8]
 802aac8:	041a      	lsls	r2, r3, #16
 802aaca:	687b      	ldr	r3, [r7, #4]
 802aacc:	681b      	ldr	r3, [r3, #0]
 802aace:	430a      	orrs	r2, r1
 802aad0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802aad2:	6878      	ldr	r0, [r7, #4]
 802aad4:	f000 f99f 	bl	802ae16 <RTC_ExitInitMode>
 802aad8:	4603      	mov	r3, r0
 802aada:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 802aadc:	7bfb      	ldrb	r3, [r7, #15]
 802aade:	2b00      	cmp	r3, #0
 802aae0:	d113      	bne.n	802ab0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 802aae2:	687b      	ldr	r3, [r7, #4]
 802aae4:	681b      	ldr	r3, [r3, #0]
 802aae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802aae8:	687b      	ldr	r3, [r7, #4]
 802aaea:	681b      	ldr	r3, [r3, #0]
 802aaec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802aaf0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802aaf2:	687b      	ldr	r3, [r7, #4]
 802aaf4:	681b      	ldr	r3, [r3, #0]
 802aaf6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802aaf8:	687b      	ldr	r3, [r7, #4]
 802aafa:	699a      	ldr	r2, [r3, #24]
 802aafc:	687b      	ldr	r3, [r7, #4]
 802aafe:	681b      	ldr	r3, [r3, #0]
 802ab00:	430a      	orrs	r2, r1
 802ab02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 802ab04:	687b      	ldr	r3, [r7, #4]
 802ab06:	2201      	movs	r2, #1
 802ab08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ab0a:	687b      	ldr	r3, [r7, #4]
 802ab0c:	681b      	ldr	r3, [r3, #0]
 802ab0e:	22ff      	movs	r2, #255	; 0xff
 802ab10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 802ab14:	4618      	mov	r0, r3
 802ab16:	3710      	adds	r7, #16
 802ab18:	46bd      	mov	sp, r7
 802ab1a:	bd80      	pop	{r7, pc}

0802ab1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802ab1c:	b590      	push	{r4, r7, lr}
 802ab1e:	b087      	sub	sp, #28
 802ab20:	af00      	add	r7, sp, #0
 802ab22:	60f8      	str	r0, [r7, #12]
 802ab24:	60b9      	str	r1, [r7, #8]
 802ab26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802ab28:	2300      	movs	r3, #0
 802ab2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802ab2c:	68fb      	ldr	r3, [r7, #12]
 802ab2e:	7f1b      	ldrb	r3, [r3, #28]
 802ab30:	2b01      	cmp	r3, #1
 802ab32:	d101      	bne.n	802ab38 <HAL_RTC_SetTime+0x1c>
 802ab34:	2302      	movs	r3, #2
 802ab36:	e087      	b.n	802ac48 <HAL_RTC_SetTime+0x12c>
 802ab38:	68fb      	ldr	r3, [r7, #12]
 802ab3a:	2201      	movs	r2, #1
 802ab3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802ab3e:	68fb      	ldr	r3, [r7, #12]
 802ab40:	2202      	movs	r2, #2
 802ab42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 802ab44:	687b      	ldr	r3, [r7, #4]
 802ab46:	2b00      	cmp	r3, #0
 802ab48:	d126      	bne.n	802ab98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802ab4a:	68fb      	ldr	r3, [r7, #12]
 802ab4c:	681b      	ldr	r3, [r3, #0]
 802ab4e:	689b      	ldr	r3, [r3, #8]
 802ab50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ab54:	2b00      	cmp	r3, #0
 802ab56:	d102      	bne.n	802ab5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802ab58:	68bb      	ldr	r3, [r7, #8]
 802ab5a:	2200      	movs	r2, #0
 802ab5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab5e:	68bb      	ldr	r3, [r7, #8]
 802ab60:	781b      	ldrb	r3, [r3, #0]
 802ab62:	4618      	mov	r0, r3
 802ab64:	f000 f97c 	bl	802ae60 <RTC_ByteToBcd2>
 802ab68:	4603      	mov	r3, r0
 802ab6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802ab6c:	68bb      	ldr	r3, [r7, #8]
 802ab6e:	785b      	ldrb	r3, [r3, #1]
 802ab70:	4618      	mov	r0, r3
 802ab72:	f000 f975 	bl	802ae60 <RTC_ByteToBcd2>
 802ab76:	4603      	mov	r3, r0
 802ab78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 802ab7c:	68bb      	ldr	r3, [r7, #8]
 802ab7e:	789b      	ldrb	r3, [r3, #2]
 802ab80:	4618      	mov	r0, r3
 802ab82:	f000 f96d 	bl	802ae60 <RTC_ByteToBcd2>
 802ab86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802ab88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 802ab8c:	68bb      	ldr	r3, [r7, #8]
 802ab8e:	78db      	ldrb	r3, [r3, #3]
 802ab90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab92:	4313      	orrs	r3, r2
 802ab94:	617b      	str	r3, [r7, #20]
 802ab96:	e018      	b.n	802abca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802ab98:	68fb      	ldr	r3, [r7, #12]
 802ab9a:	681b      	ldr	r3, [r3, #0]
 802ab9c:	689b      	ldr	r3, [r3, #8]
 802ab9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802aba2:	2b00      	cmp	r3, #0
 802aba4:	d102      	bne.n	802abac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802aba6:	68bb      	ldr	r3, [r7, #8]
 802aba8:	2200      	movs	r2, #0
 802abaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802abac:	68bb      	ldr	r3, [r7, #8]
 802abae:	781b      	ldrb	r3, [r3, #0]
 802abb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802abb2:	68bb      	ldr	r3, [r7, #8]
 802abb4:	785b      	ldrb	r3, [r3, #1]
 802abb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802abb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 802abba:	68ba      	ldr	r2, [r7, #8]
 802abbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802abbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 802abc0:	68bb      	ldr	r3, [r7, #8]
 802abc2:	78db      	ldrb	r3, [r3, #3]
 802abc4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802abc6:	4313      	orrs	r3, r2
 802abc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802abca:	68fb      	ldr	r3, [r7, #12]
 802abcc:	681b      	ldr	r3, [r3, #0]
 802abce:	22ca      	movs	r2, #202	; 0xca
 802abd0:	625a      	str	r2, [r3, #36]	; 0x24
 802abd2:	68fb      	ldr	r3, [r7, #12]
 802abd4:	681b      	ldr	r3, [r3, #0]
 802abd6:	2253      	movs	r2, #83	; 0x53
 802abd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802abda:	68f8      	ldr	r0, [r7, #12]
 802abdc:	f000 f8e4 	bl	802ada8 <RTC_EnterInitMode>
 802abe0:	4603      	mov	r3, r0
 802abe2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802abe4:	7cfb      	ldrb	r3, [r7, #19]
 802abe6:	2b00      	cmp	r3, #0
 802abe8:	d120      	bne.n	802ac2c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802abea:	68fb      	ldr	r3, [r7, #12]
 802abec:	681a      	ldr	r2, [r3, #0]
 802abee:	697b      	ldr	r3, [r7, #20]
 802abf0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802abf4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802abf8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 802abfa:	68fb      	ldr	r3, [r7, #12]
 802abfc:	681b      	ldr	r3, [r3, #0]
 802abfe:	689a      	ldr	r2, [r3, #8]
 802ac00:	68fb      	ldr	r3, [r7, #12]
 802ac02:	681b      	ldr	r3, [r3, #0]
 802ac04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802ac08:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802ac0a:	68fb      	ldr	r3, [r7, #12]
 802ac0c:	681b      	ldr	r3, [r3, #0]
 802ac0e:	6899      	ldr	r1, [r3, #8]
 802ac10:	68bb      	ldr	r3, [r7, #8]
 802ac12:	68da      	ldr	r2, [r3, #12]
 802ac14:	68bb      	ldr	r3, [r7, #8]
 802ac16:	691b      	ldr	r3, [r3, #16]
 802ac18:	431a      	orrs	r2, r3
 802ac1a:	68fb      	ldr	r3, [r7, #12]
 802ac1c:	681b      	ldr	r3, [r3, #0]
 802ac1e:	430a      	orrs	r2, r1
 802ac20:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ac22:	68f8      	ldr	r0, [r7, #12]
 802ac24:	f000 f8f7 	bl	802ae16 <RTC_ExitInitMode>
 802ac28:	4603      	mov	r3, r0
 802ac2a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ac2c:	7cfb      	ldrb	r3, [r7, #19]
 802ac2e:	2b00      	cmp	r3, #0
 802ac30:	d102      	bne.n	802ac38 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ac32:	68fb      	ldr	r3, [r7, #12]
 802ac34:	2201      	movs	r2, #1
 802ac36:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ac38:	68fb      	ldr	r3, [r7, #12]
 802ac3a:	681b      	ldr	r3, [r3, #0]
 802ac3c:	22ff      	movs	r2, #255	; 0xff
 802ac3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ac40:	68fb      	ldr	r3, [r7, #12]
 802ac42:	2200      	movs	r2, #0
 802ac44:	771a      	strb	r2, [r3, #28]

  return status;
 802ac46:	7cfb      	ldrb	r3, [r7, #19]
}
 802ac48:	4618      	mov	r0, r3
 802ac4a:	371c      	adds	r7, #28
 802ac4c:	46bd      	mov	sp, r7
 802ac4e:	bd90      	pop	{r4, r7, pc}

0802ac50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 802ac50:	b590      	push	{r4, r7, lr}
 802ac52:	b087      	sub	sp, #28
 802ac54:	af00      	add	r7, sp, #0
 802ac56:	60f8      	str	r0, [r7, #12]
 802ac58:	60b9      	str	r1, [r7, #8]
 802ac5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 802ac5c:	2300      	movs	r3, #0
 802ac5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802ac60:	68fb      	ldr	r3, [r7, #12]
 802ac62:	7f1b      	ldrb	r3, [r3, #28]
 802ac64:	2b01      	cmp	r3, #1
 802ac66:	d101      	bne.n	802ac6c <HAL_RTC_SetDate+0x1c>
 802ac68:	2302      	movs	r3, #2
 802ac6a:	e071      	b.n	802ad50 <HAL_RTC_SetDate+0x100>
 802ac6c:	68fb      	ldr	r3, [r7, #12]
 802ac6e:	2201      	movs	r2, #1
 802ac70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802ac72:	68fb      	ldr	r3, [r7, #12]
 802ac74:	2202      	movs	r2, #2
 802ac76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802ac78:	687b      	ldr	r3, [r7, #4]
 802ac7a:	2b00      	cmp	r3, #0
 802ac7c:	d10e      	bne.n	802ac9c <HAL_RTC_SetDate+0x4c>
 802ac7e:	68bb      	ldr	r3, [r7, #8]
 802ac80:	785b      	ldrb	r3, [r3, #1]
 802ac82:	f003 0310 	and.w	r3, r3, #16
 802ac86:	2b00      	cmp	r3, #0
 802ac88:	d008      	beq.n	802ac9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802ac8a:	68bb      	ldr	r3, [r7, #8]
 802ac8c:	785b      	ldrb	r3, [r3, #1]
 802ac8e:	f023 0310 	bic.w	r3, r3, #16
 802ac92:	b2db      	uxtb	r3, r3
 802ac94:	330a      	adds	r3, #10
 802ac96:	b2da      	uxtb	r2, r3
 802ac98:	68bb      	ldr	r3, [r7, #8]
 802ac9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 802ac9c:	687b      	ldr	r3, [r7, #4]
 802ac9e:	2b00      	cmp	r3, #0
 802aca0:	d11c      	bne.n	802acdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802aca2:	68bb      	ldr	r3, [r7, #8]
 802aca4:	78db      	ldrb	r3, [r3, #3]
 802aca6:	4618      	mov	r0, r3
 802aca8:	f000 f8da 	bl	802ae60 <RTC_ByteToBcd2>
 802acac:	4603      	mov	r3, r0
 802acae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802acb0:	68bb      	ldr	r3, [r7, #8]
 802acb2:	785b      	ldrb	r3, [r3, #1]
 802acb4:	4618      	mov	r0, r3
 802acb6:	f000 f8d3 	bl	802ae60 <RTC_ByteToBcd2>
 802acba:	4603      	mov	r3, r0
 802acbc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802acbe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 802acc0:	68bb      	ldr	r3, [r7, #8]
 802acc2:	789b      	ldrb	r3, [r3, #2]
 802acc4:	4618      	mov	r0, r3
 802acc6:	f000 f8cb 	bl	802ae60 <RTC_ByteToBcd2>
 802acca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802accc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 802acd0:	68bb      	ldr	r3, [r7, #8]
 802acd2:	781b      	ldrb	r3, [r3, #0]
 802acd4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802acd6:	4313      	orrs	r3, r2
 802acd8:	617b      	str	r3, [r7, #20]
 802acda:	e00e      	b.n	802acfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802acdc:	68bb      	ldr	r3, [r7, #8]
 802acde:	78db      	ldrb	r3, [r3, #3]
 802ace0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802ace2:	68bb      	ldr	r3, [r7, #8]
 802ace4:	785b      	ldrb	r3, [r3, #1]
 802ace6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802ace8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 802acea:	68ba      	ldr	r2, [r7, #8]
 802acec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802acee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 802acf0:	68bb      	ldr	r3, [r7, #8]
 802acf2:	781b      	ldrb	r3, [r3, #0]
 802acf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802acf6:	4313      	orrs	r3, r2
 802acf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802acfa:	68fb      	ldr	r3, [r7, #12]
 802acfc:	681b      	ldr	r3, [r3, #0]
 802acfe:	22ca      	movs	r2, #202	; 0xca
 802ad00:	625a      	str	r2, [r3, #36]	; 0x24
 802ad02:	68fb      	ldr	r3, [r7, #12]
 802ad04:	681b      	ldr	r3, [r3, #0]
 802ad06:	2253      	movs	r2, #83	; 0x53
 802ad08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802ad0a:	68f8      	ldr	r0, [r7, #12]
 802ad0c:	f000 f84c 	bl	802ada8 <RTC_EnterInitMode>
 802ad10:	4603      	mov	r3, r0
 802ad12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802ad14:	7cfb      	ldrb	r3, [r7, #19]
 802ad16:	2b00      	cmp	r3, #0
 802ad18:	d10c      	bne.n	802ad34 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802ad1a:	68fb      	ldr	r3, [r7, #12]
 802ad1c:	681a      	ldr	r2, [r3, #0]
 802ad1e:	697b      	ldr	r3, [r7, #20]
 802ad20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802ad24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802ad28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ad2a:	68f8      	ldr	r0, [r7, #12]
 802ad2c:	f000 f873 	bl	802ae16 <RTC_ExitInitMode>
 802ad30:	4603      	mov	r3, r0
 802ad32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ad34:	7cfb      	ldrb	r3, [r7, #19]
 802ad36:	2b00      	cmp	r3, #0
 802ad38:	d102      	bne.n	802ad40 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ad3a:	68fb      	ldr	r3, [r7, #12]
 802ad3c:	2201      	movs	r2, #1
 802ad3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ad40:	68fb      	ldr	r3, [r7, #12]
 802ad42:	681b      	ldr	r3, [r3, #0]
 802ad44:	22ff      	movs	r2, #255	; 0xff
 802ad46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ad48:	68fb      	ldr	r3, [r7, #12]
 802ad4a:	2200      	movs	r2, #0
 802ad4c:	771a      	strb	r2, [r3, #28]

  return status;
 802ad4e:	7cfb      	ldrb	r3, [r7, #19]
}
 802ad50:	4618      	mov	r0, r3
 802ad52:	371c      	adds	r7, #28
 802ad54:	46bd      	mov	sp, r7
 802ad56:	bd90      	pop	{r4, r7, pc}

0802ad58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 802ad58:	b580      	push	{r7, lr}
 802ad5a:	b084      	sub	sp, #16
 802ad5c:	af00      	add	r7, sp, #0
 802ad5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802ad60:	2300      	movs	r3, #0
 802ad62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802ad64:	687b      	ldr	r3, [r7, #4]
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	68da      	ldr	r2, [r3, #12]
 802ad6a:	687b      	ldr	r3, [r7, #4]
 802ad6c:	681b      	ldr	r3, [r3, #0]
 802ad6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802ad72:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 802ad74:	f7fc fcc4 	bl	8027700 <HAL_GetTick>
 802ad78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ad7a:	e009      	b.n	802ad90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802ad7c:	f7fc fcc0 	bl	8027700 <HAL_GetTick>
 802ad80:	4602      	mov	r2, r0
 802ad82:	68fb      	ldr	r3, [r7, #12]
 802ad84:	1ad3      	subs	r3, r2, r3
 802ad86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ad8a:	d901      	bls.n	802ad90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802ad8c:	2303      	movs	r3, #3
 802ad8e:	e007      	b.n	802ada0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ad90:	687b      	ldr	r3, [r7, #4]
 802ad92:	681b      	ldr	r3, [r3, #0]
 802ad94:	68db      	ldr	r3, [r3, #12]
 802ad96:	f003 0320 	and.w	r3, r3, #32
 802ad9a:	2b00      	cmp	r3, #0
 802ad9c:	d0ee      	beq.n	802ad7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802ad9e:	2300      	movs	r3, #0
}
 802ada0:	4618      	mov	r0, r3
 802ada2:	3710      	adds	r7, #16
 802ada4:	46bd      	mov	sp, r7
 802ada6:	bd80      	pop	{r7, pc}

0802ada8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802ada8:	b580      	push	{r7, lr}
 802adaa:	b084      	sub	sp, #16
 802adac:	af00      	add	r7, sp, #0
 802adae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802adb0:	2300      	movs	r3, #0
 802adb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802adb4:	2300      	movs	r3, #0
 802adb6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 802adb8:	687b      	ldr	r3, [r7, #4]
 802adba:	681b      	ldr	r3, [r3, #0]
 802adbc:	68db      	ldr	r3, [r3, #12]
 802adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802adc2:	2b00      	cmp	r3, #0
 802adc4:	d122      	bne.n	802ae0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802adc6:	687b      	ldr	r3, [r7, #4]
 802adc8:	681b      	ldr	r3, [r3, #0]
 802adca:	68da      	ldr	r2, [r3, #12]
 802adcc:	687b      	ldr	r3, [r7, #4]
 802adce:	681b      	ldr	r3, [r3, #0]
 802add0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802add4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802add6:	f7fc fc93 	bl	8027700 <HAL_GetTick>
 802adda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802addc:	e00c      	b.n	802adf8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802adde:	f7fc fc8f 	bl	8027700 <HAL_GetTick>
 802ade2:	4602      	mov	r2, r0
 802ade4:	68bb      	ldr	r3, [r7, #8]
 802ade6:	1ad3      	subs	r3, r2, r3
 802ade8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802adec:	d904      	bls.n	802adf8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 802adee:	687b      	ldr	r3, [r7, #4]
 802adf0:	2204      	movs	r2, #4
 802adf2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 802adf4:	2301      	movs	r3, #1
 802adf6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802adf8:	687b      	ldr	r3, [r7, #4]
 802adfa:	681b      	ldr	r3, [r3, #0]
 802adfc:	68db      	ldr	r3, [r3, #12]
 802adfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ae02:	2b00      	cmp	r3, #0
 802ae04:	d102      	bne.n	802ae0c <RTC_EnterInitMode+0x64>
 802ae06:	7bfb      	ldrb	r3, [r7, #15]
 802ae08:	2b01      	cmp	r3, #1
 802ae0a:	d1e8      	bne.n	802adde <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 802ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 802ae0e:	4618      	mov	r0, r3
 802ae10:	3710      	adds	r7, #16
 802ae12:	46bd      	mov	sp, r7
 802ae14:	bd80      	pop	{r7, pc}

0802ae16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802ae16:	b580      	push	{r7, lr}
 802ae18:	b084      	sub	sp, #16
 802ae1a:	af00      	add	r7, sp, #0
 802ae1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802ae1e:	2300      	movs	r3, #0
 802ae20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	681b      	ldr	r3, [r3, #0]
 802ae26:	68da      	ldr	r2, [r3, #12]
 802ae28:	687b      	ldr	r3, [r7, #4]
 802ae2a:	681b      	ldr	r3, [r3, #0]
 802ae2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802ae30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	681b      	ldr	r3, [r3, #0]
 802ae36:	689b      	ldr	r3, [r3, #8]
 802ae38:	f003 0320 	and.w	r3, r3, #32
 802ae3c:	2b00      	cmp	r3, #0
 802ae3e:	d10a      	bne.n	802ae56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802ae40:	6878      	ldr	r0, [r7, #4]
 802ae42:	f7ff ff89 	bl	802ad58 <HAL_RTC_WaitForSynchro>
 802ae46:	4603      	mov	r3, r0
 802ae48:	2b00      	cmp	r3, #0
 802ae4a:	d004      	beq.n	802ae56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802ae4c:	687b      	ldr	r3, [r7, #4]
 802ae4e:	2204      	movs	r2, #4
 802ae50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 802ae52:	2301      	movs	r3, #1
 802ae54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 802ae58:	4618      	mov	r0, r3
 802ae5a:	3710      	adds	r7, #16
 802ae5c:	46bd      	mov	sp, r7
 802ae5e:	bd80      	pop	{r7, pc}

0802ae60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 802ae60:	b480      	push	{r7}
 802ae62:	b085      	sub	sp, #20
 802ae64:	af00      	add	r7, sp, #0
 802ae66:	4603      	mov	r3, r0
 802ae68:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 802ae6a:	2300      	movs	r3, #0
 802ae6c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 802ae6e:	e005      	b.n	802ae7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 802ae70:	7bfb      	ldrb	r3, [r7, #15]
 802ae72:	3301      	adds	r3, #1
 802ae74:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 802ae76:	79fb      	ldrb	r3, [r7, #7]
 802ae78:	3b0a      	subs	r3, #10
 802ae7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 802ae7c:	79fb      	ldrb	r3, [r7, #7]
 802ae7e:	2b09      	cmp	r3, #9
 802ae80:	d8f6      	bhi.n	802ae70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 802ae82:	7bfb      	ldrb	r3, [r7, #15]
 802ae84:	011b      	lsls	r3, r3, #4
 802ae86:	b2da      	uxtb	r2, r3
 802ae88:	79fb      	ldrb	r3, [r7, #7]
 802ae8a:	4313      	orrs	r3, r2
 802ae8c:	b2db      	uxtb	r3, r3
}
 802ae8e:	4618      	mov	r0, r3
 802ae90:	3714      	adds	r7, #20
 802ae92:	46bd      	mov	sp, r7
 802ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae98:	4770      	bx	lr

0802ae9a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802ae9a:	b580      	push	{r7, lr}
 802ae9c:	b082      	sub	sp, #8
 802ae9e:	af00      	add	r7, sp, #0
 802aea0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802aea2:	687b      	ldr	r3, [r7, #4]
 802aea4:	2b00      	cmp	r3, #0
 802aea6:	d101      	bne.n	802aeac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802aea8:	2301      	movs	r3, #1
 802aeaa:	e07b      	b.n	802afa4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aeb0:	2b00      	cmp	r3, #0
 802aeb2:	d108      	bne.n	802aec6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802aeb4:	687b      	ldr	r3, [r7, #4]
 802aeb6:	685b      	ldr	r3, [r3, #4]
 802aeb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802aebc:	d009      	beq.n	802aed2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802aebe:	687b      	ldr	r3, [r7, #4]
 802aec0:	2200      	movs	r2, #0
 802aec2:	61da      	str	r2, [r3, #28]
 802aec4:	e005      	b.n	802aed2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802aec6:	687b      	ldr	r3, [r7, #4]
 802aec8:	2200      	movs	r2, #0
 802aeca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802aecc:	687b      	ldr	r3, [r7, #4]
 802aece:	2200      	movs	r2, #0
 802aed0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802aed2:	687b      	ldr	r3, [r7, #4]
 802aed4:	2200      	movs	r2, #0
 802aed6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802aed8:	687b      	ldr	r3, [r7, #4]
 802aeda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802aede:	b2db      	uxtb	r3, r3
 802aee0:	2b00      	cmp	r3, #0
 802aee2:	d106      	bne.n	802aef2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802aee4:	687b      	ldr	r3, [r7, #4]
 802aee6:	2200      	movs	r2, #0
 802aee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802aeec:	6878      	ldr	r0, [r7, #4]
 802aeee:	f7fb f937 	bl	8026160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802aef2:	687b      	ldr	r3, [r7, #4]
 802aef4:	2202      	movs	r2, #2
 802aef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802aefa:	687b      	ldr	r3, [r7, #4]
 802aefc:	681b      	ldr	r3, [r3, #0]
 802aefe:	681a      	ldr	r2, [r3, #0]
 802af00:	687b      	ldr	r3, [r7, #4]
 802af02:	681b      	ldr	r3, [r3, #0]
 802af04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802af08:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802af0a:	687b      	ldr	r3, [r7, #4]
 802af0c:	685b      	ldr	r3, [r3, #4]
 802af0e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802af12:	687b      	ldr	r3, [r7, #4]
 802af14:	689b      	ldr	r3, [r3, #8]
 802af16:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802af1a:	431a      	orrs	r2, r3
 802af1c:	687b      	ldr	r3, [r7, #4]
 802af1e:	68db      	ldr	r3, [r3, #12]
 802af20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802af24:	431a      	orrs	r2, r3
 802af26:	687b      	ldr	r3, [r7, #4]
 802af28:	691b      	ldr	r3, [r3, #16]
 802af2a:	f003 0302 	and.w	r3, r3, #2
 802af2e:	431a      	orrs	r2, r3
 802af30:	687b      	ldr	r3, [r7, #4]
 802af32:	695b      	ldr	r3, [r3, #20]
 802af34:	f003 0301 	and.w	r3, r3, #1
 802af38:	431a      	orrs	r2, r3
 802af3a:	687b      	ldr	r3, [r7, #4]
 802af3c:	699b      	ldr	r3, [r3, #24]
 802af3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802af42:	431a      	orrs	r2, r3
 802af44:	687b      	ldr	r3, [r7, #4]
 802af46:	69db      	ldr	r3, [r3, #28]
 802af48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802af4c:	431a      	orrs	r2, r3
 802af4e:	687b      	ldr	r3, [r7, #4]
 802af50:	6a1b      	ldr	r3, [r3, #32]
 802af52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802af56:	ea42 0103 	orr.w	r1, r2, r3
 802af5a:	687b      	ldr	r3, [r7, #4]
 802af5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802af5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802af62:	687b      	ldr	r3, [r7, #4]
 802af64:	681b      	ldr	r3, [r3, #0]
 802af66:	430a      	orrs	r2, r1
 802af68:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802af6a:	687b      	ldr	r3, [r7, #4]
 802af6c:	699b      	ldr	r3, [r3, #24]
 802af6e:	0c1b      	lsrs	r3, r3, #16
 802af70:	f003 0104 	and.w	r1, r3, #4
 802af74:	687b      	ldr	r3, [r7, #4]
 802af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802af78:	f003 0210 	and.w	r2, r3, #16
 802af7c:	687b      	ldr	r3, [r7, #4]
 802af7e:	681b      	ldr	r3, [r3, #0]
 802af80:	430a      	orrs	r2, r1
 802af82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802af84:	687b      	ldr	r3, [r7, #4]
 802af86:	681b      	ldr	r3, [r3, #0]
 802af88:	69da      	ldr	r2, [r3, #28]
 802af8a:	687b      	ldr	r3, [r7, #4]
 802af8c:	681b      	ldr	r3, [r3, #0]
 802af8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802af92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802af94:	687b      	ldr	r3, [r7, #4]
 802af96:	2200      	movs	r2, #0
 802af98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802af9a:	687b      	ldr	r3, [r7, #4]
 802af9c:	2201      	movs	r2, #1
 802af9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802afa2:	2300      	movs	r3, #0
}
 802afa4:	4618      	mov	r0, r3
 802afa6:	3708      	adds	r7, #8
 802afa8:	46bd      	mov	sp, r7
 802afaa:	bd80      	pop	{r7, pc}

0802afac <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 802afac:	b580      	push	{r7, lr}
 802afae:	b082      	sub	sp, #8
 802afb0:	af00      	add	r7, sp, #0
 802afb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802afb4:	687b      	ldr	r3, [r7, #4]
 802afb6:	2b00      	cmp	r3, #0
 802afb8:	d101      	bne.n	802afbe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 802afba:	2301      	movs	r3, #1
 802afbc:	e01a      	b.n	802aff4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802afbe:	687b      	ldr	r3, [r7, #4]
 802afc0:	2202      	movs	r2, #2
 802afc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 802afc6:	687b      	ldr	r3, [r7, #4]
 802afc8:	681b      	ldr	r3, [r3, #0]
 802afca:	681a      	ldr	r2, [r3, #0]
 802afcc:	687b      	ldr	r3, [r7, #4]
 802afce:	681b      	ldr	r3, [r3, #0]
 802afd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802afd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 802afd6:	6878      	ldr	r0, [r7, #4]
 802afd8:	f7fb f932 	bl	8026240 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802afdc:	687b      	ldr	r3, [r7, #4]
 802afde:	2200      	movs	r2, #0
 802afe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802afe2:	687b      	ldr	r3, [r7, #4]
 802afe4:	2200      	movs	r2, #0
 802afe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 802afea:	687b      	ldr	r3, [r7, #4]
 802afec:	2200      	movs	r2, #0
 802afee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802aff2:	2300      	movs	r3, #0
}
 802aff4:	4618      	mov	r0, r3
 802aff6:	3708      	adds	r7, #8
 802aff8:	46bd      	mov	sp, r7
 802affa:	bd80      	pop	{r7, pc}

0802affc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802affc:	b580      	push	{r7, lr}
 802affe:	b088      	sub	sp, #32
 802b000:	af00      	add	r7, sp, #0
 802b002:	60f8      	str	r0, [r7, #12]
 802b004:	60b9      	str	r1, [r7, #8]
 802b006:	603b      	str	r3, [r7, #0]
 802b008:	4613      	mov	r3, r2
 802b00a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802b00c:	2300      	movs	r3, #0
 802b00e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b010:	68fb      	ldr	r3, [r7, #12]
 802b012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b016:	2b01      	cmp	r3, #1
 802b018:	d101      	bne.n	802b01e <HAL_SPI_Transmit+0x22>
 802b01a:	2302      	movs	r3, #2
 802b01c:	e126      	b.n	802b26c <HAL_SPI_Transmit+0x270>
 802b01e:	68fb      	ldr	r3, [r7, #12]
 802b020:	2201      	movs	r2, #1
 802b022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b026:	f7fc fb6b 	bl	8027700 <HAL_GetTick>
 802b02a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802b02c:	88fb      	ldrh	r3, [r7, #6]
 802b02e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802b030:	68fb      	ldr	r3, [r7, #12]
 802b032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b036:	b2db      	uxtb	r3, r3
 802b038:	2b01      	cmp	r3, #1
 802b03a:	d002      	beq.n	802b042 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802b03c:	2302      	movs	r3, #2
 802b03e:	77fb      	strb	r3, [r7, #31]
    goto error;
 802b040:	e10b      	b.n	802b25a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802b042:	68bb      	ldr	r3, [r7, #8]
 802b044:	2b00      	cmp	r3, #0
 802b046:	d002      	beq.n	802b04e <HAL_SPI_Transmit+0x52>
 802b048:	88fb      	ldrh	r3, [r7, #6]
 802b04a:	2b00      	cmp	r3, #0
 802b04c:	d102      	bne.n	802b054 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802b04e:	2301      	movs	r3, #1
 802b050:	77fb      	strb	r3, [r7, #31]
    goto error;
 802b052:	e102      	b.n	802b25a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802b054:	68fb      	ldr	r3, [r7, #12]
 802b056:	2203      	movs	r2, #3
 802b058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b05c:	68fb      	ldr	r3, [r7, #12]
 802b05e:	2200      	movs	r2, #0
 802b060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802b062:	68fb      	ldr	r3, [r7, #12]
 802b064:	68ba      	ldr	r2, [r7, #8]
 802b066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802b068:	68fb      	ldr	r3, [r7, #12]
 802b06a:	88fa      	ldrh	r2, [r7, #6]
 802b06c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802b06e:	68fb      	ldr	r3, [r7, #12]
 802b070:	88fa      	ldrh	r2, [r7, #6]
 802b072:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802b074:	68fb      	ldr	r3, [r7, #12]
 802b076:	2200      	movs	r2, #0
 802b078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802b07a:	68fb      	ldr	r3, [r7, #12]
 802b07c:	2200      	movs	r2, #0
 802b07e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802b080:	68fb      	ldr	r3, [r7, #12]
 802b082:	2200      	movs	r2, #0
 802b084:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802b086:	68fb      	ldr	r3, [r7, #12]
 802b088:	2200      	movs	r2, #0
 802b08a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802b08c:	68fb      	ldr	r3, [r7, #12]
 802b08e:	2200      	movs	r2, #0
 802b090:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802b092:	68fb      	ldr	r3, [r7, #12]
 802b094:	689b      	ldr	r3, [r3, #8]
 802b096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b09a:	d10f      	bne.n	802b0bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802b09c:	68fb      	ldr	r3, [r7, #12]
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	681a      	ldr	r2, [r3, #0]
 802b0a2:	68fb      	ldr	r3, [r7, #12]
 802b0a4:	681b      	ldr	r3, [r3, #0]
 802b0a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b0aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 802b0ac:	68fb      	ldr	r3, [r7, #12]
 802b0ae:	681b      	ldr	r3, [r3, #0]
 802b0b0:	681a      	ldr	r2, [r3, #0]
 802b0b2:	68fb      	ldr	r3, [r7, #12]
 802b0b4:	681b      	ldr	r3, [r3, #0]
 802b0b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802b0ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b0bc:	68fb      	ldr	r3, [r7, #12]
 802b0be:	681b      	ldr	r3, [r3, #0]
 802b0c0:	681b      	ldr	r3, [r3, #0]
 802b0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b0c6:	2b40      	cmp	r3, #64	; 0x40
 802b0c8:	d007      	beq.n	802b0da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b0ca:	68fb      	ldr	r3, [r7, #12]
 802b0cc:	681b      	ldr	r3, [r3, #0]
 802b0ce:	681a      	ldr	r2, [r3, #0]
 802b0d0:	68fb      	ldr	r3, [r7, #12]
 802b0d2:	681b      	ldr	r3, [r3, #0]
 802b0d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b0d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802b0da:	68fb      	ldr	r3, [r7, #12]
 802b0dc:	68db      	ldr	r3, [r3, #12]
 802b0de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b0e2:	d14b      	bne.n	802b17c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b0e4:	68fb      	ldr	r3, [r7, #12]
 802b0e6:	685b      	ldr	r3, [r3, #4]
 802b0e8:	2b00      	cmp	r3, #0
 802b0ea:	d002      	beq.n	802b0f2 <HAL_SPI_Transmit+0xf6>
 802b0ec:	8afb      	ldrh	r3, [r7, #22]
 802b0ee:	2b01      	cmp	r3, #1
 802b0f0:	d13e      	bne.n	802b170 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b0f2:	68fb      	ldr	r3, [r7, #12]
 802b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b0f6:	881a      	ldrh	r2, [r3, #0]
 802b0f8:	68fb      	ldr	r3, [r7, #12]
 802b0fa:	681b      	ldr	r3, [r3, #0]
 802b0fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802b0fe:	68fb      	ldr	r3, [r7, #12]
 802b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b102:	1c9a      	adds	r2, r3, #2
 802b104:	68fb      	ldr	r3, [r7, #12]
 802b106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b108:	68fb      	ldr	r3, [r7, #12]
 802b10a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b10c:	b29b      	uxth	r3, r3
 802b10e:	3b01      	subs	r3, #1
 802b110:	b29a      	uxth	r2, r3
 802b112:	68fb      	ldr	r3, [r7, #12]
 802b114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802b116:	e02b      	b.n	802b170 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802b118:	68fb      	ldr	r3, [r7, #12]
 802b11a:	681b      	ldr	r3, [r3, #0]
 802b11c:	689b      	ldr	r3, [r3, #8]
 802b11e:	f003 0302 	and.w	r3, r3, #2
 802b122:	2b02      	cmp	r3, #2
 802b124:	d112      	bne.n	802b14c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b126:	68fb      	ldr	r3, [r7, #12]
 802b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b12a:	881a      	ldrh	r2, [r3, #0]
 802b12c:	68fb      	ldr	r3, [r7, #12]
 802b12e:	681b      	ldr	r3, [r3, #0]
 802b130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802b132:	68fb      	ldr	r3, [r7, #12]
 802b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b136:	1c9a      	adds	r2, r3, #2
 802b138:	68fb      	ldr	r3, [r7, #12]
 802b13a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b13c:	68fb      	ldr	r3, [r7, #12]
 802b13e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b140:	b29b      	uxth	r3, r3
 802b142:	3b01      	subs	r3, #1
 802b144:	b29a      	uxth	r2, r3
 802b146:	68fb      	ldr	r3, [r7, #12]
 802b148:	86da      	strh	r2, [r3, #54]	; 0x36
 802b14a:	e011      	b.n	802b170 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b14c:	f7fc fad8 	bl	8027700 <HAL_GetTick>
 802b150:	4602      	mov	r2, r0
 802b152:	69bb      	ldr	r3, [r7, #24]
 802b154:	1ad3      	subs	r3, r2, r3
 802b156:	683a      	ldr	r2, [r7, #0]
 802b158:	429a      	cmp	r2, r3
 802b15a:	d803      	bhi.n	802b164 <HAL_SPI_Transmit+0x168>
 802b15c:	683b      	ldr	r3, [r7, #0]
 802b15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b162:	d102      	bne.n	802b16a <HAL_SPI_Transmit+0x16e>
 802b164:	683b      	ldr	r3, [r7, #0]
 802b166:	2b00      	cmp	r3, #0
 802b168:	d102      	bne.n	802b170 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 802b16a:	2303      	movs	r3, #3
 802b16c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802b16e:	e074      	b.n	802b25a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802b170:	68fb      	ldr	r3, [r7, #12]
 802b172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b174:	b29b      	uxth	r3, r3
 802b176:	2b00      	cmp	r3, #0
 802b178:	d1ce      	bne.n	802b118 <HAL_SPI_Transmit+0x11c>
 802b17a:	e04c      	b.n	802b216 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b17c:	68fb      	ldr	r3, [r7, #12]
 802b17e:	685b      	ldr	r3, [r3, #4]
 802b180:	2b00      	cmp	r3, #0
 802b182:	d002      	beq.n	802b18a <HAL_SPI_Transmit+0x18e>
 802b184:	8afb      	ldrh	r3, [r7, #22]
 802b186:	2b01      	cmp	r3, #1
 802b188:	d140      	bne.n	802b20c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b18a:	68fb      	ldr	r3, [r7, #12]
 802b18c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b18e:	68fb      	ldr	r3, [r7, #12]
 802b190:	681b      	ldr	r3, [r3, #0]
 802b192:	330c      	adds	r3, #12
 802b194:	7812      	ldrb	r2, [r2, #0]
 802b196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802b198:	68fb      	ldr	r3, [r7, #12]
 802b19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b19c:	1c5a      	adds	r2, r3, #1
 802b19e:	68fb      	ldr	r3, [r7, #12]
 802b1a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b1a2:	68fb      	ldr	r3, [r7, #12]
 802b1a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b1a6:	b29b      	uxth	r3, r3
 802b1a8:	3b01      	subs	r3, #1
 802b1aa:	b29a      	uxth	r2, r3
 802b1ac:	68fb      	ldr	r3, [r7, #12]
 802b1ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 802b1b0:	e02c      	b.n	802b20c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802b1b2:	68fb      	ldr	r3, [r7, #12]
 802b1b4:	681b      	ldr	r3, [r3, #0]
 802b1b6:	689b      	ldr	r3, [r3, #8]
 802b1b8:	f003 0302 	and.w	r3, r3, #2
 802b1bc:	2b02      	cmp	r3, #2
 802b1be:	d113      	bne.n	802b1e8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b1c0:	68fb      	ldr	r3, [r7, #12]
 802b1c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	681b      	ldr	r3, [r3, #0]
 802b1c8:	330c      	adds	r3, #12
 802b1ca:	7812      	ldrb	r2, [r2, #0]
 802b1cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802b1ce:	68fb      	ldr	r3, [r7, #12]
 802b1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b1d2:	1c5a      	adds	r2, r3, #1
 802b1d4:	68fb      	ldr	r3, [r7, #12]
 802b1d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b1d8:	68fb      	ldr	r3, [r7, #12]
 802b1da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b1dc:	b29b      	uxth	r3, r3
 802b1de:	3b01      	subs	r3, #1
 802b1e0:	b29a      	uxth	r2, r3
 802b1e2:	68fb      	ldr	r3, [r7, #12]
 802b1e4:	86da      	strh	r2, [r3, #54]	; 0x36
 802b1e6:	e011      	b.n	802b20c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b1e8:	f7fc fa8a 	bl	8027700 <HAL_GetTick>
 802b1ec:	4602      	mov	r2, r0
 802b1ee:	69bb      	ldr	r3, [r7, #24]
 802b1f0:	1ad3      	subs	r3, r2, r3
 802b1f2:	683a      	ldr	r2, [r7, #0]
 802b1f4:	429a      	cmp	r2, r3
 802b1f6:	d803      	bhi.n	802b200 <HAL_SPI_Transmit+0x204>
 802b1f8:	683b      	ldr	r3, [r7, #0]
 802b1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b1fe:	d102      	bne.n	802b206 <HAL_SPI_Transmit+0x20a>
 802b200:	683b      	ldr	r3, [r7, #0]
 802b202:	2b00      	cmp	r3, #0
 802b204:	d102      	bne.n	802b20c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 802b206:	2303      	movs	r3, #3
 802b208:	77fb      	strb	r3, [r7, #31]
          goto error;
 802b20a:	e026      	b.n	802b25a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802b20c:	68fb      	ldr	r3, [r7, #12]
 802b20e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b210:	b29b      	uxth	r3, r3
 802b212:	2b00      	cmp	r3, #0
 802b214:	d1cd      	bne.n	802b1b2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b216:	69ba      	ldr	r2, [r7, #24]
 802b218:	6839      	ldr	r1, [r7, #0]
 802b21a:	68f8      	ldr	r0, [r7, #12]
 802b21c:	f000 fcec 	bl	802bbf8 <SPI_EndRxTxTransaction>
 802b220:	4603      	mov	r3, r0
 802b222:	2b00      	cmp	r3, #0
 802b224:	d002      	beq.n	802b22c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b226:	68fb      	ldr	r3, [r7, #12]
 802b228:	2220      	movs	r2, #32
 802b22a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802b22c:	68fb      	ldr	r3, [r7, #12]
 802b22e:	689b      	ldr	r3, [r3, #8]
 802b230:	2b00      	cmp	r3, #0
 802b232:	d10a      	bne.n	802b24a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b234:	2300      	movs	r3, #0
 802b236:	613b      	str	r3, [r7, #16]
 802b238:	68fb      	ldr	r3, [r7, #12]
 802b23a:	681b      	ldr	r3, [r3, #0]
 802b23c:	68db      	ldr	r3, [r3, #12]
 802b23e:	613b      	str	r3, [r7, #16]
 802b240:	68fb      	ldr	r3, [r7, #12]
 802b242:	681b      	ldr	r3, [r3, #0]
 802b244:	689b      	ldr	r3, [r3, #8]
 802b246:	613b      	str	r3, [r7, #16]
 802b248:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b24a:	68fb      	ldr	r3, [r7, #12]
 802b24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b24e:	2b00      	cmp	r3, #0
 802b250:	d002      	beq.n	802b258 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802b252:	2301      	movs	r3, #1
 802b254:	77fb      	strb	r3, [r7, #31]
 802b256:	e000      	b.n	802b25a <HAL_SPI_Transmit+0x25e>
  }

error:
 802b258:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b25a:	68fb      	ldr	r3, [r7, #12]
 802b25c:	2201      	movs	r2, #1
 802b25e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802b262:	68fb      	ldr	r3, [r7, #12]
 802b264:	2200      	movs	r2, #0
 802b266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b26a:	7ffb      	ldrb	r3, [r7, #31]
}
 802b26c:	4618      	mov	r0, r3
 802b26e:	3720      	adds	r7, #32
 802b270:	46bd      	mov	sp, r7
 802b272:	bd80      	pop	{r7, pc}

0802b274 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802b274:	b580      	push	{r7, lr}
 802b276:	b088      	sub	sp, #32
 802b278:	af02      	add	r7, sp, #8
 802b27a:	60f8      	str	r0, [r7, #12]
 802b27c:	60b9      	str	r1, [r7, #8]
 802b27e:	603b      	str	r3, [r7, #0]
 802b280:	4613      	mov	r3, r2
 802b282:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802b284:	2300      	movs	r3, #0
 802b286:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 802b288:	68fb      	ldr	r3, [r7, #12]
 802b28a:	685b      	ldr	r3, [r3, #4]
 802b28c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b290:	d112      	bne.n	802b2b8 <HAL_SPI_Receive+0x44>
 802b292:	68fb      	ldr	r3, [r7, #12]
 802b294:	689b      	ldr	r3, [r3, #8]
 802b296:	2b00      	cmp	r3, #0
 802b298:	d10e      	bne.n	802b2b8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802b29a:	68fb      	ldr	r3, [r7, #12]
 802b29c:	2204      	movs	r2, #4
 802b29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802b2a2:	88fa      	ldrh	r2, [r7, #6]
 802b2a4:	683b      	ldr	r3, [r7, #0]
 802b2a6:	9300      	str	r3, [sp, #0]
 802b2a8:	4613      	mov	r3, r2
 802b2aa:	68ba      	ldr	r2, [r7, #8]
 802b2ac:	68b9      	ldr	r1, [r7, #8]
 802b2ae:	68f8      	ldr	r0, [r7, #12]
 802b2b0:	f000 f8f1 	bl	802b496 <HAL_SPI_TransmitReceive>
 802b2b4:	4603      	mov	r3, r0
 802b2b6:	e0ea      	b.n	802b48e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b2b8:	68fb      	ldr	r3, [r7, #12]
 802b2ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b2be:	2b01      	cmp	r3, #1
 802b2c0:	d101      	bne.n	802b2c6 <HAL_SPI_Receive+0x52>
 802b2c2:	2302      	movs	r3, #2
 802b2c4:	e0e3      	b.n	802b48e <HAL_SPI_Receive+0x21a>
 802b2c6:	68fb      	ldr	r3, [r7, #12]
 802b2c8:	2201      	movs	r2, #1
 802b2ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b2ce:	f7fc fa17 	bl	8027700 <HAL_GetTick>
 802b2d2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 802b2d4:	68fb      	ldr	r3, [r7, #12]
 802b2d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b2da:	b2db      	uxtb	r3, r3
 802b2dc:	2b01      	cmp	r3, #1
 802b2de:	d002      	beq.n	802b2e6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 802b2e0:	2302      	movs	r3, #2
 802b2e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b2e4:	e0ca      	b.n	802b47c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 802b2e6:	68bb      	ldr	r3, [r7, #8]
 802b2e8:	2b00      	cmp	r3, #0
 802b2ea:	d002      	beq.n	802b2f2 <HAL_SPI_Receive+0x7e>
 802b2ec:	88fb      	ldrh	r3, [r7, #6]
 802b2ee:	2b00      	cmp	r3, #0
 802b2f0:	d102      	bne.n	802b2f8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802b2f2:	2301      	movs	r3, #1
 802b2f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b2f6:	e0c1      	b.n	802b47c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 802b2f8:	68fb      	ldr	r3, [r7, #12]
 802b2fa:	2204      	movs	r2, #4
 802b2fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b300:	68fb      	ldr	r3, [r7, #12]
 802b302:	2200      	movs	r2, #0
 802b304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802b306:	68fb      	ldr	r3, [r7, #12]
 802b308:	68ba      	ldr	r2, [r7, #8]
 802b30a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802b30c:	68fb      	ldr	r3, [r7, #12]
 802b30e:	88fa      	ldrh	r2, [r7, #6]
 802b310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802b312:	68fb      	ldr	r3, [r7, #12]
 802b314:	88fa      	ldrh	r2, [r7, #6]
 802b316:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 802b318:	68fb      	ldr	r3, [r7, #12]
 802b31a:	2200      	movs	r2, #0
 802b31c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802b31e:	68fb      	ldr	r3, [r7, #12]
 802b320:	2200      	movs	r2, #0
 802b322:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 802b324:	68fb      	ldr	r3, [r7, #12]
 802b326:	2200      	movs	r2, #0
 802b328:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 802b32a:	68fb      	ldr	r3, [r7, #12]
 802b32c:	2200      	movs	r2, #0
 802b32e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802b330:	68fb      	ldr	r3, [r7, #12]
 802b332:	2200      	movs	r2, #0
 802b334:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802b336:	68fb      	ldr	r3, [r7, #12]
 802b338:	689b      	ldr	r3, [r3, #8]
 802b33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b33e:	d10f      	bne.n	802b360 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802b340:	68fb      	ldr	r3, [r7, #12]
 802b342:	681b      	ldr	r3, [r3, #0]
 802b344:	681a      	ldr	r2, [r3, #0]
 802b346:	68fb      	ldr	r3, [r7, #12]
 802b348:	681b      	ldr	r3, [r3, #0]
 802b34a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b34e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802b350:	68fb      	ldr	r3, [r7, #12]
 802b352:	681b      	ldr	r3, [r3, #0]
 802b354:	681a      	ldr	r2, [r3, #0]
 802b356:	68fb      	ldr	r3, [r7, #12]
 802b358:	681b      	ldr	r3, [r3, #0]
 802b35a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802b35e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b360:	68fb      	ldr	r3, [r7, #12]
 802b362:	681b      	ldr	r3, [r3, #0]
 802b364:	681b      	ldr	r3, [r3, #0]
 802b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b36a:	2b40      	cmp	r3, #64	; 0x40
 802b36c:	d007      	beq.n	802b37e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b36e:	68fb      	ldr	r3, [r7, #12]
 802b370:	681b      	ldr	r3, [r3, #0]
 802b372:	681a      	ldr	r2, [r3, #0]
 802b374:	68fb      	ldr	r3, [r7, #12]
 802b376:	681b      	ldr	r3, [r3, #0]
 802b378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b37c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802b37e:	68fb      	ldr	r3, [r7, #12]
 802b380:	68db      	ldr	r3, [r3, #12]
 802b382:	2b00      	cmp	r3, #0
 802b384:	d162      	bne.n	802b44c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 802b386:	e02e      	b.n	802b3e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802b388:	68fb      	ldr	r3, [r7, #12]
 802b38a:	681b      	ldr	r3, [r3, #0]
 802b38c:	689b      	ldr	r3, [r3, #8]
 802b38e:	f003 0301 	and.w	r3, r3, #1
 802b392:	2b01      	cmp	r3, #1
 802b394:	d115      	bne.n	802b3c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802b396:	68fb      	ldr	r3, [r7, #12]
 802b398:	681b      	ldr	r3, [r3, #0]
 802b39a:	f103 020c 	add.w	r2, r3, #12
 802b39e:	68fb      	ldr	r3, [r7, #12]
 802b3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b3a2:	7812      	ldrb	r2, [r2, #0]
 802b3a4:	b2d2      	uxtb	r2, r2
 802b3a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802b3a8:	68fb      	ldr	r3, [r7, #12]
 802b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b3ac:	1c5a      	adds	r2, r3, #1
 802b3ae:	68fb      	ldr	r3, [r7, #12]
 802b3b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b3b2:	68fb      	ldr	r3, [r7, #12]
 802b3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b3b6:	b29b      	uxth	r3, r3
 802b3b8:	3b01      	subs	r3, #1
 802b3ba:	b29a      	uxth	r2, r3
 802b3bc:	68fb      	ldr	r3, [r7, #12]
 802b3be:	87da      	strh	r2, [r3, #62]	; 0x3e
 802b3c0:	e011      	b.n	802b3e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b3c2:	f7fc f99d 	bl	8027700 <HAL_GetTick>
 802b3c6:	4602      	mov	r2, r0
 802b3c8:	693b      	ldr	r3, [r7, #16]
 802b3ca:	1ad3      	subs	r3, r2, r3
 802b3cc:	683a      	ldr	r2, [r7, #0]
 802b3ce:	429a      	cmp	r2, r3
 802b3d0:	d803      	bhi.n	802b3da <HAL_SPI_Receive+0x166>
 802b3d2:	683b      	ldr	r3, [r7, #0]
 802b3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b3d8:	d102      	bne.n	802b3e0 <HAL_SPI_Receive+0x16c>
 802b3da:	683b      	ldr	r3, [r7, #0]
 802b3dc:	2b00      	cmp	r3, #0
 802b3de:	d102      	bne.n	802b3e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 802b3e0:	2303      	movs	r3, #3
 802b3e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 802b3e4:	e04a      	b.n	802b47c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802b3e6:	68fb      	ldr	r3, [r7, #12]
 802b3e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b3ea:	b29b      	uxth	r3, r3
 802b3ec:	2b00      	cmp	r3, #0
 802b3ee:	d1cb      	bne.n	802b388 <HAL_SPI_Receive+0x114>
 802b3f0:	e031      	b.n	802b456 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802b3f2:	68fb      	ldr	r3, [r7, #12]
 802b3f4:	681b      	ldr	r3, [r3, #0]
 802b3f6:	689b      	ldr	r3, [r3, #8]
 802b3f8:	f003 0301 	and.w	r3, r3, #1
 802b3fc:	2b01      	cmp	r3, #1
 802b3fe:	d113      	bne.n	802b428 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802b400:	68fb      	ldr	r3, [r7, #12]
 802b402:	681b      	ldr	r3, [r3, #0]
 802b404:	68da      	ldr	r2, [r3, #12]
 802b406:	68fb      	ldr	r3, [r7, #12]
 802b408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b40a:	b292      	uxth	r2, r2
 802b40c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802b40e:	68fb      	ldr	r3, [r7, #12]
 802b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b412:	1c9a      	adds	r2, r3, #2
 802b414:	68fb      	ldr	r3, [r7, #12]
 802b416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b418:	68fb      	ldr	r3, [r7, #12]
 802b41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b41c:	b29b      	uxth	r3, r3
 802b41e:	3b01      	subs	r3, #1
 802b420:	b29a      	uxth	r2, r3
 802b422:	68fb      	ldr	r3, [r7, #12]
 802b424:	87da      	strh	r2, [r3, #62]	; 0x3e
 802b426:	e011      	b.n	802b44c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b428:	f7fc f96a 	bl	8027700 <HAL_GetTick>
 802b42c:	4602      	mov	r2, r0
 802b42e:	693b      	ldr	r3, [r7, #16]
 802b430:	1ad3      	subs	r3, r2, r3
 802b432:	683a      	ldr	r2, [r7, #0]
 802b434:	429a      	cmp	r2, r3
 802b436:	d803      	bhi.n	802b440 <HAL_SPI_Receive+0x1cc>
 802b438:	683b      	ldr	r3, [r7, #0]
 802b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b43e:	d102      	bne.n	802b446 <HAL_SPI_Receive+0x1d2>
 802b440:	683b      	ldr	r3, [r7, #0]
 802b442:	2b00      	cmp	r3, #0
 802b444:	d102      	bne.n	802b44c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 802b446:	2303      	movs	r3, #3
 802b448:	75fb      	strb	r3, [r7, #23]
          goto error;
 802b44a:	e017      	b.n	802b47c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802b44c:	68fb      	ldr	r3, [r7, #12]
 802b44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b450:	b29b      	uxth	r3, r3
 802b452:	2b00      	cmp	r3, #0
 802b454:	d1cd      	bne.n	802b3f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b456:	693a      	ldr	r2, [r7, #16]
 802b458:	6839      	ldr	r1, [r7, #0]
 802b45a:	68f8      	ldr	r0, [r7, #12]
 802b45c:	f000 fb66 	bl	802bb2c <SPI_EndRxTransaction>
 802b460:	4603      	mov	r3, r0
 802b462:	2b00      	cmp	r3, #0
 802b464:	d002      	beq.n	802b46c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b466:	68fb      	ldr	r3, [r7, #12]
 802b468:	2220      	movs	r2, #32
 802b46a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b46c:	68fb      	ldr	r3, [r7, #12]
 802b46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b470:	2b00      	cmp	r3, #0
 802b472:	d002      	beq.n	802b47a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 802b474:	2301      	movs	r3, #1
 802b476:	75fb      	strb	r3, [r7, #23]
 802b478:	e000      	b.n	802b47c <HAL_SPI_Receive+0x208>
  }

error :
 802b47a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b47c:	68fb      	ldr	r3, [r7, #12]
 802b47e:	2201      	movs	r2, #1
 802b480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802b484:	68fb      	ldr	r3, [r7, #12]
 802b486:	2200      	movs	r2, #0
 802b488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b48c:	7dfb      	ldrb	r3, [r7, #23]
}
 802b48e:	4618      	mov	r0, r3
 802b490:	3718      	adds	r7, #24
 802b492:	46bd      	mov	sp, r7
 802b494:	bd80      	pop	{r7, pc}

0802b496 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 802b496:	b580      	push	{r7, lr}
 802b498:	b08c      	sub	sp, #48	; 0x30
 802b49a:	af00      	add	r7, sp, #0
 802b49c:	60f8      	str	r0, [r7, #12]
 802b49e:	60b9      	str	r1, [r7, #8]
 802b4a0:	607a      	str	r2, [r7, #4]
 802b4a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802b4a4:	2301      	movs	r3, #1
 802b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802b4a8:	2300      	movs	r3, #0
 802b4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b4ae:	68fb      	ldr	r3, [r7, #12]
 802b4b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b4b4:	2b01      	cmp	r3, #1
 802b4b6:	d101      	bne.n	802b4bc <HAL_SPI_TransmitReceive+0x26>
 802b4b8:	2302      	movs	r3, #2
 802b4ba:	e18a      	b.n	802b7d2 <HAL_SPI_TransmitReceive+0x33c>
 802b4bc:	68fb      	ldr	r3, [r7, #12]
 802b4be:	2201      	movs	r2, #1
 802b4c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b4c4:	f7fc f91c 	bl	8027700 <HAL_GetTick>
 802b4c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802b4ca:	68fb      	ldr	r3, [r7, #12]
 802b4cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b4d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 802b4d4:	68fb      	ldr	r3, [r7, #12]
 802b4d6:	685b      	ldr	r3, [r3, #4]
 802b4d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802b4da:	887b      	ldrh	r3, [r7, #2]
 802b4dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802b4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802b4e2:	2b01      	cmp	r3, #1
 802b4e4:	d00f      	beq.n	802b506 <HAL_SPI_TransmitReceive+0x70>
 802b4e6:	69fb      	ldr	r3, [r7, #28]
 802b4e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b4ec:	d107      	bne.n	802b4fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802b4ee:	68fb      	ldr	r3, [r7, #12]
 802b4f0:	689b      	ldr	r3, [r3, #8]
 802b4f2:	2b00      	cmp	r3, #0
 802b4f4:	d103      	bne.n	802b4fe <HAL_SPI_TransmitReceive+0x68>
 802b4f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802b4fa:	2b04      	cmp	r3, #4
 802b4fc:	d003      	beq.n	802b506 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802b4fe:	2302      	movs	r3, #2
 802b500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802b504:	e15b      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802b506:	68bb      	ldr	r3, [r7, #8]
 802b508:	2b00      	cmp	r3, #0
 802b50a:	d005      	beq.n	802b518 <HAL_SPI_TransmitReceive+0x82>
 802b50c:	687b      	ldr	r3, [r7, #4]
 802b50e:	2b00      	cmp	r3, #0
 802b510:	d002      	beq.n	802b518 <HAL_SPI_TransmitReceive+0x82>
 802b512:	887b      	ldrh	r3, [r7, #2]
 802b514:	2b00      	cmp	r3, #0
 802b516:	d103      	bne.n	802b520 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 802b518:	2301      	movs	r3, #1
 802b51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802b51e:	e14e      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802b520:	68fb      	ldr	r3, [r7, #12]
 802b522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b526:	b2db      	uxtb	r3, r3
 802b528:	2b04      	cmp	r3, #4
 802b52a:	d003      	beq.n	802b534 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802b52c:	68fb      	ldr	r3, [r7, #12]
 802b52e:	2205      	movs	r2, #5
 802b530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b534:	68fb      	ldr	r3, [r7, #12]
 802b536:	2200      	movs	r2, #0
 802b538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802b53a:	68fb      	ldr	r3, [r7, #12]
 802b53c:	687a      	ldr	r2, [r7, #4]
 802b53e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802b540:	68fb      	ldr	r3, [r7, #12]
 802b542:	887a      	ldrh	r2, [r7, #2]
 802b544:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 802b546:	68fb      	ldr	r3, [r7, #12]
 802b548:	887a      	ldrh	r2, [r7, #2]
 802b54a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802b54c:	68fb      	ldr	r3, [r7, #12]
 802b54e:	68ba      	ldr	r2, [r7, #8]
 802b550:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802b552:	68fb      	ldr	r3, [r7, #12]
 802b554:	887a      	ldrh	r2, [r7, #2]
 802b556:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 802b558:	68fb      	ldr	r3, [r7, #12]
 802b55a:	887a      	ldrh	r2, [r7, #2]
 802b55c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802b55e:	68fb      	ldr	r3, [r7, #12]
 802b560:	2200      	movs	r2, #0
 802b562:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802b564:	68fb      	ldr	r3, [r7, #12]
 802b566:	2200      	movs	r2, #0
 802b568:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b56a:	68fb      	ldr	r3, [r7, #12]
 802b56c:	681b      	ldr	r3, [r3, #0]
 802b56e:	681b      	ldr	r3, [r3, #0]
 802b570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b574:	2b40      	cmp	r3, #64	; 0x40
 802b576:	d007      	beq.n	802b588 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b578:	68fb      	ldr	r3, [r7, #12]
 802b57a:	681b      	ldr	r3, [r3, #0]
 802b57c:	681a      	ldr	r2, [r3, #0]
 802b57e:	68fb      	ldr	r3, [r7, #12]
 802b580:	681b      	ldr	r3, [r3, #0]
 802b582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802b588:	68fb      	ldr	r3, [r7, #12]
 802b58a:	68db      	ldr	r3, [r3, #12]
 802b58c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b590:	d178      	bne.n	802b684 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b592:	68fb      	ldr	r3, [r7, #12]
 802b594:	685b      	ldr	r3, [r3, #4]
 802b596:	2b00      	cmp	r3, #0
 802b598:	d002      	beq.n	802b5a0 <HAL_SPI_TransmitReceive+0x10a>
 802b59a:	8b7b      	ldrh	r3, [r7, #26]
 802b59c:	2b01      	cmp	r3, #1
 802b59e:	d166      	bne.n	802b66e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b5a0:	68fb      	ldr	r3, [r7, #12]
 802b5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5a4:	881a      	ldrh	r2, [r3, #0]
 802b5a6:	68fb      	ldr	r3, [r7, #12]
 802b5a8:	681b      	ldr	r3, [r3, #0]
 802b5aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802b5ac:	68fb      	ldr	r3, [r7, #12]
 802b5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5b0:	1c9a      	adds	r2, r3, #2
 802b5b2:	68fb      	ldr	r3, [r7, #12]
 802b5b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b5b6:	68fb      	ldr	r3, [r7, #12]
 802b5b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5ba:	b29b      	uxth	r3, r3
 802b5bc:	3b01      	subs	r3, #1
 802b5be:	b29a      	uxth	r2, r3
 802b5c0:	68fb      	ldr	r3, [r7, #12]
 802b5c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b5c4:	e053      	b.n	802b66e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b5c6:	68fb      	ldr	r3, [r7, #12]
 802b5c8:	681b      	ldr	r3, [r3, #0]
 802b5ca:	689b      	ldr	r3, [r3, #8]
 802b5cc:	f003 0302 	and.w	r3, r3, #2
 802b5d0:	2b02      	cmp	r3, #2
 802b5d2:	d11b      	bne.n	802b60c <HAL_SPI_TransmitReceive+0x176>
 802b5d4:	68fb      	ldr	r3, [r7, #12]
 802b5d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5d8:	b29b      	uxth	r3, r3
 802b5da:	2b00      	cmp	r3, #0
 802b5dc:	d016      	beq.n	802b60c <HAL_SPI_TransmitReceive+0x176>
 802b5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b5e0:	2b01      	cmp	r3, #1
 802b5e2:	d113      	bne.n	802b60c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b5e4:	68fb      	ldr	r3, [r7, #12]
 802b5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5e8:	881a      	ldrh	r2, [r3, #0]
 802b5ea:	68fb      	ldr	r3, [r7, #12]
 802b5ec:	681b      	ldr	r3, [r3, #0]
 802b5ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802b5f0:	68fb      	ldr	r3, [r7, #12]
 802b5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5f4:	1c9a      	adds	r2, r3, #2
 802b5f6:	68fb      	ldr	r3, [r7, #12]
 802b5f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b5fa:	68fb      	ldr	r3, [r7, #12]
 802b5fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5fe:	b29b      	uxth	r3, r3
 802b600:	3b01      	subs	r3, #1
 802b602:	b29a      	uxth	r2, r3
 802b604:	68fb      	ldr	r3, [r7, #12]
 802b606:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b608:	2300      	movs	r3, #0
 802b60a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b60c:	68fb      	ldr	r3, [r7, #12]
 802b60e:	681b      	ldr	r3, [r3, #0]
 802b610:	689b      	ldr	r3, [r3, #8]
 802b612:	f003 0301 	and.w	r3, r3, #1
 802b616:	2b01      	cmp	r3, #1
 802b618:	d119      	bne.n	802b64e <HAL_SPI_TransmitReceive+0x1b8>
 802b61a:	68fb      	ldr	r3, [r7, #12]
 802b61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b61e:	b29b      	uxth	r3, r3
 802b620:	2b00      	cmp	r3, #0
 802b622:	d014      	beq.n	802b64e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802b624:	68fb      	ldr	r3, [r7, #12]
 802b626:	681b      	ldr	r3, [r3, #0]
 802b628:	68da      	ldr	r2, [r3, #12]
 802b62a:	68fb      	ldr	r3, [r7, #12]
 802b62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b62e:	b292      	uxth	r2, r2
 802b630:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802b632:	68fb      	ldr	r3, [r7, #12]
 802b634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b636:	1c9a      	adds	r2, r3, #2
 802b638:	68fb      	ldr	r3, [r7, #12]
 802b63a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b63c:	68fb      	ldr	r3, [r7, #12]
 802b63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b640:	b29b      	uxth	r3, r3
 802b642:	3b01      	subs	r3, #1
 802b644:	b29a      	uxth	r2, r3
 802b646:	68fb      	ldr	r3, [r7, #12]
 802b648:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b64a:	2301      	movs	r3, #1
 802b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802b64e:	f7fc f857 	bl	8027700 <HAL_GetTick>
 802b652:	4602      	mov	r2, r0
 802b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b656:	1ad3      	subs	r3, r2, r3
 802b658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b65a:	429a      	cmp	r2, r3
 802b65c:	d807      	bhi.n	802b66e <HAL_SPI_TransmitReceive+0x1d8>
 802b65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b664:	d003      	beq.n	802b66e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 802b666:	2303      	movs	r3, #3
 802b668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b66c:	e0a7      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b66e:	68fb      	ldr	r3, [r7, #12]
 802b670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b672:	b29b      	uxth	r3, r3
 802b674:	2b00      	cmp	r3, #0
 802b676:	d1a6      	bne.n	802b5c6 <HAL_SPI_TransmitReceive+0x130>
 802b678:	68fb      	ldr	r3, [r7, #12]
 802b67a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b67c:	b29b      	uxth	r3, r3
 802b67e:	2b00      	cmp	r3, #0
 802b680:	d1a1      	bne.n	802b5c6 <HAL_SPI_TransmitReceive+0x130>
 802b682:	e07c      	b.n	802b77e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b684:	68fb      	ldr	r3, [r7, #12]
 802b686:	685b      	ldr	r3, [r3, #4]
 802b688:	2b00      	cmp	r3, #0
 802b68a:	d002      	beq.n	802b692 <HAL_SPI_TransmitReceive+0x1fc>
 802b68c:	8b7b      	ldrh	r3, [r7, #26]
 802b68e:	2b01      	cmp	r3, #1
 802b690:	d16b      	bne.n	802b76a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b692:	68fb      	ldr	r3, [r7, #12]
 802b694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b696:	68fb      	ldr	r3, [r7, #12]
 802b698:	681b      	ldr	r3, [r3, #0]
 802b69a:	330c      	adds	r3, #12
 802b69c:	7812      	ldrb	r2, [r2, #0]
 802b69e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802b6a0:	68fb      	ldr	r3, [r7, #12]
 802b6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6a4:	1c5a      	adds	r2, r3, #1
 802b6a6:	68fb      	ldr	r3, [r7, #12]
 802b6a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b6aa:	68fb      	ldr	r3, [r7, #12]
 802b6ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b6ae:	b29b      	uxth	r3, r3
 802b6b0:	3b01      	subs	r3, #1
 802b6b2:	b29a      	uxth	r2, r3
 802b6b4:	68fb      	ldr	r3, [r7, #12]
 802b6b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b6b8:	e057      	b.n	802b76a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b6ba:	68fb      	ldr	r3, [r7, #12]
 802b6bc:	681b      	ldr	r3, [r3, #0]
 802b6be:	689b      	ldr	r3, [r3, #8]
 802b6c0:	f003 0302 	and.w	r3, r3, #2
 802b6c4:	2b02      	cmp	r3, #2
 802b6c6:	d11c      	bne.n	802b702 <HAL_SPI_TransmitReceive+0x26c>
 802b6c8:	68fb      	ldr	r3, [r7, #12]
 802b6ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b6cc:	b29b      	uxth	r3, r3
 802b6ce:	2b00      	cmp	r3, #0
 802b6d0:	d017      	beq.n	802b702 <HAL_SPI_TransmitReceive+0x26c>
 802b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b6d4:	2b01      	cmp	r3, #1
 802b6d6:	d114      	bne.n	802b702 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802b6d8:	68fb      	ldr	r3, [r7, #12]
 802b6da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	681b      	ldr	r3, [r3, #0]
 802b6e0:	330c      	adds	r3, #12
 802b6e2:	7812      	ldrb	r2, [r2, #0]
 802b6e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802b6e6:	68fb      	ldr	r3, [r7, #12]
 802b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6ea:	1c5a      	adds	r2, r3, #1
 802b6ec:	68fb      	ldr	r3, [r7, #12]
 802b6ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b6f0:	68fb      	ldr	r3, [r7, #12]
 802b6f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b6f4:	b29b      	uxth	r3, r3
 802b6f6:	3b01      	subs	r3, #1
 802b6f8:	b29a      	uxth	r2, r3
 802b6fa:	68fb      	ldr	r3, [r7, #12]
 802b6fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b6fe:	2300      	movs	r3, #0
 802b700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b702:	68fb      	ldr	r3, [r7, #12]
 802b704:	681b      	ldr	r3, [r3, #0]
 802b706:	689b      	ldr	r3, [r3, #8]
 802b708:	f003 0301 	and.w	r3, r3, #1
 802b70c:	2b01      	cmp	r3, #1
 802b70e:	d119      	bne.n	802b744 <HAL_SPI_TransmitReceive+0x2ae>
 802b710:	68fb      	ldr	r3, [r7, #12]
 802b712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b714:	b29b      	uxth	r3, r3
 802b716:	2b00      	cmp	r3, #0
 802b718:	d014      	beq.n	802b744 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802b71a:	68fb      	ldr	r3, [r7, #12]
 802b71c:	681b      	ldr	r3, [r3, #0]
 802b71e:	68da      	ldr	r2, [r3, #12]
 802b720:	68fb      	ldr	r3, [r7, #12]
 802b722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b724:	b2d2      	uxtb	r2, r2
 802b726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 802b728:	68fb      	ldr	r3, [r7, #12]
 802b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b72c:	1c5a      	adds	r2, r3, #1
 802b72e:	68fb      	ldr	r3, [r7, #12]
 802b730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b732:	68fb      	ldr	r3, [r7, #12]
 802b734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b736:	b29b      	uxth	r3, r3
 802b738:	3b01      	subs	r3, #1
 802b73a:	b29a      	uxth	r2, r3
 802b73c:	68fb      	ldr	r3, [r7, #12]
 802b73e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b740:	2301      	movs	r3, #1
 802b742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802b744:	f7fb ffdc 	bl	8027700 <HAL_GetTick>
 802b748:	4602      	mov	r2, r0
 802b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b74c:	1ad3      	subs	r3, r2, r3
 802b74e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b750:	429a      	cmp	r2, r3
 802b752:	d803      	bhi.n	802b75c <HAL_SPI_TransmitReceive+0x2c6>
 802b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b756:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b75a:	d102      	bne.n	802b762 <HAL_SPI_TransmitReceive+0x2cc>
 802b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b75e:	2b00      	cmp	r3, #0
 802b760:	d103      	bne.n	802b76a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802b762:	2303      	movs	r3, #3
 802b764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b768:	e029      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b76a:	68fb      	ldr	r3, [r7, #12]
 802b76c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b76e:	b29b      	uxth	r3, r3
 802b770:	2b00      	cmp	r3, #0
 802b772:	d1a2      	bne.n	802b6ba <HAL_SPI_TransmitReceive+0x224>
 802b774:	68fb      	ldr	r3, [r7, #12]
 802b776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b778:	b29b      	uxth	r3, r3
 802b77a:	2b00      	cmp	r3, #0
 802b77c:	d19d      	bne.n	802b6ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802b782:	68f8      	ldr	r0, [r7, #12]
 802b784:	f000 fa38 	bl	802bbf8 <SPI_EndRxTxTransaction>
 802b788:	4603      	mov	r3, r0
 802b78a:	2b00      	cmp	r3, #0
 802b78c:	d006      	beq.n	802b79c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802b78e:	2301      	movs	r3, #1
 802b790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b794:	68fb      	ldr	r3, [r7, #12]
 802b796:	2220      	movs	r2, #32
 802b798:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802b79a:	e010      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802b79c:	68fb      	ldr	r3, [r7, #12]
 802b79e:	689b      	ldr	r3, [r3, #8]
 802b7a0:	2b00      	cmp	r3, #0
 802b7a2:	d10b      	bne.n	802b7bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b7a4:	2300      	movs	r3, #0
 802b7a6:	617b      	str	r3, [r7, #20]
 802b7a8:	68fb      	ldr	r3, [r7, #12]
 802b7aa:	681b      	ldr	r3, [r3, #0]
 802b7ac:	68db      	ldr	r3, [r3, #12]
 802b7ae:	617b      	str	r3, [r7, #20]
 802b7b0:	68fb      	ldr	r3, [r7, #12]
 802b7b2:	681b      	ldr	r3, [r3, #0]
 802b7b4:	689b      	ldr	r3, [r3, #8]
 802b7b6:	617b      	str	r3, [r7, #20]
 802b7b8:	697b      	ldr	r3, [r7, #20]
 802b7ba:	e000      	b.n	802b7be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802b7bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b7be:	68fb      	ldr	r3, [r7, #12]
 802b7c0:	2201      	movs	r2, #1
 802b7c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802b7c6:	68fb      	ldr	r3, [r7, #12]
 802b7c8:	2200      	movs	r2, #0
 802b7ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b7ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802b7d2:	4618      	mov	r0, r3
 802b7d4:	3730      	adds	r7, #48	; 0x30
 802b7d6:	46bd      	mov	sp, r7
 802b7d8:	bd80      	pop	{r7, pc}
	...

0802b7dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b7dc:	b580      	push	{r7, lr}
 802b7de:	b088      	sub	sp, #32
 802b7e0:	af00      	add	r7, sp, #0
 802b7e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802b7e4:	687b      	ldr	r3, [r7, #4]
 802b7e6:	681b      	ldr	r3, [r3, #0]
 802b7e8:	685b      	ldr	r3, [r3, #4]
 802b7ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802b7ec:	687b      	ldr	r3, [r7, #4]
 802b7ee:	681b      	ldr	r3, [r3, #0]
 802b7f0:	689b      	ldr	r3, [r3, #8]
 802b7f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b7f4:	69bb      	ldr	r3, [r7, #24]
 802b7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7fa:	2b00      	cmp	r3, #0
 802b7fc:	d10e      	bne.n	802b81c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b7fe:	69bb      	ldr	r3, [r7, #24]
 802b800:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b804:	2b00      	cmp	r3, #0
 802b806:	d009      	beq.n	802b81c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b808:	69fb      	ldr	r3, [r7, #28]
 802b80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b80e:	2b00      	cmp	r3, #0
 802b810:	d004      	beq.n	802b81c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802b812:	687b      	ldr	r3, [r7, #4]
 802b814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b816:	6878      	ldr	r0, [r7, #4]
 802b818:	4798      	blx	r3
    return;
 802b81a:	e0ce      	b.n	802b9ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802b81c:	69bb      	ldr	r3, [r7, #24]
 802b81e:	f003 0302 	and.w	r3, r3, #2
 802b822:	2b00      	cmp	r3, #0
 802b824:	d009      	beq.n	802b83a <HAL_SPI_IRQHandler+0x5e>
 802b826:	69fb      	ldr	r3, [r7, #28]
 802b828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b82c:	2b00      	cmp	r3, #0
 802b82e:	d004      	beq.n	802b83a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802b830:	687b      	ldr	r3, [r7, #4]
 802b832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b834:	6878      	ldr	r0, [r7, #4]
 802b836:	4798      	blx	r3
    return;
 802b838:	e0bf      	b.n	802b9ba <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b83a:	69bb      	ldr	r3, [r7, #24]
 802b83c:	f003 0320 	and.w	r3, r3, #32
 802b840:	2b00      	cmp	r3, #0
 802b842:	d10a      	bne.n	802b85a <HAL_SPI_IRQHandler+0x7e>
 802b844:	69bb      	ldr	r3, [r7, #24]
 802b846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b84a:	2b00      	cmp	r3, #0
 802b84c:	d105      	bne.n	802b85a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802b84e:	69bb      	ldr	r3, [r7, #24]
 802b850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b854:	2b00      	cmp	r3, #0
 802b856:	f000 80b0 	beq.w	802b9ba <HAL_SPI_IRQHandler+0x1de>
 802b85a:	69fb      	ldr	r3, [r7, #28]
 802b85c:	f003 0320 	and.w	r3, r3, #32
 802b860:	2b00      	cmp	r3, #0
 802b862:	f000 80aa 	beq.w	802b9ba <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b866:	69bb      	ldr	r3, [r7, #24]
 802b868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b86c:	2b00      	cmp	r3, #0
 802b86e:	d023      	beq.n	802b8b8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b870:	687b      	ldr	r3, [r7, #4]
 802b872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b876:	b2db      	uxtb	r3, r3
 802b878:	2b03      	cmp	r3, #3
 802b87a:	d011      	beq.n	802b8a0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b87c:	687b      	ldr	r3, [r7, #4]
 802b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b880:	f043 0204 	orr.w	r2, r3, #4
 802b884:	687b      	ldr	r3, [r7, #4]
 802b886:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b888:	2300      	movs	r3, #0
 802b88a:	617b      	str	r3, [r7, #20]
 802b88c:	687b      	ldr	r3, [r7, #4]
 802b88e:	681b      	ldr	r3, [r3, #0]
 802b890:	68db      	ldr	r3, [r3, #12]
 802b892:	617b      	str	r3, [r7, #20]
 802b894:	687b      	ldr	r3, [r7, #4]
 802b896:	681b      	ldr	r3, [r3, #0]
 802b898:	689b      	ldr	r3, [r3, #8]
 802b89a:	617b      	str	r3, [r7, #20]
 802b89c:	697b      	ldr	r3, [r7, #20]
 802b89e:	e00b      	b.n	802b8b8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b8a0:	2300      	movs	r3, #0
 802b8a2:	613b      	str	r3, [r7, #16]
 802b8a4:	687b      	ldr	r3, [r7, #4]
 802b8a6:	681b      	ldr	r3, [r3, #0]
 802b8a8:	68db      	ldr	r3, [r3, #12]
 802b8aa:	613b      	str	r3, [r7, #16]
 802b8ac:	687b      	ldr	r3, [r7, #4]
 802b8ae:	681b      	ldr	r3, [r3, #0]
 802b8b0:	689b      	ldr	r3, [r3, #8]
 802b8b2:	613b      	str	r3, [r7, #16]
 802b8b4:	693b      	ldr	r3, [r7, #16]
        return;
 802b8b6:	e080      	b.n	802b9ba <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802b8b8:	69bb      	ldr	r3, [r7, #24]
 802b8ba:	f003 0320 	and.w	r3, r3, #32
 802b8be:	2b00      	cmp	r3, #0
 802b8c0:	d014      	beq.n	802b8ec <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b8c2:	687b      	ldr	r3, [r7, #4]
 802b8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b8c6:	f043 0201 	orr.w	r2, r3, #1
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b8ce:	2300      	movs	r3, #0
 802b8d0:	60fb      	str	r3, [r7, #12]
 802b8d2:	687b      	ldr	r3, [r7, #4]
 802b8d4:	681b      	ldr	r3, [r3, #0]
 802b8d6:	689b      	ldr	r3, [r3, #8]
 802b8d8:	60fb      	str	r3, [r7, #12]
 802b8da:	687b      	ldr	r3, [r7, #4]
 802b8dc:	681b      	ldr	r3, [r3, #0]
 802b8de:	681a      	ldr	r2, [r3, #0]
 802b8e0:	687b      	ldr	r3, [r7, #4]
 802b8e2:	681b      	ldr	r3, [r3, #0]
 802b8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b8e8:	601a      	str	r2, [r3, #0]
 802b8ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802b8ec:	69bb      	ldr	r3, [r7, #24]
 802b8ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b8f2:	2b00      	cmp	r3, #0
 802b8f4:	d00c      	beq.n	802b910 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b8f6:	687b      	ldr	r3, [r7, #4]
 802b8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b8fa:	f043 0208 	orr.w	r2, r3, #8
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b902:	2300      	movs	r3, #0
 802b904:	60bb      	str	r3, [r7, #8]
 802b906:	687b      	ldr	r3, [r7, #4]
 802b908:	681b      	ldr	r3, [r3, #0]
 802b90a:	689b      	ldr	r3, [r3, #8]
 802b90c:	60bb      	str	r3, [r7, #8]
 802b90e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b910:	687b      	ldr	r3, [r7, #4]
 802b912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b914:	2b00      	cmp	r3, #0
 802b916:	d04f      	beq.n	802b9b8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802b918:	687b      	ldr	r3, [r7, #4]
 802b91a:	681b      	ldr	r3, [r3, #0]
 802b91c:	685a      	ldr	r2, [r3, #4]
 802b91e:	687b      	ldr	r3, [r7, #4]
 802b920:	681b      	ldr	r3, [r3, #0]
 802b922:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b926:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802b928:	687b      	ldr	r3, [r7, #4]
 802b92a:	2201      	movs	r2, #1
 802b92c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802b930:	69fb      	ldr	r3, [r7, #28]
 802b932:	f003 0302 	and.w	r3, r3, #2
 802b936:	2b00      	cmp	r3, #0
 802b938:	d104      	bne.n	802b944 <HAL_SPI_IRQHandler+0x168>
 802b93a:	69fb      	ldr	r3, [r7, #28]
 802b93c:	f003 0301 	and.w	r3, r3, #1
 802b940:	2b00      	cmp	r3, #0
 802b942:	d034      	beq.n	802b9ae <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	681b      	ldr	r3, [r3, #0]
 802b948:	685a      	ldr	r2, [r3, #4]
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	681b      	ldr	r3, [r3, #0]
 802b94e:	f022 0203 	bic.w	r2, r2, #3
 802b952:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b958:	2b00      	cmp	r3, #0
 802b95a:	d011      	beq.n	802b980 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802b95c:	687b      	ldr	r3, [r7, #4]
 802b95e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b960:	4a17      	ldr	r2, [pc, #92]	; (802b9c0 <HAL_SPI_IRQHandler+0x1e4>)
 802b962:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b968:	4618      	mov	r0, r3
 802b96a:	f7fc f8dc 	bl	8027b26 <HAL_DMA_Abort_IT>
 802b96e:	4603      	mov	r3, r0
 802b970:	2b00      	cmp	r3, #0
 802b972:	d005      	beq.n	802b980 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b97c:	687b      	ldr	r3, [r7, #4]
 802b97e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802b980:	687b      	ldr	r3, [r7, #4]
 802b982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b984:	2b00      	cmp	r3, #0
 802b986:	d016      	beq.n	802b9b6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b98c:	4a0c      	ldr	r2, [pc, #48]	; (802b9c0 <HAL_SPI_IRQHandler+0x1e4>)
 802b98e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b994:	4618      	mov	r0, r3
 802b996:	f7fc f8c6 	bl	8027b26 <HAL_DMA_Abort_IT>
 802b99a:	4603      	mov	r3, r0
 802b99c:	2b00      	cmp	r3, #0
 802b99e:	d00a      	beq.n	802b9b6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b9a0:	687b      	ldr	r3, [r7, #4]
 802b9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b9a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802b9ac:	e003      	b.n	802b9b6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802b9ae:	6878      	ldr	r0, [r7, #4]
 802b9b0:	f000 f808 	bl	802b9c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802b9b4:	e000      	b.n	802b9b8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802b9b6:	bf00      	nop
    return;
 802b9b8:	bf00      	nop
  }
}
 802b9ba:	3720      	adds	r7, #32
 802b9bc:	46bd      	mov	sp, r7
 802b9be:	bd80      	pop	{r7, pc}
 802b9c0:	0802b9f5 	.word	0x0802b9f5

0802b9c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802b9c4:	b480      	push	{r7}
 802b9c6:	b083      	sub	sp, #12
 802b9c8:	af00      	add	r7, sp, #0
 802b9ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802b9cc:	bf00      	nop
 802b9ce:	370c      	adds	r7, #12
 802b9d0:	46bd      	mov	sp, r7
 802b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9d6:	4770      	bx	lr

0802b9d8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 802b9d8:	b480      	push	{r7}
 802b9da:	b083      	sub	sp, #12
 802b9dc:	af00      	add	r7, sp, #0
 802b9de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 802b9e0:	687b      	ldr	r3, [r7, #4]
 802b9e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b9e6:	b2db      	uxtb	r3, r3
}
 802b9e8:	4618      	mov	r0, r3
 802b9ea:	370c      	adds	r7, #12
 802b9ec:	46bd      	mov	sp, r7
 802b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9f2:	4770      	bx	lr

0802b9f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b9f4:	b580      	push	{r7, lr}
 802b9f6:	b084      	sub	sp, #16
 802b9f8:	af00      	add	r7, sp, #0
 802b9fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ba00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802ba02:	68fb      	ldr	r3, [r7, #12]
 802ba04:	2200      	movs	r2, #0
 802ba06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802ba08:	68fb      	ldr	r3, [r7, #12]
 802ba0a:	2200      	movs	r2, #0
 802ba0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802ba0e:	68f8      	ldr	r0, [r7, #12]
 802ba10:	f7ff ffd8 	bl	802b9c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802ba14:	bf00      	nop
 802ba16:	3710      	adds	r7, #16
 802ba18:	46bd      	mov	sp, r7
 802ba1a:	bd80      	pop	{r7, pc}

0802ba1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802ba1c:	b580      	push	{r7, lr}
 802ba1e:	b088      	sub	sp, #32
 802ba20:	af00      	add	r7, sp, #0
 802ba22:	60f8      	str	r0, [r7, #12]
 802ba24:	60b9      	str	r1, [r7, #8]
 802ba26:	603b      	str	r3, [r7, #0]
 802ba28:	4613      	mov	r3, r2
 802ba2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802ba2c:	f7fb fe68 	bl	8027700 <HAL_GetTick>
 802ba30:	4602      	mov	r2, r0
 802ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba34:	1a9b      	subs	r3, r3, r2
 802ba36:	683a      	ldr	r2, [r7, #0]
 802ba38:	4413      	add	r3, r2
 802ba3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802ba3c:	f7fb fe60 	bl	8027700 <HAL_GetTick>
 802ba40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802ba42:	4b39      	ldr	r3, [pc, #228]	; (802bb28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	015b      	lsls	r3, r3, #5
 802ba48:	0d1b      	lsrs	r3, r3, #20
 802ba4a:	69fa      	ldr	r2, [r7, #28]
 802ba4c:	fb02 f303 	mul.w	r3, r2, r3
 802ba50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802ba52:	e054      	b.n	802bafe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802ba54:	683b      	ldr	r3, [r7, #0]
 802ba56:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ba5a:	d050      	beq.n	802bafe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802ba5c:	f7fb fe50 	bl	8027700 <HAL_GetTick>
 802ba60:	4602      	mov	r2, r0
 802ba62:	69bb      	ldr	r3, [r7, #24]
 802ba64:	1ad3      	subs	r3, r2, r3
 802ba66:	69fa      	ldr	r2, [r7, #28]
 802ba68:	429a      	cmp	r2, r3
 802ba6a:	d902      	bls.n	802ba72 <SPI_WaitFlagStateUntilTimeout+0x56>
 802ba6c:	69fb      	ldr	r3, [r7, #28]
 802ba6e:	2b00      	cmp	r3, #0
 802ba70:	d13d      	bne.n	802baee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802ba72:	68fb      	ldr	r3, [r7, #12]
 802ba74:	681b      	ldr	r3, [r3, #0]
 802ba76:	685a      	ldr	r2, [r3, #4]
 802ba78:	68fb      	ldr	r3, [r7, #12]
 802ba7a:	681b      	ldr	r3, [r3, #0]
 802ba7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802ba80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802ba82:	68fb      	ldr	r3, [r7, #12]
 802ba84:	685b      	ldr	r3, [r3, #4]
 802ba86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802ba8a:	d111      	bne.n	802bab0 <SPI_WaitFlagStateUntilTimeout+0x94>
 802ba8c:	68fb      	ldr	r3, [r7, #12]
 802ba8e:	689b      	ldr	r3, [r3, #8]
 802ba90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802ba94:	d004      	beq.n	802baa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802ba96:	68fb      	ldr	r3, [r7, #12]
 802ba98:	689b      	ldr	r3, [r3, #8]
 802ba9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802ba9e:	d107      	bne.n	802bab0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802baa0:	68fb      	ldr	r3, [r7, #12]
 802baa2:	681b      	ldr	r3, [r3, #0]
 802baa4:	681a      	ldr	r2, [r3, #0]
 802baa6:	68fb      	ldr	r3, [r7, #12]
 802baa8:	681b      	ldr	r3, [r3, #0]
 802baaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802baae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802bab0:	68fb      	ldr	r3, [r7, #12]
 802bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802bab8:	d10f      	bne.n	802bada <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802baba:	68fb      	ldr	r3, [r7, #12]
 802babc:	681b      	ldr	r3, [r3, #0]
 802babe:	681a      	ldr	r2, [r3, #0]
 802bac0:	68fb      	ldr	r3, [r7, #12]
 802bac2:	681b      	ldr	r3, [r3, #0]
 802bac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bac8:	601a      	str	r2, [r3, #0]
 802baca:	68fb      	ldr	r3, [r7, #12]
 802bacc:	681b      	ldr	r3, [r3, #0]
 802bace:	681a      	ldr	r2, [r3, #0]
 802bad0:	68fb      	ldr	r3, [r7, #12]
 802bad2:	681b      	ldr	r3, [r3, #0]
 802bad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bad8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802bada:	68fb      	ldr	r3, [r7, #12]
 802badc:	2201      	movs	r2, #1
 802bade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802bae2:	68fb      	ldr	r3, [r7, #12]
 802bae4:	2200      	movs	r2, #0
 802bae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802baea:	2303      	movs	r3, #3
 802baec:	e017      	b.n	802bb1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802baee:	697b      	ldr	r3, [r7, #20]
 802baf0:	2b00      	cmp	r3, #0
 802baf2:	d101      	bne.n	802baf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802baf4:	2300      	movs	r3, #0
 802baf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 802baf8:	697b      	ldr	r3, [r7, #20]
 802bafa:	3b01      	subs	r3, #1
 802bafc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802bafe:	68fb      	ldr	r3, [r7, #12]
 802bb00:	681b      	ldr	r3, [r3, #0]
 802bb02:	689a      	ldr	r2, [r3, #8]
 802bb04:	68bb      	ldr	r3, [r7, #8]
 802bb06:	4013      	ands	r3, r2
 802bb08:	68ba      	ldr	r2, [r7, #8]
 802bb0a:	429a      	cmp	r2, r3
 802bb0c:	bf0c      	ite	eq
 802bb0e:	2301      	moveq	r3, #1
 802bb10:	2300      	movne	r3, #0
 802bb12:	b2db      	uxtb	r3, r3
 802bb14:	461a      	mov	r2, r3
 802bb16:	79fb      	ldrb	r3, [r7, #7]
 802bb18:	429a      	cmp	r2, r3
 802bb1a:	d19b      	bne.n	802ba54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 802bb1c:	2300      	movs	r3, #0
}
 802bb1e:	4618      	mov	r0, r3
 802bb20:	3720      	adds	r7, #32
 802bb22:	46bd      	mov	sp, r7
 802bb24:	bd80      	pop	{r7, pc}
 802bb26:	bf00      	nop
 802bb28:	20000138 	.word	0x20000138

0802bb2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802bb2c:	b580      	push	{r7, lr}
 802bb2e:	b086      	sub	sp, #24
 802bb30:	af02      	add	r7, sp, #8
 802bb32:	60f8      	str	r0, [r7, #12]
 802bb34:	60b9      	str	r1, [r7, #8]
 802bb36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802bb38:	68fb      	ldr	r3, [r7, #12]
 802bb3a:	685b      	ldr	r3, [r3, #4]
 802bb3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bb40:	d111      	bne.n	802bb66 <SPI_EndRxTransaction+0x3a>
 802bb42:	68fb      	ldr	r3, [r7, #12]
 802bb44:	689b      	ldr	r3, [r3, #8]
 802bb46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802bb4a:	d004      	beq.n	802bb56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802bb4c:	68fb      	ldr	r3, [r7, #12]
 802bb4e:	689b      	ldr	r3, [r3, #8]
 802bb50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bb54:	d107      	bne.n	802bb66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802bb56:	68fb      	ldr	r3, [r7, #12]
 802bb58:	681b      	ldr	r3, [r3, #0]
 802bb5a:	681a      	ldr	r2, [r3, #0]
 802bb5c:	68fb      	ldr	r3, [r7, #12]
 802bb5e:	681b      	ldr	r3, [r3, #0]
 802bb60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bb64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bb66:	68fb      	ldr	r3, [r7, #12]
 802bb68:	685b      	ldr	r3, [r3, #4]
 802bb6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bb6e:	d12a      	bne.n	802bbc6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802bb70:	68fb      	ldr	r3, [r7, #12]
 802bb72:	689b      	ldr	r3, [r3, #8]
 802bb74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bb78:	d012      	beq.n	802bba0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bb7a:	687b      	ldr	r3, [r7, #4]
 802bb7c:	9300      	str	r3, [sp, #0]
 802bb7e:	68bb      	ldr	r3, [r7, #8]
 802bb80:	2200      	movs	r2, #0
 802bb82:	2180      	movs	r1, #128	; 0x80
 802bb84:	68f8      	ldr	r0, [r7, #12]
 802bb86:	f7ff ff49 	bl	802ba1c <SPI_WaitFlagStateUntilTimeout>
 802bb8a:	4603      	mov	r3, r0
 802bb8c:	2b00      	cmp	r3, #0
 802bb8e:	d02d      	beq.n	802bbec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bb90:	68fb      	ldr	r3, [r7, #12]
 802bb92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bb94:	f043 0220 	orr.w	r2, r3, #32
 802bb98:	68fb      	ldr	r3, [r7, #12]
 802bb9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802bb9c:	2303      	movs	r3, #3
 802bb9e:	e026      	b.n	802bbee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802bba0:	687b      	ldr	r3, [r7, #4]
 802bba2:	9300      	str	r3, [sp, #0]
 802bba4:	68bb      	ldr	r3, [r7, #8]
 802bba6:	2200      	movs	r2, #0
 802bba8:	2101      	movs	r1, #1
 802bbaa:	68f8      	ldr	r0, [r7, #12]
 802bbac:	f7ff ff36 	bl	802ba1c <SPI_WaitFlagStateUntilTimeout>
 802bbb0:	4603      	mov	r3, r0
 802bbb2:	2b00      	cmp	r3, #0
 802bbb4:	d01a      	beq.n	802bbec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bbb6:	68fb      	ldr	r3, [r7, #12]
 802bbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bbba:	f043 0220 	orr.w	r2, r3, #32
 802bbbe:	68fb      	ldr	r3, [r7, #12]
 802bbc0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802bbc2:	2303      	movs	r3, #3
 802bbc4:	e013      	b.n	802bbee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802bbc6:	687b      	ldr	r3, [r7, #4]
 802bbc8:	9300      	str	r3, [sp, #0]
 802bbca:	68bb      	ldr	r3, [r7, #8]
 802bbcc:	2200      	movs	r2, #0
 802bbce:	2101      	movs	r1, #1
 802bbd0:	68f8      	ldr	r0, [r7, #12]
 802bbd2:	f7ff ff23 	bl	802ba1c <SPI_WaitFlagStateUntilTimeout>
 802bbd6:	4603      	mov	r3, r0
 802bbd8:	2b00      	cmp	r3, #0
 802bbda:	d007      	beq.n	802bbec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bbdc:	68fb      	ldr	r3, [r7, #12]
 802bbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bbe0:	f043 0220 	orr.w	r2, r3, #32
 802bbe4:	68fb      	ldr	r3, [r7, #12]
 802bbe6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bbe8:	2303      	movs	r3, #3
 802bbea:	e000      	b.n	802bbee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802bbec:	2300      	movs	r3, #0
}
 802bbee:	4618      	mov	r0, r3
 802bbf0:	3710      	adds	r7, #16
 802bbf2:	46bd      	mov	sp, r7
 802bbf4:	bd80      	pop	{r7, pc}
	...

0802bbf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802bbf8:	b580      	push	{r7, lr}
 802bbfa:	b088      	sub	sp, #32
 802bbfc:	af02      	add	r7, sp, #8
 802bbfe:	60f8      	str	r0, [r7, #12]
 802bc00:	60b9      	str	r1, [r7, #8]
 802bc02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802bc04:	4b1b      	ldr	r3, [pc, #108]	; (802bc74 <SPI_EndRxTxTransaction+0x7c>)
 802bc06:	681b      	ldr	r3, [r3, #0]
 802bc08:	4a1b      	ldr	r2, [pc, #108]	; (802bc78 <SPI_EndRxTxTransaction+0x80>)
 802bc0a:	fba2 2303 	umull	r2, r3, r2, r3
 802bc0e:	0d5b      	lsrs	r3, r3, #21
 802bc10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802bc14:	fb02 f303 	mul.w	r3, r2, r3
 802bc18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bc1a:	68fb      	ldr	r3, [r7, #12]
 802bc1c:	685b      	ldr	r3, [r3, #4]
 802bc1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bc22:	d112      	bne.n	802bc4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bc24:	687b      	ldr	r3, [r7, #4]
 802bc26:	9300      	str	r3, [sp, #0]
 802bc28:	68bb      	ldr	r3, [r7, #8]
 802bc2a:	2200      	movs	r2, #0
 802bc2c:	2180      	movs	r1, #128	; 0x80
 802bc2e:	68f8      	ldr	r0, [r7, #12]
 802bc30:	f7ff fef4 	bl	802ba1c <SPI_WaitFlagStateUntilTimeout>
 802bc34:	4603      	mov	r3, r0
 802bc36:	2b00      	cmp	r3, #0
 802bc38:	d016      	beq.n	802bc68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bc3a:	68fb      	ldr	r3, [r7, #12]
 802bc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bc3e:	f043 0220 	orr.w	r2, r3, #32
 802bc42:	68fb      	ldr	r3, [r7, #12]
 802bc44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bc46:	2303      	movs	r3, #3
 802bc48:	e00f      	b.n	802bc6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802bc4a:	697b      	ldr	r3, [r7, #20]
 802bc4c:	2b00      	cmp	r3, #0
 802bc4e:	d00a      	beq.n	802bc66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802bc50:	697b      	ldr	r3, [r7, #20]
 802bc52:	3b01      	subs	r3, #1
 802bc54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802bc56:	68fb      	ldr	r3, [r7, #12]
 802bc58:	681b      	ldr	r3, [r3, #0]
 802bc5a:	689b      	ldr	r3, [r3, #8]
 802bc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc60:	2b80      	cmp	r3, #128	; 0x80
 802bc62:	d0f2      	beq.n	802bc4a <SPI_EndRxTxTransaction+0x52>
 802bc64:	e000      	b.n	802bc68 <SPI_EndRxTxTransaction+0x70>
        break;
 802bc66:	bf00      	nop
  }

  return HAL_OK;
 802bc68:	2300      	movs	r3, #0
}
 802bc6a:	4618      	mov	r0, r3
 802bc6c:	3718      	adds	r7, #24
 802bc6e:	46bd      	mov	sp, r7
 802bc70:	bd80      	pop	{r7, pc}
 802bc72:	bf00      	nop
 802bc74:	20000138 	.word	0x20000138
 802bc78:	165e9f81 	.word	0x165e9f81

0802bc7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802bc7c:	b580      	push	{r7, lr}
 802bc7e:	b082      	sub	sp, #8
 802bc80:	af00      	add	r7, sp, #0
 802bc82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	2b00      	cmp	r3, #0
 802bc88:	d101      	bne.n	802bc8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802bc8a:	2301      	movs	r3, #1
 802bc8c:	e03f      	b.n	802bd0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802bc8e:	687b      	ldr	r3, [r7, #4]
 802bc90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bc94:	b2db      	uxtb	r3, r3
 802bc96:	2b00      	cmp	r3, #0
 802bc98:	d106      	bne.n	802bca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802bc9a:	687b      	ldr	r3, [r7, #4]
 802bc9c:	2200      	movs	r2, #0
 802bc9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802bca2:	6878      	ldr	r0, [r7, #4]
 802bca4:	f7fb fc4c 	bl	8027540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	2224      	movs	r2, #36	; 0x24
 802bcac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802bcb0:	687b      	ldr	r3, [r7, #4]
 802bcb2:	681b      	ldr	r3, [r3, #0]
 802bcb4:	68da      	ldr	r2, [r3, #12]
 802bcb6:	687b      	ldr	r3, [r7, #4]
 802bcb8:	681b      	ldr	r3, [r3, #0]
 802bcba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bcbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802bcc0:	6878      	ldr	r0, [r7, #4]
 802bcc2:	f000 fd7b 	bl	802c7bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802bcc6:	687b      	ldr	r3, [r7, #4]
 802bcc8:	681b      	ldr	r3, [r3, #0]
 802bcca:	691a      	ldr	r2, [r3, #16]
 802bccc:	687b      	ldr	r3, [r7, #4]
 802bcce:	681b      	ldr	r3, [r3, #0]
 802bcd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802bcd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	681b      	ldr	r3, [r3, #0]
 802bcda:	695a      	ldr	r2, [r3, #20]
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	681b      	ldr	r3, [r3, #0]
 802bce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802bce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	681b      	ldr	r3, [r3, #0]
 802bcea:	68da      	ldr	r2, [r3, #12]
 802bcec:	687b      	ldr	r3, [r7, #4]
 802bcee:	681b      	ldr	r3, [r3, #0]
 802bcf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bcf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bcf6:	687b      	ldr	r3, [r7, #4]
 802bcf8:	2200      	movs	r2, #0
 802bcfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802bcfc:	687b      	ldr	r3, [r7, #4]
 802bcfe:	2220      	movs	r2, #32
 802bd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802bd04:	687b      	ldr	r3, [r7, #4]
 802bd06:	2220      	movs	r2, #32
 802bd08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802bd0c:	2300      	movs	r3, #0
}
 802bd0e:	4618      	mov	r0, r3
 802bd10:	3708      	adds	r7, #8
 802bd12:	46bd      	mov	sp, r7
 802bd14:	bd80      	pop	{r7, pc}

0802bd16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802bd16:	b580      	push	{r7, lr}
 802bd18:	b08a      	sub	sp, #40	; 0x28
 802bd1a:	af02      	add	r7, sp, #8
 802bd1c:	60f8      	str	r0, [r7, #12]
 802bd1e:	60b9      	str	r1, [r7, #8]
 802bd20:	603b      	str	r3, [r7, #0]
 802bd22:	4613      	mov	r3, r2
 802bd24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802bd26:	2300      	movs	r3, #0
 802bd28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802bd2a:	68fb      	ldr	r3, [r7, #12]
 802bd2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bd30:	b2db      	uxtb	r3, r3
 802bd32:	2b20      	cmp	r3, #32
 802bd34:	d17c      	bne.n	802be30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802bd36:	68bb      	ldr	r3, [r7, #8]
 802bd38:	2b00      	cmp	r3, #0
 802bd3a:	d002      	beq.n	802bd42 <HAL_UART_Transmit+0x2c>
 802bd3c:	88fb      	ldrh	r3, [r7, #6]
 802bd3e:	2b00      	cmp	r3, #0
 802bd40:	d101      	bne.n	802bd46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802bd42:	2301      	movs	r3, #1
 802bd44:	e075      	b.n	802be32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802bd46:	68fb      	ldr	r3, [r7, #12]
 802bd48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802bd4c:	2b01      	cmp	r3, #1
 802bd4e:	d101      	bne.n	802bd54 <HAL_UART_Transmit+0x3e>
 802bd50:	2302      	movs	r3, #2
 802bd52:	e06e      	b.n	802be32 <HAL_UART_Transmit+0x11c>
 802bd54:	68fb      	ldr	r3, [r7, #12]
 802bd56:	2201      	movs	r2, #1
 802bd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bd5c:	68fb      	ldr	r3, [r7, #12]
 802bd5e:	2200      	movs	r2, #0
 802bd60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802bd62:	68fb      	ldr	r3, [r7, #12]
 802bd64:	2221      	movs	r2, #33	; 0x21
 802bd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802bd6a:	f7fb fcc9 	bl	8027700 <HAL_GetTick>
 802bd6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802bd70:	68fb      	ldr	r3, [r7, #12]
 802bd72:	88fa      	ldrh	r2, [r7, #6]
 802bd74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802bd76:	68fb      	ldr	r3, [r7, #12]
 802bd78:	88fa      	ldrh	r2, [r7, #6]
 802bd7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802bd7c:	68fb      	ldr	r3, [r7, #12]
 802bd7e:	689b      	ldr	r3, [r3, #8]
 802bd80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd84:	d108      	bne.n	802bd98 <HAL_UART_Transmit+0x82>
 802bd86:	68fb      	ldr	r3, [r7, #12]
 802bd88:	691b      	ldr	r3, [r3, #16]
 802bd8a:	2b00      	cmp	r3, #0
 802bd8c:	d104      	bne.n	802bd98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802bd8e:	2300      	movs	r3, #0
 802bd90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802bd92:	68bb      	ldr	r3, [r7, #8]
 802bd94:	61bb      	str	r3, [r7, #24]
 802bd96:	e003      	b.n	802bda0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802bd98:	68bb      	ldr	r3, [r7, #8]
 802bd9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802bd9c:	2300      	movs	r3, #0
 802bd9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802bda0:	68fb      	ldr	r3, [r7, #12]
 802bda2:	2200      	movs	r2, #0
 802bda4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802bda8:	e02a      	b.n	802be00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802bdaa:	683b      	ldr	r3, [r7, #0]
 802bdac:	9300      	str	r3, [sp, #0]
 802bdae:	697b      	ldr	r3, [r7, #20]
 802bdb0:	2200      	movs	r2, #0
 802bdb2:	2180      	movs	r1, #128	; 0x80
 802bdb4:	68f8      	ldr	r0, [r7, #12]
 802bdb6:	f000 faf9 	bl	802c3ac <UART_WaitOnFlagUntilTimeout>
 802bdba:	4603      	mov	r3, r0
 802bdbc:	2b00      	cmp	r3, #0
 802bdbe:	d001      	beq.n	802bdc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802bdc0:	2303      	movs	r3, #3
 802bdc2:	e036      	b.n	802be32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802bdc4:	69fb      	ldr	r3, [r7, #28]
 802bdc6:	2b00      	cmp	r3, #0
 802bdc8:	d10b      	bne.n	802bde2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802bdca:	69bb      	ldr	r3, [r7, #24]
 802bdcc:	881b      	ldrh	r3, [r3, #0]
 802bdce:	461a      	mov	r2, r3
 802bdd0:	68fb      	ldr	r3, [r7, #12]
 802bdd2:	681b      	ldr	r3, [r3, #0]
 802bdd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802bdd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802bdda:	69bb      	ldr	r3, [r7, #24]
 802bddc:	3302      	adds	r3, #2
 802bdde:	61bb      	str	r3, [r7, #24]
 802bde0:	e007      	b.n	802bdf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802bde2:	69fb      	ldr	r3, [r7, #28]
 802bde4:	781a      	ldrb	r2, [r3, #0]
 802bde6:	68fb      	ldr	r3, [r7, #12]
 802bde8:	681b      	ldr	r3, [r3, #0]
 802bdea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802bdec:	69fb      	ldr	r3, [r7, #28]
 802bdee:	3301      	adds	r3, #1
 802bdf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802bdf6:	b29b      	uxth	r3, r3
 802bdf8:	3b01      	subs	r3, #1
 802bdfa:	b29a      	uxth	r2, r3
 802bdfc:	68fb      	ldr	r3, [r7, #12]
 802bdfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802be00:	68fb      	ldr	r3, [r7, #12]
 802be02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802be04:	b29b      	uxth	r3, r3
 802be06:	2b00      	cmp	r3, #0
 802be08:	d1cf      	bne.n	802bdaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802be0a:	683b      	ldr	r3, [r7, #0]
 802be0c:	9300      	str	r3, [sp, #0]
 802be0e:	697b      	ldr	r3, [r7, #20]
 802be10:	2200      	movs	r2, #0
 802be12:	2140      	movs	r1, #64	; 0x40
 802be14:	68f8      	ldr	r0, [r7, #12]
 802be16:	f000 fac9 	bl	802c3ac <UART_WaitOnFlagUntilTimeout>
 802be1a:	4603      	mov	r3, r0
 802be1c:	2b00      	cmp	r3, #0
 802be1e:	d001      	beq.n	802be24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802be20:	2303      	movs	r3, #3
 802be22:	e006      	b.n	802be32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802be24:	68fb      	ldr	r3, [r7, #12]
 802be26:	2220      	movs	r2, #32
 802be28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802be2c:	2300      	movs	r3, #0
 802be2e:	e000      	b.n	802be32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802be30:	2302      	movs	r3, #2
  }
}
 802be32:	4618      	mov	r0, r3
 802be34:	3720      	adds	r7, #32
 802be36:	46bd      	mov	sp, r7
 802be38:	bd80      	pop	{r7, pc}
	...

0802be3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802be3c:	b580      	push	{r7, lr}
 802be3e:	b0ba      	sub	sp, #232	; 0xe8
 802be40:	af00      	add	r7, sp, #0
 802be42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802be44:	687b      	ldr	r3, [r7, #4]
 802be46:	681b      	ldr	r3, [r3, #0]
 802be48:	681b      	ldr	r3, [r3, #0]
 802be4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802be4e:	687b      	ldr	r3, [r7, #4]
 802be50:	681b      	ldr	r3, [r3, #0]
 802be52:	68db      	ldr	r3, [r3, #12]
 802be54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802be58:	687b      	ldr	r3, [r7, #4]
 802be5a:	681b      	ldr	r3, [r3, #0]
 802be5c:	695b      	ldr	r3, [r3, #20]
 802be5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802be62:	2300      	movs	r3, #0
 802be64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802be68:	2300      	movs	r3, #0
 802be6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802be6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802be72:	f003 030f 	and.w	r3, r3, #15
 802be76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802be7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802be7e:	2b00      	cmp	r3, #0
 802be80:	d10f      	bne.n	802bea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802be82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802be86:	f003 0320 	and.w	r3, r3, #32
 802be8a:	2b00      	cmp	r3, #0
 802be8c:	d009      	beq.n	802bea2 <HAL_UART_IRQHandler+0x66>
 802be8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802be92:	f003 0320 	and.w	r3, r3, #32
 802be96:	2b00      	cmp	r3, #0
 802be98:	d003      	beq.n	802bea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802be9a:	6878      	ldr	r0, [r7, #4]
 802be9c:	f000 fbd3 	bl	802c646 <UART_Receive_IT>
      return;
 802bea0:	e256      	b.n	802c350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802bea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802bea6:	2b00      	cmp	r3, #0
 802bea8:	f000 80de 	beq.w	802c068 <HAL_UART_IRQHandler+0x22c>
 802beac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802beb0:	f003 0301 	and.w	r3, r3, #1
 802beb4:	2b00      	cmp	r3, #0
 802beb6:	d106      	bne.n	802bec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802beb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802bec0:	2b00      	cmp	r3, #0
 802bec2:	f000 80d1 	beq.w	802c068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802bec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802beca:	f003 0301 	and.w	r3, r3, #1
 802bece:	2b00      	cmp	r3, #0
 802bed0:	d00b      	beq.n	802beea <HAL_UART_IRQHandler+0xae>
 802bed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802beda:	2b00      	cmp	r3, #0
 802bedc:	d005      	beq.n	802beea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802bede:	687b      	ldr	r3, [r7, #4]
 802bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bee2:	f043 0201 	orr.w	r2, r3, #1
 802bee6:	687b      	ldr	r3, [r7, #4]
 802bee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802beea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802beee:	f003 0304 	and.w	r3, r3, #4
 802bef2:	2b00      	cmp	r3, #0
 802bef4:	d00b      	beq.n	802bf0e <HAL_UART_IRQHandler+0xd2>
 802bef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802befa:	f003 0301 	and.w	r3, r3, #1
 802befe:	2b00      	cmp	r3, #0
 802bf00:	d005      	beq.n	802bf0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802bf02:	687b      	ldr	r3, [r7, #4]
 802bf04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf06:	f043 0202 	orr.w	r2, r3, #2
 802bf0a:	687b      	ldr	r3, [r7, #4]
 802bf0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802bf0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf12:	f003 0302 	and.w	r3, r3, #2
 802bf16:	2b00      	cmp	r3, #0
 802bf18:	d00b      	beq.n	802bf32 <HAL_UART_IRQHandler+0xf6>
 802bf1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf1e:	f003 0301 	and.w	r3, r3, #1
 802bf22:	2b00      	cmp	r3, #0
 802bf24:	d005      	beq.n	802bf32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802bf26:	687b      	ldr	r3, [r7, #4]
 802bf28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf2a:	f043 0204 	orr.w	r2, r3, #4
 802bf2e:	687b      	ldr	r3, [r7, #4]
 802bf30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802bf32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf36:	f003 0308 	and.w	r3, r3, #8
 802bf3a:	2b00      	cmp	r3, #0
 802bf3c:	d011      	beq.n	802bf62 <HAL_UART_IRQHandler+0x126>
 802bf3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf42:	f003 0320 	and.w	r3, r3, #32
 802bf46:	2b00      	cmp	r3, #0
 802bf48:	d105      	bne.n	802bf56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802bf4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf4e:	f003 0301 	and.w	r3, r3, #1
 802bf52:	2b00      	cmp	r3, #0
 802bf54:	d005      	beq.n	802bf62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf5a:	f043 0208 	orr.w	r2, r3, #8
 802bf5e:	687b      	ldr	r3, [r7, #4]
 802bf60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802bf62:	687b      	ldr	r3, [r7, #4]
 802bf64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf66:	2b00      	cmp	r3, #0
 802bf68:	f000 81ed 	beq.w	802c346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802bf6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf70:	f003 0320 	and.w	r3, r3, #32
 802bf74:	2b00      	cmp	r3, #0
 802bf76:	d008      	beq.n	802bf8a <HAL_UART_IRQHandler+0x14e>
 802bf78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf7c:	f003 0320 	and.w	r3, r3, #32
 802bf80:	2b00      	cmp	r3, #0
 802bf82:	d002      	beq.n	802bf8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802bf84:	6878      	ldr	r0, [r7, #4]
 802bf86:	f000 fb5e 	bl	802c646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802bf8a:	687b      	ldr	r3, [r7, #4]
 802bf8c:	681b      	ldr	r3, [r3, #0]
 802bf8e:	695b      	ldr	r3, [r3, #20]
 802bf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bf94:	2b40      	cmp	r3, #64	; 0x40
 802bf96:	bf0c      	ite	eq
 802bf98:	2301      	moveq	r3, #1
 802bf9a:	2300      	movne	r3, #0
 802bf9c:	b2db      	uxtb	r3, r3
 802bf9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802bfa2:	687b      	ldr	r3, [r7, #4]
 802bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bfa6:	f003 0308 	and.w	r3, r3, #8
 802bfaa:	2b00      	cmp	r3, #0
 802bfac:	d103      	bne.n	802bfb6 <HAL_UART_IRQHandler+0x17a>
 802bfae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802bfb2:	2b00      	cmp	r3, #0
 802bfb4:	d04f      	beq.n	802c056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802bfb6:	6878      	ldr	r0, [r7, #4]
 802bfb8:	f000 fa66 	bl	802c488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfbc:	687b      	ldr	r3, [r7, #4]
 802bfbe:	681b      	ldr	r3, [r3, #0]
 802bfc0:	695b      	ldr	r3, [r3, #20]
 802bfc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bfc6:	2b40      	cmp	r3, #64	; 0x40
 802bfc8:	d141      	bne.n	802c04e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802bfca:	687b      	ldr	r3, [r7, #4]
 802bfcc:	681b      	ldr	r3, [r3, #0]
 802bfce:	3314      	adds	r3, #20
 802bfd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bfd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802bfd8:	e853 3f00 	ldrex	r3, [r3]
 802bfdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802bfe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802bfe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802bfe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802bfec:	687b      	ldr	r3, [r7, #4]
 802bfee:	681b      	ldr	r3, [r3, #0]
 802bff0:	3314      	adds	r3, #20
 802bff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802bff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802bffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802c002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802c006:	e841 2300 	strex	r3, r2, [r1]
 802c00a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802c00e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c012:	2b00      	cmp	r3, #0
 802c014:	d1d9      	bne.n	802bfca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c01a:	2b00      	cmp	r3, #0
 802c01c:	d013      	beq.n	802c046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802c01e:	687b      	ldr	r3, [r7, #4]
 802c020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c022:	4a7d      	ldr	r2, [pc, #500]	; (802c218 <HAL_UART_IRQHandler+0x3dc>)
 802c024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802c026:	687b      	ldr	r3, [r7, #4]
 802c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c02a:	4618      	mov	r0, r3
 802c02c:	f7fb fd7b 	bl	8027b26 <HAL_DMA_Abort_IT>
 802c030:	4603      	mov	r3, r0
 802c032:	2b00      	cmp	r3, #0
 802c034:	d016      	beq.n	802c064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802c036:	687b      	ldr	r3, [r7, #4]
 802c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c03c:	687a      	ldr	r2, [r7, #4]
 802c03e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c040:	4610      	mov	r0, r2
 802c042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c044:	e00e      	b.n	802c064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802c046:	6878      	ldr	r0, [r7, #4]
 802c048:	f000 f99a 	bl	802c380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c04c:	e00a      	b.n	802c064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802c04e:	6878      	ldr	r0, [r7, #4]
 802c050:	f000 f996 	bl	802c380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c054:	e006      	b.n	802c064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802c056:	6878      	ldr	r0, [r7, #4]
 802c058:	f000 f992 	bl	802c380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c05c:	687b      	ldr	r3, [r7, #4]
 802c05e:	2200      	movs	r2, #0
 802c060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802c062:	e170      	b.n	802c346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c064:	bf00      	nop
    return;
 802c066:	e16e      	b.n	802c346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c068:	687b      	ldr	r3, [r7, #4]
 802c06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c06c:	2b01      	cmp	r3, #1
 802c06e:	f040 814a 	bne.w	802c306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802c072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c076:	f003 0310 	and.w	r3, r3, #16
 802c07a:	2b00      	cmp	r3, #0
 802c07c:	f000 8143 	beq.w	802c306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802c080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c084:	f003 0310 	and.w	r3, r3, #16
 802c088:	2b00      	cmp	r3, #0
 802c08a:	f000 813c 	beq.w	802c306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c08e:	2300      	movs	r3, #0
 802c090:	60bb      	str	r3, [r7, #8]
 802c092:	687b      	ldr	r3, [r7, #4]
 802c094:	681b      	ldr	r3, [r3, #0]
 802c096:	681b      	ldr	r3, [r3, #0]
 802c098:	60bb      	str	r3, [r7, #8]
 802c09a:	687b      	ldr	r3, [r7, #4]
 802c09c:	681b      	ldr	r3, [r3, #0]
 802c09e:	685b      	ldr	r3, [r3, #4]
 802c0a0:	60bb      	str	r3, [r7, #8]
 802c0a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c0a4:	687b      	ldr	r3, [r7, #4]
 802c0a6:	681b      	ldr	r3, [r3, #0]
 802c0a8:	695b      	ldr	r3, [r3, #20]
 802c0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c0ae:	2b40      	cmp	r3, #64	; 0x40
 802c0b0:	f040 80b4 	bne.w	802c21c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802c0b4:	687b      	ldr	r3, [r7, #4]
 802c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c0b8:	681b      	ldr	r3, [r3, #0]
 802c0ba:	685b      	ldr	r3, [r3, #4]
 802c0bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802c0c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802c0c4:	2b00      	cmp	r3, #0
 802c0c6:	f000 8140 	beq.w	802c34a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802c0ca:	687b      	ldr	r3, [r7, #4]
 802c0cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c0d2:	429a      	cmp	r2, r3
 802c0d4:	f080 8139 	bcs.w	802c34a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802c0d8:	687b      	ldr	r3, [r7, #4]
 802c0da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c0de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802c0e0:	687b      	ldr	r3, [r7, #4]
 802c0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c0e4:	69db      	ldr	r3, [r3, #28]
 802c0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c0ea:	f000 8088 	beq.w	802c1fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c0ee:	687b      	ldr	r3, [r7, #4]
 802c0f0:	681b      	ldr	r3, [r3, #0]
 802c0f2:	330c      	adds	r3, #12
 802c0f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c0f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c0fc:	e853 3f00 	ldrex	r3, [r3]
 802c100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802c104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802c108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802c10c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c110:	687b      	ldr	r3, [r7, #4]
 802c112:	681b      	ldr	r3, [r3, #0]
 802c114:	330c      	adds	r3, #12
 802c116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802c11a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802c11e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802c126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802c12a:	e841 2300 	strex	r3, r2, [r1]
 802c12e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802c132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c136:	2b00      	cmp	r3, #0
 802c138:	d1d9      	bne.n	802c0ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c13a:	687b      	ldr	r3, [r7, #4]
 802c13c:	681b      	ldr	r3, [r3, #0]
 802c13e:	3314      	adds	r3, #20
 802c140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c144:	e853 3f00 	ldrex	r3, [r3]
 802c148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802c14a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c14c:	f023 0301 	bic.w	r3, r3, #1
 802c150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	681b      	ldr	r3, [r3, #0]
 802c158:	3314      	adds	r3, #20
 802c15a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802c15e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802c162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802c166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802c16a:	e841 2300 	strex	r3, r2, [r1]
 802c16e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802c170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c172:	2b00      	cmp	r3, #0
 802c174:	d1e1      	bne.n	802c13a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c176:	687b      	ldr	r3, [r7, #4]
 802c178:	681b      	ldr	r3, [r3, #0]
 802c17a:	3314      	adds	r3, #20
 802c17c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c17e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c180:	e853 3f00 	ldrex	r3, [r3]
 802c184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802c186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c18c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802c190:	687b      	ldr	r3, [r7, #4]
 802c192:	681b      	ldr	r3, [r3, #0]
 802c194:	3314      	adds	r3, #20
 802c196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802c19a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802c19c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c19e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802c1a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802c1a2:	e841 2300 	strex	r3, r2, [r1]
 802c1a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802c1a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c1aa:	2b00      	cmp	r3, #0
 802c1ac:	d1e3      	bne.n	802c176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802c1ae:	687b      	ldr	r3, [r7, #4]
 802c1b0:	2220      	movs	r2, #32
 802c1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c1b6:	687b      	ldr	r3, [r7, #4]
 802c1b8:	2200      	movs	r2, #0
 802c1ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c1bc:	687b      	ldr	r3, [r7, #4]
 802c1be:	681b      	ldr	r3, [r3, #0]
 802c1c0:	330c      	adds	r3, #12
 802c1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c1c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1c6:	e853 3f00 	ldrex	r3, [r3]
 802c1ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802c1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1ce:	f023 0310 	bic.w	r3, r3, #16
 802c1d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802c1d6:	687b      	ldr	r3, [r7, #4]
 802c1d8:	681b      	ldr	r3, [r3, #0]
 802c1da:	330c      	adds	r3, #12
 802c1dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802c1e0:	65ba      	str	r2, [r7, #88]	; 0x58
 802c1e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c1e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802c1e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802c1e8:	e841 2300 	strex	r3, r2, [r1]
 802c1ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802c1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1f0:	2b00      	cmp	r3, #0
 802c1f2:	d1e3      	bne.n	802c1bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c1f8:	4618      	mov	r0, r3
 802c1fa:	f7fb fc24 	bl	8027a46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802c1fe:	687b      	ldr	r3, [r7, #4]
 802c200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c202:	687b      	ldr	r3, [r7, #4]
 802c204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c206:	b29b      	uxth	r3, r3
 802c208:	1ad3      	subs	r3, r2, r3
 802c20a:	b29b      	uxth	r3, r3
 802c20c:	4619      	mov	r1, r3
 802c20e:	6878      	ldr	r0, [r7, #4]
 802c210:	f000 f8c0 	bl	802c394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c214:	e099      	b.n	802c34a <HAL_UART_IRQHandler+0x50e>
 802c216:	bf00      	nop
 802c218:	0802c54f 	.word	0x0802c54f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802c21c:	687b      	ldr	r3, [r7, #4]
 802c21e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c220:	687b      	ldr	r3, [r7, #4]
 802c222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c224:	b29b      	uxth	r3, r3
 802c226:	1ad3      	subs	r3, r2, r3
 802c228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c230:	b29b      	uxth	r3, r3
 802c232:	2b00      	cmp	r3, #0
 802c234:	f000 808b 	beq.w	802c34e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802c238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c23c:	2b00      	cmp	r3, #0
 802c23e:	f000 8086 	beq.w	802c34e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c242:	687b      	ldr	r3, [r7, #4]
 802c244:	681b      	ldr	r3, [r3, #0]
 802c246:	330c      	adds	r3, #12
 802c248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c24c:	e853 3f00 	ldrex	r3, [r3]
 802c250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c25c:	687b      	ldr	r3, [r7, #4]
 802c25e:	681b      	ldr	r3, [r3, #0]
 802c260:	330c      	adds	r3, #12
 802c262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802c266:	647a      	str	r2, [r7, #68]	; 0x44
 802c268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c26a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802c26c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c26e:	e841 2300 	strex	r3, r2, [r1]
 802c272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802c274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c276:	2b00      	cmp	r3, #0
 802c278:	d1e3      	bne.n	802c242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c27a:	687b      	ldr	r3, [r7, #4]
 802c27c:	681b      	ldr	r3, [r3, #0]
 802c27e:	3314      	adds	r3, #20
 802c280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c284:	e853 3f00 	ldrex	r3, [r3]
 802c288:	623b      	str	r3, [r7, #32]
   return(result);
 802c28a:	6a3b      	ldr	r3, [r7, #32]
 802c28c:	f023 0301 	bic.w	r3, r3, #1
 802c290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802c294:	687b      	ldr	r3, [r7, #4]
 802c296:	681b      	ldr	r3, [r3, #0]
 802c298:	3314      	adds	r3, #20
 802c29a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802c29e:	633a      	str	r2, [r7, #48]	; 0x30
 802c2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802c2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c2a6:	e841 2300 	strex	r3, r2, [r1]
 802c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2ae:	2b00      	cmp	r3, #0
 802c2b0:	d1e3      	bne.n	802c27a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802c2b2:	687b      	ldr	r3, [r7, #4]
 802c2b4:	2220      	movs	r2, #32
 802c2b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c2ba:	687b      	ldr	r3, [r7, #4]
 802c2bc:	2200      	movs	r2, #0
 802c2be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c2c0:	687b      	ldr	r3, [r7, #4]
 802c2c2:	681b      	ldr	r3, [r3, #0]
 802c2c4:	330c      	adds	r3, #12
 802c2c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c2c8:	693b      	ldr	r3, [r7, #16]
 802c2ca:	e853 3f00 	ldrex	r3, [r3]
 802c2ce:	60fb      	str	r3, [r7, #12]
   return(result);
 802c2d0:	68fb      	ldr	r3, [r7, #12]
 802c2d2:	f023 0310 	bic.w	r3, r3, #16
 802c2d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c2da:	687b      	ldr	r3, [r7, #4]
 802c2dc:	681b      	ldr	r3, [r3, #0]
 802c2de:	330c      	adds	r3, #12
 802c2e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802c2e4:	61fa      	str	r2, [r7, #28]
 802c2e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c2e8:	69b9      	ldr	r1, [r7, #24]
 802c2ea:	69fa      	ldr	r2, [r7, #28]
 802c2ec:	e841 2300 	strex	r3, r2, [r1]
 802c2f0:	617b      	str	r3, [r7, #20]
   return(result);
 802c2f2:	697b      	ldr	r3, [r7, #20]
 802c2f4:	2b00      	cmp	r3, #0
 802c2f6:	d1e3      	bne.n	802c2c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802c2f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c2fc:	4619      	mov	r1, r3
 802c2fe:	6878      	ldr	r0, [r7, #4]
 802c300:	f000 f848 	bl	802c394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c304:	e023      	b.n	802c34e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802c306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c30e:	2b00      	cmp	r3, #0
 802c310:	d009      	beq.n	802c326 <HAL_UART_IRQHandler+0x4ea>
 802c312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c31a:	2b00      	cmp	r3, #0
 802c31c:	d003      	beq.n	802c326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802c31e:	6878      	ldr	r0, [r7, #4]
 802c320:	f000 f929 	bl	802c576 <UART_Transmit_IT>
    return;
 802c324:	e014      	b.n	802c350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802c326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c32e:	2b00      	cmp	r3, #0
 802c330:	d00e      	beq.n	802c350 <HAL_UART_IRQHandler+0x514>
 802c332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c33a:	2b00      	cmp	r3, #0
 802c33c:	d008      	beq.n	802c350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802c33e:	6878      	ldr	r0, [r7, #4]
 802c340:	f000 f969 	bl	802c616 <UART_EndTransmit_IT>
    return;
 802c344:	e004      	b.n	802c350 <HAL_UART_IRQHandler+0x514>
    return;
 802c346:	bf00      	nop
 802c348:	e002      	b.n	802c350 <HAL_UART_IRQHandler+0x514>
      return;
 802c34a:	bf00      	nop
 802c34c:	e000      	b.n	802c350 <HAL_UART_IRQHandler+0x514>
      return;
 802c34e:	bf00      	nop
  }
}
 802c350:	37e8      	adds	r7, #232	; 0xe8
 802c352:	46bd      	mov	sp, r7
 802c354:	bd80      	pop	{r7, pc}
 802c356:	bf00      	nop

0802c358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802c358:	b480      	push	{r7}
 802c35a:	b083      	sub	sp, #12
 802c35c:	af00      	add	r7, sp, #0
 802c35e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802c360:	bf00      	nop
 802c362:	370c      	adds	r7, #12
 802c364:	46bd      	mov	sp, r7
 802c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c36a:	4770      	bx	lr

0802c36c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802c36c:	b480      	push	{r7}
 802c36e:	b083      	sub	sp, #12
 802c370:	af00      	add	r7, sp, #0
 802c372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802c374:	bf00      	nop
 802c376:	370c      	adds	r7, #12
 802c378:	46bd      	mov	sp, r7
 802c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c37e:	4770      	bx	lr

0802c380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802c380:	b480      	push	{r7}
 802c382:	b083      	sub	sp, #12
 802c384:	af00      	add	r7, sp, #0
 802c386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802c388:	bf00      	nop
 802c38a:	370c      	adds	r7, #12
 802c38c:	46bd      	mov	sp, r7
 802c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c392:	4770      	bx	lr

0802c394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802c394:	b480      	push	{r7}
 802c396:	b083      	sub	sp, #12
 802c398:	af00      	add	r7, sp, #0
 802c39a:	6078      	str	r0, [r7, #4]
 802c39c:	460b      	mov	r3, r1
 802c39e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802c3a0:	bf00      	nop
 802c3a2:	370c      	adds	r7, #12
 802c3a4:	46bd      	mov	sp, r7
 802c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3aa:	4770      	bx	lr

0802c3ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802c3ac:	b580      	push	{r7, lr}
 802c3ae:	b090      	sub	sp, #64	; 0x40
 802c3b0:	af00      	add	r7, sp, #0
 802c3b2:	60f8      	str	r0, [r7, #12]
 802c3b4:	60b9      	str	r1, [r7, #8]
 802c3b6:	603b      	str	r3, [r7, #0]
 802c3b8:	4613      	mov	r3, r2
 802c3ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c3bc:	e050      	b.n	802c460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802c3be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c3c4:	d04c      	beq.n	802c460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802c3c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3c8:	2b00      	cmp	r3, #0
 802c3ca:	d007      	beq.n	802c3dc <UART_WaitOnFlagUntilTimeout+0x30>
 802c3cc:	f7fb f998 	bl	8027700 <HAL_GetTick>
 802c3d0:	4602      	mov	r2, r0
 802c3d2:	683b      	ldr	r3, [r7, #0]
 802c3d4:	1ad3      	subs	r3, r2, r3
 802c3d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c3d8:	429a      	cmp	r2, r3
 802c3da:	d241      	bcs.n	802c460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802c3dc:	68fb      	ldr	r3, [r7, #12]
 802c3de:	681b      	ldr	r3, [r3, #0]
 802c3e0:	330c      	adds	r3, #12
 802c3e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3e6:	e853 3f00 	ldrex	r3, [r3]
 802c3ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c3ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c3f4:	68fb      	ldr	r3, [r7, #12]
 802c3f6:	681b      	ldr	r3, [r3, #0]
 802c3f8:	330c      	adds	r3, #12
 802c3fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802c3fc:	637a      	str	r2, [r7, #52]	; 0x34
 802c3fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802c402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802c404:	e841 2300 	strex	r3, r2, [r1]
 802c408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c40c:	2b00      	cmp	r3, #0
 802c40e:	d1e5      	bne.n	802c3dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c410:	68fb      	ldr	r3, [r7, #12]
 802c412:	681b      	ldr	r3, [r3, #0]
 802c414:	3314      	adds	r3, #20
 802c416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c418:	697b      	ldr	r3, [r7, #20]
 802c41a:	e853 3f00 	ldrex	r3, [r3]
 802c41e:	613b      	str	r3, [r7, #16]
   return(result);
 802c420:	693b      	ldr	r3, [r7, #16]
 802c422:	f023 0301 	bic.w	r3, r3, #1
 802c426:	63bb      	str	r3, [r7, #56]	; 0x38
 802c428:	68fb      	ldr	r3, [r7, #12]
 802c42a:	681b      	ldr	r3, [r3, #0]
 802c42c:	3314      	adds	r3, #20
 802c42e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c430:	623a      	str	r2, [r7, #32]
 802c432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c434:	69f9      	ldr	r1, [r7, #28]
 802c436:	6a3a      	ldr	r2, [r7, #32]
 802c438:	e841 2300 	strex	r3, r2, [r1]
 802c43c:	61bb      	str	r3, [r7, #24]
   return(result);
 802c43e:	69bb      	ldr	r3, [r7, #24]
 802c440:	2b00      	cmp	r3, #0
 802c442:	d1e5      	bne.n	802c410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802c444:	68fb      	ldr	r3, [r7, #12]
 802c446:	2220      	movs	r2, #32
 802c448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802c44c:	68fb      	ldr	r3, [r7, #12]
 802c44e:	2220      	movs	r2, #32
 802c450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802c454:	68fb      	ldr	r3, [r7, #12]
 802c456:	2200      	movs	r2, #0
 802c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802c45c:	2303      	movs	r3, #3
 802c45e:	e00f      	b.n	802c480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c460:	68fb      	ldr	r3, [r7, #12]
 802c462:	681b      	ldr	r3, [r3, #0]
 802c464:	681a      	ldr	r2, [r3, #0]
 802c466:	68bb      	ldr	r3, [r7, #8]
 802c468:	4013      	ands	r3, r2
 802c46a:	68ba      	ldr	r2, [r7, #8]
 802c46c:	429a      	cmp	r2, r3
 802c46e:	bf0c      	ite	eq
 802c470:	2301      	moveq	r3, #1
 802c472:	2300      	movne	r3, #0
 802c474:	b2db      	uxtb	r3, r3
 802c476:	461a      	mov	r2, r3
 802c478:	79fb      	ldrb	r3, [r7, #7]
 802c47a:	429a      	cmp	r2, r3
 802c47c:	d09f      	beq.n	802c3be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802c47e:	2300      	movs	r3, #0
}
 802c480:	4618      	mov	r0, r3
 802c482:	3740      	adds	r7, #64	; 0x40
 802c484:	46bd      	mov	sp, r7
 802c486:	bd80      	pop	{r7, pc}

0802c488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802c488:	b480      	push	{r7}
 802c48a:	b095      	sub	sp, #84	; 0x54
 802c48c:	af00      	add	r7, sp, #0
 802c48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	681b      	ldr	r3, [r3, #0]
 802c494:	330c      	adds	r3, #12
 802c496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c49a:	e853 3f00 	ldrex	r3, [r3]
 802c49e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c4a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c4a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c4a8:	687b      	ldr	r3, [r7, #4]
 802c4aa:	681b      	ldr	r3, [r3, #0]
 802c4ac:	330c      	adds	r3, #12
 802c4ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c4b0:	643a      	str	r2, [r7, #64]	; 0x40
 802c4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802c4b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802c4b8:	e841 2300 	strex	r3, r2, [r1]
 802c4bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802c4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c4c0:	2b00      	cmp	r3, #0
 802c4c2:	d1e5      	bne.n	802c490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c4c4:	687b      	ldr	r3, [r7, #4]
 802c4c6:	681b      	ldr	r3, [r3, #0]
 802c4c8:	3314      	adds	r3, #20
 802c4ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c4cc:	6a3b      	ldr	r3, [r7, #32]
 802c4ce:	e853 3f00 	ldrex	r3, [r3]
 802c4d2:	61fb      	str	r3, [r7, #28]
   return(result);
 802c4d4:	69fb      	ldr	r3, [r7, #28]
 802c4d6:	f023 0301 	bic.w	r3, r3, #1
 802c4da:	64bb      	str	r3, [r7, #72]	; 0x48
 802c4dc:	687b      	ldr	r3, [r7, #4]
 802c4de:	681b      	ldr	r3, [r3, #0]
 802c4e0:	3314      	adds	r3, #20
 802c4e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c4e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c4e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c4ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c4ec:	e841 2300 	strex	r3, r2, [r1]
 802c4f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4f4:	2b00      	cmp	r3, #0
 802c4f6:	d1e5      	bne.n	802c4c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c4f8:	687b      	ldr	r3, [r7, #4]
 802c4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c4fc:	2b01      	cmp	r3, #1
 802c4fe:	d119      	bne.n	802c534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c500:	687b      	ldr	r3, [r7, #4]
 802c502:	681b      	ldr	r3, [r3, #0]
 802c504:	330c      	adds	r3, #12
 802c506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c508:	68fb      	ldr	r3, [r7, #12]
 802c50a:	e853 3f00 	ldrex	r3, [r3]
 802c50e:	60bb      	str	r3, [r7, #8]
   return(result);
 802c510:	68bb      	ldr	r3, [r7, #8]
 802c512:	f023 0310 	bic.w	r3, r3, #16
 802c516:	647b      	str	r3, [r7, #68]	; 0x44
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	681b      	ldr	r3, [r3, #0]
 802c51c:	330c      	adds	r3, #12
 802c51e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c520:	61ba      	str	r2, [r7, #24]
 802c522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c524:	6979      	ldr	r1, [r7, #20]
 802c526:	69ba      	ldr	r2, [r7, #24]
 802c528:	e841 2300 	strex	r3, r2, [r1]
 802c52c:	613b      	str	r3, [r7, #16]
   return(result);
 802c52e:	693b      	ldr	r3, [r7, #16]
 802c530:	2b00      	cmp	r3, #0
 802c532:	d1e5      	bne.n	802c500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	2220      	movs	r2, #32
 802c538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	2200      	movs	r2, #0
 802c540:	631a      	str	r2, [r3, #48]	; 0x30
}
 802c542:	bf00      	nop
 802c544:	3754      	adds	r7, #84	; 0x54
 802c546:	46bd      	mov	sp, r7
 802c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c54c:	4770      	bx	lr

0802c54e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802c54e:	b580      	push	{r7, lr}
 802c550:	b084      	sub	sp, #16
 802c552:	af00      	add	r7, sp, #0
 802c554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c556:	687b      	ldr	r3, [r7, #4]
 802c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c55a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802c55c:	68fb      	ldr	r3, [r7, #12]
 802c55e:	2200      	movs	r2, #0
 802c560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802c562:	68fb      	ldr	r3, [r7, #12]
 802c564:	2200      	movs	r2, #0
 802c566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802c568:	68f8      	ldr	r0, [r7, #12]
 802c56a:	f7ff ff09 	bl	802c380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c56e:	bf00      	nop
 802c570:	3710      	adds	r7, #16
 802c572:	46bd      	mov	sp, r7
 802c574:	bd80      	pop	{r7, pc}

0802c576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802c576:	b480      	push	{r7}
 802c578:	b085      	sub	sp, #20
 802c57a:	af00      	add	r7, sp, #0
 802c57c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802c57e:	687b      	ldr	r3, [r7, #4]
 802c580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c584:	b2db      	uxtb	r3, r3
 802c586:	2b21      	cmp	r3, #33	; 0x21
 802c588:	d13e      	bne.n	802c608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c58a:	687b      	ldr	r3, [r7, #4]
 802c58c:	689b      	ldr	r3, [r3, #8]
 802c58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c592:	d114      	bne.n	802c5be <UART_Transmit_IT+0x48>
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	691b      	ldr	r3, [r3, #16]
 802c598:	2b00      	cmp	r3, #0
 802c59a:	d110      	bne.n	802c5be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802c59c:	687b      	ldr	r3, [r7, #4]
 802c59e:	6a1b      	ldr	r3, [r3, #32]
 802c5a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802c5a2:	68fb      	ldr	r3, [r7, #12]
 802c5a4:	881b      	ldrh	r3, [r3, #0]
 802c5a6:	461a      	mov	r2, r3
 802c5a8:	687b      	ldr	r3, [r7, #4]
 802c5aa:	681b      	ldr	r3, [r3, #0]
 802c5ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802c5b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802c5b2:	687b      	ldr	r3, [r7, #4]
 802c5b4:	6a1b      	ldr	r3, [r3, #32]
 802c5b6:	1c9a      	adds	r2, r3, #2
 802c5b8:	687b      	ldr	r3, [r7, #4]
 802c5ba:	621a      	str	r2, [r3, #32]
 802c5bc:	e008      	b.n	802c5d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802c5be:	687b      	ldr	r3, [r7, #4]
 802c5c0:	6a1b      	ldr	r3, [r3, #32]
 802c5c2:	1c59      	adds	r1, r3, #1
 802c5c4:	687a      	ldr	r2, [r7, #4]
 802c5c6:	6211      	str	r1, [r2, #32]
 802c5c8:	781a      	ldrb	r2, [r3, #0]
 802c5ca:	687b      	ldr	r3, [r7, #4]
 802c5cc:	681b      	ldr	r3, [r3, #0]
 802c5ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802c5d4:	b29b      	uxth	r3, r3
 802c5d6:	3b01      	subs	r3, #1
 802c5d8:	b29b      	uxth	r3, r3
 802c5da:	687a      	ldr	r2, [r7, #4]
 802c5dc:	4619      	mov	r1, r3
 802c5de:	84d1      	strh	r1, [r2, #38]	; 0x26
 802c5e0:	2b00      	cmp	r3, #0
 802c5e2:	d10f      	bne.n	802c604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802c5e4:	687b      	ldr	r3, [r7, #4]
 802c5e6:	681b      	ldr	r3, [r3, #0]
 802c5e8:	68da      	ldr	r2, [r3, #12]
 802c5ea:	687b      	ldr	r3, [r7, #4]
 802c5ec:	681b      	ldr	r3, [r3, #0]
 802c5ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c5f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802c5f4:	687b      	ldr	r3, [r7, #4]
 802c5f6:	681b      	ldr	r3, [r3, #0]
 802c5f8:	68da      	ldr	r2, [r3, #12]
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	681b      	ldr	r3, [r3, #0]
 802c5fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802c602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802c604:	2300      	movs	r3, #0
 802c606:	e000      	b.n	802c60a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802c608:	2302      	movs	r3, #2
  }
}
 802c60a:	4618      	mov	r0, r3
 802c60c:	3714      	adds	r7, #20
 802c60e:	46bd      	mov	sp, r7
 802c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c614:	4770      	bx	lr

0802c616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802c616:	b580      	push	{r7, lr}
 802c618:	b082      	sub	sp, #8
 802c61a:	af00      	add	r7, sp, #0
 802c61c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	681b      	ldr	r3, [r3, #0]
 802c622:	68da      	ldr	r2, [r3, #12]
 802c624:	687b      	ldr	r3, [r7, #4]
 802c626:	681b      	ldr	r3, [r3, #0]
 802c628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c62c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802c62e:	687b      	ldr	r3, [r7, #4]
 802c630:	2220      	movs	r2, #32
 802c632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802c636:	6878      	ldr	r0, [r7, #4]
 802c638:	f7ff fe8e 	bl	802c358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802c63c:	2300      	movs	r3, #0
}
 802c63e:	4618      	mov	r0, r3
 802c640:	3708      	adds	r7, #8
 802c642:	46bd      	mov	sp, r7
 802c644:	bd80      	pop	{r7, pc}

0802c646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802c646:	b580      	push	{r7, lr}
 802c648:	b08c      	sub	sp, #48	; 0x30
 802c64a:	af00      	add	r7, sp, #0
 802c64c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802c64e:	687b      	ldr	r3, [r7, #4]
 802c650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c654:	b2db      	uxtb	r3, r3
 802c656:	2b22      	cmp	r3, #34	; 0x22
 802c658:	f040 80ab 	bne.w	802c7b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	689b      	ldr	r3, [r3, #8]
 802c660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c664:	d117      	bne.n	802c696 <UART_Receive_IT+0x50>
 802c666:	687b      	ldr	r3, [r7, #4]
 802c668:	691b      	ldr	r3, [r3, #16]
 802c66a:	2b00      	cmp	r3, #0
 802c66c:	d113      	bne.n	802c696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802c66e:	2300      	movs	r3, #0
 802c670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802c672:	687b      	ldr	r3, [r7, #4]
 802c674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802c678:	687b      	ldr	r3, [r7, #4]
 802c67a:	681b      	ldr	r3, [r3, #0]
 802c67c:	685b      	ldr	r3, [r3, #4]
 802c67e:	b29b      	uxth	r3, r3
 802c680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c684:	b29a      	uxth	r2, r3
 802c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802c68a:	687b      	ldr	r3, [r7, #4]
 802c68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c68e:	1c9a      	adds	r2, r3, #2
 802c690:	687b      	ldr	r3, [r7, #4]
 802c692:	629a      	str	r2, [r3, #40]	; 0x28
 802c694:	e026      	b.n	802c6e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802c696:	687b      	ldr	r3, [r7, #4]
 802c698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802c69c:	2300      	movs	r3, #0
 802c69e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802c6a0:	687b      	ldr	r3, [r7, #4]
 802c6a2:	689b      	ldr	r3, [r3, #8]
 802c6a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c6a8:	d007      	beq.n	802c6ba <UART_Receive_IT+0x74>
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	689b      	ldr	r3, [r3, #8]
 802c6ae:	2b00      	cmp	r3, #0
 802c6b0:	d10a      	bne.n	802c6c8 <UART_Receive_IT+0x82>
 802c6b2:	687b      	ldr	r3, [r7, #4]
 802c6b4:	691b      	ldr	r3, [r3, #16]
 802c6b6:	2b00      	cmp	r3, #0
 802c6b8:	d106      	bne.n	802c6c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802c6ba:	687b      	ldr	r3, [r7, #4]
 802c6bc:	681b      	ldr	r3, [r3, #0]
 802c6be:	685b      	ldr	r3, [r3, #4]
 802c6c0:	b2da      	uxtb	r2, r3
 802c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6c4:	701a      	strb	r2, [r3, #0]
 802c6c6:	e008      	b.n	802c6da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802c6c8:	687b      	ldr	r3, [r7, #4]
 802c6ca:	681b      	ldr	r3, [r3, #0]
 802c6cc:	685b      	ldr	r3, [r3, #4]
 802c6ce:	b2db      	uxtb	r3, r3
 802c6d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c6d4:	b2da      	uxtb	r2, r3
 802c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802c6da:	687b      	ldr	r3, [r7, #4]
 802c6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6de:	1c5a      	adds	r2, r3, #1
 802c6e0:	687b      	ldr	r3, [r7, #4]
 802c6e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802c6e4:	687b      	ldr	r3, [r7, #4]
 802c6e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c6e8:	b29b      	uxth	r3, r3
 802c6ea:	3b01      	subs	r3, #1
 802c6ec:	b29b      	uxth	r3, r3
 802c6ee:	687a      	ldr	r2, [r7, #4]
 802c6f0:	4619      	mov	r1, r3
 802c6f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802c6f4:	2b00      	cmp	r3, #0
 802c6f6:	d15a      	bne.n	802c7ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802c6f8:	687b      	ldr	r3, [r7, #4]
 802c6fa:	681b      	ldr	r3, [r3, #0]
 802c6fc:	68da      	ldr	r2, [r3, #12]
 802c6fe:	687b      	ldr	r3, [r7, #4]
 802c700:	681b      	ldr	r3, [r3, #0]
 802c702:	f022 0220 	bic.w	r2, r2, #32
 802c706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802c708:	687b      	ldr	r3, [r7, #4]
 802c70a:	681b      	ldr	r3, [r3, #0]
 802c70c:	68da      	ldr	r2, [r3, #12]
 802c70e:	687b      	ldr	r3, [r7, #4]
 802c710:	681b      	ldr	r3, [r3, #0]
 802c712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802c718:	687b      	ldr	r3, [r7, #4]
 802c71a:	681b      	ldr	r3, [r3, #0]
 802c71c:	695a      	ldr	r2, [r3, #20]
 802c71e:	687b      	ldr	r3, [r7, #4]
 802c720:	681b      	ldr	r3, [r3, #0]
 802c722:	f022 0201 	bic.w	r2, r2, #1
 802c726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	2220      	movs	r2, #32
 802c72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c730:	687b      	ldr	r3, [r7, #4]
 802c732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c734:	2b01      	cmp	r3, #1
 802c736:	d135      	bne.n	802c7a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c738:	687b      	ldr	r3, [r7, #4]
 802c73a:	2200      	movs	r2, #0
 802c73c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c73e:	687b      	ldr	r3, [r7, #4]
 802c740:	681b      	ldr	r3, [r3, #0]
 802c742:	330c      	adds	r3, #12
 802c744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c746:	697b      	ldr	r3, [r7, #20]
 802c748:	e853 3f00 	ldrex	r3, [r3]
 802c74c:	613b      	str	r3, [r7, #16]
   return(result);
 802c74e:	693b      	ldr	r3, [r7, #16]
 802c750:	f023 0310 	bic.w	r3, r3, #16
 802c754:	627b      	str	r3, [r7, #36]	; 0x24
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	681b      	ldr	r3, [r3, #0]
 802c75a:	330c      	adds	r3, #12
 802c75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c75e:	623a      	str	r2, [r7, #32]
 802c760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c762:	69f9      	ldr	r1, [r7, #28]
 802c764:	6a3a      	ldr	r2, [r7, #32]
 802c766:	e841 2300 	strex	r3, r2, [r1]
 802c76a:	61bb      	str	r3, [r7, #24]
   return(result);
 802c76c:	69bb      	ldr	r3, [r7, #24]
 802c76e:	2b00      	cmp	r3, #0
 802c770:	d1e5      	bne.n	802c73e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802c772:	687b      	ldr	r3, [r7, #4]
 802c774:	681b      	ldr	r3, [r3, #0]
 802c776:	681b      	ldr	r3, [r3, #0]
 802c778:	f003 0310 	and.w	r3, r3, #16
 802c77c:	2b10      	cmp	r3, #16
 802c77e:	d10a      	bne.n	802c796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c780:	2300      	movs	r3, #0
 802c782:	60fb      	str	r3, [r7, #12]
 802c784:	687b      	ldr	r3, [r7, #4]
 802c786:	681b      	ldr	r3, [r3, #0]
 802c788:	681b      	ldr	r3, [r3, #0]
 802c78a:	60fb      	str	r3, [r7, #12]
 802c78c:	687b      	ldr	r3, [r7, #4]
 802c78e:	681b      	ldr	r3, [r3, #0]
 802c790:	685b      	ldr	r3, [r3, #4]
 802c792:	60fb      	str	r3, [r7, #12]
 802c794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802c796:	687b      	ldr	r3, [r7, #4]
 802c798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c79a:	4619      	mov	r1, r3
 802c79c:	6878      	ldr	r0, [r7, #4]
 802c79e:	f7ff fdf9 	bl	802c394 <HAL_UARTEx_RxEventCallback>
 802c7a2:	e002      	b.n	802c7aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802c7a4:	6878      	ldr	r0, [r7, #4]
 802c7a6:	f7ff fde1 	bl	802c36c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802c7aa:	2300      	movs	r3, #0
 802c7ac:	e002      	b.n	802c7b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802c7ae:	2300      	movs	r3, #0
 802c7b0:	e000      	b.n	802c7b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802c7b2:	2302      	movs	r3, #2
  }
}
 802c7b4:	4618      	mov	r0, r3
 802c7b6:	3730      	adds	r7, #48	; 0x30
 802c7b8:	46bd      	mov	sp, r7
 802c7ba:	bd80      	pop	{r7, pc}

0802c7bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802c7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802c7c0:	b0c0      	sub	sp, #256	; 0x100
 802c7c2:	af00      	add	r7, sp, #0
 802c7c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802c7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7cc:	681b      	ldr	r3, [r3, #0]
 802c7ce:	691b      	ldr	r3, [r3, #16]
 802c7d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802c7d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7d8:	68d9      	ldr	r1, [r3, #12]
 802c7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7de:	681a      	ldr	r2, [r3, #0]
 802c7e0:	ea40 0301 	orr.w	r3, r0, r1
 802c7e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802c7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7ea:	689a      	ldr	r2, [r3, #8]
 802c7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7f0:	691b      	ldr	r3, [r3, #16]
 802c7f2:	431a      	orrs	r2, r3
 802c7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7f8:	695b      	ldr	r3, [r3, #20]
 802c7fa:	431a      	orrs	r2, r3
 802c7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c800:	69db      	ldr	r3, [r3, #28]
 802c802:	4313      	orrs	r3, r2
 802c804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c80c:	681b      	ldr	r3, [r3, #0]
 802c80e:	68db      	ldr	r3, [r3, #12]
 802c810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802c814:	f021 010c 	bic.w	r1, r1, #12
 802c818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c81c:	681a      	ldr	r2, [r3, #0]
 802c81e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802c822:	430b      	orrs	r3, r1
 802c824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802c826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c82a:	681b      	ldr	r3, [r3, #0]
 802c82c:	695b      	ldr	r3, [r3, #20]
 802c82e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802c832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c836:	6999      	ldr	r1, [r3, #24]
 802c838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c83c:	681a      	ldr	r2, [r3, #0]
 802c83e:	ea40 0301 	orr.w	r3, r0, r1
 802c842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802c844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c848:	681a      	ldr	r2, [r3, #0]
 802c84a:	4b8f      	ldr	r3, [pc, #572]	; (802ca88 <UART_SetConfig+0x2cc>)
 802c84c:	429a      	cmp	r2, r3
 802c84e:	d005      	beq.n	802c85c <UART_SetConfig+0xa0>
 802c850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c854:	681a      	ldr	r2, [r3, #0]
 802c856:	4b8d      	ldr	r3, [pc, #564]	; (802ca8c <UART_SetConfig+0x2d0>)
 802c858:	429a      	cmp	r2, r3
 802c85a:	d104      	bne.n	802c866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802c85c:	f7fd ffd6 	bl	802a80c <HAL_RCC_GetPCLK2Freq>
 802c860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802c864:	e003      	b.n	802c86e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802c866:	f7fd ffbd 	bl	802a7e4 <HAL_RCC_GetPCLK1Freq>
 802c86a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802c86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c872:	69db      	ldr	r3, [r3, #28]
 802c874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802c878:	f040 810c 	bne.w	802ca94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802c87c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c880:	2200      	movs	r2, #0
 802c882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802c886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802c88a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802c88e:	4622      	mov	r2, r4
 802c890:	462b      	mov	r3, r5
 802c892:	1891      	adds	r1, r2, r2
 802c894:	65b9      	str	r1, [r7, #88]	; 0x58
 802c896:	415b      	adcs	r3, r3
 802c898:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c89a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802c89e:	4621      	mov	r1, r4
 802c8a0:	eb12 0801 	adds.w	r8, r2, r1
 802c8a4:	4629      	mov	r1, r5
 802c8a6:	eb43 0901 	adc.w	r9, r3, r1
 802c8aa:	f04f 0200 	mov.w	r2, #0
 802c8ae:	f04f 0300 	mov.w	r3, #0
 802c8b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802c8b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802c8ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802c8be:	4690      	mov	r8, r2
 802c8c0:	4699      	mov	r9, r3
 802c8c2:	4623      	mov	r3, r4
 802c8c4:	eb18 0303 	adds.w	r3, r8, r3
 802c8c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802c8cc:	462b      	mov	r3, r5
 802c8ce:	eb49 0303 	adc.w	r3, r9, r3
 802c8d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802c8d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c8da:	685b      	ldr	r3, [r3, #4]
 802c8dc:	2200      	movs	r2, #0
 802c8de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802c8e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802c8e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802c8ea:	460b      	mov	r3, r1
 802c8ec:	18db      	adds	r3, r3, r3
 802c8ee:	653b      	str	r3, [r7, #80]	; 0x50
 802c8f0:	4613      	mov	r3, r2
 802c8f2:	eb42 0303 	adc.w	r3, r2, r3
 802c8f6:	657b      	str	r3, [r7, #84]	; 0x54
 802c8f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802c8fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802c900:	f7f5 fcb6 	bl	8022270 <__aeabi_uldivmod>
 802c904:	4602      	mov	r2, r0
 802c906:	460b      	mov	r3, r1
 802c908:	4b61      	ldr	r3, [pc, #388]	; (802ca90 <UART_SetConfig+0x2d4>)
 802c90a:	fba3 2302 	umull	r2, r3, r3, r2
 802c90e:	095b      	lsrs	r3, r3, #5
 802c910:	011c      	lsls	r4, r3, #4
 802c912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c916:	2200      	movs	r2, #0
 802c918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c91c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802c920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802c924:	4642      	mov	r2, r8
 802c926:	464b      	mov	r3, r9
 802c928:	1891      	adds	r1, r2, r2
 802c92a:	64b9      	str	r1, [r7, #72]	; 0x48
 802c92c:	415b      	adcs	r3, r3
 802c92e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802c934:	4641      	mov	r1, r8
 802c936:	eb12 0a01 	adds.w	sl, r2, r1
 802c93a:	4649      	mov	r1, r9
 802c93c:	eb43 0b01 	adc.w	fp, r3, r1
 802c940:	f04f 0200 	mov.w	r2, #0
 802c944:	f04f 0300 	mov.w	r3, #0
 802c948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802c94c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802c950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802c954:	4692      	mov	sl, r2
 802c956:	469b      	mov	fp, r3
 802c958:	4643      	mov	r3, r8
 802c95a:	eb1a 0303 	adds.w	r3, sl, r3
 802c95e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c962:	464b      	mov	r3, r9
 802c964:	eb4b 0303 	adc.w	r3, fp, r3
 802c968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802c96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c970:	685b      	ldr	r3, [r3, #4]
 802c972:	2200      	movs	r2, #0
 802c974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802c97c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802c980:	460b      	mov	r3, r1
 802c982:	18db      	adds	r3, r3, r3
 802c984:	643b      	str	r3, [r7, #64]	; 0x40
 802c986:	4613      	mov	r3, r2
 802c988:	eb42 0303 	adc.w	r3, r2, r3
 802c98c:	647b      	str	r3, [r7, #68]	; 0x44
 802c98e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802c992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802c996:	f7f5 fc6b 	bl	8022270 <__aeabi_uldivmod>
 802c99a:	4602      	mov	r2, r0
 802c99c:	460b      	mov	r3, r1
 802c99e:	4611      	mov	r1, r2
 802c9a0:	4b3b      	ldr	r3, [pc, #236]	; (802ca90 <UART_SetConfig+0x2d4>)
 802c9a2:	fba3 2301 	umull	r2, r3, r3, r1
 802c9a6:	095b      	lsrs	r3, r3, #5
 802c9a8:	2264      	movs	r2, #100	; 0x64
 802c9aa:	fb02 f303 	mul.w	r3, r2, r3
 802c9ae:	1acb      	subs	r3, r1, r3
 802c9b0:	00db      	lsls	r3, r3, #3
 802c9b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802c9b6:	4b36      	ldr	r3, [pc, #216]	; (802ca90 <UART_SetConfig+0x2d4>)
 802c9b8:	fba3 2302 	umull	r2, r3, r3, r2
 802c9bc:	095b      	lsrs	r3, r3, #5
 802c9be:	005b      	lsls	r3, r3, #1
 802c9c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802c9c4:	441c      	add	r4, r3
 802c9c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c9ca:	2200      	movs	r2, #0
 802c9cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c9d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802c9d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802c9d8:	4642      	mov	r2, r8
 802c9da:	464b      	mov	r3, r9
 802c9dc:	1891      	adds	r1, r2, r2
 802c9de:	63b9      	str	r1, [r7, #56]	; 0x38
 802c9e0:	415b      	adcs	r3, r3
 802c9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c9e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802c9e8:	4641      	mov	r1, r8
 802c9ea:	1851      	adds	r1, r2, r1
 802c9ec:	6339      	str	r1, [r7, #48]	; 0x30
 802c9ee:	4649      	mov	r1, r9
 802c9f0:	414b      	adcs	r3, r1
 802c9f2:	637b      	str	r3, [r7, #52]	; 0x34
 802c9f4:	f04f 0200 	mov.w	r2, #0
 802c9f8:	f04f 0300 	mov.w	r3, #0
 802c9fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802ca00:	4659      	mov	r1, fp
 802ca02:	00cb      	lsls	r3, r1, #3
 802ca04:	4651      	mov	r1, sl
 802ca06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802ca0a:	4651      	mov	r1, sl
 802ca0c:	00ca      	lsls	r2, r1, #3
 802ca0e:	4610      	mov	r0, r2
 802ca10:	4619      	mov	r1, r3
 802ca12:	4603      	mov	r3, r0
 802ca14:	4642      	mov	r2, r8
 802ca16:	189b      	adds	r3, r3, r2
 802ca18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802ca1c:	464b      	mov	r3, r9
 802ca1e:	460a      	mov	r2, r1
 802ca20:	eb42 0303 	adc.w	r3, r2, r3
 802ca24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802ca28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802ca2c:	685b      	ldr	r3, [r3, #4]
 802ca2e:	2200      	movs	r2, #0
 802ca30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802ca34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802ca38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802ca3c:	460b      	mov	r3, r1
 802ca3e:	18db      	adds	r3, r3, r3
 802ca40:	62bb      	str	r3, [r7, #40]	; 0x28
 802ca42:	4613      	mov	r3, r2
 802ca44:	eb42 0303 	adc.w	r3, r2, r3
 802ca48:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ca4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802ca4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802ca52:	f7f5 fc0d 	bl	8022270 <__aeabi_uldivmod>
 802ca56:	4602      	mov	r2, r0
 802ca58:	460b      	mov	r3, r1
 802ca5a:	4b0d      	ldr	r3, [pc, #52]	; (802ca90 <UART_SetConfig+0x2d4>)
 802ca5c:	fba3 1302 	umull	r1, r3, r3, r2
 802ca60:	095b      	lsrs	r3, r3, #5
 802ca62:	2164      	movs	r1, #100	; 0x64
 802ca64:	fb01 f303 	mul.w	r3, r1, r3
 802ca68:	1ad3      	subs	r3, r2, r3
 802ca6a:	00db      	lsls	r3, r3, #3
 802ca6c:	3332      	adds	r3, #50	; 0x32
 802ca6e:	4a08      	ldr	r2, [pc, #32]	; (802ca90 <UART_SetConfig+0x2d4>)
 802ca70:	fba2 2303 	umull	r2, r3, r2, r3
 802ca74:	095b      	lsrs	r3, r3, #5
 802ca76:	f003 0207 	and.w	r2, r3, #7
 802ca7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802ca7e:	681b      	ldr	r3, [r3, #0]
 802ca80:	4422      	add	r2, r4
 802ca82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802ca84:	e106      	b.n	802cc94 <UART_SetConfig+0x4d8>
 802ca86:	bf00      	nop
 802ca88:	40011000 	.word	0x40011000
 802ca8c:	40011400 	.word	0x40011400
 802ca90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802ca94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802ca98:	2200      	movs	r2, #0
 802ca9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802ca9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802caa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802caa6:	4642      	mov	r2, r8
 802caa8:	464b      	mov	r3, r9
 802caaa:	1891      	adds	r1, r2, r2
 802caac:	6239      	str	r1, [r7, #32]
 802caae:	415b      	adcs	r3, r3
 802cab0:	627b      	str	r3, [r7, #36]	; 0x24
 802cab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802cab6:	4641      	mov	r1, r8
 802cab8:	1854      	adds	r4, r2, r1
 802caba:	4649      	mov	r1, r9
 802cabc:	eb43 0501 	adc.w	r5, r3, r1
 802cac0:	f04f 0200 	mov.w	r2, #0
 802cac4:	f04f 0300 	mov.w	r3, #0
 802cac8:	00eb      	lsls	r3, r5, #3
 802caca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802cace:	00e2      	lsls	r2, r4, #3
 802cad0:	4614      	mov	r4, r2
 802cad2:	461d      	mov	r5, r3
 802cad4:	4643      	mov	r3, r8
 802cad6:	18e3      	adds	r3, r4, r3
 802cad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802cadc:	464b      	mov	r3, r9
 802cade:	eb45 0303 	adc.w	r3, r5, r3
 802cae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802cae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802caea:	685b      	ldr	r3, [r3, #4]
 802caec:	2200      	movs	r2, #0
 802caee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802caf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802caf6:	f04f 0200 	mov.w	r2, #0
 802cafa:	f04f 0300 	mov.w	r3, #0
 802cafe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802cb02:	4629      	mov	r1, r5
 802cb04:	008b      	lsls	r3, r1, #2
 802cb06:	4621      	mov	r1, r4
 802cb08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cb0c:	4621      	mov	r1, r4
 802cb0e:	008a      	lsls	r2, r1, #2
 802cb10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802cb14:	f7f5 fbac 	bl	8022270 <__aeabi_uldivmod>
 802cb18:	4602      	mov	r2, r0
 802cb1a:	460b      	mov	r3, r1
 802cb1c:	4b60      	ldr	r3, [pc, #384]	; (802cca0 <UART_SetConfig+0x4e4>)
 802cb1e:	fba3 2302 	umull	r2, r3, r3, r2
 802cb22:	095b      	lsrs	r3, r3, #5
 802cb24:	011c      	lsls	r4, r3, #4
 802cb26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cb2a:	2200      	movs	r2, #0
 802cb2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802cb30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802cb34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802cb38:	4642      	mov	r2, r8
 802cb3a:	464b      	mov	r3, r9
 802cb3c:	1891      	adds	r1, r2, r2
 802cb3e:	61b9      	str	r1, [r7, #24]
 802cb40:	415b      	adcs	r3, r3
 802cb42:	61fb      	str	r3, [r7, #28]
 802cb44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802cb48:	4641      	mov	r1, r8
 802cb4a:	1851      	adds	r1, r2, r1
 802cb4c:	6139      	str	r1, [r7, #16]
 802cb4e:	4649      	mov	r1, r9
 802cb50:	414b      	adcs	r3, r1
 802cb52:	617b      	str	r3, [r7, #20]
 802cb54:	f04f 0200 	mov.w	r2, #0
 802cb58:	f04f 0300 	mov.w	r3, #0
 802cb5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802cb60:	4659      	mov	r1, fp
 802cb62:	00cb      	lsls	r3, r1, #3
 802cb64:	4651      	mov	r1, sl
 802cb66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cb6a:	4651      	mov	r1, sl
 802cb6c:	00ca      	lsls	r2, r1, #3
 802cb6e:	4610      	mov	r0, r2
 802cb70:	4619      	mov	r1, r3
 802cb72:	4603      	mov	r3, r0
 802cb74:	4642      	mov	r2, r8
 802cb76:	189b      	adds	r3, r3, r2
 802cb78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802cb7c:	464b      	mov	r3, r9
 802cb7e:	460a      	mov	r2, r1
 802cb80:	eb42 0303 	adc.w	r3, r2, r3
 802cb84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802cb88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cb8c:	685b      	ldr	r3, [r3, #4]
 802cb8e:	2200      	movs	r2, #0
 802cb90:	67bb      	str	r3, [r7, #120]	; 0x78
 802cb92:	67fa      	str	r2, [r7, #124]	; 0x7c
 802cb94:	f04f 0200 	mov.w	r2, #0
 802cb98:	f04f 0300 	mov.w	r3, #0
 802cb9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802cba0:	4649      	mov	r1, r9
 802cba2:	008b      	lsls	r3, r1, #2
 802cba4:	4641      	mov	r1, r8
 802cba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cbaa:	4641      	mov	r1, r8
 802cbac:	008a      	lsls	r2, r1, #2
 802cbae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802cbb2:	f7f5 fb5d 	bl	8022270 <__aeabi_uldivmod>
 802cbb6:	4602      	mov	r2, r0
 802cbb8:	460b      	mov	r3, r1
 802cbba:	4611      	mov	r1, r2
 802cbbc:	4b38      	ldr	r3, [pc, #224]	; (802cca0 <UART_SetConfig+0x4e4>)
 802cbbe:	fba3 2301 	umull	r2, r3, r3, r1
 802cbc2:	095b      	lsrs	r3, r3, #5
 802cbc4:	2264      	movs	r2, #100	; 0x64
 802cbc6:	fb02 f303 	mul.w	r3, r2, r3
 802cbca:	1acb      	subs	r3, r1, r3
 802cbcc:	011b      	lsls	r3, r3, #4
 802cbce:	3332      	adds	r3, #50	; 0x32
 802cbd0:	4a33      	ldr	r2, [pc, #204]	; (802cca0 <UART_SetConfig+0x4e4>)
 802cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 802cbd6:	095b      	lsrs	r3, r3, #5
 802cbd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802cbdc:	441c      	add	r4, r3
 802cbde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cbe2:	2200      	movs	r2, #0
 802cbe4:	673b      	str	r3, [r7, #112]	; 0x70
 802cbe6:	677a      	str	r2, [r7, #116]	; 0x74
 802cbe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802cbec:	4642      	mov	r2, r8
 802cbee:	464b      	mov	r3, r9
 802cbf0:	1891      	adds	r1, r2, r2
 802cbf2:	60b9      	str	r1, [r7, #8]
 802cbf4:	415b      	adcs	r3, r3
 802cbf6:	60fb      	str	r3, [r7, #12]
 802cbf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802cbfc:	4641      	mov	r1, r8
 802cbfe:	1851      	adds	r1, r2, r1
 802cc00:	6039      	str	r1, [r7, #0]
 802cc02:	4649      	mov	r1, r9
 802cc04:	414b      	adcs	r3, r1
 802cc06:	607b      	str	r3, [r7, #4]
 802cc08:	f04f 0200 	mov.w	r2, #0
 802cc0c:	f04f 0300 	mov.w	r3, #0
 802cc10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802cc14:	4659      	mov	r1, fp
 802cc16:	00cb      	lsls	r3, r1, #3
 802cc18:	4651      	mov	r1, sl
 802cc1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cc1e:	4651      	mov	r1, sl
 802cc20:	00ca      	lsls	r2, r1, #3
 802cc22:	4610      	mov	r0, r2
 802cc24:	4619      	mov	r1, r3
 802cc26:	4603      	mov	r3, r0
 802cc28:	4642      	mov	r2, r8
 802cc2a:	189b      	adds	r3, r3, r2
 802cc2c:	66bb      	str	r3, [r7, #104]	; 0x68
 802cc2e:	464b      	mov	r3, r9
 802cc30:	460a      	mov	r2, r1
 802cc32:	eb42 0303 	adc.w	r3, r2, r3
 802cc36:	66fb      	str	r3, [r7, #108]	; 0x6c
 802cc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cc3c:	685b      	ldr	r3, [r3, #4]
 802cc3e:	2200      	movs	r2, #0
 802cc40:	663b      	str	r3, [r7, #96]	; 0x60
 802cc42:	667a      	str	r2, [r7, #100]	; 0x64
 802cc44:	f04f 0200 	mov.w	r2, #0
 802cc48:	f04f 0300 	mov.w	r3, #0
 802cc4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802cc50:	4649      	mov	r1, r9
 802cc52:	008b      	lsls	r3, r1, #2
 802cc54:	4641      	mov	r1, r8
 802cc56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cc5a:	4641      	mov	r1, r8
 802cc5c:	008a      	lsls	r2, r1, #2
 802cc5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802cc62:	f7f5 fb05 	bl	8022270 <__aeabi_uldivmod>
 802cc66:	4602      	mov	r2, r0
 802cc68:	460b      	mov	r3, r1
 802cc6a:	4b0d      	ldr	r3, [pc, #52]	; (802cca0 <UART_SetConfig+0x4e4>)
 802cc6c:	fba3 1302 	umull	r1, r3, r3, r2
 802cc70:	095b      	lsrs	r3, r3, #5
 802cc72:	2164      	movs	r1, #100	; 0x64
 802cc74:	fb01 f303 	mul.w	r3, r1, r3
 802cc78:	1ad3      	subs	r3, r2, r3
 802cc7a:	011b      	lsls	r3, r3, #4
 802cc7c:	3332      	adds	r3, #50	; 0x32
 802cc7e:	4a08      	ldr	r2, [pc, #32]	; (802cca0 <UART_SetConfig+0x4e4>)
 802cc80:	fba2 2303 	umull	r2, r3, r2, r3
 802cc84:	095b      	lsrs	r3, r3, #5
 802cc86:	f003 020f 	and.w	r2, r3, #15
 802cc8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cc8e:	681b      	ldr	r3, [r3, #0]
 802cc90:	4422      	add	r2, r4
 802cc92:	609a      	str	r2, [r3, #8]
}
 802cc94:	bf00      	nop
 802cc96:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802cc9a:	46bd      	mov	sp, r7
 802cc9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802cca0:	51eb851f 	.word	0x51eb851f

0802cca4 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 802cca4:	b480      	push	{r7}
 802cca6:	b083      	sub	sp, #12
 802cca8:	af00      	add	r7, sp, #0
 802ccaa:	6078      	str	r0, [r7, #4]
 802ccac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 802ccae:	683b      	ldr	r3, [r7, #0]
 802ccb0:	681b      	ldr	r3, [r3, #0]
 802ccb2:	2b10      	cmp	r3, #16
 802ccb4:	d11c      	bne.n	802ccf0 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802ccb6:	687b      	ldr	r3, [r7, #4]
 802ccb8:	681a      	ldr	r2, [r3, #0]
 802ccba:	4b1f      	ldr	r3, [pc, #124]	; (802cd38 <FSMC_NAND_Init+0x94>)
 802ccbc:	4013      	ands	r3, r2
 802ccbe:	683a      	ldr	r2, [r7, #0]
 802ccc0:	6851      	ldr	r1, [r2, #4]
 802ccc2:	683a      	ldr	r2, [r7, #0]
 802ccc4:	6892      	ldr	r2, [r2, #8]
 802ccc6:	4311      	orrs	r1, r2
 802ccc8:	683a      	ldr	r2, [r7, #0]
 802ccca:	68d2      	ldr	r2, [r2, #12]
 802cccc:	4311      	orrs	r1, r2
 802ccce:	683a      	ldr	r2, [r7, #0]
 802ccd0:	6912      	ldr	r2, [r2, #16]
 802ccd2:	4311      	orrs	r1, r2
 802ccd4:	683a      	ldr	r2, [r7, #0]
 802ccd6:	6952      	ldr	r2, [r2, #20]
 802ccd8:	0252      	lsls	r2, r2, #9
 802ccda:	4311      	orrs	r1, r2
 802ccdc:	683a      	ldr	r2, [r7, #0]
 802ccde:	6992      	ldr	r2, [r2, #24]
 802cce0:	0352      	lsls	r2, r2, #13
 802cce2:	430a      	orrs	r2, r1
 802cce4:	4313      	orrs	r3, r2
 802cce6:	f043 0208 	orr.w	r2, r3, #8
 802ccea:	687b      	ldr	r3, [r7, #4]
 802ccec:	601a      	str	r2, [r3, #0]
 802ccee:	e01b      	b.n	802cd28 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	6a1a      	ldr	r2, [r3, #32]
 802ccf4:	4b10      	ldr	r3, [pc, #64]	; (802cd38 <FSMC_NAND_Init+0x94>)
 802ccf6:	4013      	ands	r3, r2
 802ccf8:	683a      	ldr	r2, [r7, #0]
 802ccfa:	6851      	ldr	r1, [r2, #4]
 802ccfc:	683a      	ldr	r2, [r7, #0]
 802ccfe:	6892      	ldr	r2, [r2, #8]
 802cd00:	4311      	orrs	r1, r2
 802cd02:	683a      	ldr	r2, [r7, #0]
 802cd04:	68d2      	ldr	r2, [r2, #12]
 802cd06:	4311      	orrs	r1, r2
 802cd08:	683a      	ldr	r2, [r7, #0]
 802cd0a:	6912      	ldr	r2, [r2, #16]
 802cd0c:	4311      	orrs	r1, r2
 802cd0e:	683a      	ldr	r2, [r7, #0]
 802cd10:	6952      	ldr	r2, [r2, #20]
 802cd12:	0252      	lsls	r2, r2, #9
 802cd14:	4311      	orrs	r1, r2
 802cd16:	683a      	ldr	r2, [r7, #0]
 802cd18:	6992      	ldr	r2, [r2, #24]
 802cd1a:	0352      	lsls	r2, r2, #13
 802cd1c:	430a      	orrs	r2, r1
 802cd1e:	4313      	orrs	r3, r2
 802cd20:	f043 0208 	orr.w	r2, r3, #8
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 802cd28:	2300      	movs	r3, #0
}
 802cd2a:	4618      	mov	r0, r3
 802cd2c:	370c      	adds	r7, #12
 802cd2e:	46bd      	mov	sp, r7
 802cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd34:	4770      	bx	lr
 802cd36:	bf00      	nop
 802cd38:	fff00181 	.word	0xfff00181

0802cd3c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cd3c:	b480      	push	{r7}
 802cd3e:	b085      	sub	sp, #20
 802cd40:	af00      	add	r7, sp, #0
 802cd42:	60f8      	str	r0, [r7, #12]
 802cd44:	60b9      	str	r1, [r7, #8]
 802cd46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802cd48:	687b      	ldr	r3, [r7, #4]
 802cd4a:	2b10      	cmp	r3, #16
 802cd4c:	d112      	bne.n	802cd74 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cd4e:	68fb      	ldr	r3, [r7, #12]
 802cd50:	689b      	ldr	r3, [r3, #8]
 802cd52:	68bb      	ldr	r3, [r7, #8]
 802cd54:	681a      	ldr	r2, [r3, #0]
 802cd56:	68bb      	ldr	r3, [r7, #8]
 802cd58:	685b      	ldr	r3, [r3, #4]
 802cd5a:	021b      	lsls	r3, r3, #8
 802cd5c:	431a      	orrs	r2, r3
 802cd5e:	68bb      	ldr	r3, [r7, #8]
 802cd60:	689b      	ldr	r3, [r3, #8]
 802cd62:	041b      	lsls	r3, r3, #16
 802cd64:	431a      	orrs	r2, r3
 802cd66:	68bb      	ldr	r3, [r7, #8]
 802cd68:	68db      	ldr	r3, [r3, #12]
 802cd6a:	061b      	lsls	r3, r3, #24
 802cd6c:	431a      	orrs	r2, r3
 802cd6e:	68fb      	ldr	r3, [r7, #12]
 802cd70:	609a      	str	r2, [r3, #8]
 802cd72:	e011      	b.n	802cd98 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cd74:	68fb      	ldr	r3, [r7, #12]
 802cd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cd78:	68bb      	ldr	r3, [r7, #8]
 802cd7a:	681a      	ldr	r2, [r3, #0]
 802cd7c:	68bb      	ldr	r3, [r7, #8]
 802cd7e:	685b      	ldr	r3, [r3, #4]
 802cd80:	021b      	lsls	r3, r3, #8
 802cd82:	431a      	orrs	r2, r3
 802cd84:	68bb      	ldr	r3, [r7, #8]
 802cd86:	689b      	ldr	r3, [r3, #8]
 802cd88:	041b      	lsls	r3, r3, #16
 802cd8a:	431a      	orrs	r2, r3
 802cd8c:	68bb      	ldr	r3, [r7, #8]
 802cd8e:	68db      	ldr	r3, [r3, #12]
 802cd90:	061b      	lsls	r3, r3, #24
 802cd92:	431a      	orrs	r2, r3
 802cd94:	68fb      	ldr	r3, [r7, #12]
 802cd96:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 802cd98:	2300      	movs	r3, #0
}
 802cd9a:	4618      	mov	r0, r3
 802cd9c:	3714      	adds	r7, #20
 802cd9e:	46bd      	mov	sp, r7
 802cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cda4:	4770      	bx	lr

0802cda6 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cda6:	b480      	push	{r7}
 802cda8:	b085      	sub	sp, #20
 802cdaa:	af00      	add	r7, sp, #0
 802cdac:	60f8      	str	r0, [r7, #12]
 802cdae:	60b9      	str	r1, [r7, #8]
 802cdb0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	2b10      	cmp	r3, #16
 802cdb6:	d112      	bne.n	802cdde <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802cdb8:	68fb      	ldr	r3, [r7, #12]
 802cdba:	68db      	ldr	r3, [r3, #12]
 802cdbc:	68bb      	ldr	r3, [r7, #8]
 802cdbe:	681a      	ldr	r2, [r3, #0]
 802cdc0:	68bb      	ldr	r3, [r7, #8]
 802cdc2:	685b      	ldr	r3, [r3, #4]
 802cdc4:	021b      	lsls	r3, r3, #8
 802cdc6:	431a      	orrs	r2, r3
 802cdc8:	68bb      	ldr	r3, [r7, #8]
 802cdca:	689b      	ldr	r3, [r3, #8]
 802cdcc:	041b      	lsls	r3, r3, #16
 802cdce:	431a      	orrs	r2, r3
 802cdd0:	68bb      	ldr	r3, [r7, #8]
 802cdd2:	68db      	ldr	r3, [r3, #12]
 802cdd4:	061b      	lsls	r3, r3, #24
 802cdd6:	431a      	orrs	r2, r3
 802cdd8:	68fb      	ldr	r3, [r7, #12]
 802cdda:	60da      	str	r2, [r3, #12]
 802cddc:	e011      	b.n	802ce02 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802cdde:	68fb      	ldr	r3, [r7, #12]
 802cde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cde2:	68bb      	ldr	r3, [r7, #8]
 802cde4:	681a      	ldr	r2, [r3, #0]
 802cde6:	68bb      	ldr	r3, [r7, #8]
 802cde8:	685b      	ldr	r3, [r3, #4]
 802cdea:	021b      	lsls	r3, r3, #8
 802cdec:	431a      	orrs	r2, r3
 802cdee:	68bb      	ldr	r3, [r7, #8]
 802cdf0:	689b      	ldr	r3, [r3, #8]
 802cdf2:	041b      	lsls	r3, r3, #16
 802cdf4:	431a      	orrs	r2, r3
 802cdf6:	68bb      	ldr	r3, [r7, #8]
 802cdf8:	68db      	ldr	r3, [r3, #12]
 802cdfa:	061b      	lsls	r3, r3, #24
 802cdfc:	431a      	orrs	r2, r3
 802cdfe:	68fb      	ldr	r3, [r7, #12]
 802ce00:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 802ce02:	2300      	movs	r3, #0
}
 802ce04:	4618      	mov	r0, r3
 802ce06:	3714      	adds	r7, #20
 802ce08:	46bd      	mov	sp, r7
 802ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce0e:	4770      	bx	lr

0802ce10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802ce10:	b084      	sub	sp, #16
 802ce12:	b580      	push	{r7, lr}
 802ce14:	b084      	sub	sp, #16
 802ce16:	af00      	add	r7, sp, #0
 802ce18:	6078      	str	r0, [r7, #4]
 802ce1a:	f107 001c 	add.w	r0, r7, #28
 802ce1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ce24:	2b01      	cmp	r3, #1
 802ce26:	d122      	bne.n	802ce6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ce28:	687b      	ldr	r3, [r7, #4]
 802ce2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ce30:	687b      	ldr	r3, [r7, #4]
 802ce32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	68db      	ldr	r3, [r3, #12]
 802ce38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802ce3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802ce40:	687a      	ldr	r2, [r7, #4]
 802ce42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802ce44:	687b      	ldr	r3, [r7, #4]
 802ce46:	68db      	ldr	r3, [r3, #12]
 802ce48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802ce4c:	687b      	ldr	r3, [r7, #4]
 802ce4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802ce50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ce52:	2b01      	cmp	r3, #1
 802ce54:	d105      	bne.n	802ce62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802ce56:	687b      	ldr	r3, [r7, #4]
 802ce58:	68db      	ldr	r3, [r3, #12]
 802ce5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802ce5e:	687b      	ldr	r3, [r7, #4]
 802ce60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ce62:	6878      	ldr	r0, [r7, #4]
 802ce64:	f001 fbee 	bl	802e644 <USB_CoreReset>
 802ce68:	4603      	mov	r3, r0
 802ce6a:	73fb      	strb	r3, [r7, #15]
 802ce6c:	e01a      	b.n	802cea4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802ce6e:	687b      	ldr	r3, [r7, #4]
 802ce70:	68db      	ldr	r3, [r3, #12]
 802ce72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802ce76:	687b      	ldr	r3, [r7, #4]
 802ce78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ce7a:	6878      	ldr	r0, [r7, #4]
 802ce7c:	f001 fbe2 	bl	802e644 <USB_CoreReset>
 802ce80:	4603      	mov	r3, r0
 802ce82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802ce84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ce86:	2b00      	cmp	r3, #0
 802ce88:	d106      	bne.n	802ce98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ce92:	687b      	ldr	r3, [r7, #4]
 802ce94:	639a      	str	r2, [r3, #56]	; 0x38
 802ce96:	e005      	b.n	802cea4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ce98:	687b      	ldr	r3, [r7, #4]
 802ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802cea0:	687b      	ldr	r3, [r7, #4]
 802cea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802cea6:	2b01      	cmp	r3, #1
 802cea8:	d10b      	bne.n	802cec2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802ceaa:	687b      	ldr	r3, [r7, #4]
 802ceac:	689b      	ldr	r3, [r3, #8]
 802ceae:	f043 0206 	orr.w	r2, r3, #6
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	689b      	ldr	r3, [r3, #8]
 802ceba:	f043 0220 	orr.w	r2, r3, #32
 802cebe:	687b      	ldr	r3, [r7, #4]
 802cec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802cec2:	7bfb      	ldrb	r3, [r7, #15]
}
 802cec4:	4618      	mov	r0, r3
 802cec6:	3710      	adds	r7, #16
 802cec8:	46bd      	mov	sp, r7
 802ceca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802cece:	b004      	add	sp, #16
 802ced0:	4770      	bx	lr
	...

0802ced4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802ced4:	b480      	push	{r7}
 802ced6:	b087      	sub	sp, #28
 802ced8:	af00      	add	r7, sp, #0
 802ceda:	60f8      	str	r0, [r7, #12]
 802cedc:	60b9      	str	r1, [r7, #8]
 802cede:	4613      	mov	r3, r2
 802cee0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802cee2:	79fb      	ldrb	r3, [r7, #7]
 802cee4:	2b02      	cmp	r3, #2
 802cee6:	d165      	bne.n	802cfb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802cee8:	68bb      	ldr	r3, [r7, #8]
 802ceea:	4a41      	ldr	r2, [pc, #260]	; (802cff0 <USB_SetTurnaroundTime+0x11c>)
 802ceec:	4293      	cmp	r3, r2
 802ceee:	d906      	bls.n	802cefe <USB_SetTurnaroundTime+0x2a>
 802cef0:	68bb      	ldr	r3, [r7, #8]
 802cef2:	4a40      	ldr	r2, [pc, #256]	; (802cff4 <USB_SetTurnaroundTime+0x120>)
 802cef4:	4293      	cmp	r3, r2
 802cef6:	d202      	bcs.n	802cefe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802cef8:	230f      	movs	r3, #15
 802cefa:	617b      	str	r3, [r7, #20]
 802cefc:	e062      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802cefe:	68bb      	ldr	r3, [r7, #8]
 802cf00:	4a3c      	ldr	r2, [pc, #240]	; (802cff4 <USB_SetTurnaroundTime+0x120>)
 802cf02:	4293      	cmp	r3, r2
 802cf04:	d306      	bcc.n	802cf14 <USB_SetTurnaroundTime+0x40>
 802cf06:	68bb      	ldr	r3, [r7, #8]
 802cf08:	4a3b      	ldr	r2, [pc, #236]	; (802cff8 <USB_SetTurnaroundTime+0x124>)
 802cf0a:	4293      	cmp	r3, r2
 802cf0c:	d202      	bcs.n	802cf14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802cf0e:	230e      	movs	r3, #14
 802cf10:	617b      	str	r3, [r7, #20]
 802cf12:	e057      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802cf14:	68bb      	ldr	r3, [r7, #8]
 802cf16:	4a38      	ldr	r2, [pc, #224]	; (802cff8 <USB_SetTurnaroundTime+0x124>)
 802cf18:	4293      	cmp	r3, r2
 802cf1a:	d306      	bcc.n	802cf2a <USB_SetTurnaroundTime+0x56>
 802cf1c:	68bb      	ldr	r3, [r7, #8]
 802cf1e:	4a37      	ldr	r2, [pc, #220]	; (802cffc <USB_SetTurnaroundTime+0x128>)
 802cf20:	4293      	cmp	r3, r2
 802cf22:	d202      	bcs.n	802cf2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802cf24:	230d      	movs	r3, #13
 802cf26:	617b      	str	r3, [r7, #20]
 802cf28:	e04c      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802cf2a:	68bb      	ldr	r3, [r7, #8]
 802cf2c:	4a33      	ldr	r2, [pc, #204]	; (802cffc <USB_SetTurnaroundTime+0x128>)
 802cf2e:	4293      	cmp	r3, r2
 802cf30:	d306      	bcc.n	802cf40 <USB_SetTurnaroundTime+0x6c>
 802cf32:	68bb      	ldr	r3, [r7, #8]
 802cf34:	4a32      	ldr	r2, [pc, #200]	; (802d000 <USB_SetTurnaroundTime+0x12c>)
 802cf36:	4293      	cmp	r3, r2
 802cf38:	d802      	bhi.n	802cf40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802cf3a:	230c      	movs	r3, #12
 802cf3c:	617b      	str	r3, [r7, #20]
 802cf3e:	e041      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802cf40:	68bb      	ldr	r3, [r7, #8]
 802cf42:	4a2f      	ldr	r2, [pc, #188]	; (802d000 <USB_SetTurnaroundTime+0x12c>)
 802cf44:	4293      	cmp	r3, r2
 802cf46:	d906      	bls.n	802cf56 <USB_SetTurnaroundTime+0x82>
 802cf48:	68bb      	ldr	r3, [r7, #8]
 802cf4a:	4a2e      	ldr	r2, [pc, #184]	; (802d004 <USB_SetTurnaroundTime+0x130>)
 802cf4c:	4293      	cmp	r3, r2
 802cf4e:	d802      	bhi.n	802cf56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802cf50:	230b      	movs	r3, #11
 802cf52:	617b      	str	r3, [r7, #20]
 802cf54:	e036      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802cf56:	68bb      	ldr	r3, [r7, #8]
 802cf58:	4a2a      	ldr	r2, [pc, #168]	; (802d004 <USB_SetTurnaroundTime+0x130>)
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	d906      	bls.n	802cf6c <USB_SetTurnaroundTime+0x98>
 802cf5e:	68bb      	ldr	r3, [r7, #8]
 802cf60:	4a29      	ldr	r2, [pc, #164]	; (802d008 <USB_SetTurnaroundTime+0x134>)
 802cf62:	4293      	cmp	r3, r2
 802cf64:	d802      	bhi.n	802cf6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802cf66:	230a      	movs	r3, #10
 802cf68:	617b      	str	r3, [r7, #20]
 802cf6a:	e02b      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802cf6c:	68bb      	ldr	r3, [r7, #8]
 802cf6e:	4a26      	ldr	r2, [pc, #152]	; (802d008 <USB_SetTurnaroundTime+0x134>)
 802cf70:	4293      	cmp	r3, r2
 802cf72:	d906      	bls.n	802cf82 <USB_SetTurnaroundTime+0xae>
 802cf74:	68bb      	ldr	r3, [r7, #8]
 802cf76:	4a25      	ldr	r2, [pc, #148]	; (802d00c <USB_SetTurnaroundTime+0x138>)
 802cf78:	4293      	cmp	r3, r2
 802cf7a:	d202      	bcs.n	802cf82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802cf7c:	2309      	movs	r3, #9
 802cf7e:	617b      	str	r3, [r7, #20]
 802cf80:	e020      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802cf82:	68bb      	ldr	r3, [r7, #8]
 802cf84:	4a21      	ldr	r2, [pc, #132]	; (802d00c <USB_SetTurnaroundTime+0x138>)
 802cf86:	4293      	cmp	r3, r2
 802cf88:	d306      	bcc.n	802cf98 <USB_SetTurnaroundTime+0xc4>
 802cf8a:	68bb      	ldr	r3, [r7, #8]
 802cf8c:	4a20      	ldr	r2, [pc, #128]	; (802d010 <USB_SetTurnaroundTime+0x13c>)
 802cf8e:	4293      	cmp	r3, r2
 802cf90:	d802      	bhi.n	802cf98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802cf92:	2308      	movs	r3, #8
 802cf94:	617b      	str	r3, [r7, #20]
 802cf96:	e015      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802cf98:	68bb      	ldr	r3, [r7, #8]
 802cf9a:	4a1d      	ldr	r2, [pc, #116]	; (802d010 <USB_SetTurnaroundTime+0x13c>)
 802cf9c:	4293      	cmp	r3, r2
 802cf9e:	d906      	bls.n	802cfae <USB_SetTurnaroundTime+0xda>
 802cfa0:	68bb      	ldr	r3, [r7, #8]
 802cfa2:	4a1c      	ldr	r2, [pc, #112]	; (802d014 <USB_SetTurnaroundTime+0x140>)
 802cfa4:	4293      	cmp	r3, r2
 802cfa6:	d202      	bcs.n	802cfae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802cfa8:	2307      	movs	r3, #7
 802cfaa:	617b      	str	r3, [r7, #20]
 802cfac:	e00a      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802cfae:	2306      	movs	r3, #6
 802cfb0:	617b      	str	r3, [r7, #20]
 802cfb2:	e007      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802cfb4:	79fb      	ldrb	r3, [r7, #7]
 802cfb6:	2b00      	cmp	r3, #0
 802cfb8:	d102      	bne.n	802cfc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802cfba:	2309      	movs	r3, #9
 802cfbc:	617b      	str	r3, [r7, #20]
 802cfbe:	e001      	b.n	802cfc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802cfc0:	2309      	movs	r3, #9
 802cfc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802cfc4:	68fb      	ldr	r3, [r7, #12]
 802cfc6:	68db      	ldr	r3, [r3, #12]
 802cfc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802cfcc:	68fb      	ldr	r3, [r7, #12]
 802cfce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802cfd0:	68fb      	ldr	r3, [r7, #12]
 802cfd2:	68da      	ldr	r2, [r3, #12]
 802cfd4:	697b      	ldr	r3, [r7, #20]
 802cfd6:	029b      	lsls	r3, r3, #10
 802cfd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802cfdc:	431a      	orrs	r2, r3
 802cfde:	68fb      	ldr	r3, [r7, #12]
 802cfe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802cfe2:	2300      	movs	r3, #0
}
 802cfe4:	4618      	mov	r0, r3
 802cfe6:	371c      	adds	r7, #28
 802cfe8:	46bd      	mov	sp, r7
 802cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfee:	4770      	bx	lr
 802cff0:	00d8acbf 	.word	0x00d8acbf
 802cff4:	00e4e1c0 	.word	0x00e4e1c0
 802cff8:	00f42400 	.word	0x00f42400
 802cffc:	01067380 	.word	0x01067380
 802d000:	011a499f 	.word	0x011a499f
 802d004:	01312cff 	.word	0x01312cff
 802d008:	014ca43f 	.word	0x014ca43f
 802d00c:	016e3600 	.word	0x016e3600
 802d010:	01a6ab1f 	.word	0x01a6ab1f
 802d014:	01e84800 	.word	0x01e84800

0802d018 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d018:	b480      	push	{r7}
 802d01a:	b083      	sub	sp, #12
 802d01c:	af00      	add	r7, sp, #0
 802d01e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802d020:	687b      	ldr	r3, [r7, #4]
 802d022:	689b      	ldr	r3, [r3, #8]
 802d024:	f043 0201 	orr.w	r2, r3, #1
 802d028:	687b      	ldr	r3, [r7, #4]
 802d02a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d02c:	2300      	movs	r3, #0
}
 802d02e:	4618      	mov	r0, r3
 802d030:	370c      	adds	r7, #12
 802d032:	46bd      	mov	sp, r7
 802d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d038:	4770      	bx	lr

0802d03a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d03a:	b480      	push	{r7}
 802d03c:	b083      	sub	sp, #12
 802d03e:	af00      	add	r7, sp, #0
 802d040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802d042:	687b      	ldr	r3, [r7, #4]
 802d044:	689b      	ldr	r3, [r3, #8]
 802d046:	f023 0201 	bic.w	r2, r3, #1
 802d04a:	687b      	ldr	r3, [r7, #4]
 802d04c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d04e:	2300      	movs	r3, #0
}
 802d050:	4618      	mov	r0, r3
 802d052:	370c      	adds	r7, #12
 802d054:	46bd      	mov	sp, r7
 802d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d05a:	4770      	bx	lr

0802d05c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802d05c:	b580      	push	{r7, lr}
 802d05e:	b084      	sub	sp, #16
 802d060:	af00      	add	r7, sp, #0
 802d062:	6078      	str	r0, [r7, #4]
 802d064:	460b      	mov	r3, r1
 802d066:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802d068:	2300      	movs	r3, #0
 802d06a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802d06c:	687b      	ldr	r3, [r7, #4]
 802d06e:	68db      	ldr	r3, [r3, #12]
 802d070:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802d074:	687b      	ldr	r3, [r7, #4]
 802d076:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802d078:	78fb      	ldrb	r3, [r7, #3]
 802d07a:	2b01      	cmp	r3, #1
 802d07c:	d115      	bne.n	802d0aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802d07e:	687b      	ldr	r3, [r7, #4]
 802d080:	68db      	ldr	r3, [r3, #12]
 802d082:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802d086:	687b      	ldr	r3, [r7, #4]
 802d088:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d08a:	2001      	movs	r0, #1
 802d08c:	f7fa fb44 	bl	8027718 <HAL_Delay>
      ms++;
 802d090:	68fb      	ldr	r3, [r7, #12]
 802d092:	3301      	adds	r3, #1
 802d094:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802d096:	6878      	ldr	r0, [r7, #4]
 802d098:	f001 fa45 	bl	802e526 <USB_GetMode>
 802d09c:	4603      	mov	r3, r0
 802d09e:	2b01      	cmp	r3, #1
 802d0a0:	d01e      	beq.n	802d0e0 <USB_SetCurrentMode+0x84>
 802d0a2:	68fb      	ldr	r3, [r7, #12]
 802d0a4:	2b31      	cmp	r3, #49	; 0x31
 802d0a6:	d9f0      	bls.n	802d08a <USB_SetCurrentMode+0x2e>
 802d0a8:	e01a      	b.n	802d0e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802d0aa:	78fb      	ldrb	r3, [r7, #3]
 802d0ac:	2b00      	cmp	r3, #0
 802d0ae:	d115      	bne.n	802d0dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802d0b0:	687b      	ldr	r3, [r7, #4]
 802d0b2:	68db      	ldr	r3, [r3, #12]
 802d0b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802d0b8:	687b      	ldr	r3, [r7, #4]
 802d0ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d0bc:	2001      	movs	r0, #1
 802d0be:	f7fa fb2b 	bl	8027718 <HAL_Delay>
      ms++;
 802d0c2:	68fb      	ldr	r3, [r7, #12]
 802d0c4:	3301      	adds	r3, #1
 802d0c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802d0c8:	6878      	ldr	r0, [r7, #4]
 802d0ca:	f001 fa2c 	bl	802e526 <USB_GetMode>
 802d0ce:	4603      	mov	r3, r0
 802d0d0:	2b00      	cmp	r3, #0
 802d0d2:	d005      	beq.n	802d0e0 <USB_SetCurrentMode+0x84>
 802d0d4:	68fb      	ldr	r3, [r7, #12]
 802d0d6:	2b31      	cmp	r3, #49	; 0x31
 802d0d8:	d9f0      	bls.n	802d0bc <USB_SetCurrentMode+0x60>
 802d0da:	e001      	b.n	802d0e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802d0dc:	2301      	movs	r3, #1
 802d0de:	e005      	b.n	802d0ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802d0e0:	68fb      	ldr	r3, [r7, #12]
 802d0e2:	2b32      	cmp	r3, #50	; 0x32
 802d0e4:	d101      	bne.n	802d0ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802d0e6:	2301      	movs	r3, #1
 802d0e8:	e000      	b.n	802d0ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802d0ea:	2300      	movs	r3, #0
}
 802d0ec:	4618      	mov	r0, r3
 802d0ee:	3710      	adds	r7, #16
 802d0f0:	46bd      	mov	sp, r7
 802d0f2:	bd80      	pop	{r7, pc}

0802d0f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802d0f4:	b084      	sub	sp, #16
 802d0f6:	b580      	push	{r7, lr}
 802d0f8:	b086      	sub	sp, #24
 802d0fa:	af00      	add	r7, sp, #0
 802d0fc:	6078      	str	r0, [r7, #4]
 802d0fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802d102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802d106:	2300      	movs	r3, #0
 802d108:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d10a:	687b      	ldr	r3, [r7, #4]
 802d10c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802d10e:	2300      	movs	r3, #0
 802d110:	613b      	str	r3, [r7, #16]
 802d112:	e009      	b.n	802d128 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802d114:	687a      	ldr	r2, [r7, #4]
 802d116:	693b      	ldr	r3, [r7, #16]
 802d118:	3340      	adds	r3, #64	; 0x40
 802d11a:	009b      	lsls	r3, r3, #2
 802d11c:	4413      	add	r3, r2
 802d11e:	2200      	movs	r2, #0
 802d120:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802d122:	693b      	ldr	r3, [r7, #16]
 802d124:	3301      	adds	r3, #1
 802d126:	613b      	str	r3, [r7, #16]
 802d128:	693b      	ldr	r3, [r7, #16]
 802d12a:	2b0e      	cmp	r3, #14
 802d12c:	d9f2      	bls.n	802d114 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802d12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d130:	2b00      	cmp	r3, #0
 802d132:	d11c      	bne.n	802d16e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802d134:	68fb      	ldr	r3, [r7, #12]
 802d136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d13a:	685b      	ldr	r3, [r3, #4]
 802d13c:	68fa      	ldr	r2, [r7, #12]
 802d13e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d142:	f043 0302 	orr.w	r3, r3, #2
 802d146:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802d148:	687b      	ldr	r3, [r7, #4]
 802d14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d14c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d150:	687b      	ldr	r3, [r7, #4]
 802d152:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802d154:	687b      	ldr	r3, [r7, #4]
 802d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d158:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802d15c:	687b      	ldr	r3, [r7, #4]
 802d15e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802d160:	687b      	ldr	r3, [r7, #4]
 802d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d164:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802d168:	687b      	ldr	r3, [r7, #4]
 802d16a:	639a      	str	r2, [r3, #56]	; 0x38
 802d16c:	e00b      	b.n	802d186 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802d16e:	687b      	ldr	r3, [r7, #4]
 802d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d172:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802d176:	687b      	ldr	r3, [r7, #4]
 802d178:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802d17a:	687b      	ldr	r3, [r7, #4]
 802d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d17e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802d182:	687b      	ldr	r3, [r7, #4]
 802d184:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802d186:	68fb      	ldr	r3, [r7, #12]
 802d188:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d18c:	461a      	mov	r2, r3
 802d18e:	2300      	movs	r3, #0
 802d190:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802d192:	68fb      	ldr	r3, [r7, #12]
 802d194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d198:	4619      	mov	r1, r3
 802d19a:	68fb      	ldr	r3, [r7, #12]
 802d19c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1a0:	461a      	mov	r2, r3
 802d1a2:	680b      	ldr	r3, [r1, #0]
 802d1a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802d1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d1a8:	2b01      	cmp	r3, #1
 802d1aa:	d10c      	bne.n	802d1c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d1ae:	2b00      	cmp	r3, #0
 802d1b0:	d104      	bne.n	802d1bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802d1b2:	2100      	movs	r1, #0
 802d1b4:	6878      	ldr	r0, [r7, #4]
 802d1b6:	f000 f965 	bl	802d484 <USB_SetDevSpeed>
 802d1ba:	e008      	b.n	802d1ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802d1bc:	2101      	movs	r1, #1
 802d1be:	6878      	ldr	r0, [r7, #4]
 802d1c0:	f000 f960 	bl	802d484 <USB_SetDevSpeed>
 802d1c4:	e003      	b.n	802d1ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802d1c6:	2103      	movs	r1, #3
 802d1c8:	6878      	ldr	r0, [r7, #4]
 802d1ca:	f000 f95b 	bl	802d484 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802d1ce:	2110      	movs	r1, #16
 802d1d0:	6878      	ldr	r0, [r7, #4]
 802d1d2:	f000 f8f3 	bl	802d3bc <USB_FlushTxFifo>
 802d1d6:	4603      	mov	r3, r0
 802d1d8:	2b00      	cmp	r3, #0
 802d1da:	d001      	beq.n	802d1e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802d1dc:	2301      	movs	r3, #1
 802d1de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802d1e0:	6878      	ldr	r0, [r7, #4]
 802d1e2:	f000 f91f 	bl	802d424 <USB_FlushRxFifo>
 802d1e6:	4603      	mov	r3, r0
 802d1e8:	2b00      	cmp	r3, #0
 802d1ea:	d001      	beq.n	802d1f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802d1ec:	2301      	movs	r3, #1
 802d1ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802d1f0:	68fb      	ldr	r3, [r7, #12]
 802d1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1f6:	461a      	mov	r2, r3
 802d1f8:	2300      	movs	r3, #0
 802d1fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802d1fc:	68fb      	ldr	r3, [r7, #12]
 802d1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d202:	461a      	mov	r2, r3
 802d204:	2300      	movs	r3, #0
 802d206:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802d208:	68fb      	ldr	r3, [r7, #12]
 802d20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d20e:	461a      	mov	r2, r3
 802d210:	2300      	movs	r3, #0
 802d212:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d214:	2300      	movs	r3, #0
 802d216:	613b      	str	r3, [r7, #16]
 802d218:	e043      	b.n	802d2a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d21a:	693b      	ldr	r3, [r7, #16]
 802d21c:	015a      	lsls	r2, r3, #5
 802d21e:	68fb      	ldr	r3, [r7, #12]
 802d220:	4413      	add	r3, r2
 802d222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d226:	681b      	ldr	r3, [r3, #0]
 802d228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d22c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d230:	d118      	bne.n	802d264 <USB_DevInit+0x170>
    {
      if (i == 0U)
 802d232:	693b      	ldr	r3, [r7, #16]
 802d234:	2b00      	cmp	r3, #0
 802d236:	d10a      	bne.n	802d24e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802d238:	693b      	ldr	r3, [r7, #16]
 802d23a:	015a      	lsls	r2, r3, #5
 802d23c:	68fb      	ldr	r3, [r7, #12]
 802d23e:	4413      	add	r3, r2
 802d240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d244:	461a      	mov	r2, r3
 802d246:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d24a:	6013      	str	r3, [r2, #0]
 802d24c:	e013      	b.n	802d276 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802d24e:	693b      	ldr	r3, [r7, #16]
 802d250:	015a      	lsls	r2, r3, #5
 802d252:	68fb      	ldr	r3, [r7, #12]
 802d254:	4413      	add	r3, r2
 802d256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d25a:	461a      	mov	r2, r3
 802d25c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d260:	6013      	str	r3, [r2, #0]
 802d262:	e008      	b.n	802d276 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802d264:	693b      	ldr	r3, [r7, #16]
 802d266:	015a      	lsls	r2, r3, #5
 802d268:	68fb      	ldr	r3, [r7, #12]
 802d26a:	4413      	add	r3, r2
 802d26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d270:	461a      	mov	r2, r3
 802d272:	2300      	movs	r3, #0
 802d274:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802d276:	693b      	ldr	r3, [r7, #16]
 802d278:	015a      	lsls	r2, r3, #5
 802d27a:	68fb      	ldr	r3, [r7, #12]
 802d27c:	4413      	add	r3, r2
 802d27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d282:	461a      	mov	r2, r3
 802d284:	2300      	movs	r3, #0
 802d286:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802d288:	693b      	ldr	r3, [r7, #16]
 802d28a:	015a      	lsls	r2, r3, #5
 802d28c:	68fb      	ldr	r3, [r7, #12]
 802d28e:	4413      	add	r3, r2
 802d290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d294:	461a      	mov	r2, r3
 802d296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d29a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d29c:	693b      	ldr	r3, [r7, #16]
 802d29e:	3301      	adds	r3, #1
 802d2a0:	613b      	str	r3, [r7, #16]
 802d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d2a4:	693a      	ldr	r2, [r7, #16]
 802d2a6:	429a      	cmp	r2, r3
 802d2a8:	d3b7      	bcc.n	802d21a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d2aa:	2300      	movs	r3, #0
 802d2ac:	613b      	str	r3, [r7, #16]
 802d2ae:	e043      	b.n	802d338 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d2b0:	693b      	ldr	r3, [r7, #16]
 802d2b2:	015a      	lsls	r2, r3, #5
 802d2b4:	68fb      	ldr	r3, [r7, #12]
 802d2b6:	4413      	add	r3, r2
 802d2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2bc:	681b      	ldr	r3, [r3, #0]
 802d2be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d2c6:	d118      	bne.n	802d2fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 802d2c8:	693b      	ldr	r3, [r7, #16]
 802d2ca:	2b00      	cmp	r3, #0
 802d2cc:	d10a      	bne.n	802d2e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802d2ce:	693b      	ldr	r3, [r7, #16]
 802d2d0:	015a      	lsls	r2, r3, #5
 802d2d2:	68fb      	ldr	r3, [r7, #12]
 802d2d4:	4413      	add	r3, r2
 802d2d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2da:	461a      	mov	r2, r3
 802d2dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d2e0:	6013      	str	r3, [r2, #0]
 802d2e2:	e013      	b.n	802d30c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802d2e4:	693b      	ldr	r3, [r7, #16]
 802d2e6:	015a      	lsls	r2, r3, #5
 802d2e8:	68fb      	ldr	r3, [r7, #12]
 802d2ea:	4413      	add	r3, r2
 802d2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2f0:	461a      	mov	r2, r3
 802d2f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d2f6:	6013      	str	r3, [r2, #0]
 802d2f8:	e008      	b.n	802d30c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802d2fa:	693b      	ldr	r3, [r7, #16]
 802d2fc:	015a      	lsls	r2, r3, #5
 802d2fe:	68fb      	ldr	r3, [r7, #12]
 802d300:	4413      	add	r3, r2
 802d302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d306:	461a      	mov	r2, r3
 802d308:	2300      	movs	r3, #0
 802d30a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802d30c:	693b      	ldr	r3, [r7, #16]
 802d30e:	015a      	lsls	r2, r3, #5
 802d310:	68fb      	ldr	r3, [r7, #12]
 802d312:	4413      	add	r3, r2
 802d314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d318:	461a      	mov	r2, r3
 802d31a:	2300      	movs	r3, #0
 802d31c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802d31e:	693b      	ldr	r3, [r7, #16]
 802d320:	015a      	lsls	r2, r3, #5
 802d322:	68fb      	ldr	r3, [r7, #12]
 802d324:	4413      	add	r3, r2
 802d326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d32a:	461a      	mov	r2, r3
 802d32c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d330:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d332:	693b      	ldr	r3, [r7, #16]
 802d334:	3301      	adds	r3, #1
 802d336:	613b      	str	r3, [r7, #16]
 802d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d33a:	693a      	ldr	r2, [r7, #16]
 802d33c:	429a      	cmp	r2, r3
 802d33e:	d3b7      	bcc.n	802d2b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802d340:	68fb      	ldr	r3, [r7, #12]
 802d342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d346:	691b      	ldr	r3, [r3, #16]
 802d348:	68fa      	ldr	r2, [r7, #12]
 802d34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d34e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d352:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802d354:	687b      	ldr	r3, [r7, #4]
 802d356:	2200      	movs	r2, #0
 802d358:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802d35a:	687b      	ldr	r3, [r7, #4]
 802d35c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802d360:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d364:	2b00      	cmp	r3, #0
 802d366:	d105      	bne.n	802d374 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802d368:	687b      	ldr	r3, [r7, #4]
 802d36a:	699b      	ldr	r3, [r3, #24]
 802d36c:	f043 0210 	orr.w	r2, r3, #16
 802d370:	687b      	ldr	r3, [r7, #4]
 802d372:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802d374:	687b      	ldr	r3, [r7, #4]
 802d376:	699a      	ldr	r2, [r3, #24]
 802d378:	4b0f      	ldr	r3, [pc, #60]	; (802d3b8 <USB_DevInit+0x2c4>)
 802d37a:	4313      	orrs	r3, r2
 802d37c:	687a      	ldr	r2, [r7, #4]
 802d37e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802d380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d382:	2b00      	cmp	r3, #0
 802d384:	d005      	beq.n	802d392 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802d386:	687b      	ldr	r3, [r7, #4]
 802d388:	699b      	ldr	r3, [r3, #24]
 802d38a:	f043 0208 	orr.w	r2, r3, #8
 802d38e:	687b      	ldr	r3, [r7, #4]
 802d390:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802d392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d394:	2b01      	cmp	r3, #1
 802d396:	d107      	bne.n	802d3a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802d398:	687b      	ldr	r3, [r7, #4]
 802d39a:	699b      	ldr	r3, [r3, #24]
 802d39c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d3a0:	f043 0304 	orr.w	r3, r3, #4
 802d3a4:	687a      	ldr	r2, [r7, #4]
 802d3a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802d3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 802d3aa:	4618      	mov	r0, r3
 802d3ac:	3718      	adds	r7, #24
 802d3ae:	46bd      	mov	sp, r7
 802d3b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d3b4:	b004      	add	sp, #16
 802d3b6:	4770      	bx	lr
 802d3b8:	803c3800 	.word	0x803c3800

0802d3bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802d3bc:	b480      	push	{r7}
 802d3be:	b085      	sub	sp, #20
 802d3c0:	af00      	add	r7, sp, #0
 802d3c2:	6078      	str	r0, [r7, #4]
 802d3c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802d3c6:	2300      	movs	r3, #0
 802d3c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d3ca:	68fb      	ldr	r3, [r7, #12]
 802d3cc:	3301      	adds	r3, #1
 802d3ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d3d0:	68fb      	ldr	r3, [r7, #12]
 802d3d2:	4a13      	ldr	r2, [pc, #76]	; (802d420 <USB_FlushTxFifo+0x64>)
 802d3d4:	4293      	cmp	r3, r2
 802d3d6:	d901      	bls.n	802d3dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802d3d8:	2303      	movs	r3, #3
 802d3da:	e01b      	b.n	802d414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	691b      	ldr	r3, [r3, #16]
 802d3e0:	2b00      	cmp	r3, #0
 802d3e2:	daf2      	bge.n	802d3ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802d3e4:	2300      	movs	r3, #0
 802d3e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802d3e8:	683b      	ldr	r3, [r7, #0]
 802d3ea:	019b      	lsls	r3, r3, #6
 802d3ec:	f043 0220 	orr.w	r2, r3, #32
 802d3f0:	687b      	ldr	r3, [r7, #4]
 802d3f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d3f4:	68fb      	ldr	r3, [r7, #12]
 802d3f6:	3301      	adds	r3, #1
 802d3f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d3fa:	68fb      	ldr	r3, [r7, #12]
 802d3fc:	4a08      	ldr	r2, [pc, #32]	; (802d420 <USB_FlushTxFifo+0x64>)
 802d3fe:	4293      	cmp	r3, r2
 802d400:	d901      	bls.n	802d406 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802d402:	2303      	movs	r3, #3
 802d404:	e006      	b.n	802d414 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802d406:	687b      	ldr	r3, [r7, #4]
 802d408:	691b      	ldr	r3, [r3, #16]
 802d40a:	f003 0320 	and.w	r3, r3, #32
 802d40e:	2b20      	cmp	r3, #32
 802d410:	d0f0      	beq.n	802d3f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802d412:	2300      	movs	r3, #0
}
 802d414:	4618      	mov	r0, r3
 802d416:	3714      	adds	r7, #20
 802d418:	46bd      	mov	sp, r7
 802d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d41e:	4770      	bx	lr
 802d420:	00030d40 	.word	0x00030d40

0802d424 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802d424:	b480      	push	{r7}
 802d426:	b085      	sub	sp, #20
 802d428:	af00      	add	r7, sp, #0
 802d42a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802d42c:	2300      	movs	r3, #0
 802d42e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d430:	68fb      	ldr	r3, [r7, #12]
 802d432:	3301      	adds	r3, #1
 802d434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d436:	68fb      	ldr	r3, [r7, #12]
 802d438:	4a11      	ldr	r2, [pc, #68]	; (802d480 <USB_FlushRxFifo+0x5c>)
 802d43a:	4293      	cmp	r3, r2
 802d43c:	d901      	bls.n	802d442 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802d43e:	2303      	movs	r3, #3
 802d440:	e018      	b.n	802d474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d442:	687b      	ldr	r3, [r7, #4]
 802d444:	691b      	ldr	r3, [r3, #16]
 802d446:	2b00      	cmp	r3, #0
 802d448:	daf2      	bge.n	802d430 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802d44a:	2300      	movs	r3, #0
 802d44c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	2210      	movs	r2, #16
 802d452:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d454:	68fb      	ldr	r3, [r7, #12]
 802d456:	3301      	adds	r3, #1
 802d458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d45a:	68fb      	ldr	r3, [r7, #12]
 802d45c:	4a08      	ldr	r2, [pc, #32]	; (802d480 <USB_FlushRxFifo+0x5c>)
 802d45e:	4293      	cmp	r3, r2
 802d460:	d901      	bls.n	802d466 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802d462:	2303      	movs	r3, #3
 802d464:	e006      	b.n	802d474 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802d466:	687b      	ldr	r3, [r7, #4]
 802d468:	691b      	ldr	r3, [r3, #16]
 802d46a:	f003 0310 	and.w	r3, r3, #16
 802d46e:	2b10      	cmp	r3, #16
 802d470:	d0f0      	beq.n	802d454 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802d472:	2300      	movs	r3, #0
}
 802d474:	4618      	mov	r0, r3
 802d476:	3714      	adds	r7, #20
 802d478:	46bd      	mov	sp, r7
 802d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d47e:	4770      	bx	lr
 802d480:	00030d40 	.word	0x00030d40

0802d484 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802d484:	b480      	push	{r7}
 802d486:	b085      	sub	sp, #20
 802d488:	af00      	add	r7, sp, #0
 802d48a:	6078      	str	r0, [r7, #4]
 802d48c:	460b      	mov	r3, r1
 802d48e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d490:	687b      	ldr	r3, [r7, #4]
 802d492:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802d494:	68fb      	ldr	r3, [r7, #12]
 802d496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d49a:	681a      	ldr	r2, [r3, #0]
 802d49c:	78fb      	ldrb	r3, [r7, #3]
 802d49e:	68f9      	ldr	r1, [r7, #12]
 802d4a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d4a4:	4313      	orrs	r3, r2
 802d4a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802d4a8:	2300      	movs	r3, #0
}
 802d4aa:	4618      	mov	r0, r3
 802d4ac:	3714      	adds	r7, #20
 802d4ae:	46bd      	mov	sp, r7
 802d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4b4:	4770      	bx	lr

0802d4b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802d4b6:	b480      	push	{r7}
 802d4b8:	b087      	sub	sp, #28
 802d4ba:	af00      	add	r7, sp, #0
 802d4bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4be:	687b      	ldr	r3, [r7, #4]
 802d4c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802d4c2:	693b      	ldr	r3, [r7, #16]
 802d4c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d4c8:	689b      	ldr	r3, [r3, #8]
 802d4ca:	f003 0306 	and.w	r3, r3, #6
 802d4ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802d4d0:	68fb      	ldr	r3, [r7, #12]
 802d4d2:	2b00      	cmp	r3, #0
 802d4d4:	d102      	bne.n	802d4dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802d4d6:	2300      	movs	r3, #0
 802d4d8:	75fb      	strb	r3, [r7, #23]
 802d4da:	e00a      	b.n	802d4f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802d4dc:	68fb      	ldr	r3, [r7, #12]
 802d4de:	2b02      	cmp	r3, #2
 802d4e0:	d002      	beq.n	802d4e8 <USB_GetDevSpeed+0x32>
 802d4e2:	68fb      	ldr	r3, [r7, #12]
 802d4e4:	2b06      	cmp	r3, #6
 802d4e6:	d102      	bne.n	802d4ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802d4e8:	2302      	movs	r3, #2
 802d4ea:	75fb      	strb	r3, [r7, #23]
 802d4ec:	e001      	b.n	802d4f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802d4ee:	230f      	movs	r3, #15
 802d4f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802d4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 802d4f4:	4618      	mov	r0, r3
 802d4f6:	371c      	adds	r7, #28
 802d4f8:	46bd      	mov	sp, r7
 802d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4fe:	4770      	bx	lr

0802d500 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d500:	b480      	push	{r7}
 802d502:	b085      	sub	sp, #20
 802d504:	af00      	add	r7, sp, #0
 802d506:	6078      	str	r0, [r7, #4]
 802d508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d50a:	687b      	ldr	r3, [r7, #4]
 802d50c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d50e:	683b      	ldr	r3, [r7, #0]
 802d510:	781b      	ldrb	r3, [r3, #0]
 802d512:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802d514:	683b      	ldr	r3, [r7, #0]
 802d516:	785b      	ldrb	r3, [r3, #1]
 802d518:	2b01      	cmp	r3, #1
 802d51a:	d13a      	bne.n	802d592 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802d51c:	68fb      	ldr	r3, [r7, #12]
 802d51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d522:	69da      	ldr	r2, [r3, #28]
 802d524:	683b      	ldr	r3, [r7, #0]
 802d526:	781b      	ldrb	r3, [r3, #0]
 802d528:	f003 030f 	and.w	r3, r3, #15
 802d52c:	2101      	movs	r1, #1
 802d52e:	fa01 f303 	lsl.w	r3, r1, r3
 802d532:	b29b      	uxth	r3, r3
 802d534:	68f9      	ldr	r1, [r7, #12]
 802d536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d53a:	4313      	orrs	r3, r2
 802d53c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802d53e:	68bb      	ldr	r3, [r7, #8]
 802d540:	015a      	lsls	r2, r3, #5
 802d542:	68fb      	ldr	r3, [r7, #12]
 802d544:	4413      	add	r3, r2
 802d546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d54a:	681b      	ldr	r3, [r3, #0]
 802d54c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d550:	2b00      	cmp	r3, #0
 802d552:	d155      	bne.n	802d600 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d554:	68bb      	ldr	r3, [r7, #8]
 802d556:	015a      	lsls	r2, r3, #5
 802d558:	68fb      	ldr	r3, [r7, #12]
 802d55a:	4413      	add	r3, r2
 802d55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d560:	681a      	ldr	r2, [r3, #0]
 802d562:	683b      	ldr	r3, [r7, #0]
 802d564:	68db      	ldr	r3, [r3, #12]
 802d566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d56a:	683b      	ldr	r3, [r7, #0]
 802d56c:	791b      	ldrb	r3, [r3, #4]
 802d56e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d570:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d572:	68bb      	ldr	r3, [r7, #8]
 802d574:	059b      	lsls	r3, r3, #22
 802d576:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d578:	4313      	orrs	r3, r2
 802d57a:	68ba      	ldr	r2, [r7, #8]
 802d57c:	0151      	lsls	r1, r2, #5
 802d57e:	68fa      	ldr	r2, [r7, #12]
 802d580:	440a      	add	r2, r1
 802d582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d58a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d58e:	6013      	str	r3, [r2, #0]
 802d590:	e036      	b.n	802d600 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802d592:	68fb      	ldr	r3, [r7, #12]
 802d594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d598:	69da      	ldr	r2, [r3, #28]
 802d59a:	683b      	ldr	r3, [r7, #0]
 802d59c:	781b      	ldrb	r3, [r3, #0]
 802d59e:	f003 030f 	and.w	r3, r3, #15
 802d5a2:	2101      	movs	r1, #1
 802d5a4:	fa01 f303 	lsl.w	r3, r1, r3
 802d5a8:	041b      	lsls	r3, r3, #16
 802d5aa:	68f9      	ldr	r1, [r7, #12]
 802d5ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d5b0:	4313      	orrs	r3, r2
 802d5b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802d5b4:	68bb      	ldr	r3, [r7, #8]
 802d5b6:	015a      	lsls	r2, r3, #5
 802d5b8:	68fb      	ldr	r3, [r7, #12]
 802d5ba:	4413      	add	r3, r2
 802d5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5c0:	681b      	ldr	r3, [r3, #0]
 802d5c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d5c6:	2b00      	cmp	r3, #0
 802d5c8:	d11a      	bne.n	802d600 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d5ca:	68bb      	ldr	r3, [r7, #8]
 802d5cc:	015a      	lsls	r2, r3, #5
 802d5ce:	68fb      	ldr	r3, [r7, #12]
 802d5d0:	4413      	add	r3, r2
 802d5d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5d6:	681a      	ldr	r2, [r3, #0]
 802d5d8:	683b      	ldr	r3, [r7, #0]
 802d5da:	68db      	ldr	r3, [r3, #12]
 802d5dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802d5e0:	683b      	ldr	r3, [r7, #0]
 802d5e2:	791b      	ldrb	r3, [r3, #4]
 802d5e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d5e6:	430b      	orrs	r3, r1
 802d5e8:	4313      	orrs	r3, r2
 802d5ea:	68ba      	ldr	r2, [r7, #8]
 802d5ec:	0151      	lsls	r1, r2, #5
 802d5ee:	68fa      	ldr	r2, [r7, #12]
 802d5f0:	440a      	add	r2, r1
 802d5f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d5f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d5fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802d600:	2300      	movs	r3, #0
}
 802d602:	4618      	mov	r0, r3
 802d604:	3714      	adds	r7, #20
 802d606:	46bd      	mov	sp, r7
 802d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d60c:	4770      	bx	lr
	...

0802d610 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d610:	b480      	push	{r7}
 802d612:	b085      	sub	sp, #20
 802d614:	af00      	add	r7, sp, #0
 802d616:	6078      	str	r0, [r7, #4]
 802d618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d61a:	687b      	ldr	r3, [r7, #4]
 802d61c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d61e:	683b      	ldr	r3, [r7, #0]
 802d620:	781b      	ldrb	r3, [r3, #0]
 802d622:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802d624:	683b      	ldr	r3, [r7, #0]
 802d626:	785b      	ldrb	r3, [r3, #1]
 802d628:	2b01      	cmp	r3, #1
 802d62a:	d161      	bne.n	802d6f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d62c:	68bb      	ldr	r3, [r7, #8]
 802d62e:	015a      	lsls	r2, r3, #5
 802d630:	68fb      	ldr	r3, [r7, #12]
 802d632:	4413      	add	r3, r2
 802d634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d638:	681b      	ldr	r3, [r3, #0]
 802d63a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d63e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d642:	d11f      	bne.n	802d684 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802d644:	68bb      	ldr	r3, [r7, #8]
 802d646:	015a      	lsls	r2, r3, #5
 802d648:	68fb      	ldr	r3, [r7, #12]
 802d64a:	4413      	add	r3, r2
 802d64c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d650:	681b      	ldr	r3, [r3, #0]
 802d652:	68ba      	ldr	r2, [r7, #8]
 802d654:	0151      	lsls	r1, r2, #5
 802d656:	68fa      	ldr	r2, [r7, #12]
 802d658:	440a      	add	r2, r1
 802d65a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d65e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d662:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802d664:	68bb      	ldr	r3, [r7, #8]
 802d666:	015a      	lsls	r2, r3, #5
 802d668:	68fb      	ldr	r3, [r7, #12]
 802d66a:	4413      	add	r3, r2
 802d66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d670:	681b      	ldr	r3, [r3, #0]
 802d672:	68ba      	ldr	r2, [r7, #8]
 802d674:	0151      	lsls	r1, r2, #5
 802d676:	68fa      	ldr	r2, [r7, #12]
 802d678:	440a      	add	r2, r1
 802d67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d67e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d682:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d684:	68fb      	ldr	r3, [r7, #12]
 802d686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d68a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d68c:	683b      	ldr	r3, [r7, #0]
 802d68e:	781b      	ldrb	r3, [r3, #0]
 802d690:	f003 030f 	and.w	r3, r3, #15
 802d694:	2101      	movs	r1, #1
 802d696:	fa01 f303 	lsl.w	r3, r1, r3
 802d69a:	b29b      	uxth	r3, r3
 802d69c:	43db      	mvns	r3, r3
 802d69e:	68f9      	ldr	r1, [r7, #12]
 802d6a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d6a4:	4013      	ands	r3, r2
 802d6a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d6a8:	68fb      	ldr	r3, [r7, #12]
 802d6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d6ae:	69da      	ldr	r2, [r3, #28]
 802d6b0:	683b      	ldr	r3, [r7, #0]
 802d6b2:	781b      	ldrb	r3, [r3, #0]
 802d6b4:	f003 030f 	and.w	r3, r3, #15
 802d6b8:	2101      	movs	r1, #1
 802d6ba:	fa01 f303 	lsl.w	r3, r1, r3
 802d6be:	b29b      	uxth	r3, r3
 802d6c0:	43db      	mvns	r3, r3
 802d6c2:	68f9      	ldr	r1, [r7, #12]
 802d6c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d6c8:	4013      	ands	r3, r2
 802d6ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802d6cc:	68bb      	ldr	r3, [r7, #8]
 802d6ce:	015a      	lsls	r2, r3, #5
 802d6d0:	68fb      	ldr	r3, [r7, #12]
 802d6d2:	4413      	add	r3, r2
 802d6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6d8:	681a      	ldr	r2, [r3, #0]
 802d6da:	68bb      	ldr	r3, [r7, #8]
 802d6dc:	0159      	lsls	r1, r3, #5
 802d6de:	68fb      	ldr	r3, [r7, #12]
 802d6e0:	440b      	add	r3, r1
 802d6e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6e6:	4619      	mov	r1, r3
 802d6e8:	4b35      	ldr	r3, [pc, #212]	; (802d7c0 <USB_DeactivateEndpoint+0x1b0>)
 802d6ea:	4013      	ands	r3, r2
 802d6ec:	600b      	str	r3, [r1, #0]
 802d6ee:	e060      	b.n	802d7b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d6f0:	68bb      	ldr	r3, [r7, #8]
 802d6f2:	015a      	lsls	r2, r3, #5
 802d6f4:	68fb      	ldr	r3, [r7, #12]
 802d6f6:	4413      	add	r3, r2
 802d6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d6fc:	681b      	ldr	r3, [r3, #0]
 802d6fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d706:	d11f      	bne.n	802d748 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802d708:	68bb      	ldr	r3, [r7, #8]
 802d70a:	015a      	lsls	r2, r3, #5
 802d70c:	68fb      	ldr	r3, [r7, #12]
 802d70e:	4413      	add	r3, r2
 802d710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d714:	681b      	ldr	r3, [r3, #0]
 802d716:	68ba      	ldr	r2, [r7, #8]
 802d718:	0151      	lsls	r1, r2, #5
 802d71a:	68fa      	ldr	r2, [r7, #12]
 802d71c:	440a      	add	r2, r1
 802d71e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d726:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802d728:	68bb      	ldr	r3, [r7, #8]
 802d72a:	015a      	lsls	r2, r3, #5
 802d72c:	68fb      	ldr	r3, [r7, #12]
 802d72e:	4413      	add	r3, r2
 802d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d734:	681b      	ldr	r3, [r3, #0]
 802d736:	68ba      	ldr	r2, [r7, #8]
 802d738:	0151      	lsls	r1, r2, #5
 802d73a:	68fa      	ldr	r2, [r7, #12]
 802d73c:	440a      	add	r2, r1
 802d73e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d748:	68fb      	ldr	r3, [r7, #12]
 802d74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d74e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d750:	683b      	ldr	r3, [r7, #0]
 802d752:	781b      	ldrb	r3, [r3, #0]
 802d754:	f003 030f 	and.w	r3, r3, #15
 802d758:	2101      	movs	r1, #1
 802d75a:	fa01 f303 	lsl.w	r3, r1, r3
 802d75e:	041b      	lsls	r3, r3, #16
 802d760:	43db      	mvns	r3, r3
 802d762:	68f9      	ldr	r1, [r7, #12]
 802d764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d768:	4013      	ands	r3, r2
 802d76a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d76c:	68fb      	ldr	r3, [r7, #12]
 802d76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d772:	69da      	ldr	r2, [r3, #28]
 802d774:	683b      	ldr	r3, [r7, #0]
 802d776:	781b      	ldrb	r3, [r3, #0]
 802d778:	f003 030f 	and.w	r3, r3, #15
 802d77c:	2101      	movs	r1, #1
 802d77e:	fa01 f303 	lsl.w	r3, r1, r3
 802d782:	041b      	lsls	r3, r3, #16
 802d784:	43db      	mvns	r3, r3
 802d786:	68f9      	ldr	r1, [r7, #12]
 802d788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d78c:	4013      	ands	r3, r2
 802d78e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802d790:	68bb      	ldr	r3, [r7, #8]
 802d792:	015a      	lsls	r2, r3, #5
 802d794:	68fb      	ldr	r3, [r7, #12]
 802d796:	4413      	add	r3, r2
 802d798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d79c:	681a      	ldr	r2, [r3, #0]
 802d79e:	68bb      	ldr	r3, [r7, #8]
 802d7a0:	0159      	lsls	r1, r3, #5
 802d7a2:	68fb      	ldr	r3, [r7, #12]
 802d7a4:	440b      	add	r3, r1
 802d7a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d7aa:	4619      	mov	r1, r3
 802d7ac:	4b05      	ldr	r3, [pc, #20]	; (802d7c4 <USB_DeactivateEndpoint+0x1b4>)
 802d7ae:	4013      	ands	r3, r2
 802d7b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802d7b2:	2300      	movs	r3, #0
}
 802d7b4:	4618      	mov	r0, r3
 802d7b6:	3714      	adds	r7, #20
 802d7b8:	46bd      	mov	sp, r7
 802d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7be:	4770      	bx	lr
 802d7c0:	ec337800 	.word	0xec337800
 802d7c4:	eff37800 	.word	0xeff37800

0802d7c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d7c8:	b580      	push	{r7, lr}
 802d7ca:	b08a      	sub	sp, #40	; 0x28
 802d7cc:	af02      	add	r7, sp, #8
 802d7ce:	60f8      	str	r0, [r7, #12]
 802d7d0:	60b9      	str	r1, [r7, #8]
 802d7d2:	4613      	mov	r3, r2
 802d7d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d7d6:	68fb      	ldr	r3, [r7, #12]
 802d7d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802d7da:	68bb      	ldr	r3, [r7, #8]
 802d7dc:	781b      	ldrb	r3, [r3, #0]
 802d7de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d7e0:	68bb      	ldr	r3, [r7, #8]
 802d7e2:	785b      	ldrb	r3, [r3, #1]
 802d7e4:	2b01      	cmp	r3, #1
 802d7e6:	f040 815c 	bne.w	802daa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d7ea:	68bb      	ldr	r3, [r7, #8]
 802d7ec:	699b      	ldr	r3, [r3, #24]
 802d7ee:	2b00      	cmp	r3, #0
 802d7f0:	d132      	bne.n	802d858 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d7f2:	69bb      	ldr	r3, [r7, #24]
 802d7f4:	015a      	lsls	r2, r3, #5
 802d7f6:	69fb      	ldr	r3, [r7, #28]
 802d7f8:	4413      	add	r3, r2
 802d7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d7fe:	691b      	ldr	r3, [r3, #16]
 802d800:	69ba      	ldr	r2, [r7, #24]
 802d802:	0151      	lsls	r1, r2, #5
 802d804:	69fa      	ldr	r2, [r7, #28]
 802d806:	440a      	add	r2, r1
 802d808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d80c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d810:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d816:	69bb      	ldr	r3, [r7, #24]
 802d818:	015a      	lsls	r2, r3, #5
 802d81a:	69fb      	ldr	r3, [r7, #28]
 802d81c:	4413      	add	r3, r2
 802d81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d822:	691b      	ldr	r3, [r3, #16]
 802d824:	69ba      	ldr	r2, [r7, #24]
 802d826:	0151      	lsls	r1, r2, #5
 802d828:	69fa      	ldr	r2, [r7, #28]
 802d82a:	440a      	add	r2, r1
 802d82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d836:	69bb      	ldr	r3, [r7, #24]
 802d838:	015a      	lsls	r2, r3, #5
 802d83a:	69fb      	ldr	r3, [r7, #28]
 802d83c:	4413      	add	r3, r2
 802d83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d842:	691b      	ldr	r3, [r3, #16]
 802d844:	69ba      	ldr	r2, [r7, #24]
 802d846:	0151      	lsls	r1, r2, #5
 802d848:	69fa      	ldr	r2, [r7, #28]
 802d84a:	440a      	add	r2, r1
 802d84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d850:	0cdb      	lsrs	r3, r3, #19
 802d852:	04db      	lsls	r3, r3, #19
 802d854:	6113      	str	r3, [r2, #16]
 802d856:	e074      	b.n	802d942 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d858:	69bb      	ldr	r3, [r7, #24]
 802d85a:	015a      	lsls	r2, r3, #5
 802d85c:	69fb      	ldr	r3, [r7, #28]
 802d85e:	4413      	add	r3, r2
 802d860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d864:	691b      	ldr	r3, [r3, #16]
 802d866:	69ba      	ldr	r2, [r7, #24]
 802d868:	0151      	lsls	r1, r2, #5
 802d86a:	69fa      	ldr	r2, [r7, #28]
 802d86c:	440a      	add	r2, r1
 802d86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d872:	0cdb      	lsrs	r3, r3, #19
 802d874:	04db      	lsls	r3, r3, #19
 802d876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d878:	69bb      	ldr	r3, [r7, #24]
 802d87a:	015a      	lsls	r2, r3, #5
 802d87c:	69fb      	ldr	r3, [r7, #28]
 802d87e:	4413      	add	r3, r2
 802d880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d884:	691b      	ldr	r3, [r3, #16]
 802d886:	69ba      	ldr	r2, [r7, #24]
 802d888:	0151      	lsls	r1, r2, #5
 802d88a:	69fa      	ldr	r2, [r7, #28]
 802d88c:	440a      	add	r2, r1
 802d88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d89a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d89c:	69bb      	ldr	r3, [r7, #24]
 802d89e:	015a      	lsls	r2, r3, #5
 802d8a0:	69fb      	ldr	r3, [r7, #28]
 802d8a2:	4413      	add	r3, r2
 802d8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802d8aa:	68bb      	ldr	r3, [r7, #8]
 802d8ac:	6999      	ldr	r1, [r3, #24]
 802d8ae:	68bb      	ldr	r3, [r7, #8]
 802d8b0:	68db      	ldr	r3, [r3, #12]
 802d8b2:	440b      	add	r3, r1
 802d8b4:	1e59      	subs	r1, r3, #1
 802d8b6:	68bb      	ldr	r3, [r7, #8]
 802d8b8:	68db      	ldr	r3, [r3, #12]
 802d8ba:	fbb1 f3f3 	udiv	r3, r1, r3
 802d8be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d8c0:	4b9d      	ldr	r3, [pc, #628]	; (802db38 <USB_EPStartXfer+0x370>)
 802d8c2:	400b      	ands	r3, r1
 802d8c4:	69b9      	ldr	r1, [r7, #24]
 802d8c6:	0148      	lsls	r0, r1, #5
 802d8c8:	69f9      	ldr	r1, [r7, #28]
 802d8ca:	4401      	add	r1, r0
 802d8cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d8d0:	4313      	orrs	r3, r2
 802d8d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d8d4:	69bb      	ldr	r3, [r7, #24]
 802d8d6:	015a      	lsls	r2, r3, #5
 802d8d8:	69fb      	ldr	r3, [r7, #28]
 802d8da:	4413      	add	r3, r2
 802d8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8e0:	691a      	ldr	r2, [r3, #16]
 802d8e2:	68bb      	ldr	r3, [r7, #8]
 802d8e4:	699b      	ldr	r3, [r3, #24]
 802d8e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d8ea:	69b9      	ldr	r1, [r7, #24]
 802d8ec:	0148      	lsls	r0, r1, #5
 802d8ee:	69f9      	ldr	r1, [r7, #28]
 802d8f0:	4401      	add	r1, r0
 802d8f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d8f6:	4313      	orrs	r3, r2
 802d8f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802d8fa:	68bb      	ldr	r3, [r7, #8]
 802d8fc:	791b      	ldrb	r3, [r3, #4]
 802d8fe:	2b01      	cmp	r3, #1
 802d900:	d11f      	bne.n	802d942 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802d902:	69bb      	ldr	r3, [r7, #24]
 802d904:	015a      	lsls	r2, r3, #5
 802d906:	69fb      	ldr	r3, [r7, #28]
 802d908:	4413      	add	r3, r2
 802d90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d90e:	691b      	ldr	r3, [r3, #16]
 802d910:	69ba      	ldr	r2, [r7, #24]
 802d912:	0151      	lsls	r1, r2, #5
 802d914:	69fa      	ldr	r2, [r7, #28]
 802d916:	440a      	add	r2, r1
 802d918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d91c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802d920:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802d922:	69bb      	ldr	r3, [r7, #24]
 802d924:	015a      	lsls	r2, r3, #5
 802d926:	69fb      	ldr	r3, [r7, #28]
 802d928:	4413      	add	r3, r2
 802d92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d92e:	691b      	ldr	r3, [r3, #16]
 802d930:	69ba      	ldr	r2, [r7, #24]
 802d932:	0151      	lsls	r1, r2, #5
 802d934:	69fa      	ldr	r2, [r7, #28]
 802d936:	440a      	add	r2, r1
 802d938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d93c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d940:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802d942:	79fb      	ldrb	r3, [r7, #7]
 802d944:	2b01      	cmp	r3, #1
 802d946:	d14b      	bne.n	802d9e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d948:	68bb      	ldr	r3, [r7, #8]
 802d94a:	695b      	ldr	r3, [r3, #20]
 802d94c:	2b00      	cmp	r3, #0
 802d94e:	d009      	beq.n	802d964 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d950:	69bb      	ldr	r3, [r7, #24]
 802d952:	015a      	lsls	r2, r3, #5
 802d954:	69fb      	ldr	r3, [r7, #28]
 802d956:	4413      	add	r3, r2
 802d958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d95c:	461a      	mov	r2, r3
 802d95e:	68bb      	ldr	r3, [r7, #8]
 802d960:	695b      	ldr	r3, [r3, #20]
 802d962:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802d964:	68bb      	ldr	r3, [r7, #8]
 802d966:	791b      	ldrb	r3, [r3, #4]
 802d968:	2b01      	cmp	r3, #1
 802d96a:	d128      	bne.n	802d9be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d96c:	69fb      	ldr	r3, [r7, #28]
 802d96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d972:	689b      	ldr	r3, [r3, #8]
 802d974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d978:	2b00      	cmp	r3, #0
 802d97a:	d110      	bne.n	802d99e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802d97c:	69bb      	ldr	r3, [r7, #24]
 802d97e:	015a      	lsls	r2, r3, #5
 802d980:	69fb      	ldr	r3, [r7, #28]
 802d982:	4413      	add	r3, r2
 802d984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d988:	681b      	ldr	r3, [r3, #0]
 802d98a:	69ba      	ldr	r2, [r7, #24]
 802d98c:	0151      	lsls	r1, r2, #5
 802d98e:	69fa      	ldr	r2, [r7, #28]
 802d990:	440a      	add	r2, r1
 802d992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d99a:	6013      	str	r3, [r2, #0]
 802d99c:	e00f      	b.n	802d9be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802d99e:	69bb      	ldr	r3, [r7, #24]
 802d9a0:	015a      	lsls	r2, r3, #5
 802d9a2:	69fb      	ldr	r3, [r7, #28]
 802d9a4:	4413      	add	r3, r2
 802d9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9aa:	681b      	ldr	r3, [r3, #0]
 802d9ac:	69ba      	ldr	r2, [r7, #24]
 802d9ae:	0151      	lsls	r1, r2, #5
 802d9b0:	69fa      	ldr	r2, [r7, #28]
 802d9b2:	440a      	add	r2, r1
 802d9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d9bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d9be:	69bb      	ldr	r3, [r7, #24]
 802d9c0:	015a      	lsls	r2, r3, #5
 802d9c2:	69fb      	ldr	r3, [r7, #28]
 802d9c4:	4413      	add	r3, r2
 802d9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9ca:	681b      	ldr	r3, [r3, #0]
 802d9cc:	69ba      	ldr	r2, [r7, #24]
 802d9ce:	0151      	lsls	r1, r2, #5
 802d9d0:	69fa      	ldr	r2, [r7, #28]
 802d9d2:	440a      	add	r2, r1
 802d9d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d9dc:	6013      	str	r3, [r2, #0]
 802d9de:	e133      	b.n	802dc48 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d9e0:	69bb      	ldr	r3, [r7, #24]
 802d9e2:	015a      	lsls	r2, r3, #5
 802d9e4:	69fb      	ldr	r3, [r7, #28]
 802d9e6:	4413      	add	r3, r2
 802d9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9ec:	681b      	ldr	r3, [r3, #0]
 802d9ee:	69ba      	ldr	r2, [r7, #24]
 802d9f0:	0151      	lsls	r1, r2, #5
 802d9f2:	69fa      	ldr	r2, [r7, #28]
 802d9f4:	440a      	add	r2, r1
 802d9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d9fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802da00:	68bb      	ldr	r3, [r7, #8]
 802da02:	791b      	ldrb	r3, [r3, #4]
 802da04:	2b01      	cmp	r3, #1
 802da06:	d015      	beq.n	802da34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802da08:	68bb      	ldr	r3, [r7, #8]
 802da0a:	699b      	ldr	r3, [r3, #24]
 802da0c:	2b00      	cmp	r3, #0
 802da0e:	f000 811b 	beq.w	802dc48 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802da12:	69fb      	ldr	r3, [r7, #28]
 802da14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802da1a:	68bb      	ldr	r3, [r7, #8]
 802da1c:	781b      	ldrb	r3, [r3, #0]
 802da1e:	f003 030f 	and.w	r3, r3, #15
 802da22:	2101      	movs	r1, #1
 802da24:	fa01 f303 	lsl.w	r3, r1, r3
 802da28:	69f9      	ldr	r1, [r7, #28]
 802da2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802da2e:	4313      	orrs	r3, r2
 802da30:	634b      	str	r3, [r1, #52]	; 0x34
 802da32:	e109      	b.n	802dc48 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802da34:	69fb      	ldr	r3, [r7, #28]
 802da36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da3a:	689b      	ldr	r3, [r3, #8]
 802da3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802da40:	2b00      	cmp	r3, #0
 802da42:	d110      	bne.n	802da66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802da44:	69bb      	ldr	r3, [r7, #24]
 802da46:	015a      	lsls	r2, r3, #5
 802da48:	69fb      	ldr	r3, [r7, #28]
 802da4a:	4413      	add	r3, r2
 802da4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da50:	681b      	ldr	r3, [r3, #0]
 802da52:	69ba      	ldr	r2, [r7, #24]
 802da54:	0151      	lsls	r1, r2, #5
 802da56:	69fa      	ldr	r2, [r7, #28]
 802da58:	440a      	add	r2, r1
 802da5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802da62:	6013      	str	r3, [r2, #0]
 802da64:	e00f      	b.n	802da86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802da66:	69bb      	ldr	r3, [r7, #24]
 802da68:	015a      	lsls	r2, r3, #5
 802da6a:	69fb      	ldr	r3, [r7, #28]
 802da6c:	4413      	add	r3, r2
 802da6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da72:	681b      	ldr	r3, [r3, #0]
 802da74:	69ba      	ldr	r2, [r7, #24]
 802da76:	0151      	lsls	r1, r2, #5
 802da78:	69fa      	ldr	r2, [r7, #28]
 802da7a:	440a      	add	r2, r1
 802da7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802da84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802da86:	68bb      	ldr	r3, [r7, #8]
 802da88:	6919      	ldr	r1, [r3, #16]
 802da8a:	68bb      	ldr	r3, [r7, #8]
 802da8c:	781a      	ldrb	r2, [r3, #0]
 802da8e:	68bb      	ldr	r3, [r7, #8]
 802da90:	699b      	ldr	r3, [r3, #24]
 802da92:	b298      	uxth	r0, r3
 802da94:	79fb      	ldrb	r3, [r7, #7]
 802da96:	9300      	str	r3, [sp, #0]
 802da98:	4603      	mov	r3, r0
 802da9a:	68f8      	ldr	r0, [r7, #12]
 802da9c:	f000 fade 	bl	802e05c <USB_WritePacket>
 802daa0:	e0d2      	b.n	802dc48 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802daa2:	69bb      	ldr	r3, [r7, #24]
 802daa4:	015a      	lsls	r2, r3, #5
 802daa6:	69fb      	ldr	r3, [r7, #28]
 802daa8:	4413      	add	r3, r2
 802daaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802daae:	691b      	ldr	r3, [r3, #16]
 802dab0:	69ba      	ldr	r2, [r7, #24]
 802dab2:	0151      	lsls	r1, r2, #5
 802dab4:	69fa      	ldr	r2, [r7, #28]
 802dab6:	440a      	add	r2, r1
 802dab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dabc:	0cdb      	lsrs	r3, r3, #19
 802dabe:	04db      	lsls	r3, r3, #19
 802dac0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802dac2:	69bb      	ldr	r3, [r7, #24]
 802dac4:	015a      	lsls	r2, r3, #5
 802dac6:	69fb      	ldr	r3, [r7, #28]
 802dac8:	4413      	add	r3, r2
 802daca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dace:	691b      	ldr	r3, [r3, #16]
 802dad0:	69ba      	ldr	r2, [r7, #24]
 802dad2:	0151      	lsls	r1, r2, #5
 802dad4:	69fa      	ldr	r2, [r7, #28]
 802dad6:	440a      	add	r2, r1
 802dad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dadc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dae4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802dae6:	68bb      	ldr	r3, [r7, #8]
 802dae8:	699b      	ldr	r3, [r3, #24]
 802daea:	2b00      	cmp	r3, #0
 802daec:	d126      	bne.n	802db3c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802daee:	69bb      	ldr	r3, [r7, #24]
 802daf0:	015a      	lsls	r2, r3, #5
 802daf2:	69fb      	ldr	r3, [r7, #28]
 802daf4:	4413      	add	r3, r2
 802daf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dafa:	691a      	ldr	r2, [r3, #16]
 802dafc:	68bb      	ldr	r3, [r7, #8]
 802dafe:	68db      	ldr	r3, [r3, #12]
 802db00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802db04:	69b9      	ldr	r1, [r7, #24]
 802db06:	0148      	lsls	r0, r1, #5
 802db08:	69f9      	ldr	r1, [r7, #28]
 802db0a:	4401      	add	r1, r0
 802db0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db10:	4313      	orrs	r3, r2
 802db12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802db14:	69bb      	ldr	r3, [r7, #24]
 802db16:	015a      	lsls	r2, r3, #5
 802db18:	69fb      	ldr	r3, [r7, #28]
 802db1a:	4413      	add	r3, r2
 802db1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db20:	691b      	ldr	r3, [r3, #16]
 802db22:	69ba      	ldr	r2, [r7, #24]
 802db24:	0151      	lsls	r1, r2, #5
 802db26:	69fa      	ldr	r2, [r7, #28]
 802db28:	440a      	add	r2, r1
 802db2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802db2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802db32:	6113      	str	r3, [r2, #16]
 802db34:	e03a      	b.n	802dbac <USB_EPStartXfer+0x3e4>
 802db36:	bf00      	nop
 802db38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802db3c:	68bb      	ldr	r3, [r7, #8]
 802db3e:	699a      	ldr	r2, [r3, #24]
 802db40:	68bb      	ldr	r3, [r7, #8]
 802db42:	68db      	ldr	r3, [r3, #12]
 802db44:	4413      	add	r3, r2
 802db46:	1e5a      	subs	r2, r3, #1
 802db48:	68bb      	ldr	r3, [r7, #8]
 802db4a:	68db      	ldr	r3, [r3, #12]
 802db4c:	fbb2 f3f3 	udiv	r3, r2, r3
 802db50:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802db52:	68bb      	ldr	r3, [r7, #8]
 802db54:	68db      	ldr	r3, [r3, #12]
 802db56:	8afa      	ldrh	r2, [r7, #22]
 802db58:	fb03 f202 	mul.w	r2, r3, r2
 802db5c:	68bb      	ldr	r3, [r7, #8]
 802db5e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802db60:	69bb      	ldr	r3, [r7, #24]
 802db62:	015a      	lsls	r2, r3, #5
 802db64:	69fb      	ldr	r3, [r7, #28]
 802db66:	4413      	add	r3, r2
 802db68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db6c:	691a      	ldr	r2, [r3, #16]
 802db6e:	8afb      	ldrh	r3, [r7, #22]
 802db70:	04d9      	lsls	r1, r3, #19
 802db72:	4b38      	ldr	r3, [pc, #224]	; (802dc54 <USB_EPStartXfer+0x48c>)
 802db74:	400b      	ands	r3, r1
 802db76:	69b9      	ldr	r1, [r7, #24]
 802db78:	0148      	lsls	r0, r1, #5
 802db7a:	69f9      	ldr	r1, [r7, #28]
 802db7c:	4401      	add	r1, r0
 802db7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db82:	4313      	orrs	r3, r2
 802db84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802db86:	69bb      	ldr	r3, [r7, #24]
 802db88:	015a      	lsls	r2, r3, #5
 802db8a:	69fb      	ldr	r3, [r7, #28]
 802db8c:	4413      	add	r3, r2
 802db8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db92:	691a      	ldr	r2, [r3, #16]
 802db94:	68bb      	ldr	r3, [r7, #8]
 802db96:	69db      	ldr	r3, [r3, #28]
 802db98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802db9c:	69b9      	ldr	r1, [r7, #24]
 802db9e:	0148      	lsls	r0, r1, #5
 802dba0:	69f9      	ldr	r1, [r7, #28]
 802dba2:	4401      	add	r1, r0
 802dba4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802dba8:	4313      	orrs	r3, r2
 802dbaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802dbac:	79fb      	ldrb	r3, [r7, #7]
 802dbae:	2b01      	cmp	r3, #1
 802dbb0:	d10d      	bne.n	802dbce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802dbb2:	68bb      	ldr	r3, [r7, #8]
 802dbb4:	691b      	ldr	r3, [r3, #16]
 802dbb6:	2b00      	cmp	r3, #0
 802dbb8:	d009      	beq.n	802dbce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802dbba:	68bb      	ldr	r3, [r7, #8]
 802dbbc:	6919      	ldr	r1, [r3, #16]
 802dbbe:	69bb      	ldr	r3, [r7, #24]
 802dbc0:	015a      	lsls	r2, r3, #5
 802dbc2:	69fb      	ldr	r3, [r7, #28]
 802dbc4:	4413      	add	r3, r2
 802dbc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbca:	460a      	mov	r2, r1
 802dbcc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802dbce:	68bb      	ldr	r3, [r7, #8]
 802dbd0:	791b      	ldrb	r3, [r3, #4]
 802dbd2:	2b01      	cmp	r3, #1
 802dbd4:	d128      	bne.n	802dc28 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802dbd6:	69fb      	ldr	r3, [r7, #28]
 802dbd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dbdc:	689b      	ldr	r3, [r3, #8]
 802dbde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802dbe2:	2b00      	cmp	r3, #0
 802dbe4:	d110      	bne.n	802dc08 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802dbe6:	69bb      	ldr	r3, [r7, #24]
 802dbe8:	015a      	lsls	r2, r3, #5
 802dbea:	69fb      	ldr	r3, [r7, #28]
 802dbec:	4413      	add	r3, r2
 802dbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbf2:	681b      	ldr	r3, [r3, #0]
 802dbf4:	69ba      	ldr	r2, [r7, #24]
 802dbf6:	0151      	lsls	r1, r2, #5
 802dbf8:	69fa      	ldr	r2, [r7, #28]
 802dbfa:	440a      	add	r2, r1
 802dbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802dc04:	6013      	str	r3, [r2, #0]
 802dc06:	e00f      	b.n	802dc28 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802dc08:	69bb      	ldr	r3, [r7, #24]
 802dc0a:	015a      	lsls	r2, r3, #5
 802dc0c:	69fb      	ldr	r3, [r7, #28]
 802dc0e:	4413      	add	r3, r2
 802dc10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc14:	681b      	ldr	r3, [r3, #0]
 802dc16:	69ba      	ldr	r2, [r7, #24]
 802dc18:	0151      	lsls	r1, r2, #5
 802dc1a:	69fa      	ldr	r2, [r7, #28]
 802dc1c:	440a      	add	r2, r1
 802dc1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dc26:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802dc28:	69bb      	ldr	r3, [r7, #24]
 802dc2a:	015a      	lsls	r2, r3, #5
 802dc2c:	69fb      	ldr	r3, [r7, #28]
 802dc2e:	4413      	add	r3, r2
 802dc30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc34:	681b      	ldr	r3, [r3, #0]
 802dc36:	69ba      	ldr	r2, [r7, #24]
 802dc38:	0151      	lsls	r1, r2, #5
 802dc3a:	69fa      	ldr	r2, [r7, #28]
 802dc3c:	440a      	add	r2, r1
 802dc3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802dc46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802dc48:	2300      	movs	r3, #0
}
 802dc4a:	4618      	mov	r0, r3
 802dc4c:	3720      	adds	r7, #32
 802dc4e:	46bd      	mov	sp, r7
 802dc50:	bd80      	pop	{r7, pc}
 802dc52:	bf00      	nop
 802dc54:	1ff80000 	.word	0x1ff80000

0802dc58 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802dc58:	b480      	push	{r7}
 802dc5a:	b087      	sub	sp, #28
 802dc5c:	af00      	add	r7, sp, #0
 802dc5e:	60f8      	str	r0, [r7, #12]
 802dc60:	60b9      	str	r1, [r7, #8]
 802dc62:	4613      	mov	r3, r2
 802dc64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dc66:	68fb      	ldr	r3, [r7, #12]
 802dc68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802dc6a:	68bb      	ldr	r3, [r7, #8]
 802dc6c:	781b      	ldrb	r3, [r3, #0]
 802dc6e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802dc70:	68bb      	ldr	r3, [r7, #8]
 802dc72:	785b      	ldrb	r3, [r3, #1]
 802dc74:	2b01      	cmp	r3, #1
 802dc76:	f040 80ce 	bne.w	802de16 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802dc7a:	68bb      	ldr	r3, [r7, #8]
 802dc7c:	699b      	ldr	r3, [r3, #24]
 802dc7e:	2b00      	cmp	r3, #0
 802dc80:	d132      	bne.n	802dce8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dc82:	693b      	ldr	r3, [r7, #16]
 802dc84:	015a      	lsls	r2, r3, #5
 802dc86:	697b      	ldr	r3, [r7, #20]
 802dc88:	4413      	add	r3, r2
 802dc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dc8e:	691b      	ldr	r3, [r3, #16]
 802dc90:	693a      	ldr	r2, [r7, #16]
 802dc92:	0151      	lsls	r1, r2, #5
 802dc94:	697a      	ldr	r2, [r7, #20]
 802dc96:	440a      	add	r2, r1
 802dc98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dc9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dca0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dca6:	693b      	ldr	r3, [r7, #16]
 802dca8:	015a      	lsls	r2, r3, #5
 802dcaa:	697b      	ldr	r3, [r7, #20]
 802dcac:	4413      	add	r3, r2
 802dcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dcb2:	691b      	ldr	r3, [r3, #16]
 802dcb4:	693a      	ldr	r2, [r7, #16]
 802dcb6:	0151      	lsls	r1, r2, #5
 802dcb8:	697a      	ldr	r2, [r7, #20]
 802dcba:	440a      	add	r2, r1
 802dcbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dcc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dcc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dcc6:	693b      	ldr	r3, [r7, #16]
 802dcc8:	015a      	lsls	r2, r3, #5
 802dcca:	697b      	ldr	r3, [r7, #20]
 802dccc:	4413      	add	r3, r2
 802dcce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dcd2:	691b      	ldr	r3, [r3, #16]
 802dcd4:	693a      	ldr	r2, [r7, #16]
 802dcd6:	0151      	lsls	r1, r2, #5
 802dcd8:	697a      	ldr	r2, [r7, #20]
 802dcda:	440a      	add	r2, r1
 802dcdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dce0:	0cdb      	lsrs	r3, r3, #19
 802dce2:	04db      	lsls	r3, r3, #19
 802dce4:	6113      	str	r3, [r2, #16]
 802dce6:	e04e      	b.n	802dd86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dce8:	693b      	ldr	r3, [r7, #16]
 802dcea:	015a      	lsls	r2, r3, #5
 802dcec:	697b      	ldr	r3, [r7, #20]
 802dcee:	4413      	add	r3, r2
 802dcf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dcf4:	691b      	ldr	r3, [r3, #16]
 802dcf6:	693a      	ldr	r2, [r7, #16]
 802dcf8:	0151      	lsls	r1, r2, #5
 802dcfa:	697a      	ldr	r2, [r7, #20]
 802dcfc:	440a      	add	r2, r1
 802dcfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd02:	0cdb      	lsrs	r3, r3, #19
 802dd04:	04db      	lsls	r3, r3, #19
 802dd06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dd08:	693b      	ldr	r3, [r7, #16]
 802dd0a:	015a      	lsls	r2, r3, #5
 802dd0c:	697b      	ldr	r3, [r7, #20]
 802dd0e:	4413      	add	r3, r2
 802dd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd14:	691b      	ldr	r3, [r3, #16]
 802dd16:	693a      	ldr	r2, [r7, #16]
 802dd18:	0151      	lsls	r1, r2, #5
 802dd1a:	697a      	ldr	r2, [r7, #20]
 802dd1c:	440a      	add	r2, r1
 802dd1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dd26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dd2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802dd2c:	68bb      	ldr	r3, [r7, #8]
 802dd2e:	699a      	ldr	r2, [r3, #24]
 802dd30:	68bb      	ldr	r3, [r7, #8]
 802dd32:	68db      	ldr	r3, [r3, #12]
 802dd34:	429a      	cmp	r2, r3
 802dd36:	d903      	bls.n	802dd40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802dd38:	68bb      	ldr	r3, [r7, #8]
 802dd3a:	68da      	ldr	r2, [r3, #12]
 802dd3c:	68bb      	ldr	r3, [r7, #8]
 802dd3e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dd40:	693b      	ldr	r3, [r7, #16]
 802dd42:	015a      	lsls	r2, r3, #5
 802dd44:	697b      	ldr	r3, [r7, #20]
 802dd46:	4413      	add	r3, r2
 802dd48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd4c:	691b      	ldr	r3, [r3, #16]
 802dd4e:	693a      	ldr	r2, [r7, #16]
 802dd50:	0151      	lsls	r1, r2, #5
 802dd52:	697a      	ldr	r2, [r7, #20]
 802dd54:	440a      	add	r2, r1
 802dd56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dd5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802dd60:	693b      	ldr	r3, [r7, #16]
 802dd62:	015a      	lsls	r2, r3, #5
 802dd64:	697b      	ldr	r3, [r7, #20]
 802dd66:	4413      	add	r3, r2
 802dd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd6c:	691a      	ldr	r2, [r3, #16]
 802dd6e:	68bb      	ldr	r3, [r7, #8]
 802dd70:	699b      	ldr	r3, [r3, #24]
 802dd72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802dd76:	6939      	ldr	r1, [r7, #16]
 802dd78:	0148      	lsls	r0, r1, #5
 802dd7a:	6979      	ldr	r1, [r7, #20]
 802dd7c:	4401      	add	r1, r0
 802dd7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802dd82:	4313      	orrs	r3, r2
 802dd84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802dd86:	79fb      	ldrb	r3, [r7, #7]
 802dd88:	2b01      	cmp	r3, #1
 802dd8a:	d11e      	bne.n	802ddca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802dd8c:	68bb      	ldr	r3, [r7, #8]
 802dd8e:	695b      	ldr	r3, [r3, #20]
 802dd90:	2b00      	cmp	r3, #0
 802dd92:	d009      	beq.n	802dda8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802dd94:	693b      	ldr	r3, [r7, #16]
 802dd96:	015a      	lsls	r2, r3, #5
 802dd98:	697b      	ldr	r3, [r7, #20]
 802dd9a:	4413      	add	r3, r2
 802dd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dda0:	461a      	mov	r2, r3
 802dda2:	68bb      	ldr	r3, [r7, #8]
 802dda4:	695b      	ldr	r3, [r3, #20]
 802dda6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802dda8:	693b      	ldr	r3, [r7, #16]
 802ddaa:	015a      	lsls	r2, r3, #5
 802ddac:	697b      	ldr	r3, [r7, #20]
 802ddae:	4413      	add	r3, r2
 802ddb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ddb4:	681b      	ldr	r3, [r3, #0]
 802ddb6:	693a      	ldr	r2, [r7, #16]
 802ddb8:	0151      	lsls	r1, r2, #5
 802ddba:	697a      	ldr	r2, [r7, #20]
 802ddbc:	440a      	add	r2, r1
 802ddbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ddc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ddc6:	6013      	str	r3, [r2, #0]
 802ddc8:	e097      	b.n	802defa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ddca:	693b      	ldr	r3, [r7, #16]
 802ddcc:	015a      	lsls	r2, r3, #5
 802ddce:	697b      	ldr	r3, [r7, #20]
 802ddd0:	4413      	add	r3, r2
 802ddd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ddd6:	681b      	ldr	r3, [r3, #0]
 802ddd8:	693a      	ldr	r2, [r7, #16]
 802ddda:	0151      	lsls	r1, r2, #5
 802dddc:	697a      	ldr	r2, [r7, #20]
 802ddde:	440a      	add	r2, r1
 802dde0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dde4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802dde8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802ddea:	68bb      	ldr	r3, [r7, #8]
 802ddec:	699b      	ldr	r3, [r3, #24]
 802ddee:	2b00      	cmp	r3, #0
 802ddf0:	f000 8083 	beq.w	802defa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802ddf4:	697b      	ldr	r3, [r7, #20]
 802ddf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ddfc:	68bb      	ldr	r3, [r7, #8]
 802ddfe:	781b      	ldrb	r3, [r3, #0]
 802de00:	f003 030f 	and.w	r3, r3, #15
 802de04:	2101      	movs	r1, #1
 802de06:	fa01 f303 	lsl.w	r3, r1, r3
 802de0a:	6979      	ldr	r1, [r7, #20]
 802de0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802de10:	4313      	orrs	r3, r2
 802de12:	634b      	str	r3, [r1, #52]	; 0x34
 802de14:	e071      	b.n	802defa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802de16:	693b      	ldr	r3, [r7, #16]
 802de18:	015a      	lsls	r2, r3, #5
 802de1a:	697b      	ldr	r3, [r7, #20]
 802de1c:	4413      	add	r3, r2
 802de1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de22:	691b      	ldr	r3, [r3, #16]
 802de24:	693a      	ldr	r2, [r7, #16]
 802de26:	0151      	lsls	r1, r2, #5
 802de28:	697a      	ldr	r2, [r7, #20]
 802de2a:	440a      	add	r2, r1
 802de2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de30:	0cdb      	lsrs	r3, r3, #19
 802de32:	04db      	lsls	r3, r3, #19
 802de34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802de36:	693b      	ldr	r3, [r7, #16]
 802de38:	015a      	lsls	r2, r3, #5
 802de3a:	697b      	ldr	r3, [r7, #20]
 802de3c:	4413      	add	r3, r2
 802de3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de42:	691b      	ldr	r3, [r3, #16]
 802de44:	693a      	ldr	r2, [r7, #16]
 802de46:	0151      	lsls	r1, r2, #5
 802de48:	697a      	ldr	r2, [r7, #20]
 802de4a:	440a      	add	r2, r1
 802de4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802de54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802de58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802de5a:	68bb      	ldr	r3, [r7, #8]
 802de5c:	699b      	ldr	r3, [r3, #24]
 802de5e:	2b00      	cmp	r3, #0
 802de60:	d003      	beq.n	802de6a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802de62:	68bb      	ldr	r3, [r7, #8]
 802de64:	68da      	ldr	r2, [r3, #12]
 802de66:	68bb      	ldr	r3, [r7, #8]
 802de68:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 802de6a:	68bb      	ldr	r3, [r7, #8]
 802de6c:	68da      	ldr	r2, [r3, #12]
 802de6e:	68bb      	ldr	r3, [r7, #8]
 802de70:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802de72:	693b      	ldr	r3, [r7, #16]
 802de74:	015a      	lsls	r2, r3, #5
 802de76:	697b      	ldr	r3, [r7, #20]
 802de78:	4413      	add	r3, r2
 802de7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de7e:	691b      	ldr	r3, [r3, #16]
 802de80:	693a      	ldr	r2, [r7, #16]
 802de82:	0151      	lsls	r1, r2, #5
 802de84:	697a      	ldr	r2, [r7, #20]
 802de86:	440a      	add	r2, r1
 802de88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802de90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802de92:	693b      	ldr	r3, [r7, #16]
 802de94:	015a      	lsls	r2, r3, #5
 802de96:	697b      	ldr	r3, [r7, #20]
 802de98:	4413      	add	r3, r2
 802de9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de9e:	691a      	ldr	r2, [r3, #16]
 802dea0:	68bb      	ldr	r3, [r7, #8]
 802dea2:	69db      	ldr	r3, [r3, #28]
 802dea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802dea8:	6939      	ldr	r1, [r7, #16]
 802deaa:	0148      	lsls	r0, r1, #5
 802deac:	6979      	ldr	r1, [r7, #20]
 802deae:	4401      	add	r1, r0
 802deb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802deb4:	4313      	orrs	r3, r2
 802deb6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802deb8:	79fb      	ldrb	r3, [r7, #7]
 802deba:	2b01      	cmp	r3, #1
 802debc:	d10d      	bne.n	802deda <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802debe:	68bb      	ldr	r3, [r7, #8]
 802dec0:	691b      	ldr	r3, [r3, #16]
 802dec2:	2b00      	cmp	r3, #0
 802dec4:	d009      	beq.n	802deda <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802dec6:	68bb      	ldr	r3, [r7, #8]
 802dec8:	6919      	ldr	r1, [r3, #16]
 802deca:	693b      	ldr	r3, [r7, #16]
 802decc:	015a      	lsls	r2, r3, #5
 802dece:	697b      	ldr	r3, [r7, #20]
 802ded0:	4413      	add	r3, r2
 802ded2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ded6:	460a      	mov	r2, r1
 802ded8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802deda:	693b      	ldr	r3, [r7, #16]
 802dedc:	015a      	lsls	r2, r3, #5
 802dede:	697b      	ldr	r3, [r7, #20]
 802dee0:	4413      	add	r3, r2
 802dee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dee6:	681b      	ldr	r3, [r3, #0]
 802dee8:	693a      	ldr	r2, [r7, #16]
 802deea:	0151      	lsls	r1, r2, #5
 802deec:	697a      	ldr	r2, [r7, #20]
 802deee:	440a      	add	r2, r1
 802def0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802def4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802def8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802defa:	2300      	movs	r3, #0
}
 802defc:	4618      	mov	r0, r3
 802defe:	371c      	adds	r7, #28
 802df00:	46bd      	mov	sp, r7
 802df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df06:	4770      	bx	lr

0802df08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802df08:	b480      	push	{r7}
 802df0a:	b087      	sub	sp, #28
 802df0c:	af00      	add	r7, sp, #0
 802df0e:	6078      	str	r0, [r7, #4]
 802df10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802df12:	2300      	movs	r3, #0
 802df14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802df16:	2300      	movs	r3, #0
 802df18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802df1a:	687b      	ldr	r3, [r7, #4]
 802df1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802df1e:	683b      	ldr	r3, [r7, #0]
 802df20:	785b      	ldrb	r3, [r3, #1]
 802df22:	2b01      	cmp	r3, #1
 802df24:	d14a      	bne.n	802dfbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802df26:	683b      	ldr	r3, [r7, #0]
 802df28:	781b      	ldrb	r3, [r3, #0]
 802df2a:	015a      	lsls	r2, r3, #5
 802df2c:	693b      	ldr	r3, [r7, #16]
 802df2e:	4413      	add	r3, r2
 802df30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df34:	681b      	ldr	r3, [r3, #0]
 802df36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802df3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802df3e:	f040 8086 	bne.w	802e04e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 802df42:	683b      	ldr	r3, [r7, #0]
 802df44:	781b      	ldrb	r3, [r3, #0]
 802df46:	015a      	lsls	r2, r3, #5
 802df48:	693b      	ldr	r3, [r7, #16]
 802df4a:	4413      	add	r3, r2
 802df4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df50:	681b      	ldr	r3, [r3, #0]
 802df52:	683a      	ldr	r2, [r7, #0]
 802df54:	7812      	ldrb	r2, [r2, #0]
 802df56:	0151      	lsls	r1, r2, #5
 802df58:	693a      	ldr	r2, [r7, #16]
 802df5a:	440a      	add	r2, r1
 802df5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802df60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802df64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802df66:	683b      	ldr	r3, [r7, #0]
 802df68:	781b      	ldrb	r3, [r3, #0]
 802df6a:	015a      	lsls	r2, r3, #5
 802df6c:	693b      	ldr	r3, [r7, #16]
 802df6e:	4413      	add	r3, r2
 802df70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df74:	681b      	ldr	r3, [r3, #0]
 802df76:	683a      	ldr	r2, [r7, #0]
 802df78:	7812      	ldrb	r2, [r2, #0]
 802df7a:	0151      	lsls	r1, r2, #5
 802df7c:	693a      	ldr	r2, [r7, #16]
 802df7e:	440a      	add	r2, r1
 802df80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802df84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802df88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802df8a:	68fb      	ldr	r3, [r7, #12]
 802df8c:	3301      	adds	r3, #1
 802df8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802df90:	68fb      	ldr	r3, [r7, #12]
 802df92:	f242 7210 	movw	r2, #10000	; 0x2710
 802df96:	4293      	cmp	r3, r2
 802df98:	d902      	bls.n	802dfa0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 802df9a:	2301      	movs	r3, #1
 802df9c:	75fb      	strb	r3, [r7, #23]
          break;
 802df9e:	e056      	b.n	802e04e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 802dfa0:	683b      	ldr	r3, [r7, #0]
 802dfa2:	781b      	ldrb	r3, [r3, #0]
 802dfa4:	015a      	lsls	r2, r3, #5
 802dfa6:	693b      	ldr	r3, [r7, #16]
 802dfa8:	4413      	add	r3, r2
 802dfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dfae:	681b      	ldr	r3, [r3, #0]
 802dfb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dfb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802dfb8:	d0e7      	beq.n	802df8a <USB_EPStopXfer+0x82>
 802dfba:	e048      	b.n	802e04e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802dfbc:	683b      	ldr	r3, [r7, #0]
 802dfbe:	781b      	ldrb	r3, [r3, #0]
 802dfc0:	015a      	lsls	r2, r3, #5
 802dfc2:	693b      	ldr	r3, [r7, #16]
 802dfc4:	4413      	add	r3, r2
 802dfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dfca:	681b      	ldr	r3, [r3, #0]
 802dfcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dfd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802dfd4:	d13b      	bne.n	802e04e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802dfd6:	683b      	ldr	r3, [r7, #0]
 802dfd8:	781b      	ldrb	r3, [r3, #0]
 802dfda:	015a      	lsls	r2, r3, #5
 802dfdc:	693b      	ldr	r3, [r7, #16]
 802dfde:	4413      	add	r3, r2
 802dfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dfe4:	681b      	ldr	r3, [r3, #0]
 802dfe6:	683a      	ldr	r2, [r7, #0]
 802dfe8:	7812      	ldrb	r2, [r2, #0]
 802dfea:	0151      	lsls	r1, r2, #5
 802dfec:	693a      	ldr	r2, [r7, #16]
 802dfee:	440a      	add	r2, r1
 802dff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dff4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802dff8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802dffa:	683b      	ldr	r3, [r7, #0]
 802dffc:	781b      	ldrb	r3, [r3, #0]
 802dffe:	015a      	lsls	r2, r3, #5
 802e000:	693b      	ldr	r3, [r7, #16]
 802e002:	4413      	add	r3, r2
 802e004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e008:	681b      	ldr	r3, [r3, #0]
 802e00a:	683a      	ldr	r2, [r7, #0]
 802e00c:	7812      	ldrb	r2, [r2, #0]
 802e00e:	0151      	lsls	r1, r2, #5
 802e010:	693a      	ldr	r2, [r7, #16]
 802e012:	440a      	add	r2, r1
 802e014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e01c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802e01e:	68fb      	ldr	r3, [r7, #12]
 802e020:	3301      	adds	r3, #1
 802e022:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802e024:	68fb      	ldr	r3, [r7, #12]
 802e026:	f242 7210 	movw	r2, #10000	; 0x2710
 802e02a:	4293      	cmp	r3, r2
 802e02c:	d902      	bls.n	802e034 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 802e02e:	2301      	movs	r3, #1
 802e030:	75fb      	strb	r3, [r7, #23]
          break;
 802e032:	e00c      	b.n	802e04e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 802e034:	683b      	ldr	r3, [r7, #0]
 802e036:	781b      	ldrb	r3, [r3, #0]
 802e038:	015a      	lsls	r2, r3, #5
 802e03a:	693b      	ldr	r3, [r7, #16]
 802e03c:	4413      	add	r3, r2
 802e03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e042:	681b      	ldr	r3, [r3, #0]
 802e044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e04c:	d0e7      	beq.n	802e01e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 802e04e:	7dfb      	ldrb	r3, [r7, #23]
}
 802e050:	4618      	mov	r0, r3
 802e052:	371c      	adds	r7, #28
 802e054:	46bd      	mov	sp, r7
 802e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e05a:	4770      	bx	lr

0802e05c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802e05c:	b480      	push	{r7}
 802e05e:	b089      	sub	sp, #36	; 0x24
 802e060:	af00      	add	r7, sp, #0
 802e062:	60f8      	str	r0, [r7, #12]
 802e064:	60b9      	str	r1, [r7, #8]
 802e066:	4611      	mov	r1, r2
 802e068:	461a      	mov	r2, r3
 802e06a:	460b      	mov	r3, r1
 802e06c:	71fb      	strb	r3, [r7, #7]
 802e06e:	4613      	mov	r3, r2
 802e070:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e072:	68fb      	ldr	r3, [r7, #12]
 802e074:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802e076:	68bb      	ldr	r3, [r7, #8]
 802e078:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802e07a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802e07e:	2b00      	cmp	r3, #0
 802e080:	d123      	bne.n	802e0ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802e082:	88bb      	ldrh	r3, [r7, #4]
 802e084:	3303      	adds	r3, #3
 802e086:	089b      	lsrs	r3, r3, #2
 802e088:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802e08a:	2300      	movs	r3, #0
 802e08c:	61bb      	str	r3, [r7, #24]
 802e08e:	e018      	b.n	802e0c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802e090:	79fb      	ldrb	r3, [r7, #7]
 802e092:	031a      	lsls	r2, r3, #12
 802e094:	697b      	ldr	r3, [r7, #20]
 802e096:	4413      	add	r3, r2
 802e098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e09c:	461a      	mov	r2, r3
 802e09e:	69fb      	ldr	r3, [r7, #28]
 802e0a0:	681b      	ldr	r3, [r3, #0]
 802e0a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 802e0a4:	69fb      	ldr	r3, [r7, #28]
 802e0a6:	3301      	adds	r3, #1
 802e0a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e0aa:	69fb      	ldr	r3, [r7, #28]
 802e0ac:	3301      	adds	r3, #1
 802e0ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e0b0:	69fb      	ldr	r3, [r7, #28]
 802e0b2:	3301      	adds	r3, #1
 802e0b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e0b6:	69fb      	ldr	r3, [r7, #28]
 802e0b8:	3301      	adds	r3, #1
 802e0ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802e0bc:	69bb      	ldr	r3, [r7, #24]
 802e0be:	3301      	adds	r3, #1
 802e0c0:	61bb      	str	r3, [r7, #24]
 802e0c2:	69ba      	ldr	r2, [r7, #24]
 802e0c4:	693b      	ldr	r3, [r7, #16]
 802e0c6:	429a      	cmp	r2, r3
 802e0c8:	d3e2      	bcc.n	802e090 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802e0ca:	2300      	movs	r3, #0
}
 802e0cc:	4618      	mov	r0, r3
 802e0ce:	3724      	adds	r7, #36	; 0x24
 802e0d0:	46bd      	mov	sp, r7
 802e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0d6:	4770      	bx	lr

0802e0d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802e0d8:	b480      	push	{r7}
 802e0da:	b08b      	sub	sp, #44	; 0x2c
 802e0dc:	af00      	add	r7, sp, #0
 802e0de:	60f8      	str	r0, [r7, #12]
 802e0e0:	60b9      	str	r1, [r7, #8]
 802e0e2:	4613      	mov	r3, r2
 802e0e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e0e6:	68fb      	ldr	r3, [r7, #12]
 802e0e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802e0ea:	68bb      	ldr	r3, [r7, #8]
 802e0ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802e0ee:	88fb      	ldrh	r3, [r7, #6]
 802e0f0:	089b      	lsrs	r3, r3, #2
 802e0f2:	b29b      	uxth	r3, r3
 802e0f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802e0f6:	88fb      	ldrh	r3, [r7, #6]
 802e0f8:	f003 0303 	and.w	r3, r3, #3
 802e0fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802e0fe:	2300      	movs	r3, #0
 802e100:	623b      	str	r3, [r7, #32]
 802e102:	e014      	b.n	802e12e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802e104:	69bb      	ldr	r3, [r7, #24]
 802e106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e10a:	681a      	ldr	r2, [r3, #0]
 802e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e10e:	601a      	str	r2, [r3, #0]
    pDest++;
 802e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e112:	3301      	adds	r3, #1
 802e114:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e118:	3301      	adds	r3, #1
 802e11a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e11e:	3301      	adds	r3, #1
 802e120:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e124:	3301      	adds	r3, #1
 802e126:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802e128:	6a3b      	ldr	r3, [r7, #32]
 802e12a:	3301      	adds	r3, #1
 802e12c:	623b      	str	r3, [r7, #32]
 802e12e:	6a3a      	ldr	r2, [r7, #32]
 802e130:	697b      	ldr	r3, [r7, #20]
 802e132:	429a      	cmp	r2, r3
 802e134:	d3e6      	bcc.n	802e104 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802e136:	8bfb      	ldrh	r3, [r7, #30]
 802e138:	2b00      	cmp	r3, #0
 802e13a:	d01e      	beq.n	802e17a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802e13c:	2300      	movs	r3, #0
 802e13e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802e140:	69bb      	ldr	r3, [r7, #24]
 802e142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e146:	461a      	mov	r2, r3
 802e148:	f107 0310 	add.w	r3, r7, #16
 802e14c:	6812      	ldr	r2, [r2, #0]
 802e14e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802e150:	693a      	ldr	r2, [r7, #16]
 802e152:	6a3b      	ldr	r3, [r7, #32]
 802e154:	b2db      	uxtb	r3, r3
 802e156:	00db      	lsls	r3, r3, #3
 802e158:	fa22 f303 	lsr.w	r3, r2, r3
 802e15c:	b2da      	uxtb	r2, r3
 802e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e160:	701a      	strb	r2, [r3, #0]
      i++;
 802e162:	6a3b      	ldr	r3, [r7, #32]
 802e164:	3301      	adds	r3, #1
 802e166:	623b      	str	r3, [r7, #32]
      pDest++;
 802e168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e16a:	3301      	adds	r3, #1
 802e16c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802e16e:	8bfb      	ldrh	r3, [r7, #30]
 802e170:	3b01      	subs	r3, #1
 802e172:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802e174:	8bfb      	ldrh	r3, [r7, #30]
 802e176:	2b00      	cmp	r3, #0
 802e178:	d1ea      	bne.n	802e150 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802e17c:	4618      	mov	r0, r3
 802e17e:	372c      	adds	r7, #44	; 0x2c
 802e180:	46bd      	mov	sp, r7
 802e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e186:	4770      	bx	lr

0802e188 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e188:	b480      	push	{r7}
 802e18a:	b085      	sub	sp, #20
 802e18c:	af00      	add	r7, sp, #0
 802e18e:	6078      	str	r0, [r7, #4]
 802e190:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e192:	687b      	ldr	r3, [r7, #4]
 802e194:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e196:	683b      	ldr	r3, [r7, #0]
 802e198:	781b      	ldrb	r3, [r3, #0]
 802e19a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e19c:	683b      	ldr	r3, [r7, #0]
 802e19e:	785b      	ldrb	r3, [r3, #1]
 802e1a0:	2b01      	cmp	r3, #1
 802e1a2:	d12c      	bne.n	802e1fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e1a4:	68bb      	ldr	r3, [r7, #8]
 802e1a6:	015a      	lsls	r2, r3, #5
 802e1a8:	68fb      	ldr	r3, [r7, #12]
 802e1aa:	4413      	add	r3, r2
 802e1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1b0:	681b      	ldr	r3, [r3, #0]
 802e1b2:	2b00      	cmp	r3, #0
 802e1b4:	db12      	blt.n	802e1dc <USB_EPSetStall+0x54>
 802e1b6:	68bb      	ldr	r3, [r7, #8]
 802e1b8:	2b00      	cmp	r3, #0
 802e1ba:	d00f      	beq.n	802e1dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802e1bc:	68bb      	ldr	r3, [r7, #8]
 802e1be:	015a      	lsls	r2, r3, #5
 802e1c0:	68fb      	ldr	r3, [r7, #12]
 802e1c2:	4413      	add	r3, r2
 802e1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1c8:	681b      	ldr	r3, [r3, #0]
 802e1ca:	68ba      	ldr	r2, [r7, #8]
 802e1cc:	0151      	lsls	r1, r2, #5
 802e1ce:	68fa      	ldr	r2, [r7, #12]
 802e1d0:	440a      	add	r2, r1
 802e1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e1da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802e1dc:	68bb      	ldr	r3, [r7, #8]
 802e1de:	015a      	lsls	r2, r3, #5
 802e1e0:	68fb      	ldr	r3, [r7, #12]
 802e1e2:	4413      	add	r3, r2
 802e1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1e8:	681b      	ldr	r3, [r3, #0]
 802e1ea:	68ba      	ldr	r2, [r7, #8]
 802e1ec:	0151      	lsls	r1, r2, #5
 802e1ee:	68fa      	ldr	r2, [r7, #12]
 802e1f0:	440a      	add	r2, r1
 802e1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e1fa:	6013      	str	r3, [r2, #0]
 802e1fc:	e02b      	b.n	802e256 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e1fe:	68bb      	ldr	r3, [r7, #8]
 802e200:	015a      	lsls	r2, r3, #5
 802e202:	68fb      	ldr	r3, [r7, #12]
 802e204:	4413      	add	r3, r2
 802e206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e20a:	681b      	ldr	r3, [r3, #0]
 802e20c:	2b00      	cmp	r3, #0
 802e20e:	db12      	blt.n	802e236 <USB_EPSetStall+0xae>
 802e210:	68bb      	ldr	r3, [r7, #8]
 802e212:	2b00      	cmp	r3, #0
 802e214:	d00f      	beq.n	802e236 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802e216:	68bb      	ldr	r3, [r7, #8]
 802e218:	015a      	lsls	r2, r3, #5
 802e21a:	68fb      	ldr	r3, [r7, #12]
 802e21c:	4413      	add	r3, r2
 802e21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e222:	681b      	ldr	r3, [r3, #0]
 802e224:	68ba      	ldr	r2, [r7, #8]
 802e226:	0151      	lsls	r1, r2, #5
 802e228:	68fa      	ldr	r2, [r7, #12]
 802e22a:	440a      	add	r2, r1
 802e22c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e230:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e234:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802e236:	68bb      	ldr	r3, [r7, #8]
 802e238:	015a      	lsls	r2, r3, #5
 802e23a:	68fb      	ldr	r3, [r7, #12]
 802e23c:	4413      	add	r3, r2
 802e23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e242:	681b      	ldr	r3, [r3, #0]
 802e244:	68ba      	ldr	r2, [r7, #8]
 802e246:	0151      	lsls	r1, r2, #5
 802e248:	68fa      	ldr	r2, [r7, #12]
 802e24a:	440a      	add	r2, r1
 802e24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e254:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e256:	2300      	movs	r3, #0
}
 802e258:	4618      	mov	r0, r3
 802e25a:	3714      	adds	r7, #20
 802e25c:	46bd      	mov	sp, r7
 802e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e262:	4770      	bx	lr

0802e264 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e264:	b480      	push	{r7}
 802e266:	b085      	sub	sp, #20
 802e268:	af00      	add	r7, sp, #0
 802e26a:	6078      	str	r0, [r7, #4]
 802e26c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e26e:	687b      	ldr	r3, [r7, #4]
 802e270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e272:	683b      	ldr	r3, [r7, #0]
 802e274:	781b      	ldrb	r3, [r3, #0]
 802e276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e278:	683b      	ldr	r3, [r7, #0]
 802e27a:	785b      	ldrb	r3, [r3, #1]
 802e27c:	2b01      	cmp	r3, #1
 802e27e:	d128      	bne.n	802e2d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802e280:	68bb      	ldr	r3, [r7, #8]
 802e282:	015a      	lsls	r2, r3, #5
 802e284:	68fb      	ldr	r3, [r7, #12]
 802e286:	4413      	add	r3, r2
 802e288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e28c:	681b      	ldr	r3, [r3, #0]
 802e28e:	68ba      	ldr	r2, [r7, #8]
 802e290:	0151      	lsls	r1, r2, #5
 802e292:	68fa      	ldr	r2, [r7, #12]
 802e294:	440a      	add	r2, r1
 802e296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e29a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e29e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e2a0:	683b      	ldr	r3, [r7, #0]
 802e2a2:	791b      	ldrb	r3, [r3, #4]
 802e2a4:	2b03      	cmp	r3, #3
 802e2a6:	d003      	beq.n	802e2b0 <USB_EPClearStall+0x4c>
 802e2a8:	683b      	ldr	r3, [r7, #0]
 802e2aa:	791b      	ldrb	r3, [r3, #4]
 802e2ac:	2b02      	cmp	r3, #2
 802e2ae:	d138      	bne.n	802e322 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e2b0:	68bb      	ldr	r3, [r7, #8]
 802e2b2:	015a      	lsls	r2, r3, #5
 802e2b4:	68fb      	ldr	r3, [r7, #12]
 802e2b6:	4413      	add	r3, r2
 802e2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e2bc:	681b      	ldr	r3, [r3, #0]
 802e2be:	68ba      	ldr	r2, [r7, #8]
 802e2c0:	0151      	lsls	r1, r2, #5
 802e2c2:	68fa      	ldr	r2, [r7, #12]
 802e2c4:	440a      	add	r2, r1
 802e2c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e2ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e2ce:	6013      	str	r3, [r2, #0]
 802e2d0:	e027      	b.n	802e322 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802e2d2:	68bb      	ldr	r3, [r7, #8]
 802e2d4:	015a      	lsls	r2, r3, #5
 802e2d6:	68fb      	ldr	r3, [r7, #12]
 802e2d8:	4413      	add	r3, r2
 802e2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e2de:	681b      	ldr	r3, [r3, #0]
 802e2e0:	68ba      	ldr	r2, [r7, #8]
 802e2e2:	0151      	lsls	r1, r2, #5
 802e2e4:	68fa      	ldr	r2, [r7, #12]
 802e2e6:	440a      	add	r2, r1
 802e2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e2ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e2f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e2f2:	683b      	ldr	r3, [r7, #0]
 802e2f4:	791b      	ldrb	r3, [r3, #4]
 802e2f6:	2b03      	cmp	r3, #3
 802e2f8:	d003      	beq.n	802e302 <USB_EPClearStall+0x9e>
 802e2fa:	683b      	ldr	r3, [r7, #0]
 802e2fc:	791b      	ldrb	r3, [r3, #4]
 802e2fe:	2b02      	cmp	r3, #2
 802e300:	d10f      	bne.n	802e322 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e302:	68bb      	ldr	r3, [r7, #8]
 802e304:	015a      	lsls	r2, r3, #5
 802e306:	68fb      	ldr	r3, [r7, #12]
 802e308:	4413      	add	r3, r2
 802e30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e30e:	681b      	ldr	r3, [r3, #0]
 802e310:	68ba      	ldr	r2, [r7, #8]
 802e312:	0151      	lsls	r1, r2, #5
 802e314:	68fa      	ldr	r2, [r7, #12]
 802e316:	440a      	add	r2, r1
 802e318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e31c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e320:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802e322:	2300      	movs	r3, #0
}
 802e324:	4618      	mov	r0, r3
 802e326:	3714      	adds	r7, #20
 802e328:	46bd      	mov	sp, r7
 802e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e32e:	4770      	bx	lr

0802e330 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802e330:	b480      	push	{r7}
 802e332:	b085      	sub	sp, #20
 802e334:	af00      	add	r7, sp, #0
 802e336:	6078      	str	r0, [r7, #4]
 802e338:	460b      	mov	r3, r1
 802e33a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e33c:	687b      	ldr	r3, [r7, #4]
 802e33e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802e340:	68fb      	ldr	r3, [r7, #12]
 802e342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e346:	681b      	ldr	r3, [r3, #0]
 802e348:	68fa      	ldr	r2, [r7, #12]
 802e34a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e34e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802e352:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802e354:	68fb      	ldr	r3, [r7, #12]
 802e356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e35a:	681a      	ldr	r2, [r3, #0]
 802e35c:	78fb      	ldrb	r3, [r7, #3]
 802e35e:	011b      	lsls	r3, r3, #4
 802e360:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802e364:	68f9      	ldr	r1, [r7, #12]
 802e366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802e36a:	4313      	orrs	r3, r2
 802e36c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802e36e:	2300      	movs	r3, #0
}
 802e370:	4618      	mov	r0, r3
 802e372:	3714      	adds	r7, #20
 802e374:	46bd      	mov	sp, r7
 802e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e37a:	4770      	bx	lr

0802e37c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e37c:	b480      	push	{r7}
 802e37e:	b085      	sub	sp, #20
 802e380:	af00      	add	r7, sp, #0
 802e382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e384:	687b      	ldr	r3, [r7, #4]
 802e386:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e388:	68fb      	ldr	r3, [r7, #12]
 802e38a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e38e:	681b      	ldr	r3, [r3, #0]
 802e390:	68fa      	ldr	r2, [r7, #12]
 802e392:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e396:	f023 0303 	bic.w	r3, r3, #3
 802e39a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802e39c:	68fb      	ldr	r3, [r7, #12]
 802e39e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3a2:	685b      	ldr	r3, [r3, #4]
 802e3a4:	68fa      	ldr	r2, [r7, #12]
 802e3a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e3aa:	f023 0302 	bic.w	r3, r3, #2
 802e3ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e3b0:	2300      	movs	r3, #0
}
 802e3b2:	4618      	mov	r0, r3
 802e3b4:	3714      	adds	r7, #20
 802e3b6:	46bd      	mov	sp, r7
 802e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3bc:	4770      	bx	lr

0802e3be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e3be:	b480      	push	{r7}
 802e3c0:	b085      	sub	sp, #20
 802e3c2:	af00      	add	r7, sp, #0
 802e3c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e3c6:	687b      	ldr	r3, [r7, #4]
 802e3c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e3ca:	68fb      	ldr	r3, [r7, #12]
 802e3cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e3d0:	681b      	ldr	r3, [r3, #0]
 802e3d2:	68fa      	ldr	r2, [r7, #12]
 802e3d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e3d8:	f023 0303 	bic.w	r3, r3, #3
 802e3dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802e3de:	68fb      	ldr	r3, [r7, #12]
 802e3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3e4:	685b      	ldr	r3, [r3, #4]
 802e3e6:	68fa      	ldr	r2, [r7, #12]
 802e3e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e3ec:	f043 0302 	orr.w	r3, r3, #2
 802e3f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e3f2:	2300      	movs	r3, #0
}
 802e3f4:	4618      	mov	r0, r3
 802e3f6:	3714      	adds	r7, #20
 802e3f8:	46bd      	mov	sp, r7
 802e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3fe:	4770      	bx	lr

0802e400 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802e400:	b480      	push	{r7}
 802e402:	b085      	sub	sp, #20
 802e404:	af00      	add	r7, sp, #0
 802e406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	695b      	ldr	r3, [r3, #20]
 802e40c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802e40e:	687b      	ldr	r3, [r7, #4]
 802e410:	699b      	ldr	r3, [r3, #24]
 802e412:	68fa      	ldr	r2, [r7, #12]
 802e414:	4013      	ands	r3, r2
 802e416:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802e418:	68fb      	ldr	r3, [r7, #12]
}
 802e41a:	4618      	mov	r0, r3
 802e41c:	3714      	adds	r7, #20
 802e41e:	46bd      	mov	sp, r7
 802e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e424:	4770      	bx	lr

0802e426 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e426:	b480      	push	{r7}
 802e428:	b085      	sub	sp, #20
 802e42a:	af00      	add	r7, sp, #0
 802e42c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e42e:	687b      	ldr	r3, [r7, #4]
 802e430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e432:	68fb      	ldr	r3, [r7, #12]
 802e434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e438:	699b      	ldr	r3, [r3, #24]
 802e43a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e43c:	68fb      	ldr	r3, [r7, #12]
 802e43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e442:	69db      	ldr	r3, [r3, #28]
 802e444:	68ba      	ldr	r2, [r7, #8]
 802e446:	4013      	ands	r3, r2
 802e448:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802e44a:	68bb      	ldr	r3, [r7, #8]
 802e44c:	0c1b      	lsrs	r3, r3, #16
}
 802e44e:	4618      	mov	r0, r3
 802e450:	3714      	adds	r7, #20
 802e452:	46bd      	mov	sp, r7
 802e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e458:	4770      	bx	lr

0802e45a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e45a:	b480      	push	{r7}
 802e45c:	b085      	sub	sp, #20
 802e45e:	af00      	add	r7, sp, #0
 802e460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e462:	687b      	ldr	r3, [r7, #4]
 802e464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e466:	68fb      	ldr	r3, [r7, #12]
 802e468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e46c:	699b      	ldr	r3, [r3, #24]
 802e46e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e470:	68fb      	ldr	r3, [r7, #12]
 802e472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e476:	69db      	ldr	r3, [r3, #28]
 802e478:	68ba      	ldr	r2, [r7, #8]
 802e47a:	4013      	ands	r3, r2
 802e47c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802e47e:	68bb      	ldr	r3, [r7, #8]
 802e480:	b29b      	uxth	r3, r3
}
 802e482:	4618      	mov	r0, r3
 802e484:	3714      	adds	r7, #20
 802e486:	46bd      	mov	sp, r7
 802e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e48c:	4770      	bx	lr

0802e48e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e48e:	b480      	push	{r7}
 802e490:	b085      	sub	sp, #20
 802e492:	af00      	add	r7, sp, #0
 802e494:	6078      	str	r0, [r7, #4]
 802e496:	460b      	mov	r3, r1
 802e498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e49a:	687b      	ldr	r3, [r7, #4]
 802e49c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802e49e:	78fb      	ldrb	r3, [r7, #3]
 802e4a0:	015a      	lsls	r2, r3, #5
 802e4a2:	68fb      	ldr	r3, [r7, #12]
 802e4a4:	4413      	add	r3, r2
 802e4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e4aa:	689b      	ldr	r3, [r3, #8]
 802e4ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802e4ae:	68fb      	ldr	r3, [r7, #12]
 802e4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4b4:	695b      	ldr	r3, [r3, #20]
 802e4b6:	68ba      	ldr	r2, [r7, #8]
 802e4b8:	4013      	ands	r3, r2
 802e4ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e4bc:	68bb      	ldr	r3, [r7, #8]
}
 802e4be:	4618      	mov	r0, r3
 802e4c0:	3714      	adds	r7, #20
 802e4c2:	46bd      	mov	sp, r7
 802e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4c8:	4770      	bx	lr

0802e4ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e4ca:	b480      	push	{r7}
 802e4cc:	b087      	sub	sp, #28
 802e4ce:	af00      	add	r7, sp, #0
 802e4d0:	6078      	str	r0, [r7, #4]
 802e4d2:	460b      	mov	r3, r1
 802e4d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e4d6:	687b      	ldr	r3, [r7, #4]
 802e4d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802e4da:	697b      	ldr	r3, [r7, #20]
 802e4dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4e0:	691b      	ldr	r3, [r3, #16]
 802e4e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802e4e4:	697b      	ldr	r3, [r7, #20]
 802e4e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e4ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802e4ee:	78fb      	ldrb	r3, [r7, #3]
 802e4f0:	f003 030f 	and.w	r3, r3, #15
 802e4f4:	68fa      	ldr	r2, [r7, #12]
 802e4f6:	fa22 f303 	lsr.w	r3, r2, r3
 802e4fa:	01db      	lsls	r3, r3, #7
 802e4fc:	b2db      	uxtb	r3, r3
 802e4fe:	693a      	ldr	r2, [r7, #16]
 802e500:	4313      	orrs	r3, r2
 802e502:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802e504:	78fb      	ldrb	r3, [r7, #3]
 802e506:	015a      	lsls	r2, r3, #5
 802e508:	697b      	ldr	r3, [r7, #20]
 802e50a:	4413      	add	r3, r2
 802e50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e510:	689b      	ldr	r3, [r3, #8]
 802e512:	693a      	ldr	r2, [r7, #16]
 802e514:	4013      	ands	r3, r2
 802e516:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e518:	68bb      	ldr	r3, [r7, #8]
}
 802e51a:	4618      	mov	r0, r3
 802e51c:	371c      	adds	r7, #28
 802e51e:	46bd      	mov	sp, r7
 802e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e524:	4770      	bx	lr

0802e526 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802e526:	b480      	push	{r7}
 802e528:	b083      	sub	sp, #12
 802e52a:	af00      	add	r7, sp, #0
 802e52c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	695b      	ldr	r3, [r3, #20]
 802e532:	f003 0301 	and.w	r3, r3, #1
}
 802e536:	4618      	mov	r0, r3
 802e538:	370c      	adds	r7, #12
 802e53a:	46bd      	mov	sp, r7
 802e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e540:	4770      	bx	lr

0802e542 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802e542:	b480      	push	{r7}
 802e544:	b085      	sub	sp, #20
 802e546:	af00      	add	r7, sp, #0
 802e548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e54a:	687b      	ldr	r3, [r7, #4]
 802e54c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802e54e:	68fb      	ldr	r3, [r7, #12]
 802e550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e554:	681b      	ldr	r3, [r3, #0]
 802e556:	68fa      	ldr	r2, [r7, #12]
 802e558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e55c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802e560:	f023 0307 	bic.w	r3, r3, #7
 802e564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802e566:	68fb      	ldr	r3, [r7, #12]
 802e568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e56c:	685b      	ldr	r3, [r3, #4]
 802e56e:	68fa      	ldr	r2, [r7, #12]
 802e570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e57a:	2300      	movs	r3, #0
}
 802e57c:	4618      	mov	r0, r3
 802e57e:	3714      	adds	r7, #20
 802e580:	46bd      	mov	sp, r7
 802e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e586:	4770      	bx	lr

0802e588 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802e588:	b480      	push	{r7}
 802e58a:	b087      	sub	sp, #28
 802e58c:	af00      	add	r7, sp, #0
 802e58e:	60f8      	str	r0, [r7, #12]
 802e590:	460b      	mov	r3, r1
 802e592:	607a      	str	r2, [r7, #4]
 802e594:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e596:	68fb      	ldr	r3, [r7, #12]
 802e598:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802e59a:	68fb      	ldr	r3, [r7, #12]
 802e59c:	333c      	adds	r3, #60	; 0x3c
 802e59e:	3304      	adds	r3, #4
 802e5a0:	681b      	ldr	r3, [r3, #0]
 802e5a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802e5a4:	693b      	ldr	r3, [r7, #16]
 802e5a6:	4a26      	ldr	r2, [pc, #152]	; (802e640 <USB_EP0_OutStart+0xb8>)
 802e5a8:	4293      	cmp	r3, r2
 802e5aa:	d90a      	bls.n	802e5c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802e5ac:	697b      	ldr	r3, [r7, #20]
 802e5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5b2:	681b      	ldr	r3, [r3, #0]
 802e5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e5bc:	d101      	bne.n	802e5c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802e5be:	2300      	movs	r3, #0
 802e5c0:	e037      	b.n	802e632 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802e5c2:	697b      	ldr	r3, [r7, #20]
 802e5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5c8:	461a      	mov	r2, r3
 802e5ca:	2300      	movs	r3, #0
 802e5cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802e5ce:	697b      	ldr	r3, [r7, #20]
 802e5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5d4:	691b      	ldr	r3, [r3, #16]
 802e5d6:	697a      	ldr	r2, [r7, #20]
 802e5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e5dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e5e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802e5e2:	697b      	ldr	r3, [r7, #20]
 802e5e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5e8:	691b      	ldr	r3, [r3, #16]
 802e5ea:	697a      	ldr	r2, [r7, #20]
 802e5ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e5f0:	f043 0318 	orr.w	r3, r3, #24
 802e5f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802e5f6:	697b      	ldr	r3, [r7, #20]
 802e5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5fc:	691b      	ldr	r3, [r3, #16]
 802e5fe:	697a      	ldr	r2, [r7, #20]
 802e600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e604:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802e608:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802e60a:	7afb      	ldrb	r3, [r7, #11]
 802e60c:	2b01      	cmp	r3, #1
 802e60e:	d10f      	bne.n	802e630 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802e610:	697b      	ldr	r3, [r7, #20]
 802e612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e616:	461a      	mov	r2, r3
 802e618:	687b      	ldr	r3, [r7, #4]
 802e61a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802e61c:	697b      	ldr	r3, [r7, #20]
 802e61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e622:	681b      	ldr	r3, [r3, #0]
 802e624:	697a      	ldr	r2, [r7, #20]
 802e626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e62a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802e62e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e630:	2300      	movs	r3, #0
}
 802e632:	4618      	mov	r0, r3
 802e634:	371c      	adds	r7, #28
 802e636:	46bd      	mov	sp, r7
 802e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e63c:	4770      	bx	lr
 802e63e:	bf00      	nop
 802e640:	4f54300a 	.word	0x4f54300a

0802e644 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802e644:	b480      	push	{r7}
 802e646:	b085      	sub	sp, #20
 802e648:	af00      	add	r7, sp, #0
 802e64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802e64c:	2300      	movs	r3, #0
 802e64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802e650:	68fb      	ldr	r3, [r7, #12]
 802e652:	3301      	adds	r3, #1
 802e654:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e656:	68fb      	ldr	r3, [r7, #12]
 802e658:	4a13      	ldr	r2, [pc, #76]	; (802e6a8 <USB_CoreReset+0x64>)
 802e65a:	4293      	cmp	r3, r2
 802e65c:	d901      	bls.n	802e662 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802e65e:	2303      	movs	r3, #3
 802e660:	e01b      	b.n	802e69a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802e662:	687b      	ldr	r3, [r7, #4]
 802e664:	691b      	ldr	r3, [r3, #16]
 802e666:	2b00      	cmp	r3, #0
 802e668:	daf2      	bge.n	802e650 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802e66a:	2300      	movs	r3, #0
 802e66c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802e66e:	687b      	ldr	r3, [r7, #4]
 802e670:	691b      	ldr	r3, [r3, #16]
 802e672:	f043 0201 	orr.w	r2, r3, #1
 802e676:	687b      	ldr	r3, [r7, #4]
 802e678:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802e67a:	68fb      	ldr	r3, [r7, #12]
 802e67c:	3301      	adds	r3, #1
 802e67e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e680:	68fb      	ldr	r3, [r7, #12]
 802e682:	4a09      	ldr	r2, [pc, #36]	; (802e6a8 <USB_CoreReset+0x64>)
 802e684:	4293      	cmp	r3, r2
 802e686:	d901      	bls.n	802e68c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802e688:	2303      	movs	r3, #3
 802e68a:	e006      	b.n	802e69a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802e68c:	687b      	ldr	r3, [r7, #4]
 802e68e:	691b      	ldr	r3, [r3, #16]
 802e690:	f003 0301 	and.w	r3, r3, #1
 802e694:	2b01      	cmp	r3, #1
 802e696:	d0f0      	beq.n	802e67a <USB_CoreReset+0x36>

  return HAL_OK;
 802e698:	2300      	movs	r3, #0
}
 802e69a:	4618      	mov	r0, r3
 802e69c:	3714      	adds	r7, #20
 802e69e:	46bd      	mov	sp, r7
 802e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6a4:	4770      	bx	lr
 802e6a6:	bf00      	nop
 802e6a8:	00030d40 	.word	0x00030d40

0802e6ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e6ac:	b580      	push	{r7, lr}
 802e6ae:	b084      	sub	sp, #16
 802e6b0:	af00      	add	r7, sp, #0
 802e6b2:	6078      	str	r0, [r7, #4]
 802e6b4:	460b      	mov	r3, r1
 802e6b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802e6b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802e6bc:	f002 fef4 	bl	80314a8 <USBD_static_malloc>
 802e6c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 802e6c2:	68fb      	ldr	r3, [r7, #12]
 802e6c4:	2b00      	cmp	r3, #0
 802e6c6:	d109      	bne.n	802e6dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e6c8:	687b      	ldr	r3, [r7, #4]
 802e6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6ce:	687b      	ldr	r3, [r7, #4]
 802e6d0:	32b0      	adds	r2, #176	; 0xb0
 802e6d2:	2100      	movs	r1, #0
 802e6d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 802e6d8:	2302      	movs	r3, #2
 802e6da:	e0d4      	b.n	802e886 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 802e6dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 802e6e0:	2100      	movs	r1, #0
 802e6e2:	68f8      	ldr	r0, [r7, #12]
 802e6e4:	f003 f92c 	bl	8031940 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 802e6e8:	687b      	ldr	r3, [r7, #4]
 802e6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	32b0      	adds	r2, #176	; 0xb0
 802e6f2:	68f9      	ldr	r1, [r7, #12]
 802e6f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 802e6f8:	687b      	ldr	r3, [r7, #4]
 802e6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6fe:	687b      	ldr	r3, [r7, #4]
 802e700:	32b0      	adds	r2, #176	; 0xb0
 802e702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e706:	687b      	ldr	r3, [r7, #4]
 802e708:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e70c:	687b      	ldr	r3, [r7, #4]
 802e70e:	7c1b      	ldrb	r3, [r3, #16]
 802e710:	2b00      	cmp	r3, #0
 802e712:	d138      	bne.n	802e786 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e714:	4b5e      	ldr	r3, [pc, #376]	; (802e890 <USBD_CDC_Init+0x1e4>)
 802e716:	7819      	ldrb	r1, [r3, #0]
 802e718:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e71c:	2202      	movs	r2, #2
 802e71e:	6878      	ldr	r0, [r7, #4]
 802e720:	f002 fd9f 	bl	8031262 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e724:	4b5a      	ldr	r3, [pc, #360]	; (802e890 <USBD_CDC_Init+0x1e4>)
 802e726:	781b      	ldrb	r3, [r3, #0]
 802e728:	f003 020f 	and.w	r2, r3, #15
 802e72c:	6879      	ldr	r1, [r7, #4]
 802e72e:	4613      	mov	r3, r2
 802e730:	009b      	lsls	r3, r3, #2
 802e732:	4413      	add	r3, r2
 802e734:	009b      	lsls	r3, r3, #2
 802e736:	440b      	add	r3, r1
 802e738:	3324      	adds	r3, #36	; 0x24
 802e73a:	2201      	movs	r2, #1
 802e73c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e73e:	4b55      	ldr	r3, [pc, #340]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e740:	7819      	ldrb	r1, [r3, #0]
 802e742:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e746:	2202      	movs	r2, #2
 802e748:	6878      	ldr	r0, [r7, #4]
 802e74a:	f002 fd8a 	bl	8031262 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e74e:	4b51      	ldr	r3, [pc, #324]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e750:	781b      	ldrb	r3, [r3, #0]
 802e752:	f003 020f 	and.w	r2, r3, #15
 802e756:	6879      	ldr	r1, [r7, #4]
 802e758:	4613      	mov	r3, r2
 802e75a:	009b      	lsls	r3, r3, #2
 802e75c:	4413      	add	r3, r2
 802e75e:	009b      	lsls	r3, r3, #2
 802e760:	440b      	add	r3, r1
 802e762:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e766:	2201      	movs	r2, #1
 802e768:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802e76a:	4b4b      	ldr	r3, [pc, #300]	; (802e898 <USBD_CDC_Init+0x1ec>)
 802e76c:	781b      	ldrb	r3, [r3, #0]
 802e76e:	f003 020f 	and.w	r2, r3, #15
 802e772:	6879      	ldr	r1, [r7, #4]
 802e774:	4613      	mov	r3, r2
 802e776:	009b      	lsls	r3, r3, #2
 802e778:	4413      	add	r3, r2
 802e77a:	009b      	lsls	r3, r3, #2
 802e77c:	440b      	add	r3, r1
 802e77e:	3326      	adds	r3, #38	; 0x26
 802e780:	2210      	movs	r2, #16
 802e782:	801a      	strh	r2, [r3, #0]
 802e784:	e035      	b.n	802e7f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e786:	4b42      	ldr	r3, [pc, #264]	; (802e890 <USBD_CDC_Init+0x1e4>)
 802e788:	7819      	ldrb	r1, [r3, #0]
 802e78a:	2340      	movs	r3, #64	; 0x40
 802e78c:	2202      	movs	r2, #2
 802e78e:	6878      	ldr	r0, [r7, #4]
 802e790:	f002 fd67 	bl	8031262 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e794:	4b3e      	ldr	r3, [pc, #248]	; (802e890 <USBD_CDC_Init+0x1e4>)
 802e796:	781b      	ldrb	r3, [r3, #0]
 802e798:	f003 020f 	and.w	r2, r3, #15
 802e79c:	6879      	ldr	r1, [r7, #4]
 802e79e:	4613      	mov	r3, r2
 802e7a0:	009b      	lsls	r3, r3, #2
 802e7a2:	4413      	add	r3, r2
 802e7a4:	009b      	lsls	r3, r3, #2
 802e7a6:	440b      	add	r3, r1
 802e7a8:	3324      	adds	r3, #36	; 0x24
 802e7aa:	2201      	movs	r2, #1
 802e7ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e7ae:	4b39      	ldr	r3, [pc, #228]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e7b0:	7819      	ldrb	r1, [r3, #0]
 802e7b2:	2340      	movs	r3, #64	; 0x40
 802e7b4:	2202      	movs	r2, #2
 802e7b6:	6878      	ldr	r0, [r7, #4]
 802e7b8:	f002 fd53 	bl	8031262 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e7bc:	4b35      	ldr	r3, [pc, #212]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e7be:	781b      	ldrb	r3, [r3, #0]
 802e7c0:	f003 020f 	and.w	r2, r3, #15
 802e7c4:	6879      	ldr	r1, [r7, #4]
 802e7c6:	4613      	mov	r3, r2
 802e7c8:	009b      	lsls	r3, r3, #2
 802e7ca:	4413      	add	r3, r2
 802e7cc:	009b      	lsls	r3, r3, #2
 802e7ce:	440b      	add	r3, r1
 802e7d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e7d4:	2201      	movs	r2, #1
 802e7d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802e7d8:	4b2f      	ldr	r3, [pc, #188]	; (802e898 <USBD_CDC_Init+0x1ec>)
 802e7da:	781b      	ldrb	r3, [r3, #0]
 802e7dc:	f003 020f 	and.w	r2, r3, #15
 802e7e0:	6879      	ldr	r1, [r7, #4]
 802e7e2:	4613      	mov	r3, r2
 802e7e4:	009b      	lsls	r3, r3, #2
 802e7e6:	4413      	add	r3, r2
 802e7e8:	009b      	lsls	r3, r3, #2
 802e7ea:	440b      	add	r3, r1
 802e7ec:	3326      	adds	r3, #38	; 0x26
 802e7ee:	2210      	movs	r2, #16
 802e7f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802e7f2:	4b29      	ldr	r3, [pc, #164]	; (802e898 <USBD_CDC_Init+0x1ec>)
 802e7f4:	7819      	ldrb	r1, [r3, #0]
 802e7f6:	2308      	movs	r3, #8
 802e7f8:	2203      	movs	r2, #3
 802e7fa:	6878      	ldr	r0, [r7, #4]
 802e7fc:	f002 fd31 	bl	8031262 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 802e800:	4b25      	ldr	r3, [pc, #148]	; (802e898 <USBD_CDC_Init+0x1ec>)
 802e802:	781b      	ldrb	r3, [r3, #0]
 802e804:	f003 020f 	and.w	r2, r3, #15
 802e808:	6879      	ldr	r1, [r7, #4]
 802e80a:	4613      	mov	r3, r2
 802e80c:	009b      	lsls	r3, r3, #2
 802e80e:	4413      	add	r3, r2
 802e810:	009b      	lsls	r3, r3, #2
 802e812:	440b      	add	r3, r1
 802e814:	3324      	adds	r3, #36	; 0x24
 802e816:	2201      	movs	r2, #1
 802e818:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 802e81a:	68fb      	ldr	r3, [r7, #12]
 802e81c:	2200      	movs	r2, #0
 802e81e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 802e822:	687b      	ldr	r3, [r7, #4]
 802e824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e828:	687a      	ldr	r2, [r7, #4]
 802e82a:	33b0      	adds	r3, #176	; 0xb0
 802e82c:	009b      	lsls	r3, r3, #2
 802e82e:	4413      	add	r3, r2
 802e830:	685b      	ldr	r3, [r3, #4]
 802e832:	681b      	ldr	r3, [r3, #0]
 802e834:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802e836:	68fb      	ldr	r3, [r7, #12]
 802e838:	2200      	movs	r2, #0
 802e83a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 802e83e:	68fb      	ldr	r3, [r7, #12]
 802e840:	2200      	movs	r2, #0
 802e842:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 802e846:	68fb      	ldr	r3, [r7, #12]
 802e848:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 802e84c:	2b00      	cmp	r3, #0
 802e84e:	d101      	bne.n	802e854 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 802e850:	2302      	movs	r3, #2
 802e852:	e018      	b.n	802e886 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	7c1b      	ldrb	r3, [r3, #16]
 802e858:	2b00      	cmp	r3, #0
 802e85a:	d10a      	bne.n	802e872 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e85c:	4b0d      	ldr	r3, [pc, #52]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e85e:	7819      	ldrb	r1, [r3, #0]
 802e860:	68fb      	ldr	r3, [r7, #12]
 802e862:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e866:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e86a:	6878      	ldr	r0, [r7, #4]
 802e86c:	f002 fde8 	bl	8031440 <USBD_LL_PrepareReceive>
 802e870:	e008      	b.n	802e884 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e872:	4b08      	ldr	r3, [pc, #32]	; (802e894 <USBD_CDC_Init+0x1e8>)
 802e874:	7819      	ldrb	r1, [r3, #0]
 802e876:	68fb      	ldr	r3, [r7, #12]
 802e878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e87c:	2340      	movs	r3, #64	; 0x40
 802e87e:	6878      	ldr	r0, [r7, #4]
 802e880:	f002 fdde 	bl	8031440 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802e884:	2300      	movs	r3, #0
}
 802e886:	4618      	mov	r0, r3
 802e888:	3710      	adds	r7, #16
 802e88a:	46bd      	mov	sp, r7
 802e88c:	bd80      	pop	{r7, pc}
 802e88e:	bf00      	nop
 802e890:	200001cb 	.word	0x200001cb
 802e894:	200001cc 	.word	0x200001cc
 802e898:	200001cd 	.word	0x200001cd

0802e89c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e89c:	b580      	push	{r7, lr}
 802e89e:	b082      	sub	sp, #8
 802e8a0:	af00      	add	r7, sp, #0
 802e8a2:	6078      	str	r0, [r7, #4]
 802e8a4:	460b      	mov	r3, r1
 802e8a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802e8a8:	4b3a      	ldr	r3, [pc, #232]	; (802e994 <USBD_CDC_DeInit+0xf8>)
 802e8aa:	781b      	ldrb	r3, [r3, #0]
 802e8ac:	4619      	mov	r1, r3
 802e8ae:	6878      	ldr	r0, [r7, #4]
 802e8b0:	f002 fcfd 	bl	80312ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802e8b4:	4b37      	ldr	r3, [pc, #220]	; (802e994 <USBD_CDC_DeInit+0xf8>)
 802e8b6:	781b      	ldrb	r3, [r3, #0]
 802e8b8:	f003 020f 	and.w	r2, r3, #15
 802e8bc:	6879      	ldr	r1, [r7, #4]
 802e8be:	4613      	mov	r3, r2
 802e8c0:	009b      	lsls	r3, r3, #2
 802e8c2:	4413      	add	r3, r2
 802e8c4:	009b      	lsls	r3, r3, #2
 802e8c6:	440b      	add	r3, r1
 802e8c8:	3324      	adds	r3, #36	; 0x24
 802e8ca:	2200      	movs	r2, #0
 802e8cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 802e8ce:	4b32      	ldr	r3, [pc, #200]	; (802e998 <USBD_CDC_DeInit+0xfc>)
 802e8d0:	781b      	ldrb	r3, [r3, #0]
 802e8d2:	4619      	mov	r1, r3
 802e8d4:	6878      	ldr	r0, [r7, #4]
 802e8d6:	f002 fcea 	bl	80312ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802e8da:	4b2f      	ldr	r3, [pc, #188]	; (802e998 <USBD_CDC_DeInit+0xfc>)
 802e8dc:	781b      	ldrb	r3, [r3, #0]
 802e8de:	f003 020f 	and.w	r2, r3, #15
 802e8e2:	6879      	ldr	r1, [r7, #4]
 802e8e4:	4613      	mov	r3, r2
 802e8e6:	009b      	lsls	r3, r3, #2
 802e8e8:	4413      	add	r3, r2
 802e8ea:	009b      	lsls	r3, r3, #2
 802e8ec:	440b      	add	r3, r1
 802e8ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e8f2:	2200      	movs	r2, #0
 802e8f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802e8f6:	4b29      	ldr	r3, [pc, #164]	; (802e99c <USBD_CDC_DeInit+0x100>)
 802e8f8:	781b      	ldrb	r3, [r3, #0]
 802e8fa:	4619      	mov	r1, r3
 802e8fc:	6878      	ldr	r0, [r7, #4]
 802e8fe:	f002 fcd6 	bl	80312ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 802e902:	4b26      	ldr	r3, [pc, #152]	; (802e99c <USBD_CDC_DeInit+0x100>)
 802e904:	781b      	ldrb	r3, [r3, #0]
 802e906:	f003 020f 	and.w	r2, r3, #15
 802e90a:	6879      	ldr	r1, [r7, #4]
 802e90c:	4613      	mov	r3, r2
 802e90e:	009b      	lsls	r3, r3, #2
 802e910:	4413      	add	r3, r2
 802e912:	009b      	lsls	r3, r3, #2
 802e914:	440b      	add	r3, r1
 802e916:	3324      	adds	r3, #36	; 0x24
 802e918:	2200      	movs	r2, #0
 802e91a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 802e91c:	4b1f      	ldr	r3, [pc, #124]	; (802e99c <USBD_CDC_DeInit+0x100>)
 802e91e:	781b      	ldrb	r3, [r3, #0]
 802e920:	f003 020f 	and.w	r2, r3, #15
 802e924:	6879      	ldr	r1, [r7, #4]
 802e926:	4613      	mov	r3, r2
 802e928:	009b      	lsls	r3, r3, #2
 802e92a:	4413      	add	r3, r2
 802e92c:	009b      	lsls	r3, r3, #2
 802e92e:	440b      	add	r3, r1
 802e930:	3326      	adds	r3, #38	; 0x26
 802e932:	2200      	movs	r2, #0
 802e934:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 802e936:	687b      	ldr	r3, [r7, #4]
 802e938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e93c:	687b      	ldr	r3, [r7, #4]
 802e93e:	32b0      	adds	r2, #176	; 0xb0
 802e940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e944:	2b00      	cmp	r3, #0
 802e946:	d01f      	beq.n	802e988 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 802e948:	687b      	ldr	r3, [r7, #4]
 802e94a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e94e:	687a      	ldr	r2, [r7, #4]
 802e950:	33b0      	adds	r3, #176	; 0xb0
 802e952:	009b      	lsls	r3, r3, #2
 802e954:	4413      	add	r3, r2
 802e956:	685b      	ldr	r3, [r3, #4]
 802e958:	685b      	ldr	r3, [r3, #4]
 802e95a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 802e95c:	687b      	ldr	r3, [r7, #4]
 802e95e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e962:	687b      	ldr	r3, [r7, #4]
 802e964:	32b0      	adds	r2, #176	; 0xb0
 802e966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e96a:	4618      	mov	r0, r3
 802e96c:	f002 fdaa 	bl	80314c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e970:	687b      	ldr	r3, [r7, #4]
 802e972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e976:	687b      	ldr	r3, [r7, #4]
 802e978:	32b0      	adds	r2, #176	; 0xb0
 802e97a:	2100      	movs	r1, #0
 802e97c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 802e980:	687b      	ldr	r3, [r7, #4]
 802e982:	2200      	movs	r2, #0
 802e984:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802e988:	2300      	movs	r3, #0
}
 802e98a:	4618      	mov	r0, r3
 802e98c:	3708      	adds	r7, #8
 802e98e:	46bd      	mov	sp, r7
 802e990:	bd80      	pop	{r7, pc}
 802e992:	bf00      	nop
 802e994:	200001cb 	.word	0x200001cb
 802e998:	200001cc 	.word	0x200001cc
 802e99c:	200001cd 	.word	0x200001cd

0802e9a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802e9a0:	b580      	push	{r7, lr}
 802e9a2:	b086      	sub	sp, #24
 802e9a4:	af00      	add	r7, sp, #0
 802e9a6:	6078      	str	r0, [r7, #4]
 802e9a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e9aa:	687b      	ldr	r3, [r7, #4]
 802e9ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e9b0:	687b      	ldr	r3, [r7, #4]
 802e9b2:	32b0      	adds	r2, #176	; 0xb0
 802e9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e9b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802e9ba:	2300      	movs	r3, #0
 802e9bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802e9be:	2300      	movs	r3, #0
 802e9c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 802e9c2:	2300      	movs	r3, #0
 802e9c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802e9c6:	693b      	ldr	r3, [r7, #16]
 802e9c8:	2b00      	cmp	r3, #0
 802e9ca:	d101      	bne.n	802e9d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 802e9cc:	2303      	movs	r3, #3
 802e9ce:	e0bf      	b.n	802eb50 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802e9d0:	683b      	ldr	r3, [r7, #0]
 802e9d2:	781b      	ldrb	r3, [r3, #0]
 802e9d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802e9d8:	2b00      	cmp	r3, #0
 802e9da:	d050      	beq.n	802ea7e <USBD_CDC_Setup+0xde>
 802e9dc:	2b20      	cmp	r3, #32
 802e9de:	f040 80af 	bne.w	802eb40 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802e9e2:	683b      	ldr	r3, [r7, #0]
 802e9e4:	88db      	ldrh	r3, [r3, #6]
 802e9e6:	2b00      	cmp	r3, #0
 802e9e8:	d03a      	beq.n	802ea60 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802e9ea:	683b      	ldr	r3, [r7, #0]
 802e9ec:	781b      	ldrb	r3, [r3, #0]
 802e9ee:	b25b      	sxtb	r3, r3
 802e9f0:	2b00      	cmp	r3, #0
 802e9f2:	da1b      	bge.n	802ea2c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e9f4:	687b      	ldr	r3, [r7, #4]
 802e9f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e9fa:	687a      	ldr	r2, [r7, #4]
 802e9fc:	33b0      	adds	r3, #176	; 0xb0
 802e9fe:	009b      	lsls	r3, r3, #2
 802ea00:	4413      	add	r3, r2
 802ea02:	685b      	ldr	r3, [r3, #4]
 802ea04:	689b      	ldr	r3, [r3, #8]
 802ea06:	683a      	ldr	r2, [r7, #0]
 802ea08:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802ea0a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802ea0c:	683a      	ldr	r2, [r7, #0]
 802ea0e:	88d2      	ldrh	r2, [r2, #6]
 802ea10:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 802ea12:	683b      	ldr	r3, [r7, #0]
 802ea14:	88db      	ldrh	r3, [r3, #6]
 802ea16:	2b07      	cmp	r3, #7
 802ea18:	bf28      	it	cs
 802ea1a:	2307      	movcs	r3, #7
 802ea1c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 802ea1e:	693b      	ldr	r3, [r7, #16]
 802ea20:	89fa      	ldrh	r2, [r7, #14]
 802ea22:	4619      	mov	r1, r3
 802ea24:	6878      	ldr	r0, [r7, #4]
 802ea26:	f001 fd89 	bl	803053c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 802ea2a:	e090      	b.n	802eb4e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 802ea2c:	683b      	ldr	r3, [r7, #0]
 802ea2e:	785a      	ldrb	r2, [r3, #1]
 802ea30:	693b      	ldr	r3, [r7, #16]
 802ea32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 802ea36:	683b      	ldr	r3, [r7, #0]
 802ea38:	88db      	ldrh	r3, [r3, #6]
 802ea3a:	2b3f      	cmp	r3, #63	; 0x3f
 802ea3c:	d803      	bhi.n	802ea46 <USBD_CDC_Setup+0xa6>
 802ea3e:	683b      	ldr	r3, [r7, #0]
 802ea40:	88db      	ldrh	r3, [r3, #6]
 802ea42:	b2da      	uxtb	r2, r3
 802ea44:	e000      	b.n	802ea48 <USBD_CDC_Setup+0xa8>
 802ea46:	2240      	movs	r2, #64	; 0x40
 802ea48:	693b      	ldr	r3, [r7, #16]
 802ea4a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 802ea4e:	6939      	ldr	r1, [r7, #16]
 802ea50:	693b      	ldr	r3, [r7, #16]
 802ea52:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 802ea56:	461a      	mov	r2, r3
 802ea58:	6878      	ldr	r0, [r7, #4]
 802ea5a:	f001 fd9b 	bl	8030594 <USBD_CtlPrepareRx>
      break;
 802ea5e:	e076      	b.n	802eb4e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802ea60:	687b      	ldr	r3, [r7, #4]
 802ea62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ea66:	687a      	ldr	r2, [r7, #4]
 802ea68:	33b0      	adds	r3, #176	; 0xb0
 802ea6a:	009b      	lsls	r3, r3, #2
 802ea6c:	4413      	add	r3, r2
 802ea6e:	685b      	ldr	r3, [r3, #4]
 802ea70:	689b      	ldr	r3, [r3, #8]
 802ea72:	683a      	ldr	r2, [r7, #0]
 802ea74:	7850      	ldrb	r0, [r2, #1]
 802ea76:	2200      	movs	r2, #0
 802ea78:	6839      	ldr	r1, [r7, #0]
 802ea7a:	4798      	blx	r3
      break;
 802ea7c:	e067      	b.n	802eb4e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802ea7e:	683b      	ldr	r3, [r7, #0]
 802ea80:	785b      	ldrb	r3, [r3, #1]
 802ea82:	2b0b      	cmp	r3, #11
 802ea84:	d851      	bhi.n	802eb2a <USBD_CDC_Setup+0x18a>
 802ea86:	a201      	add	r2, pc, #4	; (adr r2, 802ea8c <USBD_CDC_Setup+0xec>)
 802ea88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ea8c:	0802eabd 	.word	0x0802eabd
 802ea90:	0802eb39 	.word	0x0802eb39
 802ea94:	0802eb2b 	.word	0x0802eb2b
 802ea98:	0802eb2b 	.word	0x0802eb2b
 802ea9c:	0802eb2b 	.word	0x0802eb2b
 802eaa0:	0802eb2b 	.word	0x0802eb2b
 802eaa4:	0802eb2b 	.word	0x0802eb2b
 802eaa8:	0802eb2b 	.word	0x0802eb2b
 802eaac:	0802eb2b 	.word	0x0802eb2b
 802eab0:	0802eb2b 	.word	0x0802eb2b
 802eab4:	0802eae7 	.word	0x0802eae7
 802eab8:	0802eb11 	.word	0x0802eb11
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eabc:	687b      	ldr	r3, [r7, #4]
 802eabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eac2:	b2db      	uxtb	r3, r3
 802eac4:	2b03      	cmp	r3, #3
 802eac6:	d107      	bne.n	802ead8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802eac8:	f107 030a 	add.w	r3, r7, #10
 802eacc:	2202      	movs	r2, #2
 802eace:	4619      	mov	r1, r3
 802ead0:	6878      	ldr	r0, [r7, #4]
 802ead2:	f001 fd33 	bl	803053c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802ead6:	e032      	b.n	802eb3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802ead8:	6839      	ldr	r1, [r7, #0]
 802eada:	6878      	ldr	r0, [r7, #4]
 802eadc:	f001 fcbd 	bl	803045a <USBD_CtlError>
            ret = USBD_FAIL;
 802eae0:	2303      	movs	r3, #3
 802eae2:	75fb      	strb	r3, [r7, #23]
          break;
 802eae4:	e02b      	b.n	802eb3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eae6:	687b      	ldr	r3, [r7, #4]
 802eae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eaec:	b2db      	uxtb	r3, r3
 802eaee:	2b03      	cmp	r3, #3
 802eaf0:	d107      	bne.n	802eb02 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802eaf2:	f107 030d 	add.w	r3, r7, #13
 802eaf6:	2201      	movs	r2, #1
 802eaf8:	4619      	mov	r1, r3
 802eafa:	6878      	ldr	r0, [r7, #4]
 802eafc:	f001 fd1e 	bl	803053c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802eb00:	e01d      	b.n	802eb3e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802eb02:	6839      	ldr	r1, [r7, #0]
 802eb04:	6878      	ldr	r0, [r7, #4]
 802eb06:	f001 fca8 	bl	803045a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb0a:	2303      	movs	r3, #3
 802eb0c:	75fb      	strb	r3, [r7, #23]
          break;
 802eb0e:	e016      	b.n	802eb3e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802eb10:	687b      	ldr	r3, [r7, #4]
 802eb12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eb16:	b2db      	uxtb	r3, r3
 802eb18:	2b03      	cmp	r3, #3
 802eb1a:	d00f      	beq.n	802eb3c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 802eb1c:	6839      	ldr	r1, [r7, #0]
 802eb1e:	6878      	ldr	r0, [r7, #4]
 802eb20:	f001 fc9b 	bl	803045a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb24:	2303      	movs	r3, #3
 802eb26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 802eb28:	e008      	b.n	802eb3c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802eb2a:	6839      	ldr	r1, [r7, #0]
 802eb2c:	6878      	ldr	r0, [r7, #4]
 802eb2e:	f001 fc94 	bl	803045a <USBD_CtlError>
          ret = USBD_FAIL;
 802eb32:	2303      	movs	r3, #3
 802eb34:	75fb      	strb	r3, [r7, #23]
          break;
 802eb36:	e002      	b.n	802eb3e <USBD_CDC_Setup+0x19e>
          break;
 802eb38:	bf00      	nop
 802eb3a:	e008      	b.n	802eb4e <USBD_CDC_Setup+0x1ae>
          break;
 802eb3c:	bf00      	nop
      }
      break;
 802eb3e:	e006      	b.n	802eb4e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 802eb40:	6839      	ldr	r1, [r7, #0]
 802eb42:	6878      	ldr	r0, [r7, #4]
 802eb44:	f001 fc89 	bl	803045a <USBD_CtlError>
      ret = USBD_FAIL;
 802eb48:	2303      	movs	r3, #3
 802eb4a:	75fb      	strb	r3, [r7, #23]
      break;
 802eb4c:	bf00      	nop
  }

  return (uint8_t)ret;
 802eb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 802eb50:	4618      	mov	r0, r3
 802eb52:	3718      	adds	r7, #24
 802eb54:	46bd      	mov	sp, r7
 802eb56:	bd80      	pop	{r7, pc}

0802eb58 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802eb58:	b580      	push	{r7, lr}
 802eb5a:	b084      	sub	sp, #16
 802eb5c:	af00      	add	r7, sp, #0
 802eb5e:	6078      	str	r0, [r7, #4]
 802eb60:	460b      	mov	r3, r1
 802eb62:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 802eb64:	687b      	ldr	r3, [r7, #4]
 802eb66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802eb6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eb72:	687b      	ldr	r3, [r7, #4]
 802eb74:	32b0      	adds	r2, #176	; 0xb0
 802eb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eb7a:	2b00      	cmp	r3, #0
 802eb7c:	d101      	bne.n	802eb82 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 802eb7e:	2303      	movs	r3, #3
 802eb80:	e065      	b.n	802ec4e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802eb82:	687b      	ldr	r3, [r7, #4]
 802eb84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eb88:	687b      	ldr	r3, [r7, #4]
 802eb8a:	32b0      	adds	r2, #176	; 0xb0
 802eb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eb90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802eb92:	78fb      	ldrb	r3, [r7, #3]
 802eb94:	f003 020f 	and.w	r2, r3, #15
 802eb98:	6879      	ldr	r1, [r7, #4]
 802eb9a:	4613      	mov	r3, r2
 802eb9c:	009b      	lsls	r3, r3, #2
 802eb9e:	4413      	add	r3, r2
 802eba0:	009b      	lsls	r3, r3, #2
 802eba2:	440b      	add	r3, r1
 802eba4:	3318      	adds	r3, #24
 802eba6:	681b      	ldr	r3, [r3, #0]
 802eba8:	2b00      	cmp	r3, #0
 802ebaa:	d02f      	beq.n	802ec0c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 802ebac:	78fb      	ldrb	r3, [r7, #3]
 802ebae:	f003 020f 	and.w	r2, r3, #15
 802ebb2:	6879      	ldr	r1, [r7, #4]
 802ebb4:	4613      	mov	r3, r2
 802ebb6:	009b      	lsls	r3, r3, #2
 802ebb8:	4413      	add	r3, r2
 802ebba:	009b      	lsls	r3, r3, #2
 802ebbc:	440b      	add	r3, r1
 802ebbe:	3318      	adds	r3, #24
 802ebc0:	681a      	ldr	r2, [r3, #0]
 802ebc2:	78fb      	ldrb	r3, [r7, #3]
 802ebc4:	f003 010f 	and.w	r1, r3, #15
 802ebc8:	68f8      	ldr	r0, [r7, #12]
 802ebca:	460b      	mov	r3, r1
 802ebcc:	00db      	lsls	r3, r3, #3
 802ebce:	440b      	add	r3, r1
 802ebd0:	009b      	lsls	r3, r3, #2
 802ebd2:	4403      	add	r3, r0
 802ebd4:	3348      	adds	r3, #72	; 0x48
 802ebd6:	681b      	ldr	r3, [r3, #0]
 802ebd8:	fbb2 f1f3 	udiv	r1, r2, r3
 802ebdc:	fb01 f303 	mul.w	r3, r1, r3
 802ebe0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802ebe2:	2b00      	cmp	r3, #0
 802ebe4:	d112      	bne.n	802ec0c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802ebe6:	78fb      	ldrb	r3, [r7, #3]
 802ebe8:	f003 020f 	and.w	r2, r3, #15
 802ebec:	6879      	ldr	r1, [r7, #4]
 802ebee:	4613      	mov	r3, r2
 802ebf0:	009b      	lsls	r3, r3, #2
 802ebf2:	4413      	add	r3, r2
 802ebf4:	009b      	lsls	r3, r3, #2
 802ebf6:	440b      	add	r3, r1
 802ebf8:	3318      	adds	r3, #24
 802ebfa:	2200      	movs	r2, #0
 802ebfc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802ebfe:	78f9      	ldrb	r1, [r7, #3]
 802ec00:	2300      	movs	r3, #0
 802ec02:	2200      	movs	r2, #0
 802ec04:	6878      	ldr	r0, [r7, #4]
 802ec06:	f002 fbfa 	bl	80313fe <USBD_LL_Transmit>
 802ec0a:	e01f      	b.n	802ec4c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 802ec0c:	68bb      	ldr	r3, [r7, #8]
 802ec0e:	2200      	movs	r2, #0
 802ec10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 802ec14:	687b      	ldr	r3, [r7, #4]
 802ec16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec1a:	687a      	ldr	r2, [r7, #4]
 802ec1c:	33b0      	adds	r3, #176	; 0xb0
 802ec1e:	009b      	lsls	r3, r3, #2
 802ec20:	4413      	add	r3, r2
 802ec22:	685b      	ldr	r3, [r3, #4]
 802ec24:	691b      	ldr	r3, [r3, #16]
 802ec26:	2b00      	cmp	r3, #0
 802ec28:	d010      	beq.n	802ec4c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802ec2a:	687b      	ldr	r3, [r7, #4]
 802ec2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec30:	687a      	ldr	r2, [r7, #4]
 802ec32:	33b0      	adds	r3, #176	; 0xb0
 802ec34:	009b      	lsls	r3, r3, #2
 802ec36:	4413      	add	r3, r2
 802ec38:	685b      	ldr	r3, [r3, #4]
 802ec3a:	691b      	ldr	r3, [r3, #16]
 802ec3c:	68ba      	ldr	r2, [r7, #8]
 802ec3e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 802ec42:	68ba      	ldr	r2, [r7, #8]
 802ec44:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802ec48:	78fa      	ldrb	r2, [r7, #3]
 802ec4a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 802ec4c:	2300      	movs	r3, #0
}
 802ec4e:	4618      	mov	r0, r3
 802ec50:	3710      	adds	r7, #16
 802ec52:	46bd      	mov	sp, r7
 802ec54:	bd80      	pop	{r7, pc}

0802ec56 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802ec56:	b580      	push	{r7, lr}
 802ec58:	b084      	sub	sp, #16
 802ec5a:	af00      	add	r7, sp, #0
 802ec5c:	6078      	str	r0, [r7, #4]
 802ec5e:	460b      	mov	r3, r1
 802ec60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ec62:	687b      	ldr	r3, [r7, #4]
 802ec64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	32b0      	adds	r2, #176	; 0xb0
 802ec6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ec70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ec72:	687b      	ldr	r3, [r7, #4]
 802ec74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ec78:	687b      	ldr	r3, [r7, #4]
 802ec7a:	32b0      	adds	r2, #176	; 0xb0
 802ec7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ec80:	2b00      	cmp	r3, #0
 802ec82:	d101      	bne.n	802ec88 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802ec84:	2303      	movs	r3, #3
 802ec86:	e01a      	b.n	802ecbe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802ec88:	78fb      	ldrb	r3, [r7, #3]
 802ec8a:	4619      	mov	r1, r3
 802ec8c:	6878      	ldr	r0, [r7, #4]
 802ec8e:	f002 fbf8 	bl	8031482 <USBD_LL_GetRxDataSize>
 802ec92:	4602      	mov	r2, r0
 802ec94:	68fb      	ldr	r3, [r7, #12]
 802ec96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802ec9a:	687b      	ldr	r3, [r7, #4]
 802ec9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802eca0:	687a      	ldr	r2, [r7, #4]
 802eca2:	33b0      	adds	r3, #176	; 0xb0
 802eca4:	009b      	lsls	r3, r3, #2
 802eca6:	4413      	add	r3, r2
 802eca8:	685b      	ldr	r3, [r3, #4]
 802ecaa:	68db      	ldr	r3, [r3, #12]
 802ecac:	68fa      	ldr	r2, [r7, #12]
 802ecae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 802ecb2:	68fa      	ldr	r2, [r7, #12]
 802ecb4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802ecb8:	4611      	mov	r1, r2
 802ecba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802ecbc:	2300      	movs	r3, #0
}
 802ecbe:	4618      	mov	r0, r3
 802ecc0:	3710      	adds	r7, #16
 802ecc2:	46bd      	mov	sp, r7
 802ecc4:	bd80      	pop	{r7, pc}

0802ecc6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802ecc6:	b580      	push	{r7, lr}
 802ecc8:	b084      	sub	sp, #16
 802ecca:	af00      	add	r7, sp, #0
 802eccc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ecce:	687b      	ldr	r3, [r7, #4]
 802ecd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ecd4:	687b      	ldr	r3, [r7, #4]
 802ecd6:	32b0      	adds	r2, #176	; 0xb0
 802ecd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ecdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ecde:	68fb      	ldr	r3, [r7, #12]
 802ece0:	2b00      	cmp	r3, #0
 802ece2:	d101      	bne.n	802ece8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802ece4:	2303      	movs	r3, #3
 802ece6:	e025      	b.n	802ed34 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ecee:	687a      	ldr	r2, [r7, #4]
 802ecf0:	33b0      	adds	r3, #176	; 0xb0
 802ecf2:	009b      	lsls	r3, r3, #2
 802ecf4:	4413      	add	r3, r2
 802ecf6:	685b      	ldr	r3, [r3, #4]
 802ecf8:	2b00      	cmp	r3, #0
 802ecfa:	d01a      	beq.n	802ed32 <USBD_CDC_EP0_RxReady+0x6c>
 802ecfc:	68fb      	ldr	r3, [r7, #12]
 802ecfe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 802ed02:	2bff      	cmp	r3, #255	; 0xff
 802ed04:	d015      	beq.n	802ed32 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ed06:	687b      	ldr	r3, [r7, #4]
 802ed08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ed0c:	687a      	ldr	r2, [r7, #4]
 802ed0e:	33b0      	adds	r3, #176	; 0xb0
 802ed10:	009b      	lsls	r3, r3, #2
 802ed12:	4413      	add	r3, r2
 802ed14:	685b      	ldr	r3, [r3, #4]
 802ed16:	689b      	ldr	r3, [r3, #8]
 802ed18:	68fa      	ldr	r2, [r7, #12]
 802ed1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 802ed1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 802ed20:	68fa      	ldr	r2, [r7, #12]
 802ed22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ed26:	b292      	uxth	r2, r2
 802ed28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802ed2a:	68fb      	ldr	r3, [r7, #12]
 802ed2c:	22ff      	movs	r2, #255	; 0xff
 802ed2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 802ed32:	2300      	movs	r3, #0
}
 802ed34:	4618      	mov	r0, r3
 802ed36:	3710      	adds	r7, #16
 802ed38:	46bd      	mov	sp, r7
 802ed3a:	bd80      	pop	{r7, pc}

0802ed3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802ed3c:	b580      	push	{r7, lr}
 802ed3e:	b086      	sub	sp, #24
 802ed40:	af00      	add	r7, sp, #0
 802ed42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ed44:	2182      	movs	r1, #130	; 0x82
 802ed46:	4818      	ldr	r0, [pc, #96]	; (802eda8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed48:	f000 fd4f 	bl	802f7ea <USBD_GetEpDesc>
 802ed4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ed4e:	2101      	movs	r1, #1
 802ed50:	4815      	ldr	r0, [pc, #84]	; (802eda8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed52:	f000 fd4a 	bl	802f7ea <USBD_GetEpDesc>
 802ed56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ed58:	2181      	movs	r1, #129	; 0x81
 802ed5a:	4813      	ldr	r0, [pc, #76]	; (802eda8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed5c:	f000 fd45 	bl	802f7ea <USBD_GetEpDesc>
 802ed60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ed62:	697b      	ldr	r3, [r7, #20]
 802ed64:	2b00      	cmp	r3, #0
 802ed66:	d002      	beq.n	802ed6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802ed68:	697b      	ldr	r3, [r7, #20]
 802ed6a:	2210      	movs	r2, #16
 802ed6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ed6e:	693b      	ldr	r3, [r7, #16]
 802ed70:	2b00      	cmp	r3, #0
 802ed72:	d006      	beq.n	802ed82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ed74:	693b      	ldr	r3, [r7, #16]
 802ed76:	2200      	movs	r2, #0
 802ed78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed7c:	711a      	strb	r2, [r3, #4]
 802ed7e:	2200      	movs	r2, #0
 802ed80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ed82:	68fb      	ldr	r3, [r7, #12]
 802ed84:	2b00      	cmp	r3, #0
 802ed86:	d006      	beq.n	802ed96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ed88:	68fb      	ldr	r3, [r7, #12]
 802ed8a:	2200      	movs	r2, #0
 802ed8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed90:	711a      	strb	r2, [r3, #4]
 802ed92:	2200      	movs	r2, #0
 802ed94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ed96:	687b      	ldr	r3, [r7, #4]
 802ed98:	2243      	movs	r2, #67	; 0x43
 802ed9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ed9c:	4b02      	ldr	r3, [pc, #8]	; (802eda8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 802ed9e:	4618      	mov	r0, r3
 802eda0:	3718      	adds	r7, #24
 802eda2:	46bd      	mov	sp, r7
 802eda4:	bd80      	pop	{r7, pc}
 802eda6:	bf00      	nop
 802eda8:	20000188 	.word	0x20000188

0802edac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802edac:	b580      	push	{r7, lr}
 802edae:	b086      	sub	sp, #24
 802edb0:	af00      	add	r7, sp, #0
 802edb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802edb4:	2182      	movs	r1, #130	; 0x82
 802edb6:	4818      	ldr	r0, [pc, #96]	; (802ee18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edb8:	f000 fd17 	bl	802f7ea <USBD_GetEpDesc>
 802edbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802edbe:	2101      	movs	r1, #1
 802edc0:	4815      	ldr	r0, [pc, #84]	; (802ee18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edc2:	f000 fd12 	bl	802f7ea <USBD_GetEpDesc>
 802edc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802edc8:	2181      	movs	r1, #129	; 0x81
 802edca:	4813      	ldr	r0, [pc, #76]	; (802ee18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edcc:	f000 fd0d 	bl	802f7ea <USBD_GetEpDesc>
 802edd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802edd2:	697b      	ldr	r3, [r7, #20]
 802edd4:	2b00      	cmp	r3, #0
 802edd6:	d002      	beq.n	802edde <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802edd8:	697b      	ldr	r3, [r7, #20]
 802edda:	2210      	movs	r2, #16
 802eddc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802edde:	693b      	ldr	r3, [r7, #16]
 802ede0:	2b00      	cmp	r3, #0
 802ede2:	d006      	beq.n	802edf2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802ede4:	693b      	ldr	r3, [r7, #16]
 802ede6:	2200      	movs	r2, #0
 802ede8:	711a      	strb	r2, [r3, #4]
 802edea:	2200      	movs	r2, #0
 802edec:	f042 0202 	orr.w	r2, r2, #2
 802edf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802edf2:	68fb      	ldr	r3, [r7, #12]
 802edf4:	2b00      	cmp	r3, #0
 802edf6:	d006      	beq.n	802ee06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802edf8:	68fb      	ldr	r3, [r7, #12]
 802edfa:	2200      	movs	r2, #0
 802edfc:	711a      	strb	r2, [r3, #4]
 802edfe:	2200      	movs	r2, #0
 802ee00:	f042 0202 	orr.w	r2, r2, #2
 802ee04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ee06:	687b      	ldr	r3, [r7, #4]
 802ee08:	2243      	movs	r2, #67	; 0x43
 802ee0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ee0c:	4b02      	ldr	r3, [pc, #8]	; (802ee18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 802ee0e:	4618      	mov	r0, r3
 802ee10:	3718      	adds	r7, #24
 802ee12:	46bd      	mov	sp, r7
 802ee14:	bd80      	pop	{r7, pc}
 802ee16:	bf00      	nop
 802ee18:	20000188 	.word	0x20000188

0802ee1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802ee1c:	b580      	push	{r7, lr}
 802ee1e:	b086      	sub	sp, #24
 802ee20:	af00      	add	r7, sp, #0
 802ee22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ee24:	2182      	movs	r1, #130	; 0x82
 802ee26:	4818      	ldr	r0, [pc, #96]	; (802ee88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee28:	f000 fcdf 	bl	802f7ea <USBD_GetEpDesc>
 802ee2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ee2e:	2101      	movs	r1, #1
 802ee30:	4815      	ldr	r0, [pc, #84]	; (802ee88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee32:	f000 fcda 	bl	802f7ea <USBD_GetEpDesc>
 802ee36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ee38:	2181      	movs	r1, #129	; 0x81
 802ee3a:	4813      	ldr	r0, [pc, #76]	; (802ee88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee3c:	f000 fcd5 	bl	802f7ea <USBD_GetEpDesc>
 802ee40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ee42:	697b      	ldr	r3, [r7, #20]
 802ee44:	2b00      	cmp	r3, #0
 802ee46:	d002      	beq.n	802ee4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802ee48:	697b      	ldr	r3, [r7, #20]
 802ee4a:	2210      	movs	r2, #16
 802ee4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ee4e:	693b      	ldr	r3, [r7, #16]
 802ee50:	2b00      	cmp	r3, #0
 802ee52:	d006      	beq.n	802ee62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ee54:	693b      	ldr	r3, [r7, #16]
 802ee56:	2200      	movs	r2, #0
 802ee58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee5c:	711a      	strb	r2, [r3, #4]
 802ee5e:	2200      	movs	r2, #0
 802ee60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ee62:	68fb      	ldr	r3, [r7, #12]
 802ee64:	2b00      	cmp	r3, #0
 802ee66:	d006      	beq.n	802ee76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ee68:	68fb      	ldr	r3, [r7, #12]
 802ee6a:	2200      	movs	r2, #0
 802ee6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee70:	711a      	strb	r2, [r3, #4]
 802ee72:	2200      	movs	r2, #0
 802ee74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ee76:	687b      	ldr	r3, [r7, #4]
 802ee78:	2243      	movs	r2, #67	; 0x43
 802ee7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ee7c:	4b02      	ldr	r3, [pc, #8]	; (802ee88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 802ee7e:	4618      	mov	r0, r3
 802ee80:	3718      	adds	r7, #24
 802ee82:	46bd      	mov	sp, r7
 802ee84:	bd80      	pop	{r7, pc}
 802ee86:	bf00      	nop
 802ee88:	20000188 	.word	0x20000188

0802ee8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802ee8c:	b480      	push	{r7}
 802ee8e:	b083      	sub	sp, #12
 802ee90:	af00      	add	r7, sp, #0
 802ee92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802ee94:	687b      	ldr	r3, [r7, #4]
 802ee96:	220a      	movs	r2, #10
 802ee98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802ee9a:	4b03      	ldr	r3, [pc, #12]	; (802eea8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802ee9c:	4618      	mov	r0, r3
 802ee9e:	370c      	adds	r7, #12
 802eea0:	46bd      	mov	sp, r7
 802eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eea6:	4770      	bx	lr
 802eea8:	20000144 	.word	0x20000144

0802eeac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802eeac:	b480      	push	{r7}
 802eeae:	b083      	sub	sp, #12
 802eeb0:	af00      	add	r7, sp, #0
 802eeb2:	6078      	str	r0, [r7, #4]
 802eeb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802eeb6:	683b      	ldr	r3, [r7, #0]
 802eeb8:	2b00      	cmp	r3, #0
 802eeba:	d101      	bne.n	802eec0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802eebc:	2303      	movs	r3, #3
 802eebe:	e009      	b.n	802eed4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 802eec0:	687b      	ldr	r3, [r7, #4]
 802eec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802eec6:	687a      	ldr	r2, [r7, #4]
 802eec8:	33b0      	adds	r3, #176	; 0xb0
 802eeca:	009b      	lsls	r3, r3, #2
 802eecc:	4413      	add	r3, r2
 802eece:	683a      	ldr	r2, [r7, #0]
 802eed0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 802eed2:	2300      	movs	r3, #0
}
 802eed4:	4618      	mov	r0, r3
 802eed6:	370c      	adds	r7, #12
 802eed8:	46bd      	mov	sp, r7
 802eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eede:	4770      	bx	lr

0802eee0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802eee0:	b480      	push	{r7}
 802eee2:	b087      	sub	sp, #28
 802eee4:	af00      	add	r7, sp, #0
 802eee6:	60f8      	str	r0, [r7, #12]
 802eee8:	60b9      	str	r1, [r7, #8]
 802eeea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802eeec:	68fb      	ldr	r3, [r7, #12]
 802eeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eef2:	68fb      	ldr	r3, [r7, #12]
 802eef4:	32b0      	adds	r2, #176	; 0xb0
 802eef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eefa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 802eefc:	697b      	ldr	r3, [r7, #20]
 802eefe:	2b00      	cmp	r3, #0
 802ef00:	d101      	bne.n	802ef06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 802ef02:	2303      	movs	r3, #3
 802ef04:	e008      	b.n	802ef18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802ef06:	697b      	ldr	r3, [r7, #20]
 802ef08:	68ba      	ldr	r2, [r7, #8]
 802ef0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802ef0e:	697b      	ldr	r3, [r7, #20]
 802ef10:	687a      	ldr	r2, [r7, #4]
 802ef12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802ef16:	2300      	movs	r3, #0
}
 802ef18:	4618      	mov	r0, r3
 802ef1a:	371c      	adds	r7, #28
 802ef1c:	46bd      	mov	sp, r7
 802ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef22:	4770      	bx	lr

0802ef24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802ef24:	b480      	push	{r7}
 802ef26:	b085      	sub	sp, #20
 802ef28:	af00      	add	r7, sp, #0
 802ef2a:	6078      	str	r0, [r7, #4]
 802ef2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef2e:	687b      	ldr	r3, [r7, #4]
 802ef30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef34:	687b      	ldr	r3, [r7, #4]
 802ef36:	32b0      	adds	r2, #176	; 0xb0
 802ef38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ef3e:	68fb      	ldr	r3, [r7, #12]
 802ef40:	2b00      	cmp	r3, #0
 802ef42:	d101      	bne.n	802ef48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 802ef44:	2303      	movs	r3, #3
 802ef46:	e004      	b.n	802ef52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802ef48:	68fb      	ldr	r3, [r7, #12]
 802ef4a:	683a      	ldr	r2, [r7, #0]
 802ef4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 802ef50:	2300      	movs	r3, #0
}
 802ef52:	4618      	mov	r0, r3
 802ef54:	3714      	adds	r7, #20
 802ef56:	46bd      	mov	sp, r7
 802ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef5c:	4770      	bx	lr
	...

0802ef60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802ef60:	b580      	push	{r7, lr}
 802ef62:	b084      	sub	sp, #16
 802ef64:	af00      	add	r7, sp, #0
 802ef66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef68:	687b      	ldr	r3, [r7, #4]
 802ef6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef6e:	687b      	ldr	r3, [r7, #4]
 802ef70:	32b0      	adds	r2, #176	; 0xb0
 802ef72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802ef78:	2301      	movs	r3, #1
 802ef7a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef82:	687b      	ldr	r3, [r7, #4]
 802ef84:	32b0      	adds	r2, #176	; 0xb0
 802ef86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef8a:	2b00      	cmp	r3, #0
 802ef8c:	d101      	bne.n	802ef92 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802ef8e:	2303      	movs	r3, #3
 802ef90:	e025      	b.n	802efde <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 802ef92:	68bb      	ldr	r3, [r7, #8]
 802ef94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802ef98:	2b00      	cmp	r3, #0
 802ef9a:	d11f      	bne.n	802efdc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 802ef9c:	68bb      	ldr	r3, [r7, #8]
 802ef9e:	2201      	movs	r2, #1
 802efa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802efa4:	4b10      	ldr	r3, [pc, #64]	; (802efe8 <USBD_CDC_TransmitPacket+0x88>)
 802efa6:	781b      	ldrb	r3, [r3, #0]
 802efa8:	f003 020f 	and.w	r2, r3, #15
 802efac:	68bb      	ldr	r3, [r7, #8]
 802efae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 802efb2:	6878      	ldr	r0, [r7, #4]
 802efb4:	4613      	mov	r3, r2
 802efb6:	009b      	lsls	r3, r3, #2
 802efb8:	4413      	add	r3, r2
 802efba:	009b      	lsls	r3, r3, #2
 802efbc:	4403      	add	r3, r0
 802efbe:	3318      	adds	r3, #24
 802efc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802efc2:	4b09      	ldr	r3, [pc, #36]	; (802efe8 <USBD_CDC_TransmitPacket+0x88>)
 802efc4:	7819      	ldrb	r1, [r3, #0]
 802efc6:	68bb      	ldr	r3, [r7, #8]
 802efc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802efcc:	68bb      	ldr	r3, [r7, #8]
 802efce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 802efd2:	6878      	ldr	r0, [r7, #4]
 802efd4:	f002 fa13 	bl	80313fe <USBD_LL_Transmit>

    ret = USBD_OK;
 802efd8:	2300      	movs	r3, #0
 802efda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 802efdc:	7bfb      	ldrb	r3, [r7, #15]
}
 802efde:	4618      	mov	r0, r3
 802efe0:	3710      	adds	r7, #16
 802efe2:	46bd      	mov	sp, r7
 802efe4:	bd80      	pop	{r7, pc}
 802efe6:	bf00      	nop
 802efe8:	200001cb 	.word	0x200001cb

0802efec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802efec:	b580      	push	{r7, lr}
 802efee:	b084      	sub	sp, #16
 802eff0:	af00      	add	r7, sp, #0
 802eff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802eff4:	687b      	ldr	r3, [r7, #4]
 802eff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802effa:	687b      	ldr	r3, [r7, #4]
 802effc:	32b0      	adds	r2, #176	; 0xb0
 802effe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f002:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802f004:	687b      	ldr	r3, [r7, #4]
 802f006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f00a:	687b      	ldr	r3, [r7, #4]
 802f00c:	32b0      	adds	r2, #176	; 0xb0
 802f00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f012:	2b00      	cmp	r3, #0
 802f014:	d101      	bne.n	802f01a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802f016:	2303      	movs	r3, #3
 802f018:	e018      	b.n	802f04c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f01a:	687b      	ldr	r3, [r7, #4]
 802f01c:	7c1b      	ldrb	r3, [r3, #16]
 802f01e:	2b00      	cmp	r3, #0
 802f020:	d10a      	bne.n	802f038 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f022:	4b0c      	ldr	r3, [pc, #48]	; (802f054 <USBD_CDC_ReceivePacket+0x68>)
 802f024:	7819      	ldrb	r1, [r3, #0]
 802f026:	68fb      	ldr	r3, [r7, #12]
 802f028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f02c:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f030:	6878      	ldr	r0, [r7, #4]
 802f032:	f002 fa05 	bl	8031440 <USBD_LL_PrepareReceive>
 802f036:	e008      	b.n	802f04a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f038:	4b06      	ldr	r3, [pc, #24]	; (802f054 <USBD_CDC_ReceivePacket+0x68>)
 802f03a:	7819      	ldrb	r1, [r3, #0]
 802f03c:	68fb      	ldr	r3, [r7, #12]
 802f03e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f042:	2340      	movs	r3, #64	; 0x40
 802f044:	6878      	ldr	r0, [r7, #4]
 802f046:	f002 f9fb 	bl	8031440 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f04a:	2300      	movs	r3, #0
}
 802f04c:	4618      	mov	r0, r3
 802f04e:	3710      	adds	r7, #16
 802f050:	46bd      	mov	sp, r7
 802f052:	bd80      	pop	{r7, pc}
 802f054:	200001cc 	.word	0x200001cc

0802f058 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802f058:	b580      	push	{r7, lr}
 802f05a:	b086      	sub	sp, #24
 802f05c:	af00      	add	r7, sp, #0
 802f05e:	60f8      	str	r0, [r7, #12]
 802f060:	60b9      	str	r1, [r7, #8]
 802f062:	4613      	mov	r3, r2
 802f064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802f066:	68fb      	ldr	r3, [r7, #12]
 802f068:	2b00      	cmp	r3, #0
 802f06a:	d101      	bne.n	802f070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f06c:	2303      	movs	r3, #3
 802f06e:	e01f      	b.n	802f0b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802f070:	68fb      	ldr	r3, [r7, #12]
 802f072:	2200      	movs	r2, #0
 802f074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802f078:	68fb      	ldr	r3, [r7, #12]
 802f07a:	2200      	movs	r2, #0
 802f07c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802f080:	68fb      	ldr	r3, [r7, #12]
 802f082:	2200      	movs	r2, #0
 802f084:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802f088:	68bb      	ldr	r3, [r7, #8]
 802f08a:	2b00      	cmp	r3, #0
 802f08c:	d003      	beq.n	802f096 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802f08e:	68fb      	ldr	r3, [r7, #12]
 802f090:	68ba      	ldr	r2, [r7, #8]
 802f092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f096:	68fb      	ldr	r3, [r7, #12]
 802f098:	2201      	movs	r2, #1
 802f09a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802f09e:	68fb      	ldr	r3, [r7, #12]
 802f0a0:	79fa      	ldrb	r2, [r7, #7]
 802f0a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802f0a4:	68f8      	ldr	r0, [r7, #12]
 802f0a6:	f002 f82b 	bl	8031100 <USBD_LL_Init>
 802f0aa:	4603      	mov	r3, r0
 802f0ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 802f0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 802f0b0:	4618      	mov	r0, r3
 802f0b2:	3718      	adds	r7, #24
 802f0b4:	46bd      	mov	sp, r7
 802f0b6:	bd80      	pop	{r7, pc}

0802f0b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802f0b8:	b580      	push	{r7, lr}
 802f0ba:	b084      	sub	sp, #16
 802f0bc:	af00      	add	r7, sp, #0
 802f0be:	6078      	str	r0, [r7, #4]
 802f0c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f0c2:	2300      	movs	r3, #0
 802f0c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802f0c6:	683b      	ldr	r3, [r7, #0]
 802f0c8:	2b00      	cmp	r3, #0
 802f0ca:	d101      	bne.n	802f0d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f0cc:	2303      	movs	r3, #3
 802f0ce:	e025      	b.n	802f11c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802f0d0:	687b      	ldr	r3, [r7, #4]
 802f0d2:	683a      	ldr	r2, [r7, #0]
 802f0d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802f0d8:	687b      	ldr	r3, [r7, #4]
 802f0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0de:	687b      	ldr	r3, [r7, #4]
 802f0e0:	32ae      	adds	r2, #174	; 0xae
 802f0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f0e8:	2b00      	cmp	r3, #0
 802f0ea:	d00f      	beq.n	802f10c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802f0ec:	687b      	ldr	r3, [r7, #4]
 802f0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0f2:	687b      	ldr	r3, [r7, #4]
 802f0f4:	32ae      	adds	r2, #174	; 0xae
 802f0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f0fc:	f107 020e 	add.w	r2, r7, #14
 802f100:	4610      	mov	r0, r2
 802f102:	4798      	blx	r3
 802f104:	4602      	mov	r2, r0
 802f106:	687b      	ldr	r3, [r7, #4]
 802f108:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 802f10c:	687b      	ldr	r3, [r7, #4]
 802f10e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802f112:	1c5a      	adds	r2, r3, #1
 802f114:	687b      	ldr	r3, [r7, #4]
 802f116:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 802f11a:	2300      	movs	r3, #0
}
 802f11c:	4618      	mov	r0, r3
 802f11e:	3710      	adds	r7, #16
 802f120:	46bd      	mov	sp, r7
 802f122:	bd80      	pop	{r7, pc}

0802f124 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802f124:	b580      	push	{r7, lr}
 802f126:	b082      	sub	sp, #8
 802f128:	af00      	add	r7, sp, #0
 802f12a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802f12c:	6878      	ldr	r0, [r7, #4]
 802f12e:	f002 f87d 	bl	803122c <USBD_LL_Start>
 802f132:	4603      	mov	r3, r0
}
 802f134:	4618      	mov	r0, r3
 802f136:	3708      	adds	r7, #8
 802f138:	46bd      	mov	sp, r7
 802f13a:	bd80      	pop	{r7, pc}

0802f13c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 802f13c:	b480      	push	{r7}
 802f13e:	b083      	sub	sp, #12
 802f140:	af00      	add	r7, sp, #0
 802f142:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f144:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802f146:	4618      	mov	r0, r3
 802f148:	370c      	adds	r7, #12
 802f14a:	46bd      	mov	sp, r7
 802f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f150:	4770      	bx	lr

0802f152 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f152:	b580      	push	{r7, lr}
 802f154:	b084      	sub	sp, #16
 802f156:	af00      	add	r7, sp, #0
 802f158:	6078      	str	r0, [r7, #4]
 802f15a:	460b      	mov	r3, r1
 802f15c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f15e:	2300      	movs	r3, #0
 802f160:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f162:	687b      	ldr	r3, [r7, #4]
 802f164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f168:	2b00      	cmp	r3, #0
 802f16a:	d009      	beq.n	802f180 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802f16c:	687b      	ldr	r3, [r7, #4]
 802f16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f172:	681b      	ldr	r3, [r3, #0]
 802f174:	78fa      	ldrb	r2, [r7, #3]
 802f176:	4611      	mov	r1, r2
 802f178:	6878      	ldr	r0, [r7, #4]
 802f17a:	4798      	blx	r3
 802f17c:	4603      	mov	r3, r0
 802f17e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f180:	7bfb      	ldrb	r3, [r7, #15]
}
 802f182:	4618      	mov	r0, r3
 802f184:	3710      	adds	r7, #16
 802f186:	46bd      	mov	sp, r7
 802f188:	bd80      	pop	{r7, pc}

0802f18a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f18a:	b580      	push	{r7, lr}
 802f18c:	b084      	sub	sp, #16
 802f18e:	af00      	add	r7, sp, #0
 802f190:	6078      	str	r0, [r7, #4]
 802f192:	460b      	mov	r3, r1
 802f194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f196:	2300      	movs	r3, #0
 802f198:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 802f19a:	687b      	ldr	r3, [r7, #4]
 802f19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f1a0:	685b      	ldr	r3, [r3, #4]
 802f1a2:	78fa      	ldrb	r2, [r7, #3]
 802f1a4:	4611      	mov	r1, r2
 802f1a6:	6878      	ldr	r0, [r7, #4]
 802f1a8:	4798      	blx	r3
 802f1aa:	4603      	mov	r3, r0
 802f1ac:	2b00      	cmp	r3, #0
 802f1ae:	d001      	beq.n	802f1b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802f1b0:	2303      	movs	r3, #3
 802f1b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 802f1b6:	4618      	mov	r0, r3
 802f1b8:	3710      	adds	r7, #16
 802f1ba:	46bd      	mov	sp, r7
 802f1bc:	bd80      	pop	{r7, pc}

0802f1be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802f1be:	b580      	push	{r7, lr}
 802f1c0:	b084      	sub	sp, #16
 802f1c2:	af00      	add	r7, sp, #0
 802f1c4:	6078      	str	r0, [r7, #4]
 802f1c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802f1c8:	687b      	ldr	r3, [r7, #4]
 802f1ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f1ce:	6839      	ldr	r1, [r7, #0]
 802f1d0:	4618      	mov	r0, r3
 802f1d2:	f001 f908 	bl	80303e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	2201      	movs	r2, #1
 802f1da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802f1de:	687b      	ldr	r3, [r7, #4]
 802f1e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802f1e4:	461a      	mov	r2, r3
 802f1e6:	687b      	ldr	r3, [r7, #4]
 802f1e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802f1ec:	687b      	ldr	r3, [r7, #4]
 802f1ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f1f2:	f003 031f 	and.w	r3, r3, #31
 802f1f6:	2b02      	cmp	r3, #2
 802f1f8:	d01a      	beq.n	802f230 <USBD_LL_SetupStage+0x72>
 802f1fa:	2b02      	cmp	r3, #2
 802f1fc:	d822      	bhi.n	802f244 <USBD_LL_SetupStage+0x86>
 802f1fe:	2b00      	cmp	r3, #0
 802f200:	d002      	beq.n	802f208 <USBD_LL_SetupStage+0x4a>
 802f202:	2b01      	cmp	r3, #1
 802f204:	d00a      	beq.n	802f21c <USBD_LL_SetupStage+0x5e>
 802f206:	e01d      	b.n	802f244 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802f208:	687b      	ldr	r3, [r7, #4]
 802f20a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f20e:	4619      	mov	r1, r3
 802f210:	6878      	ldr	r0, [r7, #4]
 802f212:	f000 fb5f 	bl	802f8d4 <USBD_StdDevReq>
 802f216:	4603      	mov	r3, r0
 802f218:	73fb      	strb	r3, [r7, #15]
      break;
 802f21a:	e020      	b.n	802f25e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802f21c:	687b      	ldr	r3, [r7, #4]
 802f21e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f222:	4619      	mov	r1, r3
 802f224:	6878      	ldr	r0, [r7, #4]
 802f226:	f000 fbc7 	bl	802f9b8 <USBD_StdItfReq>
 802f22a:	4603      	mov	r3, r0
 802f22c:	73fb      	strb	r3, [r7, #15]
      break;
 802f22e:	e016      	b.n	802f25e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802f230:	687b      	ldr	r3, [r7, #4]
 802f232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f236:	4619      	mov	r1, r3
 802f238:	6878      	ldr	r0, [r7, #4]
 802f23a:	f000 fc29 	bl	802fa90 <USBD_StdEPReq>
 802f23e:	4603      	mov	r3, r0
 802f240:	73fb      	strb	r3, [r7, #15]
      break;
 802f242:	e00c      	b.n	802f25e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802f244:	687b      	ldr	r3, [r7, #4]
 802f246:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f24a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f24e:	b2db      	uxtb	r3, r3
 802f250:	4619      	mov	r1, r3
 802f252:	6878      	ldr	r0, [r7, #4]
 802f254:	f002 f84a 	bl	80312ec <USBD_LL_StallEP>
 802f258:	4603      	mov	r3, r0
 802f25a:	73fb      	strb	r3, [r7, #15]
      break;
 802f25c:	bf00      	nop
  }

  return ret;
 802f25e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f260:	4618      	mov	r0, r3
 802f262:	3710      	adds	r7, #16
 802f264:	46bd      	mov	sp, r7
 802f266:	bd80      	pop	{r7, pc}

0802f268 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802f268:	b580      	push	{r7, lr}
 802f26a:	b086      	sub	sp, #24
 802f26c:	af00      	add	r7, sp, #0
 802f26e:	60f8      	str	r0, [r7, #12]
 802f270:	460b      	mov	r3, r1
 802f272:	607a      	str	r2, [r7, #4]
 802f274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802f276:	2300      	movs	r3, #0
 802f278:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 802f27a:	7afb      	ldrb	r3, [r7, #11]
 802f27c:	2b00      	cmp	r3, #0
 802f27e:	d16e      	bne.n	802f35e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802f280:	68fb      	ldr	r3, [r7, #12]
 802f282:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802f286:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802f288:	68fb      	ldr	r3, [r7, #12]
 802f28a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f28e:	2b03      	cmp	r3, #3
 802f290:	f040 8098 	bne.w	802f3c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802f294:	693b      	ldr	r3, [r7, #16]
 802f296:	689a      	ldr	r2, [r3, #8]
 802f298:	693b      	ldr	r3, [r7, #16]
 802f29a:	68db      	ldr	r3, [r3, #12]
 802f29c:	429a      	cmp	r2, r3
 802f29e:	d913      	bls.n	802f2c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802f2a0:	693b      	ldr	r3, [r7, #16]
 802f2a2:	689a      	ldr	r2, [r3, #8]
 802f2a4:	693b      	ldr	r3, [r7, #16]
 802f2a6:	68db      	ldr	r3, [r3, #12]
 802f2a8:	1ad2      	subs	r2, r2, r3
 802f2aa:	693b      	ldr	r3, [r7, #16]
 802f2ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802f2ae:	693b      	ldr	r3, [r7, #16]
 802f2b0:	68da      	ldr	r2, [r3, #12]
 802f2b2:	693b      	ldr	r3, [r7, #16]
 802f2b4:	689b      	ldr	r3, [r3, #8]
 802f2b6:	4293      	cmp	r3, r2
 802f2b8:	bf28      	it	cs
 802f2ba:	4613      	movcs	r3, r2
 802f2bc:	461a      	mov	r2, r3
 802f2be:	6879      	ldr	r1, [r7, #4]
 802f2c0:	68f8      	ldr	r0, [r7, #12]
 802f2c2:	f001 f984 	bl	80305ce <USBD_CtlContinueRx>
 802f2c6:	e07d      	b.n	802f3c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 802f2c8:	68fb      	ldr	r3, [r7, #12]
 802f2ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f2ce:	f003 031f 	and.w	r3, r3, #31
 802f2d2:	2b02      	cmp	r3, #2
 802f2d4:	d014      	beq.n	802f300 <USBD_LL_DataOutStage+0x98>
 802f2d6:	2b02      	cmp	r3, #2
 802f2d8:	d81d      	bhi.n	802f316 <USBD_LL_DataOutStage+0xae>
 802f2da:	2b00      	cmp	r3, #0
 802f2dc:	d002      	beq.n	802f2e4 <USBD_LL_DataOutStage+0x7c>
 802f2de:	2b01      	cmp	r3, #1
 802f2e0:	d003      	beq.n	802f2ea <USBD_LL_DataOutStage+0x82>
 802f2e2:	e018      	b.n	802f316 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 802f2e4:	2300      	movs	r3, #0
 802f2e6:	75bb      	strb	r3, [r7, #22]
            break;
 802f2e8:	e018      	b.n	802f31c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 802f2ea:	68fb      	ldr	r3, [r7, #12]
 802f2ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f2f0:	b2db      	uxtb	r3, r3
 802f2f2:	4619      	mov	r1, r3
 802f2f4:	68f8      	ldr	r0, [r7, #12]
 802f2f6:	f000 fa5e 	bl	802f7b6 <USBD_CoreFindIF>
 802f2fa:	4603      	mov	r3, r0
 802f2fc:	75bb      	strb	r3, [r7, #22]
            break;
 802f2fe:	e00d      	b.n	802f31c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802f300:	68fb      	ldr	r3, [r7, #12]
 802f302:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f306:	b2db      	uxtb	r3, r3
 802f308:	4619      	mov	r1, r3
 802f30a:	68f8      	ldr	r0, [r7, #12]
 802f30c:	f000 fa60 	bl	802f7d0 <USBD_CoreFindEP>
 802f310:	4603      	mov	r3, r0
 802f312:	75bb      	strb	r3, [r7, #22]
            break;
 802f314:	e002      	b.n	802f31c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 802f316:	2300      	movs	r3, #0
 802f318:	75bb      	strb	r3, [r7, #22]
            break;
 802f31a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 802f31c:	7dbb      	ldrb	r3, [r7, #22]
 802f31e:	2b00      	cmp	r3, #0
 802f320:	d119      	bne.n	802f356 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f322:	68fb      	ldr	r3, [r7, #12]
 802f324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f328:	b2db      	uxtb	r3, r3
 802f32a:	2b03      	cmp	r3, #3
 802f32c:	d113      	bne.n	802f356 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 802f32e:	7dba      	ldrb	r2, [r7, #22]
 802f330:	68fb      	ldr	r3, [r7, #12]
 802f332:	32ae      	adds	r2, #174	; 0xae
 802f334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f338:	691b      	ldr	r3, [r3, #16]
 802f33a:	2b00      	cmp	r3, #0
 802f33c:	d00b      	beq.n	802f356 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 802f33e:	7dba      	ldrb	r2, [r7, #22]
 802f340:	68fb      	ldr	r3, [r7, #12]
 802f342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802f346:	7dba      	ldrb	r2, [r7, #22]
 802f348:	68fb      	ldr	r3, [r7, #12]
 802f34a:	32ae      	adds	r2, #174	; 0xae
 802f34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f350:	691b      	ldr	r3, [r3, #16]
 802f352:	68f8      	ldr	r0, [r7, #12]
 802f354:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802f356:	68f8      	ldr	r0, [r7, #12]
 802f358:	f001 f94a 	bl	80305f0 <USBD_CtlSendStatus>
 802f35c:	e032      	b.n	802f3c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802f35e:	7afb      	ldrb	r3, [r7, #11]
 802f360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f364:	b2db      	uxtb	r3, r3
 802f366:	4619      	mov	r1, r3
 802f368:	68f8      	ldr	r0, [r7, #12]
 802f36a:	f000 fa31 	bl	802f7d0 <USBD_CoreFindEP>
 802f36e:	4603      	mov	r3, r0
 802f370:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f372:	7dbb      	ldrb	r3, [r7, #22]
 802f374:	2bff      	cmp	r3, #255	; 0xff
 802f376:	d025      	beq.n	802f3c4 <USBD_LL_DataOutStage+0x15c>
 802f378:	7dbb      	ldrb	r3, [r7, #22]
 802f37a:	2b00      	cmp	r3, #0
 802f37c:	d122      	bne.n	802f3c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f37e:	68fb      	ldr	r3, [r7, #12]
 802f380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f384:	b2db      	uxtb	r3, r3
 802f386:	2b03      	cmp	r3, #3
 802f388:	d117      	bne.n	802f3ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 802f38a:	7dba      	ldrb	r2, [r7, #22]
 802f38c:	68fb      	ldr	r3, [r7, #12]
 802f38e:	32ae      	adds	r2, #174	; 0xae
 802f390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f394:	699b      	ldr	r3, [r3, #24]
 802f396:	2b00      	cmp	r3, #0
 802f398:	d00f      	beq.n	802f3ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 802f39a:	7dba      	ldrb	r2, [r7, #22]
 802f39c:	68fb      	ldr	r3, [r7, #12]
 802f39e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 802f3a2:	7dba      	ldrb	r2, [r7, #22]
 802f3a4:	68fb      	ldr	r3, [r7, #12]
 802f3a6:	32ae      	adds	r2, #174	; 0xae
 802f3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f3ac:	699b      	ldr	r3, [r3, #24]
 802f3ae:	7afa      	ldrb	r2, [r7, #11]
 802f3b0:	4611      	mov	r1, r2
 802f3b2:	68f8      	ldr	r0, [r7, #12]
 802f3b4:	4798      	blx	r3
 802f3b6:	4603      	mov	r3, r0
 802f3b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 802f3ba:	7dfb      	ldrb	r3, [r7, #23]
 802f3bc:	2b00      	cmp	r3, #0
 802f3be:	d001      	beq.n	802f3c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802f3c0:	7dfb      	ldrb	r3, [r7, #23]
 802f3c2:	e000      	b.n	802f3c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 802f3c4:	2300      	movs	r3, #0
}
 802f3c6:	4618      	mov	r0, r3
 802f3c8:	3718      	adds	r7, #24
 802f3ca:	46bd      	mov	sp, r7
 802f3cc:	bd80      	pop	{r7, pc}

0802f3ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802f3ce:	b580      	push	{r7, lr}
 802f3d0:	b086      	sub	sp, #24
 802f3d2:	af00      	add	r7, sp, #0
 802f3d4:	60f8      	str	r0, [r7, #12]
 802f3d6:	460b      	mov	r3, r1
 802f3d8:	607a      	str	r2, [r7, #4]
 802f3da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802f3dc:	7afb      	ldrb	r3, [r7, #11]
 802f3de:	2b00      	cmp	r3, #0
 802f3e0:	d16f      	bne.n	802f4c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 802f3e2:	68fb      	ldr	r3, [r7, #12]
 802f3e4:	3314      	adds	r3, #20
 802f3e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802f3e8:	68fb      	ldr	r3, [r7, #12]
 802f3ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f3ee:	2b02      	cmp	r3, #2
 802f3f0:	d15a      	bne.n	802f4a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 802f3f2:	693b      	ldr	r3, [r7, #16]
 802f3f4:	689a      	ldr	r2, [r3, #8]
 802f3f6:	693b      	ldr	r3, [r7, #16]
 802f3f8:	68db      	ldr	r3, [r3, #12]
 802f3fa:	429a      	cmp	r2, r3
 802f3fc:	d914      	bls.n	802f428 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802f3fe:	693b      	ldr	r3, [r7, #16]
 802f400:	689a      	ldr	r2, [r3, #8]
 802f402:	693b      	ldr	r3, [r7, #16]
 802f404:	68db      	ldr	r3, [r3, #12]
 802f406:	1ad2      	subs	r2, r2, r3
 802f408:	693b      	ldr	r3, [r7, #16]
 802f40a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802f40c:	693b      	ldr	r3, [r7, #16]
 802f40e:	689b      	ldr	r3, [r3, #8]
 802f410:	461a      	mov	r2, r3
 802f412:	6879      	ldr	r1, [r7, #4]
 802f414:	68f8      	ldr	r0, [r7, #12]
 802f416:	f001 f8ac 	bl	8030572 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f41a:	2300      	movs	r3, #0
 802f41c:	2200      	movs	r2, #0
 802f41e:	2100      	movs	r1, #0
 802f420:	68f8      	ldr	r0, [r7, #12]
 802f422:	f002 f80d 	bl	8031440 <USBD_LL_PrepareReceive>
 802f426:	e03f      	b.n	802f4a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802f428:	693b      	ldr	r3, [r7, #16]
 802f42a:	68da      	ldr	r2, [r3, #12]
 802f42c:	693b      	ldr	r3, [r7, #16]
 802f42e:	689b      	ldr	r3, [r3, #8]
 802f430:	429a      	cmp	r2, r3
 802f432:	d11c      	bne.n	802f46e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802f434:	693b      	ldr	r3, [r7, #16]
 802f436:	685a      	ldr	r2, [r3, #4]
 802f438:	693b      	ldr	r3, [r7, #16]
 802f43a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802f43c:	429a      	cmp	r2, r3
 802f43e:	d316      	bcc.n	802f46e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802f440:	693b      	ldr	r3, [r7, #16]
 802f442:	685a      	ldr	r2, [r3, #4]
 802f444:	68fb      	ldr	r3, [r7, #12]
 802f446:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802f44a:	429a      	cmp	r2, r3
 802f44c:	d20f      	bcs.n	802f46e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802f44e:	2200      	movs	r2, #0
 802f450:	2100      	movs	r1, #0
 802f452:	68f8      	ldr	r0, [r7, #12]
 802f454:	f001 f88d 	bl	8030572 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802f458:	68fb      	ldr	r3, [r7, #12]
 802f45a:	2200      	movs	r2, #0
 802f45c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f460:	2300      	movs	r3, #0
 802f462:	2200      	movs	r2, #0
 802f464:	2100      	movs	r1, #0
 802f466:	68f8      	ldr	r0, [r7, #12]
 802f468:	f001 ffea 	bl	8031440 <USBD_LL_PrepareReceive>
 802f46c:	e01c      	b.n	802f4a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f46e:	68fb      	ldr	r3, [r7, #12]
 802f470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f474:	b2db      	uxtb	r3, r3
 802f476:	2b03      	cmp	r3, #3
 802f478:	d10f      	bne.n	802f49a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 802f47a:	68fb      	ldr	r3, [r7, #12]
 802f47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f480:	68db      	ldr	r3, [r3, #12]
 802f482:	2b00      	cmp	r3, #0
 802f484:	d009      	beq.n	802f49a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802f486:	68fb      	ldr	r3, [r7, #12]
 802f488:	2200      	movs	r2, #0
 802f48a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802f48e:	68fb      	ldr	r3, [r7, #12]
 802f490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f494:	68db      	ldr	r3, [r3, #12]
 802f496:	68f8      	ldr	r0, [r7, #12]
 802f498:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802f49a:	2180      	movs	r1, #128	; 0x80
 802f49c:	68f8      	ldr	r0, [r7, #12]
 802f49e:	f001 ff25 	bl	80312ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802f4a2:	68f8      	ldr	r0, [r7, #12]
 802f4a4:	f001 f8b7 	bl	8030616 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802f4a8:	68fb      	ldr	r3, [r7, #12]
 802f4aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802f4ae:	2b00      	cmp	r3, #0
 802f4b0:	d03a      	beq.n	802f528 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 802f4b2:	68f8      	ldr	r0, [r7, #12]
 802f4b4:	f7ff fe42 	bl	802f13c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802f4b8:	68fb      	ldr	r3, [r7, #12]
 802f4ba:	2200      	movs	r2, #0
 802f4bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802f4c0:	e032      	b.n	802f528 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 802f4c2:	7afb      	ldrb	r3, [r7, #11]
 802f4c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802f4c8:	b2db      	uxtb	r3, r3
 802f4ca:	4619      	mov	r1, r3
 802f4cc:	68f8      	ldr	r0, [r7, #12]
 802f4ce:	f000 f97f 	bl	802f7d0 <USBD_CoreFindEP>
 802f4d2:	4603      	mov	r3, r0
 802f4d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f4d6:	7dfb      	ldrb	r3, [r7, #23]
 802f4d8:	2bff      	cmp	r3, #255	; 0xff
 802f4da:	d025      	beq.n	802f528 <USBD_LL_DataInStage+0x15a>
 802f4dc:	7dfb      	ldrb	r3, [r7, #23]
 802f4de:	2b00      	cmp	r3, #0
 802f4e0:	d122      	bne.n	802f528 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f4e2:	68fb      	ldr	r3, [r7, #12]
 802f4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f4e8:	b2db      	uxtb	r3, r3
 802f4ea:	2b03      	cmp	r3, #3
 802f4ec:	d11c      	bne.n	802f528 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802f4ee:	7dfa      	ldrb	r2, [r7, #23]
 802f4f0:	68fb      	ldr	r3, [r7, #12]
 802f4f2:	32ae      	adds	r2, #174	; 0xae
 802f4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f4f8:	695b      	ldr	r3, [r3, #20]
 802f4fa:	2b00      	cmp	r3, #0
 802f4fc:	d014      	beq.n	802f528 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802f4fe:	7dfa      	ldrb	r2, [r7, #23]
 802f500:	68fb      	ldr	r3, [r7, #12]
 802f502:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 802f506:	7dfa      	ldrb	r2, [r7, #23]
 802f508:	68fb      	ldr	r3, [r7, #12]
 802f50a:	32ae      	adds	r2, #174	; 0xae
 802f50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f510:	695b      	ldr	r3, [r3, #20]
 802f512:	7afa      	ldrb	r2, [r7, #11]
 802f514:	4611      	mov	r1, r2
 802f516:	68f8      	ldr	r0, [r7, #12]
 802f518:	4798      	blx	r3
 802f51a:	4603      	mov	r3, r0
 802f51c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 802f51e:	7dbb      	ldrb	r3, [r7, #22]
 802f520:	2b00      	cmp	r3, #0
 802f522:	d001      	beq.n	802f528 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 802f524:	7dbb      	ldrb	r3, [r7, #22]
 802f526:	e000      	b.n	802f52a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 802f528:	2300      	movs	r3, #0
}
 802f52a:	4618      	mov	r0, r3
 802f52c:	3718      	adds	r7, #24
 802f52e:	46bd      	mov	sp, r7
 802f530:	bd80      	pop	{r7, pc}

0802f532 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802f532:	b580      	push	{r7, lr}
 802f534:	b084      	sub	sp, #16
 802f536:	af00      	add	r7, sp, #0
 802f538:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 802f53a:	2300      	movs	r3, #0
 802f53c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f53e:	687b      	ldr	r3, [r7, #4]
 802f540:	2201      	movs	r2, #1
 802f542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802f546:	687b      	ldr	r3, [r7, #4]
 802f548:	2200      	movs	r2, #0
 802f54a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802f54e:	687b      	ldr	r3, [r7, #4]
 802f550:	2200      	movs	r2, #0
 802f552:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802f554:	687b      	ldr	r3, [r7, #4]
 802f556:	2200      	movs	r2, #0
 802f558:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 802f55c:	687b      	ldr	r3, [r7, #4]
 802f55e:	2200      	movs	r2, #0
 802f560:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 802f564:	687b      	ldr	r3, [r7, #4]
 802f566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f56a:	2b00      	cmp	r3, #0
 802f56c:	d014      	beq.n	802f598 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 802f56e:	687b      	ldr	r3, [r7, #4]
 802f570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f574:	685b      	ldr	r3, [r3, #4]
 802f576:	2b00      	cmp	r3, #0
 802f578:	d00e      	beq.n	802f598 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 802f57a:	687b      	ldr	r3, [r7, #4]
 802f57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f580:	685b      	ldr	r3, [r3, #4]
 802f582:	687a      	ldr	r2, [r7, #4]
 802f584:	6852      	ldr	r2, [r2, #4]
 802f586:	b2d2      	uxtb	r2, r2
 802f588:	4611      	mov	r1, r2
 802f58a:	6878      	ldr	r0, [r7, #4]
 802f58c:	4798      	blx	r3
 802f58e:	4603      	mov	r3, r0
 802f590:	2b00      	cmp	r3, #0
 802f592:	d001      	beq.n	802f598 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 802f594:	2303      	movs	r3, #3
 802f596:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f598:	2340      	movs	r3, #64	; 0x40
 802f59a:	2200      	movs	r2, #0
 802f59c:	2100      	movs	r1, #0
 802f59e:	6878      	ldr	r0, [r7, #4]
 802f5a0:	f001 fe5f 	bl	8031262 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802f5a4:	687b      	ldr	r3, [r7, #4]
 802f5a6:	2201      	movs	r2, #1
 802f5a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802f5ac:	687b      	ldr	r3, [r7, #4]
 802f5ae:	2240      	movs	r2, #64	; 0x40
 802f5b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f5b4:	2340      	movs	r3, #64	; 0x40
 802f5b6:	2200      	movs	r2, #0
 802f5b8:	2180      	movs	r1, #128	; 0x80
 802f5ba:	6878      	ldr	r0, [r7, #4]
 802f5bc:	f001 fe51 	bl	8031262 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802f5c0:	687b      	ldr	r3, [r7, #4]
 802f5c2:	2201      	movs	r2, #1
 802f5c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802f5c6:	687b      	ldr	r3, [r7, #4]
 802f5c8:	2240      	movs	r2, #64	; 0x40
 802f5ca:	621a      	str	r2, [r3, #32]

  return ret;
 802f5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 802f5ce:	4618      	mov	r0, r3
 802f5d0:	3710      	adds	r7, #16
 802f5d2:	46bd      	mov	sp, r7
 802f5d4:	bd80      	pop	{r7, pc}

0802f5d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802f5d6:	b480      	push	{r7}
 802f5d8:	b083      	sub	sp, #12
 802f5da:	af00      	add	r7, sp, #0
 802f5dc:	6078      	str	r0, [r7, #4]
 802f5de:	460b      	mov	r3, r1
 802f5e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802f5e2:	687b      	ldr	r3, [r7, #4]
 802f5e4:	78fa      	ldrb	r2, [r7, #3]
 802f5e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802f5e8:	2300      	movs	r3, #0
}
 802f5ea:	4618      	mov	r0, r3
 802f5ec:	370c      	adds	r7, #12
 802f5ee:	46bd      	mov	sp, r7
 802f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5f4:	4770      	bx	lr

0802f5f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802f5f6:	b480      	push	{r7}
 802f5f8:	b083      	sub	sp, #12
 802f5fa:	af00      	add	r7, sp, #0
 802f5fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802f5fe:	687b      	ldr	r3, [r7, #4]
 802f600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f604:	b2da      	uxtb	r2, r3
 802f606:	687b      	ldr	r3, [r7, #4]
 802f608:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802f60c:	687b      	ldr	r3, [r7, #4]
 802f60e:	2204      	movs	r2, #4
 802f610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802f614:	2300      	movs	r3, #0
}
 802f616:	4618      	mov	r0, r3
 802f618:	370c      	adds	r7, #12
 802f61a:	46bd      	mov	sp, r7
 802f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f620:	4770      	bx	lr

0802f622 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802f622:	b480      	push	{r7}
 802f624:	b083      	sub	sp, #12
 802f626:	af00      	add	r7, sp, #0
 802f628:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802f62a:	687b      	ldr	r3, [r7, #4]
 802f62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f630:	b2db      	uxtb	r3, r3
 802f632:	2b04      	cmp	r3, #4
 802f634:	d106      	bne.n	802f644 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802f636:	687b      	ldr	r3, [r7, #4]
 802f638:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 802f63c:	b2da      	uxtb	r2, r3
 802f63e:	687b      	ldr	r3, [r7, #4]
 802f640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802f644:	2300      	movs	r3, #0
}
 802f646:	4618      	mov	r0, r3
 802f648:	370c      	adds	r7, #12
 802f64a:	46bd      	mov	sp, r7
 802f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f650:	4770      	bx	lr

0802f652 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802f652:	b580      	push	{r7, lr}
 802f654:	b082      	sub	sp, #8
 802f656:	af00      	add	r7, sp, #0
 802f658:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f65a:	687b      	ldr	r3, [r7, #4]
 802f65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f660:	b2db      	uxtb	r3, r3
 802f662:	2b03      	cmp	r3, #3
 802f664:	d110      	bne.n	802f688 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 802f666:	687b      	ldr	r3, [r7, #4]
 802f668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f66c:	2b00      	cmp	r3, #0
 802f66e:	d00b      	beq.n	802f688 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 802f670:	687b      	ldr	r3, [r7, #4]
 802f672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f676:	69db      	ldr	r3, [r3, #28]
 802f678:	2b00      	cmp	r3, #0
 802f67a:	d005      	beq.n	802f688 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 802f67c:	687b      	ldr	r3, [r7, #4]
 802f67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f682:	69db      	ldr	r3, [r3, #28]
 802f684:	6878      	ldr	r0, [r7, #4]
 802f686:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 802f688:	2300      	movs	r3, #0
}
 802f68a:	4618      	mov	r0, r3
 802f68c:	3708      	adds	r7, #8
 802f68e:	46bd      	mov	sp, r7
 802f690:	bd80      	pop	{r7, pc}

0802f692 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802f692:	b580      	push	{r7, lr}
 802f694:	b082      	sub	sp, #8
 802f696:	af00      	add	r7, sp, #0
 802f698:	6078      	str	r0, [r7, #4]
 802f69a:	460b      	mov	r3, r1
 802f69c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f69e:	687b      	ldr	r3, [r7, #4]
 802f6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6a4:	687b      	ldr	r3, [r7, #4]
 802f6a6:	32ae      	adds	r2, #174	; 0xae
 802f6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6ac:	2b00      	cmp	r3, #0
 802f6ae:	d101      	bne.n	802f6b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 802f6b0:	2303      	movs	r3, #3
 802f6b2:	e01c      	b.n	802f6ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f6b4:	687b      	ldr	r3, [r7, #4]
 802f6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f6ba:	b2db      	uxtb	r3, r3
 802f6bc:	2b03      	cmp	r3, #3
 802f6be:	d115      	bne.n	802f6ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 802f6c0:	687b      	ldr	r3, [r7, #4]
 802f6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6c6:	687b      	ldr	r3, [r7, #4]
 802f6c8:	32ae      	adds	r2, #174	; 0xae
 802f6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6ce:	6a1b      	ldr	r3, [r3, #32]
 802f6d0:	2b00      	cmp	r3, #0
 802f6d2:	d00b      	beq.n	802f6ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 802f6d4:	687b      	ldr	r3, [r7, #4]
 802f6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6da:	687b      	ldr	r3, [r7, #4]
 802f6dc:	32ae      	adds	r2, #174	; 0xae
 802f6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6e2:	6a1b      	ldr	r3, [r3, #32]
 802f6e4:	78fa      	ldrb	r2, [r7, #3]
 802f6e6:	4611      	mov	r1, r2
 802f6e8:	6878      	ldr	r0, [r7, #4]
 802f6ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f6ec:	2300      	movs	r3, #0
}
 802f6ee:	4618      	mov	r0, r3
 802f6f0:	3708      	adds	r7, #8
 802f6f2:	46bd      	mov	sp, r7
 802f6f4:	bd80      	pop	{r7, pc}

0802f6f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802f6f6:	b580      	push	{r7, lr}
 802f6f8:	b082      	sub	sp, #8
 802f6fa:	af00      	add	r7, sp, #0
 802f6fc:	6078      	str	r0, [r7, #4]
 802f6fe:	460b      	mov	r3, r1
 802f700:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f702:	687b      	ldr	r3, [r7, #4]
 802f704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f708:	687b      	ldr	r3, [r7, #4]
 802f70a:	32ae      	adds	r2, #174	; 0xae
 802f70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f710:	2b00      	cmp	r3, #0
 802f712:	d101      	bne.n	802f718 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 802f714:	2303      	movs	r3, #3
 802f716:	e01c      	b.n	802f752 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f718:	687b      	ldr	r3, [r7, #4]
 802f71a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f71e:	b2db      	uxtb	r3, r3
 802f720:	2b03      	cmp	r3, #3
 802f722:	d115      	bne.n	802f750 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 802f724:	687b      	ldr	r3, [r7, #4]
 802f726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f72a:	687b      	ldr	r3, [r7, #4]
 802f72c:	32ae      	adds	r2, #174	; 0xae
 802f72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f734:	2b00      	cmp	r3, #0
 802f736:	d00b      	beq.n	802f750 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 802f738:	687b      	ldr	r3, [r7, #4]
 802f73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f73e:	687b      	ldr	r3, [r7, #4]
 802f740:	32ae      	adds	r2, #174	; 0xae
 802f742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f748:	78fa      	ldrb	r2, [r7, #3]
 802f74a:	4611      	mov	r1, r2
 802f74c:	6878      	ldr	r0, [r7, #4]
 802f74e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f750:	2300      	movs	r3, #0
}
 802f752:	4618      	mov	r0, r3
 802f754:	3708      	adds	r7, #8
 802f756:	46bd      	mov	sp, r7
 802f758:	bd80      	pop	{r7, pc}

0802f75a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802f75a:	b480      	push	{r7}
 802f75c:	b083      	sub	sp, #12
 802f75e:	af00      	add	r7, sp, #0
 802f760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f762:	2300      	movs	r3, #0
}
 802f764:	4618      	mov	r0, r3
 802f766:	370c      	adds	r7, #12
 802f768:	46bd      	mov	sp, r7
 802f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f76e:	4770      	bx	lr

0802f770 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802f770:	b580      	push	{r7, lr}
 802f772:	b084      	sub	sp, #16
 802f774:	af00      	add	r7, sp, #0
 802f776:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 802f778:	2300      	movs	r3, #0
 802f77a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f77c:	687b      	ldr	r3, [r7, #4]
 802f77e:	2201      	movs	r2, #1
 802f780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f784:	687b      	ldr	r3, [r7, #4]
 802f786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f78a:	2b00      	cmp	r3, #0
 802f78c:	d00e      	beq.n	802f7ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802f78e:	687b      	ldr	r3, [r7, #4]
 802f790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f794:	685b      	ldr	r3, [r3, #4]
 802f796:	687a      	ldr	r2, [r7, #4]
 802f798:	6852      	ldr	r2, [r2, #4]
 802f79a:	b2d2      	uxtb	r2, r2
 802f79c:	4611      	mov	r1, r2
 802f79e:	6878      	ldr	r0, [r7, #4]
 802f7a0:	4798      	blx	r3
 802f7a2:	4603      	mov	r3, r0
 802f7a4:	2b00      	cmp	r3, #0
 802f7a6:	d001      	beq.n	802f7ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 802f7a8:	2303      	movs	r3, #3
 802f7aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 802f7ae:	4618      	mov	r0, r3
 802f7b0:	3710      	adds	r7, #16
 802f7b2:	46bd      	mov	sp, r7
 802f7b4:	bd80      	pop	{r7, pc}

0802f7b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7b6:	b480      	push	{r7}
 802f7b8:	b083      	sub	sp, #12
 802f7ba:	af00      	add	r7, sp, #0
 802f7bc:	6078      	str	r0, [r7, #4]
 802f7be:	460b      	mov	r3, r1
 802f7c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7c4:	4618      	mov	r0, r3
 802f7c6:	370c      	adds	r7, #12
 802f7c8:	46bd      	mov	sp, r7
 802f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7ce:	4770      	bx	lr

0802f7d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7d0:	b480      	push	{r7}
 802f7d2:	b083      	sub	sp, #12
 802f7d4:	af00      	add	r7, sp, #0
 802f7d6:	6078      	str	r0, [r7, #4]
 802f7d8:	460b      	mov	r3, r1
 802f7da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7de:	4618      	mov	r0, r3
 802f7e0:	370c      	adds	r7, #12
 802f7e2:	46bd      	mov	sp, r7
 802f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7e8:	4770      	bx	lr

0802f7ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 802f7ea:	b580      	push	{r7, lr}
 802f7ec:	b086      	sub	sp, #24
 802f7ee:	af00      	add	r7, sp, #0
 802f7f0:	6078      	str	r0, [r7, #4]
 802f7f2:	460b      	mov	r3, r1
 802f7f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 802f7f6:	687b      	ldr	r3, [r7, #4]
 802f7f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 802f7fa:	687b      	ldr	r3, [r7, #4]
 802f7fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 802f7fe:	2300      	movs	r3, #0
 802f800:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802f802:	68fb      	ldr	r3, [r7, #12]
 802f804:	885b      	ldrh	r3, [r3, #2]
 802f806:	b29a      	uxth	r2, r3
 802f808:	68fb      	ldr	r3, [r7, #12]
 802f80a:	781b      	ldrb	r3, [r3, #0]
 802f80c:	b29b      	uxth	r3, r3
 802f80e:	429a      	cmp	r2, r3
 802f810:	d920      	bls.n	802f854 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 802f812:	68fb      	ldr	r3, [r7, #12]
 802f814:	781b      	ldrb	r3, [r3, #0]
 802f816:	b29b      	uxth	r3, r3
 802f818:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 802f81a:	e013      	b.n	802f844 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 802f81c:	f107 030a 	add.w	r3, r7, #10
 802f820:	4619      	mov	r1, r3
 802f822:	6978      	ldr	r0, [r7, #20]
 802f824:	f000 f81b 	bl	802f85e <USBD_GetNextDesc>
 802f828:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f82a:	697b      	ldr	r3, [r7, #20]
 802f82c:	785b      	ldrb	r3, [r3, #1]
 802f82e:	2b05      	cmp	r3, #5
 802f830:	d108      	bne.n	802f844 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 802f832:	697b      	ldr	r3, [r7, #20]
 802f834:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 802f836:	693b      	ldr	r3, [r7, #16]
 802f838:	789b      	ldrb	r3, [r3, #2]
 802f83a:	78fa      	ldrb	r2, [r7, #3]
 802f83c:	429a      	cmp	r2, r3
 802f83e:	d008      	beq.n	802f852 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 802f840:	2300      	movs	r3, #0
 802f842:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 802f844:	68fb      	ldr	r3, [r7, #12]
 802f846:	885b      	ldrh	r3, [r3, #2]
 802f848:	b29a      	uxth	r2, r3
 802f84a:	897b      	ldrh	r3, [r7, #10]
 802f84c:	429a      	cmp	r2, r3
 802f84e:	d8e5      	bhi.n	802f81c <USBD_GetEpDesc+0x32>
 802f850:	e000      	b.n	802f854 <USBD_GetEpDesc+0x6a>
          break;
 802f852:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 802f854:	693b      	ldr	r3, [r7, #16]
}
 802f856:	4618      	mov	r0, r3
 802f858:	3718      	adds	r7, #24
 802f85a:	46bd      	mov	sp, r7
 802f85c:	bd80      	pop	{r7, pc}

0802f85e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 802f85e:	b480      	push	{r7}
 802f860:	b085      	sub	sp, #20
 802f862:	af00      	add	r7, sp, #0
 802f864:	6078      	str	r0, [r7, #4]
 802f866:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 802f868:	687b      	ldr	r3, [r7, #4]
 802f86a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 802f86c:	683b      	ldr	r3, [r7, #0]
 802f86e:	881a      	ldrh	r2, [r3, #0]
 802f870:	68fb      	ldr	r3, [r7, #12]
 802f872:	781b      	ldrb	r3, [r3, #0]
 802f874:	b29b      	uxth	r3, r3
 802f876:	4413      	add	r3, r2
 802f878:	b29a      	uxth	r2, r3
 802f87a:	683b      	ldr	r3, [r7, #0]
 802f87c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 802f87e:	68fb      	ldr	r3, [r7, #12]
 802f880:	781b      	ldrb	r3, [r3, #0]
 802f882:	461a      	mov	r2, r3
 802f884:	687b      	ldr	r3, [r7, #4]
 802f886:	4413      	add	r3, r2
 802f888:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f88a:	68fb      	ldr	r3, [r7, #12]
}
 802f88c:	4618      	mov	r0, r3
 802f88e:	3714      	adds	r7, #20
 802f890:	46bd      	mov	sp, r7
 802f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f896:	4770      	bx	lr

0802f898 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802f898:	b480      	push	{r7}
 802f89a:	b087      	sub	sp, #28
 802f89c:	af00      	add	r7, sp, #0
 802f89e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802f8a0:	687b      	ldr	r3, [r7, #4]
 802f8a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802f8a4:	697b      	ldr	r3, [r7, #20]
 802f8a6:	781b      	ldrb	r3, [r3, #0]
 802f8a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802f8aa:	697b      	ldr	r3, [r7, #20]
 802f8ac:	3301      	adds	r3, #1
 802f8ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802f8b0:	697b      	ldr	r3, [r7, #20]
 802f8b2:	781b      	ldrb	r3, [r3, #0]
 802f8b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802f8b6:	8a3b      	ldrh	r3, [r7, #16]
 802f8b8:	021b      	lsls	r3, r3, #8
 802f8ba:	b21a      	sxth	r2, r3
 802f8bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802f8c0:	4313      	orrs	r3, r2
 802f8c2:	b21b      	sxth	r3, r3
 802f8c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802f8c6:	89fb      	ldrh	r3, [r7, #14]
}
 802f8c8:	4618      	mov	r0, r3
 802f8ca:	371c      	adds	r7, #28
 802f8cc:	46bd      	mov	sp, r7
 802f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8d2:	4770      	bx	lr

0802f8d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f8d4:	b580      	push	{r7, lr}
 802f8d6:	b084      	sub	sp, #16
 802f8d8:	af00      	add	r7, sp, #0
 802f8da:	6078      	str	r0, [r7, #4]
 802f8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f8de:	2300      	movs	r3, #0
 802f8e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f8e2:	683b      	ldr	r3, [r7, #0]
 802f8e4:	781b      	ldrb	r3, [r3, #0]
 802f8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f8ea:	2b40      	cmp	r3, #64	; 0x40
 802f8ec:	d005      	beq.n	802f8fa <USBD_StdDevReq+0x26>
 802f8ee:	2b40      	cmp	r3, #64	; 0x40
 802f8f0:	d857      	bhi.n	802f9a2 <USBD_StdDevReq+0xce>
 802f8f2:	2b00      	cmp	r3, #0
 802f8f4:	d00f      	beq.n	802f916 <USBD_StdDevReq+0x42>
 802f8f6:	2b20      	cmp	r3, #32
 802f8f8:	d153      	bne.n	802f9a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 802f8fa:	687b      	ldr	r3, [r7, #4]
 802f8fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f900:	687b      	ldr	r3, [r7, #4]
 802f902:	32ae      	adds	r2, #174	; 0xae
 802f904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f908:	689b      	ldr	r3, [r3, #8]
 802f90a:	6839      	ldr	r1, [r7, #0]
 802f90c:	6878      	ldr	r0, [r7, #4]
 802f90e:	4798      	blx	r3
 802f910:	4603      	mov	r3, r0
 802f912:	73fb      	strb	r3, [r7, #15]
      break;
 802f914:	e04a      	b.n	802f9ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f916:	683b      	ldr	r3, [r7, #0]
 802f918:	785b      	ldrb	r3, [r3, #1]
 802f91a:	2b09      	cmp	r3, #9
 802f91c:	d83b      	bhi.n	802f996 <USBD_StdDevReq+0xc2>
 802f91e:	a201      	add	r2, pc, #4	; (adr r2, 802f924 <USBD_StdDevReq+0x50>)
 802f920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f924:	0802f979 	.word	0x0802f979
 802f928:	0802f98d 	.word	0x0802f98d
 802f92c:	0802f997 	.word	0x0802f997
 802f930:	0802f983 	.word	0x0802f983
 802f934:	0802f997 	.word	0x0802f997
 802f938:	0802f957 	.word	0x0802f957
 802f93c:	0802f94d 	.word	0x0802f94d
 802f940:	0802f997 	.word	0x0802f997
 802f944:	0802f96f 	.word	0x0802f96f
 802f948:	0802f961 	.word	0x0802f961
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802f94c:	6839      	ldr	r1, [r7, #0]
 802f94e:	6878      	ldr	r0, [r7, #4]
 802f950:	f000 fa3c 	bl	802fdcc <USBD_GetDescriptor>
          break;
 802f954:	e024      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802f956:	6839      	ldr	r1, [r7, #0]
 802f958:	6878      	ldr	r0, [r7, #4]
 802f95a:	f000 fba1 	bl	80300a0 <USBD_SetAddress>
          break;
 802f95e:	e01f      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 802f960:	6839      	ldr	r1, [r7, #0]
 802f962:	6878      	ldr	r0, [r7, #4]
 802f964:	f000 fbe0 	bl	8030128 <USBD_SetConfig>
 802f968:	4603      	mov	r3, r0
 802f96a:	73fb      	strb	r3, [r7, #15]
          break;
 802f96c:	e018      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802f96e:	6839      	ldr	r1, [r7, #0]
 802f970:	6878      	ldr	r0, [r7, #4]
 802f972:	f000 fc83 	bl	803027c <USBD_GetConfig>
          break;
 802f976:	e013      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802f978:	6839      	ldr	r1, [r7, #0]
 802f97a:	6878      	ldr	r0, [r7, #4]
 802f97c:	f000 fcb4 	bl	80302e8 <USBD_GetStatus>
          break;
 802f980:	e00e      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802f982:	6839      	ldr	r1, [r7, #0]
 802f984:	6878      	ldr	r0, [r7, #4]
 802f986:	f000 fce3 	bl	8030350 <USBD_SetFeature>
          break;
 802f98a:	e009      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802f98c:	6839      	ldr	r1, [r7, #0]
 802f98e:	6878      	ldr	r0, [r7, #4]
 802f990:	f000 fd07 	bl	80303a2 <USBD_ClrFeature>
          break;
 802f994:	e004      	b.n	802f9a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 802f996:	6839      	ldr	r1, [r7, #0]
 802f998:	6878      	ldr	r0, [r7, #4]
 802f99a:	f000 fd5e 	bl	803045a <USBD_CtlError>
          break;
 802f99e:	bf00      	nop
      }
      break;
 802f9a0:	e004      	b.n	802f9ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802f9a2:	6839      	ldr	r1, [r7, #0]
 802f9a4:	6878      	ldr	r0, [r7, #4]
 802f9a6:	f000 fd58 	bl	803045a <USBD_CtlError>
      break;
 802f9aa:	bf00      	nop
  }

  return ret;
 802f9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 802f9ae:	4618      	mov	r0, r3
 802f9b0:	3710      	adds	r7, #16
 802f9b2:	46bd      	mov	sp, r7
 802f9b4:	bd80      	pop	{r7, pc}
 802f9b6:	bf00      	nop

0802f9b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f9b8:	b580      	push	{r7, lr}
 802f9ba:	b084      	sub	sp, #16
 802f9bc:	af00      	add	r7, sp, #0
 802f9be:	6078      	str	r0, [r7, #4]
 802f9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f9c2:	2300      	movs	r3, #0
 802f9c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f9c6:	683b      	ldr	r3, [r7, #0]
 802f9c8:	781b      	ldrb	r3, [r3, #0]
 802f9ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f9ce:	2b40      	cmp	r3, #64	; 0x40
 802f9d0:	d005      	beq.n	802f9de <USBD_StdItfReq+0x26>
 802f9d2:	2b40      	cmp	r3, #64	; 0x40
 802f9d4:	d852      	bhi.n	802fa7c <USBD_StdItfReq+0xc4>
 802f9d6:	2b00      	cmp	r3, #0
 802f9d8:	d001      	beq.n	802f9de <USBD_StdItfReq+0x26>
 802f9da:	2b20      	cmp	r3, #32
 802f9dc:	d14e      	bne.n	802fa7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802f9de:	687b      	ldr	r3, [r7, #4]
 802f9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f9e4:	b2db      	uxtb	r3, r3
 802f9e6:	3b01      	subs	r3, #1
 802f9e8:	2b02      	cmp	r3, #2
 802f9ea:	d840      	bhi.n	802fa6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802f9ec:	683b      	ldr	r3, [r7, #0]
 802f9ee:	889b      	ldrh	r3, [r3, #4]
 802f9f0:	b2db      	uxtb	r3, r3
 802f9f2:	2b01      	cmp	r3, #1
 802f9f4:	d836      	bhi.n	802fa64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 802f9f6:	683b      	ldr	r3, [r7, #0]
 802f9f8:	889b      	ldrh	r3, [r3, #4]
 802f9fa:	b2db      	uxtb	r3, r3
 802f9fc:	4619      	mov	r1, r3
 802f9fe:	6878      	ldr	r0, [r7, #4]
 802fa00:	f7ff fed9 	bl	802f7b6 <USBD_CoreFindIF>
 802fa04:	4603      	mov	r3, r0
 802fa06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fa08:	7bbb      	ldrb	r3, [r7, #14]
 802fa0a:	2bff      	cmp	r3, #255	; 0xff
 802fa0c:	d01d      	beq.n	802fa4a <USBD_StdItfReq+0x92>
 802fa0e:	7bbb      	ldrb	r3, [r7, #14]
 802fa10:	2b00      	cmp	r3, #0
 802fa12:	d11a      	bne.n	802fa4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 802fa14:	7bba      	ldrb	r2, [r7, #14]
 802fa16:	687b      	ldr	r3, [r7, #4]
 802fa18:	32ae      	adds	r2, #174	; 0xae
 802fa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa1e:	689b      	ldr	r3, [r3, #8]
 802fa20:	2b00      	cmp	r3, #0
 802fa22:	d00f      	beq.n	802fa44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 802fa24:	7bba      	ldrb	r2, [r7, #14]
 802fa26:	687b      	ldr	r3, [r7, #4]
 802fa28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fa2c:	7bba      	ldrb	r2, [r7, #14]
 802fa2e:	687b      	ldr	r3, [r7, #4]
 802fa30:	32ae      	adds	r2, #174	; 0xae
 802fa32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa36:	689b      	ldr	r3, [r3, #8]
 802fa38:	6839      	ldr	r1, [r7, #0]
 802fa3a:	6878      	ldr	r0, [r7, #4]
 802fa3c:	4798      	blx	r3
 802fa3e:	4603      	mov	r3, r0
 802fa40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa42:	e004      	b.n	802fa4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 802fa44:	2303      	movs	r3, #3
 802fa46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa48:	e001      	b.n	802fa4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 802fa4a:	2303      	movs	r3, #3
 802fa4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802fa4e:	683b      	ldr	r3, [r7, #0]
 802fa50:	88db      	ldrh	r3, [r3, #6]
 802fa52:	2b00      	cmp	r3, #0
 802fa54:	d110      	bne.n	802fa78 <USBD_StdItfReq+0xc0>
 802fa56:	7bfb      	ldrb	r3, [r7, #15]
 802fa58:	2b00      	cmp	r3, #0
 802fa5a:	d10d      	bne.n	802fa78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 802fa5c:	6878      	ldr	r0, [r7, #4]
 802fa5e:	f000 fdc7 	bl	80305f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802fa62:	e009      	b.n	802fa78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 802fa64:	6839      	ldr	r1, [r7, #0]
 802fa66:	6878      	ldr	r0, [r7, #4]
 802fa68:	f000 fcf7 	bl	803045a <USBD_CtlError>
          break;
 802fa6c:	e004      	b.n	802fa78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802fa6e:	6839      	ldr	r1, [r7, #0]
 802fa70:	6878      	ldr	r0, [r7, #4]
 802fa72:	f000 fcf2 	bl	803045a <USBD_CtlError>
          break;
 802fa76:	e000      	b.n	802fa7a <USBD_StdItfReq+0xc2>
          break;
 802fa78:	bf00      	nop
      }
      break;
 802fa7a:	e004      	b.n	802fa86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 802fa7c:	6839      	ldr	r1, [r7, #0]
 802fa7e:	6878      	ldr	r0, [r7, #4]
 802fa80:	f000 fceb 	bl	803045a <USBD_CtlError>
      break;
 802fa84:	bf00      	nop
  }

  return ret;
 802fa86:	7bfb      	ldrb	r3, [r7, #15]
}
 802fa88:	4618      	mov	r0, r3
 802fa8a:	3710      	adds	r7, #16
 802fa8c:	46bd      	mov	sp, r7
 802fa8e:	bd80      	pop	{r7, pc}

0802fa90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fa90:	b580      	push	{r7, lr}
 802fa92:	b084      	sub	sp, #16
 802fa94:	af00      	add	r7, sp, #0
 802fa96:	6078      	str	r0, [r7, #4]
 802fa98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 802fa9a:	2300      	movs	r3, #0
 802fa9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 802fa9e:	683b      	ldr	r3, [r7, #0]
 802faa0:	889b      	ldrh	r3, [r3, #4]
 802faa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802faa4:	683b      	ldr	r3, [r7, #0]
 802faa6:	781b      	ldrb	r3, [r3, #0]
 802faa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802faac:	2b40      	cmp	r3, #64	; 0x40
 802faae:	d007      	beq.n	802fac0 <USBD_StdEPReq+0x30>
 802fab0:	2b40      	cmp	r3, #64	; 0x40
 802fab2:	f200 817f 	bhi.w	802fdb4 <USBD_StdEPReq+0x324>
 802fab6:	2b00      	cmp	r3, #0
 802fab8:	d02a      	beq.n	802fb10 <USBD_StdEPReq+0x80>
 802faba:	2b20      	cmp	r3, #32
 802fabc:	f040 817a 	bne.w	802fdb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 802fac0:	7bbb      	ldrb	r3, [r7, #14]
 802fac2:	4619      	mov	r1, r3
 802fac4:	6878      	ldr	r0, [r7, #4]
 802fac6:	f7ff fe83 	bl	802f7d0 <USBD_CoreFindEP>
 802faca:	4603      	mov	r3, r0
 802facc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802face:	7b7b      	ldrb	r3, [r7, #13]
 802fad0:	2bff      	cmp	r3, #255	; 0xff
 802fad2:	f000 8174 	beq.w	802fdbe <USBD_StdEPReq+0x32e>
 802fad6:	7b7b      	ldrb	r3, [r7, #13]
 802fad8:	2b00      	cmp	r3, #0
 802fada:	f040 8170 	bne.w	802fdbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 802fade:	7b7a      	ldrb	r2, [r7, #13]
 802fae0:	687b      	ldr	r3, [r7, #4]
 802fae2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 802fae6:	7b7a      	ldrb	r2, [r7, #13]
 802fae8:	687b      	ldr	r3, [r7, #4]
 802faea:	32ae      	adds	r2, #174	; 0xae
 802faec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802faf0:	689b      	ldr	r3, [r3, #8]
 802faf2:	2b00      	cmp	r3, #0
 802faf4:	f000 8163 	beq.w	802fdbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 802faf8:	7b7a      	ldrb	r2, [r7, #13]
 802fafa:	687b      	ldr	r3, [r7, #4]
 802fafc:	32ae      	adds	r2, #174	; 0xae
 802fafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fb02:	689b      	ldr	r3, [r3, #8]
 802fb04:	6839      	ldr	r1, [r7, #0]
 802fb06:	6878      	ldr	r0, [r7, #4]
 802fb08:	4798      	blx	r3
 802fb0a:	4603      	mov	r3, r0
 802fb0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802fb0e:	e156      	b.n	802fdbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802fb10:	683b      	ldr	r3, [r7, #0]
 802fb12:	785b      	ldrb	r3, [r3, #1]
 802fb14:	2b03      	cmp	r3, #3
 802fb16:	d008      	beq.n	802fb2a <USBD_StdEPReq+0x9a>
 802fb18:	2b03      	cmp	r3, #3
 802fb1a:	f300 8145 	bgt.w	802fda8 <USBD_StdEPReq+0x318>
 802fb1e:	2b00      	cmp	r3, #0
 802fb20:	f000 809b 	beq.w	802fc5a <USBD_StdEPReq+0x1ca>
 802fb24:	2b01      	cmp	r3, #1
 802fb26:	d03c      	beq.n	802fba2 <USBD_StdEPReq+0x112>
 802fb28:	e13e      	b.n	802fda8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb30:	b2db      	uxtb	r3, r3
 802fb32:	2b02      	cmp	r3, #2
 802fb34:	d002      	beq.n	802fb3c <USBD_StdEPReq+0xac>
 802fb36:	2b03      	cmp	r3, #3
 802fb38:	d016      	beq.n	802fb68 <USBD_StdEPReq+0xd8>
 802fb3a:	e02c      	b.n	802fb96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fb3c:	7bbb      	ldrb	r3, [r7, #14]
 802fb3e:	2b00      	cmp	r3, #0
 802fb40:	d00d      	beq.n	802fb5e <USBD_StdEPReq+0xce>
 802fb42:	7bbb      	ldrb	r3, [r7, #14]
 802fb44:	2b80      	cmp	r3, #128	; 0x80
 802fb46:	d00a      	beq.n	802fb5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb48:	7bbb      	ldrb	r3, [r7, #14]
 802fb4a:	4619      	mov	r1, r3
 802fb4c:	6878      	ldr	r0, [r7, #4]
 802fb4e:	f001 fbcd 	bl	80312ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fb52:	2180      	movs	r1, #128	; 0x80
 802fb54:	6878      	ldr	r0, [r7, #4]
 802fb56:	f001 fbc9 	bl	80312ec <USBD_LL_StallEP>
 802fb5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fb5c:	e020      	b.n	802fba0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802fb5e:	6839      	ldr	r1, [r7, #0]
 802fb60:	6878      	ldr	r0, [r7, #4]
 802fb62:	f000 fc7a 	bl	803045a <USBD_CtlError>
              break;
 802fb66:	e01b      	b.n	802fba0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fb68:	683b      	ldr	r3, [r7, #0]
 802fb6a:	885b      	ldrh	r3, [r3, #2]
 802fb6c:	2b00      	cmp	r3, #0
 802fb6e:	d10e      	bne.n	802fb8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802fb70:	7bbb      	ldrb	r3, [r7, #14]
 802fb72:	2b00      	cmp	r3, #0
 802fb74:	d00b      	beq.n	802fb8e <USBD_StdEPReq+0xfe>
 802fb76:	7bbb      	ldrb	r3, [r7, #14]
 802fb78:	2b80      	cmp	r3, #128	; 0x80
 802fb7a:	d008      	beq.n	802fb8e <USBD_StdEPReq+0xfe>
 802fb7c:	683b      	ldr	r3, [r7, #0]
 802fb7e:	88db      	ldrh	r3, [r3, #6]
 802fb80:	2b00      	cmp	r3, #0
 802fb82:	d104      	bne.n	802fb8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb84:	7bbb      	ldrb	r3, [r7, #14]
 802fb86:	4619      	mov	r1, r3
 802fb88:	6878      	ldr	r0, [r7, #4]
 802fb8a:	f001 fbaf 	bl	80312ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802fb8e:	6878      	ldr	r0, [r7, #4]
 802fb90:	f000 fd2e 	bl	80305f0 <USBD_CtlSendStatus>

              break;
 802fb94:	e004      	b.n	802fba0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802fb96:	6839      	ldr	r1, [r7, #0]
 802fb98:	6878      	ldr	r0, [r7, #4]
 802fb9a:	f000 fc5e 	bl	803045a <USBD_CtlError>
              break;
 802fb9e:	bf00      	nop
          }
          break;
 802fba0:	e107      	b.n	802fdb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802fba2:	687b      	ldr	r3, [r7, #4]
 802fba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fba8:	b2db      	uxtb	r3, r3
 802fbaa:	2b02      	cmp	r3, #2
 802fbac:	d002      	beq.n	802fbb4 <USBD_StdEPReq+0x124>
 802fbae:	2b03      	cmp	r3, #3
 802fbb0:	d016      	beq.n	802fbe0 <USBD_StdEPReq+0x150>
 802fbb2:	e04b      	b.n	802fc4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fbb4:	7bbb      	ldrb	r3, [r7, #14]
 802fbb6:	2b00      	cmp	r3, #0
 802fbb8:	d00d      	beq.n	802fbd6 <USBD_StdEPReq+0x146>
 802fbba:	7bbb      	ldrb	r3, [r7, #14]
 802fbbc:	2b80      	cmp	r3, #128	; 0x80
 802fbbe:	d00a      	beq.n	802fbd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fbc0:	7bbb      	ldrb	r3, [r7, #14]
 802fbc2:	4619      	mov	r1, r3
 802fbc4:	6878      	ldr	r0, [r7, #4]
 802fbc6:	f001 fb91 	bl	80312ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fbca:	2180      	movs	r1, #128	; 0x80
 802fbcc:	6878      	ldr	r0, [r7, #4]
 802fbce:	f001 fb8d 	bl	80312ec <USBD_LL_StallEP>
 802fbd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fbd4:	e040      	b.n	802fc58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802fbd6:	6839      	ldr	r1, [r7, #0]
 802fbd8:	6878      	ldr	r0, [r7, #4]
 802fbda:	f000 fc3e 	bl	803045a <USBD_CtlError>
              break;
 802fbde:	e03b      	b.n	802fc58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fbe0:	683b      	ldr	r3, [r7, #0]
 802fbe2:	885b      	ldrh	r3, [r3, #2]
 802fbe4:	2b00      	cmp	r3, #0
 802fbe6:	d136      	bne.n	802fc56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802fbe8:	7bbb      	ldrb	r3, [r7, #14]
 802fbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fbee:	2b00      	cmp	r3, #0
 802fbf0:	d004      	beq.n	802fbfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802fbf2:	7bbb      	ldrb	r3, [r7, #14]
 802fbf4:	4619      	mov	r1, r3
 802fbf6:	6878      	ldr	r0, [r7, #4]
 802fbf8:	f001 fb97 	bl	803132a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802fbfc:	6878      	ldr	r0, [r7, #4]
 802fbfe:	f000 fcf7 	bl	80305f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802fc02:	7bbb      	ldrb	r3, [r7, #14]
 802fc04:	4619      	mov	r1, r3
 802fc06:	6878      	ldr	r0, [r7, #4]
 802fc08:	f7ff fde2 	bl	802f7d0 <USBD_CoreFindEP>
 802fc0c:	4603      	mov	r3, r0
 802fc0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fc10:	7b7b      	ldrb	r3, [r7, #13]
 802fc12:	2bff      	cmp	r3, #255	; 0xff
 802fc14:	d01f      	beq.n	802fc56 <USBD_StdEPReq+0x1c6>
 802fc16:	7b7b      	ldrb	r3, [r7, #13]
 802fc18:	2b00      	cmp	r3, #0
 802fc1a:	d11c      	bne.n	802fc56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 802fc1c:	7b7a      	ldrb	r2, [r7, #13]
 802fc1e:	687b      	ldr	r3, [r7, #4]
 802fc20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802fc24:	7b7a      	ldrb	r2, [r7, #13]
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	32ae      	adds	r2, #174	; 0xae
 802fc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc2e:	689b      	ldr	r3, [r3, #8]
 802fc30:	2b00      	cmp	r3, #0
 802fc32:	d010      	beq.n	802fc56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fc34:	7b7a      	ldrb	r2, [r7, #13]
 802fc36:	687b      	ldr	r3, [r7, #4]
 802fc38:	32ae      	adds	r2, #174	; 0xae
 802fc3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc3e:	689b      	ldr	r3, [r3, #8]
 802fc40:	6839      	ldr	r1, [r7, #0]
 802fc42:	6878      	ldr	r0, [r7, #4]
 802fc44:	4798      	blx	r3
 802fc46:	4603      	mov	r3, r0
 802fc48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 802fc4a:	e004      	b.n	802fc56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 802fc4c:	6839      	ldr	r1, [r7, #0]
 802fc4e:	6878      	ldr	r0, [r7, #4]
 802fc50:	f000 fc03 	bl	803045a <USBD_CtlError>
              break;
 802fc54:	e000      	b.n	802fc58 <USBD_StdEPReq+0x1c8>
              break;
 802fc56:	bf00      	nop
          }
          break;
 802fc58:	e0ab      	b.n	802fdb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802fc5a:	687b      	ldr	r3, [r7, #4]
 802fc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc60:	b2db      	uxtb	r3, r3
 802fc62:	2b02      	cmp	r3, #2
 802fc64:	d002      	beq.n	802fc6c <USBD_StdEPReq+0x1dc>
 802fc66:	2b03      	cmp	r3, #3
 802fc68:	d032      	beq.n	802fcd0 <USBD_StdEPReq+0x240>
 802fc6a:	e097      	b.n	802fd9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fc6c:	7bbb      	ldrb	r3, [r7, #14]
 802fc6e:	2b00      	cmp	r3, #0
 802fc70:	d007      	beq.n	802fc82 <USBD_StdEPReq+0x1f2>
 802fc72:	7bbb      	ldrb	r3, [r7, #14]
 802fc74:	2b80      	cmp	r3, #128	; 0x80
 802fc76:	d004      	beq.n	802fc82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 802fc78:	6839      	ldr	r1, [r7, #0]
 802fc7a:	6878      	ldr	r0, [r7, #4]
 802fc7c:	f000 fbed 	bl	803045a <USBD_CtlError>
                break;
 802fc80:	e091      	b.n	802fda6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fc82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fc86:	2b00      	cmp	r3, #0
 802fc88:	da0b      	bge.n	802fca2 <USBD_StdEPReq+0x212>
 802fc8a:	7bbb      	ldrb	r3, [r7, #14]
 802fc8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fc90:	4613      	mov	r3, r2
 802fc92:	009b      	lsls	r3, r3, #2
 802fc94:	4413      	add	r3, r2
 802fc96:	009b      	lsls	r3, r3, #2
 802fc98:	3310      	adds	r3, #16
 802fc9a:	687a      	ldr	r2, [r7, #4]
 802fc9c:	4413      	add	r3, r2
 802fc9e:	3304      	adds	r3, #4
 802fca0:	e00b      	b.n	802fcba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fca2:	7bbb      	ldrb	r3, [r7, #14]
 802fca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fca8:	4613      	mov	r3, r2
 802fcaa:	009b      	lsls	r3, r3, #2
 802fcac:	4413      	add	r3, r2
 802fcae:	009b      	lsls	r3, r3, #2
 802fcb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fcb4:	687a      	ldr	r2, [r7, #4]
 802fcb6:	4413      	add	r3, r2
 802fcb8:	3304      	adds	r3, #4
 802fcba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802fcbc:	68bb      	ldr	r3, [r7, #8]
 802fcbe:	2200      	movs	r2, #0
 802fcc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fcc2:	68bb      	ldr	r3, [r7, #8]
 802fcc4:	2202      	movs	r2, #2
 802fcc6:	4619      	mov	r1, r3
 802fcc8:	6878      	ldr	r0, [r7, #4]
 802fcca:	f000 fc37 	bl	803053c <USBD_CtlSendData>
              break;
 802fcce:	e06a      	b.n	802fda6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802fcd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fcd4:	2b00      	cmp	r3, #0
 802fcd6:	da11      	bge.n	802fcfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802fcd8:	7bbb      	ldrb	r3, [r7, #14]
 802fcda:	f003 020f 	and.w	r2, r3, #15
 802fcde:	6879      	ldr	r1, [r7, #4]
 802fce0:	4613      	mov	r3, r2
 802fce2:	009b      	lsls	r3, r3, #2
 802fce4:	4413      	add	r3, r2
 802fce6:	009b      	lsls	r3, r3, #2
 802fce8:	440b      	add	r3, r1
 802fcea:	3324      	adds	r3, #36	; 0x24
 802fcec:	881b      	ldrh	r3, [r3, #0]
 802fcee:	2b00      	cmp	r3, #0
 802fcf0:	d117      	bne.n	802fd22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fcf2:	6839      	ldr	r1, [r7, #0]
 802fcf4:	6878      	ldr	r0, [r7, #4]
 802fcf6:	f000 fbb0 	bl	803045a <USBD_CtlError>
                  break;
 802fcfa:	e054      	b.n	802fda6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802fcfc:	7bbb      	ldrb	r3, [r7, #14]
 802fcfe:	f003 020f 	and.w	r2, r3, #15
 802fd02:	6879      	ldr	r1, [r7, #4]
 802fd04:	4613      	mov	r3, r2
 802fd06:	009b      	lsls	r3, r3, #2
 802fd08:	4413      	add	r3, r2
 802fd0a:	009b      	lsls	r3, r3, #2
 802fd0c:	440b      	add	r3, r1
 802fd0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802fd12:	881b      	ldrh	r3, [r3, #0]
 802fd14:	2b00      	cmp	r3, #0
 802fd16:	d104      	bne.n	802fd22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fd18:	6839      	ldr	r1, [r7, #0]
 802fd1a:	6878      	ldr	r0, [r7, #4]
 802fd1c:	f000 fb9d 	bl	803045a <USBD_CtlError>
                  break;
 802fd20:	e041      	b.n	802fda6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fd26:	2b00      	cmp	r3, #0
 802fd28:	da0b      	bge.n	802fd42 <USBD_StdEPReq+0x2b2>
 802fd2a:	7bbb      	ldrb	r3, [r7, #14]
 802fd2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fd30:	4613      	mov	r3, r2
 802fd32:	009b      	lsls	r3, r3, #2
 802fd34:	4413      	add	r3, r2
 802fd36:	009b      	lsls	r3, r3, #2
 802fd38:	3310      	adds	r3, #16
 802fd3a:	687a      	ldr	r2, [r7, #4]
 802fd3c:	4413      	add	r3, r2
 802fd3e:	3304      	adds	r3, #4
 802fd40:	e00b      	b.n	802fd5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fd42:	7bbb      	ldrb	r3, [r7, #14]
 802fd44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd48:	4613      	mov	r3, r2
 802fd4a:	009b      	lsls	r3, r3, #2
 802fd4c:	4413      	add	r3, r2
 802fd4e:	009b      	lsls	r3, r3, #2
 802fd50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fd54:	687a      	ldr	r2, [r7, #4]
 802fd56:	4413      	add	r3, r2
 802fd58:	3304      	adds	r3, #4
 802fd5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802fd5c:	7bbb      	ldrb	r3, [r7, #14]
 802fd5e:	2b00      	cmp	r3, #0
 802fd60:	d002      	beq.n	802fd68 <USBD_StdEPReq+0x2d8>
 802fd62:	7bbb      	ldrb	r3, [r7, #14]
 802fd64:	2b80      	cmp	r3, #128	; 0x80
 802fd66:	d103      	bne.n	802fd70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 802fd68:	68bb      	ldr	r3, [r7, #8]
 802fd6a:	2200      	movs	r2, #0
 802fd6c:	601a      	str	r2, [r3, #0]
 802fd6e:	e00e      	b.n	802fd8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802fd70:	7bbb      	ldrb	r3, [r7, #14]
 802fd72:	4619      	mov	r1, r3
 802fd74:	6878      	ldr	r0, [r7, #4]
 802fd76:	f001 faf7 	bl	8031368 <USBD_LL_IsStallEP>
 802fd7a:	4603      	mov	r3, r0
 802fd7c:	2b00      	cmp	r3, #0
 802fd7e:	d003      	beq.n	802fd88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802fd80:	68bb      	ldr	r3, [r7, #8]
 802fd82:	2201      	movs	r2, #1
 802fd84:	601a      	str	r2, [r3, #0]
 802fd86:	e002      	b.n	802fd8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 802fd88:	68bb      	ldr	r3, [r7, #8]
 802fd8a:	2200      	movs	r2, #0
 802fd8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fd8e:	68bb      	ldr	r3, [r7, #8]
 802fd90:	2202      	movs	r2, #2
 802fd92:	4619      	mov	r1, r3
 802fd94:	6878      	ldr	r0, [r7, #4]
 802fd96:	f000 fbd1 	bl	803053c <USBD_CtlSendData>
              break;
 802fd9a:	e004      	b.n	802fda6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802fd9c:	6839      	ldr	r1, [r7, #0]
 802fd9e:	6878      	ldr	r0, [r7, #4]
 802fda0:	f000 fb5b 	bl	803045a <USBD_CtlError>
              break;
 802fda4:	bf00      	nop
          }
          break;
 802fda6:	e004      	b.n	802fdb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 802fda8:	6839      	ldr	r1, [r7, #0]
 802fdaa:	6878      	ldr	r0, [r7, #4]
 802fdac:	f000 fb55 	bl	803045a <USBD_CtlError>
          break;
 802fdb0:	bf00      	nop
      }
      break;
 802fdb2:	e005      	b.n	802fdc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802fdb4:	6839      	ldr	r1, [r7, #0]
 802fdb6:	6878      	ldr	r0, [r7, #4]
 802fdb8:	f000 fb4f 	bl	803045a <USBD_CtlError>
      break;
 802fdbc:	e000      	b.n	802fdc0 <USBD_StdEPReq+0x330>
      break;
 802fdbe:	bf00      	nop
  }

  return ret;
 802fdc0:	7bfb      	ldrb	r3, [r7, #15]
}
 802fdc2:	4618      	mov	r0, r3
 802fdc4:	3710      	adds	r7, #16
 802fdc6:	46bd      	mov	sp, r7
 802fdc8:	bd80      	pop	{r7, pc}
	...

0802fdcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fdcc:	b580      	push	{r7, lr}
 802fdce:	b084      	sub	sp, #16
 802fdd0:	af00      	add	r7, sp, #0
 802fdd2:	6078      	str	r0, [r7, #4]
 802fdd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802fdd6:	2300      	movs	r3, #0
 802fdd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802fdda:	2300      	movs	r3, #0
 802fddc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802fdde:	2300      	movs	r3, #0
 802fde0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802fde2:	683b      	ldr	r3, [r7, #0]
 802fde4:	885b      	ldrh	r3, [r3, #2]
 802fde6:	0a1b      	lsrs	r3, r3, #8
 802fde8:	b29b      	uxth	r3, r3
 802fdea:	3b01      	subs	r3, #1
 802fdec:	2b06      	cmp	r3, #6
 802fdee:	f200 8128 	bhi.w	8030042 <USBD_GetDescriptor+0x276>
 802fdf2:	a201      	add	r2, pc, #4	; (adr r2, 802fdf8 <USBD_GetDescriptor+0x2c>)
 802fdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fdf8:	0802fe15 	.word	0x0802fe15
 802fdfc:	0802fe2d 	.word	0x0802fe2d
 802fe00:	0802fe6d 	.word	0x0802fe6d
 802fe04:	08030043 	.word	0x08030043
 802fe08:	08030043 	.word	0x08030043
 802fe0c:	0802ffe3 	.word	0x0802ffe3
 802fe10:	0803000f 	.word	0x0803000f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802fe14:	687b      	ldr	r3, [r7, #4]
 802fe16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe1a:	681b      	ldr	r3, [r3, #0]
 802fe1c:	687a      	ldr	r2, [r7, #4]
 802fe1e:	7c12      	ldrb	r2, [r2, #16]
 802fe20:	f107 0108 	add.w	r1, r7, #8
 802fe24:	4610      	mov	r0, r2
 802fe26:	4798      	blx	r3
 802fe28:	60f8      	str	r0, [r7, #12]
      break;
 802fe2a:	e112      	b.n	8030052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fe2c:	687b      	ldr	r3, [r7, #4]
 802fe2e:	7c1b      	ldrb	r3, [r3, #16]
 802fe30:	2b00      	cmp	r3, #0
 802fe32:	d10d      	bne.n	802fe50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 802fe34:	687b      	ldr	r3, [r7, #4]
 802fe36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fe3c:	f107 0208 	add.w	r2, r7, #8
 802fe40:	4610      	mov	r0, r2
 802fe42:	4798      	blx	r3
 802fe44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe46:	68fb      	ldr	r3, [r7, #12]
 802fe48:	3301      	adds	r3, #1
 802fe4a:	2202      	movs	r2, #2
 802fe4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802fe4e:	e100      	b.n	8030052 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802fe50:	687b      	ldr	r3, [r7, #4]
 802fe52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fe58:	f107 0208 	add.w	r2, r7, #8
 802fe5c:	4610      	mov	r0, r2
 802fe5e:	4798      	blx	r3
 802fe60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe62:	68fb      	ldr	r3, [r7, #12]
 802fe64:	3301      	adds	r3, #1
 802fe66:	2202      	movs	r2, #2
 802fe68:	701a      	strb	r2, [r3, #0]
      break;
 802fe6a:	e0f2      	b.n	8030052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802fe6c:	683b      	ldr	r3, [r7, #0]
 802fe6e:	885b      	ldrh	r3, [r3, #2]
 802fe70:	b2db      	uxtb	r3, r3
 802fe72:	2b05      	cmp	r3, #5
 802fe74:	f200 80ac 	bhi.w	802ffd0 <USBD_GetDescriptor+0x204>
 802fe78:	a201      	add	r2, pc, #4	; (adr r2, 802fe80 <USBD_GetDescriptor+0xb4>)
 802fe7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe7e:	bf00      	nop
 802fe80:	0802fe99 	.word	0x0802fe99
 802fe84:	0802fecd 	.word	0x0802fecd
 802fe88:	0802ff01 	.word	0x0802ff01
 802fe8c:	0802ff35 	.word	0x0802ff35
 802fe90:	0802ff69 	.word	0x0802ff69
 802fe94:	0802ff9d 	.word	0x0802ff9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802fe98:	687b      	ldr	r3, [r7, #4]
 802fe9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe9e:	685b      	ldr	r3, [r3, #4]
 802fea0:	2b00      	cmp	r3, #0
 802fea2:	d00b      	beq.n	802febc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802fea4:	687b      	ldr	r3, [r7, #4]
 802fea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802feaa:	685b      	ldr	r3, [r3, #4]
 802feac:	687a      	ldr	r2, [r7, #4]
 802feae:	7c12      	ldrb	r2, [r2, #16]
 802feb0:	f107 0108 	add.w	r1, r7, #8
 802feb4:	4610      	mov	r0, r2
 802feb6:	4798      	blx	r3
 802feb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802feba:	e091      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802febc:	6839      	ldr	r1, [r7, #0]
 802febe:	6878      	ldr	r0, [r7, #4]
 802fec0:	f000 facb 	bl	803045a <USBD_CtlError>
            err++;
 802fec4:	7afb      	ldrb	r3, [r7, #11]
 802fec6:	3301      	adds	r3, #1
 802fec8:	72fb      	strb	r3, [r7, #11]
          break;
 802feca:	e089      	b.n	802ffe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802fecc:	687b      	ldr	r3, [r7, #4]
 802fece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fed2:	689b      	ldr	r3, [r3, #8]
 802fed4:	2b00      	cmp	r3, #0
 802fed6:	d00b      	beq.n	802fef0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802fed8:	687b      	ldr	r3, [r7, #4]
 802feda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fede:	689b      	ldr	r3, [r3, #8]
 802fee0:	687a      	ldr	r2, [r7, #4]
 802fee2:	7c12      	ldrb	r2, [r2, #16]
 802fee4:	f107 0108 	add.w	r1, r7, #8
 802fee8:	4610      	mov	r0, r2
 802feea:	4798      	blx	r3
 802feec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802feee:	e077      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802fef0:	6839      	ldr	r1, [r7, #0]
 802fef2:	6878      	ldr	r0, [r7, #4]
 802fef4:	f000 fab1 	bl	803045a <USBD_CtlError>
            err++;
 802fef8:	7afb      	ldrb	r3, [r7, #11]
 802fefa:	3301      	adds	r3, #1
 802fefc:	72fb      	strb	r3, [r7, #11]
          break;
 802fefe:	e06f      	b.n	802ffe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802ff00:	687b      	ldr	r3, [r7, #4]
 802ff02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff06:	68db      	ldr	r3, [r3, #12]
 802ff08:	2b00      	cmp	r3, #0
 802ff0a:	d00b      	beq.n	802ff24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802ff0c:	687b      	ldr	r3, [r7, #4]
 802ff0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff12:	68db      	ldr	r3, [r3, #12]
 802ff14:	687a      	ldr	r2, [r7, #4]
 802ff16:	7c12      	ldrb	r2, [r2, #16]
 802ff18:	f107 0108 	add.w	r1, r7, #8
 802ff1c:	4610      	mov	r0, r2
 802ff1e:	4798      	blx	r3
 802ff20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff22:	e05d      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff24:	6839      	ldr	r1, [r7, #0]
 802ff26:	6878      	ldr	r0, [r7, #4]
 802ff28:	f000 fa97 	bl	803045a <USBD_CtlError>
            err++;
 802ff2c:	7afb      	ldrb	r3, [r7, #11]
 802ff2e:	3301      	adds	r3, #1
 802ff30:	72fb      	strb	r3, [r7, #11]
          break;
 802ff32:	e055      	b.n	802ffe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802ff34:	687b      	ldr	r3, [r7, #4]
 802ff36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff3a:	691b      	ldr	r3, [r3, #16]
 802ff3c:	2b00      	cmp	r3, #0
 802ff3e:	d00b      	beq.n	802ff58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802ff40:	687b      	ldr	r3, [r7, #4]
 802ff42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff46:	691b      	ldr	r3, [r3, #16]
 802ff48:	687a      	ldr	r2, [r7, #4]
 802ff4a:	7c12      	ldrb	r2, [r2, #16]
 802ff4c:	f107 0108 	add.w	r1, r7, #8
 802ff50:	4610      	mov	r0, r2
 802ff52:	4798      	blx	r3
 802ff54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff56:	e043      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff58:	6839      	ldr	r1, [r7, #0]
 802ff5a:	6878      	ldr	r0, [r7, #4]
 802ff5c:	f000 fa7d 	bl	803045a <USBD_CtlError>
            err++;
 802ff60:	7afb      	ldrb	r3, [r7, #11]
 802ff62:	3301      	adds	r3, #1
 802ff64:	72fb      	strb	r3, [r7, #11]
          break;
 802ff66:	e03b      	b.n	802ffe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802ff68:	687b      	ldr	r3, [r7, #4]
 802ff6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff6e:	695b      	ldr	r3, [r3, #20]
 802ff70:	2b00      	cmp	r3, #0
 802ff72:	d00b      	beq.n	802ff8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802ff74:	687b      	ldr	r3, [r7, #4]
 802ff76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff7a:	695b      	ldr	r3, [r3, #20]
 802ff7c:	687a      	ldr	r2, [r7, #4]
 802ff7e:	7c12      	ldrb	r2, [r2, #16]
 802ff80:	f107 0108 	add.w	r1, r7, #8
 802ff84:	4610      	mov	r0, r2
 802ff86:	4798      	blx	r3
 802ff88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff8a:	e029      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff8c:	6839      	ldr	r1, [r7, #0]
 802ff8e:	6878      	ldr	r0, [r7, #4]
 802ff90:	f000 fa63 	bl	803045a <USBD_CtlError>
            err++;
 802ff94:	7afb      	ldrb	r3, [r7, #11]
 802ff96:	3301      	adds	r3, #1
 802ff98:	72fb      	strb	r3, [r7, #11]
          break;
 802ff9a:	e021      	b.n	802ffe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802ff9c:	687b      	ldr	r3, [r7, #4]
 802ff9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ffa2:	699b      	ldr	r3, [r3, #24]
 802ffa4:	2b00      	cmp	r3, #0
 802ffa6:	d00b      	beq.n	802ffc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802ffa8:	687b      	ldr	r3, [r7, #4]
 802ffaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ffae:	699b      	ldr	r3, [r3, #24]
 802ffb0:	687a      	ldr	r2, [r7, #4]
 802ffb2:	7c12      	ldrb	r2, [r2, #16]
 802ffb4:	f107 0108 	add.w	r1, r7, #8
 802ffb8:	4610      	mov	r0, r2
 802ffba:	4798      	blx	r3
 802ffbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ffbe:	e00f      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ffc0:	6839      	ldr	r1, [r7, #0]
 802ffc2:	6878      	ldr	r0, [r7, #4]
 802ffc4:	f000 fa49 	bl	803045a <USBD_CtlError>
            err++;
 802ffc8:	7afb      	ldrb	r3, [r7, #11]
 802ffca:	3301      	adds	r3, #1
 802ffcc:	72fb      	strb	r3, [r7, #11]
          break;
 802ffce:	e007      	b.n	802ffe0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802ffd0:	6839      	ldr	r1, [r7, #0]
 802ffd2:	6878      	ldr	r0, [r7, #4]
 802ffd4:	f000 fa41 	bl	803045a <USBD_CtlError>
          err++;
 802ffd8:	7afb      	ldrb	r3, [r7, #11]
 802ffda:	3301      	adds	r3, #1
 802ffdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802ffde:	bf00      	nop
      }
      break;
 802ffe0:	e037      	b.n	8030052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ffe2:	687b      	ldr	r3, [r7, #4]
 802ffe4:	7c1b      	ldrb	r3, [r3, #16]
 802ffe6:	2b00      	cmp	r3, #0
 802ffe8:	d109      	bne.n	802fffe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 802ffea:	687b      	ldr	r3, [r7, #4]
 802ffec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fff2:	f107 0208 	add.w	r2, r7, #8
 802fff6:	4610      	mov	r0, r2
 802fff8:	4798      	blx	r3
 802fffa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802fffc:	e029      	b.n	8030052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 802fffe:	6839      	ldr	r1, [r7, #0]
 8030000:	6878      	ldr	r0, [r7, #4]
 8030002:	f000 fa2a 	bl	803045a <USBD_CtlError>
        err++;
 8030006:	7afb      	ldrb	r3, [r7, #11]
 8030008:	3301      	adds	r3, #1
 803000a:	72fb      	strb	r3, [r7, #11]
      break;
 803000c:	e021      	b.n	8030052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	7c1b      	ldrb	r3, [r3, #16]
 8030012:	2b00      	cmp	r3, #0
 8030014:	d10d      	bne.n	8030032 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8030016:	687b      	ldr	r3, [r7, #4]
 8030018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803001c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803001e:	f107 0208 	add.w	r2, r7, #8
 8030022:	4610      	mov	r0, r2
 8030024:	4798      	blx	r3
 8030026:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8030028:	68fb      	ldr	r3, [r7, #12]
 803002a:	3301      	adds	r3, #1
 803002c:	2207      	movs	r2, #7
 803002e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8030030:	e00f      	b.n	8030052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8030032:	6839      	ldr	r1, [r7, #0]
 8030034:	6878      	ldr	r0, [r7, #4]
 8030036:	f000 fa10 	bl	803045a <USBD_CtlError>
        err++;
 803003a:	7afb      	ldrb	r3, [r7, #11]
 803003c:	3301      	adds	r3, #1
 803003e:	72fb      	strb	r3, [r7, #11]
      break;
 8030040:	e007      	b.n	8030052 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8030042:	6839      	ldr	r1, [r7, #0]
 8030044:	6878      	ldr	r0, [r7, #4]
 8030046:	f000 fa08 	bl	803045a <USBD_CtlError>
      err++;
 803004a:	7afb      	ldrb	r3, [r7, #11]
 803004c:	3301      	adds	r3, #1
 803004e:	72fb      	strb	r3, [r7, #11]
      break;
 8030050:	bf00      	nop
  }

  if (err != 0U)
 8030052:	7afb      	ldrb	r3, [r7, #11]
 8030054:	2b00      	cmp	r3, #0
 8030056:	d11e      	bne.n	8030096 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8030058:	683b      	ldr	r3, [r7, #0]
 803005a:	88db      	ldrh	r3, [r3, #6]
 803005c:	2b00      	cmp	r3, #0
 803005e:	d016      	beq.n	803008e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8030060:	893b      	ldrh	r3, [r7, #8]
 8030062:	2b00      	cmp	r3, #0
 8030064:	d00e      	beq.n	8030084 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8030066:	683b      	ldr	r3, [r7, #0]
 8030068:	88da      	ldrh	r2, [r3, #6]
 803006a:	893b      	ldrh	r3, [r7, #8]
 803006c:	4293      	cmp	r3, r2
 803006e:	bf28      	it	cs
 8030070:	4613      	movcs	r3, r2
 8030072:	b29b      	uxth	r3, r3
 8030074:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8030076:	893b      	ldrh	r3, [r7, #8]
 8030078:	461a      	mov	r2, r3
 803007a:	68f9      	ldr	r1, [r7, #12]
 803007c:	6878      	ldr	r0, [r7, #4]
 803007e:	f000 fa5d 	bl	803053c <USBD_CtlSendData>
 8030082:	e009      	b.n	8030098 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8030084:	6839      	ldr	r1, [r7, #0]
 8030086:	6878      	ldr	r0, [r7, #4]
 8030088:	f000 f9e7 	bl	803045a <USBD_CtlError>
 803008c:	e004      	b.n	8030098 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803008e:	6878      	ldr	r0, [r7, #4]
 8030090:	f000 faae 	bl	80305f0 <USBD_CtlSendStatus>
 8030094:	e000      	b.n	8030098 <USBD_GetDescriptor+0x2cc>
    return;
 8030096:	bf00      	nop
  }
}
 8030098:	3710      	adds	r7, #16
 803009a:	46bd      	mov	sp, r7
 803009c:	bd80      	pop	{r7, pc}
 803009e:	bf00      	nop

080300a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80300a0:	b580      	push	{r7, lr}
 80300a2:	b084      	sub	sp, #16
 80300a4:	af00      	add	r7, sp, #0
 80300a6:	6078      	str	r0, [r7, #4]
 80300a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80300aa:	683b      	ldr	r3, [r7, #0]
 80300ac:	889b      	ldrh	r3, [r3, #4]
 80300ae:	2b00      	cmp	r3, #0
 80300b0:	d131      	bne.n	8030116 <USBD_SetAddress+0x76>
 80300b2:	683b      	ldr	r3, [r7, #0]
 80300b4:	88db      	ldrh	r3, [r3, #6]
 80300b6:	2b00      	cmp	r3, #0
 80300b8:	d12d      	bne.n	8030116 <USBD_SetAddress+0x76>
 80300ba:	683b      	ldr	r3, [r7, #0]
 80300bc:	885b      	ldrh	r3, [r3, #2]
 80300be:	2b7f      	cmp	r3, #127	; 0x7f
 80300c0:	d829      	bhi.n	8030116 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80300c2:	683b      	ldr	r3, [r7, #0]
 80300c4:	885b      	ldrh	r3, [r3, #2]
 80300c6:	b2db      	uxtb	r3, r3
 80300c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80300cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300ce:	687b      	ldr	r3, [r7, #4]
 80300d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80300d4:	b2db      	uxtb	r3, r3
 80300d6:	2b03      	cmp	r3, #3
 80300d8:	d104      	bne.n	80300e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80300da:	6839      	ldr	r1, [r7, #0]
 80300dc:	6878      	ldr	r0, [r7, #4]
 80300de:	f000 f9bc 	bl	803045a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300e2:	e01d      	b.n	8030120 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80300e4:	687b      	ldr	r3, [r7, #4]
 80300e6:	7bfa      	ldrb	r2, [r7, #15]
 80300e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80300ec:	7bfb      	ldrb	r3, [r7, #15]
 80300ee:	4619      	mov	r1, r3
 80300f0:	6878      	ldr	r0, [r7, #4]
 80300f2:	f001 f965 	bl	80313c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80300f6:	6878      	ldr	r0, [r7, #4]
 80300f8:	f000 fa7a 	bl	80305f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80300fc:	7bfb      	ldrb	r3, [r7, #15]
 80300fe:	2b00      	cmp	r3, #0
 8030100:	d004      	beq.n	803010c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8030102:	687b      	ldr	r3, [r7, #4]
 8030104:	2202      	movs	r2, #2
 8030106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803010a:	e009      	b.n	8030120 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803010c:	687b      	ldr	r3, [r7, #4]
 803010e:	2201      	movs	r2, #1
 8030110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8030114:	e004      	b.n	8030120 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8030116:	6839      	ldr	r1, [r7, #0]
 8030118:	6878      	ldr	r0, [r7, #4]
 803011a:	f000 f99e 	bl	803045a <USBD_CtlError>
  }
}
 803011e:	bf00      	nop
 8030120:	bf00      	nop
 8030122:	3710      	adds	r7, #16
 8030124:	46bd      	mov	sp, r7
 8030126:	bd80      	pop	{r7, pc}

08030128 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030128:	b580      	push	{r7, lr}
 803012a:	b084      	sub	sp, #16
 803012c:	af00      	add	r7, sp, #0
 803012e:	6078      	str	r0, [r7, #4]
 8030130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8030132:	2300      	movs	r3, #0
 8030134:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8030136:	683b      	ldr	r3, [r7, #0]
 8030138:	885b      	ldrh	r3, [r3, #2]
 803013a:	b2da      	uxtb	r2, r3
 803013c:	4b4e      	ldr	r3, [pc, #312]	; (8030278 <USBD_SetConfig+0x150>)
 803013e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8030140:	4b4d      	ldr	r3, [pc, #308]	; (8030278 <USBD_SetConfig+0x150>)
 8030142:	781b      	ldrb	r3, [r3, #0]
 8030144:	2b01      	cmp	r3, #1
 8030146:	d905      	bls.n	8030154 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8030148:	6839      	ldr	r1, [r7, #0]
 803014a:	6878      	ldr	r0, [r7, #4]
 803014c:	f000 f985 	bl	803045a <USBD_CtlError>
    return USBD_FAIL;
 8030150:	2303      	movs	r3, #3
 8030152:	e08c      	b.n	803026e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8030154:	687b      	ldr	r3, [r7, #4]
 8030156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803015a:	b2db      	uxtb	r3, r3
 803015c:	2b02      	cmp	r3, #2
 803015e:	d002      	beq.n	8030166 <USBD_SetConfig+0x3e>
 8030160:	2b03      	cmp	r3, #3
 8030162:	d029      	beq.n	80301b8 <USBD_SetConfig+0x90>
 8030164:	e075      	b.n	8030252 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8030166:	4b44      	ldr	r3, [pc, #272]	; (8030278 <USBD_SetConfig+0x150>)
 8030168:	781b      	ldrb	r3, [r3, #0]
 803016a:	2b00      	cmp	r3, #0
 803016c:	d020      	beq.n	80301b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803016e:	4b42      	ldr	r3, [pc, #264]	; (8030278 <USBD_SetConfig+0x150>)
 8030170:	781b      	ldrb	r3, [r3, #0]
 8030172:	461a      	mov	r2, r3
 8030174:	687b      	ldr	r3, [r7, #4]
 8030176:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8030178:	4b3f      	ldr	r3, [pc, #252]	; (8030278 <USBD_SetConfig+0x150>)
 803017a:	781b      	ldrb	r3, [r3, #0]
 803017c:	4619      	mov	r1, r3
 803017e:	6878      	ldr	r0, [r7, #4]
 8030180:	f7fe ffe7 	bl	802f152 <USBD_SetClassConfig>
 8030184:	4603      	mov	r3, r0
 8030186:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8030188:	7bfb      	ldrb	r3, [r7, #15]
 803018a:	2b00      	cmp	r3, #0
 803018c:	d008      	beq.n	80301a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803018e:	6839      	ldr	r1, [r7, #0]
 8030190:	6878      	ldr	r0, [r7, #4]
 8030192:	f000 f962 	bl	803045a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030196:	687b      	ldr	r3, [r7, #4]
 8030198:	2202      	movs	r2, #2
 803019a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803019e:	e065      	b.n	803026c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80301a0:	6878      	ldr	r0, [r7, #4]
 80301a2:	f000 fa25 	bl	80305f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80301a6:	687b      	ldr	r3, [r7, #4]
 80301a8:	2203      	movs	r2, #3
 80301aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80301ae:	e05d      	b.n	803026c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80301b0:	6878      	ldr	r0, [r7, #4]
 80301b2:	f000 fa1d 	bl	80305f0 <USBD_CtlSendStatus>
      break;
 80301b6:	e059      	b.n	803026c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80301b8:	4b2f      	ldr	r3, [pc, #188]	; (8030278 <USBD_SetConfig+0x150>)
 80301ba:	781b      	ldrb	r3, [r3, #0]
 80301bc:	2b00      	cmp	r3, #0
 80301be:	d112      	bne.n	80301e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80301c0:	687b      	ldr	r3, [r7, #4]
 80301c2:	2202      	movs	r2, #2
 80301c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80301c8:	4b2b      	ldr	r3, [pc, #172]	; (8030278 <USBD_SetConfig+0x150>)
 80301ca:	781b      	ldrb	r3, [r3, #0]
 80301cc:	461a      	mov	r2, r3
 80301ce:	687b      	ldr	r3, [r7, #4]
 80301d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80301d2:	4b29      	ldr	r3, [pc, #164]	; (8030278 <USBD_SetConfig+0x150>)
 80301d4:	781b      	ldrb	r3, [r3, #0]
 80301d6:	4619      	mov	r1, r3
 80301d8:	6878      	ldr	r0, [r7, #4]
 80301da:	f7fe ffd6 	bl	802f18a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80301de:	6878      	ldr	r0, [r7, #4]
 80301e0:	f000 fa06 	bl	80305f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80301e4:	e042      	b.n	803026c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80301e6:	4b24      	ldr	r3, [pc, #144]	; (8030278 <USBD_SetConfig+0x150>)
 80301e8:	781b      	ldrb	r3, [r3, #0]
 80301ea:	461a      	mov	r2, r3
 80301ec:	687b      	ldr	r3, [r7, #4]
 80301ee:	685b      	ldr	r3, [r3, #4]
 80301f0:	429a      	cmp	r2, r3
 80301f2:	d02a      	beq.n	803024a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80301f4:	687b      	ldr	r3, [r7, #4]
 80301f6:	685b      	ldr	r3, [r3, #4]
 80301f8:	b2db      	uxtb	r3, r3
 80301fa:	4619      	mov	r1, r3
 80301fc:	6878      	ldr	r0, [r7, #4]
 80301fe:	f7fe ffc4 	bl	802f18a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8030202:	4b1d      	ldr	r3, [pc, #116]	; (8030278 <USBD_SetConfig+0x150>)
 8030204:	781b      	ldrb	r3, [r3, #0]
 8030206:	461a      	mov	r2, r3
 8030208:	687b      	ldr	r3, [r7, #4]
 803020a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803020c:	4b1a      	ldr	r3, [pc, #104]	; (8030278 <USBD_SetConfig+0x150>)
 803020e:	781b      	ldrb	r3, [r3, #0]
 8030210:	4619      	mov	r1, r3
 8030212:	6878      	ldr	r0, [r7, #4]
 8030214:	f7fe ff9d 	bl	802f152 <USBD_SetClassConfig>
 8030218:	4603      	mov	r3, r0
 803021a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803021c:	7bfb      	ldrb	r3, [r7, #15]
 803021e:	2b00      	cmp	r3, #0
 8030220:	d00f      	beq.n	8030242 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8030222:	6839      	ldr	r1, [r7, #0]
 8030224:	6878      	ldr	r0, [r7, #4]
 8030226:	f000 f918 	bl	803045a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803022a:	687b      	ldr	r3, [r7, #4]
 803022c:	685b      	ldr	r3, [r3, #4]
 803022e:	b2db      	uxtb	r3, r3
 8030230:	4619      	mov	r1, r3
 8030232:	6878      	ldr	r0, [r7, #4]
 8030234:	f7fe ffa9 	bl	802f18a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030238:	687b      	ldr	r3, [r7, #4]
 803023a:	2202      	movs	r2, #2
 803023c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8030240:	e014      	b.n	803026c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030242:	6878      	ldr	r0, [r7, #4]
 8030244:	f000 f9d4 	bl	80305f0 <USBD_CtlSendStatus>
      break;
 8030248:	e010      	b.n	803026c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803024a:	6878      	ldr	r0, [r7, #4]
 803024c:	f000 f9d0 	bl	80305f0 <USBD_CtlSendStatus>
      break;
 8030250:	e00c      	b.n	803026c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8030252:	6839      	ldr	r1, [r7, #0]
 8030254:	6878      	ldr	r0, [r7, #4]
 8030256:	f000 f900 	bl	803045a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803025a:	4b07      	ldr	r3, [pc, #28]	; (8030278 <USBD_SetConfig+0x150>)
 803025c:	781b      	ldrb	r3, [r3, #0]
 803025e:	4619      	mov	r1, r3
 8030260:	6878      	ldr	r0, [r7, #4]
 8030262:	f7fe ff92 	bl	802f18a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8030266:	2303      	movs	r3, #3
 8030268:	73fb      	strb	r3, [r7, #15]
      break;
 803026a:	bf00      	nop
  }

  return ret;
 803026c:	7bfb      	ldrb	r3, [r7, #15]
}
 803026e:	4618      	mov	r0, r3
 8030270:	3710      	adds	r7, #16
 8030272:	46bd      	mov	sp, r7
 8030274:	bd80      	pop	{r7, pc}
 8030276:	bf00      	nop
 8030278:	2000521c 	.word	0x2000521c

0803027c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803027c:	b580      	push	{r7, lr}
 803027e:	b082      	sub	sp, #8
 8030280:	af00      	add	r7, sp, #0
 8030282:	6078      	str	r0, [r7, #4]
 8030284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8030286:	683b      	ldr	r3, [r7, #0]
 8030288:	88db      	ldrh	r3, [r3, #6]
 803028a:	2b01      	cmp	r3, #1
 803028c:	d004      	beq.n	8030298 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803028e:	6839      	ldr	r1, [r7, #0]
 8030290:	6878      	ldr	r0, [r7, #4]
 8030292:	f000 f8e2 	bl	803045a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8030296:	e023      	b.n	80302e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8030298:	687b      	ldr	r3, [r7, #4]
 803029a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803029e:	b2db      	uxtb	r3, r3
 80302a0:	2b02      	cmp	r3, #2
 80302a2:	dc02      	bgt.n	80302aa <USBD_GetConfig+0x2e>
 80302a4:	2b00      	cmp	r3, #0
 80302a6:	dc03      	bgt.n	80302b0 <USBD_GetConfig+0x34>
 80302a8:	e015      	b.n	80302d6 <USBD_GetConfig+0x5a>
 80302aa:	2b03      	cmp	r3, #3
 80302ac:	d00b      	beq.n	80302c6 <USBD_GetConfig+0x4a>
 80302ae:	e012      	b.n	80302d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80302b0:	687b      	ldr	r3, [r7, #4]
 80302b2:	2200      	movs	r2, #0
 80302b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80302b6:	687b      	ldr	r3, [r7, #4]
 80302b8:	3308      	adds	r3, #8
 80302ba:	2201      	movs	r2, #1
 80302bc:	4619      	mov	r1, r3
 80302be:	6878      	ldr	r0, [r7, #4]
 80302c0:	f000 f93c 	bl	803053c <USBD_CtlSendData>
        break;
 80302c4:	e00c      	b.n	80302e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80302c6:	687b      	ldr	r3, [r7, #4]
 80302c8:	3304      	adds	r3, #4
 80302ca:	2201      	movs	r2, #1
 80302cc:	4619      	mov	r1, r3
 80302ce:	6878      	ldr	r0, [r7, #4]
 80302d0:	f000 f934 	bl	803053c <USBD_CtlSendData>
        break;
 80302d4:	e004      	b.n	80302e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80302d6:	6839      	ldr	r1, [r7, #0]
 80302d8:	6878      	ldr	r0, [r7, #4]
 80302da:	f000 f8be 	bl	803045a <USBD_CtlError>
        break;
 80302de:	bf00      	nop
}
 80302e0:	bf00      	nop
 80302e2:	3708      	adds	r7, #8
 80302e4:	46bd      	mov	sp, r7
 80302e6:	bd80      	pop	{r7, pc}

080302e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80302e8:	b580      	push	{r7, lr}
 80302ea:	b082      	sub	sp, #8
 80302ec:	af00      	add	r7, sp, #0
 80302ee:	6078      	str	r0, [r7, #4]
 80302f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80302f2:	687b      	ldr	r3, [r7, #4]
 80302f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80302f8:	b2db      	uxtb	r3, r3
 80302fa:	3b01      	subs	r3, #1
 80302fc:	2b02      	cmp	r3, #2
 80302fe:	d81e      	bhi.n	803033e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8030300:	683b      	ldr	r3, [r7, #0]
 8030302:	88db      	ldrh	r3, [r3, #6]
 8030304:	2b02      	cmp	r3, #2
 8030306:	d004      	beq.n	8030312 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8030308:	6839      	ldr	r1, [r7, #0]
 803030a:	6878      	ldr	r0, [r7, #4]
 803030c:	f000 f8a5 	bl	803045a <USBD_CtlError>
        break;
 8030310:	e01a      	b.n	8030348 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	2201      	movs	r2, #1
 8030316:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8030318:	687b      	ldr	r3, [r7, #4]
 803031a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803031e:	2b00      	cmp	r3, #0
 8030320:	d005      	beq.n	803032e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8030322:	687b      	ldr	r3, [r7, #4]
 8030324:	68db      	ldr	r3, [r3, #12]
 8030326:	f043 0202 	orr.w	r2, r3, #2
 803032a:	687b      	ldr	r3, [r7, #4]
 803032c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803032e:	687b      	ldr	r3, [r7, #4]
 8030330:	330c      	adds	r3, #12
 8030332:	2202      	movs	r2, #2
 8030334:	4619      	mov	r1, r3
 8030336:	6878      	ldr	r0, [r7, #4]
 8030338:	f000 f900 	bl	803053c <USBD_CtlSendData>
      break;
 803033c:	e004      	b.n	8030348 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803033e:	6839      	ldr	r1, [r7, #0]
 8030340:	6878      	ldr	r0, [r7, #4]
 8030342:	f000 f88a 	bl	803045a <USBD_CtlError>
      break;
 8030346:	bf00      	nop
  }
}
 8030348:	bf00      	nop
 803034a:	3708      	adds	r7, #8
 803034c:	46bd      	mov	sp, r7
 803034e:	bd80      	pop	{r7, pc}

08030350 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030350:	b580      	push	{r7, lr}
 8030352:	b082      	sub	sp, #8
 8030354:	af00      	add	r7, sp, #0
 8030356:	6078      	str	r0, [r7, #4]
 8030358:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803035a:	683b      	ldr	r3, [r7, #0]
 803035c:	885b      	ldrh	r3, [r3, #2]
 803035e:	2b01      	cmp	r3, #1
 8030360:	d107      	bne.n	8030372 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8030362:	687b      	ldr	r3, [r7, #4]
 8030364:	2201      	movs	r2, #1
 8030366:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803036a:	6878      	ldr	r0, [r7, #4]
 803036c:	f000 f940 	bl	80305f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8030370:	e013      	b.n	803039a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8030372:	683b      	ldr	r3, [r7, #0]
 8030374:	885b      	ldrh	r3, [r3, #2]
 8030376:	2b02      	cmp	r3, #2
 8030378:	d10b      	bne.n	8030392 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803037a:	683b      	ldr	r3, [r7, #0]
 803037c:	889b      	ldrh	r3, [r3, #4]
 803037e:	0a1b      	lsrs	r3, r3, #8
 8030380:	b29b      	uxth	r3, r3
 8030382:	b2da      	uxtb	r2, r3
 8030384:	687b      	ldr	r3, [r7, #4]
 8030386:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803038a:	6878      	ldr	r0, [r7, #4]
 803038c:	f000 f930 	bl	80305f0 <USBD_CtlSendStatus>
}
 8030390:	e003      	b.n	803039a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8030392:	6839      	ldr	r1, [r7, #0]
 8030394:	6878      	ldr	r0, [r7, #4]
 8030396:	f000 f860 	bl	803045a <USBD_CtlError>
}
 803039a:	bf00      	nop
 803039c:	3708      	adds	r7, #8
 803039e:	46bd      	mov	sp, r7
 80303a0:	bd80      	pop	{r7, pc}

080303a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80303a2:	b580      	push	{r7, lr}
 80303a4:	b082      	sub	sp, #8
 80303a6:	af00      	add	r7, sp, #0
 80303a8:	6078      	str	r0, [r7, #4]
 80303aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80303ac:	687b      	ldr	r3, [r7, #4]
 80303ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80303b2:	b2db      	uxtb	r3, r3
 80303b4:	3b01      	subs	r3, #1
 80303b6:	2b02      	cmp	r3, #2
 80303b8:	d80b      	bhi.n	80303d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80303ba:	683b      	ldr	r3, [r7, #0]
 80303bc:	885b      	ldrh	r3, [r3, #2]
 80303be:	2b01      	cmp	r3, #1
 80303c0:	d10c      	bne.n	80303dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80303c2:	687b      	ldr	r3, [r7, #4]
 80303c4:	2200      	movs	r2, #0
 80303c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80303ca:	6878      	ldr	r0, [r7, #4]
 80303cc:	f000 f910 	bl	80305f0 <USBD_CtlSendStatus>
      }
      break;
 80303d0:	e004      	b.n	80303dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80303d2:	6839      	ldr	r1, [r7, #0]
 80303d4:	6878      	ldr	r0, [r7, #4]
 80303d6:	f000 f840 	bl	803045a <USBD_CtlError>
      break;
 80303da:	e000      	b.n	80303de <USBD_ClrFeature+0x3c>
      break;
 80303dc:	bf00      	nop
  }
}
 80303de:	bf00      	nop
 80303e0:	3708      	adds	r7, #8
 80303e2:	46bd      	mov	sp, r7
 80303e4:	bd80      	pop	{r7, pc}

080303e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80303e6:	b580      	push	{r7, lr}
 80303e8:	b084      	sub	sp, #16
 80303ea:	af00      	add	r7, sp, #0
 80303ec:	6078      	str	r0, [r7, #4]
 80303ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80303f0:	683b      	ldr	r3, [r7, #0]
 80303f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80303f4:	68fb      	ldr	r3, [r7, #12]
 80303f6:	781a      	ldrb	r2, [r3, #0]
 80303f8:	687b      	ldr	r3, [r7, #4]
 80303fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80303fc:	68fb      	ldr	r3, [r7, #12]
 80303fe:	3301      	adds	r3, #1
 8030400:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8030402:	68fb      	ldr	r3, [r7, #12]
 8030404:	781a      	ldrb	r2, [r3, #0]
 8030406:	687b      	ldr	r3, [r7, #4]
 8030408:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803040a:	68fb      	ldr	r3, [r7, #12]
 803040c:	3301      	adds	r3, #1
 803040e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8030410:	68f8      	ldr	r0, [r7, #12]
 8030412:	f7ff fa41 	bl	802f898 <SWAPBYTE>
 8030416:	4603      	mov	r3, r0
 8030418:	461a      	mov	r2, r3
 803041a:	687b      	ldr	r3, [r7, #4]
 803041c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803041e:	68fb      	ldr	r3, [r7, #12]
 8030420:	3301      	adds	r3, #1
 8030422:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8030424:	68fb      	ldr	r3, [r7, #12]
 8030426:	3301      	adds	r3, #1
 8030428:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803042a:	68f8      	ldr	r0, [r7, #12]
 803042c:	f7ff fa34 	bl	802f898 <SWAPBYTE>
 8030430:	4603      	mov	r3, r0
 8030432:	461a      	mov	r2, r3
 8030434:	687b      	ldr	r3, [r7, #4]
 8030436:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8030438:	68fb      	ldr	r3, [r7, #12]
 803043a:	3301      	adds	r3, #1
 803043c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803043e:	68fb      	ldr	r3, [r7, #12]
 8030440:	3301      	adds	r3, #1
 8030442:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8030444:	68f8      	ldr	r0, [r7, #12]
 8030446:	f7ff fa27 	bl	802f898 <SWAPBYTE>
 803044a:	4603      	mov	r3, r0
 803044c:	461a      	mov	r2, r3
 803044e:	687b      	ldr	r3, [r7, #4]
 8030450:	80da      	strh	r2, [r3, #6]
}
 8030452:	bf00      	nop
 8030454:	3710      	adds	r7, #16
 8030456:	46bd      	mov	sp, r7
 8030458:	bd80      	pop	{r7, pc}

0803045a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803045a:	b580      	push	{r7, lr}
 803045c:	b082      	sub	sp, #8
 803045e:	af00      	add	r7, sp, #0
 8030460:	6078      	str	r0, [r7, #4]
 8030462:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8030464:	2180      	movs	r1, #128	; 0x80
 8030466:	6878      	ldr	r0, [r7, #4]
 8030468:	f000 ff40 	bl	80312ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803046c:	2100      	movs	r1, #0
 803046e:	6878      	ldr	r0, [r7, #4]
 8030470:	f000 ff3c 	bl	80312ec <USBD_LL_StallEP>
}
 8030474:	bf00      	nop
 8030476:	3708      	adds	r7, #8
 8030478:	46bd      	mov	sp, r7
 803047a:	bd80      	pop	{r7, pc}

0803047c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803047c:	b580      	push	{r7, lr}
 803047e:	b086      	sub	sp, #24
 8030480:	af00      	add	r7, sp, #0
 8030482:	60f8      	str	r0, [r7, #12]
 8030484:	60b9      	str	r1, [r7, #8]
 8030486:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8030488:	2300      	movs	r3, #0
 803048a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803048c:	68fb      	ldr	r3, [r7, #12]
 803048e:	2b00      	cmp	r3, #0
 8030490:	d036      	beq.n	8030500 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8030492:	68fb      	ldr	r3, [r7, #12]
 8030494:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8030496:	6938      	ldr	r0, [r7, #16]
 8030498:	f000 f836 	bl	8030508 <USBD_GetLen>
 803049c:	4603      	mov	r3, r0
 803049e:	3301      	adds	r3, #1
 80304a0:	b29b      	uxth	r3, r3
 80304a2:	005b      	lsls	r3, r3, #1
 80304a4:	b29a      	uxth	r2, r3
 80304a6:	687b      	ldr	r3, [r7, #4]
 80304a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80304aa:	7dfb      	ldrb	r3, [r7, #23]
 80304ac:	68ba      	ldr	r2, [r7, #8]
 80304ae:	4413      	add	r3, r2
 80304b0:	687a      	ldr	r2, [r7, #4]
 80304b2:	7812      	ldrb	r2, [r2, #0]
 80304b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304b6:	7dfb      	ldrb	r3, [r7, #23]
 80304b8:	3301      	adds	r3, #1
 80304ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80304bc:	7dfb      	ldrb	r3, [r7, #23]
 80304be:	68ba      	ldr	r2, [r7, #8]
 80304c0:	4413      	add	r3, r2
 80304c2:	2203      	movs	r2, #3
 80304c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304c6:	7dfb      	ldrb	r3, [r7, #23]
 80304c8:	3301      	adds	r3, #1
 80304ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80304cc:	e013      	b.n	80304f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80304ce:	7dfb      	ldrb	r3, [r7, #23]
 80304d0:	68ba      	ldr	r2, [r7, #8]
 80304d2:	4413      	add	r3, r2
 80304d4:	693a      	ldr	r2, [r7, #16]
 80304d6:	7812      	ldrb	r2, [r2, #0]
 80304d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80304da:	693b      	ldr	r3, [r7, #16]
 80304dc:	3301      	adds	r3, #1
 80304de:	613b      	str	r3, [r7, #16]
    idx++;
 80304e0:	7dfb      	ldrb	r3, [r7, #23]
 80304e2:	3301      	adds	r3, #1
 80304e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80304e6:	7dfb      	ldrb	r3, [r7, #23]
 80304e8:	68ba      	ldr	r2, [r7, #8]
 80304ea:	4413      	add	r3, r2
 80304ec:	2200      	movs	r2, #0
 80304ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80304f0:	7dfb      	ldrb	r3, [r7, #23]
 80304f2:	3301      	adds	r3, #1
 80304f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80304f6:	693b      	ldr	r3, [r7, #16]
 80304f8:	781b      	ldrb	r3, [r3, #0]
 80304fa:	2b00      	cmp	r3, #0
 80304fc:	d1e7      	bne.n	80304ce <USBD_GetString+0x52>
 80304fe:	e000      	b.n	8030502 <USBD_GetString+0x86>
    return;
 8030500:	bf00      	nop
  }
}
 8030502:	3718      	adds	r7, #24
 8030504:	46bd      	mov	sp, r7
 8030506:	bd80      	pop	{r7, pc}

08030508 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8030508:	b480      	push	{r7}
 803050a:	b085      	sub	sp, #20
 803050c:	af00      	add	r7, sp, #0
 803050e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8030510:	2300      	movs	r3, #0
 8030512:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8030514:	687b      	ldr	r3, [r7, #4]
 8030516:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8030518:	e005      	b.n	8030526 <USBD_GetLen+0x1e>
  {
    len++;
 803051a:	7bfb      	ldrb	r3, [r7, #15]
 803051c:	3301      	adds	r3, #1
 803051e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8030520:	68bb      	ldr	r3, [r7, #8]
 8030522:	3301      	adds	r3, #1
 8030524:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8030526:	68bb      	ldr	r3, [r7, #8]
 8030528:	781b      	ldrb	r3, [r3, #0]
 803052a:	2b00      	cmp	r3, #0
 803052c:	d1f5      	bne.n	803051a <USBD_GetLen+0x12>
  }

  return len;
 803052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030530:	4618      	mov	r0, r3
 8030532:	3714      	adds	r7, #20
 8030534:	46bd      	mov	sp, r7
 8030536:	f85d 7b04 	ldr.w	r7, [sp], #4
 803053a:	4770      	bx	lr

0803053c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803053c:	b580      	push	{r7, lr}
 803053e:	b084      	sub	sp, #16
 8030540:	af00      	add	r7, sp, #0
 8030542:	60f8      	str	r0, [r7, #12]
 8030544:	60b9      	str	r1, [r7, #8]
 8030546:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8030548:	68fb      	ldr	r3, [r7, #12]
 803054a:	2202      	movs	r2, #2
 803054c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8030550:	68fb      	ldr	r3, [r7, #12]
 8030552:	687a      	ldr	r2, [r7, #4]
 8030554:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8030556:	68fb      	ldr	r3, [r7, #12]
 8030558:	687a      	ldr	r2, [r7, #4]
 803055a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803055c:	687b      	ldr	r3, [r7, #4]
 803055e:	68ba      	ldr	r2, [r7, #8]
 8030560:	2100      	movs	r1, #0
 8030562:	68f8      	ldr	r0, [r7, #12]
 8030564:	f000 ff4b 	bl	80313fe <USBD_LL_Transmit>

  return USBD_OK;
 8030568:	2300      	movs	r3, #0
}
 803056a:	4618      	mov	r0, r3
 803056c:	3710      	adds	r7, #16
 803056e:	46bd      	mov	sp, r7
 8030570:	bd80      	pop	{r7, pc}

08030572 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8030572:	b580      	push	{r7, lr}
 8030574:	b084      	sub	sp, #16
 8030576:	af00      	add	r7, sp, #0
 8030578:	60f8      	str	r0, [r7, #12]
 803057a:	60b9      	str	r1, [r7, #8]
 803057c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803057e:	687b      	ldr	r3, [r7, #4]
 8030580:	68ba      	ldr	r2, [r7, #8]
 8030582:	2100      	movs	r1, #0
 8030584:	68f8      	ldr	r0, [r7, #12]
 8030586:	f000 ff3a 	bl	80313fe <USBD_LL_Transmit>

  return USBD_OK;
 803058a:	2300      	movs	r3, #0
}
 803058c:	4618      	mov	r0, r3
 803058e:	3710      	adds	r7, #16
 8030590:	46bd      	mov	sp, r7
 8030592:	bd80      	pop	{r7, pc}

08030594 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8030594:	b580      	push	{r7, lr}
 8030596:	b084      	sub	sp, #16
 8030598:	af00      	add	r7, sp, #0
 803059a:	60f8      	str	r0, [r7, #12]
 803059c:	60b9      	str	r1, [r7, #8]
 803059e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80305a0:	68fb      	ldr	r3, [r7, #12]
 80305a2:	2203      	movs	r2, #3
 80305a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80305a8:	68fb      	ldr	r3, [r7, #12]
 80305aa:	687a      	ldr	r2, [r7, #4]
 80305ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80305b0:	68fb      	ldr	r3, [r7, #12]
 80305b2:	687a      	ldr	r2, [r7, #4]
 80305b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305b8:	687b      	ldr	r3, [r7, #4]
 80305ba:	68ba      	ldr	r2, [r7, #8]
 80305bc:	2100      	movs	r1, #0
 80305be:	68f8      	ldr	r0, [r7, #12]
 80305c0:	f000 ff3e 	bl	8031440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305c4:	2300      	movs	r3, #0
}
 80305c6:	4618      	mov	r0, r3
 80305c8:	3710      	adds	r7, #16
 80305ca:	46bd      	mov	sp, r7
 80305cc:	bd80      	pop	{r7, pc}

080305ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80305ce:	b580      	push	{r7, lr}
 80305d0:	b084      	sub	sp, #16
 80305d2:	af00      	add	r7, sp, #0
 80305d4:	60f8      	str	r0, [r7, #12]
 80305d6:	60b9      	str	r1, [r7, #8]
 80305d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	68ba      	ldr	r2, [r7, #8]
 80305de:	2100      	movs	r1, #0
 80305e0:	68f8      	ldr	r0, [r7, #12]
 80305e2:	f000 ff2d 	bl	8031440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305e6:	2300      	movs	r3, #0
}
 80305e8:	4618      	mov	r0, r3
 80305ea:	3710      	adds	r7, #16
 80305ec:	46bd      	mov	sp, r7
 80305ee:	bd80      	pop	{r7, pc}

080305f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80305f0:	b580      	push	{r7, lr}
 80305f2:	b082      	sub	sp, #8
 80305f4:	af00      	add	r7, sp, #0
 80305f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80305f8:	687b      	ldr	r3, [r7, #4]
 80305fa:	2204      	movs	r2, #4
 80305fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8030600:	2300      	movs	r3, #0
 8030602:	2200      	movs	r2, #0
 8030604:	2100      	movs	r1, #0
 8030606:	6878      	ldr	r0, [r7, #4]
 8030608:	f000 fef9 	bl	80313fe <USBD_LL_Transmit>

  return USBD_OK;
 803060c:	2300      	movs	r3, #0
}
 803060e:	4618      	mov	r0, r3
 8030610:	3708      	adds	r7, #8
 8030612:	46bd      	mov	sp, r7
 8030614:	bd80      	pop	{r7, pc}

08030616 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8030616:	b580      	push	{r7, lr}
 8030618:	b082      	sub	sp, #8
 803061a:	af00      	add	r7, sp, #0
 803061c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803061e:	687b      	ldr	r3, [r7, #4]
 8030620:	2205      	movs	r2, #5
 8030622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8030626:	2300      	movs	r3, #0
 8030628:	2200      	movs	r2, #0
 803062a:	2100      	movs	r1, #0
 803062c:	6878      	ldr	r0, [r7, #4]
 803062e:	f000 ff07 	bl	8031440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030632:	2300      	movs	r3, #0
}
 8030634:	4618      	mov	r0, r3
 8030636:	3708      	adds	r7, #8
 8030638:	46bd      	mov	sp, r7
 803063a:	bd80      	pop	{r7, pc}

0803063c <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803063c:	b580      	push	{r7, lr}
 803063e:	b082      	sub	sp, #8
 8030640:	af00      	add	r7, sp, #0
 8030642:	6078      	str	r0, [r7, #4]
 8030644:	460b      	mov	r3, r1
 8030646:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8030648:	78fb      	ldrb	r3, [r7, #3]
 803064a:	4619      	mov	r1, r3
 803064c:	6878      	ldr	r0, [r7, #4]
 803064e:	f000 ff18 	bl	8031482 <USBD_LL_GetRxDataSize>
 8030652:	4603      	mov	r3, r0
}
 8030654:	4618      	mov	r0, r3
 8030656:	3708      	adds	r7, #8
 8030658:	46bd      	mov	sp, r7
 803065a:	bd80      	pop	{r7, pc}

0803065c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803065c:	b580      	push	{r7, lr}
 803065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8030660:	2201      	movs	r2, #1
 8030662:	4924      	ldr	r1, [pc, #144]	; (80306f4 <MX_USB_DEVICE_Init+0x98>)
 8030664:	4824      	ldr	r0, [pc, #144]	; (80306f8 <MX_USB_DEVICE_Init+0x9c>)
 8030666:	f7fe fcf7 	bl	802f058 <USBD_Init>
 803066a:	4603      	mov	r3, r0
 803066c:	2b00      	cmp	r3, #0
 803066e:	d001      	beq.n	8030674 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8030670:	f7f3 f9d4 	bl	8023a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8030674:	4921      	ldr	r1, [pc, #132]	; (80306fc <MX_USB_DEVICE_Init+0xa0>)
 8030676:	4820      	ldr	r0, [pc, #128]	; (80306f8 <MX_USB_DEVICE_Init+0x9c>)
 8030678:	f7fe fd1e 	bl	802f0b8 <USBD_RegisterClass>
 803067c:	4603      	mov	r3, r0
 803067e:	2b00      	cmp	r3, #0
 8030680:	d001      	beq.n	8030686 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8030682:	f7f3 f9cb 	bl	8023a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8030686:	491e      	ldr	r1, [pc, #120]	; (8030700 <MX_USB_DEVICE_Init+0xa4>)
 8030688:	481b      	ldr	r0, [pc, #108]	; (80306f8 <MX_USB_DEVICE_Init+0x9c>)
 803068a:	f7fe fc0f 	bl	802eeac <USBD_CDC_RegisterInterface>
 803068e:	4603      	mov	r3, r0
 8030690:	2b00      	cmp	r3, #0
 8030692:	d001      	beq.n	8030698 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8030694:	f7f3 f9c2 	bl	8023a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8030698:	4817      	ldr	r0, [pc, #92]	; (80306f8 <MX_USB_DEVICE_Init+0x9c>)
 803069a:	f7fe fd43 	bl	802f124 <USBD_Start>
 803069e:	4603      	mov	r3, r0
 80306a0:	2b00      	cmp	r3, #0
 80306a2:	d001      	beq.n	80306a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80306a4:	f7f3 f9ba 	bl	8023a1c <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80306a8:	2200      	movs	r2, #0
 80306aa:	4916      	ldr	r1, [pc, #88]	; (8030704 <MX_USB_DEVICE_Init+0xa8>)
 80306ac:	4816      	ldr	r0, [pc, #88]	; (8030708 <MX_USB_DEVICE_Init+0xac>)
 80306ae:	f7fe fcd3 	bl	802f058 <USBD_Init>
 80306b2:	4603      	mov	r3, r0
 80306b4:	2b00      	cmp	r3, #0
 80306b6:	d001      	beq.n	80306bc <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 80306b8:	f7f3 f9b0 	bl	8023a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80306bc:	490f      	ldr	r1, [pc, #60]	; (80306fc <MX_USB_DEVICE_Init+0xa0>)
 80306be:	4812      	ldr	r0, [pc, #72]	; (8030708 <MX_USB_DEVICE_Init+0xac>)
 80306c0:	f7fe fcfa 	bl	802f0b8 <USBD_RegisterClass>
 80306c4:	4603      	mov	r3, r0
 80306c6:	2b00      	cmp	r3, #0
 80306c8:	d001      	beq.n	80306ce <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 80306ca:	f7f3 f9a7 	bl	8023a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80306ce:	490f      	ldr	r1, [pc, #60]	; (803070c <MX_USB_DEVICE_Init+0xb0>)
 80306d0:	480d      	ldr	r0, [pc, #52]	; (8030708 <MX_USB_DEVICE_Init+0xac>)
 80306d2:	f7fe fbeb 	bl	802eeac <USBD_CDC_RegisterInterface>
 80306d6:	4603      	mov	r3, r0
 80306d8:	2b00      	cmp	r3, #0
 80306da:	d001      	beq.n	80306e0 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 80306dc:	f7f3 f99e 	bl	8023a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80306e0:	4809      	ldr	r0, [pc, #36]	; (8030708 <MX_USB_DEVICE_Init+0xac>)
 80306e2:	f7fe fd1f 	bl	802f124 <USBD_Start>
 80306e6:	4603      	mov	r3, r0
 80306e8:	2b00      	cmp	r3, #0
 80306ea:	d001      	beq.n	80306f0 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 80306ec:	f7f3 f996 	bl	8023a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80306f0:	bf00      	nop
 80306f2:	bd80      	pop	{r7, pc}
 80306f4:	20000228 	.word	0x20000228
 80306f8:	20005220 	.word	0x20005220
 80306fc:	20000150 	.word	0x20000150
 8030700:	200001e4 	.word	0x200001e4
 8030704:	200001f8 	.word	0x200001f8
 8030708:	200054fc 	.word	0x200054fc
 803070c:	200001d0 	.word	0x200001d0

08030710 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8030710:	b580      	push	{r7, lr}
 8030712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8030714:	2200      	movs	r2, #0
 8030716:	4905      	ldr	r1, [pc, #20]	; (803072c <CDC_Init_FS+0x1c>)
 8030718:	4805      	ldr	r0, [pc, #20]	; (8030730 <CDC_Init_FS+0x20>)
 803071a:	f7fe fbe1 	bl	802eee0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803071e:	4905      	ldr	r1, [pc, #20]	; (8030734 <CDC_Init_FS+0x24>)
 8030720:	4803      	ldr	r0, [pc, #12]	; (8030730 <CDC_Init_FS+0x20>)
 8030722:	f7fe fbff 	bl	802ef24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030726:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8030728:	4618      	mov	r0, r3
 803072a:	bd80      	pop	{r7, pc}
 803072c:	20005fd8 	.word	0x20005fd8
 8030730:	200054fc 	.word	0x200054fc
 8030734:	200057d8 	.word	0x200057d8

08030738 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8030738:	b480      	push	{r7}
 803073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803073c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803073e:	4618      	mov	r0, r3
 8030740:	46bd      	mov	sp, r7
 8030742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030746:	4770      	bx	lr

08030748 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030748:	b480      	push	{r7}
 803074a:	b083      	sub	sp, #12
 803074c:	af00      	add	r7, sp, #0
 803074e:	4603      	mov	r3, r0
 8030750:	6039      	str	r1, [r7, #0]
 8030752:	71fb      	strb	r3, [r7, #7]
 8030754:	4613      	mov	r3, r2
 8030756:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8030758:	79fb      	ldrb	r3, [r7, #7]
 803075a:	2b23      	cmp	r3, #35	; 0x23
 803075c:	d84a      	bhi.n	80307f4 <CDC_Control_FS+0xac>
 803075e:	a201      	add	r2, pc, #4	; (adr r2, 8030764 <CDC_Control_FS+0x1c>)
 8030760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030764:	080307f5 	.word	0x080307f5
 8030768:	080307f5 	.word	0x080307f5
 803076c:	080307f5 	.word	0x080307f5
 8030770:	080307f5 	.word	0x080307f5
 8030774:	080307f5 	.word	0x080307f5
 8030778:	080307f5 	.word	0x080307f5
 803077c:	080307f5 	.word	0x080307f5
 8030780:	080307f5 	.word	0x080307f5
 8030784:	080307f5 	.word	0x080307f5
 8030788:	080307f5 	.word	0x080307f5
 803078c:	080307f5 	.word	0x080307f5
 8030790:	080307f5 	.word	0x080307f5
 8030794:	080307f5 	.word	0x080307f5
 8030798:	080307f5 	.word	0x080307f5
 803079c:	080307f5 	.word	0x080307f5
 80307a0:	080307f5 	.word	0x080307f5
 80307a4:	080307f5 	.word	0x080307f5
 80307a8:	080307f5 	.word	0x080307f5
 80307ac:	080307f5 	.word	0x080307f5
 80307b0:	080307f5 	.word	0x080307f5
 80307b4:	080307f5 	.word	0x080307f5
 80307b8:	080307f5 	.word	0x080307f5
 80307bc:	080307f5 	.word	0x080307f5
 80307c0:	080307f5 	.word	0x080307f5
 80307c4:	080307f5 	.word	0x080307f5
 80307c8:	080307f5 	.word	0x080307f5
 80307cc:	080307f5 	.word	0x080307f5
 80307d0:	080307f5 	.word	0x080307f5
 80307d4:	080307f5 	.word	0x080307f5
 80307d8:	080307f5 	.word	0x080307f5
 80307dc:	080307f5 	.word	0x080307f5
 80307e0:	080307f5 	.word	0x080307f5
 80307e4:	080307f5 	.word	0x080307f5
 80307e8:	080307f5 	.word	0x080307f5
 80307ec:	080307f5 	.word	0x080307f5
 80307f0:	080307f5 	.word	0x080307f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80307f4:	bf00      	nop
  }

  return (USBD_OK);
 80307f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80307f8:	4618      	mov	r0, r3
 80307fa:	370c      	adds	r7, #12
 80307fc:	46bd      	mov	sp, r7
 80307fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030802:	4770      	bx	lr

08030804 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8030804:	b580      	push	{r7, lr}
 8030806:	b082      	sub	sp, #8
 8030808:	af00      	add	r7, sp, #0
 803080a:	6078      	str	r0, [r7, #4]
 803080c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803080e:	6879      	ldr	r1, [r7, #4]
 8030810:	4805      	ldr	r0, [pc, #20]	; (8030828 <CDC_Receive_FS+0x24>)
 8030812:	f7fe fb87 	bl	802ef24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8030816:	4804      	ldr	r0, [pc, #16]	; (8030828 <CDC_Receive_FS+0x24>)
 8030818:	f7fe fbe8 	bl	802efec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803081c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803081e:	4618      	mov	r0, r3
 8030820:	3708      	adds	r7, #8
 8030822:	46bd      	mov	sp, r7
 8030824:	bd80      	pop	{r7, pc}
 8030826:	bf00      	nop
 8030828:	200054fc 	.word	0x200054fc

0803082c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803082c:	b480      	push	{r7}
 803082e:	b087      	sub	sp, #28
 8030830:	af00      	add	r7, sp, #0
 8030832:	60f8      	str	r0, [r7, #12]
 8030834:	60b9      	str	r1, [r7, #8]
 8030836:	4613      	mov	r3, r2
 8030838:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803083a:	2300      	movs	r3, #0
 803083c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803083e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030842:	4618      	mov	r0, r3
 8030844:	371c      	adds	r7, #28
 8030846:	46bd      	mov	sp, r7
 8030848:	f85d 7b04 	ldr.w	r7, [sp], #4
 803084c:	4770      	bx	lr
	...

08030850 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8030850:	b580      	push	{r7, lr}
 8030852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8030854:	2200      	movs	r2, #0
 8030856:	4905      	ldr	r1, [pc, #20]	; (803086c <CDC_Init_HS+0x1c>)
 8030858:	4805      	ldr	r0, [pc, #20]	; (8030870 <CDC_Init_HS+0x20>)
 803085a:	f7fe fb41 	bl	802eee0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 803085e:	4905      	ldr	r1, [pc, #20]	; (8030874 <CDC_Init_HS+0x24>)
 8030860:	4803      	ldr	r0, [pc, #12]	; (8030870 <CDC_Init_HS+0x20>)
 8030862:	f7fe fb5f 	bl	802ef24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030866:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8030868:	4618      	mov	r0, r3
 803086a:	bd80      	pop	{r7, pc}
 803086c:	20006fd8 	.word	0x20006fd8
 8030870:	20005220 	.word	0x20005220
 8030874:	200067d8 	.word	0x200067d8

08030878 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8030878:	b480      	push	{r7}
 803087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 803087c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 803087e:	4618      	mov	r0, r3
 8030880:	46bd      	mov	sp, r7
 8030882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030886:	4770      	bx	lr

08030888 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030888:	b480      	push	{r7}
 803088a:	b083      	sub	sp, #12
 803088c:	af00      	add	r7, sp, #0
 803088e:	4603      	mov	r3, r0
 8030890:	6039      	str	r1, [r7, #0]
 8030892:	71fb      	strb	r3, [r7, #7]
 8030894:	4613      	mov	r3, r2
 8030896:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8030898:	79fb      	ldrb	r3, [r7, #7]
 803089a:	2b23      	cmp	r3, #35	; 0x23
 803089c:	d84a      	bhi.n	8030934 <CDC_Control_HS+0xac>
 803089e:	a201      	add	r2, pc, #4	; (adr r2, 80308a4 <CDC_Control_HS+0x1c>)
 80308a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80308a4:	08030935 	.word	0x08030935
 80308a8:	08030935 	.word	0x08030935
 80308ac:	08030935 	.word	0x08030935
 80308b0:	08030935 	.word	0x08030935
 80308b4:	08030935 	.word	0x08030935
 80308b8:	08030935 	.word	0x08030935
 80308bc:	08030935 	.word	0x08030935
 80308c0:	08030935 	.word	0x08030935
 80308c4:	08030935 	.word	0x08030935
 80308c8:	08030935 	.word	0x08030935
 80308cc:	08030935 	.word	0x08030935
 80308d0:	08030935 	.word	0x08030935
 80308d4:	08030935 	.word	0x08030935
 80308d8:	08030935 	.word	0x08030935
 80308dc:	08030935 	.word	0x08030935
 80308e0:	08030935 	.word	0x08030935
 80308e4:	08030935 	.word	0x08030935
 80308e8:	08030935 	.word	0x08030935
 80308ec:	08030935 	.word	0x08030935
 80308f0:	08030935 	.word	0x08030935
 80308f4:	08030935 	.word	0x08030935
 80308f8:	08030935 	.word	0x08030935
 80308fc:	08030935 	.word	0x08030935
 8030900:	08030935 	.word	0x08030935
 8030904:	08030935 	.word	0x08030935
 8030908:	08030935 	.word	0x08030935
 803090c:	08030935 	.word	0x08030935
 8030910:	08030935 	.word	0x08030935
 8030914:	08030935 	.word	0x08030935
 8030918:	08030935 	.word	0x08030935
 803091c:	08030935 	.word	0x08030935
 8030920:	08030935 	.word	0x08030935
 8030924:	08030935 	.word	0x08030935
 8030928:	08030935 	.word	0x08030935
 803092c:	08030935 	.word	0x08030935
 8030930:	08030935 	.word	0x08030935
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8030934:	bf00      	nop
  }

  return (USBD_OK);
 8030936:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8030938:	4618      	mov	r0, r3
 803093a:	370c      	adds	r7, #12
 803093c:	46bd      	mov	sp, r7
 803093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030942:	4770      	bx	lr

08030944 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8030944:	b580      	push	{r7, lr}
 8030946:	b082      	sub	sp, #8
 8030948:	af00      	add	r7, sp, #0
 803094a:	6078      	str	r0, [r7, #4]
 803094c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  CDC_Receive_handler(Buf, Len);
 803094e:	6839      	ldr	r1, [r7, #0]
 8030950:	6878      	ldr	r0, [r7, #4]
 8030952:	f7f1 ff11 	bl	8022778 <CDC_Receive_handler>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8030956:	6879      	ldr	r1, [r7, #4]
 8030958:	4805      	ldr	r0, [pc, #20]	; (8030970 <CDC_Receive_HS+0x2c>)
 803095a:	f7fe fae3 	bl	802ef24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 803095e:	4804      	ldr	r0, [pc, #16]	; (8030970 <CDC_Receive_HS+0x2c>)
 8030960:	f7fe fb44 	bl	802efec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8030964:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8030966:	4618      	mov	r0, r3
 8030968:	3708      	adds	r7, #8
 803096a:	46bd      	mov	sp, r7
 803096c:	bd80      	pop	{r7, pc}
 803096e:	bf00      	nop
 8030970:	20005220 	.word	0x20005220

08030974 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8030974:	b580      	push	{r7, lr}
 8030976:	b084      	sub	sp, #16
 8030978:	af00      	add	r7, sp, #0
 803097a:	6078      	str	r0, [r7, #4]
 803097c:	460b      	mov	r3, r1
 803097e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8030980:	2300      	movs	r3, #0
 8030982:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8030984:	4b0e      	ldr	r3, [pc, #56]	; (80309c0 <CDC_Transmit_HS+0x4c>)
 8030986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803098a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 803098c:	68bb      	ldr	r3, [r7, #8]
 803098e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8030992:	2b00      	cmp	r3, #0
 8030994:	d001      	beq.n	803099a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8030996:	2301      	movs	r3, #1
 8030998:	e00e      	b.n	80309b8 <CDC_Transmit_HS+0x44>
    packet_sent = 1;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 803099a:	887b      	ldrh	r3, [r7, #2]
 803099c:	461a      	mov	r2, r3
 803099e:	6879      	ldr	r1, [r7, #4]
 80309a0:	4807      	ldr	r0, [pc, #28]	; (80309c0 <CDC_Transmit_HS+0x4c>)
 80309a2:	f7fe fa9d 	bl	802eee0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80309a6:	4806      	ldr	r0, [pc, #24]	; (80309c0 <CDC_Transmit_HS+0x4c>)
 80309a8:	f7fe fada 	bl	802ef60 <USBD_CDC_TransmitPacket>
 80309ac:	4603      	mov	r3, r0
 80309ae:	73fb      	strb	r3, [r7, #15]
  packet_sent = 0;
 80309b0:	4b04      	ldr	r3, [pc, #16]	; (80309c4 <CDC_Transmit_HS+0x50>)
 80309b2:	2200      	movs	r2, #0
 80309b4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 12 */
  return result;
 80309b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80309b8:	4618      	mov	r0, r3
 80309ba:	3710      	adds	r7, #16
 80309bc:	46bd      	mov	sp, r7
 80309be:	bd80      	pop	{r7, pc}
 80309c0:	20005220 	.word	0x20005220
 80309c4:	20000014 	.word	0x20000014

080309c8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80309c8:	b480      	push	{r7}
 80309ca:	b087      	sub	sp, #28
 80309cc:	af00      	add	r7, sp, #0
 80309ce:	60f8      	str	r0, [r7, #12]
 80309d0:	60b9      	str	r1, [r7, #8]
 80309d2:	4613      	mov	r3, r2
 80309d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80309d6:	2300      	movs	r3, #0
 80309d8:	75fb      	strb	r3, [r7, #23]
  packet_sent = 0;
 80309da:	4b05      	ldr	r3, [pc, #20]	; (80309f0 <CDC_TransmitCplt_HS+0x28>)
 80309dc:	2200      	movs	r2, #0
 80309de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80309e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80309e4:	4618      	mov	r0, r3
 80309e6:	371c      	adds	r7, #28
 80309e8:	46bd      	mov	sp, r7
 80309ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80309ee:	4770      	bx	lr
 80309f0:	20000014 	.word	0x20000014

080309f4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80309f4:	b480      	push	{r7}
 80309f6:	b083      	sub	sp, #12
 80309f8:	af00      	add	r7, sp, #0
 80309fa:	4603      	mov	r3, r0
 80309fc:	6039      	str	r1, [r7, #0]
 80309fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8030a00:	683b      	ldr	r3, [r7, #0]
 8030a02:	2212      	movs	r2, #18
 8030a04:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8030a06:	4b03      	ldr	r3, [pc, #12]	; (8030a14 <USBD_HS_DeviceDescriptor+0x20>)
}
 8030a08:	4618      	mov	r0, r3
 8030a0a:	370c      	adds	r7, #12
 8030a0c:	46bd      	mov	sp, r7
 8030a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a12:	4770      	bx	lr
 8030a14:	20000244 	.word	0x20000244

08030a18 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a18:	b480      	push	{r7}
 8030a1a:	b083      	sub	sp, #12
 8030a1c:	af00      	add	r7, sp, #0
 8030a1e:	4603      	mov	r3, r0
 8030a20:	6039      	str	r1, [r7, #0]
 8030a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030a24:	683b      	ldr	r3, [r7, #0]
 8030a26:	2204      	movs	r2, #4
 8030a28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030a2a:	4b03      	ldr	r3, [pc, #12]	; (8030a38 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8030a2c:	4618      	mov	r0, r3
 8030a2e:	370c      	adds	r7, #12
 8030a30:	46bd      	mov	sp, r7
 8030a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a36:	4770      	bx	lr
 8030a38:	20000258 	.word	0x20000258

08030a3c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a3c:	b580      	push	{r7, lr}
 8030a3e:	b082      	sub	sp, #8
 8030a40:	af00      	add	r7, sp, #0
 8030a42:	4603      	mov	r3, r0
 8030a44:	6039      	str	r1, [r7, #0]
 8030a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030a48:	79fb      	ldrb	r3, [r7, #7]
 8030a4a:	2b00      	cmp	r3, #0
 8030a4c:	d105      	bne.n	8030a5a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a4e:	683a      	ldr	r2, [r7, #0]
 8030a50:	4907      	ldr	r1, [pc, #28]	; (8030a70 <USBD_HS_ProductStrDescriptor+0x34>)
 8030a52:	4808      	ldr	r0, [pc, #32]	; (8030a74 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a54:	f7ff fd12 	bl	803047c <USBD_GetString>
 8030a58:	e004      	b.n	8030a64 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a5a:	683a      	ldr	r2, [r7, #0]
 8030a5c:	4904      	ldr	r1, [pc, #16]	; (8030a70 <USBD_HS_ProductStrDescriptor+0x34>)
 8030a5e:	4805      	ldr	r0, [pc, #20]	; (8030a74 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a60:	f7ff fd0c 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030a64:	4b02      	ldr	r3, [pc, #8]	; (8030a70 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8030a66:	4618      	mov	r0, r3
 8030a68:	3708      	adds	r7, #8
 8030a6a:	46bd      	mov	sp, r7
 8030a6c:	bd80      	pop	{r7, pc}
 8030a6e:	bf00      	nop
 8030a70:	200077d8 	.word	0x200077d8
 8030a74:	080332c8 	.word	0x080332c8

08030a78 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a78:	b580      	push	{r7, lr}
 8030a7a:	b082      	sub	sp, #8
 8030a7c:	af00      	add	r7, sp, #0
 8030a7e:	4603      	mov	r3, r0
 8030a80:	6039      	str	r1, [r7, #0]
 8030a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030a84:	683a      	ldr	r2, [r7, #0]
 8030a86:	4904      	ldr	r1, [pc, #16]	; (8030a98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8030a88:	4804      	ldr	r0, [pc, #16]	; (8030a9c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8030a8a:	f7ff fcf7 	bl	803047c <USBD_GetString>
  return USBD_StrDesc;
 8030a8e:	4b02      	ldr	r3, [pc, #8]	; (8030a98 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8030a90:	4618      	mov	r0, r3
 8030a92:	3708      	adds	r7, #8
 8030a94:	46bd      	mov	sp, r7
 8030a96:	bd80      	pop	{r7, pc}
 8030a98:	200077d8 	.word	0x200077d8
 8030a9c:	080332e0 	.word	0x080332e0

08030aa0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030aa0:	b580      	push	{r7, lr}
 8030aa2:	b082      	sub	sp, #8
 8030aa4:	af00      	add	r7, sp, #0
 8030aa6:	4603      	mov	r3, r0
 8030aa8:	6039      	str	r1, [r7, #0]
 8030aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030aac:	683b      	ldr	r3, [r7, #0]
 8030aae:	221a      	movs	r2, #26
 8030ab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030ab2:	f000 f8e7 	bl	8030c84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8030ab6:	4b02      	ldr	r3, [pc, #8]	; (8030ac0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8030ab8:	4618      	mov	r0, r3
 8030aba:	3708      	adds	r7, #8
 8030abc:	46bd      	mov	sp, r7
 8030abe:	bd80      	pop	{r7, pc}
 8030ac0:	2000025c 	.word	0x2000025c

08030ac4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030ac4:	b580      	push	{r7, lr}
 8030ac6:	b082      	sub	sp, #8
 8030ac8:	af00      	add	r7, sp, #0
 8030aca:	4603      	mov	r3, r0
 8030acc:	6039      	str	r1, [r7, #0]
 8030ace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030ad0:	79fb      	ldrb	r3, [r7, #7]
 8030ad2:	2b00      	cmp	r3, #0
 8030ad4:	d105      	bne.n	8030ae2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030ad6:	683a      	ldr	r2, [r7, #0]
 8030ad8:	4907      	ldr	r1, [pc, #28]	; (8030af8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030ada:	4808      	ldr	r0, [pc, #32]	; (8030afc <USBD_HS_ConfigStrDescriptor+0x38>)
 8030adc:	f7ff fcce 	bl	803047c <USBD_GetString>
 8030ae0:	e004      	b.n	8030aec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030ae2:	683a      	ldr	r2, [r7, #0]
 8030ae4:	4904      	ldr	r1, [pc, #16]	; (8030af8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030ae6:	4805      	ldr	r0, [pc, #20]	; (8030afc <USBD_HS_ConfigStrDescriptor+0x38>)
 8030ae8:	f7ff fcc8 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030aec:	4b02      	ldr	r3, [pc, #8]	; (8030af8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8030aee:	4618      	mov	r0, r3
 8030af0:	3708      	adds	r7, #8
 8030af2:	46bd      	mov	sp, r7
 8030af4:	bd80      	pop	{r7, pc}
 8030af6:	bf00      	nop
 8030af8:	200077d8 	.word	0x200077d8
 8030afc:	080332f4 	.word	0x080332f4

08030b00 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b00:	b580      	push	{r7, lr}
 8030b02:	b082      	sub	sp, #8
 8030b04:	af00      	add	r7, sp, #0
 8030b06:	4603      	mov	r3, r0
 8030b08:	6039      	str	r1, [r7, #0]
 8030b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030b0c:	79fb      	ldrb	r3, [r7, #7]
 8030b0e:	2b00      	cmp	r3, #0
 8030b10:	d105      	bne.n	8030b1e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b12:	683a      	ldr	r2, [r7, #0]
 8030b14:	4907      	ldr	r1, [pc, #28]	; (8030b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b16:	4808      	ldr	r0, [pc, #32]	; (8030b38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b18:	f7ff fcb0 	bl	803047c <USBD_GetString>
 8030b1c:	e004      	b.n	8030b28 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b1e:	683a      	ldr	r2, [r7, #0]
 8030b20:	4904      	ldr	r1, [pc, #16]	; (8030b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b22:	4805      	ldr	r0, [pc, #20]	; (8030b38 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b24:	f7ff fcaa 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030b28:	4b02      	ldr	r3, [pc, #8]	; (8030b34 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8030b2a:	4618      	mov	r0, r3
 8030b2c:	3708      	adds	r7, #8
 8030b2e:	46bd      	mov	sp, r7
 8030b30:	bd80      	pop	{r7, pc}
 8030b32:	bf00      	nop
 8030b34:	200077d8 	.word	0x200077d8
 8030b38:	08033300 	.word	0x08033300

08030b3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b3c:	b480      	push	{r7}
 8030b3e:	b083      	sub	sp, #12
 8030b40:	af00      	add	r7, sp, #0
 8030b42:	4603      	mov	r3, r0
 8030b44:	6039      	str	r1, [r7, #0]
 8030b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8030b48:	683b      	ldr	r3, [r7, #0]
 8030b4a:	2212      	movs	r2, #18
 8030b4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8030b4e:	4b03      	ldr	r3, [pc, #12]	; (8030b5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8030b50:	4618      	mov	r0, r3
 8030b52:	370c      	adds	r7, #12
 8030b54:	46bd      	mov	sp, r7
 8030b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b5a:	4770      	bx	lr
 8030b5c:	20000214 	.word	0x20000214

08030b60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b60:	b480      	push	{r7}
 8030b62:	b083      	sub	sp, #12
 8030b64:	af00      	add	r7, sp, #0
 8030b66:	4603      	mov	r3, r0
 8030b68:	6039      	str	r1, [r7, #0]
 8030b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030b6c:	683b      	ldr	r3, [r7, #0]
 8030b6e:	2204      	movs	r2, #4
 8030b70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030b72:	4b03      	ldr	r3, [pc, #12]	; (8030b80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8030b74:	4618      	mov	r0, r3
 8030b76:	370c      	adds	r7, #12
 8030b78:	46bd      	mov	sp, r7
 8030b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b7e:	4770      	bx	lr
 8030b80:	20000258 	.word	0x20000258

08030b84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b84:	b580      	push	{r7, lr}
 8030b86:	b082      	sub	sp, #8
 8030b88:	af00      	add	r7, sp, #0
 8030b8a:	4603      	mov	r3, r0
 8030b8c:	6039      	str	r1, [r7, #0]
 8030b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030b90:	79fb      	ldrb	r3, [r7, #7]
 8030b92:	2b00      	cmp	r3, #0
 8030b94:	d105      	bne.n	8030ba2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030b96:	683a      	ldr	r2, [r7, #0]
 8030b98:	4907      	ldr	r1, [pc, #28]	; (8030bb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8030b9a:	4808      	ldr	r0, [pc, #32]	; (8030bbc <USBD_FS_ProductStrDescriptor+0x38>)
 8030b9c:	f7ff fc6e 	bl	803047c <USBD_GetString>
 8030ba0:	e004      	b.n	8030bac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030ba2:	683a      	ldr	r2, [r7, #0]
 8030ba4:	4904      	ldr	r1, [pc, #16]	; (8030bb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8030ba6:	4805      	ldr	r0, [pc, #20]	; (8030bbc <USBD_FS_ProductStrDescriptor+0x38>)
 8030ba8:	f7ff fc68 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030bac:	4b02      	ldr	r3, [pc, #8]	; (8030bb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8030bae:	4618      	mov	r0, r3
 8030bb0:	3708      	adds	r7, #8
 8030bb2:	46bd      	mov	sp, r7
 8030bb4:	bd80      	pop	{r7, pc}
 8030bb6:	bf00      	nop
 8030bb8:	200077d8 	.word	0x200077d8
 8030bbc:	080332c8 	.word	0x080332c8

08030bc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030bc0:	b580      	push	{r7, lr}
 8030bc2:	b082      	sub	sp, #8
 8030bc4:	af00      	add	r7, sp, #0
 8030bc6:	4603      	mov	r3, r0
 8030bc8:	6039      	str	r1, [r7, #0]
 8030bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030bcc:	683a      	ldr	r2, [r7, #0]
 8030bce:	4904      	ldr	r1, [pc, #16]	; (8030be0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8030bd0:	4804      	ldr	r0, [pc, #16]	; (8030be4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8030bd2:	f7ff fc53 	bl	803047c <USBD_GetString>
  return USBD_StrDesc;
 8030bd6:	4b02      	ldr	r3, [pc, #8]	; (8030be0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8030bd8:	4618      	mov	r0, r3
 8030bda:	3708      	adds	r7, #8
 8030bdc:	46bd      	mov	sp, r7
 8030bde:	bd80      	pop	{r7, pc}
 8030be0:	200077d8 	.word	0x200077d8
 8030be4:	080332e0 	.word	0x080332e0

08030be8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030be8:	b580      	push	{r7, lr}
 8030bea:	b082      	sub	sp, #8
 8030bec:	af00      	add	r7, sp, #0
 8030bee:	4603      	mov	r3, r0
 8030bf0:	6039      	str	r1, [r7, #0]
 8030bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030bf4:	683b      	ldr	r3, [r7, #0]
 8030bf6:	221a      	movs	r2, #26
 8030bf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030bfa:	f000 f843 	bl	8030c84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8030bfe:	4b02      	ldr	r3, [pc, #8]	; (8030c08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8030c00:	4618      	mov	r0, r3
 8030c02:	3708      	adds	r7, #8
 8030c04:	46bd      	mov	sp, r7
 8030c06:	bd80      	pop	{r7, pc}
 8030c08:	2000025c 	.word	0x2000025c

08030c0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c0c:	b580      	push	{r7, lr}
 8030c0e:	b082      	sub	sp, #8
 8030c10:	af00      	add	r7, sp, #0
 8030c12:	4603      	mov	r3, r0
 8030c14:	6039      	str	r1, [r7, #0]
 8030c16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030c18:	79fb      	ldrb	r3, [r7, #7]
 8030c1a:	2b00      	cmp	r3, #0
 8030c1c:	d105      	bne.n	8030c2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c1e:	683a      	ldr	r2, [r7, #0]
 8030c20:	4907      	ldr	r1, [pc, #28]	; (8030c40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c22:	4808      	ldr	r0, [pc, #32]	; (8030c44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c24:	f7ff fc2a 	bl	803047c <USBD_GetString>
 8030c28:	e004      	b.n	8030c34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c2a:	683a      	ldr	r2, [r7, #0]
 8030c2c:	4904      	ldr	r1, [pc, #16]	; (8030c40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c2e:	4805      	ldr	r0, [pc, #20]	; (8030c44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c30:	f7ff fc24 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c34:	4b02      	ldr	r3, [pc, #8]	; (8030c40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8030c36:	4618      	mov	r0, r3
 8030c38:	3708      	adds	r7, #8
 8030c3a:	46bd      	mov	sp, r7
 8030c3c:	bd80      	pop	{r7, pc}
 8030c3e:	bf00      	nop
 8030c40:	200077d8 	.word	0x200077d8
 8030c44:	080332f4 	.word	0x080332f4

08030c48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c48:	b580      	push	{r7, lr}
 8030c4a:	b082      	sub	sp, #8
 8030c4c:	af00      	add	r7, sp, #0
 8030c4e:	4603      	mov	r3, r0
 8030c50:	6039      	str	r1, [r7, #0]
 8030c52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030c54:	79fb      	ldrb	r3, [r7, #7]
 8030c56:	2b00      	cmp	r3, #0
 8030c58:	d105      	bne.n	8030c66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c5a:	683a      	ldr	r2, [r7, #0]
 8030c5c:	4907      	ldr	r1, [pc, #28]	; (8030c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c5e:	4808      	ldr	r0, [pc, #32]	; (8030c80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c60:	f7ff fc0c 	bl	803047c <USBD_GetString>
 8030c64:	e004      	b.n	8030c70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c66:	683a      	ldr	r2, [r7, #0]
 8030c68:	4904      	ldr	r1, [pc, #16]	; (8030c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c6a:	4805      	ldr	r0, [pc, #20]	; (8030c80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c6c:	f7ff fc06 	bl	803047c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c70:	4b02      	ldr	r3, [pc, #8]	; (8030c7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8030c72:	4618      	mov	r0, r3
 8030c74:	3708      	adds	r7, #8
 8030c76:	46bd      	mov	sp, r7
 8030c78:	bd80      	pop	{r7, pc}
 8030c7a:	bf00      	nop
 8030c7c:	200077d8 	.word	0x200077d8
 8030c80:	08033300 	.word	0x08033300

08030c84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8030c84:	b580      	push	{r7, lr}
 8030c86:	b084      	sub	sp, #16
 8030c88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8030c8a:	68fa      	ldr	r2, [r7, #12]
 8030c8c:	68bb      	ldr	r3, [r7, #8]
 8030c8e:	4413      	add	r3, r2
 8030c90:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8030c92:	68fb      	ldr	r3, [r7, #12]
 8030c94:	2b00      	cmp	r3, #0
 8030c96:	d009      	beq.n	8030cac <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8030c98:	2208      	movs	r2, #8
 8030c9a:	4906      	ldr	r1, [pc, #24]	; (8030cb4 <Get_SerialNum+0x30>)
 8030c9c:	68f8      	ldr	r0, [r7, #12]
 8030c9e:	f000 f80d 	bl	8030cbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8030ca2:	2204      	movs	r2, #4
 8030ca4:	4904      	ldr	r1, [pc, #16]	; (8030cb8 <Get_SerialNum+0x34>)
 8030ca6:	6878      	ldr	r0, [r7, #4]
 8030ca8:	f000 f808 	bl	8030cbc <IntToUnicode>
  }
}
 8030cac:	bf00      	nop
 8030cae:	3710      	adds	r7, #16
 8030cb0:	46bd      	mov	sp, r7
 8030cb2:	bd80      	pop	{r7, pc}
 8030cb4:	2000025e 	.word	0x2000025e
 8030cb8:	2000026e 	.word	0x2000026e

08030cbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8030cbc:	b480      	push	{r7}
 8030cbe:	b087      	sub	sp, #28
 8030cc0:	af00      	add	r7, sp, #0
 8030cc2:	60f8      	str	r0, [r7, #12]
 8030cc4:	60b9      	str	r1, [r7, #8]
 8030cc6:	4613      	mov	r3, r2
 8030cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8030cca:	2300      	movs	r3, #0
 8030ccc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8030cce:	2300      	movs	r3, #0
 8030cd0:	75fb      	strb	r3, [r7, #23]
 8030cd2:	e027      	b.n	8030d24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8030cd4:	68fb      	ldr	r3, [r7, #12]
 8030cd6:	0f1b      	lsrs	r3, r3, #28
 8030cd8:	2b09      	cmp	r3, #9
 8030cda:	d80b      	bhi.n	8030cf4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8030cdc:	68fb      	ldr	r3, [r7, #12]
 8030cde:	0f1b      	lsrs	r3, r3, #28
 8030ce0:	b2da      	uxtb	r2, r3
 8030ce2:	7dfb      	ldrb	r3, [r7, #23]
 8030ce4:	005b      	lsls	r3, r3, #1
 8030ce6:	4619      	mov	r1, r3
 8030ce8:	68bb      	ldr	r3, [r7, #8]
 8030cea:	440b      	add	r3, r1
 8030cec:	3230      	adds	r2, #48	; 0x30
 8030cee:	b2d2      	uxtb	r2, r2
 8030cf0:	701a      	strb	r2, [r3, #0]
 8030cf2:	e00a      	b.n	8030d0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8030cf4:	68fb      	ldr	r3, [r7, #12]
 8030cf6:	0f1b      	lsrs	r3, r3, #28
 8030cf8:	b2da      	uxtb	r2, r3
 8030cfa:	7dfb      	ldrb	r3, [r7, #23]
 8030cfc:	005b      	lsls	r3, r3, #1
 8030cfe:	4619      	mov	r1, r3
 8030d00:	68bb      	ldr	r3, [r7, #8]
 8030d02:	440b      	add	r3, r1
 8030d04:	3237      	adds	r2, #55	; 0x37
 8030d06:	b2d2      	uxtb	r2, r2
 8030d08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8030d0a:	68fb      	ldr	r3, [r7, #12]
 8030d0c:	011b      	lsls	r3, r3, #4
 8030d0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8030d10:	7dfb      	ldrb	r3, [r7, #23]
 8030d12:	005b      	lsls	r3, r3, #1
 8030d14:	3301      	adds	r3, #1
 8030d16:	68ba      	ldr	r2, [r7, #8]
 8030d18:	4413      	add	r3, r2
 8030d1a:	2200      	movs	r2, #0
 8030d1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8030d1e:	7dfb      	ldrb	r3, [r7, #23]
 8030d20:	3301      	adds	r3, #1
 8030d22:	75fb      	strb	r3, [r7, #23]
 8030d24:	7dfa      	ldrb	r2, [r7, #23]
 8030d26:	79fb      	ldrb	r3, [r7, #7]
 8030d28:	429a      	cmp	r2, r3
 8030d2a:	d3d3      	bcc.n	8030cd4 <IntToUnicode+0x18>
  }
}
 8030d2c:	bf00      	nop
 8030d2e:	bf00      	nop
 8030d30:	371c      	adds	r7, #28
 8030d32:	46bd      	mov	sp, r7
 8030d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d38:	4770      	bx	lr
	...

08030d3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8030d3c:	b580      	push	{r7, lr}
 8030d3e:	b08e      	sub	sp, #56	; 0x38
 8030d40:	af00      	add	r7, sp, #0
 8030d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8030d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030d48:	2200      	movs	r2, #0
 8030d4a:	601a      	str	r2, [r3, #0]
 8030d4c:	605a      	str	r2, [r3, #4]
 8030d4e:	609a      	str	r2, [r3, #8]
 8030d50:	60da      	str	r2, [r3, #12]
 8030d52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8030d54:	687b      	ldr	r3, [r7, #4]
 8030d56:	681b      	ldr	r3, [r3, #0]
 8030d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8030d5c:	d13b      	bne.n	8030dd6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030d5e:	2300      	movs	r3, #0
 8030d60:	623b      	str	r3, [r7, #32]
 8030d62:	4b69      	ldr	r3, [pc, #420]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d66:	4a68      	ldr	r2, [pc, #416]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030d68:	f043 0301 	orr.w	r3, r3, #1
 8030d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8030d6e:	4b66      	ldr	r3, [pc, #408]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d72:	f003 0301 	and.w	r3, r3, #1
 8030d76:	623b      	str	r3, [r7, #32]
 8030d78:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8030d7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8030d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030d80:	2302      	movs	r3, #2
 8030d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030d84:	2300      	movs	r3, #0
 8030d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030d88:	2303      	movs	r3, #3
 8030d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8030d8c:	230a      	movs	r3, #10
 8030d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030d94:	4619      	mov	r1, r3
 8030d96:	485d      	ldr	r0, [pc, #372]	; (8030f0c <HAL_PCD_MspInit+0x1d0>)
 8030d98:	f7f7 fa74 	bl	8028284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8030d9c:	4b5a      	ldr	r3, [pc, #360]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030da0:	4a59      	ldr	r2, [pc, #356]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030da6:	6353      	str	r3, [r2, #52]	; 0x34
 8030da8:	2300      	movs	r3, #0
 8030daa:	61fb      	str	r3, [r7, #28]
 8030dac:	4b56      	ldr	r3, [pc, #344]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030db0:	4a55      	ldr	r2, [pc, #340]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8030db6:	6453      	str	r3, [r2, #68]	; 0x44
 8030db8:	4b53      	ldr	r3, [pc, #332]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8030dc0:	61fb      	str	r3, [r7, #28]
 8030dc2:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8030dc4:	2200      	movs	r2, #0
 8030dc6:	2100      	movs	r1, #0
 8030dc8:	2043      	movs	r0, #67	; 0x43
 8030dca:	f7f6 fdf8 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8030dce:	2043      	movs	r0, #67	; 0x43
 8030dd0:	f7f6 fe11 	bl	80279f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8030dd4:	e094      	b.n	8030f00 <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8030dd6:	687b      	ldr	r3, [r7, #4]
 8030dd8:	681b      	ldr	r3, [r3, #0]
 8030dda:	4a4d      	ldr	r2, [pc, #308]	; (8030f10 <HAL_PCD_MspInit+0x1d4>)
 8030ddc:	4293      	cmp	r3, r2
 8030dde:	f040 808f 	bne.w	8030f00 <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8030de2:	2300      	movs	r3, #0
 8030de4:	61bb      	str	r3, [r7, #24]
 8030de6:	4b48      	ldr	r3, [pc, #288]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030dea:	4a47      	ldr	r2, [pc, #284]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030dec:	f043 0304 	orr.w	r3, r3, #4
 8030df0:	6313      	str	r3, [r2, #48]	; 0x30
 8030df2:	4b45      	ldr	r3, [pc, #276]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030df6:	f003 0304 	and.w	r3, r3, #4
 8030dfa:	61bb      	str	r3, [r7, #24]
 8030dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030dfe:	2300      	movs	r3, #0
 8030e00:	617b      	str	r3, [r7, #20]
 8030e02:	4b41      	ldr	r3, [pc, #260]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e06:	4a40      	ldr	r2, [pc, #256]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e08:	f043 0301 	orr.w	r3, r3, #1
 8030e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8030e0e:	4b3e      	ldr	r3, [pc, #248]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e12:	f003 0301 	and.w	r3, r3, #1
 8030e16:	617b      	str	r3, [r7, #20]
 8030e18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8030e1a:	2300      	movs	r3, #0
 8030e1c:	613b      	str	r3, [r7, #16]
 8030e1e:	4b3a      	ldr	r3, [pc, #232]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e22:	4a39      	ldr	r2, [pc, #228]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e24:	f043 0302 	orr.w	r3, r3, #2
 8030e28:	6313      	str	r3, [r2, #48]	; 0x30
 8030e2a:	4b37      	ldr	r3, [pc, #220]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e2e:	f003 0302 	and.w	r3, r3, #2
 8030e32:	613b      	str	r3, [r7, #16]
 8030e34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8030e36:	230d      	movs	r3, #13
 8030e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e3a:	2302      	movs	r3, #2
 8030e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e3e:	2300      	movs	r3, #0
 8030e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e42:	2303      	movs	r3, #3
 8030e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e46:	230a      	movs	r3, #10
 8030e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8030e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e4e:	4619      	mov	r1, r3
 8030e50:	4830      	ldr	r0, [pc, #192]	; (8030f14 <HAL_PCD_MspInit+0x1d8>)
 8030e52:	f7f7 fa17 	bl	8028284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8030e56:	2328      	movs	r3, #40	; 0x28
 8030e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e5a:	2302      	movs	r3, #2
 8030e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e5e:	2300      	movs	r3, #0
 8030e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e62:	2303      	movs	r3, #3
 8030e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e66:	230a      	movs	r3, #10
 8030e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e6e:	4619      	mov	r1, r3
 8030e70:	4826      	ldr	r0, [pc, #152]	; (8030f0c <HAL_PCD_MspInit+0x1d0>)
 8030e72:	f7f7 fa07 	bl	8028284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8030e76:	f643 4323 	movw	r3, #15395	; 0x3c23
 8030e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e7c:	2302      	movs	r3, #2
 8030e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e80:	2300      	movs	r3, #0
 8030e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e84:	2303      	movs	r3, #3
 8030e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e88:	230a      	movs	r3, #10
 8030e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8030e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e90:	4619      	mov	r1, r3
 8030e92:	4821      	ldr	r0, [pc, #132]	; (8030f18 <HAL_PCD_MspInit+0x1dc>)
 8030e94:	f7f7 f9f6 	bl	8028284 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8030e98:	2300      	movs	r3, #0
 8030e9a:	60fb      	str	r3, [r7, #12]
 8030e9c:	4b1a      	ldr	r3, [pc, #104]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ea0:	4a19      	ldr	r2, [pc, #100]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8030ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8030ea8:	4b17      	ldr	r3, [pc, #92]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8030eb0:	60fb      	str	r3, [r7, #12]
 8030eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8030eb4:	2300      	movs	r3, #0
 8030eb6:	60bb      	str	r3, [r7, #8]
 8030eb8:	4b13      	ldr	r3, [pc, #76]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ebc:	4a12      	ldr	r2, [pc, #72]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030ebe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8030ec4:	4b10      	ldr	r3, [pc, #64]	; (8030f08 <HAL_PCD_MspInit+0x1cc>)
 8030ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ec8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8030ecc:	60bb      	str	r3, [r7, #8]
 8030ece:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8030ed0:	2200      	movs	r2, #0
 8030ed2:	2100      	movs	r1, #0
 8030ed4:	204a      	movs	r0, #74	; 0x4a
 8030ed6:	f7f6 fd72 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8030eda:	204a      	movs	r0, #74	; 0x4a
 8030edc:	f7f6 fd8b 	bl	80279f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8030ee0:	2200      	movs	r2, #0
 8030ee2:	2100      	movs	r1, #0
 8030ee4:	204b      	movs	r0, #75	; 0x4b
 8030ee6:	f7f6 fd6a 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8030eea:	204b      	movs	r0, #75	; 0x4b
 8030eec:	f7f6 fd83 	bl	80279f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8030ef0:	2200      	movs	r2, #0
 8030ef2:	2100      	movs	r1, #0
 8030ef4:	204d      	movs	r0, #77	; 0x4d
 8030ef6:	f7f6 fd62 	bl	80279be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8030efa:	204d      	movs	r0, #77	; 0x4d
 8030efc:	f7f6 fd7b 	bl	80279f6 <HAL_NVIC_EnableIRQ>
}
 8030f00:	bf00      	nop
 8030f02:	3738      	adds	r7, #56	; 0x38
 8030f04:	46bd      	mov	sp, r7
 8030f06:	bd80      	pop	{r7, pc}
 8030f08:	40023800 	.word	0x40023800
 8030f0c:	40020000 	.word	0x40020000
 8030f10:	40040000 	.word	0x40040000
 8030f14:	40020800 	.word	0x40020800
 8030f18:	40020400 	.word	0x40020400

08030f1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f1c:	b580      	push	{r7, lr}
 8030f1e:	b082      	sub	sp, #8
 8030f20:	af00      	add	r7, sp, #0
 8030f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8030f24:	687b      	ldr	r3, [r7, #4]
 8030f26:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8030f2a:	687b      	ldr	r3, [r7, #4]
 8030f2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030f30:	4619      	mov	r1, r3
 8030f32:	4610      	mov	r0, r2
 8030f34:	f7fe f943 	bl	802f1be <USBD_LL_SetupStage>
}
 8030f38:	bf00      	nop
 8030f3a:	3708      	adds	r7, #8
 8030f3c:	46bd      	mov	sp, r7
 8030f3e:	bd80      	pop	{r7, pc}

08030f40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f40:	b580      	push	{r7, lr}
 8030f42:	b082      	sub	sp, #8
 8030f44:	af00      	add	r7, sp, #0
 8030f46:	6078      	str	r0, [r7, #4]
 8030f48:	460b      	mov	r3, r1
 8030f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8030f4c:	687b      	ldr	r3, [r7, #4]
 8030f4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030f52:	78fa      	ldrb	r2, [r7, #3]
 8030f54:	6879      	ldr	r1, [r7, #4]
 8030f56:	4613      	mov	r3, r2
 8030f58:	00db      	lsls	r3, r3, #3
 8030f5a:	4413      	add	r3, r2
 8030f5c:	009b      	lsls	r3, r3, #2
 8030f5e:	440b      	add	r3, r1
 8030f60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8030f64:	681a      	ldr	r2, [r3, #0]
 8030f66:	78fb      	ldrb	r3, [r7, #3]
 8030f68:	4619      	mov	r1, r3
 8030f6a:	f7fe f97d 	bl	802f268 <USBD_LL_DataOutStage>
}
 8030f6e:	bf00      	nop
 8030f70:	3708      	adds	r7, #8
 8030f72:	46bd      	mov	sp, r7
 8030f74:	bd80      	pop	{r7, pc}

08030f76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f76:	b580      	push	{r7, lr}
 8030f78:	b082      	sub	sp, #8
 8030f7a:	af00      	add	r7, sp, #0
 8030f7c:	6078      	str	r0, [r7, #4]
 8030f7e:	460b      	mov	r3, r1
 8030f80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8030f82:	687b      	ldr	r3, [r7, #4]
 8030f84:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030f88:	78fa      	ldrb	r2, [r7, #3]
 8030f8a:	6879      	ldr	r1, [r7, #4]
 8030f8c:	4613      	mov	r3, r2
 8030f8e:	00db      	lsls	r3, r3, #3
 8030f90:	4413      	add	r3, r2
 8030f92:	009b      	lsls	r3, r3, #2
 8030f94:	440b      	add	r3, r1
 8030f96:	334c      	adds	r3, #76	; 0x4c
 8030f98:	681a      	ldr	r2, [r3, #0]
 8030f9a:	78fb      	ldrb	r3, [r7, #3]
 8030f9c:	4619      	mov	r1, r3
 8030f9e:	f7fe fa16 	bl	802f3ce <USBD_LL_DataInStage>
}
 8030fa2:	bf00      	nop
 8030fa4:	3708      	adds	r7, #8
 8030fa6:	46bd      	mov	sp, r7
 8030fa8:	bd80      	pop	{r7, pc}

08030faa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030faa:	b580      	push	{r7, lr}
 8030fac:	b082      	sub	sp, #8
 8030fae:	af00      	add	r7, sp, #0
 8030fb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8030fb2:	687b      	ldr	r3, [r7, #4]
 8030fb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030fb8:	4618      	mov	r0, r3
 8030fba:	f7fe fb4a 	bl	802f652 <USBD_LL_SOF>
}
 8030fbe:	bf00      	nop
 8030fc0:	3708      	adds	r7, #8
 8030fc2:	46bd      	mov	sp, r7
 8030fc4:	bd80      	pop	{r7, pc}

08030fc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030fc6:	b580      	push	{r7, lr}
 8030fc8:	b084      	sub	sp, #16
 8030fca:	af00      	add	r7, sp, #0
 8030fcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8030fce:	2301      	movs	r3, #1
 8030fd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8030fd2:	687b      	ldr	r3, [r7, #4]
 8030fd4:	68db      	ldr	r3, [r3, #12]
 8030fd6:	2b00      	cmp	r3, #0
 8030fd8:	d102      	bne.n	8030fe0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8030fda:	2300      	movs	r3, #0
 8030fdc:	73fb      	strb	r3, [r7, #15]
 8030fde:	e008      	b.n	8030ff2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8030fe0:	687b      	ldr	r3, [r7, #4]
 8030fe2:	68db      	ldr	r3, [r3, #12]
 8030fe4:	2b02      	cmp	r3, #2
 8030fe6:	d102      	bne.n	8030fee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8030fe8:	2301      	movs	r3, #1
 8030fea:	73fb      	strb	r3, [r7, #15]
 8030fec:	e001      	b.n	8030ff2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8030fee:	f7f2 fd15 	bl	8023a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8030ff2:	687b      	ldr	r3, [r7, #4]
 8030ff4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030ff8:	7bfa      	ldrb	r2, [r7, #15]
 8030ffa:	4611      	mov	r1, r2
 8030ffc:	4618      	mov	r0, r3
 8030ffe:	f7fe faea 	bl	802f5d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8031002:	687b      	ldr	r3, [r7, #4]
 8031004:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031008:	4618      	mov	r0, r3
 803100a:	f7fe fa92 	bl	802f532 <USBD_LL_Reset>
}
 803100e:	bf00      	nop
 8031010:	3710      	adds	r7, #16
 8031012:	46bd      	mov	sp, r7
 8031014:	bd80      	pop	{r7, pc}
	...

08031018 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031018:	b580      	push	{r7, lr}
 803101a:	b082      	sub	sp, #8
 803101c:	af00      	add	r7, sp, #0
 803101e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8031020:	687b      	ldr	r3, [r7, #4]
 8031022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031026:	4618      	mov	r0, r3
 8031028:	f7fe fae5 	bl	802f5f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803102c:	687b      	ldr	r3, [r7, #4]
 803102e:	681b      	ldr	r3, [r3, #0]
 8031030:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8031034:	681b      	ldr	r3, [r3, #0]
 8031036:	687a      	ldr	r2, [r7, #4]
 8031038:	6812      	ldr	r2, [r2, #0]
 803103a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803103e:	f043 0301 	orr.w	r3, r3, #1
 8031042:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8031044:	687b      	ldr	r3, [r7, #4]
 8031046:	6a1b      	ldr	r3, [r3, #32]
 8031048:	2b00      	cmp	r3, #0
 803104a:	d005      	beq.n	8031058 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803104c:	4b04      	ldr	r3, [pc, #16]	; (8031060 <HAL_PCD_SuspendCallback+0x48>)
 803104e:	691b      	ldr	r3, [r3, #16]
 8031050:	4a03      	ldr	r2, [pc, #12]	; (8031060 <HAL_PCD_SuspendCallback+0x48>)
 8031052:	f043 0306 	orr.w	r3, r3, #6
 8031056:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8031058:	bf00      	nop
 803105a:	3708      	adds	r7, #8
 803105c:	46bd      	mov	sp, r7
 803105e:	bd80      	pop	{r7, pc}
 8031060:	e000ed00 	.word	0xe000ed00

08031064 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031064:	b580      	push	{r7, lr}
 8031066:	b082      	sub	sp, #8
 8031068:	af00      	add	r7, sp, #0
 803106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803106c:	687b      	ldr	r3, [r7, #4]
 803106e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031072:	4618      	mov	r0, r3
 8031074:	f7fe fad5 	bl	802f622 <USBD_LL_Resume>
}
 8031078:	bf00      	nop
 803107a:	3708      	adds	r7, #8
 803107c:	46bd      	mov	sp, r7
 803107e:	bd80      	pop	{r7, pc}

08031080 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031080:	b580      	push	{r7, lr}
 8031082:	b082      	sub	sp, #8
 8031084:	af00      	add	r7, sp, #0
 8031086:	6078      	str	r0, [r7, #4]
 8031088:	460b      	mov	r3, r1
 803108a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803108c:	687b      	ldr	r3, [r7, #4]
 803108e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031092:	78fa      	ldrb	r2, [r7, #3]
 8031094:	4611      	mov	r1, r2
 8031096:	4618      	mov	r0, r3
 8031098:	f7fe fb2d 	bl	802f6f6 <USBD_LL_IsoOUTIncomplete>
}
 803109c:	bf00      	nop
 803109e:	3708      	adds	r7, #8
 80310a0:	46bd      	mov	sp, r7
 80310a2:	bd80      	pop	{r7, pc}

080310a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310a4:	b580      	push	{r7, lr}
 80310a6:	b082      	sub	sp, #8
 80310a8:	af00      	add	r7, sp, #0
 80310aa:	6078      	str	r0, [r7, #4]
 80310ac:	460b      	mov	r3, r1
 80310ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80310b0:	687b      	ldr	r3, [r7, #4]
 80310b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310b6:	78fa      	ldrb	r2, [r7, #3]
 80310b8:	4611      	mov	r1, r2
 80310ba:	4618      	mov	r0, r3
 80310bc:	f7fe fae9 	bl	802f692 <USBD_LL_IsoINIncomplete>
}
 80310c0:	bf00      	nop
 80310c2:	3708      	adds	r7, #8
 80310c4:	46bd      	mov	sp, r7
 80310c6:	bd80      	pop	{r7, pc}

080310c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310c8:	b580      	push	{r7, lr}
 80310ca:	b082      	sub	sp, #8
 80310cc:	af00      	add	r7, sp, #0
 80310ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80310d0:	687b      	ldr	r3, [r7, #4]
 80310d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310d6:	4618      	mov	r0, r3
 80310d8:	f7fe fb3f 	bl	802f75a <USBD_LL_DevConnected>
}
 80310dc:	bf00      	nop
 80310de:	3708      	adds	r7, #8
 80310e0:	46bd      	mov	sp, r7
 80310e2:	bd80      	pop	{r7, pc}

080310e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310e4:	b580      	push	{r7, lr}
 80310e6:	b082      	sub	sp, #8
 80310e8:	af00      	add	r7, sp, #0
 80310ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80310ec:	687b      	ldr	r3, [r7, #4]
 80310ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310f2:	4618      	mov	r0, r3
 80310f4:	f7fe fb3c 	bl	802f770 <USBD_LL_DevDisconnected>
}
 80310f8:	bf00      	nop
 80310fa:	3708      	adds	r7, #8
 80310fc:	46bd      	mov	sp, r7
 80310fe:	bd80      	pop	{r7, pc}

08031100 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8031100:	b580      	push	{r7, lr}
 8031102:	b082      	sub	sp, #8
 8031104:	af00      	add	r7, sp, #0
 8031106:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8031108:	687b      	ldr	r3, [r7, #4]
 803110a:	781b      	ldrb	r3, [r3, #0]
 803110c:	2b00      	cmp	r3, #0
 803110e:	d13c      	bne.n	803118a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8031110:	4a43      	ldr	r2, [pc, #268]	; (8031220 <USBD_LL_Init+0x120>)
 8031112:	687b      	ldr	r3, [r7, #4]
 8031114:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8031118:	687b      	ldr	r3, [r7, #4]
 803111a:	4a41      	ldr	r2, [pc, #260]	; (8031220 <USBD_LL_Init+0x120>)
 803111c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8031120:	4b3f      	ldr	r3, [pc, #252]	; (8031220 <USBD_LL_Init+0x120>)
 8031122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8031126:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8031128:	4b3d      	ldr	r3, [pc, #244]	; (8031220 <USBD_LL_Init+0x120>)
 803112a:	2204      	movs	r2, #4
 803112c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803112e:	4b3c      	ldr	r3, [pc, #240]	; (8031220 <USBD_LL_Init+0x120>)
 8031130:	2202      	movs	r2, #2
 8031132:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8031134:	4b3a      	ldr	r3, [pc, #232]	; (8031220 <USBD_LL_Init+0x120>)
 8031136:	2200      	movs	r2, #0
 8031138:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803113a:	4b39      	ldr	r3, [pc, #228]	; (8031220 <USBD_LL_Init+0x120>)
 803113c:	2202      	movs	r2, #2
 803113e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8031140:	4b37      	ldr	r3, [pc, #220]	; (8031220 <USBD_LL_Init+0x120>)
 8031142:	2200      	movs	r2, #0
 8031144:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8031146:	4b36      	ldr	r3, [pc, #216]	; (8031220 <USBD_LL_Init+0x120>)
 8031148:	2200      	movs	r2, #0
 803114a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803114c:	4b34      	ldr	r3, [pc, #208]	; (8031220 <USBD_LL_Init+0x120>)
 803114e:	2200      	movs	r2, #0
 8031150:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8031152:	4b33      	ldr	r3, [pc, #204]	; (8031220 <USBD_LL_Init+0x120>)
 8031154:	2200      	movs	r2, #0
 8031156:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8031158:	4b31      	ldr	r3, [pc, #196]	; (8031220 <USBD_LL_Init+0x120>)
 803115a:	2200      	movs	r2, #0
 803115c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803115e:	4830      	ldr	r0, [pc, #192]	; (8031220 <USBD_LL_Init+0x120>)
 8031160:	f7f7 fc6d 	bl	8028a3e <HAL_PCD_Init>
 8031164:	4603      	mov	r3, r0
 8031166:	2b00      	cmp	r3, #0
 8031168:	d001      	beq.n	803116e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 803116a:	f7f2 fc57 	bl	8023a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803116e:	2180      	movs	r1, #128	; 0x80
 8031170:	482b      	ldr	r0, [pc, #172]	; (8031220 <USBD_LL_Init+0x120>)
 8031172:	f7f8 fec4 	bl	8029efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8031176:	2240      	movs	r2, #64	; 0x40
 8031178:	2100      	movs	r1, #0
 803117a:	4829      	ldr	r0, [pc, #164]	; (8031220 <USBD_LL_Init+0x120>)
 803117c:	f7f8 fe78 	bl	8029e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8031180:	2280      	movs	r2, #128	; 0x80
 8031182:	2101      	movs	r1, #1
 8031184:	4826      	ldr	r0, [pc, #152]	; (8031220 <USBD_LL_Init+0x120>)
 8031186:	f7f8 fe73 	bl	8029e70 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 803118a:	687b      	ldr	r3, [r7, #4]
 803118c:	781b      	ldrb	r3, [r3, #0]
 803118e:	2b01      	cmp	r3, #1
 8031190:	d140      	bne.n	8031214 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8031192:	4a24      	ldr	r2, [pc, #144]	; (8031224 <USBD_LL_Init+0x124>)
 8031194:	687b      	ldr	r3, [r7, #4]
 8031196:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 803119a:	687b      	ldr	r3, [r7, #4]
 803119c:	4a21      	ldr	r2, [pc, #132]	; (8031224 <USBD_LL_Init+0x124>)
 803119e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80311a2:	4b20      	ldr	r3, [pc, #128]	; (8031224 <USBD_LL_Init+0x124>)
 80311a4:	4a20      	ldr	r2, [pc, #128]	; (8031228 <USBD_LL_Init+0x128>)
 80311a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80311a8:	4b1e      	ldr	r3, [pc, #120]	; (8031224 <USBD_LL_Init+0x124>)
 80311aa:	2206      	movs	r2, #6
 80311ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80311ae:	4b1d      	ldr	r3, [pc, #116]	; (8031224 <USBD_LL_Init+0x124>)
 80311b0:	2200      	movs	r2, #0
 80311b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80311b4:	4b1b      	ldr	r3, [pc, #108]	; (8031224 <USBD_LL_Init+0x124>)
 80311b6:	2200      	movs	r2, #0
 80311b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80311ba:	4b1a      	ldr	r3, [pc, #104]	; (8031224 <USBD_LL_Init+0x124>)
 80311bc:	2201      	movs	r2, #1
 80311be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80311c0:	4b18      	ldr	r3, [pc, #96]	; (8031224 <USBD_LL_Init+0x124>)
 80311c2:	2200      	movs	r2, #0
 80311c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80311c6:	4b17      	ldr	r3, [pc, #92]	; (8031224 <USBD_LL_Init+0x124>)
 80311c8:	2200      	movs	r2, #0
 80311ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80311cc:	4b15      	ldr	r3, [pc, #84]	; (8031224 <USBD_LL_Init+0x124>)
 80311ce:	2200      	movs	r2, #0
 80311d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80311d2:	4b14      	ldr	r3, [pc, #80]	; (8031224 <USBD_LL_Init+0x124>)
 80311d4:	2200      	movs	r2, #0
 80311d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80311d8:	4b12      	ldr	r3, [pc, #72]	; (8031224 <USBD_LL_Init+0x124>)
 80311da:	2200      	movs	r2, #0
 80311dc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80311de:	4b11      	ldr	r3, [pc, #68]	; (8031224 <USBD_LL_Init+0x124>)
 80311e0:	2200      	movs	r2, #0
 80311e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80311e4:	480f      	ldr	r0, [pc, #60]	; (8031224 <USBD_LL_Init+0x124>)
 80311e6:	f7f7 fc2a 	bl	8028a3e <HAL_PCD_Init>
 80311ea:	4603      	mov	r3, r0
 80311ec:	2b00      	cmp	r3, #0
 80311ee:	d001      	beq.n	80311f4 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80311f0:	f7f2 fc14 	bl	8023a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80311f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80311f8:	480a      	ldr	r0, [pc, #40]	; (8031224 <USBD_LL_Init+0x124>)
 80311fa:	f7f8 fe80 	bl	8029efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80311fe:	2280      	movs	r2, #128	; 0x80
 8031200:	2100      	movs	r1, #0
 8031202:	4808      	ldr	r0, [pc, #32]	; (8031224 <USBD_LL_Init+0x124>)
 8031204:	f7f8 fe34 	bl	8029e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8031208:	f44f 72ba 	mov.w	r2, #372	; 0x174
 803120c:	2101      	movs	r1, #1
 803120e:	4805      	ldr	r0, [pc, #20]	; (8031224 <USBD_LL_Init+0x124>)
 8031210:	f7f8 fe2e 	bl	8029e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8031214:	2300      	movs	r3, #0
}
 8031216:	4618      	mov	r0, r3
 8031218:	3708      	adds	r7, #8
 803121a:	46bd      	mov	sp, r7
 803121c:	bd80      	pop	{r7, pc}
 803121e:	bf00      	nop
 8031220:	200079d8 	.word	0x200079d8
 8031224:	20007ee4 	.word	0x20007ee4
 8031228:	40040000 	.word	0x40040000

0803122c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803122c:	b580      	push	{r7, lr}
 803122e:	b084      	sub	sp, #16
 8031230:	af00      	add	r7, sp, #0
 8031232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031234:	2300      	movs	r3, #0
 8031236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031238:	2300      	movs	r3, #0
 803123a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803123c:	687b      	ldr	r3, [r7, #4]
 803123e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031242:	4618      	mov	r0, r3
 8031244:	f7f7 fd18 	bl	8028c78 <HAL_PCD_Start>
 8031248:	4603      	mov	r3, r0
 803124a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803124c:	7bfb      	ldrb	r3, [r7, #15]
 803124e:	4618      	mov	r0, r3
 8031250:	f000 f942 	bl	80314d8 <USBD_Get_USB_Status>
 8031254:	4603      	mov	r3, r0
 8031256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031258:	7bbb      	ldrb	r3, [r7, #14]
}
 803125a:	4618      	mov	r0, r3
 803125c:	3710      	adds	r7, #16
 803125e:	46bd      	mov	sp, r7
 8031260:	bd80      	pop	{r7, pc}

08031262 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8031262:	b580      	push	{r7, lr}
 8031264:	b084      	sub	sp, #16
 8031266:	af00      	add	r7, sp, #0
 8031268:	6078      	str	r0, [r7, #4]
 803126a:	4608      	mov	r0, r1
 803126c:	4611      	mov	r1, r2
 803126e:	461a      	mov	r2, r3
 8031270:	4603      	mov	r3, r0
 8031272:	70fb      	strb	r3, [r7, #3]
 8031274:	460b      	mov	r3, r1
 8031276:	70bb      	strb	r3, [r7, #2]
 8031278:	4613      	mov	r3, r2
 803127a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803127c:	2300      	movs	r3, #0
 803127e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031280:	2300      	movs	r3, #0
 8031282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8031284:	687b      	ldr	r3, [r7, #4]
 8031286:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803128a:	78bb      	ldrb	r3, [r7, #2]
 803128c:	883a      	ldrh	r2, [r7, #0]
 803128e:	78f9      	ldrb	r1, [r7, #3]
 8031290:	f7f8 f9e9 	bl	8029666 <HAL_PCD_EP_Open>
 8031294:	4603      	mov	r3, r0
 8031296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031298:	7bfb      	ldrb	r3, [r7, #15]
 803129a:	4618      	mov	r0, r3
 803129c:	f000 f91c 	bl	80314d8 <USBD_Get_USB_Status>
 80312a0:	4603      	mov	r3, r0
 80312a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80312a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80312a6:	4618      	mov	r0, r3
 80312a8:	3710      	adds	r7, #16
 80312aa:	46bd      	mov	sp, r7
 80312ac:	bd80      	pop	{r7, pc}

080312ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80312ae:	b580      	push	{r7, lr}
 80312b0:	b084      	sub	sp, #16
 80312b2:	af00      	add	r7, sp, #0
 80312b4:	6078      	str	r0, [r7, #4]
 80312b6:	460b      	mov	r3, r1
 80312b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312ba:	2300      	movs	r3, #0
 80312bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312be:	2300      	movs	r3, #0
 80312c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80312c2:	687b      	ldr	r3, [r7, #4]
 80312c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80312c8:	78fa      	ldrb	r2, [r7, #3]
 80312ca:	4611      	mov	r1, r2
 80312cc:	4618      	mov	r0, r3
 80312ce:	f7f8 fa32 	bl	8029736 <HAL_PCD_EP_Close>
 80312d2:	4603      	mov	r3, r0
 80312d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80312d6:	7bfb      	ldrb	r3, [r7, #15]
 80312d8:	4618      	mov	r0, r3
 80312da:	f000 f8fd 	bl	80314d8 <USBD_Get_USB_Status>
 80312de:	4603      	mov	r3, r0
 80312e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80312e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80312e4:	4618      	mov	r0, r3
 80312e6:	3710      	adds	r7, #16
 80312e8:	46bd      	mov	sp, r7
 80312ea:	bd80      	pop	{r7, pc}

080312ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80312ec:	b580      	push	{r7, lr}
 80312ee:	b084      	sub	sp, #16
 80312f0:	af00      	add	r7, sp, #0
 80312f2:	6078      	str	r0, [r7, #4]
 80312f4:	460b      	mov	r3, r1
 80312f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312f8:	2300      	movs	r3, #0
 80312fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312fc:	2300      	movs	r3, #0
 80312fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8031300:	687b      	ldr	r3, [r7, #4]
 8031302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031306:	78fa      	ldrb	r2, [r7, #3]
 8031308:	4611      	mov	r1, r2
 803130a:	4618      	mov	r0, r3
 803130c:	f7f8 fb0a 	bl	8029924 <HAL_PCD_EP_SetStall>
 8031310:	4603      	mov	r3, r0
 8031312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031314:	7bfb      	ldrb	r3, [r7, #15]
 8031316:	4618      	mov	r0, r3
 8031318:	f000 f8de 	bl	80314d8 <USBD_Get_USB_Status>
 803131c:	4603      	mov	r3, r0
 803131e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031320:	7bbb      	ldrb	r3, [r7, #14]
}
 8031322:	4618      	mov	r0, r3
 8031324:	3710      	adds	r7, #16
 8031326:	46bd      	mov	sp, r7
 8031328:	bd80      	pop	{r7, pc}

0803132a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803132a:	b580      	push	{r7, lr}
 803132c:	b084      	sub	sp, #16
 803132e:	af00      	add	r7, sp, #0
 8031330:	6078      	str	r0, [r7, #4]
 8031332:	460b      	mov	r3, r1
 8031334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031336:	2300      	movs	r3, #0
 8031338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803133a:	2300      	movs	r3, #0
 803133c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803133e:	687b      	ldr	r3, [r7, #4]
 8031340:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031344:	78fa      	ldrb	r2, [r7, #3]
 8031346:	4611      	mov	r1, r2
 8031348:	4618      	mov	r0, r3
 803134a:	f7f8 fb4f 	bl	80299ec <HAL_PCD_EP_ClrStall>
 803134e:	4603      	mov	r3, r0
 8031350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031352:	7bfb      	ldrb	r3, [r7, #15]
 8031354:	4618      	mov	r0, r3
 8031356:	f000 f8bf 	bl	80314d8 <USBD_Get_USB_Status>
 803135a:	4603      	mov	r3, r0
 803135c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803135e:	7bbb      	ldrb	r3, [r7, #14]
}
 8031360:	4618      	mov	r0, r3
 8031362:	3710      	adds	r7, #16
 8031364:	46bd      	mov	sp, r7
 8031366:	bd80      	pop	{r7, pc}

08031368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031368:	b480      	push	{r7}
 803136a:	b085      	sub	sp, #20
 803136c:	af00      	add	r7, sp, #0
 803136e:	6078      	str	r0, [r7, #4]
 8031370:	460b      	mov	r3, r1
 8031372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8031374:	687b      	ldr	r3, [r7, #4]
 8031376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803137a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803137c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8031380:	2b00      	cmp	r3, #0
 8031382:	da0b      	bge.n	803139c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8031384:	78fb      	ldrb	r3, [r7, #3]
 8031386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803138a:	68f9      	ldr	r1, [r7, #12]
 803138c:	4613      	mov	r3, r2
 803138e:	00db      	lsls	r3, r3, #3
 8031390:	4413      	add	r3, r2
 8031392:	009b      	lsls	r3, r3, #2
 8031394:	440b      	add	r3, r1
 8031396:	333e      	adds	r3, #62	; 0x3e
 8031398:	781b      	ldrb	r3, [r3, #0]
 803139a:	e00b      	b.n	80313b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803139c:	78fb      	ldrb	r3, [r7, #3]
 803139e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80313a2:	68f9      	ldr	r1, [r7, #12]
 80313a4:	4613      	mov	r3, r2
 80313a6:	00db      	lsls	r3, r3, #3
 80313a8:	4413      	add	r3, r2
 80313aa:	009b      	lsls	r3, r3, #2
 80313ac:	440b      	add	r3, r1
 80313ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80313b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80313b4:	4618      	mov	r0, r3
 80313b6:	3714      	adds	r7, #20
 80313b8:	46bd      	mov	sp, r7
 80313ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313be:	4770      	bx	lr

080313c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80313c0:	b580      	push	{r7, lr}
 80313c2:	b084      	sub	sp, #16
 80313c4:	af00      	add	r7, sp, #0
 80313c6:	6078      	str	r0, [r7, #4]
 80313c8:	460b      	mov	r3, r1
 80313ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80313cc:	2300      	movs	r3, #0
 80313ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80313d0:	2300      	movs	r3, #0
 80313d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80313d4:	687b      	ldr	r3, [r7, #4]
 80313d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80313da:	78fa      	ldrb	r2, [r7, #3]
 80313dc:	4611      	mov	r1, r2
 80313de:	4618      	mov	r0, r3
 80313e0:	f7f8 f91c 	bl	802961c <HAL_PCD_SetAddress>
 80313e4:	4603      	mov	r3, r0
 80313e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80313e8:	7bfb      	ldrb	r3, [r7, #15]
 80313ea:	4618      	mov	r0, r3
 80313ec:	f000 f874 	bl	80314d8 <USBD_Get_USB_Status>
 80313f0:	4603      	mov	r3, r0
 80313f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80313f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80313f6:	4618      	mov	r0, r3
 80313f8:	3710      	adds	r7, #16
 80313fa:	46bd      	mov	sp, r7
 80313fc:	bd80      	pop	{r7, pc}

080313fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80313fe:	b580      	push	{r7, lr}
 8031400:	b086      	sub	sp, #24
 8031402:	af00      	add	r7, sp, #0
 8031404:	60f8      	str	r0, [r7, #12]
 8031406:	607a      	str	r2, [r7, #4]
 8031408:	603b      	str	r3, [r7, #0]
 803140a:	460b      	mov	r3, r1
 803140c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803140e:	2300      	movs	r3, #0
 8031410:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031412:	2300      	movs	r3, #0
 8031414:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8031416:	68fb      	ldr	r3, [r7, #12]
 8031418:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803141c:	7af9      	ldrb	r1, [r7, #11]
 803141e:	683b      	ldr	r3, [r7, #0]
 8031420:	687a      	ldr	r2, [r7, #4]
 8031422:	f7f8 fa35 	bl	8029890 <HAL_PCD_EP_Transmit>
 8031426:	4603      	mov	r3, r0
 8031428:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803142a:	7dfb      	ldrb	r3, [r7, #23]
 803142c:	4618      	mov	r0, r3
 803142e:	f000 f853 	bl	80314d8 <USBD_Get_USB_Status>
 8031432:	4603      	mov	r3, r0
 8031434:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031436:	7dbb      	ldrb	r3, [r7, #22]
}
 8031438:	4618      	mov	r0, r3
 803143a:	3718      	adds	r7, #24
 803143c:	46bd      	mov	sp, r7
 803143e:	bd80      	pop	{r7, pc}

08031440 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8031440:	b580      	push	{r7, lr}
 8031442:	b086      	sub	sp, #24
 8031444:	af00      	add	r7, sp, #0
 8031446:	60f8      	str	r0, [r7, #12]
 8031448:	607a      	str	r2, [r7, #4]
 803144a:	603b      	str	r3, [r7, #0]
 803144c:	460b      	mov	r3, r1
 803144e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031450:	2300      	movs	r3, #0
 8031452:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031454:	2300      	movs	r3, #0
 8031456:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8031458:	68fb      	ldr	r3, [r7, #12]
 803145a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803145e:	7af9      	ldrb	r1, [r7, #11]
 8031460:	683b      	ldr	r3, [r7, #0]
 8031462:	687a      	ldr	r2, [r7, #4]
 8031464:	f7f8 f9b1 	bl	80297ca <HAL_PCD_EP_Receive>
 8031468:	4603      	mov	r3, r0
 803146a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803146c:	7dfb      	ldrb	r3, [r7, #23]
 803146e:	4618      	mov	r0, r3
 8031470:	f000 f832 	bl	80314d8 <USBD_Get_USB_Status>
 8031474:	4603      	mov	r3, r0
 8031476:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031478:	7dbb      	ldrb	r3, [r7, #22]
}
 803147a:	4618      	mov	r0, r3
 803147c:	3718      	adds	r7, #24
 803147e:	46bd      	mov	sp, r7
 8031480:	bd80      	pop	{r7, pc}

08031482 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031482:	b580      	push	{r7, lr}
 8031484:	b082      	sub	sp, #8
 8031486:	af00      	add	r7, sp, #0
 8031488:	6078      	str	r0, [r7, #4]
 803148a:	460b      	mov	r3, r1
 803148c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803148e:	687b      	ldr	r3, [r7, #4]
 8031490:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031494:	78fa      	ldrb	r2, [r7, #3]
 8031496:	4611      	mov	r1, r2
 8031498:	4618      	mov	r0, r3
 803149a:	f7f8 f9e1 	bl	8029860 <HAL_PCD_EP_GetRxCount>
 803149e:	4603      	mov	r3, r0
}
 80314a0:	4618      	mov	r0, r3
 80314a2:	3708      	adds	r7, #8
 80314a4:	46bd      	mov	sp, r7
 80314a6:	bd80      	pop	{r7, pc}

080314a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80314a8:	b480      	push	{r7}
 80314aa:	b083      	sub	sp, #12
 80314ac:	af00      	add	r7, sp, #0
 80314ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80314b0:	4b03      	ldr	r3, [pc, #12]	; (80314c0 <USBD_static_malloc+0x18>)
}
 80314b2:	4618      	mov	r0, r3
 80314b4:	370c      	adds	r7, #12
 80314b6:	46bd      	mov	sp, r7
 80314b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314bc:	4770      	bx	lr
 80314be:	bf00      	nop
 80314c0:	200083f0 	.word	0x200083f0

080314c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80314c4:	b480      	push	{r7}
 80314c6:	b083      	sub	sp, #12
 80314c8:	af00      	add	r7, sp, #0
 80314ca:	6078      	str	r0, [r7, #4]

}
 80314cc:	bf00      	nop
 80314ce:	370c      	adds	r7, #12
 80314d0:	46bd      	mov	sp, r7
 80314d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314d6:	4770      	bx	lr

080314d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80314d8:	b480      	push	{r7}
 80314da:	b085      	sub	sp, #20
 80314dc:	af00      	add	r7, sp, #0
 80314de:	4603      	mov	r3, r0
 80314e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80314e2:	2300      	movs	r3, #0
 80314e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80314e6:	79fb      	ldrb	r3, [r7, #7]
 80314e8:	2b03      	cmp	r3, #3
 80314ea:	d817      	bhi.n	803151c <USBD_Get_USB_Status+0x44>
 80314ec:	a201      	add	r2, pc, #4	; (adr r2, 80314f4 <USBD_Get_USB_Status+0x1c>)
 80314ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80314f2:	bf00      	nop
 80314f4:	08031505 	.word	0x08031505
 80314f8:	0803150b 	.word	0x0803150b
 80314fc:	08031511 	.word	0x08031511
 8031500:	08031517 	.word	0x08031517
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8031504:	2300      	movs	r3, #0
 8031506:	73fb      	strb	r3, [r7, #15]
    break;
 8031508:	e00b      	b.n	8031522 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803150a:	2303      	movs	r3, #3
 803150c:	73fb      	strb	r3, [r7, #15]
    break;
 803150e:	e008      	b.n	8031522 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8031510:	2301      	movs	r3, #1
 8031512:	73fb      	strb	r3, [r7, #15]
    break;
 8031514:	e005      	b.n	8031522 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8031516:	2303      	movs	r3, #3
 8031518:	73fb      	strb	r3, [r7, #15]
    break;
 803151a:	e002      	b.n	8031522 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803151c:	2303      	movs	r3, #3
 803151e:	73fb      	strb	r3, [r7, #15]
    break;
 8031520:	bf00      	nop
  }
  return usb_status;
 8031522:	7bfb      	ldrb	r3, [r7, #15]
}
 8031524:	4618      	mov	r0, r3
 8031526:	3714      	adds	r7, #20
 8031528:	46bd      	mov	sp, r7
 803152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803152e:	4770      	bx	lr

08031530 <std>:
 8031530:	2300      	movs	r3, #0
 8031532:	b510      	push	{r4, lr}
 8031534:	4604      	mov	r4, r0
 8031536:	e9c0 3300 	strd	r3, r3, [r0]
 803153a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803153e:	6083      	str	r3, [r0, #8]
 8031540:	8181      	strh	r1, [r0, #12]
 8031542:	6643      	str	r3, [r0, #100]	; 0x64
 8031544:	81c2      	strh	r2, [r0, #14]
 8031546:	6183      	str	r3, [r0, #24]
 8031548:	4619      	mov	r1, r3
 803154a:	2208      	movs	r2, #8
 803154c:	305c      	adds	r0, #92	; 0x5c
 803154e:	f000 f9f7 	bl	8031940 <memset>
 8031552:	4b0d      	ldr	r3, [pc, #52]	; (8031588 <std+0x58>)
 8031554:	6263      	str	r3, [r4, #36]	; 0x24
 8031556:	4b0d      	ldr	r3, [pc, #52]	; (803158c <std+0x5c>)
 8031558:	62a3      	str	r3, [r4, #40]	; 0x28
 803155a:	4b0d      	ldr	r3, [pc, #52]	; (8031590 <std+0x60>)
 803155c:	62e3      	str	r3, [r4, #44]	; 0x2c
 803155e:	4b0d      	ldr	r3, [pc, #52]	; (8031594 <std+0x64>)
 8031560:	6323      	str	r3, [r4, #48]	; 0x30
 8031562:	4b0d      	ldr	r3, [pc, #52]	; (8031598 <std+0x68>)
 8031564:	6224      	str	r4, [r4, #32]
 8031566:	429c      	cmp	r4, r3
 8031568:	d006      	beq.n	8031578 <std+0x48>
 803156a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 803156e:	4294      	cmp	r4, r2
 8031570:	d002      	beq.n	8031578 <std+0x48>
 8031572:	33d0      	adds	r3, #208	; 0xd0
 8031574:	429c      	cmp	r4, r3
 8031576:	d105      	bne.n	8031584 <std+0x54>
 8031578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031580:	f000 ba56 	b.w	8031a30 <__retarget_lock_init_recursive>
 8031584:	bd10      	pop	{r4, pc}
 8031586:	bf00      	nop
 8031588:	08031791 	.word	0x08031791
 803158c:	080317b3 	.word	0x080317b3
 8031590:	080317eb 	.word	0x080317eb
 8031594:	0803180f 	.word	0x0803180f
 8031598:	20008610 	.word	0x20008610

0803159c <stdio_exit_handler>:
 803159c:	4a02      	ldr	r2, [pc, #8]	; (80315a8 <stdio_exit_handler+0xc>)
 803159e:	4903      	ldr	r1, [pc, #12]	; (80315ac <stdio_exit_handler+0x10>)
 80315a0:	4803      	ldr	r0, [pc, #12]	; (80315b0 <stdio_exit_handler+0x14>)
 80315a2:	f000 b869 	b.w	8031678 <_fwalk_sglue>
 80315a6:	bf00      	nop
 80315a8:	20000278 	.word	0x20000278
 80315ac:	080322f9 	.word	0x080322f9
 80315b0:	20000284 	.word	0x20000284

080315b4 <cleanup_stdio>:
 80315b4:	6841      	ldr	r1, [r0, #4]
 80315b6:	4b0c      	ldr	r3, [pc, #48]	; (80315e8 <cleanup_stdio+0x34>)
 80315b8:	4299      	cmp	r1, r3
 80315ba:	b510      	push	{r4, lr}
 80315bc:	4604      	mov	r4, r0
 80315be:	d001      	beq.n	80315c4 <cleanup_stdio+0x10>
 80315c0:	f000 fe9a 	bl	80322f8 <_fflush_r>
 80315c4:	68a1      	ldr	r1, [r4, #8]
 80315c6:	4b09      	ldr	r3, [pc, #36]	; (80315ec <cleanup_stdio+0x38>)
 80315c8:	4299      	cmp	r1, r3
 80315ca:	d002      	beq.n	80315d2 <cleanup_stdio+0x1e>
 80315cc:	4620      	mov	r0, r4
 80315ce:	f000 fe93 	bl	80322f8 <_fflush_r>
 80315d2:	68e1      	ldr	r1, [r4, #12]
 80315d4:	4b06      	ldr	r3, [pc, #24]	; (80315f0 <cleanup_stdio+0x3c>)
 80315d6:	4299      	cmp	r1, r3
 80315d8:	d004      	beq.n	80315e4 <cleanup_stdio+0x30>
 80315da:	4620      	mov	r0, r4
 80315dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80315e0:	f000 be8a 	b.w	80322f8 <_fflush_r>
 80315e4:	bd10      	pop	{r4, pc}
 80315e6:	bf00      	nop
 80315e8:	20008610 	.word	0x20008610
 80315ec:	20008678 	.word	0x20008678
 80315f0:	200086e0 	.word	0x200086e0

080315f4 <global_stdio_init.part.0>:
 80315f4:	b510      	push	{r4, lr}
 80315f6:	4b0b      	ldr	r3, [pc, #44]	; (8031624 <global_stdio_init.part.0+0x30>)
 80315f8:	4c0b      	ldr	r4, [pc, #44]	; (8031628 <global_stdio_init.part.0+0x34>)
 80315fa:	4a0c      	ldr	r2, [pc, #48]	; (803162c <global_stdio_init.part.0+0x38>)
 80315fc:	601a      	str	r2, [r3, #0]
 80315fe:	4620      	mov	r0, r4
 8031600:	2200      	movs	r2, #0
 8031602:	2104      	movs	r1, #4
 8031604:	f7ff ff94 	bl	8031530 <std>
 8031608:	f104 0068 	add.w	r0, r4, #104	; 0x68
 803160c:	2201      	movs	r2, #1
 803160e:	2109      	movs	r1, #9
 8031610:	f7ff ff8e 	bl	8031530 <std>
 8031614:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8031618:	2202      	movs	r2, #2
 803161a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803161e:	2112      	movs	r1, #18
 8031620:	f7ff bf86 	b.w	8031530 <std>
 8031624:	20008748 	.word	0x20008748
 8031628:	20008610 	.word	0x20008610
 803162c:	0803159d 	.word	0x0803159d

08031630 <__sfp_lock_acquire>:
 8031630:	4801      	ldr	r0, [pc, #4]	; (8031638 <__sfp_lock_acquire+0x8>)
 8031632:	f000 b9fe 	b.w	8031a32 <__retarget_lock_acquire_recursive>
 8031636:	bf00      	nop
 8031638:	20008751 	.word	0x20008751

0803163c <__sfp_lock_release>:
 803163c:	4801      	ldr	r0, [pc, #4]	; (8031644 <__sfp_lock_release+0x8>)
 803163e:	f000 b9f9 	b.w	8031a34 <__retarget_lock_release_recursive>
 8031642:	bf00      	nop
 8031644:	20008751 	.word	0x20008751

08031648 <__sinit>:
 8031648:	b510      	push	{r4, lr}
 803164a:	4604      	mov	r4, r0
 803164c:	f7ff fff0 	bl	8031630 <__sfp_lock_acquire>
 8031650:	6a23      	ldr	r3, [r4, #32]
 8031652:	b11b      	cbz	r3, 803165c <__sinit+0x14>
 8031654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031658:	f7ff bff0 	b.w	803163c <__sfp_lock_release>
 803165c:	4b04      	ldr	r3, [pc, #16]	; (8031670 <__sinit+0x28>)
 803165e:	6223      	str	r3, [r4, #32]
 8031660:	4b04      	ldr	r3, [pc, #16]	; (8031674 <__sinit+0x2c>)
 8031662:	681b      	ldr	r3, [r3, #0]
 8031664:	2b00      	cmp	r3, #0
 8031666:	d1f5      	bne.n	8031654 <__sinit+0xc>
 8031668:	f7ff ffc4 	bl	80315f4 <global_stdio_init.part.0>
 803166c:	e7f2      	b.n	8031654 <__sinit+0xc>
 803166e:	bf00      	nop
 8031670:	080315b5 	.word	0x080315b5
 8031674:	20008748 	.word	0x20008748

08031678 <_fwalk_sglue>:
 8031678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803167c:	4607      	mov	r7, r0
 803167e:	4688      	mov	r8, r1
 8031680:	4614      	mov	r4, r2
 8031682:	2600      	movs	r6, #0
 8031684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031688:	f1b9 0901 	subs.w	r9, r9, #1
 803168c:	d505      	bpl.n	803169a <_fwalk_sglue+0x22>
 803168e:	6824      	ldr	r4, [r4, #0]
 8031690:	2c00      	cmp	r4, #0
 8031692:	d1f7      	bne.n	8031684 <_fwalk_sglue+0xc>
 8031694:	4630      	mov	r0, r6
 8031696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803169a:	89ab      	ldrh	r3, [r5, #12]
 803169c:	2b01      	cmp	r3, #1
 803169e:	d907      	bls.n	80316b0 <_fwalk_sglue+0x38>
 80316a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80316a4:	3301      	adds	r3, #1
 80316a6:	d003      	beq.n	80316b0 <_fwalk_sglue+0x38>
 80316a8:	4629      	mov	r1, r5
 80316aa:	4638      	mov	r0, r7
 80316ac:	47c0      	blx	r8
 80316ae:	4306      	orrs	r6, r0
 80316b0:	3568      	adds	r5, #104	; 0x68
 80316b2:	e7e9      	b.n	8031688 <_fwalk_sglue+0x10>

080316b4 <iprintf>:
 80316b4:	b40f      	push	{r0, r1, r2, r3}
 80316b6:	b507      	push	{r0, r1, r2, lr}
 80316b8:	4906      	ldr	r1, [pc, #24]	; (80316d4 <iprintf+0x20>)
 80316ba:	ab04      	add	r3, sp, #16
 80316bc:	6808      	ldr	r0, [r1, #0]
 80316be:	f853 2b04 	ldr.w	r2, [r3], #4
 80316c2:	6881      	ldr	r1, [r0, #8]
 80316c4:	9301      	str	r3, [sp, #4]
 80316c6:	f000 fae7 	bl	8031c98 <_vfiprintf_r>
 80316ca:	b003      	add	sp, #12
 80316cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80316d0:	b004      	add	sp, #16
 80316d2:	4770      	bx	lr
 80316d4:	200002d0 	.word	0x200002d0

080316d8 <_puts_r>:
 80316d8:	6a03      	ldr	r3, [r0, #32]
 80316da:	b570      	push	{r4, r5, r6, lr}
 80316dc:	6884      	ldr	r4, [r0, #8]
 80316de:	4605      	mov	r5, r0
 80316e0:	460e      	mov	r6, r1
 80316e2:	b90b      	cbnz	r3, 80316e8 <_puts_r+0x10>
 80316e4:	f7ff ffb0 	bl	8031648 <__sinit>
 80316e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80316ea:	07db      	lsls	r3, r3, #31
 80316ec:	d405      	bmi.n	80316fa <_puts_r+0x22>
 80316ee:	89a3      	ldrh	r3, [r4, #12]
 80316f0:	0598      	lsls	r0, r3, #22
 80316f2:	d402      	bmi.n	80316fa <_puts_r+0x22>
 80316f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80316f6:	f000 f99c 	bl	8031a32 <__retarget_lock_acquire_recursive>
 80316fa:	89a3      	ldrh	r3, [r4, #12]
 80316fc:	0719      	lsls	r1, r3, #28
 80316fe:	d513      	bpl.n	8031728 <_puts_r+0x50>
 8031700:	6923      	ldr	r3, [r4, #16]
 8031702:	b18b      	cbz	r3, 8031728 <_puts_r+0x50>
 8031704:	3e01      	subs	r6, #1
 8031706:	68a3      	ldr	r3, [r4, #8]
 8031708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 803170c:	3b01      	subs	r3, #1
 803170e:	60a3      	str	r3, [r4, #8]
 8031710:	b9e9      	cbnz	r1, 803174e <_puts_r+0x76>
 8031712:	2b00      	cmp	r3, #0
 8031714:	da2e      	bge.n	8031774 <_puts_r+0x9c>
 8031716:	4622      	mov	r2, r4
 8031718:	210a      	movs	r1, #10
 803171a:	4628      	mov	r0, r5
 803171c:	f000 f87b 	bl	8031816 <__swbuf_r>
 8031720:	3001      	adds	r0, #1
 8031722:	d007      	beq.n	8031734 <_puts_r+0x5c>
 8031724:	250a      	movs	r5, #10
 8031726:	e007      	b.n	8031738 <_puts_r+0x60>
 8031728:	4621      	mov	r1, r4
 803172a:	4628      	mov	r0, r5
 803172c:	f000 f8b0 	bl	8031890 <__swsetup_r>
 8031730:	2800      	cmp	r0, #0
 8031732:	d0e7      	beq.n	8031704 <_puts_r+0x2c>
 8031734:	f04f 35ff 	mov.w	r5, #4294967295
 8031738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803173a:	07da      	lsls	r2, r3, #31
 803173c:	d405      	bmi.n	803174a <_puts_r+0x72>
 803173e:	89a3      	ldrh	r3, [r4, #12]
 8031740:	059b      	lsls	r3, r3, #22
 8031742:	d402      	bmi.n	803174a <_puts_r+0x72>
 8031744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031746:	f000 f975 	bl	8031a34 <__retarget_lock_release_recursive>
 803174a:	4628      	mov	r0, r5
 803174c:	bd70      	pop	{r4, r5, r6, pc}
 803174e:	2b00      	cmp	r3, #0
 8031750:	da04      	bge.n	803175c <_puts_r+0x84>
 8031752:	69a2      	ldr	r2, [r4, #24]
 8031754:	429a      	cmp	r2, r3
 8031756:	dc06      	bgt.n	8031766 <_puts_r+0x8e>
 8031758:	290a      	cmp	r1, #10
 803175a:	d004      	beq.n	8031766 <_puts_r+0x8e>
 803175c:	6823      	ldr	r3, [r4, #0]
 803175e:	1c5a      	adds	r2, r3, #1
 8031760:	6022      	str	r2, [r4, #0]
 8031762:	7019      	strb	r1, [r3, #0]
 8031764:	e7cf      	b.n	8031706 <_puts_r+0x2e>
 8031766:	4622      	mov	r2, r4
 8031768:	4628      	mov	r0, r5
 803176a:	f000 f854 	bl	8031816 <__swbuf_r>
 803176e:	3001      	adds	r0, #1
 8031770:	d1c9      	bne.n	8031706 <_puts_r+0x2e>
 8031772:	e7df      	b.n	8031734 <_puts_r+0x5c>
 8031774:	6823      	ldr	r3, [r4, #0]
 8031776:	250a      	movs	r5, #10
 8031778:	1c5a      	adds	r2, r3, #1
 803177a:	6022      	str	r2, [r4, #0]
 803177c:	701d      	strb	r5, [r3, #0]
 803177e:	e7db      	b.n	8031738 <_puts_r+0x60>

08031780 <puts>:
 8031780:	4b02      	ldr	r3, [pc, #8]	; (803178c <puts+0xc>)
 8031782:	4601      	mov	r1, r0
 8031784:	6818      	ldr	r0, [r3, #0]
 8031786:	f7ff bfa7 	b.w	80316d8 <_puts_r>
 803178a:	bf00      	nop
 803178c:	200002d0 	.word	0x200002d0

08031790 <__sread>:
 8031790:	b510      	push	{r4, lr}
 8031792:	460c      	mov	r4, r1
 8031794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031798:	f000 f8fc 	bl	8031994 <_read_r>
 803179c:	2800      	cmp	r0, #0
 803179e:	bfab      	itete	ge
 80317a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80317a2:	89a3      	ldrhlt	r3, [r4, #12]
 80317a4:	181b      	addge	r3, r3, r0
 80317a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80317aa:	bfac      	ite	ge
 80317ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80317ae:	81a3      	strhlt	r3, [r4, #12]
 80317b0:	bd10      	pop	{r4, pc}

080317b2 <__swrite>:
 80317b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80317b6:	461f      	mov	r7, r3
 80317b8:	898b      	ldrh	r3, [r1, #12]
 80317ba:	05db      	lsls	r3, r3, #23
 80317bc:	4605      	mov	r5, r0
 80317be:	460c      	mov	r4, r1
 80317c0:	4616      	mov	r6, r2
 80317c2:	d505      	bpl.n	80317d0 <__swrite+0x1e>
 80317c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317c8:	2302      	movs	r3, #2
 80317ca:	2200      	movs	r2, #0
 80317cc:	f000 f8d0 	bl	8031970 <_lseek_r>
 80317d0:	89a3      	ldrh	r3, [r4, #12]
 80317d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80317d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80317da:	81a3      	strh	r3, [r4, #12]
 80317dc:	4632      	mov	r2, r6
 80317de:	463b      	mov	r3, r7
 80317e0:	4628      	mov	r0, r5
 80317e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80317e6:	f000 b8e7 	b.w	80319b8 <_write_r>

080317ea <__sseek>:
 80317ea:	b510      	push	{r4, lr}
 80317ec:	460c      	mov	r4, r1
 80317ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317f2:	f000 f8bd 	bl	8031970 <_lseek_r>
 80317f6:	1c43      	adds	r3, r0, #1
 80317f8:	89a3      	ldrh	r3, [r4, #12]
 80317fa:	bf15      	itete	ne
 80317fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80317fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8031802:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031806:	81a3      	strheq	r3, [r4, #12]
 8031808:	bf18      	it	ne
 803180a:	81a3      	strhne	r3, [r4, #12]
 803180c:	bd10      	pop	{r4, pc}

0803180e <__sclose>:
 803180e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031812:	f000 b89d 	b.w	8031950 <_close_r>

08031816 <__swbuf_r>:
 8031816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031818:	460e      	mov	r6, r1
 803181a:	4614      	mov	r4, r2
 803181c:	4605      	mov	r5, r0
 803181e:	b118      	cbz	r0, 8031828 <__swbuf_r+0x12>
 8031820:	6a03      	ldr	r3, [r0, #32]
 8031822:	b90b      	cbnz	r3, 8031828 <__swbuf_r+0x12>
 8031824:	f7ff ff10 	bl	8031648 <__sinit>
 8031828:	69a3      	ldr	r3, [r4, #24]
 803182a:	60a3      	str	r3, [r4, #8]
 803182c:	89a3      	ldrh	r3, [r4, #12]
 803182e:	071a      	lsls	r2, r3, #28
 8031830:	d525      	bpl.n	803187e <__swbuf_r+0x68>
 8031832:	6923      	ldr	r3, [r4, #16]
 8031834:	b31b      	cbz	r3, 803187e <__swbuf_r+0x68>
 8031836:	6823      	ldr	r3, [r4, #0]
 8031838:	6922      	ldr	r2, [r4, #16]
 803183a:	1a98      	subs	r0, r3, r2
 803183c:	6963      	ldr	r3, [r4, #20]
 803183e:	b2f6      	uxtb	r6, r6
 8031840:	4283      	cmp	r3, r0
 8031842:	4637      	mov	r7, r6
 8031844:	dc04      	bgt.n	8031850 <__swbuf_r+0x3a>
 8031846:	4621      	mov	r1, r4
 8031848:	4628      	mov	r0, r5
 803184a:	f000 fd55 	bl	80322f8 <_fflush_r>
 803184e:	b9e0      	cbnz	r0, 803188a <__swbuf_r+0x74>
 8031850:	68a3      	ldr	r3, [r4, #8]
 8031852:	3b01      	subs	r3, #1
 8031854:	60a3      	str	r3, [r4, #8]
 8031856:	6823      	ldr	r3, [r4, #0]
 8031858:	1c5a      	adds	r2, r3, #1
 803185a:	6022      	str	r2, [r4, #0]
 803185c:	701e      	strb	r6, [r3, #0]
 803185e:	6962      	ldr	r2, [r4, #20]
 8031860:	1c43      	adds	r3, r0, #1
 8031862:	429a      	cmp	r2, r3
 8031864:	d004      	beq.n	8031870 <__swbuf_r+0x5a>
 8031866:	89a3      	ldrh	r3, [r4, #12]
 8031868:	07db      	lsls	r3, r3, #31
 803186a:	d506      	bpl.n	803187a <__swbuf_r+0x64>
 803186c:	2e0a      	cmp	r6, #10
 803186e:	d104      	bne.n	803187a <__swbuf_r+0x64>
 8031870:	4621      	mov	r1, r4
 8031872:	4628      	mov	r0, r5
 8031874:	f000 fd40 	bl	80322f8 <_fflush_r>
 8031878:	b938      	cbnz	r0, 803188a <__swbuf_r+0x74>
 803187a:	4638      	mov	r0, r7
 803187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803187e:	4621      	mov	r1, r4
 8031880:	4628      	mov	r0, r5
 8031882:	f000 f805 	bl	8031890 <__swsetup_r>
 8031886:	2800      	cmp	r0, #0
 8031888:	d0d5      	beq.n	8031836 <__swbuf_r+0x20>
 803188a:	f04f 37ff 	mov.w	r7, #4294967295
 803188e:	e7f4      	b.n	803187a <__swbuf_r+0x64>

08031890 <__swsetup_r>:
 8031890:	b538      	push	{r3, r4, r5, lr}
 8031892:	4b2a      	ldr	r3, [pc, #168]	; (803193c <__swsetup_r+0xac>)
 8031894:	4605      	mov	r5, r0
 8031896:	6818      	ldr	r0, [r3, #0]
 8031898:	460c      	mov	r4, r1
 803189a:	b118      	cbz	r0, 80318a4 <__swsetup_r+0x14>
 803189c:	6a03      	ldr	r3, [r0, #32]
 803189e:	b90b      	cbnz	r3, 80318a4 <__swsetup_r+0x14>
 80318a0:	f7ff fed2 	bl	8031648 <__sinit>
 80318a4:	89a3      	ldrh	r3, [r4, #12]
 80318a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80318aa:	0718      	lsls	r0, r3, #28
 80318ac:	d422      	bmi.n	80318f4 <__swsetup_r+0x64>
 80318ae:	06d9      	lsls	r1, r3, #27
 80318b0:	d407      	bmi.n	80318c2 <__swsetup_r+0x32>
 80318b2:	2309      	movs	r3, #9
 80318b4:	602b      	str	r3, [r5, #0]
 80318b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80318ba:	81a3      	strh	r3, [r4, #12]
 80318bc:	f04f 30ff 	mov.w	r0, #4294967295
 80318c0:	e034      	b.n	803192c <__swsetup_r+0x9c>
 80318c2:	0758      	lsls	r0, r3, #29
 80318c4:	d512      	bpl.n	80318ec <__swsetup_r+0x5c>
 80318c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80318c8:	b141      	cbz	r1, 80318dc <__swsetup_r+0x4c>
 80318ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80318ce:	4299      	cmp	r1, r3
 80318d0:	d002      	beq.n	80318d8 <__swsetup_r+0x48>
 80318d2:	4628      	mov	r0, r5
 80318d4:	f000 f8be 	bl	8031a54 <_free_r>
 80318d8:	2300      	movs	r3, #0
 80318da:	6363      	str	r3, [r4, #52]	; 0x34
 80318dc:	89a3      	ldrh	r3, [r4, #12]
 80318de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80318e2:	81a3      	strh	r3, [r4, #12]
 80318e4:	2300      	movs	r3, #0
 80318e6:	6063      	str	r3, [r4, #4]
 80318e8:	6923      	ldr	r3, [r4, #16]
 80318ea:	6023      	str	r3, [r4, #0]
 80318ec:	89a3      	ldrh	r3, [r4, #12]
 80318ee:	f043 0308 	orr.w	r3, r3, #8
 80318f2:	81a3      	strh	r3, [r4, #12]
 80318f4:	6923      	ldr	r3, [r4, #16]
 80318f6:	b94b      	cbnz	r3, 803190c <__swsetup_r+0x7c>
 80318f8:	89a3      	ldrh	r3, [r4, #12]
 80318fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80318fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8031902:	d003      	beq.n	803190c <__swsetup_r+0x7c>
 8031904:	4621      	mov	r1, r4
 8031906:	4628      	mov	r0, r5
 8031908:	f000 fd44 	bl	8032394 <__smakebuf_r>
 803190c:	89a0      	ldrh	r0, [r4, #12]
 803190e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031912:	f010 0301 	ands.w	r3, r0, #1
 8031916:	d00a      	beq.n	803192e <__swsetup_r+0x9e>
 8031918:	2300      	movs	r3, #0
 803191a:	60a3      	str	r3, [r4, #8]
 803191c:	6963      	ldr	r3, [r4, #20]
 803191e:	425b      	negs	r3, r3
 8031920:	61a3      	str	r3, [r4, #24]
 8031922:	6923      	ldr	r3, [r4, #16]
 8031924:	b943      	cbnz	r3, 8031938 <__swsetup_r+0xa8>
 8031926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803192a:	d1c4      	bne.n	80318b6 <__swsetup_r+0x26>
 803192c:	bd38      	pop	{r3, r4, r5, pc}
 803192e:	0781      	lsls	r1, r0, #30
 8031930:	bf58      	it	pl
 8031932:	6963      	ldrpl	r3, [r4, #20]
 8031934:	60a3      	str	r3, [r4, #8]
 8031936:	e7f4      	b.n	8031922 <__swsetup_r+0x92>
 8031938:	2000      	movs	r0, #0
 803193a:	e7f7      	b.n	803192c <__swsetup_r+0x9c>
 803193c:	200002d0 	.word	0x200002d0

08031940 <memset>:
 8031940:	4402      	add	r2, r0
 8031942:	4603      	mov	r3, r0
 8031944:	4293      	cmp	r3, r2
 8031946:	d100      	bne.n	803194a <memset+0xa>
 8031948:	4770      	bx	lr
 803194a:	f803 1b01 	strb.w	r1, [r3], #1
 803194e:	e7f9      	b.n	8031944 <memset+0x4>

08031950 <_close_r>:
 8031950:	b538      	push	{r3, r4, r5, lr}
 8031952:	4d06      	ldr	r5, [pc, #24]	; (803196c <_close_r+0x1c>)
 8031954:	2300      	movs	r3, #0
 8031956:	4604      	mov	r4, r0
 8031958:	4608      	mov	r0, r1
 803195a:	602b      	str	r3, [r5, #0]
 803195c:	f7f5 fd46 	bl	80273ec <_close>
 8031960:	1c43      	adds	r3, r0, #1
 8031962:	d102      	bne.n	803196a <_close_r+0x1a>
 8031964:	682b      	ldr	r3, [r5, #0]
 8031966:	b103      	cbz	r3, 803196a <_close_r+0x1a>
 8031968:	6023      	str	r3, [r4, #0]
 803196a:	bd38      	pop	{r3, r4, r5, pc}
 803196c:	2000874c 	.word	0x2000874c

08031970 <_lseek_r>:
 8031970:	b538      	push	{r3, r4, r5, lr}
 8031972:	4d07      	ldr	r5, [pc, #28]	; (8031990 <_lseek_r+0x20>)
 8031974:	4604      	mov	r4, r0
 8031976:	4608      	mov	r0, r1
 8031978:	4611      	mov	r1, r2
 803197a:	2200      	movs	r2, #0
 803197c:	602a      	str	r2, [r5, #0]
 803197e:	461a      	mov	r2, r3
 8031980:	f7f5 fd5b 	bl	802743a <_lseek>
 8031984:	1c43      	adds	r3, r0, #1
 8031986:	d102      	bne.n	803198e <_lseek_r+0x1e>
 8031988:	682b      	ldr	r3, [r5, #0]
 803198a:	b103      	cbz	r3, 803198e <_lseek_r+0x1e>
 803198c:	6023      	str	r3, [r4, #0]
 803198e:	bd38      	pop	{r3, r4, r5, pc}
 8031990:	2000874c 	.word	0x2000874c

08031994 <_read_r>:
 8031994:	b538      	push	{r3, r4, r5, lr}
 8031996:	4d07      	ldr	r5, [pc, #28]	; (80319b4 <_read_r+0x20>)
 8031998:	4604      	mov	r4, r0
 803199a:	4608      	mov	r0, r1
 803199c:	4611      	mov	r1, r2
 803199e:	2200      	movs	r2, #0
 80319a0:	602a      	str	r2, [r5, #0]
 80319a2:	461a      	mov	r2, r3
 80319a4:	f7f5 fd05 	bl	80273b2 <_read>
 80319a8:	1c43      	adds	r3, r0, #1
 80319aa:	d102      	bne.n	80319b2 <_read_r+0x1e>
 80319ac:	682b      	ldr	r3, [r5, #0]
 80319ae:	b103      	cbz	r3, 80319b2 <_read_r+0x1e>
 80319b0:	6023      	str	r3, [r4, #0]
 80319b2:	bd38      	pop	{r3, r4, r5, pc}
 80319b4:	2000874c 	.word	0x2000874c

080319b8 <_write_r>:
 80319b8:	b538      	push	{r3, r4, r5, lr}
 80319ba:	4d07      	ldr	r5, [pc, #28]	; (80319d8 <_write_r+0x20>)
 80319bc:	4604      	mov	r4, r0
 80319be:	4608      	mov	r0, r1
 80319c0:	4611      	mov	r1, r2
 80319c2:	2200      	movs	r2, #0
 80319c4:	602a      	str	r2, [r5, #0]
 80319c6:	461a      	mov	r2, r3
 80319c8:	f7f1 ff46 	bl	8023858 <_write>
 80319cc:	1c43      	adds	r3, r0, #1
 80319ce:	d102      	bne.n	80319d6 <_write_r+0x1e>
 80319d0:	682b      	ldr	r3, [r5, #0]
 80319d2:	b103      	cbz	r3, 80319d6 <_write_r+0x1e>
 80319d4:	6023      	str	r3, [r4, #0]
 80319d6:	bd38      	pop	{r3, r4, r5, pc}
 80319d8:	2000874c 	.word	0x2000874c

080319dc <__errno>:
 80319dc:	4b01      	ldr	r3, [pc, #4]	; (80319e4 <__errno+0x8>)
 80319de:	6818      	ldr	r0, [r3, #0]
 80319e0:	4770      	bx	lr
 80319e2:	bf00      	nop
 80319e4:	200002d0 	.word	0x200002d0

080319e8 <__libc_init_array>:
 80319e8:	b570      	push	{r4, r5, r6, lr}
 80319ea:	4d0d      	ldr	r5, [pc, #52]	; (8031a20 <__libc_init_array+0x38>)
 80319ec:	4c0d      	ldr	r4, [pc, #52]	; (8031a24 <__libc_init_array+0x3c>)
 80319ee:	1b64      	subs	r4, r4, r5
 80319f0:	10a4      	asrs	r4, r4, #2
 80319f2:	2600      	movs	r6, #0
 80319f4:	42a6      	cmp	r6, r4
 80319f6:	d109      	bne.n	8031a0c <__libc_init_array+0x24>
 80319f8:	4d0b      	ldr	r5, [pc, #44]	; (8031a28 <__libc_init_array+0x40>)
 80319fa:	4c0c      	ldr	r4, [pc, #48]	; (8031a2c <__libc_init_array+0x44>)
 80319fc:	f000 fd38 	bl	8032470 <_init>
 8031a00:	1b64      	subs	r4, r4, r5
 8031a02:	10a4      	asrs	r4, r4, #2
 8031a04:	2600      	movs	r6, #0
 8031a06:	42a6      	cmp	r6, r4
 8031a08:	d105      	bne.n	8031a16 <__libc_init_array+0x2e>
 8031a0a:	bd70      	pop	{r4, r5, r6, pc}
 8031a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a10:	4798      	blx	r3
 8031a12:	3601      	adds	r6, #1
 8031a14:	e7ee      	b.n	80319f4 <__libc_init_array+0xc>
 8031a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a1a:	4798      	blx	r3
 8031a1c:	3601      	adds	r6, #1
 8031a1e:	e7f2      	b.n	8031a06 <__libc_init_array+0x1e>
 8031a20:	08033364 	.word	0x08033364
 8031a24:	08033364 	.word	0x08033364
 8031a28:	08033364 	.word	0x08033364
 8031a2c:	08033368 	.word	0x08033368

08031a30 <__retarget_lock_init_recursive>:
 8031a30:	4770      	bx	lr

08031a32 <__retarget_lock_acquire_recursive>:
 8031a32:	4770      	bx	lr

08031a34 <__retarget_lock_release_recursive>:
 8031a34:	4770      	bx	lr

08031a36 <memcpy>:
 8031a36:	440a      	add	r2, r1
 8031a38:	4291      	cmp	r1, r2
 8031a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8031a3e:	d100      	bne.n	8031a42 <memcpy+0xc>
 8031a40:	4770      	bx	lr
 8031a42:	b510      	push	{r4, lr}
 8031a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8031a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8031a4c:	4291      	cmp	r1, r2
 8031a4e:	d1f9      	bne.n	8031a44 <memcpy+0xe>
 8031a50:	bd10      	pop	{r4, pc}
	...

08031a54 <_free_r>:
 8031a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8031a56:	2900      	cmp	r1, #0
 8031a58:	d044      	beq.n	8031ae4 <_free_r+0x90>
 8031a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a5e:	9001      	str	r0, [sp, #4]
 8031a60:	2b00      	cmp	r3, #0
 8031a62:	f1a1 0404 	sub.w	r4, r1, #4
 8031a66:	bfb8      	it	lt
 8031a68:	18e4      	addlt	r4, r4, r3
 8031a6a:	f000 f8df 	bl	8031c2c <__malloc_lock>
 8031a6e:	4a1e      	ldr	r2, [pc, #120]	; (8031ae8 <_free_r+0x94>)
 8031a70:	9801      	ldr	r0, [sp, #4]
 8031a72:	6813      	ldr	r3, [r2, #0]
 8031a74:	b933      	cbnz	r3, 8031a84 <_free_r+0x30>
 8031a76:	6063      	str	r3, [r4, #4]
 8031a78:	6014      	str	r4, [r2, #0]
 8031a7a:	b003      	add	sp, #12
 8031a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031a80:	f000 b8da 	b.w	8031c38 <__malloc_unlock>
 8031a84:	42a3      	cmp	r3, r4
 8031a86:	d908      	bls.n	8031a9a <_free_r+0x46>
 8031a88:	6825      	ldr	r5, [r4, #0]
 8031a8a:	1961      	adds	r1, r4, r5
 8031a8c:	428b      	cmp	r3, r1
 8031a8e:	bf01      	itttt	eq
 8031a90:	6819      	ldreq	r1, [r3, #0]
 8031a92:	685b      	ldreq	r3, [r3, #4]
 8031a94:	1949      	addeq	r1, r1, r5
 8031a96:	6021      	streq	r1, [r4, #0]
 8031a98:	e7ed      	b.n	8031a76 <_free_r+0x22>
 8031a9a:	461a      	mov	r2, r3
 8031a9c:	685b      	ldr	r3, [r3, #4]
 8031a9e:	b10b      	cbz	r3, 8031aa4 <_free_r+0x50>
 8031aa0:	42a3      	cmp	r3, r4
 8031aa2:	d9fa      	bls.n	8031a9a <_free_r+0x46>
 8031aa4:	6811      	ldr	r1, [r2, #0]
 8031aa6:	1855      	adds	r5, r2, r1
 8031aa8:	42a5      	cmp	r5, r4
 8031aaa:	d10b      	bne.n	8031ac4 <_free_r+0x70>
 8031aac:	6824      	ldr	r4, [r4, #0]
 8031aae:	4421      	add	r1, r4
 8031ab0:	1854      	adds	r4, r2, r1
 8031ab2:	42a3      	cmp	r3, r4
 8031ab4:	6011      	str	r1, [r2, #0]
 8031ab6:	d1e0      	bne.n	8031a7a <_free_r+0x26>
 8031ab8:	681c      	ldr	r4, [r3, #0]
 8031aba:	685b      	ldr	r3, [r3, #4]
 8031abc:	6053      	str	r3, [r2, #4]
 8031abe:	440c      	add	r4, r1
 8031ac0:	6014      	str	r4, [r2, #0]
 8031ac2:	e7da      	b.n	8031a7a <_free_r+0x26>
 8031ac4:	d902      	bls.n	8031acc <_free_r+0x78>
 8031ac6:	230c      	movs	r3, #12
 8031ac8:	6003      	str	r3, [r0, #0]
 8031aca:	e7d6      	b.n	8031a7a <_free_r+0x26>
 8031acc:	6825      	ldr	r5, [r4, #0]
 8031ace:	1961      	adds	r1, r4, r5
 8031ad0:	428b      	cmp	r3, r1
 8031ad2:	bf04      	itt	eq
 8031ad4:	6819      	ldreq	r1, [r3, #0]
 8031ad6:	685b      	ldreq	r3, [r3, #4]
 8031ad8:	6063      	str	r3, [r4, #4]
 8031ada:	bf04      	itt	eq
 8031adc:	1949      	addeq	r1, r1, r5
 8031ade:	6021      	streq	r1, [r4, #0]
 8031ae0:	6054      	str	r4, [r2, #4]
 8031ae2:	e7ca      	b.n	8031a7a <_free_r+0x26>
 8031ae4:	b003      	add	sp, #12
 8031ae6:	bd30      	pop	{r4, r5, pc}
 8031ae8:	20008754 	.word	0x20008754

08031aec <sbrk_aligned>:
 8031aec:	b570      	push	{r4, r5, r6, lr}
 8031aee:	4e0e      	ldr	r6, [pc, #56]	; (8031b28 <sbrk_aligned+0x3c>)
 8031af0:	460c      	mov	r4, r1
 8031af2:	6831      	ldr	r1, [r6, #0]
 8031af4:	4605      	mov	r5, r0
 8031af6:	b911      	cbnz	r1, 8031afe <sbrk_aligned+0x12>
 8031af8:	f000 fcaa 	bl	8032450 <_sbrk_r>
 8031afc:	6030      	str	r0, [r6, #0]
 8031afe:	4621      	mov	r1, r4
 8031b00:	4628      	mov	r0, r5
 8031b02:	f000 fca5 	bl	8032450 <_sbrk_r>
 8031b06:	1c43      	adds	r3, r0, #1
 8031b08:	d00a      	beq.n	8031b20 <sbrk_aligned+0x34>
 8031b0a:	1cc4      	adds	r4, r0, #3
 8031b0c:	f024 0403 	bic.w	r4, r4, #3
 8031b10:	42a0      	cmp	r0, r4
 8031b12:	d007      	beq.n	8031b24 <sbrk_aligned+0x38>
 8031b14:	1a21      	subs	r1, r4, r0
 8031b16:	4628      	mov	r0, r5
 8031b18:	f000 fc9a 	bl	8032450 <_sbrk_r>
 8031b1c:	3001      	adds	r0, #1
 8031b1e:	d101      	bne.n	8031b24 <sbrk_aligned+0x38>
 8031b20:	f04f 34ff 	mov.w	r4, #4294967295
 8031b24:	4620      	mov	r0, r4
 8031b26:	bd70      	pop	{r4, r5, r6, pc}
 8031b28:	20008758 	.word	0x20008758

08031b2c <_malloc_r>:
 8031b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031b30:	1ccd      	adds	r5, r1, #3
 8031b32:	f025 0503 	bic.w	r5, r5, #3
 8031b36:	3508      	adds	r5, #8
 8031b38:	2d0c      	cmp	r5, #12
 8031b3a:	bf38      	it	cc
 8031b3c:	250c      	movcc	r5, #12
 8031b3e:	2d00      	cmp	r5, #0
 8031b40:	4607      	mov	r7, r0
 8031b42:	db01      	blt.n	8031b48 <_malloc_r+0x1c>
 8031b44:	42a9      	cmp	r1, r5
 8031b46:	d905      	bls.n	8031b54 <_malloc_r+0x28>
 8031b48:	230c      	movs	r3, #12
 8031b4a:	603b      	str	r3, [r7, #0]
 8031b4c:	2600      	movs	r6, #0
 8031b4e:	4630      	mov	r0, r6
 8031b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031b54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8031c28 <_malloc_r+0xfc>
 8031b58:	f000 f868 	bl	8031c2c <__malloc_lock>
 8031b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8031b60:	461c      	mov	r4, r3
 8031b62:	bb5c      	cbnz	r4, 8031bbc <_malloc_r+0x90>
 8031b64:	4629      	mov	r1, r5
 8031b66:	4638      	mov	r0, r7
 8031b68:	f7ff ffc0 	bl	8031aec <sbrk_aligned>
 8031b6c:	1c43      	adds	r3, r0, #1
 8031b6e:	4604      	mov	r4, r0
 8031b70:	d155      	bne.n	8031c1e <_malloc_r+0xf2>
 8031b72:	f8d8 4000 	ldr.w	r4, [r8]
 8031b76:	4626      	mov	r6, r4
 8031b78:	2e00      	cmp	r6, #0
 8031b7a:	d145      	bne.n	8031c08 <_malloc_r+0xdc>
 8031b7c:	2c00      	cmp	r4, #0
 8031b7e:	d048      	beq.n	8031c12 <_malloc_r+0xe6>
 8031b80:	6823      	ldr	r3, [r4, #0]
 8031b82:	4631      	mov	r1, r6
 8031b84:	4638      	mov	r0, r7
 8031b86:	eb04 0903 	add.w	r9, r4, r3
 8031b8a:	f000 fc61 	bl	8032450 <_sbrk_r>
 8031b8e:	4581      	cmp	r9, r0
 8031b90:	d13f      	bne.n	8031c12 <_malloc_r+0xe6>
 8031b92:	6821      	ldr	r1, [r4, #0]
 8031b94:	1a6d      	subs	r5, r5, r1
 8031b96:	4629      	mov	r1, r5
 8031b98:	4638      	mov	r0, r7
 8031b9a:	f7ff ffa7 	bl	8031aec <sbrk_aligned>
 8031b9e:	3001      	adds	r0, #1
 8031ba0:	d037      	beq.n	8031c12 <_malloc_r+0xe6>
 8031ba2:	6823      	ldr	r3, [r4, #0]
 8031ba4:	442b      	add	r3, r5
 8031ba6:	6023      	str	r3, [r4, #0]
 8031ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8031bac:	2b00      	cmp	r3, #0
 8031bae:	d038      	beq.n	8031c22 <_malloc_r+0xf6>
 8031bb0:	685a      	ldr	r2, [r3, #4]
 8031bb2:	42a2      	cmp	r2, r4
 8031bb4:	d12b      	bne.n	8031c0e <_malloc_r+0xe2>
 8031bb6:	2200      	movs	r2, #0
 8031bb8:	605a      	str	r2, [r3, #4]
 8031bba:	e00f      	b.n	8031bdc <_malloc_r+0xb0>
 8031bbc:	6822      	ldr	r2, [r4, #0]
 8031bbe:	1b52      	subs	r2, r2, r5
 8031bc0:	d41f      	bmi.n	8031c02 <_malloc_r+0xd6>
 8031bc2:	2a0b      	cmp	r2, #11
 8031bc4:	d917      	bls.n	8031bf6 <_malloc_r+0xca>
 8031bc6:	1961      	adds	r1, r4, r5
 8031bc8:	42a3      	cmp	r3, r4
 8031bca:	6025      	str	r5, [r4, #0]
 8031bcc:	bf18      	it	ne
 8031bce:	6059      	strne	r1, [r3, #4]
 8031bd0:	6863      	ldr	r3, [r4, #4]
 8031bd2:	bf08      	it	eq
 8031bd4:	f8c8 1000 	streq.w	r1, [r8]
 8031bd8:	5162      	str	r2, [r4, r5]
 8031bda:	604b      	str	r3, [r1, #4]
 8031bdc:	4638      	mov	r0, r7
 8031bde:	f104 060b 	add.w	r6, r4, #11
 8031be2:	f000 f829 	bl	8031c38 <__malloc_unlock>
 8031be6:	f026 0607 	bic.w	r6, r6, #7
 8031bea:	1d23      	adds	r3, r4, #4
 8031bec:	1af2      	subs	r2, r6, r3
 8031bee:	d0ae      	beq.n	8031b4e <_malloc_r+0x22>
 8031bf0:	1b9b      	subs	r3, r3, r6
 8031bf2:	50a3      	str	r3, [r4, r2]
 8031bf4:	e7ab      	b.n	8031b4e <_malloc_r+0x22>
 8031bf6:	42a3      	cmp	r3, r4
 8031bf8:	6862      	ldr	r2, [r4, #4]
 8031bfa:	d1dd      	bne.n	8031bb8 <_malloc_r+0x8c>
 8031bfc:	f8c8 2000 	str.w	r2, [r8]
 8031c00:	e7ec      	b.n	8031bdc <_malloc_r+0xb0>
 8031c02:	4623      	mov	r3, r4
 8031c04:	6864      	ldr	r4, [r4, #4]
 8031c06:	e7ac      	b.n	8031b62 <_malloc_r+0x36>
 8031c08:	4634      	mov	r4, r6
 8031c0a:	6876      	ldr	r6, [r6, #4]
 8031c0c:	e7b4      	b.n	8031b78 <_malloc_r+0x4c>
 8031c0e:	4613      	mov	r3, r2
 8031c10:	e7cc      	b.n	8031bac <_malloc_r+0x80>
 8031c12:	230c      	movs	r3, #12
 8031c14:	603b      	str	r3, [r7, #0]
 8031c16:	4638      	mov	r0, r7
 8031c18:	f000 f80e 	bl	8031c38 <__malloc_unlock>
 8031c1c:	e797      	b.n	8031b4e <_malloc_r+0x22>
 8031c1e:	6025      	str	r5, [r4, #0]
 8031c20:	e7dc      	b.n	8031bdc <_malloc_r+0xb0>
 8031c22:	605b      	str	r3, [r3, #4]
 8031c24:	deff      	udf	#255	; 0xff
 8031c26:	bf00      	nop
 8031c28:	20008754 	.word	0x20008754

08031c2c <__malloc_lock>:
 8031c2c:	4801      	ldr	r0, [pc, #4]	; (8031c34 <__malloc_lock+0x8>)
 8031c2e:	f7ff bf00 	b.w	8031a32 <__retarget_lock_acquire_recursive>
 8031c32:	bf00      	nop
 8031c34:	20008750 	.word	0x20008750

08031c38 <__malloc_unlock>:
 8031c38:	4801      	ldr	r0, [pc, #4]	; (8031c40 <__malloc_unlock+0x8>)
 8031c3a:	f7ff befb 	b.w	8031a34 <__retarget_lock_release_recursive>
 8031c3e:	bf00      	nop
 8031c40:	20008750 	.word	0x20008750

08031c44 <__sfputc_r>:
 8031c44:	6893      	ldr	r3, [r2, #8]
 8031c46:	3b01      	subs	r3, #1
 8031c48:	2b00      	cmp	r3, #0
 8031c4a:	b410      	push	{r4}
 8031c4c:	6093      	str	r3, [r2, #8]
 8031c4e:	da08      	bge.n	8031c62 <__sfputc_r+0x1e>
 8031c50:	6994      	ldr	r4, [r2, #24]
 8031c52:	42a3      	cmp	r3, r4
 8031c54:	db01      	blt.n	8031c5a <__sfputc_r+0x16>
 8031c56:	290a      	cmp	r1, #10
 8031c58:	d103      	bne.n	8031c62 <__sfputc_r+0x1e>
 8031c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031c5e:	f7ff bdda 	b.w	8031816 <__swbuf_r>
 8031c62:	6813      	ldr	r3, [r2, #0]
 8031c64:	1c58      	adds	r0, r3, #1
 8031c66:	6010      	str	r0, [r2, #0]
 8031c68:	7019      	strb	r1, [r3, #0]
 8031c6a:	4608      	mov	r0, r1
 8031c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031c70:	4770      	bx	lr

08031c72 <__sfputs_r>:
 8031c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031c74:	4606      	mov	r6, r0
 8031c76:	460f      	mov	r7, r1
 8031c78:	4614      	mov	r4, r2
 8031c7a:	18d5      	adds	r5, r2, r3
 8031c7c:	42ac      	cmp	r4, r5
 8031c7e:	d101      	bne.n	8031c84 <__sfputs_r+0x12>
 8031c80:	2000      	movs	r0, #0
 8031c82:	e007      	b.n	8031c94 <__sfputs_r+0x22>
 8031c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031c88:	463a      	mov	r2, r7
 8031c8a:	4630      	mov	r0, r6
 8031c8c:	f7ff ffda 	bl	8031c44 <__sfputc_r>
 8031c90:	1c43      	adds	r3, r0, #1
 8031c92:	d1f3      	bne.n	8031c7c <__sfputs_r+0xa>
 8031c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08031c98 <_vfiprintf_r>:
 8031c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031c9c:	460d      	mov	r5, r1
 8031c9e:	b09d      	sub	sp, #116	; 0x74
 8031ca0:	4614      	mov	r4, r2
 8031ca2:	4698      	mov	r8, r3
 8031ca4:	4606      	mov	r6, r0
 8031ca6:	b118      	cbz	r0, 8031cb0 <_vfiprintf_r+0x18>
 8031ca8:	6a03      	ldr	r3, [r0, #32]
 8031caa:	b90b      	cbnz	r3, 8031cb0 <_vfiprintf_r+0x18>
 8031cac:	f7ff fccc 	bl	8031648 <__sinit>
 8031cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031cb2:	07d9      	lsls	r1, r3, #31
 8031cb4:	d405      	bmi.n	8031cc2 <_vfiprintf_r+0x2a>
 8031cb6:	89ab      	ldrh	r3, [r5, #12]
 8031cb8:	059a      	lsls	r2, r3, #22
 8031cba:	d402      	bmi.n	8031cc2 <_vfiprintf_r+0x2a>
 8031cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031cbe:	f7ff feb8 	bl	8031a32 <__retarget_lock_acquire_recursive>
 8031cc2:	89ab      	ldrh	r3, [r5, #12]
 8031cc4:	071b      	lsls	r3, r3, #28
 8031cc6:	d501      	bpl.n	8031ccc <_vfiprintf_r+0x34>
 8031cc8:	692b      	ldr	r3, [r5, #16]
 8031cca:	b99b      	cbnz	r3, 8031cf4 <_vfiprintf_r+0x5c>
 8031ccc:	4629      	mov	r1, r5
 8031cce:	4630      	mov	r0, r6
 8031cd0:	f7ff fdde 	bl	8031890 <__swsetup_r>
 8031cd4:	b170      	cbz	r0, 8031cf4 <_vfiprintf_r+0x5c>
 8031cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031cd8:	07dc      	lsls	r4, r3, #31
 8031cda:	d504      	bpl.n	8031ce6 <_vfiprintf_r+0x4e>
 8031cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8031ce0:	b01d      	add	sp, #116	; 0x74
 8031ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031ce6:	89ab      	ldrh	r3, [r5, #12]
 8031ce8:	0598      	lsls	r0, r3, #22
 8031cea:	d4f7      	bmi.n	8031cdc <_vfiprintf_r+0x44>
 8031cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031cee:	f7ff fea1 	bl	8031a34 <__retarget_lock_release_recursive>
 8031cf2:	e7f3      	b.n	8031cdc <_vfiprintf_r+0x44>
 8031cf4:	2300      	movs	r3, #0
 8031cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8031cf8:	2320      	movs	r3, #32
 8031cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8031d02:	2330      	movs	r3, #48	; 0x30
 8031d04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8031eb8 <_vfiprintf_r+0x220>
 8031d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031d0c:	f04f 0901 	mov.w	r9, #1
 8031d10:	4623      	mov	r3, r4
 8031d12:	469a      	mov	sl, r3
 8031d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031d18:	b10a      	cbz	r2, 8031d1e <_vfiprintf_r+0x86>
 8031d1a:	2a25      	cmp	r2, #37	; 0x25
 8031d1c:	d1f9      	bne.n	8031d12 <_vfiprintf_r+0x7a>
 8031d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8031d22:	d00b      	beq.n	8031d3c <_vfiprintf_r+0xa4>
 8031d24:	465b      	mov	r3, fp
 8031d26:	4622      	mov	r2, r4
 8031d28:	4629      	mov	r1, r5
 8031d2a:	4630      	mov	r0, r6
 8031d2c:	f7ff ffa1 	bl	8031c72 <__sfputs_r>
 8031d30:	3001      	adds	r0, #1
 8031d32:	f000 80a9 	beq.w	8031e88 <_vfiprintf_r+0x1f0>
 8031d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031d38:	445a      	add	r2, fp
 8031d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8031d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8031d40:	2b00      	cmp	r3, #0
 8031d42:	f000 80a1 	beq.w	8031e88 <_vfiprintf_r+0x1f0>
 8031d46:	2300      	movs	r3, #0
 8031d48:	f04f 32ff 	mov.w	r2, #4294967295
 8031d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8031d50:	f10a 0a01 	add.w	sl, sl, #1
 8031d54:	9304      	str	r3, [sp, #16]
 8031d56:	9307      	str	r3, [sp, #28]
 8031d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8031d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8031d5e:	4654      	mov	r4, sl
 8031d60:	2205      	movs	r2, #5
 8031d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031d66:	4854      	ldr	r0, [pc, #336]	; (8031eb8 <_vfiprintf_r+0x220>)
 8031d68:	f7f0 fa32 	bl	80221d0 <memchr>
 8031d6c:	9a04      	ldr	r2, [sp, #16]
 8031d6e:	b9d8      	cbnz	r0, 8031da8 <_vfiprintf_r+0x110>
 8031d70:	06d1      	lsls	r1, r2, #27
 8031d72:	bf44      	itt	mi
 8031d74:	2320      	movmi	r3, #32
 8031d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031d7a:	0713      	lsls	r3, r2, #28
 8031d7c:	bf44      	itt	mi
 8031d7e:	232b      	movmi	r3, #43	; 0x2b
 8031d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031d84:	f89a 3000 	ldrb.w	r3, [sl]
 8031d88:	2b2a      	cmp	r3, #42	; 0x2a
 8031d8a:	d015      	beq.n	8031db8 <_vfiprintf_r+0x120>
 8031d8c:	9a07      	ldr	r2, [sp, #28]
 8031d8e:	4654      	mov	r4, sl
 8031d90:	2000      	movs	r0, #0
 8031d92:	f04f 0c0a 	mov.w	ip, #10
 8031d96:	4621      	mov	r1, r4
 8031d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031d9c:	3b30      	subs	r3, #48	; 0x30
 8031d9e:	2b09      	cmp	r3, #9
 8031da0:	d94d      	bls.n	8031e3e <_vfiprintf_r+0x1a6>
 8031da2:	b1b0      	cbz	r0, 8031dd2 <_vfiprintf_r+0x13a>
 8031da4:	9207      	str	r2, [sp, #28]
 8031da6:	e014      	b.n	8031dd2 <_vfiprintf_r+0x13a>
 8031da8:	eba0 0308 	sub.w	r3, r0, r8
 8031dac:	fa09 f303 	lsl.w	r3, r9, r3
 8031db0:	4313      	orrs	r3, r2
 8031db2:	9304      	str	r3, [sp, #16]
 8031db4:	46a2      	mov	sl, r4
 8031db6:	e7d2      	b.n	8031d5e <_vfiprintf_r+0xc6>
 8031db8:	9b03      	ldr	r3, [sp, #12]
 8031dba:	1d19      	adds	r1, r3, #4
 8031dbc:	681b      	ldr	r3, [r3, #0]
 8031dbe:	9103      	str	r1, [sp, #12]
 8031dc0:	2b00      	cmp	r3, #0
 8031dc2:	bfbb      	ittet	lt
 8031dc4:	425b      	neglt	r3, r3
 8031dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8031dca:	9307      	strge	r3, [sp, #28]
 8031dcc:	9307      	strlt	r3, [sp, #28]
 8031dce:	bfb8      	it	lt
 8031dd0:	9204      	strlt	r2, [sp, #16]
 8031dd2:	7823      	ldrb	r3, [r4, #0]
 8031dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8031dd6:	d10c      	bne.n	8031df2 <_vfiprintf_r+0x15a>
 8031dd8:	7863      	ldrb	r3, [r4, #1]
 8031dda:	2b2a      	cmp	r3, #42	; 0x2a
 8031ddc:	d134      	bne.n	8031e48 <_vfiprintf_r+0x1b0>
 8031dde:	9b03      	ldr	r3, [sp, #12]
 8031de0:	1d1a      	adds	r2, r3, #4
 8031de2:	681b      	ldr	r3, [r3, #0]
 8031de4:	9203      	str	r2, [sp, #12]
 8031de6:	2b00      	cmp	r3, #0
 8031de8:	bfb8      	it	lt
 8031dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8031dee:	3402      	adds	r4, #2
 8031df0:	9305      	str	r3, [sp, #20]
 8031df2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8031ec8 <_vfiprintf_r+0x230>
 8031df6:	7821      	ldrb	r1, [r4, #0]
 8031df8:	2203      	movs	r2, #3
 8031dfa:	4650      	mov	r0, sl
 8031dfc:	f7f0 f9e8 	bl	80221d0 <memchr>
 8031e00:	b138      	cbz	r0, 8031e12 <_vfiprintf_r+0x17a>
 8031e02:	9b04      	ldr	r3, [sp, #16]
 8031e04:	eba0 000a 	sub.w	r0, r0, sl
 8031e08:	2240      	movs	r2, #64	; 0x40
 8031e0a:	4082      	lsls	r2, r0
 8031e0c:	4313      	orrs	r3, r2
 8031e0e:	3401      	adds	r4, #1
 8031e10:	9304      	str	r3, [sp, #16]
 8031e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031e16:	4829      	ldr	r0, [pc, #164]	; (8031ebc <_vfiprintf_r+0x224>)
 8031e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031e1c:	2206      	movs	r2, #6
 8031e1e:	f7f0 f9d7 	bl	80221d0 <memchr>
 8031e22:	2800      	cmp	r0, #0
 8031e24:	d03f      	beq.n	8031ea6 <_vfiprintf_r+0x20e>
 8031e26:	4b26      	ldr	r3, [pc, #152]	; (8031ec0 <_vfiprintf_r+0x228>)
 8031e28:	bb1b      	cbnz	r3, 8031e72 <_vfiprintf_r+0x1da>
 8031e2a:	9b03      	ldr	r3, [sp, #12]
 8031e2c:	3307      	adds	r3, #7
 8031e2e:	f023 0307 	bic.w	r3, r3, #7
 8031e32:	3308      	adds	r3, #8
 8031e34:	9303      	str	r3, [sp, #12]
 8031e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031e38:	443b      	add	r3, r7
 8031e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8031e3c:	e768      	b.n	8031d10 <_vfiprintf_r+0x78>
 8031e3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8031e42:	460c      	mov	r4, r1
 8031e44:	2001      	movs	r0, #1
 8031e46:	e7a6      	b.n	8031d96 <_vfiprintf_r+0xfe>
 8031e48:	2300      	movs	r3, #0
 8031e4a:	3401      	adds	r4, #1
 8031e4c:	9305      	str	r3, [sp, #20]
 8031e4e:	4619      	mov	r1, r3
 8031e50:	f04f 0c0a 	mov.w	ip, #10
 8031e54:	4620      	mov	r0, r4
 8031e56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8031e5a:	3a30      	subs	r2, #48	; 0x30
 8031e5c:	2a09      	cmp	r2, #9
 8031e5e:	d903      	bls.n	8031e68 <_vfiprintf_r+0x1d0>
 8031e60:	2b00      	cmp	r3, #0
 8031e62:	d0c6      	beq.n	8031df2 <_vfiprintf_r+0x15a>
 8031e64:	9105      	str	r1, [sp, #20]
 8031e66:	e7c4      	b.n	8031df2 <_vfiprintf_r+0x15a>
 8031e68:	fb0c 2101 	mla	r1, ip, r1, r2
 8031e6c:	4604      	mov	r4, r0
 8031e6e:	2301      	movs	r3, #1
 8031e70:	e7f0      	b.n	8031e54 <_vfiprintf_r+0x1bc>
 8031e72:	ab03      	add	r3, sp, #12
 8031e74:	9300      	str	r3, [sp, #0]
 8031e76:	462a      	mov	r2, r5
 8031e78:	4b12      	ldr	r3, [pc, #72]	; (8031ec4 <_vfiprintf_r+0x22c>)
 8031e7a:	a904      	add	r1, sp, #16
 8031e7c:	4630      	mov	r0, r6
 8031e7e:	f3af 8000 	nop.w
 8031e82:	4607      	mov	r7, r0
 8031e84:	1c78      	adds	r0, r7, #1
 8031e86:	d1d6      	bne.n	8031e36 <_vfiprintf_r+0x19e>
 8031e88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031e8a:	07d9      	lsls	r1, r3, #31
 8031e8c:	d405      	bmi.n	8031e9a <_vfiprintf_r+0x202>
 8031e8e:	89ab      	ldrh	r3, [r5, #12]
 8031e90:	059a      	lsls	r2, r3, #22
 8031e92:	d402      	bmi.n	8031e9a <_vfiprintf_r+0x202>
 8031e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031e96:	f7ff fdcd 	bl	8031a34 <__retarget_lock_release_recursive>
 8031e9a:	89ab      	ldrh	r3, [r5, #12]
 8031e9c:	065b      	lsls	r3, r3, #25
 8031e9e:	f53f af1d 	bmi.w	8031cdc <_vfiprintf_r+0x44>
 8031ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8031ea4:	e71c      	b.n	8031ce0 <_vfiprintf_r+0x48>
 8031ea6:	ab03      	add	r3, sp, #12
 8031ea8:	9300      	str	r3, [sp, #0]
 8031eaa:	462a      	mov	r2, r5
 8031eac:	4b05      	ldr	r3, [pc, #20]	; (8031ec4 <_vfiprintf_r+0x22c>)
 8031eae:	a904      	add	r1, sp, #16
 8031eb0:	4630      	mov	r0, r6
 8031eb2:	f000 f879 	bl	8031fa8 <_printf_i>
 8031eb6:	e7e4      	b.n	8031e82 <_vfiprintf_r+0x1ea>
 8031eb8:	08033328 	.word	0x08033328
 8031ebc:	08033332 	.word	0x08033332
 8031ec0:	00000000 	.word	0x00000000
 8031ec4:	08031c73 	.word	0x08031c73
 8031ec8:	0803332e 	.word	0x0803332e

08031ecc <_printf_common>:
 8031ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031ed0:	4616      	mov	r6, r2
 8031ed2:	4699      	mov	r9, r3
 8031ed4:	688a      	ldr	r2, [r1, #8]
 8031ed6:	690b      	ldr	r3, [r1, #16]
 8031ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031edc:	4293      	cmp	r3, r2
 8031ede:	bfb8      	it	lt
 8031ee0:	4613      	movlt	r3, r2
 8031ee2:	6033      	str	r3, [r6, #0]
 8031ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031ee8:	4607      	mov	r7, r0
 8031eea:	460c      	mov	r4, r1
 8031eec:	b10a      	cbz	r2, 8031ef2 <_printf_common+0x26>
 8031eee:	3301      	adds	r3, #1
 8031ef0:	6033      	str	r3, [r6, #0]
 8031ef2:	6823      	ldr	r3, [r4, #0]
 8031ef4:	0699      	lsls	r1, r3, #26
 8031ef6:	bf42      	ittt	mi
 8031ef8:	6833      	ldrmi	r3, [r6, #0]
 8031efa:	3302      	addmi	r3, #2
 8031efc:	6033      	strmi	r3, [r6, #0]
 8031efe:	6825      	ldr	r5, [r4, #0]
 8031f00:	f015 0506 	ands.w	r5, r5, #6
 8031f04:	d106      	bne.n	8031f14 <_printf_common+0x48>
 8031f06:	f104 0a19 	add.w	sl, r4, #25
 8031f0a:	68e3      	ldr	r3, [r4, #12]
 8031f0c:	6832      	ldr	r2, [r6, #0]
 8031f0e:	1a9b      	subs	r3, r3, r2
 8031f10:	42ab      	cmp	r3, r5
 8031f12:	dc26      	bgt.n	8031f62 <_printf_common+0x96>
 8031f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031f18:	1e13      	subs	r3, r2, #0
 8031f1a:	6822      	ldr	r2, [r4, #0]
 8031f1c:	bf18      	it	ne
 8031f1e:	2301      	movne	r3, #1
 8031f20:	0692      	lsls	r2, r2, #26
 8031f22:	d42b      	bmi.n	8031f7c <_printf_common+0xb0>
 8031f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031f28:	4649      	mov	r1, r9
 8031f2a:	4638      	mov	r0, r7
 8031f2c:	47c0      	blx	r8
 8031f2e:	3001      	adds	r0, #1
 8031f30:	d01e      	beq.n	8031f70 <_printf_common+0xa4>
 8031f32:	6823      	ldr	r3, [r4, #0]
 8031f34:	6922      	ldr	r2, [r4, #16]
 8031f36:	f003 0306 	and.w	r3, r3, #6
 8031f3a:	2b04      	cmp	r3, #4
 8031f3c:	bf02      	ittt	eq
 8031f3e:	68e5      	ldreq	r5, [r4, #12]
 8031f40:	6833      	ldreq	r3, [r6, #0]
 8031f42:	1aed      	subeq	r5, r5, r3
 8031f44:	68a3      	ldr	r3, [r4, #8]
 8031f46:	bf0c      	ite	eq
 8031f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8031f4c:	2500      	movne	r5, #0
 8031f4e:	4293      	cmp	r3, r2
 8031f50:	bfc4      	itt	gt
 8031f52:	1a9b      	subgt	r3, r3, r2
 8031f54:	18ed      	addgt	r5, r5, r3
 8031f56:	2600      	movs	r6, #0
 8031f58:	341a      	adds	r4, #26
 8031f5a:	42b5      	cmp	r5, r6
 8031f5c:	d11a      	bne.n	8031f94 <_printf_common+0xc8>
 8031f5e:	2000      	movs	r0, #0
 8031f60:	e008      	b.n	8031f74 <_printf_common+0xa8>
 8031f62:	2301      	movs	r3, #1
 8031f64:	4652      	mov	r2, sl
 8031f66:	4649      	mov	r1, r9
 8031f68:	4638      	mov	r0, r7
 8031f6a:	47c0      	blx	r8
 8031f6c:	3001      	adds	r0, #1
 8031f6e:	d103      	bne.n	8031f78 <_printf_common+0xac>
 8031f70:	f04f 30ff 	mov.w	r0, #4294967295
 8031f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031f78:	3501      	adds	r5, #1
 8031f7a:	e7c6      	b.n	8031f0a <_printf_common+0x3e>
 8031f7c:	18e1      	adds	r1, r4, r3
 8031f7e:	1c5a      	adds	r2, r3, #1
 8031f80:	2030      	movs	r0, #48	; 0x30
 8031f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031f86:	4422      	add	r2, r4
 8031f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031f90:	3302      	adds	r3, #2
 8031f92:	e7c7      	b.n	8031f24 <_printf_common+0x58>
 8031f94:	2301      	movs	r3, #1
 8031f96:	4622      	mov	r2, r4
 8031f98:	4649      	mov	r1, r9
 8031f9a:	4638      	mov	r0, r7
 8031f9c:	47c0      	blx	r8
 8031f9e:	3001      	adds	r0, #1
 8031fa0:	d0e6      	beq.n	8031f70 <_printf_common+0xa4>
 8031fa2:	3601      	adds	r6, #1
 8031fa4:	e7d9      	b.n	8031f5a <_printf_common+0x8e>
	...

08031fa8 <_printf_i>:
 8031fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031fac:	7e0f      	ldrb	r7, [r1, #24]
 8031fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031fb0:	2f78      	cmp	r7, #120	; 0x78
 8031fb2:	4691      	mov	r9, r2
 8031fb4:	4680      	mov	r8, r0
 8031fb6:	460c      	mov	r4, r1
 8031fb8:	469a      	mov	sl, r3
 8031fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031fbe:	d807      	bhi.n	8031fd0 <_printf_i+0x28>
 8031fc0:	2f62      	cmp	r7, #98	; 0x62
 8031fc2:	d80a      	bhi.n	8031fda <_printf_i+0x32>
 8031fc4:	2f00      	cmp	r7, #0
 8031fc6:	f000 80d4 	beq.w	8032172 <_printf_i+0x1ca>
 8031fca:	2f58      	cmp	r7, #88	; 0x58
 8031fcc:	f000 80c0 	beq.w	8032150 <_printf_i+0x1a8>
 8031fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031fd8:	e03a      	b.n	8032050 <_printf_i+0xa8>
 8031fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031fde:	2b15      	cmp	r3, #21
 8031fe0:	d8f6      	bhi.n	8031fd0 <_printf_i+0x28>
 8031fe2:	a101      	add	r1, pc, #4	; (adr r1, 8031fe8 <_printf_i+0x40>)
 8031fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031fe8:	08032041 	.word	0x08032041
 8031fec:	08032055 	.word	0x08032055
 8031ff0:	08031fd1 	.word	0x08031fd1
 8031ff4:	08031fd1 	.word	0x08031fd1
 8031ff8:	08031fd1 	.word	0x08031fd1
 8031ffc:	08031fd1 	.word	0x08031fd1
 8032000:	08032055 	.word	0x08032055
 8032004:	08031fd1 	.word	0x08031fd1
 8032008:	08031fd1 	.word	0x08031fd1
 803200c:	08031fd1 	.word	0x08031fd1
 8032010:	08031fd1 	.word	0x08031fd1
 8032014:	08032159 	.word	0x08032159
 8032018:	08032081 	.word	0x08032081
 803201c:	08032113 	.word	0x08032113
 8032020:	08031fd1 	.word	0x08031fd1
 8032024:	08031fd1 	.word	0x08031fd1
 8032028:	0803217b 	.word	0x0803217b
 803202c:	08031fd1 	.word	0x08031fd1
 8032030:	08032081 	.word	0x08032081
 8032034:	08031fd1 	.word	0x08031fd1
 8032038:	08031fd1 	.word	0x08031fd1
 803203c:	0803211b 	.word	0x0803211b
 8032040:	682b      	ldr	r3, [r5, #0]
 8032042:	1d1a      	adds	r2, r3, #4
 8032044:	681b      	ldr	r3, [r3, #0]
 8032046:	602a      	str	r2, [r5, #0]
 8032048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803204c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8032050:	2301      	movs	r3, #1
 8032052:	e09f      	b.n	8032194 <_printf_i+0x1ec>
 8032054:	6820      	ldr	r0, [r4, #0]
 8032056:	682b      	ldr	r3, [r5, #0]
 8032058:	0607      	lsls	r7, r0, #24
 803205a:	f103 0104 	add.w	r1, r3, #4
 803205e:	6029      	str	r1, [r5, #0]
 8032060:	d501      	bpl.n	8032066 <_printf_i+0xbe>
 8032062:	681e      	ldr	r6, [r3, #0]
 8032064:	e003      	b.n	803206e <_printf_i+0xc6>
 8032066:	0646      	lsls	r6, r0, #25
 8032068:	d5fb      	bpl.n	8032062 <_printf_i+0xba>
 803206a:	f9b3 6000 	ldrsh.w	r6, [r3]
 803206e:	2e00      	cmp	r6, #0
 8032070:	da03      	bge.n	803207a <_printf_i+0xd2>
 8032072:	232d      	movs	r3, #45	; 0x2d
 8032074:	4276      	negs	r6, r6
 8032076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803207a:	485a      	ldr	r0, [pc, #360]	; (80321e4 <_printf_i+0x23c>)
 803207c:	230a      	movs	r3, #10
 803207e:	e012      	b.n	80320a6 <_printf_i+0xfe>
 8032080:	682b      	ldr	r3, [r5, #0]
 8032082:	6820      	ldr	r0, [r4, #0]
 8032084:	1d19      	adds	r1, r3, #4
 8032086:	6029      	str	r1, [r5, #0]
 8032088:	0605      	lsls	r5, r0, #24
 803208a:	d501      	bpl.n	8032090 <_printf_i+0xe8>
 803208c:	681e      	ldr	r6, [r3, #0]
 803208e:	e002      	b.n	8032096 <_printf_i+0xee>
 8032090:	0641      	lsls	r1, r0, #25
 8032092:	d5fb      	bpl.n	803208c <_printf_i+0xe4>
 8032094:	881e      	ldrh	r6, [r3, #0]
 8032096:	4853      	ldr	r0, [pc, #332]	; (80321e4 <_printf_i+0x23c>)
 8032098:	2f6f      	cmp	r7, #111	; 0x6f
 803209a:	bf0c      	ite	eq
 803209c:	2308      	moveq	r3, #8
 803209e:	230a      	movne	r3, #10
 80320a0:	2100      	movs	r1, #0
 80320a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80320a6:	6865      	ldr	r5, [r4, #4]
 80320a8:	60a5      	str	r5, [r4, #8]
 80320aa:	2d00      	cmp	r5, #0
 80320ac:	bfa2      	ittt	ge
 80320ae:	6821      	ldrge	r1, [r4, #0]
 80320b0:	f021 0104 	bicge.w	r1, r1, #4
 80320b4:	6021      	strge	r1, [r4, #0]
 80320b6:	b90e      	cbnz	r6, 80320bc <_printf_i+0x114>
 80320b8:	2d00      	cmp	r5, #0
 80320ba:	d04b      	beq.n	8032154 <_printf_i+0x1ac>
 80320bc:	4615      	mov	r5, r2
 80320be:	fbb6 f1f3 	udiv	r1, r6, r3
 80320c2:	fb03 6711 	mls	r7, r3, r1, r6
 80320c6:	5dc7      	ldrb	r7, [r0, r7]
 80320c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80320cc:	4637      	mov	r7, r6
 80320ce:	42bb      	cmp	r3, r7
 80320d0:	460e      	mov	r6, r1
 80320d2:	d9f4      	bls.n	80320be <_printf_i+0x116>
 80320d4:	2b08      	cmp	r3, #8
 80320d6:	d10b      	bne.n	80320f0 <_printf_i+0x148>
 80320d8:	6823      	ldr	r3, [r4, #0]
 80320da:	07de      	lsls	r6, r3, #31
 80320dc:	d508      	bpl.n	80320f0 <_printf_i+0x148>
 80320de:	6923      	ldr	r3, [r4, #16]
 80320e0:	6861      	ldr	r1, [r4, #4]
 80320e2:	4299      	cmp	r1, r3
 80320e4:	bfde      	ittt	le
 80320e6:	2330      	movle	r3, #48	; 0x30
 80320e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80320ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80320f0:	1b52      	subs	r2, r2, r5
 80320f2:	6122      	str	r2, [r4, #16]
 80320f4:	f8cd a000 	str.w	sl, [sp]
 80320f8:	464b      	mov	r3, r9
 80320fa:	aa03      	add	r2, sp, #12
 80320fc:	4621      	mov	r1, r4
 80320fe:	4640      	mov	r0, r8
 8032100:	f7ff fee4 	bl	8031ecc <_printf_common>
 8032104:	3001      	adds	r0, #1
 8032106:	d14a      	bne.n	803219e <_printf_i+0x1f6>
 8032108:	f04f 30ff 	mov.w	r0, #4294967295
 803210c:	b004      	add	sp, #16
 803210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032112:	6823      	ldr	r3, [r4, #0]
 8032114:	f043 0320 	orr.w	r3, r3, #32
 8032118:	6023      	str	r3, [r4, #0]
 803211a:	4833      	ldr	r0, [pc, #204]	; (80321e8 <_printf_i+0x240>)
 803211c:	2778      	movs	r7, #120	; 0x78
 803211e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8032122:	6823      	ldr	r3, [r4, #0]
 8032124:	6829      	ldr	r1, [r5, #0]
 8032126:	061f      	lsls	r7, r3, #24
 8032128:	f851 6b04 	ldr.w	r6, [r1], #4
 803212c:	d402      	bmi.n	8032134 <_printf_i+0x18c>
 803212e:	065f      	lsls	r7, r3, #25
 8032130:	bf48      	it	mi
 8032132:	b2b6      	uxthmi	r6, r6
 8032134:	07df      	lsls	r7, r3, #31
 8032136:	bf48      	it	mi
 8032138:	f043 0320 	orrmi.w	r3, r3, #32
 803213c:	6029      	str	r1, [r5, #0]
 803213e:	bf48      	it	mi
 8032140:	6023      	strmi	r3, [r4, #0]
 8032142:	b91e      	cbnz	r6, 803214c <_printf_i+0x1a4>
 8032144:	6823      	ldr	r3, [r4, #0]
 8032146:	f023 0320 	bic.w	r3, r3, #32
 803214a:	6023      	str	r3, [r4, #0]
 803214c:	2310      	movs	r3, #16
 803214e:	e7a7      	b.n	80320a0 <_printf_i+0xf8>
 8032150:	4824      	ldr	r0, [pc, #144]	; (80321e4 <_printf_i+0x23c>)
 8032152:	e7e4      	b.n	803211e <_printf_i+0x176>
 8032154:	4615      	mov	r5, r2
 8032156:	e7bd      	b.n	80320d4 <_printf_i+0x12c>
 8032158:	682b      	ldr	r3, [r5, #0]
 803215a:	6826      	ldr	r6, [r4, #0]
 803215c:	6961      	ldr	r1, [r4, #20]
 803215e:	1d18      	adds	r0, r3, #4
 8032160:	6028      	str	r0, [r5, #0]
 8032162:	0635      	lsls	r5, r6, #24
 8032164:	681b      	ldr	r3, [r3, #0]
 8032166:	d501      	bpl.n	803216c <_printf_i+0x1c4>
 8032168:	6019      	str	r1, [r3, #0]
 803216a:	e002      	b.n	8032172 <_printf_i+0x1ca>
 803216c:	0670      	lsls	r0, r6, #25
 803216e:	d5fb      	bpl.n	8032168 <_printf_i+0x1c0>
 8032170:	8019      	strh	r1, [r3, #0]
 8032172:	2300      	movs	r3, #0
 8032174:	6123      	str	r3, [r4, #16]
 8032176:	4615      	mov	r5, r2
 8032178:	e7bc      	b.n	80320f4 <_printf_i+0x14c>
 803217a:	682b      	ldr	r3, [r5, #0]
 803217c:	1d1a      	adds	r2, r3, #4
 803217e:	602a      	str	r2, [r5, #0]
 8032180:	681d      	ldr	r5, [r3, #0]
 8032182:	6862      	ldr	r2, [r4, #4]
 8032184:	2100      	movs	r1, #0
 8032186:	4628      	mov	r0, r5
 8032188:	f7f0 f822 	bl	80221d0 <memchr>
 803218c:	b108      	cbz	r0, 8032192 <_printf_i+0x1ea>
 803218e:	1b40      	subs	r0, r0, r5
 8032190:	6060      	str	r0, [r4, #4]
 8032192:	6863      	ldr	r3, [r4, #4]
 8032194:	6123      	str	r3, [r4, #16]
 8032196:	2300      	movs	r3, #0
 8032198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803219c:	e7aa      	b.n	80320f4 <_printf_i+0x14c>
 803219e:	6923      	ldr	r3, [r4, #16]
 80321a0:	462a      	mov	r2, r5
 80321a2:	4649      	mov	r1, r9
 80321a4:	4640      	mov	r0, r8
 80321a6:	47d0      	blx	sl
 80321a8:	3001      	adds	r0, #1
 80321aa:	d0ad      	beq.n	8032108 <_printf_i+0x160>
 80321ac:	6823      	ldr	r3, [r4, #0]
 80321ae:	079b      	lsls	r3, r3, #30
 80321b0:	d413      	bmi.n	80321da <_printf_i+0x232>
 80321b2:	68e0      	ldr	r0, [r4, #12]
 80321b4:	9b03      	ldr	r3, [sp, #12]
 80321b6:	4298      	cmp	r0, r3
 80321b8:	bfb8      	it	lt
 80321ba:	4618      	movlt	r0, r3
 80321bc:	e7a6      	b.n	803210c <_printf_i+0x164>
 80321be:	2301      	movs	r3, #1
 80321c0:	4632      	mov	r2, r6
 80321c2:	4649      	mov	r1, r9
 80321c4:	4640      	mov	r0, r8
 80321c6:	47d0      	blx	sl
 80321c8:	3001      	adds	r0, #1
 80321ca:	d09d      	beq.n	8032108 <_printf_i+0x160>
 80321cc:	3501      	adds	r5, #1
 80321ce:	68e3      	ldr	r3, [r4, #12]
 80321d0:	9903      	ldr	r1, [sp, #12]
 80321d2:	1a5b      	subs	r3, r3, r1
 80321d4:	42ab      	cmp	r3, r5
 80321d6:	dcf2      	bgt.n	80321be <_printf_i+0x216>
 80321d8:	e7eb      	b.n	80321b2 <_printf_i+0x20a>
 80321da:	2500      	movs	r5, #0
 80321dc:	f104 0619 	add.w	r6, r4, #25
 80321e0:	e7f5      	b.n	80321ce <_printf_i+0x226>
 80321e2:	bf00      	nop
 80321e4:	08033339 	.word	0x08033339
 80321e8:	0803334a 	.word	0x0803334a

080321ec <__sflush_r>:
 80321ec:	898a      	ldrh	r2, [r1, #12]
 80321ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80321f2:	4605      	mov	r5, r0
 80321f4:	0710      	lsls	r0, r2, #28
 80321f6:	460c      	mov	r4, r1
 80321f8:	d458      	bmi.n	80322ac <__sflush_r+0xc0>
 80321fa:	684b      	ldr	r3, [r1, #4]
 80321fc:	2b00      	cmp	r3, #0
 80321fe:	dc05      	bgt.n	803220c <__sflush_r+0x20>
 8032200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8032202:	2b00      	cmp	r3, #0
 8032204:	dc02      	bgt.n	803220c <__sflush_r+0x20>
 8032206:	2000      	movs	r0, #0
 8032208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803220c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803220e:	2e00      	cmp	r6, #0
 8032210:	d0f9      	beq.n	8032206 <__sflush_r+0x1a>
 8032212:	2300      	movs	r3, #0
 8032214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8032218:	682f      	ldr	r7, [r5, #0]
 803221a:	6a21      	ldr	r1, [r4, #32]
 803221c:	602b      	str	r3, [r5, #0]
 803221e:	d032      	beq.n	8032286 <__sflush_r+0x9a>
 8032220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8032222:	89a3      	ldrh	r3, [r4, #12]
 8032224:	075a      	lsls	r2, r3, #29
 8032226:	d505      	bpl.n	8032234 <__sflush_r+0x48>
 8032228:	6863      	ldr	r3, [r4, #4]
 803222a:	1ac0      	subs	r0, r0, r3
 803222c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803222e:	b10b      	cbz	r3, 8032234 <__sflush_r+0x48>
 8032230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8032232:	1ac0      	subs	r0, r0, r3
 8032234:	2300      	movs	r3, #0
 8032236:	4602      	mov	r2, r0
 8032238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803223a:	6a21      	ldr	r1, [r4, #32]
 803223c:	4628      	mov	r0, r5
 803223e:	47b0      	blx	r6
 8032240:	1c43      	adds	r3, r0, #1
 8032242:	89a3      	ldrh	r3, [r4, #12]
 8032244:	d106      	bne.n	8032254 <__sflush_r+0x68>
 8032246:	6829      	ldr	r1, [r5, #0]
 8032248:	291d      	cmp	r1, #29
 803224a:	d82b      	bhi.n	80322a4 <__sflush_r+0xb8>
 803224c:	4a29      	ldr	r2, [pc, #164]	; (80322f4 <__sflush_r+0x108>)
 803224e:	410a      	asrs	r2, r1
 8032250:	07d6      	lsls	r6, r2, #31
 8032252:	d427      	bmi.n	80322a4 <__sflush_r+0xb8>
 8032254:	2200      	movs	r2, #0
 8032256:	6062      	str	r2, [r4, #4]
 8032258:	04d9      	lsls	r1, r3, #19
 803225a:	6922      	ldr	r2, [r4, #16]
 803225c:	6022      	str	r2, [r4, #0]
 803225e:	d504      	bpl.n	803226a <__sflush_r+0x7e>
 8032260:	1c42      	adds	r2, r0, #1
 8032262:	d101      	bne.n	8032268 <__sflush_r+0x7c>
 8032264:	682b      	ldr	r3, [r5, #0]
 8032266:	b903      	cbnz	r3, 803226a <__sflush_r+0x7e>
 8032268:	6560      	str	r0, [r4, #84]	; 0x54
 803226a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803226c:	602f      	str	r7, [r5, #0]
 803226e:	2900      	cmp	r1, #0
 8032270:	d0c9      	beq.n	8032206 <__sflush_r+0x1a>
 8032272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8032276:	4299      	cmp	r1, r3
 8032278:	d002      	beq.n	8032280 <__sflush_r+0x94>
 803227a:	4628      	mov	r0, r5
 803227c:	f7ff fbea 	bl	8031a54 <_free_r>
 8032280:	2000      	movs	r0, #0
 8032282:	6360      	str	r0, [r4, #52]	; 0x34
 8032284:	e7c0      	b.n	8032208 <__sflush_r+0x1c>
 8032286:	2301      	movs	r3, #1
 8032288:	4628      	mov	r0, r5
 803228a:	47b0      	blx	r6
 803228c:	1c41      	adds	r1, r0, #1
 803228e:	d1c8      	bne.n	8032222 <__sflush_r+0x36>
 8032290:	682b      	ldr	r3, [r5, #0]
 8032292:	2b00      	cmp	r3, #0
 8032294:	d0c5      	beq.n	8032222 <__sflush_r+0x36>
 8032296:	2b1d      	cmp	r3, #29
 8032298:	d001      	beq.n	803229e <__sflush_r+0xb2>
 803229a:	2b16      	cmp	r3, #22
 803229c:	d101      	bne.n	80322a2 <__sflush_r+0xb6>
 803229e:	602f      	str	r7, [r5, #0]
 80322a0:	e7b1      	b.n	8032206 <__sflush_r+0x1a>
 80322a2:	89a3      	ldrh	r3, [r4, #12]
 80322a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80322a8:	81a3      	strh	r3, [r4, #12]
 80322aa:	e7ad      	b.n	8032208 <__sflush_r+0x1c>
 80322ac:	690f      	ldr	r7, [r1, #16]
 80322ae:	2f00      	cmp	r7, #0
 80322b0:	d0a9      	beq.n	8032206 <__sflush_r+0x1a>
 80322b2:	0793      	lsls	r3, r2, #30
 80322b4:	680e      	ldr	r6, [r1, #0]
 80322b6:	bf08      	it	eq
 80322b8:	694b      	ldreq	r3, [r1, #20]
 80322ba:	600f      	str	r7, [r1, #0]
 80322bc:	bf18      	it	ne
 80322be:	2300      	movne	r3, #0
 80322c0:	eba6 0807 	sub.w	r8, r6, r7
 80322c4:	608b      	str	r3, [r1, #8]
 80322c6:	f1b8 0f00 	cmp.w	r8, #0
 80322ca:	dd9c      	ble.n	8032206 <__sflush_r+0x1a>
 80322cc:	6a21      	ldr	r1, [r4, #32]
 80322ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80322d0:	4643      	mov	r3, r8
 80322d2:	463a      	mov	r2, r7
 80322d4:	4628      	mov	r0, r5
 80322d6:	47b0      	blx	r6
 80322d8:	2800      	cmp	r0, #0
 80322da:	dc06      	bgt.n	80322ea <__sflush_r+0xfe>
 80322dc:	89a3      	ldrh	r3, [r4, #12]
 80322de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80322e2:	81a3      	strh	r3, [r4, #12]
 80322e4:	f04f 30ff 	mov.w	r0, #4294967295
 80322e8:	e78e      	b.n	8032208 <__sflush_r+0x1c>
 80322ea:	4407      	add	r7, r0
 80322ec:	eba8 0800 	sub.w	r8, r8, r0
 80322f0:	e7e9      	b.n	80322c6 <__sflush_r+0xda>
 80322f2:	bf00      	nop
 80322f4:	dfbffffe 	.word	0xdfbffffe

080322f8 <_fflush_r>:
 80322f8:	b538      	push	{r3, r4, r5, lr}
 80322fa:	690b      	ldr	r3, [r1, #16]
 80322fc:	4605      	mov	r5, r0
 80322fe:	460c      	mov	r4, r1
 8032300:	b913      	cbnz	r3, 8032308 <_fflush_r+0x10>
 8032302:	2500      	movs	r5, #0
 8032304:	4628      	mov	r0, r5
 8032306:	bd38      	pop	{r3, r4, r5, pc}
 8032308:	b118      	cbz	r0, 8032312 <_fflush_r+0x1a>
 803230a:	6a03      	ldr	r3, [r0, #32]
 803230c:	b90b      	cbnz	r3, 8032312 <_fflush_r+0x1a>
 803230e:	f7ff f99b 	bl	8031648 <__sinit>
 8032312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032316:	2b00      	cmp	r3, #0
 8032318:	d0f3      	beq.n	8032302 <_fflush_r+0xa>
 803231a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803231c:	07d0      	lsls	r0, r2, #31
 803231e:	d404      	bmi.n	803232a <_fflush_r+0x32>
 8032320:	0599      	lsls	r1, r3, #22
 8032322:	d402      	bmi.n	803232a <_fflush_r+0x32>
 8032324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032326:	f7ff fb84 	bl	8031a32 <__retarget_lock_acquire_recursive>
 803232a:	4628      	mov	r0, r5
 803232c:	4621      	mov	r1, r4
 803232e:	f7ff ff5d 	bl	80321ec <__sflush_r>
 8032332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8032334:	07da      	lsls	r2, r3, #31
 8032336:	4605      	mov	r5, r0
 8032338:	d4e4      	bmi.n	8032304 <_fflush_r+0xc>
 803233a:	89a3      	ldrh	r3, [r4, #12]
 803233c:	059b      	lsls	r3, r3, #22
 803233e:	d4e1      	bmi.n	8032304 <_fflush_r+0xc>
 8032340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032342:	f7ff fb77 	bl	8031a34 <__retarget_lock_release_recursive>
 8032346:	e7dd      	b.n	8032304 <_fflush_r+0xc>

08032348 <__swhatbuf_r>:
 8032348:	b570      	push	{r4, r5, r6, lr}
 803234a:	460c      	mov	r4, r1
 803234c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8032350:	2900      	cmp	r1, #0
 8032352:	b096      	sub	sp, #88	; 0x58
 8032354:	4615      	mov	r5, r2
 8032356:	461e      	mov	r6, r3
 8032358:	da0d      	bge.n	8032376 <__swhatbuf_r+0x2e>
 803235a:	89a3      	ldrh	r3, [r4, #12]
 803235c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8032360:	f04f 0100 	mov.w	r1, #0
 8032364:	bf0c      	ite	eq
 8032366:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 803236a:	2340      	movne	r3, #64	; 0x40
 803236c:	2000      	movs	r0, #0
 803236e:	6031      	str	r1, [r6, #0]
 8032370:	602b      	str	r3, [r5, #0]
 8032372:	b016      	add	sp, #88	; 0x58
 8032374:	bd70      	pop	{r4, r5, r6, pc}
 8032376:	466a      	mov	r2, sp
 8032378:	f000 f848 	bl	803240c <_fstat_r>
 803237c:	2800      	cmp	r0, #0
 803237e:	dbec      	blt.n	803235a <__swhatbuf_r+0x12>
 8032380:	9901      	ldr	r1, [sp, #4]
 8032382:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8032386:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 803238a:	4259      	negs	r1, r3
 803238c:	4159      	adcs	r1, r3
 803238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8032392:	e7eb      	b.n	803236c <__swhatbuf_r+0x24>

08032394 <__smakebuf_r>:
 8032394:	898b      	ldrh	r3, [r1, #12]
 8032396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8032398:	079d      	lsls	r5, r3, #30
 803239a:	4606      	mov	r6, r0
 803239c:	460c      	mov	r4, r1
 803239e:	d507      	bpl.n	80323b0 <__smakebuf_r+0x1c>
 80323a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80323a4:	6023      	str	r3, [r4, #0]
 80323a6:	6123      	str	r3, [r4, #16]
 80323a8:	2301      	movs	r3, #1
 80323aa:	6163      	str	r3, [r4, #20]
 80323ac:	b002      	add	sp, #8
 80323ae:	bd70      	pop	{r4, r5, r6, pc}
 80323b0:	ab01      	add	r3, sp, #4
 80323b2:	466a      	mov	r2, sp
 80323b4:	f7ff ffc8 	bl	8032348 <__swhatbuf_r>
 80323b8:	9900      	ldr	r1, [sp, #0]
 80323ba:	4605      	mov	r5, r0
 80323bc:	4630      	mov	r0, r6
 80323be:	f7ff fbb5 	bl	8031b2c <_malloc_r>
 80323c2:	b948      	cbnz	r0, 80323d8 <__smakebuf_r+0x44>
 80323c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80323c8:	059a      	lsls	r2, r3, #22
 80323ca:	d4ef      	bmi.n	80323ac <__smakebuf_r+0x18>
 80323cc:	f023 0303 	bic.w	r3, r3, #3
 80323d0:	f043 0302 	orr.w	r3, r3, #2
 80323d4:	81a3      	strh	r3, [r4, #12]
 80323d6:	e7e3      	b.n	80323a0 <__smakebuf_r+0xc>
 80323d8:	89a3      	ldrh	r3, [r4, #12]
 80323da:	6020      	str	r0, [r4, #0]
 80323dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80323e0:	81a3      	strh	r3, [r4, #12]
 80323e2:	9b00      	ldr	r3, [sp, #0]
 80323e4:	6163      	str	r3, [r4, #20]
 80323e6:	9b01      	ldr	r3, [sp, #4]
 80323e8:	6120      	str	r0, [r4, #16]
 80323ea:	b15b      	cbz	r3, 8032404 <__smakebuf_r+0x70>
 80323ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80323f0:	4630      	mov	r0, r6
 80323f2:	f000 f81d 	bl	8032430 <_isatty_r>
 80323f6:	b128      	cbz	r0, 8032404 <__smakebuf_r+0x70>
 80323f8:	89a3      	ldrh	r3, [r4, #12]
 80323fa:	f023 0303 	bic.w	r3, r3, #3
 80323fe:	f043 0301 	orr.w	r3, r3, #1
 8032402:	81a3      	strh	r3, [r4, #12]
 8032404:	89a3      	ldrh	r3, [r4, #12]
 8032406:	431d      	orrs	r5, r3
 8032408:	81a5      	strh	r5, [r4, #12]
 803240a:	e7cf      	b.n	80323ac <__smakebuf_r+0x18>

0803240c <_fstat_r>:
 803240c:	b538      	push	{r3, r4, r5, lr}
 803240e:	4d07      	ldr	r5, [pc, #28]	; (803242c <_fstat_r+0x20>)
 8032410:	2300      	movs	r3, #0
 8032412:	4604      	mov	r4, r0
 8032414:	4608      	mov	r0, r1
 8032416:	4611      	mov	r1, r2
 8032418:	602b      	str	r3, [r5, #0]
 803241a:	f7f4 fff3 	bl	8027404 <_fstat>
 803241e:	1c43      	adds	r3, r0, #1
 8032420:	d102      	bne.n	8032428 <_fstat_r+0x1c>
 8032422:	682b      	ldr	r3, [r5, #0]
 8032424:	b103      	cbz	r3, 8032428 <_fstat_r+0x1c>
 8032426:	6023      	str	r3, [r4, #0]
 8032428:	bd38      	pop	{r3, r4, r5, pc}
 803242a:	bf00      	nop
 803242c:	2000874c 	.word	0x2000874c

08032430 <_isatty_r>:
 8032430:	b538      	push	{r3, r4, r5, lr}
 8032432:	4d06      	ldr	r5, [pc, #24]	; (803244c <_isatty_r+0x1c>)
 8032434:	2300      	movs	r3, #0
 8032436:	4604      	mov	r4, r0
 8032438:	4608      	mov	r0, r1
 803243a:	602b      	str	r3, [r5, #0]
 803243c:	f7f4 fff2 	bl	8027424 <_isatty>
 8032440:	1c43      	adds	r3, r0, #1
 8032442:	d102      	bne.n	803244a <_isatty_r+0x1a>
 8032444:	682b      	ldr	r3, [r5, #0]
 8032446:	b103      	cbz	r3, 803244a <_isatty_r+0x1a>
 8032448:	6023      	str	r3, [r4, #0]
 803244a:	bd38      	pop	{r3, r4, r5, pc}
 803244c:	2000874c 	.word	0x2000874c

08032450 <_sbrk_r>:
 8032450:	b538      	push	{r3, r4, r5, lr}
 8032452:	4d06      	ldr	r5, [pc, #24]	; (803246c <_sbrk_r+0x1c>)
 8032454:	2300      	movs	r3, #0
 8032456:	4604      	mov	r4, r0
 8032458:	4608      	mov	r0, r1
 803245a:	602b      	str	r3, [r5, #0]
 803245c:	f7f4 fffa 	bl	8027454 <_sbrk>
 8032460:	1c43      	adds	r3, r0, #1
 8032462:	d102      	bne.n	803246a <_sbrk_r+0x1a>
 8032464:	682b      	ldr	r3, [r5, #0]
 8032466:	b103      	cbz	r3, 803246a <_sbrk_r+0x1a>
 8032468:	6023      	str	r3, [r4, #0]
 803246a:	bd38      	pop	{r3, r4, r5, pc}
 803246c:	2000874c 	.word	0x2000874c

08032470 <_init>:
 8032470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8032472:	bf00      	nop
 8032474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032476:	bc08      	pop	{r3}
 8032478:	469e      	mov	lr, r3
 803247a:	4770      	bx	lr

0803247c <_fini>:
 803247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803247e:	bf00      	nop
 8032480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032482:	bc08      	pop	{r3}
 8032484:	469e      	mov	lr, r3
 8032486:	4770      	bx	lr
