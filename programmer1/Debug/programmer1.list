
programmer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc74  08022190  08022190  00002190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  08031e04  08031e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08032d70  08032d70  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  08032d70  08032d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032d78  08032d78  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032d78  08032d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032d7c  08032d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08032d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00008484  200002d8  200002d8  000202d8  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  2000875c  2000875c  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021c92  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000654e  00000000  00000000  00041fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bd0  00000000  00000000  00048528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014e0  00000000  00000000  0004a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029856  00000000  00000000  0004b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000286bc  00000000  00000000  00074e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7b49  00000000  00000000  0009d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000761c  00000000  00000000  00175034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08022190 <__do_global_dtors_aux>:
 8022190:	b510      	push	{r4, lr}
 8022192:	4c05      	ldr	r4, [pc, #20]	; (80221a8 <__do_global_dtors_aux+0x18>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	b933      	cbnz	r3, 80221a6 <__do_global_dtors_aux+0x16>
 8022198:	4b04      	ldr	r3, [pc, #16]	; (80221ac <__do_global_dtors_aux+0x1c>)
 802219a:	b113      	cbz	r3, 80221a2 <__do_global_dtors_aux+0x12>
 802219c:	4804      	ldr	r0, [pc, #16]	; (80221b0 <__do_global_dtors_aux+0x20>)
 802219e:	f3af 8000 	nop.w
 80221a2:	2301      	movs	r3, #1
 80221a4:	7023      	strb	r3, [r4, #0]
 80221a6:	bd10      	pop	{r4, pc}
 80221a8:	200002d8 	.word	0x200002d8
 80221ac:	00000000 	.word	0x00000000
 80221b0:	08031dec 	.word	0x08031dec

080221b4 <frame_dummy>:
 80221b4:	b508      	push	{r3, lr}
 80221b6:	4b03      	ldr	r3, [pc, #12]	; (80221c4 <frame_dummy+0x10>)
 80221b8:	b11b      	cbz	r3, 80221c2 <frame_dummy+0xe>
 80221ba:	4903      	ldr	r1, [pc, #12]	; (80221c8 <frame_dummy+0x14>)
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <frame_dummy+0x18>)
 80221be:	f3af 8000 	nop.w
 80221c2:	bd08      	pop	{r3, pc}
 80221c4:	00000000 	.word	0x00000000
 80221c8:	200002dc 	.word	0x200002dc
 80221cc:	08031dec 	.word	0x08031dec

080221d0 <memchr>:
 80221d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80221d4:	2a10      	cmp	r2, #16
 80221d6:	db2b      	blt.n	8022230 <memchr+0x60>
 80221d8:	f010 0f07 	tst.w	r0, #7
 80221dc:	d008      	beq.n	80221f0 <memchr+0x20>
 80221de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80221e2:	3a01      	subs	r2, #1
 80221e4:	428b      	cmp	r3, r1
 80221e6:	d02d      	beq.n	8022244 <memchr+0x74>
 80221e8:	f010 0f07 	tst.w	r0, #7
 80221ec:	b342      	cbz	r2, 8022240 <memchr+0x70>
 80221ee:	d1f6      	bne.n	80221de <memchr+0xe>
 80221f0:	b4f0      	push	{r4, r5, r6, r7}
 80221f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80221f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80221fa:	f022 0407 	bic.w	r4, r2, #7
 80221fe:	f07f 0700 	mvns.w	r7, #0
 8022202:	2300      	movs	r3, #0
 8022204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022208:	3c08      	subs	r4, #8
 802220a:	ea85 0501 	eor.w	r5, r5, r1
 802220e:	ea86 0601 	eor.w	r6, r6, r1
 8022212:	fa85 f547 	uadd8	r5, r5, r7
 8022216:	faa3 f587 	sel	r5, r3, r7
 802221a:	fa86 f647 	uadd8	r6, r6, r7
 802221e:	faa5 f687 	sel	r6, r5, r7
 8022222:	b98e      	cbnz	r6, 8022248 <memchr+0x78>
 8022224:	d1ee      	bne.n	8022204 <memchr+0x34>
 8022226:	bcf0      	pop	{r4, r5, r6, r7}
 8022228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802222c:	f002 0207 	and.w	r2, r2, #7
 8022230:	b132      	cbz	r2, 8022240 <memchr+0x70>
 8022232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022236:	3a01      	subs	r2, #1
 8022238:	ea83 0301 	eor.w	r3, r3, r1
 802223c:	b113      	cbz	r3, 8022244 <memchr+0x74>
 802223e:	d1f8      	bne.n	8022232 <memchr+0x62>
 8022240:	2000      	movs	r0, #0
 8022242:	4770      	bx	lr
 8022244:	3801      	subs	r0, #1
 8022246:	4770      	bx	lr
 8022248:	2d00      	cmp	r5, #0
 802224a:	bf06      	itte	eq
 802224c:	4635      	moveq	r5, r6
 802224e:	3803      	subeq	r0, #3
 8022250:	3807      	subne	r0, #7
 8022252:	f015 0f01 	tst.w	r5, #1
 8022256:	d107      	bne.n	8022268 <memchr+0x98>
 8022258:	3001      	adds	r0, #1
 802225a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802225e:	bf02      	ittt	eq
 8022260:	3001      	addeq	r0, #1
 8022262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8022266:	3001      	addeq	r0, #1
 8022268:	bcf0      	pop	{r4, r5, r6, r7}
 802226a:	3801      	subs	r0, #1
 802226c:	4770      	bx	lr
 802226e:	bf00      	nop

08022270 <__aeabi_uldivmod>:
 8022270:	b953      	cbnz	r3, 8022288 <__aeabi_uldivmod+0x18>
 8022272:	b94a      	cbnz	r2, 8022288 <__aeabi_uldivmod+0x18>
 8022274:	2900      	cmp	r1, #0
 8022276:	bf08      	it	eq
 8022278:	2800      	cmpeq	r0, #0
 802227a:	bf1c      	itt	ne
 802227c:	f04f 31ff 	movne.w	r1, #4294967295
 8022280:	f04f 30ff 	movne.w	r0, #4294967295
 8022284:	f000 b970 	b.w	8022568 <__aeabi_idiv0>
 8022288:	f1ad 0c08 	sub.w	ip, sp, #8
 802228c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022290:	f000 f806 	bl	80222a0 <__udivmoddi4>
 8022294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802229c:	b004      	add	sp, #16
 802229e:	4770      	bx	lr

080222a0 <__udivmoddi4>:
 80222a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222a4:	9e08      	ldr	r6, [sp, #32]
 80222a6:	460d      	mov	r5, r1
 80222a8:	4604      	mov	r4, r0
 80222aa:	460f      	mov	r7, r1
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d14a      	bne.n	8022346 <__udivmoddi4+0xa6>
 80222b0:	428a      	cmp	r2, r1
 80222b2:	4694      	mov	ip, r2
 80222b4:	d965      	bls.n	8022382 <__udivmoddi4+0xe2>
 80222b6:	fab2 f382 	clz	r3, r2
 80222ba:	b143      	cbz	r3, 80222ce <__udivmoddi4+0x2e>
 80222bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80222c0:	f1c3 0220 	rsb	r2, r3, #32
 80222c4:	409f      	lsls	r7, r3
 80222c6:	fa20 f202 	lsr.w	r2, r0, r2
 80222ca:	4317      	orrs	r7, r2
 80222cc:	409c      	lsls	r4, r3
 80222ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80222d2:	fa1f f58c 	uxth.w	r5, ip
 80222d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80222da:	0c22      	lsrs	r2, r4, #16
 80222dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80222e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80222e4:	fb01 f005 	mul.w	r0, r1, r5
 80222e8:	4290      	cmp	r0, r2
 80222ea:	d90a      	bls.n	8022302 <__udivmoddi4+0x62>
 80222ec:	eb1c 0202 	adds.w	r2, ip, r2
 80222f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80222f4:	f080 811c 	bcs.w	8022530 <__udivmoddi4+0x290>
 80222f8:	4290      	cmp	r0, r2
 80222fa:	f240 8119 	bls.w	8022530 <__udivmoddi4+0x290>
 80222fe:	3902      	subs	r1, #2
 8022300:	4462      	add	r2, ip
 8022302:	1a12      	subs	r2, r2, r0
 8022304:	b2a4      	uxth	r4, r4
 8022306:	fbb2 f0fe 	udiv	r0, r2, lr
 802230a:	fb0e 2210 	mls	r2, lr, r0, r2
 802230e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022312:	fb00 f505 	mul.w	r5, r0, r5
 8022316:	42a5      	cmp	r5, r4
 8022318:	d90a      	bls.n	8022330 <__udivmoddi4+0x90>
 802231a:	eb1c 0404 	adds.w	r4, ip, r4
 802231e:	f100 32ff 	add.w	r2, r0, #4294967295
 8022322:	f080 8107 	bcs.w	8022534 <__udivmoddi4+0x294>
 8022326:	42a5      	cmp	r5, r4
 8022328:	f240 8104 	bls.w	8022534 <__udivmoddi4+0x294>
 802232c:	4464      	add	r4, ip
 802232e:	3802      	subs	r0, #2
 8022330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022334:	1b64      	subs	r4, r4, r5
 8022336:	2100      	movs	r1, #0
 8022338:	b11e      	cbz	r6, 8022342 <__udivmoddi4+0xa2>
 802233a:	40dc      	lsrs	r4, r3
 802233c:	2300      	movs	r3, #0
 802233e:	e9c6 4300 	strd	r4, r3, [r6]
 8022342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022346:	428b      	cmp	r3, r1
 8022348:	d908      	bls.n	802235c <__udivmoddi4+0xbc>
 802234a:	2e00      	cmp	r6, #0
 802234c:	f000 80ed 	beq.w	802252a <__udivmoddi4+0x28a>
 8022350:	2100      	movs	r1, #0
 8022352:	e9c6 0500 	strd	r0, r5, [r6]
 8022356:	4608      	mov	r0, r1
 8022358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802235c:	fab3 f183 	clz	r1, r3
 8022360:	2900      	cmp	r1, #0
 8022362:	d149      	bne.n	80223f8 <__udivmoddi4+0x158>
 8022364:	42ab      	cmp	r3, r5
 8022366:	d302      	bcc.n	802236e <__udivmoddi4+0xce>
 8022368:	4282      	cmp	r2, r0
 802236a:	f200 80f8 	bhi.w	802255e <__udivmoddi4+0x2be>
 802236e:	1a84      	subs	r4, r0, r2
 8022370:	eb65 0203 	sbc.w	r2, r5, r3
 8022374:	2001      	movs	r0, #1
 8022376:	4617      	mov	r7, r2
 8022378:	2e00      	cmp	r6, #0
 802237a:	d0e2      	beq.n	8022342 <__udivmoddi4+0xa2>
 802237c:	e9c6 4700 	strd	r4, r7, [r6]
 8022380:	e7df      	b.n	8022342 <__udivmoddi4+0xa2>
 8022382:	b902      	cbnz	r2, 8022386 <__udivmoddi4+0xe6>
 8022384:	deff      	udf	#255	; 0xff
 8022386:	fab2 f382 	clz	r3, r2
 802238a:	2b00      	cmp	r3, #0
 802238c:	f040 8090 	bne.w	80224b0 <__udivmoddi4+0x210>
 8022390:	1a8a      	subs	r2, r1, r2
 8022392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022396:	fa1f fe8c 	uxth.w	lr, ip
 802239a:	2101      	movs	r1, #1
 802239c:	fbb2 f5f7 	udiv	r5, r2, r7
 80223a0:	fb07 2015 	mls	r0, r7, r5, r2
 80223a4:	0c22      	lsrs	r2, r4, #16
 80223a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80223aa:	fb0e f005 	mul.w	r0, lr, r5
 80223ae:	4290      	cmp	r0, r2
 80223b0:	d908      	bls.n	80223c4 <__udivmoddi4+0x124>
 80223b2:	eb1c 0202 	adds.w	r2, ip, r2
 80223b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80223ba:	d202      	bcs.n	80223c2 <__udivmoddi4+0x122>
 80223bc:	4290      	cmp	r0, r2
 80223be:	f200 80cb 	bhi.w	8022558 <__udivmoddi4+0x2b8>
 80223c2:	4645      	mov	r5, r8
 80223c4:	1a12      	subs	r2, r2, r0
 80223c6:	b2a4      	uxth	r4, r4
 80223c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80223cc:	fb07 2210 	mls	r2, r7, r0, r2
 80223d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80223d4:	fb0e fe00 	mul.w	lr, lr, r0
 80223d8:	45a6      	cmp	lr, r4
 80223da:	d908      	bls.n	80223ee <__udivmoddi4+0x14e>
 80223dc:	eb1c 0404 	adds.w	r4, ip, r4
 80223e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80223e4:	d202      	bcs.n	80223ec <__udivmoddi4+0x14c>
 80223e6:	45a6      	cmp	lr, r4
 80223e8:	f200 80bb 	bhi.w	8022562 <__udivmoddi4+0x2c2>
 80223ec:	4610      	mov	r0, r2
 80223ee:	eba4 040e 	sub.w	r4, r4, lr
 80223f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80223f6:	e79f      	b.n	8022338 <__udivmoddi4+0x98>
 80223f8:	f1c1 0720 	rsb	r7, r1, #32
 80223fc:	408b      	lsls	r3, r1
 80223fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8022402:	ea4c 0c03 	orr.w	ip, ip, r3
 8022406:	fa05 f401 	lsl.w	r4, r5, r1
 802240a:	fa20 f307 	lsr.w	r3, r0, r7
 802240e:	40fd      	lsrs	r5, r7
 8022410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022414:	4323      	orrs	r3, r4
 8022416:	fbb5 f8f9 	udiv	r8, r5, r9
 802241a:	fa1f fe8c 	uxth.w	lr, ip
 802241e:	fb09 5518 	mls	r5, r9, r8, r5
 8022422:	0c1c      	lsrs	r4, r3, #16
 8022424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8022428:	fb08 f50e 	mul.w	r5, r8, lr
 802242c:	42a5      	cmp	r5, r4
 802242e:	fa02 f201 	lsl.w	r2, r2, r1
 8022432:	fa00 f001 	lsl.w	r0, r0, r1
 8022436:	d90b      	bls.n	8022450 <__udivmoddi4+0x1b0>
 8022438:	eb1c 0404 	adds.w	r4, ip, r4
 802243c:	f108 3aff 	add.w	sl, r8, #4294967295
 8022440:	f080 8088 	bcs.w	8022554 <__udivmoddi4+0x2b4>
 8022444:	42a5      	cmp	r5, r4
 8022446:	f240 8085 	bls.w	8022554 <__udivmoddi4+0x2b4>
 802244a:	f1a8 0802 	sub.w	r8, r8, #2
 802244e:	4464      	add	r4, ip
 8022450:	1b64      	subs	r4, r4, r5
 8022452:	b29d      	uxth	r5, r3
 8022454:	fbb4 f3f9 	udiv	r3, r4, r9
 8022458:	fb09 4413 	mls	r4, r9, r3, r4
 802245c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8022460:	fb03 fe0e 	mul.w	lr, r3, lr
 8022464:	45a6      	cmp	lr, r4
 8022466:	d908      	bls.n	802247a <__udivmoddi4+0x1da>
 8022468:	eb1c 0404 	adds.w	r4, ip, r4
 802246c:	f103 35ff 	add.w	r5, r3, #4294967295
 8022470:	d26c      	bcs.n	802254c <__udivmoddi4+0x2ac>
 8022472:	45a6      	cmp	lr, r4
 8022474:	d96a      	bls.n	802254c <__udivmoddi4+0x2ac>
 8022476:	3b02      	subs	r3, #2
 8022478:	4464      	add	r4, ip
 802247a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 802247e:	fba3 9502 	umull	r9, r5, r3, r2
 8022482:	eba4 040e 	sub.w	r4, r4, lr
 8022486:	42ac      	cmp	r4, r5
 8022488:	46c8      	mov	r8, r9
 802248a:	46ae      	mov	lr, r5
 802248c:	d356      	bcc.n	802253c <__udivmoddi4+0x29c>
 802248e:	d053      	beq.n	8022538 <__udivmoddi4+0x298>
 8022490:	b156      	cbz	r6, 80224a8 <__udivmoddi4+0x208>
 8022492:	ebb0 0208 	subs.w	r2, r0, r8
 8022496:	eb64 040e 	sbc.w	r4, r4, lr
 802249a:	fa04 f707 	lsl.w	r7, r4, r7
 802249e:	40ca      	lsrs	r2, r1
 80224a0:	40cc      	lsrs	r4, r1
 80224a2:	4317      	orrs	r7, r2
 80224a4:	e9c6 7400 	strd	r7, r4, [r6]
 80224a8:	4618      	mov	r0, r3
 80224aa:	2100      	movs	r1, #0
 80224ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224b0:	f1c3 0120 	rsb	r1, r3, #32
 80224b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80224b8:	fa20 f201 	lsr.w	r2, r0, r1
 80224bc:	fa25 f101 	lsr.w	r1, r5, r1
 80224c0:	409d      	lsls	r5, r3
 80224c2:	432a      	orrs	r2, r5
 80224c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80224c8:	fa1f fe8c 	uxth.w	lr, ip
 80224cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80224d0:	fb07 1510 	mls	r5, r7, r0, r1
 80224d4:	0c11      	lsrs	r1, r2, #16
 80224d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80224da:	fb00 f50e 	mul.w	r5, r0, lr
 80224de:	428d      	cmp	r5, r1
 80224e0:	fa04 f403 	lsl.w	r4, r4, r3
 80224e4:	d908      	bls.n	80224f8 <__udivmoddi4+0x258>
 80224e6:	eb1c 0101 	adds.w	r1, ip, r1
 80224ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80224ee:	d22f      	bcs.n	8022550 <__udivmoddi4+0x2b0>
 80224f0:	428d      	cmp	r5, r1
 80224f2:	d92d      	bls.n	8022550 <__udivmoddi4+0x2b0>
 80224f4:	3802      	subs	r0, #2
 80224f6:	4461      	add	r1, ip
 80224f8:	1b49      	subs	r1, r1, r5
 80224fa:	b292      	uxth	r2, r2
 80224fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8022500:	fb07 1115 	mls	r1, r7, r5, r1
 8022504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022508:	fb05 f10e 	mul.w	r1, r5, lr
 802250c:	4291      	cmp	r1, r2
 802250e:	d908      	bls.n	8022522 <__udivmoddi4+0x282>
 8022510:	eb1c 0202 	adds.w	r2, ip, r2
 8022514:	f105 38ff 	add.w	r8, r5, #4294967295
 8022518:	d216      	bcs.n	8022548 <__udivmoddi4+0x2a8>
 802251a:	4291      	cmp	r1, r2
 802251c:	d914      	bls.n	8022548 <__udivmoddi4+0x2a8>
 802251e:	3d02      	subs	r5, #2
 8022520:	4462      	add	r2, ip
 8022522:	1a52      	subs	r2, r2, r1
 8022524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8022528:	e738      	b.n	802239c <__udivmoddi4+0xfc>
 802252a:	4631      	mov	r1, r6
 802252c:	4630      	mov	r0, r6
 802252e:	e708      	b.n	8022342 <__udivmoddi4+0xa2>
 8022530:	4639      	mov	r1, r7
 8022532:	e6e6      	b.n	8022302 <__udivmoddi4+0x62>
 8022534:	4610      	mov	r0, r2
 8022536:	e6fb      	b.n	8022330 <__udivmoddi4+0x90>
 8022538:	4548      	cmp	r0, r9
 802253a:	d2a9      	bcs.n	8022490 <__udivmoddi4+0x1f0>
 802253c:	ebb9 0802 	subs.w	r8, r9, r2
 8022540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8022544:	3b01      	subs	r3, #1
 8022546:	e7a3      	b.n	8022490 <__udivmoddi4+0x1f0>
 8022548:	4645      	mov	r5, r8
 802254a:	e7ea      	b.n	8022522 <__udivmoddi4+0x282>
 802254c:	462b      	mov	r3, r5
 802254e:	e794      	b.n	802247a <__udivmoddi4+0x1da>
 8022550:	4640      	mov	r0, r8
 8022552:	e7d1      	b.n	80224f8 <__udivmoddi4+0x258>
 8022554:	46d0      	mov	r8, sl
 8022556:	e77b      	b.n	8022450 <__udivmoddi4+0x1b0>
 8022558:	3d02      	subs	r5, #2
 802255a:	4462      	add	r2, ip
 802255c:	e732      	b.n	80223c4 <__udivmoddi4+0x124>
 802255e:	4608      	mov	r0, r1
 8022560:	e70a      	b.n	8022378 <__udivmoddi4+0xd8>
 8022562:	4464      	add	r4, ip
 8022564:	3802      	subs	r0, #2
 8022566:	e742      	b.n	80223ee <__udivmoddi4+0x14e>

08022568 <__aeabi_idiv0>:
 8022568:	4770      	bx	lr
 802256a:	bf00      	nop

0802256c <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b084      	sub	sp, #16
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
 8022574:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8022576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802257a:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 802257c:	f000 f988 	bl	8022890 <CDC_IsPacketSent>
 8022580:	4603      	mov	r3, r0
 8022582:	2b00      	cmp	r3, #0
 8022584:	d117      	bne.n	80225b6 <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022586:	4816      	ldr	r0, [pc, #88]	; (80225e0 <cdc_send+0x74>)
 8022588:	f00e fdb8 	bl	80310fc <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 802258c:	bf00      	nop
 802258e:	f000 f97f 	bl	8022890 <CDC_IsPacketSent>
 8022592:	4603      	mov	r3, r0
 8022594:	2b00      	cmp	r3, #0
 8022596:	d105      	bne.n	80225a4 <cdc_send+0x38>
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	3b01      	subs	r3, #1
 802259c:	60fb      	str	r3, [r7, #12]
 802259e:	68fb      	ldr	r3, [r7, #12]
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d1f4      	bne.n	802258e <cdc_send+0x22>
        if (!timeout)
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d105      	bne.n	80225b6 <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 80225aa:	480e      	ldr	r0, [pc, #56]	; (80225e4 <cdc_send+0x78>)
 80225ac:	f00e fda6 	bl	80310fc <puts>
            return -1;                                          // 返回错误代码
 80225b0:	f04f 33ff 	mov.w	r3, #4294967295
 80225b4:	e00f      	b.n	80225d6 <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 80225b6:	683b      	ldr	r3, [r7, #0]
 80225b8:	b2db      	uxtb	r3, r3
 80225ba:	4619      	mov	r1, r3
 80225bc:	6878      	ldr	r0, [r7, #4]
 80225be:	f000 f941 	bl	8022844 <CDC_Send_DATA>
 80225c2:	4603      	mov	r3, r0
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d105      	bne.n	80225d4 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 80225c8:	4807      	ldr	r0, [pc, #28]	; (80225e8 <cdc_send+0x7c>)
 80225ca:	f00e fd97 	bl	80310fc <puts>
        return -1;                                              // 返回错误代码
 80225ce:	f04f 33ff 	mov.w	r3, #4294967295
 80225d2:	e000      	b.n	80225d6 <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 80225d4:	2300      	movs	r3, #0
}
 80225d6:	4618      	mov	r0, r3
 80225d8:	3710      	adds	r7, #16
 80225da:	46bd      	mov	sp, r7
 80225dc:	bd80      	pop	{r7, pc}
 80225de:	bf00      	nop
 80225e0:	08031e04 	.word	0x08031e04
 80225e4:	08031e20 	.word	0x08031e20
 80225e8:	08031e4c 	.word	0x08031e4c

080225ec <cdc_send_ready>:

static int cdc_send_ready()
{
 80225ec:	b580      	push	{r7, lr}
 80225ee:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80225f0:	f000 f94e 	bl	8022890 <CDC_IsPacketSent>
 80225f4:	4603      	mov	r3, r0
}
 80225f6:	4618      	mov	r0, r3
 80225f8:	bd80      	pop	{r7, pc}

080225fa <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80225fa:	b580      	push	{r7, lr}
 80225fc:	b082      	sub	sp, #8
 80225fe:	af00      	add	r7, sp, #0
 8022600:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f000 f82a 	bl	802265c <USB_Data_Peek>
 8022608:	4603      	mov	r3, r0
}
 802260a:	4618      	mov	r0, r3
 802260c:	3708      	adds	r7, #8
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}

08022612 <cdc_consume>:

static void cdc_consume()
{
 8022612:	b580      	push	{r7, lr}
 8022614:	b082      	sub	sp, #8
 8022616:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022618:	1d3b      	adds	r3, r7, #4
 802261a:	4618      	mov	r0, r3
 802261c:	f000 f84e 	bl	80226bc <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022620:	f000 f8ac 	bl	802277c <USB_DataRx_Sched>
}
 8022624:	bf00      	nop
 8022626:	3708      	adds	r7, #8
 8022628:	46bd      	mov	sp, r7
 802262a:	bd80      	pop	{r7, pc}

0802262c <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 802262c:	b580      	push	{r7, lr}
 802262e:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022630:	4803      	ldr	r0, [pc, #12]	; (8022640 <cdc_init+0x14>)
 8022632:	f003 fc6f 	bl	8025f14 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022636:	f000 f921 	bl	802287c <CDC_Receive_DATA>
}
 802263a:	bf00      	nop
 802263c:	bd80      	pop	{r7, pc}
 802263e:	bf00      	nop
 8022640:	20000000 	.word	0x20000000

08022644 <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 8022644:	b480      	push	{r7}
 8022646:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8022648:	4b03      	ldr	r3, [pc, #12]	; (8022658 <EP1_IN_Callback+0x14>)
 802264a:	2201      	movs	r2, #1
 802264c:	601a      	str	r2, [r3, #0]
}
 802264e:	bf00      	nop
 8022650:	46bd      	mov	sp, r7
 8022652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022656:	4770      	bx	lr
 8022658:	20000014 	.word	0x20000014

0802265c <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 802265c:	b480      	push	{r7}
 802265e:	b083      	sub	sp, #12
 8022660:	af00      	add	r7, sp, #0
 8022662:	6078      	str	r0, [r7, #4]
  if (!size)
 8022664:	4b12      	ldr	r3, [pc, #72]	; (80226b0 <USB_Data_Peek+0x54>)
 8022666:	781b      	ldrb	r3, [r3, #0]
 8022668:	b2db      	uxtb	r3, r3
 802266a:	2b00      	cmp	r3, #0
 802266c:	d101      	bne.n	8022672 <USB_Data_Peek+0x16>
    return 0;
 802266e:	2300      	movs	r3, #0
 8022670:	e017      	b.n	80226a2 <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 8022672:	4b10      	ldr	r3, [pc, #64]	; (80226b4 <USB_Data_Peek+0x58>)
 8022674:	781b      	ldrb	r3, [r3, #0]
 8022676:	b2db      	uxtb	r3, r3
 8022678:	461a      	mov	r2, r3
 802267a:	4613      	mov	r3, r2
 802267c:	011b      	lsls	r3, r3, #4
 802267e:	4413      	add	r3, r2
 8022680:	009b      	lsls	r3, r3, #2
 8022682:	4a0d      	ldr	r2, [pc, #52]	; (80226b8 <USB_Data_Peek+0x5c>)
 8022684:	441a      	add	r2, r3
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 802268a:	4b0a      	ldr	r3, [pc, #40]	; (80226b4 <USB_Data_Peek+0x58>)
 802268c:	781b      	ldrb	r3, [r3, #0]
 802268e:	b2db      	uxtb	r3, r3
 8022690:	4619      	mov	r1, r3
 8022692:	4a09      	ldr	r2, [pc, #36]	; (80226b8 <USB_Data_Peek+0x5c>)
 8022694:	460b      	mov	r3, r1
 8022696:	011b      	lsls	r3, r3, #4
 8022698:	440b      	add	r3, r1
 802269a:	009b      	lsls	r3, r3, #2
 802269c:	4413      	add	r3, r2
 802269e:	3340      	adds	r3, #64	; 0x40
 80226a0:	681b      	ldr	r3, [r3, #0]
}
 80226a2:	4618      	mov	r0, r3
 80226a4:	370c      	adds	r7, #12
 80226a6:	46bd      	mov	sp, r7
 80226a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226ac:	4770      	bx	lr
 80226ae:	bf00      	nop
 80226b0:	20000c01 	.word	0x20000c01
 80226b4:	20000c00 	.word	0x20000c00
 80226b8:	200002f8 	.word	0x200002f8

080226bc <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 80226bc:	b480      	push	{r7}
 80226be:	b085      	sub	sp, #20
 80226c0:	af00      	add	r7, sp, #0
 80226c2:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 80226c4:	4b21      	ldr	r3, [pc, #132]	; (802274c <USB_Data_Get+0x90>)
 80226c6:	781b      	ldrb	r3, [r3, #0]
 80226c8:	b2db      	uxtb	r3, r3
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d101      	bne.n	80226d2 <USB_Data_Get+0x16>
    return 0;
 80226ce:	2300      	movs	r3, #0
 80226d0:	e036      	b.n	8022740 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 80226d2:	4b1f      	ldr	r3, [pc, #124]	; (8022750 <USB_Data_Get+0x94>)
 80226d4:	781b      	ldrb	r3, [r3, #0]
 80226d6:	b2db      	uxtb	r3, r3
 80226d8:	461a      	mov	r2, r3
 80226da:	4613      	mov	r3, r2
 80226dc:	011b      	lsls	r3, r3, #4
 80226de:	4413      	add	r3, r2
 80226e0:	009b      	lsls	r3, r3, #2
 80226e2:	4a1c      	ldr	r2, [pc, #112]	; (8022754 <USB_Data_Get+0x98>)
 80226e4:	441a      	add	r2, r3
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 80226ea:	4b19      	ldr	r3, [pc, #100]	; (8022750 <USB_Data_Get+0x94>)
 80226ec:	781b      	ldrb	r3, [r3, #0]
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	4619      	mov	r1, r3
 80226f2:	4a18      	ldr	r2, [pc, #96]	; (8022754 <USB_Data_Get+0x98>)
 80226f4:	460b      	mov	r3, r1
 80226f6:	011b      	lsls	r3, r3, #4
 80226f8:	440b      	add	r3, r1
 80226fa:	009b      	lsls	r3, r3, #2
 80226fc:	4413      	add	r3, r2
 80226fe:	3340      	adds	r3, #64	; 0x40
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 8022704:	4b12      	ldr	r3, [pc, #72]	; (8022750 <USB_Data_Get+0x94>)
 8022706:	781b      	ldrb	r3, [r3, #0]
 8022708:	b2db      	uxtb	r3, r3
 802270a:	1c5a      	adds	r2, r3, #1
 802270c:	4b12      	ldr	r3, [pc, #72]	; (8022758 <USB_Data_Get+0x9c>)
 802270e:	fb83 1302 	smull	r1, r3, r3, r2
 8022712:	1119      	asrs	r1, r3, #4
 8022714:	17d3      	asrs	r3, r2, #31
 8022716:	1ac9      	subs	r1, r1, r3
 8022718:	460b      	mov	r3, r1
 802271a:	011b      	lsls	r3, r3, #4
 802271c:	440b      	add	r3, r1
 802271e:	005b      	lsls	r3, r3, #1
 8022720:	1ad1      	subs	r1, r2, r3
 8022722:	b2ca      	uxtb	r2, r1
 8022724:	4b0a      	ldr	r3, [pc, #40]	; (8022750 <USB_Data_Get+0x94>)
 8022726:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022728:	b672      	cpsid	i
}
 802272a:	bf00      	nop
  __disable_irq();
  size--;
 802272c:	4b07      	ldr	r3, [pc, #28]	; (802274c <USB_Data_Get+0x90>)
 802272e:	781b      	ldrb	r3, [r3, #0]
 8022730:	b2db      	uxtb	r3, r3
 8022732:	3b01      	subs	r3, #1
 8022734:	b2da      	uxtb	r2, r3
 8022736:	4b05      	ldr	r3, [pc, #20]	; (802274c <USB_Data_Get+0x90>)
 8022738:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 802273a:	b662      	cpsie	i
}
 802273c:	bf00      	nop
  __enable_irq();

  return len;
 802273e:	68fb      	ldr	r3, [r7, #12]
}
 8022740:	4618      	mov	r0, r3
 8022742:	3714      	adds	r7, #20
 8022744:	46bd      	mov	sp, r7
 8022746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274a:	4770      	bx	lr
 802274c:	20000c01 	.word	0x20000c01
 8022750:	20000c00 	.word	0x20000c00
 8022754:	200002f8 	.word	0x200002f8
 8022758:	78787879 	.word	0x78787879

0802275c <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 802275c:	b580      	push	{r7, lr}
 802275e:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8022760:	4b04      	ldr	r3, [pc, #16]	; (8022774 <USB_DataRx_Sched_Internal+0x18>)
 8022762:	781b      	ldrb	r3, [r3, #0]
 8022764:	b2db      	uxtb	r3, r3
 8022766:	2b21      	cmp	r3, #33	; 0x21
 8022768:	d802      	bhi.n	8022770 <USB_DataRx_Sched_Internal+0x14>
	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 802276a:	4803      	ldr	r0, [pc, #12]	; (8022778 <USB_DataRx_Sched_Internal+0x1c>)
 802276c:	f00d fc13 	bl	802ff96 <USBD_CtlReceiveStatus>
}
 8022770:	bf00      	nop
 8022772:	bd80      	pop	{r7, pc}
 8022774:	20000c01 	.word	0x20000c01
 8022778:	20005220 	.word	0x20005220

0802277c <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 802277c:	b580      	push	{r7, lr}
 802277e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8022780:	b672      	cpsid	i
}
 8022782:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 8022784:	f7ff ffea 	bl	802275c <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 8022788:	b662      	cpsie	i
}
 802278a:	bf00      	nop
  __enable_irq();
}
 802278c:	bf00      	nop
 802278e:	bd80      	pop	{r7, pc}

08022790 <EP3_OUT_Callback>:

// CDC接收数据回调函数
/*void EP3_OUT_Callback(void)*/
void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b082      	sub	sp, #8
 8022794:	af00      	add	r7, sp, #0
 8022796:	6078      	str	r0, [r7, #4]
 8022798:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
 802279a:	2101      	movs	r1, #1
 802279c:	4823      	ldr	r0, [pc, #140]	; (802282c <EP3_OUT_Callback+0x9c>)
 802279e:	f00d fc0d 	bl	802ffbc <USBD_GetRxCount>
 80227a2:	4603      	mov	r3, r0
 80227a4:	4a22      	ldr	r2, [pc, #136]	; (8022830 <EP3_OUT_Callback+0xa0>)
 80227a6:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 80227a8:	4b22      	ldr	r3, [pc, #136]	; (8022834 <EP3_OUT_Callback+0xa4>)
 80227aa:	781b      	ldrb	r3, [r3, #0]
 80227ac:	b2db      	uxtb	r3, r3
 80227ae:	2b21      	cmp	r3, #33	; 0x21
 80227b0:	d838      	bhi.n	8022824 <EP3_OUT_Callback+0x94>
    {
        // 循环缓冲区索引移动
        tail = (tail + 1) % CIRC_BUF_SIZE;
 80227b2:	4b21      	ldr	r3, [pc, #132]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227b4:	781b      	ldrb	r3, [r3, #0]
 80227b6:	b2db      	uxtb	r3, r3
 80227b8:	1c5a      	adds	r2, r3, #1
 80227ba:	4b20      	ldr	r3, [pc, #128]	; (802283c <EP3_OUT_Callback+0xac>)
 80227bc:	fb83 1302 	smull	r1, r3, r3, r2
 80227c0:	1119      	asrs	r1, r3, #4
 80227c2:	17d3      	asrs	r3, r2, #31
 80227c4:	1ac9      	subs	r1, r1, r3
 80227c6:	460b      	mov	r3, r1
 80227c8:	011b      	lsls	r3, r3, #4
 80227ca:	440b      	add	r3, r1
 80227cc:	005b      	lsls	r3, r3, #1
 80227ce:	1ad1      	subs	r1, r2, r3
 80227d0:	b2ca      	uxtb	r2, r1
 80227d2:	4b19      	ldr	r3, [pc, #100]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227d4:	701a      	strb	r2, [r3, #0]
        // 将接收到的数据复制到循环缓冲区
        // 将数据从 Buf 复制到 circ_buf[tail].pbuf
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 80227d6:	4b18      	ldr	r3, [pc, #96]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227d8:	781b      	ldrb	r3, [r3, #0]
 80227da:	b2db      	uxtb	r3, r3
 80227dc:	461a      	mov	r2, r3
 80227de:	4613      	mov	r3, r2
 80227e0:	011b      	lsls	r3, r3, #4
 80227e2:	4413      	add	r3, r2
 80227e4:	009b      	lsls	r3, r3, #2
 80227e6:	4a16      	ldr	r2, [pc, #88]	; (8022840 <EP3_OUT_Callback+0xb0>)
 80227e8:	4413      	add	r3, r2
 80227ea:	4a11      	ldr	r2, [pc, #68]	; (8022830 <EP3_OUT_Callback+0xa0>)
 80227ec:	6812      	ldr	r2, [r2, #0]
 80227ee:	6879      	ldr	r1, [r7, #4]
 80227f0:	4618      	mov	r0, r3
 80227f2:	f00e fdde 	bl	80313b2 <memcpy>
        circ_buf[tail].len = Receive_length;
 80227f6:	4b10      	ldr	r3, [pc, #64]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227f8:	781b      	ldrb	r3, [r3, #0]
 80227fa:	b2db      	uxtb	r3, r3
 80227fc:	4618      	mov	r0, r3
 80227fe:	4b0c      	ldr	r3, [pc, #48]	; (8022830 <EP3_OUT_Callback+0xa0>)
 8022800:	681a      	ldr	r2, [r3, #0]
 8022802:	490f      	ldr	r1, [pc, #60]	; (8022840 <EP3_OUT_Callback+0xb0>)
 8022804:	4603      	mov	r3, r0
 8022806:	011b      	lsls	r3, r3, #4
 8022808:	4403      	add	r3, r0
 802280a:	009b      	lsls	r3, r3, #2
 802280c:	440b      	add	r3, r1
 802280e:	3340      	adds	r3, #64	; 0x40
 8022810:	601a      	str	r2, [r3, #0]
        size++;
 8022812:	4b08      	ldr	r3, [pc, #32]	; (8022834 <EP3_OUT_Callback+0xa4>)
 8022814:	781b      	ldrb	r3, [r3, #0]
 8022816:	b2db      	uxtb	r3, r3
 8022818:	3301      	adds	r3, #1
 802281a:	b2da      	uxtb	r2, r3
 802281c:	4b05      	ldr	r3, [pc, #20]	; (8022834 <EP3_OUT_Callback+0xa4>)
 802281e:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8022820:	f7ff ff9c 	bl	802275c <USB_DataRx_Sched_Internal>
    }
}
 8022824:	bf00      	nop
 8022826:	3708      	adds	r7, #8
 8022828:	46bd      	mov	sp, r7
 802282a:	bd80      	pop	{r7, pc}
 802282c:	20005220 	.word	0x20005220
 8022830:	200002f4 	.word	0x200002f4
 8022834:	20000c01 	.word	0x20000c01
 8022838:	20000010 	.word	0x20000010
 802283c:	78787879 	.word	0x78787879
 8022840:	200002f8 	.word	0x200002f8

08022844 <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 8022844:	b580      	push	{r7, lr}
 8022846:	b082      	sub	sp, #8
 8022848:	af00      	add	r7, sp, #0
 802284a:	6078      	str	r0, [r7, #4]
 802284c:	460b      	mov	r3, r1
 802284e:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= VIRTUAL_COM_PORT_DATA_SIZE)
 8022850:	78fb      	ldrb	r3, [r7, #3]
 8022852:	2b40      	cmp	r3, #64	; 0x40
 8022854:	d80a      	bhi.n	802286c <CDC_Send_DATA+0x28>
  {
	  packet_sent = 0;
 8022856:	4b08      	ldr	r3, [pc, #32]	; (8022878 <CDC_Send_DATA+0x34>)
 8022858:	2200      	movs	r2, #0
 802285a:	601a      	str	r2, [r3, #0]
//      memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
      CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
 802285c:	78fb      	ldrb	r3, [r7, #3]
 802285e:	b29b      	uxth	r3, r3
 8022860:	4619      	mov	r1, r3
 8022862:	6878      	ldr	r0, [r7, #4]
 8022864:	f00d fd48 	bl	80302f8 <CDC_Transmit_HS>
  }
  else
  {
    return 0;
  }
  return 1;
 8022868:	2301      	movs	r3, #1
 802286a:	e000      	b.n	802286e <CDC_Send_DATA+0x2a>
    return 0;
 802286c:	2300      	movs	r3, #0
}
 802286e:	4618      	mov	r0, r3
 8022870:	3708      	adds	r7, #8
 8022872:	46bd      	mov	sp, r7
 8022874:	bd80      	pop	{r7, pc}
 8022876:	bf00      	nop
 8022878:	20000014 	.word	0x20000014

0802287c <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 802287c:	b580      	push	{r7, lr}
 802287e:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 8022880:	4802      	ldr	r0, [pc, #8]	; (802288c <CDC_Receive_DATA+0x10>)
 8022882:	f00d fb88 	bl	802ff96 <USBD_CtlReceiveStatus>
  return 1 ;
 8022886:	2301      	movs	r3, #1
}
 8022888:	4618      	mov	r0, r3
 802288a:	bd80      	pop	{r7, pc}
 802288c:	20005220 	.word	0x20005220

08022890 <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 8022890:	b480      	push	{r7}
 8022892:	af00      	add	r7, sp, #0
  return packet_sent;
 8022894:	4b03      	ldr	r3, [pc, #12]	; (80228a4 <CDC_IsPacketSent+0x14>)
 8022896:	681b      	ldr	r3, [r3, #0]
}
 8022898:	4618      	mov	r0, r3
 802289a:	46bd      	mov	sp, r7
 802289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228a0:	4770      	bx	lr
 80228a2:	bf00      	nop
 80228a4:	20000014 	.word	0x20000014

080228a8 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 80228a8:	b480      	push	{r7}
 80228aa:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 80228ac:	4b06      	ldr	r3, [pc, #24]	; (80228c8 <is_external_clock_avail+0x20>)
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	bf14      	ite	ne
 80228b8:	2301      	movne	r3, #1
 80228ba:	2300      	moveq	r3, #0
 80228bc:	b2db      	uxtb	r3, r3
}
 80228be:	4618      	mov	r0, r3
 80228c0:	46bd      	mov	sp, r7
 80228c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c6:	4770      	bx	lr
 80228c8:	40023800 	.word	0x40023800

080228cc <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 80228cc:	b580      	push	{r7, lr}
 80228ce:	b08a      	sub	sp, #40	; 0x28
 80228d0:	af00      	add	r7, sp, #0
 80228d2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 80228d4:	f005 f9fc 	bl	8027cd0 <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80228d8:	2300      	movs	r3, #0
 80228da:	613b      	str	r3, [r7, #16]
    erase_init.Sector = page_addr; // 选择要擦除的扇区，可以根据您的需求更改
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	61bb      	str	r3, [r7, #24]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 80228e0:	2301      	movs	r3, #1
 80228e2:	61fb      	str	r3, [r7, #28]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 80228e4:	2302      	movs	r3, #2
 80228e6:	623b      	str	r3, [r7, #32]
    uint32_t PageError = 0;
 80228e8:	2300      	movs	r3, #0
 80228ea:	60fb      	str	r3, [r7, #12]

    status = HAL_FLASHEx_Erase(&erase_init, &PageError); // 擦除指定页
 80228ec:	f107 020c 	add.w	r2, r7, #12
 80228f0:	f107 0310 	add.w	r3, r7, #16
 80228f4:	4611      	mov	r1, r2
 80228f6:	4618      	mov	r0, r3
 80228f8:	f005 fb4c 	bl	8027f94 <HAL_FLASHEx_Erase>
 80228fc:	4603      	mov	r3, r0
 80228fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 8022902:	f005 fa07 	bl	8027d14 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 8022906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802290a:	2b00      	cmp	r3, #0
 802290c:	d002      	beq.n	8022914 <flash_page_erase+0x48>
 802290e:	f04f 33ff 	mov.w	r3, #4294967295
 8022912:	e000      	b.n	8022916 <flash_page_erase+0x4a>
 8022914:	2300      	movs	r3, #0
}
 8022916:	4618      	mov	r0, r3
 8022918:	3728      	adds	r7, #40	; 0x28
 802291a:	46bd      	mov	sp, r7
 802291c:	bd80      	pop	{r7, pc}

0802291e <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 802291e:	b5b0      	push	{r4, r5, r7, lr}
 8022920:	b088      	sub	sp, #32
 8022922:	af00      	add	r7, sp, #0
 8022924:	60f8      	str	r0, [r7, #12]
 8022926:	60b9      	str	r1, [r7, #8]
 8022928:	607a      	str	r2, [r7, #4]
    int ret = -1;
 802292a:	f04f 33ff 	mov.w	r3, #4294967295
 802292e:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8022930:	f005 f9ce 	bl	8027cd0 <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 8022934:	2300      	movs	r3, #0
 8022936:	61bb      	str	r3, [r7, #24]
 8022938:	e017      	b.n	802296a <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 802293a:	68ba      	ldr	r2, [r7, #8]
 802293c:	69bb      	ldr	r3, [r7, #24]
 802293e:	4413      	add	r3, r2
 8022940:	681b      	ldr	r3, [r3, #0]
 8022942:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 8022944:	697b      	ldr	r3, [r7, #20]
 8022946:	2200      	movs	r2, #0
 8022948:	461c      	mov	r4, r3
 802294a:	4615      	mov	r5, r2
 802294c:	4622      	mov	r2, r4
 802294e:	462b      	mov	r3, r5
 8022950:	68f9      	ldr	r1, [r7, #12]
 8022952:	2002      	movs	r0, #2
 8022954:	f005 f8b4 	bl	8027ac0 <HAL_FLASH_Program>
 8022958:	4603      	mov	r3, r0
 802295a:	2b00      	cmp	r3, #0
 802295c:	d10c      	bne.n	8022978 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 802295e:	68fb      	ldr	r3, [r7, #12]
 8022960:	3304      	adds	r3, #4
 8022962:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 8022964:	69bb      	ldr	r3, [r7, #24]
 8022966:	3304      	adds	r3, #4
 8022968:	61bb      	str	r3, [r7, #24]
 802296a:	69ba      	ldr	r2, [r7, #24]
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	429a      	cmp	r2, r3
 8022970:	d3e3      	bcc.n	802293a <flash_write+0x1c>
    }

    ret = data_len;
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	61fb      	str	r3, [r7, #28]
 8022976:	e000      	b.n	802297a <flash_write+0x5c>
            goto Exit;
 8022978:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 802297a:	f005 f9cb 	bl	8027d14 <HAL_FLASH_Lock>

    return ret;
 802297e:	69fb      	ldr	r3, [r7, #28]
}
 8022980:	4618      	mov	r0, r3
 8022982:	3720      	adds	r7, #32
 8022984:	46bd      	mov	sp, r7
 8022986:	bdb0      	pop	{r4, r5, r7, pc}

08022988 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8022988:	b480      	push	{r7}
 802298a:	b087      	sub	sp, #28
 802298c:	af00      	add	r7, sp, #0
 802298e:	60f8      	str	r0, [r7, #12]
 8022990:	60b9      	str	r1, [r7, #8]
 8022992:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 8022994:	2300      	movs	r3, #0
 8022996:	617b      	str	r3, [r7, #20]
 8022998:	e00c      	b.n	80229b4 <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 802299a:	68fa      	ldr	r2, [r7, #12]
 802299c:	697b      	ldr	r3, [r7, #20]
 802299e:	4413      	add	r3, r2
 80229a0:	4619      	mov	r1, r3
 80229a2:	68ba      	ldr	r2, [r7, #8]
 80229a4:	697b      	ldr	r3, [r7, #20]
 80229a6:	4413      	add	r3, r2
 80229a8:	780a      	ldrb	r2, [r1, #0]
 80229aa:	b2d2      	uxtb	r2, r2
 80229ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 80229ae:	697b      	ldr	r3, [r7, #20]
 80229b0:	3301      	adds	r3, #1
 80229b2:	617b      	str	r3, [r7, #20]
 80229b4:	697a      	ldr	r2, [r7, #20]
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	429a      	cmp	r2, r3
 80229ba:	d3ee      	bcc.n	802299a <flash_read+0x12>
    }

    return i;
 80229bc:	697b      	ldr	r3, [r7, #20]
}
 80229be:	4618      	mov	r0, r3
 80229c0:	371c      	adds	r7, #28
 80229c2:	46bd      	mov	sp, r7
 80229c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c8:	4770      	bx	lr
	...

080229cc <HAL_FSMC_MspInit>:
  /* USER CODE END FSMC_Init 2 */
}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b086      	sub	sp, #24
 80229d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80229d2:	1d3b      	adds	r3, r7, #4
 80229d4:	2200      	movs	r2, #0
 80229d6:	601a      	str	r2, [r3, #0]
 80229d8:	605a      	str	r2, [r3, #4]
 80229da:	609a      	str	r2, [r3, #8]
 80229dc:	60da      	str	r2, [r3, #12]
 80229de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80229e0:	4b20      	ldr	r3, [pc, #128]	; (8022a64 <HAL_FSMC_MspInit+0x98>)
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	2b00      	cmp	r3, #0
 80229e6:	d139      	bne.n	8022a5c <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80229e8:	4b1e      	ldr	r3, [pc, #120]	; (8022a64 <HAL_FSMC_MspInit+0x98>)
 80229ea:	2201      	movs	r2, #1
 80229ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80229ee:	2300      	movs	r3, #0
 80229f0:	603b      	str	r3, [r7, #0]
 80229f2:	4b1d      	ldr	r3, [pc, #116]	; (8022a68 <HAL_FSMC_MspInit+0x9c>)
 80229f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80229f6:	4a1c      	ldr	r2, [pc, #112]	; (8022a68 <HAL_FSMC_MspInit+0x9c>)
 80229f8:	f043 0301 	orr.w	r3, r3, #1
 80229fc:	6393      	str	r3, [r2, #56]	; 0x38
 80229fe:	4b1a      	ldr	r3, [pc, #104]	; (8022a68 <HAL_FSMC_MspInit+0x9c>)
 8022a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022a02:	f003 0301 	and.w	r3, r3, #1
 8022a06:	603b      	str	r3, [r7, #0]
 8022a08:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8022a0a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8022a0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022a10:	2302      	movs	r3, #2
 8022a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022a14:	2300      	movs	r3, #0
 8022a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022a18:	2303      	movs	r3, #3
 8022a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022a1c:	230c      	movs	r3, #12
 8022a1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022a20:	1d3b      	adds	r3, r7, #4
 8022a22:	4619      	mov	r1, r3
 8022a24:	4811      	ldr	r0, [pc, #68]	; (8022a6c <HAL_FSMC_MspInit+0xa0>)
 8022a26:	f005 fbd7 	bl	80281d8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8022a2a:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8022a2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022a30:	2302      	movs	r3, #2
 8022a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022a34:	2300      	movs	r3, #0
 8022a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022a38:	2303      	movs	r3, #3
 8022a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022a3c:	230c      	movs	r3, #12
 8022a3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022a40:	1d3b      	adds	r3, r7, #4
 8022a42:	4619      	mov	r1, r3
 8022a44:	480a      	ldr	r0, [pc, #40]	; (8022a70 <HAL_FSMC_MspInit+0xa4>)
 8022a46:	f005 fbc7 	bl	80281d8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022a4a:	2200      	movs	r2, #0
 8022a4c:	2100      	movs	r1, #0
 8022a4e:	2030      	movs	r0, #48	; 0x30
 8022a50:	f004 ff5f 	bl	8027912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022a54:	2030      	movs	r0, #48	; 0x30
 8022a56:	f004 ff78 	bl	802794a <HAL_NVIC_EnableIRQ>
 8022a5a:	e000      	b.n	8022a5e <HAL_FSMC_MspInit+0x92>
    return;
 8022a5c:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8022a5e:	3718      	adds	r7, #24
 8022a60:	46bd      	mov	sp, r7
 8022a62:	bd80      	pop	{r7, pc}
 8022a64:	20000c44 	.word	0x20000c44
 8022a68:	40023800 	.word	0x40023800
 8022a6c:	40021000 	.word	0x40021000
 8022a70:	40020c00 	.word	0x40020c00

08022a74 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8022a74:	b580      	push	{r7, lr}
 8022a76:	b082      	sub	sp, #8
 8022a78:	af00      	add	r7, sp, #0
 8022a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8022a7c:	f7ff ffa6 	bl	80229cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8022a80:	bf00      	nop
 8022a82:	3708      	adds	r7, #8
 8022a84:	46bd      	mov	sp, r7
 8022a86:	bd80      	pop	{r7, pc}

08022a88 <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8022a88:	b580      	push	{r7, lr}
 8022a8a:	b086      	sub	sp, #24
 8022a8c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022a8e:	1d3b      	adds	r3, r7, #4
 8022a90:	2200      	movs	r2, #0
 8022a92:	601a      	str	r2, [r3, #0]
 8022a94:	605a      	str	r2, [r3, #4]
 8022a96:	609a      	str	r2, [r3, #8]
 8022a98:	60da      	str	r2, [r3, #12]
 8022a9a:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8022a9c:	4b20      	ldr	r3, [pc, #128]	; (8022b20 <nand_gpio_init+0x98>)
 8022a9e:	681b      	ldr	r3, [r3, #0]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d139      	bne.n	8022b18 <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8022aa4:	4b1e      	ldr	r3, [pc, #120]	; (8022b20 <nand_gpio_init+0x98>)
 8022aa6:	2201      	movs	r2, #1
 8022aa8:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8022aaa:	2300      	movs	r3, #0
 8022aac:	603b      	str	r3, [r7, #0]
 8022aae:	4b1d      	ldr	r3, [pc, #116]	; (8022b24 <nand_gpio_init+0x9c>)
 8022ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022ab2:	4a1c      	ldr	r2, [pc, #112]	; (8022b24 <nand_gpio_init+0x9c>)
 8022ab4:	f043 0301 	orr.w	r3, r3, #1
 8022ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8022aba:	4b1a      	ldr	r3, [pc, #104]	; (8022b24 <nand_gpio_init+0x9c>)
 8022abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022abe:	f003 0301 	and.w	r3, r3, #1
 8022ac2:	603b      	str	r3, [r7, #0]
 8022ac4:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8022ac6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8022aca:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022acc:	2302      	movs	r3, #2
 8022ace:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ad0:	2300      	movs	r3, #0
 8022ad2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022ad4:	2303      	movs	r3, #3
 8022ad6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022ad8:	230c      	movs	r3, #12
 8022ada:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022adc:	1d3b      	adds	r3, r7, #4
 8022ade:	4619      	mov	r1, r3
 8022ae0:	4811      	ldr	r0, [pc, #68]	; (8022b28 <nand_gpio_init+0xa0>)
 8022ae2:	f005 fb79 	bl	80281d8 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8022ae6:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8022aea:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022aec:	2302      	movs	r3, #2
 8022aee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022af0:	2300      	movs	r3, #0
 8022af2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022af4:	2303      	movs	r3, #3
 8022af6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022af8:	230c      	movs	r3, #12
 8022afa:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022afc:	1d3b      	adds	r3, r7, #4
 8022afe:	4619      	mov	r1, r3
 8022b00:	480a      	ldr	r0, [pc, #40]	; (8022b2c <nand_gpio_init+0xa4>)
 8022b02:	f005 fb69 	bl	80281d8 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022b06:	2200      	movs	r2, #0
 8022b08:	2100      	movs	r1, #0
 8022b0a:	2030      	movs	r0, #48	; 0x30
 8022b0c:	f004 ff01 	bl	8027912 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022b10:	2030      	movs	r0, #48	; 0x30
 8022b12:	f004 ff1a 	bl	802794a <HAL_NVIC_EnableIRQ>
 8022b16:	e000      	b.n	8022b1a <nand_gpio_init+0x92>
	    return;
 8022b18:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8022b1a:	3718      	adds	r7, #24
 8022b1c:	46bd      	mov	sp, r7
 8022b1e:	bd80      	pop	{r7, pc}
 8022b20:	20000c60 	.word	0x20000c60
 8022b24:	40023800 	.word	0x40023800
 8022b28:	40021000 	.word	0x40021000
 8022b2c:	40020c00 	.word	0x40020c00

08022b30 <nand_fsmc_init>:


static void nand_fsmc_init()
{
 8022b30:	b580      	push	{r7, lr}
 8022b32:	b08a      	sub	sp, #40	; 0x28
 8022b34:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8022b36:	f107 0318 	add.w	r3, r7, #24
 8022b3a:	2200      	movs	r2, #0
 8022b3c:	601a      	str	r2, [r3, #0]
 8022b3e:	605a      	str	r2, [r3, #4]
 8022b40:	609a      	str	r2, [r3, #8]
 8022b42:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8022b44:	f107 0308 	add.w	r3, r7, #8
 8022b48:	2200      	movs	r2, #0
 8022b4a:	601a      	str	r2, [r3, #0]
 8022b4c:	605a      	str	r2, [r3, #4]
 8022b4e:	609a      	str	r2, [r3, #8]
 8022b50:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 8022b52:	4b29      	ldr	r3, [pc, #164]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b54:	4a29      	ldr	r2, [pc, #164]	; (8022bfc <nand_fsmc_init+0xcc>)
 8022b56:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8022b58:	4b27      	ldr	r3, [pc, #156]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b5a:	2210      	movs	r2, #16
 8022b5c:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8022b5e:	4b26      	ldr	r3, [pc, #152]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b60:	2202      	movs	r2, #2
 8022b62:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8022b64:	4b24      	ldr	r3, [pc, #144]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b66:	2200      	movs	r2, #0
 8022b68:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8022b6a:	4b23      	ldr	r3, [pc, #140]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b6c:	2200      	movs	r2, #0
 8022b6e:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8022b70:	4b21      	ldr	r3, [pc, #132]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b72:	2200      	movs	r2, #0
 8022b74:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8022b76:	4b22      	ldr	r3, [pc, #136]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b78:	791b      	ldrb	r3, [r3, #4]
 8022b7a:	461a      	mov	r2, r3
 8022b7c:	4b1e      	ldr	r3, [pc, #120]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b7e:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8022b80:	4b1f      	ldr	r3, [pc, #124]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b82:	795b      	ldrb	r3, [r3, #5]
 8022b84:	461a      	mov	r2, r3
 8022b86:	4b1c      	ldr	r3, [pc, #112]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022b88:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8022b8a:	4b1d      	ldr	r3, [pc, #116]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b8c:	781b      	ldrb	r3, [r3, #0]
 8022b8e:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8022b90:	4b1b      	ldr	r3, [pc, #108]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b92:	785b      	ldrb	r3, [r3, #1]
 8022b94:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8022b96:	4b1a      	ldr	r3, [pc, #104]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b98:	789b      	ldrb	r3, [r3, #2]
 8022b9a:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8022b9c:	4b18      	ldr	r3, [pc, #96]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022b9e:	78db      	ldrb	r3, [r3, #3]
 8022ba0:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 8022ba2:	4b17      	ldr	r3, [pc, #92]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022ba4:	781b      	ldrb	r3, [r3, #0]
 8022ba6:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8022ba8:	4b15      	ldr	r3, [pc, #84]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022baa:	785b      	ldrb	r3, [r3, #1]
 8022bac:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8022bae:	4b14      	ldr	r3, [pc, #80]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022bb0:	789b      	ldrb	r3, [r3, #2]
 8022bb2:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8022bb4:	4b12      	ldr	r3, [pc, #72]	; (8022c00 <nand_fsmc_init+0xd0>)
 8022bb6:	78db      	ldrb	r3, [r3, #3]
 8022bb8:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8022bba:	f107 0208 	add.w	r2, r7, #8
 8022bbe:	f107 0318 	add.w	r3, r7, #24
 8022bc2:	4619      	mov	r1, r3
 8022bc4:	480c      	ldr	r0, [pc, #48]	; (8022bf8 <nand_fsmc_init+0xc8>)
 8022bc6:	f005 fdb8 	bl	802873a <HAL_NAND_Init>
 8022bca:	4603      	mov	r3, r0
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	d001      	beq.n	8022bd4 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 8022bd0:	f000 fec8 	bl	8023964 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 8022bd4:	2300      	movs	r3, #0
 8022bd6:	607b      	str	r3, [r7, #4]
 8022bd8:	4b0a      	ldr	r3, [pc, #40]	; (8022c04 <nand_fsmc_init+0xd4>)
 8022bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bdc:	4a09      	ldr	r2, [pc, #36]	; (8022c04 <nand_fsmc_init+0xd4>)
 8022bde:	f043 0301 	orr.w	r3, r3, #1
 8022be2:	6393      	str	r3, [r2, #56]	; 0x38
 8022be4:	4b07      	ldr	r3, [pc, #28]	; (8022c04 <nand_fsmc_init+0xd4>)
 8022be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022be8:	f003 0301 	and.w	r3, r3, #1
 8022bec:	607b      	str	r3, [r7, #4]
 8022bee:	687b      	ldr	r3, [r7, #4]
}
 8022bf0:	bf00      	nop
 8022bf2:	3728      	adds	r7, #40	; 0x28
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	bd80      	pop	{r7, pc}
 8022bf8:	20000c04 	.word	0x20000c04
 8022bfc:	a0000060 	.word	0xa0000060
 8022c00:	20000c48 	.word	0x20000c48
 8022c04:	40023800 	.word	0x40023800

08022c08 <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8022c08:	b580      	push	{r7, lr}
 8022c0a:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8022c0c:	4b42      	ldr	r3, [pc, #264]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c0e:	781b      	ldrb	r3, [r3, #0]
 8022c10:	4619      	mov	r1, r3
 8022c12:	4842      	ldr	r0, [pc, #264]	; (8022d1c <nand_print_fsmc_info+0x114>)
 8022c14:	f00e fa0c 	bl	8031030 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8022c18:	4b3f      	ldr	r3, [pc, #252]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c1a:	785b      	ldrb	r3, [r3, #1]
 8022c1c:	4619      	mov	r1, r3
 8022c1e:	4840      	ldr	r0, [pc, #256]	; (8022d20 <nand_print_fsmc_info+0x118>)
 8022c20:	f00e fa06 	bl	8031030 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8022c24:	4b3c      	ldr	r3, [pc, #240]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c26:	789b      	ldrb	r3, [r3, #2]
 8022c28:	4619      	mov	r1, r3
 8022c2a:	483e      	ldr	r0, [pc, #248]	; (8022d24 <nand_print_fsmc_info+0x11c>)
 8022c2c:	f00e fa00 	bl	8031030 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8022c30:	4b39      	ldr	r3, [pc, #228]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c32:	78db      	ldrb	r3, [r3, #3]
 8022c34:	4619      	mov	r1, r3
 8022c36:	483c      	ldr	r0, [pc, #240]	; (8022d28 <nand_print_fsmc_info+0x120>)
 8022c38:	f00e f9fa 	bl	8031030 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8022c3c:	4b36      	ldr	r3, [pc, #216]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c3e:	791b      	ldrb	r3, [r3, #4]
 8022c40:	4619      	mov	r1, r3
 8022c42:	483a      	ldr	r0, [pc, #232]	; (8022d2c <nand_print_fsmc_info+0x124>)
 8022c44:	f00e f9f4 	bl	8031030 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8022c48:	4b33      	ldr	r3, [pc, #204]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c4a:	795b      	ldrb	r3, [r3, #5]
 8022c4c:	4619      	mov	r1, r3
 8022c4e:	4838      	ldr	r0, [pc, #224]	; (8022d30 <nand_print_fsmc_info+0x128>)
 8022c50:	f00e f9ee 	bl	8031030 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8022c54:	4b30      	ldr	r3, [pc, #192]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c56:	799b      	ldrb	r3, [r3, #6]
 8022c58:	4619      	mov	r1, r3
 8022c5a:	4836      	ldr	r0, [pc, #216]	; (8022d34 <nand_print_fsmc_info+0x12c>)
 8022c5c:	f00e f9e8 	bl	8031030 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8022c60:	4b2d      	ldr	r3, [pc, #180]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c62:	79db      	ldrb	r3, [r3, #7]
 8022c64:	4619      	mov	r1, r3
 8022c66:	4834      	ldr	r0, [pc, #208]	; (8022d38 <nand_print_fsmc_info+0x130>)
 8022c68:	f00e f9e2 	bl	8031030 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8022c6c:	4b2a      	ldr	r3, [pc, #168]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c6e:	7a1b      	ldrb	r3, [r3, #8]
 8022c70:	4619      	mov	r1, r3
 8022c72:	4832      	ldr	r0, [pc, #200]	; (8022d3c <nand_print_fsmc_info+0x134>)
 8022c74:	f00e f9dc 	bl	8031030 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8022c78:	4b27      	ldr	r3, [pc, #156]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c7a:	7a5b      	ldrb	r3, [r3, #9]
 8022c7c:	4619      	mov	r1, r3
 8022c7e:	4830      	ldr	r0, [pc, #192]	; (8022d40 <nand_print_fsmc_info+0x138>)
 8022c80:	f00e f9d6 	bl	8031030 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8022c84:	4b24      	ldr	r3, [pc, #144]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c86:	7a9b      	ldrb	r3, [r3, #10]
 8022c88:	4619      	mov	r1, r3
 8022c8a:	482e      	ldr	r0, [pc, #184]	; (8022d44 <nand_print_fsmc_info+0x13c>)
 8022c8c:	f00e f9d0 	bl	8031030 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8022c90:	4b21      	ldr	r3, [pc, #132]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c92:	7adb      	ldrb	r3, [r3, #11]
 8022c94:	4619      	mov	r1, r3
 8022c96:	482c      	ldr	r0, [pc, #176]	; (8022d48 <nand_print_fsmc_info+0x140>)
 8022c98:	f00e f9ca 	bl	8031030 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8022c9c:	4b1e      	ldr	r3, [pc, #120]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022c9e:	7b1b      	ldrb	r3, [r3, #12]
 8022ca0:	4619      	mov	r1, r3
 8022ca2:	482a      	ldr	r0, [pc, #168]	; (8022d4c <nand_print_fsmc_info+0x144>)
 8022ca4:	f00e f9c4 	bl	8031030 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8022ca8:	4b1b      	ldr	r3, [pc, #108]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022caa:	7b5b      	ldrb	r3, [r3, #13]
 8022cac:	4619      	mov	r1, r3
 8022cae:	4828      	ldr	r0, [pc, #160]	; (8022d50 <nand_print_fsmc_info+0x148>)
 8022cb0:	f00e f9be 	bl	8031030 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8022cb4:	4b18      	ldr	r3, [pc, #96]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cb6:	7b9b      	ldrb	r3, [r3, #14]
 8022cb8:	4619      	mov	r1, r3
 8022cba:	4826      	ldr	r0, [pc, #152]	; (8022d54 <nand_print_fsmc_info+0x14c>)
 8022cbc:	f00e f9b8 	bl	8031030 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8022cc0:	4b15      	ldr	r3, [pc, #84]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cc2:	7bdb      	ldrb	r3, [r3, #15]
 8022cc4:	4619      	mov	r1, r3
 8022cc6:	4824      	ldr	r0, [pc, #144]	; (8022d58 <nand_print_fsmc_info+0x150>)
 8022cc8:	f00e f9b2 	bl	8031030 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8022ccc:	4b12      	ldr	r3, [pc, #72]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cce:	7c1b      	ldrb	r3, [r3, #16]
 8022cd0:	4619      	mov	r1, r3
 8022cd2:	4822      	ldr	r0, [pc, #136]	; (8022d5c <nand_print_fsmc_info+0x154>)
 8022cd4:	f00e f9ac 	bl	8031030 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8022cd8:	4b0f      	ldr	r3, [pc, #60]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cda:	7c5b      	ldrb	r3, [r3, #17]
 8022cdc:	4619      	mov	r1, r3
 8022cde:	4820      	ldr	r0, [pc, #128]	; (8022d60 <nand_print_fsmc_info+0x158>)
 8022ce0:	f00e f9a6 	bl	8031030 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8022ce4:	4b0c      	ldr	r3, [pc, #48]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022ce6:	7c9b      	ldrb	r3, [r3, #18]
 8022ce8:	4619      	mov	r1, r3
 8022cea:	481e      	ldr	r0, [pc, #120]	; (8022d64 <nand_print_fsmc_info+0x15c>)
 8022cec:	f00e f9a0 	bl	8031030 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8022cf0:	4b09      	ldr	r3, [pc, #36]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cf2:	7cdb      	ldrb	r3, [r3, #19]
 8022cf4:	4619      	mov	r1, r3
 8022cf6:	481c      	ldr	r0, [pc, #112]	; (8022d68 <nand_print_fsmc_info+0x160>)
 8022cf8:	f00e f99a 	bl	8031030 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8022cfc:	4b06      	ldr	r3, [pc, #24]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022cfe:	7d1b      	ldrb	r3, [r3, #20]
 8022d00:	4619      	mov	r1, r3
 8022d02:	481a      	ldr	r0, [pc, #104]	; (8022d6c <nand_print_fsmc_info+0x164>)
 8022d04:	f00e f994 	bl	8031030 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8022d08:	4b03      	ldr	r3, [pc, #12]	; (8022d18 <nand_print_fsmc_info+0x110>)
 8022d0a:	7d5b      	ldrb	r3, [r3, #21]
 8022d0c:	4619      	mov	r1, r3
 8022d0e:	4818      	ldr	r0, [pc, #96]	; (8022d70 <nand_print_fsmc_info+0x168>)
 8022d10:	f00e f98e 	bl	8031030 <iprintf>
}
 8022d14:	bf00      	nop
 8022d16:	bd80      	pop	{r7, pc}
 8022d18:	20000c48 	.word	0x20000c48
 8022d1c:	08031e68 	.word	0x08031e68
 8022d20:	08031e7c 	.word	0x08031e7c
 8022d24:	08031e94 	.word	0x08031e94
 8022d28:	08031eac 	.word	0x08031eac
 8022d2c:	08031ec4 	.word	0x08031ec4
 8022d30:	08031edc 	.word	0x08031edc
 8022d34:	08031ef0 	.word	0x08031ef0
 8022d38:	08031f04 	.word	0x08031f04
 8022d3c:	08031f18 	.word	0x08031f18
 8022d40:	08031f30 	.word	0x08031f30
 8022d44:	08031f48 	.word	0x08031f48
 8022d48:	08031f64 	.word	0x08031f64
 8022d4c:	08031f7c 	.word	0x08031f7c
 8022d50:	08031f90 	.word	0x08031f90
 8022d54:	08031fa8 	.word	0x08031fa8
 8022d58:	08031fc0 	.word	0x08031fc0
 8022d5c:	08031fd8 	.word	0x08031fd8
 8022d60:	08031ff0 	.word	0x08031ff0
 8022d64:	08032008 	.word	0x08032008
 8022d68:	08032024 	.word	0x08032024
 8022d6c:	08032040 	.word	0x08032040
 8022d70:	08032058 	.word	0x08032058

08022d74 <nand_reset>:

static void nand_reset()
{
 8022d74:	b480      	push	{r7}
 8022d76:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8022d78:	4b04      	ldr	r3, [pc, #16]	; (8022d8c <nand_reset+0x18>)
 8022d7a:	4a05      	ldr	r2, [pc, #20]	; (8022d90 <nand_reset+0x1c>)
 8022d7c:	7b12      	ldrb	r2, [r2, #12]
 8022d7e:	701a      	strb	r2, [r3, #0]
}
 8022d80:	bf00      	nop
 8022d82:	46bd      	mov	sp, r7
 8022d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d88:	4770      	bx	lr
 8022d8a:	bf00      	nop
 8022d8c:	70010000 	.word	0x70010000
 8022d90:	20000c48 	.word	0x20000c48

08022d94 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8022d94:	b5b0      	push	{r4, r5, r7, lr}
 8022d96:	b082      	sub	sp, #8
 8022d98:	af00      	add	r7, sp, #0
 8022d9a:	6078      	str	r0, [r7, #4]
 8022d9c:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8022d9e:	683b      	ldr	r3, [r7, #0]
 8022da0:	2b15      	cmp	r3, #21
 8022da2:	d802      	bhi.n	8022daa <nand_init+0x16>
        return -1;
 8022da4:	f04f 33ff 	mov.w	r3, #4294967295
 8022da8:	e015      	b.n	8022dd6 <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8022daa:	4a0d      	ldr	r2, [pc, #52]	; (8022de0 <nand_init+0x4c>)
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	4614      	mov	r4, r2
 8022db0:	461d      	mov	r5, r3
 8022db2:	6828      	ldr	r0, [r5, #0]
 8022db4:	6869      	ldr	r1, [r5, #4]
 8022db6:	68aa      	ldr	r2, [r5, #8]
 8022db8:	68eb      	ldr	r3, [r5, #12]
 8022dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022dbc:	6928      	ldr	r0, [r5, #16]
 8022dbe:	6020      	str	r0, [r4, #0]
 8022dc0:	8aab      	ldrh	r3, [r5, #20]
 8022dc2:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8022dc4:	f7ff fe60 	bl	8022a88 <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8022dc8:	f7ff feb2 	bl	8022b30 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8022dcc:	f7ff ff1c 	bl	8022c08 <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8022dd0:	f7ff ffd0 	bl	8022d74 <nand_reset>

    return 0;
 8022dd4:	2300      	movs	r3, #0
}
 8022dd6:	4618      	mov	r0, r3
 8022dd8:	3708      	adds	r7, #8
 8022dda:	46bd      	mov	sp, r7
 8022ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8022dde:	bf00      	nop
 8022de0:	20000c48 	.word	0x20000c48

08022de4 <nand_uninit>:

static void nand_uninit()
{
 8022de4:	b480      	push	{r7}
 8022de6:	af00      	add	r7, sp, #0
    //TODO
}
 8022de8:	bf00      	nop
 8022dea:	46bd      	mov	sp, r7
 8022dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df0:	4770      	bx	lr
	...

08022df4 <nand_read_status>:

static uint32_t nand_read_status()
{
 8022df4:	b480      	push	{r7}
 8022df6:	b083      	sub	sp, #12
 8022df8:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8022dfa:	4b11      	ldr	r3, [pc, #68]	; (8022e40 <nand_read_status+0x4c>)
 8022dfc:	4a11      	ldr	r2, [pc, #68]	; (8022e44 <nand_read_status+0x50>)
 8022dfe:	7c52      	ldrb	r2, [r2, #17]
 8022e00:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8022e02:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022e06:	781b      	ldrb	r3, [r3, #0]
 8022e08:	b2db      	uxtb	r3, r3
 8022e0a:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8022e0c:	683b      	ldr	r3, [r7, #0]
 8022e0e:	f003 0301 	and.w	r3, r3, #1
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	d002      	beq.n	8022e1c <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8022e16:	2302      	movs	r3, #2
 8022e18:	607b      	str	r3, [r7, #4]
 8022e1a:	e009      	b.n	8022e30 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8022e1c:	683b      	ldr	r3, [r7, #0]
 8022e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022e22:	2b00      	cmp	r3, #0
 8022e24:	d002      	beq.n	8022e2c <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8022e26:	2300      	movs	r3, #0
 8022e28:	607b      	str	r3, [r7, #4]
 8022e2a:	e001      	b.n	8022e30 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8022e2c:	2301      	movs	r3, #1
 8022e2e:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8022e30:	687b      	ldr	r3, [r7, #4]
}
 8022e32:	4618      	mov	r0, r3
 8022e34:	370c      	adds	r7, #12
 8022e36:	46bd      	mov	sp, r7
 8022e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e3c:	4770      	bx	lr
 8022e3e:	bf00      	nop
 8022e40:	70010000 	.word	0x70010000
 8022e44:	20000c48 	.word	0x20000c48

08022e48 <nand_get_status>:

static uint32_t nand_get_status()
{
 8022e48:	b580      	push	{r7, lr}
 8022e4a:	b082      	sub	sp, #8
 8022e4c:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8022e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022e52:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8022e54:	f7ff ffce 	bl	8022df4 <nand_read_status>
 8022e58:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8022e5a:	e005      	b.n	8022e68 <nand_get_status+0x20>
    {
        status = nand_read_status();
 8022e5c:	f7ff ffca 	bl	8022df4 <nand_read_status>
 8022e60:	6078      	str	r0, [r7, #4]
        timeout --;
 8022e62:	683b      	ldr	r3, [r7, #0]
 8022e64:	3b01      	subs	r3, #1
 8022e66:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8022e68:	687b      	ldr	r3, [r7, #4]
 8022e6a:	2b01      	cmp	r3, #1
 8022e6c:	d102      	bne.n	8022e74 <nand_get_status+0x2c>
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d1f3      	bne.n	8022e5c <nand_get_status+0x14>
    }

    if (!timeout)
 8022e74:	683b      	ldr	r3, [r7, #0]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d101      	bne.n	8022e7e <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8022e7a:	2303      	movs	r3, #3
 8022e7c:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8022e7e:	687b      	ldr	r3, [r7, #4]
}
 8022e80:	4618      	mov	r0, r3
 8022e82:	3708      	adds	r7, #8
 8022e84:	46bd      	mov	sp, r7
 8022e86:	bd80      	pop	{r7, pc}

08022e88 <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8022e88:	b480      	push	{r7}
 8022e8a:	b085      	sub	sp, #20
 8022e8c:	af00      	add	r7, sp, #0
 8022e8e:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8022e90:	2300      	movs	r3, #0
 8022e92:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8022e94:	4b17      	ldr	r3, [pc, #92]	; (8022ef4 <nand_read_id+0x6c>)
 8022e96:	4a18      	ldr	r2, [pc, #96]	; (8022ef8 <nand_read_id+0x70>)
 8022e98:	7ad2      	ldrb	r2, [r2, #11]
 8022e9a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022e9c:	4b17      	ldr	r3, [pc, #92]	; (8022efc <nand_read_id+0x74>)
 8022e9e:	2200      	movs	r2, #0
 8022ea0:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8022ea2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022ea6:	681b      	ldr	r3, [r3, #0]
 8022ea8:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8022eaa:	68fb      	ldr	r3, [r7, #12]
 8022eac:	b2da      	uxtb	r2, r3
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	0a1b      	lsrs	r3, r3, #8
 8022eb6:	b2da      	uxtb	r2, r3
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	0c1b      	lsrs	r3, r3, #16
 8022ec0:	b2da      	uxtb	r2, r3
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8022ec6:	68fb      	ldr	r3, [r7, #12]
 8022ec8:	0e1b      	lsrs	r3, r3, #24
 8022eca:	b2da      	uxtb	r2, r3
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8022ed0:	4b0b      	ldr	r3, [pc, #44]	; (8022f00 <nand_read_id+0x78>)
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8022ed6:	68fb      	ldr	r3, [r7, #12]
 8022ed8:	b2da      	uxtb	r2, r3
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	0a1b      	lsrs	r3, r3, #8
 8022ee2:	b2da      	uxtb	r2, r3
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	715a      	strb	r2, [r3, #5]
}
 8022ee8:	bf00      	nop
 8022eea:	3714      	adds	r7, #20
 8022eec:	46bd      	mov	sp, r7
 8022eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ef2:	4770      	bx	lr
 8022ef4:	70010000 	.word	0x70010000
 8022ef8:	20000c48 	.word	0x20000c48
 8022efc:	70020000 	.word	0x70020000
 8022f00:	70000004 	.word	0x70000004

08022f04 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8022f04:	b480      	push	{r7}
 8022f06:	b087      	sub	sp, #28
 8022f08:	af00      	add	r7, sp, #0
 8022f0a:	60f8      	str	r0, [r7, #12]
 8022f0c:	60b9      	str	r1, [r7, #8]
 8022f0e:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8022f10:	4b4c      	ldr	r3, [pc, #304]	; (8023044 <nand_write_page_async+0x140>)
 8022f12:	4a4d      	ldr	r2, [pc, #308]	; (8023048 <nand_write_page_async+0x144>)
 8022f14:	7b52      	ldrb	r2, [r2, #13]
 8022f16:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8022f18:	4b4b      	ldr	r3, [pc, #300]	; (8023048 <nand_write_page_async+0x144>)
 8022f1a:	79db      	ldrb	r3, [r3, #7]
 8022f1c:	3b01      	subs	r3, #1
 8022f1e:	2b03      	cmp	r3, #3
 8022f20:	d82c      	bhi.n	8022f7c <nand_write_page_async+0x78>
 8022f22:	a201      	add	r2, pc, #4	; (adr r2, 8022f28 <nand_write_page_async+0x24>)
 8022f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f28:	08022f39 	.word	0x08022f39
 8022f2c:	08022f41 	.word	0x08022f41
 8022f30:	08022f4f 	.word	0x08022f4f
 8022f34:	08022f63 	.word	0x08022f63
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f38:	4b44      	ldr	r3, [pc, #272]	; (802304c <nand_write_page_async+0x148>)
 8022f3a:	2200      	movs	r2, #0
 8022f3c:	701a      	strb	r2, [r3, #0]
        break;
 8022f3e:	e01e      	b.n	8022f7e <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f40:	4b42      	ldr	r3, [pc, #264]	; (802304c <nand_write_page_async+0x148>)
 8022f42:	2200      	movs	r2, #0
 8022f44:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f46:	4b41      	ldr	r3, [pc, #260]	; (802304c <nand_write_page_async+0x148>)
 8022f48:	2200      	movs	r2, #0
 8022f4a:	701a      	strb	r2, [r3, #0]
        break;
 8022f4c:	e017      	b.n	8022f7e <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f4e:	4b3f      	ldr	r3, [pc, #252]	; (802304c <nand_write_page_async+0x148>)
 8022f50:	2200      	movs	r2, #0
 8022f52:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f54:	4b3d      	ldr	r3, [pc, #244]	; (802304c <nand_write_page_async+0x148>)
 8022f56:	2200      	movs	r2, #0
 8022f58:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f5a:	4b3c      	ldr	r3, [pc, #240]	; (802304c <nand_write_page_async+0x148>)
 8022f5c:	2200      	movs	r2, #0
 8022f5e:	701a      	strb	r2, [r3, #0]
        break;
 8022f60:	e00d      	b.n	8022f7e <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f62:	4b3a      	ldr	r3, [pc, #232]	; (802304c <nand_write_page_async+0x148>)
 8022f64:	2200      	movs	r2, #0
 8022f66:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f68:	4b38      	ldr	r3, [pc, #224]	; (802304c <nand_write_page_async+0x148>)
 8022f6a:	2200      	movs	r2, #0
 8022f6c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f6e:	4b37      	ldr	r3, [pc, #220]	; (802304c <nand_write_page_async+0x148>)
 8022f70:	2200      	movs	r2, #0
 8022f72:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f74:	4b35      	ldr	r3, [pc, #212]	; (802304c <nand_write_page_async+0x148>)
 8022f76:	2200      	movs	r2, #0
 8022f78:	701a      	strb	r2, [r3, #0]
        break;
 8022f7a:	e000      	b.n	8022f7e <nand_write_page_async+0x7a>
    default:
        break;
 8022f7c:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8022f7e:	4b32      	ldr	r3, [pc, #200]	; (8023048 <nand_write_page_async+0x144>)
 8022f80:	799b      	ldrb	r3, [r3, #6]
 8022f82:	3b01      	subs	r3, #1
 8022f84:	2b03      	cmp	r3, #3
 8022f86:	d83d      	bhi.n	8023004 <nand_write_page_async+0x100>
 8022f88:	a201      	add	r2, pc, #4	; (adr r2, 8022f90 <nand_write_page_async+0x8c>)
 8022f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f8e:	bf00      	nop
 8022f90:	08022fa1 	.word	0x08022fa1
 8022f94:	08022fab 	.word	0x08022fab
 8022f98:	08022fbf 	.word	0x08022fbf
 8022f9c:	08022fdd 	.word	0x08022fdd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8022fa0:	4b2a      	ldr	r3, [pc, #168]	; (802304c <nand_write_page_async+0x148>)
 8022fa2:	68ba      	ldr	r2, [r7, #8]
 8022fa4:	b2d2      	uxtb	r2, r2
 8022fa6:	701a      	strb	r2, [r3, #0]
        break;
 8022fa8:	e02d      	b.n	8023006 <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8022faa:	4b28      	ldr	r3, [pc, #160]	; (802304c <nand_write_page_async+0x148>)
 8022fac:	68ba      	ldr	r2, [r7, #8]
 8022fae:	b2d2      	uxtb	r2, r2
 8022fb0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8022fb2:	68bb      	ldr	r3, [r7, #8]
 8022fb4:	0a1a      	lsrs	r2, r3, #8
 8022fb6:	4b25      	ldr	r3, [pc, #148]	; (802304c <nand_write_page_async+0x148>)
 8022fb8:	b2d2      	uxtb	r2, r2
 8022fba:	701a      	strb	r2, [r3, #0]
        break;
 8022fbc:	e023      	b.n	8023006 <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8022fbe:	4b23      	ldr	r3, [pc, #140]	; (802304c <nand_write_page_async+0x148>)
 8022fc0:	68ba      	ldr	r2, [r7, #8]
 8022fc2:	b2d2      	uxtb	r2, r2
 8022fc4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8022fc6:	68bb      	ldr	r3, [r7, #8]
 8022fc8:	0a1a      	lsrs	r2, r3, #8
 8022fca:	4b20      	ldr	r3, [pc, #128]	; (802304c <nand_write_page_async+0x148>)
 8022fcc:	b2d2      	uxtb	r2, r2
 8022fce:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8022fd0:	68bb      	ldr	r3, [r7, #8]
 8022fd2:	0c1a      	lsrs	r2, r3, #16
 8022fd4:	4b1d      	ldr	r3, [pc, #116]	; (802304c <nand_write_page_async+0x148>)
 8022fd6:	b2d2      	uxtb	r2, r2
 8022fd8:	701a      	strb	r2, [r3, #0]
        break;
 8022fda:	e014      	b.n	8023006 <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8022fdc:	4b1b      	ldr	r3, [pc, #108]	; (802304c <nand_write_page_async+0x148>)
 8022fde:	68ba      	ldr	r2, [r7, #8]
 8022fe0:	b2d2      	uxtb	r2, r2
 8022fe2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8022fe4:	68bb      	ldr	r3, [r7, #8]
 8022fe6:	0a1a      	lsrs	r2, r3, #8
 8022fe8:	4b18      	ldr	r3, [pc, #96]	; (802304c <nand_write_page_async+0x148>)
 8022fea:	b2d2      	uxtb	r2, r2
 8022fec:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8022fee:	68bb      	ldr	r3, [r7, #8]
 8022ff0:	0c1a      	lsrs	r2, r3, #16
 8022ff2:	4b16      	ldr	r3, [pc, #88]	; (802304c <nand_write_page_async+0x148>)
 8022ff4:	b2d2      	uxtb	r2, r2
 8022ff6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8022ff8:	68bb      	ldr	r3, [r7, #8]
 8022ffa:	0e1a      	lsrs	r2, r3, #24
 8022ffc:	4b13      	ldr	r3, [pc, #76]	; (802304c <nand_write_page_async+0x148>)
 8022ffe:	b2d2      	uxtb	r2, r2
 8023000:	701a      	strb	r2, [r3, #0]
        break;
 8023002:	e000      	b.n	8023006 <nand_write_page_async+0x102>
    default:
        break;
 8023004:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 8023006:	2300      	movs	r3, #0
 8023008:	617b      	str	r3, [r7, #20]
 802300a:	e009      	b.n	8023020 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 802300c:	68fa      	ldr	r2, [r7, #12]
 802300e:	697b      	ldr	r3, [r7, #20]
 8023010:	4413      	add	r3, r2
 8023012:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8023016:	781b      	ldrb	r3, [r3, #0]
 8023018:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 802301a:	697b      	ldr	r3, [r7, #20]
 802301c:	3301      	adds	r3, #1
 802301e:	617b      	str	r3, [r7, #20]
 8023020:	697a      	ldr	r2, [r7, #20]
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	429a      	cmp	r2, r3
 8023026:	d3f1      	bcc.n	802300c <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 8023028:	4b07      	ldr	r3, [pc, #28]	; (8023048 <nand_write_page_async+0x144>)
 802302a:	7b9b      	ldrb	r3, [r3, #14]
 802302c:	2bff      	cmp	r3, #255	; 0xff
 802302e:	d003      	beq.n	8023038 <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 8023030:	4b04      	ldr	r3, [pc, #16]	; (8023044 <nand_write_page_async+0x140>)
 8023032:	4a05      	ldr	r2, [pc, #20]	; (8023048 <nand_write_page_async+0x144>)
 8023034:	7b92      	ldrb	r2, [r2, #14]
 8023036:	701a      	strb	r2, [r3, #0]
}
 8023038:	bf00      	nop
 802303a:	371c      	adds	r7, #28
 802303c:	46bd      	mov	sp, r7
 802303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023042:	4770      	bx	lr
 8023044:	70010000 	.word	0x70010000
 8023048:	20000c48 	.word	0x20000c48
 802304c:	70020000 	.word	0x70020000

08023050 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8023050:	b580      	push	{r7, lr}
 8023052:	b086      	sub	sp, #24
 8023054:	af00      	add	r7, sp, #0
 8023056:	60f8      	str	r0, [r7, #12]
 8023058:	60b9      	str	r1, [r7, #8]
 802305a:	607a      	str	r2, [r7, #4]
 802305c:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 802305e:	4b55      	ldr	r3, [pc, #340]	; (80231b4 <nand_read_data+0x164>)
 8023060:	4a55      	ldr	r2, [pc, #340]	; (80231b8 <nand_read_data+0x168>)
 8023062:	7a12      	ldrb	r2, [r2, #8]
 8023064:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023066:	4b54      	ldr	r3, [pc, #336]	; (80231b8 <nand_read_data+0x168>)
 8023068:	79db      	ldrb	r3, [r3, #7]
 802306a:	3b01      	subs	r3, #1
 802306c:	2b03      	cmp	r3, #3
 802306e:	d83c      	bhi.n	80230ea <nand_read_data+0x9a>
 8023070:	a201      	add	r2, pc, #4	; (adr r2, 8023078 <nand_read_data+0x28>)
 8023072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023076:	bf00      	nop
 8023078:	08023089 	.word	0x08023089
 802307c:	08023093 	.word	0x08023093
 8023080:	080230a7 	.word	0x080230a7
 8023084:	080230c5 	.word	0x080230c5
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023088:	4b4c      	ldr	r3, [pc, #304]	; (80231bc <nand_read_data+0x16c>)
 802308a:	687a      	ldr	r2, [r7, #4]
 802308c:	b2d2      	uxtb	r2, r2
 802308e:	701a      	strb	r2, [r3, #0]
        break;
 8023090:	e02c      	b.n	80230ec <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023092:	4b4a      	ldr	r3, [pc, #296]	; (80231bc <nand_read_data+0x16c>)
 8023094:	687a      	ldr	r2, [r7, #4]
 8023096:	b2d2      	uxtb	r2, r2
 8023098:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	0a1a      	lsrs	r2, r3, #8
 802309e:	4b47      	ldr	r3, [pc, #284]	; (80231bc <nand_read_data+0x16c>)
 80230a0:	b2d2      	uxtb	r2, r2
 80230a2:	701a      	strb	r2, [r3, #0]
        break;
 80230a4:	e022      	b.n	80230ec <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80230a6:	4b45      	ldr	r3, [pc, #276]	; (80231bc <nand_read_data+0x16c>)
 80230a8:	687a      	ldr	r2, [r7, #4]
 80230aa:	b2d2      	uxtb	r2, r2
 80230ac:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	0a1a      	lsrs	r2, r3, #8
 80230b2:	4b42      	ldr	r3, [pc, #264]	; (80231bc <nand_read_data+0x16c>)
 80230b4:	b2d2      	uxtb	r2, r2
 80230b6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	0c1a      	lsrs	r2, r3, #16
 80230bc:	4b3f      	ldr	r3, [pc, #252]	; (80231bc <nand_read_data+0x16c>)
 80230be:	b2d2      	uxtb	r2, r2
 80230c0:	701a      	strb	r2, [r3, #0]
        break;
 80230c2:	e013      	b.n	80230ec <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 80230c4:	4b3d      	ldr	r3, [pc, #244]	; (80231bc <nand_read_data+0x16c>)
 80230c6:	687a      	ldr	r2, [r7, #4]
 80230c8:	b2d2      	uxtb	r2, r2
 80230ca:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	0a1a      	lsrs	r2, r3, #8
 80230d0:	4b3a      	ldr	r3, [pc, #232]	; (80231bc <nand_read_data+0x16c>)
 80230d2:	b2d2      	uxtb	r2, r2
 80230d4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	0c1a      	lsrs	r2, r3, #16
 80230da:	4b38      	ldr	r3, [pc, #224]	; (80231bc <nand_read_data+0x16c>)
 80230dc:	b2d2      	uxtb	r2, r2
 80230de:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	0e1a      	lsrs	r2, r3, #24
 80230e4:	4b35      	ldr	r3, [pc, #212]	; (80231bc <nand_read_data+0x16c>)
 80230e6:	b2d2      	uxtb	r2, r2
 80230e8:	701a      	strb	r2, [r3, #0]
    default:
        break;
 80230ea:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 80230ec:	4b32      	ldr	r3, [pc, #200]	; (80231b8 <nand_read_data+0x168>)
 80230ee:	799b      	ldrb	r3, [r3, #6]
 80230f0:	3b01      	subs	r3, #1
 80230f2:	2b03      	cmp	r3, #3
 80230f4:	d83c      	bhi.n	8023170 <nand_read_data+0x120>
 80230f6:	a201      	add	r2, pc, #4	; (adr r2, 80230fc <nand_read_data+0xac>)
 80230f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80230fc:	0802310d 	.word	0x0802310d
 8023100:	08023117 	.word	0x08023117
 8023104:	0802312b 	.word	0x0802312b
 8023108:	08023149 	.word	0x08023149
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 802310c:	4b2b      	ldr	r3, [pc, #172]	; (80231bc <nand_read_data+0x16c>)
 802310e:	68ba      	ldr	r2, [r7, #8]
 8023110:	b2d2      	uxtb	r2, r2
 8023112:	701a      	strb	r2, [r3, #0]
        break;
 8023114:	e02d      	b.n	8023172 <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023116:	4b29      	ldr	r3, [pc, #164]	; (80231bc <nand_read_data+0x16c>)
 8023118:	68ba      	ldr	r2, [r7, #8]
 802311a:	b2d2      	uxtb	r2, r2
 802311c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802311e:	68bb      	ldr	r3, [r7, #8]
 8023120:	0a1a      	lsrs	r2, r3, #8
 8023122:	4b26      	ldr	r3, [pc, #152]	; (80231bc <nand_read_data+0x16c>)
 8023124:	b2d2      	uxtb	r2, r2
 8023126:	701a      	strb	r2, [r3, #0]
        break;
 8023128:	e023      	b.n	8023172 <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 802312a:	4b24      	ldr	r3, [pc, #144]	; (80231bc <nand_read_data+0x16c>)
 802312c:	68ba      	ldr	r2, [r7, #8]
 802312e:	b2d2      	uxtb	r2, r2
 8023130:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023132:	68bb      	ldr	r3, [r7, #8]
 8023134:	0a1a      	lsrs	r2, r3, #8
 8023136:	4b21      	ldr	r3, [pc, #132]	; (80231bc <nand_read_data+0x16c>)
 8023138:	b2d2      	uxtb	r2, r2
 802313a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 802313c:	68bb      	ldr	r3, [r7, #8]
 802313e:	0c1a      	lsrs	r2, r3, #16
 8023140:	4b1e      	ldr	r3, [pc, #120]	; (80231bc <nand_read_data+0x16c>)
 8023142:	b2d2      	uxtb	r2, r2
 8023144:	701a      	strb	r2, [r3, #0]
        break;
 8023146:	e014      	b.n	8023172 <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023148:	4b1c      	ldr	r3, [pc, #112]	; (80231bc <nand_read_data+0x16c>)
 802314a:	68ba      	ldr	r2, [r7, #8]
 802314c:	b2d2      	uxtb	r2, r2
 802314e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023150:	68bb      	ldr	r3, [r7, #8]
 8023152:	0a1a      	lsrs	r2, r3, #8
 8023154:	4b19      	ldr	r3, [pc, #100]	; (80231bc <nand_read_data+0x16c>)
 8023156:	b2d2      	uxtb	r2, r2
 8023158:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 802315a:	68bb      	ldr	r3, [r7, #8]
 802315c:	0c1a      	lsrs	r2, r3, #16
 802315e:	4b17      	ldr	r3, [pc, #92]	; (80231bc <nand_read_data+0x16c>)
 8023160:	b2d2      	uxtb	r2, r2
 8023162:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023164:	68bb      	ldr	r3, [r7, #8]
 8023166:	0e1a      	lsrs	r2, r3, #24
 8023168:	4b14      	ldr	r3, [pc, #80]	; (80231bc <nand_read_data+0x16c>)
 802316a:	b2d2      	uxtb	r2, r2
 802316c:	701a      	strb	r2, [r3, #0]
        break;
 802316e:	e000      	b.n	8023172 <nand_read_data+0x122>
    default:
        break;
 8023170:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8023172:	4b11      	ldr	r3, [pc, #68]	; (80231b8 <nand_read_data+0x168>)
 8023174:	7a5b      	ldrb	r3, [r3, #9]
 8023176:	2bff      	cmp	r3, #255	; 0xff
 8023178:	d003      	beq.n	8023182 <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 802317a:	4b0e      	ldr	r3, [pc, #56]	; (80231b4 <nand_read_data+0x164>)
 802317c:	4a0e      	ldr	r2, [pc, #56]	; (80231b8 <nand_read_data+0x168>)
 802317e:	7a52      	ldrb	r2, [r2, #9]
 8023180:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8023182:	2300      	movs	r3, #0
 8023184:	617b      	str	r3, [r7, #20]
 8023186:	e00a      	b.n	802319e <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023188:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 802318c:	68fa      	ldr	r2, [r7, #12]
 802318e:	697b      	ldr	r3, [r7, #20]
 8023190:	4413      	add	r3, r2
 8023192:	780a      	ldrb	r2, [r1, #0]
 8023194:	b2d2      	uxtb	r2, r2
 8023196:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023198:	697b      	ldr	r3, [r7, #20]
 802319a:	3301      	adds	r3, #1
 802319c:	617b      	str	r3, [r7, #20]
 802319e:	697a      	ldr	r2, [r7, #20]
 80231a0:	683b      	ldr	r3, [r7, #0]
 80231a2:	429a      	cmp	r2, r3
 80231a4:	d3f0      	bcc.n	8023188 <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 80231a6:	f7ff fe4f 	bl	8022e48 <nand_get_status>
 80231aa:	4603      	mov	r3, r0
}
 80231ac:	4618      	mov	r0, r3
 80231ae:	3718      	adds	r7, #24
 80231b0:	46bd      	mov	sp, r7
 80231b2:	bd80      	pop	{r7, pc}
 80231b4:	70010000 	.word	0x70010000
 80231b8:	20000c48 	.word	0x20000c48
 80231bc:	70020000 	.word	0x70020000

080231c0 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80231c0:	b580      	push	{r7, lr}
 80231c2:	b084      	sub	sp, #16
 80231c4:	af00      	add	r7, sp, #0
 80231c6:	60f8      	str	r0, [r7, #12]
 80231c8:	60b9      	str	r1, [r7, #8]
 80231ca:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	2200      	movs	r2, #0
 80231d0:	68b9      	ldr	r1, [r7, #8]
 80231d2:	68f8      	ldr	r0, [r7, #12]
 80231d4:	f7ff ff3c 	bl	8023050 <nand_read_data>
 80231d8:	4603      	mov	r3, r0
}
 80231da:	4618      	mov	r0, r3
 80231dc:	3710      	adds	r7, #16
 80231de:	46bd      	mov	sp, r7
 80231e0:	bd80      	pop	{r7, pc}
	...

080231e4 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80231e4:	b580      	push	{r7, lr}
 80231e6:	b086      	sub	sp, #24
 80231e8:	af00      	add	r7, sp, #0
 80231ea:	60f8      	str	r0, [r7, #12]
 80231ec:	60b9      	str	r1, [r7, #8]
 80231ee:	607a      	str	r2, [r7, #4]
 80231f0:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 80231f2:	4b54      	ldr	r3, [pc, #336]	; (8023344 <nand_read_spare_data+0x160>)
 80231f4:	7a9b      	ldrb	r3, [r3, #10]
 80231f6:	2bff      	cmp	r3, #255	; 0xff
 80231f8:	d101      	bne.n	80231fe <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 80231fa:	2304      	movs	r3, #4
 80231fc:	e09e      	b.n	802333c <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 80231fe:	4b52      	ldr	r3, [pc, #328]	; (8023348 <nand_read_spare_data+0x164>)
 8023200:	4a50      	ldr	r2, [pc, #320]	; (8023344 <nand_read_spare_data+0x160>)
 8023202:	7a92      	ldrb	r2, [r2, #10]
 8023204:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8023206:	4b4f      	ldr	r3, [pc, #316]	; (8023344 <nand_read_spare_data+0x160>)
 8023208:	79db      	ldrb	r3, [r3, #7]
 802320a:	3b01      	subs	r3, #1
 802320c:	2b03      	cmp	r3, #3
 802320e:	d83c      	bhi.n	802328a <nand_read_spare_data+0xa6>
 8023210:	a201      	add	r2, pc, #4	; (adr r2, 8023218 <nand_read_spare_data+0x34>)
 8023212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023216:	bf00      	nop
 8023218:	08023229 	.word	0x08023229
 802321c:	08023233 	.word	0x08023233
 8023220:	08023247 	.word	0x08023247
 8023224:	08023265 	.word	0x08023265
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023228:	4b48      	ldr	r3, [pc, #288]	; (802334c <nand_read_spare_data+0x168>)
 802322a:	687a      	ldr	r2, [r7, #4]
 802322c:	b2d2      	uxtb	r2, r2
 802322e:	701a      	strb	r2, [r3, #0]
        break;
 8023230:	e02c      	b.n	802328c <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023232:	4b46      	ldr	r3, [pc, #280]	; (802334c <nand_read_spare_data+0x168>)
 8023234:	687a      	ldr	r2, [r7, #4]
 8023236:	b2d2      	uxtb	r2, r2
 8023238:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	0a1a      	lsrs	r2, r3, #8
 802323e:	4b43      	ldr	r3, [pc, #268]	; (802334c <nand_read_spare_data+0x168>)
 8023240:	b2d2      	uxtb	r2, r2
 8023242:	701a      	strb	r2, [r3, #0]
        break;
 8023244:	e022      	b.n	802328c <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023246:	4b41      	ldr	r3, [pc, #260]	; (802334c <nand_read_spare_data+0x168>)
 8023248:	687a      	ldr	r2, [r7, #4]
 802324a:	b2d2      	uxtb	r2, r2
 802324c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 802324e:	687b      	ldr	r3, [r7, #4]
 8023250:	0a1a      	lsrs	r2, r3, #8
 8023252:	4b3e      	ldr	r3, [pc, #248]	; (802334c <nand_read_spare_data+0x168>)
 8023254:	b2d2      	uxtb	r2, r2
 8023256:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	0c1a      	lsrs	r2, r3, #16
 802325c:	4b3b      	ldr	r3, [pc, #236]	; (802334c <nand_read_spare_data+0x168>)
 802325e:	b2d2      	uxtb	r2, r2
 8023260:	701a      	strb	r2, [r3, #0]
        break;
 8023262:	e013      	b.n	802328c <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023264:	4b39      	ldr	r3, [pc, #228]	; (802334c <nand_read_spare_data+0x168>)
 8023266:	687a      	ldr	r2, [r7, #4]
 8023268:	b2d2      	uxtb	r2, r2
 802326a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	0a1a      	lsrs	r2, r3, #8
 8023270:	4b36      	ldr	r3, [pc, #216]	; (802334c <nand_read_spare_data+0x168>)
 8023272:	b2d2      	uxtb	r2, r2
 8023274:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	0c1a      	lsrs	r2, r3, #16
 802327a:	4b34      	ldr	r3, [pc, #208]	; (802334c <nand_read_spare_data+0x168>)
 802327c:	b2d2      	uxtb	r2, r2
 802327e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	0e1a      	lsrs	r2, r3, #24
 8023284:	4b31      	ldr	r3, [pc, #196]	; (802334c <nand_read_spare_data+0x168>)
 8023286:	b2d2      	uxtb	r2, r2
 8023288:	701a      	strb	r2, [r3, #0]
    default:
        break;
 802328a:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 802328c:	4b2d      	ldr	r3, [pc, #180]	; (8023344 <nand_read_spare_data+0x160>)
 802328e:	799b      	ldrb	r3, [r3, #6]
 8023290:	3b01      	subs	r3, #1
 8023292:	2b03      	cmp	r3, #3
 8023294:	d83c      	bhi.n	8023310 <nand_read_spare_data+0x12c>
 8023296:	a201      	add	r2, pc, #4	; (adr r2, 802329c <nand_read_spare_data+0xb8>)
 8023298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802329c:	080232ad 	.word	0x080232ad
 80232a0:	080232b7 	.word	0x080232b7
 80232a4:	080232cb 	.word	0x080232cb
 80232a8:	080232e9 	.word	0x080232e9
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80232ac:	4b27      	ldr	r3, [pc, #156]	; (802334c <nand_read_spare_data+0x168>)
 80232ae:	68ba      	ldr	r2, [r7, #8]
 80232b0:	b2d2      	uxtb	r2, r2
 80232b2:	701a      	strb	r2, [r3, #0]
        break;
 80232b4:	e02d      	b.n	8023312 <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80232b6:	4b25      	ldr	r3, [pc, #148]	; (802334c <nand_read_spare_data+0x168>)
 80232b8:	68ba      	ldr	r2, [r7, #8]
 80232ba:	b2d2      	uxtb	r2, r2
 80232bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80232be:	68bb      	ldr	r3, [r7, #8]
 80232c0:	0a1a      	lsrs	r2, r3, #8
 80232c2:	4b22      	ldr	r3, [pc, #136]	; (802334c <nand_read_spare_data+0x168>)
 80232c4:	b2d2      	uxtb	r2, r2
 80232c6:	701a      	strb	r2, [r3, #0]
        break;
 80232c8:	e023      	b.n	8023312 <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80232ca:	4b20      	ldr	r3, [pc, #128]	; (802334c <nand_read_spare_data+0x168>)
 80232cc:	68ba      	ldr	r2, [r7, #8]
 80232ce:	b2d2      	uxtb	r2, r2
 80232d0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80232d2:	68bb      	ldr	r3, [r7, #8]
 80232d4:	0a1a      	lsrs	r2, r3, #8
 80232d6:	4b1d      	ldr	r3, [pc, #116]	; (802334c <nand_read_spare_data+0x168>)
 80232d8:	b2d2      	uxtb	r2, r2
 80232da:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80232dc:	68bb      	ldr	r3, [r7, #8]
 80232de:	0c1a      	lsrs	r2, r3, #16
 80232e0:	4b1a      	ldr	r3, [pc, #104]	; (802334c <nand_read_spare_data+0x168>)
 80232e2:	b2d2      	uxtb	r2, r2
 80232e4:	701a      	strb	r2, [r3, #0]
        break;
 80232e6:	e014      	b.n	8023312 <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80232e8:	4b18      	ldr	r3, [pc, #96]	; (802334c <nand_read_spare_data+0x168>)
 80232ea:	68ba      	ldr	r2, [r7, #8]
 80232ec:	b2d2      	uxtb	r2, r2
 80232ee:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80232f0:	68bb      	ldr	r3, [r7, #8]
 80232f2:	0a1a      	lsrs	r2, r3, #8
 80232f4:	4b15      	ldr	r3, [pc, #84]	; (802334c <nand_read_spare_data+0x168>)
 80232f6:	b2d2      	uxtb	r2, r2
 80232f8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80232fa:	68bb      	ldr	r3, [r7, #8]
 80232fc:	0c1a      	lsrs	r2, r3, #16
 80232fe:	4b13      	ldr	r3, [pc, #76]	; (802334c <nand_read_spare_data+0x168>)
 8023300:	b2d2      	uxtb	r2, r2
 8023302:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 8023304:	68bb      	ldr	r3, [r7, #8]
 8023306:	0e1a      	lsrs	r2, r3, #24
 8023308:	4b10      	ldr	r3, [pc, #64]	; (802334c <nand_read_spare_data+0x168>)
 802330a:	b2d2      	uxtb	r2, r2
 802330c:	701a      	strb	r2, [r3, #0]
        break;
 802330e:	e000      	b.n	8023312 <nand_read_spare_data+0x12e>
    default:
        break;
 8023310:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 8023312:	2300      	movs	r3, #0
 8023314:	617b      	str	r3, [r7, #20]
 8023316:	e00a      	b.n	802332e <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 8023318:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 802331c:	68fa      	ldr	r2, [r7, #12]
 802331e:	697b      	ldr	r3, [r7, #20]
 8023320:	4413      	add	r3, r2
 8023322:	780a      	ldrb	r2, [r1, #0]
 8023324:	b2d2      	uxtb	r2, r2
 8023326:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 8023328:	697b      	ldr	r3, [r7, #20]
 802332a:	3301      	adds	r3, #1
 802332c:	617b      	str	r3, [r7, #20]
 802332e:	697a      	ldr	r2, [r7, #20]
 8023330:	683b      	ldr	r3, [r7, #0]
 8023332:	429a      	cmp	r2, r3
 8023334:	d3f0      	bcc.n	8023318 <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 8023336:	f7ff fd87 	bl	8022e48 <nand_get_status>
 802333a:	4603      	mov	r3, r0
}
 802333c:	4618      	mov	r0, r3
 802333e:	3718      	adds	r7, #24
 8023340:	46bd      	mov	sp, r7
 8023342:	bd80      	pop	{r7, pc}
 8023344:	20000c48 	.word	0x20000c48
 8023348:	70010000 	.word	0x70010000
 802334c:	70020000 	.word	0x70020000

08023350 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8023350:	b580      	push	{r7, lr}
 8023352:	b082      	sub	sp, #8
 8023354:	af00      	add	r7, sp, #0
 8023356:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 8023358:	4b2a      	ldr	r3, [pc, #168]	; (8023404 <nand_erase_block+0xb4>)
 802335a:	4a2b      	ldr	r2, [pc, #172]	; (8023408 <nand_erase_block+0xb8>)
 802335c:	7bd2      	ldrb	r2, [r2, #15]
 802335e:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8023360:	4b29      	ldr	r3, [pc, #164]	; (8023408 <nand_erase_block+0xb8>)
 8023362:	799b      	ldrb	r3, [r3, #6]
 8023364:	3b01      	subs	r3, #1
 8023366:	2b03      	cmp	r3, #3
 8023368:	d83c      	bhi.n	80233e4 <nand_erase_block+0x94>
 802336a:	a201      	add	r2, pc, #4	; (adr r2, 8023370 <nand_erase_block+0x20>)
 802336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023370:	08023381 	.word	0x08023381
 8023374:	0802338b 	.word	0x0802338b
 8023378:	0802339f 	.word	0x0802339f
 802337c:	080233bd 	.word	0x080233bd
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023380:	4b22      	ldr	r3, [pc, #136]	; (802340c <nand_erase_block+0xbc>)
 8023382:	687a      	ldr	r2, [r7, #4]
 8023384:	b2d2      	uxtb	r2, r2
 8023386:	701a      	strb	r2, [r3, #0]
        break;
 8023388:	e02d      	b.n	80233e6 <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802338a:	4b20      	ldr	r3, [pc, #128]	; (802340c <nand_erase_block+0xbc>)
 802338c:	687a      	ldr	r2, [r7, #4]
 802338e:	b2d2      	uxtb	r2, r2
 8023390:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	0a1a      	lsrs	r2, r3, #8
 8023396:	4b1d      	ldr	r3, [pc, #116]	; (802340c <nand_erase_block+0xbc>)
 8023398:	b2d2      	uxtb	r2, r2
 802339a:	701a      	strb	r2, [r3, #0]
        break;
 802339c:	e023      	b.n	80233e6 <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802339e:	4b1b      	ldr	r3, [pc, #108]	; (802340c <nand_erase_block+0xbc>)
 80233a0:	687a      	ldr	r2, [r7, #4]
 80233a2:	b2d2      	uxtb	r2, r2
 80233a4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80233a6:	687b      	ldr	r3, [r7, #4]
 80233a8:	0a1a      	lsrs	r2, r3, #8
 80233aa:	4b18      	ldr	r3, [pc, #96]	; (802340c <nand_erase_block+0xbc>)
 80233ac:	b2d2      	uxtb	r2, r2
 80233ae:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	0c1a      	lsrs	r2, r3, #16
 80233b4:	4b15      	ldr	r3, [pc, #84]	; (802340c <nand_erase_block+0xbc>)
 80233b6:	b2d2      	uxtb	r2, r2
 80233b8:	701a      	strb	r2, [r3, #0]
        break;
 80233ba:	e014      	b.n	80233e6 <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80233bc:	4b13      	ldr	r3, [pc, #76]	; (802340c <nand_erase_block+0xbc>)
 80233be:	687a      	ldr	r2, [r7, #4]
 80233c0:	b2d2      	uxtb	r2, r2
 80233c2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	0a1a      	lsrs	r2, r3, #8
 80233c8:	4b10      	ldr	r3, [pc, #64]	; (802340c <nand_erase_block+0xbc>)
 80233ca:	b2d2      	uxtb	r2, r2
 80233cc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80233ce:	687b      	ldr	r3, [r7, #4]
 80233d0:	0c1a      	lsrs	r2, r3, #16
 80233d2:	4b0e      	ldr	r3, [pc, #56]	; (802340c <nand_erase_block+0xbc>)
 80233d4:	b2d2      	uxtb	r2, r2
 80233d6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 80233d8:	687b      	ldr	r3, [r7, #4]
 80233da:	0e1a      	lsrs	r2, r3, #24
 80233dc:	4b0b      	ldr	r3, [pc, #44]	; (802340c <nand_erase_block+0xbc>)
 80233de:	b2d2      	uxtb	r2, r2
 80233e0:	701a      	strb	r2, [r3, #0]
        break;
 80233e2:	e000      	b.n	80233e6 <nand_erase_block+0x96>
    default:
        break;
 80233e4:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 80233e6:	4b08      	ldr	r3, [pc, #32]	; (8023408 <nand_erase_block+0xb8>)
 80233e8:	7c1b      	ldrb	r3, [r3, #16]
 80233ea:	2bff      	cmp	r3, #255	; 0xff
 80233ec:	d003      	beq.n	80233f6 <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 80233ee:	4b05      	ldr	r3, [pc, #20]	; (8023404 <nand_erase_block+0xb4>)
 80233f0:	4a05      	ldr	r2, [pc, #20]	; (8023408 <nand_erase_block+0xb8>)
 80233f2:	7c12      	ldrb	r2, [r2, #16]
 80233f4:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 80233f6:	f7ff fd27 	bl	8022e48 <nand_get_status>
 80233fa:	4603      	mov	r3, r0
}
 80233fc:	4618      	mov	r0, r3
 80233fe:	3708      	adds	r7, #8
 8023400:	46bd      	mov	sp, r7
 8023402:	bd80      	pop	{r7, pc}
 8023404:	70010000 	.word	0x70010000
 8023408:	20000c48 	.word	0x20000c48
 802340c:	70020000 	.word	0x70020000

08023410 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 8023410:	b480      	push	{r7}
 8023412:	af00      	add	r7, sp, #0
    return true;
 8023414:	2301      	movs	r3, #1
}
 8023416:	4618      	mov	r0, r3
 8023418:	46bd      	mov	sp, r7
 802341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802341e:	4770      	bx	lr

08023420 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 8023420:	b480      	push	{r7}
 8023422:	b085      	sub	sp, #20
 8023424:	af00      	add	r7, sp, #0
 8023426:	4603      	mov	r3, r0
 8023428:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 802342a:	4b17      	ldr	r3, [pc, #92]	; (8023488 <nand_enable_hw_ecc+0x68>)
 802342c:	7c9b      	ldrb	r3, [r3, #18]
 802342e:	2bff      	cmp	r3, #255	; 0xff
 8023430:	d101      	bne.n	8023436 <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 8023432:	2304      	movs	r3, #4
 8023434:	e021      	b.n	802347a <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 8023436:	79fb      	ldrb	r3, [r7, #7]
 8023438:	2b00      	cmp	r3, #0
 802343a:	d002      	beq.n	8023442 <nand_enable_hw_ecc+0x22>
 802343c:	4b12      	ldr	r3, [pc, #72]	; (8023488 <nand_enable_hw_ecc+0x68>)
 802343e:	7d1b      	ldrb	r3, [r3, #20]
 8023440:	e001      	b.n	8023446 <nand_enable_hw_ecc+0x26>
 8023442:	4b11      	ldr	r3, [pc, #68]	; (8023488 <nand_enable_hw_ecc+0x68>)
 8023444:	7d5b      	ldrb	r3, [r3, #21]
 8023446:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 8023448:	4b10      	ldr	r3, [pc, #64]	; (802348c <nand_enable_hw_ecc+0x6c>)
 802344a:	4a0f      	ldr	r2, [pc, #60]	; (8023488 <nand_enable_hw_ecc+0x68>)
 802344c:	7c92      	ldrb	r2, [r2, #18]
 802344e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8023450:	4b0f      	ldr	r3, [pc, #60]	; (8023490 <nand_enable_hw_ecc+0x70>)
 8023452:	4a0d      	ldr	r2, [pc, #52]	; (8023488 <nand_enable_hw_ecc+0x68>)
 8023454:	7cd2      	ldrb	r2, [r2, #19]
 8023456:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 8023458:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 802345c:	7bfb      	ldrb	r3, [r7, #15]
 802345e:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023460:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023464:	2200      	movs	r2, #0
 8023466:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023468:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802346c:	2200      	movs	r2, #0
 802346e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023470:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023474:	2200      	movs	r2, #0
 8023476:	701a      	strb	r2, [r3, #0]

    return 0;
 8023478:	2300      	movs	r3, #0
}
 802347a:	4618      	mov	r0, r3
 802347c:	3714      	adds	r7, #20
 802347e:	46bd      	mov	sp, r7
 8023480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023484:	4770      	bx	lr
 8023486:	bf00      	nop
 8023488:	20000c48 	.word	0x20000c48
 802348c:	70010000 	.word	0x70010000
 8023490:	70020000 	.word	0x70020000

08023494 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8023494:	b580      	push	{r7, lr}
 8023496:	b08c      	sub	sp, #48	; 0x30
 8023498:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802349a:	f107 031c 	add.w	r3, r7, #28
 802349e:	2200      	movs	r2, #0
 80234a0:	601a      	str	r2, [r3, #0]
 80234a2:	605a      	str	r2, [r3, #4]
 80234a4:	609a      	str	r2, [r3, #8]
 80234a6:	60da      	str	r2, [r3, #12]
 80234a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80234aa:	2300      	movs	r3, #0
 80234ac:	61bb      	str	r3, [r7, #24]
 80234ae:	4b64      	ldr	r3, [pc, #400]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234b2:	4a63      	ldr	r2, [pc, #396]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234b4:	f043 0310 	orr.w	r3, r3, #16
 80234b8:	6313      	str	r3, [r2, #48]	; 0x30
 80234ba:	4b61      	ldr	r3, [pc, #388]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234be:	f003 0310 	and.w	r3, r3, #16
 80234c2:	61bb      	str	r3, [r7, #24]
 80234c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80234c6:	2300      	movs	r3, #0
 80234c8:	617b      	str	r3, [r7, #20]
 80234ca:	4b5d      	ldr	r3, [pc, #372]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ce:	4a5c      	ldr	r2, [pc, #368]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234d0:	f043 0304 	orr.w	r3, r3, #4
 80234d4:	6313      	str	r3, [r2, #48]	; 0x30
 80234d6:	4b5a      	ldr	r3, [pc, #360]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234da:	f003 0304 	and.w	r3, r3, #4
 80234de:	617b      	str	r3, [r7, #20]
 80234e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80234e2:	2300      	movs	r3, #0
 80234e4:	613b      	str	r3, [r7, #16]
 80234e6:	4b56      	ldr	r3, [pc, #344]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ea:	4a55      	ldr	r2, [pc, #340]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80234f0:	6313      	str	r3, [r2, #48]	; 0x30
 80234f2:	4b53      	ldr	r3, [pc, #332]	; (8023640 <MX_GPIO_Init+0x1ac>)
 80234f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80234fa:	613b      	str	r3, [r7, #16]
 80234fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80234fe:	2300      	movs	r3, #0
 8023500:	60fb      	str	r3, [r7, #12]
 8023502:	4b4f      	ldr	r3, [pc, #316]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023506:	4a4e      	ldr	r2, [pc, #312]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023508:	f043 0301 	orr.w	r3, r3, #1
 802350c:	6313      	str	r3, [r2, #48]	; 0x30
 802350e:	4b4c      	ldr	r3, [pc, #304]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023512:	f003 0301 	and.w	r3, r3, #1
 8023516:	60fb      	str	r3, [r7, #12]
 8023518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802351a:	2300      	movs	r3, #0
 802351c:	60bb      	str	r3, [r7, #8]
 802351e:	4b48      	ldr	r3, [pc, #288]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023522:	4a47      	ldr	r2, [pc, #284]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023524:	f043 0302 	orr.w	r3, r3, #2
 8023528:	6313      	str	r3, [r2, #48]	; 0x30
 802352a:	4b45      	ldr	r3, [pc, #276]	; (8023640 <MX_GPIO_Init+0x1ac>)
 802352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802352e:	f003 0302 	and.w	r3, r3, #2
 8023532:	60bb      	str	r3, [r7, #8]
 8023534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023536:	2300      	movs	r3, #0
 8023538:	607b      	str	r3, [r7, #4]
 802353a:	4b41      	ldr	r3, [pc, #260]	; (8023640 <MX_GPIO_Init+0x1ac>)
 802353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802353e:	4a40      	ldr	r2, [pc, #256]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023540:	f043 0308 	orr.w	r3, r3, #8
 8023544:	6313      	str	r3, [r2, #48]	; 0x30
 8023546:	4b3e      	ldr	r3, [pc, #248]	; (8023640 <MX_GPIO_Init+0x1ac>)
 8023548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802354a:	f003 0308 	and.w	r3, r3, #8
 802354e:	607b      	str	r3, [r7, #4]
 8023550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8023552:	2201      	movs	r2, #1
 8023554:	2140      	movs	r1, #64	; 0x40
 8023556:	483b      	ldr	r0, [pc, #236]	; (8023644 <MX_GPIO_Init+0x1b0>)
 8023558:	f005 f8d6 	bl	8028708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 802355c:	2200      	movs	r2, #0
 802355e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8023562:	4839      	ldr	r0, [pc, #228]	; (8023648 <MX_GPIO_Init+0x1b4>)
 8023564:	f005 f8d0 	bl	8028708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8023568:	2201      	movs	r2, #1
 802356a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802356e:	4836      	ldr	r0, [pc, #216]	; (8023648 <MX_GPIO_Init+0x1b4>)
 8023570:	f005 f8ca 	bl	8028708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8023574:	2200      	movs	r2, #0
 8023576:	2110      	movs	r1, #16
 8023578:	4834      	ldr	r0, [pc, #208]	; (802364c <MX_GPIO_Init+0x1b8>)
 802357a:	f005 f8c5 	bl	8028708 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802357e:	233f      	movs	r3, #63	; 0x3f
 8023580:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023582:	2303      	movs	r3, #3
 8023584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023586:	2300      	movs	r3, #0
 8023588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802358a:	f107 031c 	add.w	r3, r7, #28
 802358e:	4619      	mov	r1, r3
 8023590:	482c      	ldr	r0, [pc, #176]	; (8023644 <MX_GPIO_Init+0x1b0>)
 8023592:	f004 fe21 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8023596:	2340      	movs	r3, #64	; 0x40
 8023598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802359a:	2301      	movs	r3, #1
 802359c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802359e:	2301      	movs	r3, #1
 80235a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80235a2:	2300      	movs	r3, #0
 80235a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80235a6:	f107 031c 	add.w	r3, r7, #28
 80235aa:	4619      	mov	r1, r3
 80235ac:	4825      	ldr	r0, [pc, #148]	; (8023644 <MX_GPIO_Init+0x1b0>)
 80235ae:	f004 fe13 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80235b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80235b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80235b8:	2301      	movs	r3, #1
 80235ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80235bc:	2301      	movs	r3, #1
 80235be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80235c0:	2300      	movs	r3, #0
 80235c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80235c4:	f107 031c 	add.w	r3, r7, #28
 80235c8:	4619      	mov	r1, r3
 80235ca:	481f      	ldr	r0, [pc, #124]	; (8023648 <MX_GPIO_Init+0x1b4>)
 80235cc:	f004 fe04 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80235d0:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 80235d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80235d6:	2303      	movs	r3, #3
 80235d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80235da:	2300      	movs	r3, #0
 80235dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80235de:	f107 031c 	add.w	r3, r7, #28
 80235e2:	4619      	mov	r1, r3
 80235e4:	4818      	ldr	r0, [pc, #96]	; (8023648 <MX_GPIO_Init+0x1b4>)
 80235e6:	f004 fdf7 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80235ea:	f248 1317 	movw	r3, #33047	; 0x8117
 80235ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80235f0:	2303      	movs	r3, #3
 80235f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80235f4:	2300      	movs	r3, #0
 80235f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80235f8:	f107 031c 	add.w	r3, r7, #28
 80235fc:	4619      	mov	r1, r3
 80235fe:	4814      	ldr	r0, [pc, #80]	; (8023650 <MX_GPIO_Init+0x1bc>)
 8023600:	f004 fdea 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8023604:	f24c 33c4 	movw	r3, #50116	; 0xc3c4
 8023608:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802360a:	2303      	movs	r3, #3
 802360c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802360e:	2300      	movs	r3, #0
 8023610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023612:	f107 031c 	add.w	r3, r7, #28
 8023616:	4619      	mov	r1, r3
 8023618:	480c      	ldr	r0, [pc, #48]	; (802364c <MX_GPIO_Init+0x1b8>)
 802361a:	f004 fddd 	bl	80281d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 802361e:	f242 030c 	movw	r3, #8204	; 0x200c
 8023622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023624:	2303      	movs	r3, #3
 8023626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023628:	2300      	movs	r3, #0
 802362a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802362c:	f107 031c 	add.w	r3, r7, #28
 8023630:	4619      	mov	r1, r3
 8023632:	4808      	ldr	r0, [pc, #32]	; (8023654 <MX_GPIO_Init+0x1c0>)
 8023634:	f004 fdd0 	bl	80281d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);*/

}
 8023638:	bf00      	nop
 802363a:	3730      	adds	r7, #48	; 0x30
 802363c:	46bd      	mov	sp, r7
 802363e:	bd80      	pop	{r7, pc}
 8023640:	40023800 	.word	0x40023800
 8023644:	40021000 	.word	0x40021000
 8023648:	40020800 	.word	0x40020800
 802364c:	40020400 	.word	0x40020400
 8023650:	40020000 	.word	0x40020000
 8023654:	40020c00 	.word	0x40020c00

08023658 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8023658:	b580      	push	{r7, lr}
 802365a:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 802365c:	f004 f82a 	bl	80276b4 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8023660:	f004 f848 	bl	80276f4 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8023664:	f004 f836 	bl	80276d4 <HAL_DBGMCU_EnableDBGStopMode>
}
 8023668:	bf00      	nop
 802366a:	bd80      	pop	{r7, pc}

0802366c <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 802366c:	b580      	push	{r7, lr}
 802366e:	b088      	sub	sp, #32
 8023670:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023672:	f107 030c 	add.w	r3, r7, #12
 8023676:	2200      	movs	r2, #0
 8023678:	601a      	str	r2, [r3, #0]
 802367a:	605a      	str	r2, [r3, #4]
 802367c:	609a      	str	r2, [r3, #8]
 802367e:	60da      	str	r2, [r3, #12]
 8023680:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 8023682:	2300      	movs	r3, #0
 8023684:	60bb      	str	r3, [r7, #8]
 8023686:	4b26      	ldr	r3, [pc, #152]	; (8023720 <led_init+0xb4>)
 8023688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802368a:	4a25      	ldr	r2, [pc, #148]	; (8023720 <led_init+0xb4>)
 802368c:	f043 0310 	orr.w	r3, r3, #16
 8023690:	6313      	str	r3, [r2, #48]	; 0x30
 8023692:	4b23      	ldr	r3, [pc, #140]	; (8023720 <led_init+0xb4>)
 8023694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023696:	f003 0310 	and.w	r3, r3, #16
 802369a:	60bb      	str	r3, [r7, #8]
 802369c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 802369e:	2300      	movs	r3, #0
 80236a0:	607b      	str	r3, [r7, #4]
 80236a2:	4b1f      	ldr	r3, [pc, #124]	; (8023720 <led_init+0xb4>)
 80236a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236a6:	4a1e      	ldr	r2, [pc, #120]	; (8023720 <led_init+0xb4>)
 80236a8:	f043 0304 	orr.w	r3, r3, #4
 80236ac:	6313      	str	r3, [r2, #48]	; 0x30
 80236ae:	4b1c      	ldr	r3, [pc, #112]	; (8023720 <led_init+0xb4>)
 80236b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236b2:	f003 0304 	and.w	r3, r3, #4
 80236b6:	607b      	str	r3, [r7, #4]
 80236b8:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80236ba:	2201      	movs	r2, #1
 80236bc:	2140      	movs	r1, #64	; 0x40
 80236be:	4819      	ldr	r0, [pc, #100]	; (8023724 <led_init+0xb8>)
 80236c0:	f005 f822 	bl	8028708 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80236c4:	2201      	movs	r2, #1
 80236c6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80236ca:	4817      	ldr	r0, [pc, #92]	; (8023728 <led_init+0xbc>)
 80236cc:	f005 f81c 	bl	8028708 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 80236d0:	2340      	movs	r3, #64	; 0x40
 80236d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80236d4:	2301      	movs	r3, #1
 80236d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80236d8:	2301      	movs	r3, #1
 80236da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80236dc:	2300      	movs	r3, #0
 80236de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80236e0:	f107 030c 	add.w	r3, r7, #12
 80236e4:	4619      	mov	r1, r3
 80236e6:	480f      	ldr	r0, [pc, #60]	; (8023724 <led_init+0xb8>)
 80236e8:	f004 fd76 	bl	80281d8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80236ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80236f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80236f2:	2301      	movs	r3, #1
 80236f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80236f6:	2301      	movs	r3, #1
 80236f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80236fa:	2300      	movs	r3, #0
 80236fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80236fe:	f107 030c 	add.w	r3, r7, #12
 8023702:	4619      	mov	r1, r3
 8023704:	4808      	ldr	r0, [pc, #32]	; (8023728 <led_init+0xbc>)
 8023706:	f004 fd67 	bl	80281d8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 802370a:	2200      	movs	r2, #0
 802370c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8023710:	4805      	ldr	r0, [pc, #20]	; (8023728 <led_init+0xbc>)
 8023712:	f004 fff9 	bl	8028708 <HAL_GPIO_WritePin>
}
 8023716:	bf00      	nop
 8023718:	3720      	adds	r7, #32
 802371a:	46bd      	mov	sp, r7
 802371c:	bd80      	pop	{r7, pc}
 802371e:	bf00      	nop
 8023720:	40023800 	.word	0x40023800
 8023724:	40021000 	.word	0x40021000
 8023728:	40020800 	.word	0x40020800

0802372c <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 802372c:	b580      	push	{r7, lr}
 802372e:	b082      	sub	sp, #8
 8023730:	af00      	add	r7, sp, #0
 8023732:	6078      	str	r0, [r7, #4]
 8023734:	460b      	mov	r3, r1
 8023736:	807b      	strh	r3, [r7, #2]
 8023738:	4613      	mov	r3, r2
 802373a:	707b      	strb	r3, [r7, #1]
    if (on)
 802373c:	787b      	ldrb	r3, [r7, #1]
 802373e:	2b00      	cmp	r3, #0
 8023740:	d006      	beq.n	8023750 <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 8023742:	887b      	ldrh	r3, [r7, #2]
 8023744:	2201      	movs	r2, #1
 8023746:	4619      	mov	r1, r3
 8023748:	6878      	ldr	r0, [r7, #4]
 802374a:	f004 ffdd 	bl	8028708 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 802374e:	e005      	b.n	802375c <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 8023750:	887b      	ldrh	r3, [r7, #2]
 8023752:	2200      	movs	r2, #0
 8023754:	4619      	mov	r1, r3
 8023756:	6878      	ldr	r0, [r7, #4]
 8023758:	f004 ffd6 	bl	8028708 <HAL_GPIO_WritePin>
}
 802375c:	bf00      	nop
 802375e:	3708      	adds	r7, #8
 8023760:	46bd      	mov	sp, r7
 8023762:	bd80      	pop	{r7, pc}

08023764 <led_wr_set>:

void led_wr_set(bool on)
{
 8023764:	b580      	push	{r7, lr}
 8023766:	b082      	sub	sp, #8
 8023768:	af00      	add	r7, sp, #0
 802376a:	4603      	mov	r3, r0
 802376c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 802376e:	79fb      	ldrb	r3, [r7, #7]
 8023770:	461a      	mov	r2, r3
 8023772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8023776:	4803      	ldr	r0, [pc, #12]	; (8023784 <led_wr_set+0x20>)
 8023778:	f7ff ffd8 	bl	802372c <led_set>
}
 802377c:	bf00      	nop
 802377e:	3708      	adds	r7, #8
 8023780:	46bd      	mov	sp, r7
 8023782:	bd80      	pop	{r7, pc}
 8023784:	40020800 	.word	0x40020800

08023788 <led_rd_set>:

void led_rd_set(bool on)
{
 8023788:	b580      	push	{r7, lr}
 802378a:	b082      	sub	sp, #8
 802378c:	af00      	add	r7, sp, #0
 802378e:	4603      	mov	r3, r0
 8023790:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 8023792:	79fb      	ldrb	r3, [r7, #7]
 8023794:	461a      	mov	r2, r3
 8023796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802379a:	4803      	ldr	r0, [pc, #12]	; (80237a8 <led_rd_set+0x20>)
 802379c:	f7ff ffc6 	bl	802372c <led_set>
}
 80237a0:	bf00      	nop
 80237a2:	3708      	adds	r7, #8
 80237a4:	46bd      	mov	sp, r7
 80237a6:	bd80      	pop	{r7, pc}
 80237a8:	40020800 	.word	0x40020800

080237ac <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80237ac:	b580      	push	{r7, lr}
 80237ae:	b084      	sub	sp, #16
 80237b0:	af00      	add	r7, sp, #0
 80237b2:	60f8      	str	r0, [r7, #12]
 80237b4:	60b9      	str	r1, [r7, #8]
 80237b6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	b29a      	uxth	r2, r3
 80237bc:	f04f 33ff 	mov.w	r3, #4294967295
 80237c0:	68b9      	ldr	r1, [r7, #8]
 80237c2:	4804      	ldr	r0, [pc, #16]	; (80237d4 <_write+0x28>)
 80237c4:	f007 ff67 	bl	802b696 <HAL_UART_Transmit>
    return len;
 80237c8:	687b      	ldr	r3, [r7, #4]
}
 80237ca:	4618      	mov	r0, r3
 80237cc:	3710      	adds	r7, #16
 80237ce:	46bd      	mov	sp, r7
 80237d0:	bd80      	pop	{r7, pc}
 80237d2:	bf00      	nop
 80237d4:	200051b4 	.word	0x200051b4

080237d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80237d8:	b580      	push	{r7, lr}
 80237da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80237dc:	b662      	cpsie	i
}
 80237de:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80237e0:	f003 fed2 	bl	8027588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80237e4:	f000 f852 	bl	802388c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80237e8:	f7ff fe54 	bl	8023494 <MX_GPIO_Init>
//  MX_FSMC_Init();
  MX_RTC_Init();
 80237ec:	f002 fba2 	bl	8025f34 <MX_RTC_Init>
//  MX_SPI1_Init();
  MX_USART1_UART_Init();
 80237f0:	f003 fe26 	bl	8027440 <MX_USART1_UART_Init>
//  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 80237f4:	2300      	movs	r3, #0
 80237f6:	2205      	movs	r2, #5
 80237f8:	2103      	movs	r1, #3
 80237fa:	481c      	ldr	r0, [pc, #112]	; (802386c <main+0x94>)
 80237fc:	f00d fc18 	bl	8031030 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 8023800:	f7ff f852 	bl	80228a8 <is_external_clock_avail>
 8023804:	4603      	mov	r3, r0
 8023806:	f083 0301 	eor.w	r3, r3, #1
 802380a:	b2db      	uxtb	r3, r3
 802380c:	2b00      	cmp	r3, #0
 802380e:	d002      	beq.n	8023816 <main+0x3e>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 8023810:	4817      	ldr	r0, [pc, #92]	; (8023870 <main+0x98>)
 8023812:	f00d fc73 	bl	80310fc <puts>

  printf("JTAG init...");
 8023816:	4817      	ldr	r0, [pc, #92]	; (8023874 <main+0x9c>)
 8023818:	f00d fc0a 	bl	8031030 <iprintf>
  jtag_init();
 802381c:	f7ff ff1c 	bl	8023658 <jtag_init>
  printf("done.\r\n");
 8023820:	4815      	ldr	r0, [pc, #84]	; (8023878 <main+0xa0>)
 8023822:	f00d fc6b 	bl	80310fc <puts>

  printf("LED init...");
 8023826:	4815      	ldr	r0, [pc, #84]	; (802387c <main+0xa4>)
 8023828:	f00d fc02 	bl	8031030 <iprintf>
  led_init();
 802382c:	f7ff ff1e 	bl	802366c <led_init>
  printf("done.\r\n");
 8023830:	4811      	ldr	r0, [pc, #68]	; (8023878 <main+0xa0>)
 8023832:	f00d fc63 	bl	80310fc <puts>

  printf("USB init...");
 8023836:	4812      	ldr	r0, [pc, #72]	; (8023880 <main+0xa8>)
 8023838:	f00d fbfa 	bl	8031030 <iprintf>
  MX_USB_DEVICE_Init();
 802383c:	f00c fbce 	bl	802ffdc <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 8023840:	480d      	ldr	r0, [pc, #52]	; (8023878 <main+0xa0>)
 8023842:	f00d fc5b 	bl	80310fc <puts>

  printf("CDC init...");
 8023846:	480f      	ldr	r0, [pc, #60]	; (8023884 <main+0xac>)
 8023848:	f00d fbf2 	bl	8031030 <iprintf>
  cdc_init();
 802384c:	f7fe feee 	bl	802262c <cdc_init>
  printf("done.\r\n");
 8023850:	4809      	ldr	r0, [pc, #36]	; (8023878 <main+0xa0>)
 8023852:	f00d fc53 	bl	80310fc <puts>

  printf("Programmer init...");
 8023856:	480c      	ldr	r0, [pc, #48]	; (8023888 <main+0xb0>)
 8023858:	f00d fbea 	bl	8031030 <iprintf>
  np_init();
 802385c:	f002 fb3e 	bl	8025edc <np_init>
  printf("done.\r\n");
 8023860:	4805      	ldr	r0, [pc, #20]	; (8023878 <main+0xa0>)
 8023862:	f00d fc4b 	bl	80310fc <puts>
		printf(" W25Q256JV QuadSPI Test OK\r\n");
	else
		printf(" W25Q256JV QuadSPI Test False\r\n");*/

  while (1)
      np_handler();
 8023866:	f002 fb49 	bl	8025efc <np_handler>
 802386a:	e7fc      	b.n	8023866 <main+0x8e>
 802386c:	08032070 	.word	0x08032070
 8023870:	08032094 	.word	0x08032094
 8023874:	080320d0 	.word	0x080320d0
 8023878:	080320e0 	.word	0x080320e0
 802387c:	080320e8 	.word	0x080320e8
 8023880:	080320f4 	.word	0x080320f4
 8023884:	08032100 	.word	0x08032100
 8023888:	0803210c 	.word	0x0803210c

0802388c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802388c:	b580      	push	{r7, lr}
 802388e:	b094      	sub	sp, #80	; 0x50
 8023890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8023892:	f107 0320 	add.w	r3, r7, #32
 8023896:	2230      	movs	r2, #48	; 0x30
 8023898:	2100      	movs	r1, #0
 802389a:	4618      	mov	r0, r3
 802389c:	f00d fd0e 	bl	80312bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80238a0:	f107 030c 	add.w	r3, r7, #12
 80238a4:	2200      	movs	r2, #0
 80238a6:	601a      	str	r2, [r3, #0]
 80238a8:	605a      	str	r2, [r3, #4]
 80238aa:	609a      	str	r2, [r3, #8]
 80238ac:	60da      	str	r2, [r3, #12]
 80238ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80238b0:	2300      	movs	r3, #0
 80238b2:	60bb      	str	r3, [r7, #8]
 80238b4:	4b29      	ldr	r3, [pc, #164]	; (802395c <SystemClock_Config+0xd0>)
 80238b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238b8:	4a28      	ldr	r2, [pc, #160]	; (802395c <SystemClock_Config+0xd0>)
 80238ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80238be:	6413      	str	r3, [r2, #64]	; 0x40
 80238c0:	4b26      	ldr	r3, [pc, #152]	; (802395c <SystemClock_Config+0xd0>)
 80238c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80238c8:	60bb      	str	r3, [r7, #8]
 80238ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80238cc:	2300      	movs	r3, #0
 80238ce:	607b      	str	r3, [r7, #4]
 80238d0:	4b23      	ldr	r3, [pc, #140]	; (8023960 <SystemClock_Config+0xd4>)
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	4a22      	ldr	r2, [pc, #136]	; (8023960 <SystemClock_Config+0xd4>)
 80238d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80238da:	6013      	str	r3, [r2, #0]
 80238dc:	4b20      	ldr	r3, [pc, #128]	; (8023960 <SystemClock_Config+0xd4>)
 80238de:	681b      	ldr	r3, [r3, #0]
 80238e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80238e4:	607b      	str	r3, [r7, #4]
 80238e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80238e8:	2309      	movs	r3, #9
 80238ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80238ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80238f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80238f2:	2301      	movs	r3, #1
 80238f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80238f6:	2302      	movs	r3, #2
 80238f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80238fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80238fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8023900:	2305      	movs	r3, #5
 8023902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8023904:	23a8      	movs	r3, #168	; 0xa8
 8023906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8023908:	2302      	movs	r3, #2
 802390a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 802390c:	2307      	movs	r3, #7
 802390e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023910:	f107 0320 	add.w	r3, r7, #32
 8023914:	4618      	mov	r0, r3
 8023916:	f006 fad3 	bl	8029ec0 <HAL_RCC_OscConfig>
 802391a:	4603      	mov	r3, r0
 802391c:	2b00      	cmp	r3, #0
 802391e:	d001      	beq.n	8023924 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8023920:	f000 f820 	bl	8023964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023924:	230f      	movs	r3, #15
 8023926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023928:	2302      	movs	r3, #2
 802392a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802392c:	2300      	movs	r3, #0
 802392e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8023936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802393a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802393c:	f107 030c 	add.w	r3, r7, #12
 8023940:	2105      	movs	r1, #5
 8023942:	4618      	mov	r0, r3
 8023944:	f006 fd34 	bl	802a3b0 <HAL_RCC_ClockConfig>
 8023948:	4603      	mov	r3, r0
 802394a:	2b00      	cmp	r3, #0
 802394c:	d001      	beq.n	8023952 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 802394e:	f000 f809 	bl	8023964 <Error_Handler>
  }
}
 8023952:	bf00      	nop
 8023954:	3750      	adds	r7, #80	; 0x50
 8023956:	46bd      	mov	sp, r7
 8023958:	bd80      	pop	{r7, pc}
 802395a:	bf00      	nop
 802395c:	40023800 	.word	0x40023800
 8023960:	40007000 	.word	0x40007000

08023964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023964:	b480      	push	{r7}
 8023966:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8023968:	b672      	cpsid	i
}
 802396a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802396c:	e7fe      	b.n	802396c <Error_Handler+0x8>
	...

08023970 <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8023970:	b580      	push	{r7, lr}
 8023972:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8023974:	2250      	movs	r2, #80	; 0x50
 8023976:	2100      	movs	r1, #0
 8023978:	4803      	ldr	r0, [pc, #12]	; (8023988 <nand_bad_block_table_init+0x18>)
 802397a:	f00d fc9f 	bl	80312bc <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 802397e:	4b03      	ldr	r3, [pc, #12]	; (802398c <nand_bad_block_table_init+0x1c>)
 8023980:	2200      	movs	r2, #0
 8023982:	601a      	str	r2, [r3, #0]
}
 8023984:	bf00      	nop
 8023986:	bd80      	pop	{r7, pc}
 8023988:	20000c68 	.word	0x20000c68
 802398c:	20000c64 	.word	0x20000c64

08023990 <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 8023990:	b480      	push	{r7}
 8023992:	b083      	sub	sp, #12
 8023994:	af00      	add	r7, sp, #0
 8023996:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8023998:	4b0b      	ldr	r3, [pc, #44]	; (80239c8 <nand_bad_block_table_add+0x38>)
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	2b14      	cmp	r3, #20
 802399e:	d102      	bne.n	80239a6 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 80239a0:	f04f 33ff 	mov.w	r3, #4294967295
 80239a4:	e009      	b.n	80239ba <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 80239a6:	4b08      	ldr	r3, [pc, #32]	; (80239c8 <nand_bad_block_table_add+0x38>)
 80239a8:	681b      	ldr	r3, [r3, #0]
 80239aa:	1c5a      	adds	r2, r3, #1
 80239ac:	4906      	ldr	r1, [pc, #24]	; (80239c8 <nand_bad_block_table_add+0x38>)
 80239ae:	600a      	str	r2, [r1, #0]
 80239b0:	4906      	ldr	r1, [pc, #24]	; (80239cc <nand_bad_block_table_add+0x3c>)
 80239b2:	687a      	ldr	r2, [r7, #4]
 80239b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 80239b8:	2300      	movs	r3, #0
}
 80239ba:	4618      	mov	r0, r3
 80239bc:	370c      	adds	r7, #12
 80239be:	46bd      	mov	sp, r7
 80239c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239c4:	4770      	bx	lr
 80239c6:	bf00      	nop
 80239c8:	20000c64 	.word	0x20000c64
 80239cc:	20000c68 	.word	0x20000c68

080239d0 <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 80239d0:	b480      	push	{r7}
 80239d2:	b085      	sub	sp, #20
 80239d4:	af00      	add	r7, sp, #0
 80239d6:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 80239d8:	2300      	movs	r3, #0
 80239da:	60fb      	str	r3, [r7, #12]
 80239dc:	e00b      	b.n	80239f6 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 80239de:	4a0c      	ldr	r2, [pc, #48]	; (8023a10 <nand_bad_block_table_lookup+0x40>)
 80239e0:	68fb      	ldr	r3, [r7, #12]
 80239e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80239e6:	687a      	ldr	r2, [r7, #4]
 80239e8:	429a      	cmp	r2, r3
 80239ea:	d101      	bne.n	80239f0 <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 80239ec:	2301      	movs	r3, #1
 80239ee:	e008      	b.n	8023a02 <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 80239f0:	68fb      	ldr	r3, [r7, #12]
 80239f2:	3301      	adds	r3, #1
 80239f4:	60fb      	str	r3, [r7, #12]
 80239f6:	4b07      	ldr	r3, [pc, #28]	; (8023a14 <nand_bad_block_table_lookup+0x44>)
 80239f8:	681b      	ldr	r3, [r3, #0]
 80239fa:	68fa      	ldr	r2, [r7, #12]
 80239fc:	429a      	cmp	r2, r3
 80239fe:	d3ee      	bcc.n	80239de <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8023a00:	2300      	movs	r3, #0
}
 8023a02:	4618      	mov	r0, r3
 8023a04:	3714      	adds	r7, #20
 8023a06:	46bd      	mov	sp, r7
 8023a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a0c:	4770      	bx	lr
 8023a0e:	bf00      	nop
 8023a10:	20000c68 	.word	0x20000c68
 8023a14:	20000c64 	.word	0x20000c64

08023a18 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8023a18:	b480      	push	{r7}
 8023a1a:	b083      	sub	sp, #12
 8023a1c:	af00      	add	r7, sp, #0
 8023a1e:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8023a20:	4b08      	ldr	r3, [pc, #32]	; (8023a44 <nand_bad_block_table_iter_alloc+0x2c>)
 8023a22:	681b      	ldr	r3, [r3, #0]
 8023a24:	2b00      	cmp	r3, #0
 8023a26:	d101      	bne.n	8023a2c <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8023a28:	2300      	movs	r3, #0
 8023a2a:	e004      	b.n	8023a36 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8023a2c:	4b06      	ldr	r3, [pc, #24]	; (8023a48 <nand_bad_block_table_iter_alloc+0x30>)
 8023a2e:	681a      	ldr	r2, [r3, #0]
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8023a34:	4b04      	ldr	r3, [pc, #16]	; (8023a48 <nand_bad_block_table_iter_alloc+0x30>)
}
 8023a36:	4618      	mov	r0, r3
 8023a38:	370c      	adds	r7, #12
 8023a3a:	46bd      	mov	sp, r7
 8023a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a40:	4770      	bx	lr
 8023a42:	bf00      	nop
 8023a44:	20000c64 	.word	0x20000c64
 8023a48:	20000c68 	.word	0x20000c68

08023a4c <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8023a4c:	b480      	push	{r7}
 8023a4e:	b085      	sub	sp, #20
 8023a50:	af00      	add	r7, sp, #0
 8023a52:	6078      	str	r0, [r7, #4]
 8023a54:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 8023a5a:	68fb      	ldr	r3, [r7, #12]
 8023a5c:	2b00      	cmp	r3, #0
 8023a5e:	d101      	bne.n	8023a64 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8023a60:	2300      	movs	r3, #0
 8023a62:	e012      	b.n	8023a8a <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8023a64:	68fb      	ldr	r3, [r7, #12]
 8023a66:	3304      	adds	r3, #4
 8023a68:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8023a6a:	68fb      	ldr	r3, [r7, #12]
 8023a6c:	4a0a      	ldr	r2, [pc, #40]	; (8023a98 <nand_bad_block_table_iter_next+0x4c>)
 8023a6e:	1a9b      	subs	r3, r3, r2
 8023a70:	109b      	asrs	r3, r3, #2
 8023a72:	461a      	mov	r2, r3
 8023a74:	4b09      	ldr	r3, [pc, #36]	; (8023a9c <nand_bad_block_table_iter_next+0x50>)
 8023a76:	681b      	ldr	r3, [r3, #0]
 8023a78:	429a      	cmp	r2, r3
 8023a7a:	d301      	bcc.n	8023a80 <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8023a7c:	2300      	movs	r3, #0
 8023a7e:	e004      	b.n	8023a8a <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8023a80:	68fb      	ldr	r3, [r7, #12]
 8023a82:	681a      	ldr	r2, [r3, #0]
 8023a84:	683b      	ldr	r3, [r7, #0]
 8023a86:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8023a88:	68fb      	ldr	r3, [r7, #12]
}
 8023a8a:	4618      	mov	r0, r3
 8023a8c:	3714      	adds	r7, #20
 8023a8e:	46bd      	mov	sp, r7
 8023a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a94:	4770      	bx	lr
 8023a96:	bf00      	nop
 8023a98:	20000c68 	.word	0x20000c68
 8023a9c:	20000c64 	.word	0x20000c64

08023aa0 <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8023aa0:	b580      	push	{r7, lr}
 8023aa2:	b082      	sub	sp, #8
 8023aa4:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8023aa6:	2301      	movs	r3, #1
 8023aa8:	703b      	strb	r3, [r7, #0]
 8023aaa:	2300      	movs	r3, #0
 8023aac:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8023aae:	2302      	movs	r3, #2
 8023ab0:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8023ab2:	4b08      	ldr	r3, [pc, #32]	; (8023ad4 <np_send_ok_status+0x34>)
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d006      	beq.n	8023ac8 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8023aba:	4b06      	ldr	r3, [pc, #24]	; (8023ad4 <np_send_ok_status+0x34>)
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	681b      	ldr	r3, [r3, #0]
 8023ac0:	463a      	mov	r2, r7
 8023ac2:	6879      	ldr	r1, [r7, #4]
 8023ac4:	4610      	mov	r0, r2
 8023ac6:	4798      	blx	r3

    return 0;
 8023ac8:	2300      	movs	r3, #0
}
 8023aca:	4618      	mov	r0, r3
 8023acc:	3708      	adds	r7, #8
 8023ace:	46bd      	mov	sp, r7
 8023ad0:	bd80      	pop	{r7, pc}
 8023ad2:	bf00      	nop
 8023ad4:	20000cb8 	.word	0x20000cb8

08023ad8 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8023ad8:	b580      	push	{r7, lr}
 8023ada:	b086      	sub	sp, #24
 8023adc:	af00      	add	r7, sp, #0
 8023ade:	4603      	mov	r3, r0
 8023ae0:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8023ae2:	4b0d      	ldr	r3, [pc, #52]	; (8023b18 <np_send_error+0x40>)
 8023ae4:	881b      	ldrh	r3, [r3, #0]
 8023ae6:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8023ae8:	8a3b      	ldrh	r3, [r7, #16]
 8023aea:	81bb      	strh	r3, [r7, #12]
 8023aec:	79fb      	ldrb	r3, [r7, #7]
 8023aee:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8023af0:	2303      	movs	r3, #3
 8023af2:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8023af4:	4b09      	ldr	r3, [pc, #36]	; (8023b1c <np_send_error+0x44>)
 8023af6:	681b      	ldr	r3, [r3, #0]
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	d007      	beq.n	8023b0c <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8023afc:	4b07      	ldr	r3, [pc, #28]	; (8023b1c <np_send_error+0x44>)
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	f107 020c 	add.w	r2, r7, #12
 8023b06:	6979      	ldr	r1, [r7, #20]
 8023b08:	4610      	mov	r0, r2
 8023b0a:	4798      	blx	r3

    return 0;
 8023b0c:	2300      	movs	r3, #0
}
 8023b0e:	4618      	mov	r0, r3
 8023b10:	3718      	adds	r7, #24
 8023b12:	46bd      	mov	sp, r7
 8023b14:	bd80      	pop	{r7, pc}
 8023b16:	bf00      	nop
 8023b18:	08032120 	.word	0x08032120
 8023b1c:	20000cb8 	.word	0x20000cb8

08023b20 <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8023b20:	b580      	push	{r7, lr}
 8023b22:	b08a      	sub	sp, #40	; 0x28
 8023b24:	af00      	add	r7, sp, #0
 8023b26:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8023b2a:	607a      	str	r2, [r7, #4]
 8023b2c:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8023b2e:	78fb      	ldrb	r3, [r7, #3]
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d001      	beq.n	8023b38 <np_send_bad_block_info+0x18>
 8023b34:	2304      	movs	r3, #4
 8023b36:	e000      	b.n	8023b3a <np_send_bad_block_info+0x1a>
 8023b38:	2302      	movs	r3, #2
 8023b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8023b3e:	2301      	movs	r3, #1
 8023b40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8023b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023b48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8023b4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023b4e:	82bb      	strh	r3, [r7, #20]
 8023b50:	f107 0318 	add.w	r3, r7, #24
 8023b54:	3b02      	subs	r3, #2
 8023b56:	68ba      	ldr	r2, [r7, #8]
 8023b58:	601a      	str	r2, [r3, #0]
 8023b5a:	68fa      	ldr	r2, [r7, #12]
 8023b5c:	605a      	str	r2, [r3, #4]
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8023b64:	4b09      	ldr	r3, [pc, #36]	; (8023b8c <np_send_bad_block_info+0x6c>)
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	f107 0214 	add.w	r2, r7, #20
 8023b6e:	210e      	movs	r1, #14
 8023b70:	4610      	mov	r0, r2
 8023b72:	4798      	blx	r3
 8023b74:	4603      	mov	r3, r0
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d002      	beq.n	8023b80 <np_send_bad_block_info+0x60>
        return -1;
 8023b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8023b7e:	e000      	b.n	8023b82 <np_send_bad_block_info+0x62>

    return 0;
 8023b80:	2300      	movs	r3, #0
}
 8023b82:	4618      	mov	r0, r3
 8023b84:	3728      	adds	r7, #40	; 0x28
 8023b86:	46bd      	mov	sp, r7
 8023b88:	bd80      	pop	{r7, pc}
 8023b8a:	bf00      	nop
 8023b8c:	20000cb8 	.word	0x20000cb8

08023b90 <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8023b90:	b580      	push	{r7, lr}
 8023b92:	b086      	sub	sp, #24
 8023b94:	af00      	add	r7, sp, #0
 8023b96:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8023b9a:	4b0f      	ldr	r3, [pc, #60]	; (8023bd8 <np_send_progress+0x48>)
 8023b9c:	881b      	ldrh	r3, [r3, #0]
 8023b9e:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8023ba0:	8abb      	ldrh	r3, [r7, #20]
 8023ba2:	813b      	strh	r3, [r7, #8]
 8023ba4:	f107 0308 	add.w	r3, r7, #8
 8023ba8:	3302      	adds	r3, #2
 8023baa:	683a      	ldr	r2, [r7, #0]
 8023bac:	601a      	str	r2, [r3, #0]
 8023bae:	687a      	ldr	r2, [r7, #4]
 8023bb0:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8023bb2:	4b0a      	ldr	r3, [pc, #40]	; (8023bdc <np_send_progress+0x4c>)
 8023bb4:	681b      	ldr	r3, [r3, #0]
 8023bb6:	681b      	ldr	r3, [r3, #0]
 8023bb8:	f107 0208 	add.w	r2, r7, #8
 8023bbc:	210a      	movs	r1, #10
 8023bbe:	4610      	mov	r0, r2
 8023bc0:	4798      	blx	r3
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	d002      	beq.n	8023bce <np_send_progress+0x3e>
        return -1;
 8023bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8023bcc:	e000      	b.n	8023bd0 <np_send_progress+0x40>

    return 0;
 8023bce:	2300      	movs	r3, #0
}
 8023bd0:	4618      	mov	r0, r3
 8023bd2:	3718      	adds	r7, #24
 8023bd4:	46bd      	mov	sp, r7
 8023bd6:	bd80      	pop	{r7, pc}
 8023bd8:	08032124 	.word	0x08032124
 8023bdc:	20000cb8 	.word	0x20000cb8

08023be0 <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8023be0:	b5b0      	push	{r4, r5, r7, lr}
 8023be2:	b08a      	sub	sp, #40	; 0x28
 8023be4:	af04      	add	r7, sp, #16
 8023be6:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8023be8:	2308      	movs	r3, #8
 8023bea:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8023bec:	481d      	ldr	r0, [pc, #116]	; (8023c64 <_np_cmd_nand_read_id+0x84>)
 8023bee:	f00d fa85 	bl	80310fc <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8023bf6:	697b      	ldr	r3, [r7, #20]
 8023bf8:	b2db      	uxtb	r3, r3
 8023bfa:	3b02      	subs	r3, #2
 8023bfc:	b2db      	uxtb	r3, r3
 8023bfe:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8023c00:	687b      	ldr	r3, [r7, #4]
 8023c02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023c06:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023c0a:	461a      	mov	r2, r3
 8023c0c:	4b16      	ldr	r3, [pc, #88]	; (8023c68 <_np_cmd_nand_read_id+0x88>)
 8023c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023c12:	689b      	ldr	r3, [r3, #8]
 8023c14:	f107 020c 	add.w	r2, r7, #12
 8023c18:	3202      	adds	r2, #2
 8023c1a:	4610      	mov	r0, r2
 8023c1c:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8023c1e:	4b13      	ldr	r3, [pc, #76]	; (8023c6c <_np_cmd_nand_read_id+0x8c>)
 8023c20:	681b      	ldr	r3, [r3, #0]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d007      	beq.n	8023c36 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8023c26:	4b11      	ldr	r3, [pc, #68]	; (8023c6c <_np_cmd_nand_read_id+0x8c>)
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	f107 020c 	add.w	r2, r7, #12
 8023c30:	6979      	ldr	r1, [r7, #20]
 8023c32:	4610      	mov	r0, r2
 8023c34:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023c36:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023c38:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023c3a:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023c3c:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023c3e:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023c40:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8023c42:	7c7b      	ldrb	r3, [r7, #17]
 8023c44:	7cba      	ldrb	r2, [r7, #18]
 8023c46:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023c48:	9102      	str	r1, [sp, #8]
 8023c4a:	9201      	str	r2, [sp, #4]
 8023c4c:	9300      	str	r3, [sp, #0]
 8023c4e:	462b      	mov	r3, r5
 8023c50:	4622      	mov	r2, r4
 8023c52:	4601      	mov	r1, r0
 8023c54:	4806      	ldr	r0, [pc, #24]	; (8023c70 <_np_cmd_nand_read_id+0x90>)
 8023c56:	f00d f9eb 	bl	8031030 <iprintf>

    return 0;
 8023c5a:	2300      	movs	r3, #0
}
 8023c5c:	4618      	mov	r0, r3
 8023c5e:	3718      	adds	r7, #24
 8023c60:	46bd      	mov	sp, r7
 8023c62:	bdb0      	pop	{r4, r5, r7, pc}
 8023c64:	08032128 	.word	0x08032128
 8023c68:	20000040 	.word	0x20000040
 8023c6c:	20000cb8 	.word	0x20000cb8
 8023c70:	0803213c 	.word	0x0803213c

08023c74 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8023c74:	b580      	push	{r7, lr}
 8023c76:	b084      	sub	sp, #16
 8023c78:	af00      	add	r7, sp, #0
 8023c7a:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8023c7c:	2001      	movs	r0, #1
 8023c7e:	f7ff fd83 	bl	8023788 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8023c82:	6878      	ldr	r0, [r7, #4]
 8023c84:	f7ff ffac 	bl	8023be0 <_np_cmd_nand_read_id>
 8023c88:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8023c8a:	2000      	movs	r0, #0
 8023c8c:	f7ff fd7c 	bl	8023788 <led_rd_set>

    return ret;
 8023c90:	68fb      	ldr	r3, [r7, #12]
}
 8023c92:	4618      	mov	r0, r3
 8023c94:	3710      	adds	r7, #16
 8023c96:	46bd      	mov	sp, r7
 8023c98:	bd80      	pop	{r7, pc}
	...

08023c9c <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8023c9c:	b5b0      	push	{r4, r5, r7, lr}
 8023c9e:	b08a      	sub	sp, #40	; 0x28
 8023ca0:	af00      	add	r7, sp, #0
 8023ca2:	60f8      	str	r0, [r7, #12]
 8023ca4:	60b9      	str	r1, [r7, #8]
 8023ca6:	607a      	str	r2, [r7, #4]
 8023ca8:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cb0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023cb4:	68ba      	ldr	r2, [r7, #8]
 8023cb6:	fb02 f303 	mul.w	r3, r2, r3
 8023cba:	2200      	movs	r2, #0
 8023cbc:	461c      	mov	r4, r3
 8023cbe:	4615      	mov	r5, r2
 8023cc0:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023cc4:	68fb      	ldr	r3, [r7, #12]
 8023cc6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cca:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8023cce:	68fa      	ldr	r2, [r7, #12]
 8023cd0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023cd4:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023cd8:	4413      	add	r3, r2
 8023cda:	3338      	adds	r3, #56	; 0x38
 8023cdc:	68fa      	ldr	r2, [r7, #12]
 8023cde:	4413      	add	r3, r2
 8023ce0:	3304      	adds	r3, #4
 8023ce2:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cea:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023cee:	461a      	mov	r2, r3
 8023cf0:	4b35      	ldr	r3, [pc, #212]	; (8023dc8 <np_read_bad_block_info_from_page+0x12c>)
 8023cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023cf6:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8023cf8:	68fb      	ldr	r3, [r7, #12]
 8023cfa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cfe:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023d02:	461a      	mov	r2, r3
 8023d04:	2301      	movs	r3, #1
 8023d06:	6879      	ldr	r1, [r7, #4]
 8023d08:	6978      	ldr	r0, [r7, #20]
 8023d0a:	47a0      	blx	r4
 8023d0c:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8023d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d10:	2b04      	cmp	r3, #4
 8023d12:	d11a      	bne.n	8023d4a <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023d14:	68fb      	ldr	r3, [r7, #12]
 8023d16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023d1a:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023d1e:	461a      	mov	r2, r3
 8023d20:	4b29      	ldr	r3, [pc, #164]	; (8023dc8 <np_read_bad_block_info_from_page+0x12c>)
 8023d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023d26:	691b      	ldr	r3, [r3, #16]
 8023d28:	68fa      	ldr	r2, [r7, #12]
 8023d2a:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8023d2e:	68fa      	ldr	r2, [r7, #12]
 8023d30:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023d34:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8023d38:	68fa      	ldr	r2, [r7, #12]
 8023d3a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023d3e:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023d42:	440a      	add	r2, r1
 8023d44:	6879      	ldr	r1, [r7, #4]
 8023d46:	4798      	blx	r3
 8023d48:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8023d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d4c:	2b03      	cmp	r3, #3
 8023d4e:	d010      	beq.n	8023d72 <np_read_bad_block_info_from_page+0xd6>
 8023d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d52:	2b03      	cmp	r3, #3
 8023d54:	d815      	bhi.n	8023d82 <np_read_bad_block_info_from_page+0xe6>
 8023d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d58:	2b00      	cmp	r3, #0
 8023d5a:	d018      	beq.n	8023d8e <np_read_bad_block_info_from_page+0xf2>
 8023d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d5e:	2b02      	cmp	r3, #2
 8023d60:	d10f      	bne.n	8023d82 <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8023d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023d66:	4819      	ldr	r0, [pc, #100]	; (8023dcc <np_read_bad_block_info_from_page+0x130>)
 8023d68:	f00d f962 	bl	8031030 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8023d6c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023d70:	e025      	b.n	8023dbe <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8023d72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023d76:	4816      	ldr	r0, [pc, #88]	; (8023dd0 <np_read_bad_block_info_from_page+0x134>)
 8023d78:	f00d f95a 	bl	8031030 <iprintf>
        return NP_ERR_NAND_RD;
 8023d7c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023d80:	e01d      	b.n	8023dbe <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8023d82:	4814      	ldr	r0, [pc, #80]	; (8023dd4 <np_read_bad_block_info_from_page+0x138>)
 8023d84:	f00d f9ba 	bl	80310fc <puts>
        return NP_ERR_NAND_RD;
 8023d88:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023d8c:	e017      	b.n	8023dbe <np_read_bad_block_info_from_page+0x122>
        break;
 8023d8e:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023d96:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023d9a:	68fa      	ldr	r2, [r7, #12]
 8023d9c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023da0:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023da4:	4413      	add	r3, r2
 8023da6:	68fa      	ldr	r2, [r7, #12]
 8023da8:	4413      	add	r3, r2
 8023daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023dae:	2bff      	cmp	r3, #255	; 0xff
 8023db0:	bf14      	ite	ne
 8023db2:	2301      	movne	r3, #1
 8023db4:	2300      	moveq	r3, #0
 8023db6:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023db8:	683b      	ldr	r3, [r7, #0]
 8023dba:	701a      	strb	r2, [r3, #0]

    return 0;
 8023dbc:	2300      	movs	r3, #0
}
 8023dbe:	4618      	mov	r0, r3
 8023dc0:	3728      	adds	r7, #40	; 0x28
 8023dc2:	46bd      	mov	sp, r7
 8023dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8023dc6:	bf00      	nop
 8023dc8:	20000040 	.word	0x20000040
 8023dcc:	08032168 	.word	0x08032168
 8023dd0:	0803219c 	.word	0x0803219c
 8023dd4:	080321c4 	.word	0x080321c4

08023dd8 <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8023dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8023ddc:	b088      	sub	sp, #32
 8023dde:	af00      	add	r7, sp, #0
 8023de0:	6078      	str	r0, [r7, #4]
 8023de2:	460b      	mov	r3, r1
 8023de4:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023dec:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023df0:	461a      	mov	r2, r3
 8023df2:	4b40      	ldr	r3, [pc, #256]	; (8023ef4 <_np_cmd_read_bad_blocks+0x11c>)
 8023df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023df8:	6a1b      	ldr	r3, [r3, #32]
 8023dfa:	4798      	blx	r3
 8023dfc:	4603      	mov	r3, r0
 8023dfe:	f083 0301 	eor.w	r3, r3, #1
 8023e02:	b2db      	uxtb	r3, r3
 8023e04:	2b00      	cmp	r3, #0
 8023e06:	d16a      	bne.n	8023ede <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8023e0e:	3330      	adds	r3, #48	; 0x30
 8023e10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e1a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023e1e:	2200      	movs	r2, #0
 8023e20:	4698      	mov	r8, r3
 8023e22:	4691      	mov	r9, r2
 8023e24:	4642      	mov	r2, r8
 8023e26:	464b      	mov	r3, r9
 8023e28:	f7fe fa22 	bl	8022270 <__aeabi_uldivmod>
 8023e2c:	4602      	mov	r2, r0
 8023e2e:	460b      	mov	r3, r1
 8023e30:	4613      	mov	r3, r2
 8023e32:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e3a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e44:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8023e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8023e4c:	617b      	str	r3, [r7, #20]
    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */

    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8023e4e:	2300      	movs	r3, #0
 8023e50:	61fb      	str	r3, [r7, #28]
 8023e52:	e03f      	b.n	8023ed4 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8023e54:	69fb      	ldr	r3, [r7, #28]
 8023e56:	697a      	ldr	r2, [r7, #20]
 8023e58:	fb02 f303 	mul.w	r3, r2, r3
 8023e5c:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8023e5e:	78fb      	ldrb	r3, [r7, #3]
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d007      	beq.n	8023e74 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8023e64:	693b      	ldr	r3, [r7, #16]
 8023e66:	2200      	movs	r2, #0
 8023e68:	461c      	mov	r4, r3
 8023e6a:	4615      	mov	r5, r2
 8023e6c:	4620      	mov	r0, r4
 8023e6e:	4629      	mov	r1, r5
 8023e70:	f7ff fe8e 	bl	8023b90 <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8023e74:	f107 030b 	add.w	r3, r7, #11
 8023e78:	693a      	ldr	r2, [r7, #16]
 8023e7a:	69f9      	ldr	r1, [r7, #28]
 8023e7c:	6878      	ldr	r0, [r7, #4]
 8023e7e:	f7ff ff0d 	bl	8023c9c <np_read_bad_block_info_from_page>
 8023e82:	60f8      	str	r0, [r7, #12]
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d001      	beq.n	8023e8e <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8023e8a:	68fb      	ldr	r3, [r7, #12]
 8023e8c:	e02c      	b.n	8023ee8 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8023e8e:	7afb      	ldrb	r3, [r7, #11]
 8023e90:	f083 0301 	eor.w	r3, r3, #1
 8023e94:	b2db      	uxtb	r3, r3
 8023e96:	2b00      	cmp	r3, #0
 8023e98:	d00d      	beq.n	8023eb6 <_np_cmd_read_bad_blocks+0xde>
 8023e9a:	693b      	ldr	r3, [r7, #16]
 8023e9c:	1c5a      	adds	r2, r3, #1
 8023e9e:	f107 030b 	add.w	r3, r7, #11
 8023ea2:	69f9      	ldr	r1, [r7, #28]
 8023ea4:	6878      	ldr	r0, [r7, #4]
 8023ea6:	f7ff fef9 	bl	8023c9c <np_read_bad_block_info_from_page>
 8023eaa:	60f8      	str	r0, [r7, #12]
 8023eac:	68fb      	ldr	r3, [r7, #12]
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	d001      	beq.n	8023eb6 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8023eb2:	68fb      	ldr	r3, [r7, #12]
 8023eb4:	e018      	b.n	8023ee8 <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8023eb6:	7afb      	ldrb	r3, [r7, #11]
 8023eb8:	2b00      	cmp	r3, #0
 8023eba:	d008      	beq.n	8023ece <_np_cmd_read_bad_blocks+0xf6>
 8023ebc:	6938      	ldr	r0, [r7, #16]
 8023ebe:	f7ff fd67 	bl	8023990 <nand_bad_block_table_add>
 8023ec2:	4603      	mov	r3, r0
 8023ec4:	2b00      	cmp	r3, #0
 8023ec6:	d002      	beq.n	8023ece <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8023ec8:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8023ecc:	e00c      	b.n	8023ee8 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8023ece:	69fb      	ldr	r3, [r7, #28]
 8023ed0:	3301      	adds	r3, #1
 8023ed2:	61fb      	str	r3, [r7, #28]
 8023ed4:	69fa      	ldr	r2, [r7, #28]
 8023ed6:	69bb      	ldr	r3, [r7, #24]
 8023ed8:	429a      	cmp	r2, r3
 8023eda:	d3bb      	bcc.n	8023e54 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8023edc:	e000      	b.n	8023ee0 <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 8023ede:	bf00      	nop
    prog->bb_is_read = 1;
 8023ee0:	687b      	ldr	r3, [r7, #4]
 8023ee2:	2201      	movs	r2, #1
 8023ee4:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8023ee6:	2300      	movs	r3, #0
}
 8023ee8:	4618      	mov	r0, r3
 8023eea:	3720      	adds	r7, #32
 8023eec:	46bd      	mov	sp, r7
 8023eee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8023ef2:	bf00      	nop
 8023ef4:	20000040 	.word	0x20000040

08023ef8 <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8023ef8:	b580      	push	{r7, lr}
 8023efa:	b086      	sub	sp, #24
 8023efc:	af00      	add	r7, sp, #0
 8023efe:	6078      	str	r0, [r7, #4]
 8023f00:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8023f02:	6879      	ldr	r1, [r7, #4]
 8023f04:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8023f08:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8023f0c:	6838      	ldr	r0, [r7, #0]
 8023f0e:	fb00 f101 	mul.w	r1, r0, r1
 8023f12:	2000      	movs	r0, #0
 8023f14:	460a      	mov	r2, r1
 8023f16:	4603      	mov	r3, r0
 8023f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND擦除地址：0x%" PRIx64 "\r\n", addr);
 8023f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023f20:	481f      	ldr	r0, [pc, #124]	; (8023fa0 <np_nand_erase+0xa8>)
 8023f22:	f00d f885 	bl	8031030 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023f2c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023f30:	461a      	mov	r2, r3
 8023f32:	4b1c      	ldr	r3, [pc, #112]	; (8023fa4 <np_nand_erase+0xac>)
 8023f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023f38:	68db      	ldr	r3, [r3, #12]
 8023f3a:	6838      	ldr	r0, [r7, #0]
 8023f3c:	4798      	blx	r3
 8023f3e:	60f8      	str	r0, [r7, #12]
    switch (status)
 8023f40:	68fb      	ldr	r3, [r7, #12]
 8023f42:	2b03      	cmp	r3, #3
 8023f44:	d018      	beq.n	8023f78 <np_nand_erase+0x80>
 8023f46:	68fb      	ldr	r3, [r7, #12]
 8023f48:	2b03      	cmp	r3, #3
 8023f4a:	d81b      	bhi.n	8023f84 <np_nand_erase+0x8c>
 8023f4c:	68fb      	ldr	r3, [r7, #12]
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	d01e      	beq.n	8023f90 <np_nand_erase+0x98>
 8023f52:	68fb      	ldr	r3, [r7, #12]
 8023f54:	2b02      	cmp	r3, #2
 8023f56:	d115      	bne.n	8023f84 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023f5e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8023f62:	2300      	movs	r3, #0
 8023f64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8023f68:	f7ff fdda 	bl	8023b20 <np_send_bad_block_info>
 8023f6c:	4603      	mov	r3, r0
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d010      	beq.n	8023f94 <np_nand_erase+0x9c>
            return -1;
 8023f72:	f04f 33ff 	mov.w	r3, #4294967295
 8023f76:	e00f      	b.n	8023f98 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND擦除超时，地址：0x%" PRIx64 "\r\n", addr);
 8023f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8023f7c:	480a      	ldr	r0, [pc, #40]	; (8023fa8 <np_nand_erase+0xb0>)
 8023f7e:	f00d f857 	bl	8031030 <iprintf>
        break;
 8023f82:	e008      	b.n	8023f96 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8023f84:	4809      	ldr	r0, [pc, #36]	; (8023fac <np_nand_erase+0xb4>)
 8023f86:	f00d f8b9 	bl	80310fc <puts>
        return -1;
 8023f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8023f8e:	e003      	b.n	8023f98 <np_nand_erase+0xa0>
        break;
 8023f90:	bf00      	nop
 8023f92:	e000      	b.n	8023f96 <np_nand_erase+0x9e>
        break;
 8023f94:	bf00      	nop
    }

    return 0;
 8023f96:	2300      	movs	r3, #0
}
 8023f98:	4618      	mov	r0, r3
 8023f9a:	3718      	adds	r7, #24
 8023f9c:	46bd      	mov	sp, r7
 8023f9e:	bd80      	pop	{r7, pc}
 8023fa0:	080321e0 	.word	0x080321e0
 8023fa4:	20000040 	.word	0x20000040
 8023fa8:	080321fc 	.word	0x080321fc
 8023fac:	08032228 	.word	0x08032228

08023fb0 <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 8023fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023fb4:	b0ac      	sub	sp, #176	; 0xb0
 8023fb6:	af04      	add	r7, sp, #16
 8023fb8:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 8023fba:	2300      	movs	r3, #0
 8023fbc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 8023fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023fc2:	685b      	ldr	r3, [r3, #4]
 8023fc4:	2b11      	cmp	r3, #17
 8023fc6:	d808      	bhi.n	8023fda <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("擦除命令的缓冲区长度错误：%lu\r\n",
 8023fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023fca:	685b      	ldr	r3, [r3, #4]
 8023fcc:	4619      	mov	r1, r3
 8023fce:	48b0      	ldr	r0, [pc, #704]	; (8024290 <_np_cmd_nand_erase+0x2e0>)
 8023fd0:	f00d f82e 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8023fd4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8023fd8:	e1c0      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 8023fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023fdc:	681b      	ldr	r3, [r3, #0]
 8023fde:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 8023fe0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023fe2:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8023fe6:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8023fea:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8023fee:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8023ff2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 8023ff6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8023ff8:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8023ffc:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024000:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 8024004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024006:	7c5b      	ldrb	r3, [r3, #17]
 8024008:	f3c3 0300 	ubfx	r3, r3, #0, #1
 802400c:	b2db      	uxtb	r3, r3
 802400e:	2b00      	cmp	r3, #0
 8024010:	bf14      	ite	ne
 8024012:	2301      	movne	r3, #1
 8024014:	2300      	moveq	r3, #0
 8024016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 802401a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802401c:	7c5b      	ldrb	r3, [r3, #17]
 802401e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8024022:	b2db      	uxtb	r3, r3
 8024024:	2b00      	cmp	r3, #0
 8024026:	bf14      	ite	ne
 8024028:	2301      	movne	r3, #1
 802402a:	2300      	moveq	r3, #0
 802402c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("擦除地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n", addr,
 8024030:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024034:	e9cd 2300 	strd	r2, r3, [sp]
 8024038:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802403c:	4895      	ldr	r0, [pc, #596]	; (8024294 <_np_cmd_nand_erase+0x2e4>)
 802403e:	f00c fff7 	bl	8031030 <iprintf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 8024042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024044:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024048:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802404e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024052:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024056:	fbb2 f3f3 	udiv	r3, r2, r3
 802405a:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 802405c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8024060:	2b00      	cmp	r3, #0
 8024062:	d03f      	beq.n	80240e4 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024066:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802406a:	3330      	adds	r3, #48	; 0x30
 802406c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024072:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024076:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802407a:	2200      	movs	r2, #0
 802407c:	64bb      	str	r3, [r7, #72]	; 0x48
 802407e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8024080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024084:	f7fe f8f4 	bl	8022270 <__aeabi_uldivmod>
 8024088:	4602      	mov	r2, r0
 802408a:	460b      	mov	r3, r1
 802408c:	4613      	mov	r3, r2
 802408e:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024092:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024096:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 802409a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802409c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80240a0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80240a4:	4413      	add	r3, r2
 80240a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 80240aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80240ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240b0:	fb02 f303 	mul.w	r3, r2, r3
 80240b4:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 80240b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80240b8:	2200      	movs	r2, #0
 80240ba:	469a      	mov	sl, r3
 80240bc:	4693      	mov	fp, r2
 80240be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80240c2:	2200      	movs	r2, #0
 80240c4:	4698      	mov	r8, r3
 80240c6:	4691      	mov	r9, r2
 80240c8:	fb08 f20b 	mul.w	r2, r8, fp
 80240cc:	fb0a f309 	mul.w	r3, sl, r9
 80240d0:	4413      	add	r3, r2
 80240d2:	fbaa 4508 	umull	r4, r5, sl, r8
 80240d6:	442b      	add	r3, r5
 80240d8:	461d      	mov	r5, r3
 80240da:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80240de:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80240e2:	e014      	b.n	802410e <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 80240e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80240ea:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80240ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 80240f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80240f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80240fc:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 80240fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024100:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024104:	3330      	adds	r3, #48	; 0x30
 8024106:	e9d3 2300 	ldrd	r2, r3, [r3]
 802410a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog, false)))
 802410e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024112:	2b00      	cmp	r3, #0
 8024114:	d00d      	beq.n	8024132 <_np_cmd_nand_erase+0x182>
 8024116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802411a:	2b00      	cmp	r3, #0
 802411c:	d109      	bne.n	8024132 <_np_cmd_nand_erase+0x182>
 802411e:	2100      	movs	r1, #0
 8024120:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024122:	f7ff fe59 	bl	8023dd8 <_np_cmd_read_bad_blocks>
 8024126:	65b8      	str	r0, [r7, #88]	; 0x58
 8024128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802412a:	2b00      	cmp	r3, #0
 802412c:	d001      	beq.n	8024132 <_np_cmd_nand_erase+0x182>
    {
        return ret;
 802412e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024130:	e114      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 8024132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024134:	2200      	movs	r2, #0
 8024136:	643b      	str	r3, [r7, #64]	; 0x40
 8024138:	647a      	str	r2, [r7, #68]	; 0x44
 802413a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802413e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024142:	f7fe f895 	bl	8022270 <__aeabi_uldivmod>
 8024146:	4313      	orrs	r3, r2
 8024148:	d009      	beq.n	802415e <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到块大小0x%lx\r\n", addr, block_size);
 802414a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802414c:	9300      	str	r3, [sp, #0]
 802414e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024152:	4851      	ldr	r0, [pc, #324]	; (8024298 <_np_cmd_nand_erase+0x2e8>)
 8024154:	f00c ff6c 	bl	8031030 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8024158:	f06f 0365 	mvn.w	r3, #101	; 0x65
 802415c:	e0fe      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 802415e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024162:	4313      	orrs	r3, r2
 8024164:	d105      	bne.n	8024172 <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("长度为零\r\n");
 8024166:	484d      	ldr	r0, [pc, #308]	; (802429c <_np_cmd_nand_erase+0x2ec>)
 8024168:	f00c ffc8 	bl	80310fc <puts>
        return NP_ERR_LEN_INVALID;
 802416c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024170:	e0f4      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 8024172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024174:	2200      	movs	r2, #0
 8024176:	63bb      	str	r3, [r7, #56]	; 0x38
 8024178:	63fa      	str	r2, [r7, #60]	; 0x3c
 802417a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 802417e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024182:	f7fe f875 	bl	8022270 <__aeabi_uldivmod>
 8024186:	4313      	orrs	r3, r2
 8024188:	d009      	beq.n	802419e <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到块大小0x%lx\r\n", len, block_size);
 802418a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802418c:	9300      	str	r3, [sp, #0]
 802418e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024192:	4843      	ldr	r0, [pc, #268]	; (80242a0 <_np_cmd_nand_erase+0x2f0>)
 8024194:	f00c ff4c 	bl	8031030 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 8024198:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802419c:	e0de      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 802419e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80241a2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80241a6:	1884      	adds	r4, r0, r2
 80241a8:	633c      	str	r4, [r7, #48]	; 0x30
 80241aa:	eb41 0303 	adc.w	r3, r1, r3
 80241ae:	637b      	str	r3, [r7, #52]	; 0x34
 80241b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80241b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80241b8:	4621      	mov	r1, r4
 80241ba:	428a      	cmp	r2, r1
 80241bc:	4629      	mov	r1, r5
 80241be:	418b      	sbcs	r3, r1
 80241c0:	d20f      	bcs.n	80241e2 <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("擦除地址超出范围：0x%" PRIx64 "+0x%" PRIx64 "大于芯片大小0x%" PRIx64 "\r\n", addr, len, total_size);
 80241c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80241c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80241ca:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80241ce:	e9cd 2300 	strd	r2, r3, [sp]
 80241d2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80241d6:	4833      	ldr	r0, [pc, #204]	; (80242a4 <_np_cmd_nand_erase+0x2f4>)
 80241d8:	f00c ff2a 	bl	8031030 <iprintf>
        return NP_ERR_ADDR_EXCEEDED;
 80241dc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80241e0:	e0bc      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 80241e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241e6:	2200      	movs	r2, #0
 80241e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80241ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80241ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80241f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80241f4:	f7fe f83c 	bl	8022270 <__aeabi_uldivmod>
 80241f8:	4602      	mov	r2, r0
 80241fa:	460b      	mov	r3, r1
 80241fc:	4613      	mov	r3, r2
 80241fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 8024202:	e0a3      	b.n	802434c <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 8024204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024208:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802420c:	4290      	cmp	r0, r2
 802420e:	eb71 0303 	sbcs.w	r3, r1, r3
 8024212:	d30b      	bcc.n	802422c <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("擦除地址0x%" PRIx64 "超出范围：0x%" PRIx64 "\r\n", addr, total_size);
 8024214:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024218:	e9cd 2300 	strd	r2, r3, [sp]
 802421c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024220:	4821      	ldr	r0, [pc, #132]	; (80242a8 <_np_cmd_nand_erase+0x2f8>)
 8024222:	f00c ff05 	bl	8031030 <iprintf>
            return NP_ERR_ADDR_EXCEEDED;
 8024226:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802422a:	e097      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 802422c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8024230:	2b00      	cmp	r3, #0
 8024232:	d01b      	beq.n	802426c <_np_cmd_nand_erase+0x2bc>
 8024234:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8024238:	f7ff fbca 	bl	80239d0 <nand_bad_block_table_lookup>
 802423c:	4603      	mov	r3, r0
 802423e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8024242:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024246:	2b00      	cmp	r3, #0
 8024248:	d010      	beq.n	802426c <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", addr);
 802424a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802424e:	4817      	ldr	r0, [pc, #92]	; (80242ac <_np_cmd_nand_erase+0x2fc>)
 8024250:	f00c feee 	bl	8031030 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8024254:	2301      	movs	r3, #1
 8024256:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802425c:	f7ff fc60 	bl	8023b20 <np_send_bad_block_info>
 8024260:	4603      	mov	r3, r0
 8024262:	2b00      	cmp	r3, #0
 8024264:	d002      	beq.n	802426c <_np_cmd_nand_erase+0x2bc>
                return -1;
 8024266:	f04f 33ff 	mov.w	r3, #4294967295
 802426a:	e077      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 802426c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024270:	f083 0301 	eor.w	r3, r3, #1
 8024274:	b2db      	uxtb	r3, r3
 8024276:	2b00      	cmp	r3, #0
 8024278:	d01a      	beq.n	80242b0 <_np_cmd_nand_erase+0x300>
 802427a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 802427e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8024280:	f7ff fe3a 	bl	8023ef8 <np_nand_erase>
 8024284:	4603      	mov	r3, r0
 8024286:	2b00      	cmp	r3, #0
 8024288:	d012      	beq.n	80242b0 <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 802428a:	f06f 0368 	mvn.w	r3, #104	; 0x68
 802428e:	e065      	b.n	802435c <_np_cmd_nand_erase+0x3ac>
 8024290:	08032244 	.word	0x08032244
 8024294:	08032278 	.word	0x08032278
 8024298:	080322a8 	.word	0x080322a8
 802429c:	080322d8 	.word	0x080322d8
 80242a0:	080322f0 	.word	0x080322f0
 80242a4:	08032320 	.word	0x08032320
 80242a8:	0803236c 	.word	0x0803236c
 80242ac:	080323a0 	.word	0x080323a0

        addr += block_size;
 80242b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80242b2:	2200      	movs	r2, #0
 80242b4:	623b      	str	r3, [r7, #32]
 80242b6:	627a      	str	r2, [r7, #36]	; 0x24
 80242b8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80242bc:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80242c0:	4621      	mov	r1, r4
 80242c2:	1851      	adds	r1, r2, r1
 80242c4:	60b9      	str	r1, [r7, #8]
 80242c6:	4629      	mov	r1, r5
 80242c8:	414b      	adcs	r3, r1
 80242ca:	60fb      	str	r3, [r7, #12]
 80242cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80242d0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 80242d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80242d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80242da:	4413      	add	r3, r2
 80242dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 80242e0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80242e4:	f083 0301 	eor.w	r3, r3, #1
 80242e8:	b2db      	uxtb	r3, r3
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d10e      	bne.n	802430c <_np_cmd_nand_erase+0x35c>
 80242ee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	d01d      	beq.n	8024332 <_np_cmd_nand_erase+0x382>
 80242f6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80242f8:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80242fc:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024300:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8024304:	4299      	cmp	r1, r3
 8024306:	bf08      	it	eq
 8024308:	4290      	cmpeq	r0, r2
 802430a:	d112      	bne.n	8024332 <_np_cmd_nand_erase+0x382>
            len -= block_size;
 802430c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802430e:	2200      	movs	r2, #0
 8024310:	61bb      	str	r3, [r7, #24]
 8024312:	61fa      	str	r2, [r7, #28]
 8024314:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024318:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 802431c:	4621      	mov	r1, r4
 802431e:	1a51      	subs	r1, r2, r1
 8024320:	6039      	str	r1, [r7, #0]
 8024322:	4629      	mov	r1, r5
 8024324:	eb63 0301 	sbc.w	r3, r3, r1
 8024328:	607b      	str	r3, [r7, #4]
 802432a:	e9d7 3400 	ldrd	r3, r4, [r7]
 802432e:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 8024332:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8024336:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802433a:	1a84      	subs	r4, r0, r2
 802433c:	613c      	str	r4, [r7, #16]
 802433e:	eb61 0303 	sbc.w	r3, r1, r3
 8024342:	617b      	str	r3, [r7, #20]
 8024344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024348:	f7ff fc22 	bl	8023b90 <np_send_progress>
    while (len)
 802434c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024350:	4313      	orrs	r3, r2
 8024352:	f47f af57 	bne.w	8024204 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8024356:	f7ff fba3 	bl	8023aa0 <np_send_ok_status>
 802435a:	4603      	mov	r3, r0
}
 802435c:	4618      	mov	r0, r3
 802435e:	37a0      	adds	r7, #160	; 0xa0
 8024360:	46bd      	mov	sp, r7
 8024362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024366:	bf00      	nop

08024368 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8024368:	b580      	push	{r7, lr}
 802436a:	b084      	sub	sp, #16
 802436c:	af00      	add	r7, sp, #0
 802436e:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 8024370:	2001      	movs	r0, #1
 8024372:	f7ff f9f7 	bl	8023764 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 8024376:	6878      	ldr	r0, [r7, #4]
 8024378:	f7ff fe1a 	bl	8023fb0 <_np_cmd_nand_erase>
 802437c:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 802437e:	2000      	movs	r0, #0
 8024380:	f7ff f9f0 	bl	8023764 <led_wr_set>

    return ret;
 8024384:	68fb      	ldr	r3, [r7, #12]
}
 8024386:	4618      	mov	r0, r3
 8024388:	3710      	adds	r7, #16
 802438a:	46bd      	mov	sp, r7
 802438c:	bd80      	pop	{r7, pc}
	...

08024390 <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 8024390:	b580      	push	{r7, lr}
 8024392:	b086      	sub	sp, #24
 8024394:	af00      	add	r7, sp, #0
 8024396:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 802439a:	4b0f      	ldr	r3, [pc, #60]	; (80243d8 <np_send_write_ack+0x48>)
 802439c:	881b      	ldrh	r3, [r3, #0]
 802439e:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 80243a0:	8abb      	ldrh	r3, [r7, #20]
 80243a2:	813b      	strh	r3, [r7, #8]
 80243a4:	f107 0308 	add.w	r3, r7, #8
 80243a8:	3302      	adds	r3, #2
 80243aa:	683a      	ldr	r2, [r7, #0]
 80243ac:	601a      	str	r2, [r3, #0]
 80243ae:	687a      	ldr	r2, [r7, #4]
 80243b0:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 80243b2:	4b0a      	ldr	r3, [pc, #40]	; (80243dc <np_send_write_ack+0x4c>)
 80243b4:	681b      	ldr	r3, [r3, #0]
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	f107 0208 	add.w	r2, r7, #8
 80243bc:	210a      	movs	r1, #10
 80243be:	4610      	mov	r0, r2
 80243c0:	4798      	blx	r3
 80243c2:	4603      	mov	r3, r0
 80243c4:	2b00      	cmp	r3, #0
 80243c6:	d002      	beq.n	80243ce <np_send_write_ack+0x3e>
        return -1;
 80243c8:	f04f 33ff 	mov.w	r3, #4294967295
 80243cc:	e000      	b.n	80243d0 <np_send_write_ack+0x40>

    return 0;
 80243ce:	2300      	movs	r3, #0
}
 80243d0:	4618      	mov	r0, r3
 80243d2:	3718      	adds	r7, #24
 80243d4:	46bd      	mov	sp, r7
 80243d6:	bd80      	pop	{r7, pc}
 80243d8:	080323c4 	.word	0x080323c4
 80243dc:	20000cb8 	.word	0x20000cb8

080243e0 <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 80243e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80243e4:	b09a      	sub	sp, #104	; 0x68
 80243e6:	af04      	add	r7, sp, #16
 80243e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80243ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80243ec:	685b      	ldr	r3, [r3, #4]
 80243ee:	2b11      	cmp	r3, #17
 80243f0:	d808      	bhi.n	8024404 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误：%lu\r\n",
 80243f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80243f4:	685b      	ldr	r3, [r3, #4]
 80243f6:	4619      	mov	r1, r3
 80243f8:	489d      	ldr	r0, [pc, #628]	; (8024670 <np_cmd_nand_write_start+0x290>)
 80243fa:	f00c fe19 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80243fe:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024402:	e184      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 8024404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 802440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802440c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024410:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024414:	461a      	mov	r2, r3
 8024416:	4b97      	ldr	r3, [pc, #604]	; (8024674 <np_cmd_nand_write_start+0x294>)
 8024418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802441e:	2b00      	cmp	r3, #0
 8024420:	d015      	beq.n	802444e <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 8024422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024424:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024428:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802442c:	461a      	mov	r2, r3
 802442e:	4b91      	ldr	r3, [pc, #580]	; (8024674 <np_cmd_nand_write_start+0x294>)
 8024430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024438:	7c5b      	ldrb	r3, [r3, #17]
 802443a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 802443e:	b2db      	uxtb	r3, r3
 8024440:	2b00      	cmp	r3, #0
 8024442:	bf14      	ite	ne
 8024444:	2301      	movne	r3, #1
 8024446:	2300      	moveq	r3, #0
 8024448:	b2db      	uxtb	r3, r3
 802444a:	4618      	mov	r0, r3
 802444c:	4790      	blx	r2

    addr = write_start_cmd->addr;
 802444e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024450:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024454:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024458:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 802445c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802445e:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024462:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024466:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("写入地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n",
 802446a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802446e:	e9cd 2300 	strd	r2, r3, [sp]
 8024472:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024476:	4880      	ldr	r0, [pc, #512]	; (8024678 <np_cmd_nand_write_start+0x298>)
 8024478:	f00c fdda 	bl	8031030 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 802447c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802447e:	7c5b      	ldrb	r3, [r3, #17]
 8024480:	f003 0302 	and.w	r3, r3, #2
 8024484:	b2db      	uxtb	r3, r3
 8024486:	2b00      	cmp	r3, #0
 8024488:	d051      	beq.n	802452e <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 802448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802448c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024490:	3330      	adds	r3, #48	; 0x30
 8024492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024498:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802449c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80244a0:	2200      	movs	r2, #0
 80244a2:	623b      	str	r3, [r7, #32]
 80244a4:	627a      	str	r2, [r7, #36]	; 0x24
 80244a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80244aa:	f7fd fee1 	bl	8022270 <__aeabi_uldivmod>
 80244ae:	4602      	mov	r2, r0
 80244b0:	460b      	mov	r3, r1
 80244b2:	4613      	mov	r3, r2
 80244b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 80244b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244bc:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 80244c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244c6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 80244ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80244ce:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 80244d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244d6:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 80244da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244e0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 80244e4:	441a      	add	r2, r3
 80244e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244e8:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 80244ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244ec:	6a1a      	ldr	r2, [r3, #32]
 80244ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80244f0:	fb03 f202 	mul.w	r2, r3, r2
 80244f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244f6:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 80244f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80244fa:	2200      	movs	r2, #0
 80244fc:	469a      	mov	sl, r3
 80244fe:	4693      	mov	fp, r2
 8024500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024502:	6a1b      	ldr	r3, [r3, #32]
 8024504:	2200      	movs	r2, #0
 8024506:	61bb      	str	r3, [r7, #24]
 8024508:	61fa      	str	r2, [r7, #28]
 802450a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802450e:	4603      	mov	r3, r0
 8024510:	fb03 f20b 	mul.w	r2, r3, fp
 8024514:	460b      	mov	r3, r1
 8024516:	fb0a f303 	mul.w	r3, sl, r3
 802451a:	4413      	add	r3, r2
 802451c:	4602      	mov	r2, r0
 802451e:	fbaa 4502 	umull	r4, r5, sl, r2
 8024522:	442b      	add	r3, r5
 8024524:	461d      	mov	r5, r3
 8024526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024528:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 802452c:	e016      	b.n	802455c <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 802452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024530:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024534:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802453a:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 802453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802453e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024542:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024548:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 802454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802454c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024550:	3330      	adds	r3, #48	; 0x30
 8024552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024558:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 802455c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024560:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024564:	eb10 0802 	adds.w	r8, r0, r2
 8024568:	eb41 0903 	adc.w	r9, r1, r3
 802456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802456e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024572:	4542      	cmp	r2, r8
 8024574:	eb73 0309 	sbcs.w	r3, r3, r9
 8024578:	d210      	bcs.n	802459c <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("写入地址0x%" PRIx64 "+0x%" PRIx64
 802457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802457c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024580:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024584:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024588:	e9cd 2300 	strd	r2, r3, [sp]
 802458c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024590:	483a      	ldr	r0, [pc, #232]	; (802467c <np_cmd_nand_write_start+0x29c>)
 8024592:	f00c fd4d 	bl	8031030 <iprintf>
            "超出芯片大小0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024596:	f06f 0363 	mvn.w	r3, #99	; 0x63
 802459a:	e0b8      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 802459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802459e:	6a1b      	ldr	r3, [r3, #32]
 80245a0:	2200      	movs	r2, #0
 80245a2:	613b      	str	r3, [r7, #16]
 80245a4:	617a      	str	r2, [r7, #20]
 80245a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80245aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80245ae:	f7fd fe5f 	bl	8022270 <__aeabi_uldivmod>
 80245b2:	4313      	orrs	r3, r2
 80245b4:	d00a      	beq.n	80245cc <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到页大小0x%lx\r\n", addr, prog->page_size);
 80245b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245b8:	6a1b      	ldr	r3, [r3, #32]
 80245ba:	9300      	str	r3, [sp, #0]
 80245bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80245c0:	482f      	ldr	r0, [pc, #188]	; (8024680 <np_cmd_nand_write_start+0x2a0>)
 80245c2:	f00c fd35 	bl	8031030 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 80245c6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80245ca:	e0a0      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 80245cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80245d0:	4313      	orrs	r3, r2
 80245d2:	d105      	bne.n	80245e0 <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("长度为零\r\n");
 80245d4:	482b      	ldr	r0, [pc, #172]	; (8024684 <np_cmd_nand_write_start+0x2a4>)
 80245d6:	f00c fd91 	bl	80310fc <puts>
        return NP_ERR_LEN_INVALID;
 80245da:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80245de:	e096      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 80245e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245e2:	6a1b      	ldr	r3, [r3, #32]
 80245e4:	2200      	movs	r2, #0
 80245e6:	60bb      	str	r3, [r7, #8]
 80245e8:	60fa      	str	r2, [r7, #12]
 80245ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80245ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80245f2:	f7fd fe3d 	bl	8022270 <__aeabi_uldivmod>
 80245f6:	4313      	orrs	r3, r2
 80245f8:	d00a      	beq.n	8024610 <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到页大小0x%lx\r\n", len, prog->page_size);
 80245fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245fc:	6a1b      	ldr	r3, [r3, #32]
 80245fe:	9300      	str	r3, [sp, #0]
 8024600:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024604:	4820      	ldr	r0, [pc, #128]	; (8024688 <np_cmd_nand_write_start+0x2a8>)
 8024606:	f00c fd13 	bl	8031030 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 802460a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802460e:	e07e      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 8024610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024612:	7c5b      	ldrb	r3, [r3, #17]
 8024614:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024618:	b2db      	uxtb	r3, r3
 802461a:	461a      	mov	r2, r3
 802461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802461e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024622:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8024626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802462c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024630:	2b00      	cmp	r3, #0
 8024632:	d00d      	beq.n	8024650 <np_cmd_nand_write_start+0x270>
 8024634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024638:	2b00      	cmp	r3, #0
 802463a:	d109      	bne.n	8024650 <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 802463c:	2100      	movs	r1, #0
 802463e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024640:	f7ff fbca 	bl	8023dd8 <_np_cmd_read_bad_blocks>
 8024644:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8024646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024648:	2b00      	cmp	r3, #0
 802464a:	d001      	beq.n	8024650 <np_cmd_nand_write_start+0x270>
    {
        return ret;
 802464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802464e:	e05e      	b.n	802470e <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 8024650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024652:	6a1b      	ldr	r3, [r3, #32]
 8024654:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8024658:	d91a      	bls.n	8024690 <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("页大小0x%lx超过缓冲区大小0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
 802465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802465c:	6a1b      	ldr	r3, [r3, #32]
 802465e:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 8024662:	4619      	mov	r1, r3
 8024664:	4809      	ldr	r0, [pc, #36]	; (802468c <np_cmd_nand_write_start+0x2ac>)
 8024666:	f00c fce3 	bl	8031030 <iprintf>
        return NP_ERR_BUF_OVERFLOW;
 802466a:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 802466e:	e04e      	b.n	802470e <np_cmd_nand_write_start+0x32e>
 8024670:	080323c8 	.word	0x080323c8
 8024674:	20000040 	.word	0x20000040
 8024678:	08032404 	.word	0x08032404
 802467c:	08032434 	.word	0x08032434
 8024680:	08032470 	.word	0x08032470
 8024684:	080322d8 	.word	0x080322d8
 8024688:	080324a0 	.word	0x080324a0
 802468c:	080324d0 	.word	0x080324d0
    }

    // 设置写入相关的参数
    prog->addr = addr;
 8024690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024696:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 802469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802469c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80246a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80246a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246a6:	2201      	movs	r2, #1
 80246a8:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80246aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246ac:	6a1b      	ldr	r3, [r3, #32]
 80246ae:	2200      	movs	r2, #0
 80246b0:	603b      	str	r3, [r7, #0]
 80246b2:	607a      	str	r2, [r7, #4]
 80246b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80246b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80246bc:	f7fd fdd8 	bl	8022270 <__aeabi_uldivmod>
 80246c0:	4602      	mov	r2, r0
 80246c2:	460b      	mov	r3, r1
 80246c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246ca:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80246ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80246d4:	461a      	mov	r2, r3
 80246d6:	2300      	movs	r3, #0
 80246d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80246dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246de:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80246e2:	3310      	adds	r3, #16
 80246e4:	4619      	mov	r1, r3
 80246e6:	f04f 0200 	mov.w	r2, #0
 80246ea:	f04f 0300 	mov.w	r3, #0
 80246ee:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 80246f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246f4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80246f8:	3310      	adds	r3, #16
 80246fa:	4619      	mov	r1, r3
 80246fc:	f04f 0200 	mov.w	r2, #0
 8024700:	f04f 0300 	mov.w	r3, #0
 8024704:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 8024708:	f7ff f9ca 	bl	8023aa0 <np_send_ok_status>
 802470c:	4603      	mov	r3, r0
}
 802470e:	4618      	mov	r0, r3
 8024710:	3758      	adds	r7, #88	; 0x58
 8024712:	46bd      	mov	sp, r7
 8024714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08024718 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 8024718:	b580      	push	{r7, lr}
 802471a:	b082      	sub	sp, #8
 802471c:	af00      	add	r7, sp, #0
 802471e:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 8024720:	687b      	ldr	r3, [r7, #4]
 8024722:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024726:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802472a:	461a      	mov	r2, r3
 802472c:	4b37      	ldr	r3, [pc, #220]	; (802480c <np_nand_handle_status+0xf4>)
 802472e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024732:	69db      	ldr	r3, [r3, #28]
 8024734:	4798      	blx	r3
 8024736:	4603      	mov	r3, r0
 8024738:	2b02      	cmp	r3, #2
 802473a:	d006      	beq.n	802474a <np_nand_handle_status+0x32>
 802473c:	2b02      	cmp	r3, #2
 802473e:	d84b      	bhi.n	80247d8 <np_nand_handle_status+0xc0>
 8024740:	2b00      	cmp	r3, #0
 8024742:	d010      	beq.n	8024766 <np_nand_handle_status+0x4e>
 8024744:	2b01      	cmp	r3, #1
 8024746:	d01d      	beq.n	8024784 <np_nand_handle_status+0x6c>
 8024748:	e046      	b.n	80247d8 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024754:	2300      	movs	r3, #0
 8024756:	f7ff f9e3 	bl	8023b20 <np_send_bad_block_info>
 802475a:	4603      	mov	r3, r0
 802475c:	2b00      	cmp	r3, #0
 802475e:	d002      	beq.n	8024766 <np_nand_handle_status+0x4e>
            return -1;
 8024760:	f04f 33ff 	mov.w	r3, #4294967295
 8024764:	e04e      	b.n	8024804 <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802476c:	461a      	mov	r2, r3
 802476e:	2300      	movs	r3, #0
 8024770:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8024774:	687b      	ldr	r3, [r7, #4]
 8024776:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802477a:	461a      	mov	r2, r3
 802477c:	2300      	movs	r3, #0
 802477e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 8024782:	e03e      	b.n	8024802 <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802478a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802478e:	3301      	adds	r3, #1
 8024790:	687a      	ldr	r2, [r7, #4]
 8024792:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024796:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 802479a:	687b      	ldr	r3, [r7, #4]
 802479c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247a0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80247a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80247a8:	d12a      	bne.n	8024800 <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND写入超时，地址：0x%" PRIx64 "\r\n", prog->addr);
 80247aa:	687b      	ldr	r3, [r7, #4]
 80247ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80247b0:	4817      	ldr	r0, [pc, #92]	; (8024810 <np_nand_handle_status+0xf8>)
 80247b2:	f00c fc3d 	bl	8031030 <iprintf>
            prog->nand_wr_in_progress = 0;
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247bc:	461a      	mov	r2, r3
 80247be:	2300      	movs	r3, #0
 80247c0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247ca:	461a      	mov	r2, r3
 80247cc:	2300      	movs	r3, #0
 80247ce:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 80247d2:	f04f 33ff 	mov.w	r3, #4294967295
 80247d6:	e015      	b.n	8024804 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 80247d8:	480e      	ldr	r0, [pc, #56]	; (8024814 <np_nand_handle_status+0xfc>)
 80247da:	f00c fc8f 	bl	80310fc <puts>
        prog->nand_wr_in_progress = 0;
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247e4:	461a      	mov	r2, r3
 80247e6:	2300      	movs	r3, #0
 80247e8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80247ec:	687b      	ldr	r3, [r7, #4]
 80247ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247f2:	461a      	mov	r2, r3
 80247f4:	2300      	movs	r3, #0
 80247f6:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 80247fa:	f04f 33ff 	mov.w	r3, #4294967295
 80247fe:	e001      	b.n	8024804 <np_nand_handle_status+0xec>
        break;
 8024800:	bf00      	nop
    }

    return 0;
 8024802:	2300      	movs	r3, #0
}
 8024804:	4618      	mov	r0, r3
 8024806:	3708      	adds	r7, #8
 8024808:	46bd      	mov	sp, r7
 802480a:	bd80      	pop	{r7, pc}
 802480c:	20000040 	.word	0x20000040
 8024810:	08032504 	.word	0x08032504
 8024814:	08032228 	.word	0x08032228

08024818 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 8024818:	b580      	push	{r7, lr}
 802481a:	b084      	sub	sp, #16
 802481c:	af02      	add	r7, sp, #8
 802481e:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 8024820:	687b      	ldr	r3, [r7, #4]
 8024822:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024826:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802482a:	2b00      	cmp	r3, #0
 802482c:	d012      	beq.n	8024854 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("等待上一次NAND写入完成\r\n");
 802482e:	481e      	ldr	r0, [pc, #120]	; (80248a8 <np_nand_write+0x90>)
 8024830:	f00c fc64 	bl	80310fc <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8024834:	6878      	ldr	r0, [r7, #4]
 8024836:	f7ff ff6f 	bl	8024718 <np_nand_handle_status>
 802483a:	4603      	mov	r3, r0
 802483c:	2b00      	cmp	r3, #0
 802483e:	d002      	beq.n	8024846 <np_nand_write+0x2e>
                return -1;
 8024840:	f04f 33ff 	mov.w	r3, #4294967295
 8024844:	e02c      	b.n	80248a0 <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802484c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8024850:	2b00      	cmp	r3, #0
 8024852:	d1ef      	bne.n	8024834 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND写入，地址：0x%" PRIx64 "，长度：%lu字节\r\n", prog->addr,
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802485a:	6879      	ldr	r1, [r7, #4]
 802485c:	6a09      	ldr	r1, [r1, #32]
 802485e:	9100      	str	r1, [sp, #0]
 8024860:	4812      	ldr	r0, [pc, #72]	; (80248ac <np_nand_write+0x94>)
 8024862:	f00c fbe5 	bl	8031030 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802486c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024870:	461a      	mov	r2, r3
 8024872:	4b0f      	ldr	r3, [pc, #60]	; (80248b0 <np_nand_write+0x98>)
 8024874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024878:	699b      	ldr	r3, [r3, #24]
 802487a:	687a      	ldr	r2, [r7, #4]
 802487c:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 8024880:	687a      	ldr	r2, [r7, #4]
 8024882:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024886:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 802488a:	687a      	ldr	r2, [r7, #4]
 802488c:	6a12      	ldr	r2, [r2, #32]
 802488e:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 8024890:	687b      	ldr	r3, [r7, #4]
 8024892:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024896:	461a      	mov	r2, r3
 8024898:	2301      	movs	r3, #1
 802489a:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 802489e:	2300      	movs	r3, #0
}
 80248a0:	4618      	mov	r0, r3
 80248a2:	3708      	adds	r7, #8
 80248a4:	46bd      	mov	sp, r7
 80248a6:	bd80      	pop	{r7, pc}
 80248a8:	08032530 	.word	0x08032530
 80248ac:	08032554 	.word	0x08032554
 80248b0:	20000040 	.word	0x20000040

080248b4 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 80248b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80248b8:	b092      	sub	sp, #72	; 0x48
 80248ba:	af02      	add	r7, sp, #8
 80248bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80248be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248c0:	685b      	ldr	r3, [r3, #4]
 80248c2:	2b01      	cmp	r3, #1
 80248c4:	d808      	bhi.n	80248d8 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误：%lu\r\n",
 80248c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248c8:	685b      	ldr	r3, [r3, #4]
 80248ca:	4619      	mov	r1, r3
 80248cc:	486e      	ldr	r0, [pc, #440]	; (8024a88 <np_cmd_nand_write_data+0x1d4>)
 80248ce:	f00c fbaf 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80248d2:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80248d6:	e1a1      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80248d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 80248de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80248e0:	785b      	ldrb	r3, [r3, #1]
 80248e2:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80248e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248e6:	3302      	adds	r3, #2
 80248e8:	2b40      	cmp	r3, #64	; 0x40
 80248ea:	d906      	bls.n	80248fa <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("数据大小错误：0x%lx\r\n", len);
 80248ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80248ee:	4867      	ldr	r0, [pc, #412]	; (8024a8c <np_cmd_nand_write_data+0x1d8>)
 80248f0:	f00c fb9e 	bl	8031030 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80248f4:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80248f8:	e190      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80248fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80248fc:	1c9a      	adds	r2, r3, #2
 80248fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024900:	685b      	ldr	r3, [r3, #4]
 8024902:	429a      	cmp	r2, r3
 8024904:	d00a      	beq.n	802491c <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("缓冲区长度0x%lx大于命令长度0x%lx\r\n",
 8024906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024908:	6859      	ldr	r1, [r3, #4]
 802490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802490c:	3302      	adds	r3, #2
 802490e:	461a      	mov	r2, r3
 8024910:	485f      	ldr	r0, [pc, #380]	; (8024a90 <np_cmd_nand_write_data+0x1dc>)
 8024912:	f00c fb8d 	bl	8031030 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8024916:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 802491a:	e17f      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 802491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024920:	2b00      	cmp	r3, #0
 8024922:	d105      	bne.n	8024930 <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8024924:	485b      	ldr	r0, [pc, #364]	; (8024a94 <np_cmd_nand_write_data+0x1e0>)
 8024926:	f00c fbe9 	bl	80310fc <puts>
        return NP_ERR_ADDR_INVALID;
 802492a:	f06f 0364 	mvn.w	r3, #100	; 0x64
 802492e:	e175      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 8024930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024932:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024936:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802493c:	441a      	add	r2, r3
 802493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024940:	6a1b      	ldr	r3, [r3, #32]
 8024942:	429a      	cmp	r2, r3
 8024944:	d909      	bls.n	802495a <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8024946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024948:	6a1a      	ldr	r2, [r3, #32]
 802494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802494c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024954:	1ad3      	subs	r3, r2, r3
 8024956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024958:	e001      	b.n	802495e <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 802495a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802495c:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 802495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024960:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8024964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024966:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802496a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802496e:	18d0      	adds	r0, r2, r3
 8024970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024972:	3302      	adds	r3, #2
 8024974:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024976:	4619      	mov	r1, r3
 8024978:	f00c fd1b 	bl	80313b2 <memcpy>
    prog->page.offset += write_len;
 802497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802497e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024982:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024988:	441a      	add	r2, r3
 802498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802498c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024990:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8024994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024996:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802499a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 802499e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249a0:	6a1b      	ldr	r3, [r3, #32]
 80249a2:	429a      	cmp	r2, r3
 80249a4:	f040 80a2 	bne.w	8024aec <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 80249a8:	e038      	b.n	8024a1c <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", prog->addr);
 80249aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80249b0:	4839      	ldr	r0, [pc, #228]	; (8024a98 <np_cmd_nand_write_data+0x1e4>)
 80249b2:	f00c fb3d 	bl	8031030 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 80249b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80249bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80249c0:	2301      	movs	r3, #1
 80249c2:	f7ff f8ad 	bl	8023b20 <np_send_bad_block_info>
 80249c6:	4603      	mov	r3, r0
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	d002      	beq.n	80249d2 <np_cmd_nand_write_data+0x11e>
                return -1;
 80249cc:	f04f 33ff 	mov.w	r3, #4294967295
 80249d0:	e124      	b.n	8024c1c <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 80249d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249d4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80249d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80249dc:	2200      	movs	r2, #0
 80249de:	623b      	str	r3, [r7, #32]
 80249e0:	627a      	str	r2, [r7, #36]	; 0x24
 80249e2:	6a3b      	ldr	r3, [r7, #32]
 80249e4:	18c3      	adds	r3, r0, r3
 80249e6:	613b      	str	r3, [r7, #16]
 80249e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80249ea:	eb41 0303 	adc.w	r3, r1, r3
 80249ee:	617b      	str	r3, [r7, #20]
 80249f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80249f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 80249fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a00:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8024a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a0a:	6a1b      	ldr	r3, [r3, #32]
 8024a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8024a10:	18ca      	adds	r2, r1, r3
 8024a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a18:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a22:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024a26:	2b00      	cmp	r3, #0
 8024a28:	d00a      	beq.n	8024a40 <np_cmd_nand_write_data+0x18c>
 8024a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a30:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024a34:	4618      	mov	r0, r3
 8024a36:	f7fe ffcb 	bl	80239d0 <nand_bad_block_table_lookup>
 8024a3a:	4603      	mov	r3, r0
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d1b4      	bne.n	80249aa <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 8024a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024a4c:	4290      	cmp	r0, r2
 8024a4e:	eb71 0303 	sbcs.w	r3, r1, r3
 8024a52:	d30f      	bcc.n	8024a74 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("写入地址0x%" PRIx64 "超过芯片大小0x%" PRIx64 "\r\n", prog->addr,
 8024a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024a60:	e9cd 2300 	strd	r2, r3, [sp]
 8024a64:	4602      	mov	r2, r0
 8024a66:	460b      	mov	r3, r1
 8024a68:	480c      	ldr	r0, [pc, #48]	; (8024a9c <np_cmd_nand_write_data+0x1e8>)
 8024a6a:	f00c fae1 	bl	8031030 <iprintf>
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8024a6e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024a72:	e0d3      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8024a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024a76:	f7ff fecf 	bl	8024818 <np_nand_write>
 8024a7a:	4603      	mov	r3, r0
 8024a7c:	2b00      	cmp	r3, #0
 8024a7e:	d00f      	beq.n	8024aa0 <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8024a80:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024a84:	e0ca      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
 8024a86:	bf00      	nop
 8024a88:	08032588 	.word	0x08032588
 8024a8c:	080325c4 	.word	0x080325c4
 8024a90:	080325e8 	.word	0x080325e8
 8024a94:	08032620 	.word	0x08032620
 8024a98:	080323a0 	.word	0x080323a0
 8024a9c:	08032640 	.word	0x08032640

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8024aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aa2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aa8:	6a1b      	ldr	r3, [r3, #32]
 8024aaa:	2200      	movs	r2, #0
 8024aac:	61bb      	str	r3, [r7, #24]
 8024aae:	61fa      	str	r2, [r7, #28]
 8024ab0:	69bb      	ldr	r3, [r7, #24]
 8024ab2:	18c3      	adds	r3, r0, r3
 8024ab4:	60bb      	str	r3, [r7, #8]
 8024ab6:	69fb      	ldr	r3, [r7, #28]
 8024ab8:	eb41 0303 	adc.w	r3, r1, r3
 8024abc:	60fb      	str	r3, [r7, #12]
 8024abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ac0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8024ac4:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8024ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ace:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024ad2:	3301      	adds	r3, #1
 8024ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024ad6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024ada:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8024ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ae4:	461a      	mov	r2, r3
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8024aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024af0:	1ad3      	subs	r3, r2, r3
 8024af2:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8024af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024af6:	2b00      	cmp	r3, #0
 8024af8:	d016      	beq.n	8024b28 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8024afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024afc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8024b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024b02:	1c9a      	adds	r2, r3, #2
 8024b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b06:	4413      	add	r3, r2
 8024b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024b0a:	4619      	mov	r1, r3
 8024b0c:	f00c fc51 	bl	80313b2 <memcpy>
        prog->page.offset += bytes_left;
 8024b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b16:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024b1c:	4413      	add	r3, r2
 8024b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024b20:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024b24:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8024b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b2a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b2e:	3310      	adds	r3, #16
 8024b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024b34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024b36:	2000      	movs	r0, #0
 8024b38:	468a      	mov	sl, r1
 8024b3a:	4683      	mov	fp, r0
 8024b3c:	eb12 010a 	adds.w	r1, r2, sl
 8024b40:	6039      	str	r1, [r7, #0]
 8024b42:	eb43 030b 	adc.w	r3, r3, fp
 8024b46:	607b      	str	r3, [r7, #4]
 8024b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b4a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b4e:	3310      	adds	r3, #16
 8024b50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8024b54:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b5a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b5e:	3310      	adds	r3, #16
 8024b60:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b66:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b6a:	3310      	adds	r3, #16
 8024b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b70:	1a84      	subs	r4, r0, r2
 8024b72:	eb61 0503 	sbc.w	r5, r1, r3
 8024b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b78:	6a1b      	ldr	r3, [r3, #32]
 8024b7a:	2200      	movs	r2, #0
 8024b7c:	4698      	mov	r8, r3
 8024b7e:	4691      	mov	r9, r2
 8024b80:	4544      	cmp	r4, r8
 8024b82:	eb75 0309 	sbcs.w	r3, r5, r9
 8024b86:	d20c      	bcs.n	8024ba2 <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8024b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b8a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024b8e:	3310      	adds	r3, #16
 8024b90:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024b9a:	4299      	cmp	r1, r3
 8024b9c:	bf08      	it	eq
 8024b9e:	4290      	cmpeq	r0, r2
 8024ba0:	d11b      	bne.n	8024bda <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8024ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ba4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ba8:	3310      	adds	r3, #16
 8024baa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024bae:	4610      	mov	r0, r2
 8024bb0:	4619      	mov	r1, r3
 8024bb2:	f7ff fbed 	bl	8024390 <np_send_write_ack>
 8024bb6:	4603      	mov	r3, r0
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d002      	beq.n	8024bc2 <np_cmd_nand_write_data+0x30e>
            return -1;
 8024bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8024bc0:	e02c      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8024bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bc4:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024bc8:	3310      	adds	r3, #16
 8024bca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bd0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024bd4:	3310      	adds	r3, #16
 8024bd6:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8024bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bdc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024be0:	3310      	adds	r3, #16
 8024be2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024be8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8024bec:	4290      	cmp	r0, r2
 8024bee:	eb71 0303 	sbcs.w	r3, r1, r3
 8024bf2:	d212      	bcs.n	8024c1a <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("实际写入数据长度0x%" PRIx64 "超过0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
 8024bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bf6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024bfa:	3310      	adds	r3, #16
 8024bfc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8024c06:	e9cd 2300 	strd	r2, r3, [sp]
 8024c0a:	4602      	mov	r2, r0
 8024c0c:	460b      	mov	r3, r1
 8024c0e:	4806      	ldr	r0, [pc, #24]	; (8024c28 <np_cmd_nand_write_data+0x374>)
 8024c10:	f00c fa0e 	bl	8031030 <iprintf>
        return NP_ERR_LEN_EXCEEDED;
 8024c14:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8024c18:	e000      	b.n	8024c1c <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8024c1a:	2300      	movs	r3, #0
}
 8024c1c:	4618      	mov	r0, r3
 8024c1e:	3740      	adds	r7, #64	; 0x40
 8024c20:	46bd      	mov	sp, r7
 8024c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024c26:	bf00      	nop
 8024c28:	08032674 	.word	0x08032674

08024c2c <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8024c2c:	b580      	push	{r7, lr}
 8024c2e:	b082      	sub	sp, #8
 8024c30:	af00      	add	r7, sp, #0
 8024c32:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	2200      	movs	r2, #0
 8024c38:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d00b      	beq.n	8024c60 <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("未写入长度为0x%lx的数据\r\n",
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024c4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024c52:	4619      	mov	r1, r3
 8024c54:	4806      	ldr	r0, [pc, #24]	; (8024c70 <np_cmd_nand_write_end+0x44>)
 8024c56:	f00c f9eb 	bl	8031030 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8024c5a:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024c5e:	e002      	b.n	8024c66 <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8024c60:	f7fe ff1e 	bl	8023aa0 <np_send_ok_status>
 8024c64:	4603      	mov	r3, r0
}
 8024c66:	4618      	mov	r0, r3
 8024c68:	3708      	adds	r7, #8
 8024c6a:	46bd      	mov	sp, r7
 8024c6c:	bd80      	pop	{r7, pc}
 8024c6e:	bf00      	nop
 8024c70:	080326a8 	.word	0x080326a8

08024c74 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8024c74:	b580      	push	{r7, lr}
 8024c76:	b084      	sub	sp, #16
 8024c78:	af00      	add	r7, sp, #0
 8024c7a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	681b      	ldr	r3, [r3, #0]
 8024c80:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8024c82:	2300      	movs	r3, #0
 8024c84:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8024c86:	68bb      	ldr	r3, [r7, #8]
 8024c88:	781b      	ldrb	r3, [r3, #0]
 8024c8a:	2b05      	cmp	r3, #5
 8024c8c:	d013      	beq.n	8024cb6 <np_cmd_nand_write+0x42>
 8024c8e:	2b05      	cmp	r3, #5
 8024c90:	dc19      	bgt.n	8024cc6 <np_cmd_nand_write+0x52>
 8024c92:	2b03      	cmp	r3, #3
 8024c94:	d002      	beq.n	8024c9c <np_cmd_nand_write+0x28>
 8024c96:	2b04      	cmp	r3, #4
 8024c98:	d008      	beq.n	8024cac <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8024c9a:	e014      	b.n	8024cc6 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8024c9c:	2001      	movs	r0, #1
 8024c9e:	f7fe fd61 	bl	8023764 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8024ca2:	6878      	ldr	r0, [r7, #4]
 8024ca4:	f7ff fb9c 	bl	80243e0 <np_cmd_nand_write_start>
 8024ca8:	60f8      	str	r0, [r7, #12]
        break;
 8024caa:	e00d      	b.n	8024cc8 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8024cac:	6878      	ldr	r0, [r7, #4]
 8024cae:	f7ff fe01 	bl	80248b4 <np_cmd_nand_write_data>
 8024cb2:	60f8      	str	r0, [r7, #12]
        break;
 8024cb4:	e008      	b.n	8024cc8 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8024cb6:	6878      	ldr	r0, [r7, #4]
 8024cb8:	f7ff ffb8 	bl	8024c2c <np_cmd_nand_write_end>
 8024cbc:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8024cbe:	2000      	movs	r0, #0
 8024cc0:	f7fe fd50 	bl	8023764 <led_wr_set>
        break;
 8024cc4:	e000      	b.n	8024cc8 <np_cmd_nand_write+0x54>
        break;
 8024cc6:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8024cc8:	68fb      	ldr	r3, [r7, #12]
 8024cca:	2b00      	cmp	r3, #0
 8024ccc:	da02      	bge.n	8024cd4 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8024cce:	2000      	movs	r0, #0
 8024cd0:	f7fe fd48 	bl	8023764 <led_wr_set>

    return ret;
 8024cd4:	68fb      	ldr	r3, [r7, #12]
}
 8024cd6:	4618      	mov	r0, r3
 8024cd8:	3710      	adds	r7, #16
 8024cda:	46bd      	mov	sp, r7
 8024cdc:	bd80      	pop	{r7, pc}
	...

08024ce0 <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8024ce0:	b580      	push	{r7, lr}
 8024ce2:	b086      	sub	sp, #24
 8024ce4:	af00      	add	r7, sp, #0
 8024ce6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8024cea:	607a      	str	r2, [r7, #4]
 8024cec:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8024cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024cf0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024cf4:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024cf8:	461a      	mov	r2, r3
 8024cfa:	4b1c      	ldr	r3, [pc, #112]	; (8024d6c <np_nand_read+0x8c>)
 8024cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024d00:	691b      	ldr	r3, [r3, #16]
 8024d02:	6878      	ldr	r0, [r7, #4]
 8024d04:	687a      	ldr	r2, [r7, #4]
 8024d06:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024d0a:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8024d0e:	683a      	ldr	r2, [r7, #0]
 8024d10:	4798      	blx	r3
 8024d12:	6178      	str	r0, [r7, #20]
    switch (status)
 8024d14:	697b      	ldr	r3, [r7, #20]
 8024d16:	2b03      	cmp	r3, #3
 8024d18:	d014      	beq.n	8024d44 <np_nand_read+0x64>
 8024d1a:	697b      	ldr	r3, [r7, #20]
 8024d1c:	2b03      	cmp	r3, #3
 8024d1e:	d817      	bhi.n	8024d50 <np_nand_read+0x70>
 8024d20:	697b      	ldr	r3, [r7, #20]
 8024d22:	2b00      	cmp	r3, #0
 8024d24:	d01a      	beq.n	8024d5c <np_nand_read+0x7c>
 8024d26:	697b      	ldr	r3, [r7, #20]
 8024d28:	2b02      	cmp	r3, #2
 8024d2a:	d111      	bne.n	8024d50 <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8024d2c:	2300      	movs	r3, #0
 8024d2e:	6a3a      	ldr	r2, [r7, #32]
 8024d30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024d34:	f7fe fef4 	bl	8023b20 <np_send_bad_block_info>
 8024d38:	4603      	mov	r3, r0
 8024d3a:	2b00      	cmp	r3, #0
 8024d3c:	d010      	beq.n	8024d60 <np_nand_read+0x80>
            return -1;
 8024d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8024d42:	e00f      	b.n	8024d64 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND读取超时，地址：0x%" PRIx64 "\r\n", addr);
 8024d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024d48:	4809      	ldr	r0, [pc, #36]	; (8024d70 <np_nand_read+0x90>)
 8024d4a:	f00c f971 	bl	8031030 <iprintf>
        break;
 8024d4e:	e008      	b.n	8024d62 <np_nand_read+0x82>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8024d50:	4808      	ldr	r0, [pc, #32]	; (8024d74 <np_nand_read+0x94>)
 8024d52:	f00c f9d3 	bl	80310fc <puts>
        return -1;
 8024d56:	f04f 33ff 	mov.w	r3, #4294967295
 8024d5a:	e003      	b.n	8024d64 <np_nand_read+0x84>
        break;
 8024d5c:	bf00      	nop
 8024d5e:	e000      	b.n	8024d62 <np_nand_read+0x82>
        break;
 8024d60:	bf00      	nop
    }

    return 0;
 8024d62:	2300      	movs	r3, #0
}
 8024d64:	4618      	mov	r0, r3
 8024d66:	3718      	adds	r7, #24
 8024d68:	46bd      	mov	sp, r7
 8024d6a:	bd80      	pop	{r7, pc}
 8024d6c:	20000040 	.word	0x20000040
 8024d70:	080326d4 	.word	0x080326d4
 8024d74:	08032228 	.word	0x08032228

08024d78 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8024d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024d7c:	b0b4      	sub	sp, #208	; 0xd0
 8024d7e:	af04      	add	r7, sp, #16
 8024d80:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8024d82:	2302      	movs	r3, #2
 8024d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8024d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024d8c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8024d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8024d94:	4bb9      	ldr	r3, [pc, #740]	; (802507c <_np_cmd_nand_read+0x304>)
 8024d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8024d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024d9c:	685b      	ldr	r3, [r3, #4]
 8024d9e:	2b11      	cmp	r3, #17
 8024da0:	d808      	bhi.n	8024db4 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("读取命令缓冲区长度错误 %lu\r\n",
 8024da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024da4:	685b      	ldr	r3, [r3, #4]
 8024da6:	4619      	mov	r1, r3
 8024da8:	48b5      	ldr	r0, [pc, #724]	; (8025080 <_np_cmd_nand_read+0x308>)
 8024daa:	f00c f941 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024dae:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024db2:	e283      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8024db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024db6:	681b      	ldr	r3, [r3, #0]
 8024db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8024dbc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024dc0:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024dc4:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024dc8:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8024dcc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024dd0:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024dd4:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024dd8:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8024ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024de0:	7c5b      	ldrb	r3, [r3, #17]
 8024de2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024de6:	b2db      	uxtb	r3, r3
 8024de8:	2b00      	cmp	r3, #0
 8024dea:	bf14      	ite	ne
 8024dec:	2301      	movne	r3, #1
 8024dee:	2300      	moveq	r3, #0
 8024df0:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8024df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024df8:	7c5b      	ldrb	r3, [r3, #17]
 8024dfa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8024dfe:	b2db      	uxtb	r3, r3
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	bf14      	ite	ne
 8024e04:	2301      	movne	r3, #1
 8024e06:	2300      	moveq	r3, #0
 8024e08:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("读取地址 0x%" PRIx64 " 长度为 0x%" PRIx64 " 的数据命令\r\n", addr,
 8024e0c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024e10:	e9cd 2300 	strd	r2, r3, [sp]
 8024e14:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024e18:	489a      	ldr	r0, [pc, #616]	; (8025084 <_np_cmd_nand_read+0x30c>)
 8024e1a:	f00c f909 	bl	8031030 <iprintf>
        len);

    if (inc_spare)
 8024e1e:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	d056      	beq.n	8024ed4 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e28:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024e2c:	3330      	adds	r3, #48	; 0x30
 8024e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e38:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024e3c:	2200      	movs	r2, #0
 8024e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8024e40:	66fa      	str	r2, [r7, #108]	; 0x6c
 8024e42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8024e46:	f7fd fa13 	bl	8022270 <__aeabi_uldivmod>
 8024e4a:	4602      	mov	r2, r0
 8024e4c:	460b      	mov	r3, r1
 8024e4e:	4613      	mov	r3, r2
 8024e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8024e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e5a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e64:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8024e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e76:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e7c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024e80:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8024e84:	4413      	add	r3, r2
 8024e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8024e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024e92:	fb02 f303 	mul.w	r3, r2, r3
 8024e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8024e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8024ea2:	667a      	str	r2, [r7, #100]	; 0x64
 8024ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024ea8:	2200      	movs	r2, #0
 8024eaa:	4698      	mov	r8, r3
 8024eac:	4691      	mov	r9, r2
 8024eae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8024eb2:	460b      	mov	r3, r1
 8024eb4:	fb08 f203 	mul.w	r2, r8, r3
 8024eb8:	4603      	mov	r3, r0
 8024eba:	fb03 f309 	mul.w	r3, r3, r9
 8024ebe:	4413      	add	r3, r2
 8024ec0:	4602      	mov	r2, r0
 8024ec2:	fba2 4508 	umull	r4, r5, r2, r8
 8024ec6:	442b      	add	r3, r5
 8024ec8:	461d      	mov	r5, r3
 8024eca:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024ece:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024ed2:	e015      	b.n	8024f00 <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8024ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ed6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024eda:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 8024ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ee4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ee8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8024ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ef2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ef6:	3330      	adds	r3, #48	; 0x30
 8024ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024efc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8024f00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8024f04:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024f08:	eb10 0a02 	adds.w	sl, r0, r2
 8024f0c:	eb41 0b03 	adc.w	fp, r1, r3
 8024f10:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8024f14:	4552      	cmp	r2, sl
 8024f16:	eb73 030b 	sbcs.w	r3, r3, fp
 8024f1a:	d20f      	bcs.n	8024f3c <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64 "+0x%" PRIx64
 8024f1c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8024f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024f24:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024f28:	e9cd 2300 	strd	r2, r3, [sp]
 8024f2c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024f30:	4855      	ldr	r0, [pc, #340]	; (8025088 <_np_cmd_nand_read+0x310>)
 8024f32:	f00c f87d 	bl	8031030 <iprintf>
            " 超出芯片大小 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024f36:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024f3a:	e1bf      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8024f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f40:	2200      	movs	r2, #0
 8024f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8024f44:	65fa      	str	r2, [r7, #92]	; 0x5c
 8024f46:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8024f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8024f4e:	f7fd f98f 	bl	8022270 <__aeabi_uldivmod>
 8024f52:	4313      	orrs	r3, r2
 8024f54:	d00a      	beq.n	8024f6c <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64
 8024f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f5a:	9300      	str	r3, [sp, #0]
 8024f5c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024f60:	484a      	ldr	r0, [pc, #296]	; (802508c <_np_cmd_nand_read+0x314>)
 8024f62:	f00c f865 	bl	8031030 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8024f66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024f6a:	e1a7      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8024f6c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024f70:	4313      	orrs	r3, r2
 8024f72:	d105      	bne.n	8024f80 <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("长度为0\r\n");
 8024f74:	4846      	ldr	r0, [pc, #280]	; (8025090 <_np_cmd_nand_read+0x318>)
 8024f76:	f00c f8c1 	bl	80310fc <puts>
        return NP_ERR_LEN_INVALID;
 8024f7a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024f7e:	e19d      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 8024f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f84:	2200      	movs	r2, #0
 8024f86:	653b      	str	r3, [r7, #80]	; 0x50
 8024f88:	657a      	str	r2, [r7, #84]	; 0x54
 8024f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8024f8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8024f92:	f7fd f96d 	bl	8022270 <__aeabi_uldivmod>
 8024f96:	4313      	orrs	r3, r2
 8024f98:	d00a      	beq.n	8024fb0 <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("读取长度 0x%" PRIx64
 8024f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f9e:	9300      	str	r3, [sp, #0]
 8024fa0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024fa4:	483b      	ldr	r0, [pc, #236]	; (8025094 <_np_cmd_nand_read+0x31c>)
 8024fa6:	f00c f843 	bl	8031030 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8024faa:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024fae:	e185      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 8024fb0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8024fb4:	2b00      	cmp	r3, #0
 8024fb6:	d00d      	beq.n	8024fd4 <_np_cmd_nand_read+0x25c>
 8024fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d109      	bne.n	8024fd4 <_np_cmd_nand_read+0x25c>
 8024fc0:	2100      	movs	r1, #0
 8024fc2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8024fc4:	f7fe ff08 	bl	8023dd8 <_np_cmd_read_bad_blocks>
 8024fc8:	67f8      	str	r0, [r7, #124]	; 0x7c
 8024fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024fcc:	2b00      	cmp	r3, #0
 8024fce:	d001      	beq.n	8024fd4 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 8024fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024fd2:	e173      	b.n	80252bc <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 8024fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024fd8:	2200      	movs	r2, #0
 8024fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8024fdc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8024fde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024fe2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8024fe6:	f7fd f943 	bl	8022270 <__aeabi_uldivmod>
 8024fea:	4602      	mov	r2, r0
 8024fec:	460b      	mov	r3, r1
 8024fee:	4b2a      	ldr	r3, [pc, #168]	; (8025098 <_np_cmd_nand_read+0x320>)
 8024ff0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ff4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 8024ff8:	4b27      	ldr	r3, [pc, #156]	; (8025098 <_np_cmd_nand_read+0x320>)
 8024ffa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024ffe:	461a      	mov	r2, r3
 8025000:	2300      	movs	r3, #0
 8025002:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 8025006:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802500a:	2300      	movs	r3, #0
 802500c:	7013      	strb	r3, [r2, #0]

    while (len)
 802500e:	e14f      	b.n	80252b0 <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 8025010:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025014:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025018:	4290      	cmp	r0, r2
 802501a:	eb71 0303 	sbcs.w	r3, r1, r3
 802501e:	d30b      	bcc.n	8025038 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("读取地址 0x%" PRIx64
 8025020:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025024:	e9cd 2300 	strd	r2, r3, [sp]
 8025028:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802502c:	481b      	ldr	r0, [pc, #108]	; (802509c <_np_cmd_nand_read+0x324>)
 802502e:	f00b ffff 	bl	8031030 <iprintf>
                " 超出芯片大小 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8025032:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025036:	e141      	b.n	80252bc <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8025038:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 802503c:	2b00      	cmp	r3, #0
 802503e:	d076      	beq.n	802512e <_np_cmd_nand_read+0x3b6>
 8025040:	4b15      	ldr	r3, [pc, #84]	; (8025098 <_np_cmd_nand_read+0x320>)
 8025042:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025046:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 802504a:	4618      	mov	r0, r3
 802504c:	f7fe fcc0 	bl	80239d0 <nand_bad_block_table_lookup>
 8025050:	4603      	mov	r3, r0
 8025052:	2b00      	cmp	r3, #0
 8025054:	d06b      	beq.n	802512e <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("跳过坏块地址 0x%" PRIx64 "\r\n", addr);
 8025056:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802505a:	4811      	ldr	r0, [pc, #68]	; (80250a0 <_np_cmd_nand_read+0x328>)
 802505c:	f00b ffe8 	bl	8031030 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8025060:	2301      	movs	r3, #1
 8025062:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025066:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 802506a:	f7fe fd59 	bl	8023b20 <np_send_bad_block_info>
 802506e:	4603      	mov	r3, r0
 8025070:	2b00      	cmp	r3, #0
 8025072:	d017      	beq.n	80250a4 <_np_cmd_nand_read+0x32c>
                return -1;
 8025074:	f04f 33ff 	mov.w	r3, #4294967295
 8025078:	e120      	b.n	80252bc <_np_cmd_nand_read+0x544>
 802507a:	bf00      	nop
 802507c:	20002f08 	.word	0x20002f08
 8025080:	08032700 	.word	0x08032700
 8025084:	08032730 	.word	0x08032730
 8025088:	08032768 	.word	0x08032768
 802508c:	080327a8 	.word	0x080327a8
 8025090:	080327e4 	.word	0x080327e4
 8025094:	080327f8 	.word	0x080327f8
 8025098:	20002f48 	.word	0x20002f48
 802509c:	08032834 	.word	0x08032834
 80250a0:	0803286c 	.word	0x0803286c

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 80250a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80250a8:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80250ac:	f8d3 100d 	ldr.w	r1, [r3, #13]
 80250b0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80250b4:	428b      	cmp	r3, r1
 80250b6:	bf08      	it	eq
 80250b8:	4282      	cmpeq	r2, r0
 80250ba:	d113      	bne.n	80250e4 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 80250bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80250c0:	2200      	movs	r2, #0
 80250c2:	643b      	str	r3, [r7, #64]	; 0x40
 80250c4:	647a      	str	r2, [r7, #68]	; 0x44
 80250c6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80250ca:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80250ce:	4621      	mov	r1, r4
 80250d0:	1a51      	subs	r1, r2, r1
 80250d2:	61b9      	str	r1, [r7, #24]
 80250d4:	4629      	mov	r1, r5
 80250d6:	eb63 0301 	sbc.w	r3, r3, r1
 80250da:	61fb      	str	r3, [r7, #28]
 80250dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80250e0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 80250e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80250e8:	2200      	movs	r2, #0
 80250ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80250ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80250ee:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80250f2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80250f6:	4621      	mov	r1, r4
 80250f8:	1851      	adds	r1, r2, r1
 80250fa:	6139      	str	r1, [r7, #16]
 80250fc:	4629      	mov	r1, r5
 80250fe:	414b      	adcs	r3, r1
 8025100:	617b      	str	r3, [r7, #20]
 8025102:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025106:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 802510a:	4b6f      	ldr	r3, [pc, #444]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802510c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025110:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8025114:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8025120:	18ca      	adds	r2, r1, r3
 8025122:	4b69      	ldr	r3, [pc, #420]	; (80252c8 <_np_cmd_nand_read+0x550>)
 8025124:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025128:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 802512c:	e0c0      	b.n	80252b0 <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 802512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025130:	9301      	str	r3, [sp, #4]
 8025132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025136:	9300      	str	r3, [sp, #0]
 8025138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802513c:	4a62      	ldr	r2, [pc, #392]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802513e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025142:	f7ff fdcd 	bl	8024ce0 <np_nand_read>
 8025146:	4603      	mov	r3, r0
 8025148:	2b00      	cmp	r3, #0
 802514a:	d07e      	beq.n	802524a <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 802514c:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8025150:	e0b4      	b.n	80252bc <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 8025152:	4b5d      	ldr	r3, [pc, #372]	; (80252c8 <_np_cmd_nand_read+0x550>)
 8025154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025158:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 802515c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025160:	1a9a      	subs	r2, r3, r2
 8025162:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025166:	4293      	cmp	r3, r2
 8025168:	d804      	bhi.n	8025174 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 802516a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802516e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8025172:	e009      	b.n	8025188 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 8025174:	4b54      	ldr	r3, [pc, #336]	; (80252c8 <_np_cmd_nand_read+0x550>)
 8025176:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802517a:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 802517e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025182:	1a9b      	subs	r3, r3, r2
 8025184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8025188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802518c:	2200      	movs	r2, #0
 802518e:	633b      	str	r3, [r7, #48]	; 0x30
 8025190:	637a      	str	r2, [r7, #52]	; 0x34
 8025192:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802519a:	4621      	mov	r1, r4
 802519c:	428a      	cmp	r2, r1
 802519e:	4629      	mov	r1, r5
 80251a0:	418b      	sbcs	r3, r1
 80251a2:	d203      	bcs.n	80251ac <_np_cmd_nand_read+0x434>
                send_len = len;
 80251a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80251a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 80251ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80251b0:	1c98      	adds	r0, r3, #2
 80251b2:	4b45      	ldr	r3, [pc, #276]	; (80252c8 <_np_cmd_nand_read+0x550>)
 80251b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251b8:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80251bc:	4b42      	ldr	r3, [pc, #264]	; (80252c8 <_np_cmd_nand_read+0x550>)
 80251be:	4413      	add	r3, r2
 80251c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80251c4:	4619      	mov	r1, r3
 80251c6:	f00c f8f4 	bl	80313b2 <memcpy>

            while (!np_comm_cb->send_ready());
 80251ca:	bf00      	nop
 80251cc:	4b3f      	ldr	r3, [pc, #252]	; (80252cc <_np_cmd_nand_read+0x554>)
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	685b      	ldr	r3, [r3, #4]
 80251d2:	4798      	blx	r3
 80251d4:	4603      	mov	r3, r0
 80251d6:	2b00      	cmp	r3, #0
 80251d8:	d0f8      	beq.n	80251cc <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 80251da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80251de:	b2db      	uxtb	r3, r3
 80251e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80251e4:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 80251e6:	4b39      	ldr	r3, [pc, #228]	; (80252cc <_np_cmd_nand_read+0x554>)
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	681c      	ldr	r4, [r3, #0]
 80251ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80251f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80251f4:	4413      	add	r3, r2
 80251f6:	4619      	mov	r1, r3
 80251f8:	4835      	ldr	r0, [pc, #212]	; (80252d0 <_np_cmd_nand_read+0x558>)
 80251fa:	47a0      	blx	r4
 80251fc:	4603      	mov	r3, r0
 80251fe:	2b00      	cmp	r3, #0
 8025200:	d002      	beq.n	8025208 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 8025202:	f04f 33ff 	mov.w	r3, #4294967295
 8025206:	e059      	b.n	80252bc <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 8025208:	4b2f      	ldr	r3, [pc, #188]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802520a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802520e:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025216:	441a      	add	r2, r3
 8025218:	4b2b      	ldr	r3, [pc, #172]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802521a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802521e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 8025222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025226:	2200      	movs	r2, #0
 8025228:	62bb      	str	r3, [r7, #40]	; 0x28
 802522a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802522c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025230:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025234:	4621      	mov	r1, r4
 8025236:	1a51      	subs	r1, r2, r1
 8025238:	60b9      	str	r1, [r7, #8]
 802523a:	4629      	mov	r1, r5
 802523c:	eb63 0301 	sbc.w	r3, r3, r1
 8025240:	60fb      	str	r3, [r7, #12]
 8025242:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025246:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 802524a:	4b1f      	ldr	r3, [pc, #124]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802524c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025250:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025258:	4293      	cmp	r3, r2
 802525a:	d904      	bls.n	8025266 <_np_cmd_nand_read+0x4ee>
 802525c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025260:	4313      	orrs	r3, r2
 8025262:	f47f af76 	bne.w	8025152 <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8025266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802526a:	2200      	movs	r2, #0
 802526c:	623b      	str	r3, [r7, #32]
 802526e:	627a      	str	r2, [r7, #36]	; 0x24
 8025270:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025274:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8025278:	4621      	mov	r1, r4
 802527a:	1851      	adds	r1, r2, r1
 802527c:	6039      	str	r1, [r7, #0]
 802527e:	4629      	mov	r1, r5
 8025280:	414b      	adcs	r3, r1
 8025282:	607b      	str	r3, [r7, #4]
 8025284:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025288:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 802528c:	4b0e      	ldr	r3, [pc, #56]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802528e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025292:	461a      	mov	r2, r3
 8025294:	2300      	movs	r3, #0
 8025296:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 802529a:	4b0b      	ldr	r3, [pc, #44]	; (80252c8 <_np_cmd_nand_read+0x550>)
 802529c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252a0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80252a4:	1c5a      	adds	r2, r3, #1
 80252a6:	4b08      	ldr	r3, [pc, #32]	; (80252c8 <_np_cmd_nand_read+0x550>)
 80252a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252ac:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 80252b0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80252b4:	4313      	orrs	r3, r2
 80252b6:	f47f aeab 	bne.w	8025010 <_np_cmd_nand_read+0x298>
    }

    return 0;
 80252ba:	2300      	movs	r3, #0
}
 80252bc:	4618      	mov	r0, r3
 80252be:	37c0      	adds	r7, #192	; 0xc0
 80252c0:	46bd      	mov	sp, r7
 80252c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80252c6:	bf00      	nop
 80252c8:	20002f48 	.word	0x20002f48
 80252cc:	20000cb8 	.word	0x20000cb8
 80252d0:	20002f08 	.word	0x20002f08

080252d4 <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 80252d4:	b580      	push	{r7, lr}
 80252d6:	b084      	sub	sp, #16
 80252d8:	af00      	add	r7, sp, #0
 80252da:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80252dc:	2001      	movs	r0, #1
 80252de:	f7fe fa53 	bl	8023788 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 80252e2:	6878      	ldr	r0, [r7, #4]
 80252e4:	f7ff fd48 	bl	8024d78 <_np_cmd_nand_read>
 80252e8:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80252ea:	2000      	movs	r0, #0
 80252ec:	f7fe fa4c 	bl	8023788 <led_rd_set>

    return ret;
 80252f0:	68fb      	ldr	r3, [r7, #12]
}
 80252f2:	4618      	mov	r0, r3
 80252f4:	3710      	adds	r7, #16
 80252f6:	46bd      	mov	sp, r7
 80252f8:	bd80      	pop	{r7, pc}

080252fa <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 80252fa:	b480      	push	{r7}
 80252fc:	b083      	sub	sp, #12
 80252fe:	af00      	add	r7, sp, #0
 8025300:	6078      	str	r0, [r7, #4]
 8025302:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 8025304:	687b      	ldr	r3, [r7, #4]
 8025306:	f8d3 3002 	ldr.w	r3, [r3, #2]
 802530a:	683a      	ldr	r2, [r7, #0]
 802530c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025310:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	f8d3 3006 	ldr.w	r3, [r3, #6]
 802531a:	683a      	ldr	r2, [r7, #0]
 802531c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025320:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8025324:	6879      	ldr	r1, [r7, #4]
 8025326:	f8d1 200a 	ldr.w	r2, [r1, #10]
 802532a:	f8d1 300e 	ldr.w	r3, [r1, #14]
 802532e:	6839      	ldr	r1, [r7, #0]
 8025330:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8025334:	3130      	adds	r1, #48	; 0x30
 8025336:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8025340:	683a      	ldr	r2, [r7, #0]
 8025342:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025346:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	7d9a      	ldrb	r2, [r3, #22]
 802534e:	683b      	ldr	r3, [r7, #0]
 8025350:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025354:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8025358:	683b      	ldr	r3, [r7, #0]
 802535a:	2201      	movs	r2, #1
 802535c:	639a      	str	r2, [r3, #56]	; 0x38
}
 802535e:	bf00      	nop
 8025360:	370c      	adds	r7, #12
 8025362:	46bd      	mov	sp, r7
 8025364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025368:	4770      	bx	lr
	...

0802536c <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 802536c:	b580      	push	{r7, lr}
 802536e:	b082      	sub	sp, #8
 8025370:	af00      	add	r7, sp, #0
 8025372:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("页面大小: %lu\r\n", prog->chip_info.page_size);
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802537a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802537e:	4619      	mov	r1, r3
 8025380:	4815      	ldr	r0, [pc, #84]	; (80253d8 <np_print_chip_info+0x6c>)
 8025382:	f00b fe55 	bl	8031030 <iprintf>
    DEBUG_PRINT("块大小: %lu\r\n", prog->chip_info.block_size);
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802538c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8025390:	4619      	mov	r1, r3
 8025392:	4812      	ldr	r0, [pc, #72]	; (80253dc <np_print_chip_info+0x70>)
 8025394:	f00b fe4c 	bl	8031030 <iprintf>
    DEBUG_PRINT("总大小: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 8025398:	687b      	ldr	r3, [r7, #4]
 802539a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802539e:	3330      	adds	r3, #48	; 0x30
 80253a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253a4:	480e      	ldr	r0, [pc, #56]	; (80253e0 <np_print_chip_info+0x74>)
 80253a6:	f00b fe43 	bl	8031030 <iprintf>
    DEBUG_PRINT("备用区大小: %lu\r\n", prog->chip_info.spare_size);
 80253aa:	687b      	ldr	r3, [r7, #4]
 80253ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80253b0:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80253b4:	4619      	mov	r1, r3
 80253b6:	480b      	ldr	r0, [pc, #44]	; (80253e4 <np_print_chip_info+0x78>)
 80253b8:	f00b fe3a 	bl	8031030 <iprintf>
    DEBUG_PRINT("坏块标记偏移量: %d\r\n", prog->chip_info.bb_mark_off);
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80253c2:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80253c6:	4619      	mov	r1, r3
 80253c8:	4807      	ldr	r0, [pc, #28]	; (80253e8 <np_print_chip_info+0x7c>)
 80253ca:	f00b fe31 	bl	8031030 <iprintf>
}
 80253ce:	bf00      	nop
 80253d0:	3708      	adds	r7, #8
 80253d2:	46bd      	mov	sp, r7
 80253d4:	bd80      	pop	{r7, pc}
 80253d6:	bf00      	nop
 80253d8:	08032888 	.word	0x08032888
 80253dc:	0803289c 	.word	0x0803289c
 80253e0:	080328b0 	.word	0x080328b0
 80253e4:	080328c4 	.word	0x080328c4
 80253e8:	080328dc 	.word	0x080328dc

080253ec <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 80253ec:	b580      	push	{r7, lr}
 80253ee:	b084      	sub	sp, #16
 80253f0:	af00      	add	r7, sp, #0
 80253f2:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("芯片配置命令\r\n");
 80253f4:	4825      	ldr	r0, [pc, #148]	; (802548c <np_cmd_nand_conf+0xa0>)
 80253f6:	f00b fe81 	bl	80310fc <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 80253fa:	687b      	ldr	r3, [r7, #4]
 80253fc:	685b      	ldr	r3, [r3, #4]
 80253fe:	2b16      	cmp	r3, #22
 8025400:	d808      	bhi.n	8025414 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("配置命令缓冲区长度错误 %lu\r\n",
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	685b      	ldr	r3, [r3, #4]
 8025406:	4619      	mov	r1, r3
 8025408:	4821      	ldr	r0, [pc, #132]	; (8025490 <np_cmd_nand_conf+0xa4>)
 802540a:	f00b fe11 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802540e:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025412:	e036      	b.n	8025482 <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8025414:	687b      	ldr	r3, [r7, #4]
 8025416:	681b      	ldr	r3, [r3, #0]
 8025418:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 802541a:	6879      	ldr	r1, [r7, #4]
 802541c:	68f8      	ldr	r0, [r7, #12]
 802541e:	f7ff ff6c 	bl	80252fa <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 8025422:	6878      	ldr	r0, [r7, #4]
 8025424:	f7ff ffa2 	bl	802536c <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8025428:	68fb      	ldr	r3, [r7, #12]
 802542a:	785a      	ldrb	r2, [r3, #1]
 802542c:	687b      	ldr	r3, [r7, #4]
 802542e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025432:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802543c:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8025440:	461a      	mov	r2, r3
 8025442:	4b14      	ldr	r3, [pc, #80]	; (8025494 <np_cmd_nand_conf+0xa8>)
 8025444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025448:	681b      	ldr	r3, [r3, #0]
 802544a:	68fa      	ldr	r2, [r7, #12]
 802544c:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 8025450:	687a      	ldr	r2, [r7, #4]
 8025452:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025454:	3a17      	subs	r2, #23
 8025456:	4611      	mov	r1, r2
 8025458:	4798      	blx	r3
 802545a:	4603      	mov	r3, r0
 802545c:	2b00      	cmp	r3, #0
 802545e:	d008      	beq.n	8025472 <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("HAL配置命令缓冲区长度错误 %lu\r\n",
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	685b      	ldr	r3, [r3, #4]
 8025464:	4619      	mov	r1, r3
 8025466:	480c      	ldr	r0, [pc, #48]	; (8025498 <np_cmd_nand_conf+0xac>)
 8025468:	f00b fde2 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802546c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025470:	e007      	b.n	8025482 <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 8025472:	f7fe fa7d 	bl	8023970 <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 8025476:	687b      	ldr	r3, [r7, #4]
 8025478:	2200      	movs	r2, #0
 802547a:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 802547c:	f7fe fb10 	bl	8023aa0 <np_send_ok_status>
 8025480:	4603      	mov	r3, r0
}
 8025482:	4618      	mov	r0, r3
 8025484:	3710      	adds	r7, #16
 8025486:	46bd      	mov	sp, r7
 8025488:	bd80      	pop	{r7, pc}
 802548a:	bf00      	nop
 802548c:	080328f8 	.word	0x080328f8
 8025490:	0803290c 	.word	0x0803290c
 8025494:	20000040 	.word	0x20000040
 8025498:	0803293c 	.word	0x0803293c

0802549c <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 802549c:	b5b0      	push	{r4, r5, r7, lr}
 802549e:	b084      	sub	sp, #16
 80254a0:	af00      	add	r7, sp, #0
 80254a2:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80254a4:	f107 0308 	add.w	r3, r7, #8
 80254a8:	4618      	mov	r0, r3
 80254aa:	f7fe fab5 	bl	8023a18 <nand_bad_block_table_iter_alloc>
 80254ae:	60f8      	str	r0, [r7, #12]
 80254b0:	e021      	b.n	80254f6 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254b8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80254bc:	68ba      	ldr	r2, [r7, #8]
 80254be:	fb02 f303 	mul.w	r3, r2, r3
 80254c2:	2200      	movs	r2, #0
 80254c4:	461c      	mov	r4, r3
 80254c6:	4615      	mov	r5, r2
 80254c8:	687b      	ldr	r3, [r7, #4]
 80254ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254ce:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80254d2:	2300      	movs	r3, #0
 80254d4:	4620      	mov	r0, r4
 80254d6:	4629      	mov	r1, r5
 80254d8:	f7fe fb22 	bl	8023b20 <np_send_bad_block_info>
 80254dc:	4603      	mov	r3, r0
 80254de:	2b00      	cmp	r3, #0
 80254e0:	d002      	beq.n	80254e8 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 80254e2:	f04f 33ff 	mov.w	r3, #4294967295
 80254e6:	e00a      	b.n	80254fe <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 80254e8:	f107 0308 	add.w	r3, r7, #8
 80254ec:	4619      	mov	r1, r3
 80254ee:	68f8      	ldr	r0, [r7, #12]
 80254f0:	f7fe faac 	bl	8023a4c <nand_bad_block_table_iter_next>
 80254f4:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80254f6:	68fb      	ldr	r3, [r7, #12]
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	d1da      	bne.n	80254b2 <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 80254fc:	2300      	movs	r3, #0
}
 80254fe:	4618      	mov	r0, r3
 8025500:	3710      	adds	r7, #16
 8025502:	46bd      	mov	sp, r7
 8025504:	bdb0      	pop	{r4, r5, r7, pc}

08025506 <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 8025506:	b580      	push	{r7, lr}
 8025508:	b084      	sub	sp, #16
 802550a:	af00      	add	r7, sp, #0
 802550c:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 802550e:	2001      	movs	r0, #1
 8025510:	f7fe f93a 	bl	8023788 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 8025514:	f7fe fa2c 	bl	8023970 <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 8025518:	2101      	movs	r1, #1
 802551a:	6878      	ldr	r0, [r7, #4]
 802551c:	f7fe fc5c 	bl	8023dd8 <_np_cmd_read_bad_blocks>
 8025520:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 8025522:	2000      	movs	r0, #0
 8025524:	f7fe f930 	bl	8023788 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 8025528:	68fb      	ldr	r3, [r7, #12]
 802552a:	2b00      	cmp	r3, #0
 802552c:	d106      	bne.n	802553c <np_cmd_read_bad_blocks+0x36>
 802552e:	6878      	ldr	r0, [r7, #4]
 8025530:	f7ff ffb4 	bl	802549c <np_send_bad_blocks>
 8025534:	60f8      	str	r0, [r7, #12]
 8025536:	68fb      	ldr	r3, [r7, #12]
 8025538:	2b00      	cmp	r3, #0
 802553a:	d001      	beq.n	8025540 <np_cmd_read_bad_blocks+0x3a>
        return ret;
 802553c:	68fb      	ldr	r3, [r7, #12]
 802553e:	e002      	b.n	8025546 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 8025540:	f7fe faae 	bl	8023aa0 <np_send_ok_status>
 8025544:	4603      	mov	r3, r0
}
 8025546:	4618      	mov	r0, r3
 8025548:	3710      	adds	r7, #16
 802554a:	46bd      	mov	sp, r7
 802554c:	bd80      	pop	{r7, pc}
	...

08025550 <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 8025550:	b580      	push	{r7, lr}
 8025552:	b086      	sub	sp, #24
 8025554:	af00      	add	r7, sp, #0
 8025556:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8025558:	2306      	movs	r3, #6
 802555a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("读取版本号命令\r\n");
 802555c:	4810      	ldr	r0, [pc, #64]	; (80255a0 <np_cmd_version_get+0x50>)
 802555e:	f00b fdcd 	bl	80310fc <puts>

    resp.header.code = NP_RESP_DATA;
 8025562:	2300      	movs	r3, #0
 8025564:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025566:	697b      	ldr	r3, [r7, #20]
 8025568:	b2db      	uxtb	r3, r3
 802556a:	3b02      	subs	r3, #2
 802556c:	b2db      	uxtb	r3, r3
 802556e:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 8025570:	2303      	movs	r3, #3
 8025572:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8025574:	2305      	movs	r3, #5
 8025576:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8025578:	2300      	movs	r3, #0
 802557a:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 802557c:	4b09      	ldr	r3, [pc, #36]	; (80255a4 <np_cmd_version_get+0x54>)
 802557e:	681b      	ldr	r3, [r3, #0]
 8025580:	2b00      	cmp	r3, #0
 8025582:	d007      	beq.n	8025594 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025584:	4b07      	ldr	r3, [pc, #28]	; (80255a4 <np_cmd_version_get+0x54>)
 8025586:	681b      	ldr	r3, [r3, #0]
 8025588:	681b      	ldr	r3, [r3, #0]
 802558a:	f107 020c 	add.w	r2, r7, #12
 802558e:	6979      	ldr	r1, [r7, #20]
 8025590:	4610      	mov	r0, r2
 8025592:	4798      	blx	r3

    return 0;
 8025594:	2300      	movs	r3, #0
}
 8025596:	4618      	mov	r0, r3
 8025598:	3718      	adds	r7, #24
 802559a:	46bd      	mov	sp, r7
 802559c:	bd80      	pop	{r7, pc}
 802559e:	bf00      	nop
 80255a0:	08032970 	.word	0x08032970
 80255a4:	20000cb8 	.word	0x20000cb8

080255a8 <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 80255a8:	b580      	push	{r7, lr}
 80255aa:	b082      	sub	sp, #8
 80255ac:	af00      	add	r7, sp, #0
 80255ae:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80255b0:	2201      	movs	r2, #1
 80255b2:	6879      	ldr	r1, [r7, #4]
 80255b4:	4806      	ldr	r0, [pc, #24]	; (80255d0 <np_boot_config_read+0x28>)
 80255b6:	f7fd f9e7 	bl	8022988 <flash_read>
 80255ba:	4603      	mov	r3, r0
 80255bc:	2b00      	cmp	r3, #0
 80255be:	da02      	bge.n	80255c6 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 80255c0:	f04f 33ff 	mov.w	r3, #4294967295
 80255c4:	e000      	b.n	80255c8 <np_boot_config_read+0x20>
    }
    
    return 0;
 80255c6:	2300      	movs	r3, #0
}
 80255c8:	4618      	mov	r0, r3
 80255ca:	3708      	adds	r7, #8
 80255cc:	46bd      	mov	sp, r7
 80255ce:	bd80      	pop	{r7, pc}
 80255d0:	08003800 	.word	0x08003800

080255d4 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 80255d4:	b580      	push	{r7, lr}
 80255d6:	b082      	sub	sp, #8
 80255d8:	af00      	add	r7, sp, #0
 80255da:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 80255dc:	480c      	ldr	r0, [pc, #48]	; (8025610 <np_boot_config_write+0x3c>)
 80255de:	f7fd f975 	bl	80228cc <flash_page_erase>
 80255e2:	4603      	mov	r3, r0
 80255e4:	2b00      	cmp	r3, #0
 80255e6:	da02      	bge.n	80255ee <np_boot_config_write+0x1a>
        return -1;
 80255e8:	f04f 33ff 	mov.w	r3, #4294967295
 80255ec:	e00b      	b.n	8025606 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80255ee:	2201      	movs	r2, #1
 80255f0:	6879      	ldr	r1, [r7, #4]
 80255f2:	4807      	ldr	r0, [pc, #28]	; (8025610 <np_boot_config_write+0x3c>)
 80255f4:	f7fd f993 	bl	802291e <flash_write>
 80255f8:	4603      	mov	r3, r0
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	da02      	bge.n	8025604 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 80255fe:	f04f 33ff 	mov.w	r3, #4294967295
 8025602:	e000      	b.n	8025606 <np_boot_config_write+0x32>
    }

    return 0;
 8025604:	2300      	movs	r3, #0
}
 8025606:	4618      	mov	r0, r3
 8025608:	3708      	adds	r7, #8
 802560a:	46bd      	mov	sp, r7
 802560c:	bd80      	pop	{r7, pc}
 802560e:	bf00      	nop
 8025610:	08003800 	.word	0x08003800

08025614 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 8025614:	b580      	push	{r7, lr}
 8025616:	b086      	sub	sp, #24
 8025618:	af00      	add	r7, sp, #0
 802561a:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 802561c:	2303      	movs	r3, #3
 802561e:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("获取活动镜像命令\r\n");
 8025620:	481c      	ldr	r0, [pc, #112]	; (8025694 <np_cmd_active_image_get+0x80>)
 8025622:	f00b fd6b 	bl	80310fc <puts>

    if (prog->active_image == 0xff)
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802562c:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025630:	2bff      	cmp	r3, #255	; 0xff
 8025632:	d110      	bne.n	8025656 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8025634:	f107 0310 	add.w	r3, r7, #16
 8025638:	4618      	mov	r0, r3
 802563a:	f7ff ffb5 	bl	80255a8 <np_boot_config_read>
 802563e:	4603      	mov	r3, r0
 8025640:	2b00      	cmp	r3, #0
 8025642:	d002      	beq.n	802564a <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8025644:	f04f 33ff 	mov.w	r3, #4294967295
 8025648:	e01f      	b.n	802568a <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 802564a:	7c3a      	ldrb	r2, [r7, #16]
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025652:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8025656:	2300      	movs	r3, #0
 8025658:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 802565a:	697b      	ldr	r3, [r7, #20]
 802565c:	b2db      	uxtb	r3, r3
 802565e:	3b02      	subs	r3, #2
 8025660:	b2db      	uxtb	r3, r3
 8025662:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8025664:	687b      	ldr	r3, [r7, #4]
 8025666:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802566a:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 802566e:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 8025670:	4b09      	ldr	r3, [pc, #36]	; (8025698 <np_cmd_active_image_get+0x84>)
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	2b00      	cmp	r3, #0
 8025676:	d007      	beq.n	8025688 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025678:	4b07      	ldr	r3, [pc, #28]	; (8025698 <np_cmd_active_image_get+0x84>)
 802567a:	681b      	ldr	r3, [r3, #0]
 802567c:	681b      	ldr	r3, [r3, #0]
 802567e:	f107 020c 	add.w	r2, r7, #12
 8025682:	6979      	ldr	r1, [r7, #20]
 8025684:	4610      	mov	r0, r2
 8025686:	4798      	blx	r3

    return 0;
 8025688:	2300      	movs	r3, #0
}
 802568a:	4618      	mov	r0, r3
 802568c:	3718      	adds	r7, #24
 802568e:	46bd      	mov	sp, r7
 8025690:	bd80      	pop	{r7, pc}
 8025692:	bf00      	nop
 8025694:	08032988 	.word	0x08032988
 8025698:	20000cb8 	.word	0x20000cb8

0802569c <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 802569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80256a0:	b092      	sub	sp, #72	; 0x48
 80256a2:	af04      	add	r7, sp, #16
 80256a4:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80256a6:	69fb      	ldr	r3, [r7, #28]
 80256a8:	685b      	ldr	r3, [r3, #4]
 80256aa:	2b11      	cmp	r3, #17
 80256ac:	d808      	bhi.n	80256c0 <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误 %lu\r\n",
 80256ae:	69fb      	ldr	r3, [r7, #28]
 80256b0:	685b      	ldr	r3, [r3, #4]
 80256b2:	4619      	mov	r1, r3
 80256b4:	4870      	ldr	r0, [pc, #448]	; (8025878 <np_cmd_fw_update_start+0x1dc>)
 80256b6:	f00b fcbb 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80256ba:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80256be:	e0d5      	b.n	802586c <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80256c0:	69fb      	ldr	r3, [r7, #28]
 80256c2:	681b      	ldr	r3, [r3, #0]
 80256c4:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 80256c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80256c8:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80256cc:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80256d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 80256d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80256d6:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80256da:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80256de:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("写入命令 0x%" PRIx64 " 地址 0x%" PRIx64 " 字节\r\n", addr,
 80256e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80256e6:	e9cd 2300 	strd	r2, r3, [sp]
 80256ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80256ee:	4863      	ldr	r0, [pc, #396]	; (802587c <np_cmd_fw_update_start+0x1e0>)
 80256f0:	f00b fc9e 	bl	8031030 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 80256f4:	69f9      	ldr	r1, [r7, #28]
 80256f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80256fa:	f04f 0300 	mov.w	r3, #0
 80256fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 8025702:	69fb      	ldr	r3, [r7, #28]
 8025704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025708:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 802570a:	69fb      	ldr	r3, [r7, #28]
 802570c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025710:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 8025712:	69f9      	ldr	r1, [r7, #28]
 8025714:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8025718:	f04f 0300 	mov.w	r3, #0
 802571c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 8025720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025724:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025728:	1884      	adds	r4, r0, r2
 802572a:	eb41 0503 	adc.w	r5, r1, r3
 802572e:	69fb      	ldr	r3, [r7, #28]
 8025730:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025734:	69fb      	ldr	r3, [r7, #28]
 8025736:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802573a:	eb10 0802 	adds.w	r8, r0, r2
 802573e:	eb41 0903 	adc.w	r9, r1, r3
 8025742:	45a0      	cmp	r8, r4
 8025744:	eb79 0305 	sbcs.w	r3, r9, r5
 8025748:	d217      	bcs.n	802577a <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("写入地址 0x%" PRIx64 "+0x%" PRIx64
 802574a:	69fb      	ldr	r3, [r7, #28]
 802574c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025750:	69fb      	ldr	r3, [r7, #28]
 8025752:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025756:	eb10 0a02 	adds.w	sl, r0, r2
 802575a:	eb41 0b03 	adc.w	fp, r1, r3
 802575e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8025762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025766:	e9cd 2300 	strd	r2, r3, [sp]
 802576a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802576e:	4844      	ldr	r0, [pc, #272]	; (8025880 <np_cmd_fw_update_start+0x1e4>)
 8025770:	f00b fc5e 	bl	8031030 <iprintf>
            " 超过闪存大小 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8025774:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025778:	e078      	b.n	802586c <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 802577a:	69fb      	ldr	r3, [r7, #28]
 802577c:	6a1b      	ldr	r3, [r3, #32]
 802577e:	2200      	movs	r2, #0
 8025780:	613b      	str	r3, [r7, #16]
 8025782:	617a      	str	r2, [r7, #20]
 8025784:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025788:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802578c:	f7fc fd70 	bl	8022270 <__aeabi_uldivmod>
 8025790:	4313      	orrs	r3, r2
 8025792:	d00a      	beq.n	80257aa <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("地址 0x%" PRIx64
 8025794:	69fb      	ldr	r3, [r7, #28]
 8025796:	6a1b      	ldr	r3, [r3, #32]
 8025798:	9300      	str	r3, [sp, #0]
 802579a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802579e:	4839      	ldr	r0, [pc, #228]	; (8025884 <np_cmd_fw_update_start+0x1e8>)
 80257a0:	f00b fc46 	bl	8031030 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 80257a4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80257a8:	e060      	b.n	802586c <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 80257aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80257ae:	4313      	orrs	r3, r2
 80257b0:	d105      	bne.n	80257be <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("长度为0\r\n");
 80257b2:	4835      	ldr	r0, [pc, #212]	; (8025888 <np_cmd_fw_update_start+0x1ec>)
 80257b4:	f00b fca2 	bl	80310fc <puts>
        return NP_ERR_LEN_INVALID;
 80257b8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80257bc:	e056      	b.n	802586c <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 80257be:	69fb      	ldr	r3, [r7, #28]
 80257c0:	6a1b      	ldr	r3, [r3, #32]
 80257c2:	2200      	movs	r2, #0
 80257c4:	60bb      	str	r3, [r7, #8]
 80257c6:	60fa      	str	r2, [r7, #12]
 80257c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80257cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80257d0:	f7fc fd4e 	bl	8022270 <__aeabi_uldivmod>
 80257d4:	4313      	orrs	r3, r2
 80257d6:	d00a      	beq.n	80257ee <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("长度 0x%" PRIx64
 80257d8:	69fb      	ldr	r3, [r7, #28]
 80257da:	6a1b      	ldr	r3, [r3, #32]
 80257dc:	9300      	str	r3, [sp, #0]
 80257de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80257e2:	482a      	ldr	r0, [pc, #168]	; (802588c <np_cmd_fw_update_start+0x1f0>)
 80257e4:	f00b fc24 	bl	8031030 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80257e8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80257ec:	e03e      	b.n	802586c <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 80257ee:	69f9      	ldr	r1, [r7, #28]
 80257f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80257f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80257f8:	69f9      	ldr	r1, [r7, #28]
 80257fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80257fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8025802:	69fb      	ldr	r3, [r7, #28]
 8025804:	2201      	movs	r2, #1
 8025806:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8025808:	69fb      	ldr	r3, [r7, #28]
 802580a:	6a1b      	ldr	r3, [r3, #32]
 802580c:	2200      	movs	r2, #0
 802580e:	603b      	str	r3, [r7, #0]
 8025810:	607a      	str	r2, [r7, #4]
 8025812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802581a:	f7fc fd29 	bl	8022270 <__aeabi_uldivmod>
 802581e:	4602      	mov	r2, r0
 8025820:	460b      	mov	r3, r1
 8025822:	69fb      	ldr	r3, [r7, #28]
 8025824:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025828:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 802582c:	69fb      	ldr	r3, [r7, #28]
 802582e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025832:	461a      	mov	r2, r3
 8025834:	2300      	movs	r3, #0
 8025836:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 802583a:	69fb      	ldr	r3, [r7, #28]
 802583c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025840:	3310      	adds	r3, #16
 8025842:	4619      	mov	r1, r3
 8025844:	f04f 0200 	mov.w	r2, #0
 8025848:	f04f 0300 	mov.w	r3, #0
 802584c:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 8025850:	69fb      	ldr	r3, [r7, #28]
 8025852:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025856:	3310      	adds	r3, #16
 8025858:	4619      	mov	r1, r3
 802585a:	f04f 0200 	mov.w	r2, #0
 802585e:	f04f 0300 	mov.w	r3, #0
 8025862:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8025866:	f7fe f91b 	bl	8023aa0 <np_send_ok_status>
 802586a:	4603      	mov	r3, r0
}
 802586c:	4618      	mov	r0, r3
 802586e:	3738      	adds	r7, #56	; 0x38
 8025870:	46bd      	mov	sp, r7
 8025872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025876:	bf00      	nop
 8025878:	080329a4 	.word	0x080329a4
 802587c:	080329dc 	.word	0x080329dc
 8025880:	08032a08 	.word	0x08032a08
 8025884:	08032a48 	.word	0x08032a48
 8025888:	080327e4 	.word	0x080327e4
 802588c:	08032a7c 	.word	0x08032a7c

08025890 <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 8025890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025894:	b0a7      	sub	sp, #156	; 0x9c
 8025896:	af02      	add	r7, sp, #8
 8025898:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 802589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802589c:	685b      	ldr	r3, [r3, #4]
 802589e:	2b01      	cmp	r3, #1
 80258a0:	d808      	bhi.n	80258b4 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误 %lu\r\n",
 80258a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80258a4:	685b      	ldr	r3, [r3, #4]
 80258a6:	4619      	mov	r1, r3
 80258a8:	487c      	ldr	r0, [pc, #496]	; (8025a9c <np_cmd_fw_update_data+0x20c>)
 80258aa:	f00b fbc1 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80258ae:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80258b2:	e1d6      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80258b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80258b6:	681b      	ldr	r3, [r3, #0]
 80258b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 80258bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80258c0:	785b      	ldrb	r3, [r3, #1]
 80258c2:	b2db      	uxtb	r3, r3
 80258c4:	2200      	movs	r2, #0
 80258c6:	60bb      	str	r3, [r7, #8]
 80258c8:	60fa      	str	r2, [r7, #12]
 80258ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80258ce:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80258d2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80258d6:	1c94      	adds	r4, r2, #2
 80258d8:	f143 0500 	adc.w	r5, r3, #0
 80258dc:	2c41      	cmp	r4, #65	; 0x41
 80258de:	f175 0300 	sbcs.w	r3, r5, #0
 80258e2:	d307      	bcc.n	80258f4 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("数据大小错误 0x%" PRIx64 "\r\n", len);
 80258e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80258e8:	486d      	ldr	r0, [pc, #436]	; (8025aa0 <np_cmd_fw_update_data+0x210>)
 80258ea:	f00b fba1 	bl	8031030 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80258ee:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80258f2:	e1b6      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80258f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80258f8:	f112 0802 	adds.w	r8, r2, #2
 80258fc:	f143 0900 	adc.w	r9, r3, #0
 8025900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025902:	685b      	ldr	r3, [r3, #4]
 8025904:	2200      	movs	r2, #0
 8025906:	469a      	mov	sl, r3
 8025908:	4693      	mov	fp, r2
 802590a:	45d9      	cmp	r9, fp
 802590c:	bf08      	it	eq
 802590e:	45d0      	cmpeq	r8, sl
 8025910:	d010      	beq.n	8025934 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("缓冲区长度 0x%lx 大于命令长度 0x%" PRIx64 "\r\n",
 8025912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025914:	6859      	ldr	r1, [r3, #4]
 8025916:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802591a:	1c90      	adds	r0, r2, #2
 802591c:	66b8      	str	r0, [r7, #104]	; 0x68
 802591e:	f143 0300 	adc.w	r3, r3, #0
 8025922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025924:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8025928:	485e      	ldr	r0, [pc, #376]	; (8025aa4 <np_cmd_fw_update_data+0x214>)
 802592a:	f00b fb81 	bl	8031030 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 802592e:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8025932:	e196      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8025934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025938:	2b00      	cmp	r3, #0
 802593a:	d105      	bne.n	8025948 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 802593c:	485a      	ldr	r0, [pc, #360]	; (8025aa8 <np_cmd_fw_update_data+0x218>)
 802593e:	f00b fbdd 	bl	80310fc <puts>
        return NP_ERR_ADDR_INVALID;
 8025942:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8025946:	e18c      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8025948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802594a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802594e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025952:	2200      	movs	r2, #0
 8025954:	663b      	str	r3, [r7, #96]	; 0x60
 8025956:	667a      	str	r2, [r7, #100]	; 0x64
 8025958:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 802595c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8025960:	4621      	mov	r1, r4
 8025962:	1889      	adds	r1, r1, r2
 8025964:	65b9      	str	r1, [r7, #88]	; 0x58
 8025966:	4629      	mov	r1, r5
 8025968:	eb43 0101 	adc.w	r1, r3, r1
 802596c:	65f9      	str	r1, [r7, #92]	; 0x5c
 802596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025970:	6a1b      	ldr	r3, [r3, #32]
 8025972:	2200      	movs	r2, #0
 8025974:	653b      	str	r3, [r7, #80]	; 0x50
 8025976:	657a      	str	r2, [r7, #84]	; 0x54
 8025978:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 802597c:	4623      	mov	r3, r4
 802597e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8025982:	4602      	mov	r2, r0
 8025984:	4293      	cmp	r3, r2
 8025986:	462b      	mov	r3, r5
 8025988:	460a      	mov	r2, r1
 802598a:	4193      	sbcs	r3, r2
 802598c:	d20a      	bcs.n	80259a4 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 802598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025990:	6a1a      	ldr	r2, [r3, #32]
 8025992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025994:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 802599c:	1ad3      	subs	r3, r2, r3
 802599e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80259a2:	e003      	b.n	80259ac <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 80259a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80259a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 80259ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ae:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80259b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80259b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80259bc:	18d0      	adds	r0, r2, r3
 80259be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80259c2:	3302      	adds	r3, #2
 80259c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80259c8:	4619      	mov	r1, r3
 80259ca:	f00b fcf2 	bl	80313b2 <memcpy>
    prog->page.offset += write_len;
 80259ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80259d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80259d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80259dc:	441a      	add	r2, r3
 80259de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80259e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 80259e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80259ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80259f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259f4:	6a1b      	ldr	r3, [r3, #32]
 80259f6:	429a      	cmp	r2, r3
 80259f8:	f040 8082 	bne.w	8025b00 <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 80259fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259fe:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a04:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a0a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025a0e:	1886      	adds	r6, r0, r2
 8025a10:	64be      	str	r6, [r7, #72]	; 0x48
 8025a12:	eb41 0303 	adc.w	r3, r1, r3
 8025a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025a18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8025a1c:	460b      	mov	r3, r1
 8025a1e:	429c      	cmp	r4, r3
 8025a20:	4613      	mov	r3, r2
 8025a22:	eb75 0303 	sbcs.w	r3, r5, r3
 8025a26:	d319      	bcc.n	8025a5c <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("写入地址 0x%" PRIx64
 8025a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a2a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a30:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a36:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025a3a:	1886      	adds	r6, r0, r2
 8025a3c:	643e      	str	r6, [r7, #64]	; 0x40
 8025a3e:	eb41 0303 	adc.w	r3, r1, r3
 8025a42:	647b      	str	r3, [r7, #68]	; 0x44
 8025a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8025a48:	e9cd 2300 	strd	r2, r3, [sp]
 8025a4c:	4622      	mov	r2, r4
 8025a4e:	462b      	mov	r3, r5
 8025a50:	4816      	ldr	r0, [pc, #88]	; (8025aac <np_cmd_fw_update_data+0x21c>)
 8025a52:	f00b faed 	bl	8031030 <iprintf>
                " 超过闪存大小 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8025a56:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025a5a:	e102      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 8025a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025a62:	4613      	mov	r3, r2
 8025a64:	4618      	mov	r0, r3
 8025a66:	f7fc ff31 	bl	80228cc <flash_page_erase>
 8025a6a:	4603      	mov	r3, r0
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	da02      	bge.n	8025a76 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8025a70:	f04f 33ff 	mov.w	r3, #4294967295
 8025a74:	e0f5      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8025a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025a7c:	4610      	mov	r0, r2
 8025a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8025a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a86:	6a1b      	ldr	r3, [r3, #32]
 8025a88:	461a      	mov	r2, r3
 8025a8a:	f7fc ff48 	bl	802291e <flash_write>
 8025a8e:	4603      	mov	r3, r0
 8025a90:	2b00      	cmp	r3, #0
 8025a92:	da0d      	bge.n	8025ab0 <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8025a94:	f04f 33ff 	mov.w	r3, #4294967295
 8025a98:	e0e3      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
 8025a9a:	bf00      	nop
 8025a9c:	08032ab0 	.word	0x08032ab0
 8025aa0:	08032ae8 	.word	0x08032ae8
 8025aa4:	08032b0c 	.word	0x08032b0c
 8025aa8:	08032620 	.word	0x08032620
 8025aac:	08032b48 	.word	0x08032b48
        }

        prog->addr += prog->page_size;
 8025ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ab2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ab8:	6a1b      	ldr	r3, [r3, #32]
 8025aba:	2200      	movs	r2, #0
 8025abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8025abe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8025ac0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8025ac4:	4623      	mov	r3, r4
 8025ac6:	18c3      	adds	r3, r0, r3
 8025ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8025aca:	462b      	mov	r3, r5
 8025acc:	eb41 0303 	adc.w	r3, r1, r3
 8025ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8025ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ad4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8025ad8:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8025adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ade:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ae2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8025ae6:	3301      	adds	r3, #1
 8025ae8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025aea:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025aee:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8025af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025af4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025af8:	461a      	mov	r2, r3
 8025afa:	2300      	movs	r3, #0
 8025afc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8025b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025b04:	2200      	movs	r2, #0
 8025b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8025b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025b0a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025b0e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025b12:	4621      	mov	r1, r4
 8025b14:	1a51      	subs	r1, r2, r1
 8025b16:	6039      	str	r1, [r7, #0]
 8025b18:	4629      	mov	r1, r5
 8025b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8025b1e:	607b      	str	r3, [r7, #4]
 8025b20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025b24:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8025b28:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8025b2c:	4313      	orrs	r3, r2
 8025b2e:	d018      	beq.n	8025b62 <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8025b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b32:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8025b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025b3a:	1c9a      	adds	r2, r3, #2
 8025b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025b40:	4413      	add	r3, r2
 8025b42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025b44:	4619      	mov	r1, r3
 8025b46:	f00b fc34 	bl	80313b2 <memcpy>
        prog->page.offset += bytes_left;
 8025b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025b50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025b56:	4413      	add	r3, r2
 8025b58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025b5a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025b5e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8025b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b64:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025b68:	3310      	adds	r3, #16
 8025b6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025b6e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025b72:	1884      	adds	r4, r0, r2
 8025b74:	623c      	str	r4, [r7, #32]
 8025b76:	eb41 0303 	adc.w	r3, r1, r3
 8025b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8025b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b7e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025b82:	3310      	adds	r3, #16
 8025b84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8025b88:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b8e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025b92:	3310      	adds	r3, #16
 8025b94:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b9a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025b9e:	3310      	adds	r3, #16
 8025ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ba4:	1a84      	subs	r4, r0, r2
 8025ba6:	61bc      	str	r4, [r7, #24]
 8025ba8:	eb61 0303 	sbc.w	r3, r1, r3
 8025bac:	61fb      	str	r3, [r7, #28]
 8025bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bb0:	6a1b      	ldr	r3, [r3, #32]
 8025bb2:	2200      	movs	r2, #0
 8025bb4:	613b      	str	r3, [r7, #16]
 8025bb6:	617a      	str	r2, [r7, #20]
 8025bb8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8025bbc:	4623      	mov	r3, r4
 8025bbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8025bc2:	4602      	mov	r2, r0
 8025bc4:	4293      	cmp	r3, r2
 8025bc6:	462b      	mov	r3, r5
 8025bc8:	460a      	mov	r2, r1
 8025bca:	4193      	sbcs	r3, r2
 8025bcc:	d20c      	bcs.n	8025be8 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8025bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bd0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025bd4:	3310      	adds	r3, #16
 8025bd6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025be0:	4299      	cmp	r1, r3
 8025be2:	bf08      	it	eq
 8025be4:	4290      	cmpeq	r0, r2
 8025be6:	d11b      	bne.n	8025c20 <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8025be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bea:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025bee:	3310      	adds	r3, #16
 8025bf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025bf4:	4610      	mov	r0, r2
 8025bf6:	4619      	mov	r1, r3
 8025bf8:	f7fe fbca 	bl	8024390 <np_send_write_ack>
 8025bfc:	4603      	mov	r3, r0
 8025bfe:	2b00      	cmp	r3, #0
 8025c00:	d002      	beq.n	8025c08 <np_cmd_fw_update_data+0x378>
            return -1;
 8025c02:	f04f 33ff 	mov.w	r3, #4294967295
 8025c06:	e02c      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8025c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c0a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c0e:	3310      	adds	r3, #16
 8025c10:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c16:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c1a:	3310      	adds	r3, #16
 8025c1c:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8025c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c22:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c26:	3310      	adds	r3, #16
 8025c28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025c2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8025c2e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8025c32:	4290      	cmp	r0, r2
 8025c34:	eb71 0303 	sbcs.w	r3, r1, r3
 8025c38:	d212      	bcs.n	8025c60 <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("实际写入数据长度 0x%" PRIx64
 8025c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c3c:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c40:	3310      	adds	r3, #16
 8025c42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8025c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8025c50:	4602      	mov	r2, r0
 8025c52:	460b      	mov	r3, r1
 8025c54:	4805      	ldr	r0, [pc, #20]	; (8025c6c <np_cmd_fw_update_data+0x3dc>)
 8025c56:	f00b f9eb 	bl	8031030 <iprintf>
            " 超过 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8025c5a:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8025c5e:	e000      	b.n	8025c62 <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8025c60:	2300      	movs	r3, #0
}
 8025c62:	4618      	mov	r0, r3
 8025c64:	3794      	adds	r7, #148	; 0x94
 8025c66:	46bd      	mov	sp, r7
 8025c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c6c:	08032b80 	.word	0x08032b80

08025c70 <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8025c70:	b580      	push	{r7, lr}
 8025c72:	b084      	sub	sp, #16
 8025c74:	af00      	add	r7, sp, #0
 8025c76:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8025c78:	687b      	ldr	r3, [r7, #4]
 8025c7a:	2200      	movs	r2, #0
 8025c7c:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8025c7e:	687b      	ldr	r3, [r7, #4]
 8025c80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	d00b      	beq.n	8025ca4 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("未写入长度为 0x%lx 的数据\r\n",
 8025c8c:	687b      	ldr	r3, [r7, #4]
 8025c8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025c96:	4619      	mov	r1, r3
 8025c98:	481d      	ldr	r0, [pc, #116]	; (8025d10 <np_cmd_fw_update_end+0xa0>)
 8025c9a:	f00b f9c9 	bl	8031030 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8025c9e:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8025ca2:	e030      	b.n	8025d06 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8025ca4:	f107 030c 	add.w	r3, r7, #12
 8025ca8:	4618      	mov	r0, r3
 8025caa:	f7ff fc7d 	bl	80255a8 <np_boot_config_read>
 8025cae:	4603      	mov	r3, r0
 8025cb0:	2b00      	cmp	r3, #0
 8025cb2:	d002      	beq.n	8025cba <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8025cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8025cb8:	e025      	b.n	8025d06 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cc0:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025cc4:	2bff      	cmp	r3, #255	; 0xff
 8025cc6:	d105      	bne.n	8025cd4 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8025cc8:	7b3a      	ldrb	r2, [r7, #12]
 8025cca:	687b      	ldr	r3, [r7, #4]
 8025ccc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cd0:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8025cd4:	687b      	ldr	r3, [r7, #4]
 8025cd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025cda:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	bf0c      	ite	eq
 8025ce2:	2301      	moveq	r3, #1
 8025ce4:	2300      	movne	r3, #0
 8025ce6:	b2db      	uxtb	r3, r3
 8025ce8:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8025cea:	f107 030c 	add.w	r3, r7, #12
 8025cee:	4618      	mov	r0, r3
 8025cf0:	f7ff fc70 	bl	80255d4 <np_boot_config_write>
 8025cf4:	4603      	mov	r3, r0
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	d002      	beq.n	8025d00 <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8025cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8025cfe:	e002      	b.n	8025d06 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8025d00:	f7fd fece 	bl	8023aa0 <np_send_ok_status>
 8025d04:	4603      	mov	r3, r0
}
 8025d06:	4618      	mov	r0, r3
 8025d08:	3710      	adds	r7, #16
 8025d0a:	46bd      	mov	sp, r7
 8025d0c:	bd80      	pop	{r7, pc}
 8025d0e:	bf00      	nop
 8025d10:	08032bb8 	.word	0x08032bb8

08025d14 <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8025d14:	b580      	push	{r7, lr}
 8025d16:	b084      	sub	sp, #16
 8025d18:	af00      	add	r7, sp, #0
 8025d1a:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8025d1c:	687b      	ldr	r3, [r7, #4]
 8025d1e:	681b      	ldr	r3, [r3, #0]
 8025d20:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8025d22:	2300      	movs	r3, #0
 8025d24:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8025d26:	68bb      	ldr	r3, [r7, #8]
 8025d28:	781b      	ldrb	r3, [r3, #0]
 8025d2a:	2b0c      	cmp	r3, #12
 8025d2c:	d013      	beq.n	8025d56 <np_cmd_fw_update+0x42>
 8025d2e:	2b0c      	cmp	r3, #12
 8025d30:	dc19      	bgt.n	8025d66 <np_cmd_fw_update+0x52>
 8025d32:	2b0a      	cmp	r3, #10
 8025d34:	d002      	beq.n	8025d3c <np_cmd_fw_update+0x28>
 8025d36:	2b0b      	cmp	r3, #11
 8025d38:	d008      	beq.n	8025d4c <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8025d3a:	e014      	b.n	8025d66 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8025d3c:	2001      	movs	r0, #1
 8025d3e:	f7fd fd11 	bl	8023764 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8025d42:	6878      	ldr	r0, [r7, #4]
 8025d44:	f7ff fcaa 	bl	802569c <np_cmd_fw_update_start>
 8025d48:	60f8      	str	r0, [r7, #12]
        break;
 8025d4a:	e00d      	b.n	8025d68 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8025d4c:	6878      	ldr	r0, [r7, #4]
 8025d4e:	f7ff fd9f 	bl	8025890 <np_cmd_fw_update_data>
 8025d52:	60f8      	str	r0, [r7, #12]
        break;
 8025d54:	e008      	b.n	8025d68 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8025d56:	6878      	ldr	r0, [r7, #4]
 8025d58:	f7ff ff8a 	bl	8025c70 <np_cmd_fw_update_end>
 8025d5c:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8025d5e:	2000      	movs	r0, #0
 8025d60:	f7fd fd00 	bl	8023764 <led_wr_set>
        break;
 8025d64:	e000      	b.n	8025d68 <np_cmd_fw_update+0x54>
        break;
 8025d66:	bf00      	nop
    }

    if (ret < 0)
 8025d68:	68fb      	ldr	r3, [r7, #12]
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	da02      	bge.n	8025d74 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8025d6e:	2000      	movs	r0, #0
 8025d70:	f7fd fcf8 	bl	8023764 <led_wr_set>

    return ret;
 8025d74:	68fb      	ldr	r3, [r7, #12]
}
 8025d76:	4618      	mov	r0, r3
 8025d78:	3710      	adds	r7, #16
 8025d7a:	46bd      	mov	sp, r7
 8025d7c:	bd80      	pop	{r7, pc}

08025d7e <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8025d7e:	b480      	push	{r7}
 8025d80:	b083      	sub	sp, #12
 8025d82:	af00      	add	r7, sp, #0
 8025d84:	4603      	mov	r3, r0
 8025d86:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8025d88:	79fb      	ldrb	r3, [r7, #7]
 8025d8a:	2b0c      	cmp	r3, #12
 8025d8c:	bf94      	ite	ls
 8025d8e:	2301      	movls	r3, #1
 8025d90:	2300      	movhi	r3, #0
 8025d92:	b2db      	uxtb	r3, r3
}
 8025d94:	4618      	mov	r0, r3
 8025d96:	370c      	adds	r7, #12
 8025d98:	46bd      	mov	sp, r7
 8025d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d9e:	4770      	bx	lr

08025da0 <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8025da0:	b580      	push	{r7, lr}
 8025da2:	b084      	sub	sp, #16
 8025da4:	af00      	add	r7, sp, #0
 8025da6:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8025da8:	687b      	ldr	r3, [r7, #4]
 8025daa:	685b      	ldr	r3, [r3, #4]
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	d108      	bne.n	8025dc2 <np_cmd_handler+0x22>
    {
        ERROR_PRINT("命令长度错误：%lu\r\n",
 8025db0:	687b      	ldr	r3, [r7, #4]
 8025db2:	685b      	ldr	r3, [r3, #4]
 8025db4:	4619      	mov	r1, r3
 8025db6:	4823      	ldr	r0, [pc, #140]	; (8025e44 <np_cmd_handler+0xa4>)
 8025db8:	f00b f93a 	bl	8031030 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025dbc:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025dc0:	e03b      	b.n	8025e3a <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	681b      	ldr	r3, [r3, #0]
 8025dc6:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8025dc8:	68fb      	ldr	r3, [r7, #12]
 8025dca:	781b      	ldrb	r3, [r3, #0]
 8025dcc:	4618      	mov	r0, r3
 8025dce:	f7ff ffd6 	bl	8025d7e <np_cmd_is_valid>
 8025dd2:	4603      	mov	r3, r0
 8025dd4:	f083 0301 	eor.w	r3, r3, #1
 8025dd8:	b2db      	uxtb	r3, r3
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d008      	beq.n	8025df0 <np_cmd_handler+0x50>
    {
        ERROR_PRINT("无效的命令码：%d\r\n", cmd->code);
 8025dde:	68fb      	ldr	r3, [r7, #12]
 8025de0:	781b      	ldrb	r3, [r3, #0]
 8025de2:	4619      	mov	r1, r3
 8025de4:	4818      	ldr	r0, [pc, #96]	; (8025e48 <np_cmd_handler+0xa8>)
 8025de6:	f00b f923 	bl	8031030 <iprintf>
        return NP_ERR_CMD_INVALID;
 8025dea:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8025dee:	e024      	b.n	8025e3a <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8025df0:	687b      	ldr	r3, [r7, #4]
 8025df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	d112      	bne.n	8025e1e <np_cmd_handler+0x7e>
 8025df8:	68fb      	ldr	r3, [r7, #12]
 8025dfa:	781b      	ldrb	r3, [r3, #0]
 8025dfc:	4619      	mov	r1, r3
 8025dfe:	4a13      	ldr	r2, [pc, #76]	; (8025e4c <np_cmd_handler+0xac>)
 8025e00:	460b      	mov	r3, r1
 8025e02:	005b      	lsls	r3, r3, #1
 8025e04:	440b      	add	r3, r1
 8025e06:	009b      	lsls	r3, r3, #2
 8025e08:	4413      	add	r3, r2
 8025e0a:	3304      	adds	r3, #4
 8025e0c:	781b      	ldrb	r3, [r3, #0]
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	d005      	beq.n	8025e1e <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("芯片未配置\r\n");
 8025e12:	480f      	ldr	r0, [pc, #60]	; (8025e50 <np_cmd_handler+0xb0>)
 8025e14:	f00b f972 	bl	80310fc <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8025e18:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8025e1c:	e00d      	b.n	8025e3a <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8025e1e:	68fb      	ldr	r3, [r7, #12]
 8025e20:	781b      	ldrb	r3, [r3, #0]
 8025e22:	4619      	mov	r1, r3
 8025e24:	4a09      	ldr	r2, [pc, #36]	; (8025e4c <np_cmd_handler+0xac>)
 8025e26:	460b      	mov	r3, r1
 8025e28:	005b      	lsls	r3, r3, #1
 8025e2a:	440b      	add	r3, r1
 8025e2c:	009b      	lsls	r3, r3, #2
 8025e2e:	4413      	add	r3, r2
 8025e30:	3308      	adds	r3, #8
 8025e32:	681b      	ldr	r3, [r3, #0]
 8025e34:	6878      	ldr	r0, [r7, #4]
 8025e36:	4798      	blx	r3
 8025e38:	4603      	mov	r3, r0
}
 8025e3a:	4618      	mov	r0, r3
 8025e3c:	3710      	adds	r7, #16
 8025e3e:	46bd      	mov	sp, r7
 8025e40:	bd80      	pop	{r7, pc}
 8025e42:	bf00      	nop
 8025e44:	08032be4 	.word	0x08032be4
 8025e48:	08032c08 	.word	0x08032c08
 8025e4c:	2000004c 	.word	0x2000004c
 8025e50:	08032c2c 	.word	0x08032c2c

08025e54 <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8025e54:	b580      	push	{r7, lr}
 8025e56:	b084      	sub	sp, #16
 8025e58:	af00      	add	r7, sp, #0
 8025e5a:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025e5c:	4b12      	ldr	r3, [pc, #72]	; (8025ea8 <np_packet_handler+0x54>)
 8025e5e:	681b      	ldr	r3, [r3, #0]
 8025e60:	689b      	ldr	r3, [r3, #8]
 8025e62:	687a      	ldr	r2, [r7, #4]
 8025e64:	4610      	mov	r0, r2
 8025e66:	4798      	blx	r3
 8025e68:	4602      	mov	r2, r0
 8025e6a:	687b      	ldr	r3, [r7, #4]
 8025e6c:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	685b      	ldr	r3, [r3, #4]
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	d012      	beq.n	8025e9c <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8025e76:	6878      	ldr	r0, [r7, #4]
 8025e78:	f7ff ff92 	bl	8025da0 <np_cmd_handler>
 8025e7c:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8025e7e:	4b0a      	ldr	r3, [pc, #40]	; (8025ea8 <np_packet_handler+0x54>)
 8025e80:	681b      	ldr	r3, [r3, #0]
 8025e82:	68db      	ldr	r3, [r3, #12]
 8025e84:	4798      	blx	r3

        if (ret < 0)
 8025e86:	68fb      	ldr	r3, [r7, #12]
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	dae7      	bge.n	8025e5c <np_packet_handler+0x8>
            np_send_error(-ret);
 8025e8c:	68fb      	ldr	r3, [r7, #12]
 8025e8e:	b2db      	uxtb	r3, r3
 8025e90:	425b      	negs	r3, r3
 8025e92:	b2db      	uxtb	r3, r3
 8025e94:	4618      	mov	r0, r3
 8025e96:	f7fd fe1f 	bl	8023ad8 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025e9a:	e7df      	b.n	8025e5c <np_packet_handler+0x8>
            break;
 8025e9c:	bf00      	nop
    }
    while (1);
}
 8025e9e:	bf00      	nop
 8025ea0:	3710      	adds	r7, #16
 8025ea2:	46bd      	mov	sp, r7
 8025ea4:	bd80      	pop	{r7, pc}
 8025ea6:	bf00      	nop
 8025ea8:	20000cb8 	.word	0x20000cb8

08025eac <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8025eac:	b580      	push	{r7, lr}
 8025eae:	b082      	sub	sp, #8
 8025eb0:	af00      	add	r7, sp, #0
 8025eb2:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025eba:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8025ebe:	2b00      	cmp	r3, #0
 8025ec0:	d008      	beq.n	8025ed4 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8025ec2:	6878      	ldr	r0, [r7, #4]
 8025ec4:	f7fe fc28 	bl	8024718 <np_nand_handle_status>
 8025ec8:	4603      	mov	r3, r0
 8025eca:	2b00      	cmp	r3, #0
 8025ecc:	d002      	beq.n	8025ed4 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8025ece:	2099      	movs	r0, #153	; 0x99
 8025ed0:	f7fd fe02 	bl	8023ad8 <np_send_error>
    }
}
 8025ed4:	bf00      	nop
 8025ed6:	3708      	adds	r7, #8
 8025ed8:	46bd      	mov	sp, r7
 8025eda:	bd80      	pop	{r7, pc}

08025edc <np_init>:

// NP 初始化函数
void np_init()
{
 8025edc:	b480      	push	{r7}
 8025ede:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8025ee0:	4b05      	ldr	r3, [pc, #20]	; (8025ef8 <np_init+0x1c>)
 8025ee2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ee6:	22ff      	movs	r2, #255	; 0xff
 8025ee8:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8025eec:	bf00      	nop
 8025eee:	46bd      	mov	sp, r7
 8025ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ef4:	4770      	bx	lr
 8025ef6:	bf00      	nop
 8025ef8:	20000cc0 	.word	0x20000cc0

08025efc <np_handler>:

// NP 处理函数
void np_handler()
{
 8025efc:	b580      	push	{r7, lr}
 8025efe:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8025f00:	4803      	ldr	r0, [pc, #12]	; (8025f10 <np_handler+0x14>)
 8025f02:	f7ff ffa7 	bl	8025e54 <np_packet_handler>
    np_nand_handler(&prog);
 8025f06:	4802      	ldr	r0, [pc, #8]	; (8025f10 <np_handler+0x14>)
 8025f08:	f7ff ffd0 	bl	8025eac <np_nand_handler>
}
 8025f0c:	bf00      	nop
 8025f0e:	bd80      	pop	{r7, pc}
 8025f10:	20000cc0 	.word	0x20000cc0

08025f14 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8025f14:	b480      	push	{r7}
 8025f16:	b083      	sub	sp, #12
 8025f18:	af00      	add	r7, sp, #0
 8025f1a:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8025f1c:	4a04      	ldr	r2, [pc, #16]	; (8025f30 <np_comm_register+0x1c>)
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	6013      	str	r3, [r2, #0]

    return 0;
 8025f22:	2300      	movs	r3, #0
}
 8025f24:	4618      	mov	r0, r3
 8025f26:	370c      	adds	r7, #12
 8025f28:	46bd      	mov	sp, r7
 8025f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f2e:	4770      	bx	lr
 8025f30:	20000cb8 	.word	0x20000cb8

08025f34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8025f34:	b580      	push	{r7, lr}
 8025f36:	b086      	sub	sp, #24
 8025f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8025f3a:	1d3b      	adds	r3, r7, #4
 8025f3c:	2200      	movs	r2, #0
 8025f3e:	601a      	str	r2, [r3, #0]
 8025f40:	605a      	str	r2, [r3, #4]
 8025f42:	609a      	str	r2, [r3, #8]
 8025f44:	60da      	str	r2, [r3, #12]
 8025f46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8025f48:	2300      	movs	r3, #0
 8025f4a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8025f4c:	4b24      	ldr	r3, [pc, #144]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f4e:	4a25      	ldr	r2, [pc, #148]	; (8025fe4 <MX_RTC_Init+0xb0>)
 8025f50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8025f52:	4b23      	ldr	r3, [pc, #140]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f54:	2200      	movs	r2, #0
 8025f56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8025f58:	4b21      	ldr	r3, [pc, #132]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f5a:	227f      	movs	r2, #127	; 0x7f
 8025f5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8025f5e:	4b20      	ldr	r3, [pc, #128]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f60:	22ff      	movs	r2, #255	; 0xff
 8025f62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8025f64:	4b1e      	ldr	r3, [pc, #120]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f66:	2200      	movs	r2, #0
 8025f68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8025f6a:	4b1d      	ldr	r3, [pc, #116]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f6c:	2200      	movs	r2, #0
 8025f6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8025f70:	4b1b      	ldr	r3, [pc, #108]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f72:	2200      	movs	r2, #0
 8025f74:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8025f76:	481a      	ldr	r0, [pc, #104]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025f78:	f004 fcdc 	bl	802a934 <HAL_RTC_Init>
 8025f7c:	4603      	mov	r3, r0
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d001      	beq.n	8025f86 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8025f82:	f7fd fcef 	bl	8023964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8025f86:	2300      	movs	r3, #0
 8025f88:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8025f8a:	2300      	movs	r3, #0
 8025f8c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8025f8e:	2300      	movs	r3, #0
 8025f90:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8025f92:	2300      	movs	r3, #0
 8025f94:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8025f96:	2300      	movs	r3, #0
 8025f98:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8025f9a:	1d3b      	adds	r3, r7, #4
 8025f9c:	2201      	movs	r2, #1
 8025f9e:	4619      	mov	r1, r3
 8025fa0:	480f      	ldr	r0, [pc, #60]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025fa2:	f004 fd3d 	bl	802aa20 <HAL_RTC_SetTime>
 8025fa6:	4603      	mov	r3, r0
 8025fa8:	2b00      	cmp	r3, #0
 8025faa:	d001      	beq.n	8025fb0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8025fac:	f7fd fcda 	bl	8023964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8025fb0:	2301      	movs	r3, #1
 8025fb2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8025fb4:	2301      	movs	r3, #1
 8025fb6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8025fb8:	2301      	movs	r3, #1
 8025fba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8025fc0:	463b      	mov	r3, r7
 8025fc2:	2201      	movs	r2, #1
 8025fc4:	4619      	mov	r1, r3
 8025fc6:	4806      	ldr	r0, [pc, #24]	; (8025fe0 <MX_RTC_Init+0xac>)
 8025fc8:	f004 fdc4 	bl	802ab54 <HAL_RTC_SetDate>
 8025fcc:	4603      	mov	r3, r0
 8025fce:	2b00      	cmp	r3, #0
 8025fd0:	d001      	beq.n	8025fd6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8025fd2:	f7fd fcc7 	bl	8023964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8025fd6:	bf00      	nop
 8025fd8:	3718      	adds	r7, #24
 8025fda:	46bd      	mov	sp, r7
 8025fdc:	bd80      	pop	{r7, pc}
 8025fde:	bf00      	nop
 8025fe0:	20005110 	.word	0x20005110
 8025fe4:	40002800 	.word	0x40002800

08025fe8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8025fe8:	b580      	push	{r7, lr}
 8025fea:	b086      	sub	sp, #24
 8025fec:	af00      	add	r7, sp, #0
 8025fee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8025ff0:	f107 0308 	add.w	r3, r7, #8
 8025ff4:	2200      	movs	r2, #0
 8025ff6:	601a      	str	r2, [r3, #0]
 8025ff8:	605a      	str	r2, [r3, #4]
 8025ffa:	609a      	str	r2, [r3, #8]
 8025ffc:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8025ffe:	687b      	ldr	r3, [r7, #4]
 8026000:	681b      	ldr	r3, [r3, #0]
 8026002:	4a0c      	ldr	r2, [pc, #48]	; (8026034 <HAL_RTC_MspInit+0x4c>)
 8026004:	4293      	cmp	r3, r2
 8026006:	d111      	bne.n	802602c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8026008:	2302      	movs	r3, #2
 802600a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 802600c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026010:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8026012:	f107 0308 	add.w	r3, r7, #8
 8026016:	4618      	mov	r0, r3
 8026018:	f004 fbaa 	bl	802a770 <HAL_RCCEx_PeriphCLKConfig>
 802601c:	4603      	mov	r3, r0
 802601e:	2b00      	cmp	r3, #0
 8026020:	d001      	beq.n	8026026 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8026022:	f7fd fc9f 	bl	8023964 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8026026:	4b04      	ldr	r3, [pc, #16]	; (8026038 <HAL_RTC_MspInit+0x50>)
 8026028:	2201      	movs	r2, #1
 802602a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 802602c:	bf00      	nop
 802602e:	3718      	adds	r7, #24
 8026030:	46bd      	mov	sp, r7
 8026032:	bd80      	pop	{r7, pc}
 8026034:	40002800 	.word	0x40002800
 8026038:	42470e3c 	.word	0x42470e3c

0802603c <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802603c:	b580      	push	{r7, lr}
 802603e:	b08a      	sub	sp, #40	; 0x28
 8026040:	af00      	add	r7, sp, #0
 8026042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026044:	f107 0314 	add.w	r3, r7, #20
 8026048:	2200      	movs	r2, #0
 802604a:	601a      	str	r2, [r3, #0]
 802604c:	605a      	str	r2, [r3, #4]
 802604e:	609a      	str	r2, [r3, #8]
 8026050:	60da      	str	r2, [r3, #12]
 8026052:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8026054:	687b      	ldr	r3, [r7, #4]
 8026056:	681b      	ldr	r3, [r3, #0]
 8026058:	4a2c      	ldr	r2, [pc, #176]	; (802610c <HAL_SPI_MspInit+0xd0>)
 802605a:	4293      	cmp	r3, r2
 802605c:	d151      	bne.n	8026102 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802605e:	2300      	movs	r3, #0
 8026060:	613b      	str	r3, [r7, #16]
 8026062:	4b2b      	ldr	r3, [pc, #172]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 8026064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026066:	4a2a      	ldr	r2, [pc, #168]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 8026068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802606c:	6453      	str	r3, [r2, #68]	; 0x44
 802606e:	4b28      	ldr	r3, [pc, #160]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 8026070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026076:	613b      	str	r3, [r7, #16]
 8026078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802607a:	2300      	movs	r3, #0
 802607c:	60fb      	str	r3, [r7, #12]
 802607e:	4b24      	ldr	r3, [pc, #144]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 8026080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026082:	4a23      	ldr	r2, [pc, #140]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 8026084:	f043 0301 	orr.w	r3, r3, #1
 8026088:	6313      	str	r3, [r2, #48]	; 0x30
 802608a:	4b21      	ldr	r3, [pc, #132]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 802608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802608e:	f003 0301 	and.w	r3, r3, #1
 8026092:	60fb      	str	r3, [r7, #12]
 8026094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026096:	2300      	movs	r3, #0
 8026098:	60bb      	str	r3, [r7, #8]
 802609a:	4b1d      	ldr	r3, [pc, #116]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 802609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802609e:	4a1c      	ldr	r2, [pc, #112]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 80260a0:	f043 0302 	orr.w	r3, r3, #2
 80260a4:	6313      	str	r3, [r2, #48]	; 0x30
 80260a6:	4b1a      	ldr	r3, [pc, #104]	; (8026110 <HAL_SPI_MspInit+0xd4>)
 80260a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80260aa:	f003 0302 	and.w	r3, r3, #2
 80260ae:	60bb      	str	r3, [r7, #8]
 80260b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80260b2:	23c0      	movs	r3, #192	; 0xc0
 80260b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80260b6:	2302      	movs	r3, #2
 80260b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80260ba:	2300      	movs	r3, #0
 80260bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80260be:	2301      	movs	r3, #1
 80260c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80260c2:	2305      	movs	r3, #5
 80260c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80260c6:	f107 0314 	add.w	r3, r7, #20
 80260ca:	4619      	mov	r1, r3
 80260cc:	4811      	ldr	r0, [pc, #68]	; (8026114 <HAL_SPI_MspInit+0xd8>)
 80260ce:	f002 f883 	bl	80281d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80260d2:	2308      	movs	r3, #8
 80260d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80260d6:	2302      	movs	r3, #2
 80260d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80260da:	2300      	movs	r3, #0
 80260dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80260de:	2301      	movs	r3, #1
 80260e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80260e2:	2305      	movs	r3, #5
 80260e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80260e6:	f107 0314 	add.w	r3, r7, #20
 80260ea:	4619      	mov	r1, r3
 80260ec:	480a      	ldr	r0, [pc, #40]	; (8026118 <HAL_SPI_MspInit+0xdc>)
 80260ee:	f002 f873 	bl	80281d8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80260f2:	2200      	movs	r2, #0
 80260f4:	2100      	movs	r1, #0
 80260f6:	2023      	movs	r0, #35	; 0x23
 80260f8:	f001 fc0b 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80260fc:	2023      	movs	r0, #35	; 0x23
 80260fe:	f001 fc24 	bl	802794a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8026102:	bf00      	nop
 8026104:	3728      	adds	r7, #40	; 0x28
 8026106:	46bd      	mov	sp, r7
 8026108:	bd80      	pop	{r7, pc}
 802610a:	bf00      	nop
 802610c:	40013000 	.word	0x40013000
 8026110:	40023800 	.word	0x40023800
 8026114:	40020000 	.word	0x40020000
 8026118:	40020400 	.word	0x40020400

0802611c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 802611c:	b580      	push	{r7, lr}
 802611e:	b082      	sub	sp, #8
 8026120:	af00      	add	r7, sp, #0
 8026122:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	4a0b      	ldr	r2, [pc, #44]	; (8026158 <HAL_SPI_MspDeInit+0x3c>)
 802612a:	4293      	cmp	r3, r2
 802612c:	d110      	bne.n	8026150 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 802612e:	4b0b      	ldr	r3, [pc, #44]	; (802615c <HAL_SPI_MspDeInit+0x40>)
 8026130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026132:	4a0a      	ldr	r2, [pc, #40]	; (802615c <HAL_SPI_MspDeInit+0x40>)
 8026134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026138:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 802613a:	21c0      	movs	r1, #192	; 0xc0
 802613c:	4808      	ldr	r0, [pc, #32]	; (8026160 <HAL_SPI_MspDeInit+0x44>)
 802613e:	f002 f9e7 	bl	8028510 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8026142:	2108      	movs	r1, #8
 8026144:	4807      	ldr	r0, [pc, #28]	; (8026164 <HAL_SPI_MspDeInit+0x48>)
 8026146:	f002 f9e3 	bl	8028510 <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 802614a:	2023      	movs	r0, #35	; 0x23
 802614c:	f001 fc0b 	bl	8027966 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8026150:	bf00      	nop
 8026152:	3708      	adds	r7, #8
 8026154:	46bd      	mov	sp, r7
 8026156:	bd80      	pop	{r7, pc}
 8026158:	40013000 	.word	0x40013000
 802615c:	40023800 	.word	0x40023800
 8026160:	40020000 	.word	0x40020000
 8026164:	40020400 	.word	0x40020400

08026168 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 8026168:	b580      	push	{r7, lr}
 802616a:	b088      	sub	sp, #32
 802616c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 802616e:	f107 030c 	add.w	r3, r7, #12
 8026172:	2200      	movs	r2, #0
 8026174:	601a      	str	r2, [r3, #0]
 8026176:	605a      	str	r2, [r3, #4]
 8026178:	609a      	str	r2, [r3, #8]
 802617a:	60da      	str	r2, [r3, #12]
 802617c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_ENABLE();
 802617e:	2300      	movs	r3, #0
 8026180:	60bb      	str	r3, [r7, #8]
 8026182:	4b33      	ldr	r3, [pc, #204]	; (8026250 <spi_flash_gpio_init+0xe8>)
 8026184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026186:	4a32      	ldr	r2, [pc, #200]	; (8026250 <spi_flash_gpio_init+0xe8>)
 8026188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802618c:	6453      	str	r3, [r2, #68]	; 0x44
 802618e:	4b30      	ldr	r3, [pc, #192]	; (8026250 <spi_flash_gpio_init+0xe8>)
 8026190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026196:	60bb      	str	r3, [r7, #8]
 8026198:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802619a:	2300      	movs	r3, #0
 802619c:	607b      	str	r3, [r7, #4]
 802619e:	4b2c      	ldr	r3, [pc, #176]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261a2:	4a2b      	ldr	r2, [pc, #172]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261a4:	f043 0301 	orr.w	r3, r3, #1
 80261a8:	6313      	str	r3, [r2, #48]	; 0x30
 80261aa:	4b29      	ldr	r3, [pc, #164]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ae:	f003 0301 	and.w	r3, r3, #1
 80261b2:	607b      	str	r3, [r7, #4]
 80261b4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80261b6:	2300      	movs	r3, #0
 80261b8:	603b      	str	r3, [r7, #0]
 80261ba:	4b25      	ldr	r3, [pc, #148]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261be:	4a24      	ldr	r2, [pc, #144]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261c0:	f043 0302 	orr.w	r3, r3, #2
 80261c4:	6313      	str	r3, [r2, #48]	; 0x30
 80261c6:	4b22      	ldr	r3, [pc, #136]	; (8026250 <spi_flash_gpio_init+0xe8>)
 80261c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261ca:	f003 0302 	and.w	r3, r3, #2
 80261ce:	603b      	str	r3, [r7, #0]
 80261d0:	683b      	ldr	r3, [r7, #0]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80261d2:	2308      	movs	r3, #8
 80261d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261d6:	2302      	movs	r3, #2
 80261d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80261da:	2300      	movs	r3, #0
 80261dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80261de:	2301      	movs	r3, #1
 80261e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80261e2:	2305      	movs	r3, #5
 80261e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80261e6:	f107 030c 	add.w	r3, r7, #12
 80261ea:	4619      	mov	r1, r3
 80261ec:	4819      	ldr	r0, [pc, #100]	; (8026254 <spi_flash_gpio_init+0xec>)
 80261ee:	f001 fff3 	bl	80281d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80261f2:	2380      	movs	r3, #128	; 0x80
 80261f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261f6:	2302      	movs	r3, #2
 80261f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80261fa:	2300      	movs	r3, #0
 80261fc:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80261fe:	2305      	movs	r3, #5
 8026200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026202:	f107 030c 	add.w	r3, r7, #12
 8026206:	4619      	mov	r1, r3
 8026208:	4813      	ldr	r0, [pc, #76]	; (8026258 <spi_flash_gpio_init+0xf0>)
 802620a:	f001 ffe5 	bl	80281d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 802620e:	2340      	movs	r3, #64	; 0x40
 8026210:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026212:	2300      	movs	r3, #0
 8026214:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026216:	2300      	movs	r3, #0
 8026218:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802621a:	2305      	movs	r3, #5
 802621c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802621e:	f107 030c 	add.w	r3, r7, #12
 8026222:	4619      	mov	r1, r3
 8026224:	480c      	ldr	r0, [pc, #48]	; (8026258 <spi_flash_gpio_init+0xf0>)
 8026226:	f001 ffd7 	bl	80281d8 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 802622a:	2310      	movs	r3, #16
 802622c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802622e:	2301      	movs	r3, #1
 8026230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026232:	2300      	movs	r3, #0
 8026234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026236:	2301      	movs	r3, #1
 8026238:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 802623a:	f107 030c 	add.w	r3, r7, #12
 802623e:	4619      	mov	r1, r3
 8026240:	4804      	ldr	r0, [pc, #16]	; (8026254 <spi_flash_gpio_init+0xec>)
 8026242:	f001 ffc9 	bl	80281d8 <HAL_GPIO_Init>
}
 8026246:	bf00      	nop
 8026248:	3720      	adds	r7, #32
 802624a:	46bd      	mov	sp, r7
 802624c:	bd80      	pop	{r7, pc}
 802624e:	bf00      	nop
 8026250:	40023800 	.word	0x40023800
 8026254:	40020400 	.word	0x40020400
 8026258:	40020000 	.word	0x40020000

0802625c <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 802625c:	b580      	push	{r7, lr}
 802625e:	b086      	sub	sp, #24
 8026260:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026262:	1d3b      	adds	r3, r7, #4
 8026264:	2200      	movs	r2, #0
 8026266:	601a      	str	r2, [r3, #0]
 8026268:	605a      	str	r2, [r3, #4]
 802626a:	609a      	str	r2, [r3, #8]
 802626c:	60da      	str	r2, [r3, #12]
 802626e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_DISABLE();
 8026270:	4b1a      	ldr	r3, [pc, #104]	; (80262dc <spi_flash_gpio_uninit+0x80>)
 8026272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026274:	4a19      	ldr	r2, [pc, #100]	; (80262dc <spi_flash_gpio_uninit+0x80>)
 8026276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802627a:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 802627c:	2308      	movs	r3, #8
 802627e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8026280:	2300      	movs	r3, #0
 8026282:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026284:	2300      	movs	r3, #0
 8026286:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026288:	2305      	movs	r3, #5
 802628a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 802628c:	1d3b      	adds	r3, r7, #4
 802628e:	4619      	mov	r1, r3
 8026290:	4813      	ldr	r0, [pc, #76]	; (80262e0 <spi_flash_gpio_uninit+0x84>)
 8026292:	f001 ffa1 	bl	80281d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8026296:	2380      	movs	r3, #128	; 0x80
 8026298:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802629a:	2300      	movs	r3, #0
 802629c:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802629e:	2305      	movs	r3, #5
 80262a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80262a2:	1d3b      	adds	r3, r7, #4
 80262a4:	4619      	mov	r1, r3
 80262a6:	480f      	ldr	r0, [pc, #60]	; (80262e4 <spi_flash_gpio_uninit+0x88>)
 80262a8:	f001 ff96 	bl	80281d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80262ac:	2340      	movs	r3, #64	; 0x40
 80262ae:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80262b0:	2300      	movs	r3, #0
 80262b2:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80262b4:	2305      	movs	r3, #5
 80262b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80262b8:	1d3b      	adds	r3, r7, #4
 80262ba:	4619      	mov	r1, r3
 80262bc:	4809      	ldr	r0, [pc, #36]	; (80262e4 <spi_flash_gpio_uninit+0x88>)
 80262be:	f001 ff8b 	bl	80281d8 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80262c2:	2310      	movs	r3, #16
 80262c4:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80262c6:	2300      	movs	r3, #0
 80262c8:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80262ca:	1d3b      	adds	r3, r7, #4
 80262cc:	4619      	mov	r1, r3
 80262ce:	4804      	ldr	r0, [pc, #16]	; (80262e0 <spi_flash_gpio_uninit+0x84>)
 80262d0:	f001 ff82 	bl	80281d8 <HAL_GPIO_Init>
}
 80262d4:	bf00      	nop
 80262d6:	3718      	adds	r7, #24
 80262d8:	46bd      	mov	sp, r7
 80262da:	bd80      	pop	{r7, pc}
 80262dc:	40023800 	.word	0x40023800
 80262e0:	40020400 	.word	0x40020400
 80262e4:	40020000 	.word	0x40020000

080262e8 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 80262e8:	b580      	push	{r7, lr}
 80262ea:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 80262ec:	2200      	movs	r2, #0
 80262ee:	2110      	movs	r1, #16
 80262f0:	4802      	ldr	r0, [pc, #8]	; (80262fc <spi_flash_select_chip+0x14>)
 80262f2:	f002 fa09 	bl	8028708 <HAL_GPIO_WritePin>
}
 80262f6:	bf00      	nop
 80262f8:	bd80      	pop	{r7, pc}
 80262fa:	bf00      	nop
 80262fc:	40020400 	.word	0x40020400

08026300 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026300:	b580      	push	{r7, lr}
 8026302:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026304:	2201      	movs	r2, #1
 8026306:	2110      	movs	r1, #16
 8026308:	4802      	ldr	r0, [pc, #8]	; (8026314 <spi_flash_deselect_chip+0x14>)
 802630a:	f002 f9fd 	bl	8028708 <HAL_GPIO_WritePin>
}
 802630e:	bf00      	nop
 8026310:	bd80      	pop	{r7, pc}
 8026312:	bf00      	nop
 8026314:	40020400 	.word	0x40020400

08026318 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026318:	b480      	push	{r7}
 802631a:	b085      	sub	sp, #20
 802631c:	af00      	add	r7, sp, #0
 802631e:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026320:	4b1f      	ldr	r3, [pc, #124]	; (80263a0 <spi_flash_get_baud_rate_prescaler+0x88>)
 8026322:	681b      	ldr	r3, [r3, #0]
 8026324:	4a1f      	ldr	r2, [pc, #124]	; (80263a4 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8026326:	fba2 2303 	umull	r2, r3, r2, r3
 802632a:	099b      	lsrs	r3, r3, #6
 802632c:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 802632e:	68fb      	ldr	r3, [r7, #12]
 8026330:	085b      	lsrs	r3, r3, #1
 8026332:	687a      	ldr	r2, [r7, #4]
 8026334:	429a      	cmp	r2, r3
 8026336:	d301      	bcc.n	802633c <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8026338:	2300      	movs	r3, #0
 802633a:	e02a      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 802633c:	68fb      	ldr	r3, [r7, #12]
 802633e:	089b      	lsrs	r3, r3, #2
 8026340:	687a      	ldr	r2, [r7, #4]
 8026342:	429a      	cmp	r2, r3
 8026344:	d301      	bcc.n	802634a <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 8026346:	2308      	movs	r3, #8
 8026348:	e023      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 802634a:	68fb      	ldr	r3, [r7, #12]
 802634c:	08db      	lsrs	r3, r3, #3
 802634e:	687a      	ldr	r2, [r7, #4]
 8026350:	429a      	cmp	r2, r3
 8026352:	d301      	bcc.n	8026358 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 8026354:	2310      	movs	r3, #16
 8026356:	e01c      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8026358:	68fb      	ldr	r3, [r7, #12]
 802635a:	091b      	lsrs	r3, r3, #4
 802635c:	687a      	ldr	r2, [r7, #4]
 802635e:	429a      	cmp	r2, r3
 8026360:	d301      	bcc.n	8026366 <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 8026362:	2318      	movs	r3, #24
 8026364:	e015      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8026366:	68fb      	ldr	r3, [r7, #12]
 8026368:	095b      	lsrs	r3, r3, #5
 802636a:	687a      	ldr	r2, [r7, #4]
 802636c:	429a      	cmp	r2, r3
 802636e:	d301      	bcc.n	8026374 <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 8026370:	2320      	movs	r3, #32
 8026372:	e00e      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026374:	68fb      	ldr	r3, [r7, #12]
 8026376:	099b      	lsrs	r3, r3, #6
 8026378:	687a      	ldr	r2, [r7, #4]
 802637a:	429a      	cmp	r2, r3
 802637c:	d301      	bcc.n	8026382 <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 802637e:	2328      	movs	r3, #40	; 0x28
 8026380:	e007      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8026382:	68fb      	ldr	r3, [r7, #12]
 8026384:	09db      	lsrs	r3, r3, #7
 8026386:	687a      	ldr	r2, [r7, #4]
 8026388:	429a      	cmp	r2, r3
 802638a:	d301      	bcc.n	8026390 <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 802638c:	2330      	movs	r3, #48	; 0x30
 802638e:	e000      	b.n	8026392 <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 8026390:	2338      	movs	r3, #56	; 0x38
}
 8026392:	4618      	mov	r0, r3
 8026394:	3714      	adds	r7, #20
 8026396:	46bd      	mov	sp, r7
 8026398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802639c:	4770      	bx	lr
 802639e:	bf00      	nop
 80263a0:	20000138 	.word	0x20000138
 80263a4:	10624dd3 	.word	0x10624dd3

080263a8 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 80263a8:	b590      	push	{r4, r7, lr}
 80263aa:	b08f      	sub	sp, #60	; 0x3c
 80263ac:	af00      	add	r7, sp, #0
 80263ae:	6078      	str	r0, [r7, #4]
 80263b0:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 80263b2:	683b      	ldr	r3, [r7, #0]
 80263b4:	2b0e      	cmp	r3, #14
 80263b6:	d802      	bhi.n	80263be <spi_flash_init+0x16>
        return -1; 
 80263b8:	f04f 33ff 	mov.w	r3, #4294967295
 80263bc:	e041      	b.n	8026442 <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 80263be:	4b23      	ldr	r3, [pc, #140]	; (802644c <spi_flash_init+0xa4>)
 80263c0:	687a      	ldr	r2, [r7, #4]
 80263c2:	4614      	mov	r4, r2
 80263c4:	6820      	ldr	r0, [r4, #0]
 80263c6:	6861      	ldr	r1, [r4, #4]
 80263c8:	68a2      	ldr	r2, [r4, #8]
 80263ca:	c307      	stmia	r3!, {r0, r1, r2}
 80263cc:	89a2      	ldrh	r2, [r4, #12]
 80263ce:	7ba1      	ldrb	r1, [r4, #14]
 80263d0:	801a      	strh	r2, [r3, #0]
 80263d2:	460a      	mov	r2, r1
 80263d4:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 80263d6:	f7ff fec7 	bl	8026168 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80263da:	f7ff ff91 	bl	8026300 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 80263de:	4b1c      	ldr	r3, [pc, #112]	; (8026450 <spi_flash_init+0xa8>)
 80263e0:	2200      	movs	r2, #0
 80263e2:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 80263e4:	4b1a      	ldr	r3, [pc, #104]	; (8026450 <spi_flash_init+0xa8>)
 80263e6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80263ea:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 80263ec:	4b18      	ldr	r3, [pc, #96]	; (8026450 <spi_flash_init+0xa8>)
 80263ee:	2200      	movs	r2, #0
 80263f0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 80263f2:	4b17      	ldr	r3, [pc, #92]	; (8026450 <spi_flash_init+0xa8>)
 80263f4:	2202      	movs	r2, #2
 80263f6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 80263f8:	4b15      	ldr	r3, [pc, #84]	; (8026450 <spi_flash_init+0xa8>)
 80263fa:	2201      	movs	r2, #1
 80263fc:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 80263fe:	4b14      	ldr	r3, [pc, #80]	; (8026450 <spi_flash_init+0xa8>)
 8026400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026404:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 8026406:	4b11      	ldr	r3, [pc, #68]	; (802644c <spi_flash_init+0xa4>)
 8026408:	f8d3 300b 	ldr.w	r3, [r3, #11]
 802640c:	4618      	mov	r0, r3
 802640e:	f7ff ff83 	bl	8026318 <spi_flash_get_baud_rate_prescaler>
 8026412:	4603      	mov	r3, r0
 8026414:	461a      	mov	r2, r3
 8026416:	4b0e      	ldr	r3, [pc, #56]	; (8026450 <spi_flash_init+0xa8>)
 8026418:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 802641a:	4b0d      	ldr	r3, [pc, #52]	; (8026450 <spi_flash_init+0xa8>)
 802641c:	2200      	movs	r2, #0
 802641e:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 8026420:	4b0b      	ldr	r3, [pc, #44]	; (8026450 <spi_flash_init+0xa8>)
 8026422:	2200      	movs	r2, #0
 8026424:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 8026426:	4b0a      	ldr	r3, [pc, #40]	; (8026450 <spi_flash_init+0xa8>)
 8026428:	220a      	movs	r2, #10
 802642a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802642c:	4808      	ldr	r0, [pc, #32]	; (8026450 <spi_flash_init+0xa8>)
 802642e:	f004 fcb6 	bl	802ad9e <HAL_SPI_Init>
 8026432:	4603      	mov	r3, r0
 8026434:	2b00      	cmp	r3, #0
 8026436:	d001      	beq.n	802643c <spi_flash_init+0x94>
    {
      Error_Handler();
 8026438:	f7fd fa94 	bl	8023964 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 802643c:	f000 f958 	bl	80266f0 <spi_flash_chip_init>

    return 0;
 8026440:	2300      	movs	r3, #0
}
 8026442:	4618      	mov	r0, r3
 8026444:	373c      	adds	r7, #60	; 0x3c
 8026446:	46bd      	mov	sp, r7
 8026448:	bd90      	pop	{r4, r7, pc}
 802644a:	bf00      	nop
 802644c:	20005130 	.word	0x20005130
 8026450:	20005158 	.word	0x20005158

08026454 <spi_flash_uninit>:

static void spi_flash_uninit()
{
 8026454:	b580      	push	{r7, lr}
 8026456:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 8026458:	f7ff ff00 	bl	802625c <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 802645c:	4802      	ldr	r0, [pc, #8]	; (8026468 <spi_flash_uninit+0x14>)
 802645e:	f004 fd27 	bl	802aeb0 <HAL_SPI_DeInit>
}
 8026462:	bf00      	nop
 8026464:	bd80      	pop	{r7, pc}
 8026466:	bf00      	nop
 8026468:	20005158 	.word	0x20005158

0802646c <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 802646c:	b580      	push	{r7, lr}
 802646e:	b086      	sub	sp, #24
 8026470:	af02      	add	r7, sp, #8
 8026472:	4603      	mov	r3, r0
 8026474:	71fb      	strb	r3, [r7, #7]
  uint32_t timeout = 0x1000000;
 8026476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802647a:	60fb      	str	r3, [r7, #12]
  uint8_t rx_byte = 0X00;
 802647c:	2300      	movs	r3, #0
 802647e:	72fb      	strb	r3, [r7, #11]

  if(HAL_SPI_TransmitReceive(&hspi1, &byte, &rx_byte, 1, timeout) != HAL_OK)
 8026480:	f107 020b 	add.w	r2, r7, #11
 8026484:	1df9      	adds	r1, r7, #7
 8026486:	68fb      	ldr	r3, [r7, #12]
 8026488:	9300      	str	r3, [sp, #0]
 802648a:	2301      	movs	r3, #1
 802648c:	4806      	ldr	r0, [pc, #24]	; (80264a8 <spi_flash_send_byte+0x3c>)
 802648e:	f004 fd37 	bl	802af00 <HAL_SPI_TransmitReceive>
 8026492:	4603      	mov	r3, r0
 8026494:	2b00      	cmp	r3, #0
 8026496:	d001      	beq.n	802649c <spi_flash_send_byte+0x30>
   {
	   rx_byte = 0XFF;
 8026498:	23ff      	movs	r3, #255	; 0xff
 802649a:	72fb      	strb	r3, [r7, #11]
   }

  return rx_byte;
 802649c:	7afb      	ldrb	r3, [r7, #11]
}
 802649e:	4618      	mov	r0, r3
 80264a0:	3710      	adds	r7, #16
 80264a2:	46bd      	mov	sp, r7
 80264a4:	bd80      	pop	{r7, pc}
 80264a6:	bf00      	nop
 80264a8:	20005158 	.word	0x20005158

080264ac <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 80264ac:	b580      	push	{r7, lr}
 80264ae:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 80264b0:	20ff      	movs	r0, #255	; 0xff
 80264b2:	f7ff ffdb 	bl	802646c <spi_flash_send_byte>
 80264b6:	4603      	mov	r3, r0
}
 80264b8:	4618      	mov	r0, r3
 80264ba:	bd80      	pop	{r7, pc}

080264bc <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 80264bc:	b580      	push	{r7, lr}
 80264be:	b082      	sub	sp, #8
 80264c0:	af00      	add	r7, sp, #0
 80264c2:	4603      	mov	r3, r0
 80264c4:	460a      	mov	r2, r1
 80264c6:	71fb      	strb	r3, [r7, #7]
 80264c8:	4613      	mov	r3, r2
 80264ca:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 80264cc:	f7ff ff0c 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 80264d0:	201f      	movs	r0, #31
 80264d2:	f7ff ffcb 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 80264d6:	79fb      	ldrb	r3, [r7, #7]
 80264d8:	4618      	mov	r0, r3
 80264da:	f7ff ffc7 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 80264de:	79bb      	ldrb	r3, [r7, #6]
 80264e0:	4618      	mov	r0, r3
 80264e2:	f7ff ffc3 	bl	802646c <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 80264e6:	f7ff ff0b 	bl	8026300 <spi_flash_deselect_chip>
}
 80264ea:	bf00      	nop
 80264ec:	3708      	adds	r7, #8
 80264ee:	46bd      	mov	sp, r7
 80264f0:	bd80      	pop	{r7, pc}

080264f2 <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 80264f2:	b580      	push	{r7, lr}
 80264f4:	b082      	sub	sp, #8
 80264f6:	af00      	add	r7, sp, #0
 80264f8:	4603      	mov	r3, r0
 80264fa:	6039      	str	r1, [r7, #0]
 80264fc:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 80264fe:	f7ff fef3 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 8026502:	200f      	movs	r0, #15
 8026504:	f7ff ffb2 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026508:	79fb      	ldrb	r3, [r7, #7]
 802650a:	4618      	mov	r0, r3
 802650c:	f7ff ffae 	bl	802646c <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 8026510:	f7ff ffcc 	bl	80264ac <spi_flash_read_byte>
 8026514:	4603      	mov	r3, r0
 8026516:	461a      	mov	r2, r3
 8026518:	683b      	ldr	r3, [r7, #0]
 802651a:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 802651c:	f7ff fef0 	bl	8026300 <spi_flash_deselect_chip>
}
 8026520:	bf00      	nop
 8026522:	3708      	adds	r7, #8
 8026524:	46bd      	mov	sp, r7
 8026526:	bd80      	pop	{r7, pc}

08026528 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026528:	b580      	push	{r7, lr}
 802652a:	b082      	sub	sp, #8
 802652c:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 802652e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026532:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 8026534:	1cfb      	adds	r3, r7, #3
 8026536:	4619      	mov	r1, r3
 8026538:	20c0      	movs	r0, #192	; 0xc0
 802653a:	f7ff ffda 	bl	80264f2 <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 802653e:	78fb      	ldrb	r3, [r7, #3]
 8026540:	f003 0301 	and.w	r3, r3, #1
 8026544:	2b00      	cmp	r3, #0
 8026546:	d002      	beq.n	802654e <spi_flash_read_status+0x26>
 8026548:	687b      	ldr	r3, [r7, #4]
 802654a:	2b00      	cmp	r3, #0
 802654c:	d1f2      	bne.n	8026534 <spi_flash_read_status+0xc>

    if (!timeout)
 802654e:	687b      	ldr	r3, [r7, #4]
 8026550:	2b00      	cmp	r3, #0
 8026552:	d101      	bne.n	8026558 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 8026554:	2303      	movs	r3, #3
 8026556:	e02b      	b.n	80265b0 <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 8026558:	4b17      	ldr	r3, [pc, #92]	; (80265b8 <spi_flash_read_status+0x90>)
 802655a:	681b      	ldr	r3, [r3, #0]
 802655c:	2b03      	cmp	r3, #3
 802655e:	d014      	beq.n	802658a <spi_flash_read_status+0x62>
 8026560:	2b03      	cmp	r3, #3
 8026562:	d81d      	bhi.n	80265a0 <spi_flash_read_status+0x78>
 8026564:	2b01      	cmp	r3, #1
 8026566:	d002      	beq.n	802656e <spi_flash_read_status+0x46>
 8026568:	2b02      	cmp	r3, #2
 802656a:	d007      	beq.n	802657c <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 802656c:	e018      	b.n	80265a0 <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 802656e:	78fb      	ldrb	r3, [r7, #3]
 8026570:	f003 0304 	and.w	r3, r3, #4
 8026574:	2b00      	cmp	r3, #0
 8026576:	d015      	beq.n	80265a4 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 8026578:	2302      	movs	r3, #2
 802657a:	e019      	b.n	80265b0 <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 802657c:	78fb      	ldrb	r3, [r7, #3]
 802657e:	f003 0308 	and.w	r3, r3, #8
 8026582:	2b00      	cmp	r3, #0
 8026584:	d010      	beq.n	80265a8 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 8026586:	2302      	movs	r3, #2
 8026588:	e012      	b.n	80265b0 <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 802658a:	4b0c      	ldr	r3, [pc, #48]	; (80265bc <spi_flash_read_status+0x94>)
 802658c:	799a      	ldrb	r2, [r3, #6]
 802658e:	78fb      	ldrb	r3, [r7, #3]
 8026590:	4013      	ands	r3, r2
 8026592:	b2da      	uxtb	r2, r3
 8026594:	4b09      	ldr	r3, [pc, #36]	; (80265bc <spi_flash_read_status+0x94>)
 8026596:	79db      	ldrb	r3, [r3, #7]
 8026598:	429a      	cmp	r2, r3
 802659a:	d107      	bne.n	80265ac <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 802659c:	2302      	movs	r3, #2
 802659e:	e007      	b.n	80265b0 <spi_flash_read_status+0x88>
            break;
 80265a0:	bf00      	nop
 80265a2:	e004      	b.n	80265ae <spi_flash_read_status+0x86>
            break;
 80265a4:	bf00      	nop
 80265a6:	e002      	b.n	80265ae <spi_flash_read_status+0x86>
            break;
 80265a8:	bf00      	nop
 80265aa:	e000      	b.n	80265ae <spi_flash_read_status+0x86>
            break;
 80265ac:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 80265ae:	2300      	movs	r3, #0
}
 80265b0:	4618      	mov	r0, r3
 80265b2:	3708      	adds	r7, #8
 80265b4:	46bd      	mov	sp, r7
 80265b6:	bd80      	pop	{r7, pc}
 80265b8:	20005140 	.word	0x20005140
 80265bc:	20005130 	.word	0x20005130

080265c0 <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 80265c0:	b580      	push	{r7, lr}
 80265c2:	b084      	sub	sp, #16
 80265c4:	af00      	add	r7, sp, #0
 80265c6:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 80265c8:	4b18      	ldr	r3, [pc, #96]	; (802662c <spi_flash_select_die_cmd+0x6c>)
 80265ca:	7a9b      	ldrb	r3, [r3, #10]
 80265cc:	2b01      	cmp	r3, #1
 80265ce:	d002      	beq.n	80265d6 <spi_flash_select_die_cmd+0x16>
 80265d0:	2b02      	cmp	r3, #2
 80265d2:	d00d      	beq.n	80265f0 <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 80265d4:	e026      	b.n	8026624 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 80265d6:	f7ff fe87 	bl	80262e8 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 80265da:	20c2      	movs	r0, #194	; 0xc2
 80265dc:	f7ff ff46 	bl	802646c <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	b2db      	uxtb	r3, r3
 80265e4:	4618      	mov	r0, r3
 80265e6:	f7ff ff41 	bl	802646c <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 80265ea:	f7ff fe89 	bl	8026300 <spi_flash_deselect_chip>
        break;
 80265ee:	e019      	b.n	8026624 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 80265f0:	f107 030f 	add.w	r3, r7, #15
 80265f4:	4619      	mov	r1, r3
 80265f6:	20d0      	movs	r0, #208	; 0xd0
 80265f8:	f7ff ff7b 	bl	80264f2 <spi_flash_get_feature>
        if(die == 0) {
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	2b00      	cmp	r3, #0
 8026600:	d105      	bne.n	802660e <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 8026602:	7bfb      	ldrb	r3, [r7, #15]
 8026604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026608:	b2db      	uxtb	r3, r3
 802660a:	73fb      	strb	r3, [r7, #15]
 802660c:	e004      	b.n	8026618 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 802660e:	7bfb      	ldrb	r3, [r7, #15]
 8026610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026614:	b2db      	uxtb	r3, r3
 8026616:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8026618:	7bfb      	ldrb	r3, [r7, #15]
 802661a:	4619      	mov	r1, r3
 802661c:	20d0      	movs	r0, #208	; 0xd0
 802661e:	f7ff ff4d 	bl	80264bc <spi_flash_set_feature>
        break;
 8026622:	bf00      	nop
    }
}
 8026624:	bf00      	nop
 8026626:	3710      	adds	r7, #16
 8026628:	46bd      	mov	sp, r7
 802662a:	bd80      	pop	{r7, pc}
 802662c:	20005130 	.word	0x20005130

08026630 <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 8026630:	b580      	push	{r7, lr}
 8026632:	b084      	sub	sp, #16
 8026634:	af00      	add	r7, sp, #0
 8026636:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8026638:	2300      	movs	r3, #0
 802663a:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 802663c:	4b0f      	ldr	r3, [pc, #60]	; (802667c <spi_flash_select_die+0x4c>)
 802663e:	7a9b      	ldrb	r3, [r3, #10]
 8026640:	2b00      	cmp	r3, #0
 8026642:	d017      	beq.n	8026674 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 8026644:	4b0d      	ldr	r3, [pc, #52]	; (802667c <spi_flash_select_die+0x4c>)
 8026646:	7a5b      	ldrb	r3, [r3, #9]
 8026648:	2b00      	cmp	r3, #0
 802664a:	d104      	bne.n	8026656 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	0c1b      	lsrs	r3, r3, #16
 8026650:	b2db      	uxtb	r3, r3
 8026652:	60fb      	str	r3, [r7, #12]
 8026654:	e003      	b.n	802665e <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 8026656:	687b      	ldr	r3, [r7, #4]
 8026658:	0c5b      	lsrs	r3, r3, #17
 802665a:	b2db      	uxtb	r3, r3
 802665c:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 802665e:	4b08      	ldr	r3, [pc, #32]	; (8026680 <spi_flash_select_die+0x50>)
 8026660:	681b      	ldr	r3, [r3, #0]
 8026662:	68fa      	ldr	r2, [r7, #12]
 8026664:	429a      	cmp	r2, r3
 8026666:	d005      	beq.n	8026674 <spi_flash_select_die+0x44>
            current_die = die;
 8026668:	4a05      	ldr	r2, [pc, #20]	; (8026680 <spi_flash_select_die+0x50>)
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 802666e:	68f8      	ldr	r0, [r7, #12]
 8026670:	f7ff ffa6 	bl	80265c0 <spi_flash_select_die_cmd>
        }
    }
}
 8026674:	bf00      	nop
 8026676:	3710      	adds	r7, #16
 8026678:	46bd      	mov	sp, r7
 802667a:	bd80      	pop	{r7, pc}
 802667c:	20005130 	.word	0x20005130
 8026680:	20005144 	.word	0x20005144

08026684 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8026684:	b580      	push	{r7, lr}
 8026686:	b082      	sub	sp, #8
 8026688:	af00      	add	r7, sp, #0
 802668a:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 802668c:	f7ff fe2c 	bl	80262e8 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 8026690:	209f      	movs	r0, #159	; 0x9f
 8026692:	f7ff feeb 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 8026696:	2000      	movs	r0, #0
 8026698:	f7ff fee8 	bl	802646c <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 802669c:	f7ff ff06 	bl	80264ac <spi_flash_read_byte>
 80266a0:	4603      	mov	r3, r0
 80266a2:	461a      	mov	r2, r3
 80266a4:	687b      	ldr	r3, [r7, #4]
 80266a6:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 80266a8:	f7ff ff00 	bl	80264ac <spi_flash_read_byte>
 80266ac:	4603      	mov	r3, r0
 80266ae:	461a      	mov	r2, r3
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 80266b4:	f7ff fefa 	bl	80264ac <spi_flash_read_byte>
 80266b8:	4603      	mov	r3, r0
 80266ba:	461a      	mov	r2, r3
 80266bc:	687b      	ldr	r3, [r7, #4]
 80266be:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 80266c0:	f7ff fef4 	bl	80264ac <spi_flash_read_byte>
 80266c4:	4603      	mov	r3, r0
 80266c6:	461a      	mov	r2, r3
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 80266cc:	f7ff feee 	bl	80264ac <spi_flash_read_byte>
 80266d0:	4603      	mov	r3, r0
 80266d2:	461a      	mov	r2, r3
 80266d4:	687b      	ldr	r3, [r7, #4]
 80266d6:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 80266d8:	f7ff fee8 	bl	80264ac <spi_flash_read_byte>
 80266dc:	4603      	mov	r3, r0
 80266de:	461a      	mov	r2, r3
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 80266e4:	f7ff fe0c 	bl	8026300 <spi_flash_deselect_chip>
}
 80266e8:	bf00      	nop
 80266ea:	3708      	adds	r7, #8
 80266ec:	46bd      	mov	sp, r7
 80266ee:	bd80      	pop	{r7, pc}

080266f0 <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 80266f0:	b580      	push	{r7, lr}
 80266f2:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 80266f4:	4b19      	ldr	r3, [pc, #100]	; (802675c <spi_flash_chip_init+0x6c>)
 80266f6:	7a9b      	ldrb	r3, [r3, #10]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d019      	beq.n	8026730 <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 80266fc:	2000      	movs	r0, #0
 80266fe:	f7ff ff5f 	bl	80265c0 <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 8026702:	4b16      	ldr	r3, [pc, #88]	; (802675c <spi_flash_chip_init+0x6c>)
 8026704:	791b      	ldrb	r3, [r3, #4]
 8026706:	2bff      	cmp	r3, #255	; 0xff
 8026708:	d005      	beq.n	8026716 <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 802670a:	4b14      	ldr	r3, [pc, #80]	; (802675c <spi_flash_chip_init+0x6c>)
 802670c:	791b      	ldrb	r3, [r3, #4]
 802670e:	4619      	mov	r1, r3
 8026710:	20b0      	movs	r0, #176	; 0xb0
 8026712:	f7ff fed3 	bl	80264bc <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 8026716:	4b11      	ldr	r3, [pc, #68]	; (802675c <spi_flash_chip_init+0x6c>)
 8026718:	795b      	ldrb	r3, [r3, #5]
 802671a:	2bff      	cmp	r3, #255	; 0xff
 802671c:	d005      	beq.n	802672a <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 802671e:	4b0f      	ldr	r3, [pc, #60]	; (802675c <spi_flash_chip_init+0x6c>)
 8026720:	795b      	ldrb	r3, [r3, #5]
 8026722:	4619      	mov	r1, r3
 8026724:	20a0      	movs	r0, #160	; 0xa0
 8026726:	f7ff fec9 	bl	80264bc <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 802672a:	2001      	movs	r0, #1
 802672c:	f7ff ff48 	bl	80265c0 <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 8026730:	4b0a      	ldr	r3, [pc, #40]	; (802675c <spi_flash_chip_init+0x6c>)
 8026732:	791b      	ldrb	r3, [r3, #4]
 8026734:	2bff      	cmp	r3, #255	; 0xff
 8026736:	d005      	beq.n	8026744 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8026738:	4b08      	ldr	r3, [pc, #32]	; (802675c <spi_flash_chip_init+0x6c>)
 802673a:	791b      	ldrb	r3, [r3, #4]
 802673c:	4619      	mov	r1, r3
 802673e:	20b0      	movs	r0, #176	; 0xb0
 8026740:	f7ff febc 	bl	80264bc <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 8026744:	4b05      	ldr	r3, [pc, #20]	; (802675c <spi_flash_chip_init+0x6c>)
 8026746:	795b      	ldrb	r3, [r3, #5]
 8026748:	2bff      	cmp	r3, #255	; 0xff
 802674a:	d005      	beq.n	8026758 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 802674c:	4b03      	ldr	r3, [pc, #12]	; (802675c <spi_flash_chip_init+0x6c>)
 802674e:	795b      	ldrb	r3, [r3, #5]
 8026750:	4619      	mov	r1, r3
 8026752:	20a0      	movs	r0, #160	; 0xa0
 8026754:	f7ff feb2 	bl	80264bc <spi_flash_set_feature>
}
 8026758:	bf00      	nop
 802675a:	bd80      	pop	{r7, pc}
 802675c:	20005130 	.word	0x20005130

08026760 <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 8026760:	b580      	push	{r7, lr}
 8026762:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026764:	f7ff fdc0 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 8026768:	2006      	movs	r0, #6
 802676a:	f7ff fe7f 	bl	802646c <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 802676e:	f7ff fdc7 	bl	8026300 <spi_flash_deselect_chip>
}
 8026772:	bf00      	nop
 8026774:	bd80      	pop	{r7, pc}
	...

08026778 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 8026778:	b580      	push	{r7, lr}
 802677a:	b086      	sub	sp, #24
 802677c:	af00      	add	r7, sp, #0
 802677e:	60f8      	str	r0, [r7, #12]
 8026780:	60b9      	str	r1, [r7, #8]
 8026782:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 8026784:	2300      	movs	r3, #0
 8026786:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 8026788:	f7ff fdae 	bl	80262e8 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 802678c:	2002      	movs	r0, #2
 802678e:	f7ff fe6d 	bl	802646c <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 8026792:	4b1f      	ldr	r3, [pc, #124]	; (8026810 <spi_flash_program_load+0x98>)
 8026794:	7a5b      	ldrb	r3, [r3, #9]
 8026796:	2b00      	cmp	r3, #0
 8026798:	d018      	beq.n	80267cc <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 802679a:	687b      	ldr	r3, [r7, #4]
 802679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80267a0:	2b00      	cmp	r3, #0
 80267a2:	d009      	beq.n	80267b8 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 80267a4:	693b      	ldr	r3, [r7, #16]
 80267a6:	0a1b      	lsrs	r3, r3, #8
 80267a8:	b2db      	uxtb	r3, r3
 80267aa:	f043 0310 	orr.w	r3, r3, #16
 80267ae:	b2db      	uxtb	r3, r3
 80267b0:	4618      	mov	r0, r3
 80267b2:	f7ff fe5b 	bl	802646c <spi_flash_send_byte>
 80267b6:	e00f      	b.n	80267d8 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 80267b8:	693b      	ldr	r3, [r7, #16]
 80267ba:	0a1b      	lsrs	r3, r3, #8
 80267bc:	b2db      	uxtb	r3, r3
 80267be:	f023 0310 	bic.w	r3, r3, #16
 80267c2:	b2db      	uxtb	r3, r3
 80267c4:	4618      	mov	r0, r3
 80267c6:	f7ff fe51 	bl	802646c <spi_flash_send_byte>
 80267ca:	e005      	b.n	80267d8 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 80267cc:	693b      	ldr	r3, [r7, #16]
 80267ce:	0a1b      	lsrs	r3, r3, #8
 80267d0:	b2db      	uxtb	r3, r3
 80267d2:	4618      	mov	r0, r3
 80267d4:	f7ff fe4a 	bl	802646c <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 80267d8:	693b      	ldr	r3, [r7, #16]
 80267da:	b2db      	uxtb	r3, r3
 80267dc:	4618      	mov	r0, r3
 80267de:	f7ff fe45 	bl	802646c <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 80267e2:	2300      	movs	r3, #0
 80267e4:	617b      	str	r3, [r7, #20]
 80267e6:	e009      	b.n	80267fc <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 80267e8:	68fa      	ldr	r2, [r7, #12]
 80267ea:	697b      	ldr	r3, [r7, #20]
 80267ec:	4413      	add	r3, r2
 80267ee:	781b      	ldrb	r3, [r3, #0]
 80267f0:	4618      	mov	r0, r3
 80267f2:	f7ff fe3b 	bl	802646c <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 80267f6:	697b      	ldr	r3, [r7, #20]
 80267f8:	3301      	adds	r3, #1
 80267fa:	617b      	str	r3, [r7, #20]
 80267fc:	697a      	ldr	r2, [r7, #20]
 80267fe:	68bb      	ldr	r3, [r7, #8]
 8026800:	429a      	cmp	r2, r3
 8026802:	d3f1      	bcc.n	80267e8 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8026804:	f7ff fd7c 	bl	8026300 <spi_flash_deselect_chip>
}
 8026808:	bf00      	nop
 802680a:	3718      	adds	r7, #24
 802680c:	46bd      	mov	sp, r7
 802680e:	bd80      	pop	{r7, pc}
 8026810:	20005130 	.word	0x20005130

08026814 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8026814:	b580      	push	{r7, lr}
 8026816:	b084      	sub	sp, #16
 8026818:	af00      	add	r7, sp, #0
 802681a:	60f8      	str	r0, [r7, #12]
 802681c:	60b9      	str	r1, [r7, #8]
 802681e:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026820:	68b8      	ldr	r0, [r7, #8]
 8026822:	f7ff ff05 	bl	8026630 <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 8026826:	68ba      	ldr	r2, [r7, #8]
 8026828:	6879      	ldr	r1, [r7, #4]
 802682a:	68f8      	ldr	r0, [r7, #12]
 802682c:	f7ff ffa4 	bl	8026778 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 8026830:	f7ff ff96 	bl	8026760 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026834:	f7ff fd58 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 8026838:	2010      	movs	r0, #16
 802683a:	f7ff fe17 	bl	802646c <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 802683e:	4b0d      	ldr	r3, [pc, #52]	; (8026874 <spi_flash_write_page_async+0x60>)
 8026840:	2202      	movs	r2, #2
 8026842:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026844:	68bb      	ldr	r3, [r7, #8]
 8026846:	0c1b      	lsrs	r3, r3, #16
 8026848:	b2db      	uxtb	r3, r3
 802684a:	4618      	mov	r0, r3
 802684c:	f7ff fe0e 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026850:	68bb      	ldr	r3, [r7, #8]
 8026852:	0a1b      	lsrs	r3, r3, #8
 8026854:	b2db      	uxtb	r3, r3
 8026856:	4618      	mov	r0, r3
 8026858:	f7ff fe08 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 802685c:	68bb      	ldr	r3, [r7, #8]
 802685e:	b2db      	uxtb	r3, r3
 8026860:	4618      	mov	r0, r3
 8026862:	f7ff fe03 	bl	802646c <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026866:	f7ff fd4b 	bl	8026300 <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 802686a:	bf00      	nop
 802686c:	3710      	adds	r7, #16
 802686e:	46bd      	mov	sp, r7
 8026870:	bd80      	pop	{r7, pc}
 8026872:	bf00      	nop
 8026874:	20005140 	.word	0x20005140

08026878 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 8026878:	b580      	push	{r7, lr}
 802687a:	b082      	sub	sp, #8
 802687c:	af00      	add	r7, sp, #0
 802687e:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026880:	6878      	ldr	r0, [r7, #4]
 8026882:	f7ff fed5 	bl	8026630 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8026886:	f7ff fd2f 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 802688a:	2013      	movs	r0, #19
 802688c:	f7ff fdee 	bl	802646c <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 8026890:	4b0e      	ldr	r3, [pc, #56]	; (80268cc <spi_flash_load_page_into_cache+0x54>)
 8026892:	2203      	movs	r2, #3
 8026894:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	0c1b      	lsrs	r3, r3, #16
 802689a:	b2db      	uxtb	r3, r3
 802689c:	4618      	mov	r0, r3
 802689e:	f7ff fde5 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80268a2:	687b      	ldr	r3, [r7, #4]
 80268a4:	0a1b      	lsrs	r3, r3, #8
 80268a6:	b2db      	uxtb	r3, r3
 80268a8:	4618      	mov	r0, r3
 80268aa:	f7ff fddf 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80268ae:	687b      	ldr	r3, [r7, #4]
 80268b0:	b2db      	uxtb	r3, r3
 80268b2:	4618      	mov	r0, r3
 80268b4:	f7ff fdda 	bl	802646c <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80268b8:	f7ff fd22 	bl	8026300 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 80268bc:	f7ff fe34 	bl	8026528 <spi_flash_read_status>
 80268c0:	4603      	mov	r3, r0
}
 80268c2:	4618      	mov	r0, r3
 80268c4:	3708      	adds	r7, #8
 80268c6:	46bd      	mov	sp, r7
 80268c8:	bd80      	pop	{r7, pc}
 80268ca:	bf00      	nop
 80268cc:	20005140 	.word	0x20005140

080268d0 <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 80268d0:	b590      	push	{r4, r7, lr}
 80268d2:	b089      	sub	sp, #36	; 0x24
 80268d4:	af00      	add	r7, sp, #0
 80268d6:	60f8      	str	r0, [r7, #12]
 80268d8:	60b9      	str	r1, [r7, #8]
 80268da:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 80268dc:	68b8      	ldr	r0, [r7, #8]
 80268de:	f7ff ffcb 	bl	8026878 <spi_flash_load_page_into_cache>
 80268e2:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 80268e4:	2300      	movs	r3, #0
 80268e6:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 80268e8:	f7ff fcfe 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 80268ec:	2003      	movs	r0, #3
 80268ee:	f7ff fdbd 	bl	802646c <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 80268f2:	4b27      	ldr	r3, [pc, #156]	; (8026990 <spi_flash_read_page+0xc0>)
 80268f4:	7a1b      	ldrb	r3, [r3, #8]
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d002      	beq.n	8026900 <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 80268fa:	20ff      	movs	r0, #255	; 0xff
 80268fc:	f7ff fdb6 	bl	802646c <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 8026900:	4b23      	ldr	r3, [pc, #140]	; (8026990 <spi_flash_read_page+0xc0>)
 8026902:	7a5b      	ldrb	r3, [r3, #9]
 8026904:	2b00      	cmp	r3, #0
 8026906:	d018      	beq.n	802693a <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8026908:	68bb      	ldr	r3, [r7, #8]
 802690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802690e:	2b00      	cmp	r3, #0
 8026910:	d009      	beq.n	8026926 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 8026912:	697b      	ldr	r3, [r7, #20]
 8026914:	0a1b      	lsrs	r3, r3, #8
 8026916:	b2db      	uxtb	r3, r3
 8026918:	f043 0310 	orr.w	r3, r3, #16
 802691c:	b2db      	uxtb	r3, r3
 802691e:	4618      	mov	r0, r3
 8026920:	f7ff fda4 	bl	802646c <spi_flash_send_byte>
 8026924:	e00f      	b.n	8026946 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8026926:	697b      	ldr	r3, [r7, #20]
 8026928:	0a1b      	lsrs	r3, r3, #8
 802692a:	b2db      	uxtb	r3, r3
 802692c:	f023 0310 	bic.w	r3, r3, #16
 8026930:	b2db      	uxtb	r3, r3
 8026932:	4618      	mov	r0, r3
 8026934:	f7ff fd9a 	bl	802646c <spi_flash_send_byte>
 8026938:	e005      	b.n	8026946 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 802693a:	697b      	ldr	r3, [r7, #20]
 802693c:	0a1b      	lsrs	r3, r3, #8
 802693e:	b2db      	uxtb	r3, r3
 8026940:	4618      	mov	r0, r3
 8026942:	f7ff fd93 	bl	802646c <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8026946:	697b      	ldr	r3, [r7, #20]
 8026948:	b2db      	uxtb	r3, r3
 802694a:	4618      	mov	r0, r3
 802694c:	f7ff fd8e 	bl	802646c <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026950:	4b0f      	ldr	r3, [pc, #60]	; (8026990 <spi_flash_read_page+0xc0>)
 8026952:	7a1b      	ldrb	r3, [r3, #8]
 8026954:	2b00      	cmp	r3, #0
 8026956:	d102      	bne.n	802695e <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026958:	20ff      	movs	r0, #255	; 0xff
 802695a:	f7ff fd87 	bl	802646c <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 802695e:	2300      	movs	r3, #0
 8026960:	61fb      	str	r3, [r7, #28]
 8026962:	e009      	b.n	8026978 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026964:	68fa      	ldr	r2, [r7, #12]
 8026966:	69fb      	ldr	r3, [r7, #28]
 8026968:	18d4      	adds	r4, r2, r3
 802696a:	f7ff fd9f 	bl	80264ac <spi_flash_read_byte>
 802696e:	4603      	mov	r3, r0
 8026970:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026972:	69fb      	ldr	r3, [r7, #28]
 8026974:	3301      	adds	r3, #1
 8026976:	61fb      	str	r3, [r7, #28]
 8026978:	69fa      	ldr	r2, [r7, #28]
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	429a      	cmp	r2, r3
 802697e:	d3f1      	bcc.n	8026964 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026980:	f7ff fcbe 	bl	8026300 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026984:	69bb      	ldr	r3, [r7, #24]
}
 8026986:	4618      	mov	r0, r3
 8026988:	3724      	adds	r7, #36	; 0x24
 802698a:	46bd      	mov	sp, r7
 802698c:	bd90      	pop	{r4, r7, pc}
 802698e:	bf00      	nop
 8026990:	20005130 	.word	0x20005130

08026994 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8026994:	b590      	push	{r4, r7, lr}
 8026996:	b087      	sub	sp, #28
 8026998:	af00      	add	r7, sp, #0
 802699a:	60f8      	str	r0, [r7, #12]
 802699c:	60b9      	str	r1, [r7, #8]
 802699e:	607a      	str	r2, [r7, #4]
 80269a0:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 80269a2:	68b8      	ldr	r0, [r7, #8]
 80269a4:	f7ff fe44 	bl	8026630 <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 80269a8:	f7ff fc9e 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 80269ac:	2013      	movs	r0, #19
 80269ae:	f7ff fd5d 	bl	802646c <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 80269b2:	4b38      	ldr	r3, [pc, #224]	; (8026a94 <spi_flash_read_spare_data+0x100>)
 80269b4:	2204      	movs	r2, #4
 80269b6:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80269b8:	68bb      	ldr	r3, [r7, #8]
 80269ba:	0c1b      	lsrs	r3, r3, #16
 80269bc:	b2db      	uxtb	r3, r3
 80269be:	4618      	mov	r0, r3
 80269c0:	f7ff fd54 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80269c4:	68bb      	ldr	r3, [r7, #8]
 80269c6:	0a1b      	lsrs	r3, r3, #8
 80269c8:	b2db      	uxtb	r3, r3
 80269ca:	4618      	mov	r0, r3
 80269cc:	f7ff fd4e 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80269d0:	68bb      	ldr	r3, [r7, #8]
 80269d2:	b2db      	uxtb	r3, r3
 80269d4:	4618      	mov	r0, r3
 80269d6:	f7ff fd49 	bl	802646c <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80269da:	f7ff fc91 	bl	8026300 <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 80269de:	f7ff fda3 	bl	8026528 <spi_flash_read_status>
 80269e2:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 80269e4:	f7ff fc80 	bl	80262e8 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 80269e8:	2003      	movs	r0, #3
 80269ea:	f7ff fd3f 	bl	802646c <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 80269ee:	4b2a      	ldr	r3, [pc, #168]	; (8026a98 <spi_flash_read_spare_data+0x104>)
 80269f0:	7a1b      	ldrb	r3, [r3, #8]
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	d002      	beq.n	80269fc <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 80269f6:	20ff      	movs	r0, #255	; 0xff
 80269f8:	f7ff fd38 	bl	802646c <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 80269fc:	4b26      	ldr	r3, [pc, #152]	; (8026a98 <spi_flash_read_spare_data+0x104>)
 80269fe:	681b      	ldr	r3, [r3, #0]
 8026a00:	687a      	ldr	r2, [r7, #4]
 8026a02:	4413      	add	r3, r2
 8026a04:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8026a06:	4b24      	ldr	r3, [pc, #144]	; (8026a98 <spi_flash_read_spare_data+0x104>)
 8026a08:	7a5b      	ldrb	r3, [r3, #9]
 8026a0a:	2b00      	cmp	r3, #0
 8026a0c:	d018      	beq.n	8026a40 <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 8026a0e:	68bb      	ldr	r3, [r7, #8]
 8026a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	d009      	beq.n	8026a2c <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	0a1b      	lsrs	r3, r3, #8
 8026a1c:	b2db      	uxtb	r3, r3
 8026a1e:	f043 0310 	orr.w	r3, r3, #16
 8026a22:	b2db      	uxtb	r3, r3
 8026a24:	4618      	mov	r0, r3
 8026a26:	f7ff fd21 	bl	802646c <spi_flash_send_byte>
 8026a2a:	e00f      	b.n	8026a4c <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8026a2c:	687b      	ldr	r3, [r7, #4]
 8026a2e:	0a1b      	lsrs	r3, r3, #8
 8026a30:	b2db      	uxtb	r3, r3
 8026a32:	f023 0310 	bic.w	r3, r3, #16
 8026a36:	b2db      	uxtb	r3, r3
 8026a38:	4618      	mov	r0, r3
 8026a3a:	f7ff fd17 	bl	802646c <spi_flash_send_byte>
 8026a3e:	e005      	b.n	8026a4c <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	0a1b      	lsrs	r3, r3, #8
 8026a44:	b2db      	uxtb	r3, r3
 8026a46:	4618      	mov	r0, r3
 8026a48:	f7ff fd10 	bl	802646c <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8026a4c:	687b      	ldr	r3, [r7, #4]
 8026a4e:	b2db      	uxtb	r3, r3
 8026a50:	4618      	mov	r0, r3
 8026a52:	f7ff fd0b 	bl	802646c <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026a56:	4b10      	ldr	r3, [pc, #64]	; (8026a98 <spi_flash_read_spare_data+0x104>)
 8026a58:	7a1b      	ldrb	r3, [r3, #8]
 8026a5a:	2b00      	cmp	r3, #0
 8026a5c:	d102      	bne.n	8026a64 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026a5e:	20ff      	movs	r0, #255	; 0xff
 8026a60:	f7ff fd04 	bl	802646c <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8026a64:	2300      	movs	r3, #0
 8026a66:	617b      	str	r3, [r7, #20]
 8026a68:	e009      	b.n	8026a7e <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026a6a:	68fa      	ldr	r2, [r7, #12]
 8026a6c:	697b      	ldr	r3, [r7, #20]
 8026a6e:	18d4      	adds	r4, r2, r3
 8026a70:	f7ff fd1c 	bl	80264ac <spi_flash_read_byte>
 8026a74:	4603      	mov	r3, r0
 8026a76:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026a78:	697b      	ldr	r3, [r7, #20]
 8026a7a:	3301      	adds	r3, #1
 8026a7c:	617b      	str	r3, [r7, #20]
 8026a7e:	697a      	ldr	r2, [r7, #20]
 8026a80:	683b      	ldr	r3, [r7, #0]
 8026a82:	429a      	cmp	r2, r3
 8026a84:	d3f1      	bcc.n	8026a6a <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026a86:	f7ff fc3b 	bl	8026300 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026a8a:	693b      	ldr	r3, [r7, #16]
}
 8026a8c:	4618      	mov	r0, r3
 8026a8e:	371c      	adds	r7, #28
 8026a90:	46bd      	mov	sp, r7
 8026a92:	bd90      	pop	{r4, r7, pc}
 8026a94:	20005140 	.word	0x20005140
 8026a98:	20005130 	.word	0x20005130

08026a9c <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8026a9c:	b580      	push	{r7, lr}
 8026a9e:	b082      	sub	sp, #8
 8026aa0:	af00      	add	r7, sp, #0
 8026aa2:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026aa4:	6878      	ldr	r0, [r7, #4]
 8026aa6:	f7ff fdc3 	bl	8026630 <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8026aaa:	f7ff fe59 	bl	8026760 <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026aae:	f7ff fc1b 	bl	80262e8 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8026ab2:	20d8      	movs	r0, #216	; 0xd8
 8026ab4:	f7ff fcda 	bl	802646c <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8026ab8:	4b0e      	ldr	r3, [pc, #56]	; (8026af4 <spi_flash_erase_block+0x58>)
 8026aba:	2201      	movs	r2, #1
 8026abc:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026abe:	687b      	ldr	r3, [r7, #4]
 8026ac0:	0c1b      	lsrs	r3, r3, #16
 8026ac2:	b2db      	uxtb	r3, r3
 8026ac4:	4618      	mov	r0, r3
 8026ac6:	f7ff fcd1 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	0a1b      	lsrs	r3, r3, #8
 8026ace:	b2db      	uxtb	r3, r3
 8026ad0:	4618      	mov	r0, r3
 8026ad2:	f7ff fccb 	bl	802646c <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	b2db      	uxtb	r3, r3
 8026ada:	4618      	mov	r0, r3
 8026adc:	f7ff fcc6 	bl	802646c <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026ae0:	f7ff fc0e 	bl	8026300 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8026ae4:	f7ff fd20 	bl	8026528 <spi_flash_read_status>
 8026ae8:	4603      	mov	r3, r0
}
 8026aea:	4618      	mov	r0, r3
 8026aec:	3708      	adds	r7, #8
 8026aee:	46bd      	mov	sp, r7
 8026af0:	bd80      	pop	{r7, pc}
 8026af2:	bf00      	nop
 8026af4:	20005140 	.word	0x20005140

08026af8 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8026af8:	b480      	push	{r7}
 8026afa:	af00      	add	r7, sp, #0
    return true;
 8026afc:	2301      	movs	r3, #1
}
 8026afe:	4618      	mov	r0, r3
 8026b00:	46bd      	mov	sp, r7
 8026b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b06:	4770      	bx	lr

08026b08 <spi_flash_gpio_init>:

SPI_HandleTypeDef hspi1; //SPI 句柄

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init(SPI_HandleTypeDef* spiHandle)
{
 8026b08:	b580      	push	{r7, lr}
 8026b0a:	b08a      	sub	sp, #40	; 0x28
 8026b0c:	af00      	add	r7, sp, #0
 8026b0e:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026b10:	f107 0314 	add.w	r3, r7, #20
 8026b14:	2200      	movs	r2, #0
 8026b16:	601a      	str	r2, [r3, #0]
 8026b18:	605a      	str	r2, [r3, #4]
 8026b1a:	609a      	str	r2, [r3, #8]
 8026b1c:	60da      	str	r2, [r3, #12]
 8026b1e:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	681b      	ldr	r3, [r3, #0]
 8026b24:	4a33      	ldr	r2, [pc, #204]	; (8026bf4 <spi_flash_gpio_init+0xec>)
 8026b26:	4293      	cmp	r3, r2
 8026b28:	d15f      	bne.n	8026bea <spi_flash_gpio_init+0xe2>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */

	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8026b2a:	2300      	movs	r3, #0
 8026b2c:	613b      	str	r3, [r7, #16]
 8026b2e:	4b32      	ldr	r3, [pc, #200]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026b32:	4a31      	ldr	r2, [pc, #196]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026b38:	6453      	str	r3, [r2, #68]	; 0x44
 8026b3a:	4b2f      	ldr	r3, [pc, #188]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026b42:	613b      	str	r3, [r7, #16]
 8026b44:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026b46:	2300      	movs	r3, #0
 8026b48:	60fb      	str	r3, [r7, #12]
 8026b4a:	4b2b      	ldr	r3, [pc, #172]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b4e:	4a2a      	ldr	r2, [pc, #168]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b50:	f043 0301 	orr.w	r3, r3, #1
 8026b54:	6313      	str	r3, [r2, #48]	; 0x30
 8026b56:	4b28      	ldr	r3, [pc, #160]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b5a:	f003 0301 	and.w	r3, r3, #1
 8026b5e:	60fb      	str	r3, [r7, #12]
 8026b60:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026b62:	2300      	movs	r3, #0
 8026b64:	60bb      	str	r3, [r7, #8]
 8026b66:	4b24      	ldr	r3, [pc, #144]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b6a:	4a23      	ldr	r2, [pc, #140]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b6c:	f043 0302 	orr.w	r3, r3, #2
 8026b70:	6313      	str	r3, [r2, #48]	; 0x30
 8026b72:	4b21      	ldr	r3, [pc, #132]	; (8026bf8 <spi_flash_gpio_init+0xf0>)
 8026b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026b76:	f003 0302 	and.w	r3, r3, #2
 8026b7a:	60bb      	str	r3, [r7, #8]
 8026b7c:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8026b7e:	23c0      	movs	r3, #192	; 0xc0
 8026b80:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026b82:	2302      	movs	r3, #2
 8026b84:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026b86:	2300      	movs	r3, #0
 8026b88:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026b8a:	2301      	movs	r3, #1
 8026b8c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026b8e:	2305      	movs	r3, #5
 8026b90:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026b92:	f107 0314 	add.w	r3, r7, #20
 8026b96:	4619      	mov	r1, r3
 8026b98:	4818      	ldr	r0, [pc, #96]	; (8026bfc <spi_flash_gpio_init+0xf4>)
 8026b9a:	f001 fb1d 	bl	80281d8 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8026b9e:	2308      	movs	r3, #8
 8026ba0:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026ba2:	2302      	movs	r3, #2
 8026ba4:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026ba6:	2300      	movs	r3, #0
 8026ba8:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026baa:	2301      	movs	r3, #1
 8026bac:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026bae:	2305      	movs	r3, #5
 8026bb0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8026bb2:	f107 0314 	add.w	r3, r7, #20
 8026bb6:	4619      	mov	r1, r3
 8026bb8:	4811      	ldr	r0, [pc, #68]	; (8026c00 <spi_flash_gpio_init+0xf8>)
 8026bba:	f001 fb0d 	bl	80281d8 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8026bbe:	2310      	movs	r3, #16
 8026bc0:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026bc2:	2301      	movs	r3, #1
 8026bc4:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8026bc6:	2301      	movs	r3, #1
 8026bc8:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026bca:	2301      	movs	r3, #1
 8026bcc:	623b      	str	r3, [r7, #32]
	    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8026bce:	f107 0314 	add.w	r3, r7, #20
 8026bd2:	4619      	mov	r1, r3
 8026bd4:	480a      	ldr	r0, [pc, #40]	; (8026c00 <spi_flash_gpio_init+0xf8>)
 8026bd6:	f001 faff 	bl	80281d8 <HAL_GPIO_Init>
	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8026bda:	2200      	movs	r2, #0
 8026bdc:	2100      	movs	r1, #0
 8026bde:	2023      	movs	r0, #35	; 0x23
 8026be0:	f000 fe97 	bl	8027912 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026be4:	2023      	movs	r0, #35	; 0x23
 8026be6:	f000 feb0 	bl	802794a <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */

	  /* USER CODE END SPI1_MspInit 1 */
	  }
}
 8026bea:	bf00      	nop
 8026bec:	3728      	adds	r7, #40	; 0x28
 8026bee:	46bd      	mov	sp, r7
 8026bf0:	bd80      	pop	{r7, pc}
 8026bf2:	bf00      	nop
 8026bf4:	40013000 	.word	0x40013000
 8026bf8:	40023800 	.word	0x40023800
 8026bfc:	40020000 	.word	0x40020000
 8026c00:	40020400 	.word	0x40020400

08026c04 <spi_flash_gpio_uninit>:

// 取消初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_uninit(SPI_HandleTypeDef* spiHandle)
{
 8026c04:	b580      	push	{r7, lr}
 8026c06:	b082      	sub	sp, #8
 8026c08:	af00      	add	r7, sp, #0
 8026c0a:	6078      	str	r0, [r7, #4]
	  if(spiHandle->Instance==SPI1)
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	681b      	ldr	r3, [r3, #0]
 8026c10:	4a0d      	ldr	r2, [pc, #52]	; (8026c48 <spi_flash_gpio_uninit+0x44>)
 8026c12:	4293      	cmp	r3, r2
 8026c14:	d114      	bne.n	8026c40 <spi_flash_gpio_uninit+0x3c>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 8026c16:	4b0d      	ldr	r3, [pc, #52]	; (8026c4c <spi_flash_gpio_uninit+0x48>)
 8026c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c1a:	4a0c      	ldr	r2, [pc, #48]	; (8026c4c <spi_flash_gpio_uninit+0x48>)
 8026c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026c20:	6453      	str	r3, [r2, #68]	; 0x44
	    /**SPI1 GPIO Configuration
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8026c22:	21c0      	movs	r1, #192	; 0xc0
 8026c24:	480a      	ldr	r0, [pc, #40]	; (8026c50 <spi_flash_gpio_uninit+0x4c>)
 8026c26:	f001 fc73 	bl	8028510 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 8026c2a:	2108      	movs	r1, #8
 8026c2c:	4809      	ldr	r0, [pc, #36]	; (8026c54 <spi_flash_gpio_uninit+0x50>)
 8026c2e:	f001 fc6f 	bl	8028510 <HAL_GPIO_DeInit>

	    HAL_GPIO_DeInit(SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8026c32:	2110      	movs	r1, #16
 8026c34:	4807      	ldr	r0, [pc, #28]	; (8026c54 <spi_flash_gpio_uninit+0x50>)
 8026c36:	f001 fc6b 	bl	8028510 <HAL_GPIO_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8026c3a:	2023      	movs	r0, #35	; 0x23
 8026c3c:	f000 fe93 	bl	8027966 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 8026c40:	bf00      	nop
 8026c42:	3708      	adds	r7, #8
 8026c44:	46bd      	mov	sp, r7
 8026c46:	bd80      	pop	{r7, pc}
 8026c48:	40013000 	.word	0x40013000
 8026c4c:	40023800 	.word	0x40023800
 8026c50:	40020000 	.word	0x40020000
 8026c54:	40020400 	.word	0x40020400

08026c58 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8026c58:	b580      	push	{r7, lr}
 8026c5a:	af00      	add	r7, sp, #0
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026c5c:	2200      	movs	r2, #0
 8026c5e:	2110      	movs	r1, #16
 8026c60:	4802      	ldr	r0, [pc, #8]	; (8026c6c <spi_flash_select_chip+0x14>)
 8026c62:	f001 fd51 	bl	8028708 <HAL_GPIO_WritePin>
}
 8026c66:	bf00      	nop
 8026c68:	bd80      	pop	{r7, pc}
 8026c6a:	bf00      	nop
 8026c6c:	40020400 	.word	0x40020400

08026c70 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026c70:	b580      	push	{r7, lr}
 8026c72:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026c74:	2201      	movs	r2, #1
 8026c76:	2110      	movs	r1, #16
 8026c78:	4802      	ldr	r0, [pc, #8]	; (8026c84 <spi_flash_deselect_chip+0x14>)
 8026c7a:	f001 fd45 	bl	8028708 <HAL_GPIO_WritePin>
}
 8026c7e:	bf00      	nop
 8026c80:	bd80      	pop	{r7, pc}
 8026c82:	bf00      	nop
 8026c84:	40020400 	.word	0x40020400

08026c88 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026c88:	b480      	push	{r7}
 8026c8a:	b085      	sub	sp, #20
 8026c8c:	af00      	add	r7, sp, #0
 8026c8e:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026c90:	4b1f      	ldr	r3, [pc, #124]	; (8026d10 <spi_flash_get_baud_rate_prescaler+0x88>)
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	4a1f      	ldr	r2, [pc, #124]	; (8026d14 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8026c96:	fba2 2303 	umull	r2, r3, r2, r3
 8026c9a:	099b      	lsrs	r3, r3, #6
 8026c9c:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026c9e:	68fb      	ldr	r3, [r7, #12]
 8026ca0:	085b      	lsrs	r3, r3, #1
 8026ca2:	687a      	ldr	r2, [r7, #4]
 8026ca4:	429a      	cmp	r2, r3
 8026ca6:	d301      	bcc.n	8026cac <spi_flash_get_baud_rate_prescaler+0x24>
         return SPI_BAUDRATEPRESCALER_2;
 8026ca8:	2300      	movs	r3, #0
 8026caa:	e02a      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026cac:	68fb      	ldr	r3, [r7, #12]
 8026cae:	089b      	lsrs	r3, r3, #2
 8026cb0:	687a      	ldr	r2, [r7, #4]
 8026cb2:	429a      	cmp	r2, r3
 8026cb4:	d301      	bcc.n	8026cba <spi_flash_get_baud_rate_prescaler+0x32>
         return SPI_BAUDRATEPRESCALER_4;
 8026cb6:	2308      	movs	r3, #8
 8026cb8:	e023      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8026cba:	68fb      	ldr	r3, [r7, #12]
 8026cbc:	08db      	lsrs	r3, r3, #3
 8026cbe:	687a      	ldr	r2, [r7, #4]
 8026cc0:	429a      	cmp	r2, r3
 8026cc2:	d301      	bcc.n	8026cc8 <spi_flash_get_baud_rate_prescaler+0x40>
         return SPI_BAUDRATEPRESCALER_8;
 8026cc4:	2310      	movs	r3, #16
 8026cc6:	e01c      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8026cc8:	68fb      	ldr	r3, [r7, #12]
 8026cca:	091b      	lsrs	r3, r3, #4
 8026ccc:	687a      	ldr	r2, [r7, #4]
 8026cce:	429a      	cmp	r2, r3
 8026cd0:	d301      	bcc.n	8026cd6 <spi_flash_get_baud_rate_prescaler+0x4e>
         return SPI_BAUDRATEPRESCALER_16;
 8026cd2:	2318      	movs	r3, #24
 8026cd4:	e015      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8026cd6:	68fb      	ldr	r3, [r7, #12]
 8026cd8:	095b      	lsrs	r3, r3, #5
 8026cda:	687a      	ldr	r2, [r7, #4]
 8026cdc:	429a      	cmp	r2, r3
 8026cde:	d301      	bcc.n	8026ce4 <spi_flash_get_baud_rate_prescaler+0x5c>
         return SPI_BAUDRATEPRESCALER_32;
 8026ce0:	2320      	movs	r3, #32
 8026ce2:	e00e      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026ce4:	68fb      	ldr	r3, [r7, #12]
 8026ce6:	099b      	lsrs	r3, r3, #6
 8026ce8:	687a      	ldr	r2, [r7, #4]
 8026cea:	429a      	cmp	r2, r3
 8026cec:	d301      	bcc.n	8026cf2 <spi_flash_get_baud_rate_prescaler+0x6a>
          return SPI_BAUDRATEPRESCALER_64;
 8026cee:	2328      	movs	r3, #40	; 0x28
 8026cf0:	e007      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8026cf2:	68fb      	ldr	r3, [r7, #12]
 8026cf4:	09db      	lsrs	r3, r3, #7
 8026cf6:	687a      	ldr	r2, [r7, #4]
 8026cf8:	429a      	cmp	r2, r3
 8026cfa:	d301      	bcc.n	8026d00 <spi_flash_get_baud_rate_prescaler+0x78>
          return SPI_BAUDRATEPRESCALER_128;
 8026cfc:	2330      	movs	r3, #48	; 0x30
 8026cfe:	e000      	b.n	8026d02 <spi_flash_get_baud_rate_prescaler+0x7a>
    else
          return SPI_BAUDRATEPRESCALER_256;
 8026d00:	2338      	movs	r3, #56	; 0x38
}
 8026d02:	4618      	mov	r0, r3
 8026d04:	3714      	adds	r7, #20
 8026d06:	46bd      	mov	sp, r7
 8026d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d0c:	4770      	bx	lr
 8026d0e:	bf00      	nop
 8026d10:	20000138 	.word	0x20000138
 8026d14:	10624dd3 	.word	0x10624dd3

08026d18 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026d18:	b590      	push	{r4, r7, lr}
 8026d1a:	b083      	sub	sp, #12
 8026d1c:	af00      	add	r7, sp, #0
 8026d1e:	6078      	str	r0, [r7, #4]
 8026d20:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(spi_conf_t))
 8026d22:	683b      	ldr	r3, [r7, #0]
 8026d24:	2b0c      	cmp	r3, #12
 8026d26:	d802      	bhi.n	8026d2e <spi_flash_init+0x16>
        return -1;
 8026d28:	f04f 33ff 	mov.w	r3, #4294967295
 8026d2c:	e049      	b.n	8026dc2 <spi_flash_init+0xaa>

    spi_conf = *(spi_conf_t *)conf;
 8026d2e:	4b27      	ldr	r3, [pc, #156]	; (8026dcc <spi_flash_init+0xb4>)
 8026d30:	687a      	ldr	r2, [r7, #4]
 8026d32:	4614      	mov	r4, r2
 8026d34:	6820      	ldr	r0, [r4, #0]
 8026d36:	6861      	ldr	r1, [r4, #4]
 8026d38:	68a2      	ldr	r2, [r4, #8]
 8026d3a:	c307      	stmia	r3!, {r0, r1, r2}
 8026d3c:	7b22      	ldrb	r2, [r4, #12]
 8026d3e:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init(&hspi1);
 8026d40:	4823      	ldr	r0, [pc, #140]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d42:	f7ff fee1 	bl	8026b08 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8026d46:	f7ff ff93 	bl	8026c70 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8026d4a:	4b21      	ldr	r3, [pc, #132]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d4c:	4a21      	ldr	r2, [pc, #132]	; (8026dd4 <spi_flash_init+0xbc>)
 8026d4e:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8026d50:	4b1f      	ldr	r3, [pc, #124]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d52:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026d56:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026d58:	4b1d      	ldr	r3, [pc, #116]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d5a:	2200      	movs	r2, #0
 8026d5c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026d5e:	4b1c      	ldr	r3, [pc, #112]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d60:	2200      	movs	r2, #0
 8026d62:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026d64:	4b1a      	ldr	r3, [pc, #104]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d66:	2202      	movs	r2, #2
 8026d68:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026d6a:	4b19      	ldr	r3, [pc, #100]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d6c:	2201      	movs	r2, #1
 8026d6e:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8026d70:	4b17      	ldr	r3, [pc, #92]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026d76:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8026d78:	4b14      	ldr	r3, [pc, #80]	; (8026dcc <spi_flash_init+0xb4>)
 8026d7a:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8026d7e:	4618      	mov	r0, r3
 8026d80:	f7ff ff82 	bl	8026c88 <spi_flash_get_baud_rate_prescaler>
 8026d84:	4603      	mov	r3, r0
 8026d86:	461a      	mov	r2, r3
 8026d88:	4b11      	ldr	r3, [pc, #68]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d8a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026d8c:	4b10      	ldr	r3, [pc, #64]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d8e:	2200      	movs	r2, #0
 8026d90:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026d92:	4b0f      	ldr	r3, [pc, #60]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d94:	2200      	movs	r2, #0
 8026d96:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026d98:	4b0d      	ldr	r3, [pc, #52]	; (8026dd0 <spi_flash_init+0xb8>)
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8026d9e:	4b0c      	ldr	r3, [pc, #48]	; (8026dd0 <spi_flash_init+0xb8>)
 8026da0:	220a      	movs	r2, #10
 8026da2:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(&hspi1)  ;
 8026da4:	480a      	ldr	r0, [pc, #40]	; (8026dd0 <spi_flash_init+0xb8>)
 8026da6:	f003 fffa 	bl	802ad9e <HAL_SPI_Init>

    __HAL_SPI_ENABLE(&hspi1);
 8026daa:	4b09      	ldr	r3, [pc, #36]	; (8026dd0 <spi_flash_init+0xb8>)
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	681a      	ldr	r2, [r3, #0]
 8026db0:	4b07      	ldr	r3, [pc, #28]	; (8026dd0 <spi_flash_init+0xb8>)
 8026db2:	681b      	ldr	r3, [r3, #0]
 8026db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026db8:	601a      	str	r2, [r3, #0]
    printf("spi_flash_init \r\n");
 8026dba:	4807      	ldr	r0, [pc, #28]	; (8026dd8 <spi_flash_init+0xc0>)
 8026dbc:	f00a f99e 	bl	80310fc <puts>
    return 0;
 8026dc0:	2300      	movs	r3, #0
}
 8026dc2:	4618      	mov	r0, r3
 8026dc4:	370c      	adds	r7, #12
 8026dc6:	46bd      	mov	sp, r7
 8026dc8:	bd90      	pop	{r4, r7, pc}
 8026dca:	bf00      	nop
 8026dcc:	20005148 	.word	0x20005148
 8026dd0:	20005158 	.word	0x20005158
 8026dd4:	40013000 	.word	0x40013000
 8026dd8:	08032c44 	.word	0x08032c44

08026ddc <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8026ddc:	b580      	push	{r7, lr}
 8026dde:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit(&hspi1);
 8026de0:	4807      	ldr	r0, [pc, #28]	; (8026e00 <spi_flash_uninit+0x24>)
 8026de2:	f7ff ff0f 	bl	8026c04 <spi_flash_gpio_uninit>
    printf("spi_flash_uninit \r\n");
 8026de6:	4807      	ldr	r0, [pc, #28]	; (8026e04 <spi_flash_uninit+0x28>)
 8026de8:	f00a f988 	bl	80310fc <puts>
    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8026dec:	4b04      	ldr	r3, [pc, #16]	; (8026e00 <spi_flash_uninit+0x24>)
 8026dee:	681b      	ldr	r3, [r3, #0]
 8026df0:	681a      	ldr	r2, [r3, #0]
 8026df2:	4b03      	ldr	r3, [pc, #12]	; (8026e00 <spi_flash_uninit+0x24>)
 8026df4:	681b      	ldr	r3, [r3, #0]
 8026df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026dfa:	601a      	str	r2, [r3, #0]
}
 8026dfc:	bf00      	nop
 8026dfe:	bd80      	pop	{r7, pc}
 8026e00:	20005158 	.word	0x20005158
 8026e04:	08032c58 	.word	0x08032c58

08026e08 <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
//https://blog.csdn.net/2201_75917183/article/details/131967863
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026e08:	b580      	push	{r7, lr}
 8026e0a:	b086      	sub	sp, #24
 8026e0c:	af02      	add	r7, sp, #8
 8026e0e:	4603      	mov	r3, r0
 8026e10:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData=0x00;
 8026e12:	2300      	movs	r3, #0
 8026e14:	73fb      	strb	r3, [r7, #15]
 	uint8_t TxData=byte;
 8026e16:	79fb      	ldrb	r3, [r7, #7]
 8026e18:	73bb      	strb	r3, [r7, #14]

    HAL_SPI_TransmitReceive(&hspi1,&TxData,&RxData,1,0xFFFFFF);
 8026e1a:	f107 020f 	add.w	r2, r7, #15
 8026e1e:	f107 010e 	add.w	r1, r7, #14
 8026e22:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8026e26:	9300      	str	r3, [sp, #0]
 8026e28:	2301      	movs	r3, #1
 8026e2a:	4804      	ldr	r0, [pc, #16]	; (8026e3c <spi_flash_send_byte+0x34>)
 8026e2c:	f004 f868 	bl	802af00 <HAL_SPI_TransmitReceive>

 	return RxData;
 8026e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8026e32:	4618      	mov	r0, r3
 8026e34:	3710      	adds	r7, #16
 8026e36:	46bd      	mov	sp, r7
 8026e38:	bd80      	pop	{r7, pc}
 8026e3a:	bf00      	nop
 8026e3c:	20005158 	.word	0x20005158

08026e40 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8026e40:	b580      	push	{r7, lr}
 8026e42:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8026e44:	2000      	movs	r0, #0
 8026e46:	f7ff ffdf 	bl	8026e08 <spi_flash_send_byte>
 8026e4a:	4603      	mov	r3, r0
}
 8026e4c:	4618      	mov	r0, r3
 8026e4e:	bd80      	pop	{r7, pc}

08026e50 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026e50:	b580      	push	{r7, lr}
 8026e52:	b082      	sub	sp, #8
 8026e54:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_READY;
 8026e56:	2300      	movs	r3, #0
 8026e58:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8026e5a:	f7ff fefd 	bl	8026c58 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8026e5e:	4b18      	ldr	r3, [pc, #96]	; (8026ec0 <spi_flash_read_status+0x70>)
 8026e60:	799b      	ldrb	r3, [r3, #6]
 8026e62:	4618      	mov	r0, r3
 8026e64:	f7ff ffd0 	bl	8026e08 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8026e68:	f7ff ffea 	bl	8026e40 <spi_flash_read_byte>
 8026e6c:	4603      	mov	r3, r0
 8026e6e:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8026e70:	4b13      	ldr	r3, [pc, #76]	; (8026ec0 <spi_flash_read_status+0x70>)
 8026e72:	7a1b      	ldrb	r3, [r3, #8]
 8026e74:	2b01      	cmp	r3, #1
 8026e76:	d10a      	bne.n	8026e8e <spi_flash_read_status+0x3e>
 8026e78:	78fb      	ldrb	r3, [r7, #3]
 8026e7a:	4a11      	ldr	r2, [pc, #68]	; (8026ec0 <spi_flash_read_status+0x70>)
 8026e7c:	79d2      	ldrb	r2, [r2, #7]
 8026e7e:	4113      	asrs	r3, r2
 8026e80:	f003 0301 	and.w	r3, r3, #1
 8026e84:	2b00      	cmp	r3, #0
 8026e86:	d002      	beq.n	8026e8e <spi_flash_read_status+0x3e>
        flash_status = FLASH_BUSY;
 8026e88:	2301      	movs	r3, #1
 8026e8a:	607b      	str	r3, [r7, #4]
 8026e8c:	e00d      	b.n	8026eaa <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8026e8e:	4b0c      	ldr	r3, [pc, #48]	; (8026ec0 <spi_flash_read_status+0x70>)
 8026e90:	7a1b      	ldrb	r3, [r3, #8]
 8026e92:	2b00      	cmp	r3, #0
 8026e94:	d109      	bne.n	8026eaa <spi_flash_read_status+0x5a>
 8026e96:	78fb      	ldrb	r3, [r7, #3]
 8026e98:	4a09      	ldr	r2, [pc, #36]	; (8026ec0 <spi_flash_read_status+0x70>)
 8026e9a:	79d2      	ldrb	r2, [r2, #7]
 8026e9c:	4113      	asrs	r3, r2
 8026e9e:	f003 0301 	and.w	r3, r3, #1
 8026ea2:	2b00      	cmp	r3, #0
 8026ea4:	d101      	bne.n	8026eaa <spi_flash_read_status+0x5a>
        flash_status = FLASH_BUSY;
 8026ea6:	2301      	movs	r3, #1
 8026ea8:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8026eaa:	f7ff fee1 	bl	8026c70 <spi_flash_deselect_chip>
    printf("flash_status = 0x%02X \r\n",flash_status);
 8026eae:	6879      	ldr	r1, [r7, #4]
 8026eb0:	4804      	ldr	r0, [pc, #16]	; (8026ec4 <spi_flash_read_status+0x74>)
 8026eb2:	f00a f8bd 	bl	8031030 <iprintf>
    return flash_status;
 8026eb6:	687b      	ldr	r3, [r7, #4]
}
 8026eb8:	4618      	mov	r0, r3
 8026eba:	3708      	adds	r7, #8
 8026ebc:	46bd      	mov	sp, r7
 8026ebe:	bd80      	pop	{r7, pc}
 8026ec0:	20005148 	.word	0x20005148
 8026ec4:	08032c6c 	.word	0x08032c6c

08026ec8 <spi_flash_get_status>:

static uint32_t spi_flash_get_status()
{
 8026ec8:	b580      	push	{r7, lr}
 8026eca:	b082      	sub	sp, #8
 8026ecc:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8026ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026ed2:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8026ed4:	f7ff ffbc 	bl	8026e50 <spi_flash_read_status>
 8026ed8:	6078      	str	r0, [r7, #4]

    /* Wait for an operation to complete or a TIMEOUT to occur */
    while (status == FLASH_BUSY && timeout)
 8026eda:	e005      	b.n	8026ee8 <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8026edc:	f7ff ffb8 	bl	8026e50 <spi_flash_read_status>
 8026ee0:	6078      	str	r0, [r7, #4]
        timeout --;
 8026ee2:	683b      	ldr	r3, [r7, #0]
 8026ee4:	3b01      	subs	r3, #1
 8026ee6:	603b      	str	r3, [r7, #0]
    while (status == FLASH_BUSY && timeout)
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	2b01      	cmp	r3, #1
 8026eec:	d102      	bne.n	8026ef4 <spi_flash_get_status+0x2c>
 8026eee:	683b      	ldr	r3, [r7, #0]
 8026ef0:	2b00      	cmp	r3, #0
 8026ef2:	d1f3      	bne.n	8026edc <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8026ef4:	683b      	ldr	r3, [r7, #0]
 8026ef6:	2b00      	cmp	r3, #0
 8026ef8:	d101      	bne.n	8026efe <spi_flash_get_status+0x36>
        status = FLASH_TIMEOUT;
 8026efa:	2302      	movs	r3, #2
 8026efc:	607b      	str	r3, [r7, #4]
    printf("get_status = 0x%02X \r\n", status);
 8026efe:	6879      	ldr	r1, [r7, #4]
 8026f00:	4803      	ldr	r0, [pc, #12]	; (8026f10 <spi_flash_get_status+0x48>)
 8026f02:	f00a f895 	bl	8031030 <iprintf>
    return status;
 8026f06:	687b      	ldr	r3, [r7, #4]
}
 8026f08:	4618      	mov	r0, r3
 8026f0a:	3708      	adds	r7, #8
 8026f0c:	46bd      	mov	sp, r7
 8026f0e:	bd80      	pop	{r7, pc}
 8026f10:	08032c88 	.word	0x08032c88

08026f14 <spi_flash_read_id>:

static void spi_flash_read_id(chip_id_t *chip_id)
{
 8026f14:	b580      	push	{r7, lr}
 8026f16:	b082      	sub	sp, #8
 8026f18:	af00      	add	r7, sp, #0
 8026f1a:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8026f1c:	f7ff fe9c 	bl	8026c58 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 8026f20:	4b11      	ldr	r3, [pc, #68]	; (8026f68 <spi_flash_read_id+0x54>)
 8026f22:	789b      	ldrb	r3, [r3, #2]
 8026f24:	4618      	mov	r0, r3
 8026f26:	f7ff ff6f 	bl	8026e08 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8026f2a:	f7ff ff89 	bl	8026e40 <spi_flash_read_byte>
 8026f2e:	4603      	mov	r3, r0
 8026f30:	461a      	mov	r2, r3
 8026f32:	687b      	ldr	r3, [r7, #4]
 8026f34:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8026f36:	f7ff ff83 	bl	8026e40 <spi_flash_read_byte>
 8026f3a:	4603      	mov	r3, r0
 8026f3c:	461a      	mov	r2, r3
 8026f3e:	687b      	ldr	r3, [r7, #4]
 8026f40:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 8026f42:	f7ff ff7d 	bl	8026e40 <spi_flash_read_byte>
 8026f46:	4603      	mov	r3, r0
 8026f48:	461a      	mov	r2, r3
 8026f4a:	687b      	ldr	r3, [r7, #4]
 8026f4c:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 8026f4e:	f7ff ff77 	bl	8026e40 <spi_flash_read_byte>
 8026f52:	4603      	mov	r3, r0
 8026f54:	461a      	mov	r2, r3
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	70da      	strb	r2, [r3, #3]

    spi_flash_deselect_chip();
 8026f5a:	f7ff fe89 	bl	8026c70 <spi_flash_deselect_chip>
}
 8026f5e:	bf00      	nop
 8026f60:	3708      	adds	r7, #8
 8026f62:	46bd      	mov	sp, r7
 8026f64:	bd80      	pop	{r7, pc}
 8026f66:	bf00      	nop
 8026f68:	20005148 	.word	0x20005148

08026f6c <spi_flash_write_enable>:

static void spi_flash_write_enable()
{
 8026f6c:	b580      	push	{r7, lr}
 8026f6e:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8026f70:	4b09      	ldr	r3, [pc, #36]	; (8026f98 <spi_flash_write_enable+0x2c>)
 8026f72:	791b      	ldrb	r3, [r3, #4]
 8026f74:	2bff      	cmp	r3, #255	; 0xff
 8026f76:	d00c      	beq.n	8026f92 <spi_flash_write_enable+0x26>
        return;
    printf("spi_flash_write_enable \r\n");
 8026f78:	4808      	ldr	r0, [pc, #32]	; (8026f9c <spi_flash_write_enable+0x30>)
 8026f7a:	f00a f8bf 	bl	80310fc <puts>
    spi_flash_select_chip();
 8026f7e:	f7ff fe6b 	bl	8026c58 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8026f82:	4b05      	ldr	r3, [pc, #20]	; (8026f98 <spi_flash_write_enable+0x2c>)
 8026f84:	791b      	ldrb	r3, [r3, #4]
 8026f86:	4618      	mov	r0, r3
 8026f88:	f7ff ff3e 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 8026f8c:	f7ff fe70 	bl	8026c70 <spi_flash_deselect_chip>
 8026f90:	e000      	b.n	8026f94 <spi_flash_write_enable+0x28>
        return;
 8026f92:	bf00      	nop
}
 8026f94:	bd80      	pop	{r7, pc}
 8026f96:	bf00      	nop
 8026f98:	20005148 	.word	0x20005148
 8026f9c:	08032ca0 	.word	0x08032ca0

08026fa0 <spi_flash_write_page_async>:

static void spi_flash_write_page_async(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 8026fa0:	b580      	push	{r7, lr}
 8026fa2:	b086      	sub	sp, #24
 8026fa4:	af00      	add	r7, sp, #0
 8026fa6:	60f8      	str	r0, [r7, #12]
 8026fa8:	60b9      	str	r1, [r7, #8]
 8026faa:	607a      	str	r2, [r7, #4]
    uint32_t i;
    printf("spi_flash_write_page_async \r\n");
 8026fac:	481c      	ldr	r0, [pc, #112]	; (8027020 <spi_flash_write_page_async+0x80>)
 8026fae:	f00a f8a5 	bl	80310fc <puts>
    spi_flash_write_enable();
 8026fb2:	f7ff ffdb 	bl	8026f6c <spi_flash_write_enable>

    spi_flash_select_chip();
 8026fb6:	f7ff fe4f 	bl	8026c58 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 8026fba:	4b1a      	ldr	r3, [pc, #104]	; (8027024 <spi_flash_write_page_async+0x84>)
 8026fbc:	78db      	ldrb	r3, [r3, #3]
 8026fbe:	4618      	mov	r0, r3
 8026fc0:	f7ff ff22 	bl	8026e08 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 8026fc4:	4b17      	ldr	r3, [pc, #92]	; (8027024 <spi_flash_write_page_async+0x84>)
 8026fc6:	781b      	ldrb	r3, [r3, #0]
 8026fc8:	461a      	mov	r2, r3
 8026fca:	68bb      	ldr	r3, [r7, #8]
 8026fcc:	4093      	lsls	r3, r2
 8026fce:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 8026fd0:	68bb      	ldr	r3, [r7, #8]
 8026fd2:	0c1b      	lsrs	r3, r3, #16
 8026fd4:	b2db      	uxtb	r3, r3
 8026fd6:	4618      	mov	r0, r3
 8026fd8:	f7ff ff16 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 8026fdc:	68bb      	ldr	r3, [r7, #8]
 8026fde:	0a1b      	lsrs	r3, r3, #8
 8026fe0:	b2db      	uxtb	r3, r3
 8026fe2:	4618      	mov	r0, r3
 8026fe4:	f7ff ff10 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 8026fe8:	68bb      	ldr	r3, [r7, #8]
 8026fea:	b2db      	uxtb	r3, r3
 8026fec:	4618      	mov	r0, r3
 8026fee:	f7ff ff0b 	bl	8026e08 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 8026ff2:	2300      	movs	r3, #0
 8026ff4:	617b      	str	r3, [r7, #20]
 8026ff6:	e009      	b.n	802700c <spi_flash_write_page_async+0x6c>
        spi_flash_send_byte(buf[i]);
 8026ff8:	68fa      	ldr	r2, [r7, #12]
 8026ffa:	697b      	ldr	r3, [r7, #20]
 8026ffc:	4413      	add	r3, r2
 8026ffe:	781b      	ldrb	r3, [r3, #0]
 8027000:	4618      	mov	r0, r3
 8027002:	f7ff ff01 	bl	8026e08 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8027006:	697b      	ldr	r3, [r7, #20]
 8027008:	3301      	adds	r3, #1
 802700a:	617b      	str	r3, [r7, #20]
 802700c:	697a      	ldr	r2, [r7, #20]
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	429a      	cmp	r2, r3
 8027012:	d3f1      	bcc.n	8026ff8 <spi_flash_write_page_async+0x58>

    spi_flash_deselect_chip();
 8027014:	f7ff fe2c 	bl	8026c70 <spi_flash_deselect_chip>
}
 8027018:	bf00      	nop
 802701a:	3718      	adds	r7, #24
 802701c:	46bd      	mov	sp, r7
 802701e:	bd80      	pop	{r7, pc}
 8027020:	08032cbc 	.word	0x08032cbc
 8027024:	20005148 	.word	0x20005148

08027028 <spi_flash_read_data>:

static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page,
    uint32_t page_offset, uint32_t data_size)
{
 8027028:	b590      	push	{r4, r7, lr}
 802702a:	b087      	sub	sp, #28
 802702c:	af00      	add	r7, sp, #0
 802702e:	60f8      	str	r0, [r7, #12]
 8027030:	60b9      	str	r1, [r7, #8]
 8027032:	607a      	str	r2, [r7, #4]
 8027034:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8027036:	4b1d      	ldr	r3, [pc, #116]	; (80270ac <spi_flash_read_data+0x84>)
 8027038:	781b      	ldrb	r3, [r3, #0]
 802703a:	461a      	mov	r2, r3
 802703c:	68bb      	ldr	r3, [r7, #8]
 802703e:	4093      	lsls	r3, r2
 8027040:	687a      	ldr	r2, [r7, #4]
 8027042:	4413      	add	r3, r2
 8027044:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8027046:	f7ff fe07 	bl	8026c58 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 802704a:	4b18      	ldr	r3, [pc, #96]	; (80270ac <spi_flash_read_data+0x84>)
 802704c:	785b      	ldrb	r3, [r3, #1]
 802704e:	4618      	mov	r0, r3
 8027050:	f7ff feda 	bl	8026e08 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027054:	693b      	ldr	r3, [r7, #16]
 8027056:	0c1b      	lsrs	r3, r3, #16
 8027058:	b2db      	uxtb	r3, r3
 802705a:	4618      	mov	r0, r3
 802705c:	f7ff fed4 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8027060:	693b      	ldr	r3, [r7, #16]
 8027062:	0a1b      	lsrs	r3, r3, #8
 8027064:	b2db      	uxtb	r3, r3
 8027066:	4618      	mov	r0, r3
 8027068:	f7ff fece 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 802706c:	693b      	ldr	r3, [r7, #16]
 802706e:	b2db      	uxtb	r3, r3
 8027070:	4618      	mov	r0, r3
 8027072:	f7ff fec9 	bl	8026e08 <spi_flash_send_byte>

    /* AT45DB requires write of dummy byte after address */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8027076:	2000      	movs	r0, #0
 8027078:	f7ff fec6 	bl	8026e08 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 802707c:	2300      	movs	r3, #0
 802707e:	617b      	str	r3, [r7, #20]
 8027080:	e009      	b.n	8027096 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 8027082:	68fa      	ldr	r2, [r7, #12]
 8027084:	697b      	ldr	r3, [r7, #20]
 8027086:	18d4      	adds	r4, r2, r3
 8027088:	f7ff feda 	bl	8026e40 <spi_flash_read_byte>
 802708c:	4603      	mov	r3, r0
 802708e:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 8027090:	697b      	ldr	r3, [r7, #20]
 8027092:	3301      	adds	r3, #1
 8027094:	617b      	str	r3, [r7, #20]
 8027096:	697a      	ldr	r2, [r7, #20]
 8027098:	683b      	ldr	r3, [r7, #0]
 802709a:	429a      	cmp	r2, r3
 802709c:	d3f1      	bcc.n	8027082 <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 802709e:	f7ff fde7 	bl	8026c70 <spi_flash_deselect_chip>

    return FLASH_READY;
 80270a2:	2300      	movs	r3, #0
}
 80270a4:	4618      	mov	r0, r3
 80270a6:	371c      	adds	r7, #28
 80270a8:	46bd      	mov	sp, r7
 80270aa:	bd90      	pop	{r4, r7, pc}
 80270ac:	20005148 	.word	0x20005148

080270b0 <spi_flash_read_page>:

static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page,
    uint32_t page_size)
{
 80270b0:	b580      	push	{r7, lr}
 80270b2:	b084      	sub	sp, #16
 80270b4:	af00      	add	r7, sp, #0
 80270b6:	60f8      	str	r0, [r7, #12]
 80270b8:	60b9      	str	r1, [r7, #8]
 80270ba:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(*buf, page, 1, page_size);
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	781b      	ldrb	r3, [r3, #0]
 80270c0:	4618      	mov	r0, r3
 80270c2:	687b      	ldr	r3, [r7, #4]
 80270c4:	2201      	movs	r2, #1
 80270c6:	68b9      	ldr	r1, [r7, #8]
 80270c8:	f7ff ffae 	bl	8027028 <spi_flash_read_data>
 80270cc:	4603      	mov	r3, r0
}
 80270ce:	4618      	mov	r0, r3
 80270d0:	3710      	adds	r7, #16
 80270d2:	46bd      	mov	sp, r7
 80270d4:	bd80      	pop	{r7, pc}

080270d6 <spi_flash_read_spare_data>:

static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page,
    uint32_t offset, uint32_t data_size)
{
 80270d6:	b480      	push	{r7}
 80270d8:	b085      	sub	sp, #20
 80270da:	af00      	add	r7, sp, #0
 80270dc:	60f8      	str	r0, [r7, #12]
 80270de:	60b9      	str	r1, [r7, #8]
 80270e0:	607a      	str	r2, [r7, #4]
 80270e2:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 80270e4:	2304      	movs	r3, #4
}
 80270e6:	4618      	mov	r0, r3
 80270e8:	3714      	adds	r7, #20
 80270ea:	46bd      	mov	sp, r7
 80270ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270f0:	4770      	bx	lr
	...

080270f4 <spi_flash_erase_block>:

static uint32_t spi_flash_erase_block(uint32_t page)
{
 80270f4:	b580      	push	{r7, lr}
 80270f6:	b084      	sub	sp, #16
 80270f8:	af00      	add	r7, sp, #0
 80270fa:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 80270fc:	4b14      	ldr	r3, [pc, #80]	; (8027150 <spi_flash_erase_block+0x5c>)
 80270fe:	781b      	ldrb	r3, [r3, #0]
 8027100:	461a      	mov	r2, r3
 8027102:	687b      	ldr	r3, [r7, #4]
 8027104:	4093      	lsls	r3, r2
 8027106:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 8027108:	f7ff ff30 	bl	8026f6c <spi_flash_write_enable>

    spi_flash_select_chip();
 802710c:	f7ff fda4 	bl	8026c58 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 8027110:	4b0f      	ldr	r3, [pc, #60]	; (8027150 <spi_flash_erase_block+0x5c>)
 8027112:	795b      	ldrb	r3, [r3, #5]
 8027114:	4618      	mov	r0, r3
 8027116:	f7ff fe77 	bl	8026e08 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 802711a:	68fb      	ldr	r3, [r7, #12]
 802711c:	0c1b      	lsrs	r3, r3, #16
 802711e:	b2db      	uxtb	r3, r3
 8027120:	4618      	mov	r0, r3
 8027122:	f7ff fe71 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8027126:	68fb      	ldr	r3, [r7, #12]
 8027128:	0a1b      	lsrs	r3, r3, #8
 802712a:	b2db      	uxtb	r3, r3
 802712c:	4618      	mov	r0, r3
 802712e:	f7ff fe6b 	bl	8026e08 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 8027132:	68fb      	ldr	r3, [r7, #12]
 8027134:	b2db      	uxtb	r3, r3
 8027136:	4618      	mov	r0, r3
 8027138:	f7ff fe66 	bl	8026e08 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 802713c:	f7ff fd98 	bl	8026c70 <spi_flash_deselect_chip>

    return spi_flash_get_status();
 8027140:	f7ff fec2 	bl	8026ec8 <spi_flash_get_status>
 8027144:	4603      	mov	r3, r0
}
 8027146:	4618      	mov	r0, r3
 8027148:	3710      	adds	r7, #16
 802714a:	46bd      	mov	sp, r7
 802714c:	bd80      	pop	{r7, pc}
 802714e:	bf00      	nop
 8027150:	20005148 	.word	0x20005148

08027154 <spi_flash_is_bb_supported>:

static inline bool spi_flash_is_bb_supported()
{
 8027154:	b480      	push	{r7}
 8027156:	af00      	add	r7, sp, #0
    return false;
 8027158:	2300      	movs	r3, #0
}
 802715a:	4618      	mov	r0, r3
 802715c:	46bd      	mov	sp, r7
 802715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027162:	4770      	bx	lr

08027164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8027164:	b580      	push	{r7, lr}
 8027166:	b082      	sub	sp, #8
 8027168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802716a:	2300      	movs	r3, #0
 802716c:	607b      	str	r3, [r7, #4]
 802716e:	4b1f      	ldr	r3, [pc, #124]	; (80271ec <HAL_MspInit+0x88>)
 8027170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027172:	4a1e      	ldr	r2, [pc, #120]	; (80271ec <HAL_MspInit+0x88>)
 8027174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027178:	6453      	str	r3, [r2, #68]	; 0x44
 802717a:	4b1c      	ldr	r3, [pc, #112]	; (80271ec <HAL_MspInit+0x88>)
 802717c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802717e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027182:	607b      	str	r3, [r7, #4]
 8027184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8027186:	2300      	movs	r3, #0
 8027188:	603b      	str	r3, [r7, #0]
 802718a:	4b18      	ldr	r3, [pc, #96]	; (80271ec <HAL_MspInit+0x88>)
 802718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802718e:	4a17      	ldr	r2, [pc, #92]	; (80271ec <HAL_MspInit+0x88>)
 8027190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027194:	6413      	str	r3, [r2, #64]	; 0x40
 8027196:	4b15      	ldr	r3, [pc, #84]	; (80271ec <HAL_MspInit+0x88>)
 8027198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802719a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802719e:	603b      	str	r3, [r7, #0]
 80271a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80271a2:	2200      	movs	r2, #0
 80271a4:	2100      	movs	r1, #0
 80271a6:	2001      	movs	r0, #1
 80271a8:	f000 fbb3 	bl	8027912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80271ac:	2001      	movs	r0, #1
 80271ae:	f000 fbcc 	bl	802794a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80271b2:	2200      	movs	r2, #0
 80271b4:	2100      	movs	r1, #0
 80271b6:	2004      	movs	r0, #4
 80271b8:	f000 fbab 	bl	8027912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80271bc:	2004      	movs	r0, #4
 80271be:	f000 fbc4 	bl	802794a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80271c2:	2200      	movs	r2, #0
 80271c4:	2100      	movs	r1, #0
 80271c6:	2005      	movs	r0, #5
 80271c8:	f000 fba3 	bl	8027912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80271cc:	2005      	movs	r0, #5
 80271ce:	f000 fbbc 	bl	802794a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80271d2:	2200      	movs	r2, #0
 80271d4:	2100      	movs	r1, #0
 80271d6:	2051      	movs	r0, #81	; 0x51
 80271d8:	f000 fb9b 	bl	8027912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80271dc:	2051      	movs	r0, #81	; 0x51
 80271de:	f000 fbb4 	bl	802794a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80271e2:	bf00      	nop
 80271e4:	3708      	adds	r7, #8
 80271e6:	46bd      	mov	sp, r7
 80271e8:	bd80      	pop	{r7, pc}
 80271ea:	bf00      	nop
 80271ec:	40023800 	.word	0x40023800

080271f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80271f0:	b480      	push	{r7}
 80271f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80271f4:	e7fe      	b.n	80271f4 <NMI_Handler+0x4>

080271f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80271f6:	b480      	push	{r7}
 80271f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80271fa:	e7fe      	b.n	80271fa <HardFault_Handler+0x4>

080271fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80271fc:	b480      	push	{r7}
 80271fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8027200:	e7fe      	b.n	8027200 <MemManage_Handler+0x4>

08027202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8027202:	b480      	push	{r7}
 8027204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8027206:	e7fe      	b.n	8027206 <BusFault_Handler+0x4>

08027208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8027208:	b480      	push	{r7}
 802720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802720c:	e7fe      	b.n	802720c <UsageFault_Handler+0x4>

0802720e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802720e:	b480      	push	{r7}
 8027210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8027212:	bf00      	nop
 8027214:	46bd      	mov	sp, r7
 8027216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802721a:	4770      	bx	lr

0802721c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802721c:	b480      	push	{r7}
 802721e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8027220:	bf00      	nop
 8027222:	46bd      	mov	sp, r7
 8027224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027228:	4770      	bx	lr

0802722a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802722a:	b480      	push	{r7}
 802722c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802722e:	bf00      	nop
 8027230:	46bd      	mov	sp, r7
 8027232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027236:	4770      	bx	lr

08027238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8027238:	b580      	push	{r7, lr}
 802723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802723c:	f000 f9f6 	bl	802762c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8027240:	bf00      	nop
 8027242:	bd80      	pop	{r7, pc}

08027244 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8027244:	b580      	push	{r7, lr}
 8027246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8027248:	f002 fe20 	bl	8029e8c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 802724c:	bf00      	nop
 802724e:	bd80      	pop	{r7, pc}

08027250 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8027250:	b580      	push	{r7, lr}
 8027252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8027254:	f000 fc88 	bl	8027b68 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8027258:	bf00      	nop
 802725a:	bd80      	pop	{r7, pc}

0802725c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 802725c:	b480      	push	{r7}
 802725e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8027260:	bf00      	nop
 8027262:	46bd      	mov	sp, r7
 8027264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027268:	4770      	bx	lr
	...

0802726c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802726c:	b580      	push	{r7, lr}
 802726e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8027270:	4802      	ldr	r0, [pc, #8]	; (802727c <SPI1_IRQHandler+0x10>)
 8027272:	f003 ffe7 	bl	802b244 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8027276:	bf00      	nop
 8027278:	bd80      	pop	{r7, pc}
 802727a:	bf00      	nop
 802727c:	20005158 	.word	0x20005158

08027280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8027280:	b580      	push	{r7, lr}
 8027282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8027284:	4802      	ldr	r0, [pc, #8]	; (8027290 <USART1_IRQHandler+0x10>)
 8027286:	f004 fa99 	bl	802b7bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 802728a:	bf00      	nop
 802728c:	bd80      	pop	{r7, pc}
 802728e:	bf00      	nop
 8027290:	200051b4 	.word	0x200051b4

08027294 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8027294:	b580      	push	{r7, lr}
 8027296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8027298:	4802      	ldr	r0, [pc, #8]	; (80272a4 <FSMC_IRQHandler+0x10>)
 802729a:	f001 fa9c 	bl	80287d6 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 802729e:	bf00      	nop
 80272a0:	bd80      	pop	{r7, pc}
 80272a2:	bf00      	nop
 80272a4:	20000c04 	.word	0x20000c04

080272a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80272a8:	b580      	push	{r7, lr}
 80272aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80272ac:	4802      	ldr	r0, [pc, #8]	; (80272b8 <OTG_FS_IRQHandler+0x10>)
 80272ae:	f001 fcc0 	bl	8028c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80272b2:	bf00      	nop
 80272b4:	bd80      	pop	{r7, pc}
 80272b6:	bf00      	nop
 80272b8:	200079d8 	.word	0x200079d8

080272bc <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80272bc:	b580      	push	{r7, lr}
 80272be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80272c0:	4802      	ldr	r0, [pc, #8]	; (80272cc <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80272c2:	f001 fcb6 	bl	8028c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80272c6:	bf00      	nop
 80272c8:	bd80      	pop	{r7, pc}
 80272ca:	bf00      	nop
 80272cc:	20007ee4 	.word	0x20007ee4

080272d0 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80272d0:	b580      	push	{r7, lr}
 80272d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80272d4:	4802      	ldr	r0, [pc, #8]	; (80272e0 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80272d6:	f001 fcac 	bl	8028c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80272da:	bf00      	nop
 80272dc:	bd80      	pop	{r7, pc}
 80272de:	bf00      	nop
 80272e0:	20007ee4 	.word	0x20007ee4

080272e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80272e4:	b580      	push	{r7, lr}
 80272e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80272e8:	4802      	ldr	r0, [pc, #8]	; (80272f4 <OTG_HS_IRQHandler+0x10>)
 80272ea:	f001 fca2 	bl	8028c32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80272ee:	bf00      	nop
 80272f0:	bd80      	pop	{r7, pc}
 80272f2:	bf00      	nop
 80272f4:	20007ee4 	.word	0x20007ee4

080272f8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80272f8:	b480      	push	{r7}
 80272fa:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80272fc:	bf00      	nop
 80272fe:	46bd      	mov	sp, r7
 8027300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027304:	4770      	bx	lr

08027306 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8027306:	b580      	push	{r7, lr}
 8027308:	b086      	sub	sp, #24
 802730a:	af00      	add	r7, sp, #0
 802730c:	60f8      	str	r0, [r7, #12]
 802730e:	60b9      	str	r1, [r7, #8]
 8027310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027312:	2300      	movs	r3, #0
 8027314:	617b      	str	r3, [r7, #20]
 8027316:	e00a      	b.n	802732e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8027318:	f3af 8000 	nop.w
 802731c:	4601      	mov	r1, r0
 802731e:	68bb      	ldr	r3, [r7, #8]
 8027320:	1c5a      	adds	r2, r3, #1
 8027322:	60ba      	str	r2, [r7, #8]
 8027324:	b2ca      	uxtb	r2, r1
 8027326:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027328:	697b      	ldr	r3, [r7, #20]
 802732a:	3301      	adds	r3, #1
 802732c:	617b      	str	r3, [r7, #20]
 802732e:	697a      	ldr	r2, [r7, #20]
 8027330:	687b      	ldr	r3, [r7, #4]
 8027332:	429a      	cmp	r2, r3
 8027334:	dbf0      	blt.n	8027318 <_read+0x12>
  }

  return len;
 8027336:	687b      	ldr	r3, [r7, #4]
}
 8027338:	4618      	mov	r0, r3
 802733a:	3718      	adds	r7, #24
 802733c:	46bd      	mov	sp, r7
 802733e:	bd80      	pop	{r7, pc}

08027340 <_close>:
  }
  return len;
}

int _close(int file)
{
 8027340:	b480      	push	{r7}
 8027342:	b083      	sub	sp, #12
 8027344:	af00      	add	r7, sp, #0
 8027346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8027348:	f04f 33ff 	mov.w	r3, #4294967295
}
 802734c:	4618      	mov	r0, r3
 802734e:	370c      	adds	r7, #12
 8027350:	46bd      	mov	sp, r7
 8027352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027356:	4770      	bx	lr

08027358 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8027358:	b480      	push	{r7}
 802735a:	b083      	sub	sp, #12
 802735c:	af00      	add	r7, sp, #0
 802735e:	6078      	str	r0, [r7, #4]
 8027360:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8027362:	683b      	ldr	r3, [r7, #0]
 8027364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027368:	605a      	str	r2, [r3, #4]
  return 0;
 802736a:	2300      	movs	r3, #0
}
 802736c:	4618      	mov	r0, r3
 802736e:	370c      	adds	r7, #12
 8027370:	46bd      	mov	sp, r7
 8027372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027376:	4770      	bx	lr

08027378 <_isatty>:

int _isatty(int file)
{
 8027378:	b480      	push	{r7}
 802737a:	b083      	sub	sp, #12
 802737c:	af00      	add	r7, sp, #0
 802737e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8027380:	2301      	movs	r3, #1
}
 8027382:	4618      	mov	r0, r3
 8027384:	370c      	adds	r7, #12
 8027386:	46bd      	mov	sp, r7
 8027388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802738c:	4770      	bx	lr

0802738e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802738e:	b480      	push	{r7}
 8027390:	b085      	sub	sp, #20
 8027392:	af00      	add	r7, sp, #0
 8027394:	60f8      	str	r0, [r7, #12]
 8027396:	60b9      	str	r1, [r7, #8]
 8027398:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802739a:	2300      	movs	r3, #0
}
 802739c:	4618      	mov	r0, r3
 802739e:	3714      	adds	r7, #20
 80273a0:	46bd      	mov	sp, r7
 80273a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273a6:	4770      	bx	lr

080273a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80273a8:	b580      	push	{r7, lr}
 80273aa:	b086      	sub	sp, #24
 80273ac:	af00      	add	r7, sp, #0
 80273ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80273b0:	4a14      	ldr	r2, [pc, #80]	; (8027404 <_sbrk+0x5c>)
 80273b2:	4b15      	ldr	r3, [pc, #84]	; (8027408 <_sbrk+0x60>)
 80273b4:	1ad3      	subs	r3, r2, r3
 80273b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80273b8:	697b      	ldr	r3, [r7, #20]
 80273ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80273bc:	4b13      	ldr	r3, [pc, #76]	; (802740c <_sbrk+0x64>)
 80273be:	681b      	ldr	r3, [r3, #0]
 80273c0:	2b00      	cmp	r3, #0
 80273c2:	d102      	bne.n	80273ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80273c4:	4b11      	ldr	r3, [pc, #68]	; (802740c <_sbrk+0x64>)
 80273c6:	4a12      	ldr	r2, [pc, #72]	; (8027410 <_sbrk+0x68>)
 80273c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80273ca:	4b10      	ldr	r3, [pc, #64]	; (802740c <_sbrk+0x64>)
 80273cc:	681a      	ldr	r2, [r3, #0]
 80273ce:	687b      	ldr	r3, [r7, #4]
 80273d0:	4413      	add	r3, r2
 80273d2:	693a      	ldr	r2, [r7, #16]
 80273d4:	429a      	cmp	r2, r3
 80273d6:	d207      	bcs.n	80273e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80273d8:	f009 ffbe 	bl	8031358 <__errno>
 80273dc:	4603      	mov	r3, r0
 80273de:	220c      	movs	r2, #12
 80273e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80273e2:	f04f 33ff 	mov.w	r3, #4294967295
 80273e6:	e009      	b.n	80273fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80273e8:	4b08      	ldr	r3, [pc, #32]	; (802740c <_sbrk+0x64>)
 80273ea:	681b      	ldr	r3, [r3, #0]
 80273ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80273ee:	4b07      	ldr	r3, [pc, #28]	; (802740c <_sbrk+0x64>)
 80273f0:	681a      	ldr	r2, [r3, #0]
 80273f2:	687b      	ldr	r3, [r7, #4]
 80273f4:	4413      	add	r3, r2
 80273f6:	4a05      	ldr	r2, [pc, #20]	; (802740c <_sbrk+0x64>)
 80273f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80273fa:	68fb      	ldr	r3, [r7, #12]
}
 80273fc:	4618      	mov	r0, r3
 80273fe:	3718      	adds	r7, #24
 8027400:	46bd      	mov	sp, r7
 8027402:	bd80      	pop	{r7, pc}
 8027404:	2000c000 	.word	0x2000c000
 8027408:	00001000 	.word	0x00001000
 802740c:	200051b0 	.word	0x200051b0
 8027410:	20008760 	.word	0x20008760

08027414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8027414:	b480      	push	{r7}
 8027416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8027418:	4b07      	ldr	r3, [pc, #28]	; (8027438 <SystemInit+0x24>)
 802741a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802741e:	4a06      	ldr	r2, [pc, #24]	; (8027438 <SystemInit+0x24>)
 8027420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8027428:	4b03      	ldr	r3, [pc, #12]	; (8027438 <SystemInit+0x24>)
 802742a:	4a04      	ldr	r2, [pc, #16]	; (802743c <SystemInit+0x28>)
 802742c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 802742e:	bf00      	nop
 8027430:	46bd      	mov	sp, r7
 8027432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027436:	4770      	bx	lr
 8027438:	e000ed00 	.word	0xe000ed00
 802743c:	08022000 	.word	0x08022000

08027440 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8027440:	b580      	push	{r7, lr}
 8027442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8027444:	4b11      	ldr	r3, [pc, #68]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027446:	4a12      	ldr	r2, [pc, #72]	; (8027490 <MX_USART1_UART_Init+0x50>)
 8027448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 802744a:	4b10      	ldr	r3, [pc, #64]	; (802748c <MX_USART1_UART_Init+0x4c>)
 802744c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8027450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8027452:	4b0e      	ldr	r3, [pc, #56]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027454:	2200      	movs	r2, #0
 8027456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027458:	4b0c      	ldr	r3, [pc, #48]	; (802748c <MX_USART1_UART_Init+0x4c>)
 802745a:	2200      	movs	r2, #0
 802745c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802745e:	4b0b      	ldr	r3, [pc, #44]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027460:	2200      	movs	r2, #0
 8027462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8027464:	4b09      	ldr	r3, [pc, #36]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027466:	220c      	movs	r2, #12
 8027468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802746a:	4b08      	ldr	r3, [pc, #32]	; (802748c <MX_USART1_UART_Init+0x4c>)
 802746c:	2200      	movs	r2, #0
 802746e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8027470:	4b06      	ldr	r3, [pc, #24]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027472:	2200      	movs	r2, #0
 8027474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027476:	4805      	ldr	r0, [pc, #20]	; (802748c <MX_USART1_UART_Init+0x4c>)
 8027478:	f004 f8c0 	bl	802b5fc <HAL_UART_Init>
 802747c:	4603      	mov	r3, r0
 802747e:	2b00      	cmp	r3, #0
 8027480:	d001      	beq.n	8027486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8027482:	f7fc fa6f 	bl	8023964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8027486:	bf00      	nop
 8027488:	bd80      	pop	{r7, pc}
 802748a:	bf00      	nop
 802748c:	200051b4 	.word	0x200051b4
 8027490:	40011000 	.word	0x40011000

08027494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027494:	b580      	push	{r7, lr}
 8027496:	b08a      	sub	sp, #40	; 0x28
 8027498:	af00      	add	r7, sp, #0
 802749a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802749c:	f107 0314 	add.w	r3, r7, #20
 80274a0:	2200      	movs	r2, #0
 80274a2:	601a      	str	r2, [r3, #0]
 80274a4:	605a      	str	r2, [r3, #4]
 80274a6:	609a      	str	r2, [r3, #8]
 80274a8:	60da      	str	r2, [r3, #12]
 80274aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80274ac:	687b      	ldr	r3, [r7, #4]
 80274ae:	681b      	ldr	r3, [r3, #0]
 80274b0:	4a1d      	ldr	r2, [pc, #116]	; (8027528 <HAL_UART_MspInit+0x94>)
 80274b2:	4293      	cmp	r3, r2
 80274b4:	d134      	bne.n	8027520 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80274b6:	2300      	movs	r3, #0
 80274b8:	613b      	str	r3, [r7, #16]
 80274ba:	4b1c      	ldr	r3, [pc, #112]	; (802752c <HAL_UART_MspInit+0x98>)
 80274bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80274be:	4a1b      	ldr	r2, [pc, #108]	; (802752c <HAL_UART_MspInit+0x98>)
 80274c0:	f043 0310 	orr.w	r3, r3, #16
 80274c4:	6453      	str	r3, [r2, #68]	; 0x44
 80274c6:	4b19      	ldr	r3, [pc, #100]	; (802752c <HAL_UART_MspInit+0x98>)
 80274c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80274ca:	f003 0310 	and.w	r3, r3, #16
 80274ce:	613b      	str	r3, [r7, #16]
 80274d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80274d2:	2300      	movs	r3, #0
 80274d4:	60fb      	str	r3, [r7, #12]
 80274d6:	4b15      	ldr	r3, [pc, #84]	; (802752c <HAL_UART_MspInit+0x98>)
 80274d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80274da:	4a14      	ldr	r2, [pc, #80]	; (802752c <HAL_UART_MspInit+0x98>)
 80274dc:	f043 0301 	orr.w	r3, r3, #1
 80274e0:	6313      	str	r3, [r2, #48]	; 0x30
 80274e2:	4b12      	ldr	r3, [pc, #72]	; (802752c <HAL_UART_MspInit+0x98>)
 80274e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80274e6:	f003 0301 	and.w	r3, r3, #1
 80274ea:	60fb      	str	r3, [r7, #12]
 80274ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80274ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80274f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80274f4:	2302      	movs	r3, #2
 80274f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80274f8:	2300      	movs	r3, #0
 80274fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80274fc:	2303      	movs	r3, #3
 80274fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8027500:	2307      	movs	r3, #7
 8027502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027504:	f107 0314 	add.w	r3, r7, #20
 8027508:	4619      	mov	r1, r3
 802750a:	4809      	ldr	r0, [pc, #36]	; (8027530 <HAL_UART_MspInit+0x9c>)
 802750c:	f000 fe64 	bl	80281d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8027510:	2200      	movs	r2, #0
 8027512:	2100      	movs	r1, #0
 8027514:	2025      	movs	r0, #37	; 0x25
 8027516:	f000 f9fc 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 802751a:	2025      	movs	r0, #37	; 0x25
 802751c:	f000 fa15 	bl	802794a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8027520:	bf00      	nop
 8027522:	3728      	adds	r7, #40	; 0x28
 8027524:	46bd      	mov	sp, r7
 8027526:	bd80      	pop	{r7, pc}
 8027528:	40011000 	.word	0x40011000
 802752c:	40023800 	.word	0x40023800
 8027530:	40020000 	.word	0x40020000

08027534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8027534:	f8df d034 	ldr.w	sp, [pc, #52]	; 802756c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8027538:	480d      	ldr	r0, [pc, #52]	; (8027570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802753a:	490e      	ldr	r1, [pc, #56]	; (8027574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 802753c:	4a0e      	ldr	r2, [pc, #56]	; (8027578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802753e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8027540:	e002      	b.n	8027548 <LoopCopyDataInit>

08027542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8027542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8027544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8027546:	3304      	adds	r3, #4

08027548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8027548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802754a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802754c:	d3f9      	bcc.n	8027542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802754e:	4a0b      	ldr	r2, [pc, #44]	; (802757c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8027550:	4c0b      	ldr	r4, [pc, #44]	; (8027580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8027552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027554:	e001      	b.n	802755a <LoopFillZerobss>

08027556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027558:	3204      	adds	r2, #4

0802755a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802755a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802755c:	d3fb      	bcc.n	8027556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802755e:	f7ff ff59 	bl	8027414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8027562:	f009 feff 	bl	8031364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027566:	f7fc f937 	bl	80237d8 <main>
  bx  lr    
 802756a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802756c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8027570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8027574:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8027578:	08032d80 	.word	0x08032d80
  ldr r2, =_sbss
 802757c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8027580:	2000875c 	.word	0x2000875c

08027584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027584:	e7fe      	b.n	8027584 <ADC_IRQHandler>
	...

08027588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8027588:	b580      	push	{r7, lr}
 802758a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802758c:	4b0e      	ldr	r3, [pc, #56]	; (80275c8 <HAL_Init+0x40>)
 802758e:	681b      	ldr	r3, [r3, #0]
 8027590:	4a0d      	ldr	r2, [pc, #52]	; (80275c8 <HAL_Init+0x40>)
 8027592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8027598:	4b0b      	ldr	r3, [pc, #44]	; (80275c8 <HAL_Init+0x40>)
 802759a:	681b      	ldr	r3, [r3, #0]
 802759c:	4a0a      	ldr	r2, [pc, #40]	; (80275c8 <HAL_Init+0x40>)
 802759e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80275a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80275a4:	4b08      	ldr	r3, [pc, #32]	; (80275c8 <HAL_Init+0x40>)
 80275a6:	681b      	ldr	r3, [r3, #0]
 80275a8:	4a07      	ldr	r2, [pc, #28]	; (80275c8 <HAL_Init+0x40>)
 80275aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80275b0:	2003      	movs	r0, #3
 80275b2:	f000 f9a3 	bl	80278fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80275b6:	200f      	movs	r0, #15
 80275b8:	f000 f808 	bl	80275cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80275bc:	f7ff fdd2 	bl	8027164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80275c0:	2300      	movs	r3, #0
}
 80275c2:	4618      	mov	r0, r3
 80275c4:	bd80      	pop	{r7, pc}
 80275c6:	bf00      	nop
 80275c8:	40023c00 	.word	0x40023c00

080275cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80275cc:	b580      	push	{r7, lr}
 80275ce:	b082      	sub	sp, #8
 80275d0:	af00      	add	r7, sp, #0
 80275d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80275d4:	4b12      	ldr	r3, [pc, #72]	; (8027620 <HAL_InitTick+0x54>)
 80275d6:	681a      	ldr	r2, [r3, #0]
 80275d8:	4b12      	ldr	r3, [pc, #72]	; (8027624 <HAL_InitTick+0x58>)
 80275da:	781b      	ldrb	r3, [r3, #0]
 80275dc:	4619      	mov	r1, r3
 80275de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80275e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80275e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80275ea:	4618      	mov	r0, r3
 80275ec:	f000 f9c9 	bl	8027982 <HAL_SYSTICK_Config>
 80275f0:	4603      	mov	r3, r0
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d001      	beq.n	80275fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80275f6:	2301      	movs	r3, #1
 80275f8:	e00e      	b.n	8027618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80275fa:	687b      	ldr	r3, [r7, #4]
 80275fc:	2b0f      	cmp	r3, #15
 80275fe:	d80a      	bhi.n	8027616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8027600:	2200      	movs	r2, #0
 8027602:	6879      	ldr	r1, [r7, #4]
 8027604:	f04f 30ff 	mov.w	r0, #4294967295
 8027608:	f000 f983 	bl	8027912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802760c:	4a06      	ldr	r2, [pc, #24]	; (8027628 <HAL_InitTick+0x5c>)
 802760e:	687b      	ldr	r3, [r7, #4]
 8027610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8027612:	2300      	movs	r3, #0
 8027614:	e000      	b.n	8027618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8027616:	2301      	movs	r3, #1
}
 8027618:	4618      	mov	r0, r3
 802761a:	3708      	adds	r7, #8
 802761c:	46bd      	mov	sp, r7
 802761e:	bd80      	pop	{r7, pc}
 8027620:	20000138 	.word	0x20000138
 8027624:	20000140 	.word	0x20000140
 8027628:	2000013c 	.word	0x2000013c

0802762c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802762c:	b480      	push	{r7}
 802762e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8027630:	4b06      	ldr	r3, [pc, #24]	; (802764c <HAL_IncTick+0x20>)
 8027632:	781b      	ldrb	r3, [r3, #0]
 8027634:	461a      	mov	r2, r3
 8027636:	4b06      	ldr	r3, [pc, #24]	; (8027650 <HAL_IncTick+0x24>)
 8027638:	681b      	ldr	r3, [r3, #0]
 802763a:	4413      	add	r3, r2
 802763c:	4a04      	ldr	r2, [pc, #16]	; (8027650 <HAL_IncTick+0x24>)
 802763e:	6013      	str	r3, [r2, #0]
}
 8027640:	bf00      	nop
 8027642:	46bd      	mov	sp, r7
 8027644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027648:	4770      	bx	lr
 802764a:	bf00      	nop
 802764c:	20000140 	.word	0x20000140
 8027650:	200051f8 	.word	0x200051f8

08027654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8027654:	b480      	push	{r7}
 8027656:	af00      	add	r7, sp, #0
  return uwTick;
 8027658:	4b03      	ldr	r3, [pc, #12]	; (8027668 <HAL_GetTick+0x14>)
 802765a:	681b      	ldr	r3, [r3, #0]
}
 802765c:	4618      	mov	r0, r3
 802765e:	46bd      	mov	sp, r7
 8027660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027664:	4770      	bx	lr
 8027666:	bf00      	nop
 8027668:	200051f8 	.word	0x200051f8

0802766c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802766c:	b580      	push	{r7, lr}
 802766e:	b084      	sub	sp, #16
 8027670:	af00      	add	r7, sp, #0
 8027672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8027674:	f7ff ffee 	bl	8027654 <HAL_GetTick>
 8027678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802767a:	687b      	ldr	r3, [r7, #4]
 802767c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802767e:	68fb      	ldr	r3, [r7, #12]
 8027680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027684:	d005      	beq.n	8027692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8027686:	4b0a      	ldr	r3, [pc, #40]	; (80276b0 <HAL_Delay+0x44>)
 8027688:	781b      	ldrb	r3, [r3, #0]
 802768a:	461a      	mov	r2, r3
 802768c:	68fb      	ldr	r3, [r7, #12]
 802768e:	4413      	add	r3, r2
 8027690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8027692:	bf00      	nop
 8027694:	f7ff ffde 	bl	8027654 <HAL_GetTick>
 8027698:	4602      	mov	r2, r0
 802769a:	68bb      	ldr	r3, [r7, #8]
 802769c:	1ad3      	subs	r3, r2, r3
 802769e:	68fa      	ldr	r2, [r7, #12]
 80276a0:	429a      	cmp	r2, r3
 80276a2:	d8f7      	bhi.n	8027694 <HAL_Delay+0x28>
  {
  }
}
 80276a4:	bf00      	nop
 80276a6:	bf00      	nop
 80276a8:	3710      	adds	r7, #16
 80276aa:	46bd      	mov	sp, r7
 80276ac:	bd80      	pop	{r7, pc}
 80276ae:	bf00      	nop
 80276b0:	20000140 	.word	0x20000140

080276b4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80276b4:	b480      	push	{r7}
 80276b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80276b8:	4b05      	ldr	r3, [pc, #20]	; (80276d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80276ba:	685b      	ldr	r3, [r3, #4]
 80276bc:	4a04      	ldr	r2, [pc, #16]	; (80276d0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80276be:	f043 0301 	orr.w	r3, r3, #1
 80276c2:	6053      	str	r3, [r2, #4]
}
 80276c4:	bf00      	nop
 80276c6:	46bd      	mov	sp, r7
 80276c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276cc:	4770      	bx	lr
 80276ce:	bf00      	nop
 80276d0:	e0042000 	.word	0xe0042000

080276d4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80276d4:	b480      	push	{r7}
 80276d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80276d8:	4b05      	ldr	r3, [pc, #20]	; (80276f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80276da:	685b      	ldr	r3, [r3, #4]
 80276dc:	4a04      	ldr	r2, [pc, #16]	; (80276f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80276de:	f043 0302 	orr.w	r3, r3, #2
 80276e2:	6053      	str	r3, [r2, #4]
}
 80276e4:	bf00      	nop
 80276e6:	46bd      	mov	sp, r7
 80276e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276ec:	4770      	bx	lr
 80276ee:	bf00      	nop
 80276f0:	e0042000 	.word	0xe0042000

080276f4 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80276f4:	b480      	push	{r7}
 80276f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80276f8:	4b05      	ldr	r3, [pc, #20]	; (8027710 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80276fa:	685b      	ldr	r3, [r3, #4]
 80276fc:	4a04      	ldr	r2, [pc, #16]	; (8027710 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80276fe:	f043 0304 	orr.w	r3, r3, #4
 8027702:	6053      	str	r3, [r2, #4]
}
 8027704:	bf00      	nop
 8027706:	46bd      	mov	sp, r7
 8027708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802770c:	4770      	bx	lr
 802770e:	bf00      	nop
 8027710:	e0042000 	.word	0xe0042000

08027714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027714:	b480      	push	{r7}
 8027716:	b085      	sub	sp, #20
 8027718:	af00      	add	r7, sp, #0
 802771a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802771c:	687b      	ldr	r3, [r7, #4]
 802771e:	f003 0307 	and.w	r3, r3, #7
 8027722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8027724:	4b0c      	ldr	r3, [pc, #48]	; (8027758 <__NVIC_SetPriorityGrouping+0x44>)
 8027726:	68db      	ldr	r3, [r3, #12]
 8027728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802772a:	68ba      	ldr	r2, [r7, #8]
 802772c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8027730:	4013      	ands	r3, r2
 8027732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8027734:	68fb      	ldr	r3, [r7, #12]
 8027736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027738:	68bb      	ldr	r3, [r7, #8]
 802773a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802773c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8027740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8027746:	4a04      	ldr	r2, [pc, #16]	; (8027758 <__NVIC_SetPriorityGrouping+0x44>)
 8027748:	68bb      	ldr	r3, [r7, #8]
 802774a:	60d3      	str	r3, [r2, #12]
}
 802774c:	bf00      	nop
 802774e:	3714      	adds	r7, #20
 8027750:	46bd      	mov	sp, r7
 8027752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027756:	4770      	bx	lr
 8027758:	e000ed00 	.word	0xe000ed00

0802775c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802775c:	b480      	push	{r7}
 802775e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027760:	4b04      	ldr	r3, [pc, #16]	; (8027774 <__NVIC_GetPriorityGrouping+0x18>)
 8027762:	68db      	ldr	r3, [r3, #12]
 8027764:	0a1b      	lsrs	r3, r3, #8
 8027766:	f003 0307 	and.w	r3, r3, #7
}
 802776a:	4618      	mov	r0, r3
 802776c:	46bd      	mov	sp, r7
 802776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027772:	4770      	bx	lr
 8027774:	e000ed00 	.word	0xe000ed00

08027778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027778:	b480      	push	{r7}
 802777a:	b083      	sub	sp, #12
 802777c:	af00      	add	r7, sp, #0
 802777e:	4603      	mov	r3, r0
 8027780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027786:	2b00      	cmp	r3, #0
 8027788:	db0b      	blt.n	80277a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802778a:	79fb      	ldrb	r3, [r7, #7]
 802778c:	f003 021f 	and.w	r2, r3, #31
 8027790:	4907      	ldr	r1, [pc, #28]	; (80277b0 <__NVIC_EnableIRQ+0x38>)
 8027792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027796:	095b      	lsrs	r3, r3, #5
 8027798:	2001      	movs	r0, #1
 802779a:	fa00 f202 	lsl.w	r2, r0, r2
 802779e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80277a2:	bf00      	nop
 80277a4:	370c      	adds	r7, #12
 80277a6:	46bd      	mov	sp, r7
 80277a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ac:	4770      	bx	lr
 80277ae:	bf00      	nop
 80277b0:	e000e100 	.word	0xe000e100

080277b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80277b4:	b480      	push	{r7}
 80277b6:	b083      	sub	sp, #12
 80277b8:	af00      	add	r7, sp, #0
 80277ba:	4603      	mov	r3, r0
 80277bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80277be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80277c2:	2b00      	cmp	r3, #0
 80277c4:	db12      	blt.n	80277ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80277c6:	79fb      	ldrb	r3, [r7, #7]
 80277c8:	f003 021f 	and.w	r2, r3, #31
 80277cc:	490a      	ldr	r1, [pc, #40]	; (80277f8 <__NVIC_DisableIRQ+0x44>)
 80277ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80277d2:	095b      	lsrs	r3, r3, #5
 80277d4:	2001      	movs	r0, #1
 80277d6:	fa00 f202 	lsl.w	r2, r0, r2
 80277da:	3320      	adds	r3, #32
 80277dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80277e0:	f3bf 8f4f 	dsb	sy
}
 80277e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80277e6:	f3bf 8f6f 	isb	sy
}
 80277ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80277ec:	bf00      	nop
 80277ee:	370c      	adds	r7, #12
 80277f0:	46bd      	mov	sp, r7
 80277f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277f6:	4770      	bx	lr
 80277f8:	e000e100 	.word	0xe000e100

080277fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80277fc:	b480      	push	{r7}
 80277fe:	b083      	sub	sp, #12
 8027800:	af00      	add	r7, sp, #0
 8027802:	4603      	mov	r3, r0
 8027804:	6039      	str	r1, [r7, #0]
 8027806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802780c:	2b00      	cmp	r3, #0
 802780e:	db0a      	blt.n	8027826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027810:	683b      	ldr	r3, [r7, #0]
 8027812:	b2da      	uxtb	r2, r3
 8027814:	490c      	ldr	r1, [pc, #48]	; (8027848 <__NVIC_SetPriority+0x4c>)
 8027816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802781a:	0112      	lsls	r2, r2, #4
 802781c:	b2d2      	uxtb	r2, r2
 802781e:	440b      	add	r3, r1
 8027820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8027824:	e00a      	b.n	802783c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027826:	683b      	ldr	r3, [r7, #0]
 8027828:	b2da      	uxtb	r2, r3
 802782a:	4908      	ldr	r1, [pc, #32]	; (802784c <__NVIC_SetPriority+0x50>)
 802782c:	79fb      	ldrb	r3, [r7, #7]
 802782e:	f003 030f 	and.w	r3, r3, #15
 8027832:	3b04      	subs	r3, #4
 8027834:	0112      	lsls	r2, r2, #4
 8027836:	b2d2      	uxtb	r2, r2
 8027838:	440b      	add	r3, r1
 802783a:	761a      	strb	r2, [r3, #24]
}
 802783c:	bf00      	nop
 802783e:	370c      	adds	r7, #12
 8027840:	46bd      	mov	sp, r7
 8027842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027846:	4770      	bx	lr
 8027848:	e000e100 	.word	0xe000e100
 802784c:	e000ed00 	.word	0xe000ed00

08027850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8027850:	b480      	push	{r7}
 8027852:	b089      	sub	sp, #36	; 0x24
 8027854:	af00      	add	r7, sp, #0
 8027856:	60f8      	str	r0, [r7, #12]
 8027858:	60b9      	str	r1, [r7, #8]
 802785a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802785c:	68fb      	ldr	r3, [r7, #12]
 802785e:	f003 0307 	and.w	r3, r3, #7
 8027862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8027864:	69fb      	ldr	r3, [r7, #28]
 8027866:	f1c3 0307 	rsb	r3, r3, #7
 802786a:	2b04      	cmp	r3, #4
 802786c:	bf28      	it	cs
 802786e:	2304      	movcs	r3, #4
 8027870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8027872:	69fb      	ldr	r3, [r7, #28]
 8027874:	3304      	adds	r3, #4
 8027876:	2b06      	cmp	r3, #6
 8027878:	d902      	bls.n	8027880 <NVIC_EncodePriority+0x30>
 802787a:	69fb      	ldr	r3, [r7, #28]
 802787c:	3b03      	subs	r3, #3
 802787e:	e000      	b.n	8027882 <NVIC_EncodePriority+0x32>
 8027880:	2300      	movs	r3, #0
 8027882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027884:	f04f 32ff 	mov.w	r2, #4294967295
 8027888:	69bb      	ldr	r3, [r7, #24]
 802788a:	fa02 f303 	lsl.w	r3, r2, r3
 802788e:	43da      	mvns	r2, r3
 8027890:	68bb      	ldr	r3, [r7, #8]
 8027892:	401a      	ands	r2, r3
 8027894:	697b      	ldr	r3, [r7, #20]
 8027896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027898:	f04f 31ff 	mov.w	r1, #4294967295
 802789c:	697b      	ldr	r3, [r7, #20]
 802789e:	fa01 f303 	lsl.w	r3, r1, r3
 80278a2:	43d9      	mvns	r1, r3
 80278a4:	687b      	ldr	r3, [r7, #4]
 80278a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80278a8:	4313      	orrs	r3, r2
         );
}
 80278aa:	4618      	mov	r0, r3
 80278ac:	3724      	adds	r7, #36	; 0x24
 80278ae:	46bd      	mov	sp, r7
 80278b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278b4:	4770      	bx	lr
	...

080278b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80278b8:	b580      	push	{r7, lr}
 80278ba:	b082      	sub	sp, #8
 80278bc:	af00      	add	r7, sp, #0
 80278be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80278c0:	687b      	ldr	r3, [r7, #4]
 80278c2:	3b01      	subs	r3, #1
 80278c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80278c8:	d301      	bcc.n	80278ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80278ca:	2301      	movs	r3, #1
 80278cc:	e00f      	b.n	80278ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80278ce:	4a0a      	ldr	r2, [pc, #40]	; (80278f8 <SysTick_Config+0x40>)
 80278d0:	687b      	ldr	r3, [r7, #4]
 80278d2:	3b01      	subs	r3, #1
 80278d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80278d6:	210f      	movs	r1, #15
 80278d8:	f04f 30ff 	mov.w	r0, #4294967295
 80278dc:	f7ff ff8e 	bl	80277fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80278e0:	4b05      	ldr	r3, [pc, #20]	; (80278f8 <SysTick_Config+0x40>)
 80278e2:	2200      	movs	r2, #0
 80278e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80278e6:	4b04      	ldr	r3, [pc, #16]	; (80278f8 <SysTick_Config+0x40>)
 80278e8:	2207      	movs	r2, #7
 80278ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80278ec:	2300      	movs	r3, #0
}
 80278ee:	4618      	mov	r0, r3
 80278f0:	3708      	adds	r7, #8
 80278f2:	46bd      	mov	sp, r7
 80278f4:	bd80      	pop	{r7, pc}
 80278f6:	bf00      	nop
 80278f8:	e000e010 	.word	0xe000e010

080278fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80278fc:	b580      	push	{r7, lr}
 80278fe:	b082      	sub	sp, #8
 8027900:	af00      	add	r7, sp, #0
 8027902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027904:	6878      	ldr	r0, [r7, #4]
 8027906:	f7ff ff05 	bl	8027714 <__NVIC_SetPriorityGrouping>
}
 802790a:	bf00      	nop
 802790c:	3708      	adds	r7, #8
 802790e:	46bd      	mov	sp, r7
 8027910:	bd80      	pop	{r7, pc}

08027912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8027912:	b580      	push	{r7, lr}
 8027914:	b086      	sub	sp, #24
 8027916:	af00      	add	r7, sp, #0
 8027918:	4603      	mov	r3, r0
 802791a:	60b9      	str	r1, [r7, #8]
 802791c:	607a      	str	r2, [r7, #4]
 802791e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8027920:	2300      	movs	r3, #0
 8027922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027924:	f7ff ff1a 	bl	802775c <__NVIC_GetPriorityGrouping>
 8027928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802792a:	687a      	ldr	r2, [r7, #4]
 802792c:	68b9      	ldr	r1, [r7, #8]
 802792e:	6978      	ldr	r0, [r7, #20]
 8027930:	f7ff ff8e 	bl	8027850 <NVIC_EncodePriority>
 8027934:	4602      	mov	r2, r0
 8027936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802793a:	4611      	mov	r1, r2
 802793c:	4618      	mov	r0, r3
 802793e:	f7ff ff5d 	bl	80277fc <__NVIC_SetPriority>
}
 8027942:	bf00      	nop
 8027944:	3718      	adds	r7, #24
 8027946:	46bd      	mov	sp, r7
 8027948:	bd80      	pop	{r7, pc}

0802794a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802794a:	b580      	push	{r7, lr}
 802794c:	b082      	sub	sp, #8
 802794e:	af00      	add	r7, sp, #0
 8027950:	4603      	mov	r3, r0
 8027952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8027954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027958:	4618      	mov	r0, r3
 802795a:	f7ff ff0d 	bl	8027778 <__NVIC_EnableIRQ>
}
 802795e:	bf00      	nop
 8027960:	3708      	adds	r7, #8
 8027962:	46bd      	mov	sp, r7
 8027964:	bd80      	pop	{r7, pc}

08027966 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027966:	b580      	push	{r7, lr}
 8027968:	b082      	sub	sp, #8
 802796a:	af00      	add	r7, sp, #0
 802796c:	4603      	mov	r3, r0
 802796e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8027970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027974:	4618      	mov	r0, r3
 8027976:	f7ff ff1d 	bl	80277b4 <__NVIC_DisableIRQ>
}
 802797a:	bf00      	nop
 802797c:	3708      	adds	r7, #8
 802797e:	46bd      	mov	sp, r7
 8027980:	bd80      	pop	{r7, pc}

08027982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8027982:	b580      	push	{r7, lr}
 8027984:	b082      	sub	sp, #8
 8027986:	af00      	add	r7, sp, #0
 8027988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802798a:	6878      	ldr	r0, [r7, #4]
 802798c:	f7ff ff94 	bl	80278b8 <SysTick_Config>
 8027990:	4603      	mov	r3, r0
}
 8027992:	4618      	mov	r0, r3
 8027994:	3708      	adds	r7, #8
 8027996:	46bd      	mov	sp, r7
 8027998:	bd80      	pop	{r7, pc}

0802799a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802799a:	b580      	push	{r7, lr}
 802799c:	b084      	sub	sp, #16
 802799e:	af00      	add	r7, sp, #0
 80279a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80279a2:	687b      	ldr	r3, [r7, #4]
 80279a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80279a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80279a8:	f7ff fe54 	bl	8027654 <HAL_GetTick>
 80279ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80279ae:	687b      	ldr	r3, [r7, #4]
 80279b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80279b4:	b2db      	uxtb	r3, r3
 80279b6:	2b02      	cmp	r3, #2
 80279b8:	d008      	beq.n	80279cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	2280      	movs	r2, #128	; 0x80
 80279be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80279c0:	687b      	ldr	r3, [r7, #4]
 80279c2:	2200      	movs	r2, #0
 80279c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80279c8:	2301      	movs	r3, #1
 80279ca:	e052      	b.n	8027a72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80279cc:	687b      	ldr	r3, [r7, #4]
 80279ce:	681b      	ldr	r3, [r3, #0]
 80279d0:	681a      	ldr	r2, [r3, #0]
 80279d2:	687b      	ldr	r3, [r7, #4]
 80279d4:	681b      	ldr	r3, [r3, #0]
 80279d6:	f022 0216 	bic.w	r2, r2, #22
 80279da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	681b      	ldr	r3, [r3, #0]
 80279e0:	695a      	ldr	r2, [r3, #20]
 80279e2:	687b      	ldr	r3, [r7, #4]
 80279e4:	681b      	ldr	r3, [r3, #0]
 80279e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80279ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80279ec:	687b      	ldr	r3, [r7, #4]
 80279ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80279f0:	2b00      	cmp	r3, #0
 80279f2:	d103      	bne.n	80279fc <HAL_DMA_Abort+0x62>
 80279f4:	687b      	ldr	r3, [r7, #4]
 80279f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	d007      	beq.n	8027a0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80279fc:	687b      	ldr	r3, [r7, #4]
 80279fe:	681b      	ldr	r3, [r3, #0]
 8027a00:	681a      	ldr	r2, [r3, #0]
 8027a02:	687b      	ldr	r3, [r7, #4]
 8027a04:	681b      	ldr	r3, [r3, #0]
 8027a06:	f022 0208 	bic.w	r2, r2, #8
 8027a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027a0c:	687b      	ldr	r3, [r7, #4]
 8027a0e:	681b      	ldr	r3, [r3, #0]
 8027a10:	681a      	ldr	r2, [r3, #0]
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	681b      	ldr	r3, [r3, #0]
 8027a16:	f022 0201 	bic.w	r2, r2, #1
 8027a1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027a1c:	e013      	b.n	8027a46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8027a1e:	f7ff fe19 	bl	8027654 <HAL_GetTick>
 8027a22:	4602      	mov	r2, r0
 8027a24:	68bb      	ldr	r3, [r7, #8]
 8027a26:	1ad3      	subs	r3, r2, r3
 8027a28:	2b05      	cmp	r3, #5
 8027a2a:	d90c      	bls.n	8027a46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027a2c:	687b      	ldr	r3, [r7, #4]
 8027a2e:	2220      	movs	r2, #32
 8027a30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8027a32:	687b      	ldr	r3, [r7, #4]
 8027a34:	2203      	movs	r2, #3
 8027a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027a3a:	687b      	ldr	r3, [r7, #4]
 8027a3c:	2200      	movs	r2, #0
 8027a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8027a42:	2303      	movs	r3, #3
 8027a44:	e015      	b.n	8027a72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027a46:	687b      	ldr	r3, [r7, #4]
 8027a48:	681b      	ldr	r3, [r3, #0]
 8027a4a:	681b      	ldr	r3, [r3, #0]
 8027a4c:	f003 0301 	and.w	r3, r3, #1
 8027a50:	2b00      	cmp	r3, #0
 8027a52:	d1e4      	bne.n	8027a1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027a54:	687b      	ldr	r3, [r7, #4]
 8027a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027a58:	223f      	movs	r2, #63	; 0x3f
 8027a5a:	409a      	lsls	r2, r3
 8027a5c:	68fb      	ldr	r3, [r7, #12]
 8027a5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8027a60:	687b      	ldr	r3, [r7, #4]
 8027a62:	2201      	movs	r2, #1
 8027a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8027a68:	687b      	ldr	r3, [r7, #4]
 8027a6a:	2200      	movs	r2, #0
 8027a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8027a70:	2300      	movs	r3, #0
}
 8027a72:	4618      	mov	r0, r3
 8027a74:	3710      	adds	r7, #16
 8027a76:	46bd      	mov	sp, r7
 8027a78:	bd80      	pop	{r7, pc}

08027a7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8027a7a:	b480      	push	{r7}
 8027a7c:	b083      	sub	sp, #12
 8027a7e:	af00      	add	r7, sp, #0
 8027a80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8027a82:	687b      	ldr	r3, [r7, #4]
 8027a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027a88:	b2db      	uxtb	r3, r3
 8027a8a:	2b02      	cmp	r3, #2
 8027a8c:	d004      	beq.n	8027a98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8027a8e:	687b      	ldr	r3, [r7, #4]
 8027a90:	2280      	movs	r2, #128	; 0x80
 8027a92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8027a94:	2301      	movs	r3, #1
 8027a96:	e00c      	b.n	8027ab2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8027a98:	687b      	ldr	r3, [r7, #4]
 8027a9a:	2205      	movs	r2, #5
 8027a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027aa0:	687b      	ldr	r3, [r7, #4]
 8027aa2:	681b      	ldr	r3, [r3, #0]
 8027aa4:	681a      	ldr	r2, [r3, #0]
 8027aa6:	687b      	ldr	r3, [r7, #4]
 8027aa8:	681b      	ldr	r3, [r3, #0]
 8027aaa:	f022 0201 	bic.w	r2, r2, #1
 8027aae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8027ab0:	2300      	movs	r3, #0
}
 8027ab2:	4618      	mov	r0, r3
 8027ab4:	370c      	adds	r7, #12
 8027ab6:	46bd      	mov	sp, r7
 8027ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027abc:	4770      	bx	lr
	...

08027ac0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027ac0:	b580      	push	{r7, lr}
 8027ac2:	b086      	sub	sp, #24
 8027ac4:	af00      	add	r7, sp, #0
 8027ac6:	60f8      	str	r0, [r7, #12]
 8027ac8:	60b9      	str	r1, [r7, #8]
 8027aca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027ace:	2301      	movs	r3, #1
 8027ad0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027ad2:	4b23      	ldr	r3, [pc, #140]	; (8027b60 <HAL_FLASH_Program+0xa0>)
 8027ad4:	7e1b      	ldrb	r3, [r3, #24]
 8027ad6:	2b01      	cmp	r3, #1
 8027ad8:	d101      	bne.n	8027ade <HAL_FLASH_Program+0x1e>
 8027ada:	2302      	movs	r3, #2
 8027adc:	e03b      	b.n	8027b56 <HAL_FLASH_Program+0x96>
 8027ade:	4b20      	ldr	r3, [pc, #128]	; (8027b60 <HAL_FLASH_Program+0xa0>)
 8027ae0:	2201      	movs	r2, #1
 8027ae2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027ae4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027ae8:	f000 f924 	bl	8027d34 <FLASH_WaitForLastOperation>
 8027aec:	4603      	mov	r3, r0
 8027aee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027af0:	7dfb      	ldrb	r3, [r7, #23]
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d12b      	bne.n	8027b4e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027af6:	68fb      	ldr	r3, [r7, #12]
 8027af8:	2b00      	cmp	r3, #0
 8027afa:	d105      	bne.n	8027b08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027afc:	783b      	ldrb	r3, [r7, #0]
 8027afe:	4619      	mov	r1, r3
 8027b00:	68b8      	ldr	r0, [r7, #8]
 8027b02:	f000 f9cf 	bl	8027ea4 <FLASH_Program_Byte>
 8027b06:	e016      	b.n	8027b36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027b08:	68fb      	ldr	r3, [r7, #12]
 8027b0a:	2b01      	cmp	r3, #1
 8027b0c:	d105      	bne.n	8027b1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8027b0e:	883b      	ldrh	r3, [r7, #0]
 8027b10:	4619      	mov	r1, r3
 8027b12:	68b8      	ldr	r0, [r7, #8]
 8027b14:	f000 f9a2 	bl	8027e5c <FLASH_Program_HalfWord>
 8027b18:	e00d      	b.n	8027b36 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027b1a:	68fb      	ldr	r3, [r7, #12]
 8027b1c:	2b02      	cmp	r3, #2
 8027b1e:	d105      	bne.n	8027b2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027b20:	683b      	ldr	r3, [r7, #0]
 8027b22:	4619      	mov	r1, r3
 8027b24:	68b8      	ldr	r0, [r7, #8]
 8027b26:	f000 f977 	bl	8027e18 <FLASH_Program_Word>
 8027b2a:	e004      	b.n	8027b36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027b30:	68b8      	ldr	r0, [r7, #8]
 8027b32:	f000 f93f 	bl	8027db4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027b36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027b3a:	f000 f8fb 	bl	8027d34 <FLASH_WaitForLastOperation>
 8027b3e:	4603      	mov	r3, r0
 8027b40:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027b42:	4b08      	ldr	r3, [pc, #32]	; (8027b64 <HAL_FLASH_Program+0xa4>)
 8027b44:	691b      	ldr	r3, [r3, #16]
 8027b46:	4a07      	ldr	r2, [pc, #28]	; (8027b64 <HAL_FLASH_Program+0xa4>)
 8027b48:	f023 0301 	bic.w	r3, r3, #1
 8027b4c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027b4e:	4b04      	ldr	r3, [pc, #16]	; (8027b60 <HAL_FLASH_Program+0xa0>)
 8027b50:	2200      	movs	r2, #0
 8027b52:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8027b56:	4618      	mov	r0, r3
 8027b58:	3718      	adds	r7, #24
 8027b5a:	46bd      	mov	sp, r7
 8027b5c:	bd80      	pop	{r7, pc}
 8027b5e:	bf00      	nop
 8027b60:	200051fc 	.word	0x200051fc
 8027b64:	40023c00 	.word	0x40023c00

08027b68 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8027b68:	b580      	push	{r7, lr}
 8027b6a:	b082      	sub	sp, #8
 8027b6c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8027b6e:	2300      	movs	r3, #0
 8027b70:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027b72:	4b4b      	ldr	r3, [pc, #300]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027b74:	68db      	ldr	r3, [r3, #12]
 8027b76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027b7a:	2b00      	cmp	r3, #0
 8027b7c:	d020      	beq.n	8027bc0 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027b7e:	4b49      	ldr	r3, [pc, #292]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027b80:	781b      	ldrb	r3, [r3, #0]
 8027b82:	b2db      	uxtb	r3, r3
 8027b84:	2b01      	cmp	r3, #1
 8027b86:	d107      	bne.n	8027b98 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8027b88:	4b46      	ldr	r3, [pc, #280]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027b8a:	68db      	ldr	r3, [r3, #12]
 8027b8c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8027b8e:	4b45      	ldr	r3, [pc, #276]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027b90:	f04f 32ff 	mov.w	r2, #4294967295
 8027b94:	60da      	str	r2, [r3, #12]
 8027b96:	e00b      	b.n	8027bb0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8027b98:	4b42      	ldr	r3, [pc, #264]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027b9a:	781b      	ldrb	r3, [r3, #0]
 8027b9c:	b2db      	uxtb	r3, r3
 8027b9e:	2b02      	cmp	r3, #2
 8027ba0:	d103      	bne.n	8027baa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8027ba2:	4b40      	ldr	r3, [pc, #256]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027ba4:	691b      	ldr	r3, [r3, #16]
 8027ba6:	607b      	str	r3, [r7, #4]
 8027ba8:	e002      	b.n	8027bb0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8027baa:	4b3e      	ldr	r3, [pc, #248]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bac:	695b      	ldr	r3, [r3, #20]
 8027bae:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8027bb0:	f000 f99a 	bl	8027ee8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8027bb4:	6878      	ldr	r0, [r7, #4]
 8027bb6:	f000 f881 	bl	8027cbc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027bba:	4b3a      	ldr	r3, [pc, #232]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bbc:	2200      	movs	r2, #0
 8027bbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027bc0:	4b37      	ldr	r3, [pc, #220]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027bc2:	68db      	ldr	r3, [r3, #12]
 8027bc4:	f003 0301 	and.w	r3, r3, #1
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	d04a      	beq.n	8027c62 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027bcc:	4b34      	ldr	r3, [pc, #208]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027bce:	2201      	movs	r2, #1
 8027bd0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027bd2:	4b34      	ldr	r3, [pc, #208]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bd4:	781b      	ldrb	r3, [r3, #0]
 8027bd6:	b2db      	uxtb	r3, r3
 8027bd8:	2b01      	cmp	r3, #1
 8027bda:	d12d      	bne.n	8027c38 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8027bdc:	4b31      	ldr	r3, [pc, #196]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bde:	685b      	ldr	r3, [r3, #4]
 8027be0:	3b01      	subs	r3, #1
 8027be2:	4a30      	ldr	r2, [pc, #192]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027be4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8027be6:	4b2f      	ldr	r3, [pc, #188]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027be8:	685b      	ldr	r3, [r3, #4]
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d015      	beq.n	8027c1a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8027bee:	4b2d      	ldr	r3, [pc, #180]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bf0:	68db      	ldr	r3, [r3, #12]
 8027bf2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027bf4:	6878      	ldr	r0, [r7, #4]
 8027bf6:	f000 f857 	bl	8027ca8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8027bfa:	4b2a      	ldr	r3, [pc, #168]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027bfc:	68db      	ldr	r3, [r3, #12]
 8027bfe:	3301      	adds	r3, #1
 8027c00:	4a28      	ldr	r2, [pc, #160]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c02:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8027c04:	4b27      	ldr	r3, [pc, #156]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c06:	68db      	ldr	r3, [r3, #12]
 8027c08:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8027c0a:	4b26      	ldr	r3, [pc, #152]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c0c:	7a1b      	ldrb	r3, [r3, #8]
 8027c0e:	b2db      	uxtb	r3, r3
 8027c10:	4619      	mov	r1, r3
 8027c12:	6878      	ldr	r0, [r7, #4]
 8027c14:	f000 fa52 	bl	80280bc <FLASH_Erase_Sector>
 8027c18:	e023      	b.n	8027c62 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8027c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8027c1e:	607b      	str	r3, [r7, #4]
 8027c20:	4a20      	ldr	r2, [pc, #128]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c22:	687b      	ldr	r3, [r7, #4]
 8027c24:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027c26:	4b1f      	ldr	r3, [pc, #124]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c28:	2200      	movs	r2, #0
 8027c2a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027c2c:	f000 fa8e 	bl	802814c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027c30:	6878      	ldr	r0, [r7, #4]
 8027c32:	f000 f839 	bl	8027ca8 <HAL_FLASH_EndOfOperationCallback>
 8027c36:	e014      	b.n	8027c62 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8027c38:	4b1a      	ldr	r3, [pc, #104]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c3a:	781b      	ldrb	r3, [r3, #0]
 8027c3c:	b2db      	uxtb	r3, r3
 8027c3e:	2b02      	cmp	r3, #2
 8027c40:	d107      	bne.n	8027c52 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027c42:	f000 fa83 	bl	802814c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8027c46:	4b17      	ldr	r3, [pc, #92]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c48:	691b      	ldr	r3, [r3, #16]
 8027c4a:	4618      	mov	r0, r3
 8027c4c:	f000 f82c 	bl	8027ca8 <HAL_FLASH_EndOfOperationCallback>
 8027c50:	e004      	b.n	8027c5c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8027c52:	4b14      	ldr	r3, [pc, #80]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c54:	695b      	ldr	r3, [r3, #20]
 8027c56:	4618      	mov	r0, r3
 8027c58:	f000 f826 	bl	8027ca8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027c5c:	4b11      	ldr	r3, [pc, #68]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c5e:	2200      	movs	r2, #0
 8027c60:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8027c62:	4b10      	ldr	r3, [pc, #64]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c64:	781b      	ldrb	r3, [r3, #0]
 8027c66:	b2db      	uxtb	r3, r3
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	d114      	bne.n	8027c96 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8027c6c:	4b0c      	ldr	r3, [pc, #48]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c6e:	691b      	ldr	r3, [r3, #16]
 8027c70:	4a0b      	ldr	r2, [pc, #44]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027c76:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8027c78:	4b09      	ldr	r3, [pc, #36]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c7a:	691b      	ldr	r3, [r3, #16]
 8027c7c:	4a08      	ldr	r2, [pc, #32]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027c82:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8027c84:	4b06      	ldr	r3, [pc, #24]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c86:	691b      	ldr	r3, [r3, #16]
 8027c88:	4a05      	ldr	r2, [pc, #20]	; (8027ca0 <HAL_FLASH_IRQHandler+0x138>)
 8027c8a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8027c8e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8027c90:	4b04      	ldr	r3, [pc, #16]	; (8027ca4 <HAL_FLASH_IRQHandler+0x13c>)
 8027c92:	2200      	movs	r2, #0
 8027c94:	761a      	strb	r2, [r3, #24]
  }
}
 8027c96:	bf00      	nop
 8027c98:	3708      	adds	r7, #8
 8027c9a:	46bd      	mov	sp, r7
 8027c9c:	bd80      	pop	{r7, pc}
 8027c9e:	bf00      	nop
 8027ca0:	40023c00 	.word	0x40023c00
 8027ca4:	200051fc 	.word	0x200051fc

08027ca8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8027ca8:	b480      	push	{r7}
 8027caa:	b083      	sub	sp, #12
 8027cac:	af00      	add	r7, sp, #0
 8027cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8027cb0:	bf00      	nop
 8027cb2:	370c      	adds	r7, #12
 8027cb4:	46bd      	mov	sp, r7
 8027cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cba:	4770      	bx	lr

08027cbc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8027cbc:	b480      	push	{r7}
 8027cbe:	b083      	sub	sp, #12
 8027cc0:	af00      	add	r7, sp, #0
 8027cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8027cc4:	bf00      	nop
 8027cc6:	370c      	adds	r7, #12
 8027cc8:	46bd      	mov	sp, r7
 8027cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cce:	4770      	bx	lr

08027cd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027cd0:	b480      	push	{r7}
 8027cd2:	b083      	sub	sp, #12
 8027cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027cd6:	2300      	movs	r3, #0
 8027cd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027cda:	4b0b      	ldr	r3, [pc, #44]	; (8027d08 <HAL_FLASH_Unlock+0x38>)
 8027cdc:	691b      	ldr	r3, [r3, #16]
 8027cde:	2b00      	cmp	r3, #0
 8027ce0:	da0b      	bge.n	8027cfa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027ce2:	4b09      	ldr	r3, [pc, #36]	; (8027d08 <HAL_FLASH_Unlock+0x38>)
 8027ce4:	4a09      	ldr	r2, [pc, #36]	; (8027d0c <HAL_FLASH_Unlock+0x3c>)
 8027ce6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027ce8:	4b07      	ldr	r3, [pc, #28]	; (8027d08 <HAL_FLASH_Unlock+0x38>)
 8027cea:	4a09      	ldr	r2, [pc, #36]	; (8027d10 <HAL_FLASH_Unlock+0x40>)
 8027cec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027cee:	4b06      	ldr	r3, [pc, #24]	; (8027d08 <HAL_FLASH_Unlock+0x38>)
 8027cf0:	691b      	ldr	r3, [r3, #16]
 8027cf2:	2b00      	cmp	r3, #0
 8027cf4:	da01      	bge.n	8027cfa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027cf6:	2301      	movs	r3, #1
 8027cf8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8027cfc:	4618      	mov	r0, r3
 8027cfe:	370c      	adds	r7, #12
 8027d00:	46bd      	mov	sp, r7
 8027d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d06:	4770      	bx	lr
 8027d08:	40023c00 	.word	0x40023c00
 8027d0c:	45670123 	.word	0x45670123
 8027d10:	cdef89ab 	.word	0xcdef89ab

08027d14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027d14:	b480      	push	{r7}
 8027d16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027d18:	4b05      	ldr	r3, [pc, #20]	; (8027d30 <HAL_FLASH_Lock+0x1c>)
 8027d1a:	691b      	ldr	r3, [r3, #16]
 8027d1c:	4a04      	ldr	r2, [pc, #16]	; (8027d30 <HAL_FLASH_Lock+0x1c>)
 8027d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027d22:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027d24:	2300      	movs	r3, #0
}
 8027d26:	4618      	mov	r0, r3
 8027d28:	46bd      	mov	sp, r7
 8027d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d2e:	4770      	bx	lr
 8027d30:	40023c00 	.word	0x40023c00

08027d34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027d34:	b580      	push	{r7, lr}
 8027d36:	b084      	sub	sp, #16
 8027d38:	af00      	add	r7, sp, #0
 8027d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027d3c:	2300      	movs	r3, #0
 8027d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027d40:	4b1a      	ldr	r3, [pc, #104]	; (8027dac <FLASH_WaitForLastOperation+0x78>)
 8027d42:	2200      	movs	r2, #0
 8027d44:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027d46:	f7ff fc85 	bl	8027654 <HAL_GetTick>
 8027d4a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027d4c:	e010      	b.n	8027d70 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027d4e:	687b      	ldr	r3, [r7, #4]
 8027d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027d54:	d00c      	beq.n	8027d70 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8027d56:	687b      	ldr	r3, [r7, #4]
 8027d58:	2b00      	cmp	r3, #0
 8027d5a:	d007      	beq.n	8027d6c <FLASH_WaitForLastOperation+0x38>
 8027d5c:	f7ff fc7a 	bl	8027654 <HAL_GetTick>
 8027d60:	4602      	mov	r2, r0
 8027d62:	68fb      	ldr	r3, [r7, #12]
 8027d64:	1ad3      	subs	r3, r2, r3
 8027d66:	687a      	ldr	r2, [r7, #4]
 8027d68:	429a      	cmp	r2, r3
 8027d6a:	d201      	bcs.n	8027d70 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027d6c:	2303      	movs	r3, #3
 8027d6e:	e019      	b.n	8027da4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027d70:	4b0f      	ldr	r3, [pc, #60]	; (8027db0 <FLASH_WaitForLastOperation+0x7c>)
 8027d72:	68db      	ldr	r3, [r3, #12]
 8027d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	d1e8      	bne.n	8027d4e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027d7c:	4b0c      	ldr	r3, [pc, #48]	; (8027db0 <FLASH_WaitForLastOperation+0x7c>)
 8027d7e:	68db      	ldr	r3, [r3, #12]
 8027d80:	f003 0301 	and.w	r3, r3, #1
 8027d84:	2b00      	cmp	r3, #0
 8027d86:	d002      	beq.n	8027d8e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027d88:	4b09      	ldr	r3, [pc, #36]	; (8027db0 <FLASH_WaitForLastOperation+0x7c>)
 8027d8a:	2201      	movs	r2, #1
 8027d8c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027d8e:	4b08      	ldr	r3, [pc, #32]	; (8027db0 <FLASH_WaitForLastOperation+0x7c>)
 8027d90:	68db      	ldr	r3, [r3, #12]
 8027d92:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027d96:	2b00      	cmp	r3, #0
 8027d98:	d003      	beq.n	8027da2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027d9a:	f000 f8a5 	bl	8027ee8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027d9e:	2301      	movs	r3, #1
 8027da0:	e000      	b.n	8027da4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027da2:	2300      	movs	r3, #0
  
}  
 8027da4:	4618      	mov	r0, r3
 8027da6:	3710      	adds	r7, #16
 8027da8:	46bd      	mov	sp, r7
 8027daa:	bd80      	pop	{r7, pc}
 8027dac:	200051fc 	.word	0x200051fc
 8027db0:	40023c00 	.word	0x40023c00

08027db4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027db4:	b480      	push	{r7}
 8027db6:	b085      	sub	sp, #20
 8027db8:	af00      	add	r7, sp, #0
 8027dba:	60f8      	str	r0, [r7, #12]
 8027dbc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027dc0:	4b14      	ldr	r3, [pc, #80]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dc2:	691b      	ldr	r3, [r3, #16]
 8027dc4:	4a13      	ldr	r2, [pc, #76]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027dca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027dcc:	4b11      	ldr	r3, [pc, #68]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dce:	691b      	ldr	r3, [r3, #16]
 8027dd0:	4a10      	ldr	r2, [pc, #64]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dd2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027dd8:	4b0e      	ldr	r3, [pc, #56]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dda:	691b      	ldr	r3, [r3, #16]
 8027ddc:	4a0d      	ldr	r2, [pc, #52]	; (8027e14 <FLASH_Program_DoubleWord+0x60>)
 8027dde:	f043 0301 	orr.w	r3, r3, #1
 8027de2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027de4:	68fb      	ldr	r3, [r7, #12]
 8027de6:	683a      	ldr	r2, [r7, #0]
 8027de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8027dea:	f3bf 8f6f 	isb	sy
}
 8027dee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8027df4:	f04f 0200 	mov.w	r2, #0
 8027df8:	f04f 0300 	mov.w	r3, #0
 8027dfc:	000a      	movs	r2, r1
 8027dfe:	2300      	movs	r3, #0
 8027e00:	68f9      	ldr	r1, [r7, #12]
 8027e02:	3104      	adds	r1, #4
 8027e04:	4613      	mov	r3, r2
 8027e06:	600b      	str	r3, [r1, #0]
}
 8027e08:	bf00      	nop
 8027e0a:	3714      	adds	r7, #20
 8027e0c:	46bd      	mov	sp, r7
 8027e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e12:	4770      	bx	lr
 8027e14:	40023c00 	.word	0x40023c00

08027e18 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027e18:	b480      	push	{r7}
 8027e1a:	b083      	sub	sp, #12
 8027e1c:	af00      	add	r7, sp, #0
 8027e1e:	6078      	str	r0, [r7, #4]
 8027e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027e22:	4b0d      	ldr	r3, [pc, #52]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e24:	691b      	ldr	r3, [r3, #16]
 8027e26:	4a0c      	ldr	r2, [pc, #48]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027e2e:	4b0a      	ldr	r3, [pc, #40]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e30:	691b      	ldr	r3, [r3, #16]
 8027e32:	4a09      	ldr	r2, [pc, #36]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027e38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027e3a:	4b07      	ldr	r3, [pc, #28]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e3c:	691b      	ldr	r3, [r3, #16]
 8027e3e:	4a06      	ldr	r2, [pc, #24]	; (8027e58 <FLASH_Program_Word+0x40>)
 8027e40:	f043 0301 	orr.w	r3, r3, #1
 8027e44:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027e46:	687b      	ldr	r3, [r7, #4]
 8027e48:	683a      	ldr	r2, [r7, #0]
 8027e4a:	601a      	str	r2, [r3, #0]
}
 8027e4c:	bf00      	nop
 8027e4e:	370c      	adds	r7, #12
 8027e50:	46bd      	mov	sp, r7
 8027e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e56:	4770      	bx	lr
 8027e58:	40023c00 	.word	0x40023c00

08027e5c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027e5c:	b480      	push	{r7}
 8027e5e:	b083      	sub	sp, #12
 8027e60:	af00      	add	r7, sp, #0
 8027e62:	6078      	str	r0, [r7, #4]
 8027e64:	460b      	mov	r3, r1
 8027e66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027e68:	4b0d      	ldr	r3, [pc, #52]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e6a:	691b      	ldr	r3, [r3, #16]
 8027e6c:	4a0c      	ldr	r2, [pc, #48]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027e72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027e74:	4b0a      	ldr	r3, [pc, #40]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e76:	691b      	ldr	r3, [r3, #16]
 8027e78:	4a09      	ldr	r2, [pc, #36]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027e80:	4b07      	ldr	r3, [pc, #28]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e82:	691b      	ldr	r3, [r3, #16]
 8027e84:	4a06      	ldr	r2, [pc, #24]	; (8027ea0 <FLASH_Program_HalfWord+0x44>)
 8027e86:	f043 0301 	orr.w	r3, r3, #1
 8027e8a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	887a      	ldrh	r2, [r7, #2]
 8027e90:	801a      	strh	r2, [r3, #0]
}
 8027e92:	bf00      	nop
 8027e94:	370c      	adds	r7, #12
 8027e96:	46bd      	mov	sp, r7
 8027e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e9c:	4770      	bx	lr
 8027e9e:	bf00      	nop
 8027ea0:	40023c00 	.word	0x40023c00

08027ea4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027ea4:	b480      	push	{r7}
 8027ea6:	b083      	sub	sp, #12
 8027ea8:	af00      	add	r7, sp, #0
 8027eaa:	6078      	str	r0, [r7, #4]
 8027eac:	460b      	mov	r3, r1
 8027eae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027eb0:	4b0c      	ldr	r3, [pc, #48]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027eb2:	691b      	ldr	r3, [r3, #16]
 8027eb4:	4a0b      	ldr	r2, [pc, #44]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027ebc:	4b09      	ldr	r3, [pc, #36]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027ebe:	4a09      	ldr	r2, [pc, #36]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027ec0:	691b      	ldr	r3, [r3, #16]
 8027ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027ec4:	4b07      	ldr	r3, [pc, #28]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027ec6:	691b      	ldr	r3, [r3, #16]
 8027ec8:	4a06      	ldr	r2, [pc, #24]	; (8027ee4 <FLASH_Program_Byte+0x40>)
 8027eca:	f043 0301 	orr.w	r3, r3, #1
 8027ece:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	78fa      	ldrb	r2, [r7, #3]
 8027ed4:	701a      	strb	r2, [r3, #0]
}
 8027ed6:	bf00      	nop
 8027ed8:	370c      	adds	r7, #12
 8027eda:	46bd      	mov	sp, r7
 8027edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ee0:	4770      	bx	lr
 8027ee2:	bf00      	nop
 8027ee4:	40023c00 	.word	0x40023c00

08027ee8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027ee8:	b480      	push	{r7}
 8027eea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027eec:	4b27      	ldr	r3, [pc, #156]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027eee:	68db      	ldr	r3, [r3, #12]
 8027ef0:	f003 0310 	and.w	r3, r3, #16
 8027ef4:	2b00      	cmp	r3, #0
 8027ef6:	d008      	beq.n	8027f0a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027ef8:	4b25      	ldr	r3, [pc, #148]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027efa:	69db      	ldr	r3, [r3, #28]
 8027efc:	f043 0310 	orr.w	r3, r3, #16
 8027f00:	4a23      	ldr	r2, [pc, #140]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f02:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027f04:	4b21      	ldr	r3, [pc, #132]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f06:	2210      	movs	r2, #16
 8027f08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027f0a:	4b20      	ldr	r3, [pc, #128]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f0c:	68db      	ldr	r3, [r3, #12]
 8027f0e:	f003 0320 	and.w	r3, r3, #32
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d008      	beq.n	8027f28 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027f16:	4b1e      	ldr	r3, [pc, #120]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f18:	69db      	ldr	r3, [r3, #28]
 8027f1a:	f043 0308 	orr.w	r3, r3, #8
 8027f1e:	4a1c      	ldr	r2, [pc, #112]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f20:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027f22:	4b1a      	ldr	r3, [pc, #104]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f24:	2220      	movs	r2, #32
 8027f26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027f28:	4b18      	ldr	r3, [pc, #96]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f2a:	68db      	ldr	r3, [r3, #12]
 8027f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027f30:	2b00      	cmp	r3, #0
 8027f32:	d008      	beq.n	8027f46 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027f34:	4b16      	ldr	r3, [pc, #88]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f36:	69db      	ldr	r3, [r3, #28]
 8027f38:	f043 0304 	orr.w	r3, r3, #4
 8027f3c:	4a14      	ldr	r2, [pc, #80]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027f40:	4b12      	ldr	r3, [pc, #72]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f42:	2240      	movs	r2, #64	; 0x40
 8027f44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027f46:	4b11      	ldr	r3, [pc, #68]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f48:	68db      	ldr	r3, [r3, #12]
 8027f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027f4e:	2b00      	cmp	r3, #0
 8027f50:	d008      	beq.n	8027f64 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027f52:	4b0f      	ldr	r3, [pc, #60]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f54:	69db      	ldr	r3, [r3, #28]
 8027f56:	f043 0302 	orr.w	r3, r3, #2
 8027f5a:	4a0d      	ldr	r2, [pc, #52]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f5c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8027f5e:	4b0b      	ldr	r3, [pc, #44]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f60:	2280      	movs	r2, #128	; 0x80
 8027f62:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027f64:	4b09      	ldr	r3, [pc, #36]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f66:	68db      	ldr	r3, [r3, #12]
 8027f68:	f003 0302 	and.w	r3, r3, #2
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	d008      	beq.n	8027f82 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027f70:	4b07      	ldr	r3, [pc, #28]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f72:	69db      	ldr	r3, [r3, #28]
 8027f74:	f043 0320 	orr.w	r3, r3, #32
 8027f78:	4a05      	ldr	r2, [pc, #20]	; (8027f90 <FLASH_SetErrorCode+0xa8>)
 8027f7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8027f7c:	4b03      	ldr	r3, [pc, #12]	; (8027f8c <FLASH_SetErrorCode+0xa4>)
 8027f7e:	2202      	movs	r2, #2
 8027f80:	60da      	str	r2, [r3, #12]
  }
}
 8027f82:	bf00      	nop
 8027f84:	46bd      	mov	sp, r7
 8027f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f8a:	4770      	bx	lr
 8027f8c:	40023c00 	.word	0x40023c00
 8027f90:	200051fc 	.word	0x200051fc

08027f94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027f94:	b580      	push	{r7, lr}
 8027f96:	b084      	sub	sp, #16
 8027f98:	af00      	add	r7, sp, #0
 8027f9a:	6078      	str	r0, [r7, #4]
 8027f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027f9e:	2301      	movs	r3, #1
 8027fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027fa2:	2300      	movs	r3, #0
 8027fa4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027fa6:	4b31      	ldr	r3, [pc, #196]	; (802806c <HAL_FLASHEx_Erase+0xd8>)
 8027fa8:	7e1b      	ldrb	r3, [r3, #24]
 8027faa:	2b01      	cmp	r3, #1
 8027fac:	d101      	bne.n	8027fb2 <HAL_FLASHEx_Erase+0x1e>
 8027fae:	2302      	movs	r3, #2
 8027fb0:	e058      	b.n	8028064 <HAL_FLASHEx_Erase+0xd0>
 8027fb2:	4b2e      	ldr	r3, [pc, #184]	; (802806c <HAL_FLASHEx_Erase+0xd8>)
 8027fb4:	2201      	movs	r2, #1
 8027fb6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027fbc:	f7ff feba 	bl	8027d34 <FLASH_WaitForLastOperation>
 8027fc0:	4603      	mov	r3, r0
 8027fc2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8027fc4:	7bfb      	ldrb	r3, [r7, #15]
 8027fc6:	2b00      	cmp	r3, #0
 8027fc8:	d148      	bne.n	802805c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8027fca:	683b      	ldr	r3, [r7, #0]
 8027fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8027fd0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	2b01      	cmp	r3, #1
 8027fd8:	d115      	bne.n	8028006 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8027fda:	687b      	ldr	r3, [r7, #4]
 8027fdc:	691b      	ldr	r3, [r3, #16]
 8027fde:	b2da      	uxtb	r2, r3
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	685b      	ldr	r3, [r3, #4]
 8027fe4:	4619      	mov	r1, r3
 8027fe6:	4610      	mov	r0, r2
 8027fe8:	f000 f844 	bl	8028074 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027fec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027ff0:	f7ff fea0 	bl	8027d34 <FLASH_WaitForLastOperation>
 8027ff4:	4603      	mov	r3, r0
 8027ff6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027ff8:	4b1d      	ldr	r3, [pc, #116]	; (8028070 <HAL_FLASHEx_Erase+0xdc>)
 8027ffa:	691b      	ldr	r3, [r3, #16]
 8027ffc:	4a1c      	ldr	r2, [pc, #112]	; (8028070 <HAL_FLASHEx_Erase+0xdc>)
 8027ffe:	f023 0304 	bic.w	r3, r3, #4
 8028002:	6113      	str	r3, [r2, #16]
 8028004:	e028      	b.n	8028058 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8028006:	687b      	ldr	r3, [r7, #4]
 8028008:	689b      	ldr	r3, [r3, #8]
 802800a:	60bb      	str	r3, [r7, #8]
 802800c:	e01c      	b.n	8028048 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	691b      	ldr	r3, [r3, #16]
 8028012:	b2db      	uxtb	r3, r3
 8028014:	4619      	mov	r1, r3
 8028016:	68b8      	ldr	r0, [r7, #8]
 8028018:	f000 f850 	bl	80280bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802801c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028020:	f7ff fe88 	bl	8027d34 <FLASH_WaitForLastOperation>
 8028024:	4603      	mov	r3, r0
 8028026:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8028028:	4b11      	ldr	r3, [pc, #68]	; (8028070 <HAL_FLASHEx_Erase+0xdc>)
 802802a:	691b      	ldr	r3, [r3, #16]
 802802c:	4a10      	ldr	r2, [pc, #64]	; (8028070 <HAL_FLASHEx_Erase+0xdc>)
 802802e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8028032:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8028034:	7bfb      	ldrb	r3, [r7, #15]
 8028036:	2b00      	cmp	r3, #0
 8028038:	d003      	beq.n	8028042 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802803a:	683b      	ldr	r3, [r7, #0]
 802803c:	68ba      	ldr	r2, [r7, #8]
 802803e:	601a      	str	r2, [r3, #0]
          break;
 8028040:	e00a      	b.n	8028058 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8028042:	68bb      	ldr	r3, [r7, #8]
 8028044:	3301      	adds	r3, #1
 8028046:	60bb      	str	r3, [r7, #8]
 8028048:	687b      	ldr	r3, [r7, #4]
 802804a:	68da      	ldr	r2, [r3, #12]
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	689b      	ldr	r3, [r3, #8]
 8028050:	4413      	add	r3, r2
 8028052:	68ba      	ldr	r2, [r7, #8]
 8028054:	429a      	cmp	r2, r3
 8028056:	d3da      	bcc.n	802800e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8028058:	f000 f878 	bl	802814c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802805c:	4b03      	ldr	r3, [pc, #12]	; (802806c <HAL_FLASHEx_Erase+0xd8>)
 802805e:	2200      	movs	r2, #0
 8028060:	761a      	strb	r2, [r3, #24]

  return status;
 8028062:	7bfb      	ldrb	r3, [r7, #15]
}
 8028064:	4618      	mov	r0, r3
 8028066:	3710      	adds	r7, #16
 8028068:	46bd      	mov	sp, r7
 802806a:	bd80      	pop	{r7, pc}
 802806c:	200051fc 	.word	0x200051fc
 8028070:	40023c00 	.word	0x40023c00

08028074 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8028074:	b480      	push	{r7}
 8028076:	b083      	sub	sp, #12
 8028078:	af00      	add	r7, sp, #0
 802807a:	4603      	mov	r3, r0
 802807c:	6039      	str	r1, [r7, #0]
 802807e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028080:	4b0d      	ldr	r3, [pc, #52]	; (80280b8 <FLASH_MassErase+0x44>)
 8028082:	691b      	ldr	r3, [r3, #16]
 8028084:	4a0c      	ldr	r2, [pc, #48]	; (80280b8 <FLASH_MassErase+0x44>)
 8028086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802808a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802808c:	4b0a      	ldr	r3, [pc, #40]	; (80280b8 <FLASH_MassErase+0x44>)
 802808e:	691b      	ldr	r3, [r3, #16]
 8028090:	4a09      	ldr	r2, [pc, #36]	; (80280b8 <FLASH_MassErase+0x44>)
 8028092:	f043 0304 	orr.w	r3, r3, #4
 8028096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8028098:	4b07      	ldr	r3, [pc, #28]	; (80280b8 <FLASH_MassErase+0x44>)
 802809a:	691a      	ldr	r2, [r3, #16]
 802809c:	79fb      	ldrb	r3, [r7, #7]
 802809e:	021b      	lsls	r3, r3, #8
 80280a0:	4313      	orrs	r3, r2
 80280a2:	4a05      	ldr	r2, [pc, #20]	; (80280b8 <FLASH_MassErase+0x44>)
 80280a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280a8:	6113      	str	r3, [r2, #16]
}
 80280aa:	bf00      	nop
 80280ac:	370c      	adds	r7, #12
 80280ae:	46bd      	mov	sp, r7
 80280b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280b4:	4770      	bx	lr
 80280b6:	bf00      	nop
 80280b8:	40023c00 	.word	0x40023c00

080280bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80280bc:	b480      	push	{r7}
 80280be:	b085      	sub	sp, #20
 80280c0:	af00      	add	r7, sp, #0
 80280c2:	6078      	str	r0, [r7, #4]
 80280c4:	460b      	mov	r3, r1
 80280c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80280c8:	2300      	movs	r3, #0
 80280ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80280cc:	78fb      	ldrb	r3, [r7, #3]
 80280ce:	2b00      	cmp	r3, #0
 80280d0:	d102      	bne.n	80280d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80280d2:	2300      	movs	r3, #0
 80280d4:	60fb      	str	r3, [r7, #12]
 80280d6:	e010      	b.n	80280fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80280d8:	78fb      	ldrb	r3, [r7, #3]
 80280da:	2b01      	cmp	r3, #1
 80280dc:	d103      	bne.n	80280e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80280de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80280e2:	60fb      	str	r3, [r7, #12]
 80280e4:	e009      	b.n	80280fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80280e6:	78fb      	ldrb	r3, [r7, #3]
 80280e8:	2b02      	cmp	r3, #2
 80280ea:	d103      	bne.n	80280f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80280ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80280f0:	60fb      	str	r3, [r7, #12]
 80280f2:	e002      	b.n	80280fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80280f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80280f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80280fa:	4b13      	ldr	r3, [pc, #76]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 80280fc:	691b      	ldr	r3, [r3, #16]
 80280fe:	4a12      	ldr	r2, [pc, #72]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8028106:	4b10      	ldr	r3, [pc, #64]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028108:	691a      	ldr	r2, [r3, #16]
 802810a:	490f      	ldr	r1, [pc, #60]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 802810c:	68fb      	ldr	r3, [r7, #12]
 802810e:	4313      	orrs	r3, r2
 8028110:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8028112:	4b0d      	ldr	r3, [pc, #52]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028114:	691b      	ldr	r3, [r3, #16]
 8028116:	4a0c      	ldr	r2, [pc, #48]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028118:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802811c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802811e:	4b0a      	ldr	r3, [pc, #40]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028120:	691a      	ldr	r2, [r3, #16]
 8028122:	687b      	ldr	r3, [r7, #4]
 8028124:	00db      	lsls	r3, r3, #3
 8028126:	4313      	orrs	r3, r2
 8028128:	4a07      	ldr	r2, [pc, #28]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 802812a:	f043 0302 	orr.w	r3, r3, #2
 802812e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8028130:	4b05      	ldr	r3, [pc, #20]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028132:	691b      	ldr	r3, [r3, #16]
 8028134:	4a04      	ldr	r2, [pc, #16]	; (8028148 <FLASH_Erase_Sector+0x8c>)
 8028136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802813a:	6113      	str	r3, [r2, #16]
}
 802813c:	bf00      	nop
 802813e:	3714      	adds	r7, #20
 8028140:	46bd      	mov	sp, r7
 8028142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028146:	4770      	bx	lr
 8028148:	40023c00 	.word	0x40023c00

0802814c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 802814c:	b480      	push	{r7}
 802814e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8028150:	4b20      	ldr	r3, [pc, #128]	; (80281d4 <FLASH_FlushCaches+0x88>)
 8028152:	681b      	ldr	r3, [r3, #0]
 8028154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028158:	2b00      	cmp	r3, #0
 802815a:	d017      	beq.n	802818c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802815c:	4b1d      	ldr	r3, [pc, #116]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802815e:	681b      	ldr	r3, [r3, #0]
 8028160:	4a1c      	ldr	r2, [pc, #112]	; (80281d4 <FLASH_FlushCaches+0x88>)
 8028162:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8028166:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8028168:	4b1a      	ldr	r3, [pc, #104]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802816a:	681b      	ldr	r3, [r3, #0]
 802816c:	4a19      	ldr	r2, [pc, #100]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802816e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8028172:	6013      	str	r3, [r2, #0]
 8028174:	4b17      	ldr	r3, [pc, #92]	; (80281d4 <FLASH_FlushCaches+0x88>)
 8028176:	681b      	ldr	r3, [r3, #0]
 8028178:	4a16      	ldr	r2, [pc, #88]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802817a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802817e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8028180:	4b14      	ldr	r3, [pc, #80]	; (80281d4 <FLASH_FlushCaches+0x88>)
 8028182:	681b      	ldr	r3, [r3, #0]
 8028184:	4a13      	ldr	r2, [pc, #76]	; (80281d4 <FLASH_FlushCaches+0x88>)
 8028186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802818a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802818c:	4b11      	ldr	r3, [pc, #68]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802818e:	681b      	ldr	r3, [r3, #0]
 8028190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028194:	2b00      	cmp	r3, #0
 8028196:	d017      	beq.n	80281c8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8028198:	4b0e      	ldr	r3, [pc, #56]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802819a:	681b      	ldr	r3, [r3, #0]
 802819c:	4a0d      	ldr	r2, [pc, #52]	; (80281d4 <FLASH_FlushCaches+0x88>)
 802819e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80281a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80281a4:	4b0b      	ldr	r3, [pc, #44]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281a6:	681b      	ldr	r3, [r3, #0]
 80281a8:	4a0a      	ldr	r2, [pc, #40]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80281ae:	6013      	str	r3, [r2, #0]
 80281b0:	4b08      	ldr	r3, [pc, #32]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281b2:	681b      	ldr	r3, [r3, #0]
 80281b4:	4a07      	ldr	r2, [pc, #28]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80281ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80281bc:	4b05      	ldr	r3, [pc, #20]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281be:	681b      	ldr	r3, [r3, #0]
 80281c0:	4a04      	ldr	r2, [pc, #16]	; (80281d4 <FLASH_FlushCaches+0x88>)
 80281c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80281c6:	6013      	str	r3, [r2, #0]
  }
}
 80281c8:	bf00      	nop
 80281ca:	46bd      	mov	sp, r7
 80281cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281d0:	4770      	bx	lr
 80281d2:	bf00      	nop
 80281d4:	40023c00 	.word	0x40023c00

080281d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80281d8:	b480      	push	{r7}
 80281da:	b089      	sub	sp, #36	; 0x24
 80281dc:	af00      	add	r7, sp, #0
 80281de:	6078      	str	r0, [r7, #4]
 80281e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80281e2:	2300      	movs	r3, #0
 80281e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80281e6:	2300      	movs	r3, #0
 80281e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80281ea:	2300      	movs	r3, #0
 80281ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80281ee:	2300      	movs	r3, #0
 80281f0:	61fb      	str	r3, [r7, #28]
 80281f2:	e16b      	b.n	80284cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80281f4:	2201      	movs	r2, #1
 80281f6:	69fb      	ldr	r3, [r7, #28]
 80281f8:	fa02 f303 	lsl.w	r3, r2, r3
 80281fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80281fe:	683b      	ldr	r3, [r7, #0]
 8028200:	681b      	ldr	r3, [r3, #0]
 8028202:	697a      	ldr	r2, [r7, #20]
 8028204:	4013      	ands	r3, r2
 8028206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8028208:	693a      	ldr	r2, [r7, #16]
 802820a:	697b      	ldr	r3, [r7, #20]
 802820c:	429a      	cmp	r2, r3
 802820e:	f040 815a 	bne.w	80284c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028212:	683b      	ldr	r3, [r7, #0]
 8028214:	685b      	ldr	r3, [r3, #4]
 8028216:	f003 0303 	and.w	r3, r3, #3
 802821a:	2b01      	cmp	r3, #1
 802821c:	d005      	beq.n	802822a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802821e:	683b      	ldr	r3, [r7, #0]
 8028220:	685b      	ldr	r3, [r3, #4]
 8028222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028226:	2b02      	cmp	r3, #2
 8028228:	d130      	bne.n	802828c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802822a:	687b      	ldr	r3, [r7, #4]
 802822c:	689b      	ldr	r3, [r3, #8]
 802822e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028230:	69fb      	ldr	r3, [r7, #28]
 8028232:	005b      	lsls	r3, r3, #1
 8028234:	2203      	movs	r2, #3
 8028236:	fa02 f303 	lsl.w	r3, r2, r3
 802823a:	43db      	mvns	r3, r3
 802823c:	69ba      	ldr	r2, [r7, #24]
 802823e:	4013      	ands	r3, r2
 8028240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8028242:	683b      	ldr	r3, [r7, #0]
 8028244:	68da      	ldr	r2, [r3, #12]
 8028246:	69fb      	ldr	r3, [r7, #28]
 8028248:	005b      	lsls	r3, r3, #1
 802824a:	fa02 f303 	lsl.w	r3, r2, r3
 802824e:	69ba      	ldr	r2, [r7, #24]
 8028250:	4313      	orrs	r3, r2
 8028252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8028254:	687b      	ldr	r3, [r7, #4]
 8028256:	69ba      	ldr	r2, [r7, #24]
 8028258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802825a:	687b      	ldr	r3, [r7, #4]
 802825c:	685b      	ldr	r3, [r3, #4]
 802825e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028260:	2201      	movs	r2, #1
 8028262:	69fb      	ldr	r3, [r7, #28]
 8028264:	fa02 f303 	lsl.w	r3, r2, r3
 8028268:	43db      	mvns	r3, r3
 802826a:	69ba      	ldr	r2, [r7, #24]
 802826c:	4013      	ands	r3, r2
 802826e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8028270:	683b      	ldr	r3, [r7, #0]
 8028272:	685b      	ldr	r3, [r3, #4]
 8028274:	091b      	lsrs	r3, r3, #4
 8028276:	f003 0201 	and.w	r2, r3, #1
 802827a:	69fb      	ldr	r3, [r7, #28]
 802827c:	fa02 f303 	lsl.w	r3, r2, r3
 8028280:	69ba      	ldr	r2, [r7, #24]
 8028282:	4313      	orrs	r3, r2
 8028284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8028286:	687b      	ldr	r3, [r7, #4]
 8028288:	69ba      	ldr	r2, [r7, #24]
 802828a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802828c:	683b      	ldr	r3, [r7, #0]
 802828e:	685b      	ldr	r3, [r3, #4]
 8028290:	f003 0303 	and.w	r3, r3, #3
 8028294:	2b03      	cmp	r3, #3
 8028296:	d017      	beq.n	80282c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8028298:	687b      	ldr	r3, [r7, #4]
 802829a:	68db      	ldr	r3, [r3, #12]
 802829c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802829e:	69fb      	ldr	r3, [r7, #28]
 80282a0:	005b      	lsls	r3, r3, #1
 80282a2:	2203      	movs	r2, #3
 80282a4:	fa02 f303 	lsl.w	r3, r2, r3
 80282a8:	43db      	mvns	r3, r3
 80282aa:	69ba      	ldr	r2, [r7, #24]
 80282ac:	4013      	ands	r3, r2
 80282ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80282b0:	683b      	ldr	r3, [r7, #0]
 80282b2:	689a      	ldr	r2, [r3, #8]
 80282b4:	69fb      	ldr	r3, [r7, #28]
 80282b6:	005b      	lsls	r3, r3, #1
 80282b8:	fa02 f303 	lsl.w	r3, r2, r3
 80282bc:	69ba      	ldr	r2, [r7, #24]
 80282be:	4313      	orrs	r3, r2
 80282c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80282c2:	687b      	ldr	r3, [r7, #4]
 80282c4:	69ba      	ldr	r2, [r7, #24]
 80282c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80282c8:	683b      	ldr	r3, [r7, #0]
 80282ca:	685b      	ldr	r3, [r3, #4]
 80282cc:	f003 0303 	and.w	r3, r3, #3
 80282d0:	2b02      	cmp	r3, #2
 80282d2:	d123      	bne.n	802831c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80282d4:	69fb      	ldr	r3, [r7, #28]
 80282d6:	08da      	lsrs	r2, r3, #3
 80282d8:	687b      	ldr	r3, [r7, #4]
 80282da:	3208      	adds	r2, #8
 80282dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80282e2:	69fb      	ldr	r3, [r7, #28]
 80282e4:	f003 0307 	and.w	r3, r3, #7
 80282e8:	009b      	lsls	r3, r3, #2
 80282ea:	220f      	movs	r2, #15
 80282ec:	fa02 f303 	lsl.w	r3, r2, r3
 80282f0:	43db      	mvns	r3, r3
 80282f2:	69ba      	ldr	r2, [r7, #24]
 80282f4:	4013      	ands	r3, r2
 80282f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80282f8:	683b      	ldr	r3, [r7, #0]
 80282fa:	691a      	ldr	r2, [r3, #16]
 80282fc:	69fb      	ldr	r3, [r7, #28]
 80282fe:	f003 0307 	and.w	r3, r3, #7
 8028302:	009b      	lsls	r3, r3, #2
 8028304:	fa02 f303 	lsl.w	r3, r2, r3
 8028308:	69ba      	ldr	r2, [r7, #24]
 802830a:	4313      	orrs	r3, r2
 802830c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802830e:	69fb      	ldr	r3, [r7, #28]
 8028310:	08da      	lsrs	r2, r3, #3
 8028312:	687b      	ldr	r3, [r7, #4]
 8028314:	3208      	adds	r2, #8
 8028316:	69b9      	ldr	r1, [r7, #24]
 8028318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802831c:	687b      	ldr	r3, [r7, #4]
 802831e:	681b      	ldr	r3, [r3, #0]
 8028320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028322:	69fb      	ldr	r3, [r7, #28]
 8028324:	005b      	lsls	r3, r3, #1
 8028326:	2203      	movs	r2, #3
 8028328:	fa02 f303 	lsl.w	r3, r2, r3
 802832c:	43db      	mvns	r3, r3
 802832e:	69ba      	ldr	r2, [r7, #24]
 8028330:	4013      	ands	r3, r2
 8028332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8028334:	683b      	ldr	r3, [r7, #0]
 8028336:	685b      	ldr	r3, [r3, #4]
 8028338:	f003 0203 	and.w	r2, r3, #3
 802833c:	69fb      	ldr	r3, [r7, #28]
 802833e:	005b      	lsls	r3, r3, #1
 8028340:	fa02 f303 	lsl.w	r3, r2, r3
 8028344:	69ba      	ldr	r2, [r7, #24]
 8028346:	4313      	orrs	r3, r2
 8028348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802834a:	687b      	ldr	r3, [r7, #4]
 802834c:	69ba      	ldr	r2, [r7, #24]
 802834e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8028350:	683b      	ldr	r3, [r7, #0]
 8028352:	685b      	ldr	r3, [r3, #4]
 8028354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8028358:	2b00      	cmp	r3, #0
 802835a:	f000 80b4 	beq.w	80284c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802835e:	2300      	movs	r3, #0
 8028360:	60fb      	str	r3, [r7, #12]
 8028362:	4b60      	ldr	r3, [pc, #384]	; (80284e4 <HAL_GPIO_Init+0x30c>)
 8028364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028366:	4a5f      	ldr	r2, [pc, #380]	; (80284e4 <HAL_GPIO_Init+0x30c>)
 8028368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802836c:	6453      	str	r3, [r2, #68]	; 0x44
 802836e:	4b5d      	ldr	r3, [pc, #372]	; (80284e4 <HAL_GPIO_Init+0x30c>)
 8028370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028376:	60fb      	str	r3, [r7, #12]
 8028378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802837a:	4a5b      	ldr	r2, [pc, #364]	; (80284e8 <HAL_GPIO_Init+0x310>)
 802837c:	69fb      	ldr	r3, [r7, #28]
 802837e:	089b      	lsrs	r3, r3, #2
 8028380:	3302      	adds	r3, #2
 8028382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028388:	69fb      	ldr	r3, [r7, #28]
 802838a:	f003 0303 	and.w	r3, r3, #3
 802838e:	009b      	lsls	r3, r3, #2
 8028390:	220f      	movs	r2, #15
 8028392:	fa02 f303 	lsl.w	r3, r2, r3
 8028396:	43db      	mvns	r3, r3
 8028398:	69ba      	ldr	r2, [r7, #24]
 802839a:	4013      	ands	r3, r2
 802839c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802839e:	687b      	ldr	r3, [r7, #4]
 80283a0:	4a52      	ldr	r2, [pc, #328]	; (80284ec <HAL_GPIO_Init+0x314>)
 80283a2:	4293      	cmp	r3, r2
 80283a4:	d02b      	beq.n	80283fe <HAL_GPIO_Init+0x226>
 80283a6:	687b      	ldr	r3, [r7, #4]
 80283a8:	4a51      	ldr	r2, [pc, #324]	; (80284f0 <HAL_GPIO_Init+0x318>)
 80283aa:	4293      	cmp	r3, r2
 80283ac:	d025      	beq.n	80283fa <HAL_GPIO_Init+0x222>
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	4a50      	ldr	r2, [pc, #320]	; (80284f4 <HAL_GPIO_Init+0x31c>)
 80283b2:	4293      	cmp	r3, r2
 80283b4:	d01f      	beq.n	80283f6 <HAL_GPIO_Init+0x21e>
 80283b6:	687b      	ldr	r3, [r7, #4]
 80283b8:	4a4f      	ldr	r2, [pc, #316]	; (80284f8 <HAL_GPIO_Init+0x320>)
 80283ba:	4293      	cmp	r3, r2
 80283bc:	d019      	beq.n	80283f2 <HAL_GPIO_Init+0x21a>
 80283be:	687b      	ldr	r3, [r7, #4]
 80283c0:	4a4e      	ldr	r2, [pc, #312]	; (80284fc <HAL_GPIO_Init+0x324>)
 80283c2:	4293      	cmp	r3, r2
 80283c4:	d013      	beq.n	80283ee <HAL_GPIO_Init+0x216>
 80283c6:	687b      	ldr	r3, [r7, #4]
 80283c8:	4a4d      	ldr	r2, [pc, #308]	; (8028500 <HAL_GPIO_Init+0x328>)
 80283ca:	4293      	cmp	r3, r2
 80283cc:	d00d      	beq.n	80283ea <HAL_GPIO_Init+0x212>
 80283ce:	687b      	ldr	r3, [r7, #4]
 80283d0:	4a4c      	ldr	r2, [pc, #304]	; (8028504 <HAL_GPIO_Init+0x32c>)
 80283d2:	4293      	cmp	r3, r2
 80283d4:	d007      	beq.n	80283e6 <HAL_GPIO_Init+0x20e>
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	4a4b      	ldr	r2, [pc, #300]	; (8028508 <HAL_GPIO_Init+0x330>)
 80283da:	4293      	cmp	r3, r2
 80283dc:	d101      	bne.n	80283e2 <HAL_GPIO_Init+0x20a>
 80283de:	2307      	movs	r3, #7
 80283e0:	e00e      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283e2:	2308      	movs	r3, #8
 80283e4:	e00c      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283e6:	2306      	movs	r3, #6
 80283e8:	e00a      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283ea:	2305      	movs	r3, #5
 80283ec:	e008      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283ee:	2304      	movs	r3, #4
 80283f0:	e006      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283f2:	2303      	movs	r3, #3
 80283f4:	e004      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283f6:	2302      	movs	r3, #2
 80283f8:	e002      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283fa:	2301      	movs	r3, #1
 80283fc:	e000      	b.n	8028400 <HAL_GPIO_Init+0x228>
 80283fe:	2300      	movs	r3, #0
 8028400:	69fa      	ldr	r2, [r7, #28]
 8028402:	f002 0203 	and.w	r2, r2, #3
 8028406:	0092      	lsls	r2, r2, #2
 8028408:	4093      	lsls	r3, r2
 802840a:	69ba      	ldr	r2, [r7, #24]
 802840c:	4313      	orrs	r3, r2
 802840e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8028410:	4935      	ldr	r1, [pc, #212]	; (80284e8 <HAL_GPIO_Init+0x310>)
 8028412:	69fb      	ldr	r3, [r7, #28]
 8028414:	089b      	lsrs	r3, r3, #2
 8028416:	3302      	adds	r3, #2
 8028418:	69ba      	ldr	r2, [r7, #24]
 802841a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802841e:	4b3b      	ldr	r3, [pc, #236]	; (802850c <HAL_GPIO_Init+0x334>)
 8028420:	689b      	ldr	r3, [r3, #8]
 8028422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028424:	693b      	ldr	r3, [r7, #16]
 8028426:	43db      	mvns	r3, r3
 8028428:	69ba      	ldr	r2, [r7, #24]
 802842a:	4013      	ands	r3, r2
 802842c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802842e:	683b      	ldr	r3, [r7, #0]
 8028430:	685b      	ldr	r3, [r3, #4]
 8028432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028436:	2b00      	cmp	r3, #0
 8028438:	d003      	beq.n	8028442 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802843a:	69ba      	ldr	r2, [r7, #24]
 802843c:	693b      	ldr	r3, [r7, #16]
 802843e:	4313      	orrs	r3, r2
 8028440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8028442:	4a32      	ldr	r2, [pc, #200]	; (802850c <HAL_GPIO_Init+0x334>)
 8028444:	69bb      	ldr	r3, [r7, #24]
 8028446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028448:	4b30      	ldr	r3, [pc, #192]	; (802850c <HAL_GPIO_Init+0x334>)
 802844a:	68db      	ldr	r3, [r3, #12]
 802844c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802844e:	693b      	ldr	r3, [r7, #16]
 8028450:	43db      	mvns	r3, r3
 8028452:	69ba      	ldr	r2, [r7, #24]
 8028454:	4013      	ands	r3, r2
 8028456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8028458:	683b      	ldr	r3, [r7, #0]
 802845a:	685b      	ldr	r3, [r3, #4]
 802845c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028460:	2b00      	cmp	r3, #0
 8028462:	d003      	beq.n	802846c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028464:	69ba      	ldr	r2, [r7, #24]
 8028466:	693b      	ldr	r3, [r7, #16]
 8028468:	4313      	orrs	r3, r2
 802846a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802846c:	4a27      	ldr	r2, [pc, #156]	; (802850c <HAL_GPIO_Init+0x334>)
 802846e:	69bb      	ldr	r3, [r7, #24]
 8028470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8028472:	4b26      	ldr	r3, [pc, #152]	; (802850c <HAL_GPIO_Init+0x334>)
 8028474:	685b      	ldr	r3, [r3, #4]
 8028476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028478:	693b      	ldr	r3, [r7, #16]
 802847a:	43db      	mvns	r3, r3
 802847c:	69ba      	ldr	r2, [r7, #24]
 802847e:	4013      	ands	r3, r2
 8028480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8028482:	683b      	ldr	r3, [r7, #0]
 8028484:	685b      	ldr	r3, [r3, #4]
 8028486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802848a:	2b00      	cmp	r3, #0
 802848c:	d003      	beq.n	8028496 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802848e:	69ba      	ldr	r2, [r7, #24]
 8028490:	693b      	ldr	r3, [r7, #16]
 8028492:	4313      	orrs	r3, r2
 8028494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028496:	4a1d      	ldr	r2, [pc, #116]	; (802850c <HAL_GPIO_Init+0x334>)
 8028498:	69bb      	ldr	r3, [r7, #24]
 802849a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802849c:	4b1b      	ldr	r3, [pc, #108]	; (802850c <HAL_GPIO_Init+0x334>)
 802849e:	681b      	ldr	r3, [r3, #0]
 80284a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80284a2:	693b      	ldr	r3, [r7, #16]
 80284a4:	43db      	mvns	r3, r3
 80284a6:	69ba      	ldr	r2, [r7, #24]
 80284a8:	4013      	ands	r3, r2
 80284aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80284ac:	683b      	ldr	r3, [r7, #0]
 80284ae:	685b      	ldr	r3, [r3, #4]
 80284b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	d003      	beq.n	80284c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80284b8:	69ba      	ldr	r2, [r7, #24]
 80284ba:	693b      	ldr	r3, [r7, #16]
 80284bc:	4313      	orrs	r3, r2
 80284be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80284c0:	4a12      	ldr	r2, [pc, #72]	; (802850c <HAL_GPIO_Init+0x334>)
 80284c2:	69bb      	ldr	r3, [r7, #24]
 80284c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80284c6:	69fb      	ldr	r3, [r7, #28]
 80284c8:	3301      	adds	r3, #1
 80284ca:	61fb      	str	r3, [r7, #28]
 80284cc:	69fb      	ldr	r3, [r7, #28]
 80284ce:	2b0f      	cmp	r3, #15
 80284d0:	f67f ae90 	bls.w	80281f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80284d4:	bf00      	nop
 80284d6:	bf00      	nop
 80284d8:	3724      	adds	r7, #36	; 0x24
 80284da:	46bd      	mov	sp, r7
 80284dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284e0:	4770      	bx	lr
 80284e2:	bf00      	nop
 80284e4:	40023800 	.word	0x40023800
 80284e8:	40013800 	.word	0x40013800
 80284ec:	40020000 	.word	0x40020000
 80284f0:	40020400 	.word	0x40020400
 80284f4:	40020800 	.word	0x40020800
 80284f8:	40020c00 	.word	0x40020c00
 80284fc:	40021000 	.word	0x40021000
 8028500:	40021400 	.word	0x40021400
 8028504:	40021800 	.word	0x40021800
 8028508:	40021c00 	.word	0x40021c00
 802850c:	40013c00 	.word	0x40013c00

08028510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8028510:	b480      	push	{r7}
 8028512:	b087      	sub	sp, #28
 8028514:	af00      	add	r7, sp, #0
 8028516:	6078      	str	r0, [r7, #4]
 8028518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802851a:	2300      	movs	r3, #0
 802851c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802851e:	2300      	movs	r3, #0
 8028520:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8028522:	2300      	movs	r3, #0
 8028524:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028526:	2300      	movs	r3, #0
 8028528:	617b      	str	r3, [r7, #20]
 802852a:	e0cd      	b.n	80286c8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802852c:	2201      	movs	r2, #1
 802852e:	697b      	ldr	r3, [r7, #20]
 8028530:	fa02 f303 	lsl.w	r3, r2, r3
 8028534:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8028536:	683a      	ldr	r2, [r7, #0]
 8028538:	693b      	ldr	r3, [r7, #16]
 802853a:	4013      	ands	r3, r2
 802853c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802853e:	68fa      	ldr	r2, [r7, #12]
 8028540:	693b      	ldr	r3, [r7, #16]
 8028542:	429a      	cmp	r2, r3
 8028544:	f040 80bd 	bne.w	80286c2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8028548:	4a65      	ldr	r2, [pc, #404]	; (80286e0 <HAL_GPIO_DeInit+0x1d0>)
 802854a:	697b      	ldr	r3, [r7, #20]
 802854c:	089b      	lsrs	r3, r3, #2
 802854e:	3302      	adds	r3, #2
 8028550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028554:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8028556:	697b      	ldr	r3, [r7, #20]
 8028558:	f003 0303 	and.w	r3, r3, #3
 802855c:	009b      	lsls	r3, r3, #2
 802855e:	220f      	movs	r2, #15
 8028560:	fa02 f303 	lsl.w	r3, r2, r3
 8028564:	68ba      	ldr	r2, [r7, #8]
 8028566:	4013      	ands	r3, r2
 8028568:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	4a5d      	ldr	r2, [pc, #372]	; (80286e4 <HAL_GPIO_DeInit+0x1d4>)
 802856e:	4293      	cmp	r3, r2
 8028570:	d02b      	beq.n	80285ca <HAL_GPIO_DeInit+0xba>
 8028572:	687b      	ldr	r3, [r7, #4]
 8028574:	4a5c      	ldr	r2, [pc, #368]	; (80286e8 <HAL_GPIO_DeInit+0x1d8>)
 8028576:	4293      	cmp	r3, r2
 8028578:	d025      	beq.n	80285c6 <HAL_GPIO_DeInit+0xb6>
 802857a:	687b      	ldr	r3, [r7, #4]
 802857c:	4a5b      	ldr	r2, [pc, #364]	; (80286ec <HAL_GPIO_DeInit+0x1dc>)
 802857e:	4293      	cmp	r3, r2
 8028580:	d01f      	beq.n	80285c2 <HAL_GPIO_DeInit+0xb2>
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	4a5a      	ldr	r2, [pc, #360]	; (80286f0 <HAL_GPIO_DeInit+0x1e0>)
 8028586:	4293      	cmp	r3, r2
 8028588:	d019      	beq.n	80285be <HAL_GPIO_DeInit+0xae>
 802858a:	687b      	ldr	r3, [r7, #4]
 802858c:	4a59      	ldr	r2, [pc, #356]	; (80286f4 <HAL_GPIO_DeInit+0x1e4>)
 802858e:	4293      	cmp	r3, r2
 8028590:	d013      	beq.n	80285ba <HAL_GPIO_DeInit+0xaa>
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	4a58      	ldr	r2, [pc, #352]	; (80286f8 <HAL_GPIO_DeInit+0x1e8>)
 8028596:	4293      	cmp	r3, r2
 8028598:	d00d      	beq.n	80285b6 <HAL_GPIO_DeInit+0xa6>
 802859a:	687b      	ldr	r3, [r7, #4]
 802859c:	4a57      	ldr	r2, [pc, #348]	; (80286fc <HAL_GPIO_DeInit+0x1ec>)
 802859e:	4293      	cmp	r3, r2
 80285a0:	d007      	beq.n	80285b2 <HAL_GPIO_DeInit+0xa2>
 80285a2:	687b      	ldr	r3, [r7, #4]
 80285a4:	4a56      	ldr	r2, [pc, #344]	; (8028700 <HAL_GPIO_DeInit+0x1f0>)
 80285a6:	4293      	cmp	r3, r2
 80285a8:	d101      	bne.n	80285ae <HAL_GPIO_DeInit+0x9e>
 80285aa:	2307      	movs	r3, #7
 80285ac:	e00e      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285ae:	2308      	movs	r3, #8
 80285b0:	e00c      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285b2:	2306      	movs	r3, #6
 80285b4:	e00a      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285b6:	2305      	movs	r3, #5
 80285b8:	e008      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285ba:	2304      	movs	r3, #4
 80285bc:	e006      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285be:	2303      	movs	r3, #3
 80285c0:	e004      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285c2:	2302      	movs	r3, #2
 80285c4:	e002      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285c6:	2301      	movs	r3, #1
 80285c8:	e000      	b.n	80285cc <HAL_GPIO_DeInit+0xbc>
 80285ca:	2300      	movs	r3, #0
 80285cc:	697a      	ldr	r2, [r7, #20]
 80285ce:	f002 0203 	and.w	r2, r2, #3
 80285d2:	0092      	lsls	r2, r2, #2
 80285d4:	4093      	lsls	r3, r2
 80285d6:	68ba      	ldr	r2, [r7, #8]
 80285d8:	429a      	cmp	r2, r3
 80285da:	d132      	bne.n	8028642 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80285dc:	4b49      	ldr	r3, [pc, #292]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 80285de:	681a      	ldr	r2, [r3, #0]
 80285e0:	68fb      	ldr	r3, [r7, #12]
 80285e2:	43db      	mvns	r3, r3
 80285e4:	4947      	ldr	r1, [pc, #284]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 80285e6:	4013      	ands	r3, r2
 80285e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80285ea:	4b46      	ldr	r3, [pc, #280]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 80285ec:	685a      	ldr	r2, [r3, #4]
 80285ee:	68fb      	ldr	r3, [r7, #12]
 80285f0:	43db      	mvns	r3, r3
 80285f2:	4944      	ldr	r1, [pc, #272]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 80285f4:	4013      	ands	r3, r2
 80285f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80285f8:	4b42      	ldr	r3, [pc, #264]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 80285fa:	68da      	ldr	r2, [r3, #12]
 80285fc:	68fb      	ldr	r3, [r7, #12]
 80285fe:	43db      	mvns	r3, r3
 8028600:	4940      	ldr	r1, [pc, #256]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 8028602:	4013      	ands	r3, r2
 8028604:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8028606:	4b3f      	ldr	r3, [pc, #252]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 8028608:	689a      	ldr	r2, [r3, #8]
 802860a:	68fb      	ldr	r3, [r7, #12]
 802860c:	43db      	mvns	r3, r3
 802860e:	493d      	ldr	r1, [pc, #244]	; (8028704 <HAL_GPIO_DeInit+0x1f4>)
 8028610:	4013      	ands	r3, r2
 8028612:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8028614:	697b      	ldr	r3, [r7, #20]
 8028616:	f003 0303 	and.w	r3, r3, #3
 802861a:	009b      	lsls	r3, r3, #2
 802861c:	220f      	movs	r2, #15
 802861e:	fa02 f303 	lsl.w	r3, r2, r3
 8028622:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8028624:	4a2e      	ldr	r2, [pc, #184]	; (80286e0 <HAL_GPIO_DeInit+0x1d0>)
 8028626:	697b      	ldr	r3, [r7, #20]
 8028628:	089b      	lsrs	r3, r3, #2
 802862a:	3302      	adds	r3, #2
 802862c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8028630:	68bb      	ldr	r3, [r7, #8]
 8028632:	43da      	mvns	r2, r3
 8028634:	482a      	ldr	r0, [pc, #168]	; (80286e0 <HAL_GPIO_DeInit+0x1d0>)
 8028636:	697b      	ldr	r3, [r7, #20]
 8028638:	089b      	lsrs	r3, r3, #2
 802863a:	400a      	ands	r2, r1
 802863c:	3302      	adds	r3, #2
 802863e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	681a      	ldr	r2, [r3, #0]
 8028646:	697b      	ldr	r3, [r7, #20]
 8028648:	005b      	lsls	r3, r3, #1
 802864a:	2103      	movs	r1, #3
 802864c:	fa01 f303 	lsl.w	r3, r1, r3
 8028650:	43db      	mvns	r3, r3
 8028652:	401a      	ands	r2, r3
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028658:	697b      	ldr	r3, [r7, #20]
 802865a:	08da      	lsrs	r2, r3, #3
 802865c:	687b      	ldr	r3, [r7, #4]
 802865e:	3208      	adds	r2, #8
 8028660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028664:	697b      	ldr	r3, [r7, #20]
 8028666:	f003 0307 	and.w	r3, r3, #7
 802866a:	009b      	lsls	r3, r3, #2
 802866c:	220f      	movs	r2, #15
 802866e:	fa02 f303 	lsl.w	r3, r2, r3
 8028672:	43db      	mvns	r3, r3
 8028674:	697a      	ldr	r2, [r7, #20]
 8028676:	08d2      	lsrs	r2, r2, #3
 8028678:	4019      	ands	r1, r3
 802867a:	687b      	ldr	r3, [r7, #4]
 802867c:	3208      	adds	r2, #8
 802867e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028682:	687b      	ldr	r3, [r7, #4]
 8028684:	68da      	ldr	r2, [r3, #12]
 8028686:	697b      	ldr	r3, [r7, #20]
 8028688:	005b      	lsls	r3, r3, #1
 802868a:	2103      	movs	r1, #3
 802868c:	fa01 f303 	lsl.w	r3, r1, r3
 8028690:	43db      	mvns	r3, r3
 8028692:	401a      	ands	r2, r3
 8028694:	687b      	ldr	r3, [r7, #4]
 8028696:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	685a      	ldr	r2, [r3, #4]
 802869c:	2101      	movs	r1, #1
 802869e:	697b      	ldr	r3, [r7, #20]
 80286a0:	fa01 f303 	lsl.w	r3, r1, r3
 80286a4:	43db      	mvns	r3, r3
 80286a6:	401a      	ands	r2, r3
 80286a8:	687b      	ldr	r3, [r7, #4]
 80286aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80286ac:	687b      	ldr	r3, [r7, #4]
 80286ae:	689a      	ldr	r2, [r3, #8]
 80286b0:	697b      	ldr	r3, [r7, #20]
 80286b2:	005b      	lsls	r3, r3, #1
 80286b4:	2103      	movs	r1, #3
 80286b6:	fa01 f303 	lsl.w	r3, r1, r3
 80286ba:	43db      	mvns	r3, r3
 80286bc:	401a      	ands	r2, r3
 80286be:	687b      	ldr	r3, [r7, #4]
 80286c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80286c2:	697b      	ldr	r3, [r7, #20]
 80286c4:	3301      	adds	r3, #1
 80286c6:	617b      	str	r3, [r7, #20]
 80286c8:	697b      	ldr	r3, [r7, #20]
 80286ca:	2b0f      	cmp	r3, #15
 80286cc:	f67f af2e 	bls.w	802852c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80286d0:	bf00      	nop
 80286d2:	bf00      	nop
 80286d4:	371c      	adds	r7, #28
 80286d6:	46bd      	mov	sp, r7
 80286d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286dc:	4770      	bx	lr
 80286de:	bf00      	nop
 80286e0:	40013800 	.word	0x40013800
 80286e4:	40020000 	.word	0x40020000
 80286e8:	40020400 	.word	0x40020400
 80286ec:	40020800 	.word	0x40020800
 80286f0:	40020c00 	.word	0x40020c00
 80286f4:	40021000 	.word	0x40021000
 80286f8:	40021400 	.word	0x40021400
 80286fc:	40021800 	.word	0x40021800
 8028700:	40021c00 	.word	0x40021c00
 8028704:	40013c00 	.word	0x40013c00

08028708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8028708:	b480      	push	{r7}
 802870a:	b083      	sub	sp, #12
 802870c:	af00      	add	r7, sp, #0
 802870e:	6078      	str	r0, [r7, #4]
 8028710:	460b      	mov	r3, r1
 8028712:	807b      	strh	r3, [r7, #2]
 8028714:	4613      	mov	r3, r2
 8028716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8028718:	787b      	ldrb	r3, [r7, #1]
 802871a:	2b00      	cmp	r3, #0
 802871c:	d003      	beq.n	8028726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802871e:	887a      	ldrh	r2, [r7, #2]
 8028720:	687b      	ldr	r3, [r7, #4]
 8028722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8028724:	e003      	b.n	802872e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8028726:	887b      	ldrh	r3, [r7, #2]
 8028728:	041a      	lsls	r2, r3, #16
 802872a:	687b      	ldr	r3, [r7, #4]
 802872c:	619a      	str	r2, [r3, #24]
}
 802872e:	bf00      	nop
 8028730:	370c      	adds	r7, #12
 8028732:	46bd      	mov	sp, r7
 8028734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028738:	4770      	bx	lr

0802873a <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 802873a:	b580      	push	{r7, lr}
 802873c:	b084      	sub	sp, #16
 802873e:	af00      	add	r7, sp, #0
 8028740:	60f8      	str	r0, [r7, #12]
 8028742:	60b9      	str	r1, [r7, #8]
 8028744:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8028746:	68fb      	ldr	r3, [r7, #12]
 8028748:	2b00      	cmp	r3, #0
 802874a:	d101      	bne.n	8028750 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 802874c:	2301      	movs	r3, #1
 802874e:	e03e      	b.n	80287ce <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8028750:	68fb      	ldr	r3, [r7, #12]
 8028752:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028756:	b2db      	uxtb	r3, r3
 8028758:	2b00      	cmp	r3, #0
 802875a:	d106      	bne.n	802876a <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 802875c:	68fb      	ldr	r3, [r7, #12]
 802875e:	2200      	movs	r2, #0
 8028760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8028764:	68f8      	ldr	r0, [r7, #12]
 8028766:	f7fa f985 	bl	8022a74 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 802876a:	68fb      	ldr	r3, [r7, #12]
 802876c:	681a      	ldr	r2, [r3, #0]
 802876e:	68fb      	ldr	r3, [r7, #12]
 8028770:	3304      	adds	r3, #4
 8028772:	4619      	mov	r1, r3
 8028774:	4610      	mov	r0, r2
 8028776:	f003 ff55 	bl	802c624 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 802877a:	68fb      	ldr	r3, [r7, #12]
 802877c:	6818      	ldr	r0, [r3, #0]
 802877e:	68fb      	ldr	r3, [r7, #12]
 8028780:	685b      	ldr	r3, [r3, #4]
 8028782:	461a      	mov	r2, r3
 8028784:	68b9      	ldr	r1, [r7, #8]
 8028786:	f003 ff99 	bl	802c6bc <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 802878a:	68fb      	ldr	r3, [r7, #12]
 802878c:	6818      	ldr	r0, [r3, #0]
 802878e:	68fb      	ldr	r3, [r7, #12]
 8028790:	685b      	ldr	r3, [r3, #4]
 8028792:	461a      	mov	r2, r3
 8028794:	6879      	ldr	r1, [r7, #4]
 8028796:	f003 ffc6 	bl	802c726 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	685b      	ldr	r3, [r3, #4]
 802879e:	2b10      	cmp	r3, #16
 80287a0:	d108      	bne.n	80287b4 <HAL_NAND_Init+0x7a>
 80287a2:	68fb      	ldr	r3, [r7, #12]
 80287a4:	681b      	ldr	r3, [r3, #0]
 80287a6:	681a      	ldr	r2, [r3, #0]
 80287a8:	68fb      	ldr	r3, [r7, #12]
 80287aa:	681b      	ldr	r3, [r3, #0]
 80287ac:	f042 0204 	orr.w	r2, r2, #4
 80287b0:	601a      	str	r2, [r3, #0]
 80287b2:	e007      	b.n	80287c4 <HAL_NAND_Init+0x8a>
 80287b4:	68fb      	ldr	r3, [r7, #12]
 80287b6:	681b      	ldr	r3, [r3, #0]
 80287b8:	6a1a      	ldr	r2, [r3, #32]
 80287ba:	68fb      	ldr	r3, [r7, #12]
 80287bc:	681b      	ldr	r3, [r3, #0]
 80287be:	f042 0204 	orr.w	r2, r2, #4
 80287c2:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80287c4:	68fb      	ldr	r3, [r7, #12]
 80287c6:	2201      	movs	r2, #1
 80287c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80287cc:	2300      	movs	r3, #0
}
 80287ce:	4618      	mov	r0, r3
 80287d0:	3710      	adds	r7, #16
 80287d2:	46bd      	mov	sp, r7
 80287d4:	bd80      	pop	{r7, pc}

080287d6 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80287d6:	b580      	push	{r7, lr}
 80287d8:	b082      	sub	sp, #8
 80287da:	af00      	add	r7, sp, #0
 80287dc:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80287de:	687b      	ldr	r3, [r7, #4]
 80287e0:	685b      	ldr	r3, [r3, #4]
 80287e2:	2b10      	cmp	r3, #16
 80287e4:	d10a      	bne.n	80287fc <HAL_NAND_IRQHandler+0x26>
 80287e6:	687b      	ldr	r3, [r7, #4]
 80287e8:	681b      	ldr	r3, [r3, #0]
 80287ea:	685b      	ldr	r3, [r3, #4]
 80287ec:	f003 0301 	and.w	r3, r3, #1
 80287f0:	2b01      	cmp	r3, #1
 80287f2:	bf0c      	ite	eq
 80287f4:	2301      	moveq	r3, #1
 80287f6:	2300      	movne	r3, #0
 80287f8:	b2db      	uxtb	r3, r3
 80287fa:	e009      	b.n	8028810 <HAL_NAND_IRQHandler+0x3a>
 80287fc:	687b      	ldr	r3, [r7, #4]
 80287fe:	681b      	ldr	r3, [r3, #0]
 8028800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028802:	f003 0301 	and.w	r3, r3, #1
 8028806:	2b01      	cmp	r3, #1
 8028808:	bf0c      	ite	eq
 802880a:	2301      	moveq	r3, #1
 802880c:	2300      	movne	r3, #0
 802880e:	b2db      	uxtb	r3, r3
 8028810:	2b00      	cmp	r3, #0
 8028812:	d017      	beq.n	8028844 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028814:	6878      	ldr	r0, [r7, #4]
 8028816:	f000 f8b2 	bl	802897e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 802881a:	687b      	ldr	r3, [r7, #4]
 802881c:	685b      	ldr	r3, [r3, #4]
 802881e:	2b10      	cmp	r3, #16
 8028820:	d108      	bne.n	8028834 <HAL_NAND_IRQHandler+0x5e>
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	681b      	ldr	r3, [r3, #0]
 8028826:	685a      	ldr	r2, [r3, #4]
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	681b      	ldr	r3, [r3, #0]
 802882c:	f022 0201 	bic.w	r2, r2, #1
 8028830:	605a      	str	r2, [r3, #4]
 8028832:	e007      	b.n	8028844 <HAL_NAND_IRQHandler+0x6e>
 8028834:	687b      	ldr	r3, [r7, #4]
 8028836:	681b      	ldr	r3, [r3, #0]
 8028838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802883a:	687b      	ldr	r3, [r7, #4]
 802883c:	681b      	ldr	r3, [r3, #0]
 802883e:	f022 0201 	bic.w	r2, r2, #1
 8028842:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8028844:	687b      	ldr	r3, [r7, #4]
 8028846:	685b      	ldr	r3, [r3, #4]
 8028848:	2b10      	cmp	r3, #16
 802884a:	d10a      	bne.n	8028862 <HAL_NAND_IRQHandler+0x8c>
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	681b      	ldr	r3, [r3, #0]
 8028850:	685b      	ldr	r3, [r3, #4]
 8028852:	f003 0302 	and.w	r3, r3, #2
 8028856:	2b02      	cmp	r3, #2
 8028858:	bf0c      	ite	eq
 802885a:	2301      	moveq	r3, #1
 802885c:	2300      	movne	r3, #0
 802885e:	b2db      	uxtb	r3, r3
 8028860:	e009      	b.n	8028876 <HAL_NAND_IRQHandler+0xa0>
 8028862:	687b      	ldr	r3, [r7, #4]
 8028864:	681b      	ldr	r3, [r3, #0]
 8028866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028868:	f003 0302 	and.w	r3, r3, #2
 802886c:	2b02      	cmp	r3, #2
 802886e:	bf0c      	ite	eq
 8028870:	2301      	moveq	r3, #1
 8028872:	2300      	movne	r3, #0
 8028874:	b2db      	uxtb	r3, r3
 8028876:	2b00      	cmp	r3, #0
 8028878:	d017      	beq.n	80288aa <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 802887a:	6878      	ldr	r0, [r7, #4]
 802887c:	f000 f87f 	bl	802897e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8028880:	687b      	ldr	r3, [r7, #4]
 8028882:	685b      	ldr	r3, [r3, #4]
 8028884:	2b10      	cmp	r3, #16
 8028886:	d108      	bne.n	802889a <HAL_NAND_IRQHandler+0xc4>
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	681b      	ldr	r3, [r3, #0]
 802888c:	685a      	ldr	r2, [r3, #4]
 802888e:	687b      	ldr	r3, [r7, #4]
 8028890:	681b      	ldr	r3, [r3, #0]
 8028892:	f022 0202 	bic.w	r2, r2, #2
 8028896:	605a      	str	r2, [r3, #4]
 8028898:	e007      	b.n	80288aa <HAL_NAND_IRQHandler+0xd4>
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	681b      	ldr	r3, [r3, #0]
 802889e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80288a0:	687b      	ldr	r3, [r7, #4]
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	f022 0202 	bic.w	r2, r2, #2
 80288a8:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80288aa:	687b      	ldr	r3, [r7, #4]
 80288ac:	685b      	ldr	r3, [r3, #4]
 80288ae:	2b10      	cmp	r3, #16
 80288b0:	d10a      	bne.n	80288c8 <HAL_NAND_IRQHandler+0xf2>
 80288b2:	687b      	ldr	r3, [r7, #4]
 80288b4:	681b      	ldr	r3, [r3, #0]
 80288b6:	685b      	ldr	r3, [r3, #4]
 80288b8:	f003 0304 	and.w	r3, r3, #4
 80288bc:	2b04      	cmp	r3, #4
 80288be:	bf0c      	ite	eq
 80288c0:	2301      	moveq	r3, #1
 80288c2:	2300      	movne	r3, #0
 80288c4:	b2db      	uxtb	r3, r3
 80288c6:	e009      	b.n	80288dc <HAL_NAND_IRQHandler+0x106>
 80288c8:	687b      	ldr	r3, [r7, #4]
 80288ca:	681b      	ldr	r3, [r3, #0]
 80288cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80288ce:	f003 0304 	and.w	r3, r3, #4
 80288d2:	2b04      	cmp	r3, #4
 80288d4:	bf0c      	ite	eq
 80288d6:	2301      	moveq	r3, #1
 80288d8:	2300      	movne	r3, #0
 80288da:	b2db      	uxtb	r3, r3
 80288dc:	2b00      	cmp	r3, #0
 80288de:	d017      	beq.n	8028910 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80288e0:	6878      	ldr	r0, [r7, #4]
 80288e2:	f000 f84c 	bl	802897e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80288e6:	687b      	ldr	r3, [r7, #4]
 80288e8:	685b      	ldr	r3, [r3, #4]
 80288ea:	2b10      	cmp	r3, #16
 80288ec:	d108      	bne.n	8028900 <HAL_NAND_IRQHandler+0x12a>
 80288ee:	687b      	ldr	r3, [r7, #4]
 80288f0:	681b      	ldr	r3, [r3, #0]
 80288f2:	685a      	ldr	r2, [r3, #4]
 80288f4:	687b      	ldr	r3, [r7, #4]
 80288f6:	681b      	ldr	r3, [r3, #0]
 80288f8:	f022 0204 	bic.w	r2, r2, #4
 80288fc:	605a      	str	r2, [r3, #4]
 80288fe:	e007      	b.n	8028910 <HAL_NAND_IRQHandler+0x13a>
 8028900:	687b      	ldr	r3, [r7, #4]
 8028902:	681b      	ldr	r3, [r3, #0]
 8028904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028906:	687b      	ldr	r3, [r7, #4]
 8028908:	681b      	ldr	r3, [r3, #0]
 802890a:	f022 0204 	bic.w	r2, r2, #4
 802890e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8028910:	687b      	ldr	r3, [r7, #4]
 8028912:	685b      	ldr	r3, [r3, #4]
 8028914:	2b10      	cmp	r3, #16
 8028916:	d10a      	bne.n	802892e <HAL_NAND_IRQHandler+0x158>
 8028918:	687b      	ldr	r3, [r7, #4]
 802891a:	681b      	ldr	r3, [r3, #0]
 802891c:	685b      	ldr	r3, [r3, #4]
 802891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028922:	2b40      	cmp	r3, #64	; 0x40
 8028924:	bf0c      	ite	eq
 8028926:	2301      	moveq	r3, #1
 8028928:	2300      	movne	r3, #0
 802892a:	b2db      	uxtb	r3, r3
 802892c:	e009      	b.n	8028942 <HAL_NAND_IRQHandler+0x16c>
 802892e:	687b      	ldr	r3, [r7, #4]
 8028930:	681b      	ldr	r3, [r3, #0]
 8028932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028938:	2b40      	cmp	r3, #64	; 0x40
 802893a:	bf0c      	ite	eq
 802893c:	2301      	moveq	r3, #1
 802893e:	2300      	movne	r3, #0
 8028940:	b2db      	uxtb	r3, r3
 8028942:	2b00      	cmp	r3, #0
 8028944:	d017      	beq.n	8028976 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028946:	6878      	ldr	r0, [r7, #4]
 8028948:	f000 f819 	bl	802897e <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 802894c:	687b      	ldr	r3, [r7, #4]
 802894e:	685b      	ldr	r3, [r3, #4]
 8028950:	2b10      	cmp	r3, #16
 8028952:	d108      	bne.n	8028966 <HAL_NAND_IRQHandler+0x190>
 8028954:	687b      	ldr	r3, [r7, #4]
 8028956:	681b      	ldr	r3, [r3, #0]
 8028958:	685a      	ldr	r2, [r3, #4]
 802895a:	687b      	ldr	r3, [r7, #4]
 802895c:	681b      	ldr	r3, [r3, #0]
 802895e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028962:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8028964:	e007      	b.n	8028976 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	681b      	ldr	r3, [r3, #0]
 802896a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802896c:	687b      	ldr	r3, [r7, #4]
 802896e:	681b      	ldr	r3, [r3, #0]
 8028970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8028976:	bf00      	nop
 8028978:	3708      	adds	r7, #8
 802897a:	46bd      	mov	sp, r7
 802897c:	bd80      	pop	{r7, pc}

0802897e <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 802897e:	b480      	push	{r7}
 8028980:	b083      	sub	sp, #12
 8028982:	af00      	add	r7, sp, #0
 8028984:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8028986:	bf00      	nop
 8028988:	370c      	adds	r7, #12
 802898a:	46bd      	mov	sp, r7
 802898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028990:	4770      	bx	lr

08028992 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8028992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028994:	b08f      	sub	sp, #60	; 0x3c
 8028996:	af0a      	add	r7, sp, #40	; 0x28
 8028998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802899a:	687b      	ldr	r3, [r7, #4]
 802899c:	2b00      	cmp	r3, #0
 802899e:	d101      	bne.n	80289a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80289a0:	2301      	movs	r3, #1
 80289a2:	e10f      	b.n	8028bc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80289a4:	687b      	ldr	r3, [r7, #4]
 80289a6:	681b      	ldr	r3, [r3, #0]
 80289a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80289aa:	687b      	ldr	r3, [r7, #4]
 80289ac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80289b0:	b2db      	uxtb	r3, r3
 80289b2:	2b00      	cmp	r3, #0
 80289b4:	d106      	bne.n	80289c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80289b6:	687b      	ldr	r3, [r7, #4]
 80289b8:	2200      	movs	r2, #0
 80289ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80289be:	6878      	ldr	r0, [r7, #4]
 80289c0:	f007 fe7a 	bl	80306b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	2203      	movs	r2, #3
 80289c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80289cc:	68bb      	ldr	r3, [r7, #8]
 80289ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80289d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	d102      	bne.n	80289de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80289d8:	687b      	ldr	r3, [r7, #4]
 80289da:	2200      	movs	r2, #0
 80289dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80289de:	687b      	ldr	r3, [r7, #4]
 80289e0:	681b      	ldr	r3, [r3, #0]
 80289e2:	4618      	mov	r0, r3
 80289e4:	f003 ffe9 	bl	802c9ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80289e8:	687b      	ldr	r3, [r7, #4]
 80289ea:	681b      	ldr	r3, [r3, #0]
 80289ec:	603b      	str	r3, [r7, #0]
 80289ee:	687e      	ldr	r6, [r7, #4]
 80289f0:	466d      	mov	r5, sp
 80289f2:	f106 0410 	add.w	r4, r6, #16
 80289f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80289f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80289fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80289fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80289fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8028a06:	1d33      	adds	r3, r6, #4
 8028a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028a0a:	6838      	ldr	r0, [r7, #0]
 8028a0c:	f003 fec0 	bl	802c790 <USB_CoreInit>
 8028a10:	4603      	mov	r3, r0
 8028a12:	2b00      	cmp	r3, #0
 8028a14:	d005      	beq.n	8028a22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028a16:	687b      	ldr	r3, [r7, #4]
 8028a18:	2202      	movs	r2, #2
 8028a1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028a1e:	2301      	movs	r3, #1
 8028a20:	e0d0      	b.n	8028bc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	681b      	ldr	r3, [r3, #0]
 8028a26:	2100      	movs	r1, #0
 8028a28:	4618      	mov	r0, r3
 8028a2a:	f003 ffd7 	bl	802c9dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028a2e:	2300      	movs	r3, #0
 8028a30:	73fb      	strb	r3, [r7, #15]
 8028a32:	e04a      	b.n	8028aca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8028a34:	7bfa      	ldrb	r2, [r7, #15]
 8028a36:	6879      	ldr	r1, [r7, #4]
 8028a38:	4613      	mov	r3, r2
 8028a3a:	00db      	lsls	r3, r3, #3
 8028a3c:	4413      	add	r3, r2
 8028a3e:	009b      	lsls	r3, r3, #2
 8028a40:	440b      	add	r3, r1
 8028a42:	333d      	adds	r3, #61	; 0x3d
 8028a44:	2201      	movs	r2, #1
 8028a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8028a48:	7bfa      	ldrb	r2, [r7, #15]
 8028a4a:	6879      	ldr	r1, [r7, #4]
 8028a4c:	4613      	mov	r3, r2
 8028a4e:	00db      	lsls	r3, r3, #3
 8028a50:	4413      	add	r3, r2
 8028a52:	009b      	lsls	r3, r3, #2
 8028a54:	440b      	add	r3, r1
 8028a56:	333c      	adds	r3, #60	; 0x3c
 8028a58:	7bfa      	ldrb	r2, [r7, #15]
 8028a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8028a5c:	7bfa      	ldrb	r2, [r7, #15]
 8028a5e:	7bfb      	ldrb	r3, [r7, #15]
 8028a60:	b298      	uxth	r0, r3
 8028a62:	6879      	ldr	r1, [r7, #4]
 8028a64:	4613      	mov	r3, r2
 8028a66:	00db      	lsls	r3, r3, #3
 8028a68:	4413      	add	r3, r2
 8028a6a:	009b      	lsls	r3, r3, #2
 8028a6c:	440b      	add	r3, r1
 8028a6e:	3344      	adds	r3, #68	; 0x44
 8028a70:	4602      	mov	r2, r0
 8028a72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8028a74:	7bfa      	ldrb	r2, [r7, #15]
 8028a76:	6879      	ldr	r1, [r7, #4]
 8028a78:	4613      	mov	r3, r2
 8028a7a:	00db      	lsls	r3, r3, #3
 8028a7c:	4413      	add	r3, r2
 8028a7e:	009b      	lsls	r3, r3, #2
 8028a80:	440b      	add	r3, r1
 8028a82:	3340      	adds	r3, #64	; 0x40
 8028a84:	2200      	movs	r2, #0
 8028a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8028a88:	7bfa      	ldrb	r2, [r7, #15]
 8028a8a:	6879      	ldr	r1, [r7, #4]
 8028a8c:	4613      	mov	r3, r2
 8028a8e:	00db      	lsls	r3, r3, #3
 8028a90:	4413      	add	r3, r2
 8028a92:	009b      	lsls	r3, r3, #2
 8028a94:	440b      	add	r3, r1
 8028a96:	3348      	adds	r3, #72	; 0x48
 8028a98:	2200      	movs	r2, #0
 8028a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8028a9c:	7bfa      	ldrb	r2, [r7, #15]
 8028a9e:	6879      	ldr	r1, [r7, #4]
 8028aa0:	4613      	mov	r3, r2
 8028aa2:	00db      	lsls	r3, r3, #3
 8028aa4:	4413      	add	r3, r2
 8028aa6:	009b      	lsls	r3, r3, #2
 8028aa8:	440b      	add	r3, r1
 8028aaa:	334c      	adds	r3, #76	; 0x4c
 8028aac:	2200      	movs	r2, #0
 8028aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8028ab0:	7bfa      	ldrb	r2, [r7, #15]
 8028ab2:	6879      	ldr	r1, [r7, #4]
 8028ab4:	4613      	mov	r3, r2
 8028ab6:	00db      	lsls	r3, r3, #3
 8028ab8:	4413      	add	r3, r2
 8028aba:	009b      	lsls	r3, r3, #2
 8028abc:	440b      	add	r3, r1
 8028abe:	3354      	adds	r3, #84	; 0x54
 8028ac0:	2200      	movs	r2, #0
 8028ac2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028ac4:	7bfb      	ldrb	r3, [r7, #15]
 8028ac6:	3301      	adds	r3, #1
 8028ac8:	73fb      	strb	r3, [r7, #15]
 8028aca:	7bfa      	ldrb	r2, [r7, #15]
 8028acc:	687b      	ldr	r3, [r7, #4]
 8028ace:	685b      	ldr	r3, [r3, #4]
 8028ad0:	429a      	cmp	r2, r3
 8028ad2:	d3af      	bcc.n	8028a34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028ad4:	2300      	movs	r3, #0
 8028ad6:	73fb      	strb	r3, [r7, #15]
 8028ad8:	e044      	b.n	8028b64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8028ada:	7bfa      	ldrb	r2, [r7, #15]
 8028adc:	6879      	ldr	r1, [r7, #4]
 8028ade:	4613      	mov	r3, r2
 8028ae0:	00db      	lsls	r3, r3, #3
 8028ae2:	4413      	add	r3, r2
 8028ae4:	009b      	lsls	r3, r3, #2
 8028ae6:	440b      	add	r3, r1
 8028ae8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8028aec:	2200      	movs	r2, #0
 8028aee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8028af0:	7bfa      	ldrb	r2, [r7, #15]
 8028af2:	6879      	ldr	r1, [r7, #4]
 8028af4:	4613      	mov	r3, r2
 8028af6:	00db      	lsls	r3, r3, #3
 8028af8:	4413      	add	r3, r2
 8028afa:	009b      	lsls	r3, r3, #2
 8028afc:	440b      	add	r3, r1
 8028afe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8028b02:	7bfa      	ldrb	r2, [r7, #15]
 8028b04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8028b06:	7bfa      	ldrb	r2, [r7, #15]
 8028b08:	6879      	ldr	r1, [r7, #4]
 8028b0a:	4613      	mov	r3, r2
 8028b0c:	00db      	lsls	r3, r3, #3
 8028b0e:	4413      	add	r3, r2
 8028b10:	009b      	lsls	r3, r3, #2
 8028b12:	440b      	add	r3, r1
 8028b14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8028b18:	2200      	movs	r2, #0
 8028b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8028b1c:	7bfa      	ldrb	r2, [r7, #15]
 8028b1e:	6879      	ldr	r1, [r7, #4]
 8028b20:	4613      	mov	r3, r2
 8028b22:	00db      	lsls	r3, r3, #3
 8028b24:	4413      	add	r3, r2
 8028b26:	009b      	lsls	r3, r3, #2
 8028b28:	440b      	add	r3, r1
 8028b2a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8028b2e:	2200      	movs	r2, #0
 8028b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8028b32:	7bfa      	ldrb	r2, [r7, #15]
 8028b34:	6879      	ldr	r1, [r7, #4]
 8028b36:	4613      	mov	r3, r2
 8028b38:	00db      	lsls	r3, r3, #3
 8028b3a:	4413      	add	r3, r2
 8028b3c:	009b      	lsls	r3, r3, #2
 8028b3e:	440b      	add	r3, r1
 8028b40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8028b44:	2200      	movs	r2, #0
 8028b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8028b48:	7bfa      	ldrb	r2, [r7, #15]
 8028b4a:	6879      	ldr	r1, [r7, #4]
 8028b4c:	4613      	mov	r3, r2
 8028b4e:	00db      	lsls	r3, r3, #3
 8028b50:	4413      	add	r3, r2
 8028b52:	009b      	lsls	r3, r3, #2
 8028b54:	440b      	add	r3, r1
 8028b56:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8028b5a:	2200      	movs	r2, #0
 8028b5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028b5e:	7bfb      	ldrb	r3, [r7, #15]
 8028b60:	3301      	adds	r3, #1
 8028b62:	73fb      	strb	r3, [r7, #15]
 8028b64:	7bfa      	ldrb	r2, [r7, #15]
 8028b66:	687b      	ldr	r3, [r7, #4]
 8028b68:	685b      	ldr	r3, [r3, #4]
 8028b6a:	429a      	cmp	r2, r3
 8028b6c:	d3b5      	bcc.n	8028ada <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8028b6e:	687b      	ldr	r3, [r7, #4]
 8028b70:	681b      	ldr	r3, [r3, #0]
 8028b72:	603b      	str	r3, [r7, #0]
 8028b74:	687e      	ldr	r6, [r7, #4]
 8028b76:	466d      	mov	r5, sp
 8028b78:	f106 0410 	add.w	r4, r6, #16
 8028b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028b84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028b88:	e885 0003 	stmia.w	r5, {r0, r1}
 8028b8c:	1d33      	adds	r3, r6, #4
 8028b8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028b90:	6838      	ldr	r0, [r7, #0]
 8028b92:	f003 ff6f 	bl	802ca74 <USB_DevInit>
 8028b96:	4603      	mov	r3, r0
 8028b98:	2b00      	cmp	r3, #0
 8028b9a:	d005      	beq.n	8028ba8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028b9c:	687b      	ldr	r3, [r7, #4]
 8028b9e:	2202      	movs	r2, #2
 8028ba0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028ba4:	2301      	movs	r3, #1
 8028ba6:	e00d      	b.n	8028bc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8028ba8:	687b      	ldr	r3, [r7, #4]
 8028baa:	2200      	movs	r2, #0
 8028bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8028bb0:	687b      	ldr	r3, [r7, #4]
 8028bb2:	2201      	movs	r2, #1
 8028bb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8028bb8:	687b      	ldr	r3, [r7, #4]
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	4618      	mov	r0, r3
 8028bbe:	f005 f8be 	bl	802dd3e <USB_DevDisconnect>

  return HAL_OK;
 8028bc2:	2300      	movs	r3, #0
}
 8028bc4:	4618      	mov	r0, r3
 8028bc6:	3714      	adds	r7, #20
 8028bc8:	46bd      	mov	sp, r7
 8028bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028bcc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8028bcc:	b580      	push	{r7, lr}
 8028bce:	b084      	sub	sp, #16
 8028bd0:	af00      	add	r7, sp, #0
 8028bd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028bd4:	687b      	ldr	r3, [r7, #4]
 8028bd6:	681b      	ldr	r3, [r3, #0]
 8028bd8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8028bda:	687b      	ldr	r3, [r7, #4]
 8028bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8028be0:	2b01      	cmp	r3, #1
 8028be2:	d101      	bne.n	8028be8 <HAL_PCD_Start+0x1c>
 8028be4:	2302      	movs	r3, #2
 8028be6:	e020      	b.n	8028c2a <HAL_PCD_Start+0x5e>
 8028be8:	687b      	ldr	r3, [r7, #4]
 8028bea:	2201      	movs	r2, #1
 8028bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028bf0:	687b      	ldr	r3, [r7, #4]
 8028bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028bf4:	2b01      	cmp	r3, #1
 8028bf6:	d109      	bne.n	8028c0c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8028bf8:	687b      	ldr	r3, [r7, #4]
 8028bfa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028bfc:	2b01      	cmp	r3, #1
 8028bfe:	d005      	beq.n	8028c0c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8028c00:	68fb      	ldr	r3, [r7, #12]
 8028c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028c04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028c08:	68fb      	ldr	r3, [r7, #12]
 8028c0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8028c0c:	687b      	ldr	r3, [r7, #4]
 8028c0e:	681b      	ldr	r3, [r3, #0]
 8028c10:	4618      	mov	r0, r3
 8028c12:	f003 fec1 	bl	802c998 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8028c16:	687b      	ldr	r3, [r7, #4]
 8028c18:	681b      	ldr	r3, [r3, #0]
 8028c1a:	4618      	mov	r0, r3
 8028c1c:	f005 f86e 	bl	802dcfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8028c20:	687b      	ldr	r3, [r7, #4]
 8028c22:	2200      	movs	r2, #0
 8028c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8028c28:	2300      	movs	r3, #0
}
 8028c2a:	4618      	mov	r0, r3
 8028c2c:	3710      	adds	r7, #16
 8028c2e:	46bd      	mov	sp, r7
 8028c30:	bd80      	pop	{r7, pc}

08028c32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8028c32:	b590      	push	{r4, r7, lr}
 8028c34:	b08d      	sub	sp, #52	; 0x34
 8028c36:	af00      	add	r7, sp, #0
 8028c38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028c3a:	687b      	ldr	r3, [r7, #4]
 8028c3c:	681b      	ldr	r3, [r3, #0]
 8028c3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028c40:	6a3b      	ldr	r3, [r7, #32]
 8028c42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8028c44:	687b      	ldr	r3, [r7, #4]
 8028c46:	681b      	ldr	r3, [r3, #0]
 8028c48:	4618      	mov	r0, r3
 8028c4a:	f005 f92c 	bl	802dea6 <USB_GetMode>
 8028c4e:	4603      	mov	r3, r0
 8028c50:	2b00      	cmp	r3, #0
 8028c52:	f040 848a 	bne.w	802956a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8028c56:	687b      	ldr	r3, [r7, #4]
 8028c58:	681b      	ldr	r3, [r3, #0]
 8028c5a:	4618      	mov	r0, r3
 8028c5c:	f005 f890 	bl	802dd80 <USB_ReadInterrupts>
 8028c60:	4603      	mov	r3, r0
 8028c62:	2b00      	cmp	r3, #0
 8028c64:	f000 8480 	beq.w	8029568 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8028c68:	69fb      	ldr	r3, [r7, #28]
 8028c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028c6e:	689b      	ldr	r3, [r3, #8]
 8028c70:	0a1b      	lsrs	r3, r3, #8
 8028c72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8028c76:	687b      	ldr	r3, [r7, #4]
 8028c78:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8028c7c:	687b      	ldr	r3, [r7, #4]
 8028c7e:	681b      	ldr	r3, [r3, #0]
 8028c80:	4618      	mov	r0, r3
 8028c82:	f005 f87d 	bl	802dd80 <USB_ReadInterrupts>
 8028c86:	4603      	mov	r3, r0
 8028c88:	f003 0302 	and.w	r3, r3, #2
 8028c8c:	2b02      	cmp	r3, #2
 8028c8e:	d107      	bne.n	8028ca0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8028c90:	687b      	ldr	r3, [r7, #4]
 8028c92:	681b      	ldr	r3, [r3, #0]
 8028c94:	695a      	ldr	r2, [r3, #20]
 8028c96:	687b      	ldr	r3, [r7, #4]
 8028c98:	681b      	ldr	r3, [r3, #0]
 8028c9a:	f002 0202 	and.w	r2, r2, #2
 8028c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8028ca0:	687b      	ldr	r3, [r7, #4]
 8028ca2:	681b      	ldr	r3, [r3, #0]
 8028ca4:	4618      	mov	r0, r3
 8028ca6:	f005 f86b 	bl	802dd80 <USB_ReadInterrupts>
 8028caa:	4603      	mov	r3, r0
 8028cac:	f003 0310 	and.w	r3, r3, #16
 8028cb0:	2b10      	cmp	r3, #16
 8028cb2:	d161      	bne.n	8028d78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028cb4:	687b      	ldr	r3, [r7, #4]
 8028cb6:	681b      	ldr	r3, [r3, #0]
 8028cb8:	699a      	ldr	r2, [r3, #24]
 8028cba:	687b      	ldr	r3, [r7, #4]
 8028cbc:	681b      	ldr	r3, [r3, #0]
 8028cbe:	f022 0210 	bic.w	r2, r2, #16
 8028cc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8028cc4:	6a3b      	ldr	r3, [r7, #32]
 8028cc6:	6a1b      	ldr	r3, [r3, #32]
 8028cc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8028cca:	69bb      	ldr	r3, [r7, #24]
 8028ccc:	f003 020f 	and.w	r2, r3, #15
 8028cd0:	4613      	mov	r3, r2
 8028cd2:	00db      	lsls	r3, r3, #3
 8028cd4:	4413      	add	r3, r2
 8028cd6:	009b      	lsls	r3, r3, #2
 8028cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028cdc:	687a      	ldr	r2, [r7, #4]
 8028cde:	4413      	add	r3, r2
 8028ce0:	3304      	adds	r3, #4
 8028ce2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8028ce4:	69bb      	ldr	r3, [r7, #24]
 8028ce6:	0c5b      	lsrs	r3, r3, #17
 8028ce8:	f003 030f 	and.w	r3, r3, #15
 8028cec:	2b02      	cmp	r3, #2
 8028cee:	d124      	bne.n	8028d3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8028cf0:	69ba      	ldr	r2, [r7, #24]
 8028cf2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8028cf6:	4013      	ands	r3, r2
 8028cf8:	2b00      	cmp	r3, #0
 8028cfa:	d035      	beq.n	8028d68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028cfc:	697b      	ldr	r3, [r7, #20]
 8028cfe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8028d00:	69bb      	ldr	r3, [r7, #24]
 8028d02:	091b      	lsrs	r3, r3, #4
 8028d04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028d0a:	b29b      	uxth	r3, r3
 8028d0c:	461a      	mov	r2, r3
 8028d0e:	6a38      	ldr	r0, [r7, #32]
 8028d10:	f004 fea2 	bl	802da58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028d14:	697b      	ldr	r3, [r7, #20]
 8028d16:	691a      	ldr	r2, [r3, #16]
 8028d18:	69bb      	ldr	r3, [r7, #24]
 8028d1a:	091b      	lsrs	r3, r3, #4
 8028d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028d20:	441a      	add	r2, r3
 8028d22:	697b      	ldr	r3, [r7, #20]
 8028d24:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028d26:	697b      	ldr	r3, [r7, #20]
 8028d28:	6a1a      	ldr	r2, [r3, #32]
 8028d2a:	69bb      	ldr	r3, [r7, #24]
 8028d2c:	091b      	lsrs	r3, r3, #4
 8028d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028d32:	441a      	add	r2, r3
 8028d34:	697b      	ldr	r3, [r7, #20]
 8028d36:	621a      	str	r2, [r3, #32]
 8028d38:	e016      	b.n	8028d68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8028d3a:	69bb      	ldr	r3, [r7, #24]
 8028d3c:	0c5b      	lsrs	r3, r3, #17
 8028d3e:	f003 030f 	and.w	r3, r3, #15
 8028d42:	2b06      	cmp	r3, #6
 8028d44:	d110      	bne.n	8028d68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8028d46:	687b      	ldr	r3, [r7, #4]
 8028d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8028d4c:	2208      	movs	r2, #8
 8028d4e:	4619      	mov	r1, r3
 8028d50:	6a38      	ldr	r0, [r7, #32]
 8028d52:	f004 fe81 	bl	802da58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028d56:	697b      	ldr	r3, [r7, #20]
 8028d58:	6a1a      	ldr	r2, [r3, #32]
 8028d5a:	69bb      	ldr	r3, [r7, #24]
 8028d5c:	091b      	lsrs	r3, r3, #4
 8028d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028d62:	441a      	add	r2, r3
 8028d64:	697b      	ldr	r3, [r7, #20]
 8028d66:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028d68:	687b      	ldr	r3, [r7, #4]
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	699a      	ldr	r2, [r3, #24]
 8028d6e:	687b      	ldr	r3, [r7, #4]
 8028d70:	681b      	ldr	r3, [r3, #0]
 8028d72:	f042 0210 	orr.w	r2, r2, #16
 8028d76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8028d78:	687b      	ldr	r3, [r7, #4]
 8028d7a:	681b      	ldr	r3, [r3, #0]
 8028d7c:	4618      	mov	r0, r3
 8028d7e:	f004 ffff 	bl	802dd80 <USB_ReadInterrupts>
 8028d82:	4603      	mov	r3, r0
 8028d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028d88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8028d8c:	f040 80a7 	bne.w	8028ede <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8028d90:	2300      	movs	r3, #0
 8028d92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8028d94:	687b      	ldr	r3, [r7, #4]
 8028d96:	681b      	ldr	r3, [r3, #0]
 8028d98:	4618      	mov	r0, r3
 8028d9a:	f005 f804 	bl	802dda6 <USB_ReadDevAllOutEpInterrupt>
 8028d9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8028da0:	e099      	b.n	8028ed6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8028da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028da4:	f003 0301 	and.w	r3, r3, #1
 8028da8:	2b00      	cmp	r3, #0
 8028daa:	f000 808e 	beq.w	8028eca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8028dae:	687b      	ldr	r3, [r7, #4]
 8028db0:	681b      	ldr	r3, [r3, #0]
 8028db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028db4:	b2d2      	uxtb	r2, r2
 8028db6:	4611      	mov	r1, r2
 8028db8:	4618      	mov	r0, r3
 8028dba:	f005 f828 	bl	802de0e <USB_ReadDevOutEPInterrupt>
 8028dbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8028dc0:	693b      	ldr	r3, [r7, #16]
 8028dc2:	f003 0301 	and.w	r3, r3, #1
 8028dc6:	2b00      	cmp	r3, #0
 8028dc8:	d00c      	beq.n	8028de4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8028dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028dcc:	015a      	lsls	r2, r3, #5
 8028dce:	69fb      	ldr	r3, [r7, #28]
 8028dd0:	4413      	add	r3, r2
 8028dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028dd6:	461a      	mov	r2, r3
 8028dd8:	2301      	movs	r3, #1
 8028dda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8028ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028dde:	6878      	ldr	r0, [r7, #4]
 8028de0:	f000 fec2 	bl	8029b68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8028de4:	693b      	ldr	r3, [r7, #16]
 8028de6:	f003 0308 	and.w	r3, r3, #8
 8028dea:	2b00      	cmp	r3, #0
 8028dec:	d00c      	beq.n	8028e08 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8028dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028df0:	015a      	lsls	r2, r3, #5
 8028df2:	69fb      	ldr	r3, [r7, #28]
 8028df4:	4413      	add	r3, r2
 8028df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028dfa:	461a      	mov	r2, r3
 8028dfc:	2308      	movs	r3, #8
 8028dfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8028e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028e02:	6878      	ldr	r0, [r7, #4]
 8028e04:	f000 ff98 	bl	8029d38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8028e08:	693b      	ldr	r3, [r7, #16]
 8028e0a:	f003 0310 	and.w	r3, r3, #16
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d008      	beq.n	8028e24 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8028e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e14:	015a      	lsls	r2, r3, #5
 8028e16:	69fb      	ldr	r3, [r7, #28]
 8028e18:	4413      	add	r3, r2
 8028e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028e1e:	461a      	mov	r2, r3
 8028e20:	2310      	movs	r3, #16
 8028e22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8028e24:	693b      	ldr	r3, [r7, #16]
 8028e26:	f003 0302 	and.w	r3, r3, #2
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	d030      	beq.n	8028e90 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8028e2e:	6a3b      	ldr	r3, [r7, #32]
 8028e30:	695b      	ldr	r3, [r3, #20]
 8028e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028e36:	2b80      	cmp	r3, #128	; 0x80
 8028e38:	d109      	bne.n	8028e4e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8028e3a:	69fb      	ldr	r3, [r7, #28]
 8028e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028e40:	685b      	ldr	r3, [r3, #4]
 8028e42:	69fa      	ldr	r2, [r7, #28]
 8028e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8028e48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028e4c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8028e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e50:	4613      	mov	r3, r2
 8028e52:	00db      	lsls	r3, r3, #3
 8028e54:	4413      	add	r3, r2
 8028e56:	009b      	lsls	r3, r3, #2
 8028e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028e5c:	687a      	ldr	r2, [r7, #4]
 8028e5e:	4413      	add	r3, r2
 8028e60:	3304      	adds	r3, #4
 8028e62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8028e64:	697b      	ldr	r3, [r7, #20]
 8028e66:	78db      	ldrb	r3, [r3, #3]
 8028e68:	2b01      	cmp	r3, #1
 8028e6a:	d108      	bne.n	8028e7e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8028e6c:	697b      	ldr	r3, [r7, #20]
 8028e6e:	2200      	movs	r2, #0
 8028e70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8028e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e74:	b2db      	uxtb	r3, r3
 8028e76:	4619      	mov	r1, r3
 8028e78:	6878      	ldr	r0, [r7, #4]
 8028e7a:	f007 fdbf 	bl	80309fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8028e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e80:	015a      	lsls	r2, r3, #5
 8028e82:	69fb      	ldr	r3, [r7, #28]
 8028e84:	4413      	add	r3, r2
 8028e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028e8a:	461a      	mov	r2, r3
 8028e8c:	2302      	movs	r3, #2
 8028e8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8028e90:	693b      	ldr	r3, [r7, #16]
 8028e92:	f003 0320 	and.w	r3, r3, #32
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d008      	beq.n	8028eac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8028e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e9c:	015a      	lsls	r2, r3, #5
 8028e9e:	69fb      	ldr	r3, [r7, #28]
 8028ea0:	4413      	add	r3, r2
 8028ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028ea6:	461a      	mov	r2, r3
 8028ea8:	2320      	movs	r3, #32
 8028eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8028eac:	693b      	ldr	r3, [r7, #16]
 8028eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8028eb2:	2b00      	cmp	r3, #0
 8028eb4:	d009      	beq.n	8028eca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8028eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028eb8:	015a      	lsls	r2, r3, #5
 8028eba:	69fb      	ldr	r3, [r7, #28]
 8028ebc:	4413      	add	r3, r2
 8028ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028ec2:	461a      	mov	r2, r3
 8028ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8028ec8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8028eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ecc:	3301      	adds	r3, #1
 8028ece:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8028ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ed2:	085b      	lsrs	r3, r3, #1
 8028ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8028ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	f47f af62 	bne.w	8028da2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8028ede:	687b      	ldr	r3, [r7, #4]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	4618      	mov	r0, r3
 8028ee4:	f004 ff4c 	bl	802dd80 <USB_ReadInterrupts>
 8028ee8:	4603      	mov	r3, r0
 8028eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8028ef2:	f040 80db 	bne.w	80290ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8028ef6:	687b      	ldr	r3, [r7, #4]
 8028ef8:	681b      	ldr	r3, [r3, #0]
 8028efa:	4618      	mov	r0, r3
 8028efc:	f004 ff6d 	bl	802ddda <USB_ReadDevAllInEpInterrupt>
 8028f00:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8028f02:	2300      	movs	r3, #0
 8028f04:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8028f06:	e0cd      	b.n	80290a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8028f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f0a:	f003 0301 	and.w	r3, r3, #1
 8028f0e:	2b00      	cmp	r3, #0
 8028f10:	f000 80c2 	beq.w	8029098 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8028f14:	687b      	ldr	r3, [r7, #4]
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f1a:	b2d2      	uxtb	r2, r2
 8028f1c:	4611      	mov	r1, r2
 8028f1e:	4618      	mov	r0, r3
 8028f20:	f004 ff93 	bl	802de4a <USB_ReadDevInEPInterrupt>
 8028f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8028f26:	693b      	ldr	r3, [r7, #16]
 8028f28:	f003 0301 	and.w	r3, r3, #1
 8028f2c:	2b00      	cmp	r3, #0
 8028f2e:	d057      	beq.n	8028fe0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8028f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f32:	f003 030f 	and.w	r3, r3, #15
 8028f36:	2201      	movs	r2, #1
 8028f38:	fa02 f303 	lsl.w	r3, r2, r3
 8028f3c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8028f3e:	69fb      	ldr	r3, [r7, #28]
 8028f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028f46:	68fb      	ldr	r3, [r7, #12]
 8028f48:	43db      	mvns	r3, r3
 8028f4a:	69f9      	ldr	r1, [r7, #28]
 8028f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8028f50:	4013      	ands	r3, r2
 8028f52:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8028f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f56:	015a      	lsls	r2, r3, #5
 8028f58:	69fb      	ldr	r3, [r7, #28]
 8028f5a:	4413      	add	r3, r2
 8028f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028f60:	461a      	mov	r2, r3
 8028f62:	2301      	movs	r3, #1
 8028f64:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	691b      	ldr	r3, [r3, #16]
 8028f6a:	2b01      	cmp	r3, #1
 8028f6c:	d132      	bne.n	8028fd4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8028f6e:	6879      	ldr	r1, [r7, #4]
 8028f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f72:	4613      	mov	r3, r2
 8028f74:	00db      	lsls	r3, r3, #3
 8028f76:	4413      	add	r3, r2
 8028f78:	009b      	lsls	r3, r3, #2
 8028f7a:	440b      	add	r3, r1
 8028f7c:	334c      	adds	r3, #76	; 0x4c
 8028f7e:	6819      	ldr	r1, [r3, #0]
 8028f80:	6878      	ldr	r0, [r7, #4]
 8028f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f84:	4613      	mov	r3, r2
 8028f86:	00db      	lsls	r3, r3, #3
 8028f88:	4413      	add	r3, r2
 8028f8a:	009b      	lsls	r3, r3, #2
 8028f8c:	4403      	add	r3, r0
 8028f8e:	3348      	adds	r3, #72	; 0x48
 8028f90:	681b      	ldr	r3, [r3, #0]
 8028f92:	4419      	add	r1, r3
 8028f94:	6878      	ldr	r0, [r7, #4]
 8028f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f98:	4613      	mov	r3, r2
 8028f9a:	00db      	lsls	r3, r3, #3
 8028f9c:	4413      	add	r3, r2
 8028f9e:	009b      	lsls	r3, r3, #2
 8028fa0:	4403      	add	r3, r0
 8028fa2:	334c      	adds	r3, #76	; 0x4c
 8028fa4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8028fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fa8:	2b00      	cmp	r3, #0
 8028faa:	d113      	bne.n	8028fd4 <HAL_PCD_IRQHandler+0x3a2>
 8028fac:	6879      	ldr	r1, [r7, #4]
 8028fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fb0:	4613      	mov	r3, r2
 8028fb2:	00db      	lsls	r3, r3, #3
 8028fb4:	4413      	add	r3, r2
 8028fb6:	009b      	lsls	r3, r3, #2
 8028fb8:	440b      	add	r3, r1
 8028fba:	3354      	adds	r3, #84	; 0x54
 8028fbc:	681b      	ldr	r3, [r3, #0]
 8028fbe:	2b00      	cmp	r3, #0
 8028fc0:	d108      	bne.n	8028fd4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8028fc2:	687b      	ldr	r3, [r7, #4]
 8028fc4:	6818      	ldr	r0, [r3, #0]
 8028fc6:	687b      	ldr	r3, [r7, #4]
 8028fc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8028fcc:	461a      	mov	r2, r3
 8028fce:	2101      	movs	r1, #1
 8028fd0:	f004 ff9a 	bl	802df08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8028fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fd6:	b2db      	uxtb	r3, r3
 8028fd8:	4619      	mov	r1, r3
 8028fda:	6878      	ldr	r0, [r7, #4]
 8028fdc:	f007 fc89 	bl	80308f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8028fe0:	693b      	ldr	r3, [r7, #16]
 8028fe2:	f003 0308 	and.w	r3, r3, #8
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	d008      	beq.n	8028ffc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8028fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fec:	015a      	lsls	r2, r3, #5
 8028fee:	69fb      	ldr	r3, [r7, #28]
 8028ff0:	4413      	add	r3, r2
 8028ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8028ff6:	461a      	mov	r2, r3
 8028ff8:	2308      	movs	r3, #8
 8028ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8028ffc:	693b      	ldr	r3, [r7, #16]
 8028ffe:	f003 0310 	and.w	r3, r3, #16
 8029002:	2b00      	cmp	r3, #0
 8029004:	d008      	beq.n	8029018 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8029006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029008:	015a      	lsls	r2, r3, #5
 802900a:	69fb      	ldr	r3, [r7, #28]
 802900c:	4413      	add	r3, r2
 802900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029012:	461a      	mov	r2, r3
 8029014:	2310      	movs	r3, #16
 8029016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8029018:	693b      	ldr	r3, [r7, #16]
 802901a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802901e:	2b00      	cmp	r3, #0
 8029020:	d008      	beq.n	8029034 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8029022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029024:	015a      	lsls	r2, r3, #5
 8029026:	69fb      	ldr	r3, [r7, #28]
 8029028:	4413      	add	r3, r2
 802902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802902e:	461a      	mov	r2, r3
 8029030:	2340      	movs	r3, #64	; 0x40
 8029032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8029034:	693b      	ldr	r3, [r7, #16]
 8029036:	f003 0302 	and.w	r3, r3, #2
 802903a:	2b00      	cmp	r3, #0
 802903c:	d023      	beq.n	8029086 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802903e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029040:	6a38      	ldr	r0, [r7, #32]
 8029042:	f003 fe7b 	bl	802cd3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8029046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029048:	4613      	mov	r3, r2
 802904a:	00db      	lsls	r3, r3, #3
 802904c:	4413      	add	r3, r2
 802904e:	009b      	lsls	r3, r3, #2
 8029050:	3338      	adds	r3, #56	; 0x38
 8029052:	687a      	ldr	r2, [r7, #4]
 8029054:	4413      	add	r3, r2
 8029056:	3304      	adds	r3, #4
 8029058:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802905a:	697b      	ldr	r3, [r7, #20]
 802905c:	78db      	ldrb	r3, [r3, #3]
 802905e:	2b01      	cmp	r3, #1
 8029060:	d108      	bne.n	8029074 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8029062:	697b      	ldr	r3, [r7, #20]
 8029064:	2200      	movs	r2, #0
 8029066:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8029068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802906a:	b2db      	uxtb	r3, r3
 802906c:	4619      	mov	r1, r3
 802906e:	6878      	ldr	r0, [r7, #4]
 8029070:	f007 fcd6 	bl	8030a20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8029074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029076:	015a      	lsls	r2, r3, #5
 8029078:	69fb      	ldr	r3, [r7, #28]
 802907a:	4413      	add	r3, r2
 802907c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029080:	461a      	mov	r2, r3
 8029082:	2302      	movs	r3, #2
 8029084:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8029086:	693b      	ldr	r3, [r7, #16]
 8029088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802908c:	2b00      	cmp	r3, #0
 802908e:	d003      	beq.n	8029098 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8029090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8029092:	6878      	ldr	r0, [r7, #4]
 8029094:	f000 fcdb 	bl	8029a4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8029098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802909a:	3301      	adds	r3, #1
 802909c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80290a0:	085b      	lsrs	r3, r3, #1
 80290a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80290a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	f47f af2e 	bne.w	8028f08 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80290ac:	687b      	ldr	r3, [r7, #4]
 80290ae:	681b      	ldr	r3, [r3, #0]
 80290b0:	4618      	mov	r0, r3
 80290b2:	f004 fe65 	bl	802dd80 <USB_ReadInterrupts>
 80290b6:	4603      	mov	r3, r0
 80290b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80290bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80290c0:	d122      	bne.n	8029108 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80290c2:	69fb      	ldr	r3, [r7, #28]
 80290c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80290c8:	685b      	ldr	r3, [r3, #4]
 80290ca:	69fa      	ldr	r2, [r7, #28]
 80290cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80290d0:	f023 0301 	bic.w	r3, r3, #1
 80290d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80290dc:	2b01      	cmp	r3, #1
 80290de:	d108      	bne.n	80290f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80290e0:	687b      	ldr	r3, [r7, #4]
 80290e2:	2200      	movs	r2, #0
 80290e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80290e8:	2100      	movs	r1, #0
 80290ea:	6878      	ldr	r0, [r7, #4]
 80290ec:	f000 fec2 	bl	8029e74 <HAL_PCDEx_LPM_Callback>
 80290f0:	e002      	b.n	80290f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80290f2:	6878      	ldr	r0, [r7, #4]
 80290f4:	f007 fc74 	bl	80309e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80290f8:	687b      	ldr	r3, [r7, #4]
 80290fa:	681b      	ldr	r3, [r3, #0]
 80290fc:	695a      	ldr	r2, [r3, #20]
 80290fe:	687b      	ldr	r3, [r7, #4]
 8029100:	681b      	ldr	r3, [r3, #0]
 8029102:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8029106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	681b      	ldr	r3, [r3, #0]
 802910c:	4618      	mov	r0, r3
 802910e:	f004 fe37 	bl	802dd80 <USB_ReadInterrupts>
 8029112:	4603      	mov	r3, r0
 8029114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8029118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802911c:	d112      	bne.n	8029144 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802911e:	69fb      	ldr	r3, [r7, #28]
 8029120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029124:	689b      	ldr	r3, [r3, #8]
 8029126:	f003 0301 	and.w	r3, r3, #1
 802912a:	2b01      	cmp	r3, #1
 802912c:	d102      	bne.n	8029134 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802912e:	6878      	ldr	r0, [r7, #4]
 8029130:	f007 fc30 	bl	8030994 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8029134:	687b      	ldr	r3, [r7, #4]
 8029136:	681b      	ldr	r3, [r3, #0]
 8029138:	695a      	ldr	r2, [r3, #20]
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	681b      	ldr	r3, [r3, #0]
 802913e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8029142:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8029144:	687b      	ldr	r3, [r7, #4]
 8029146:	681b      	ldr	r3, [r3, #0]
 8029148:	4618      	mov	r0, r3
 802914a:	f004 fe19 	bl	802dd80 <USB_ReadInterrupts>
 802914e:	4603      	mov	r3, r0
 8029150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029158:	f040 80b7 	bne.w	80292ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802915c:	69fb      	ldr	r3, [r7, #28]
 802915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029162:	685b      	ldr	r3, [r3, #4]
 8029164:	69fa      	ldr	r2, [r7, #28]
 8029166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802916a:	f023 0301 	bic.w	r3, r3, #1
 802916e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8029170:	687b      	ldr	r3, [r7, #4]
 8029172:	681b      	ldr	r3, [r3, #0]
 8029174:	2110      	movs	r1, #16
 8029176:	4618      	mov	r0, r3
 8029178:	f003 fde0 	bl	802cd3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802917c:	2300      	movs	r3, #0
 802917e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029180:	e046      	b.n	8029210 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8029182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029184:	015a      	lsls	r2, r3, #5
 8029186:	69fb      	ldr	r3, [r7, #28]
 8029188:	4413      	add	r3, r2
 802918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802918e:	461a      	mov	r2, r3
 8029190:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029194:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8029196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029198:	015a      	lsls	r2, r3, #5
 802919a:	69fb      	ldr	r3, [r7, #28]
 802919c:	4413      	add	r3, r2
 802919e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80291a6:	0151      	lsls	r1, r2, #5
 80291a8:	69fa      	ldr	r2, [r7, #28]
 80291aa:	440a      	add	r2, r1
 80291ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80291b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80291b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80291b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80291b8:	015a      	lsls	r2, r3, #5
 80291ba:	69fb      	ldr	r3, [r7, #28]
 80291bc:	4413      	add	r3, r2
 80291be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80291c2:	461a      	mov	r2, r3
 80291c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80291c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80291ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80291cc:	015a      	lsls	r2, r3, #5
 80291ce:	69fb      	ldr	r3, [r7, #28]
 80291d0:	4413      	add	r3, r2
 80291d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80291da:	0151      	lsls	r1, r2, #5
 80291dc:	69fa      	ldr	r2, [r7, #28]
 80291de:	440a      	add	r2, r1
 80291e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80291e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80291e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80291ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80291ec:	015a      	lsls	r2, r3, #5
 80291ee:	69fb      	ldr	r3, [r7, #28]
 80291f0:	4413      	add	r3, r2
 80291f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80291fa:	0151      	lsls	r1, r2, #5
 80291fc:	69fa      	ldr	r2, [r7, #28]
 80291fe:	440a      	add	r2, r1
 8029200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8029204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8029208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802920c:	3301      	adds	r3, #1
 802920e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	685b      	ldr	r3, [r3, #4]
 8029214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029216:	429a      	cmp	r2, r3
 8029218:	d3b3      	bcc.n	8029182 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802921a:	69fb      	ldr	r3, [r7, #28]
 802921c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029220:	69db      	ldr	r3, [r3, #28]
 8029222:	69fa      	ldr	r2, [r7, #28]
 8029224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029228:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802922c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802922e:	687b      	ldr	r3, [r7, #4]
 8029230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029232:	2b00      	cmp	r3, #0
 8029234:	d016      	beq.n	8029264 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8029236:	69fb      	ldr	r3, [r7, #28]
 8029238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802923c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8029240:	69fa      	ldr	r2, [r7, #28]
 8029242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029246:	f043 030b 	orr.w	r3, r3, #11
 802924a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802924e:	69fb      	ldr	r3, [r7, #28]
 8029250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029256:	69fa      	ldr	r2, [r7, #28]
 8029258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802925c:	f043 030b 	orr.w	r3, r3, #11
 8029260:	6453      	str	r3, [r2, #68]	; 0x44
 8029262:	e015      	b.n	8029290 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8029264:	69fb      	ldr	r3, [r7, #28]
 8029266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802926a:	695b      	ldr	r3, [r3, #20]
 802926c:	69fa      	ldr	r2, [r7, #28]
 802926e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8029276:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 802927a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802927c:	69fb      	ldr	r3, [r7, #28]
 802927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029282:	691b      	ldr	r3, [r3, #16]
 8029284:	69fa      	ldr	r2, [r7, #28]
 8029286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802928a:	f043 030b 	orr.w	r3, r3, #11
 802928e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8029290:	69fb      	ldr	r3, [r7, #28]
 8029292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029296:	681b      	ldr	r3, [r3, #0]
 8029298:	69fa      	ldr	r2, [r7, #28]
 802929a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802929e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80292a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	6818      	ldr	r0, [r3, #0]
 80292a8:	687b      	ldr	r3, [r7, #4]
 80292aa:	691b      	ldr	r3, [r3, #16]
 80292ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80292ae:	687b      	ldr	r3, [r7, #4]
 80292b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80292b4:	461a      	mov	r2, r3
 80292b6:	f004 fe27 	bl	802df08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80292ba:	687b      	ldr	r3, [r7, #4]
 80292bc:	681b      	ldr	r3, [r3, #0]
 80292be:	695a      	ldr	r2, [r3, #20]
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	681b      	ldr	r3, [r3, #0]
 80292c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80292c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80292ca:	687b      	ldr	r3, [r7, #4]
 80292cc:	681b      	ldr	r3, [r3, #0]
 80292ce:	4618      	mov	r0, r3
 80292d0:	f004 fd56 	bl	802dd80 <USB_ReadInterrupts>
 80292d4:	4603      	mov	r3, r0
 80292d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80292da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80292de:	d124      	bne.n	802932a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	681b      	ldr	r3, [r3, #0]
 80292e4:	4618      	mov	r0, r3
 80292e6:	f004 fdec 	bl	802dec2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80292ea:	687b      	ldr	r3, [r7, #4]
 80292ec:	681b      	ldr	r3, [r3, #0]
 80292ee:	4618      	mov	r0, r3
 80292f0:	f003 fda1 	bl	802ce36 <USB_GetDevSpeed>
 80292f4:	4603      	mov	r3, r0
 80292f6:	461a      	mov	r2, r3
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	681c      	ldr	r4, [r3, #0]
 8029300:	f001 fa02 	bl	802a708 <HAL_RCC_GetHCLKFreq>
 8029304:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8029306:	687b      	ldr	r3, [r7, #4]
 8029308:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802930a:	b2db      	uxtb	r3, r3
 802930c:	461a      	mov	r2, r3
 802930e:	4620      	mov	r0, r4
 8029310:	f003 faa0 	bl	802c854 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8029314:	6878      	ldr	r0, [r7, #4]
 8029316:	f007 fb14 	bl	8030942 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	681b      	ldr	r3, [r3, #0]
 802931e:	695a      	ldr	r2, [r3, #20]
 8029320:	687b      	ldr	r3, [r7, #4]
 8029322:	681b      	ldr	r3, [r3, #0]
 8029324:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8029328:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 802932a:	687b      	ldr	r3, [r7, #4]
 802932c:	681b      	ldr	r3, [r3, #0]
 802932e:	4618      	mov	r0, r3
 8029330:	f004 fd26 	bl	802dd80 <USB_ReadInterrupts>
 8029334:	4603      	mov	r3, r0
 8029336:	f003 0308 	and.w	r3, r3, #8
 802933a:	2b08      	cmp	r3, #8
 802933c:	d10a      	bne.n	8029354 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802933e:	6878      	ldr	r0, [r7, #4]
 8029340:	f007 faf1 	bl	8030926 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8029344:	687b      	ldr	r3, [r7, #4]
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	695a      	ldr	r2, [r3, #20]
 802934a:	687b      	ldr	r3, [r7, #4]
 802934c:	681b      	ldr	r3, [r3, #0]
 802934e:	f002 0208 	and.w	r2, r2, #8
 8029352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8029354:	687b      	ldr	r3, [r7, #4]
 8029356:	681b      	ldr	r3, [r3, #0]
 8029358:	4618      	mov	r0, r3
 802935a:	f004 fd11 	bl	802dd80 <USB_ReadInterrupts>
 802935e:	4603      	mov	r3, r0
 8029360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029364:	2b80      	cmp	r3, #128	; 0x80
 8029366:	d122      	bne.n	80293ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8029368:	6a3b      	ldr	r3, [r7, #32]
 802936a:	699b      	ldr	r3, [r3, #24]
 802936c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029370:	6a3b      	ldr	r3, [r7, #32]
 8029372:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029374:	2301      	movs	r3, #1
 8029376:	627b      	str	r3, [r7, #36]	; 0x24
 8029378:	e014      	b.n	80293a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 802937a:	6879      	ldr	r1, [r7, #4]
 802937c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802937e:	4613      	mov	r3, r2
 8029380:	00db      	lsls	r3, r3, #3
 8029382:	4413      	add	r3, r2
 8029384:	009b      	lsls	r3, r3, #2
 8029386:	440b      	add	r3, r1
 8029388:	f203 237f 	addw	r3, r3, #639	; 0x27f
 802938c:	781b      	ldrb	r3, [r3, #0]
 802938e:	2b01      	cmp	r3, #1
 8029390:	d105      	bne.n	802939e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8029392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029394:	b2db      	uxtb	r3, r3
 8029396:	4619      	mov	r1, r3
 8029398:	6878      	ldr	r0, [r7, #4]
 802939a:	f000 fb27 	bl	80299ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80293a0:	3301      	adds	r3, #1
 80293a2:	627b      	str	r3, [r7, #36]	; 0x24
 80293a4:	687b      	ldr	r3, [r7, #4]
 80293a6:	685b      	ldr	r3, [r3, #4]
 80293a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80293aa:	429a      	cmp	r2, r3
 80293ac:	d3e5      	bcc.n	802937a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80293ae:	687b      	ldr	r3, [r7, #4]
 80293b0:	681b      	ldr	r3, [r3, #0]
 80293b2:	4618      	mov	r0, r3
 80293b4:	f004 fce4 	bl	802dd80 <USB_ReadInterrupts>
 80293b8:	4603      	mov	r3, r0
 80293ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80293be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80293c2:	d13b      	bne.n	802943c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80293c4:	2301      	movs	r3, #1
 80293c6:	627b      	str	r3, [r7, #36]	; 0x24
 80293c8:	e02b      	b.n	8029422 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80293ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80293cc:	015a      	lsls	r2, r3, #5
 80293ce:	69fb      	ldr	r3, [r7, #28]
 80293d0:	4413      	add	r3, r2
 80293d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80293d6:	681b      	ldr	r3, [r3, #0]
 80293d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80293da:	6879      	ldr	r1, [r7, #4]
 80293dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80293de:	4613      	mov	r3, r2
 80293e0:	00db      	lsls	r3, r3, #3
 80293e2:	4413      	add	r3, r2
 80293e4:	009b      	lsls	r3, r3, #2
 80293e6:	440b      	add	r3, r1
 80293e8:	3340      	adds	r3, #64	; 0x40
 80293ea:	781b      	ldrb	r3, [r3, #0]
 80293ec:	2b01      	cmp	r3, #1
 80293ee:	d115      	bne.n	802941c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80293f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80293f2:	2b00      	cmp	r3, #0
 80293f4:	da12      	bge.n	802941c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80293f6:	6879      	ldr	r1, [r7, #4]
 80293f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80293fa:	4613      	mov	r3, r2
 80293fc:	00db      	lsls	r3, r3, #3
 80293fe:	4413      	add	r3, r2
 8029400:	009b      	lsls	r3, r3, #2
 8029402:	440b      	add	r3, r1
 8029404:	333f      	adds	r3, #63	; 0x3f
 8029406:	2201      	movs	r2, #1
 8029408:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 802940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802940c:	b2db      	uxtb	r3, r3
 802940e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8029412:	b2db      	uxtb	r3, r3
 8029414:	4619      	mov	r1, r3
 8029416:	6878      	ldr	r0, [r7, #4]
 8029418:	f000 fae8 	bl	80299ec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802941e:	3301      	adds	r3, #1
 8029420:	627b      	str	r3, [r7, #36]	; 0x24
 8029422:	687b      	ldr	r3, [r7, #4]
 8029424:	685b      	ldr	r3, [r3, #4]
 8029426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029428:	429a      	cmp	r2, r3
 802942a:	d3ce      	bcc.n	80293ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 802942c:	687b      	ldr	r3, [r7, #4]
 802942e:	681b      	ldr	r3, [r3, #0]
 8029430:	695a      	ldr	r2, [r3, #20]
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	681b      	ldr	r3, [r3, #0]
 8029436:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 802943a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 802943c:	687b      	ldr	r3, [r7, #4]
 802943e:	681b      	ldr	r3, [r3, #0]
 8029440:	4618      	mov	r0, r3
 8029442:	f004 fc9d 	bl	802dd80 <USB_ReadInterrupts>
 8029446:	4603      	mov	r3, r0
 8029448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802944c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8029450:	d155      	bne.n	80294fe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029452:	2301      	movs	r3, #1
 8029454:	627b      	str	r3, [r7, #36]	; 0x24
 8029456:	e045      	b.n	80294e4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8029458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802945a:	015a      	lsls	r2, r3, #5
 802945c:	69fb      	ldr	r3, [r7, #28]
 802945e:	4413      	add	r3, r2
 8029460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029464:	681b      	ldr	r3, [r3, #0]
 8029466:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029468:	6879      	ldr	r1, [r7, #4]
 802946a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802946c:	4613      	mov	r3, r2
 802946e:	00db      	lsls	r3, r3, #3
 8029470:	4413      	add	r3, r2
 8029472:	009b      	lsls	r3, r3, #2
 8029474:	440b      	add	r3, r1
 8029476:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802947a:	781b      	ldrb	r3, [r3, #0]
 802947c:	2b01      	cmp	r3, #1
 802947e:	d12e      	bne.n	80294de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029480:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029482:	2b00      	cmp	r3, #0
 8029484:	da2b      	bge.n	80294de <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8029486:	69bb      	ldr	r3, [r7, #24]
 8029488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 802948c:	687b      	ldr	r3, [r7, #4]
 802948e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8029492:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029496:	429a      	cmp	r2, r3
 8029498:	d121      	bne.n	80294de <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 802949a:	6879      	ldr	r1, [r7, #4]
 802949c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802949e:	4613      	mov	r3, r2
 80294a0:	00db      	lsls	r3, r3, #3
 80294a2:	4413      	add	r3, r2
 80294a4:	009b      	lsls	r3, r3, #2
 80294a6:	440b      	add	r3, r1
 80294a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80294ac:	2201      	movs	r2, #1
 80294ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80294b0:	6a3b      	ldr	r3, [r7, #32]
 80294b2:	699b      	ldr	r3, [r3, #24]
 80294b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80294b8:	6a3b      	ldr	r3, [r7, #32]
 80294ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80294bc:	6a3b      	ldr	r3, [r7, #32]
 80294be:	695b      	ldr	r3, [r3, #20]
 80294c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80294c4:	2b00      	cmp	r3, #0
 80294c6:	d10a      	bne.n	80294de <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80294c8:	69fb      	ldr	r3, [r7, #28]
 80294ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80294ce:	685b      	ldr	r3, [r3, #4]
 80294d0:	69fa      	ldr	r2, [r7, #28]
 80294d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80294d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80294da:	6053      	str	r3, [r2, #4]
            break;
 80294dc:	e007      	b.n	80294ee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80294de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294e0:	3301      	adds	r3, #1
 80294e2:	627b      	str	r3, [r7, #36]	; 0x24
 80294e4:	687b      	ldr	r3, [r7, #4]
 80294e6:	685b      	ldr	r3, [r3, #4]
 80294e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294ea:	429a      	cmp	r2, r3
 80294ec:	d3b4      	bcc.n	8029458 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	681b      	ldr	r3, [r3, #0]
 80294f2:	695a      	ldr	r2, [r3, #20]
 80294f4:	687b      	ldr	r3, [r7, #4]
 80294f6:	681b      	ldr	r3, [r3, #0]
 80294f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80294fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80294fe:	687b      	ldr	r3, [r7, #4]
 8029500:	681b      	ldr	r3, [r3, #0]
 8029502:	4618      	mov	r0, r3
 8029504:	f004 fc3c 	bl	802dd80 <USB_ReadInterrupts>
 8029508:	4603      	mov	r3, r0
 802950a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802950e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029512:	d10a      	bne.n	802952a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8029514:	6878      	ldr	r0, [r7, #4]
 8029516:	f007 fa95 	bl	8030a44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 802951a:	687b      	ldr	r3, [r7, #4]
 802951c:	681b      	ldr	r3, [r3, #0]
 802951e:	695a      	ldr	r2, [r3, #20]
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8029528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	4618      	mov	r0, r3
 8029530:	f004 fc26 	bl	802dd80 <USB_ReadInterrupts>
 8029534:	4603      	mov	r3, r0
 8029536:	f003 0304 	and.w	r3, r3, #4
 802953a:	2b04      	cmp	r3, #4
 802953c:	d115      	bne.n	802956a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 802953e:	687b      	ldr	r3, [r7, #4]
 8029540:	681b      	ldr	r3, [r3, #0]
 8029542:	685b      	ldr	r3, [r3, #4]
 8029544:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8029546:	69bb      	ldr	r3, [r7, #24]
 8029548:	f003 0304 	and.w	r3, r3, #4
 802954c:	2b00      	cmp	r3, #0
 802954e:	d002      	beq.n	8029556 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8029550:	6878      	ldr	r0, [r7, #4]
 8029552:	f007 fa85 	bl	8030a60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8029556:	687b      	ldr	r3, [r7, #4]
 8029558:	681b      	ldr	r3, [r3, #0]
 802955a:	6859      	ldr	r1, [r3, #4]
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	69ba      	ldr	r2, [r7, #24]
 8029562:	430a      	orrs	r2, r1
 8029564:	605a      	str	r2, [r3, #4]
 8029566:	e000      	b.n	802956a <HAL_PCD_IRQHandler+0x938>
      return;
 8029568:	bf00      	nop
    }
  }
}
 802956a:	3734      	adds	r7, #52	; 0x34
 802956c:	46bd      	mov	sp, r7
 802956e:	bd90      	pop	{r4, r7, pc}

08029570 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8029570:	b580      	push	{r7, lr}
 8029572:	b082      	sub	sp, #8
 8029574:	af00      	add	r7, sp, #0
 8029576:	6078      	str	r0, [r7, #4]
 8029578:	460b      	mov	r3, r1
 802957a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029582:	2b01      	cmp	r3, #1
 8029584:	d101      	bne.n	802958a <HAL_PCD_SetAddress+0x1a>
 8029586:	2302      	movs	r3, #2
 8029588:	e013      	b.n	80295b2 <HAL_PCD_SetAddress+0x42>
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	2201      	movs	r2, #1
 802958e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8029592:	687b      	ldr	r3, [r7, #4]
 8029594:	78fa      	ldrb	r2, [r7, #3]
 8029596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	681b      	ldr	r3, [r3, #0]
 802959e:	78fa      	ldrb	r2, [r7, #3]
 80295a0:	4611      	mov	r1, r2
 80295a2:	4618      	mov	r0, r3
 80295a4:	f004 fb84 	bl	802dcb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80295a8:	687b      	ldr	r3, [r7, #4]
 80295aa:	2200      	movs	r2, #0
 80295ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80295b0:	2300      	movs	r3, #0
}
 80295b2:	4618      	mov	r0, r3
 80295b4:	3708      	adds	r7, #8
 80295b6:	46bd      	mov	sp, r7
 80295b8:	bd80      	pop	{r7, pc}

080295ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80295ba:	b580      	push	{r7, lr}
 80295bc:	b084      	sub	sp, #16
 80295be:	af00      	add	r7, sp, #0
 80295c0:	6078      	str	r0, [r7, #4]
 80295c2:	4608      	mov	r0, r1
 80295c4:	4611      	mov	r1, r2
 80295c6:	461a      	mov	r2, r3
 80295c8:	4603      	mov	r3, r0
 80295ca:	70fb      	strb	r3, [r7, #3]
 80295cc:	460b      	mov	r3, r1
 80295ce:	803b      	strh	r3, [r7, #0]
 80295d0:	4613      	mov	r3, r2
 80295d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80295d4:	2300      	movs	r3, #0
 80295d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80295d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80295dc:	2b00      	cmp	r3, #0
 80295de:	da0f      	bge.n	8029600 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80295e0:	78fb      	ldrb	r3, [r7, #3]
 80295e2:	f003 020f 	and.w	r2, r3, #15
 80295e6:	4613      	mov	r3, r2
 80295e8:	00db      	lsls	r3, r3, #3
 80295ea:	4413      	add	r3, r2
 80295ec:	009b      	lsls	r3, r3, #2
 80295ee:	3338      	adds	r3, #56	; 0x38
 80295f0:	687a      	ldr	r2, [r7, #4]
 80295f2:	4413      	add	r3, r2
 80295f4:	3304      	adds	r3, #4
 80295f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80295f8:	68fb      	ldr	r3, [r7, #12]
 80295fa:	2201      	movs	r2, #1
 80295fc:	705a      	strb	r2, [r3, #1]
 80295fe:	e00f      	b.n	8029620 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029600:	78fb      	ldrb	r3, [r7, #3]
 8029602:	f003 020f 	and.w	r2, r3, #15
 8029606:	4613      	mov	r3, r2
 8029608:	00db      	lsls	r3, r3, #3
 802960a:	4413      	add	r3, r2
 802960c:	009b      	lsls	r3, r3, #2
 802960e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029612:	687a      	ldr	r2, [r7, #4]
 8029614:	4413      	add	r3, r2
 8029616:	3304      	adds	r3, #4
 8029618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 802961a:	68fb      	ldr	r3, [r7, #12]
 802961c:	2200      	movs	r2, #0
 802961e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8029620:	78fb      	ldrb	r3, [r7, #3]
 8029622:	f003 030f 	and.w	r3, r3, #15
 8029626:	b2da      	uxtb	r2, r3
 8029628:	68fb      	ldr	r3, [r7, #12]
 802962a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 802962c:	883a      	ldrh	r2, [r7, #0]
 802962e:	68fb      	ldr	r3, [r7, #12]
 8029630:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8029632:	68fb      	ldr	r3, [r7, #12]
 8029634:	78ba      	ldrb	r2, [r7, #2]
 8029636:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8029638:	68fb      	ldr	r3, [r7, #12]
 802963a:	785b      	ldrb	r3, [r3, #1]
 802963c:	2b00      	cmp	r3, #0
 802963e:	d004      	beq.n	802964a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8029640:	68fb      	ldr	r3, [r7, #12]
 8029642:	781b      	ldrb	r3, [r3, #0]
 8029644:	b29a      	uxth	r2, r3
 8029646:	68fb      	ldr	r3, [r7, #12]
 8029648:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 802964a:	78bb      	ldrb	r3, [r7, #2]
 802964c:	2b02      	cmp	r3, #2
 802964e:	d102      	bne.n	8029656 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8029650:	68fb      	ldr	r3, [r7, #12]
 8029652:	2200      	movs	r2, #0
 8029654:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802965c:	2b01      	cmp	r3, #1
 802965e:	d101      	bne.n	8029664 <HAL_PCD_EP_Open+0xaa>
 8029660:	2302      	movs	r3, #2
 8029662:	e00e      	b.n	8029682 <HAL_PCD_EP_Open+0xc8>
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	2201      	movs	r2, #1
 8029668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	681b      	ldr	r3, [r3, #0]
 8029670:	68f9      	ldr	r1, [r7, #12]
 8029672:	4618      	mov	r0, r3
 8029674:	f003 fc04 	bl	802ce80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	2200      	movs	r2, #0
 802967c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8029680:	7afb      	ldrb	r3, [r7, #11]
}
 8029682:	4618      	mov	r0, r3
 8029684:	3710      	adds	r7, #16
 8029686:	46bd      	mov	sp, r7
 8029688:	bd80      	pop	{r7, pc}

0802968a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 802968a:	b580      	push	{r7, lr}
 802968c:	b084      	sub	sp, #16
 802968e:	af00      	add	r7, sp, #0
 8029690:	6078      	str	r0, [r7, #4]
 8029692:	460b      	mov	r3, r1
 8029694:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802969a:	2b00      	cmp	r3, #0
 802969c:	da0f      	bge.n	80296be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802969e:	78fb      	ldrb	r3, [r7, #3]
 80296a0:	f003 020f 	and.w	r2, r3, #15
 80296a4:	4613      	mov	r3, r2
 80296a6:	00db      	lsls	r3, r3, #3
 80296a8:	4413      	add	r3, r2
 80296aa:	009b      	lsls	r3, r3, #2
 80296ac:	3338      	adds	r3, #56	; 0x38
 80296ae:	687a      	ldr	r2, [r7, #4]
 80296b0:	4413      	add	r3, r2
 80296b2:	3304      	adds	r3, #4
 80296b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80296b6:	68fb      	ldr	r3, [r7, #12]
 80296b8:	2201      	movs	r2, #1
 80296ba:	705a      	strb	r2, [r3, #1]
 80296bc:	e00f      	b.n	80296de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80296be:	78fb      	ldrb	r3, [r7, #3]
 80296c0:	f003 020f 	and.w	r2, r3, #15
 80296c4:	4613      	mov	r3, r2
 80296c6:	00db      	lsls	r3, r3, #3
 80296c8:	4413      	add	r3, r2
 80296ca:	009b      	lsls	r3, r3, #2
 80296cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80296d0:	687a      	ldr	r2, [r7, #4]
 80296d2:	4413      	add	r3, r2
 80296d4:	3304      	adds	r3, #4
 80296d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80296d8:	68fb      	ldr	r3, [r7, #12]
 80296da:	2200      	movs	r2, #0
 80296dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80296de:	78fb      	ldrb	r3, [r7, #3]
 80296e0:	f003 030f 	and.w	r3, r3, #15
 80296e4:	b2da      	uxtb	r2, r3
 80296e6:	68fb      	ldr	r3, [r7, #12]
 80296e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80296f0:	2b01      	cmp	r3, #1
 80296f2:	d101      	bne.n	80296f8 <HAL_PCD_EP_Close+0x6e>
 80296f4:	2302      	movs	r3, #2
 80296f6:	e00e      	b.n	8029716 <HAL_PCD_EP_Close+0x8c>
 80296f8:	687b      	ldr	r3, [r7, #4]
 80296fa:	2201      	movs	r2, #1
 80296fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	681b      	ldr	r3, [r3, #0]
 8029704:	68f9      	ldr	r1, [r7, #12]
 8029706:	4618      	mov	r0, r3
 8029708:	f003 fc42 	bl	802cf90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	2200      	movs	r2, #0
 8029710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8029714:	2300      	movs	r3, #0
}
 8029716:	4618      	mov	r0, r3
 8029718:	3710      	adds	r7, #16
 802971a:	46bd      	mov	sp, r7
 802971c:	bd80      	pop	{r7, pc}

0802971e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802971e:	b580      	push	{r7, lr}
 8029720:	b086      	sub	sp, #24
 8029722:	af00      	add	r7, sp, #0
 8029724:	60f8      	str	r0, [r7, #12]
 8029726:	607a      	str	r2, [r7, #4]
 8029728:	603b      	str	r3, [r7, #0]
 802972a:	460b      	mov	r3, r1
 802972c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802972e:	7afb      	ldrb	r3, [r7, #11]
 8029730:	f003 020f 	and.w	r2, r3, #15
 8029734:	4613      	mov	r3, r2
 8029736:	00db      	lsls	r3, r3, #3
 8029738:	4413      	add	r3, r2
 802973a:	009b      	lsls	r3, r3, #2
 802973c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029740:	68fa      	ldr	r2, [r7, #12]
 8029742:	4413      	add	r3, r2
 8029744:	3304      	adds	r3, #4
 8029746:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8029748:	697b      	ldr	r3, [r7, #20]
 802974a:	687a      	ldr	r2, [r7, #4]
 802974c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 802974e:	697b      	ldr	r3, [r7, #20]
 8029750:	683a      	ldr	r2, [r7, #0]
 8029752:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029754:	697b      	ldr	r3, [r7, #20]
 8029756:	2200      	movs	r2, #0
 8029758:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 802975a:	697b      	ldr	r3, [r7, #20]
 802975c:	2200      	movs	r2, #0
 802975e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029760:	7afb      	ldrb	r3, [r7, #11]
 8029762:	f003 030f 	and.w	r3, r3, #15
 8029766:	b2da      	uxtb	r2, r3
 8029768:	697b      	ldr	r3, [r7, #20]
 802976a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 802976c:	68fb      	ldr	r3, [r7, #12]
 802976e:	691b      	ldr	r3, [r3, #16]
 8029770:	2b01      	cmp	r3, #1
 8029772:	d102      	bne.n	802977a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029774:	687a      	ldr	r2, [r7, #4]
 8029776:	697b      	ldr	r3, [r7, #20]
 8029778:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802977a:	7afb      	ldrb	r3, [r7, #11]
 802977c:	f003 030f 	and.w	r3, r3, #15
 8029780:	2b00      	cmp	r3, #0
 8029782:	d109      	bne.n	8029798 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029784:	68fb      	ldr	r3, [r7, #12]
 8029786:	6818      	ldr	r0, [r3, #0]
 8029788:	68fb      	ldr	r3, [r7, #12]
 802978a:	691b      	ldr	r3, [r3, #16]
 802978c:	b2db      	uxtb	r3, r3
 802978e:	461a      	mov	r2, r3
 8029790:	6979      	ldr	r1, [r7, #20]
 8029792:	f003 ff21 	bl	802d5d8 <USB_EP0StartXfer>
 8029796:	e008      	b.n	80297aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029798:	68fb      	ldr	r3, [r7, #12]
 802979a:	6818      	ldr	r0, [r3, #0]
 802979c:	68fb      	ldr	r3, [r7, #12]
 802979e:	691b      	ldr	r3, [r3, #16]
 80297a0:	b2db      	uxtb	r3, r3
 80297a2:	461a      	mov	r2, r3
 80297a4:	6979      	ldr	r1, [r7, #20]
 80297a6:	f003 fccf 	bl	802d148 <USB_EPStartXfer>
  }

  return HAL_OK;
 80297aa:	2300      	movs	r3, #0
}
 80297ac:	4618      	mov	r0, r3
 80297ae:	3718      	adds	r7, #24
 80297b0:	46bd      	mov	sp, r7
 80297b2:	bd80      	pop	{r7, pc}

080297b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80297b4:	b480      	push	{r7}
 80297b6:	b083      	sub	sp, #12
 80297b8:	af00      	add	r7, sp, #0
 80297ba:	6078      	str	r0, [r7, #4]
 80297bc:	460b      	mov	r3, r1
 80297be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80297c0:	78fb      	ldrb	r3, [r7, #3]
 80297c2:	f003 020f 	and.w	r2, r3, #15
 80297c6:	6879      	ldr	r1, [r7, #4]
 80297c8:	4613      	mov	r3, r2
 80297ca:	00db      	lsls	r3, r3, #3
 80297cc:	4413      	add	r3, r2
 80297ce:	009b      	lsls	r3, r3, #2
 80297d0:	440b      	add	r3, r1
 80297d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80297d6:	681b      	ldr	r3, [r3, #0]
}
 80297d8:	4618      	mov	r0, r3
 80297da:	370c      	adds	r7, #12
 80297dc:	46bd      	mov	sp, r7
 80297de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297e2:	4770      	bx	lr

080297e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80297e4:	b580      	push	{r7, lr}
 80297e6:	b086      	sub	sp, #24
 80297e8:	af00      	add	r7, sp, #0
 80297ea:	60f8      	str	r0, [r7, #12]
 80297ec:	607a      	str	r2, [r7, #4]
 80297ee:	603b      	str	r3, [r7, #0]
 80297f0:	460b      	mov	r3, r1
 80297f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80297f4:	7afb      	ldrb	r3, [r7, #11]
 80297f6:	f003 020f 	and.w	r2, r3, #15
 80297fa:	4613      	mov	r3, r2
 80297fc:	00db      	lsls	r3, r3, #3
 80297fe:	4413      	add	r3, r2
 8029800:	009b      	lsls	r3, r3, #2
 8029802:	3338      	adds	r3, #56	; 0x38
 8029804:	68fa      	ldr	r2, [r7, #12]
 8029806:	4413      	add	r3, r2
 8029808:	3304      	adds	r3, #4
 802980a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 802980c:	697b      	ldr	r3, [r7, #20]
 802980e:	687a      	ldr	r2, [r7, #4]
 8029810:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8029812:	697b      	ldr	r3, [r7, #20]
 8029814:	683a      	ldr	r2, [r7, #0]
 8029816:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029818:	697b      	ldr	r3, [r7, #20]
 802981a:	2200      	movs	r2, #0
 802981c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 802981e:	697b      	ldr	r3, [r7, #20]
 8029820:	2201      	movs	r2, #1
 8029822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029824:	7afb      	ldrb	r3, [r7, #11]
 8029826:	f003 030f 	and.w	r3, r3, #15
 802982a:	b2da      	uxtb	r2, r3
 802982c:	697b      	ldr	r3, [r7, #20]
 802982e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029830:	68fb      	ldr	r3, [r7, #12]
 8029832:	691b      	ldr	r3, [r3, #16]
 8029834:	2b01      	cmp	r3, #1
 8029836:	d102      	bne.n	802983e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029838:	687a      	ldr	r2, [r7, #4]
 802983a:	697b      	ldr	r3, [r7, #20]
 802983c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802983e:	7afb      	ldrb	r3, [r7, #11]
 8029840:	f003 030f 	and.w	r3, r3, #15
 8029844:	2b00      	cmp	r3, #0
 8029846:	d109      	bne.n	802985c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029848:	68fb      	ldr	r3, [r7, #12]
 802984a:	6818      	ldr	r0, [r3, #0]
 802984c:	68fb      	ldr	r3, [r7, #12]
 802984e:	691b      	ldr	r3, [r3, #16]
 8029850:	b2db      	uxtb	r3, r3
 8029852:	461a      	mov	r2, r3
 8029854:	6979      	ldr	r1, [r7, #20]
 8029856:	f003 febf 	bl	802d5d8 <USB_EP0StartXfer>
 802985a:	e008      	b.n	802986e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 802985c:	68fb      	ldr	r3, [r7, #12]
 802985e:	6818      	ldr	r0, [r3, #0]
 8029860:	68fb      	ldr	r3, [r7, #12]
 8029862:	691b      	ldr	r3, [r3, #16]
 8029864:	b2db      	uxtb	r3, r3
 8029866:	461a      	mov	r2, r3
 8029868:	6979      	ldr	r1, [r7, #20]
 802986a:	f003 fc6d 	bl	802d148 <USB_EPStartXfer>
  }

  return HAL_OK;
 802986e:	2300      	movs	r3, #0
}
 8029870:	4618      	mov	r0, r3
 8029872:	3718      	adds	r7, #24
 8029874:	46bd      	mov	sp, r7
 8029876:	bd80      	pop	{r7, pc}

08029878 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029878:	b580      	push	{r7, lr}
 802987a:	b084      	sub	sp, #16
 802987c:	af00      	add	r7, sp, #0
 802987e:	6078      	str	r0, [r7, #4]
 8029880:	460b      	mov	r3, r1
 8029882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8029884:	78fb      	ldrb	r3, [r7, #3]
 8029886:	f003 020f 	and.w	r2, r3, #15
 802988a:	687b      	ldr	r3, [r7, #4]
 802988c:	685b      	ldr	r3, [r3, #4]
 802988e:	429a      	cmp	r2, r3
 8029890:	d901      	bls.n	8029896 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8029892:	2301      	movs	r3, #1
 8029894:	e050      	b.n	8029938 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802989a:	2b00      	cmp	r3, #0
 802989c:	da0f      	bge.n	80298be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802989e:	78fb      	ldrb	r3, [r7, #3]
 80298a0:	f003 020f 	and.w	r2, r3, #15
 80298a4:	4613      	mov	r3, r2
 80298a6:	00db      	lsls	r3, r3, #3
 80298a8:	4413      	add	r3, r2
 80298aa:	009b      	lsls	r3, r3, #2
 80298ac:	3338      	adds	r3, #56	; 0x38
 80298ae:	687a      	ldr	r2, [r7, #4]
 80298b0:	4413      	add	r3, r2
 80298b2:	3304      	adds	r3, #4
 80298b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80298b6:	68fb      	ldr	r3, [r7, #12]
 80298b8:	2201      	movs	r2, #1
 80298ba:	705a      	strb	r2, [r3, #1]
 80298bc:	e00d      	b.n	80298da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80298be:	78fa      	ldrb	r2, [r7, #3]
 80298c0:	4613      	mov	r3, r2
 80298c2:	00db      	lsls	r3, r3, #3
 80298c4:	4413      	add	r3, r2
 80298c6:	009b      	lsls	r3, r3, #2
 80298c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80298cc:	687a      	ldr	r2, [r7, #4]
 80298ce:	4413      	add	r3, r2
 80298d0:	3304      	adds	r3, #4
 80298d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80298d4:	68fb      	ldr	r3, [r7, #12]
 80298d6:	2200      	movs	r2, #0
 80298d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80298da:	68fb      	ldr	r3, [r7, #12]
 80298dc:	2201      	movs	r2, #1
 80298de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80298e0:	78fb      	ldrb	r3, [r7, #3]
 80298e2:	f003 030f 	and.w	r3, r3, #15
 80298e6:	b2da      	uxtb	r2, r3
 80298e8:	68fb      	ldr	r3, [r7, #12]
 80298ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80298ec:	687b      	ldr	r3, [r7, #4]
 80298ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80298f2:	2b01      	cmp	r3, #1
 80298f4:	d101      	bne.n	80298fa <HAL_PCD_EP_SetStall+0x82>
 80298f6:	2302      	movs	r3, #2
 80298f8:	e01e      	b.n	8029938 <HAL_PCD_EP_SetStall+0xc0>
 80298fa:	687b      	ldr	r3, [r7, #4]
 80298fc:	2201      	movs	r2, #1
 80298fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	681b      	ldr	r3, [r3, #0]
 8029906:	68f9      	ldr	r1, [r7, #12]
 8029908:	4618      	mov	r0, r3
 802990a:	f004 f8fd 	bl	802db08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802990e:	78fb      	ldrb	r3, [r7, #3]
 8029910:	f003 030f 	and.w	r3, r3, #15
 8029914:	2b00      	cmp	r3, #0
 8029916:	d10a      	bne.n	802992e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8029918:	687b      	ldr	r3, [r7, #4]
 802991a:	6818      	ldr	r0, [r3, #0]
 802991c:	687b      	ldr	r3, [r7, #4]
 802991e:	691b      	ldr	r3, [r3, #16]
 8029920:	b2d9      	uxtb	r1, r3
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029928:	461a      	mov	r2, r3
 802992a:	f004 faed 	bl	802df08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 802992e:	687b      	ldr	r3, [r7, #4]
 8029930:	2200      	movs	r2, #0
 8029932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029936:	2300      	movs	r3, #0
}
 8029938:	4618      	mov	r0, r3
 802993a:	3710      	adds	r7, #16
 802993c:	46bd      	mov	sp, r7
 802993e:	bd80      	pop	{r7, pc}

08029940 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029940:	b580      	push	{r7, lr}
 8029942:	b084      	sub	sp, #16
 8029944:	af00      	add	r7, sp, #0
 8029946:	6078      	str	r0, [r7, #4]
 8029948:	460b      	mov	r3, r1
 802994a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 802994c:	78fb      	ldrb	r3, [r7, #3]
 802994e:	f003 020f 	and.w	r2, r3, #15
 8029952:	687b      	ldr	r3, [r7, #4]
 8029954:	685b      	ldr	r3, [r3, #4]
 8029956:	429a      	cmp	r2, r3
 8029958:	d901      	bls.n	802995e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 802995a:	2301      	movs	r3, #1
 802995c:	e042      	b.n	80299e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 802995e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029962:	2b00      	cmp	r3, #0
 8029964:	da0f      	bge.n	8029986 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029966:	78fb      	ldrb	r3, [r7, #3]
 8029968:	f003 020f 	and.w	r2, r3, #15
 802996c:	4613      	mov	r3, r2
 802996e:	00db      	lsls	r3, r3, #3
 8029970:	4413      	add	r3, r2
 8029972:	009b      	lsls	r3, r3, #2
 8029974:	3338      	adds	r3, #56	; 0x38
 8029976:	687a      	ldr	r2, [r7, #4]
 8029978:	4413      	add	r3, r2
 802997a:	3304      	adds	r3, #4
 802997c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 802997e:	68fb      	ldr	r3, [r7, #12]
 8029980:	2201      	movs	r2, #1
 8029982:	705a      	strb	r2, [r3, #1]
 8029984:	e00f      	b.n	80299a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029986:	78fb      	ldrb	r3, [r7, #3]
 8029988:	f003 020f 	and.w	r2, r3, #15
 802998c:	4613      	mov	r3, r2
 802998e:	00db      	lsls	r3, r3, #3
 8029990:	4413      	add	r3, r2
 8029992:	009b      	lsls	r3, r3, #2
 8029994:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029998:	687a      	ldr	r2, [r7, #4]
 802999a:	4413      	add	r3, r2
 802999c:	3304      	adds	r3, #4
 802999e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80299a0:	68fb      	ldr	r3, [r7, #12]
 80299a2:	2200      	movs	r2, #0
 80299a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80299a6:	68fb      	ldr	r3, [r7, #12]
 80299a8:	2200      	movs	r2, #0
 80299aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80299ac:	78fb      	ldrb	r3, [r7, #3]
 80299ae:	f003 030f 	and.w	r3, r3, #15
 80299b2:	b2da      	uxtb	r2, r3
 80299b4:	68fb      	ldr	r3, [r7, #12]
 80299b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80299be:	2b01      	cmp	r3, #1
 80299c0:	d101      	bne.n	80299c6 <HAL_PCD_EP_ClrStall+0x86>
 80299c2:	2302      	movs	r3, #2
 80299c4:	e00e      	b.n	80299e4 <HAL_PCD_EP_ClrStall+0xa4>
 80299c6:	687b      	ldr	r3, [r7, #4]
 80299c8:	2201      	movs	r2, #1
 80299ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80299ce:	687b      	ldr	r3, [r7, #4]
 80299d0:	681b      	ldr	r3, [r3, #0]
 80299d2:	68f9      	ldr	r1, [r7, #12]
 80299d4:	4618      	mov	r0, r3
 80299d6:	f004 f905 	bl	802dbe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80299da:	687b      	ldr	r3, [r7, #4]
 80299dc:	2200      	movs	r2, #0
 80299de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80299e2:	2300      	movs	r3, #0
}
 80299e4:	4618      	mov	r0, r3
 80299e6:	3710      	adds	r7, #16
 80299e8:	46bd      	mov	sp, r7
 80299ea:	bd80      	pop	{r7, pc}

080299ec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80299ec:	b580      	push	{r7, lr}
 80299ee:	b084      	sub	sp, #16
 80299f0:	af00      	add	r7, sp, #0
 80299f2:	6078      	str	r0, [r7, #4]
 80299f4:	460b      	mov	r3, r1
 80299f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80299f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80299fc:	2b00      	cmp	r3, #0
 80299fe:	da0c      	bge.n	8029a1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029a00:	78fb      	ldrb	r3, [r7, #3]
 8029a02:	f003 020f 	and.w	r2, r3, #15
 8029a06:	4613      	mov	r3, r2
 8029a08:	00db      	lsls	r3, r3, #3
 8029a0a:	4413      	add	r3, r2
 8029a0c:	009b      	lsls	r3, r3, #2
 8029a0e:	3338      	adds	r3, #56	; 0x38
 8029a10:	687a      	ldr	r2, [r7, #4]
 8029a12:	4413      	add	r3, r2
 8029a14:	3304      	adds	r3, #4
 8029a16:	60fb      	str	r3, [r7, #12]
 8029a18:	e00c      	b.n	8029a34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029a1a:	78fb      	ldrb	r3, [r7, #3]
 8029a1c:	f003 020f 	and.w	r2, r3, #15
 8029a20:	4613      	mov	r3, r2
 8029a22:	00db      	lsls	r3, r3, #3
 8029a24:	4413      	add	r3, r2
 8029a26:	009b      	lsls	r3, r3, #2
 8029a28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029a2c:	687a      	ldr	r2, [r7, #4]
 8029a2e:	4413      	add	r3, r2
 8029a30:	3304      	adds	r3, #4
 8029a32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8029a34:	687b      	ldr	r3, [r7, #4]
 8029a36:	681b      	ldr	r3, [r3, #0]
 8029a38:	68f9      	ldr	r1, [r7, #12]
 8029a3a:	4618      	mov	r0, r3
 8029a3c:	f003 ff24 	bl	802d888 <USB_EPStopXfer>
 8029a40:	4603      	mov	r3, r0
 8029a42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8029a44:	7afb      	ldrb	r3, [r7, #11]
}
 8029a46:	4618      	mov	r0, r3
 8029a48:	3710      	adds	r7, #16
 8029a4a:	46bd      	mov	sp, r7
 8029a4c:	bd80      	pop	{r7, pc}

08029a4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029a4e:	b580      	push	{r7, lr}
 8029a50:	b08a      	sub	sp, #40	; 0x28
 8029a52:	af02      	add	r7, sp, #8
 8029a54:	6078      	str	r0, [r7, #4]
 8029a56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	681b      	ldr	r3, [r3, #0]
 8029a5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029a5e:	697b      	ldr	r3, [r7, #20]
 8029a60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8029a62:	683a      	ldr	r2, [r7, #0]
 8029a64:	4613      	mov	r3, r2
 8029a66:	00db      	lsls	r3, r3, #3
 8029a68:	4413      	add	r3, r2
 8029a6a:	009b      	lsls	r3, r3, #2
 8029a6c:	3338      	adds	r3, #56	; 0x38
 8029a6e:	687a      	ldr	r2, [r7, #4]
 8029a70:	4413      	add	r3, r2
 8029a72:	3304      	adds	r3, #4
 8029a74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8029a76:	68fb      	ldr	r3, [r7, #12]
 8029a78:	6a1a      	ldr	r2, [r3, #32]
 8029a7a:	68fb      	ldr	r3, [r7, #12]
 8029a7c:	699b      	ldr	r3, [r3, #24]
 8029a7e:	429a      	cmp	r2, r3
 8029a80:	d901      	bls.n	8029a86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8029a82:	2301      	movs	r3, #1
 8029a84:	e06c      	b.n	8029b60 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8029a86:	68fb      	ldr	r3, [r7, #12]
 8029a88:	699a      	ldr	r2, [r3, #24]
 8029a8a:	68fb      	ldr	r3, [r7, #12]
 8029a8c:	6a1b      	ldr	r3, [r3, #32]
 8029a8e:	1ad3      	subs	r3, r2, r3
 8029a90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8029a92:	68fb      	ldr	r3, [r7, #12]
 8029a94:	68db      	ldr	r3, [r3, #12]
 8029a96:	69fa      	ldr	r2, [r7, #28]
 8029a98:	429a      	cmp	r2, r3
 8029a9a:	d902      	bls.n	8029aa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8029a9c:	68fb      	ldr	r3, [r7, #12]
 8029a9e:	68db      	ldr	r3, [r3, #12]
 8029aa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8029aa2:	69fb      	ldr	r3, [r7, #28]
 8029aa4:	3303      	adds	r3, #3
 8029aa6:	089b      	lsrs	r3, r3, #2
 8029aa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029aaa:	e02b      	b.n	8029b04 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8029aac:	68fb      	ldr	r3, [r7, #12]
 8029aae:	699a      	ldr	r2, [r3, #24]
 8029ab0:	68fb      	ldr	r3, [r7, #12]
 8029ab2:	6a1b      	ldr	r3, [r3, #32]
 8029ab4:	1ad3      	subs	r3, r2, r3
 8029ab6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8029ab8:	68fb      	ldr	r3, [r7, #12]
 8029aba:	68db      	ldr	r3, [r3, #12]
 8029abc:	69fa      	ldr	r2, [r7, #28]
 8029abe:	429a      	cmp	r2, r3
 8029ac0:	d902      	bls.n	8029ac8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8029ac2:	68fb      	ldr	r3, [r7, #12]
 8029ac4:	68db      	ldr	r3, [r3, #12]
 8029ac6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8029ac8:	69fb      	ldr	r3, [r7, #28]
 8029aca:	3303      	adds	r3, #3
 8029acc:	089b      	lsrs	r3, r3, #2
 8029ace:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029ad0:	68fb      	ldr	r3, [r7, #12]
 8029ad2:	6919      	ldr	r1, [r3, #16]
 8029ad4:	683b      	ldr	r3, [r7, #0]
 8029ad6:	b2da      	uxtb	r2, r3
 8029ad8:	69fb      	ldr	r3, [r7, #28]
 8029ada:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029ae0:	b2db      	uxtb	r3, r3
 8029ae2:	9300      	str	r3, [sp, #0]
 8029ae4:	4603      	mov	r3, r0
 8029ae6:	6978      	ldr	r0, [r7, #20]
 8029ae8:	f003 ff78 	bl	802d9dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8029aec:	68fb      	ldr	r3, [r7, #12]
 8029aee:	691a      	ldr	r2, [r3, #16]
 8029af0:	69fb      	ldr	r3, [r7, #28]
 8029af2:	441a      	add	r2, r3
 8029af4:	68fb      	ldr	r3, [r7, #12]
 8029af6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8029af8:	68fb      	ldr	r3, [r7, #12]
 8029afa:	6a1a      	ldr	r2, [r3, #32]
 8029afc:	69fb      	ldr	r3, [r7, #28]
 8029afe:	441a      	add	r2, r3
 8029b00:	68fb      	ldr	r3, [r7, #12]
 8029b02:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029b04:	683b      	ldr	r3, [r7, #0]
 8029b06:	015a      	lsls	r2, r3, #5
 8029b08:	693b      	ldr	r3, [r7, #16]
 8029b0a:	4413      	add	r3, r2
 8029b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029b10:	699b      	ldr	r3, [r3, #24]
 8029b12:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029b14:	69ba      	ldr	r2, [r7, #24]
 8029b16:	429a      	cmp	r2, r3
 8029b18:	d809      	bhi.n	8029b2e <PCD_WriteEmptyTxFifo+0xe0>
 8029b1a:	68fb      	ldr	r3, [r7, #12]
 8029b1c:	6a1a      	ldr	r2, [r3, #32]
 8029b1e:	68fb      	ldr	r3, [r7, #12]
 8029b20:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029b22:	429a      	cmp	r2, r3
 8029b24:	d203      	bcs.n	8029b2e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029b26:	68fb      	ldr	r3, [r7, #12]
 8029b28:	699b      	ldr	r3, [r3, #24]
 8029b2a:	2b00      	cmp	r3, #0
 8029b2c:	d1be      	bne.n	8029aac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8029b2e:	68fb      	ldr	r3, [r7, #12]
 8029b30:	699a      	ldr	r2, [r3, #24]
 8029b32:	68fb      	ldr	r3, [r7, #12]
 8029b34:	6a1b      	ldr	r3, [r3, #32]
 8029b36:	429a      	cmp	r2, r3
 8029b38:	d811      	bhi.n	8029b5e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8029b3a:	683b      	ldr	r3, [r7, #0]
 8029b3c:	f003 030f 	and.w	r3, r3, #15
 8029b40:	2201      	movs	r2, #1
 8029b42:	fa02 f303 	lsl.w	r3, r2, r3
 8029b46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8029b48:	693b      	ldr	r3, [r7, #16]
 8029b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029b50:	68bb      	ldr	r3, [r7, #8]
 8029b52:	43db      	mvns	r3, r3
 8029b54:	6939      	ldr	r1, [r7, #16]
 8029b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8029b5a:	4013      	ands	r3, r2
 8029b5c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8029b5e:	2300      	movs	r3, #0
}
 8029b60:	4618      	mov	r0, r3
 8029b62:	3720      	adds	r7, #32
 8029b64:	46bd      	mov	sp, r7
 8029b66:	bd80      	pop	{r7, pc}

08029b68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029b68:	b580      	push	{r7, lr}
 8029b6a:	b088      	sub	sp, #32
 8029b6c:	af00      	add	r7, sp, #0
 8029b6e:	6078      	str	r0, [r7, #4]
 8029b70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	681b      	ldr	r3, [r3, #0]
 8029b76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029b78:	69fb      	ldr	r3, [r7, #28]
 8029b7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029b7c:	69fb      	ldr	r3, [r7, #28]
 8029b7e:	333c      	adds	r3, #60	; 0x3c
 8029b80:	3304      	adds	r3, #4
 8029b82:	681b      	ldr	r3, [r3, #0]
 8029b84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029b86:	683b      	ldr	r3, [r7, #0]
 8029b88:	015a      	lsls	r2, r3, #5
 8029b8a:	69bb      	ldr	r3, [r7, #24]
 8029b8c:	4413      	add	r3, r2
 8029b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029b92:	689b      	ldr	r3, [r3, #8]
 8029b94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8029b96:	687b      	ldr	r3, [r7, #4]
 8029b98:	691b      	ldr	r3, [r3, #16]
 8029b9a:	2b01      	cmp	r3, #1
 8029b9c:	d17b      	bne.n	8029c96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8029b9e:	693b      	ldr	r3, [r7, #16]
 8029ba0:	f003 0308 	and.w	r3, r3, #8
 8029ba4:	2b00      	cmp	r3, #0
 8029ba6:	d015      	beq.n	8029bd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029ba8:	697b      	ldr	r3, [r7, #20]
 8029baa:	4a61      	ldr	r2, [pc, #388]	; (8029d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029bac:	4293      	cmp	r3, r2
 8029bae:	f240 80b9 	bls.w	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029bb2:	693b      	ldr	r3, [r7, #16]
 8029bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029bb8:	2b00      	cmp	r3, #0
 8029bba:	f000 80b3 	beq.w	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029bbe:	683b      	ldr	r3, [r7, #0]
 8029bc0:	015a      	lsls	r2, r3, #5
 8029bc2:	69bb      	ldr	r3, [r7, #24]
 8029bc4:	4413      	add	r3, r2
 8029bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029bca:	461a      	mov	r2, r3
 8029bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029bd0:	6093      	str	r3, [r2, #8]
 8029bd2:	e0a7      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8029bd4:	693b      	ldr	r3, [r7, #16]
 8029bd6:	f003 0320 	and.w	r3, r3, #32
 8029bda:	2b00      	cmp	r3, #0
 8029bdc:	d009      	beq.n	8029bf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029bde:	683b      	ldr	r3, [r7, #0]
 8029be0:	015a      	lsls	r2, r3, #5
 8029be2:	69bb      	ldr	r3, [r7, #24]
 8029be4:	4413      	add	r3, r2
 8029be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029bea:	461a      	mov	r2, r3
 8029bec:	2320      	movs	r3, #32
 8029bee:	6093      	str	r3, [r2, #8]
 8029bf0:	e098      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8029bf2:	693b      	ldr	r3, [r7, #16]
 8029bf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8029bf8:	2b00      	cmp	r3, #0
 8029bfa:	f040 8093 	bne.w	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029bfe:	697b      	ldr	r3, [r7, #20]
 8029c00:	4a4b      	ldr	r2, [pc, #300]	; (8029d30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029c02:	4293      	cmp	r3, r2
 8029c04:	d90f      	bls.n	8029c26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029c06:	693b      	ldr	r3, [r7, #16]
 8029c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029c0c:	2b00      	cmp	r3, #0
 8029c0e:	d00a      	beq.n	8029c26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029c10:	683b      	ldr	r3, [r7, #0]
 8029c12:	015a      	lsls	r2, r3, #5
 8029c14:	69bb      	ldr	r3, [r7, #24]
 8029c16:	4413      	add	r3, r2
 8029c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c1c:	461a      	mov	r2, r3
 8029c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029c22:	6093      	str	r3, [r2, #8]
 8029c24:	e07e      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8029c26:	683a      	ldr	r2, [r7, #0]
 8029c28:	4613      	mov	r3, r2
 8029c2a:	00db      	lsls	r3, r3, #3
 8029c2c:	4413      	add	r3, r2
 8029c2e:	009b      	lsls	r3, r3, #2
 8029c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029c34:	687a      	ldr	r2, [r7, #4]
 8029c36:	4413      	add	r3, r2
 8029c38:	3304      	adds	r3, #4
 8029c3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8029c3c:	68fb      	ldr	r3, [r7, #12]
 8029c3e:	69da      	ldr	r2, [r3, #28]
 8029c40:	683b      	ldr	r3, [r7, #0]
 8029c42:	0159      	lsls	r1, r3, #5
 8029c44:	69bb      	ldr	r3, [r7, #24]
 8029c46:	440b      	add	r3, r1
 8029c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c4c:	691b      	ldr	r3, [r3, #16]
 8029c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8029c52:	1ad2      	subs	r2, r2, r3
 8029c54:	68fb      	ldr	r3, [r7, #12]
 8029c56:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8029c58:	683b      	ldr	r3, [r7, #0]
 8029c5a:	2b00      	cmp	r3, #0
 8029c5c:	d114      	bne.n	8029c88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8029c5e:	68fb      	ldr	r3, [r7, #12]
 8029c60:	699b      	ldr	r3, [r3, #24]
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d109      	bne.n	8029c7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029c66:	687b      	ldr	r3, [r7, #4]
 8029c68:	6818      	ldr	r0, [r3, #0]
 8029c6a:	687b      	ldr	r3, [r7, #4]
 8029c6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029c70:	461a      	mov	r2, r3
 8029c72:	2101      	movs	r1, #1
 8029c74:	f004 f948 	bl	802df08 <USB_EP0_OutStart>
 8029c78:	e006      	b.n	8029c88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8029c7a:	68fb      	ldr	r3, [r7, #12]
 8029c7c:	691a      	ldr	r2, [r3, #16]
 8029c7e:	68fb      	ldr	r3, [r7, #12]
 8029c80:	6a1b      	ldr	r3, [r3, #32]
 8029c82:	441a      	add	r2, r3
 8029c84:	68fb      	ldr	r3, [r7, #12]
 8029c86:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029c88:	683b      	ldr	r3, [r7, #0]
 8029c8a:	b2db      	uxtb	r3, r3
 8029c8c:	4619      	mov	r1, r3
 8029c8e:	6878      	ldr	r0, [r7, #4]
 8029c90:	f006 fe14 	bl	80308bc <HAL_PCD_DataOutStageCallback>
 8029c94:	e046      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8029c96:	697b      	ldr	r3, [r7, #20]
 8029c98:	4a26      	ldr	r2, [pc, #152]	; (8029d34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8029c9a:	4293      	cmp	r3, r2
 8029c9c:	d124      	bne.n	8029ce8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8029c9e:	693b      	ldr	r3, [r7, #16]
 8029ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8029ca4:	2b00      	cmp	r3, #0
 8029ca6:	d00a      	beq.n	8029cbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029ca8:	683b      	ldr	r3, [r7, #0]
 8029caa:	015a      	lsls	r2, r3, #5
 8029cac:	69bb      	ldr	r3, [r7, #24]
 8029cae:	4413      	add	r3, r2
 8029cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cb4:	461a      	mov	r2, r3
 8029cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029cba:	6093      	str	r3, [r2, #8]
 8029cbc:	e032      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8029cbe:	693b      	ldr	r3, [r7, #16]
 8029cc0:	f003 0320 	and.w	r3, r3, #32
 8029cc4:	2b00      	cmp	r3, #0
 8029cc6:	d008      	beq.n	8029cda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029cc8:	683b      	ldr	r3, [r7, #0]
 8029cca:	015a      	lsls	r2, r3, #5
 8029ccc:	69bb      	ldr	r3, [r7, #24]
 8029cce:	4413      	add	r3, r2
 8029cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cd4:	461a      	mov	r2, r3
 8029cd6:	2320      	movs	r3, #32
 8029cd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029cda:	683b      	ldr	r3, [r7, #0]
 8029cdc:	b2db      	uxtb	r3, r3
 8029cde:	4619      	mov	r1, r3
 8029ce0:	6878      	ldr	r0, [r7, #4]
 8029ce2:	f006 fdeb 	bl	80308bc <HAL_PCD_DataOutStageCallback>
 8029ce6:	e01d      	b.n	8029d24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8029ce8:	683b      	ldr	r3, [r7, #0]
 8029cea:	2b00      	cmp	r3, #0
 8029cec:	d114      	bne.n	8029d18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8029cee:	6879      	ldr	r1, [r7, #4]
 8029cf0:	683a      	ldr	r2, [r7, #0]
 8029cf2:	4613      	mov	r3, r2
 8029cf4:	00db      	lsls	r3, r3, #3
 8029cf6:	4413      	add	r3, r2
 8029cf8:	009b      	lsls	r3, r3, #2
 8029cfa:	440b      	add	r3, r1
 8029cfc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8029d00:	681b      	ldr	r3, [r3, #0]
 8029d02:	2b00      	cmp	r3, #0
 8029d04:	d108      	bne.n	8029d18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8029d06:	687b      	ldr	r3, [r7, #4]
 8029d08:	6818      	ldr	r0, [r3, #0]
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029d10:	461a      	mov	r2, r3
 8029d12:	2100      	movs	r1, #0
 8029d14:	f004 f8f8 	bl	802df08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029d18:	683b      	ldr	r3, [r7, #0]
 8029d1a:	b2db      	uxtb	r3, r3
 8029d1c:	4619      	mov	r1, r3
 8029d1e:	6878      	ldr	r0, [r7, #4]
 8029d20:	f006 fdcc 	bl	80308bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8029d24:	2300      	movs	r3, #0
}
 8029d26:	4618      	mov	r0, r3
 8029d28:	3720      	adds	r7, #32
 8029d2a:	46bd      	mov	sp, r7
 8029d2c:	bd80      	pop	{r7, pc}
 8029d2e:	bf00      	nop
 8029d30:	4f54300a 	.word	0x4f54300a
 8029d34:	4f54310a 	.word	0x4f54310a

08029d38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029d38:	b580      	push	{r7, lr}
 8029d3a:	b086      	sub	sp, #24
 8029d3c:	af00      	add	r7, sp, #0
 8029d3e:	6078      	str	r0, [r7, #4]
 8029d40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	681b      	ldr	r3, [r3, #0]
 8029d46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029d48:	697b      	ldr	r3, [r7, #20]
 8029d4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029d4c:	697b      	ldr	r3, [r7, #20]
 8029d4e:	333c      	adds	r3, #60	; 0x3c
 8029d50:	3304      	adds	r3, #4
 8029d52:	681b      	ldr	r3, [r3, #0]
 8029d54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029d56:	683b      	ldr	r3, [r7, #0]
 8029d58:	015a      	lsls	r2, r3, #5
 8029d5a:	693b      	ldr	r3, [r7, #16]
 8029d5c:	4413      	add	r3, r2
 8029d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d62:	689b      	ldr	r3, [r3, #8]
 8029d64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029d66:	68fb      	ldr	r3, [r7, #12]
 8029d68:	4a15      	ldr	r2, [pc, #84]	; (8029dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8029d6a:	4293      	cmp	r3, r2
 8029d6c:	d90e      	bls.n	8029d8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029d6e:	68bb      	ldr	r3, [r7, #8]
 8029d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	d009      	beq.n	8029d8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029d78:	683b      	ldr	r3, [r7, #0]
 8029d7a:	015a      	lsls	r2, r3, #5
 8029d7c:	693b      	ldr	r3, [r7, #16]
 8029d7e:	4413      	add	r3, r2
 8029d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d84:	461a      	mov	r2, r3
 8029d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029d8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8029d8c:	6878      	ldr	r0, [r7, #4]
 8029d8e:	f006 fd83 	bl	8030898 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8029d92:	68fb      	ldr	r3, [r7, #12]
 8029d94:	4a0a      	ldr	r2, [pc, #40]	; (8029dc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8029d96:	4293      	cmp	r3, r2
 8029d98:	d90c      	bls.n	8029db4 <PCD_EP_OutSetupPacket_int+0x7c>
 8029d9a:	687b      	ldr	r3, [r7, #4]
 8029d9c:	691b      	ldr	r3, [r3, #16]
 8029d9e:	2b01      	cmp	r3, #1
 8029da0:	d108      	bne.n	8029db4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029da2:	687b      	ldr	r3, [r7, #4]
 8029da4:	6818      	ldr	r0, [r3, #0]
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029dac:	461a      	mov	r2, r3
 8029dae:	2101      	movs	r1, #1
 8029db0:	f004 f8aa 	bl	802df08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8029db4:	2300      	movs	r3, #0
}
 8029db6:	4618      	mov	r0, r3
 8029db8:	3718      	adds	r7, #24
 8029dba:	46bd      	mov	sp, r7
 8029dbc:	bd80      	pop	{r7, pc}
 8029dbe:	bf00      	nop
 8029dc0:	4f54300a 	.word	0x4f54300a

08029dc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8029dc4:	b480      	push	{r7}
 8029dc6:	b085      	sub	sp, #20
 8029dc8:	af00      	add	r7, sp, #0
 8029dca:	6078      	str	r0, [r7, #4]
 8029dcc:	460b      	mov	r3, r1
 8029dce:	70fb      	strb	r3, [r7, #3]
 8029dd0:	4613      	mov	r3, r2
 8029dd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8029dd4:	687b      	ldr	r3, [r7, #4]
 8029dd6:	681b      	ldr	r3, [r3, #0]
 8029dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029dda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8029ddc:	78fb      	ldrb	r3, [r7, #3]
 8029dde:	2b00      	cmp	r3, #0
 8029de0:	d107      	bne.n	8029df2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8029de2:	883b      	ldrh	r3, [r7, #0]
 8029de4:	0419      	lsls	r1, r3, #16
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	681b      	ldr	r3, [r3, #0]
 8029dea:	68ba      	ldr	r2, [r7, #8]
 8029dec:	430a      	orrs	r2, r1
 8029dee:	629a      	str	r2, [r3, #40]	; 0x28
 8029df0:	e028      	b.n	8029e44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	681b      	ldr	r3, [r3, #0]
 8029df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029df8:	0c1b      	lsrs	r3, r3, #16
 8029dfa:	68ba      	ldr	r2, [r7, #8]
 8029dfc:	4413      	add	r3, r2
 8029dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029e00:	2300      	movs	r3, #0
 8029e02:	73fb      	strb	r3, [r7, #15]
 8029e04:	e00d      	b.n	8029e22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	681a      	ldr	r2, [r3, #0]
 8029e0a:	7bfb      	ldrb	r3, [r7, #15]
 8029e0c:	3340      	adds	r3, #64	; 0x40
 8029e0e:	009b      	lsls	r3, r3, #2
 8029e10:	4413      	add	r3, r2
 8029e12:	685b      	ldr	r3, [r3, #4]
 8029e14:	0c1b      	lsrs	r3, r3, #16
 8029e16:	68ba      	ldr	r2, [r7, #8]
 8029e18:	4413      	add	r3, r2
 8029e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029e1c:	7bfb      	ldrb	r3, [r7, #15]
 8029e1e:	3301      	adds	r3, #1
 8029e20:	73fb      	strb	r3, [r7, #15]
 8029e22:	7bfa      	ldrb	r2, [r7, #15]
 8029e24:	78fb      	ldrb	r3, [r7, #3]
 8029e26:	3b01      	subs	r3, #1
 8029e28:	429a      	cmp	r2, r3
 8029e2a:	d3ec      	bcc.n	8029e06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8029e2c:	883b      	ldrh	r3, [r7, #0]
 8029e2e:	0418      	lsls	r0, r3, #16
 8029e30:	687b      	ldr	r3, [r7, #4]
 8029e32:	6819      	ldr	r1, [r3, #0]
 8029e34:	78fb      	ldrb	r3, [r7, #3]
 8029e36:	3b01      	subs	r3, #1
 8029e38:	68ba      	ldr	r2, [r7, #8]
 8029e3a:	4302      	orrs	r2, r0
 8029e3c:	3340      	adds	r3, #64	; 0x40
 8029e3e:	009b      	lsls	r3, r3, #2
 8029e40:	440b      	add	r3, r1
 8029e42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8029e44:	2300      	movs	r3, #0
}
 8029e46:	4618      	mov	r0, r3
 8029e48:	3714      	adds	r7, #20
 8029e4a:	46bd      	mov	sp, r7
 8029e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e50:	4770      	bx	lr

08029e52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8029e52:	b480      	push	{r7}
 8029e54:	b083      	sub	sp, #12
 8029e56:	af00      	add	r7, sp, #0
 8029e58:	6078      	str	r0, [r7, #4]
 8029e5a:	460b      	mov	r3, r1
 8029e5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8029e5e:	687b      	ldr	r3, [r7, #4]
 8029e60:	681b      	ldr	r3, [r3, #0]
 8029e62:	887a      	ldrh	r2, [r7, #2]
 8029e64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8029e66:	2300      	movs	r3, #0
}
 8029e68:	4618      	mov	r0, r3
 8029e6a:	370c      	adds	r7, #12
 8029e6c:	46bd      	mov	sp, r7
 8029e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e72:	4770      	bx	lr

08029e74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8029e74:	b480      	push	{r7}
 8029e76:	b083      	sub	sp, #12
 8029e78:	af00      	add	r7, sp, #0
 8029e7a:	6078      	str	r0, [r7, #4]
 8029e7c:	460b      	mov	r3, r1
 8029e7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8029e80:	bf00      	nop
 8029e82:	370c      	adds	r7, #12
 8029e84:	46bd      	mov	sp, r7
 8029e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e8a:	4770      	bx	lr

08029e8c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8029e8c:	b580      	push	{r7, lr}
 8029e8e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8029e90:	4b06      	ldr	r3, [pc, #24]	; (8029eac <HAL_PWR_PVD_IRQHandler+0x20>)
 8029e92:	695b      	ldr	r3, [r3, #20]
 8029e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029e98:	2b00      	cmp	r3, #0
 8029e9a:	d005      	beq.n	8029ea8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8029e9c:	f000 f808 	bl	8029eb0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8029ea0:	4b02      	ldr	r3, [pc, #8]	; (8029eac <HAL_PWR_PVD_IRQHandler+0x20>)
 8029ea2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029ea6:	615a      	str	r2, [r3, #20]
  }
}
 8029ea8:	bf00      	nop
 8029eaa:	bd80      	pop	{r7, pc}
 8029eac:	40013c00 	.word	0x40013c00

08029eb0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8029eb0:	b480      	push	{r7}
 8029eb2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8029eb4:	bf00      	nop
 8029eb6:	46bd      	mov	sp, r7
 8029eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ebc:	4770      	bx	lr
	...

08029ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8029ec0:	b580      	push	{r7, lr}
 8029ec2:	b086      	sub	sp, #24
 8029ec4:	af00      	add	r7, sp, #0
 8029ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	2b00      	cmp	r3, #0
 8029ecc:	d101      	bne.n	8029ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8029ece:	2301      	movs	r3, #1
 8029ed0:	e267      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	681b      	ldr	r3, [r3, #0]
 8029ed6:	f003 0301 	and.w	r3, r3, #1
 8029eda:	2b00      	cmp	r3, #0
 8029edc:	d075      	beq.n	8029fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029ede:	4b88      	ldr	r3, [pc, #544]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029ee0:	689b      	ldr	r3, [r3, #8]
 8029ee2:	f003 030c 	and.w	r3, r3, #12
 8029ee6:	2b04      	cmp	r3, #4
 8029ee8:	d00c      	beq.n	8029f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029eea:	4b85      	ldr	r3, [pc, #532]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029eec:	689b      	ldr	r3, [r3, #8]
 8029eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029ef2:	2b08      	cmp	r3, #8
 8029ef4:	d112      	bne.n	8029f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029ef6:	4b82      	ldr	r3, [pc, #520]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029ef8:	685b      	ldr	r3, [r3, #4]
 8029efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8029f02:	d10b      	bne.n	8029f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029f04:	4b7e      	ldr	r3, [pc, #504]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f06:	681b      	ldr	r3, [r3, #0]
 8029f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	d05b      	beq.n	8029fc8 <HAL_RCC_OscConfig+0x108>
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	685b      	ldr	r3, [r3, #4]
 8029f14:	2b00      	cmp	r3, #0
 8029f16:	d157      	bne.n	8029fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8029f18:	2301      	movs	r3, #1
 8029f1a:	e242      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8029f1c:	687b      	ldr	r3, [r7, #4]
 8029f1e:	685b      	ldr	r3, [r3, #4]
 8029f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8029f24:	d106      	bne.n	8029f34 <HAL_RCC_OscConfig+0x74>
 8029f26:	4b76      	ldr	r3, [pc, #472]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f28:	681b      	ldr	r3, [r3, #0]
 8029f2a:	4a75      	ldr	r2, [pc, #468]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029f30:	6013      	str	r3, [r2, #0]
 8029f32:	e01d      	b.n	8029f70 <HAL_RCC_OscConfig+0xb0>
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	685b      	ldr	r3, [r3, #4]
 8029f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8029f3c:	d10c      	bne.n	8029f58 <HAL_RCC_OscConfig+0x98>
 8029f3e:	4b70      	ldr	r3, [pc, #448]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f40:	681b      	ldr	r3, [r3, #0]
 8029f42:	4a6f      	ldr	r2, [pc, #444]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8029f48:	6013      	str	r3, [r2, #0]
 8029f4a:	4b6d      	ldr	r3, [pc, #436]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f4c:	681b      	ldr	r3, [r3, #0]
 8029f4e:	4a6c      	ldr	r2, [pc, #432]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8029f54:	6013      	str	r3, [r2, #0]
 8029f56:	e00b      	b.n	8029f70 <HAL_RCC_OscConfig+0xb0>
 8029f58:	4b69      	ldr	r3, [pc, #420]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f5a:	681b      	ldr	r3, [r3, #0]
 8029f5c:	4a68      	ldr	r2, [pc, #416]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8029f62:	6013      	str	r3, [r2, #0]
 8029f64:	4b66      	ldr	r3, [pc, #408]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f66:	681b      	ldr	r3, [r3, #0]
 8029f68:	4a65      	ldr	r2, [pc, #404]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8029f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	685b      	ldr	r3, [r3, #4]
 8029f74:	2b00      	cmp	r3, #0
 8029f76:	d013      	beq.n	8029fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029f78:	f7fd fb6c 	bl	8027654 <HAL_GetTick>
 8029f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8029f7e:	e008      	b.n	8029f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8029f80:	f7fd fb68 	bl	8027654 <HAL_GetTick>
 8029f84:	4602      	mov	r2, r0
 8029f86:	693b      	ldr	r3, [r7, #16]
 8029f88:	1ad3      	subs	r3, r2, r3
 8029f8a:	2b64      	cmp	r3, #100	; 0x64
 8029f8c:	d901      	bls.n	8029f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8029f8e:	2303      	movs	r3, #3
 8029f90:	e207      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8029f92:	4b5b      	ldr	r3, [pc, #364]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029f94:	681b      	ldr	r3, [r3, #0]
 8029f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029f9a:	2b00      	cmp	r3, #0
 8029f9c:	d0f0      	beq.n	8029f80 <HAL_RCC_OscConfig+0xc0>
 8029f9e:	e014      	b.n	8029fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8029fa0:	f7fd fb58 	bl	8027654 <HAL_GetTick>
 8029fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029fa6:	e008      	b.n	8029fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8029fa8:	f7fd fb54 	bl	8027654 <HAL_GetTick>
 8029fac:	4602      	mov	r2, r0
 8029fae:	693b      	ldr	r3, [r7, #16]
 8029fb0:	1ad3      	subs	r3, r2, r3
 8029fb2:	2b64      	cmp	r3, #100	; 0x64
 8029fb4:	d901      	bls.n	8029fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8029fb6:	2303      	movs	r3, #3
 8029fb8:	e1f3      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8029fba:	4b51      	ldr	r3, [pc, #324]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029fbc:	681b      	ldr	r3, [r3, #0]
 8029fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029fc2:	2b00      	cmp	r3, #0
 8029fc4:	d1f0      	bne.n	8029fa8 <HAL_RCC_OscConfig+0xe8>
 8029fc6:	e000      	b.n	8029fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8029fca:	687b      	ldr	r3, [r7, #4]
 8029fcc:	681b      	ldr	r3, [r3, #0]
 8029fce:	f003 0302 	and.w	r3, r3, #2
 8029fd2:	2b00      	cmp	r3, #0
 8029fd4:	d063      	beq.n	802a09e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8029fd6:	4b4a      	ldr	r3, [pc, #296]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029fd8:	689b      	ldr	r3, [r3, #8]
 8029fda:	f003 030c 	and.w	r3, r3, #12
 8029fde:	2b00      	cmp	r3, #0
 8029fe0:	d00b      	beq.n	8029ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029fe2:	4b47      	ldr	r3, [pc, #284]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029fe4:	689b      	ldr	r3, [r3, #8]
 8029fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8029fea:	2b08      	cmp	r3, #8
 8029fec:	d11c      	bne.n	802a028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8029fee:	4b44      	ldr	r3, [pc, #272]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029ff0:	685b      	ldr	r3, [r3, #4]
 8029ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029ff6:	2b00      	cmp	r3, #0
 8029ff8:	d116      	bne.n	802a028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8029ffa:	4b41      	ldr	r3, [pc, #260]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 8029ffc:	681b      	ldr	r3, [r3, #0]
 8029ffe:	f003 0302 	and.w	r3, r3, #2
 802a002:	2b00      	cmp	r3, #0
 802a004:	d005      	beq.n	802a012 <HAL_RCC_OscConfig+0x152>
 802a006:	687b      	ldr	r3, [r7, #4]
 802a008:	68db      	ldr	r3, [r3, #12]
 802a00a:	2b01      	cmp	r3, #1
 802a00c:	d001      	beq.n	802a012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802a00e:	2301      	movs	r3, #1
 802a010:	e1c7      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a012:	4b3b      	ldr	r3, [pc, #236]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a014:	681b      	ldr	r3, [r3, #0]
 802a016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	691b      	ldr	r3, [r3, #16]
 802a01e:	00db      	lsls	r3, r3, #3
 802a020:	4937      	ldr	r1, [pc, #220]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a022:	4313      	orrs	r3, r2
 802a024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a026:	e03a      	b.n	802a09e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802a028:	687b      	ldr	r3, [r7, #4]
 802a02a:	68db      	ldr	r3, [r3, #12]
 802a02c:	2b00      	cmp	r3, #0
 802a02e:	d020      	beq.n	802a072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802a030:	4b34      	ldr	r3, [pc, #208]	; (802a104 <HAL_RCC_OscConfig+0x244>)
 802a032:	2201      	movs	r2, #1
 802a034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a036:	f7fd fb0d 	bl	8027654 <HAL_GetTick>
 802a03a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a03c:	e008      	b.n	802a050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a03e:	f7fd fb09 	bl	8027654 <HAL_GetTick>
 802a042:	4602      	mov	r2, r0
 802a044:	693b      	ldr	r3, [r7, #16]
 802a046:	1ad3      	subs	r3, r2, r3
 802a048:	2b02      	cmp	r3, #2
 802a04a:	d901      	bls.n	802a050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802a04c:	2303      	movs	r3, #3
 802a04e:	e1a8      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a050:	4b2b      	ldr	r3, [pc, #172]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a052:	681b      	ldr	r3, [r3, #0]
 802a054:	f003 0302 	and.w	r3, r3, #2
 802a058:	2b00      	cmp	r3, #0
 802a05a:	d0f0      	beq.n	802a03e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a05c:	4b28      	ldr	r3, [pc, #160]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a05e:	681b      	ldr	r3, [r3, #0]
 802a060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a064:	687b      	ldr	r3, [r7, #4]
 802a066:	691b      	ldr	r3, [r3, #16]
 802a068:	00db      	lsls	r3, r3, #3
 802a06a:	4925      	ldr	r1, [pc, #148]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a06c:	4313      	orrs	r3, r2
 802a06e:	600b      	str	r3, [r1, #0]
 802a070:	e015      	b.n	802a09e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a072:	4b24      	ldr	r3, [pc, #144]	; (802a104 <HAL_RCC_OscConfig+0x244>)
 802a074:	2200      	movs	r2, #0
 802a076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a078:	f7fd faec 	bl	8027654 <HAL_GetTick>
 802a07c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a07e:	e008      	b.n	802a092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a080:	f7fd fae8 	bl	8027654 <HAL_GetTick>
 802a084:	4602      	mov	r2, r0
 802a086:	693b      	ldr	r3, [r7, #16]
 802a088:	1ad3      	subs	r3, r2, r3
 802a08a:	2b02      	cmp	r3, #2
 802a08c:	d901      	bls.n	802a092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802a08e:	2303      	movs	r3, #3
 802a090:	e187      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a092:	4b1b      	ldr	r3, [pc, #108]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a094:	681b      	ldr	r3, [r3, #0]
 802a096:	f003 0302 	and.w	r3, r3, #2
 802a09a:	2b00      	cmp	r3, #0
 802a09c:	d1f0      	bne.n	802a080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a09e:	687b      	ldr	r3, [r7, #4]
 802a0a0:	681b      	ldr	r3, [r3, #0]
 802a0a2:	f003 0308 	and.w	r3, r3, #8
 802a0a6:	2b00      	cmp	r3, #0
 802a0a8:	d036      	beq.n	802a118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	695b      	ldr	r3, [r3, #20]
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d016      	beq.n	802a0e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a0b2:	4b15      	ldr	r3, [pc, #84]	; (802a108 <HAL_RCC_OscConfig+0x248>)
 802a0b4:	2201      	movs	r2, #1
 802a0b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a0b8:	f7fd facc 	bl	8027654 <HAL_GetTick>
 802a0bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a0be:	e008      	b.n	802a0d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a0c0:	f7fd fac8 	bl	8027654 <HAL_GetTick>
 802a0c4:	4602      	mov	r2, r0
 802a0c6:	693b      	ldr	r3, [r7, #16]
 802a0c8:	1ad3      	subs	r3, r2, r3
 802a0ca:	2b02      	cmp	r3, #2
 802a0cc:	d901      	bls.n	802a0d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802a0ce:	2303      	movs	r3, #3
 802a0d0:	e167      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a0d2:	4b0b      	ldr	r3, [pc, #44]	; (802a100 <HAL_RCC_OscConfig+0x240>)
 802a0d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a0d6:	f003 0302 	and.w	r3, r3, #2
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	d0f0      	beq.n	802a0c0 <HAL_RCC_OscConfig+0x200>
 802a0de:	e01b      	b.n	802a118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a0e0:	4b09      	ldr	r3, [pc, #36]	; (802a108 <HAL_RCC_OscConfig+0x248>)
 802a0e2:	2200      	movs	r2, #0
 802a0e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a0e6:	f7fd fab5 	bl	8027654 <HAL_GetTick>
 802a0ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a0ec:	e00e      	b.n	802a10c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a0ee:	f7fd fab1 	bl	8027654 <HAL_GetTick>
 802a0f2:	4602      	mov	r2, r0
 802a0f4:	693b      	ldr	r3, [r7, #16]
 802a0f6:	1ad3      	subs	r3, r2, r3
 802a0f8:	2b02      	cmp	r3, #2
 802a0fa:	d907      	bls.n	802a10c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802a0fc:	2303      	movs	r3, #3
 802a0fe:	e150      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
 802a100:	40023800 	.word	0x40023800
 802a104:	42470000 	.word	0x42470000
 802a108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a10c:	4b88      	ldr	r3, [pc, #544]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a110:	f003 0302 	and.w	r3, r3, #2
 802a114:	2b00      	cmp	r3, #0
 802a116:	d1ea      	bne.n	802a0ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a118:	687b      	ldr	r3, [r7, #4]
 802a11a:	681b      	ldr	r3, [r3, #0]
 802a11c:	f003 0304 	and.w	r3, r3, #4
 802a120:	2b00      	cmp	r3, #0
 802a122:	f000 8097 	beq.w	802a254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802a126:	2300      	movs	r3, #0
 802a128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802a12a:	4b81      	ldr	r3, [pc, #516]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a132:	2b00      	cmp	r3, #0
 802a134:	d10f      	bne.n	802a156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802a136:	2300      	movs	r3, #0
 802a138:	60bb      	str	r3, [r7, #8]
 802a13a:	4b7d      	ldr	r3, [pc, #500]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a13e:	4a7c      	ldr	r2, [pc, #496]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a144:	6413      	str	r3, [r2, #64]	; 0x40
 802a146:	4b7a      	ldr	r3, [pc, #488]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a14a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a14e:	60bb      	str	r3, [r7, #8]
 802a150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802a152:	2301      	movs	r3, #1
 802a154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a156:	4b77      	ldr	r3, [pc, #476]	; (802a334 <HAL_RCC_OscConfig+0x474>)
 802a158:	681b      	ldr	r3, [r3, #0]
 802a15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a15e:	2b00      	cmp	r3, #0
 802a160:	d118      	bne.n	802a194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802a162:	4b74      	ldr	r3, [pc, #464]	; (802a334 <HAL_RCC_OscConfig+0x474>)
 802a164:	681b      	ldr	r3, [r3, #0]
 802a166:	4a73      	ldr	r2, [pc, #460]	; (802a334 <HAL_RCC_OscConfig+0x474>)
 802a168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a16c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802a16e:	f7fd fa71 	bl	8027654 <HAL_GetTick>
 802a172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a174:	e008      	b.n	802a188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a176:	f7fd fa6d 	bl	8027654 <HAL_GetTick>
 802a17a:	4602      	mov	r2, r0
 802a17c:	693b      	ldr	r3, [r7, #16]
 802a17e:	1ad3      	subs	r3, r2, r3
 802a180:	2b02      	cmp	r3, #2
 802a182:	d901      	bls.n	802a188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802a184:	2303      	movs	r3, #3
 802a186:	e10c      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a188:	4b6a      	ldr	r3, [pc, #424]	; (802a334 <HAL_RCC_OscConfig+0x474>)
 802a18a:	681b      	ldr	r3, [r3, #0]
 802a18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a190:	2b00      	cmp	r3, #0
 802a192:	d0f0      	beq.n	802a176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	689b      	ldr	r3, [r3, #8]
 802a198:	2b01      	cmp	r3, #1
 802a19a:	d106      	bne.n	802a1aa <HAL_RCC_OscConfig+0x2ea>
 802a19c:	4b64      	ldr	r3, [pc, #400]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a1a0:	4a63      	ldr	r2, [pc, #396]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1a2:	f043 0301 	orr.w	r3, r3, #1
 802a1a6:	6713      	str	r3, [r2, #112]	; 0x70
 802a1a8:	e01c      	b.n	802a1e4 <HAL_RCC_OscConfig+0x324>
 802a1aa:	687b      	ldr	r3, [r7, #4]
 802a1ac:	689b      	ldr	r3, [r3, #8]
 802a1ae:	2b05      	cmp	r3, #5
 802a1b0:	d10c      	bne.n	802a1cc <HAL_RCC_OscConfig+0x30c>
 802a1b2:	4b5f      	ldr	r3, [pc, #380]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a1b6:	4a5e      	ldr	r2, [pc, #376]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1b8:	f043 0304 	orr.w	r3, r3, #4
 802a1bc:	6713      	str	r3, [r2, #112]	; 0x70
 802a1be:	4b5c      	ldr	r3, [pc, #368]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a1c2:	4a5b      	ldr	r2, [pc, #364]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1c4:	f043 0301 	orr.w	r3, r3, #1
 802a1c8:	6713      	str	r3, [r2, #112]	; 0x70
 802a1ca:	e00b      	b.n	802a1e4 <HAL_RCC_OscConfig+0x324>
 802a1cc:	4b58      	ldr	r3, [pc, #352]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a1d0:	4a57      	ldr	r2, [pc, #348]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1d2:	f023 0301 	bic.w	r3, r3, #1
 802a1d6:	6713      	str	r3, [r2, #112]	; 0x70
 802a1d8:	4b55      	ldr	r3, [pc, #340]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a1dc:	4a54      	ldr	r2, [pc, #336]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a1de:	f023 0304 	bic.w	r3, r3, #4
 802a1e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802a1e4:	687b      	ldr	r3, [r7, #4]
 802a1e6:	689b      	ldr	r3, [r3, #8]
 802a1e8:	2b00      	cmp	r3, #0
 802a1ea:	d015      	beq.n	802a218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a1ec:	f7fd fa32 	bl	8027654 <HAL_GetTick>
 802a1f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a1f2:	e00a      	b.n	802a20a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a1f4:	f7fd fa2e 	bl	8027654 <HAL_GetTick>
 802a1f8:	4602      	mov	r2, r0
 802a1fa:	693b      	ldr	r3, [r7, #16]
 802a1fc:	1ad3      	subs	r3, r2, r3
 802a1fe:	f241 3288 	movw	r2, #5000	; 0x1388
 802a202:	4293      	cmp	r3, r2
 802a204:	d901      	bls.n	802a20a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802a206:	2303      	movs	r3, #3
 802a208:	e0cb      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a20a:	4b49      	ldr	r3, [pc, #292]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a20e:	f003 0302 	and.w	r3, r3, #2
 802a212:	2b00      	cmp	r3, #0
 802a214:	d0ee      	beq.n	802a1f4 <HAL_RCC_OscConfig+0x334>
 802a216:	e014      	b.n	802a242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a218:	f7fd fa1c 	bl	8027654 <HAL_GetTick>
 802a21c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a21e:	e00a      	b.n	802a236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a220:	f7fd fa18 	bl	8027654 <HAL_GetTick>
 802a224:	4602      	mov	r2, r0
 802a226:	693b      	ldr	r3, [r7, #16]
 802a228:	1ad3      	subs	r3, r2, r3
 802a22a:	f241 3288 	movw	r2, #5000	; 0x1388
 802a22e:	4293      	cmp	r3, r2
 802a230:	d901      	bls.n	802a236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802a232:	2303      	movs	r3, #3
 802a234:	e0b5      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a236:	4b3e      	ldr	r3, [pc, #248]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a23a:	f003 0302 	and.w	r3, r3, #2
 802a23e:	2b00      	cmp	r3, #0
 802a240:	d1ee      	bne.n	802a220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802a242:	7dfb      	ldrb	r3, [r7, #23]
 802a244:	2b01      	cmp	r3, #1
 802a246:	d105      	bne.n	802a254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802a248:	4b39      	ldr	r3, [pc, #228]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a24c:	4a38      	ldr	r2, [pc, #224]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a24e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802a252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802a254:	687b      	ldr	r3, [r7, #4]
 802a256:	699b      	ldr	r3, [r3, #24]
 802a258:	2b00      	cmp	r3, #0
 802a25a:	f000 80a1 	beq.w	802a3a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802a25e:	4b34      	ldr	r3, [pc, #208]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a260:	689b      	ldr	r3, [r3, #8]
 802a262:	f003 030c 	and.w	r3, r3, #12
 802a266:	2b08      	cmp	r3, #8
 802a268:	d05c      	beq.n	802a324 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	699b      	ldr	r3, [r3, #24]
 802a26e:	2b02      	cmp	r3, #2
 802a270:	d141      	bne.n	802a2f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a272:	4b31      	ldr	r3, [pc, #196]	; (802a338 <HAL_RCC_OscConfig+0x478>)
 802a274:	2200      	movs	r2, #0
 802a276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a278:	f7fd f9ec 	bl	8027654 <HAL_GetTick>
 802a27c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a27e:	e008      	b.n	802a292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a280:	f7fd f9e8 	bl	8027654 <HAL_GetTick>
 802a284:	4602      	mov	r2, r0
 802a286:	693b      	ldr	r3, [r7, #16]
 802a288:	1ad3      	subs	r3, r2, r3
 802a28a:	2b02      	cmp	r3, #2
 802a28c:	d901      	bls.n	802a292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802a28e:	2303      	movs	r3, #3
 802a290:	e087      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a292:	4b27      	ldr	r3, [pc, #156]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a294:	681b      	ldr	r3, [r3, #0]
 802a296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a29a:	2b00      	cmp	r3, #0
 802a29c:	d1f0      	bne.n	802a280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802a29e:	687b      	ldr	r3, [r7, #4]
 802a2a0:	69da      	ldr	r2, [r3, #28]
 802a2a2:	687b      	ldr	r3, [r7, #4]
 802a2a4:	6a1b      	ldr	r3, [r3, #32]
 802a2a6:	431a      	orrs	r2, r3
 802a2a8:	687b      	ldr	r3, [r7, #4]
 802a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a2ac:	019b      	lsls	r3, r3, #6
 802a2ae:	431a      	orrs	r2, r3
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a2b4:	085b      	lsrs	r3, r3, #1
 802a2b6:	3b01      	subs	r3, #1
 802a2b8:	041b      	lsls	r3, r3, #16
 802a2ba:	431a      	orrs	r2, r3
 802a2bc:	687b      	ldr	r3, [r7, #4]
 802a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a2c0:	061b      	lsls	r3, r3, #24
 802a2c2:	491b      	ldr	r1, [pc, #108]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a2c4:	4313      	orrs	r3, r2
 802a2c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802a2c8:	4b1b      	ldr	r3, [pc, #108]	; (802a338 <HAL_RCC_OscConfig+0x478>)
 802a2ca:	2201      	movs	r2, #1
 802a2cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a2ce:	f7fd f9c1 	bl	8027654 <HAL_GetTick>
 802a2d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a2d4:	e008      	b.n	802a2e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a2d6:	f7fd f9bd 	bl	8027654 <HAL_GetTick>
 802a2da:	4602      	mov	r2, r0
 802a2dc:	693b      	ldr	r3, [r7, #16]
 802a2de:	1ad3      	subs	r3, r2, r3
 802a2e0:	2b02      	cmp	r3, #2
 802a2e2:	d901      	bls.n	802a2e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802a2e4:	2303      	movs	r3, #3
 802a2e6:	e05c      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a2e8:	4b11      	ldr	r3, [pc, #68]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a2ea:	681b      	ldr	r3, [r3, #0]
 802a2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a2f0:	2b00      	cmp	r3, #0
 802a2f2:	d0f0      	beq.n	802a2d6 <HAL_RCC_OscConfig+0x416>
 802a2f4:	e054      	b.n	802a3a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a2f6:	4b10      	ldr	r3, [pc, #64]	; (802a338 <HAL_RCC_OscConfig+0x478>)
 802a2f8:	2200      	movs	r2, #0
 802a2fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a2fc:	f7fd f9aa 	bl	8027654 <HAL_GetTick>
 802a300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a302:	e008      	b.n	802a316 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a304:	f7fd f9a6 	bl	8027654 <HAL_GetTick>
 802a308:	4602      	mov	r2, r0
 802a30a:	693b      	ldr	r3, [r7, #16]
 802a30c:	1ad3      	subs	r3, r2, r3
 802a30e:	2b02      	cmp	r3, #2
 802a310:	d901      	bls.n	802a316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802a312:	2303      	movs	r3, #3
 802a314:	e045      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a316:	4b06      	ldr	r3, [pc, #24]	; (802a330 <HAL_RCC_OscConfig+0x470>)
 802a318:	681b      	ldr	r3, [r3, #0]
 802a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a31e:	2b00      	cmp	r3, #0
 802a320:	d1f0      	bne.n	802a304 <HAL_RCC_OscConfig+0x444>
 802a322:	e03d      	b.n	802a3a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802a324:	687b      	ldr	r3, [r7, #4]
 802a326:	699b      	ldr	r3, [r3, #24]
 802a328:	2b01      	cmp	r3, #1
 802a32a:	d107      	bne.n	802a33c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802a32c:	2301      	movs	r3, #1
 802a32e:	e038      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
 802a330:	40023800 	.word	0x40023800
 802a334:	40007000 	.word	0x40007000
 802a338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802a33c:	4b1b      	ldr	r3, [pc, #108]	; (802a3ac <HAL_RCC_OscConfig+0x4ec>)
 802a33e:	685b      	ldr	r3, [r3, #4]
 802a340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a342:	687b      	ldr	r3, [r7, #4]
 802a344:	699b      	ldr	r3, [r3, #24]
 802a346:	2b01      	cmp	r3, #1
 802a348:	d028      	beq.n	802a39c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a34a:	68fb      	ldr	r3, [r7, #12]
 802a34c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802a350:	687b      	ldr	r3, [r7, #4]
 802a352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a354:	429a      	cmp	r2, r3
 802a356:	d121      	bne.n	802a39c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a358:	68fb      	ldr	r3, [r7, #12]
 802a35a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802a35e:	687b      	ldr	r3, [r7, #4]
 802a360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a362:	429a      	cmp	r2, r3
 802a364:	d11a      	bne.n	802a39c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a366:	68fa      	ldr	r2, [r7, #12]
 802a368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802a36c:	4013      	ands	r3, r2
 802a36e:	687a      	ldr	r2, [r7, #4]
 802a370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a374:	4293      	cmp	r3, r2
 802a376:	d111      	bne.n	802a39c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a378:	68fb      	ldr	r3, [r7, #12]
 802a37a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802a37e:	687b      	ldr	r3, [r7, #4]
 802a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a382:	085b      	lsrs	r3, r3, #1
 802a384:	3b01      	subs	r3, #1
 802a386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a388:	429a      	cmp	r2, r3
 802a38a:	d107      	bne.n	802a39c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802a38c:	68fb      	ldr	r3, [r7, #12]
 802a38e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802a392:	687b      	ldr	r3, [r7, #4]
 802a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a398:	429a      	cmp	r2, r3
 802a39a:	d001      	beq.n	802a3a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802a39c:	2301      	movs	r3, #1
 802a39e:	e000      	b.n	802a3a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802a3a0:	2300      	movs	r3, #0
}
 802a3a2:	4618      	mov	r0, r3
 802a3a4:	3718      	adds	r7, #24
 802a3a6:	46bd      	mov	sp, r7
 802a3a8:	bd80      	pop	{r7, pc}
 802a3aa:	bf00      	nop
 802a3ac:	40023800 	.word	0x40023800

0802a3b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802a3b0:	b580      	push	{r7, lr}
 802a3b2:	b084      	sub	sp, #16
 802a3b4:	af00      	add	r7, sp, #0
 802a3b6:	6078      	str	r0, [r7, #4]
 802a3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802a3ba:	687b      	ldr	r3, [r7, #4]
 802a3bc:	2b00      	cmp	r3, #0
 802a3be:	d101      	bne.n	802a3c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802a3c0:	2301      	movs	r3, #1
 802a3c2:	e0cc      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802a3c4:	4b68      	ldr	r3, [pc, #416]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a3c6:	681b      	ldr	r3, [r3, #0]
 802a3c8:	f003 0307 	and.w	r3, r3, #7
 802a3cc:	683a      	ldr	r2, [r7, #0]
 802a3ce:	429a      	cmp	r2, r3
 802a3d0:	d90c      	bls.n	802a3ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a3d2:	4b65      	ldr	r3, [pc, #404]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a3d4:	683a      	ldr	r2, [r7, #0]
 802a3d6:	b2d2      	uxtb	r2, r2
 802a3d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a3da:	4b63      	ldr	r3, [pc, #396]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a3dc:	681b      	ldr	r3, [r3, #0]
 802a3de:	f003 0307 	and.w	r3, r3, #7
 802a3e2:	683a      	ldr	r2, [r7, #0]
 802a3e4:	429a      	cmp	r2, r3
 802a3e6:	d001      	beq.n	802a3ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802a3e8:	2301      	movs	r3, #1
 802a3ea:	e0b8      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802a3ec:	687b      	ldr	r3, [r7, #4]
 802a3ee:	681b      	ldr	r3, [r3, #0]
 802a3f0:	f003 0302 	and.w	r3, r3, #2
 802a3f4:	2b00      	cmp	r3, #0
 802a3f6:	d020      	beq.n	802a43a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a3f8:	687b      	ldr	r3, [r7, #4]
 802a3fa:	681b      	ldr	r3, [r3, #0]
 802a3fc:	f003 0304 	and.w	r3, r3, #4
 802a400:	2b00      	cmp	r3, #0
 802a402:	d005      	beq.n	802a410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802a404:	4b59      	ldr	r3, [pc, #356]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a406:	689b      	ldr	r3, [r3, #8]
 802a408:	4a58      	ldr	r2, [pc, #352]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a40a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802a40e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	681b      	ldr	r3, [r3, #0]
 802a414:	f003 0308 	and.w	r3, r3, #8
 802a418:	2b00      	cmp	r3, #0
 802a41a:	d005      	beq.n	802a428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802a41c:	4b53      	ldr	r3, [pc, #332]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a41e:	689b      	ldr	r3, [r3, #8]
 802a420:	4a52      	ldr	r2, [pc, #328]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802a426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802a428:	4b50      	ldr	r3, [pc, #320]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a42a:	689b      	ldr	r3, [r3, #8]
 802a42c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802a430:	687b      	ldr	r3, [r7, #4]
 802a432:	689b      	ldr	r3, [r3, #8]
 802a434:	494d      	ldr	r1, [pc, #308]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a436:	4313      	orrs	r3, r2
 802a438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	681b      	ldr	r3, [r3, #0]
 802a43e:	f003 0301 	and.w	r3, r3, #1
 802a442:	2b00      	cmp	r3, #0
 802a444:	d044      	beq.n	802a4d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802a446:	687b      	ldr	r3, [r7, #4]
 802a448:	685b      	ldr	r3, [r3, #4]
 802a44a:	2b01      	cmp	r3, #1
 802a44c:	d107      	bne.n	802a45e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a44e:	4b47      	ldr	r3, [pc, #284]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a450:	681b      	ldr	r3, [r3, #0]
 802a452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a456:	2b00      	cmp	r3, #0
 802a458:	d119      	bne.n	802a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a45a:	2301      	movs	r3, #1
 802a45c:	e07f      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a45e:	687b      	ldr	r3, [r7, #4]
 802a460:	685b      	ldr	r3, [r3, #4]
 802a462:	2b02      	cmp	r3, #2
 802a464:	d003      	beq.n	802a46e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802a466:	687b      	ldr	r3, [r7, #4]
 802a468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a46a:	2b03      	cmp	r3, #3
 802a46c:	d107      	bne.n	802a47e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a46e:	4b3f      	ldr	r3, [pc, #252]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a470:	681b      	ldr	r3, [r3, #0]
 802a472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a476:	2b00      	cmp	r3, #0
 802a478:	d109      	bne.n	802a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a47a:	2301      	movs	r3, #1
 802a47c:	e06f      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a47e:	4b3b      	ldr	r3, [pc, #236]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a480:	681b      	ldr	r3, [r3, #0]
 802a482:	f003 0302 	and.w	r3, r3, #2
 802a486:	2b00      	cmp	r3, #0
 802a488:	d101      	bne.n	802a48e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a48a:	2301      	movs	r3, #1
 802a48c:	e067      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802a48e:	4b37      	ldr	r3, [pc, #220]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a490:	689b      	ldr	r3, [r3, #8]
 802a492:	f023 0203 	bic.w	r2, r3, #3
 802a496:	687b      	ldr	r3, [r7, #4]
 802a498:	685b      	ldr	r3, [r3, #4]
 802a49a:	4934      	ldr	r1, [pc, #208]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a49c:	4313      	orrs	r3, r2
 802a49e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802a4a0:	f7fd f8d8 	bl	8027654 <HAL_GetTick>
 802a4a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a4a6:	e00a      	b.n	802a4be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802a4a8:	f7fd f8d4 	bl	8027654 <HAL_GetTick>
 802a4ac:	4602      	mov	r2, r0
 802a4ae:	68fb      	ldr	r3, [r7, #12]
 802a4b0:	1ad3      	subs	r3, r2, r3
 802a4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 802a4b6:	4293      	cmp	r3, r2
 802a4b8:	d901      	bls.n	802a4be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802a4ba:	2303      	movs	r3, #3
 802a4bc:	e04f      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a4be:	4b2b      	ldr	r3, [pc, #172]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a4c0:	689b      	ldr	r3, [r3, #8]
 802a4c2:	f003 020c 	and.w	r2, r3, #12
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	685b      	ldr	r3, [r3, #4]
 802a4ca:	009b      	lsls	r3, r3, #2
 802a4cc:	429a      	cmp	r2, r3
 802a4ce:	d1eb      	bne.n	802a4a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802a4d0:	4b25      	ldr	r3, [pc, #148]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a4d2:	681b      	ldr	r3, [r3, #0]
 802a4d4:	f003 0307 	and.w	r3, r3, #7
 802a4d8:	683a      	ldr	r2, [r7, #0]
 802a4da:	429a      	cmp	r2, r3
 802a4dc:	d20c      	bcs.n	802a4f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a4de:	4b22      	ldr	r3, [pc, #136]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a4e0:	683a      	ldr	r2, [r7, #0]
 802a4e2:	b2d2      	uxtb	r2, r2
 802a4e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a4e6:	4b20      	ldr	r3, [pc, #128]	; (802a568 <HAL_RCC_ClockConfig+0x1b8>)
 802a4e8:	681b      	ldr	r3, [r3, #0]
 802a4ea:	f003 0307 	and.w	r3, r3, #7
 802a4ee:	683a      	ldr	r2, [r7, #0]
 802a4f0:	429a      	cmp	r2, r3
 802a4f2:	d001      	beq.n	802a4f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802a4f4:	2301      	movs	r3, #1
 802a4f6:	e032      	b.n	802a55e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a4f8:	687b      	ldr	r3, [r7, #4]
 802a4fa:	681b      	ldr	r3, [r3, #0]
 802a4fc:	f003 0304 	and.w	r3, r3, #4
 802a500:	2b00      	cmp	r3, #0
 802a502:	d008      	beq.n	802a516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802a504:	4b19      	ldr	r3, [pc, #100]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a506:	689b      	ldr	r3, [r3, #8]
 802a508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802a50c:	687b      	ldr	r3, [r7, #4]
 802a50e:	68db      	ldr	r3, [r3, #12]
 802a510:	4916      	ldr	r1, [pc, #88]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a512:	4313      	orrs	r3, r2
 802a514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a516:	687b      	ldr	r3, [r7, #4]
 802a518:	681b      	ldr	r3, [r3, #0]
 802a51a:	f003 0308 	and.w	r3, r3, #8
 802a51e:	2b00      	cmp	r3, #0
 802a520:	d009      	beq.n	802a536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802a522:	4b12      	ldr	r3, [pc, #72]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a524:	689b      	ldr	r3, [r3, #8]
 802a526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802a52a:	687b      	ldr	r3, [r7, #4]
 802a52c:	691b      	ldr	r3, [r3, #16]
 802a52e:	00db      	lsls	r3, r3, #3
 802a530:	490e      	ldr	r1, [pc, #56]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a532:	4313      	orrs	r3, r2
 802a534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802a536:	f000 f821 	bl	802a57c <HAL_RCC_GetSysClockFreq>
 802a53a:	4602      	mov	r2, r0
 802a53c:	4b0b      	ldr	r3, [pc, #44]	; (802a56c <HAL_RCC_ClockConfig+0x1bc>)
 802a53e:	689b      	ldr	r3, [r3, #8]
 802a540:	091b      	lsrs	r3, r3, #4
 802a542:	f003 030f 	and.w	r3, r3, #15
 802a546:	490a      	ldr	r1, [pc, #40]	; (802a570 <HAL_RCC_ClockConfig+0x1c0>)
 802a548:	5ccb      	ldrb	r3, [r1, r3]
 802a54a:	fa22 f303 	lsr.w	r3, r2, r3
 802a54e:	4a09      	ldr	r2, [pc, #36]	; (802a574 <HAL_RCC_ClockConfig+0x1c4>)
 802a550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802a552:	4b09      	ldr	r3, [pc, #36]	; (802a578 <HAL_RCC_ClockConfig+0x1c8>)
 802a554:	681b      	ldr	r3, [r3, #0]
 802a556:	4618      	mov	r0, r3
 802a558:	f7fd f838 	bl	80275cc <HAL_InitTick>

  return HAL_OK;
 802a55c:	2300      	movs	r3, #0
}
 802a55e:	4618      	mov	r0, r3
 802a560:	3710      	adds	r7, #16
 802a562:	46bd      	mov	sp, r7
 802a564:	bd80      	pop	{r7, pc}
 802a566:	bf00      	nop
 802a568:	40023c00 	.word	0x40023c00
 802a56c:	40023800 	.word	0x40023800
 802a570:	08032d24 	.word	0x08032d24
 802a574:	20000138 	.word	0x20000138
 802a578:	2000013c 	.word	0x2000013c

0802a57c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802a57c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a580:	b090      	sub	sp, #64	; 0x40
 802a582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802a584:	2300      	movs	r3, #0
 802a586:	637b      	str	r3, [r7, #52]	; 0x34
 802a588:	2300      	movs	r3, #0
 802a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a58c:	2300      	movs	r3, #0
 802a58e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802a590:	2300      	movs	r3, #0
 802a592:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802a594:	4b59      	ldr	r3, [pc, #356]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a596:	689b      	ldr	r3, [r3, #8]
 802a598:	f003 030c 	and.w	r3, r3, #12
 802a59c:	2b08      	cmp	r3, #8
 802a59e:	d00d      	beq.n	802a5bc <HAL_RCC_GetSysClockFreq+0x40>
 802a5a0:	2b08      	cmp	r3, #8
 802a5a2:	f200 80a1 	bhi.w	802a6e8 <HAL_RCC_GetSysClockFreq+0x16c>
 802a5a6:	2b00      	cmp	r3, #0
 802a5a8:	d002      	beq.n	802a5b0 <HAL_RCC_GetSysClockFreq+0x34>
 802a5aa:	2b04      	cmp	r3, #4
 802a5ac:	d003      	beq.n	802a5b6 <HAL_RCC_GetSysClockFreq+0x3a>
 802a5ae:	e09b      	b.n	802a6e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802a5b0:	4b53      	ldr	r3, [pc, #332]	; (802a700 <HAL_RCC_GetSysClockFreq+0x184>)
 802a5b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 802a5b4:	e09b      	b.n	802a6ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802a5b6:	4b53      	ldr	r3, [pc, #332]	; (802a704 <HAL_RCC_GetSysClockFreq+0x188>)
 802a5b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a5ba:	e098      	b.n	802a6ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802a5bc:	4b4f      	ldr	r3, [pc, #316]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a5be:	685b      	ldr	r3, [r3, #4]
 802a5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802a5c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802a5c6:	4b4d      	ldr	r3, [pc, #308]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a5c8:	685b      	ldr	r3, [r3, #4]
 802a5ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a5ce:	2b00      	cmp	r3, #0
 802a5d0:	d028      	beq.n	802a624 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a5d2:	4b4a      	ldr	r3, [pc, #296]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a5d4:	685b      	ldr	r3, [r3, #4]
 802a5d6:	099b      	lsrs	r3, r3, #6
 802a5d8:	2200      	movs	r2, #0
 802a5da:	623b      	str	r3, [r7, #32]
 802a5dc:	627a      	str	r2, [r7, #36]	; 0x24
 802a5de:	6a3b      	ldr	r3, [r7, #32]
 802a5e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802a5e4:	2100      	movs	r1, #0
 802a5e6:	4b47      	ldr	r3, [pc, #284]	; (802a704 <HAL_RCC_GetSysClockFreq+0x188>)
 802a5e8:	fb03 f201 	mul.w	r2, r3, r1
 802a5ec:	2300      	movs	r3, #0
 802a5ee:	fb00 f303 	mul.w	r3, r0, r3
 802a5f2:	4413      	add	r3, r2
 802a5f4:	4a43      	ldr	r2, [pc, #268]	; (802a704 <HAL_RCC_GetSysClockFreq+0x188>)
 802a5f6:	fba0 1202 	umull	r1, r2, r0, r2
 802a5fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a5fc:	460a      	mov	r2, r1
 802a5fe:	62ba      	str	r2, [r7, #40]	; 0x28
 802a600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a602:	4413      	add	r3, r2
 802a604:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a608:	2200      	movs	r2, #0
 802a60a:	61bb      	str	r3, [r7, #24]
 802a60c:	61fa      	str	r2, [r7, #28]
 802a60e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a612:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802a616:	f7f7 fe2b 	bl	8022270 <__aeabi_uldivmod>
 802a61a:	4602      	mov	r2, r0
 802a61c:	460b      	mov	r3, r1
 802a61e:	4613      	mov	r3, r2
 802a620:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a622:	e053      	b.n	802a6cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a624:	4b35      	ldr	r3, [pc, #212]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a626:	685b      	ldr	r3, [r3, #4]
 802a628:	099b      	lsrs	r3, r3, #6
 802a62a:	2200      	movs	r2, #0
 802a62c:	613b      	str	r3, [r7, #16]
 802a62e:	617a      	str	r2, [r7, #20]
 802a630:	693b      	ldr	r3, [r7, #16]
 802a632:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802a636:	f04f 0b00 	mov.w	fp, #0
 802a63a:	4652      	mov	r2, sl
 802a63c:	465b      	mov	r3, fp
 802a63e:	f04f 0000 	mov.w	r0, #0
 802a642:	f04f 0100 	mov.w	r1, #0
 802a646:	0159      	lsls	r1, r3, #5
 802a648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802a64c:	0150      	lsls	r0, r2, #5
 802a64e:	4602      	mov	r2, r0
 802a650:	460b      	mov	r3, r1
 802a652:	ebb2 080a 	subs.w	r8, r2, sl
 802a656:	eb63 090b 	sbc.w	r9, r3, fp
 802a65a:	f04f 0200 	mov.w	r2, #0
 802a65e:	f04f 0300 	mov.w	r3, #0
 802a662:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802a666:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802a66a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802a66e:	ebb2 0408 	subs.w	r4, r2, r8
 802a672:	eb63 0509 	sbc.w	r5, r3, r9
 802a676:	f04f 0200 	mov.w	r2, #0
 802a67a:	f04f 0300 	mov.w	r3, #0
 802a67e:	00eb      	lsls	r3, r5, #3
 802a680:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a684:	00e2      	lsls	r2, r4, #3
 802a686:	4614      	mov	r4, r2
 802a688:	461d      	mov	r5, r3
 802a68a:	eb14 030a 	adds.w	r3, r4, sl
 802a68e:	603b      	str	r3, [r7, #0]
 802a690:	eb45 030b 	adc.w	r3, r5, fp
 802a694:	607b      	str	r3, [r7, #4]
 802a696:	f04f 0200 	mov.w	r2, #0
 802a69a:	f04f 0300 	mov.w	r3, #0
 802a69e:	e9d7 4500 	ldrd	r4, r5, [r7]
 802a6a2:	4629      	mov	r1, r5
 802a6a4:	028b      	lsls	r3, r1, #10
 802a6a6:	4621      	mov	r1, r4
 802a6a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802a6ac:	4621      	mov	r1, r4
 802a6ae:	028a      	lsls	r2, r1, #10
 802a6b0:	4610      	mov	r0, r2
 802a6b2:	4619      	mov	r1, r3
 802a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a6b6:	2200      	movs	r2, #0
 802a6b8:	60bb      	str	r3, [r7, #8]
 802a6ba:	60fa      	str	r2, [r7, #12]
 802a6bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a6c0:	f7f7 fdd6 	bl	8022270 <__aeabi_uldivmod>
 802a6c4:	4602      	mov	r2, r0
 802a6c6:	460b      	mov	r3, r1
 802a6c8:	4613      	mov	r3, r2
 802a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802a6cc:	4b0b      	ldr	r3, [pc, #44]	; (802a6fc <HAL_RCC_GetSysClockFreq+0x180>)
 802a6ce:	685b      	ldr	r3, [r3, #4]
 802a6d0:	0c1b      	lsrs	r3, r3, #16
 802a6d2:	f003 0303 	and.w	r3, r3, #3
 802a6d6:	3301      	adds	r3, #1
 802a6d8:	005b      	lsls	r3, r3, #1
 802a6da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802a6dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 802a6e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a6e6:	e002      	b.n	802a6ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802a6e8:	4b05      	ldr	r3, [pc, #20]	; (802a700 <HAL_RCC_GetSysClockFreq+0x184>)
 802a6ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a6ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 802a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802a6f0:	4618      	mov	r0, r3
 802a6f2:	3740      	adds	r7, #64	; 0x40
 802a6f4:	46bd      	mov	sp, r7
 802a6f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a6fa:	bf00      	nop
 802a6fc:	40023800 	.word	0x40023800
 802a700:	00f42400 	.word	0x00f42400
 802a704:	00989680 	.word	0x00989680

0802a708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802a708:	b480      	push	{r7}
 802a70a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802a70c:	4b03      	ldr	r3, [pc, #12]	; (802a71c <HAL_RCC_GetHCLKFreq+0x14>)
 802a70e:	681b      	ldr	r3, [r3, #0]
}
 802a710:	4618      	mov	r0, r3
 802a712:	46bd      	mov	sp, r7
 802a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a718:	4770      	bx	lr
 802a71a:	bf00      	nop
 802a71c:	20000138 	.word	0x20000138

0802a720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802a720:	b580      	push	{r7, lr}
 802a722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802a724:	f7ff fff0 	bl	802a708 <HAL_RCC_GetHCLKFreq>
 802a728:	4602      	mov	r2, r0
 802a72a:	4b05      	ldr	r3, [pc, #20]	; (802a740 <HAL_RCC_GetPCLK1Freq+0x20>)
 802a72c:	689b      	ldr	r3, [r3, #8]
 802a72e:	0a9b      	lsrs	r3, r3, #10
 802a730:	f003 0307 	and.w	r3, r3, #7
 802a734:	4903      	ldr	r1, [pc, #12]	; (802a744 <HAL_RCC_GetPCLK1Freq+0x24>)
 802a736:	5ccb      	ldrb	r3, [r1, r3]
 802a738:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a73c:	4618      	mov	r0, r3
 802a73e:	bd80      	pop	{r7, pc}
 802a740:	40023800 	.word	0x40023800
 802a744:	08032d34 	.word	0x08032d34

0802a748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802a748:	b580      	push	{r7, lr}
 802a74a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802a74c:	f7ff ffdc 	bl	802a708 <HAL_RCC_GetHCLKFreq>
 802a750:	4602      	mov	r2, r0
 802a752:	4b05      	ldr	r3, [pc, #20]	; (802a768 <HAL_RCC_GetPCLK2Freq+0x20>)
 802a754:	689b      	ldr	r3, [r3, #8]
 802a756:	0b5b      	lsrs	r3, r3, #13
 802a758:	f003 0307 	and.w	r3, r3, #7
 802a75c:	4903      	ldr	r1, [pc, #12]	; (802a76c <HAL_RCC_GetPCLK2Freq+0x24>)
 802a75e:	5ccb      	ldrb	r3, [r1, r3]
 802a760:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a764:	4618      	mov	r0, r3
 802a766:	bd80      	pop	{r7, pc}
 802a768:	40023800 	.word	0x40023800
 802a76c:	08032d34 	.word	0x08032d34

0802a770 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802a770:	b580      	push	{r7, lr}
 802a772:	b086      	sub	sp, #24
 802a774:	af00      	add	r7, sp, #0
 802a776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802a778:	2300      	movs	r3, #0
 802a77a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802a77c:	2300      	movs	r3, #0
 802a77e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a780:	687b      	ldr	r3, [r7, #4]
 802a782:	681b      	ldr	r3, [r3, #0]
 802a784:	f003 0301 	and.w	r3, r3, #1
 802a788:	2b00      	cmp	r3, #0
 802a78a:	d105      	bne.n	802a798 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802a78c:	687b      	ldr	r3, [r7, #4]
 802a78e:	681b      	ldr	r3, [r3, #0]
 802a790:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a794:	2b00      	cmp	r3, #0
 802a796:	d035      	beq.n	802a804 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802a798:	4b62      	ldr	r3, [pc, #392]	; (802a924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a79a:	2200      	movs	r2, #0
 802a79c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a79e:	f7fc ff59 	bl	8027654 <HAL_GetTick>
 802a7a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a7a4:	e008      	b.n	802a7b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a7a6:	f7fc ff55 	bl	8027654 <HAL_GetTick>
 802a7aa:	4602      	mov	r2, r0
 802a7ac:	697b      	ldr	r3, [r7, #20]
 802a7ae:	1ad3      	subs	r3, r2, r3
 802a7b0:	2b02      	cmp	r3, #2
 802a7b2:	d901      	bls.n	802a7b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a7b4:	2303      	movs	r3, #3
 802a7b6:	e0b0      	b.n	802a91a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a7b8:	4b5b      	ldr	r3, [pc, #364]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a7ba:	681b      	ldr	r3, [r3, #0]
 802a7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a7c0:	2b00      	cmp	r3, #0
 802a7c2:	d1f0      	bne.n	802a7a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802a7c4:	687b      	ldr	r3, [r7, #4]
 802a7c6:	685b      	ldr	r3, [r3, #4]
 802a7c8:	019a      	lsls	r2, r3, #6
 802a7ca:	687b      	ldr	r3, [r7, #4]
 802a7cc:	689b      	ldr	r3, [r3, #8]
 802a7ce:	071b      	lsls	r3, r3, #28
 802a7d0:	4955      	ldr	r1, [pc, #340]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a7d2:	4313      	orrs	r3, r2
 802a7d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802a7d8:	4b52      	ldr	r3, [pc, #328]	; (802a924 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a7da:	2201      	movs	r2, #1
 802a7dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a7de:	f7fc ff39 	bl	8027654 <HAL_GetTick>
 802a7e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a7e4:	e008      	b.n	802a7f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a7e6:	f7fc ff35 	bl	8027654 <HAL_GetTick>
 802a7ea:	4602      	mov	r2, r0
 802a7ec:	697b      	ldr	r3, [r7, #20]
 802a7ee:	1ad3      	subs	r3, r2, r3
 802a7f0:	2b02      	cmp	r3, #2
 802a7f2:	d901      	bls.n	802a7f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a7f4:	2303      	movs	r3, #3
 802a7f6:	e090      	b.n	802a91a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a7f8:	4b4b      	ldr	r3, [pc, #300]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a7fa:	681b      	ldr	r3, [r3, #0]
 802a7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a800:	2b00      	cmp	r3, #0
 802a802:	d0f0      	beq.n	802a7e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802a804:	687b      	ldr	r3, [r7, #4]
 802a806:	681b      	ldr	r3, [r3, #0]
 802a808:	f003 0302 	and.w	r3, r3, #2
 802a80c:	2b00      	cmp	r3, #0
 802a80e:	f000 8083 	beq.w	802a918 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802a812:	2300      	movs	r3, #0
 802a814:	60fb      	str	r3, [r7, #12]
 802a816:	4b44      	ldr	r3, [pc, #272]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a81a:	4a43      	ldr	r2, [pc, #268]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a820:	6413      	str	r3, [r2, #64]	; 0x40
 802a822:	4b41      	ldr	r3, [pc, #260]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a82a:	60fb      	str	r3, [r7, #12]
 802a82c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802a82e:	4b3f      	ldr	r3, [pc, #252]	; (802a92c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a830:	681b      	ldr	r3, [r3, #0]
 802a832:	4a3e      	ldr	r2, [pc, #248]	; (802a92c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a838:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802a83a:	f7fc ff0b 	bl	8027654 <HAL_GetTick>
 802a83e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a840:	e008      	b.n	802a854 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802a842:	f7fc ff07 	bl	8027654 <HAL_GetTick>
 802a846:	4602      	mov	r2, r0
 802a848:	697b      	ldr	r3, [r7, #20]
 802a84a:	1ad3      	subs	r3, r2, r3
 802a84c:	2b02      	cmp	r3, #2
 802a84e:	d901      	bls.n	802a854 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 802a850:	2303      	movs	r3, #3
 802a852:	e062      	b.n	802a91a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a854:	4b35      	ldr	r3, [pc, #212]	; (802a92c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a856:	681b      	ldr	r3, [r3, #0]
 802a858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	d0f0      	beq.n	802a842 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802a860:	4b31      	ldr	r3, [pc, #196]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a868:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802a86a:	693b      	ldr	r3, [r7, #16]
 802a86c:	2b00      	cmp	r3, #0
 802a86e:	d02f      	beq.n	802a8d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 802a870:	687b      	ldr	r3, [r7, #4]
 802a872:	68db      	ldr	r3, [r3, #12]
 802a874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a878:	693a      	ldr	r2, [r7, #16]
 802a87a:	429a      	cmp	r2, r3
 802a87c:	d028      	beq.n	802a8d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802a87e:	4b2a      	ldr	r3, [pc, #168]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a886:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802a888:	4b29      	ldr	r3, [pc, #164]	; (802a930 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a88a:	2201      	movs	r2, #1
 802a88c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802a88e:	4b28      	ldr	r3, [pc, #160]	; (802a930 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a890:	2200      	movs	r2, #0
 802a892:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802a894:	4a24      	ldr	r2, [pc, #144]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a896:	693b      	ldr	r3, [r7, #16]
 802a898:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802a89a:	4b23      	ldr	r3, [pc, #140]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a89e:	f003 0301 	and.w	r3, r3, #1
 802a8a2:	2b01      	cmp	r3, #1
 802a8a4:	d114      	bne.n	802a8d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802a8a6:	f7fc fed5 	bl	8027654 <HAL_GetTick>
 802a8aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a8ac:	e00a      	b.n	802a8c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a8ae:	f7fc fed1 	bl	8027654 <HAL_GetTick>
 802a8b2:	4602      	mov	r2, r0
 802a8b4:	697b      	ldr	r3, [r7, #20]
 802a8b6:	1ad3      	subs	r3, r2, r3
 802a8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 802a8bc:	4293      	cmp	r3, r2
 802a8be:	d901      	bls.n	802a8c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 802a8c0:	2303      	movs	r3, #3
 802a8c2:	e02a      	b.n	802a91a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a8c4:	4b18      	ldr	r3, [pc, #96]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a8c8:	f003 0302 	and.w	r3, r3, #2
 802a8cc:	2b00      	cmp	r3, #0
 802a8ce:	d0ee      	beq.n	802a8ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802a8d0:	687b      	ldr	r3, [r7, #4]
 802a8d2:	68db      	ldr	r3, [r3, #12]
 802a8d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a8d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802a8dc:	d10d      	bne.n	802a8fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 802a8de:	4b12      	ldr	r3, [pc, #72]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8e0:	689b      	ldr	r3, [r3, #8]
 802a8e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802a8e6:	687b      	ldr	r3, [r7, #4]
 802a8e8:	68db      	ldr	r3, [r3, #12]
 802a8ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802a8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a8f2:	490d      	ldr	r1, [pc, #52]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8f4:	4313      	orrs	r3, r2
 802a8f6:	608b      	str	r3, [r1, #8]
 802a8f8:	e005      	b.n	802a906 <HAL_RCCEx_PeriphCLKConfig+0x196>
 802a8fa:	4b0b      	ldr	r3, [pc, #44]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8fc:	689b      	ldr	r3, [r3, #8]
 802a8fe:	4a0a      	ldr	r2, [pc, #40]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a900:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802a904:	6093      	str	r3, [r2, #8]
 802a906:	4b08      	ldr	r3, [pc, #32]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a908:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802a90a:	687b      	ldr	r3, [r7, #4]
 802a90c:	68db      	ldr	r3, [r3, #12]
 802a90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a912:	4905      	ldr	r1, [pc, #20]	; (802a928 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a914:	4313      	orrs	r3, r2
 802a916:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802a918:	2300      	movs	r3, #0
}
 802a91a:	4618      	mov	r0, r3
 802a91c:	3718      	adds	r7, #24
 802a91e:	46bd      	mov	sp, r7
 802a920:	bd80      	pop	{r7, pc}
 802a922:	bf00      	nop
 802a924:	42470068 	.word	0x42470068
 802a928:	40023800 	.word	0x40023800
 802a92c:	40007000 	.word	0x40007000
 802a930:	42470e40 	.word	0x42470e40

0802a934 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802a934:	b580      	push	{r7, lr}
 802a936:	b084      	sub	sp, #16
 802a938:	af00      	add	r7, sp, #0
 802a93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 802a93c:	2301      	movs	r3, #1
 802a93e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 802a940:	687b      	ldr	r3, [r7, #4]
 802a942:	2b00      	cmp	r3, #0
 802a944:	d101      	bne.n	802a94a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802a946:	2301      	movs	r3, #1
 802a948:	e066      	b.n	802aa18 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 802a94a:	687b      	ldr	r3, [r7, #4]
 802a94c:	7f5b      	ldrb	r3, [r3, #29]
 802a94e:	b2db      	uxtb	r3, r3
 802a950:	2b00      	cmp	r3, #0
 802a952:	d105      	bne.n	802a960 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802a954:	687b      	ldr	r3, [r7, #4]
 802a956:	2200      	movs	r2, #0
 802a958:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802a95a:	6878      	ldr	r0, [r7, #4]
 802a95c:	f7fb fb44 	bl	8025fe8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 802a960:	687b      	ldr	r3, [r7, #4]
 802a962:	2202      	movs	r2, #2
 802a964:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802a966:	687b      	ldr	r3, [r7, #4]
 802a968:	681b      	ldr	r3, [r3, #0]
 802a96a:	22ca      	movs	r2, #202	; 0xca
 802a96c:	625a      	str	r2, [r3, #36]	; 0x24
 802a96e:	687b      	ldr	r3, [r7, #4]
 802a970:	681b      	ldr	r3, [r3, #0]
 802a972:	2253      	movs	r2, #83	; 0x53
 802a974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802a976:	6878      	ldr	r0, [r7, #4]
 802a978:	f000 f998 	bl	802acac <RTC_EnterInitMode>
 802a97c:	4603      	mov	r3, r0
 802a97e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802a980:	7bfb      	ldrb	r3, [r7, #15]
 802a982:	2b00      	cmp	r3, #0
 802a984:	d12c      	bne.n	802a9e0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802a986:	687b      	ldr	r3, [r7, #4]
 802a988:	681b      	ldr	r3, [r3, #0]
 802a98a:	689b      	ldr	r3, [r3, #8]
 802a98c:	687a      	ldr	r2, [r7, #4]
 802a98e:	6812      	ldr	r2, [r2, #0]
 802a990:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802a994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a998:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802a99a:	687b      	ldr	r3, [r7, #4]
 802a99c:	681b      	ldr	r3, [r3, #0]
 802a99e:	6899      	ldr	r1, [r3, #8]
 802a9a0:	687b      	ldr	r3, [r7, #4]
 802a9a2:	685a      	ldr	r2, [r3, #4]
 802a9a4:	687b      	ldr	r3, [r7, #4]
 802a9a6:	691b      	ldr	r3, [r3, #16]
 802a9a8:	431a      	orrs	r2, r3
 802a9aa:	687b      	ldr	r3, [r7, #4]
 802a9ac:	695b      	ldr	r3, [r3, #20]
 802a9ae:	431a      	orrs	r2, r3
 802a9b0:	687b      	ldr	r3, [r7, #4]
 802a9b2:	681b      	ldr	r3, [r3, #0]
 802a9b4:	430a      	orrs	r2, r1
 802a9b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802a9b8:	687b      	ldr	r3, [r7, #4]
 802a9ba:	681b      	ldr	r3, [r3, #0]
 802a9bc:	687a      	ldr	r2, [r7, #4]
 802a9be:	68d2      	ldr	r2, [r2, #12]
 802a9c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 802a9c2:	687b      	ldr	r3, [r7, #4]
 802a9c4:	681b      	ldr	r3, [r3, #0]
 802a9c6:	6919      	ldr	r1, [r3, #16]
 802a9c8:	687b      	ldr	r3, [r7, #4]
 802a9ca:	689b      	ldr	r3, [r3, #8]
 802a9cc:	041a      	lsls	r2, r3, #16
 802a9ce:	687b      	ldr	r3, [r7, #4]
 802a9d0:	681b      	ldr	r3, [r3, #0]
 802a9d2:	430a      	orrs	r2, r1
 802a9d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802a9d6:	6878      	ldr	r0, [r7, #4]
 802a9d8:	f000 f99f 	bl	802ad1a <RTC_ExitInitMode>
 802a9dc:	4603      	mov	r3, r0
 802a9de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 802a9e0:	7bfb      	ldrb	r3, [r7, #15]
 802a9e2:	2b00      	cmp	r3, #0
 802a9e4:	d113      	bne.n	802aa0e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 802a9e6:	687b      	ldr	r3, [r7, #4]
 802a9e8:	681b      	ldr	r3, [r3, #0]
 802a9ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802a9ec:	687b      	ldr	r3, [r7, #4]
 802a9ee:	681b      	ldr	r3, [r3, #0]
 802a9f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802a9f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802a9f6:	687b      	ldr	r3, [r7, #4]
 802a9f8:	681b      	ldr	r3, [r3, #0]
 802a9fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802a9fc:	687b      	ldr	r3, [r7, #4]
 802a9fe:	699a      	ldr	r2, [r3, #24]
 802aa00:	687b      	ldr	r3, [r7, #4]
 802aa02:	681b      	ldr	r3, [r3, #0]
 802aa04:	430a      	orrs	r2, r1
 802aa06:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 802aa08:	687b      	ldr	r3, [r7, #4]
 802aa0a:	2201      	movs	r2, #1
 802aa0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802aa0e:	687b      	ldr	r3, [r7, #4]
 802aa10:	681b      	ldr	r3, [r3, #0]
 802aa12:	22ff      	movs	r2, #255	; 0xff
 802aa14:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802aa16:	7bfb      	ldrb	r3, [r7, #15]
}
 802aa18:	4618      	mov	r0, r3
 802aa1a:	3710      	adds	r7, #16
 802aa1c:	46bd      	mov	sp, r7
 802aa1e:	bd80      	pop	{r7, pc}

0802aa20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802aa20:	b590      	push	{r4, r7, lr}
 802aa22:	b087      	sub	sp, #28
 802aa24:	af00      	add	r7, sp, #0
 802aa26:	60f8      	str	r0, [r7, #12]
 802aa28:	60b9      	str	r1, [r7, #8]
 802aa2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802aa2c:	2300      	movs	r3, #0
 802aa2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802aa30:	68fb      	ldr	r3, [r7, #12]
 802aa32:	7f1b      	ldrb	r3, [r3, #28]
 802aa34:	2b01      	cmp	r3, #1
 802aa36:	d101      	bne.n	802aa3c <HAL_RTC_SetTime+0x1c>
 802aa38:	2302      	movs	r3, #2
 802aa3a:	e087      	b.n	802ab4c <HAL_RTC_SetTime+0x12c>
 802aa3c:	68fb      	ldr	r3, [r7, #12]
 802aa3e:	2201      	movs	r2, #1
 802aa40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802aa42:	68fb      	ldr	r3, [r7, #12]
 802aa44:	2202      	movs	r2, #2
 802aa46:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 802aa48:	687b      	ldr	r3, [r7, #4]
 802aa4a:	2b00      	cmp	r3, #0
 802aa4c:	d126      	bne.n	802aa9c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802aa4e:	68fb      	ldr	r3, [r7, #12]
 802aa50:	681b      	ldr	r3, [r3, #0]
 802aa52:	689b      	ldr	r3, [r3, #8]
 802aa54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802aa58:	2b00      	cmp	r3, #0
 802aa5a:	d102      	bne.n	802aa62 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802aa5c:	68bb      	ldr	r3, [r7, #8]
 802aa5e:	2200      	movs	r2, #0
 802aa60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802aa62:	68bb      	ldr	r3, [r7, #8]
 802aa64:	781b      	ldrb	r3, [r3, #0]
 802aa66:	4618      	mov	r0, r3
 802aa68:	f000 f97c 	bl	802ad64 <RTC_ByteToBcd2>
 802aa6c:	4603      	mov	r3, r0
 802aa6e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802aa70:	68bb      	ldr	r3, [r7, #8]
 802aa72:	785b      	ldrb	r3, [r3, #1]
 802aa74:	4618      	mov	r0, r3
 802aa76:	f000 f975 	bl	802ad64 <RTC_ByteToBcd2>
 802aa7a:	4603      	mov	r3, r0
 802aa7c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802aa7e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 802aa80:	68bb      	ldr	r3, [r7, #8]
 802aa82:	789b      	ldrb	r3, [r3, #2]
 802aa84:	4618      	mov	r0, r3
 802aa86:	f000 f96d 	bl	802ad64 <RTC_ByteToBcd2>
 802aa8a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802aa8c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 802aa90:	68bb      	ldr	r3, [r7, #8]
 802aa92:	78db      	ldrb	r3, [r3, #3]
 802aa94:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802aa96:	4313      	orrs	r3, r2
 802aa98:	617b      	str	r3, [r7, #20]
 802aa9a:	e018      	b.n	802aace <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802aa9c:	68fb      	ldr	r3, [r7, #12]
 802aa9e:	681b      	ldr	r3, [r3, #0]
 802aaa0:	689b      	ldr	r3, [r3, #8]
 802aaa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	d102      	bne.n	802aab0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802aaaa:	68bb      	ldr	r3, [r7, #8]
 802aaac:	2200      	movs	r2, #0
 802aaae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802aab0:	68bb      	ldr	r3, [r7, #8]
 802aab2:	781b      	ldrb	r3, [r3, #0]
 802aab4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802aab6:	68bb      	ldr	r3, [r7, #8]
 802aab8:	785b      	ldrb	r3, [r3, #1]
 802aaba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802aabc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 802aabe:	68ba      	ldr	r2, [r7, #8]
 802aac0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802aac2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 802aac4:	68bb      	ldr	r3, [r7, #8]
 802aac6:	78db      	ldrb	r3, [r3, #3]
 802aac8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802aaca:	4313      	orrs	r3, r2
 802aacc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802aace:	68fb      	ldr	r3, [r7, #12]
 802aad0:	681b      	ldr	r3, [r3, #0]
 802aad2:	22ca      	movs	r2, #202	; 0xca
 802aad4:	625a      	str	r2, [r3, #36]	; 0x24
 802aad6:	68fb      	ldr	r3, [r7, #12]
 802aad8:	681b      	ldr	r3, [r3, #0]
 802aada:	2253      	movs	r2, #83	; 0x53
 802aadc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802aade:	68f8      	ldr	r0, [r7, #12]
 802aae0:	f000 f8e4 	bl	802acac <RTC_EnterInitMode>
 802aae4:	4603      	mov	r3, r0
 802aae6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802aae8:	7cfb      	ldrb	r3, [r7, #19]
 802aaea:	2b00      	cmp	r3, #0
 802aaec:	d120      	bne.n	802ab30 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802aaee:	68fb      	ldr	r3, [r7, #12]
 802aaf0:	681a      	ldr	r2, [r3, #0]
 802aaf2:	697b      	ldr	r3, [r7, #20]
 802aaf4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802aaf8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802aafc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 802aafe:	68fb      	ldr	r3, [r7, #12]
 802ab00:	681b      	ldr	r3, [r3, #0]
 802ab02:	689a      	ldr	r2, [r3, #8]
 802ab04:	68fb      	ldr	r3, [r7, #12]
 802ab06:	681b      	ldr	r3, [r3, #0]
 802ab08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802ab0c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802ab0e:	68fb      	ldr	r3, [r7, #12]
 802ab10:	681b      	ldr	r3, [r3, #0]
 802ab12:	6899      	ldr	r1, [r3, #8]
 802ab14:	68bb      	ldr	r3, [r7, #8]
 802ab16:	68da      	ldr	r2, [r3, #12]
 802ab18:	68bb      	ldr	r3, [r7, #8]
 802ab1a:	691b      	ldr	r3, [r3, #16]
 802ab1c:	431a      	orrs	r2, r3
 802ab1e:	68fb      	ldr	r3, [r7, #12]
 802ab20:	681b      	ldr	r3, [r3, #0]
 802ab22:	430a      	orrs	r2, r1
 802ab24:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ab26:	68f8      	ldr	r0, [r7, #12]
 802ab28:	f000 f8f7 	bl	802ad1a <RTC_ExitInitMode>
 802ab2c:	4603      	mov	r3, r0
 802ab2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ab30:	7cfb      	ldrb	r3, [r7, #19]
 802ab32:	2b00      	cmp	r3, #0
 802ab34:	d102      	bne.n	802ab3c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ab36:	68fb      	ldr	r3, [r7, #12]
 802ab38:	2201      	movs	r2, #1
 802ab3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ab3c:	68fb      	ldr	r3, [r7, #12]
 802ab3e:	681b      	ldr	r3, [r3, #0]
 802ab40:	22ff      	movs	r2, #255	; 0xff
 802ab42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ab44:	68fb      	ldr	r3, [r7, #12]
 802ab46:	2200      	movs	r2, #0
 802ab48:	771a      	strb	r2, [r3, #28]

  return status;
 802ab4a:	7cfb      	ldrb	r3, [r7, #19]
}
 802ab4c:	4618      	mov	r0, r3
 802ab4e:	371c      	adds	r7, #28
 802ab50:	46bd      	mov	sp, r7
 802ab52:	bd90      	pop	{r4, r7, pc}

0802ab54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 802ab54:	b590      	push	{r4, r7, lr}
 802ab56:	b087      	sub	sp, #28
 802ab58:	af00      	add	r7, sp, #0
 802ab5a:	60f8      	str	r0, [r7, #12]
 802ab5c:	60b9      	str	r1, [r7, #8]
 802ab5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 802ab60:	2300      	movs	r3, #0
 802ab62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802ab64:	68fb      	ldr	r3, [r7, #12]
 802ab66:	7f1b      	ldrb	r3, [r3, #28]
 802ab68:	2b01      	cmp	r3, #1
 802ab6a:	d101      	bne.n	802ab70 <HAL_RTC_SetDate+0x1c>
 802ab6c:	2302      	movs	r3, #2
 802ab6e:	e071      	b.n	802ac54 <HAL_RTC_SetDate+0x100>
 802ab70:	68fb      	ldr	r3, [r7, #12]
 802ab72:	2201      	movs	r2, #1
 802ab74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802ab76:	68fb      	ldr	r3, [r7, #12]
 802ab78:	2202      	movs	r2, #2
 802ab7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	2b00      	cmp	r3, #0
 802ab80:	d10e      	bne.n	802aba0 <HAL_RTC_SetDate+0x4c>
 802ab82:	68bb      	ldr	r3, [r7, #8]
 802ab84:	785b      	ldrb	r3, [r3, #1]
 802ab86:	f003 0310 	and.w	r3, r3, #16
 802ab8a:	2b00      	cmp	r3, #0
 802ab8c:	d008      	beq.n	802aba0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802ab8e:	68bb      	ldr	r3, [r7, #8]
 802ab90:	785b      	ldrb	r3, [r3, #1]
 802ab92:	f023 0310 	bic.w	r3, r3, #16
 802ab96:	b2db      	uxtb	r3, r3
 802ab98:	330a      	adds	r3, #10
 802ab9a:	b2da      	uxtb	r2, r3
 802ab9c:	68bb      	ldr	r3, [r7, #8]
 802ab9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 802aba0:	687b      	ldr	r3, [r7, #4]
 802aba2:	2b00      	cmp	r3, #0
 802aba4:	d11c      	bne.n	802abe0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802aba6:	68bb      	ldr	r3, [r7, #8]
 802aba8:	78db      	ldrb	r3, [r3, #3]
 802abaa:	4618      	mov	r0, r3
 802abac:	f000 f8da 	bl	802ad64 <RTC_ByteToBcd2>
 802abb0:	4603      	mov	r3, r0
 802abb2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802abb4:	68bb      	ldr	r3, [r7, #8]
 802abb6:	785b      	ldrb	r3, [r3, #1]
 802abb8:	4618      	mov	r0, r3
 802abba:	f000 f8d3 	bl	802ad64 <RTC_ByteToBcd2>
 802abbe:	4603      	mov	r3, r0
 802abc0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802abc2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 802abc4:	68bb      	ldr	r3, [r7, #8]
 802abc6:	789b      	ldrb	r3, [r3, #2]
 802abc8:	4618      	mov	r0, r3
 802abca:	f000 f8cb 	bl	802ad64 <RTC_ByteToBcd2>
 802abce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802abd0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 802abd4:	68bb      	ldr	r3, [r7, #8]
 802abd6:	781b      	ldrb	r3, [r3, #0]
 802abd8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802abda:	4313      	orrs	r3, r2
 802abdc:	617b      	str	r3, [r7, #20]
 802abde:	e00e      	b.n	802abfe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802abe0:	68bb      	ldr	r3, [r7, #8]
 802abe2:	78db      	ldrb	r3, [r3, #3]
 802abe4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802abe6:	68bb      	ldr	r3, [r7, #8]
 802abe8:	785b      	ldrb	r3, [r3, #1]
 802abea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802abec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 802abee:	68ba      	ldr	r2, [r7, #8]
 802abf0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802abf2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 802abf4:	68bb      	ldr	r3, [r7, #8]
 802abf6:	781b      	ldrb	r3, [r3, #0]
 802abf8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802abfa:	4313      	orrs	r3, r2
 802abfc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	681b      	ldr	r3, [r3, #0]
 802ac02:	22ca      	movs	r2, #202	; 0xca
 802ac04:	625a      	str	r2, [r3, #36]	; 0x24
 802ac06:	68fb      	ldr	r3, [r7, #12]
 802ac08:	681b      	ldr	r3, [r3, #0]
 802ac0a:	2253      	movs	r2, #83	; 0x53
 802ac0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802ac0e:	68f8      	ldr	r0, [r7, #12]
 802ac10:	f000 f84c 	bl	802acac <RTC_EnterInitMode>
 802ac14:	4603      	mov	r3, r0
 802ac16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802ac18:	7cfb      	ldrb	r3, [r7, #19]
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	d10c      	bne.n	802ac38 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802ac1e:	68fb      	ldr	r3, [r7, #12]
 802ac20:	681a      	ldr	r2, [r3, #0]
 802ac22:	697b      	ldr	r3, [r7, #20]
 802ac24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802ac28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802ac2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ac2e:	68f8      	ldr	r0, [r7, #12]
 802ac30:	f000 f873 	bl	802ad1a <RTC_ExitInitMode>
 802ac34:	4603      	mov	r3, r0
 802ac36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ac38:	7cfb      	ldrb	r3, [r7, #19]
 802ac3a:	2b00      	cmp	r3, #0
 802ac3c:	d102      	bne.n	802ac44 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ac3e:	68fb      	ldr	r3, [r7, #12]
 802ac40:	2201      	movs	r2, #1
 802ac42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ac44:	68fb      	ldr	r3, [r7, #12]
 802ac46:	681b      	ldr	r3, [r3, #0]
 802ac48:	22ff      	movs	r2, #255	; 0xff
 802ac4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ac4c:	68fb      	ldr	r3, [r7, #12]
 802ac4e:	2200      	movs	r2, #0
 802ac50:	771a      	strb	r2, [r3, #28]

  return status;
 802ac52:	7cfb      	ldrb	r3, [r7, #19]
}
 802ac54:	4618      	mov	r0, r3
 802ac56:	371c      	adds	r7, #28
 802ac58:	46bd      	mov	sp, r7
 802ac5a:	bd90      	pop	{r4, r7, pc}

0802ac5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 802ac5c:	b580      	push	{r7, lr}
 802ac5e:	b084      	sub	sp, #16
 802ac60:	af00      	add	r7, sp, #0
 802ac62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802ac64:	2300      	movs	r3, #0
 802ac66:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	681b      	ldr	r3, [r3, #0]
 802ac6c:	68da      	ldr	r2, [r3, #12]
 802ac6e:	687b      	ldr	r3, [r7, #4]
 802ac70:	681b      	ldr	r3, [r3, #0]
 802ac72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802ac76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 802ac78:	f7fc fcec 	bl	8027654 <HAL_GetTick>
 802ac7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ac7e:	e009      	b.n	802ac94 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802ac80:	f7fc fce8 	bl	8027654 <HAL_GetTick>
 802ac84:	4602      	mov	r2, r0
 802ac86:	68fb      	ldr	r3, [r7, #12]
 802ac88:	1ad3      	subs	r3, r2, r3
 802ac8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ac8e:	d901      	bls.n	802ac94 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802ac90:	2303      	movs	r3, #3
 802ac92:	e007      	b.n	802aca4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ac94:	687b      	ldr	r3, [r7, #4]
 802ac96:	681b      	ldr	r3, [r3, #0]
 802ac98:	68db      	ldr	r3, [r3, #12]
 802ac9a:	f003 0320 	and.w	r3, r3, #32
 802ac9e:	2b00      	cmp	r3, #0
 802aca0:	d0ee      	beq.n	802ac80 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802aca2:	2300      	movs	r3, #0
}
 802aca4:	4618      	mov	r0, r3
 802aca6:	3710      	adds	r7, #16
 802aca8:	46bd      	mov	sp, r7
 802acaa:	bd80      	pop	{r7, pc}

0802acac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802acac:	b580      	push	{r7, lr}
 802acae:	b084      	sub	sp, #16
 802acb0:	af00      	add	r7, sp, #0
 802acb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802acb4:	2300      	movs	r3, #0
 802acb6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802acb8:	2300      	movs	r3, #0
 802acba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 802acbc:	687b      	ldr	r3, [r7, #4]
 802acbe:	681b      	ldr	r3, [r3, #0]
 802acc0:	68db      	ldr	r3, [r3, #12]
 802acc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802acc6:	2b00      	cmp	r3, #0
 802acc8:	d122      	bne.n	802ad10 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802acca:	687b      	ldr	r3, [r7, #4]
 802accc:	681b      	ldr	r3, [r3, #0]
 802acce:	68da      	ldr	r2, [r3, #12]
 802acd0:	687b      	ldr	r3, [r7, #4]
 802acd2:	681b      	ldr	r3, [r3, #0]
 802acd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802acd8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802acda:	f7fc fcbb 	bl	8027654 <HAL_GetTick>
 802acde:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802ace0:	e00c      	b.n	802acfc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802ace2:	f7fc fcb7 	bl	8027654 <HAL_GetTick>
 802ace6:	4602      	mov	r2, r0
 802ace8:	68bb      	ldr	r3, [r7, #8]
 802acea:	1ad3      	subs	r3, r2, r3
 802acec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802acf0:	d904      	bls.n	802acfc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 802acf2:	687b      	ldr	r3, [r7, #4]
 802acf4:	2204      	movs	r2, #4
 802acf6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 802acf8:	2301      	movs	r3, #1
 802acfa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802acfc:	687b      	ldr	r3, [r7, #4]
 802acfe:	681b      	ldr	r3, [r3, #0]
 802ad00:	68db      	ldr	r3, [r3, #12]
 802ad02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d102      	bne.n	802ad10 <RTC_EnterInitMode+0x64>
 802ad0a:	7bfb      	ldrb	r3, [r7, #15]
 802ad0c:	2b01      	cmp	r3, #1
 802ad0e:	d1e8      	bne.n	802ace2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 802ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 802ad12:	4618      	mov	r0, r3
 802ad14:	3710      	adds	r7, #16
 802ad16:	46bd      	mov	sp, r7
 802ad18:	bd80      	pop	{r7, pc}

0802ad1a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802ad1a:	b580      	push	{r7, lr}
 802ad1c:	b084      	sub	sp, #16
 802ad1e:	af00      	add	r7, sp, #0
 802ad20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802ad22:	2300      	movs	r3, #0
 802ad24:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802ad26:	687b      	ldr	r3, [r7, #4]
 802ad28:	681b      	ldr	r3, [r3, #0]
 802ad2a:	68da      	ldr	r2, [r3, #12]
 802ad2c:	687b      	ldr	r3, [r7, #4]
 802ad2e:	681b      	ldr	r3, [r3, #0]
 802ad30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802ad34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 802ad36:	687b      	ldr	r3, [r7, #4]
 802ad38:	681b      	ldr	r3, [r3, #0]
 802ad3a:	689b      	ldr	r3, [r3, #8]
 802ad3c:	f003 0320 	and.w	r3, r3, #32
 802ad40:	2b00      	cmp	r3, #0
 802ad42:	d10a      	bne.n	802ad5a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802ad44:	6878      	ldr	r0, [r7, #4]
 802ad46:	f7ff ff89 	bl	802ac5c <HAL_RTC_WaitForSynchro>
 802ad4a:	4603      	mov	r3, r0
 802ad4c:	2b00      	cmp	r3, #0
 802ad4e:	d004      	beq.n	802ad5a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802ad50:	687b      	ldr	r3, [r7, #4]
 802ad52:	2204      	movs	r2, #4
 802ad54:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 802ad56:	2301      	movs	r3, #1
 802ad58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802ad5a:	7bfb      	ldrb	r3, [r7, #15]
}
 802ad5c:	4618      	mov	r0, r3
 802ad5e:	3710      	adds	r7, #16
 802ad60:	46bd      	mov	sp, r7
 802ad62:	bd80      	pop	{r7, pc}

0802ad64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 802ad64:	b480      	push	{r7}
 802ad66:	b085      	sub	sp, #20
 802ad68:	af00      	add	r7, sp, #0
 802ad6a:	4603      	mov	r3, r0
 802ad6c:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 802ad6e:	2300      	movs	r3, #0
 802ad70:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 802ad72:	e005      	b.n	802ad80 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 802ad74:	7bfb      	ldrb	r3, [r7, #15]
 802ad76:	3301      	adds	r3, #1
 802ad78:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 802ad7a:	79fb      	ldrb	r3, [r7, #7]
 802ad7c:	3b0a      	subs	r3, #10
 802ad7e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 802ad80:	79fb      	ldrb	r3, [r7, #7]
 802ad82:	2b09      	cmp	r3, #9
 802ad84:	d8f6      	bhi.n	802ad74 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 802ad86:	7bfb      	ldrb	r3, [r7, #15]
 802ad88:	011b      	lsls	r3, r3, #4
 802ad8a:	b2da      	uxtb	r2, r3
 802ad8c:	79fb      	ldrb	r3, [r7, #7]
 802ad8e:	4313      	orrs	r3, r2
 802ad90:	b2db      	uxtb	r3, r3
}
 802ad92:	4618      	mov	r0, r3
 802ad94:	3714      	adds	r7, #20
 802ad96:	46bd      	mov	sp, r7
 802ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad9c:	4770      	bx	lr

0802ad9e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802ad9e:	b580      	push	{r7, lr}
 802ada0:	b082      	sub	sp, #8
 802ada2:	af00      	add	r7, sp, #0
 802ada4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802ada6:	687b      	ldr	r3, [r7, #4]
 802ada8:	2b00      	cmp	r3, #0
 802adaa:	d101      	bne.n	802adb0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802adac:	2301      	movs	r3, #1
 802adae:	e07b      	b.n	802aea8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802adb0:	687b      	ldr	r3, [r7, #4]
 802adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802adb4:	2b00      	cmp	r3, #0
 802adb6:	d108      	bne.n	802adca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802adb8:	687b      	ldr	r3, [r7, #4]
 802adba:	685b      	ldr	r3, [r3, #4]
 802adbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802adc0:	d009      	beq.n	802add6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	2200      	movs	r2, #0
 802adc6:	61da      	str	r2, [r3, #28]
 802adc8:	e005      	b.n	802add6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	2200      	movs	r2, #0
 802adce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802add0:	687b      	ldr	r3, [r7, #4]
 802add2:	2200      	movs	r2, #0
 802add4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802add6:	687b      	ldr	r3, [r7, #4]
 802add8:	2200      	movs	r2, #0
 802adda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802addc:	687b      	ldr	r3, [r7, #4]
 802adde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802ade2:	b2db      	uxtb	r3, r3
 802ade4:	2b00      	cmp	r3, #0
 802ade6:	d106      	bne.n	802adf6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802ade8:	687b      	ldr	r3, [r7, #4]
 802adea:	2200      	movs	r2, #0
 802adec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802adf0:	6878      	ldr	r0, [r7, #4]
 802adf2:	f7fb f923 	bl	802603c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802adf6:	687b      	ldr	r3, [r7, #4]
 802adf8:	2202      	movs	r2, #2
 802adfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802adfe:	687b      	ldr	r3, [r7, #4]
 802ae00:	681b      	ldr	r3, [r3, #0]
 802ae02:	681a      	ldr	r2, [r3, #0]
 802ae04:	687b      	ldr	r3, [r7, #4]
 802ae06:	681b      	ldr	r3, [r3, #0]
 802ae08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ae0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802ae0e:	687b      	ldr	r3, [r7, #4]
 802ae10:	685b      	ldr	r3, [r3, #4]
 802ae12:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802ae16:	687b      	ldr	r3, [r7, #4]
 802ae18:	689b      	ldr	r3, [r3, #8]
 802ae1a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802ae1e:	431a      	orrs	r2, r3
 802ae20:	687b      	ldr	r3, [r7, #4]
 802ae22:	68db      	ldr	r3, [r3, #12]
 802ae24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802ae28:	431a      	orrs	r2, r3
 802ae2a:	687b      	ldr	r3, [r7, #4]
 802ae2c:	691b      	ldr	r3, [r3, #16]
 802ae2e:	f003 0302 	and.w	r3, r3, #2
 802ae32:	431a      	orrs	r2, r3
 802ae34:	687b      	ldr	r3, [r7, #4]
 802ae36:	695b      	ldr	r3, [r3, #20]
 802ae38:	f003 0301 	and.w	r3, r3, #1
 802ae3c:	431a      	orrs	r2, r3
 802ae3e:	687b      	ldr	r3, [r7, #4]
 802ae40:	699b      	ldr	r3, [r3, #24]
 802ae42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802ae46:	431a      	orrs	r2, r3
 802ae48:	687b      	ldr	r3, [r7, #4]
 802ae4a:	69db      	ldr	r3, [r3, #28]
 802ae4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802ae50:	431a      	orrs	r2, r3
 802ae52:	687b      	ldr	r3, [r7, #4]
 802ae54:	6a1b      	ldr	r3, [r3, #32]
 802ae56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ae5a:	ea42 0103 	orr.w	r1, r2, r3
 802ae5e:	687b      	ldr	r3, [r7, #4]
 802ae60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ae62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802ae66:	687b      	ldr	r3, [r7, #4]
 802ae68:	681b      	ldr	r3, [r3, #0]
 802ae6a:	430a      	orrs	r2, r1
 802ae6c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802ae6e:	687b      	ldr	r3, [r7, #4]
 802ae70:	699b      	ldr	r3, [r3, #24]
 802ae72:	0c1b      	lsrs	r3, r3, #16
 802ae74:	f003 0104 	and.w	r1, r3, #4
 802ae78:	687b      	ldr	r3, [r7, #4]
 802ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ae7c:	f003 0210 	and.w	r2, r3, #16
 802ae80:	687b      	ldr	r3, [r7, #4]
 802ae82:	681b      	ldr	r3, [r3, #0]
 802ae84:	430a      	orrs	r2, r1
 802ae86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802ae88:	687b      	ldr	r3, [r7, #4]
 802ae8a:	681b      	ldr	r3, [r3, #0]
 802ae8c:	69da      	ldr	r2, [r3, #28]
 802ae8e:	687b      	ldr	r3, [r7, #4]
 802ae90:	681b      	ldr	r3, [r3, #0]
 802ae92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802ae96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802ae98:	687b      	ldr	r3, [r7, #4]
 802ae9a:	2200      	movs	r2, #0
 802ae9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802ae9e:	687b      	ldr	r3, [r7, #4]
 802aea0:	2201      	movs	r2, #1
 802aea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802aea6:	2300      	movs	r3, #0
}
 802aea8:	4618      	mov	r0, r3
 802aeaa:	3708      	adds	r7, #8
 802aeac:	46bd      	mov	sp, r7
 802aeae:	bd80      	pop	{r7, pc}

0802aeb0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 802aeb0:	b580      	push	{r7, lr}
 802aeb2:	b082      	sub	sp, #8
 802aeb4:	af00      	add	r7, sp, #0
 802aeb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802aeb8:	687b      	ldr	r3, [r7, #4]
 802aeba:	2b00      	cmp	r3, #0
 802aebc:	d101      	bne.n	802aec2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 802aebe:	2301      	movs	r3, #1
 802aec0:	e01a      	b.n	802aef8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	2202      	movs	r2, #2
 802aec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 802aeca:	687b      	ldr	r3, [r7, #4]
 802aecc:	681b      	ldr	r3, [r3, #0]
 802aece:	681a      	ldr	r2, [r3, #0]
 802aed0:	687b      	ldr	r3, [r7, #4]
 802aed2:	681b      	ldr	r3, [r3, #0]
 802aed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802aed8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 802aeda:	6878      	ldr	r0, [r7, #4]
 802aedc:	f7fb f91e 	bl	802611c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802aee0:	687b      	ldr	r3, [r7, #4]
 802aee2:	2200      	movs	r2, #0
 802aee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802aee6:	687b      	ldr	r3, [r7, #4]
 802aee8:	2200      	movs	r2, #0
 802aeea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 802aeee:	687b      	ldr	r3, [r7, #4]
 802aef0:	2200      	movs	r2, #0
 802aef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802aef6:	2300      	movs	r3, #0
}
 802aef8:	4618      	mov	r0, r3
 802aefa:	3708      	adds	r7, #8
 802aefc:	46bd      	mov	sp, r7
 802aefe:	bd80      	pop	{r7, pc}

0802af00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 802af00:	b580      	push	{r7, lr}
 802af02:	b08c      	sub	sp, #48	; 0x30
 802af04:	af00      	add	r7, sp, #0
 802af06:	60f8      	str	r0, [r7, #12]
 802af08:	60b9      	str	r1, [r7, #8]
 802af0a:	607a      	str	r2, [r7, #4]
 802af0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802af0e:	2301      	movs	r3, #1
 802af10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802af12:	2300      	movs	r3, #0
 802af14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802af18:	68fb      	ldr	r3, [r7, #12]
 802af1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802af1e:	2b01      	cmp	r3, #1
 802af20:	d101      	bne.n	802af26 <HAL_SPI_TransmitReceive+0x26>
 802af22:	2302      	movs	r3, #2
 802af24:	e18a      	b.n	802b23c <HAL_SPI_TransmitReceive+0x33c>
 802af26:	68fb      	ldr	r3, [r7, #12]
 802af28:	2201      	movs	r2, #1
 802af2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802af2e:	f7fc fb91 	bl	8027654 <HAL_GetTick>
 802af32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802af34:	68fb      	ldr	r3, [r7, #12]
 802af36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802af3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	685b      	ldr	r3, [r3, #4]
 802af42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802af44:	887b      	ldrh	r3, [r7, #2]
 802af46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802af48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802af4c:	2b01      	cmp	r3, #1
 802af4e:	d00f      	beq.n	802af70 <HAL_SPI_TransmitReceive+0x70>
 802af50:	69fb      	ldr	r3, [r7, #28]
 802af52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802af56:	d107      	bne.n	802af68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802af58:	68fb      	ldr	r3, [r7, #12]
 802af5a:	689b      	ldr	r3, [r3, #8]
 802af5c:	2b00      	cmp	r3, #0
 802af5e:	d103      	bne.n	802af68 <HAL_SPI_TransmitReceive+0x68>
 802af60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802af64:	2b04      	cmp	r3, #4
 802af66:	d003      	beq.n	802af70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802af68:	2302      	movs	r3, #2
 802af6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802af6e:	e15b      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802af70:	68bb      	ldr	r3, [r7, #8]
 802af72:	2b00      	cmp	r3, #0
 802af74:	d005      	beq.n	802af82 <HAL_SPI_TransmitReceive+0x82>
 802af76:	687b      	ldr	r3, [r7, #4]
 802af78:	2b00      	cmp	r3, #0
 802af7a:	d002      	beq.n	802af82 <HAL_SPI_TransmitReceive+0x82>
 802af7c:	887b      	ldrh	r3, [r7, #2]
 802af7e:	2b00      	cmp	r3, #0
 802af80:	d103      	bne.n	802af8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 802af82:	2301      	movs	r3, #1
 802af84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802af88:	e14e      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802af8a:	68fb      	ldr	r3, [r7, #12]
 802af8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802af90:	b2db      	uxtb	r3, r3
 802af92:	2b04      	cmp	r3, #4
 802af94:	d003      	beq.n	802af9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802af96:	68fb      	ldr	r3, [r7, #12]
 802af98:	2205      	movs	r2, #5
 802af9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802af9e:	68fb      	ldr	r3, [r7, #12]
 802afa0:	2200      	movs	r2, #0
 802afa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802afa4:	68fb      	ldr	r3, [r7, #12]
 802afa6:	687a      	ldr	r2, [r7, #4]
 802afa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802afaa:	68fb      	ldr	r3, [r7, #12]
 802afac:	887a      	ldrh	r2, [r7, #2]
 802afae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 802afb0:	68fb      	ldr	r3, [r7, #12]
 802afb2:	887a      	ldrh	r2, [r7, #2]
 802afb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802afb6:	68fb      	ldr	r3, [r7, #12]
 802afb8:	68ba      	ldr	r2, [r7, #8]
 802afba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802afbc:	68fb      	ldr	r3, [r7, #12]
 802afbe:	887a      	ldrh	r2, [r7, #2]
 802afc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 802afc2:	68fb      	ldr	r3, [r7, #12]
 802afc4:	887a      	ldrh	r2, [r7, #2]
 802afc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802afc8:	68fb      	ldr	r3, [r7, #12]
 802afca:	2200      	movs	r2, #0
 802afcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802afce:	68fb      	ldr	r3, [r7, #12]
 802afd0:	2200      	movs	r2, #0
 802afd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802afd4:	68fb      	ldr	r3, [r7, #12]
 802afd6:	681b      	ldr	r3, [r3, #0]
 802afd8:	681b      	ldr	r3, [r3, #0]
 802afda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802afde:	2b40      	cmp	r3, #64	; 0x40
 802afe0:	d007      	beq.n	802aff2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802afe2:	68fb      	ldr	r3, [r7, #12]
 802afe4:	681b      	ldr	r3, [r3, #0]
 802afe6:	681a      	ldr	r2, [r3, #0]
 802afe8:	68fb      	ldr	r3, [r7, #12]
 802afea:	681b      	ldr	r3, [r3, #0]
 802afec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802aff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802aff2:	68fb      	ldr	r3, [r7, #12]
 802aff4:	68db      	ldr	r3, [r3, #12]
 802aff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802affa:	d178      	bne.n	802b0ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802affc:	68fb      	ldr	r3, [r7, #12]
 802affe:	685b      	ldr	r3, [r3, #4]
 802b000:	2b00      	cmp	r3, #0
 802b002:	d002      	beq.n	802b00a <HAL_SPI_TransmitReceive+0x10a>
 802b004:	8b7b      	ldrh	r3, [r7, #26]
 802b006:	2b01      	cmp	r3, #1
 802b008:	d166      	bne.n	802b0d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b00a:	68fb      	ldr	r3, [r7, #12]
 802b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b00e:	881a      	ldrh	r2, [r3, #0]
 802b010:	68fb      	ldr	r3, [r7, #12]
 802b012:	681b      	ldr	r3, [r3, #0]
 802b014:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802b016:	68fb      	ldr	r3, [r7, #12]
 802b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b01a:	1c9a      	adds	r2, r3, #2
 802b01c:	68fb      	ldr	r3, [r7, #12]
 802b01e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b024:	b29b      	uxth	r3, r3
 802b026:	3b01      	subs	r3, #1
 802b028:	b29a      	uxth	r2, r3
 802b02a:	68fb      	ldr	r3, [r7, #12]
 802b02c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b02e:	e053      	b.n	802b0d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b030:	68fb      	ldr	r3, [r7, #12]
 802b032:	681b      	ldr	r3, [r3, #0]
 802b034:	689b      	ldr	r3, [r3, #8]
 802b036:	f003 0302 	and.w	r3, r3, #2
 802b03a:	2b02      	cmp	r3, #2
 802b03c:	d11b      	bne.n	802b076 <HAL_SPI_TransmitReceive+0x176>
 802b03e:	68fb      	ldr	r3, [r7, #12]
 802b040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b042:	b29b      	uxth	r3, r3
 802b044:	2b00      	cmp	r3, #0
 802b046:	d016      	beq.n	802b076 <HAL_SPI_TransmitReceive+0x176>
 802b048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b04a:	2b01      	cmp	r3, #1
 802b04c:	d113      	bne.n	802b076 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b04e:	68fb      	ldr	r3, [r7, #12]
 802b050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b052:	881a      	ldrh	r2, [r3, #0]
 802b054:	68fb      	ldr	r3, [r7, #12]
 802b056:	681b      	ldr	r3, [r3, #0]
 802b058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802b05a:	68fb      	ldr	r3, [r7, #12]
 802b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b05e:	1c9a      	adds	r2, r3, #2
 802b060:	68fb      	ldr	r3, [r7, #12]
 802b062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b064:	68fb      	ldr	r3, [r7, #12]
 802b066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b068:	b29b      	uxth	r3, r3
 802b06a:	3b01      	subs	r3, #1
 802b06c:	b29a      	uxth	r2, r3
 802b06e:	68fb      	ldr	r3, [r7, #12]
 802b070:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b072:	2300      	movs	r3, #0
 802b074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	681b      	ldr	r3, [r3, #0]
 802b07a:	689b      	ldr	r3, [r3, #8]
 802b07c:	f003 0301 	and.w	r3, r3, #1
 802b080:	2b01      	cmp	r3, #1
 802b082:	d119      	bne.n	802b0b8 <HAL_SPI_TransmitReceive+0x1b8>
 802b084:	68fb      	ldr	r3, [r7, #12]
 802b086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b088:	b29b      	uxth	r3, r3
 802b08a:	2b00      	cmp	r3, #0
 802b08c:	d014      	beq.n	802b0b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802b08e:	68fb      	ldr	r3, [r7, #12]
 802b090:	681b      	ldr	r3, [r3, #0]
 802b092:	68da      	ldr	r2, [r3, #12]
 802b094:	68fb      	ldr	r3, [r7, #12]
 802b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b098:	b292      	uxth	r2, r2
 802b09a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802b09c:	68fb      	ldr	r3, [r7, #12]
 802b09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b0a0:	1c9a      	adds	r2, r3, #2
 802b0a2:	68fb      	ldr	r3, [r7, #12]
 802b0a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b0a6:	68fb      	ldr	r3, [r7, #12]
 802b0a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b0aa:	b29b      	uxth	r3, r3
 802b0ac:	3b01      	subs	r3, #1
 802b0ae:	b29a      	uxth	r2, r3
 802b0b0:	68fb      	ldr	r3, [r7, #12]
 802b0b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b0b4:	2301      	movs	r3, #1
 802b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802b0b8:	f7fc facc 	bl	8027654 <HAL_GetTick>
 802b0bc:	4602      	mov	r2, r0
 802b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0c0:	1ad3      	subs	r3, r2, r3
 802b0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b0c4:	429a      	cmp	r2, r3
 802b0c6:	d807      	bhi.n	802b0d8 <HAL_SPI_TransmitReceive+0x1d8>
 802b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b0ce:	d003      	beq.n	802b0d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 802b0d0:	2303      	movs	r3, #3
 802b0d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b0d6:	e0a7      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b0d8:	68fb      	ldr	r3, [r7, #12]
 802b0da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b0dc:	b29b      	uxth	r3, r3
 802b0de:	2b00      	cmp	r3, #0
 802b0e0:	d1a6      	bne.n	802b030 <HAL_SPI_TransmitReceive+0x130>
 802b0e2:	68fb      	ldr	r3, [r7, #12]
 802b0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b0e6:	b29b      	uxth	r3, r3
 802b0e8:	2b00      	cmp	r3, #0
 802b0ea:	d1a1      	bne.n	802b030 <HAL_SPI_TransmitReceive+0x130>
 802b0ec:	e07c      	b.n	802b1e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b0ee:	68fb      	ldr	r3, [r7, #12]
 802b0f0:	685b      	ldr	r3, [r3, #4]
 802b0f2:	2b00      	cmp	r3, #0
 802b0f4:	d002      	beq.n	802b0fc <HAL_SPI_TransmitReceive+0x1fc>
 802b0f6:	8b7b      	ldrh	r3, [r7, #26]
 802b0f8:	2b01      	cmp	r3, #1
 802b0fa:	d16b      	bne.n	802b1d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b0fc:	68fb      	ldr	r3, [r7, #12]
 802b0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b100:	68fb      	ldr	r3, [r7, #12]
 802b102:	681b      	ldr	r3, [r3, #0]
 802b104:	330c      	adds	r3, #12
 802b106:	7812      	ldrb	r2, [r2, #0]
 802b108:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802b10a:	68fb      	ldr	r3, [r7, #12]
 802b10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b10e:	1c5a      	adds	r2, r3, #1
 802b110:	68fb      	ldr	r3, [r7, #12]
 802b112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b114:	68fb      	ldr	r3, [r7, #12]
 802b116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b118:	b29b      	uxth	r3, r3
 802b11a:	3b01      	subs	r3, #1
 802b11c:	b29a      	uxth	r2, r3
 802b11e:	68fb      	ldr	r3, [r7, #12]
 802b120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b122:	e057      	b.n	802b1d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b124:	68fb      	ldr	r3, [r7, #12]
 802b126:	681b      	ldr	r3, [r3, #0]
 802b128:	689b      	ldr	r3, [r3, #8]
 802b12a:	f003 0302 	and.w	r3, r3, #2
 802b12e:	2b02      	cmp	r3, #2
 802b130:	d11c      	bne.n	802b16c <HAL_SPI_TransmitReceive+0x26c>
 802b132:	68fb      	ldr	r3, [r7, #12]
 802b134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b136:	b29b      	uxth	r3, r3
 802b138:	2b00      	cmp	r3, #0
 802b13a:	d017      	beq.n	802b16c <HAL_SPI_TransmitReceive+0x26c>
 802b13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b13e:	2b01      	cmp	r3, #1
 802b140:	d114      	bne.n	802b16c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802b142:	68fb      	ldr	r3, [r7, #12]
 802b144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b146:	68fb      	ldr	r3, [r7, #12]
 802b148:	681b      	ldr	r3, [r3, #0]
 802b14a:	330c      	adds	r3, #12
 802b14c:	7812      	ldrb	r2, [r2, #0]
 802b14e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802b150:	68fb      	ldr	r3, [r7, #12]
 802b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b154:	1c5a      	adds	r2, r3, #1
 802b156:	68fb      	ldr	r3, [r7, #12]
 802b158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b15a:	68fb      	ldr	r3, [r7, #12]
 802b15c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b15e:	b29b      	uxth	r3, r3
 802b160:	3b01      	subs	r3, #1
 802b162:	b29a      	uxth	r2, r3
 802b164:	68fb      	ldr	r3, [r7, #12]
 802b166:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b168:	2300      	movs	r3, #0
 802b16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b16c:	68fb      	ldr	r3, [r7, #12]
 802b16e:	681b      	ldr	r3, [r3, #0]
 802b170:	689b      	ldr	r3, [r3, #8]
 802b172:	f003 0301 	and.w	r3, r3, #1
 802b176:	2b01      	cmp	r3, #1
 802b178:	d119      	bne.n	802b1ae <HAL_SPI_TransmitReceive+0x2ae>
 802b17a:	68fb      	ldr	r3, [r7, #12]
 802b17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b17e:	b29b      	uxth	r3, r3
 802b180:	2b00      	cmp	r3, #0
 802b182:	d014      	beq.n	802b1ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802b184:	68fb      	ldr	r3, [r7, #12]
 802b186:	681b      	ldr	r3, [r3, #0]
 802b188:	68da      	ldr	r2, [r3, #12]
 802b18a:	68fb      	ldr	r3, [r7, #12]
 802b18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b18e:	b2d2      	uxtb	r2, r2
 802b190:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 802b192:	68fb      	ldr	r3, [r7, #12]
 802b194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b196:	1c5a      	adds	r2, r3, #1
 802b198:	68fb      	ldr	r3, [r7, #12]
 802b19a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b19c:	68fb      	ldr	r3, [r7, #12]
 802b19e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b1a0:	b29b      	uxth	r3, r3
 802b1a2:	3b01      	subs	r3, #1
 802b1a4:	b29a      	uxth	r2, r3
 802b1a6:	68fb      	ldr	r3, [r7, #12]
 802b1a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b1aa:	2301      	movs	r3, #1
 802b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802b1ae:	f7fc fa51 	bl	8027654 <HAL_GetTick>
 802b1b2:	4602      	mov	r2, r0
 802b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b1b6:	1ad3      	subs	r3, r2, r3
 802b1b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b1ba:	429a      	cmp	r2, r3
 802b1bc:	d803      	bhi.n	802b1c6 <HAL_SPI_TransmitReceive+0x2c6>
 802b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b1c4:	d102      	bne.n	802b1cc <HAL_SPI_TransmitReceive+0x2cc>
 802b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b1c8:	2b00      	cmp	r3, #0
 802b1ca:	d103      	bne.n	802b1d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802b1cc:	2303      	movs	r3, #3
 802b1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b1d2:	e029      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b1d4:	68fb      	ldr	r3, [r7, #12]
 802b1d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b1d8:	b29b      	uxth	r3, r3
 802b1da:	2b00      	cmp	r3, #0
 802b1dc:	d1a2      	bne.n	802b124 <HAL_SPI_TransmitReceive+0x224>
 802b1de:	68fb      	ldr	r3, [r7, #12]
 802b1e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b1e2:	b29b      	uxth	r3, r3
 802b1e4:	2b00      	cmp	r3, #0
 802b1e6:	d19d      	bne.n	802b124 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802b1ec:	68f8      	ldr	r0, [r7, #12]
 802b1ee:	f000 f9c3 	bl	802b578 <SPI_EndRxTxTransaction>
 802b1f2:	4603      	mov	r3, r0
 802b1f4:	2b00      	cmp	r3, #0
 802b1f6:	d006      	beq.n	802b206 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802b1f8:	2301      	movs	r3, #1
 802b1fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b1fe:	68fb      	ldr	r3, [r7, #12]
 802b200:	2220      	movs	r2, #32
 802b202:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802b204:	e010      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802b206:	68fb      	ldr	r3, [r7, #12]
 802b208:	689b      	ldr	r3, [r3, #8]
 802b20a:	2b00      	cmp	r3, #0
 802b20c:	d10b      	bne.n	802b226 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b20e:	2300      	movs	r3, #0
 802b210:	617b      	str	r3, [r7, #20]
 802b212:	68fb      	ldr	r3, [r7, #12]
 802b214:	681b      	ldr	r3, [r3, #0]
 802b216:	68db      	ldr	r3, [r3, #12]
 802b218:	617b      	str	r3, [r7, #20]
 802b21a:	68fb      	ldr	r3, [r7, #12]
 802b21c:	681b      	ldr	r3, [r3, #0]
 802b21e:	689b      	ldr	r3, [r3, #8]
 802b220:	617b      	str	r3, [r7, #20]
 802b222:	697b      	ldr	r3, [r7, #20]
 802b224:	e000      	b.n	802b228 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802b226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b228:	68fb      	ldr	r3, [r7, #12]
 802b22a:	2201      	movs	r2, #1
 802b22c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802b230:	68fb      	ldr	r3, [r7, #12]
 802b232:	2200      	movs	r2, #0
 802b234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802b23c:	4618      	mov	r0, r3
 802b23e:	3730      	adds	r7, #48	; 0x30
 802b240:	46bd      	mov	sp, r7
 802b242:	bd80      	pop	{r7, pc}

0802b244 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b244:	b580      	push	{r7, lr}
 802b246:	b088      	sub	sp, #32
 802b248:	af00      	add	r7, sp, #0
 802b24a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802b24c:	687b      	ldr	r3, [r7, #4]
 802b24e:	681b      	ldr	r3, [r3, #0]
 802b250:	685b      	ldr	r3, [r3, #4]
 802b252:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802b254:	687b      	ldr	r3, [r7, #4]
 802b256:	681b      	ldr	r3, [r3, #0]
 802b258:	689b      	ldr	r3, [r3, #8]
 802b25a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b25c:	69bb      	ldr	r3, [r7, #24]
 802b25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b262:	2b00      	cmp	r3, #0
 802b264:	d10e      	bne.n	802b284 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b266:	69bb      	ldr	r3, [r7, #24]
 802b268:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b26c:	2b00      	cmp	r3, #0
 802b26e:	d009      	beq.n	802b284 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b270:	69fb      	ldr	r3, [r7, #28]
 802b272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b276:	2b00      	cmp	r3, #0
 802b278:	d004      	beq.n	802b284 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802b27a:	687b      	ldr	r3, [r7, #4]
 802b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b27e:	6878      	ldr	r0, [r7, #4]
 802b280:	4798      	blx	r3
    return;
 802b282:	e0ce      	b.n	802b422 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802b284:	69bb      	ldr	r3, [r7, #24]
 802b286:	f003 0302 	and.w	r3, r3, #2
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	d009      	beq.n	802b2a2 <HAL_SPI_IRQHandler+0x5e>
 802b28e:	69fb      	ldr	r3, [r7, #28]
 802b290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b294:	2b00      	cmp	r3, #0
 802b296:	d004      	beq.n	802b2a2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802b298:	687b      	ldr	r3, [r7, #4]
 802b29a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b29c:	6878      	ldr	r0, [r7, #4]
 802b29e:	4798      	blx	r3
    return;
 802b2a0:	e0bf      	b.n	802b422 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b2a2:	69bb      	ldr	r3, [r7, #24]
 802b2a4:	f003 0320 	and.w	r3, r3, #32
 802b2a8:	2b00      	cmp	r3, #0
 802b2aa:	d10a      	bne.n	802b2c2 <HAL_SPI_IRQHandler+0x7e>
 802b2ac:	69bb      	ldr	r3, [r7, #24]
 802b2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b2b2:	2b00      	cmp	r3, #0
 802b2b4:	d105      	bne.n	802b2c2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802b2b6:	69bb      	ldr	r3, [r7, #24]
 802b2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b2bc:	2b00      	cmp	r3, #0
 802b2be:	f000 80b0 	beq.w	802b422 <HAL_SPI_IRQHandler+0x1de>
 802b2c2:	69fb      	ldr	r3, [r7, #28]
 802b2c4:	f003 0320 	and.w	r3, r3, #32
 802b2c8:	2b00      	cmp	r3, #0
 802b2ca:	f000 80aa 	beq.w	802b422 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b2ce:	69bb      	ldr	r3, [r7, #24]
 802b2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b2d4:	2b00      	cmp	r3, #0
 802b2d6:	d023      	beq.n	802b320 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b2d8:	687b      	ldr	r3, [r7, #4]
 802b2da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b2de:	b2db      	uxtb	r3, r3
 802b2e0:	2b03      	cmp	r3, #3
 802b2e2:	d011      	beq.n	802b308 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b2e4:	687b      	ldr	r3, [r7, #4]
 802b2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b2e8:	f043 0204 	orr.w	r2, r3, #4
 802b2ec:	687b      	ldr	r3, [r7, #4]
 802b2ee:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b2f0:	2300      	movs	r3, #0
 802b2f2:	617b      	str	r3, [r7, #20]
 802b2f4:	687b      	ldr	r3, [r7, #4]
 802b2f6:	681b      	ldr	r3, [r3, #0]
 802b2f8:	68db      	ldr	r3, [r3, #12]
 802b2fa:	617b      	str	r3, [r7, #20]
 802b2fc:	687b      	ldr	r3, [r7, #4]
 802b2fe:	681b      	ldr	r3, [r3, #0]
 802b300:	689b      	ldr	r3, [r3, #8]
 802b302:	617b      	str	r3, [r7, #20]
 802b304:	697b      	ldr	r3, [r7, #20]
 802b306:	e00b      	b.n	802b320 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b308:	2300      	movs	r3, #0
 802b30a:	613b      	str	r3, [r7, #16]
 802b30c:	687b      	ldr	r3, [r7, #4]
 802b30e:	681b      	ldr	r3, [r3, #0]
 802b310:	68db      	ldr	r3, [r3, #12]
 802b312:	613b      	str	r3, [r7, #16]
 802b314:	687b      	ldr	r3, [r7, #4]
 802b316:	681b      	ldr	r3, [r3, #0]
 802b318:	689b      	ldr	r3, [r3, #8]
 802b31a:	613b      	str	r3, [r7, #16]
 802b31c:	693b      	ldr	r3, [r7, #16]
        return;
 802b31e:	e080      	b.n	802b422 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802b320:	69bb      	ldr	r3, [r7, #24]
 802b322:	f003 0320 	and.w	r3, r3, #32
 802b326:	2b00      	cmp	r3, #0
 802b328:	d014      	beq.n	802b354 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b32a:	687b      	ldr	r3, [r7, #4]
 802b32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b32e:	f043 0201 	orr.w	r2, r3, #1
 802b332:	687b      	ldr	r3, [r7, #4]
 802b334:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b336:	2300      	movs	r3, #0
 802b338:	60fb      	str	r3, [r7, #12]
 802b33a:	687b      	ldr	r3, [r7, #4]
 802b33c:	681b      	ldr	r3, [r3, #0]
 802b33e:	689b      	ldr	r3, [r3, #8]
 802b340:	60fb      	str	r3, [r7, #12]
 802b342:	687b      	ldr	r3, [r7, #4]
 802b344:	681b      	ldr	r3, [r3, #0]
 802b346:	681a      	ldr	r2, [r3, #0]
 802b348:	687b      	ldr	r3, [r7, #4]
 802b34a:	681b      	ldr	r3, [r3, #0]
 802b34c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b350:	601a      	str	r2, [r3, #0]
 802b352:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802b354:	69bb      	ldr	r3, [r7, #24]
 802b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b35a:	2b00      	cmp	r3, #0
 802b35c:	d00c      	beq.n	802b378 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b35e:	687b      	ldr	r3, [r7, #4]
 802b360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b362:	f043 0208 	orr.w	r2, r3, #8
 802b366:	687b      	ldr	r3, [r7, #4]
 802b368:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b36a:	2300      	movs	r3, #0
 802b36c:	60bb      	str	r3, [r7, #8]
 802b36e:	687b      	ldr	r3, [r7, #4]
 802b370:	681b      	ldr	r3, [r3, #0]
 802b372:	689b      	ldr	r3, [r3, #8]
 802b374:	60bb      	str	r3, [r7, #8]
 802b376:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b378:	687b      	ldr	r3, [r7, #4]
 802b37a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b37c:	2b00      	cmp	r3, #0
 802b37e:	d04f      	beq.n	802b420 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802b380:	687b      	ldr	r3, [r7, #4]
 802b382:	681b      	ldr	r3, [r3, #0]
 802b384:	685a      	ldr	r2, [r3, #4]
 802b386:	687b      	ldr	r3, [r7, #4]
 802b388:	681b      	ldr	r3, [r3, #0]
 802b38a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b38e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802b390:	687b      	ldr	r3, [r7, #4]
 802b392:	2201      	movs	r2, #1
 802b394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802b398:	69fb      	ldr	r3, [r7, #28]
 802b39a:	f003 0302 	and.w	r3, r3, #2
 802b39e:	2b00      	cmp	r3, #0
 802b3a0:	d104      	bne.n	802b3ac <HAL_SPI_IRQHandler+0x168>
 802b3a2:	69fb      	ldr	r3, [r7, #28]
 802b3a4:	f003 0301 	and.w	r3, r3, #1
 802b3a8:	2b00      	cmp	r3, #0
 802b3aa:	d034      	beq.n	802b416 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802b3ac:	687b      	ldr	r3, [r7, #4]
 802b3ae:	681b      	ldr	r3, [r3, #0]
 802b3b0:	685a      	ldr	r2, [r3, #4]
 802b3b2:	687b      	ldr	r3, [r7, #4]
 802b3b4:	681b      	ldr	r3, [r3, #0]
 802b3b6:	f022 0203 	bic.w	r2, r2, #3
 802b3ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802b3bc:	687b      	ldr	r3, [r7, #4]
 802b3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b3c0:	2b00      	cmp	r3, #0
 802b3c2:	d011      	beq.n	802b3e8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802b3c4:	687b      	ldr	r3, [r7, #4]
 802b3c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b3c8:	4a17      	ldr	r2, [pc, #92]	; (802b428 <HAL_SPI_IRQHandler+0x1e4>)
 802b3ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802b3cc:	687b      	ldr	r3, [r7, #4]
 802b3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b3d0:	4618      	mov	r0, r3
 802b3d2:	f7fc fb52 	bl	8027a7a <HAL_DMA_Abort_IT>
 802b3d6:	4603      	mov	r3, r0
 802b3d8:	2b00      	cmp	r3, #0
 802b3da:	d005      	beq.n	802b3e8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b3dc:	687b      	ldr	r3, [r7, #4]
 802b3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b3e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b3e4:	687b      	ldr	r3, [r7, #4]
 802b3e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802b3e8:	687b      	ldr	r3, [r7, #4]
 802b3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b3ec:	2b00      	cmp	r3, #0
 802b3ee:	d016      	beq.n	802b41e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802b3f0:	687b      	ldr	r3, [r7, #4]
 802b3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b3f4:	4a0c      	ldr	r2, [pc, #48]	; (802b428 <HAL_SPI_IRQHandler+0x1e4>)
 802b3f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802b3f8:	687b      	ldr	r3, [r7, #4]
 802b3fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b3fc:	4618      	mov	r0, r3
 802b3fe:	f7fc fb3c 	bl	8027a7a <HAL_DMA_Abort_IT>
 802b402:	4603      	mov	r3, r0
 802b404:	2b00      	cmp	r3, #0
 802b406:	d00a      	beq.n	802b41e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b408:	687b      	ldr	r3, [r7, #4]
 802b40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b40c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b410:	687b      	ldr	r3, [r7, #4]
 802b412:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802b414:	e003      	b.n	802b41e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802b416:	6878      	ldr	r0, [r7, #4]
 802b418:	f000 f808 	bl	802b42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802b41c:	e000      	b.n	802b420 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802b41e:	bf00      	nop
    return;
 802b420:	bf00      	nop
  }
}
 802b422:	3720      	adds	r7, #32
 802b424:	46bd      	mov	sp, r7
 802b426:	bd80      	pop	{r7, pc}
 802b428:	0802b441 	.word	0x0802b441

0802b42c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802b42c:	b480      	push	{r7}
 802b42e:	b083      	sub	sp, #12
 802b430:	af00      	add	r7, sp, #0
 802b432:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802b434:	bf00      	nop
 802b436:	370c      	adds	r7, #12
 802b438:	46bd      	mov	sp, r7
 802b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b43e:	4770      	bx	lr

0802b440 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b440:	b580      	push	{r7, lr}
 802b442:	b084      	sub	sp, #16
 802b444:	af00      	add	r7, sp, #0
 802b446:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802b448:	687b      	ldr	r3, [r7, #4]
 802b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b44c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802b44e:	68fb      	ldr	r3, [r7, #12]
 802b450:	2200      	movs	r2, #0
 802b452:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802b454:	68fb      	ldr	r3, [r7, #12]
 802b456:	2200      	movs	r2, #0
 802b458:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802b45a:	68f8      	ldr	r0, [r7, #12]
 802b45c:	f7ff ffe6 	bl	802b42c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802b460:	bf00      	nop
 802b462:	3710      	adds	r7, #16
 802b464:	46bd      	mov	sp, r7
 802b466:	bd80      	pop	{r7, pc}

0802b468 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802b468:	b580      	push	{r7, lr}
 802b46a:	b088      	sub	sp, #32
 802b46c:	af00      	add	r7, sp, #0
 802b46e:	60f8      	str	r0, [r7, #12]
 802b470:	60b9      	str	r1, [r7, #8]
 802b472:	603b      	str	r3, [r7, #0]
 802b474:	4613      	mov	r3, r2
 802b476:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802b478:	f7fc f8ec 	bl	8027654 <HAL_GetTick>
 802b47c:	4602      	mov	r2, r0
 802b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b480:	1a9b      	subs	r3, r3, r2
 802b482:	683a      	ldr	r2, [r7, #0]
 802b484:	4413      	add	r3, r2
 802b486:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802b488:	f7fc f8e4 	bl	8027654 <HAL_GetTick>
 802b48c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802b48e:	4b39      	ldr	r3, [pc, #228]	; (802b574 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802b490:	681b      	ldr	r3, [r3, #0]
 802b492:	015b      	lsls	r3, r3, #5
 802b494:	0d1b      	lsrs	r3, r3, #20
 802b496:	69fa      	ldr	r2, [r7, #28]
 802b498:	fb02 f303 	mul.w	r3, r2, r3
 802b49c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802b49e:	e054      	b.n	802b54a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802b4a0:	683b      	ldr	r3, [r7, #0]
 802b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b4a6:	d050      	beq.n	802b54a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802b4a8:	f7fc f8d4 	bl	8027654 <HAL_GetTick>
 802b4ac:	4602      	mov	r2, r0
 802b4ae:	69bb      	ldr	r3, [r7, #24]
 802b4b0:	1ad3      	subs	r3, r2, r3
 802b4b2:	69fa      	ldr	r2, [r7, #28]
 802b4b4:	429a      	cmp	r2, r3
 802b4b6:	d902      	bls.n	802b4be <SPI_WaitFlagStateUntilTimeout+0x56>
 802b4b8:	69fb      	ldr	r3, [r7, #28]
 802b4ba:	2b00      	cmp	r3, #0
 802b4bc:	d13d      	bne.n	802b53a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802b4be:	68fb      	ldr	r3, [r7, #12]
 802b4c0:	681b      	ldr	r3, [r3, #0]
 802b4c2:	685a      	ldr	r2, [r3, #4]
 802b4c4:	68fb      	ldr	r3, [r7, #12]
 802b4c6:	681b      	ldr	r3, [r3, #0]
 802b4c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b4cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802b4ce:	68fb      	ldr	r3, [r7, #12]
 802b4d0:	685b      	ldr	r3, [r3, #4]
 802b4d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b4d6:	d111      	bne.n	802b4fc <SPI_WaitFlagStateUntilTimeout+0x94>
 802b4d8:	68fb      	ldr	r3, [r7, #12]
 802b4da:	689b      	ldr	r3, [r3, #8]
 802b4dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b4e0:	d004      	beq.n	802b4ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802b4e2:	68fb      	ldr	r3, [r7, #12]
 802b4e4:	689b      	ldr	r3, [r3, #8]
 802b4e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802b4ea:	d107      	bne.n	802b4fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802b4ec:	68fb      	ldr	r3, [r7, #12]
 802b4ee:	681b      	ldr	r3, [r3, #0]
 802b4f0:	681a      	ldr	r2, [r3, #0]
 802b4f2:	68fb      	ldr	r3, [r7, #12]
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b4fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802b4fc:	68fb      	ldr	r3, [r7, #12]
 802b4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802b504:	d10f      	bne.n	802b526 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802b506:	68fb      	ldr	r3, [r7, #12]
 802b508:	681b      	ldr	r3, [r3, #0]
 802b50a:	681a      	ldr	r2, [r3, #0]
 802b50c:	68fb      	ldr	r3, [r7, #12]
 802b50e:	681b      	ldr	r3, [r3, #0]
 802b510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802b514:	601a      	str	r2, [r3, #0]
 802b516:	68fb      	ldr	r3, [r7, #12]
 802b518:	681b      	ldr	r3, [r3, #0]
 802b51a:	681a      	ldr	r2, [r3, #0]
 802b51c:	68fb      	ldr	r3, [r7, #12]
 802b51e:	681b      	ldr	r3, [r3, #0]
 802b520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802b524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802b526:	68fb      	ldr	r3, [r7, #12]
 802b528:	2201      	movs	r2, #1
 802b52a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802b52e:	68fb      	ldr	r3, [r7, #12]
 802b530:	2200      	movs	r2, #0
 802b532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802b536:	2303      	movs	r3, #3
 802b538:	e017      	b.n	802b56a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802b53a:	697b      	ldr	r3, [r7, #20]
 802b53c:	2b00      	cmp	r3, #0
 802b53e:	d101      	bne.n	802b544 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802b540:	2300      	movs	r3, #0
 802b542:	61fb      	str	r3, [r7, #28]
      }
      count--;
 802b544:	697b      	ldr	r3, [r7, #20]
 802b546:	3b01      	subs	r3, #1
 802b548:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802b54a:	68fb      	ldr	r3, [r7, #12]
 802b54c:	681b      	ldr	r3, [r3, #0]
 802b54e:	689a      	ldr	r2, [r3, #8]
 802b550:	68bb      	ldr	r3, [r7, #8]
 802b552:	4013      	ands	r3, r2
 802b554:	68ba      	ldr	r2, [r7, #8]
 802b556:	429a      	cmp	r2, r3
 802b558:	bf0c      	ite	eq
 802b55a:	2301      	moveq	r3, #1
 802b55c:	2300      	movne	r3, #0
 802b55e:	b2db      	uxtb	r3, r3
 802b560:	461a      	mov	r2, r3
 802b562:	79fb      	ldrb	r3, [r7, #7]
 802b564:	429a      	cmp	r2, r3
 802b566:	d19b      	bne.n	802b4a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 802b568:	2300      	movs	r3, #0
}
 802b56a:	4618      	mov	r0, r3
 802b56c:	3720      	adds	r7, #32
 802b56e:	46bd      	mov	sp, r7
 802b570:	bd80      	pop	{r7, pc}
 802b572:	bf00      	nop
 802b574:	20000138 	.word	0x20000138

0802b578 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802b578:	b580      	push	{r7, lr}
 802b57a:	b088      	sub	sp, #32
 802b57c:	af02      	add	r7, sp, #8
 802b57e:	60f8      	str	r0, [r7, #12]
 802b580:	60b9      	str	r1, [r7, #8]
 802b582:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802b584:	4b1b      	ldr	r3, [pc, #108]	; (802b5f4 <SPI_EndRxTxTransaction+0x7c>)
 802b586:	681b      	ldr	r3, [r3, #0]
 802b588:	4a1b      	ldr	r2, [pc, #108]	; (802b5f8 <SPI_EndRxTxTransaction+0x80>)
 802b58a:	fba2 2303 	umull	r2, r3, r2, r3
 802b58e:	0d5b      	lsrs	r3, r3, #21
 802b590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802b594:	fb02 f303 	mul.w	r3, r2, r3
 802b598:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802b59a:	68fb      	ldr	r3, [r7, #12]
 802b59c:	685b      	ldr	r3, [r3, #4]
 802b59e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b5a2:	d112      	bne.n	802b5ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802b5a4:	687b      	ldr	r3, [r7, #4]
 802b5a6:	9300      	str	r3, [sp, #0]
 802b5a8:	68bb      	ldr	r3, [r7, #8]
 802b5aa:	2200      	movs	r2, #0
 802b5ac:	2180      	movs	r1, #128	; 0x80
 802b5ae:	68f8      	ldr	r0, [r7, #12]
 802b5b0:	f7ff ff5a 	bl	802b468 <SPI_WaitFlagStateUntilTimeout>
 802b5b4:	4603      	mov	r3, r0
 802b5b6:	2b00      	cmp	r3, #0
 802b5b8:	d016      	beq.n	802b5e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802b5ba:	68fb      	ldr	r3, [r7, #12]
 802b5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b5be:	f043 0220 	orr.w	r2, r3, #32
 802b5c2:	68fb      	ldr	r3, [r7, #12]
 802b5c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802b5c6:	2303      	movs	r3, #3
 802b5c8:	e00f      	b.n	802b5ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802b5ca:	697b      	ldr	r3, [r7, #20]
 802b5cc:	2b00      	cmp	r3, #0
 802b5ce:	d00a      	beq.n	802b5e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802b5d0:	697b      	ldr	r3, [r7, #20]
 802b5d2:	3b01      	subs	r3, #1
 802b5d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802b5d6:	68fb      	ldr	r3, [r7, #12]
 802b5d8:	681b      	ldr	r3, [r3, #0]
 802b5da:	689b      	ldr	r3, [r3, #8]
 802b5dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b5e0:	2b80      	cmp	r3, #128	; 0x80
 802b5e2:	d0f2      	beq.n	802b5ca <SPI_EndRxTxTransaction+0x52>
 802b5e4:	e000      	b.n	802b5e8 <SPI_EndRxTxTransaction+0x70>
        break;
 802b5e6:	bf00      	nop
  }

  return HAL_OK;
 802b5e8:	2300      	movs	r3, #0
}
 802b5ea:	4618      	mov	r0, r3
 802b5ec:	3718      	adds	r7, #24
 802b5ee:	46bd      	mov	sp, r7
 802b5f0:	bd80      	pop	{r7, pc}
 802b5f2:	bf00      	nop
 802b5f4:	20000138 	.word	0x20000138
 802b5f8:	165e9f81 	.word	0x165e9f81

0802b5fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802b5fc:	b580      	push	{r7, lr}
 802b5fe:	b082      	sub	sp, #8
 802b600:	af00      	add	r7, sp, #0
 802b602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802b604:	687b      	ldr	r3, [r7, #4]
 802b606:	2b00      	cmp	r3, #0
 802b608:	d101      	bne.n	802b60e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802b60a:	2301      	movs	r3, #1
 802b60c:	e03f      	b.n	802b68e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802b60e:	687b      	ldr	r3, [r7, #4]
 802b610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b614:	b2db      	uxtb	r3, r3
 802b616:	2b00      	cmp	r3, #0
 802b618:	d106      	bne.n	802b628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802b61a:	687b      	ldr	r3, [r7, #4]
 802b61c:	2200      	movs	r2, #0
 802b61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802b622:	6878      	ldr	r0, [r7, #4]
 802b624:	f7fb ff36 	bl	8027494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802b628:	687b      	ldr	r3, [r7, #4]
 802b62a:	2224      	movs	r2, #36	; 0x24
 802b62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802b630:	687b      	ldr	r3, [r7, #4]
 802b632:	681b      	ldr	r3, [r3, #0]
 802b634:	68da      	ldr	r2, [r3, #12]
 802b636:	687b      	ldr	r3, [r7, #4]
 802b638:	681b      	ldr	r3, [r3, #0]
 802b63a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802b63e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802b640:	6878      	ldr	r0, [r7, #4]
 802b642:	f000 fd7b 	bl	802c13c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802b646:	687b      	ldr	r3, [r7, #4]
 802b648:	681b      	ldr	r3, [r3, #0]
 802b64a:	691a      	ldr	r2, [r3, #16]
 802b64c:	687b      	ldr	r3, [r7, #4]
 802b64e:	681b      	ldr	r3, [r3, #0]
 802b650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802b654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802b656:	687b      	ldr	r3, [r7, #4]
 802b658:	681b      	ldr	r3, [r3, #0]
 802b65a:	695a      	ldr	r2, [r3, #20]
 802b65c:	687b      	ldr	r3, [r7, #4]
 802b65e:	681b      	ldr	r3, [r3, #0]
 802b660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802b664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802b666:	687b      	ldr	r3, [r7, #4]
 802b668:	681b      	ldr	r3, [r3, #0]
 802b66a:	68da      	ldr	r2, [r3, #12]
 802b66c:	687b      	ldr	r3, [r7, #4]
 802b66e:	681b      	ldr	r3, [r3, #0]
 802b670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802b674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b676:	687b      	ldr	r3, [r7, #4]
 802b678:	2200      	movs	r2, #0
 802b67a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	2220      	movs	r2, #32
 802b680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802b684:	687b      	ldr	r3, [r7, #4]
 802b686:	2220      	movs	r2, #32
 802b688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802b68c:	2300      	movs	r3, #0
}
 802b68e:	4618      	mov	r0, r3
 802b690:	3708      	adds	r7, #8
 802b692:	46bd      	mov	sp, r7
 802b694:	bd80      	pop	{r7, pc}

0802b696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802b696:	b580      	push	{r7, lr}
 802b698:	b08a      	sub	sp, #40	; 0x28
 802b69a:	af02      	add	r7, sp, #8
 802b69c:	60f8      	str	r0, [r7, #12]
 802b69e:	60b9      	str	r1, [r7, #8]
 802b6a0:	603b      	str	r3, [r7, #0]
 802b6a2:	4613      	mov	r3, r2
 802b6a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802b6a6:	2300      	movs	r3, #0
 802b6a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802b6aa:	68fb      	ldr	r3, [r7, #12]
 802b6ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b6b0:	b2db      	uxtb	r3, r3
 802b6b2:	2b20      	cmp	r3, #32
 802b6b4:	d17c      	bne.n	802b7b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802b6b6:	68bb      	ldr	r3, [r7, #8]
 802b6b8:	2b00      	cmp	r3, #0
 802b6ba:	d002      	beq.n	802b6c2 <HAL_UART_Transmit+0x2c>
 802b6bc:	88fb      	ldrh	r3, [r7, #6]
 802b6be:	2b00      	cmp	r3, #0
 802b6c0:	d101      	bne.n	802b6c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802b6c2:	2301      	movs	r3, #1
 802b6c4:	e075      	b.n	802b7b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802b6c6:	68fb      	ldr	r3, [r7, #12]
 802b6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b6cc:	2b01      	cmp	r3, #1
 802b6ce:	d101      	bne.n	802b6d4 <HAL_UART_Transmit+0x3e>
 802b6d0:	2302      	movs	r3, #2
 802b6d2:	e06e      	b.n	802b7b2 <HAL_UART_Transmit+0x11c>
 802b6d4:	68fb      	ldr	r3, [r7, #12]
 802b6d6:	2201      	movs	r2, #1
 802b6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	2200      	movs	r2, #0
 802b6e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802b6e2:	68fb      	ldr	r3, [r7, #12]
 802b6e4:	2221      	movs	r2, #33	; 0x21
 802b6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802b6ea:	f7fb ffb3 	bl	8027654 <HAL_GetTick>
 802b6ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802b6f0:	68fb      	ldr	r3, [r7, #12]
 802b6f2:	88fa      	ldrh	r2, [r7, #6]
 802b6f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802b6f6:	68fb      	ldr	r3, [r7, #12]
 802b6f8:	88fa      	ldrh	r2, [r7, #6]
 802b6fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802b6fc:	68fb      	ldr	r3, [r7, #12]
 802b6fe:	689b      	ldr	r3, [r3, #8]
 802b700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b704:	d108      	bne.n	802b718 <HAL_UART_Transmit+0x82>
 802b706:	68fb      	ldr	r3, [r7, #12]
 802b708:	691b      	ldr	r3, [r3, #16]
 802b70a:	2b00      	cmp	r3, #0
 802b70c:	d104      	bne.n	802b718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802b70e:	2300      	movs	r3, #0
 802b710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802b712:	68bb      	ldr	r3, [r7, #8]
 802b714:	61bb      	str	r3, [r7, #24]
 802b716:	e003      	b.n	802b720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802b718:	68bb      	ldr	r3, [r7, #8]
 802b71a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802b71c:	2300      	movs	r3, #0
 802b71e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802b720:	68fb      	ldr	r3, [r7, #12]
 802b722:	2200      	movs	r2, #0
 802b724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802b728:	e02a      	b.n	802b780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802b72a:	683b      	ldr	r3, [r7, #0]
 802b72c:	9300      	str	r3, [sp, #0]
 802b72e:	697b      	ldr	r3, [r7, #20]
 802b730:	2200      	movs	r2, #0
 802b732:	2180      	movs	r1, #128	; 0x80
 802b734:	68f8      	ldr	r0, [r7, #12]
 802b736:	f000 faf9 	bl	802bd2c <UART_WaitOnFlagUntilTimeout>
 802b73a:	4603      	mov	r3, r0
 802b73c:	2b00      	cmp	r3, #0
 802b73e:	d001      	beq.n	802b744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802b740:	2303      	movs	r3, #3
 802b742:	e036      	b.n	802b7b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802b744:	69fb      	ldr	r3, [r7, #28]
 802b746:	2b00      	cmp	r3, #0
 802b748:	d10b      	bne.n	802b762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802b74a:	69bb      	ldr	r3, [r7, #24]
 802b74c:	881b      	ldrh	r3, [r3, #0]
 802b74e:	461a      	mov	r2, r3
 802b750:	68fb      	ldr	r3, [r7, #12]
 802b752:	681b      	ldr	r3, [r3, #0]
 802b754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802b758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802b75a:	69bb      	ldr	r3, [r7, #24]
 802b75c:	3302      	adds	r3, #2
 802b75e:	61bb      	str	r3, [r7, #24]
 802b760:	e007      	b.n	802b772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802b762:	69fb      	ldr	r3, [r7, #28]
 802b764:	781a      	ldrb	r2, [r3, #0]
 802b766:	68fb      	ldr	r3, [r7, #12]
 802b768:	681b      	ldr	r3, [r3, #0]
 802b76a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802b76c:	69fb      	ldr	r3, [r7, #28]
 802b76e:	3301      	adds	r3, #1
 802b770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802b772:	68fb      	ldr	r3, [r7, #12]
 802b774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802b776:	b29b      	uxth	r3, r3
 802b778:	3b01      	subs	r3, #1
 802b77a:	b29a      	uxth	r2, r3
 802b77c:	68fb      	ldr	r3, [r7, #12]
 802b77e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802b780:	68fb      	ldr	r3, [r7, #12]
 802b782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802b784:	b29b      	uxth	r3, r3
 802b786:	2b00      	cmp	r3, #0
 802b788:	d1cf      	bne.n	802b72a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802b78a:	683b      	ldr	r3, [r7, #0]
 802b78c:	9300      	str	r3, [sp, #0]
 802b78e:	697b      	ldr	r3, [r7, #20]
 802b790:	2200      	movs	r2, #0
 802b792:	2140      	movs	r1, #64	; 0x40
 802b794:	68f8      	ldr	r0, [r7, #12]
 802b796:	f000 fac9 	bl	802bd2c <UART_WaitOnFlagUntilTimeout>
 802b79a:	4603      	mov	r3, r0
 802b79c:	2b00      	cmp	r3, #0
 802b79e:	d001      	beq.n	802b7a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802b7a0:	2303      	movs	r3, #3
 802b7a2:	e006      	b.n	802b7b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802b7a4:	68fb      	ldr	r3, [r7, #12]
 802b7a6:	2220      	movs	r2, #32
 802b7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802b7ac:	2300      	movs	r3, #0
 802b7ae:	e000      	b.n	802b7b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802b7b0:	2302      	movs	r3, #2
  }
}
 802b7b2:	4618      	mov	r0, r3
 802b7b4:	3720      	adds	r7, #32
 802b7b6:	46bd      	mov	sp, r7
 802b7b8:	bd80      	pop	{r7, pc}
	...

0802b7bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802b7bc:	b580      	push	{r7, lr}
 802b7be:	b0ba      	sub	sp, #232	; 0xe8
 802b7c0:	af00      	add	r7, sp, #0
 802b7c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802b7c4:	687b      	ldr	r3, [r7, #4]
 802b7c6:	681b      	ldr	r3, [r3, #0]
 802b7c8:	681b      	ldr	r3, [r3, #0]
 802b7ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802b7ce:	687b      	ldr	r3, [r7, #4]
 802b7d0:	681b      	ldr	r3, [r3, #0]
 802b7d2:	68db      	ldr	r3, [r3, #12]
 802b7d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802b7d8:	687b      	ldr	r3, [r7, #4]
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	695b      	ldr	r3, [r3, #20]
 802b7de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802b7e2:	2300      	movs	r3, #0
 802b7e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802b7e8:	2300      	movs	r3, #0
 802b7ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b7f2:	f003 030f 	and.w	r3, r3, #15
 802b7f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802b7fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802b7fe:	2b00      	cmp	r3, #0
 802b800:	d10f      	bne.n	802b822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802b802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b806:	f003 0320 	and.w	r3, r3, #32
 802b80a:	2b00      	cmp	r3, #0
 802b80c:	d009      	beq.n	802b822 <HAL_UART_IRQHandler+0x66>
 802b80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802b812:	f003 0320 	and.w	r3, r3, #32
 802b816:	2b00      	cmp	r3, #0
 802b818:	d003      	beq.n	802b822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802b81a:	6878      	ldr	r0, [r7, #4]
 802b81c:	f000 fbd3 	bl	802bfc6 <UART_Receive_IT>
      return;
 802b820:	e256      	b.n	802bcd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802b822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802b826:	2b00      	cmp	r3, #0
 802b828:	f000 80de 	beq.w	802b9e8 <HAL_UART_IRQHandler+0x22c>
 802b82c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802b830:	f003 0301 	and.w	r3, r3, #1
 802b834:	2b00      	cmp	r3, #0
 802b836:	d106      	bne.n	802b846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802b838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802b83c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802b840:	2b00      	cmp	r3, #0
 802b842:	f000 80d1 	beq.w	802b9e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802b846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b84a:	f003 0301 	and.w	r3, r3, #1
 802b84e:	2b00      	cmp	r3, #0
 802b850:	d00b      	beq.n	802b86a <HAL_UART_IRQHandler+0xae>
 802b852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802b856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	d005      	beq.n	802b86a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802b85e:	687b      	ldr	r3, [r7, #4]
 802b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b862:	f043 0201 	orr.w	r2, r3, #1
 802b866:	687b      	ldr	r3, [r7, #4]
 802b868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802b86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b86e:	f003 0304 	and.w	r3, r3, #4
 802b872:	2b00      	cmp	r3, #0
 802b874:	d00b      	beq.n	802b88e <HAL_UART_IRQHandler+0xd2>
 802b876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802b87a:	f003 0301 	and.w	r3, r3, #1
 802b87e:	2b00      	cmp	r3, #0
 802b880:	d005      	beq.n	802b88e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802b882:	687b      	ldr	r3, [r7, #4]
 802b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b886:	f043 0202 	orr.w	r2, r3, #2
 802b88a:	687b      	ldr	r3, [r7, #4]
 802b88c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802b88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b892:	f003 0302 	and.w	r3, r3, #2
 802b896:	2b00      	cmp	r3, #0
 802b898:	d00b      	beq.n	802b8b2 <HAL_UART_IRQHandler+0xf6>
 802b89a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802b89e:	f003 0301 	and.w	r3, r3, #1
 802b8a2:	2b00      	cmp	r3, #0
 802b8a4:	d005      	beq.n	802b8b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802b8a6:	687b      	ldr	r3, [r7, #4]
 802b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8aa:	f043 0204 	orr.w	r2, r3, #4
 802b8ae:	687b      	ldr	r3, [r7, #4]
 802b8b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802b8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b8b6:	f003 0308 	and.w	r3, r3, #8
 802b8ba:	2b00      	cmp	r3, #0
 802b8bc:	d011      	beq.n	802b8e2 <HAL_UART_IRQHandler+0x126>
 802b8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802b8c2:	f003 0320 	and.w	r3, r3, #32
 802b8c6:	2b00      	cmp	r3, #0
 802b8c8:	d105      	bne.n	802b8d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802b8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802b8ce:	f003 0301 	and.w	r3, r3, #1
 802b8d2:	2b00      	cmp	r3, #0
 802b8d4:	d005      	beq.n	802b8e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802b8d6:	687b      	ldr	r3, [r7, #4]
 802b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8da:	f043 0208 	orr.w	r2, r3, #8
 802b8de:	687b      	ldr	r3, [r7, #4]
 802b8e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802b8e2:	687b      	ldr	r3, [r7, #4]
 802b8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b8e6:	2b00      	cmp	r3, #0
 802b8e8:	f000 81ed 	beq.w	802bcc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802b8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b8f0:	f003 0320 	and.w	r3, r3, #32
 802b8f4:	2b00      	cmp	r3, #0
 802b8f6:	d008      	beq.n	802b90a <HAL_UART_IRQHandler+0x14e>
 802b8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802b8fc:	f003 0320 	and.w	r3, r3, #32
 802b900:	2b00      	cmp	r3, #0
 802b902:	d002      	beq.n	802b90a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802b904:	6878      	ldr	r0, [r7, #4]
 802b906:	f000 fb5e 	bl	802bfc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802b90a:	687b      	ldr	r3, [r7, #4]
 802b90c:	681b      	ldr	r3, [r3, #0]
 802b90e:	695b      	ldr	r3, [r3, #20]
 802b910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b914:	2b40      	cmp	r3, #64	; 0x40
 802b916:	bf0c      	ite	eq
 802b918:	2301      	moveq	r3, #1
 802b91a:	2300      	movne	r3, #0
 802b91c:	b2db      	uxtb	r3, r3
 802b91e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802b922:	687b      	ldr	r3, [r7, #4]
 802b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b926:	f003 0308 	and.w	r3, r3, #8
 802b92a:	2b00      	cmp	r3, #0
 802b92c:	d103      	bne.n	802b936 <HAL_UART_IRQHandler+0x17a>
 802b92e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802b932:	2b00      	cmp	r3, #0
 802b934:	d04f      	beq.n	802b9d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802b936:	6878      	ldr	r0, [r7, #4]
 802b938:	f000 fa66 	bl	802be08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	681b      	ldr	r3, [r3, #0]
 802b940:	695b      	ldr	r3, [r3, #20]
 802b942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b946:	2b40      	cmp	r3, #64	; 0x40
 802b948:	d141      	bne.n	802b9ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802b94a:	687b      	ldr	r3, [r7, #4]
 802b94c:	681b      	ldr	r3, [r3, #0]
 802b94e:	3314      	adds	r3, #20
 802b950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802b954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802b958:	e853 3f00 	ldrex	r3, [r3]
 802b95c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802b960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802b964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802b968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	681b      	ldr	r3, [r3, #0]
 802b970:	3314      	adds	r3, #20
 802b972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802b976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802b97a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802b97e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802b982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802b986:	e841 2300 	strex	r3, r2, [r1]
 802b98a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802b98e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802b992:	2b00      	cmp	r3, #0
 802b994:	d1d9      	bne.n	802b94a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b99a:	2b00      	cmp	r3, #0
 802b99c:	d013      	beq.n	802b9c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802b99e:	687b      	ldr	r3, [r7, #4]
 802b9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9a2:	4a7d      	ldr	r2, [pc, #500]	; (802bb98 <HAL_UART_IRQHandler+0x3dc>)
 802b9a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802b9a6:	687b      	ldr	r3, [r7, #4]
 802b9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9aa:	4618      	mov	r0, r3
 802b9ac:	f7fc f865 	bl	8027a7a <HAL_DMA_Abort_IT>
 802b9b0:	4603      	mov	r3, r0
 802b9b2:	2b00      	cmp	r3, #0
 802b9b4:	d016      	beq.n	802b9e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802b9bc:	687a      	ldr	r2, [r7, #4]
 802b9be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802b9c0:	4610      	mov	r0, r2
 802b9c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802b9c4:	e00e      	b.n	802b9e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802b9c6:	6878      	ldr	r0, [r7, #4]
 802b9c8:	f000 f99a 	bl	802bd00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802b9cc:	e00a      	b.n	802b9e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802b9ce:	6878      	ldr	r0, [r7, #4]
 802b9d0:	f000 f996 	bl	802bd00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802b9d4:	e006      	b.n	802b9e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802b9d6:	6878      	ldr	r0, [r7, #4]
 802b9d8:	f000 f992 	bl	802bd00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	2200      	movs	r2, #0
 802b9e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802b9e2:	e170      	b.n	802bcc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802b9e4:	bf00      	nop
    return;
 802b9e6:	e16e      	b.n	802bcc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802b9e8:	687b      	ldr	r3, [r7, #4]
 802b9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b9ec:	2b01      	cmp	r3, #1
 802b9ee:	f040 814a 	bne.w	802bc86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802b9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802b9f6:	f003 0310 	and.w	r3, r3, #16
 802b9fa:	2b00      	cmp	r3, #0
 802b9fc:	f000 8143 	beq.w	802bc86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802ba00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802ba04:	f003 0310 	and.w	r3, r3, #16
 802ba08:	2b00      	cmp	r3, #0
 802ba0a:	f000 813c 	beq.w	802bc86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802ba0e:	2300      	movs	r3, #0
 802ba10:	60bb      	str	r3, [r7, #8]
 802ba12:	687b      	ldr	r3, [r7, #4]
 802ba14:	681b      	ldr	r3, [r3, #0]
 802ba16:	681b      	ldr	r3, [r3, #0]
 802ba18:	60bb      	str	r3, [r7, #8]
 802ba1a:	687b      	ldr	r3, [r7, #4]
 802ba1c:	681b      	ldr	r3, [r3, #0]
 802ba1e:	685b      	ldr	r3, [r3, #4]
 802ba20:	60bb      	str	r3, [r7, #8]
 802ba22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802ba24:	687b      	ldr	r3, [r7, #4]
 802ba26:	681b      	ldr	r3, [r3, #0]
 802ba28:	695b      	ldr	r3, [r3, #20]
 802ba2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ba2e:	2b40      	cmp	r3, #64	; 0x40
 802ba30:	f040 80b4 	bne.w	802bb9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ba38:	681b      	ldr	r3, [r3, #0]
 802ba3a:	685b      	ldr	r3, [r3, #4]
 802ba3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802ba40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802ba44:	2b00      	cmp	r3, #0
 802ba46:	f000 8140 	beq.w	802bcca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802ba4a:	687b      	ldr	r3, [r7, #4]
 802ba4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802ba4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802ba52:	429a      	cmp	r2, r3
 802ba54:	f080 8139 	bcs.w	802bcca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802ba58:	687b      	ldr	r3, [r7, #4]
 802ba5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802ba5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802ba60:	687b      	ldr	r3, [r7, #4]
 802ba62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ba64:	69db      	ldr	r3, [r3, #28]
 802ba66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802ba6a:	f000 8088 	beq.w	802bb7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802ba6e:	687b      	ldr	r3, [r7, #4]
 802ba70:	681b      	ldr	r3, [r3, #0]
 802ba72:	330c      	adds	r3, #12
 802ba74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ba78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802ba7c:	e853 3f00 	ldrex	r3, [r3]
 802ba80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802ba84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802ba88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802ba8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802ba90:	687b      	ldr	r3, [r7, #4]
 802ba92:	681b      	ldr	r3, [r3, #0]
 802ba94:	330c      	adds	r3, #12
 802ba96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802ba9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802ba9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802baa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802baa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802baaa:	e841 2300 	strex	r3, r2, [r1]
 802baae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802bab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802bab6:	2b00      	cmp	r3, #0
 802bab8:	d1d9      	bne.n	802ba6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802baba:	687b      	ldr	r3, [r7, #4]
 802babc:	681b      	ldr	r3, [r3, #0]
 802babe:	3314      	adds	r3, #20
 802bac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802bac4:	e853 3f00 	ldrex	r3, [r3]
 802bac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802baca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802bacc:	f023 0301 	bic.w	r3, r3, #1
 802bad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	681b      	ldr	r3, [r3, #0]
 802bad8:	3314      	adds	r3, #20
 802bada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802bade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802bae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802bae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802baea:	e841 2300 	strex	r3, r2, [r1]
 802baee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802baf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802baf2:	2b00      	cmp	r3, #0
 802baf4:	d1e1      	bne.n	802baba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802baf6:	687b      	ldr	r3, [r7, #4]
 802baf8:	681b      	ldr	r3, [r3, #0]
 802bafa:	3314      	adds	r3, #20
 802bafc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bafe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802bb00:	e853 3f00 	ldrex	r3, [r3]
 802bb04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802bb06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802bb08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802bb0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	681b      	ldr	r3, [r3, #0]
 802bb14:	3314      	adds	r3, #20
 802bb16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802bb1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802bb1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bb1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802bb20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802bb22:	e841 2300 	strex	r3, r2, [r1]
 802bb26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802bb28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802bb2a:	2b00      	cmp	r3, #0
 802bb2c:	d1e3      	bne.n	802baf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802bb2e:	687b      	ldr	r3, [r7, #4]
 802bb30:	2220      	movs	r2, #32
 802bb32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	2200      	movs	r2, #0
 802bb3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802bb3c:	687b      	ldr	r3, [r7, #4]
 802bb3e:	681b      	ldr	r3, [r3, #0]
 802bb40:	330c      	adds	r3, #12
 802bb42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bb44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb46:	e853 3f00 	ldrex	r3, [r3]
 802bb4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb4e:	f023 0310 	bic.w	r3, r3, #16
 802bb52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	681b      	ldr	r3, [r3, #0]
 802bb5a:	330c      	adds	r3, #12
 802bb5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802bb60:	65ba      	str	r2, [r7, #88]	; 0x58
 802bb62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bb64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802bb66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802bb68:	e841 2300 	strex	r3, r2, [r1]
 802bb6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802bb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb70:	2b00      	cmp	r3, #0
 802bb72:	d1e3      	bne.n	802bb3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802bb74:	687b      	ldr	r3, [r7, #4]
 802bb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bb78:	4618      	mov	r0, r3
 802bb7a:	f7fb ff0e 	bl	802799a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802bb82:	687b      	ldr	r3, [r7, #4]
 802bb84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802bb86:	b29b      	uxth	r3, r3
 802bb88:	1ad3      	subs	r3, r2, r3
 802bb8a:	b29b      	uxth	r3, r3
 802bb8c:	4619      	mov	r1, r3
 802bb8e:	6878      	ldr	r0, [r7, #4]
 802bb90:	f000 f8c0 	bl	802bd14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802bb94:	e099      	b.n	802bcca <HAL_UART_IRQHandler+0x50e>
 802bb96:	bf00      	nop
 802bb98:	0802becf 	.word	0x0802becf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802bb9c:	687b      	ldr	r3, [r7, #4]
 802bb9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802bba0:	687b      	ldr	r3, [r7, #4]
 802bba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802bba4:	b29b      	uxth	r3, r3
 802bba6:	1ad3      	subs	r3, r2, r3
 802bba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802bbac:	687b      	ldr	r3, [r7, #4]
 802bbae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802bbb0:	b29b      	uxth	r3, r3
 802bbb2:	2b00      	cmp	r3, #0
 802bbb4:	f000 808b 	beq.w	802bcce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802bbb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802bbbc:	2b00      	cmp	r3, #0
 802bbbe:	f000 8086 	beq.w	802bcce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802bbc2:	687b      	ldr	r3, [r7, #4]
 802bbc4:	681b      	ldr	r3, [r3, #0]
 802bbc6:	330c      	adds	r3, #12
 802bbc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bbcc:	e853 3f00 	ldrex	r3, [r3]
 802bbd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802bbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bbd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802bbd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802bbdc:	687b      	ldr	r3, [r7, #4]
 802bbde:	681b      	ldr	r3, [r3, #0]
 802bbe0:	330c      	adds	r3, #12
 802bbe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802bbe6:	647a      	str	r2, [r7, #68]	; 0x44
 802bbe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bbea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802bbec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802bbee:	e841 2300 	strex	r3, r2, [r1]
 802bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802bbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bbf6:	2b00      	cmp	r3, #0
 802bbf8:	d1e3      	bne.n	802bbc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802bbfa:	687b      	ldr	r3, [r7, #4]
 802bbfc:	681b      	ldr	r3, [r3, #0]
 802bbfe:	3314      	adds	r3, #20
 802bc00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bc04:	e853 3f00 	ldrex	r3, [r3]
 802bc08:	623b      	str	r3, [r7, #32]
   return(result);
 802bc0a:	6a3b      	ldr	r3, [r7, #32]
 802bc0c:	f023 0301 	bic.w	r3, r3, #1
 802bc10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	681b      	ldr	r3, [r3, #0]
 802bc18:	3314      	adds	r3, #20
 802bc1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802bc1e:	633a      	str	r2, [r7, #48]	; 0x30
 802bc20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bc22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802bc24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802bc26:	e841 2300 	strex	r3, r2, [r1]
 802bc2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bc2e:	2b00      	cmp	r3, #0
 802bc30:	d1e3      	bne.n	802bbfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802bc32:	687b      	ldr	r3, [r7, #4]
 802bc34:	2220      	movs	r2, #32
 802bc36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802bc3a:	687b      	ldr	r3, [r7, #4]
 802bc3c:	2200      	movs	r2, #0
 802bc3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802bc40:	687b      	ldr	r3, [r7, #4]
 802bc42:	681b      	ldr	r3, [r3, #0]
 802bc44:	330c      	adds	r3, #12
 802bc46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bc48:	693b      	ldr	r3, [r7, #16]
 802bc4a:	e853 3f00 	ldrex	r3, [r3]
 802bc4e:	60fb      	str	r3, [r7, #12]
   return(result);
 802bc50:	68fb      	ldr	r3, [r7, #12]
 802bc52:	f023 0310 	bic.w	r3, r3, #16
 802bc56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802bc5a:	687b      	ldr	r3, [r7, #4]
 802bc5c:	681b      	ldr	r3, [r3, #0]
 802bc5e:	330c      	adds	r3, #12
 802bc60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802bc64:	61fa      	str	r2, [r7, #28]
 802bc66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bc68:	69b9      	ldr	r1, [r7, #24]
 802bc6a:	69fa      	ldr	r2, [r7, #28]
 802bc6c:	e841 2300 	strex	r3, r2, [r1]
 802bc70:	617b      	str	r3, [r7, #20]
   return(result);
 802bc72:	697b      	ldr	r3, [r7, #20]
 802bc74:	2b00      	cmp	r3, #0
 802bc76:	d1e3      	bne.n	802bc40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802bc78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802bc7c:	4619      	mov	r1, r3
 802bc7e:	6878      	ldr	r0, [r7, #4]
 802bc80:	f000 f848 	bl	802bd14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802bc84:	e023      	b.n	802bcce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802bc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc8e:	2b00      	cmp	r3, #0
 802bc90:	d009      	beq.n	802bca6 <HAL_UART_IRQHandler+0x4ea>
 802bc92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc9a:	2b00      	cmp	r3, #0
 802bc9c:	d003      	beq.n	802bca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802bc9e:	6878      	ldr	r0, [r7, #4]
 802bca0:	f000 f929 	bl	802bef6 <UART_Transmit_IT>
    return;
 802bca4:	e014      	b.n	802bcd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802bca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bcae:	2b00      	cmp	r3, #0
 802bcb0:	d00e      	beq.n	802bcd0 <HAL_UART_IRQHandler+0x514>
 802bcb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bcb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bcba:	2b00      	cmp	r3, #0
 802bcbc:	d008      	beq.n	802bcd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802bcbe:	6878      	ldr	r0, [r7, #4]
 802bcc0:	f000 f969 	bl	802bf96 <UART_EndTransmit_IT>
    return;
 802bcc4:	e004      	b.n	802bcd0 <HAL_UART_IRQHandler+0x514>
    return;
 802bcc6:	bf00      	nop
 802bcc8:	e002      	b.n	802bcd0 <HAL_UART_IRQHandler+0x514>
      return;
 802bcca:	bf00      	nop
 802bccc:	e000      	b.n	802bcd0 <HAL_UART_IRQHandler+0x514>
      return;
 802bcce:	bf00      	nop
  }
}
 802bcd0:	37e8      	adds	r7, #232	; 0xe8
 802bcd2:	46bd      	mov	sp, r7
 802bcd4:	bd80      	pop	{r7, pc}
 802bcd6:	bf00      	nop

0802bcd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802bcd8:	b480      	push	{r7}
 802bcda:	b083      	sub	sp, #12
 802bcdc:	af00      	add	r7, sp, #0
 802bcde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802bce0:	bf00      	nop
 802bce2:	370c      	adds	r7, #12
 802bce4:	46bd      	mov	sp, r7
 802bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcea:	4770      	bx	lr

0802bcec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802bcec:	b480      	push	{r7}
 802bcee:	b083      	sub	sp, #12
 802bcf0:	af00      	add	r7, sp, #0
 802bcf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802bcf4:	bf00      	nop
 802bcf6:	370c      	adds	r7, #12
 802bcf8:	46bd      	mov	sp, r7
 802bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bcfe:	4770      	bx	lr

0802bd00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802bd00:	b480      	push	{r7}
 802bd02:	b083      	sub	sp, #12
 802bd04:	af00      	add	r7, sp, #0
 802bd06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802bd08:	bf00      	nop
 802bd0a:	370c      	adds	r7, #12
 802bd0c:	46bd      	mov	sp, r7
 802bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd12:	4770      	bx	lr

0802bd14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802bd14:	b480      	push	{r7}
 802bd16:	b083      	sub	sp, #12
 802bd18:	af00      	add	r7, sp, #0
 802bd1a:	6078      	str	r0, [r7, #4]
 802bd1c:	460b      	mov	r3, r1
 802bd1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802bd20:	bf00      	nop
 802bd22:	370c      	adds	r7, #12
 802bd24:	46bd      	mov	sp, r7
 802bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bd2a:	4770      	bx	lr

0802bd2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802bd2c:	b580      	push	{r7, lr}
 802bd2e:	b090      	sub	sp, #64	; 0x40
 802bd30:	af00      	add	r7, sp, #0
 802bd32:	60f8      	str	r0, [r7, #12]
 802bd34:	60b9      	str	r1, [r7, #8]
 802bd36:	603b      	str	r3, [r7, #0]
 802bd38:	4613      	mov	r3, r2
 802bd3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802bd3c:	e050      	b.n	802bde0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802bd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 802bd44:	d04c      	beq.n	802bde0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802bd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd48:	2b00      	cmp	r3, #0
 802bd4a:	d007      	beq.n	802bd5c <UART_WaitOnFlagUntilTimeout+0x30>
 802bd4c:	f7fb fc82 	bl	8027654 <HAL_GetTick>
 802bd50:	4602      	mov	r2, r0
 802bd52:	683b      	ldr	r3, [r7, #0]
 802bd54:	1ad3      	subs	r3, r2, r3
 802bd56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd58:	429a      	cmp	r2, r3
 802bd5a:	d241      	bcs.n	802bde0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802bd5c:	68fb      	ldr	r3, [r7, #12]
 802bd5e:	681b      	ldr	r3, [r3, #0]
 802bd60:	330c      	adds	r3, #12
 802bd62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bd66:	e853 3f00 	ldrex	r3, [r3]
 802bd6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
 802bd74:	68fb      	ldr	r3, [r7, #12]
 802bd76:	681b      	ldr	r3, [r3, #0]
 802bd78:	330c      	adds	r3, #12
 802bd7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802bd7c:	637a      	str	r2, [r7, #52]	; 0x34
 802bd7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bd80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802bd82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802bd84:	e841 2300 	strex	r3, r2, [r1]
 802bd88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bd8c:	2b00      	cmp	r3, #0
 802bd8e:	d1e5      	bne.n	802bd5c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802bd90:	68fb      	ldr	r3, [r7, #12]
 802bd92:	681b      	ldr	r3, [r3, #0]
 802bd94:	3314      	adds	r3, #20
 802bd96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bd98:	697b      	ldr	r3, [r7, #20]
 802bd9a:	e853 3f00 	ldrex	r3, [r3]
 802bd9e:	613b      	str	r3, [r7, #16]
   return(result);
 802bda0:	693b      	ldr	r3, [r7, #16]
 802bda2:	f023 0301 	bic.w	r3, r3, #1
 802bda6:	63bb      	str	r3, [r7, #56]	; 0x38
 802bda8:	68fb      	ldr	r3, [r7, #12]
 802bdaa:	681b      	ldr	r3, [r3, #0]
 802bdac:	3314      	adds	r3, #20
 802bdae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802bdb0:	623a      	str	r2, [r7, #32]
 802bdb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bdb4:	69f9      	ldr	r1, [r7, #28]
 802bdb6:	6a3a      	ldr	r2, [r7, #32]
 802bdb8:	e841 2300 	strex	r3, r2, [r1]
 802bdbc:	61bb      	str	r3, [r7, #24]
   return(result);
 802bdbe:	69bb      	ldr	r3, [r7, #24]
 802bdc0:	2b00      	cmp	r3, #0
 802bdc2:	d1e5      	bne.n	802bd90 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802bdc4:	68fb      	ldr	r3, [r7, #12]
 802bdc6:	2220      	movs	r2, #32
 802bdc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802bdcc:	68fb      	ldr	r3, [r7, #12]
 802bdce:	2220      	movs	r2, #32
 802bdd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802bdd4:	68fb      	ldr	r3, [r7, #12]
 802bdd6:	2200      	movs	r2, #0
 802bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802bddc:	2303      	movs	r3, #3
 802bdde:	e00f      	b.n	802be00 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802bde0:	68fb      	ldr	r3, [r7, #12]
 802bde2:	681b      	ldr	r3, [r3, #0]
 802bde4:	681a      	ldr	r2, [r3, #0]
 802bde6:	68bb      	ldr	r3, [r7, #8]
 802bde8:	4013      	ands	r3, r2
 802bdea:	68ba      	ldr	r2, [r7, #8]
 802bdec:	429a      	cmp	r2, r3
 802bdee:	bf0c      	ite	eq
 802bdf0:	2301      	moveq	r3, #1
 802bdf2:	2300      	movne	r3, #0
 802bdf4:	b2db      	uxtb	r3, r3
 802bdf6:	461a      	mov	r2, r3
 802bdf8:	79fb      	ldrb	r3, [r7, #7]
 802bdfa:	429a      	cmp	r2, r3
 802bdfc:	d09f      	beq.n	802bd3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802bdfe:	2300      	movs	r3, #0
}
 802be00:	4618      	mov	r0, r3
 802be02:	3740      	adds	r7, #64	; 0x40
 802be04:	46bd      	mov	sp, r7
 802be06:	bd80      	pop	{r7, pc}

0802be08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802be08:	b480      	push	{r7}
 802be0a:	b095      	sub	sp, #84	; 0x54
 802be0c:	af00      	add	r7, sp, #0
 802be0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802be10:	687b      	ldr	r3, [r7, #4]
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	330c      	adds	r3, #12
 802be16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802be18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802be1a:	e853 3f00 	ldrex	r3, [r3]
 802be1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802be26:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be28:	687b      	ldr	r3, [r7, #4]
 802be2a:	681b      	ldr	r3, [r3, #0]
 802be2c:	330c      	adds	r3, #12
 802be2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be30:	643a      	str	r2, [r7, #64]	; 0x40
 802be32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802be34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802be36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802be38:	e841 2300 	strex	r3, r2, [r1]
 802be3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802be40:	2b00      	cmp	r3, #0
 802be42:	d1e5      	bne.n	802be10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802be44:	687b      	ldr	r3, [r7, #4]
 802be46:	681b      	ldr	r3, [r3, #0]
 802be48:	3314      	adds	r3, #20
 802be4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802be4c:	6a3b      	ldr	r3, [r7, #32]
 802be4e:	e853 3f00 	ldrex	r3, [r3]
 802be52:	61fb      	str	r3, [r7, #28]
   return(result);
 802be54:	69fb      	ldr	r3, [r7, #28]
 802be56:	f023 0301 	bic.w	r3, r3, #1
 802be5a:	64bb      	str	r3, [r7, #72]	; 0x48
 802be5c:	687b      	ldr	r3, [r7, #4]
 802be5e:	681b      	ldr	r3, [r3, #0]
 802be60:	3314      	adds	r3, #20
 802be62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be64:	62fa      	str	r2, [r7, #44]	; 0x2c
 802be66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802be68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802be6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802be6c:	e841 2300 	strex	r3, r2, [r1]
 802be70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be74:	2b00      	cmp	r3, #0
 802be76:	d1e5      	bne.n	802be44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802be78:	687b      	ldr	r3, [r7, #4]
 802be7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802be7c:	2b01      	cmp	r3, #1
 802be7e:	d119      	bne.n	802beb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802be80:	687b      	ldr	r3, [r7, #4]
 802be82:	681b      	ldr	r3, [r3, #0]
 802be84:	330c      	adds	r3, #12
 802be86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802be88:	68fb      	ldr	r3, [r7, #12]
 802be8a:	e853 3f00 	ldrex	r3, [r3]
 802be8e:	60bb      	str	r3, [r7, #8]
   return(result);
 802be90:	68bb      	ldr	r3, [r7, #8]
 802be92:	f023 0310 	bic.w	r3, r3, #16
 802be96:	647b      	str	r3, [r7, #68]	; 0x44
 802be98:	687b      	ldr	r3, [r7, #4]
 802be9a:	681b      	ldr	r3, [r3, #0]
 802be9c:	330c      	adds	r3, #12
 802be9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802bea0:	61ba      	str	r2, [r7, #24]
 802bea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bea4:	6979      	ldr	r1, [r7, #20]
 802bea6:	69ba      	ldr	r2, [r7, #24]
 802bea8:	e841 2300 	strex	r3, r2, [r1]
 802beac:	613b      	str	r3, [r7, #16]
   return(result);
 802beae:	693b      	ldr	r3, [r7, #16]
 802beb0:	2b00      	cmp	r3, #0
 802beb2:	d1e5      	bne.n	802be80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802beb4:	687b      	ldr	r3, [r7, #4]
 802beb6:	2220      	movs	r2, #32
 802beb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802bebc:	687b      	ldr	r3, [r7, #4]
 802bebe:	2200      	movs	r2, #0
 802bec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 802bec2:	bf00      	nop
 802bec4:	3754      	adds	r7, #84	; 0x54
 802bec6:	46bd      	mov	sp, r7
 802bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802becc:	4770      	bx	lr

0802bece <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802bece:	b580      	push	{r7, lr}
 802bed0:	b084      	sub	sp, #16
 802bed2:	af00      	add	r7, sp, #0
 802bed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802bed6:	687b      	ldr	r3, [r7, #4]
 802bed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802beda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802bedc:	68fb      	ldr	r3, [r7, #12]
 802bede:	2200      	movs	r2, #0
 802bee0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802bee2:	68fb      	ldr	r3, [r7, #12]
 802bee4:	2200      	movs	r2, #0
 802bee6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802bee8:	68f8      	ldr	r0, [r7, #12]
 802beea:	f7ff ff09 	bl	802bd00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802beee:	bf00      	nop
 802bef0:	3710      	adds	r7, #16
 802bef2:	46bd      	mov	sp, r7
 802bef4:	bd80      	pop	{r7, pc}

0802bef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802bef6:	b480      	push	{r7}
 802bef8:	b085      	sub	sp, #20
 802befa:	af00      	add	r7, sp, #0
 802befc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802befe:	687b      	ldr	r3, [r7, #4]
 802bf00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bf04:	b2db      	uxtb	r3, r3
 802bf06:	2b21      	cmp	r3, #33	; 0x21
 802bf08:	d13e      	bne.n	802bf88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802bf0a:	687b      	ldr	r3, [r7, #4]
 802bf0c:	689b      	ldr	r3, [r3, #8]
 802bf0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bf12:	d114      	bne.n	802bf3e <UART_Transmit_IT+0x48>
 802bf14:	687b      	ldr	r3, [r7, #4]
 802bf16:	691b      	ldr	r3, [r3, #16]
 802bf18:	2b00      	cmp	r3, #0
 802bf1a:	d110      	bne.n	802bf3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802bf1c:	687b      	ldr	r3, [r7, #4]
 802bf1e:	6a1b      	ldr	r3, [r3, #32]
 802bf20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802bf22:	68fb      	ldr	r3, [r7, #12]
 802bf24:	881b      	ldrh	r3, [r3, #0]
 802bf26:	461a      	mov	r2, r3
 802bf28:	687b      	ldr	r3, [r7, #4]
 802bf2a:	681b      	ldr	r3, [r3, #0]
 802bf2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802bf30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802bf32:	687b      	ldr	r3, [r7, #4]
 802bf34:	6a1b      	ldr	r3, [r3, #32]
 802bf36:	1c9a      	adds	r2, r3, #2
 802bf38:	687b      	ldr	r3, [r7, #4]
 802bf3a:	621a      	str	r2, [r3, #32]
 802bf3c:	e008      	b.n	802bf50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802bf3e:	687b      	ldr	r3, [r7, #4]
 802bf40:	6a1b      	ldr	r3, [r3, #32]
 802bf42:	1c59      	adds	r1, r3, #1
 802bf44:	687a      	ldr	r2, [r7, #4]
 802bf46:	6211      	str	r1, [r2, #32]
 802bf48:	781a      	ldrb	r2, [r3, #0]
 802bf4a:	687b      	ldr	r3, [r7, #4]
 802bf4c:	681b      	ldr	r3, [r3, #0]
 802bf4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802bf50:	687b      	ldr	r3, [r7, #4]
 802bf52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802bf54:	b29b      	uxth	r3, r3
 802bf56:	3b01      	subs	r3, #1
 802bf58:	b29b      	uxth	r3, r3
 802bf5a:	687a      	ldr	r2, [r7, #4]
 802bf5c:	4619      	mov	r1, r3
 802bf5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 802bf60:	2b00      	cmp	r3, #0
 802bf62:	d10f      	bne.n	802bf84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802bf64:	687b      	ldr	r3, [r7, #4]
 802bf66:	681b      	ldr	r3, [r3, #0]
 802bf68:	68da      	ldr	r2, [r3, #12]
 802bf6a:	687b      	ldr	r3, [r7, #4]
 802bf6c:	681b      	ldr	r3, [r3, #0]
 802bf6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802bf72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802bf74:	687b      	ldr	r3, [r7, #4]
 802bf76:	681b      	ldr	r3, [r3, #0]
 802bf78:	68da      	ldr	r2, [r3, #12]
 802bf7a:	687b      	ldr	r3, [r7, #4]
 802bf7c:	681b      	ldr	r3, [r3, #0]
 802bf7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802bf82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802bf84:	2300      	movs	r3, #0
 802bf86:	e000      	b.n	802bf8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802bf88:	2302      	movs	r3, #2
  }
}
 802bf8a:	4618      	mov	r0, r3
 802bf8c:	3714      	adds	r7, #20
 802bf8e:	46bd      	mov	sp, r7
 802bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf94:	4770      	bx	lr

0802bf96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802bf96:	b580      	push	{r7, lr}
 802bf98:	b082      	sub	sp, #8
 802bf9a:	af00      	add	r7, sp, #0
 802bf9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802bf9e:	687b      	ldr	r3, [r7, #4]
 802bfa0:	681b      	ldr	r3, [r3, #0]
 802bfa2:	68da      	ldr	r2, [r3, #12]
 802bfa4:	687b      	ldr	r3, [r7, #4]
 802bfa6:	681b      	ldr	r3, [r3, #0]
 802bfa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bfac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802bfae:	687b      	ldr	r3, [r7, #4]
 802bfb0:	2220      	movs	r2, #32
 802bfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802bfb6:	6878      	ldr	r0, [r7, #4]
 802bfb8:	f7ff fe8e 	bl	802bcd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802bfbc:	2300      	movs	r3, #0
}
 802bfbe:	4618      	mov	r0, r3
 802bfc0:	3708      	adds	r7, #8
 802bfc2:	46bd      	mov	sp, r7
 802bfc4:	bd80      	pop	{r7, pc}

0802bfc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802bfc6:	b580      	push	{r7, lr}
 802bfc8:	b08c      	sub	sp, #48	; 0x30
 802bfca:	af00      	add	r7, sp, #0
 802bfcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802bfce:	687b      	ldr	r3, [r7, #4]
 802bfd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802bfd4:	b2db      	uxtb	r3, r3
 802bfd6:	2b22      	cmp	r3, #34	; 0x22
 802bfd8:	f040 80ab 	bne.w	802c132 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	689b      	ldr	r3, [r3, #8]
 802bfe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bfe4:	d117      	bne.n	802c016 <UART_Receive_IT+0x50>
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	691b      	ldr	r3, [r3, #16]
 802bfea:	2b00      	cmp	r3, #0
 802bfec:	d113      	bne.n	802c016 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802bfee:	2300      	movs	r3, #0
 802bff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802bff2:	687b      	ldr	r3, [r7, #4]
 802bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bff6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802bff8:	687b      	ldr	r3, [r7, #4]
 802bffa:	681b      	ldr	r3, [r3, #0]
 802bffc:	685b      	ldr	r3, [r3, #4]
 802bffe:	b29b      	uxth	r3, r3
 802c000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c004:	b29a      	uxth	r2, r3
 802c006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c008:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802c00a:	687b      	ldr	r3, [r7, #4]
 802c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c00e:	1c9a      	adds	r2, r3, #2
 802c010:	687b      	ldr	r3, [r7, #4]
 802c012:	629a      	str	r2, [r3, #40]	; 0x28
 802c014:	e026      	b.n	802c064 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c01a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802c01c:	2300      	movs	r3, #0
 802c01e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802c020:	687b      	ldr	r3, [r7, #4]
 802c022:	689b      	ldr	r3, [r3, #8]
 802c024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c028:	d007      	beq.n	802c03a <UART_Receive_IT+0x74>
 802c02a:	687b      	ldr	r3, [r7, #4]
 802c02c:	689b      	ldr	r3, [r3, #8]
 802c02e:	2b00      	cmp	r3, #0
 802c030:	d10a      	bne.n	802c048 <UART_Receive_IT+0x82>
 802c032:	687b      	ldr	r3, [r7, #4]
 802c034:	691b      	ldr	r3, [r3, #16]
 802c036:	2b00      	cmp	r3, #0
 802c038:	d106      	bne.n	802c048 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802c03a:	687b      	ldr	r3, [r7, #4]
 802c03c:	681b      	ldr	r3, [r3, #0]
 802c03e:	685b      	ldr	r3, [r3, #4]
 802c040:	b2da      	uxtb	r2, r3
 802c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c044:	701a      	strb	r2, [r3, #0]
 802c046:	e008      	b.n	802c05a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802c048:	687b      	ldr	r3, [r7, #4]
 802c04a:	681b      	ldr	r3, [r3, #0]
 802c04c:	685b      	ldr	r3, [r3, #4]
 802c04e:	b2db      	uxtb	r3, r3
 802c050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c054:	b2da      	uxtb	r2, r3
 802c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c058:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802c05a:	687b      	ldr	r3, [r7, #4]
 802c05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c05e:	1c5a      	adds	r2, r3, #1
 802c060:	687b      	ldr	r3, [r7, #4]
 802c062:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802c064:	687b      	ldr	r3, [r7, #4]
 802c066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c068:	b29b      	uxth	r3, r3
 802c06a:	3b01      	subs	r3, #1
 802c06c:	b29b      	uxth	r3, r3
 802c06e:	687a      	ldr	r2, [r7, #4]
 802c070:	4619      	mov	r1, r3
 802c072:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802c074:	2b00      	cmp	r3, #0
 802c076:	d15a      	bne.n	802c12e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802c078:	687b      	ldr	r3, [r7, #4]
 802c07a:	681b      	ldr	r3, [r3, #0]
 802c07c:	68da      	ldr	r2, [r3, #12]
 802c07e:	687b      	ldr	r3, [r7, #4]
 802c080:	681b      	ldr	r3, [r3, #0]
 802c082:	f022 0220 	bic.w	r2, r2, #32
 802c086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802c088:	687b      	ldr	r3, [r7, #4]
 802c08a:	681b      	ldr	r3, [r3, #0]
 802c08c:	68da      	ldr	r2, [r3, #12]
 802c08e:	687b      	ldr	r3, [r7, #4]
 802c090:	681b      	ldr	r3, [r3, #0]
 802c092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802c098:	687b      	ldr	r3, [r7, #4]
 802c09a:	681b      	ldr	r3, [r3, #0]
 802c09c:	695a      	ldr	r2, [r3, #20]
 802c09e:	687b      	ldr	r3, [r7, #4]
 802c0a0:	681b      	ldr	r3, [r3, #0]
 802c0a2:	f022 0201 	bic.w	r2, r2, #1
 802c0a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802c0a8:	687b      	ldr	r3, [r7, #4]
 802c0aa:	2220      	movs	r2, #32
 802c0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c0b0:	687b      	ldr	r3, [r7, #4]
 802c0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c0b4:	2b01      	cmp	r3, #1
 802c0b6:	d135      	bne.n	802c124 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c0b8:	687b      	ldr	r3, [r7, #4]
 802c0ba:	2200      	movs	r2, #0
 802c0bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c0be:	687b      	ldr	r3, [r7, #4]
 802c0c0:	681b      	ldr	r3, [r3, #0]
 802c0c2:	330c      	adds	r3, #12
 802c0c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c0c6:	697b      	ldr	r3, [r7, #20]
 802c0c8:	e853 3f00 	ldrex	r3, [r3]
 802c0cc:	613b      	str	r3, [r7, #16]
   return(result);
 802c0ce:	693b      	ldr	r3, [r7, #16]
 802c0d0:	f023 0310 	bic.w	r3, r3, #16
 802c0d4:	627b      	str	r3, [r7, #36]	; 0x24
 802c0d6:	687b      	ldr	r3, [r7, #4]
 802c0d8:	681b      	ldr	r3, [r3, #0]
 802c0da:	330c      	adds	r3, #12
 802c0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c0de:	623a      	str	r2, [r7, #32]
 802c0e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c0e2:	69f9      	ldr	r1, [r7, #28]
 802c0e4:	6a3a      	ldr	r2, [r7, #32]
 802c0e6:	e841 2300 	strex	r3, r2, [r1]
 802c0ea:	61bb      	str	r3, [r7, #24]
   return(result);
 802c0ec:	69bb      	ldr	r3, [r7, #24]
 802c0ee:	2b00      	cmp	r3, #0
 802c0f0:	d1e5      	bne.n	802c0be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802c0f2:	687b      	ldr	r3, [r7, #4]
 802c0f4:	681b      	ldr	r3, [r3, #0]
 802c0f6:	681b      	ldr	r3, [r3, #0]
 802c0f8:	f003 0310 	and.w	r3, r3, #16
 802c0fc:	2b10      	cmp	r3, #16
 802c0fe:	d10a      	bne.n	802c116 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c100:	2300      	movs	r3, #0
 802c102:	60fb      	str	r3, [r7, #12]
 802c104:	687b      	ldr	r3, [r7, #4]
 802c106:	681b      	ldr	r3, [r3, #0]
 802c108:	681b      	ldr	r3, [r3, #0]
 802c10a:	60fb      	str	r3, [r7, #12]
 802c10c:	687b      	ldr	r3, [r7, #4]
 802c10e:	681b      	ldr	r3, [r3, #0]
 802c110:	685b      	ldr	r3, [r3, #4]
 802c112:	60fb      	str	r3, [r7, #12]
 802c114:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802c116:	687b      	ldr	r3, [r7, #4]
 802c118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c11a:	4619      	mov	r1, r3
 802c11c:	6878      	ldr	r0, [r7, #4]
 802c11e:	f7ff fdf9 	bl	802bd14 <HAL_UARTEx_RxEventCallback>
 802c122:	e002      	b.n	802c12a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802c124:	6878      	ldr	r0, [r7, #4]
 802c126:	f7ff fde1 	bl	802bcec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802c12a:	2300      	movs	r3, #0
 802c12c:	e002      	b.n	802c134 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802c12e:	2300      	movs	r3, #0
 802c130:	e000      	b.n	802c134 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802c132:	2302      	movs	r3, #2
  }
}
 802c134:	4618      	mov	r0, r3
 802c136:	3730      	adds	r7, #48	; 0x30
 802c138:	46bd      	mov	sp, r7
 802c13a:	bd80      	pop	{r7, pc}

0802c13c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802c13c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802c140:	b0c0      	sub	sp, #256	; 0x100
 802c142:	af00      	add	r7, sp, #0
 802c144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802c148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c14c:	681b      	ldr	r3, [r3, #0]
 802c14e:	691b      	ldr	r3, [r3, #16]
 802c150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802c154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c158:	68d9      	ldr	r1, [r3, #12]
 802c15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c15e:	681a      	ldr	r2, [r3, #0]
 802c160:	ea40 0301 	orr.w	r3, r0, r1
 802c164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802c166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c16a:	689a      	ldr	r2, [r3, #8]
 802c16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c170:	691b      	ldr	r3, [r3, #16]
 802c172:	431a      	orrs	r2, r3
 802c174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c178:	695b      	ldr	r3, [r3, #20]
 802c17a:	431a      	orrs	r2, r3
 802c17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c180:	69db      	ldr	r3, [r3, #28]
 802c182:	4313      	orrs	r3, r2
 802c184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802c188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c18c:	681b      	ldr	r3, [r3, #0]
 802c18e:	68db      	ldr	r3, [r3, #12]
 802c190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802c194:	f021 010c 	bic.w	r1, r1, #12
 802c198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c19c:	681a      	ldr	r2, [r3, #0]
 802c19e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802c1a2:	430b      	orrs	r3, r1
 802c1a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802c1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1aa:	681b      	ldr	r3, [r3, #0]
 802c1ac:	695b      	ldr	r3, [r3, #20]
 802c1ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802c1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1b6:	6999      	ldr	r1, [r3, #24]
 802c1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1bc:	681a      	ldr	r2, [r3, #0]
 802c1be:	ea40 0301 	orr.w	r3, r0, r1
 802c1c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802c1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1c8:	681a      	ldr	r2, [r3, #0]
 802c1ca:	4b8f      	ldr	r3, [pc, #572]	; (802c408 <UART_SetConfig+0x2cc>)
 802c1cc:	429a      	cmp	r2, r3
 802c1ce:	d005      	beq.n	802c1dc <UART_SetConfig+0xa0>
 802c1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1d4:	681a      	ldr	r2, [r3, #0]
 802c1d6:	4b8d      	ldr	r3, [pc, #564]	; (802c40c <UART_SetConfig+0x2d0>)
 802c1d8:	429a      	cmp	r2, r3
 802c1da:	d104      	bne.n	802c1e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802c1dc:	f7fe fab4 	bl	802a748 <HAL_RCC_GetPCLK2Freq>
 802c1e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802c1e4:	e003      	b.n	802c1ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802c1e6:	f7fe fa9b 	bl	802a720 <HAL_RCC_GetPCLK1Freq>
 802c1ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802c1ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c1f2:	69db      	ldr	r3, [r3, #28]
 802c1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802c1f8:	f040 810c 	bne.w	802c414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802c1fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c200:	2200      	movs	r2, #0
 802c202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802c206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802c20a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802c20e:	4622      	mov	r2, r4
 802c210:	462b      	mov	r3, r5
 802c212:	1891      	adds	r1, r2, r2
 802c214:	65b9      	str	r1, [r7, #88]	; 0x58
 802c216:	415b      	adcs	r3, r3
 802c218:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c21a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802c21e:	4621      	mov	r1, r4
 802c220:	eb12 0801 	adds.w	r8, r2, r1
 802c224:	4629      	mov	r1, r5
 802c226:	eb43 0901 	adc.w	r9, r3, r1
 802c22a:	f04f 0200 	mov.w	r2, #0
 802c22e:	f04f 0300 	mov.w	r3, #0
 802c232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802c236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802c23a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802c23e:	4690      	mov	r8, r2
 802c240:	4699      	mov	r9, r3
 802c242:	4623      	mov	r3, r4
 802c244:	eb18 0303 	adds.w	r3, r8, r3
 802c248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802c24c:	462b      	mov	r3, r5
 802c24e:	eb49 0303 	adc.w	r3, r9, r3
 802c252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802c256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c25a:	685b      	ldr	r3, [r3, #4]
 802c25c:	2200      	movs	r2, #0
 802c25e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802c262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802c266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802c26a:	460b      	mov	r3, r1
 802c26c:	18db      	adds	r3, r3, r3
 802c26e:	653b      	str	r3, [r7, #80]	; 0x50
 802c270:	4613      	mov	r3, r2
 802c272:	eb42 0303 	adc.w	r3, r2, r3
 802c276:	657b      	str	r3, [r7, #84]	; 0x54
 802c278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802c27c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802c280:	f7f5 fff6 	bl	8022270 <__aeabi_uldivmod>
 802c284:	4602      	mov	r2, r0
 802c286:	460b      	mov	r3, r1
 802c288:	4b61      	ldr	r3, [pc, #388]	; (802c410 <UART_SetConfig+0x2d4>)
 802c28a:	fba3 2302 	umull	r2, r3, r3, r2
 802c28e:	095b      	lsrs	r3, r3, #5
 802c290:	011c      	lsls	r4, r3, #4
 802c292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c296:	2200      	movs	r2, #0
 802c298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c29c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802c2a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802c2a4:	4642      	mov	r2, r8
 802c2a6:	464b      	mov	r3, r9
 802c2a8:	1891      	adds	r1, r2, r2
 802c2aa:	64b9      	str	r1, [r7, #72]	; 0x48
 802c2ac:	415b      	adcs	r3, r3
 802c2ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c2b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802c2b4:	4641      	mov	r1, r8
 802c2b6:	eb12 0a01 	adds.w	sl, r2, r1
 802c2ba:	4649      	mov	r1, r9
 802c2bc:	eb43 0b01 	adc.w	fp, r3, r1
 802c2c0:	f04f 0200 	mov.w	r2, #0
 802c2c4:	f04f 0300 	mov.w	r3, #0
 802c2c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802c2cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802c2d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802c2d4:	4692      	mov	sl, r2
 802c2d6:	469b      	mov	fp, r3
 802c2d8:	4643      	mov	r3, r8
 802c2da:	eb1a 0303 	adds.w	r3, sl, r3
 802c2de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c2e2:	464b      	mov	r3, r9
 802c2e4:	eb4b 0303 	adc.w	r3, fp, r3
 802c2e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802c2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c2f0:	685b      	ldr	r3, [r3, #4]
 802c2f2:	2200      	movs	r2, #0
 802c2f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c2f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802c2fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802c300:	460b      	mov	r3, r1
 802c302:	18db      	adds	r3, r3, r3
 802c304:	643b      	str	r3, [r7, #64]	; 0x40
 802c306:	4613      	mov	r3, r2
 802c308:	eb42 0303 	adc.w	r3, r2, r3
 802c30c:	647b      	str	r3, [r7, #68]	; 0x44
 802c30e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802c312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802c316:	f7f5 ffab 	bl	8022270 <__aeabi_uldivmod>
 802c31a:	4602      	mov	r2, r0
 802c31c:	460b      	mov	r3, r1
 802c31e:	4611      	mov	r1, r2
 802c320:	4b3b      	ldr	r3, [pc, #236]	; (802c410 <UART_SetConfig+0x2d4>)
 802c322:	fba3 2301 	umull	r2, r3, r3, r1
 802c326:	095b      	lsrs	r3, r3, #5
 802c328:	2264      	movs	r2, #100	; 0x64
 802c32a:	fb02 f303 	mul.w	r3, r2, r3
 802c32e:	1acb      	subs	r3, r1, r3
 802c330:	00db      	lsls	r3, r3, #3
 802c332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802c336:	4b36      	ldr	r3, [pc, #216]	; (802c410 <UART_SetConfig+0x2d4>)
 802c338:	fba3 2302 	umull	r2, r3, r3, r2
 802c33c:	095b      	lsrs	r3, r3, #5
 802c33e:	005b      	lsls	r3, r3, #1
 802c340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802c344:	441c      	add	r4, r3
 802c346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c34a:	2200      	movs	r2, #0
 802c34c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802c354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802c358:	4642      	mov	r2, r8
 802c35a:	464b      	mov	r3, r9
 802c35c:	1891      	adds	r1, r2, r2
 802c35e:	63b9      	str	r1, [r7, #56]	; 0x38
 802c360:	415b      	adcs	r3, r3
 802c362:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802c368:	4641      	mov	r1, r8
 802c36a:	1851      	adds	r1, r2, r1
 802c36c:	6339      	str	r1, [r7, #48]	; 0x30
 802c36e:	4649      	mov	r1, r9
 802c370:	414b      	adcs	r3, r1
 802c372:	637b      	str	r3, [r7, #52]	; 0x34
 802c374:	f04f 0200 	mov.w	r2, #0
 802c378:	f04f 0300 	mov.w	r3, #0
 802c37c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802c380:	4659      	mov	r1, fp
 802c382:	00cb      	lsls	r3, r1, #3
 802c384:	4651      	mov	r1, sl
 802c386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802c38a:	4651      	mov	r1, sl
 802c38c:	00ca      	lsls	r2, r1, #3
 802c38e:	4610      	mov	r0, r2
 802c390:	4619      	mov	r1, r3
 802c392:	4603      	mov	r3, r0
 802c394:	4642      	mov	r2, r8
 802c396:	189b      	adds	r3, r3, r2
 802c398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802c39c:	464b      	mov	r3, r9
 802c39e:	460a      	mov	r2, r1
 802c3a0:	eb42 0303 	adc.w	r3, r2, r3
 802c3a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802c3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c3ac:	685b      	ldr	r3, [r3, #4]
 802c3ae:	2200      	movs	r2, #0
 802c3b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802c3b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802c3b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802c3bc:	460b      	mov	r3, r1
 802c3be:	18db      	adds	r3, r3, r3
 802c3c0:	62bb      	str	r3, [r7, #40]	; 0x28
 802c3c2:	4613      	mov	r3, r2
 802c3c4:	eb42 0303 	adc.w	r3, r2, r3
 802c3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c3ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802c3ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802c3d2:	f7f5 ff4d 	bl	8022270 <__aeabi_uldivmod>
 802c3d6:	4602      	mov	r2, r0
 802c3d8:	460b      	mov	r3, r1
 802c3da:	4b0d      	ldr	r3, [pc, #52]	; (802c410 <UART_SetConfig+0x2d4>)
 802c3dc:	fba3 1302 	umull	r1, r3, r3, r2
 802c3e0:	095b      	lsrs	r3, r3, #5
 802c3e2:	2164      	movs	r1, #100	; 0x64
 802c3e4:	fb01 f303 	mul.w	r3, r1, r3
 802c3e8:	1ad3      	subs	r3, r2, r3
 802c3ea:	00db      	lsls	r3, r3, #3
 802c3ec:	3332      	adds	r3, #50	; 0x32
 802c3ee:	4a08      	ldr	r2, [pc, #32]	; (802c410 <UART_SetConfig+0x2d4>)
 802c3f0:	fba2 2303 	umull	r2, r3, r2, r3
 802c3f4:	095b      	lsrs	r3, r3, #5
 802c3f6:	f003 0207 	and.w	r2, r3, #7
 802c3fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c3fe:	681b      	ldr	r3, [r3, #0]
 802c400:	4422      	add	r2, r4
 802c402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802c404:	e106      	b.n	802c614 <UART_SetConfig+0x4d8>
 802c406:	bf00      	nop
 802c408:	40011000 	.word	0x40011000
 802c40c:	40011400 	.word	0x40011400
 802c410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802c414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c418:	2200      	movs	r2, #0
 802c41a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802c41e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802c422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802c426:	4642      	mov	r2, r8
 802c428:	464b      	mov	r3, r9
 802c42a:	1891      	adds	r1, r2, r2
 802c42c:	6239      	str	r1, [r7, #32]
 802c42e:	415b      	adcs	r3, r3
 802c430:	627b      	str	r3, [r7, #36]	; 0x24
 802c432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802c436:	4641      	mov	r1, r8
 802c438:	1854      	adds	r4, r2, r1
 802c43a:	4649      	mov	r1, r9
 802c43c:	eb43 0501 	adc.w	r5, r3, r1
 802c440:	f04f 0200 	mov.w	r2, #0
 802c444:	f04f 0300 	mov.w	r3, #0
 802c448:	00eb      	lsls	r3, r5, #3
 802c44a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802c44e:	00e2      	lsls	r2, r4, #3
 802c450:	4614      	mov	r4, r2
 802c452:	461d      	mov	r5, r3
 802c454:	4643      	mov	r3, r8
 802c456:	18e3      	adds	r3, r4, r3
 802c458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802c45c:	464b      	mov	r3, r9
 802c45e:	eb45 0303 	adc.w	r3, r5, r3
 802c462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802c466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c46a:	685b      	ldr	r3, [r3, #4]
 802c46c:	2200      	movs	r2, #0
 802c46e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802c472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802c476:	f04f 0200 	mov.w	r2, #0
 802c47a:	f04f 0300 	mov.w	r3, #0
 802c47e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802c482:	4629      	mov	r1, r5
 802c484:	008b      	lsls	r3, r1, #2
 802c486:	4621      	mov	r1, r4
 802c488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802c48c:	4621      	mov	r1, r4
 802c48e:	008a      	lsls	r2, r1, #2
 802c490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802c494:	f7f5 feec 	bl	8022270 <__aeabi_uldivmod>
 802c498:	4602      	mov	r2, r0
 802c49a:	460b      	mov	r3, r1
 802c49c:	4b60      	ldr	r3, [pc, #384]	; (802c620 <UART_SetConfig+0x4e4>)
 802c49e:	fba3 2302 	umull	r2, r3, r3, r2
 802c4a2:	095b      	lsrs	r3, r3, #5
 802c4a4:	011c      	lsls	r4, r3, #4
 802c4a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c4aa:	2200      	movs	r2, #0
 802c4ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802c4b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802c4b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802c4b8:	4642      	mov	r2, r8
 802c4ba:	464b      	mov	r3, r9
 802c4bc:	1891      	adds	r1, r2, r2
 802c4be:	61b9      	str	r1, [r7, #24]
 802c4c0:	415b      	adcs	r3, r3
 802c4c2:	61fb      	str	r3, [r7, #28]
 802c4c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802c4c8:	4641      	mov	r1, r8
 802c4ca:	1851      	adds	r1, r2, r1
 802c4cc:	6139      	str	r1, [r7, #16]
 802c4ce:	4649      	mov	r1, r9
 802c4d0:	414b      	adcs	r3, r1
 802c4d2:	617b      	str	r3, [r7, #20]
 802c4d4:	f04f 0200 	mov.w	r2, #0
 802c4d8:	f04f 0300 	mov.w	r3, #0
 802c4dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802c4e0:	4659      	mov	r1, fp
 802c4e2:	00cb      	lsls	r3, r1, #3
 802c4e4:	4651      	mov	r1, sl
 802c4e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802c4ea:	4651      	mov	r1, sl
 802c4ec:	00ca      	lsls	r2, r1, #3
 802c4ee:	4610      	mov	r0, r2
 802c4f0:	4619      	mov	r1, r3
 802c4f2:	4603      	mov	r3, r0
 802c4f4:	4642      	mov	r2, r8
 802c4f6:	189b      	adds	r3, r3, r2
 802c4f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802c4fc:	464b      	mov	r3, r9
 802c4fe:	460a      	mov	r2, r1
 802c500:	eb42 0303 	adc.w	r3, r2, r3
 802c504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802c508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c50c:	685b      	ldr	r3, [r3, #4]
 802c50e:	2200      	movs	r2, #0
 802c510:	67bb      	str	r3, [r7, #120]	; 0x78
 802c512:	67fa      	str	r2, [r7, #124]	; 0x7c
 802c514:	f04f 0200 	mov.w	r2, #0
 802c518:	f04f 0300 	mov.w	r3, #0
 802c51c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802c520:	4649      	mov	r1, r9
 802c522:	008b      	lsls	r3, r1, #2
 802c524:	4641      	mov	r1, r8
 802c526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802c52a:	4641      	mov	r1, r8
 802c52c:	008a      	lsls	r2, r1, #2
 802c52e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802c532:	f7f5 fe9d 	bl	8022270 <__aeabi_uldivmod>
 802c536:	4602      	mov	r2, r0
 802c538:	460b      	mov	r3, r1
 802c53a:	4611      	mov	r1, r2
 802c53c:	4b38      	ldr	r3, [pc, #224]	; (802c620 <UART_SetConfig+0x4e4>)
 802c53e:	fba3 2301 	umull	r2, r3, r3, r1
 802c542:	095b      	lsrs	r3, r3, #5
 802c544:	2264      	movs	r2, #100	; 0x64
 802c546:	fb02 f303 	mul.w	r3, r2, r3
 802c54a:	1acb      	subs	r3, r1, r3
 802c54c:	011b      	lsls	r3, r3, #4
 802c54e:	3332      	adds	r3, #50	; 0x32
 802c550:	4a33      	ldr	r2, [pc, #204]	; (802c620 <UART_SetConfig+0x4e4>)
 802c552:	fba2 2303 	umull	r2, r3, r2, r3
 802c556:	095b      	lsrs	r3, r3, #5
 802c558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802c55c:	441c      	add	r4, r3
 802c55e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c562:	2200      	movs	r2, #0
 802c564:	673b      	str	r3, [r7, #112]	; 0x70
 802c566:	677a      	str	r2, [r7, #116]	; 0x74
 802c568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802c56c:	4642      	mov	r2, r8
 802c56e:	464b      	mov	r3, r9
 802c570:	1891      	adds	r1, r2, r2
 802c572:	60b9      	str	r1, [r7, #8]
 802c574:	415b      	adcs	r3, r3
 802c576:	60fb      	str	r3, [r7, #12]
 802c578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802c57c:	4641      	mov	r1, r8
 802c57e:	1851      	adds	r1, r2, r1
 802c580:	6039      	str	r1, [r7, #0]
 802c582:	4649      	mov	r1, r9
 802c584:	414b      	adcs	r3, r1
 802c586:	607b      	str	r3, [r7, #4]
 802c588:	f04f 0200 	mov.w	r2, #0
 802c58c:	f04f 0300 	mov.w	r3, #0
 802c590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802c594:	4659      	mov	r1, fp
 802c596:	00cb      	lsls	r3, r1, #3
 802c598:	4651      	mov	r1, sl
 802c59a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802c59e:	4651      	mov	r1, sl
 802c5a0:	00ca      	lsls	r2, r1, #3
 802c5a2:	4610      	mov	r0, r2
 802c5a4:	4619      	mov	r1, r3
 802c5a6:	4603      	mov	r3, r0
 802c5a8:	4642      	mov	r2, r8
 802c5aa:	189b      	adds	r3, r3, r2
 802c5ac:	66bb      	str	r3, [r7, #104]	; 0x68
 802c5ae:	464b      	mov	r3, r9
 802c5b0:	460a      	mov	r2, r1
 802c5b2:	eb42 0303 	adc.w	r3, r2, r3
 802c5b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 802c5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c5bc:	685b      	ldr	r3, [r3, #4]
 802c5be:	2200      	movs	r2, #0
 802c5c0:	663b      	str	r3, [r7, #96]	; 0x60
 802c5c2:	667a      	str	r2, [r7, #100]	; 0x64
 802c5c4:	f04f 0200 	mov.w	r2, #0
 802c5c8:	f04f 0300 	mov.w	r3, #0
 802c5cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802c5d0:	4649      	mov	r1, r9
 802c5d2:	008b      	lsls	r3, r1, #2
 802c5d4:	4641      	mov	r1, r8
 802c5d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802c5da:	4641      	mov	r1, r8
 802c5dc:	008a      	lsls	r2, r1, #2
 802c5de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802c5e2:	f7f5 fe45 	bl	8022270 <__aeabi_uldivmod>
 802c5e6:	4602      	mov	r2, r0
 802c5e8:	460b      	mov	r3, r1
 802c5ea:	4b0d      	ldr	r3, [pc, #52]	; (802c620 <UART_SetConfig+0x4e4>)
 802c5ec:	fba3 1302 	umull	r1, r3, r3, r2
 802c5f0:	095b      	lsrs	r3, r3, #5
 802c5f2:	2164      	movs	r1, #100	; 0x64
 802c5f4:	fb01 f303 	mul.w	r3, r1, r3
 802c5f8:	1ad3      	subs	r3, r2, r3
 802c5fa:	011b      	lsls	r3, r3, #4
 802c5fc:	3332      	adds	r3, #50	; 0x32
 802c5fe:	4a08      	ldr	r2, [pc, #32]	; (802c620 <UART_SetConfig+0x4e4>)
 802c600:	fba2 2303 	umull	r2, r3, r2, r3
 802c604:	095b      	lsrs	r3, r3, #5
 802c606:	f003 020f 	and.w	r2, r3, #15
 802c60a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c60e:	681b      	ldr	r3, [r3, #0]
 802c610:	4422      	add	r2, r4
 802c612:	609a      	str	r2, [r3, #8]
}
 802c614:	bf00      	nop
 802c616:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802c61a:	46bd      	mov	sp, r7
 802c61c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802c620:	51eb851f 	.word	0x51eb851f

0802c624 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 802c624:	b480      	push	{r7}
 802c626:	b083      	sub	sp, #12
 802c628:	af00      	add	r7, sp, #0
 802c62a:	6078      	str	r0, [r7, #4]
 802c62c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 802c62e:	683b      	ldr	r3, [r7, #0]
 802c630:	681b      	ldr	r3, [r3, #0]
 802c632:	2b10      	cmp	r3, #16
 802c634:	d11c      	bne.n	802c670 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802c636:	687b      	ldr	r3, [r7, #4]
 802c638:	681a      	ldr	r2, [r3, #0]
 802c63a:	4b1f      	ldr	r3, [pc, #124]	; (802c6b8 <FSMC_NAND_Init+0x94>)
 802c63c:	4013      	ands	r3, r2
 802c63e:	683a      	ldr	r2, [r7, #0]
 802c640:	6851      	ldr	r1, [r2, #4]
 802c642:	683a      	ldr	r2, [r7, #0]
 802c644:	6892      	ldr	r2, [r2, #8]
 802c646:	4311      	orrs	r1, r2
 802c648:	683a      	ldr	r2, [r7, #0]
 802c64a:	68d2      	ldr	r2, [r2, #12]
 802c64c:	4311      	orrs	r1, r2
 802c64e:	683a      	ldr	r2, [r7, #0]
 802c650:	6912      	ldr	r2, [r2, #16]
 802c652:	4311      	orrs	r1, r2
 802c654:	683a      	ldr	r2, [r7, #0]
 802c656:	6952      	ldr	r2, [r2, #20]
 802c658:	0252      	lsls	r2, r2, #9
 802c65a:	4311      	orrs	r1, r2
 802c65c:	683a      	ldr	r2, [r7, #0]
 802c65e:	6992      	ldr	r2, [r2, #24]
 802c660:	0352      	lsls	r2, r2, #13
 802c662:	430a      	orrs	r2, r1
 802c664:	4313      	orrs	r3, r2
 802c666:	f043 0208 	orr.w	r2, r3, #8
 802c66a:	687b      	ldr	r3, [r7, #4]
 802c66c:	601a      	str	r2, [r3, #0]
 802c66e:	e01b      	b.n	802c6a8 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	6a1a      	ldr	r2, [r3, #32]
 802c674:	4b10      	ldr	r3, [pc, #64]	; (802c6b8 <FSMC_NAND_Init+0x94>)
 802c676:	4013      	ands	r3, r2
 802c678:	683a      	ldr	r2, [r7, #0]
 802c67a:	6851      	ldr	r1, [r2, #4]
 802c67c:	683a      	ldr	r2, [r7, #0]
 802c67e:	6892      	ldr	r2, [r2, #8]
 802c680:	4311      	orrs	r1, r2
 802c682:	683a      	ldr	r2, [r7, #0]
 802c684:	68d2      	ldr	r2, [r2, #12]
 802c686:	4311      	orrs	r1, r2
 802c688:	683a      	ldr	r2, [r7, #0]
 802c68a:	6912      	ldr	r2, [r2, #16]
 802c68c:	4311      	orrs	r1, r2
 802c68e:	683a      	ldr	r2, [r7, #0]
 802c690:	6952      	ldr	r2, [r2, #20]
 802c692:	0252      	lsls	r2, r2, #9
 802c694:	4311      	orrs	r1, r2
 802c696:	683a      	ldr	r2, [r7, #0]
 802c698:	6992      	ldr	r2, [r2, #24]
 802c69a:	0352      	lsls	r2, r2, #13
 802c69c:	430a      	orrs	r2, r1
 802c69e:	4313      	orrs	r3, r2
 802c6a0:	f043 0208 	orr.w	r2, r3, #8
 802c6a4:	687b      	ldr	r3, [r7, #4]
 802c6a6:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 802c6a8:	2300      	movs	r3, #0
}
 802c6aa:	4618      	mov	r0, r3
 802c6ac:	370c      	adds	r7, #12
 802c6ae:	46bd      	mov	sp, r7
 802c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6b4:	4770      	bx	lr
 802c6b6:	bf00      	nop
 802c6b8:	fff00181 	.word	0xfff00181

0802c6bc <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802c6bc:	b480      	push	{r7}
 802c6be:	b085      	sub	sp, #20
 802c6c0:	af00      	add	r7, sp, #0
 802c6c2:	60f8      	str	r0, [r7, #12]
 802c6c4:	60b9      	str	r1, [r7, #8]
 802c6c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802c6c8:	687b      	ldr	r3, [r7, #4]
 802c6ca:	2b10      	cmp	r3, #16
 802c6cc:	d112      	bne.n	802c6f4 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802c6ce:	68fb      	ldr	r3, [r7, #12]
 802c6d0:	689b      	ldr	r3, [r3, #8]
 802c6d2:	68bb      	ldr	r3, [r7, #8]
 802c6d4:	681a      	ldr	r2, [r3, #0]
 802c6d6:	68bb      	ldr	r3, [r7, #8]
 802c6d8:	685b      	ldr	r3, [r3, #4]
 802c6da:	021b      	lsls	r3, r3, #8
 802c6dc:	431a      	orrs	r2, r3
 802c6de:	68bb      	ldr	r3, [r7, #8]
 802c6e0:	689b      	ldr	r3, [r3, #8]
 802c6e2:	041b      	lsls	r3, r3, #16
 802c6e4:	431a      	orrs	r2, r3
 802c6e6:	68bb      	ldr	r3, [r7, #8]
 802c6e8:	68db      	ldr	r3, [r3, #12]
 802c6ea:	061b      	lsls	r3, r3, #24
 802c6ec:	431a      	orrs	r2, r3
 802c6ee:	68fb      	ldr	r3, [r7, #12]
 802c6f0:	609a      	str	r2, [r3, #8]
 802c6f2:	e011      	b.n	802c718 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802c6f4:	68fb      	ldr	r3, [r7, #12]
 802c6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6f8:	68bb      	ldr	r3, [r7, #8]
 802c6fa:	681a      	ldr	r2, [r3, #0]
 802c6fc:	68bb      	ldr	r3, [r7, #8]
 802c6fe:	685b      	ldr	r3, [r3, #4]
 802c700:	021b      	lsls	r3, r3, #8
 802c702:	431a      	orrs	r2, r3
 802c704:	68bb      	ldr	r3, [r7, #8]
 802c706:	689b      	ldr	r3, [r3, #8]
 802c708:	041b      	lsls	r3, r3, #16
 802c70a:	431a      	orrs	r2, r3
 802c70c:	68bb      	ldr	r3, [r7, #8]
 802c70e:	68db      	ldr	r3, [r3, #12]
 802c710:	061b      	lsls	r3, r3, #24
 802c712:	431a      	orrs	r2, r3
 802c714:	68fb      	ldr	r3, [r7, #12]
 802c716:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 802c718:	2300      	movs	r3, #0
}
 802c71a:	4618      	mov	r0, r3
 802c71c:	3714      	adds	r7, #20
 802c71e:	46bd      	mov	sp, r7
 802c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c724:	4770      	bx	lr

0802c726 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802c726:	b480      	push	{r7}
 802c728:	b085      	sub	sp, #20
 802c72a:	af00      	add	r7, sp, #0
 802c72c:	60f8      	str	r0, [r7, #12]
 802c72e:	60b9      	str	r1, [r7, #8]
 802c730:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802c732:	687b      	ldr	r3, [r7, #4]
 802c734:	2b10      	cmp	r3, #16
 802c736:	d112      	bne.n	802c75e <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802c738:	68fb      	ldr	r3, [r7, #12]
 802c73a:	68db      	ldr	r3, [r3, #12]
 802c73c:	68bb      	ldr	r3, [r7, #8]
 802c73e:	681a      	ldr	r2, [r3, #0]
 802c740:	68bb      	ldr	r3, [r7, #8]
 802c742:	685b      	ldr	r3, [r3, #4]
 802c744:	021b      	lsls	r3, r3, #8
 802c746:	431a      	orrs	r2, r3
 802c748:	68bb      	ldr	r3, [r7, #8]
 802c74a:	689b      	ldr	r3, [r3, #8]
 802c74c:	041b      	lsls	r3, r3, #16
 802c74e:	431a      	orrs	r2, r3
 802c750:	68bb      	ldr	r3, [r7, #8]
 802c752:	68db      	ldr	r3, [r3, #12]
 802c754:	061b      	lsls	r3, r3, #24
 802c756:	431a      	orrs	r2, r3
 802c758:	68fb      	ldr	r3, [r7, #12]
 802c75a:	60da      	str	r2, [r3, #12]
 802c75c:	e011      	b.n	802c782 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802c75e:	68fb      	ldr	r3, [r7, #12]
 802c760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c762:	68bb      	ldr	r3, [r7, #8]
 802c764:	681a      	ldr	r2, [r3, #0]
 802c766:	68bb      	ldr	r3, [r7, #8]
 802c768:	685b      	ldr	r3, [r3, #4]
 802c76a:	021b      	lsls	r3, r3, #8
 802c76c:	431a      	orrs	r2, r3
 802c76e:	68bb      	ldr	r3, [r7, #8]
 802c770:	689b      	ldr	r3, [r3, #8]
 802c772:	041b      	lsls	r3, r3, #16
 802c774:	431a      	orrs	r2, r3
 802c776:	68bb      	ldr	r3, [r7, #8]
 802c778:	68db      	ldr	r3, [r3, #12]
 802c77a:	061b      	lsls	r3, r3, #24
 802c77c:	431a      	orrs	r2, r3
 802c77e:	68fb      	ldr	r3, [r7, #12]
 802c780:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 802c782:	2300      	movs	r3, #0
}
 802c784:	4618      	mov	r0, r3
 802c786:	3714      	adds	r7, #20
 802c788:	46bd      	mov	sp, r7
 802c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c78e:	4770      	bx	lr

0802c790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802c790:	b084      	sub	sp, #16
 802c792:	b580      	push	{r7, lr}
 802c794:	b084      	sub	sp, #16
 802c796:	af00      	add	r7, sp, #0
 802c798:	6078      	str	r0, [r7, #4]
 802c79a:	f107 001c 	add.w	r0, r7, #28
 802c79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c7a4:	2b01      	cmp	r3, #1
 802c7a6:	d122      	bne.n	802c7ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802c7a8:	687b      	ldr	r3, [r7, #4]
 802c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c7ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802c7b0:	687b      	ldr	r3, [r7, #4]
 802c7b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802c7b4:	687b      	ldr	r3, [r7, #4]
 802c7b6:	68db      	ldr	r3, [r3, #12]
 802c7b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802c7bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c7c0:	687a      	ldr	r2, [r7, #4]
 802c7c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802c7c4:	687b      	ldr	r3, [r7, #4]
 802c7c6:	68db      	ldr	r3, [r3, #12]
 802c7c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802c7cc:	687b      	ldr	r3, [r7, #4]
 802c7ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802c7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c7d2:	2b01      	cmp	r3, #1
 802c7d4:	d105      	bne.n	802c7e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802c7d6:	687b      	ldr	r3, [r7, #4]
 802c7d8:	68db      	ldr	r3, [r3, #12]
 802c7da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802c7de:	687b      	ldr	r3, [r7, #4]
 802c7e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802c7e2:	6878      	ldr	r0, [r7, #4]
 802c7e4:	f001 fbee 	bl	802dfc4 <USB_CoreReset>
 802c7e8:	4603      	mov	r3, r0
 802c7ea:	73fb      	strb	r3, [r7, #15]
 802c7ec:	e01a      	b.n	802c824 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802c7ee:	687b      	ldr	r3, [r7, #4]
 802c7f0:	68db      	ldr	r3, [r3, #12]
 802c7f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802c7f6:	687b      	ldr	r3, [r7, #4]
 802c7f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802c7fa:	6878      	ldr	r0, [r7, #4]
 802c7fc:	f001 fbe2 	bl	802dfc4 <USB_CoreReset>
 802c800:	4603      	mov	r3, r0
 802c802:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802c804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c806:	2b00      	cmp	r3, #0
 802c808:	d106      	bne.n	802c818 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802c80a:	687b      	ldr	r3, [r7, #4]
 802c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c80e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802c812:	687b      	ldr	r3, [r7, #4]
 802c814:	639a      	str	r2, [r3, #56]	; 0x38
 802c816:	e005      	b.n	802c824 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c81c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802c820:	687b      	ldr	r3, [r7, #4]
 802c822:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c826:	2b01      	cmp	r3, #1
 802c828:	d10b      	bne.n	802c842 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	689b      	ldr	r3, [r3, #8]
 802c82e:	f043 0206 	orr.w	r2, r3, #6
 802c832:	687b      	ldr	r3, [r7, #4]
 802c834:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802c836:	687b      	ldr	r3, [r7, #4]
 802c838:	689b      	ldr	r3, [r3, #8]
 802c83a:	f043 0220 	orr.w	r2, r3, #32
 802c83e:	687b      	ldr	r3, [r7, #4]
 802c840:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802c842:	7bfb      	ldrb	r3, [r7, #15]
}
 802c844:	4618      	mov	r0, r3
 802c846:	3710      	adds	r7, #16
 802c848:	46bd      	mov	sp, r7
 802c84a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802c84e:	b004      	add	sp, #16
 802c850:	4770      	bx	lr
	...

0802c854 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802c854:	b480      	push	{r7}
 802c856:	b087      	sub	sp, #28
 802c858:	af00      	add	r7, sp, #0
 802c85a:	60f8      	str	r0, [r7, #12]
 802c85c:	60b9      	str	r1, [r7, #8]
 802c85e:	4613      	mov	r3, r2
 802c860:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802c862:	79fb      	ldrb	r3, [r7, #7]
 802c864:	2b02      	cmp	r3, #2
 802c866:	d165      	bne.n	802c934 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802c868:	68bb      	ldr	r3, [r7, #8]
 802c86a:	4a41      	ldr	r2, [pc, #260]	; (802c970 <USB_SetTurnaroundTime+0x11c>)
 802c86c:	4293      	cmp	r3, r2
 802c86e:	d906      	bls.n	802c87e <USB_SetTurnaroundTime+0x2a>
 802c870:	68bb      	ldr	r3, [r7, #8]
 802c872:	4a40      	ldr	r2, [pc, #256]	; (802c974 <USB_SetTurnaroundTime+0x120>)
 802c874:	4293      	cmp	r3, r2
 802c876:	d202      	bcs.n	802c87e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802c878:	230f      	movs	r3, #15
 802c87a:	617b      	str	r3, [r7, #20]
 802c87c:	e062      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802c87e:	68bb      	ldr	r3, [r7, #8]
 802c880:	4a3c      	ldr	r2, [pc, #240]	; (802c974 <USB_SetTurnaroundTime+0x120>)
 802c882:	4293      	cmp	r3, r2
 802c884:	d306      	bcc.n	802c894 <USB_SetTurnaroundTime+0x40>
 802c886:	68bb      	ldr	r3, [r7, #8]
 802c888:	4a3b      	ldr	r2, [pc, #236]	; (802c978 <USB_SetTurnaroundTime+0x124>)
 802c88a:	4293      	cmp	r3, r2
 802c88c:	d202      	bcs.n	802c894 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802c88e:	230e      	movs	r3, #14
 802c890:	617b      	str	r3, [r7, #20]
 802c892:	e057      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802c894:	68bb      	ldr	r3, [r7, #8]
 802c896:	4a38      	ldr	r2, [pc, #224]	; (802c978 <USB_SetTurnaroundTime+0x124>)
 802c898:	4293      	cmp	r3, r2
 802c89a:	d306      	bcc.n	802c8aa <USB_SetTurnaroundTime+0x56>
 802c89c:	68bb      	ldr	r3, [r7, #8]
 802c89e:	4a37      	ldr	r2, [pc, #220]	; (802c97c <USB_SetTurnaroundTime+0x128>)
 802c8a0:	4293      	cmp	r3, r2
 802c8a2:	d202      	bcs.n	802c8aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802c8a4:	230d      	movs	r3, #13
 802c8a6:	617b      	str	r3, [r7, #20]
 802c8a8:	e04c      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802c8aa:	68bb      	ldr	r3, [r7, #8]
 802c8ac:	4a33      	ldr	r2, [pc, #204]	; (802c97c <USB_SetTurnaroundTime+0x128>)
 802c8ae:	4293      	cmp	r3, r2
 802c8b0:	d306      	bcc.n	802c8c0 <USB_SetTurnaroundTime+0x6c>
 802c8b2:	68bb      	ldr	r3, [r7, #8]
 802c8b4:	4a32      	ldr	r2, [pc, #200]	; (802c980 <USB_SetTurnaroundTime+0x12c>)
 802c8b6:	4293      	cmp	r3, r2
 802c8b8:	d802      	bhi.n	802c8c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802c8ba:	230c      	movs	r3, #12
 802c8bc:	617b      	str	r3, [r7, #20]
 802c8be:	e041      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802c8c0:	68bb      	ldr	r3, [r7, #8]
 802c8c2:	4a2f      	ldr	r2, [pc, #188]	; (802c980 <USB_SetTurnaroundTime+0x12c>)
 802c8c4:	4293      	cmp	r3, r2
 802c8c6:	d906      	bls.n	802c8d6 <USB_SetTurnaroundTime+0x82>
 802c8c8:	68bb      	ldr	r3, [r7, #8]
 802c8ca:	4a2e      	ldr	r2, [pc, #184]	; (802c984 <USB_SetTurnaroundTime+0x130>)
 802c8cc:	4293      	cmp	r3, r2
 802c8ce:	d802      	bhi.n	802c8d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802c8d0:	230b      	movs	r3, #11
 802c8d2:	617b      	str	r3, [r7, #20]
 802c8d4:	e036      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802c8d6:	68bb      	ldr	r3, [r7, #8]
 802c8d8:	4a2a      	ldr	r2, [pc, #168]	; (802c984 <USB_SetTurnaroundTime+0x130>)
 802c8da:	4293      	cmp	r3, r2
 802c8dc:	d906      	bls.n	802c8ec <USB_SetTurnaroundTime+0x98>
 802c8de:	68bb      	ldr	r3, [r7, #8]
 802c8e0:	4a29      	ldr	r2, [pc, #164]	; (802c988 <USB_SetTurnaroundTime+0x134>)
 802c8e2:	4293      	cmp	r3, r2
 802c8e4:	d802      	bhi.n	802c8ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802c8e6:	230a      	movs	r3, #10
 802c8e8:	617b      	str	r3, [r7, #20]
 802c8ea:	e02b      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802c8ec:	68bb      	ldr	r3, [r7, #8]
 802c8ee:	4a26      	ldr	r2, [pc, #152]	; (802c988 <USB_SetTurnaroundTime+0x134>)
 802c8f0:	4293      	cmp	r3, r2
 802c8f2:	d906      	bls.n	802c902 <USB_SetTurnaroundTime+0xae>
 802c8f4:	68bb      	ldr	r3, [r7, #8]
 802c8f6:	4a25      	ldr	r2, [pc, #148]	; (802c98c <USB_SetTurnaroundTime+0x138>)
 802c8f8:	4293      	cmp	r3, r2
 802c8fa:	d202      	bcs.n	802c902 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802c8fc:	2309      	movs	r3, #9
 802c8fe:	617b      	str	r3, [r7, #20]
 802c900:	e020      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802c902:	68bb      	ldr	r3, [r7, #8]
 802c904:	4a21      	ldr	r2, [pc, #132]	; (802c98c <USB_SetTurnaroundTime+0x138>)
 802c906:	4293      	cmp	r3, r2
 802c908:	d306      	bcc.n	802c918 <USB_SetTurnaroundTime+0xc4>
 802c90a:	68bb      	ldr	r3, [r7, #8]
 802c90c:	4a20      	ldr	r2, [pc, #128]	; (802c990 <USB_SetTurnaroundTime+0x13c>)
 802c90e:	4293      	cmp	r3, r2
 802c910:	d802      	bhi.n	802c918 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802c912:	2308      	movs	r3, #8
 802c914:	617b      	str	r3, [r7, #20]
 802c916:	e015      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802c918:	68bb      	ldr	r3, [r7, #8]
 802c91a:	4a1d      	ldr	r2, [pc, #116]	; (802c990 <USB_SetTurnaroundTime+0x13c>)
 802c91c:	4293      	cmp	r3, r2
 802c91e:	d906      	bls.n	802c92e <USB_SetTurnaroundTime+0xda>
 802c920:	68bb      	ldr	r3, [r7, #8]
 802c922:	4a1c      	ldr	r2, [pc, #112]	; (802c994 <USB_SetTurnaroundTime+0x140>)
 802c924:	4293      	cmp	r3, r2
 802c926:	d202      	bcs.n	802c92e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802c928:	2307      	movs	r3, #7
 802c92a:	617b      	str	r3, [r7, #20]
 802c92c:	e00a      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802c92e:	2306      	movs	r3, #6
 802c930:	617b      	str	r3, [r7, #20]
 802c932:	e007      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802c934:	79fb      	ldrb	r3, [r7, #7]
 802c936:	2b00      	cmp	r3, #0
 802c938:	d102      	bne.n	802c940 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802c93a:	2309      	movs	r3, #9
 802c93c:	617b      	str	r3, [r7, #20]
 802c93e:	e001      	b.n	802c944 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802c940:	2309      	movs	r3, #9
 802c942:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802c944:	68fb      	ldr	r3, [r7, #12]
 802c946:	68db      	ldr	r3, [r3, #12]
 802c948:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802c94c:	68fb      	ldr	r3, [r7, #12]
 802c94e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802c950:	68fb      	ldr	r3, [r7, #12]
 802c952:	68da      	ldr	r2, [r3, #12]
 802c954:	697b      	ldr	r3, [r7, #20]
 802c956:	029b      	lsls	r3, r3, #10
 802c958:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802c95c:	431a      	orrs	r2, r3
 802c95e:	68fb      	ldr	r3, [r7, #12]
 802c960:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802c962:	2300      	movs	r3, #0
}
 802c964:	4618      	mov	r0, r3
 802c966:	371c      	adds	r7, #28
 802c968:	46bd      	mov	sp, r7
 802c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c96e:	4770      	bx	lr
 802c970:	00d8acbf 	.word	0x00d8acbf
 802c974:	00e4e1c0 	.word	0x00e4e1c0
 802c978:	00f42400 	.word	0x00f42400
 802c97c:	01067380 	.word	0x01067380
 802c980:	011a499f 	.word	0x011a499f
 802c984:	01312cff 	.word	0x01312cff
 802c988:	014ca43f 	.word	0x014ca43f
 802c98c:	016e3600 	.word	0x016e3600
 802c990:	01a6ab1f 	.word	0x01a6ab1f
 802c994:	01e84800 	.word	0x01e84800

0802c998 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802c998:	b480      	push	{r7}
 802c99a:	b083      	sub	sp, #12
 802c99c:	af00      	add	r7, sp, #0
 802c99e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802c9a0:	687b      	ldr	r3, [r7, #4]
 802c9a2:	689b      	ldr	r3, [r3, #8]
 802c9a4:	f043 0201 	orr.w	r2, r3, #1
 802c9a8:	687b      	ldr	r3, [r7, #4]
 802c9aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802c9ac:	2300      	movs	r3, #0
}
 802c9ae:	4618      	mov	r0, r3
 802c9b0:	370c      	adds	r7, #12
 802c9b2:	46bd      	mov	sp, r7
 802c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9b8:	4770      	bx	lr

0802c9ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802c9ba:	b480      	push	{r7}
 802c9bc:	b083      	sub	sp, #12
 802c9be:	af00      	add	r7, sp, #0
 802c9c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802c9c2:	687b      	ldr	r3, [r7, #4]
 802c9c4:	689b      	ldr	r3, [r3, #8]
 802c9c6:	f023 0201 	bic.w	r2, r3, #1
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802c9ce:	2300      	movs	r3, #0
}
 802c9d0:	4618      	mov	r0, r3
 802c9d2:	370c      	adds	r7, #12
 802c9d4:	46bd      	mov	sp, r7
 802c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c9da:	4770      	bx	lr

0802c9dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802c9dc:	b580      	push	{r7, lr}
 802c9de:	b084      	sub	sp, #16
 802c9e0:	af00      	add	r7, sp, #0
 802c9e2:	6078      	str	r0, [r7, #4]
 802c9e4:	460b      	mov	r3, r1
 802c9e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802c9e8:	2300      	movs	r3, #0
 802c9ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802c9ec:	687b      	ldr	r3, [r7, #4]
 802c9ee:	68db      	ldr	r3, [r3, #12]
 802c9f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802c9f4:	687b      	ldr	r3, [r7, #4]
 802c9f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802c9f8:	78fb      	ldrb	r3, [r7, #3]
 802c9fa:	2b01      	cmp	r3, #1
 802c9fc:	d115      	bne.n	802ca2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802c9fe:	687b      	ldr	r3, [r7, #4]
 802ca00:	68db      	ldr	r3, [r3, #12]
 802ca02:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802ca06:	687b      	ldr	r3, [r7, #4]
 802ca08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ca0a:	2001      	movs	r0, #1
 802ca0c:	f7fa fe2e 	bl	802766c <HAL_Delay>
      ms++;
 802ca10:	68fb      	ldr	r3, [r7, #12]
 802ca12:	3301      	adds	r3, #1
 802ca14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802ca16:	6878      	ldr	r0, [r7, #4]
 802ca18:	f001 fa45 	bl	802dea6 <USB_GetMode>
 802ca1c:	4603      	mov	r3, r0
 802ca1e:	2b01      	cmp	r3, #1
 802ca20:	d01e      	beq.n	802ca60 <USB_SetCurrentMode+0x84>
 802ca22:	68fb      	ldr	r3, [r7, #12]
 802ca24:	2b31      	cmp	r3, #49	; 0x31
 802ca26:	d9f0      	bls.n	802ca0a <USB_SetCurrentMode+0x2e>
 802ca28:	e01a      	b.n	802ca60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802ca2a:	78fb      	ldrb	r3, [r7, #3]
 802ca2c:	2b00      	cmp	r3, #0
 802ca2e:	d115      	bne.n	802ca5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802ca30:	687b      	ldr	r3, [r7, #4]
 802ca32:	68db      	ldr	r3, [r3, #12]
 802ca34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802ca38:	687b      	ldr	r3, [r7, #4]
 802ca3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ca3c:	2001      	movs	r0, #1
 802ca3e:	f7fa fe15 	bl	802766c <HAL_Delay>
      ms++;
 802ca42:	68fb      	ldr	r3, [r7, #12]
 802ca44:	3301      	adds	r3, #1
 802ca46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802ca48:	6878      	ldr	r0, [r7, #4]
 802ca4a:	f001 fa2c 	bl	802dea6 <USB_GetMode>
 802ca4e:	4603      	mov	r3, r0
 802ca50:	2b00      	cmp	r3, #0
 802ca52:	d005      	beq.n	802ca60 <USB_SetCurrentMode+0x84>
 802ca54:	68fb      	ldr	r3, [r7, #12]
 802ca56:	2b31      	cmp	r3, #49	; 0x31
 802ca58:	d9f0      	bls.n	802ca3c <USB_SetCurrentMode+0x60>
 802ca5a:	e001      	b.n	802ca60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ca5c:	2301      	movs	r3, #1
 802ca5e:	e005      	b.n	802ca6c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ca60:	68fb      	ldr	r3, [r7, #12]
 802ca62:	2b32      	cmp	r3, #50	; 0x32
 802ca64:	d101      	bne.n	802ca6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ca66:	2301      	movs	r3, #1
 802ca68:	e000      	b.n	802ca6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ca6a:	2300      	movs	r3, #0
}
 802ca6c:	4618      	mov	r0, r3
 802ca6e:	3710      	adds	r7, #16
 802ca70:	46bd      	mov	sp, r7
 802ca72:	bd80      	pop	{r7, pc}

0802ca74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802ca74:	b084      	sub	sp, #16
 802ca76:	b580      	push	{r7, lr}
 802ca78:	b086      	sub	sp, #24
 802ca7a:	af00      	add	r7, sp, #0
 802ca7c:	6078      	str	r0, [r7, #4]
 802ca7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802ca82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802ca86:	2300      	movs	r3, #0
 802ca88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ca8a:	687b      	ldr	r3, [r7, #4]
 802ca8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802ca8e:	2300      	movs	r3, #0
 802ca90:	613b      	str	r3, [r7, #16]
 802ca92:	e009      	b.n	802caa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802ca94:	687a      	ldr	r2, [r7, #4]
 802ca96:	693b      	ldr	r3, [r7, #16]
 802ca98:	3340      	adds	r3, #64	; 0x40
 802ca9a:	009b      	lsls	r3, r3, #2
 802ca9c:	4413      	add	r3, r2
 802ca9e:	2200      	movs	r2, #0
 802caa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802caa2:	693b      	ldr	r3, [r7, #16]
 802caa4:	3301      	adds	r3, #1
 802caa6:	613b      	str	r3, [r7, #16]
 802caa8:	693b      	ldr	r3, [r7, #16]
 802caaa:	2b0e      	cmp	r3, #14
 802caac:	d9f2      	bls.n	802ca94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802caae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cab0:	2b00      	cmp	r3, #0
 802cab2:	d11c      	bne.n	802caee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802cab4:	68fb      	ldr	r3, [r7, #12]
 802cab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802caba:	685b      	ldr	r3, [r3, #4]
 802cabc:	68fa      	ldr	r2, [r7, #12]
 802cabe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802cac2:	f043 0302 	orr.w	r3, r3, #2
 802cac6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802cac8:	687b      	ldr	r3, [r7, #4]
 802caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cacc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802cad0:	687b      	ldr	r3, [r7, #4]
 802cad2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802cad4:	687b      	ldr	r3, [r7, #4]
 802cad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cad8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802cadc:	687b      	ldr	r3, [r7, #4]
 802cade:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802cae0:	687b      	ldr	r3, [r7, #4]
 802cae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cae4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802cae8:	687b      	ldr	r3, [r7, #4]
 802caea:	639a      	str	r2, [r3, #56]	; 0x38
 802caec:	e00b      	b.n	802cb06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802caee:	687b      	ldr	r3, [r7, #4]
 802caf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802caf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802caf6:	687b      	ldr	r3, [r7, #4]
 802caf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802cafa:	687b      	ldr	r3, [r7, #4]
 802cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cafe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802cb06:	68fb      	ldr	r3, [r7, #12]
 802cb08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802cb0c:	461a      	mov	r2, r3
 802cb0e:	2300      	movs	r3, #0
 802cb10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802cb12:	68fb      	ldr	r3, [r7, #12]
 802cb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cb18:	4619      	mov	r1, r3
 802cb1a:	68fb      	ldr	r3, [r7, #12]
 802cb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cb20:	461a      	mov	r2, r3
 802cb22:	680b      	ldr	r3, [r1, #0]
 802cb24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802cb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802cb28:	2b01      	cmp	r3, #1
 802cb2a:	d10c      	bne.n	802cb46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802cb2e:	2b00      	cmp	r3, #0
 802cb30:	d104      	bne.n	802cb3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802cb32:	2100      	movs	r1, #0
 802cb34:	6878      	ldr	r0, [r7, #4]
 802cb36:	f000 f965 	bl	802ce04 <USB_SetDevSpeed>
 802cb3a:	e008      	b.n	802cb4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802cb3c:	2101      	movs	r1, #1
 802cb3e:	6878      	ldr	r0, [r7, #4]
 802cb40:	f000 f960 	bl	802ce04 <USB_SetDevSpeed>
 802cb44:	e003      	b.n	802cb4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802cb46:	2103      	movs	r1, #3
 802cb48:	6878      	ldr	r0, [r7, #4]
 802cb4a:	f000 f95b 	bl	802ce04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802cb4e:	2110      	movs	r1, #16
 802cb50:	6878      	ldr	r0, [r7, #4]
 802cb52:	f000 f8f3 	bl	802cd3c <USB_FlushTxFifo>
 802cb56:	4603      	mov	r3, r0
 802cb58:	2b00      	cmp	r3, #0
 802cb5a:	d001      	beq.n	802cb60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802cb5c:	2301      	movs	r3, #1
 802cb5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802cb60:	6878      	ldr	r0, [r7, #4]
 802cb62:	f000 f91f 	bl	802cda4 <USB_FlushRxFifo>
 802cb66:	4603      	mov	r3, r0
 802cb68:	2b00      	cmp	r3, #0
 802cb6a:	d001      	beq.n	802cb70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802cb6c:	2301      	movs	r3, #1
 802cb6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802cb70:	68fb      	ldr	r3, [r7, #12]
 802cb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cb76:	461a      	mov	r2, r3
 802cb78:	2300      	movs	r3, #0
 802cb7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802cb7c:	68fb      	ldr	r3, [r7, #12]
 802cb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cb82:	461a      	mov	r2, r3
 802cb84:	2300      	movs	r3, #0
 802cb86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802cb88:	68fb      	ldr	r3, [r7, #12]
 802cb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cb8e:	461a      	mov	r2, r3
 802cb90:	2300      	movs	r3, #0
 802cb92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802cb94:	2300      	movs	r3, #0
 802cb96:	613b      	str	r3, [r7, #16]
 802cb98:	e043      	b.n	802cc22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802cb9a:	693b      	ldr	r3, [r7, #16]
 802cb9c:	015a      	lsls	r2, r3, #5
 802cb9e:	68fb      	ldr	r3, [r7, #12]
 802cba0:	4413      	add	r3, r2
 802cba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cba6:	681b      	ldr	r3, [r3, #0]
 802cba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802cbac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802cbb0:	d118      	bne.n	802cbe4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 802cbb2:	693b      	ldr	r3, [r7, #16]
 802cbb4:	2b00      	cmp	r3, #0
 802cbb6:	d10a      	bne.n	802cbce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802cbb8:	693b      	ldr	r3, [r7, #16]
 802cbba:	015a      	lsls	r2, r3, #5
 802cbbc:	68fb      	ldr	r3, [r7, #12]
 802cbbe:	4413      	add	r3, r2
 802cbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cbc4:	461a      	mov	r2, r3
 802cbc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802cbca:	6013      	str	r3, [r2, #0]
 802cbcc:	e013      	b.n	802cbf6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802cbce:	693b      	ldr	r3, [r7, #16]
 802cbd0:	015a      	lsls	r2, r3, #5
 802cbd2:	68fb      	ldr	r3, [r7, #12]
 802cbd4:	4413      	add	r3, r2
 802cbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cbda:	461a      	mov	r2, r3
 802cbdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802cbe0:	6013      	str	r3, [r2, #0]
 802cbe2:	e008      	b.n	802cbf6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802cbe4:	693b      	ldr	r3, [r7, #16]
 802cbe6:	015a      	lsls	r2, r3, #5
 802cbe8:	68fb      	ldr	r3, [r7, #12]
 802cbea:	4413      	add	r3, r2
 802cbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cbf0:	461a      	mov	r2, r3
 802cbf2:	2300      	movs	r3, #0
 802cbf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802cbf6:	693b      	ldr	r3, [r7, #16]
 802cbf8:	015a      	lsls	r2, r3, #5
 802cbfa:	68fb      	ldr	r3, [r7, #12]
 802cbfc:	4413      	add	r3, r2
 802cbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cc02:	461a      	mov	r2, r3
 802cc04:	2300      	movs	r3, #0
 802cc06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802cc08:	693b      	ldr	r3, [r7, #16]
 802cc0a:	015a      	lsls	r2, r3, #5
 802cc0c:	68fb      	ldr	r3, [r7, #12]
 802cc0e:	4413      	add	r3, r2
 802cc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cc14:	461a      	mov	r2, r3
 802cc16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802cc1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802cc1c:	693b      	ldr	r3, [r7, #16]
 802cc1e:	3301      	adds	r3, #1
 802cc20:	613b      	str	r3, [r7, #16]
 802cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802cc24:	693a      	ldr	r2, [r7, #16]
 802cc26:	429a      	cmp	r2, r3
 802cc28:	d3b7      	bcc.n	802cb9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802cc2a:	2300      	movs	r3, #0
 802cc2c:	613b      	str	r3, [r7, #16]
 802cc2e:	e043      	b.n	802ccb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802cc30:	693b      	ldr	r3, [r7, #16]
 802cc32:	015a      	lsls	r2, r3, #5
 802cc34:	68fb      	ldr	r3, [r7, #12]
 802cc36:	4413      	add	r3, r2
 802cc38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc3c:	681b      	ldr	r3, [r3, #0]
 802cc3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802cc42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802cc46:	d118      	bne.n	802cc7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 802cc48:	693b      	ldr	r3, [r7, #16]
 802cc4a:	2b00      	cmp	r3, #0
 802cc4c:	d10a      	bne.n	802cc64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802cc4e:	693b      	ldr	r3, [r7, #16]
 802cc50:	015a      	lsls	r2, r3, #5
 802cc52:	68fb      	ldr	r3, [r7, #12]
 802cc54:	4413      	add	r3, r2
 802cc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc5a:	461a      	mov	r2, r3
 802cc5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802cc60:	6013      	str	r3, [r2, #0]
 802cc62:	e013      	b.n	802cc8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802cc64:	693b      	ldr	r3, [r7, #16]
 802cc66:	015a      	lsls	r2, r3, #5
 802cc68:	68fb      	ldr	r3, [r7, #12]
 802cc6a:	4413      	add	r3, r2
 802cc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc70:	461a      	mov	r2, r3
 802cc72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802cc76:	6013      	str	r3, [r2, #0]
 802cc78:	e008      	b.n	802cc8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802cc7a:	693b      	ldr	r3, [r7, #16]
 802cc7c:	015a      	lsls	r2, r3, #5
 802cc7e:	68fb      	ldr	r3, [r7, #12]
 802cc80:	4413      	add	r3, r2
 802cc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc86:	461a      	mov	r2, r3
 802cc88:	2300      	movs	r3, #0
 802cc8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802cc8c:	693b      	ldr	r3, [r7, #16]
 802cc8e:	015a      	lsls	r2, r3, #5
 802cc90:	68fb      	ldr	r3, [r7, #12]
 802cc92:	4413      	add	r3, r2
 802cc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cc98:	461a      	mov	r2, r3
 802cc9a:	2300      	movs	r3, #0
 802cc9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802cc9e:	693b      	ldr	r3, [r7, #16]
 802cca0:	015a      	lsls	r2, r3, #5
 802cca2:	68fb      	ldr	r3, [r7, #12]
 802cca4:	4413      	add	r3, r2
 802cca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ccaa:	461a      	mov	r2, r3
 802ccac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802ccb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802ccb2:	693b      	ldr	r3, [r7, #16]
 802ccb4:	3301      	adds	r3, #1
 802ccb6:	613b      	str	r3, [r7, #16]
 802ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ccba:	693a      	ldr	r2, [r7, #16]
 802ccbc:	429a      	cmp	r2, r3
 802ccbe:	d3b7      	bcc.n	802cc30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802ccc0:	68fb      	ldr	r3, [r7, #12]
 802ccc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ccc6:	691b      	ldr	r3, [r3, #16]
 802ccc8:	68fa      	ldr	r2, [r7, #12]
 802ccca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ccce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802ccd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802ccd4:	687b      	ldr	r3, [r7, #4]
 802ccd6:	2200      	movs	r2, #0
 802ccd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802ccda:	687b      	ldr	r3, [r7, #4]
 802ccdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802cce0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802cce4:	2b00      	cmp	r3, #0
 802cce6:	d105      	bne.n	802ccf4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802cce8:	687b      	ldr	r3, [r7, #4]
 802ccea:	699b      	ldr	r3, [r3, #24]
 802ccec:	f043 0210 	orr.w	r2, r3, #16
 802ccf0:	687b      	ldr	r3, [r7, #4]
 802ccf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802ccf4:	687b      	ldr	r3, [r7, #4]
 802ccf6:	699a      	ldr	r2, [r3, #24]
 802ccf8:	4b0f      	ldr	r3, [pc, #60]	; (802cd38 <USB_DevInit+0x2c4>)
 802ccfa:	4313      	orrs	r3, r2
 802ccfc:	687a      	ldr	r2, [r7, #4]
 802ccfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802cd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802cd02:	2b00      	cmp	r3, #0
 802cd04:	d005      	beq.n	802cd12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802cd06:	687b      	ldr	r3, [r7, #4]
 802cd08:	699b      	ldr	r3, [r3, #24]
 802cd0a:	f043 0208 	orr.w	r2, r3, #8
 802cd0e:	687b      	ldr	r3, [r7, #4]
 802cd10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802cd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802cd14:	2b01      	cmp	r3, #1
 802cd16:	d107      	bne.n	802cd28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802cd18:	687b      	ldr	r3, [r7, #4]
 802cd1a:	699b      	ldr	r3, [r3, #24]
 802cd1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802cd20:	f043 0304 	orr.w	r3, r3, #4
 802cd24:	687a      	ldr	r2, [r7, #4]
 802cd26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802cd28:	7dfb      	ldrb	r3, [r7, #23]
}
 802cd2a:	4618      	mov	r0, r3
 802cd2c:	3718      	adds	r7, #24
 802cd2e:	46bd      	mov	sp, r7
 802cd30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802cd34:	b004      	add	sp, #16
 802cd36:	4770      	bx	lr
 802cd38:	803c3800 	.word	0x803c3800

0802cd3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802cd3c:	b480      	push	{r7}
 802cd3e:	b085      	sub	sp, #20
 802cd40:	af00      	add	r7, sp, #0
 802cd42:	6078      	str	r0, [r7, #4]
 802cd44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802cd46:	2300      	movs	r3, #0
 802cd48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802cd4a:	68fb      	ldr	r3, [r7, #12]
 802cd4c:	3301      	adds	r3, #1
 802cd4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802cd50:	68fb      	ldr	r3, [r7, #12]
 802cd52:	4a13      	ldr	r2, [pc, #76]	; (802cda0 <USB_FlushTxFifo+0x64>)
 802cd54:	4293      	cmp	r3, r2
 802cd56:	d901      	bls.n	802cd5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802cd58:	2303      	movs	r3, #3
 802cd5a:	e01b      	b.n	802cd94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802cd5c:	687b      	ldr	r3, [r7, #4]
 802cd5e:	691b      	ldr	r3, [r3, #16]
 802cd60:	2b00      	cmp	r3, #0
 802cd62:	daf2      	bge.n	802cd4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802cd64:	2300      	movs	r3, #0
 802cd66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802cd68:	683b      	ldr	r3, [r7, #0]
 802cd6a:	019b      	lsls	r3, r3, #6
 802cd6c:	f043 0220 	orr.w	r2, r3, #32
 802cd70:	687b      	ldr	r3, [r7, #4]
 802cd72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802cd74:	68fb      	ldr	r3, [r7, #12]
 802cd76:	3301      	adds	r3, #1
 802cd78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802cd7a:	68fb      	ldr	r3, [r7, #12]
 802cd7c:	4a08      	ldr	r2, [pc, #32]	; (802cda0 <USB_FlushTxFifo+0x64>)
 802cd7e:	4293      	cmp	r3, r2
 802cd80:	d901      	bls.n	802cd86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802cd82:	2303      	movs	r3, #3
 802cd84:	e006      	b.n	802cd94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	691b      	ldr	r3, [r3, #16]
 802cd8a:	f003 0320 	and.w	r3, r3, #32
 802cd8e:	2b20      	cmp	r3, #32
 802cd90:	d0f0      	beq.n	802cd74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802cd92:	2300      	movs	r3, #0
}
 802cd94:	4618      	mov	r0, r3
 802cd96:	3714      	adds	r7, #20
 802cd98:	46bd      	mov	sp, r7
 802cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd9e:	4770      	bx	lr
 802cda0:	00030d40 	.word	0x00030d40

0802cda4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802cda4:	b480      	push	{r7}
 802cda6:	b085      	sub	sp, #20
 802cda8:	af00      	add	r7, sp, #0
 802cdaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802cdac:	2300      	movs	r3, #0
 802cdae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802cdb0:	68fb      	ldr	r3, [r7, #12]
 802cdb2:	3301      	adds	r3, #1
 802cdb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802cdb6:	68fb      	ldr	r3, [r7, #12]
 802cdb8:	4a11      	ldr	r2, [pc, #68]	; (802ce00 <USB_FlushRxFifo+0x5c>)
 802cdba:	4293      	cmp	r3, r2
 802cdbc:	d901      	bls.n	802cdc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802cdbe:	2303      	movs	r3, #3
 802cdc0:	e018      	b.n	802cdf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802cdc2:	687b      	ldr	r3, [r7, #4]
 802cdc4:	691b      	ldr	r3, [r3, #16]
 802cdc6:	2b00      	cmp	r3, #0
 802cdc8:	daf2      	bge.n	802cdb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802cdca:	2300      	movs	r3, #0
 802cdcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802cdce:	687b      	ldr	r3, [r7, #4]
 802cdd0:	2210      	movs	r2, #16
 802cdd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802cdd4:	68fb      	ldr	r3, [r7, #12]
 802cdd6:	3301      	adds	r3, #1
 802cdd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802cdda:	68fb      	ldr	r3, [r7, #12]
 802cddc:	4a08      	ldr	r2, [pc, #32]	; (802ce00 <USB_FlushRxFifo+0x5c>)
 802cdde:	4293      	cmp	r3, r2
 802cde0:	d901      	bls.n	802cde6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802cde2:	2303      	movs	r3, #3
 802cde4:	e006      	b.n	802cdf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802cde6:	687b      	ldr	r3, [r7, #4]
 802cde8:	691b      	ldr	r3, [r3, #16]
 802cdea:	f003 0310 	and.w	r3, r3, #16
 802cdee:	2b10      	cmp	r3, #16
 802cdf0:	d0f0      	beq.n	802cdd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802cdf2:	2300      	movs	r3, #0
}
 802cdf4:	4618      	mov	r0, r3
 802cdf6:	3714      	adds	r7, #20
 802cdf8:	46bd      	mov	sp, r7
 802cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdfe:	4770      	bx	lr
 802ce00:	00030d40 	.word	0x00030d40

0802ce04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802ce04:	b480      	push	{r7}
 802ce06:	b085      	sub	sp, #20
 802ce08:	af00      	add	r7, sp, #0
 802ce0a:	6078      	str	r0, [r7, #4]
 802ce0c:	460b      	mov	r3, r1
 802ce0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ce10:	687b      	ldr	r3, [r7, #4]
 802ce12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802ce14:	68fb      	ldr	r3, [r7, #12]
 802ce16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ce1a:	681a      	ldr	r2, [r3, #0]
 802ce1c:	78fb      	ldrb	r3, [r7, #3]
 802ce1e:	68f9      	ldr	r1, [r7, #12]
 802ce20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ce24:	4313      	orrs	r3, r2
 802ce26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802ce28:	2300      	movs	r3, #0
}
 802ce2a:	4618      	mov	r0, r3
 802ce2c:	3714      	adds	r7, #20
 802ce2e:	46bd      	mov	sp, r7
 802ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce34:	4770      	bx	lr

0802ce36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802ce36:	b480      	push	{r7}
 802ce38:	b087      	sub	sp, #28
 802ce3a:	af00      	add	r7, sp, #0
 802ce3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ce3e:	687b      	ldr	r3, [r7, #4]
 802ce40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802ce42:	693b      	ldr	r3, [r7, #16]
 802ce44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ce48:	689b      	ldr	r3, [r3, #8]
 802ce4a:	f003 0306 	and.w	r3, r3, #6
 802ce4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802ce50:	68fb      	ldr	r3, [r7, #12]
 802ce52:	2b00      	cmp	r3, #0
 802ce54:	d102      	bne.n	802ce5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802ce56:	2300      	movs	r3, #0
 802ce58:	75fb      	strb	r3, [r7, #23]
 802ce5a:	e00a      	b.n	802ce72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802ce5c:	68fb      	ldr	r3, [r7, #12]
 802ce5e:	2b02      	cmp	r3, #2
 802ce60:	d002      	beq.n	802ce68 <USB_GetDevSpeed+0x32>
 802ce62:	68fb      	ldr	r3, [r7, #12]
 802ce64:	2b06      	cmp	r3, #6
 802ce66:	d102      	bne.n	802ce6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802ce68:	2302      	movs	r3, #2
 802ce6a:	75fb      	strb	r3, [r7, #23]
 802ce6c:	e001      	b.n	802ce72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802ce6e:	230f      	movs	r3, #15
 802ce70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802ce72:	7dfb      	ldrb	r3, [r7, #23]
}
 802ce74:	4618      	mov	r0, r3
 802ce76:	371c      	adds	r7, #28
 802ce78:	46bd      	mov	sp, r7
 802ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce7e:	4770      	bx	lr

0802ce80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802ce80:	b480      	push	{r7}
 802ce82:	b085      	sub	sp, #20
 802ce84:	af00      	add	r7, sp, #0
 802ce86:	6078      	str	r0, [r7, #4]
 802ce88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ce8a:	687b      	ldr	r3, [r7, #4]
 802ce8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802ce8e:	683b      	ldr	r3, [r7, #0]
 802ce90:	781b      	ldrb	r3, [r3, #0]
 802ce92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802ce94:	683b      	ldr	r3, [r7, #0]
 802ce96:	785b      	ldrb	r3, [r3, #1]
 802ce98:	2b01      	cmp	r3, #1
 802ce9a:	d13a      	bne.n	802cf12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802ce9c:	68fb      	ldr	r3, [r7, #12]
 802ce9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cea2:	69da      	ldr	r2, [r3, #28]
 802cea4:	683b      	ldr	r3, [r7, #0]
 802cea6:	781b      	ldrb	r3, [r3, #0]
 802cea8:	f003 030f 	and.w	r3, r3, #15
 802ceac:	2101      	movs	r1, #1
 802ceae:	fa01 f303 	lsl.w	r3, r1, r3
 802ceb2:	b29b      	uxth	r3, r3
 802ceb4:	68f9      	ldr	r1, [r7, #12]
 802ceb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802ceba:	4313      	orrs	r3, r2
 802cebc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802cebe:	68bb      	ldr	r3, [r7, #8]
 802cec0:	015a      	lsls	r2, r3, #5
 802cec2:	68fb      	ldr	r3, [r7, #12]
 802cec4:	4413      	add	r3, r2
 802cec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ceca:	681b      	ldr	r3, [r3, #0]
 802cecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ced0:	2b00      	cmp	r3, #0
 802ced2:	d155      	bne.n	802cf80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802ced4:	68bb      	ldr	r3, [r7, #8]
 802ced6:	015a      	lsls	r2, r3, #5
 802ced8:	68fb      	ldr	r3, [r7, #12]
 802ceda:	4413      	add	r3, r2
 802cedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cee0:	681a      	ldr	r2, [r3, #0]
 802cee2:	683b      	ldr	r3, [r7, #0]
 802cee4:	68db      	ldr	r3, [r3, #12]
 802cee6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802ceea:	683b      	ldr	r3, [r7, #0]
 802ceec:	791b      	ldrb	r3, [r3, #4]
 802ceee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802cef0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802cef2:	68bb      	ldr	r3, [r7, #8]
 802cef4:	059b      	lsls	r3, r3, #22
 802cef6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802cef8:	4313      	orrs	r3, r2
 802cefa:	68ba      	ldr	r2, [r7, #8]
 802cefc:	0151      	lsls	r1, r2, #5
 802cefe:	68fa      	ldr	r2, [r7, #12]
 802cf00:	440a      	add	r2, r1
 802cf02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cf06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cf0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802cf0e:	6013      	str	r3, [r2, #0]
 802cf10:	e036      	b.n	802cf80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802cf12:	68fb      	ldr	r3, [r7, #12]
 802cf14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802cf18:	69da      	ldr	r2, [r3, #28]
 802cf1a:	683b      	ldr	r3, [r7, #0]
 802cf1c:	781b      	ldrb	r3, [r3, #0]
 802cf1e:	f003 030f 	and.w	r3, r3, #15
 802cf22:	2101      	movs	r1, #1
 802cf24:	fa01 f303 	lsl.w	r3, r1, r3
 802cf28:	041b      	lsls	r3, r3, #16
 802cf2a:	68f9      	ldr	r1, [r7, #12]
 802cf2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802cf30:	4313      	orrs	r3, r2
 802cf32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802cf34:	68bb      	ldr	r3, [r7, #8]
 802cf36:	015a      	lsls	r2, r3, #5
 802cf38:	68fb      	ldr	r3, [r7, #12]
 802cf3a:	4413      	add	r3, r2
 802cf3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cf40:	681b      	ldr	r3, [r3, #0]
 802cf42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802cf46:	2b00      	cmp	r3, #0
 802cf48:	d11a      	bne.n	802cf80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802cf4a:	68bb      	ldr	r3, [r7, #8]
 802cf4c:	015a      	lsls	r2, r3, #5
 802cf4e:	68fb      	ldr	r3, [r7, #12]
 802cf50:	4413      	add	r3, r2
 802cf52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802cf56:	681a      	ldr	r2, [r3, #0]
 802cf58:	683b      	ldr	r3, [r7, #0]
 802cf5a:	68db      	ldr	r3, [r3, #12]
 802cf5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802cf60:	683b      	ldr	r3, [r7, #0]
 802cf62:	791b      	ldrb	r3, [r3, #4]
 802cf64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802cf66:	430b      	orrs	r3, r1
 802cf68:	4313      	orrs	r3, r2
 802cf6a:	68ba      	ldr	r2, [r7, #8]
 802cf6c:	0151      	lsls	r1, r2, #5
 802cf6e:	68fa      	ldr	r2, [r7, #12]
 802cf70:	440a      	add	r2, r1
 802cf72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802cf76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802cf7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802cf7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802cf80:	2300      	movs	r3, #0
}
 802cf82:	4618      	mov	r0, r3
 802cf84:	3714      	adds	r7, #20
 802cf86:	46bd      	mov	sp, r7
 802cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf8c:	4770      	bx	lr
	...

0802cf90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802cf90:	b480      	push	{r7}
 802cf92:	b085      	sub	sp, #20
 802cf94:	af00      	add	r7, sp, #0
 802cf96:	6078      	str	r0, [r7, #4]
 802cf98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802cf9a:	687b      	ldr	r3, [r7, #4]
 802cf9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802cf9e:	683b      	ldr	r3, [r7, #0]
 802cfa0:	781b      	ldrb	r3, [r3, #0]
 802cfa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802cfa4:	683b      	ldr	r3, [r7, #0]
 802cfa6:	785b      	ldrb	r3, [r3, #1]
 802cfa8:	2b01      	cmp	r3, #1
 802cfaa:	d161      	bne.n	802d070 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802cfac:	68bb      	ldr	r3, [r7, #8]
 802cfae:	015a      	lsls	r2, r3, #5
 802cfb0:	68fb      	ldr	r3, [r7, #12]
 802cfb2:	4413      	add	r3, r2
 802cfb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cfb8:	681b      	ldr	r3, [r3, #0]
 802cfba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802cfbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802cfc2:	d11f      	bne.n	802d004 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802cfc4:	68bb      	ldr	r3, [r7, #8]
 802cfc6:	015a      	lsls	r2, r3, #5
 802cfc8:	68fb      	ldr	r3, [r7, #12]
 802cfca:	4413      	add	r3, r2
 802cfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cfd0:	681b      	ldr	r3, [r3, #0]
 802cfd2:	68ba      	ldr	r2, [r7, #8]
 802cfd4:	0151      	lsls	r1, r2, #5
 802cfd6:	68fa      	ldr	r2, [r7, #12]
 802cfd8:	440a      	add	r2, r1
 802cfda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cfde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802cfe2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802cfe4:	68bb      	ldr	r3, [r7, #8]
 802cfe6:	015a      	lsls	r2, r3, #5
 802cfe8:	68fb      	ldr	r3, [r7, #12]
 802cfea:	4413      	add	r3, r2
 802cfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802cff0:	681b      	ldr	r3, [r3, #0]
 802cff2:	68ba      	ldr	r2, [r7, #8]
 802cff4:	0151      	lsls	r1, r2, #5
 802cff6:	68fa      	ldr	r2, [r7, #12]
 802cff8:	440a      	add	r2, r1
 802cffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802cffe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d004:	68fb      	ldr	r3, [r7, #12]
 802d006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d00c:	683b      	ldr	r3, [r7, #0]
 802d00e:	781b      	ldrb	r3, [r3, #0]
 802d010:	f003 030f 	and.w	r3, r3, #15
 802d014:	2101      	movs	r1, #1
 802d016:	fa01 f303 	lsl.w	r3, r1, r3
 802d01a:	b29b      	uxth	r3, r3
 802d01c:	43db      	mvns	r3, r3
 802d01e:	68f9      	ldr	r1, [r7, #12]
 802d020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d024:	4013      	ands	r3, r2
 802d026:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d02e:	69da      	ldr	r2, [r3, #28]
 802d030:	683b      	ldr	r3, [r7, #0]
 802d032:	781b      	ldrb	r3, [r3, #0]
 802d034:	f003 030f 	and.w	r3, r3, #15
 802d038:	2101      	movs	r1, #1
 802d03a:	fa01 f303 	lsl.w	r3, r1, r3
 802d03e:	b29b      	uxth	r3, r3
 802d040:	43db      	mvns	r3, r3
 802d042:	68f9      	ldr	r1, [r7, #12]
 802d044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d048:	4013      	ands	r3, r2
 802d04a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802d04c:	68bb      	ldr	r3, [r7, #8]
 802d04e:	015a      	lsls	r2, r3, #5
 802d050:	68fb      	ldr	r3, [r7, #12]
 802d052:	4413      	add	r3, r2
 802d054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d058:	681a      	ldr	r2, [r3, #0]
 802d05a:	68bb      	ldr	r3, [r7, #8]
 802d05c:	0159      	lsls	r1, r3, #5
 802d05e:	68fb      	ldr	r3, [r7, #12]
 802d060:	440b      	add	r3, r1
 802d062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d066:	4619      	mov	r1, r3
 802d068:	4b35      	ldr	r3, [pc, #212]	; (802d140 <USB_DeactivateEndpoint+0x1b0>)
 802d06a:	4013      	ands	r3, r2
 802d06c:	600b      	str	r3, [r1, #0]
 802d06e:	e060      	b.n	802d132 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d070:	68bb      	ldr	r3, [r7, #8]
 802d072:	015a      	lsls	r2, r3, #5
 802d074:	68fb      	ldr	r3, [r7, #12]
 802d076:	4413      	add	r3, r2
 802d078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d07c:	681b      	ldr	r3, [r3, #0]
 802d07e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d086:	d11f      	bne.n	802d0c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802d088:	68bb      	ldr	r3, [r7, #8]
 802d08a:	015a      	lsls	r2, r3, #5
 802d08c:	68fb      	ldr	r3, [r7, #12]
 802d08e:	4413      	add	r3, r2
 802d090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d094:	681b      	ldr	r3, [r3, #0]
 802d096:	68ba      	ldr	r2, [r7, #8]
 802d098:	0151      	lsls	r1, r2, #5
 802d09a:	68fa      	ldr	r2, [r7, #12]
 802d09c:	440a      	add	r2, r1
 802d09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d0a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d0a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802d0a8:	68bb      	ldr	r3, [r7, #8]
 802d0aa:	015a      	lsls	r2, r3, #5
 802d0ac:	68fb      	ldr	r3, [r7, #12]
 802d0ae:	4413      	add	r3, r2
 802d0b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d0b4:	681b      	ldr	r3, [r3, #0]
 802d0b6:	68ba      	ldr	r2, [r7, #8]
 802d0b8:	0151      	lsls	r1, r2, #5
 802d0ba:	68fa      	ldr	r2, [r7, #12]
 802d0bc:	440a      	add	r2, r1
 802d0be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d0c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d0c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d0c8:	68fb      	ldr	r3, [r7, #12]
 802d0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d0ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d0d0:	683b      	ldr	r3, [r7, #0]
 802d0d2:	781b      	ldrb	r3, [r3, #0]
 802d0d4:	f003 030f 	and.w	r3, r3, #15
 802d0d8:	2101      	movs	r1, #1
 802d0da:	fa01 f303 	lsl.w	r3, r1, r3
 802d0de:	041b      	lsls	r3, r3, #16
 802d0e0:	43db      	mvns	r3, r3
 802d0e2:	68f9      	ldr	r1, [r7, #12]
 802d0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d0e8:	4013      	ands	r3, r2
 802d0ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d0ec:	68fb      	ldr	r3, [r7, #12]
 802d0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d0f2:	69da      	ldr	r2, [r3, #28]
 802d0f4:	683b      	ldr	r3, [r7, #0]
 802d0f6:	781b      	ldrb	r3, [r3, #0]
 802d0f8:	f003 030f 	and.w	r3, r3, #15
 802d0fc:	2101      	movs	r1, #1
 802d0fe:	fa01 f303 	lsl.w	r3, r1, r3
 802d102:	041b      	lsls	r3, r3, #16
 802d104:	43db      	mvns	r3, r3
 802d106:	68f9      	ldr	r1, [r7, #12]
 802d108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d10c:	4013      	ands	r3, r2
 802d10e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802d110:	68bb      	ldr	r3, [r7, #8]
 802d112:	015a      	lsls	r2, r3, #5
 802d114:	68fb      	ldr	r3, [r7, #12]
 802d116:	4413      	add	r3, r2
 802d118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d11c:	681a      	ldr	r2, [r3, #0]
 802d11e:	68bb      	ldr	r3, [r7, #8]
 802d120:	0159      	lsls	r1, r3, #5
 802d122:	68fb      	ldr	r3, [r7, #12]
 802d124:	440b      	add	r3, r1
 802d126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d12a:	4619      	mov	r1, r3
 802d12c:	4b05      	ldr	r3, [pc, #20]	; (802d144 <USB_DeactivateEndpoint+0x1b4>)
 802d12e:	4013      	ands	r3, r2
 802d130:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802d132:	2300      	movs	r3, #0
}
 802d134:	4618      	mov	r0, r3
 802d136:	3714      	adds	r7, #20
 802d138:	46bd      	mov	sp, r7
 802d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d13e:	4770      	bx	lr
 802d140:	ec337800 	.word	0xec337800
 802d144:	eff37800 	.word	0xeff37800

0802d148 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d148:	b580      	push	{r7, lr}
 802d14a:	b08a      	sub	sp, #40	; 0x28
 802d14c:	af02      	add	r7, sp, #8
 802d14e:	60f8      	str	r0, [r7, #12]
 802d150:	60b9      	str	r1, [r7, #8]
 802d152:	4613      	mov	r3, r2
 802d154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d156:	68fb      	ldr	r3, [r7, #12]
 802d158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802d15a:	68bb      	ldr	r3, [r7, #8]
 802d15c:	781b      	ldrb	r3, [r3, #0]
 802d15e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d160:	68bb      	ldr	r3, [r7, #8]
 802d162:	785b      	ldrb	r3, [r3, #1]
 802d164:	2b01      	cmp	r3, #1
 802d166:	f040 815c 	bne.w	802d422 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d16a:	68bb      	ldr	r3, [r7, #8]
 802d16c:	699b      	ldr	r3, [r3, #24]
 802d16e:	2b00      	cmp	r3, #0
 802d170:	d132      	bne.n	802d1d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d172:	69bb      	ldr	r3, [r7, #24]
 802d174:	015a      	lsls	r2, r3, #5
 802d176:	69fb      	ldr	r3, [r7, #28]
 802d178:	4413      	add	r3, r2
 802d17a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d17e:	691b      	ldr	r3, [r3, #16]
 802d180:	69ba      	ldr	r2, [r7, #24]
 802d182:	0151      	lsls	r1, r2, #5
 802d184:	69fa      	ldr	r2, [r7, #28]
 802d186:	440a      	add	r2, r1
 802d188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d18c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d196:	69bb      	ldr	r3, [r7, #24]
 802d198:	015a      	lsls	r2, r3, #5
 802d19a:	69fb      	ldr	r3, [r7, #28]
 802d19c:	4413      	add	r3, r2
 802d19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d1a2:	691b      	ldr	r3, [r3, #16]
 802d1a4:	69ba      	ldr	r2, [r7, #24]
 802d1a6:	0151      	lsls	r1, r2, #5
 802d1a8:	69fa      	ldr	r2, [r7, #28]
 802d1aa:	440a      	add	r2, r1
 802d1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d1b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d1b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d1b6:	69bb      	ldr	r3, [r7, #24]
 802d1b8:	015a      	lsls	r2, r3, #5
 802d1ba:	69fb      	ldr	r3, [r7, #28]
 802d1bc:	4413      	add	r3, r2
 802d1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d1c2:	691b      	ldr	r3, [r3, #16]
 802d1c4:	69ba      	ldr	r2, [r7, #24]
 802d1c6:	0151      	lsls	r1, r2, #5
 802d1c8:	69fa      	ldr	r2, [r7, #28]
 802d1ca:	440a      	add	r2, r1
 802d1cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d1d0:	0cdb      	lsrs	r3, r3, #19
 802d1d2:	04db      	lsls	r3, r3, #19
 802d1d4:	6113      	str	r3, [r2, #16]
 802d1d6:	e074      	b.n	802d2c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d1d8:	69bb      	ldr	r3, [r7, #24]
 802d1da:	015a      	lsls	r2, r3, #5
 802d1dc:	69fb      	ldr	r3, [r7, #28]
 802d1de:	4413      	add	r3, r2
 802d1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d1e4:	691b      	ldr	r3, [r3, #16]
 802d1e6:	69ba      	ldr	r2, [r7, #24]
 802d1e8:	0151      	lsls	r1, r2, #5
 802d1ea:	69fa      	ldr	r2, [r7, #28]
 802d1ec:	440a      	add	r2, r1
 802d1ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d1f2:	0cdb      	lsrs	r3, r3, #19
 802d1f4:	04db      	lsls	r3, r3, #19
 802d1f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d1f8:	69bb      	ldr	r3, [r7, #24]
 802d1fa:	015a      	lsls	r2, r3, #5
 802d1fc:	69fb      	ldr	r3, [r7, #28]
 802d1fe:	4413      	add	r3, r2
 802d200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d204:	691b      	ldr	r3, [r3, #16]
 802d206:	69ba      	ldr	r2, [r7, #24]
 802d208:	0151      	lsls	r1, r2, #5
 802d20a:	69fa      	ldr	r2, [r7, #28]
 802d20c:	440a      	add	r2, r1
 802d20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d212:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d216:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d21a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d21c:	69bb      	ldr	r3, [r7, #24]
 802d21e:	015a      	lsls	r2, r3, #5
 802d220:	69fb      	ldr	r3, [r7, #28]
 802d222:	4413      	add	r3, r2
 802d224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d228:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802d22a:	68bb      	ldr	r3, [r7, #8]
 802d22c:	6999      	ldr	r1, [r3, #24]
 802d22e:	68bb      	ldr	r3, [r7, #8]
 802d230:	68db      	ldr	r3, [r3, #12]
 802d232:	440b      	add	r3, r1
 802d234:	1e59      	subs	r1, r3, #1
 802d236:	68bb      	ldr	r3, [r7, #8]
 802d238:	68db      	ldr	r3, [r3, #12]
 802d23a:	fbb1 f3f3 	udiv	r3, r1, r3
 802d23e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d240:	4b9d      	ldr	r3, [pc, #628]	; (802d4b8 <USB_EPStartXfer+0x370>)
 802d242:	400b      	ands	r3, r1
 802d244:	69b9      	ldr	r1, [r7, #24]
 802d246:	0148      	lsls	r0, r1, #5
 802d248:	69f9      	ldr	r1, [r7, #28]
 802d24a:	4401      	add	r1, r0
 802d24c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d250:	4313      	orrs	r3, r2
 802d252:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d254:	69bb      	ldr	r3, [r7, #24]
 802d256:	015a      	lsls	r2, r3, #5
 802d258:	69fb      	ldr	r3, [r7, #28]
 802d25a:	4413      	add	r3, r2
 802d25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d260:	691a      	ldr	r2, [r3, #16]
 802d262:	68bb      	ldr	r3, [r7, #8]
 802d264:	699b      	ldr	r3, [r3, #24]
 802d266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d26a:	69b9      	ldr	r1, [r7, #24]
 802d26c:	0148      	lsls	r0, r1, #5
 802d26e:	69f9      	ldr	r1, [r7, #28]
 802d270:	4401      	add	r1, r0
 802d272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d276:	4313      	orrs	r3, r2
 802d278:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802d27a:	68bb      	ldr	r3, [r7, #8]
 802d27c:	791b      	ldrb	r3, [r3, #4]
 802d27e:	2b01      	cmp	r3, #1
 802d280:	d11f      	bne.n	802d2c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802d282:	69bb      	ldr	r3, [r7, #24]
 802d284:	015a      	lsls	r2, r3, #5
 802d286:	69fb      	ldr	r3, [r7, #28]
 802d288:	4413      	add	r3, r2
 802d28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d28e:	691b      	ldr	r3, [r3, #16]
 802d290:	69ba      	ldr	r2, [r7, #24]
 802d292:	0151      	lsls	r1, r2, #5
 802d294:	69fa      	ldr	r2, [r7, #28]
 802d296:	440a      	add	r2, r1
 802d298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d29c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802d2a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802d2a2:	69bb      	ldr	r3, [r7, #24]
 802d2a4:	015a      	lsls	r2, r3, #5
 802d2a6:	69fb      	ldr	r3, [r7, #28]
 802d2a8:	4413      	add	r3, r2
 802d2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2ae:	691b      	ldr	r3, [r3, #16]
 802d2b0:	69ba      	ldr	r2, [r7, #24]
 802d2b2:	0151      	lsls	r1, r2, #5
 802d2b4:	69fa      	ldr	r2, [r7, #28]
 802d2b6:	440a      	add	r2, r1
 802d2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d2bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d2c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802d2c2:	79fb      	ldrb	r3, [r7, #7]
 802d2c4:	2b01      	cmp	r3, #1
 802d2c6:	d14b      	bne.n	802d360 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d2c8:	68bb      	ldr	r3, [r7, #8]
 802d2ca:	695b      	ldr	r3, [r3, #20]
 802d2cc:	2b00      	cmp	r3, #0
 802d2ce:	d009      	beq.n	802d2e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d2d0:	69bb      	ldr	r3, [r7, #24]
 802d2d2:	015a      	lsls	r2, r3, #5
 802d2d4:	69fb      	ldr	r3, [r7, #28]
 802d2d6:	4413      	add	r3, r2
 802d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d2dc:	461a      	mov	r2, r3
 802d2de:	68bb      	ldr	r3, [r7, #8]
 802d2e0:	695b      	ldr	r3, [r3, #20]
 802d2e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802d2e4:	68bb      	ldr	r3, [r7, #8]
 802d2e6:	791b      	ldrb	r3, [r3, #4]
 802d2e8:	2b01      	cmp	r3, #1
 802d2ea:	d128      	bne.n	802d33e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d2ec:	69fb      	ldr	r3, [r7, #28]
 802d2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d2f2:	689b      	ldr	r3, [r3, #8]
 802d2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d2f8:	2b00      	cmp	r3, #0
 802d2fa:	d110      	bne.n	802d31e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802d2fc:	69bb      	ldr	r3, [r7, #24]
 802d2fe:	015a      	lsls	r2, r3, #5
 802d300:	69fb      	ldr	r3, [r7, #28]
 802d302:	4413      	add	r3, r2
 802d304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d308:	681b      	ldr	r3, [r3, #0]
 802d30a:	69ba      	ldr	r2, [r7, #24]
 802d30c:	0151      	lsls	r1, r2, #5
 802d30e:	69fa      	ldr	r2, [r7, #28]
 802d310:	440a      	add	r2, r1
 802d312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d31a:	6013      	str	r3, [r2, #0]
 802d31c:	e00f      	b.n	802d33e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802d31e:	69bb      	ldr	r3, [r7, #24]
 802d320:	015a      	lsls	r2, r3, #5
 802d322:	69fb      	ldr	r3, [r7, #28]
 802d324:	4413      	add	r3, r2
 802d326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d32a:	681b      	ldr	r3, [r3, #0]
 802d32c:	69ba      	ldr	r2, [r7, #24]
 802d32e:	0151      	lsls	r1, r2, #5
 802d330:	69fa      	ldr	r2, [r7, #28]
 802d332:	440a      	add	r2, r1
 802d334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d33c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d33e:	69bb      	ldr	r3, [r7, #24]
 802d340:	015a      	lsls	r2, r3, #5
 802d342:	69fb      	ldr	r3, [r7, #28]
 802d344:	4413      	add	r3, r2
 802d346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d34a:	681b      	ldr	r3, [r3, #0]
 802d34c:	69ba      	ldr	r2, [r7, #24]
 802d34e:	0151      	lsls	r1, r2, #5
 802d350:	69fa      	ldr	r2, [r7, #28]
 802d352:	440a      	add	r2, r1
 802d354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d358:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d35c:	6013      	str	r3, [r2, #0]
 802d35e:	e133      	b.n	802d5c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d360:	69bb      	ldr	r3, [r7, #24]
 802d362:	015a      	lsls	r2, r3, #5
 802d364:	69fb      	ldr	r3, [r7, #28]
 802d366:	4413      	add	r3, r2
 802d368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d36c:	681b      	ldr	r3, [r3, #0]
 802d36e:	69ba      	ldr	r2, [r7, #24]
 802d370:	0151      	lsls	r1, r2, #5
 802d372:	69fa      	ldr	r2, [r7, #28]
 802d374:	440a      	add	r2, r1
 802d376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d37a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d37e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802d380:	68bb      	ldr	r3, [r7, #8]
 802d382:	791b      	ldrb	r3, [r3, #4]
 802d384:	2b01      	cmp	r3, #1
 802d386:	d015      	beq.n	802d3b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802d388:	68bb      	ldr	r3, [r7, #8]
 802d38a:	699b      	ldr	r3, [r3, #24]
 802d38c:	2b00      	cmp	r3, #0
 802d38e:	f000 811b 	beq.w	802d5c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802d392:	69fb      	ldr	r3, [r7, #28]
 802d394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802d39a:	68bb      	ldr	r3, [r7, #8]
 802d39c:	781b      	ldrb	r3, [r3, #0]
 802d39e:	f003 030f 	and.w	r3, r3, #15
 802d3a2:	2101      	movs	r1, #1
 802d3a4:	fa01 f303 	lsl.w	r3, r1, r3
 802d3a8:	69f9      	ldr	r1, [r7, #28]
 802d3aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d3ae:	4313      	orrs	r3, r2
 802d3b0:	634b      	str	r3, [r1, #52]	; 0x34
 802d3b2:	e109      	b.n	802d5c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d3b4:	69fb      	ldr	r3, [r7, #28]
 802d3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d3ba:	689b      	ldr	r3, [r3, #8]
 802d3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d3c0:	2b00      	cmp	r3, #0
 802d3c2:	d110      	bne.n	802d3e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802d3c4:	69bb      	ldr	r3, [r7, #24]
 802d3c6:	015a      	lsls	r2, r3, #5
 802d3c8:	69fb      	ldr	r3, [r7, #28]
 802d3ca:	4413      	add	r3, r2
 802d3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d3d0:	681b      	ldr	r3, [r3, #0]
 802d3d2:	69ba      	ldr	r2, [r7, #24]
 802d3d4:	0151      	lsls	r1, r2, #5
 802d3d6:	69fa      	ldr	r2, [r7, #28]
 802d3d8:	440a      	add	r2, r1
 802d3da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d3de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d3e2:	6013      	str	r3, [r2, #0]
 802d3e4:	e00f      	b.n	802d406 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802d3e6:	69bb      	ldr	r3, [r7, #24]
 802d3e8:	015a      	lsls	r2, r3, #5
 802d3ea:	69fb      	ldr	r3, [r7, #28]
 802d3ec:	4413      	add	r3, r2
 802d3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d3f2:	681b      	ldr	r3, [r3, #0]
 802d3f4:	69ba      	ldr	r2, [r7, #24]
 802d3f6:	0151      	lsls	r1, r2, #5
 802d3f8:	69fa      	ldr	r2, [r7, #28]
 802d3fa:	440a      	add	r2, r1
 802d3fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d404:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802d406:	68bb      	ldr	r3, [r7, #8]
 802d408:	6919      	ldr	r1, [r3, #16]
 802d40a:	68bb      	ldr	r3, [r7, #8]
 802d40c:	781a      	ldrb	r2, [r3, #0]
 802d40e:	68bb      	ldr	r3, [r7, #8]
 802d410:	699b      	ldr	r3, [r3, #24]
 802d412:	b298      	uxth	r0, r3
 802d414:	79fb      	ldrb	r3, [r7, #7]
 802d416:	9300      	str	r3, [sp, #0]
 802d418:	4603      	mov	r3, r0
 802d41a:	68f8      	ldr	r0, [r7, #12]
 802d41c:	f000 fade 	bl	802d9dc <USB_WritePacket>
 802d420:	e0d2      	b.n	802d5c8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802d422:	69bb      	ldr	r3, [r7, #24]
 802d424:	015a      	lsls	r2, r3, #5
 802d426:	69fb      	ldr	r3, [r7, #28]
 802d428:	4413      	add	r3, r2
 802d42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d42e:	691b      	ldr	r3, [r3, #16]
 802d430:	69ba      	ldr	r2, [r7, #24]
 802d432:	0151      	lsls	r1, r2, #5
 802d434:	69fa      	ldr	r2, [r7, #28]
 802d436:	440a      	add	r2, r1
 802d438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d43c:	0cdb      	lsrs	r3, r3, #19
 802d43e:	04db      	lsls	r3, r3, #19
 802d440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802d442:	69bb      	ldr	r3, [r7, #24]
 802d444:	015a      	lsls	r2, r3, #5
 802d446:	69fb      	ldr	r3, [r7, #28]
 802d448:	4413      	add	r3, r2
 802d44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d44e:	691b      	ldr	r3, [r3, #16]
 802d450:	69ba      	ldr	r2, [r7, #24]
 802d452:	0151      	lsls	r1, r2, #5
 802d454:	69fa      	ldr	r2, [r7, #28]
 802d456:	440a      	add	r2, r1
 802d458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d45c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d464:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802d466:	68bb      	ldr	r3, [r7, #8]
 802d468:	699b      	ldr	r3, [r3, #24]
 802d46a:	2b00      	cmp	r3, #0
 802d46c:	d126      	bne.n	802d4bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802d46e:	69bb      	ldr	r3, [r7, #24]
 802d470:	015a      	lsls	r2, r3, #5
 802d472:	69fb      	ldr	r3, [r7, #28]
 802d474:	4413      	add	r3, r2
 802d476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d47a:	691a      	ldr	r2, [r3, #16]
 802d47c:	68bb      	ldr	r3, [r7, #8]
 802d47e:	68db      	ldr	r3, [r3, #12]
 802d480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d484:	69b9      	ldr	r1, [r7, #24]
 802d486:	0148      	lsls	r0, r1, #5
 802d488:	69f9      	ldr	r1, [r7, #28]
 802d48a:	4401      	add	r1, r0
 802d48c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d490:	4313      	orrs	r3, r2
 802d492:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802d494:	69bb      	ldr	r3, [r7, #24]
 802d496:	015a      	lsls	r2, r3, #5
 802d498:	69fb      	ldr	r3, [r7, #28]
 802d49a:	4413      	add	r3, r2
 802d49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d4a0:	691b      	ldr	r3, [r3, #16]
 802d4a2:	69ba      	ldr	r2, [r7, #24]
 802d4a4:	0151      	lsls	r1, r2, #5
 802d4a6:	69fa      	ldr	r2, [r7, #28]
 802d4a8:	440a      	add	r2, r1
 802d4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d4ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d4b2:	6113      	str	r3, [r2, #16]
 802d4b4:	e03a      	b.n	802d52c <USB_EPStartXfer+0x3e4>
 802d4b6:	bf00      	nop
 802d4b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802d4bc:	68bb      	ldr	r3, [r7, #8]
 802d4be:	699a      	ldr	r2, [r3, #24]
 802d4c0:	68bb      	ldr	r3, [r7, #8]
 802d4c2:	68db      	ldr	r3, [r3, #12]
 802d4c4:	4413      	add	r3, r2
 802d4c6:	1e5a      	subs	r2, r3, #1
 802d4c8:	68bb      	ldr	r3, [r7, #8]
 802d4ca:	68db      	ldr	r3, [r3, #12]
 802d4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 802d4d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802d4d2:	68bb      	ldr	r3, [r7, #8]
 802d4d4:	68db      	ldr	r3, [r3, #12]
 802d4d6:	8afa      	ldrh	r2, [r7, #22]
 802d4d8:	fb03 f202 	mul.w	r2, r3, r2
 802d4dc:	68bb      	ldr	r3, [r7, #8]
 802d4de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802d4e0:	69bb      	ldr	r3, [r7, #24]
 802d4e2:	015a      	lsls	r2, r3, #5
 802d4e4:	69fb      	ldr	r3, [r7, #28]
 802d4e6:	4413      	add	r3, r2
 802d4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d4ec:	691a      	ldr	r2, [r3, #16]
 802d4ee:	8afb      	ldrh	r3, [r7, #22]
 802d4f0:	04d9      	lsls	r1, r3, #19
 802d4f2:	4b38      	ldr	r3, [pc, #224]	; (802d5d4 <USB_EPStartXfer+0x48c>)
 802d4f4:	400b      	ands	r3, r1
 802d4f6:	69b9      	ldr	r1, [r7, #24]
 802d4f8:	0148      	lsls	r0, r1, #5
 802d4fa:	69f9      	ldr	r1, [r7, #28]
 802d4fc:	4401      	add	r1, r0
 802d4fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d502:	4313      	orrs	r3, r2
 802d504:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802d506:	69bb      	ldr	r3, [r7, #24]
 802d508:	015a      	lsls	r2, r3, #5
 802d50a:	69fb      	ldr	r3, [r7, #28]
 802d50c:	4413      	add	r3, r2
 802d50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d512:	691a      	ldr	r2, [r3, #16]
 802d514:	68bb      	ldr	r3, [r7, #8]
 802d516:	69db      	ldr	r3, [r3, #28]
 802d518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d51c:	69b9      	ldr	r1, [r7, #24]
 802d51e:	0148      	lsls	r0, r1, #5
 802d520:	69f9      	ldr	r1, [r7, #28]
 802d522:	4401      	add	r1, r0
 802d524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d528:	4313      	orrs	r3, r2
 802d52a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802d52c:	79fb      	ldrb	r3, [r7, #7]
 802d52e:	2b01      	cmp	r3, #1
 802d530:	d10d      	bne.n	802d54e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802d532:	68bb      	ldr	r3, [r7, #8]
 802d534:	691b      	ldr	r3, [r3, #16]
 802d536:	2b00      	cmp	r3, #0
 802d538:	d009      	beq.n	802d54e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802d53a:	68bb      	ldr	r3, [r7, #8]
 802d53c:	6919      	ldr	r1, [r3, #16]
 802d53e:	69bb      	ldr	r3, [r7, #24]
 802d540:	015a      	lsls	r2, r3, #5
 802d542:	69fb      	ldr	r3, [r7, #28]
 802d544:	4413      	add	r3, r2
 802d546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d54a:	460a      	mov	r2, r1
 802d54c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802d54e:	68bb      	ldr	r3, [r7, #8]
 802d550:	791b      	ldrb	r3, [r3, #4]
 802d552:	2b01      	cmp	r3, #1
 802d554:	d128      	bne.n	802d5a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d556:	69fb      	ldr	r3, [r7, #28]
 802d558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d55c:	689b      	ldr	r3, [r3, #8]
 802d55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d562:	2b00      	cmp	r3, #0
 802d564:	d110      	bne.n	802d588 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802d566:	69bb      	ldr	r3, [r7, #24]
 802d568:	015a      	lsls	r2, r3, #5
 802d56a:	69fb      	ldr	r3, [r7, #28]
 802d56c:	4413      	add	r3, r2
 802d56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d572:	681b      	ldr	r3, [r3, #0]
 802d574:	69ba      	ldr	r2, [r7, #24]
 802d576:	0151      	lsls	r1, r2, #5
 802d578:	69fa      	ldr	r2, [r7, #28]
 802d57a:	440a      	add	r2, r1
 802d57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d584:	6013      	str	r3, [r2, #0]
 802d586:	e00f      	b.n	802d5a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802d588:	69bb      	ldr	r3, [r7, #24]
 802d58a:	015a      	lsls	r2, r3, #5
 802d58c:	69fb      	ldr	r3, [r7, #28]
 802d58e:	4413      	add	r3, r2
 802d590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d594:	681b      	ldr	r3, [r3, #0]
 802d596:	69ba      	ldr	r2, [r7, #24]
 802d598:	0151      	lsls	r1, r2, #5
 802d59a:	69fa      	ldr	r2, [r7, #28]
 802d59c:	440a      	add	r2, r1
 802d59e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d5a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d5a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802d5a8:	69bb      	ldr	r3, [r7, #24]
 802d5aa:	015a      	lsls	r2, r3, #5
 802d5ac:	69fb      	ldr	r3, [r7, #28]
 802d5ae:	4413      	add	r3, r2
 802d5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5b4:	681b      	ldr	r3, [r3, #0]
 802d5b6:	69ba      	ldr	r2, [r7, #24]
 802d5b8:	0151      	lsls	r1, r2, #5
 802d5ba:	69fa      	ldr	r2, [r7, #28]
 802d5bc:	440a      	add	r2, r1
 802d5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d5c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d5c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d5c8:	2300      	movs	r3, #0
}
 802d5ca:	4618      	mov	r0, r3
 802d5cc:	3720      	adds	r7, #32
 802d5ce:	46bd      	mov	sp, r7
 802d5d0:	bd80      	pop	{r7, pc}
 802d5d2:	bf00      	nop
 802d5d4:	1ff80000 	.word	0x1ff80000

0802d5d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d5d8:	b480      	push	{r7}
 802d5da:	b087      	sub	sp, #28
 802d5dc:	af00      	add	r7, sp, #0
 802d5de:	60f8      	str	r0, [r7, #12]
 802d5e0:	60b9      	str	r1, [r7, #8]
 802d5e2:	4613      	mov	r3, r2
 802d5e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d5e6:	68fb      	ldr	r3, [r7, #12]
 802d5e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802d5ea:	68bb      	ldr	r3, [r7, #8]
 802d5ec:	781b      	ldrb	r3, [r3, #0]
 802d5ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d5f0:	68bb      	ldr	r3, [r7, #8]
 802d5f2:	785b      	ldrb	r3, [r3, #1]
 802d5f4:	2b01      	cmp	r3, #1
 802d5f6:	f040 80ce 	bne.w	802d796 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d5fa:	68bb      	ldr	r3, [r7, #8]
 802d5fc:	699b      	ldr	r3, [r3, #24]
 802d5fe:	2b00      	cmp	r3, #0
 802d600:	d132      	bne.n	802d668 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d602:	693b      	ldr	r3, [r7, #16]
 802d604:	015a      	lsls	r2, r3, #5
 802d606:	697b      	ldr	r3, [r7, #20]
 802d608:	4413      	add	r3, r2
 802d60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d60e:	691b      	ldr	r3, [r3, #16]
 802d610:	693a      	ldr	r2, [r7, #16]
 802d612:	0151      	lsls	r1, r2, #5
 802d614:	697a      	ldr	r2, [r7, #20]
 802d616:	440a      	add	r2, r1
 802d618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d61c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d626:	693b      	ldr	r3, [r7, #16]
 802d628:	015a      	lsls	r2, r3, #5
 802d62a:	697b      	ldr	r3, [r7, #20]
 802d62c:	4413      	add	r3, r2
 802d62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d632:	691b      	ldr	r3, [r3, #16]
 802d634:	693a      	ldr	r2, [r7, #16]
 802d636:	0151      	lsls	r1, r2, #5
 802d638:	697a      	ldr	r2, [r7, #20]
 802d63a:	440a      	add	r2, r1
 802d63c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d646:	693b      	ldr	r3, [r7, #16]
 802d648:	015a      	lsls	r2, r3, #5
 802d64a:	697b      	ldr	r3, [r7, #20]
 802d64c:	4413      	add	r3, r2
 802d64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d652:	691b      	ldr	r3, [r3, #16]
 802d654:	693a      	ldr	r2, [r7, #16]
 802d656:	0151      	lsls	r1, r2, #5
 802d658:	697a      	ldr	r2, [r7, #20]
 802d65a:	440a      	add	r2, r1
 802d65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d660:	0cdb      	lsrs	r3, r3, #19
 802d662:	04db      	lsls	r3, r3, #19
 802d664:	6113      	str	r3, [r2, #16]
 802d666:	e04e      	b.n	802d706 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d668:	693b      	ldr	r3, [r7, #16]
 802d66a:	015a      	lsls	r2, r3, #5
 802d66c:	697b      	ldr	r3, [r7, #20]
 802d66e:	4413      	add	r3, r2
 802d670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d674:	691b      	ldr	r3, [r3, #16]
 802d676:	693a      	ldr	r2, [r7, #16]
 802d678:	0151      	lsls	r1, r2, #5
 802d67a:	697a      	ldr	r2, [r7, #20]
 802d67c:	440a      	add	r2, r1
 802d67e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d682:	0cdb      	lsrs	r3, r3, #19
 802d684:	04db      	lsls	r3, r3, #19
 802d686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d688:	693b      	ldr	r3, [r7, #16]
 802d68a:	015a      	lsls	r2, r3, #5
 802d68c:	697b      	ldr	r3, [r7, #20]
 802d68e:	4413      	add	r3, r2
 802d690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d694:	691b      	ldr	r3, [r3, #16]
 802d696:	693a      	ldr	r2, [r7, #16]
 802d698:	0151      	lsls	r1, r2, #5
 802d69a:	697a      	ldr	r2, [r7, #20]
 802d69c:	440a      	add	r2, r1
 802d69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d6a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d6a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d6aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802d6ac:	68bb      	ldr	r3, [r7, #8]
 802d6ae:	699a      	ldr	r2, [r3, #24]
 802d6b0:	68bb      	ldr	r3, [r7, #8]
 802d6b2:	68db      	ldr	r3, [r3, #12]
 802d6b4:	429a      	cmp	r2, r3
 802d6b6:	d903      	bls.n	802d6c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802d6b8:	68bb      	ldr	r3, [r7, #8]
 802d6ba:	68da      	ldr	r2, [r3, #12]
 802d6bc:	68bb      	ldr	r3, [r7, #8]
 802d6be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d6c0:	693b      	ldr	r3, [r7, #16]
 802d6c2:	015a      	lsls	r2, r3, #5
 802d6c4:	697b      	ldr	r3, [r7, #20]
 802d6c6:	4413      	add	r3, r2
 802d6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6cc:	691b      	ldr	r3, [r3, #16]
 802d6ce:	693a      	ldr	r2, [r7, #16]
 802d6d0:	0151      	lsls	r1, r2, #5
 802d6d2:	697a      	ldr	r2, [r7, #20]
 802d6d4:	440a      	add	r2, r1
 802d6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d6da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d6de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d6e0:	693b      	ldr	r3, [r7, #16]
 802d6e2:	015a      	lsls	r2, r3, #5
 802d6e4:	697b      	ldr	r3, [r7, #20]
 802d6e6:	4413      	add	r3, r2
 802d6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6ec:	691a      	ldr	r2, [r3, #16]
 802d6ee:	68bb      	ldr	r3, [r7, #8]
 802d6f0:	699b      	ldr	r3, [r3, #24]
 802d6f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d6f6:	6939      	ldr	r1, [r7, #16]
 802d6f8:	0148      	lsls	r0, r1, #5
 802d6fa:	6979      	ldr	r1, [r7, #20]
 802d6fc:	4401      	add	r1, r0
 802d6fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d702:	4313      	orrs	r3, r2
 802d704:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802d706:	79fb      	ldrb	r3, [r7, #7]
 802d708:	2b01      	cmp	r3, #1
 802d70a:	d11e      	bne.n	802d74a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d70c:	68bb      	ldr	r3, [r7, #8]
 802d70e:	695b      	ldr	r3, [r3, #20]
 802d710:	2b00      	cmp	r3, #0
 802d712:	d009      	beq.n	802d728 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d714:	693b      	ldr	r3, [r7, #16]
 802d716:	015a      	lsls	r2, r3, #5
 802d718:	697b      	ldr	r3, [r7, #20]
 802d71a:	4413      	add	r3, r2
 802d71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d720:	461a      	mov	r2, r3
 802d722:	68bb      	ldr	r3, [r7, #8]
 802d724:	695b      	ldr	r3, [r3, #20]
 802d726:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d728:	693b      	ldr	r3, [r7, #16]
 802d72a:	015a      	lsls	r2, r3, #5
 802d72c:	697b      	ldr	r3, [r7, #20]
 802d72e:	4413      	add	r3, r2
 802d730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d734:	681b      	ldr	r3, [r3, #0]
 802d736:	693a      	ldr	r2, [r7, #16]
 802d738:	0151      	lsls	r1, r2, #5
 802d73a:	697a      	ldr	r2, [r7, #20]
 802d73c:	440a      	add	r2, r1
 802d73e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d742:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d746:	6013      	str	r3, [r2, #0]
 802d748:	e097      	b.n	802d87a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d74a:	693b      	ldr	r3, [r7, #16]
 802d74c:	015a      	lsls	r2, r3, #5
 802d74e:	697b      	ldr	r3, [r7, #20]
 802d750:	4413      	add	r3, r2
 802d752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d756:	681b      	ldr	r3, [r3, #0]
 802d758:	693a      	ldr	r2, [r7, #16]
 802d75a:	0151      	lsls	r1, r2, #5
 802d75c:	697a      	ldr	r2, [r7, #20]
 802d75e:	440a      	add	r2, r1
 802d760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d764:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d768:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802d76a:	68bb      	ldr	r3, [r7, #8]
 802d76c:	699b      	ldr	r3, [r3, #24]
 802d76e:	2b00      	cmp	r3, #0
 802d770:	f000 8083 	beq.w	802d87a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802d774:	697b      	ldr	r3, [r7, #20]
 802d776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d77a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802d77c:	68bb      	ldr	r3, [r7, #8]
 802d77e:	781b      	ldrb	r3, [r3, #0]
 802d780:	f003 030f 	and.w	r3, r3, #15
 802d784:	2101      	movs	r1, #1
 802d786:	fa01 f303 	lsl.w	r3, r1, r3
 802d78a:	6979      	ldr	r1, [r7, #20]
 802d78c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d790:	4313      	orrs	r3, r2
 802d792:	634b      	str	r3, [r1, #52]	; 0x34
 802d794:	e071      	b.n	802d87a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802d796:	693b      	ldr	r3, [r7, #16]
 802d798:	015a      	lsls	r2, r3, #5
 802d79a:	697b      	ldr	r3, [r7, #20]
 802d79c:	4413      	add	r3, r2
 802d79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d7a2:	691b      	ldr	r3, [r3, #16]
 802d7a4:	693a      	ldr	r2, [r7, #16]
 802d7a6:	0151      	lsls	r1, r2, #5
 802d7a8:	697a      	ldr	r2, [r7, #20]
 802d7aa:	440a      	add	r2, r1
 802d7ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d7b0:	0cdb      	lsrs	r3, r3, #19
 802d7b2:	04db      	lsls	r3, r3, #19
 802d7b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802d7b6:	693b      	ldr	r3, [r7, #16]
 802d7b8:	015a      	lsls	r2, r3, #5
 802d7ba:	697b      	ldr	r3, [r7, #20]
 802d7bc:	4413      	add	r3, r2
 802d7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d7c2:	691b      	ldr	r3, [r3, #16]
 802d7c4:	693a      	ldr	r2, [r7, #16]
 802d7c6:	0151      	lsls	r1, r2, #5
 802d7c8:	697a      	ldr	r2, [r7, #20]
 802d7ca:	440a      	add	r2, r1
 802d7cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d7d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d7d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d7d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802d7da:	68bb      	ldr	r3, [r7, #8]
 802d7dc:	699b      	ldr	r3, [r3, #24]
 802d7de:	2b00      	cmp	r3, #0
 802d7e0:	d003      	beq.n	802d7ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802d7e2:	68bb      	ldr	r3, [r7, #8]
 802d7e4:	68da      	ldr	r2, [r3, #12]
 802d7e6:	68bb      	ldr	r3, [r7, #8]
 802d7e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 802d7ea:	68bb      	ldr	r3, [r7, #8]
 802d7ec:	68da      	ldr	r2, [r3, #12]
 802d7ee:	68bb      	ldr	r3, [r7, #8]
 802d7f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802d7f2:	693b      	ldr	r3, [r7, #16]
 802d7f4:	015a      	lsls	r2, r3, #5
 802d7f6:	697b      	ldr	r3, [r7, #20]
 802d7f8:	4413      	add	r3, r2
 802d7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d7fe:	691b      	ldr	r3, [r3, #16]
 802d800:	693a      	ldr	r2, [r7, #16]
 802d802:	0151      	lsls	r1, r2, #5
 802d804:	697a      	ldr	r2, [r7, #20]
 802d806:	440a      	add	r2, r1
 802d808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d80c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802d812:	693b      	ldr	r3, [r7, #16]
 802d814:	015a      	lsls	r2, r3, #5
 802d816:	697b      	ldr	r3, [r7, #20]
 802d818:	4413      	add	r3, r2
 802d81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d81e:	691a      	ldr	r2, [r3, #16]
 802d820:	68bb      	ldr	r3, [r7, #8]
 802d822:	69db      	ldr	r3, [r3, #28]
 802d824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d828:	6939      	ldr	r1, [r7, #16]
 802d82a:	0148      	lsls	r0, r1, #5
 802d82c:	6979      	ldr	r1, [r7, #20]
 802d82e:	4401      	add	r1, r0
 802d830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802d834:	4313      	orrs	r3, r2
 802d836:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802d838:	79fb      	ldrb	r3, [r7, #7]
 802d83a:	2b01      	cmp	r3, #1
 802d83c:	d10d      	bne.n	802d85a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802d83e:	68bb      	ldr	r3, [r7, #8]
 802d840:	691b      	ldr	r3, [r3, #16]
 802d842:	2b00      	cmp	r3, #0
 802d844:	d009      	beq.n	802d85a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802d846:	68bb      	ldr	r3, [r7, #8]
 802d848:	6919      	ldr	r1, [r3, #16]
 802d84a:	693b      	ldr	r3, [r7, #16]
 802d84c:	015a      	lsls	r2, r3, #5
 802d84e:	697b      	ldr	r3, [r7, #20]
 802d850:	4413      	add	r3, r2
 802d852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d856:	460a      	mov	r2, r1
 802d858:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802d85a:	693b      	ldr	r3, [r7, #16]
 802d85c:	015a      	lsls	r2, r3, #5
 802d85e:	697b      	ldr	r3, [r7, #20]
 802d860:	4413      	add	r3, r2
 802d862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d866:	681b      	ldr	r3, [r3, #0]
 802d868:	693a      	ldr	r2, [r7, #16]
 802d86a:	0151      	lsls	r1, r2, #5
 802d86c:	697a      	ldr	r2, [r7, #20]
 802d86e:	440a      	add	r2, r1
 802d870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d878:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802d87a:	2300      	movs	r3, #0
}
 802d87c:	4618      	mov	r0, r3
 802d87e:	371c      	adds	r7, #28
 802d880:	46bd      	mov	sp, r7
 802d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d886:	4770      	bx	lr

0802d888 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d888:	b480      	push	{r7}
 802d88a:	b087      	sub	sp, #28
 802d88c:	af00      	add	r7, sp, #0
 802d88e:	6078      	str	r0, [r7, #4]
 802d890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802d892:	2300      	movs	r3, #0
 802d894:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802d896:	2300      	movs	r3, #0
 802d898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d89a:	687b      	ldr	r3, [r7, #4]
 802d89c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d89e:	683b      	ldr	r3, [r7, #0]
 802d8a0:	785b      	ldrb	r3, [r3, #1]
 802d8a2:	2b01      	cmp	r3, #1
 802d8a4:	d14a      	bne.n	802d93c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d8a6:	683b      	ldr	r3, [r7, #0]
 802d8a8:	781b      	ldrb	r3, [r3, #0]
 802d8aa:	015a      	lsls	r2, r3, #5
 802d8ac:	693b      	ldr	r3, [r7, #16]
 802d8ae:	4413      	add	r3, r2
 802d8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8b4:	681b      	ldr	r3, [r3, #0]
 802d8b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d8ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d8be:	f040 8086 	bne.w	802d9ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 802d8c2:	683b      	ldr	r3, [r7, #0]
 802d8c4:	781b      	ldrb	r3, [r3, #0]
 802d8c6:	015a      	lsls	r2, r3, #5
 802d8c8:	693b      	ldr	r3, [r7, #16]
 802d8ca:	4413      	add	r3, r2
 802d8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8d0:	681b      	ldr	r3, [r3, #0]
 802d8d2:	683a      	ldr	r2, [r7, #0]
 802d8d4:	7812      	ldrb	r2, [r2, #0]
 802d8d6:	0151      	lsls	r1, r2, #5
 802d8d8:	693a      	ldr	r2, [r7, #16]
 802d8da:	440a      	add	r2, r1
 802d8dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d8e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d8e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802d8e6:	683b      	ldr	r3, [r7, #0]
 802d8e8:	781b      	ldrb	r3, [r3, #0]
 802d8ea:	015a      	lsls	r2, r3, #5
 802d8ec:	693b      	ldr	r3, [r7, #16]
 802d8ee:	4413      	add	r3, r2
 802d8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8f4:	681b      	ldr	r3, [r3, #0]
 802d8f6:	683a      	ldr	r2, [r7, #0]
 802d8f8:	7812      	ldrb	r2, [r2, #0]
 802d8fa:	0151      	lsls	r1, r2, #5
 802d8fc:	693a      	ldr	r2, [r7, #16]
 802d8fe:	440a      	add	r2, r1
 802d900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d908:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802d90a:	68fb      	ldr	r3, [r7, #12]
 802d90c:	3301      	adds	r3, #1
 802d90e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802d910:	68fb      	ldr	r3, [r7, #12]
 802d912:	f242 7210 	movw	r2, #10000	; 0x2710
 802d916:	4293      	cmp	r3, r2
 802d918:	d902      	bls.n	802d920 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 802d91a:	2301      	movs	r3, #1
 802d91c:	75fb      	strb	r3, [r7, #23]
          break;
 802d91e:	e056      	b.n	802d9ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 802d920:	683b      	ldr	r3, [r7, #0]
 802d922:	781b      	ldrb	r3, [r3, #0]
 802d924:	015a      	lsls	r2, r3, #5
 802d926:	693b      	ldr	r3, [r7, #16]
 802d928:	4413      	add	r3, r2
 802d92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d92e:	681b      	ldr	r3, [r3, #0]
 802d930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d938:	d0e7      	beq.n	802d90a <USB_EPStopXfer+0x82>
 802d93a:	e048      	b.n	802d9ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d93c:	683b      	ldr	r3, [r7, #0]
 802d93e:	781b      	ldrb	r3, [r3, #0]
 802d940:	015a      	lsls	r2, r3, #5
 802d942:	693b      	ldr	r3, [r7, #16]
 802d944:	4413      	add	r3, r2
 802d946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d94a:	681b      	ldr	r3, [r3, #0]
 802d94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d954:	d13b      	bne.n	802d9ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802d956:	683b      	ldr	r3, [r7, #0]
 802d958:	781b      	ldrb	r3, [r3, #0]
 802d95a:	015a      	lsls	r2, r3, #5
 802d95c:	693b      	ldr	r3, [r7, #16]
 802d95e:	4413      	add	r3, r2
 802d960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d964:	681b      	ldr	r3, [r3, #0]
 802d966:	683a      	ldr	r2, [r7, #0]
 802d968:	7812      	ldrb	r2, [r2, #0]
 802d96a:	0151      	lsls	r1, r2, #5
 802d96c:	693a      	ldr	r2, [r7, #16]
 802d96e:	440a      	add	r2, r1
 802d970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d974:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d978:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802d97a:	683b      	ldr	r3, [r7, #0]
 802d97c:	781b      	ldrb	r3, [r3, #0]
 802d97e:	015a      	lsls	r2, r3, #5
 802d980:	693b      	ldr	r3, [r7, #16]
 802d982:	4413      	add	r3, r2
 802d984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d988:	681b      	ldr	r3, [r3, #0]
 802d98a:	683a      	ldr	r2, [r7, #0]
 802d98c:	7812      	ldrb	r2, [r2, #0]
 802d98e:	0151      	lsls	r1, r2, #5
 802d990:	693a      	ldr	r2, [r7, #16]
 802d992:	440a      	add	r2, r1
 802d994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d99c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802d99e:	68fb      	ldr	r3, [r7, #12]
 802d9a0:	3301      	adds	r3, #1
 802d9a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802d9a4:	68fb      	ldr	r3, [r7, #12]
 802d9a6:	f242 7210 	movw	r2, #10000	; 0x2710
 802d9aa:	4293      	cmp	r3, r2
 802d9ac:	d902      	bls.n	802d9b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 802d9ae:	2301      	movs	r3, #1
 802d9b0:	75fb      	strb	r3, [r7, #23]
          break;
 802d9b2:	e00c      	b.n	802d9ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 802d9b4:	683b      	ldr	r3, [r7, #0]
 802d9b6:	781b      	ldrb	r3, [r3, #0]
 802d9b8:	015a      	lsls	r2, r3, #5
 802d9ba:	693b      	ldr	r3, [r7, #16]
 802d9bc:	4413      	add	r3, r2
 802d9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d9c2:	681b      	ldr	r3, [r3, #0]
 802d9c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d9c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d9cc:	d0e7      	beq.n	802d99e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 802d9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 802d9d0:	4618      	mov	r0, r3
 802d9d2:	371c      	adds	r7, #28
 802d9d4:	46bd      	mov	sp, r7
 802d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d9da:	4770      	bx	lr

0802d9dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802d9dc:	b480      	push	{r7}
 802d9de:	b089      	sub	sp, #36	; 0x24
 802d9e0:	af00      	add	r7, sp, #0
 802d9e2:	60f8      	str	r0, [r7, #12]
 802d9e4:	60b9      	str	r1, [r7, #8]
 802d9e6:	4611      	mov	r1, r2
 802d9e8:	461a      	mov	r2, r3
 802d9ea:	460b      	mov	r3, r1
 802d9ec:	71fb      	strb	r3, [r7, #7]
 802d9ee:	4613      	mov	r3, r2
 802d9f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d9f2:	68fb      	ldr	r3, [r7, #12]
 802d9f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802d9f6:	68bb      	ldr	r3, [r7, #8]
 802d9f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802d9fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802d9fe:	2b00      	cmp	r3, #0
 802da00:	d123      	bne.n	802da4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802da02:	88bb      	ldrh	r3, [r7, #4]
 802da04:	3303      	adds	r3, #3
 802da06:	089b      	lsrs	r3, r3, #2
 802da08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802da0a:	2300      	movs	r3, #0
 802da0c:	61bb      	str	r3, [r7, #24]
 802da0e:	e018      	b.n	802da42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802da10:	79fb      	ldrb	r3, [r7, #7]
 802da12:	031a      	lsls	r2, r3, #12
 802da14:	697b      	ldr	r3, [r7, #20]
 802da16:	4413      	add	r3, r2
 802da18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802da1c:	461a      	mov	r2, r3
 802da1e:	69fb      	ldr	r3, [r7, #28]
 802da20:	681b      	ldr	r3, [r3, #0]
 802da22:	6013      	str	r3, [r2, #0]
      pSrc++;
 802da24:	69fb      	ldr	r3, [r7, #28]
 802da26:	3301      	adds	r3, #1
 802da28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802da2a:	69fb      	ldr	r3, [r7, #28]
 802da2c:	3301      	adds	r3, #1
 802da2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802da30:	69fb      	ldr	r3, [r7, #28]
 802da32:	3301      	adds	r3, #1
 802da34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802da36:	69fb      	ldr	r3, [r7, #28]
 802da38:	3301      	adds	r3, #1
 802da3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802da3c:	69bb      	ldr	r3, [r7, #24]
 802da3e:	3301      	adds	r3, #1
 802da40:	61bb      	str	r3, [r7, #24]
 802da42:	69ba      	ldr	r2, [r7, #24]
 802da44:	693b      	ldr	r3, [r7, #16]
 802da46:	429a      	cmp	r2, r3
 802da48:	d3e2      	bcc.n	802da10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802da4a:	2300      	movs	r3, #0
}
 802da4c:	4618      	mov	r0, r3
 802da4e:	3724      	adds	r7, #36	; 0x24
 802da50:	46bd      	mov	sp, r7
 802da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da56:	4770      	bx	lr

0802da58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802da58:	b480      	push	{r7}
 802da5a:	b08b      	sub	sp, #44	; 0x2c
 802da5c:	af00      	add	r7, sp, #0
 802da5e:	60f8      	str	r0, [r7, #12]
 802da60:	60b9      	str	r1, [r7, #8]
 802da62:	4613      	mov	r3, r2
 802da64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802da66:	68fb      	ldr	r3, [r7, #12]
 802da68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802da6a:	68bb      	ldr	r3, [r7, #8]
 802da6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802da6e:	88fb      	ldrh	r3, [r7, #6]
 802da70:	089b      	lsrs	r3, r3, #2
 802da72:	b29b      	uxth	r3, r3
 802da74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802da76:	88fb      	ldrh	r3, [r7, #6]
 802da78:	f003 0303 	and.w	r3, r3, #3
 802da7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802da7e:	2300      	movs	r3, #0
 802da80:	623b      	str	r3, [r7, #32]
 802da82:	e014      	b.n	802daae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802da84:	69bb      	ldr	r3, [r7, #24]
 802da86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802da8a:	681a      	ldr	r2, [r3, #0]
 802da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da8e:	601a      	str	r2, [r3, #0]
    pDest++;
 802da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da92:	3301      	adds	r3, #1
 802da94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da98:	3301      	adds	r3, #1
 802da9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802da9e:	3301      	adds	r3, #1
 802daa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802daa4:	3301      	adds	r3, #1
 802daa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802daa8:	6a3b      	ldr	r3, [r7, #32]
 802daaa:	3301      	adds	r3, #1
 802daac:	623b      	str	r3, [r7, #32]
 802daae:	6a3a      	ldr	r2, [r7, #32]
 802dab0:	697b      	ldr	r3, [r7, #20]
 802dab2:	429a      	cmp	r2, r3
 802dab4:	d3e6      	bcc.n	802da84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802dab6:	8bfb      	ldrh	r3, [r7, #30]
 802dab8:	2b00      	cmp	r3, #0
 802daba:	d01e      	beq.n	802dafa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802dabc:	2300      	movs	r3, #0
 802dabe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802dac0:	69bb      	ldr	r3, [r7, #24]
 802dac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802dac6:	461a      	mov	r2, r3
 802dac8:	f107 0310 	add.w	r3, r7, #16
 802dacc:	6812      	ldr	r2, [r2, #0]
 802dace:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802dad0:	693a      	ldr	r2, [r7, #16]
 802dad2:	6a3b      	ldr	r3, [r7, #32]
 802dad4:	b2db      	uxtb	r3, r3
 802dad6:	00db      	lsls	r3, r3, #3
 802dad8:	fa22 f303 	lsr.w	r3, r2, r3
 802dadc:	b2da      	uxtb	r2, r3
 802dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802dae0:	701a      	strb	r2, [r3, #0]
      i++;
 802dae2:	6a3b      	ldr	r3, [r7, #32]
 802dae4:	3301      	adds	r3, #1
 802dae6:	623b      	str	r3, [r7, #32]
      pDest++;
 802dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802daea:	3301      	adds	r3, #1
 802daec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802daee:	8bfb      	ldrh	r3, [r7, #30]
 802daf0:	3b01      	subs	r3, #1
 802daf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802daf4:	8bfb      	ldrh	r3, [r7, #30]
 802daf6:	2b00      	cmp	r3, #0
 802daf8:	d1ea      	bne.n	802dad0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802dafc:	4618      	mov	r0, r3
 802dafe:	372c      	adds	r7, #44	; 0x2c
 802db00:	46bd      	mov	sp, r7
 802db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db06:	4770      	bx	lr

0802db08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802db08:	b480      	push	{r7}
 802db0a:	b085      	sub	sp, #20
 802db0c:	af00      	add	r7, sp, #0
 802db0e:	6078      	str	r0, [r7, #4]
 802db10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802db12:	687b      	ldr	r3, [r7, #4]
 802db14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802db16:	683b      	ldr	r3, [r7, #0]
 802db18:	781b      	ldrb	r3, [r3, #0]
 802db1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802db1c:	683b      	ldr	r3, [r7, #0]
 802db1e:	785b      	ldrb	r3, [r3, #1]
 802db20:	2b01      	cmp	r3, #1
 802db22:	d12c      	bne.n	802db7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802db24:	68bb      	ldr	r3, [r7, #8]
 802db26:	015a      	lsls	r2, r3, #5
 802db28:	68fb      	ldr	r3, [r7, #12]
 802db2a:	4413      	add	r3, r2
 802db2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802db30:	681b      	ldr	r3, [r3, #0]
 802db32:	2b00      	cmp	r3, #0
 802db34:	db12      	blt.n	802db5c <USB_EPSetStall+0x54>
 802db36:	68bb      	ldr	r3, [r7, #8]
 802db38:	2b00      	cmp	r3, #0
 802db3a:	d00f      	beq.n	802db5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802db3c:	68bb      	ldr	r3, [r7, #8]
 802db3e:	015a      	lsls	r2, r3, #5
 802db40:	68fb      	ldr	r3, [r7, #12]
 802db42:	4413      	add	r3, r2
 802db44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802db48:	681b      	ldr	r3, [r3, #0]
 802db4a:	68ba      	ldr	r2, [r7, #8]
 802db4c:	0151      	lsls	r1, r2, #5
 802db4e:	68fa      	ldr	r2, [r7, #12]
 802db50:	440a      	add	r2, r1
 802db52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802db56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802db5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802db5c:	68bb      	ldr	r3, [r7, #8]
 802db5e:	015a      	lsls	r2, r3, #5
 802db60:	68fb      	ldr	r3, [r7, #12]
 802db62:	4413      	add	r3, r2
 802db64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802db68:	681b      	ldr	r3, [r3, #0]
 802db6a:	68ba      	ldr	r2, [r7, #8]
 802db6c:	0151      	lsls	r1, r2, #5
 802db6e:	68fa      	ldr	r2, [r7, #12]
 802db70:	440a      	add	r2, r1
 802db72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802db76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802db7a:	6013      	str	r3, [r2, #0]
 802db7c:	e02b      	b.n	802dbd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802db7e:	68bb      	ldr	r3, [r7, #8]
 802db80:	015a      	lsls	r2, r3, #5
 802db82:	68fb      	ldr	r3, [r7, #12]
 802db84:	4413      	add	r3, r2
 802db86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db8a:	681b      	ldr	r3, [r3, #0]
 802db8c:	2b00      	cmp	r3, #0
 802db8e:	db12      	blt.n	802dbb6 <USB_EPSetStall+0xae>
 802db90:	68bb      	ldr	r3, [r7, #8]
 802db92:	2b00      	cmp	r3, #0
 802db94:	d00f      	beq.n	802dbb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802db96:	68bb      	ldr	r3, [r7, #8]
 802db98:	015a      	lsls	r2, r3, #5
 802db9a:	68fb      	ldr	r3, [r7, #12]
 802db9c:	4413      	add	r3, r2
 802db9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dba2:	681b      	ldr	r3, [r3, #0]
 802dba4:	68ba      	ldr	r2, [r7, #8]
 802dba6:	0151      	lsls	r1, r2, #5
 802dba8:	68fa      	ldr	r2, [r7, #12]
 802dbaa:	440a      	add	r2, r1
 802dbac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dbb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802dbb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802dbb6:	68bb      	ldr	r3, [r7, #8]
 802dbb8:	015a      	lsls	r2, r3, #5
 802dbba:	68fb      	ldr	r3, [r7, #12]
 802dbbc:	4413      	add	r3, r2
 802dbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbc2:	681b      	ldr	r3, [r3, #0]
 802dbc4:	68ba      	ldr	r2, [r7, #8]
 802dbc6:	0151      	lsls	r1, r2, #5
 802dbc8:	68fa      	ldr	r2, [r7, #12]
 802dbca:	440a      	add	r2, r1
 802dbcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dbd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802dbd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802dbd6:	2300      	movs	r3, #0
}
 802dbd8:	4618      	mov	r0, r3
 802dbda:	3714      	adds	r7, #20
 802dbdc:	46bd      	mov	sp, r7
 802dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dbe2:	4770      	bx	lr

0802dbe4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802dbe4:	b480      	push	{r7}
 802dbe6:	b085      	sub	sp, #20
 802dbe8:	af00      	add	r7, sp, #0
 802dbea:	6078      	str	r0, [r7, #4]
 802dbec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dbee:	687b      	ldr	r3, [r7, #4]
 802dbf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802dbf2:	683b      	ldr	r3, [r7, #0]
 802dbf4:	781b      	ldrb	r3, [r3, #0]
 802dbf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802dbf8:	683b      	ldr	r3, [r7, #0]
 802dbfa:	785b      	ldrb	r3, [r3, #1]
 802dbfc:	2b01      	cmp	r3, #1
 802dbfe:	d128      	bne.n	802dc52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802dc00:	68bb      	ldr	r3, [r7, #8]
 802dc02:	015a      	lsls	r2, r3, #5
 802dc04:	68fb      	ldr	r3, [r7, #12]
 802dc06:	4413      	add	r3, r2
 802dc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dc0c:	681b      	ldr	r3, [r3, #0]
 802dc0e:	68ba      	ldr	r2, [r7, #8]
 802dc10:	0151      	lsls	r1, r2, #5
 802dc12:	68fa      	ldr	r2, [r7, #12]
 802dc14:	440a      	add	r2, r1
 802dc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dc1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802dc1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802dc20:	683b      	ldr	r3, [r7, #0]
 802dc22:	791b      	ldrb	r3, [r3, #4]
 802dc24:	2b03      	cmp	r3, #3
 802dc26:	d003      	beq.n	802dc30 <USB_EPClearStall+0x4c>
 802dc28:	683b      	ldr	r3, [r7, #0]
 802dc2a:	791b      	ldrb	r3, [r3, #4]
 802dc2c:	2b02      	cmp	r3, #2
 802dc2e:	d138      	bne.n	802dca2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802dc30:	68bb      	ldr	r3, [r7, #8]
 802dc32:	015a      	lsls	r2, r3, #5
 802dc34:	68fb      	ldr	r3, [r7, #12]
 802dc36:	4413      	add	r3, r2
 802dc38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dc3c:	681b      	ldr	r3, [r3, #0]
 802dc3e:	68ba      	ldr	r2, [r7, #8]
 802dc40:	0151      	lsls	r1, r2, #5
 802dc42:	68fa      	ldr	r2, [r7, #12]
 802dc44:	440a      	add	r2, r1
 802dc46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dc4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dc4e:	6013      	str	r3, [r2, #0]
 802dc50:	e027      	b.n	802dca2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802dc52:	68bb      	ldr	r3, [r7, #8]
 802dc54:	015a      	lsls	r2, r3, #5
 802dc56:	68fb      	ldr	r3, [r7, #12]
 802dc58:	4413      	add	r3, r2
 802dc5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc5e:	681b      	ldr	r3, [r3, #0]
 802dc60:	68ba      	ldr	r2, [r7, #8]
 802dc62:	0151      	lsls	r1, r2, #5
 802dc64:	68fa      	ldr	r2, [r7, #12]
 802dc66:	440a      	add	r2, r1
 802dc68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802dc70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802dc72:	683b      	ldr	r3, [r7, #0]
 802dc74:	791b      	ldrb	r3, [r3, #4]
 802dc76:	2b03      	cmp	r3, #3
 802dc78:	d003      	beq.n	802dc82 <USB_EPClearStall+0x9e>
 802dc7a:	683b      	ldr	r3, [r7, #0]
 802dc7c:	791b      	ldrb	r3, [r3, #4]
 802dc7e:	2b02      	cmp	r3, #2
 802dc80:	d10f      	bne.n	802dca2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802dc82:	68bb      	ldr	r3, [r7, #8]
 802dc84:	015a      	lsls	r2, r3, #5
 802dc86:	68fb      	ldr	r3, [r7, #12]
 802dc88:	4413      	add	r3, r2
 802dc8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc8e:	681b      	ldr	r3, [r3, #0]
 802dc90:	68ba      	ldr	r2, [r7, #8]
 802dc92:	0151      	lsls	r1, r2, #5
 802dc94:	68fa      	ldr	r2, [r7, #12]
 802dc96:	440a      	add	r2, r1
 802dc98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dca0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802dca2:	2300      	movs	r3, #0
}
 802dca4:	4618      	mov	r0, r3
 802dca6:	3714      	adds	r7, #20
 802dca8:	46bd      	mov	sp, r7
 802dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dcae:	4770      	bx	lr

0802dcb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802dcb0:	b480      	push	{r7}
 802dcb2:	b085      	sub	sp, #20
 802dcb4:	af00      	add	r7, sp, #0
 802dcb6:	6078      	str	r0, [r7, #4]
 802dcb8:	460b      	mov	r3, r1
 802dcba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dcbc:	687b      	ldr	r3, [r7, #4]
 802dcbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802dcc0:	68fb      	ldr	r3, [r7, #12]
 802dcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dcc6:	681b      	ldr	r3, [r3, #0]
 802dcc8:	68fa      	ldr	r2, [r7, #12]
 802dcca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802dcce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802dcd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802dcd4:	68fb      	ldr	r3, [r7, #12]
 802dcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dcda:	681a      	ldr	r2, [r3, #0]
 802dcdc:	78fb      	ldrb	r3, [r7, #3]
 802dcde:	011b      	lsls	r3, r3, #4
 802dce0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802dce4:	68f9      	ldr	r1, [r7, #12]
 802dce6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802dcea:	4313      	orrs	r3, r2
 802dcec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802dcee:	2300      	movs	r3, #0
}
 802dcf0:	4618      	mov	r0, r3
 802dcf2:	3714      	adds	r7, #20
 802dcf4:	46bd      	mov	sp, r7
 802dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dcfa:	4770      	bx	lr

0802dcfc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802dcfc:	b480      	push	{r7}
 802dcfe:	b085      	sub	sp, #20
 802dd00:	af00      	add	r7, sp, #0
 802dd02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dd04:	687b      	ldr	r3, [r7, #4]
 802dd06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802dd08:	68fb      	ldr	r3, [r7, #12]
 802dd0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802dd0e:	681b      	ldr	r3, [r3, #0]
 802dd10:	68fa      	ldr	r2, [r7, #12]
 802dd12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802dd16:	f023 0303 	bic.w	r3, r3, #3
 802dd1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802dd1c:	68fb      	ldr	r3, [r7, #12]
 802dd1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dd22:	685b      	ldr	r3, [r3, #4]
 802dd24:	68fa      	ldr	r2, [r7, #12]
 802dd26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802dd2a:	f023 0302 	bic.w	r3, r3, #2
 802dd2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802dd30:	2300      	movs	r3, #0
}
 802dd32:	4618      	mov	r0, r3
 802dd34:	3714      	adds	r7, #20
 802dd36:	46bd      	mov	sp, r7
 802dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dd3c:	4770      	bx	lr

0802dd3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802dd3e:	b480      	push	{r7}
 802dd40:	b085      	sub	sp, #20
 802dd42:	af00      	add	r7, sp, #0
 802dd44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dd46:	687b      	ldr	r3, [r7, #4]
 802dd48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802dd4a:	68fb      	ldr	r3, [r7, #12]
 802dd4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802dd50:	681b      	ldr	r3, [r3, #0]
 802dd52:	68fa      	ldr	r2, [r7, #12]
 802dd54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802dd58:	f023 0303 	bic.w	r3, r3, #3
 802dd5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802dd5e:	68fb      	ldr	r3, [r7, #12]
 802dd60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dd64:	685b      	ldr	r3, [r3, #4]
 802dd66:	68fa      	ldr	r2, [r7, #12]
 802dd68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802dd6c:	f043 0302 	orr.w	r3, r3, #2
 802dd70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802dd72:	2300      	movs	r3, #0
}
 802dd74:	4618      	mov	r0, r3
 802dd76:	3714      	adds	r7, #20
 802dd78:	46bd      	mov	sp, r7
 802dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dd7e:	4770      	bx	lr

0802dd80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802dd80:	b480      	push	{r7}
 802dd82:	b085      	sub	sp, #20
 802dd84:	af00      	add	r7, sp, #0
 802dd86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802dd88:	687b      	ldr	r3, [r7, #4]
 802dd8a:	695b      	ldr	r3, [r3, #20]
 802dd8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802dd8e:	687b      	ldr	r3, [r7, #4]
 802dd90:	699b      	ldr	r3, [r3, #24]
 802dd92:	68fa      	ldr	r2, [r7, #12]
 802dd94:	4013      	ands	r3, r2
 802dd96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802dd98:	68fb      	ldr	r3, [r7, #12]
}
 802dd9a:	4618      	mov	r0, r3
 802dd9c:	3714      	adds	r7, #20
 802dd9e:	46bd      	mov	sp, r7
 802dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dda4:	4770      	bx	lr

0802dda6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802dda6:	b480      	push	{r7}
 802dda8:	b085      	sub	sp, #20
 802ddaa:	af00      	add	r7, sp, #0
 802ddac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ddae:	687b      	ldr	r3, [r7, #4]
 802ddb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802ddb2:	68fb      	ldr	r3, [r7, #12]
 802ddb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddb8:	699b      	ldr	r3, [r3, #24]
 802ddba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802ddbc:	68fb      	ldr	r3, [r7, #12]
 802ddbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddc2:	69db      	ldr	r3, [r3, #28]
 802ddc4:	68ba      	ldr	r2, [r7, #8]
 802ddc6:	4013      	ands	r3, r2
 802ddc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802ddca:	68bb      	ldr	r3, [r7, #8]
 802ddcc:	0c1b      	lsrs	r3, r3, #16
}
 802ddce:	4618      	mov	r0, r3
 802ddd0:	3714      	adds	r7, #20
 802ddd2:	46bd      	mov	sp, r7
 802ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ddd8:	4770      	bx	lr

0802ddda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ddda:	b480      	push	{r7}
 802dddc:	b085      	sub	sp, #20
 802ddde:	af00      	add	r7, sp, #0
 802dde0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dde2:	687b      	ldr	r3, [r7, #4]
 802dde4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802dde6:	68fb      	ldr	r3, [r7, #12]
 802dde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddec:	699b      	ldr	r3, [r3, #24]
 802ddee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802ddf0:	68fb      	ldr	r3, [r7, #12]
 802ddf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddf6:	69db      	ldr	r3, [r3, #28]
 802ddf8:	68ba      	ldr	r2, [r7, #8]
 802ddfa:	4013      	ands	r3, r2
 802ddfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802ddfe:	68bb      	ldr	r3, [r7, #8]
 802de00:	b29b      	uxth	r3, r3
}
 802de02:	4618      	mov	r0, r3
 802de04:	3714      	adds	r7, #20
 802de06:	46bd      	mov	sp, r7
 802de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de0c:	4770      	bx	lr

0802de0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802de0e:	b480      	push	{r7}
 802de10:	b085      	sub	sp, #20
 802de12:	af00      	add	r7, sp, #0
 802de14:	6078      	str	r0, [r7, #4]
 802de16:	460b      	mov	r3, r1
 802de18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802de1a:	687b      	ldr	r3, [r7, #4]
 802de1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802de1e:	78fb      	ldrb	r3, [r7, #3]
 802de20:	015a      	lsls	r2, r3, #5
 802de22:	68fb      	ldr	r3, [r7, #12]
 802de24:	4413      	add	r3, r2
 802de26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de2a:	689b      	ldr	r3, [r3, #8]
 802de2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802de2e:	68fb      	ldr	r3, [r7, #12]
 802de30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de34:	695b      	ldr	r3, [r3, #20]
 802de36:	68ba      	ldr	r2, [r7, #8]
 802de38:	4013      	ands	r3, r2
 802de3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802de3c:	68bb      	ldr	r3, [r7, #8]
}
 802de3e:	4618      	mov	r0, r3
 802de40:	3714      	adds	r7, #20
 802de42:	46bd      	mov	sp, r7
 802de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de48:	4770      	bx	lr

0802de4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802de4a:	b480      	push	{r7}
 802de4c:	b087      	sub	sp, #28
 802de4e:	af00      	add	r7, sp, #0
 802de50:	6078      	str	r0, [r7, #4]
 802de52:	460b      	mov	r3, r1
 802de54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802de56:	687b      	ldr	r3, [r7, #4]
 802de58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802de5a:	697b      	ldr	r3, [r7, #20]
 802de5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de60:	691b      	ldr	r3, [r3, #16]
 802de62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802de64:	697b      	ldr	r3, [r7, #20]
 802de66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802de6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802de6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802de6e:	78fb      	ldrb	r3, [r7, #3]
 802de70:	f003 030f 	and.w	r3, r3, #15
 802de74:	68fa      	ldr	r2, [r7, #12]
 802de76:	fa22 f303 	lsr.w	r3, r2, r3
 802de7a:	01db      	lsls	r3, r3, #7
 802de7c:	b2db      	uxtb	r3, r3
 802de7e:	693a      	ldr	r2, [r7, #16]
 802de80:	4313      	orrs	r3, r2
 802de82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802de84:	78fb      	ldrb	r3, [r7, #3]
 802de86:	015a      	lsls	r2, r3, #5
 802de88:	697b      	ldr	r3, [r7, #20]
 802de8a:	4413      	add	r3, r2
 802de8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802de90:	689b      	ldr	r3, [r3, #8]
 802de92:	693a      	ldr	r2, [r7, #16]
 802de94:	4013      	ands	r3, r2
 802de96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802de98:	68bb      	ldr	r3, [r7, #8]
}
 802de9a:	4618      	mov	r0, r3
 802de9c:	371c      	adds	r7, #28
 802de9e:	46bd      	mov	sp, r7
 802dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dea4:	4770      	bx	lr

0802dea6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802dea6:	b480      	push	{r7}
 802dea8:	b083      	sub	sp, #12
 802deaa:	af00      	add	r7, sp, #0
 802deac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802deae:	687b      	ldr	r3, [r7, #4]
 802deb0:	695b      	ldr	r3, [r3, #20]
 802deb2:	f003 0301 	and.w	r3, r3, #1
}
 802deb6:	4618      	mov	r0, r3
 802deb8:	370c      	adds	r7, #12
 802deba:	46bd      	mov	sp, r7
 802debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dec0:	4770      	bx	lr

0802dec2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802dec2:	b480      	push	{r7}
 802dec4:	b085      	sub	sp, #20
 802dec6:	af00      	add	r7, sp, #0
 802dec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802deca:	687b      	ldr	r3, [r7, #4]
 802decc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802dece:	68fb      	ldr	r3, [r7, #12]
 802ded0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ded4:	681b      	ldr	r3, [r3, #0]
 802ded6:	68fa      	ldr	r2, [r7, #12]
 802ded8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dedc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802dee0:	f023 0307 	bic.w	r3, r3, #7
 802dee4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802dee6:	68fb      	ldr	r3, [r7, #12]
 802dee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802deec:	685b      	ldr	r3, [r3, #4]
 802deee:	68fa      	ldr	r2, [r7, #12]
 802def0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802def4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802def8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802defa:	2300      	movs	r3, #0
}
 802defc:	4618      	mov	r0, r3
 802defe:	3714      	adds	r7, #20
 802df00:	46bd      	mov	sp, r7
 802df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df06:	4770      	bx	lr

0802df08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802df08:	b480      	push	{r7}
 802df0a:	b087      	sub	sp, #28
 802df0c:	af00      	add	r7, sp, #0
 802df0e:	60f8      	str	r0, [r7, #12]
 802df10:	460b      	mov	r3, r1
 802df12:	607a      	str	r2, [r7, #4]
 802df14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802df16:	68fb      	ldr	r3, [r7, #12]
 802df18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802df1a:	68fb      	ldr	r3, [r7, #12]
 802df1c:	333c      	adds	r3, #60	; 0x3c
 802df1e:	3304      	adds	r3, #4
 802df20:	681b      	ldr	r3, [r3, #0]
 802df22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802df24:	693b      	ldr	r3, [r7, #16]
 802df26:	4a26      	ldr	r2, [pc, #152]	; (802dfc0 <USB_EP0_OutStart+0xb8>)
 802df28:	4293      	cmp	r3, r2
 802df2a:	d90a      	bls.n	802df42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802df2c:	697b      	ldr	r3, [r7, #20]
 802df2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df32:	681b      	ldr	r3, [r3, #0]
 802df34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802df38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802df3c:	d101      	bne.n	802df42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802df3e:	2300      	movs	r3, #0
 802df40:	e037      	b.n	802dfb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802df42:	697b      	ldr	r3, [r7, #20]
 802df44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df48:	461a      	mov	r2, r3
 802df4a:	2300      	movs	r3, #0
 802df4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802df4e:	697b      	ldr	r3, [r7, #20]
 802df50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df54:	691b      	ldr	r3, [r3, #16]
 802df56:	697a      	ldr	r2, [r7, #20]
 802df58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802df60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802df62:	697b      	ldr	r3, [r7, #20]
 802df64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df68:	691b      	ldr	r3, [r3, #16]
 802df6a:	697a      	ldr	r2, [r7, #20]
 802df6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df70:	f043 0318 	orr.w	r3, r3, #24
 802df74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802df76:	697b      	ldr	r3, [r7, #20]
 802df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df7c:	691b      	ldr	r3, [r3, #16]
 802df7e:	697a      	ldr	r2, [r7, #20]
 802df80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802df84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802df88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802df8a:	7afb      	ldrb	r3, [r7, #11]
 802df8c:	2b01      	cmp	r3, #1
 802df8e:	d10f      	bne.n	802dfb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802df90:	697b      	ldr	r3, [r7, #20]
 802df92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802df96:	461a      	mov	r2, r3
 802df98:	687b      	ldr	r3, [r7, #4]
 802df9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802df9c:	697b      	ldr	r3, [r7, #20]
 802df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dfa2:	681b      	ldr	r3, [r3, #0]
 802dfa4:	697a      	ldr	r2, [r7, #20]
 802dfa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dfaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802dfae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802dfb0:	2300      	movs	r3, #0
}
 802dfb2:	4618      	mov	r0, r3
 802dfb4:	371c      	adds	r7, #28
 802dfb6:	46bd      	mov	sp, r7
 802dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfbc:	4770      	bx	lr
 802dfbe:	bf00      	nop
 802dfc0:	4f54300a 	.word	0x4f54300a

0802dfc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802dfc4:	b480      	push	{r7}
 802dfc6:	b085      	sub	sp, #20
 802dfc8:	af00      	add	r7, sp, #0
 802dfca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802dfcc:	2300      	movs	r3, #0
 802dfce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802dfd0:	68fb      	ldr	r3, [r7, #12]
 802dfd2:	3301      	adds	r3, #1
 802dfd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802dfd6:	68fb      	ldr	r3, [r7, #12]
 802dfd8:	4a13      	ldr	r2, [pc, #76]	; (802e028 <USB_CoreReset+0x64>)
 802dfda:	4293      	cmp	r3, r2
 802dfdc:	d901      	bls.n	802dfe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802dfde:	2303      	movs	r3, #3
 802dfe0:	e01b      	b.n	802e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802dfe2:	687b      	ldr	r3, [r7, #4]
 802dfe4:	691b      	ldr	r3, [r3, #16]
 802dfe6:	2b00      	cmp	r3, #0
 802dfe8:	daf2      	bge.n	802dfd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802dfea:	2300      	movs	r3, #0
 802dfec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802dfee:	687b      	ldr	r3, [r7, #4]
 802dff0:	691b      	ldr	r3, [r3, #16]
 802dff2:	f043 0201 	orr.w	r2, r3, #1
 802dff6:	687b      	ldr	r3, [r7, #4]
 802dff8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802dffa:	68fb      	ldr	r3, [r7, #12]
 802dffc:	3301      	adds	r3, #1
 802dffe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e000:	68fb      	ldr	r3, [r7, #12]
 802e002:	4a09      	ldr	r2, [pc, #36]	; (802e028 <USB_CoreReset+0x64>)
 802e004:	4293      	cmp	r3, r2
 802e006:	d901      	bls.n	802e00c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802e008:	2303      	movs	r3, #3
 802e00a:	e006      	b.n	802e01a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802e00c:	687b      	ldr	r3, [r7, #4]
 802e00e:	691b      	ldr	r3, [r3, #16]
 802e010:	f003 0301 	and.w	r3, r3, #1
 802e014:	2b01      	cmp	r3, #1
 802e016:	d0f0      	beq.n	802dffa <USB_CoreReset+0x36>

  return HAL_OK;
 802e018:	2300      	movs	r3, #0
}
 802e01a:	4618      	mov	r0, r3
 802e01c:	3714      	adds	r7, #20
 802e01e:	46bd      	mov	sp, r7
 802e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e024:	4770      	bx	lr
 802e026:	bf00      	nop
 802e028:	00030d40 	.word	0x00030d40

0802e02c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e02c:	b580      	push	{r7, lr}
 802e02e:	b084      	sub	sp, #16
 802e030:	af00      	add	r7, sp, #0
 802e032:	6078      	str	r0, [r7, #4]
 802e034:	460b      	mov	r3, r1
 802e036:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802e038:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802e03c:	f002 fef2 	bl	8030e24 <USBD_static_malloc>
 802e040:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 802e042:	68fb      	ldr	r3, [r7, #12]
 802e044:	2b00      	cmp	r3, #0
 802e046:	d109      	bne.n	802e05c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e048:	687b      	ldr	r3, [r7, #4]
 802e04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e04e:	687b      	ldr	r3, [r7, #4]
 802e050:	32b0      	adds	r2, #176	; 0xb0
 802e052:	2100      	movs	r1, #0
 802e054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 802e058:	2302      	movs	r3, #2
 802e05a:	e0d4      	b.n	802e206 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 802e05c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 802e060:	2100      	movs	r1, #0
 802e062:	68f8      	ldr	r0, [r7, #12]
 802e064:	f003 f92a 	bl	80312bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 802e068:	687b      	ldr	r3, [r7, #4]
 802e06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e06e:	687b      	ldr	r3, [r7, #4]
 802e070:	32b0      	adds	r2, #176	; 0xb0
 802e072:	68f9      	ldr	r1, [r7, #12]
 802e074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 802e078:	687b      	ldr	r3, [r7, #4]
 802e07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e07e:	687b      	ldr	r3, [r7, #4]
 802e080:	32b0      	adds	r2, #176	; 0xb0
 802e082:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e086:	687b      	ldr	r3, [r7, #4]
 802e088:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e08c:	687b      	ldr	r3, [r7, #4]
 802e08e:	7c1b      	ldrb	r3, [r3, #16]
 802e090:	2b00      	cmp	r3, #0
 802e092:	d138      	bne.n	802e106 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e094:	4b5e      	ldr	r3, [pc, #376]	; (802e210 <USBD_CDC_Init+0x1e4>)
 802e096:	7819      	ldrb	r1, [r3, #0]
 802e098:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e09c:	2202      	movs	r2, #2
 802e09e:	6878      	ldr	r0, [r7, #4]
 802e0a0:	f002 fd9d 	bl	8030bde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e0a4:	4b5a      	ldr	r3, [pc, #360]	; (802e210 <USBD_CDC_Init+0x1e4>)
 802e0a6:	781b      	ldrb	r3, [r3, #0]
 802e0a8:	f003 020f 	and.w	r2, r3, #15
 802e0ac:	6879      	ldr	r1, [r7, #4]
 802e0ae:	4613      	mov	r3, r2
 802e0b0:	009b      	lsls	r3, r3, #2
 802e0b2:	4413      	add	r3, r2
 802e0b4:	009b      	lsls	r3, r3, #2
 802e0b6:	440b      	add	r3, r1
 802e0b8:	3324      	adds	r3, #36	; 0x24
 802e0ba:	2201      	movs	r2, #1
 802e0bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e0be:	4b55      	ldr	r3, [pc, #340]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e0c0:	7819      	ldrb	r1, [r3, #0]
 802e0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e0c6:	2202      	movs	r2, #2
 802e0c8:	6878      	ldr	r0, [r7, #4]
 802e0ca:	f002 fd88 	bl	8030bde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e0ce:	4b51      	ldr	r3, [pc, #324]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e0d0:	781b      	ldrb	r3, [r3, #0]
 802e0d2:	f003 020f 	and.w	r2, r3, #15
 802e0d6:	6879      	ldr	r1, [r7, #4]
 802e0d8:	4613      	mov	r3, r2
 802e0da:	009b      	lsls	r3, r3, #2
 802e0dc:	4413      	add	r3, r2
 802e0de:	009b      	lsls	r3, r3, #2
 802e0e0:	440b      	add	r3, r1
 802e0e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e0e6:	2201      	movs	r2, #1
 802e0e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802e0ea:	4b4b      	ldr	r3, [pc, #300]	; (802e218 <USBD_CDC_Init+0x1ec>)
 802e0ec:	781b      	ldrb	r3, [r3, #0]
 802e0ee:	f003 020f 	and.w	r2, r3, #15
 802e0f2:	6879      	ldr	r1, [r7, #4]
 802e0f4:	4613      	mov	r3, r2
 802e0f6:	009b      	lsls	r3, r3, #2
 802e0f8:	4413      	add	r3, r2
 802e0fa:	009b      	lsls	r3, r3, #2
 802e0fc:	440b      	add	r3, r1
 802e0fe:	3326      	adds	r3, #38	; 0x26
 802e100:	2210      	movs	r2, #16
 802e102:	801a      	strh	r2, [r3, #0]
 802e104:	e035      	b.n	802e172 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e106:	4b42      	ldr	r3, [pc, #264]	; (802e210 <USBD_CDC_Init+0x1e4>)
 802e108:	7819      	ldrb	r1, [r3, #0]
 802e10a:	2340      	movs	r3, #64	; 0x40
 802e10c:	2202      	movs	r2, #2
 802e10e:	6878      	ldr	r0, [r7, #4]
 802e110:	f002 fd65 	bl	8030bde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e114:	4b3e      	ldr	r3, [pc, #248]	; (802e210 <USBD_CDC_Init+0x1e4>)
 802e116:	781b      	ldrb	r3, [r3, #0]
 802e118:	f003 020f 	and.w	r2, r3, #15
 802e11c:	6879      	ldr	r1, [r7, #4]
 802e11e:	4613      	mov	r3, r2
 802e120:	009b      	lsls	r3, r3, #2
 802e122:	4413      	add	r3, r2
 802e124:	009b      	lsls	r3, r3, #2
 802e126:	440b      	add	r3, r1
 802e128:	3324      	adds	r3, #36	; 0x24
 802e12a:	2201      	movs	r2, #1
 802e12c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e12e:	4b39      	ldr	r3, [pc, #228]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e130:	7819      	ldrb	r1, [r3, #0]
 802e132:	2340      	movs	r3, #64	; 0x40
 802e134:	2202      	movs	r2, #2
 802e136:	6878      	ldr	r0, [r7, #4]
 802e138:	f002 fd51 	bl	8030bde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e13c:	4b35      	ldr	r3, [pc, #212]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e13e:	781b      	ldrb	r3, [r3, #0]
 802e140:	f003 020f 	and.w	r2, r3, #15
 802e144:	6879      	ldr	r1, [r7, #4]
 802e146:	4613      	mov	r3, r2
 802e148:	009b      	lsls	r3, r3, #2
 802e14a:	4413      	add	r3, r2
 802e14c:	009b      	lsls	r3, r3, #2
 802e14e:	440b      	add	r3, r1
 802e150:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e154:	2201      	movs	r2, #1
 802e156:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802e158:	4b2f      	ldr	r3, [pc, #188]	; (802e218 <USBD_CDC_Init+0x1ec>)
 802e15a:	781b      	ldrb	r3, [r3, #0]
 802e15c:	f003 020f 	and.w	r2, r3, #15
 802e160:	6879      	ldr	r1, [r7, #4]
 802e162:	4613      	mov	r3, r2
 802e164:	009b      	lsls	r3, r3, #2
 802e166:	4413      	add	r3, r2
 802e168:	009b      	lsls	r3, r3, #2
 802e16a:	440b      	add	r3, r1
 802e16c:	3326      	adds	r3, #38	; 0x26
 802e16e:	2210      	movs	r2, #16
 802e170:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802e172:	4b29      	ldr	r3, [pc, #164]	; (802e218 <USBD_CDC_Init+0x1ec>)
 802e174:	7819      	ldrb	r1, [r3, #0]
 802e176:	2308      	movs	r3, #8
 802e178:	2203      	movs	r2, #3
 802e17a:	6878      	ldr	r0, [r7, #4]
 802e17c:	f002 fd2f 	bl	8030bde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 802e180:	4b25      	ldr	r3, [pc, #148]	; (802e218 <USBD_CDC_Init+0x1ec>)
 802e182:	781b      	ldrb	r3, [r3, #0]
 802e184:	f003 020f 	and.w	r2, r3, #15
 802e188:	6879      	ldr	r1, [r7, #4]
 802e18a:	4613      	mov	r3, r2
 802e18c:	009b      	lsls	r3, r3, #2
 802e18e:	4413      	add	r3, r2
 802e190:	009b      	lsls	r3, r3, #2
 802e192:	440b      	add	r3, r1
 802e194:	3324      	adds	r3, #36	; 0x24
 802e196:	2201      	movs	r2, #1
 802e198:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 802e19a:	68fb      	ldr	r3, [r7, #12]
 802e19c:	2200      	movs	r2, #0
 802e19e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 802e1a2:	687b      	ldr	r3, [r7, #4]
 802e1a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e1a8:	687a      	ldr	r2, [r7, #4]
 802e1aa:	33b0      	adds	r3, #176	; 0xb0
 802e1ac:	009b      	lsls	r3, r3, #2
 802e1ae:	4413      	add	r3, r2
 802e1b0:	685b      	ldr	r3, [r3, #4]
 802e1b2:	681b      	ldr	r3, [r3, #0]
 802e1b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802e1b6:	68fb      	ldr	r3, [r7, #12]
 802e1b8:	2200      	movs	r2, #0
 802e1ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 802e1be:	68fb      	ldr	r3, [r7, #12]
 802e1c0:	2200      	movs	r2, #0
 802e1c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 802e1c6:	68fb      	ldr	r3, [r7, #12]
 802e1c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 802e1cc:	2b00      	cmp	r3, #0
 802e1ce:	d101      	bne.n	802e1d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 802e1d0:	2302      	movs	r3, #2
 802e1d2:	e018      	b.n	802e206 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e1d4:	687b      	ldr	r3, [r7, #4]
 802e1d6:	7c1b      	ldrb	r3, [r3, #16]
 802e1d8:	2b00      	cmp	r3, #0
 802e1da:	d10a      	bne.n	802e1f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e1dc:	4b0d      	ldr	r3, [pc, #52]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e1de:	7819      	ldrb	r1, [r3, #0]
 802e1e0:	68fb      	ldr	r3, [r7, #12]
 802e1e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e1e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e1ea:	6878      	ldr	r0, [r7, #4]
 802e1ec:	f002 fde6 	bl	8030dbc <USBD_LL_PrepareReceive>
 802e1f0:	e008      	b.n	802e204 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e1f2:	4b08      	ldr	r3, [pc, #32]	; (802e214 <USBD_CDC_Init+0x1e8>)
 802e1f4:	7819      	ldrb	r1, [r3, #0]
 802e1f6:	68fb      	ldr	r3, [r7, #12]
 802e1f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e1fc:	2340      	movs	r3, #64	; 0x40
 802e1fe:	6878      	ldr	r0, [r7, #4]
 802e200:	f002 fddc 	bl	8030dbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802e204:	2300      	movs	r3, #0
}
 802e206:	4618      	mov	r0, r3
 802e208:	3710      	adds	r7, #16
 802e20a:	46bd      	mov	sp, r7
 802e20c:	bd80      	pop	{r7, pc}
 802e20e:	bf00      	nop
 802e210:	200001cb 	.word	0x200001cb
 802e214:	200001cc 	.word	0x200001cc
 802e218:	200001cd 	.word	0x200001cd

0802e21c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e21c:	b580      	push	{r7, lr}
 802e21e:	b082      	sub	sp, #8
 802e220:	af00      	add	r7, sp, #0
 802e222:	6078      	str	r0, [r7, #4]
 802e224:	460b      	mov	r3, r1
 802e226:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802e228:	4b3a      	ldr	r3, [pc, #232]	; (802e314 <USBD_CDC_DeInit+0xf8>)
 802e22a:	781b      	ldrb	r3, [r3, #0]
 802e22c:	4619      	mov	r1, r3
 802e22e:	6878      	ldr	r0, [r7, #4]
 802e230:	f002 fcfb 	bl	8030c2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802e234:	4b37      	ldr	r3, [pc, #220]	; (802e314 <USBD_CDC_DeInit+0xf8>)
 802e236:	781b      	ldrb	r3, [r3, #0]
 802e238:	f003 020f 	and.w	r2, r3, #15
 802e23c:	6879      	ldr	r1, [r7, #4]
 802e23e:	4613      	mov	r3, r2
 802e240:	009b      	lsls	r3, r3, #2
 802e242:	4413      	add	r3, r2
 802e244:	009b      	lsls	r3, r3, #2
 802e246:	440b      	add	r3, r1
 802e248:	3324      	adds	r3, #36	; 0x24
 802e24a:	2200      	movs	r2, #0
 802e24c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 802e24e:	4b32      	ldr	r3, [pc, #200]	; (802e318 <USBD_CDC_DeInit+0xfc>)
 802e250:	781b      	ldrb	r3, [r3, #0]
 802e252:	4619      	mov	r1, r3
 802e254:	6878      	ldr	r0, [r7, #4]
 802e256:	f002 fce8 	bl	8030c2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802e25a:	4b2f      	ldr	r3, [pc, #188]	; (802e318 <USBD_CDC_DeInit+0xfc>)
 802e25c:	781b      	ldrb	r3, [r3, #0]
 802e25e:	f003 020f 	and.w	r2, r3, #15
 802e262:	6879      	ldr	r1, [r7, #4]
 802e264:	4613      	mov	r3, r2
 802e266:	009b      	lsls	r3, r3, #2
 802e268:	4413      	add	r3, r2
 802e26a:	009b      	lsls	r3, r3, #2
 802e26c:	440b      	add	r3, r1
 802e26e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e272:	2200      	movs	r2, #0
 802e274:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802e276:	4b29      	ldr	r3, [pc, #164]	; (802e31c <USBD_CDC_DeInit+0x100>)
 802e278:	781b      	ldrb	r3, [r3, #0]
 802e27a:	4619      	mov	r1, r3
 802e27c:	6878      	ldr	r0, [r7, #4]
 802e27e:	f002 fcd4 	bl	8030c2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 802e282:	4b26      	ldr	r3, [pc, #152]	; (802e31c <USBD_CDC_DeInit+0x100>)
 802e284:	781b      	ldrb	r3, [r3, #0]
 802e286:	f003 020f 	and.w	r2, r3, #15
 802e28a:	6879      	ldr	r1, [r7, #4]
 802e28c:	4613      	mov	r3, r2
 802e28e:	009b      	lsls	r3, r3, #2
 802e290:	4413      	add	r3, r2
 802e292:	009b      	lsls	r3, r3, #2
 802e294:	440b      	add	r3, r1
 802e296:	3324      	adds	r3, #36	; 0x24
 802e298:	2200      	movs	r2, #0
 802e29a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 802e29c:	4b1f      	ldr	r3, [pc, #124]	; (802e31c <USBD_CDC_DeInit+0x100>)
 802e29e:	781b      	ldrb	r3, [r3, #0]
 802e2a0:	f003 020f 	and.w	r2, r3, #15
 802e2a4:	6879      	ldr	r1, [r7, #4]
 802e2a6:	4613      	mov	r3, r2
 802e2a8:	009b      	lsls	r3, r3, #2
 802e2aa:	4413      	add	r3, r2
 802e2ac:	009b      	lsls	r3, r3, #2
 802e2ae:	440b      	add	r3, r1
 802e2b0:	3326      	adds	r3, #38	; 0x26
 802e2b2:	2200      	movs	r2, #0
 802e2b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 802e2b6:	687b      	ldr	r3, [r7, #4]
 802e2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e2bc:	687b      	ldr	r3, [r7, #4]
 802e2be:	32b0      	adds	r2, #176	; 0xb0
 802e2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e2c4:	2b00      	cmp	r3, #0
 802e2c6:	d01f      	beq.n	802e308 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 802e2c8:	687b      	ldr	r3, [r7, #4]
 802e2ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e2ce:	687a      	ldr	r2, [r7, #4]
 802e2d0:	33b0      	adds	r3, #176	; 0xb0
 802e2d2:	009b      	lsls	r3, r3, #2
 802e2d4:	4413      	add	r3, r2
 802e2d6:	685b      	ldr	r3, [r3, #4]
 802e2d8:	685b      	ldr	r3, [r3, #4]
 802e2da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 802e2dc:	687b      	ldr	r3, [r7, #4]
 802e2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e2e2:	687b      	ldr	r3, [r7, #4]
 802e2e4:	32b0      	adds	r2, #176	; 0xb0
 802e2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e2ea:	4618      	mov	r0, r3
 802e2ec:	f002 fda8 	bl	8030e40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e2f0:	687b      	ldr	r3, [r7, #4]
 802e2f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e2f6:	687b      	ldr	r3, [r7, #4]
 802e2f8:	32b0      	adds	r2, #176	; 0xb0
 802e2fa:	2100      	movs	r1, #0
 802e2fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 802e300:	687b      	ldr	r3, [r7, #4]
 802e302:	2200      	movs	r2, #0
 802e304:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802e308:	2300      	movs	r3, #0
}
 802e30a:	4618      	mov	r0, r3
 802e30c:	3708      	adds	r7, #8
 802e30e:	46bd      	mov	sp, r7
 802e310:	bd80      	pop	{r7, pc}
 802e312:	bf00      	nop
 802e314:	200001cb 	.word	0x200001cb
 802e318:	200001cc 	.word	0x200001cc
 802e31c:	200001cd 	.word	0x200001cd

0802e320 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802e320:	b580      	push	{r7, lr}
 802e322:	b086      	sub	sp, #24
 802e324:	af00      	add	r7, sp, #0
 802e326:	6078      	str	r0, [r7, #4]
 802e328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e32a:	687b      	ldr	r3, [r7, #4]
 802e32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e330:	687b      	ldr	r3, [r7, #4]
 802e332:	32b0      	adds	r2, #176	; 0xb0
 802e334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e338:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802e33a:	2300      	movs	r3, #0
 802e33c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802e33e:	2300      	movs	r3, #0
 802e340:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 802e342:	2300      	movs	r3, #0
 802e344:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802e346:	693b      	ldr	r3, [r7, #16]
 802e348:	2b00      	cmp	r3, #0
 802e34a:	d101      	bne.n	802e350 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 802e34c:	2303      	movs	r3, #3
 802e34e:	e0bf      	b.n	802e4d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802e350:	683b      	ldr	r3, [r7, #0]
 802e352:	781b      	ldrb	r3, [r3, #0]
 802e354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802e358:	2b00      	cmp	r3, #0
 802e35a:	d050      	beq.n	802e3fe <USBD_CDC_Setup+0xde>
 802e35c:	2b20      	cmp	r3, #32
 802e35e:	f040 80af 	bne.w	802e4c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802e362:	683b      	ldr	r3, [r7, #0]
 802e364:	88db      	ldrh	r3, [r3, #6]
 802e366:	2b00      	cmp	r3, #0
 802e368:	d03a      	beq.n	802e3e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802e36a:	683b      	ldr	r3, [r7, #0]
 802e36c:	781b      	ldrb	r3, [r3, #0]
 802e36e:	b25b      	sxtb	r3, r3
 802e370:	2b00      	cmp	r3, #0
 802e372:	da1b      	bge.n	802e3ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e374:	687b      	ldr	r3, [r7, #4]
 802e376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e37a:	687a      	ldr	r2, [r7, #4]
 802e37c:	33b0      	adds	r3, #176	; 0xb0
 802e37e:	009b      	lsls	r3, r3, #2
 802e380:	4413      	add	r3, r2
 802e382:	685b      	ldr	r3, [r3, #4]
 802e384:	689b      	ldr	r3, [r3, #8]
 802e386:	683a      	ldr	r2, [r7, #0]
 802e388:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802e38a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e38c:	683a      	ldr	r2, [r7, #0]
 802e38e:	88d2      	ldrh	r2, [r2, #6]
 802e390:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 802e392:	683b      	ldr	r3, [r7, #0]
 802e394:	88db      	ldrh	r3, [r3, #6]
 802e396:	2b07      	cmp	r3, #7
 802e398:	bf28      	it	cs
 802e39a:	2307      	movcs	r3, #7
 802e39c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 802e39e:	693b      	ldr	r3, [r7, #16]
 802e3a0:	89fa      	ldrh	r2, [r7, #14]
 802e3a2:	4619      	mov	r1, r3
 802e3a4:	6878      	ldr	r0, [r7, #4]
 802e3a6:	f001 fd89 	bl	802febc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 802e3aa:	e090      	b.n	802e4ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 802e3ac:	683b      	ldr	r3, [r7, #0]
 802e3ae:	785a      	ldrb	r2, [r3, #1]
 802e3b0:	693b      	ldr	r3, [r7, #16]
 802e3b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 802e3b6:	683b      	ldr	r3, [r7, #0]
 802e3b8:	88db      	ldrh	r3, [r3, #6]
 802e3ba:	2b3f      	cmp	r3, #63	; 0x3f
 802e3bc:	d803      	bhi.n	802e3c6 <USBD_CDC_Setup+0xa6>
 802e3be:	683b      	ldr	r3, [r7, #0]
 802e3c0:	88db      	ldrh	r3, [r3, #6]
 802e3c2:	b2da      	uxtb	r2, r3
 802e3c4:	e000      	b.n	802e3c8 <USBD_CDC_Setup+0xa8>
 802e3c6:	2240      	movs	r2, #64	; 0x40
 802e3c8:	693b      	ldr	r3, [r7, #16]
 802e3ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 802e3ce:	6939      	ldr	r1, [r7, #16]
 802e3d0:	693b      	ldr	r3, [r7, #16]
 802e3d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 802e3d6:	461a      	mov	r2, r3
 802e3d8:	6878      	ldr	r0, [r7, #4]
 802e3da:	f001 fd9b 	bl	802ff14 <USBD_CtlPrepareRx>
      break;
 802e3de:	e076      	b.n	802e4ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e3e0:	687b      	ldr	r3, [r7, #4]
 802e3e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e3e6:	687a      	ldr	r2, [r7, #4]
 802e3e8:	33b0      	adds	r3, #176	; 0xb0
 802e3ea:	009b      	lsls	r3, r3, #2
 802e3ec:	4413      	add	r3, r2
 802e3ee:	685b      	ldr	r3, [r3, #4]
 802e3f0:	689b      	ldr	r3, [r3, #8]
 802e3f2:	683a      	ldr	r2, [r7, #0]
 802e3f4:	7850      	ldrb	r0, [r2, #1]
 802e3f6:	2200      	movs	r2, #0
 802e3f8:	6839      	ldr	r1, [r7, #0]
 802e3fa:	4798      	blx	r3
      break;
 802e3fc:	e067      	b.n	802e4ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802e3fe:	683b      	ldr	r3, [r7, #0]
 802e400:	785b      	ldrb	r3, [r3, #1]
 802e402:	2b0b      	cmp	r3, #11
 802e404:	d851      	bhi.n	802e4aa <USBD_CDC_Setup+0x18a>
 802e406:	a201      	add	r2, pc, #4	; (adr r2, 802e40c <USBD_CDC_Setup+0xec>)
 802e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e40c:	0802e43d 	.word	0x0802e43d
 802e410:	0802e4b9 	.word	0x0802e4b9
 802e414:	0802e4ab 	.word	0x0802e4ab
 802e418:	0802e4ab 	.word	0x0802e4ab
 802e41c:	0802e4ab 	.word	0x0802e4ab
 802e420:	0802e4ab 	.word	0x0802e4ab
 802e424:	0802e4ab 	.word	0x0802e4ab
 802e428:	0802e4ab 	.word	0x0802e4ab
 802e42c:	0802e4ab 	.word	0x0802e4ab
 802e430:	0802e4ab 	.word	0x0802e4ab
 802e434:	0802e467 	.word	0x0802e467
 802e438:	0802e491 	.word	0x0802e491
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802e43c:	687b      	ldr	r3, [r7, #4]
 802e43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802e442:	b2db      	uxtb	r3, r3
 802e444:	2b03      	cmp	r3, #3
 802e446:	d107      	bne.n	802e458 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802e448:	f107 030a 	add.w	r3, r7, #10
 802e44c:	2202      	movs	r2, #2
 802e44e:	4619      	mov	r1, r3
 802e450:	6878      	ldr	r0, [r7, #4]
 802e452:	f001 fd33 	bl	802febc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802e456:	e032      	b.n	802e4be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802e458:	6839      	ldr	r1, [r7, #0]
 802e45a:	6878      	ldr	r0, [r7, #4]
 802e45c:	f001 fcbd 	bl	802fdda <USBD_CtlError>
            ret = USBD_FAIL;
 802e460:	2303      	movs	r3, #3
 802e462:	75fb      	strb	r3, [r7, #23]
          break;
 802e464:	e02b      	b.n	802e4be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802e466:	687b      	ldr	r3, [r7, #4]
 802e468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802e46c:	b2db      	uxtb	r3, r3
 802e46e:	2b03      	cmp	r3, #3
 802e470:	d107      	bne.n	802e482 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802e472:	f107 030d 	add.w	r3, r7, #13
 802e476:	2201      	movs	r2, #1
 802e478:	4619      	mov	r1, r3
 802e47a:	6878      	ldr	r0, [r7, #4]
 802e47c:	f001 fd1e 	bl	802febc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802e480:	e01d      	b.n	802e4be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802e482:	6839      	ldr	r1, [r7, #0]
 802e484:	6878      	ldr	r0, [r7, #4]
 802e486:	f001 fca8 	bl	802fdda <USBD_CtlError>
            ret = USBD_FAIL;
 802e48a:	2303      	movs	r3, #3
 802e48c:	75fb      	strb	r3, [r7, #23]
          break;
 802e48e:	e016      	b.n	802e4be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802e490:	687b      	ldr	r3, [r7, #4]
 802e492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802e496:	b2db      	uxtb	r3, r3
 802e498:	2b03      	cmp	r3, #3
 802e49a:	d00f      	beq.n	802e4bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 802e49c:	6839      	ldr	r1, [r7, #0]
 802e49e:	6878      	ldr	r0, [r7, #4]
 802e4a0:	f001 fc9b 	bl	802fdda <USBD_CtlError>
            ret = USBD_FAIL;
 802e4a4:	2303      	movs	r3, #3
 802e4a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 802e4a8:	e008      	b.n	802e4bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802e4aa:	6839      	ldr	r1, [r7, #0]
 802e4ac:	6878      	ldr	r0, [r7, #4]
 802e4ae:	f001 fc94 	bl	802fdda <USBD_CtlError>
          ret = USBD_FAIL;
 802e4b2:	2303      	movs	r3, #3
 802e4b4:	75fb      	strb	r3, [r7, #23]
          break;
 802e4b6:	e002      	b.n	802e4be <USBD_CDC_Setup+0x19e>
          break;
 802e4b8:	bf00      	nop
 802e4ba:	e008      	b.n	802e4ce <USBD_CDC_Setup+0x1ae>
          break;
 802e4bc:	bf00      	nop
      }
      break;
 802e4be:	e006      	b.n	802e4ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 802e4c0:	6839      	ldr	r1, [r7, #0]
 802e4c2:	6878      	ldr	r0, [r7, #4]
 802e4c4:	f001 fc89 	bl	802fdda <USBD_CtlError>
      ret = USBD_FAIL;
 802e4c8:	2303      	movs	r3, #3
 802e4ca:	75fb      	strb	r3, [r7, #23]
      break;
 802e4cc:	bf00      	nop
  }

  return (uint8_t)ret;
 802e4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 802e4d0:	4618      	mov	r0, r3
 802e4d2:	3718      	adds	r7, #24
 802e4d4:	46bd      	mov	sp, r7
 802e4d6:	bd80      	pop	{r7, pc}

0802e4d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802e4d8:	b580      	push	{r7, lr}
 802e4da:	b084      	sub	sp, #16
 802e4dc:	af00      	add	r7, sp, #0
 802e4de:	6078      	str	r0, [r7, #4]
 802e4e0:	460b      	mov	r3, r1
 802e4e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 802e4e4:	687b      	ldr	r3, [r7, #4]
 802e4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802e4ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802e4ec:	687b      	ldr	r3, [r7, #4]
 802e4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e4f2:	687b      	ldr	r3, [r7, #4]
 802e4f4:	32b0      	adds	r2, #176	; 0xb0
 802e4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e4fa:	2b00      	cmp	r3, #0
 802e4fc:	d101      	bne.n	802e502 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 802e4fe:	2303      	movs	r3, #3
 802e500:	e065      	b.n	802e5ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e502:	687b      	ldr	r3, [r7, #4]
 802e504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e508:	687b      	ldr	r3, [r7, #4]
 802e50a:	32b0      	adds	r2, #176	; 0xb0
 802e50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802e512:	78fb      	ldrb	r3, [r7, #3]
 802e514:	f003 020f 	and.w	r2, r3, #15
 802e518:	6879      	ldr	r1, [r7, #4]
 802e51a:	4613      	mov	r3, r2
 802e51c:	009b      	lsls	r3, r3, #2
 802e51e:	4413      	add	r3, r2
 802e520:	009b      	lsls	r3, r3, #2
 802e522:	440b      	add	r3, r1
 802e524:	3318      	adds	r3, #24
 802e526:	681b      	ldr	r3, [r3, #0]
 802e528:	2b00      	cmp	r3, #0
 802e52a:	d02f      	beq.n	802e58c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 802e52c:	78fb      	ldrb	r3, [r7, #3]
 802e52e:	f003 020f 	and.w	r2, r3, #15
 802e532:	6879      	ldr	r1, [r7, #4]
 802e534:	4613      	mov	r3, r2
 802e536:	009b      	lsls	r3, r3, #2
 802e538:	4413      	add	r3, r2
 802e53a:	009b      	lsls	r3, r3, #2
 802e53c:	440b      	add	r3, r1
 802e53e:	3318      	adds	r3, #24
 802e540:	681a      	ldr	r2, [r3, #0]
 802e542:	78fb      	ldrb	r3, [r7, #3]
 802e544:	f003 010f 	and.w	r1, r3, #15
 802e548:	68f8      	ldr	r0, [r7, #12]
 802e54a:	460b      	mov	r3, r1
 802e54c:	00db      	lsls	r3, r3, #3
 802e54e:	440b      	add	r3, r1
 802e550:	009b      	lsls	r3, r3, #2
 802e552:	4403      	add	r3, r0
 802e554:	3348      	adds	r3, #72	; 0x48
 802e556:	681b      	ldr	r3, [r3, #0]
 802e558:	fbb2 f1f3 	udiv	r1, r2, r3
 802e55c:	fb01 f303 	mul.w	r3, r1, r3
 802e560:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802e562:	2b00      	cmp	r3, #0
 802e564:	d112      	bne.n	802e58c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802e566:	78fb      	ldrb	r3, [r7, #3]
 802e568:	f003 020f 	and.w	r2, r3, #15
 802e56c:	6879      	ldr	r1, [r7, #4]
 802e56e:	4613      	mov	r3, r2
 802e570:	009b      	lsls	r3, r3, #2
 802e572:	4413      	add	r3, r2
 802e574:	009b      	lsls	r3, r3, #2
 802e576:	440b      	add	r3, r1
 802e578:	3318      	adds	r3, #24
 802e57a:	2200      	movs	r2, #0
 802e57c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802e57e:	78f9      	ldrb	r1, [r7, #3]
 802e580:	2300      	movs	r3, #0
 802e582:	2200      	movs	r2, #0
 802e584:	6878      	ldr	r0, [r7, #4]
 802e586:	f002 fbf8 	bl	8030d7a <USBD_LL_Transmit>
 802e58a:	e01f      	b.n	802e5cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 802e58c:	68bb      	ldr	r3, [r7, #8]
 802e58e:	2200      	movs	r2, #0
 802e590:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 802e594:	687b      	ldr	r3, [r7, #4]
 802e596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e59a:	687a      	ldr	r2, [r7, #4]
 802e59c:	33b0      	adds	r3, #176	; 0xb0
 802e59e:	009b      	lsls	r3, r3, #2
 802e5a0:	4413      	add	r3, r2
 802e5a2:	685b      	ldr	r3, [r3, #4]
 802e5a4:	691b      	ldr	r3, [r3, #16]
 802e5a6:	2b00      	cmp	r3, #0
 802e5a8:	d010      	beq.n	802e5cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802e5aa:	687b      	ldr	r3, [r7, #4]
 802e5ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e5b0:	687a      	ldr	r2, [r7, #4]
 802e5b2:	33b0      	adds	r3, #176	; 0xb0
 802e5b4:	009b      	lsls	r3, r3, #2
 802e5b6:	4413      	add	r3, r2
 802e5b8:	685b      	ldr	r3, [r3, #4]
 802e5ba:	691b      	ldr	r3, [r3, #16]
 802e5bc:	68ba      	ldr	r2, [r7, #8]
 802e5be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 802e5c2:	68ba      	ldr	r2, [r7, #8]
 802e5c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802e5c8:	78fa      	ldrb	r2, [r7, #3]
 802e5ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 802e5cc:	2300      	movs	r3, #0
}
 802e5ce:	4618      	mov	r0, r3
 802e5d0:	3710      	adds	r7, #16
 802e5d2:	46bd      	mov	sp, r7
 802e5d4:	bd80      	pop	{r7, pc}

0802e5d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802e5d6:	b580      	push	{r7, lr}
 802e5d8:	b084      	sub	sp, #16
 802e5da:	af00      	add	r7, sp, #0
 802e5dc:	6078      	str	r0, [r7, #4]
 802e5de:	460b      	mov	r3, r1
 802e5e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e5e2:	687b      	ldr	r3, [r7, #4]
 802e5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e5e8:	687b      	ldr	r3, [r7, #4]
 802e5ea:	32b0      	adds	r2, #176	; 0xb0
 802e5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e5f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802e5f2:	687b      	ldr	r3, [r7, #4]
 802e5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e5f8:	687b      	ldr	r3, [r7, #4]
 802e5fa:	32b0      	adds	r2, #176	; 0xb0
 802e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e600:	2b00      	cmp	r3, #0
 802e602:	d101      	bne.n	802e608 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802e604:	2303      	movs	r3, #3
 802e606:	e01a      	b.n	802e63e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802e608:	78fb      	ldrb	r3, [r7, #3]
 802e60a:	4619      	mov	r1, r3
 802e60c:	6878      	ldr	r0, [r7, #4]
 802e60e:	f002 fbf6 	bl	8030dfe <USBD_LL_GetRxDataSize>
 802e612:	4602      	mov	r2, r0
 802e614:	68fb      	ldr	r3, [r7, #12]
 802e616:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802e61a:	687b      	ldr	r3, [r7, #4]
 802e61c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e620:	687a      	ldr	r2, [r7, #4]
 802e622:	33b0      	adds	r3, #176	; 0xb0
 802e624:	009b      	lsls	r3, r3, #2
 802e626:	4413      	add	r3, r2
 802e628:	685b      	ldr	r3, [r3, #4]
 802e62a:	68db      	ldr	r3, [r3, #12]
 802e62c:	68fa      	ldr	r2, [r7, #12]
 802e62e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 802e632:	68fa      	ldr	r2, [r7, #12]
 802e634:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802e638:	4611      	mov	r1, r2
 802e63a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802e63c:	2300      	movs	r3, #0
}
 802e63e:	4618      	mov	r0, r3
 802e640:	3710      	adds	r7, #16
 802e642:	46bd      	mov	sp, r7
 802e644:	bd80      	pop	{r7, pc}

0802e646 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802e646:	b580      	push	{r7, lr}
 802e648:	b084      	sub	sp, #16
 802e64a:	af00      	add	r7, sp, #0
 802e64c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e64e:	687b      	ldr	r3, [r7, #4]
 802e650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e654:	687b      	ldr	r3, [r7, #4]
 802e656:	32b0      	adds	r2, #176	; 0xb0
 802e658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e65c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802e65e:	68fb      	ldr	r3, [r7, #12]
 802e660:	2b00      	cmp	r3, #0
 802e662:	d101      	bne.n	802e668 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802e664:	2303      	movs	r3, #3
 802e666:	e025      	b.n	802e6b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802e668:	687b      	ldr	r3, [r7, #4]
 802e66a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e66e:	687a      	ldr	r2, [r7, #4]
 802e670:	33b0      	adds	r3, #176	; 0xb0
 802e672:	009b      	lsls	r3, r3, #2
 802e674:	4413      	add	r3, r2
 802e676:	685b      	ldr	r3, [r3, #4]
 802e678:	2b00      	cmp	r3, #0
 802e67a:	d01a      	beq.n	802e6b2 <USBD_CDC_EP0_RxReady+0x6c>
 802e67c:	68fb      	ldr	r3, [r7, #12]
 802e67e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 802e682:	2bff      	cmp	r3, #255	; 0xff
 802e684:	d015      	beq.n	802e6b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802e686:	687b      	ldr	r3, [r7, #4]
 802e688:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e68c:	687a      	ldr	r2, [r7, #4]
 802e68e:	33b0      	adds	r3, #176	; 0xb0
 802e690:	009b      	lsls	r3, r3, #2
 802e692:	4413      	add	r3, r2
 802e694:	685b      	ldr	r3, [r3, #4]
 802e696:	689b      	ldr	r3, [r3, #8]
 802e698:	68fa      	ldr	r2, [r7, #12]
 802e69a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 802e69e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 802e6a0:	68fa      	ldr	r2, [r7, #12]
 802e6a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802e6a6:	b292      	uxth	r2, r2
 802e6a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802e6aa:	68fb      	ldr	r3, [r7, #12]
 802e6ac:	22ff      	movs	r2, #255	; 0xff
 802e6ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 802e6b2:	2300      	movs	r3, #0
}
 802e6b4:	4618      	mov	r0, r3
 802e6b6:	3710      	adds	r7, #16
 802e6b8:	46bd      	mov	sp, r7
 802e6ba:	bd80      	pop	{r7, pc}

0802e6bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802e6bc:	b580      	push	{r7, lr}
 802e6be:	b086      	sub	sp, #24
 802e6c0:	af00      	add	r7, sp, #0
 802e6c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802e6c4:	2182      	movs	r1, #130	; 0x82
 802e6c6:	4818      	ldr	r0, [pc, #96]	; (802e728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802e6c8:	f000 fd4f 	bl	802f16a <USBD_GetEpDesc>
 802e6cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802e6ce:	2101      	movs	r1, #1
 802e6d0:	4815      	ldr	r0, [pc, #84]	; (802e728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802e6d2:	f000 fd4a 	bl	802f16a <USBD_GetEpDesc>
 802e6d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802e6d8:	2181      	movs	r1, #129	; 0x81
 802e6da:	4813      	ldr	r0, [pc, #76]	; (802e728 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802e6dc:	f000 fd45 	bl	802f16a <USBD_GetEpDesc>
 802e6e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802e6e2:	697b      	ldr	r3, [r7, #20]
 802e6e4:	2b00      	cmp	r3, #0
 802e6e6:	d002      	beq.n	802e6ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802e6e8:	697b      	ldr	r3, [r7, #20]
 802e6ea:	2210      	movs	r2, #16
 802e6ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802e6ee:	693b      	ldr	r3, [r7, #16]
 802e6f0:	2b00      	cmp	r3, #0
 802e6f2:	d006      	beq.n	802e702 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802e6f4:	693b      	ldr	r3, [r7, #16]
 802e6f6:	2200      	movs	r2, #0
 802e6f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e6fc:	711a      	strb	r2, [r3, #4]
 802e6fe:	2200      	movs	r2, #0
 802e700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802e702:	68fb      	ldr	r3, [r7, #12]
 802e704:	2b00      	cmp	r3, #0
 802e706:	d006      	beq.n	802e716 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802e708:	68fb      	ldr	r3, [r7, #12]
 802e70a:	2200      	movs	r2, #0
 802e70c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e710:	711a      	strb	r2, [r3, #4]
 802e712:	2200      	movs	r2, #0
 802e714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802e716:	687b      	ldr	r3, [r7, #4]
 802e718:	2243      	movs	r2, #67	; 0x43
 802e71a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802e71c:	4b02      	ldr	r3, [pc, #8]	; (802e728 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 802e71e:	4618      	mov	r0, r3
 802e720:	3718      	adds	r7, #24
 802e722:	46bd      	mov	sp, r7
 802e724:	bd80      	pop	{r7, pc}
 802e726:	bf00      	nop
 802e728:	20000188 	.word	0x20000188

0802e72c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802e72c:	b580      	push	{r7, lr}
 802e72e:	b086      	sub	sp, #24
 802e730:	af00      	add	r7, sp, #0
 802e732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802e734:	2182      	movs	r1, #130	; 0x82
 802e736:	4818      	ldr	r0, [pc, #96]	; (802e798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802e738:	f000 fd17 	bl	802f16a <USBD_GetEpDesc>
 802e73c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802e73e:	2101      	movs	r1, #1
 802e740:	4815      	ldr	r0, [pc, #84]	; (802e798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802e742:	f000 fd12 	bl	802f16a <USBD_GetEpDesc>
 802e746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802e748:	2181      	movs	r1, #129	; 0x81
 802e74a:	4813      	ldr	r0, [pc, #76]	; (802e798 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802e74c:	f000 fd0d 	bl	802f16a <USBD_GetEpDesc>
 802e750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802e752:	697b      	ldr	r3, [r7, #20]
 802e754:	2b00      	cmp	r3, #0
 802e756:	d002      	beq.n	802e75e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802e758:	697b      	ldr	r3, [r7, #20]
 802e75a:	2210      	movs	r2, #16
 802e75c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802e75e:	693b      	ldr	r3, [r7, #16]
 802e760:	2b00      	cmp	r3, #0
 802e762:	d006      	beq.n	802e772 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802e764:	693b      	ldr	r3, [r7, #16]
 802e766:	2200      	movs	r2, #0
 802e768:	711a      	strb	r2, [r3, #4]
 802e76a:	2200      	movs	r2, #0
 802e76c:	f042 0202 	orr.w	r2, r2, #2
 802e770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802e772:	68fb      	ldr	r3, [r7, #12]
 802e774:	2b00      	cmp	r3, #0
 802e776:	d006      	beq.n	802e786 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802e778:	68fb      	ldr	r3, [r7, #12]
 802e77a:	2200      	movs	r2, #0
 802e77c:	711a      	strb	r2, [r3, #4]
 802e77e:	2200      	movs	r2, #0
 802e780:	f042 0202 	orr.w	r2, r2, #2
 802e784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	2243      	movs	r2, #67	; 0x43
 802e78a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802e78c:	4b02      	ldr	r3, [pc, #8]	; (802e798 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 802e78e:	4618      	mov	r0, r3
 802e790:	3718      	adds	r7, #24
 802e792:	46bd      	mov	sp, r7
 802e794:	bd80      	pop	{r7, pc}
 802e796:	bf00      	nop
 802e798:	20000188 	.word	0x20000188

0802e79c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802e79c:	b580      	push	{r7, lr}
 802e79e:	b086      	sub	sp, #24
 802e7a0:	af00      	add	r7, sp, #0
 802e7a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802e7a4:	2182      	movs	r1, #130	; 0x82
 802e7a6:	4818      	ldr	r0, [pc, #96]	; (802e808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802e7a8:	f000 fcdf 	bl	802f16a <USBD_GetEpDesc>
 802e7ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802e7ae:	2101      	movs	r1, #1
 802e7b0:	4815      	ldr	r0, [pc, #84]	; (802e808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802e7b2:	f000 fcda 	bl	802f16a <USBD_GetEpDesc>
 802e7b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802e7b8:	2181      	movs	r1, #129	; 0x81
 802e7ba:	4813      	ldr	r0, [pc, #76]	; (802e808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802e7bc:	f000 fcd5 	bl	802f16a <USBD_GetEpDesc>
 802e7c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802e7c2:	697b      	ldr	r3, [r7, #20]
 802e7c4:	2b00      	cmp	r3, #0
 802e7c6:	d002      	beq.n	802e7ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802e7c8:	697b      	ldr	r3, [r7, #20]
 802e7ca:	2210      	movs	r2, #16
 802e7cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802e7ce:	693b      	ldr	r3, [r7, #16]
 802e7d0:	2b00      	cmp	r3, #0
 802e7d2:	d006      	beq.n	802e7e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802e7d4:	693b      	ldr	r3, [r7, #16]
 802e7d6:	2200      	movs	r2, #0
 802e7d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e7dc:	711a      	strb	r2, [r3, #4]
 802e7de:	2200      	movs	r2, #0
 802e7e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802e7e2:	68fb      	ldr	r3, [r7, #12]
 802e7e4:	2b00      	cmp	r3, #0
 802e7e6:	d006      	beq.n	802e7f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802e7e8:	68fb      	ldr	r3, [r7, #12]
 802e7ea:	2200      	movs	r2, #0
 802e7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e7f0:	711a      	strb	r2, [r3, #4]
 802e7f2:	2200      	movs	r2, #0
 802e7f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802e7f6:	687b      	ldr	r3, [r7, #4]
 802e7f8:	2243      	movs	r2, #67	; 0x43
 802e7fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802e7fc:	4b02      	ldr	r3, [pc, #8]	; (802e808 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 802e7fe:	4618      	mov	r0, r3
 802e800:	3718      	adds	r7, #24
 802e802:	46bd      	mov	sp, r7
 802e804:	bd80      	pop	{r7, pc}
 802e806:	bf00      	nop
 802e808:	20000188 	.word	0x20000188

0802e80c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802e80c:	b480      	push	{r7}
 802e80e:	b083      	sub	sp, #12
 802e810:	af00      	add	r7, sp, #0
 802e812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802e814:	687b      	ldr	r3, [r7, #4]
 802e816:	220a      	movs	r2, #10
 802e818:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802e81a:	4b03      	ldr	r3, [pc, #12]	; (802e828 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802e81c:	4618      	mov	r0, r3
 802e81e:	370c      	adds	r7, #12
 802e820:	46bd      	mov	sp, r7
 802e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e826:	4770      	bx	lr
 802e828:	20000144 	.word	0x20000144

0802e82c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802e82c:	b480      	push	{r7}
 802e82e:	b083      	sub	sp, #12
 802e830:	af00      	add	r7, sp, #0
 802e832:	6078      	str	r0, [r7, #4]
 802e834:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802e836:	683b      	ldr	r3, [r7, #0]
 802e838:	2b00      	cmp	r3, #0
 802e83a:	d101      	bne.n	802e840 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802e83c:	2303      	movs	r3, #3
 802e83e:	e009      	b.n	802e854 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e846:	687a      	ldr	r2, [r7, #4]
 802e848:	33b0      	adds	r3, #176	; 0xb0
 802e84a:	009b      	lsls	r3, r3, #2
 802e84c:	4413      	add	r3, r2
 802e84e:	683a      	ldr	r2, [r7, #0]
 802e850:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 802e852:	2300      	movs	r3, #0
}
 802e854:	4618      	mov	r0, r3
 802e856:	370c      	adds	r7, #12
 802e858:	46bd      	mov	sp, r7
 802e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e85e:	4770      	bx	lr

0802e860 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802e860:	b480      	push	{r7}
 802e862:	b087      	sub	sp, #28
 802e864:	af00      	add	r7, sp, #0
 802e866:	60f8      	str	r0, [r7, #12]
 802e868:	60b9      	str	r1, [r7, #8]
 802e86a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e86c:	68fb      	ldr	r3, [r7, #12]
 802e86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e872:	68fb      	ldr	r3, [r7, #12]
 802e874:	32b0      	adds	r2, #176	; 0xb0
 802e876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e87a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 802e87c:	697b      	ldr	r3, [r7, #20]
 802e87e:	2b00      	cmp	r3, #0
 802e880:	d101      	bne.n	802e886 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 802e882:	2303      	movs	r3, #3
 802e884:	e008      	b.n	802e898 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802e886:	697b      	ldr	r3, [r7, #20]
 802e888:	68ba      	ldr	r2, [r7, #8]
 802e88a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802e88e:	697b      	ldr	r3, [r7, #20]
 802e890:	687a      	ldr	r2, [r7, #4]
 802e892:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802e896:	2300      	movs	r3, #0
}
 802e898:	4618      	mov	r0, r3
 802e89a:	371c      	adds	r7, #28
 802e89c:	46bd      	mov	sp, r7
 802e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8a2:	4770      	bx	lr

0802e8a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802e8a4:	b480      	push	{r7}
 802e8a6:	b085      	sub	sp, #20
 802e8a8:	af00      	add	r7, sp, #0
 802e8aa:	6078      	str	r0, [r7, #4]
 802e8ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e8ae:	687b      	ldr	r3, [r7, #4]
 802e8b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e8b4:	687b      	ldr	r3, [r7, #4]
 802e8b6:	32b0      	adds	r2, #176	; 0xb0
 802e8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e8bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802e8be:	68fb      	ldr	r3, [r7, #12]
 802e8c0:	2b00      	cmp	r3, #0
 802e8c2:	d101      	bne.n	802e8c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 802e8c4:	2303      	movs	r3, #3
 802e8c6:	e004      	b.n	802e8d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802e8c8:	68fb      	ldr	r3, [r7, #12]
 802e8ca:	683a      	ldr	r2, [r7, #0]
 802e8cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 802e8d0:	2300      	movs	r3, #0
}
 802e8d2:	4618      	mov	r0, r3
 802e8d4:	3714      	adds	r7, #20
 802e8d6:	46bd      	mov	sp, r7
 802e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8dc:	4770      	bx	lr
	...

0802e8e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802e8e0:	b580      	push	{r7, lr}
 802e8e2:	b084      	sub	sp, #16
 802e8e4:	af00      	add	r7, sp, #0
 802e8e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e8e8:	687b      	ldr	r3, [r7, #4]
 802e8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e8ee:	687b      	ldr	r3, [r7, #4]
 802e8f0:	32b0      	adds	r2, #176	; 0xb0
 802e8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e8f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802e8f8:	2301      	movs	r3, #1
 802e8fa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802e8fc:	687b      	ldr	r3, [r7, #4]
 802e8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e902:	687b      	ldr	r3, [r7, #4]
 802e904:	32b0      	adds	r2, #176	; 0xb0
 802e906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e90a:	2b00      	cmp	r3, #0
 802e90c:	d101      	bne.n	802e912 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802e90e:	2303      	movs	r3, #3
 802e910:	e025      	b.n	802e95e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 802e912:	68bb      	ldr	r3, [r7, #8]
 802e914:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802e918:	2b00      	cmp	r3, #0
 802e91a:	d11f      	bne.n	802e95c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 802e91c:	68bb      	ldr	r3, [r7, #8]
 802e91e:	2201      	movs	r2, #1
 802e920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802e924:	4b10      	ldr	r3, [pc, #64]	; (802e968 <USBD_CDC_TransmitPacket+0x88>)
 802e926:	781b      	ldrb	r3, [r3, #0]
 802e928:	f003 020f 	and.w	r2, r3, #15
 802e92c:	68bb      	ldr	r3, [r7, #8]
 802e92e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 802e932:	6878      	ldr	r0, [r7, #4]
 802e934:	4613      	mov	r3, r2
 802e936:	009b      	lsls	r3, r3, #2
 802e938:	4413      	add	r3, r2
 802e93a:	009b      	lsls	r3, r3, #2
 802e93c:	4403      	add	r3, r0
 802e93e:	3318      	adds	r3, #24
 802e940:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802e942:	4b09      	ldr	r3, [pc, #36]	; (802e968 <USBD_CDC_TransmitPacket+0x88>)
 802e944:	7819      	ldrb	r1, [r3, #0]
 802e946:	68bb      	ldr	r3, [r7, #8]
 802e948:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802e94c:	68bb      	ldr	r3, [r7, #8]
 802e94e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 802e952:	6878      	ldr	r0, [r7, #4]
 802e954:	f002 fa11 	bl	8030d7a <USBD_LL_Transmit>

    ret = USBD_OK;
 802e958:	2300      	movs	r3, #0
 802e95a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 802e95c:	7bfb      	ldrb	r3, [r7, #15]
}
 802e95e:	4618      	mov	r0, r3
 802e960:	3710      	adds	r7, #16
 802e962:	46bd      	mov	sp, r7
 802e964:	bd80      	pop	{r7, pc}
 802e966:	bf00      	nop
 802e968:	200001cb 	.word	0x200001cb

0802e96c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802e96c:	b580      	push	{r7, lr}
 802e96e:	b084      	sub	sp, #16
 802e970:	af00      	add	r7, sp, #0
 802e972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e97a:	687b      	ldr	r3, [r7, #4]
 802e97c:	32b0      	adds	r2, #176	; 0xb0
 802e97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e982:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802e984:	687b      	ldr	r3, [r7, #4]
 802e986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e98a:	687b      	ldr	r3, [r7, #4]
 802e98c:	32b0      	adds	r2, #176	; 0xb0
 802e98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e992:	2b00      	cmp	r3, #0
 802e994:	d101      	bne.n	802e99a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802e996:	2303      	movs	r3, #3
 802e998:	e018      	b.n	802e9cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e99a:	687b      	ldr	r3, [r7, #4]
 802e99c:	7c1b      	ldrb	r3, [r3, #16]
 802e99e:	2b00      	cmp	r3, #0
 802e9a0:	d10a      	bne.n	802e9b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e9a2:	4b0c      	ldr	r3, [pc, #48]	; (802e9d4 <USBD_CDC_ReceivePacket+0x68>)
 802e9a4:	7819      	ldrb	r1, [r3, #0]
 802e9a6:	68fb      	ldr	r3, [r7, #12]
 802e9a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e9ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e9b0:	6878      	ldr	r0, [r7, #4]
 802e9b2:	f002 fa03 	bl	8030dbc <USBD_LL_PrepareReceive>
 802e9b6:	e008      	b.n	802e9ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e9b8:	4b06      	ldr	r3, [pc, #24]	; (802e9d4 <USBD_CDC_ReceivePacket+0x68>)
 802e9ba:	7819      	ldrb	r1, [r3, #0]
 802e9bc:	68fb      	ldr	r3, [r7, #12]
 802e9be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e9c2:	2340      	movs	r3, #64	; 0x40
 802e9c4:	6878      	ldr	r0, [r7, #4]
 802e9c6:	f002 f9f9 	bl	8030dbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802e9ca:	2300      	movs	r3, #0
}
 802e9cc:	4618      	mov	r0, r3
 802e9ce:	3710      	adds	r7, #16
 802e9d0:	46bd      	mov	sp, r7
 802e9d2:	bd80      	pop	{r7, pc}
 802e9d4:	200001cc 	.word	0x200001cc

0802e9d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802e9d8:	b580      	push	{r7, lr}
 802e9da:	b086      	sub	sp, #24
 802e9dc:	af00      	add	r7, sp, #0
 802e9de:	60f8      	str	r0, [r7, #12]
 802e9e0:	60b9      	str	r1, [r7, #8]
 802e9e2:	4613      	mov	r3, r2
 802e9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802e9e6:	68fb      	ldr	r3, [r7, #12]
 802e9e8:	2b00      	cmp	r3, #0
 802e9ea:	d101      	bne.n	802e9f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802e9ec:	2303      	movs	r3, #3
 802e9ee:	e01f      	b.n	802ea30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802e9f0:	68fb      	ldr	r3, [r7, #12]
 802e9f2:	2200      	movs	r2, #0
 802e9f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802e9f8:	68fb      	ldr	r3, [r7, #12]
 802e9fa:	2200      	movs	r2, #0
 802e9fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802ea00:	68fb      	ldr	r3, [r7, #12]
 802ea02:	2200      	movs	r2, #0
 802ea04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802ea08:	68bb      	ldr	r3, [r7, #8]
 802ea0a:	2b00      	cmp	r3, #0
 802ea0c:	d003      	beq.n	802ea16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802ea0e:	68fb      	ldr	r3, [r7, #12]
 802ea10:	68ba      	ldr	r2, [r7, #8]
 802ea12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802ea16:	68fb      	ldr	r3, [r7, #12]
 802ea18:	2201      	movs	r2, #1
 802ea1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802ea1e:	68fb      	ldr	r3, [r7, #12]
 802ea20:	79fa      	ldrb	r2, [r7, #7]
 802ea22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802ea24:	68f8      	ldr	r0, [r7, #12]
 802ea26:	f002 f829 	bl	8030a7c <USBD_LL_Init>
 802ea2a:	4603      	mov	r3, r0
 802ea2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 802ea2e:	7dfb      	ldrb	r3, [r7, #23]
}
 802ea30:	4618      	mov	r0, r3
 802ea32:	3718      	adds	r7, #24
 802ea34:	46bd      	mov	sp, r7
 802ea36:	bd80      	pop	{r7, pc}

0802ea38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802ea38:	b580      	push	{r7, lr}
 802ea3a:	b084      	sub	sp, #16
 802ea3c:	af00      	add	r7, sp, #0
 802ea3e:	6078      	str	r0, [r7, #4]
 802ea40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802ea42:	2300      	movs	r3, #0
 802ea44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802ea46:	683b      	ldr	r3, [r7, #0]
 802ea48:	2b00      	cmp	r3, #0
 802ea4a:	d101      	bne.n	802ea50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802ea4c:	2303      	movs	r3, #3
 802ea4e:	e025      	b.n	802ea9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	683a      	ldr	r2, [r7, #0]
 802ea54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802ea58:	687b      	ldr	r3, [r7, #4]
 802ea5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ea5e:	687b      	ldr	r3, [r7, #4]
 802ea60:	32ae      	adds	r2, #174	; 0xae
 802ea62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ea66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ea68:	2b00      	cmp	r3, #0
 802ea6a:	d00f      	beq.n	802ea8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802ea6c:	687b      	ldr	r3, [r7, #4]
 802ea6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ea72:	687b      	ldr	r3, [r7, #4]
 802ea74:	32ae      	adds	r2, #174	; 0xae
 802ea76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ea7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ea7c:	f107 020e 	add.w	r2, r7, #14
 802ea80:	4610      	mov	r0, r2
 802ea82:	4798      	blx	r3
 802ea84:	4602      	mov	r2, r0
 802ea86:	687b      	ldr	r3, [r7, #4]
 802ea88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 802ea8c:	687b      	ldr	r3, [r7, #4]
 802ea8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802ea92:	1c5a      	adds	r2, r3, #1
 802ea94:	687b      	ldr	r3, [r7, #4]
 802ea96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 802ea9a:	2300      	movs	r3, #0
}
 802ea9c:	4618      	mov	r0, r3
 802ea9e:	3710      	adds	r7, #16
 802eaa0:	46bd      	mov	sp, r7
 802eaa2:	bd80      	pop	{r7, pc}

0802eaa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802eaa4:	b580      	push	{r7, lr}
 802eaa6:	b082      	sub	sp, #8
 802eaa8:	af00      	add	r7, sp, #0
 802eaaa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802eaac:	6878      	ldr	r0, [r7, #4]
 802eaae:	f002 f87b 	bl	8030ba8 <USBD_LL_Start>
 802eab2:	4603      	mov	r3, r0
}
 802eab4:	4618      	mov	r0, r3
 802eab6:	3708      	adds	r7, #8
 802eab8:	46bd      	mov	sp, r7
 802eaba:	bd80      	pop	{r7, pc}

0802eabc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 802eabc:	b480      	push	{r7}
 802eabe:	b083      	sub	sp, #12
 802eac0:	af00      	add	r7, sp, #0
 802eac2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802eac4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802eac6:	4618      	mov	r0, r3
 802eac8:	370c      	adds	r7, #12
 802eaca:	46bd      	mov	sp, r7
 802eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ead0:	4770      	bx	lr

0802ead2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802ead2:	b580      	push	{r7, lr}
 802ead4:	b084      	sub	sp, #16
 802ead6:	af00      	add	r7, sp, #0
 802ead8:	6078      	str	r0, [r7, #4]
 802eada:	460b      	mov	r3, r1
 802eadc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802eade:	2300      	movs	r3, #0
 802eae0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802eae2:	687b      	ldr	r3, [r7, #4]
 802eae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eae8:	2b00      	cmp	r3, #0
 802eaea:	d009      	beq.n	802eb00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802eaec:	687b      	ldr	r3, [r7, #4]
 802eaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eaf2:	681b      	ldr	r3, [r3, #0]
 802eaf4:	78fa      	ldrb	r2, [r7, #3]
 802eaf6:	4611      	mov	r1, r2
 802eaf8:	6878      	ldr	r0, [r7, #4]
 802eafa:	4798      	blx	r3
 802eafc:	4603      	mov	r3, r0
 802eafe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802eb00:	7bfb      	ldrb	r3, [r7, #15]
}
 802eb02:	4618      	mov	r0, r3
 802eb04:	3710      	adds	r7, #16
 802eb06:	46bd      	mov	sp, r7
 802eb08:	bd80      	pop	{r7, pc}

0802eb0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802eb0a:	b580      	push	{r7, lr}
 802eb0c:	b084      	sub	sp, #16
 802eb0e:	af00      	add	r7, sp, #0
 802eb10:	6078      	str	r0, [r7, #4]
 802eb12:	460b      	mov	r3, r1
 802eb14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802eb16:	2300      	movs	r3, #0
 802eb18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 802eb1a:	687b      	ldr	r3, [r7, #4]
 802eb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eb20:	685b      	ldr	r3, [r3, #4]
 802eb22:	78fa      	ldrb	r2, [r7, #3]
 802eb24:	4611      	mov	r1, r2
 802eb26:	6878      	ldr	r0, [r7, #4]
 802eb28:	4798      	blx	r3
 802eb2a:	4603      	mov	r3, r0
 802eb2c:	2b00      	cmp	r3, #0
 802eb2e:	d001      	beq.n	802eb34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802eb30:	2303      	movs	r3, #3
 802eb32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802eb34:	7bfb      	ldrb	r3, [r7, #15]
}
 802eb36:	4618      	mov	r0, r3
 802eb38:	3710      	adds	r7, #16
 802eb3a:	46bd      	mov	sp, r7
 802eb3c:	bd80      	pop	{r7, pc}

0802eb3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802eb3e:	b580      	push	{r7, lr}
 802eb40:	b084      	sub	sp, #16
 802eb42:	af00      	add	r7, sp, #0
 802eb44:	6078      	str	r0, [r7, #4]
 802eb46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802eb48:	687b      	ldr	r3, [r7, #4]
 802eb4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802eb4e:	6839      	ldr	r1, [r7, #0]
 802eb50:	4618      	mov	r0, r3
 802eb52:	f001 f908 	bl	802fd66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802eb56:	687b      	ldr	r3, [r7, #4]
 802eb58:	2201      	movs	r2, #1
 802eb5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802eb5e:	687b      	ldr	r3, [r7, #4]
 802eb60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802eb64:	461a      	mov	r2, r3
 802eb66:	687b      	ldr	r3, [r7, #4]
 802eb68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802eb72:	f003 031f 	and.w	r3, r3, #31
 802eb76:	2b02      	cmp	r3, #2
 802eb78:	d01a      	beq.n	802ebb0 <USBD_LL_SetupStage+0x72>
 802eb7a:	2b02      	cmp	r3, #2
 802eb7c:	d822      	bhi.n	802ebc4 <USBD_LL_SetupStage+0x86>
 802eb7e:	2b00      	cmp	r3, #0
 802eb80:	d002      	beq.n	802eb88 <USBD_LL_SetupStage+0x4a>
 802eb82:	2b01      	cmp	r3, #1
 802eb84:	d00a      	beq.n	802eb9c <USBD_LL_SetupStage+0x5e>
 802eb86:	e01d      	b.n	802ebc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802eb88:	687b      	ldr	r3, [r7, #4]
 802eb8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802eb8e:	4619      	mov	r1, r3
 802eb90:	6878      	ldr	r0, [r7, #4]
 802eb92:	f000 fb5f 	bl	802f254 <USBD_StdDevReq>
 802eb96:	4603      	mov	r3, r0
 802eb98:	73fb      	strb	r3, [r7, #15]
      break;
 802eb9a:	e020      	b.n	802ebde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802eb9c:	687b      	ldr	r3, [r7, #4]
 802eb9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802eba2:	4619      	mov	r1, r3
 802eba4:	6878      	ldr	r0, [r7, #4]
 802eba6:	f000 fbc7 	bl	802f338 <USBD_StdItfReq>
 802ebaa:	4603      	mov	r3, r0
 802ebac:	73fb      	strb	r3, [r7, #15]
      break;
 802ebae:	e016      	b.n	802ebde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802ebb0:	687b      	ldr	r3, [r7, #4]
 802ebb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802ebb6:	4619      	mov	r1, r3
 802ebb8:	6878      	ldr	r0, [r7, #4]
 802ebba:	f000 fc29 	bl	802f410 <USBD_StdEPReq>
 802ebbe:	4603      	mov	r3, r0
 802ebc0:	73fb      	strb	r3, [r7, #15]
      break;
 802ebc2:	e00c      	b.n	802ebde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802ebc4:	687b      	ldr	r3, [r7, #4]
 802ebc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802ebca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802ebce:	b2db      	uxtb	r3, r3
 802ebd0:	4619      	mov	r1, r3
 802ebd2:	6878      	ldr	r0, [r7, #4]
 802ebd4:	f002 f848 	bl	8030c68 <USBD_LL_StallEP>
 802ebd8:	4603      	mov	r3, r0
 802ebda:	73fb      	strb	r3, [r7, #15]
      break;
 802ebdc:	bf00      	nop
  }

  return ret;
 802ebde:	7bfb      	ldrb	r3, [r7, #15]
}
 802ebe0:	4618      	mov	r0, r3
 802ebe2:	3710      	adds	r7, #16
 802ebe4:	46bd      	mov	sp, r7
 802ebe6:	bd80      	pop	{r7, pc}

0802ebe8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802ebe8:	b580      	push	{r7, lr}
 802ebea:	b086      	sub	sp, #24
 802ebec:	af00      	add	r7, sp, #0
 802ebee:	60f8      	str	r0, [r7, #12]
 802ebf0:	460b      	mov	r3, r1
 802ebf2:	607a      	str	r2, [r7, #4]
 802ebf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802ebf6:	2300      	movs	r3, #0
 802ebf8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 802ebfa:	7afb      	ldrb	r3, [r7, #11]
 802ebfc:	2b00      	cmp	r3, #0
 802ebfe:	d16e      	bne.n	802ecde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802ec00:	68fb      	ldr	r3, [r7, #12]
 802ec02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802ec06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802ec08:	68fb      	ldr	r3, [r7, #12]
 802ec0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802ec0e:	2b03      	cmp	r3, #3
 802ec10:	f040 8098 	bne.w	802ed44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802ec14:	693b      	ldr	r3, [r7, #16]
 802ec16:	689a      	ldr	r2, [r3, #8]
 802ec18:	693b      	ldr	r3, [r7, #16]
 802ec1a:	68db      	ldr	r3, [r3, #12]
 802ec1c:	429a      	cmp	r2, r3
 802ec1e:	d913      	bls.n	802ec48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802ec20:	693b      	ldr	r3, [r7, #16]
 802ec22:	689a      	ldr	r2, [r3, #8]
 802ec24:	693b      	ldr	r3, [r7, #16]
 802ec26:	68db      	ldr	r3, [r3, #12]
 802ec28:	1ad2      	subs	r2, r2, r3
 802ec2a:	693b      	ldr	r3, [r7, #16]
 802ec2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802ec2e:	693b      	ldr	r3, [r7, #16]
 802ec30:	68da      	ldr	r2, [r3, #12]
 802ec32:	693b      	ldr	r3, [r7, #16]
 802ec34:	689b      	ldr	r3, [r3, #8]
 802ec36:	4293      	cmp	r3, r2
 802ec38:	bf28      	it	cs
 802ec3a:	4613      	movcs	r3, r2
 802ec3c:	461a      	mov	r2, r3
 802ec3e:	6879      	ldr	r1, [r7, #4]
 802ec40:	68f8      	ldr	r0, [r7, #12]
 802ec42:	f001 f984 	bl	802ff4e <USBD_CtlContinueRx>
 802ec46:	e07d      	b.n	802ed44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 802ec48:	68fb      	ldr	r3, [r7, #12]
 802ec4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802ec4e:	f003 031f 	and.w	r3, r3, #31
 802ec52:	2b02      	cmp	r3, #2
 802ec54:	d014      	beq.n	802ec80 <USBD_LL_DataOutStage+0x98>
 802ec56:	2b02      	cmp	r3, #2
 802ec58:	d81d      	bhi.n	802ec96 <USBD_LL_DataOutStage+0xae>
 802ec5a:	2b00      	cmp	r3, #0
 802ec5c:	d002      	beq.n	802ec64 <USBD_LL_DataOutStage+0x7c>
 802ec5e:	2b01      	cmp	r3, #1
 802ec60:	d003      	beq.n	802ec6a <USBD_LL_DataOutStage+0x82>
 802ec62:	e018      	b.n	802ec96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 802ec64:	2300      	movs	r3, #0
 802ec66:	75bb      	strb	r3, [r7, #22]
            break;
 802ec68:	e018      	b.n	802ec9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 802ec6a:	68fb      	ldr	r3, [r7, #12]
 802ec6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802ec70:	b2db      	uxtb	r3, r3
 802ec72:	4619      	mov	r1, r3
 802ec74:	68f8      	ldr	r0, [r7, #12]
 802ec76:	f000 fa5e 	bl	802f136 <USBD_CoreFindIF>
 802ec7a:	4603      	mov	r3, r0
 802ec7c:	75bb      	strb	r3, [r7, #22]
            break;
 802ec7e:	e00d      	b.n	802ec9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802ec80:	68fb      	ldr	r3, [r7, #12]
 802ec82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802ec86:	b2db      	uxtb	r3, r3
 802ec88:	4619      	mov	r1, r3
 802ec8a:	68f8      	ldr	r0, [r7, #12]
 802ec8c:	f000 fa60 	bl	802f150 <USBD_CoreFindEP>
 802ec90:	4603      	mov	r3, r0
 802ec92:	75bb      	strb	r3, [r7, #22]
            break;
 802ec94:	e002      	b.n	802ec9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 802ec96:	2300      	movs	r3, #0
 802ec98:	75bb      	strb	r3, [r7, #22]
            break;
 802ec9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 802ec9c:	7dbb      	ldrb	r3, [r7, #22]
 802ec9e:	2b00      	cmp	r3, #0
 802eca0:	d119      	bne.n	802ecd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eca2:	68fb      	ldr	r3, [r7, #12]
 802eca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eca8:	b2db      	uxtb	r3, r3
 802ecaa:	2b03      	cmp	r3, #3
 802ecac:	d113      	bne.n	802ecd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 802ecae:	7dba      	ldrb	r2, [r7, #22]
 802ecb0:	68fb      	ldr	r3, [r7, #12]
 802ecb2:	32ae      	adds	r2, #174	; 0xae
 802ecb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ecb8:	691b      	ldr	r3, [r3, #16]
 802ecba:	2b00      	cmp	r3, #0
 802ecbc:	d00b      	beq.n	802ecd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 802ecbe:	7dba      	ldrb	r2, [r7, #22]
 802ecc0:	68fb      	ldr	r3, [r7, #12]
 802ecc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802ecc6:	7dba      	ldrb	r2, [r7, #22]
 802ecc8:	68fb      	ldr	r3, [r7, #12]
 802ecca:	32ae      	adds	r2, #174	; 0xae
 802eccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ecd0:	691b      	ldr	r3, [r3, #16]
 802ecd2:	68f8      	ldr	r0, [r7, #12]
 802ecd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802ecd6:	68f8      	ldr	r0, [r7, #12]
 802ecd8:	f001 f94a 	bl	802ff70 <USBD_CtlSendStatus>
 802ecdc:	e032      	b.n	802ed44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802ecde:	7afb      	ldrb	r3, [r7, #11]
 802ece0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802ece4:	b2db      	uxtb	r3, r3
 802ece6:	4619      	mov	r1, r3
 802ece8:	68f8      	ldr	r0, [r7, #12]
 802ecea:	f000 fa31 	bl	802f150 <USBD_CoreFindEP>
 802ecee:	4603      	mov	r3, r0
 802ecf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802ecf2:	7dbb      	ldrb	r3, [r7, #22]
 802ecf4:	2bff      	cmp	r3, #255	; 0xff
 802ecf6:	d025      	beq.n	802ed44 <USBD_LL_DataOutStage+0x15c>
 802ecf8:	7dbb      	ldrb	r3, [r7, #22]
 802ecfa:	2b00      	cmp	r3, #0
 802ecfc:	d122      	bne.n	802ed44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ecfe:	68fb      	ldr	r3, [r7, #12]
 802ed00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802ed04:	b2db      	uxtb	r3, r3
 802ed06:	2b03      	cmp	r3, #3
 802ed08:	d117      	bne.n	802ed3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 802ed0a:	7dba      	ldrb	r2, [r7, #22]
 802ed0c:	68fb      	ldr	r3, [r7, #12]
 802ed0e:	32ae      	adds	r2, #174	; 0xae
 802ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ed14:	699b      	ldr	r3, [r3, #24]
 802ed16:	2b00      	cmp	r3, #0
 802ed18:	d00f      	beq.n	802ed3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 802ed1a:	7dba      	ldrb	r2, [r7, #22]
 802ed1c:	68fb      	ldr	r3, [r7, #12]
 802ed1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 802ed22:	7dba      	ldrb	r2, [r7, #22]
 802ed24:	68fb      	ldr	r3, [r7, #12]
 802ed26:	32ae      	adds	r2, #174	; 0xae
 802ed28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ed2c:	699b      	ldr	r3, [r3, #24]
 802ed2e:	7afa      	ldrb	r2, [r7, #11]
 802ed30:	4611      	mov	r1, r2
 802ed32:	68f8      	ldr	r0, [r7, #12]
 802ed34:	4798      	blx	r3
 802ed36:	4603      	mov	r3, r0
 802ed38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 802ed3a:	7dfb      	ldrb	r3, [r7, #23]
 802ed3c:	2b00      	cmp	r3, #0
 802ed3e:	d001      	beq.n	802ed44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802ed40:	7dfb      	ldrb	r3, [r7, #23]
 802ed42:	e000      	b.n	802ed46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 802ed44:	2300      	movs	r3, #0
}
 802ed46:	4618      	mov	r0, r3
 802ed48:	3718      	adds	r7, #24
 802ed4a:	46bd      	mov	sp, r7
 802ed4c:	bd80      	pop	{r7, pc}

0802ed4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802ed4e:	b580      	push	{r7, lr}
 802ed50:	b086      	sub	sp, #24
 802ed52:	af00      	add	r7, sp, #0
 802ed54:	60f8      	str	r0, [r7, #12]
 802ed56:	460b      	mov	r3, r1
 802ed58:	607a      	str	r2, [r7, #4]
 802ed5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802ed5c:	7afb      	ldrb	r3, [r7, #11]
 802ed5e:	2b00      	cmp	r3, #0
 802ed60:	d16f      	bne.n	802ee42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 802ed62:	68fb      	ldr	r3, [r7, #12]
 802ed64:	3314      	adds	r3, #20
 802ed66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802ed68:	68fb      	ldr	r3, [r7, #12]
 802ed6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802ed6e:	2b02      	cmp	r3, #2
 802ed70:	d15a      	bne.n	802ee28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 802ed72:	693b      	ldr	r3, [r7, #16]
 802ed74:	689a      	ldr	r2, [r3, #8]
 802ed76:	693b      	ldr	r3, [r7, #16]
 802ed78:	68db      	ldr	r3, [r3, #12]
 802ed7a:	429a      	cmp	r2, r3
 802ed7c:	d914      	bls.n	802eda8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802ed7e:	693b      	ldr	r3, [r7, #16]
 802ed80:	689a      	ldr	r2, [r3, #8]
 802ed82:	693b      	ldr	r3, [r7, #16]
 802ed84:	68db      	ldr	r3, [r3, #12]
 802ed86:	1ad2      	subs	r2, r2, r3
 802ed88:	693b      	ldr	r3, [r7, #16]
 802ed8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802ed8c:	693b      	ldr	r3, [r7, #16]
 802ed8e:	689b      	ldr	r3, [r3, #8]
 802ed90:	461a      	mov	r2, r3
 802ed92:	6879      	ldr	r1, [r7, #4]
 802ed94:	68f8      	ldr	r0, [r7, #12]
 802ed96:	f001 f8ac 	bl	802fef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802ed9a:	2300      	movs	r3, #0
 802ed9c:	2200      	movs	r2, #0
 802ed9e:	2100      	movs	r1, #0
 802eda0:	68f8      	ldr	r0, [r7, #12]
 802eda2:	f002 f80b 	bl	8030dbc <USBD_LL_PrepareReceive>
 802eda6:	e03f      	b.n	802ee28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802eda8:	693b      	ldr	r3, [r7, #16]
 802edaa:	68da      	ldr	r2, [r3, #12]
 802edac:	693b      	ldr	r3, [r7, #16]
 802edae:	689b      	ldr	r3, [r3, #8]
 802edb0:	429a      	cmp	r2, r3
 802edb2:	d11c      	bne.n	802edee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802edb4:	693b      	ldr	r3, [r7, #16]
 802edb6:	685a      	ldr	r2, [r3, #4]
 802edb8:	693b      	ldr	r3, [r7, #16]
 802edba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802edbc:	429a      	cmp	r2, r3
 802edbe:	d316      	bcc.n	802edee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802edc0:	693b      	ldr	r3, [r7, #16]
 802edc2:	685a      	ldr	r2, [r3, #4]
 802edc4:	68fb      	ldr	r3, [r7, #12]
 802edc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802edca:	429a      	cmp	r2, r3
 802edcc:	d20f      	bcs.n	802edee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802edce:	2200      	movs	r2, #0
 802edd0:	2100      	movs	r1, #0
 802edd2:	68f8      	ldr	r0, [r7, #12]
 802edd4:	f001 f88d 	bl	802fef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802edd8:	68fb      	ldr	r3, [r7, #12]
 802edda:	2200      	movs	r2, #0
 802eddc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802ede0:	2300      	movs	r3, #0
 802ede2:	2200      	movs	r2, #0
 802ede4:	2100      	movs	r1, #0
 802ede6:	68f8      	ldr	r0, [r7, #12]
 802ede8:	f001 ffe8 	bl	8030dbc <USBD_LL_PrepareReceive>
 802edec:	e01c      	b.n	802ee28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802edee:	68fb      	ldr	r3, [r7, #12]
 802edf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802edf4:	b2db      	uxtb	r3, r3
 802edf6:	2b03      	cmp	r3, #3
 802edf8:	d10f      	bne.n	802ee1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 802edfa:	68fb      	ldr	r3, [r7, #12]
 802edfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ee00:	68db      	ldr	r3, [r3, #12]
 802ee02:	2b00      	cmp	r3, #0
 802ee04:	d009      	beq.n	802ee1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802ee06:	68fb      	ldr	r3, [r7, #12]
 802ee08:	2200      	movs	r2, #0
 802ee0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802ee0e:	68fb      	ldr	r3, [r7, #12]
 802ee10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ee14:	68db      	ldr	r3, [r3, #12]
 802ee16:	68f8      	ldr	r0, [r7, #12]
 802ee18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802ee1a:	2180      	movs	r1, #128	; 0x80
 802ee1c:	68f8      	ldr	r0, [r7, #12]
 802ee1e:	f001 ff23 	bl	8030c68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802ee22:	68f8      	ldr	r0, [r7, #12]
 802ee24:	f001 f8b7 	bl	802ff96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802ee28:	68fb      	ldr	r3, [r7, #12]
 802ee2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802ee2e:	2b00      	cmp	r3, #0
 802ee30:	d03a      	beq.n	802eea8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 802ee32:	68f8      	ldr	r0, [r7, #12]
 802ee34:	f7ff fe42 	bl	802eabc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802ee38:	68fb      	ldr	r3, [r7, #12]
 802ee3a:	2200      	movs	r2, #0
 802ee3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802ee40:	e032      	b.n	802eea8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 802ee42:	7afb      	ldrb	r3, [r7, #11]
 802ee44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802ee48:	b2db      	uxtb	r3, r3
 802ee4a:	4619      	mov	r1, r3
 802ee4c:	68f8      	ldr	r0, [r7, #12]
 802ee4e:	f000 f97f 	bl	802f150 <USBD_CoreFindEP>
 802ee52:	4603      	mov	r3, r0
 802ee54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802ee56:	7dfb      	ldrb	r3, [r7, #23]
 802ee58:	2bff      	cmp	r3, #255	; 0xff
 802ee5a:	d025      	beq.n	802eea8 <USBD_LL_DataInStage+0x15a>
 802ee5c:	7dfb      	ldrb	r3, [r7, #23]
 802ee5e:	2b00      	cmp	r3, #0
 802ee60:	d122      	bne.n	802eea8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ee62:	68fb      	ldr	r3, [r7, #12]
 802ee64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802ee68:	b2db      	uxtb	r3, r3
 802ee6a:	2b03      	cmp	r3, #3
 802ee6c:	d11c      	bne.n	802eea8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802ee6e:	7dfa      	ldrb	r2, [r7, #23]
 802ee70:	68fb      	ldr	r3, [r7, #12]
 802ee72:	32ae      	adds	r2, #174	; 0xae
 802ee74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ee78:	695b      	ldr	r3, [r3, #20]
 802ee7a:	2b00      	cmp	r3, #0
 802ee7c:	d014      	beq.n	802eea8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802ee7e:	7dfa      	ldrb	r2, [r7, #23]
 802ee80:	68fb      	ldr	r3, [r7, #12]
 802ee82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 802ee86:	7dfa      	ldrb	r2, [r7, #23]
 802ee88:	68fb      	ldr	r3, [r7, #12]
 802ee8a:	32ae      	adds	r2, #174	; 0xae
 802ee8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ee90:	695b      	ldr	r3, [r3, #20]
 802ee92:	7afa      	ldrb	r2, [r7, #11]
 802ee94:	4611      	mov	r1, r2
 802ee96:	68f8      	ldr	r0, [r7, #12]
 802ee98:	4798      	blx	r3
 802ee9a:	4603      	mov	r3, r0
 802ee9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 802ee9e:	7dbb      	ldrb	r3, [r7, #22]
 802eea0:	2b00      	cmp	r3, #0
 802eea2:	d001      	beq.n	802eea8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 802eea4:	7dbb      	ldrb	r3, [r7, #22]
 802eea6:	e000      	b.n	802eeaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 802eea8:	2300      	movs	r3, #0
}
 802eeaa:	4618      	mov	r0, r3
 802eeac:	3718      	adds	r7, #24
 802eeae:	46bd      	mov	sp, r7
 802eeb0:	bd80      	pop	{r7, pc}

0802eeb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802eeb2:	b580      	push	{r7, lr}
 802eeb4:	b084      	sub	sp, #16
 802eeb6:	af00      	add	r7, sp, #0
 802eeb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 802eeba:	2300      	movs	r3, #0
 802eebc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802eebe:	687b      	ldr	r3, [r7, #4]
 802eec0:	2201      	movs	r2, #1
 802eec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802eec6:	687b      	ldr	r3, [r7, #4]
 802eec8:	2200      	movs	r2, #0
 802eeca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802eece:	687b      	ldr	r3, [r7, #4]
 802eed0:	2200      	movs	r2, #0
 802eed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	2200      	movs	r2, #0
 802eed8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 802eedc:	687b      	ldr	r3, [r7, #4]
 802eede:	2200      	movs	r2, #0
 802eee0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 802eee4:	687b      	ldr	r3, [r7, #4]
 802eee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eeea:	2b00      	cmp	r3, #0
 802eeec:	d014      	beq.n	802ef18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 802eeee:	687b      	ldr	r3, [r7, #4]
 802eef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eef4:	685b      	ldr	r3, [r3, #4]
 802eef6:	2b00      	cmp	r3, #0
 802eef8:	d00e      	beq.n	802ef18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ef00:	685b      	ldr	r3, [r3, #4]
 802ef02:	687a      	ldr	r2, [r7, #4]
 802ef04:	6852      	ldr	r2, [r2, #4]
 802ef06:	b2d2      	uxtb	r2, r2
 802ef08:	4611      	mov	r1, r2
 802ef0a:	6878      	ldr	r0, [r7, #4]
 802ef0c:	4798      	blx	r3
 802ef0e:	4603      	mov	r3, r0
 802ef10:	2b00      	cmp	r3, #0
 802ef12:	d001      	beq.n	802ef18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 802ef14:	2303      	movs	r3, #3
 802ef16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802ef18:	2340      	movs	r3, #64	; 0x40
 802ef1a:	2200      	movs	r2, #0
 802ef1c:	2100      	movs	r1, #0
 802ef1e:	6878      	ldr	r0, [r7, #4]
 802ef20:	f001 fe5d 	bl	8030bde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802ef24:	687b      	ldr	r3, [r7, #4]
 802ef26:	2201      	movs	r2, #1
 802ef28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802ef2c:	687b      	ldr	r3, [r7, #4]
 802ef2e:	2240      	movs	r2, #64	; 0x40
 802ef30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802ef34:	2340      	movs	r3, #64	; 0x40
 802ef36:	2200      	movs	r2, #0
 802ef38:	2180      	movs	r1, #128	; 0x80
 802ef3a:	6878      	ldr	r0, [r7, #4]
 802ef3c:	f001 fe4f 	bl	8030bde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802ef40:	687b      	ldr	r3, [r7, #4]
 802ef42:	2201      	movs	r2, #1
 802ef44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802ef46:	687b      	ldr	r3, [r7, #4]
 802ef48:	2240      	movs	r2, #64	; 0x40
 802ef4a:	621a      	str	r2, [r3, #32]

  return ret;
 802ef4c:	7bfb      	ldrb	r3, [r7, #15]
}
 802ef4e:	4618      	mov	r0, r3
 802ef50:	3710      	adds	r7, #16
 802ef52:	46bd      	mov	sp, r7
 802ef54:	bd80      	pop	{r7, pc}

0802ef56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802ef56:	b480      	push	{r7}
 802ef58:	b083      	sub	sp, #12
 802ef5a:	af00      	add	r7, sp, #0
 802ef5c:	6078      	str	r0, [r7, #4]
 802ef5e:	460b      	mov	r3, r1
 802ef60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802ef62:	687b      	ldr	r3, [r7, #4]
 802ef64:	78fa      	ldrb	r2, [r7, #3]
 802ef66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802ef68:	2300      	movs	r3, #0
}
 802ef6a:	4618      	mov	r0, r3
 802ef6c:	370c      	adds	r7, #12
 802ef6e:	46bd      	mov	sp, r7
 802ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef74:	4770      	bx	lr

0802ef76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802ef76:	b480      	push	{r7}
 802ef78:	b083      	sub	sp, #12
 802ef7a:	af00      	add	r7, sp, #0
 802ef7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802ef7e:	687b      	ldr	r3, [r7, #4]
 802ef80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802ef84:	b2da      	uxtb	r2, r3
 802ef86:	687b      	ldr	r3, [r7, #4]
 802ef88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802ef8c:	687b      	ldr	r3, [r7, #4]
 802ef8e:	2204      	movs	r2, #4
 802ef90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802ef94:	2300      	movs	r3, #0
}
 802ef96:	4618      	mov	r0, r3
 802ef98:	370c      	adds	r7, #12
 802ef9a:	46bd      	mov	sp, r7
 802ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efa0:	4770      	bx	lr

0802efa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802efa2:	b480      	push	{r7}
 802efa4:	b083      	sub	sp, #12
 802efa6:	af00      	add	r7, sp, #0
 802efa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802efaa:	687b      	ldr	r3, [r7, #4]
 802efac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802efb0:	b2db      	uxtb	r3, r3
 802efb2:	2b04      	cmp	r3, #4
 802efb4:	d106      	bne.n	802efc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802efb6:	687b      	ldr	r3, [r7, #4]
 802efb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 802efbc:	b2da      	uxtb	r2, r3
 802efbe:	687b      	ldr	r3, [r7, #4]
 802efc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802efc4:	2300      	movs	r3, #0
}
 802efc6:	4618      	mov	r0, r3
 802efc8:	370c      	adds	r7, #12
 802efca:	46bd      	mov	sp, r7
 802efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802efd0:	4770      	bx	lr

0802efd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802efd2:	b580      	push	{r7, lr}
 802efd4:	b082      	sub	sp, #8
 802efd6:	af00      	add	r7, sp, #0
 802efd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802efda:	687b      	ldr	r3, [r7, #4]
 802efdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802efe0:	b2db      	uxtb	r3, r3
 802efe2:	2b03      	cmp	r3, #3
 802efe4:	d110      	bne.n	802f008 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 802efe6:	687b      	ldr	r3, [r7, #4]
 802efe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802efec:	2b00      	cmp	r3, #0
 802efee:	d00b      	beq.n	802f008 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 802eff0:	687b      	ldr	r3, [r7, #4]
 802eff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802eff6:	69db      	ldr	r3, [r3, #28]
 802eff8:	2b00      	cmp	r3, #0
 802effa:	d005      	beq.n	802f008 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 802effc:	687b      	ldr	r3, [r7, #4]
 802effe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f002:	69db      	ldr	r3, [r3, #28]
 802f004:	6878      	ldr	r0, [r7, #4]
 802f006:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 802f008:	2300      	movs	r3, #0
}
 802f00a:	4618      	mov	r0, r3
 802f00c:	3708      	adds	r7, #8
 802f00e:	46bd      	mov	sp, r7
 802f010:	bd80      	pop	{r7, pc}

0802f012 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802f012:	b580      	push	{r7, lr}
 802f014:	b082      	sub	sp, #8
 802f016:	af00      	add	r7, sp, #0
 802f018:	6078      	str	r0, [r7, #4]
 802f01a:	460b      	mov	r3, r1
 802f01c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f01e:	687b      	ldr	r3, [r7, #4]
 802f020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f024:	687b      	ldr	r3, [r7, #4]
 802f026:	32ae      	adds	r2, #174	; 0xae
 802f028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f02c:	2b00      	cmp	r3, #0
 802f02e:	d101      	bne.n	802f034 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 802f030:	2303      	movs	r3, #3
 802f032:	e01c      	b.n	802f06e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f034:	687b      	ldr	r3, [r7, #4]
 802f036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f03a:	b2db      	uxtb	r3, r3
 802f03c:	2b03      	cmp	r3, #3
 802f03e:	d115      	bne.n	802f06c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 802f040:	687b      	ldr	r3, [r7, #4]
 802f042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f046:	687b      	ldr	r3, [r7, #4]
 802f048:	32ae      	adds	r2, #174	; 0xae
 802f04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f04e:	6a1b      	ldr	r3, [r3, #32]
 802f050:	2b00      	cmp	r3, #0
 802f052:	d00b      	beq.n	802f06c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 802f054:	687b      	ldr	r3, [r7, #4]
 802f056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f05a:	687b      	ldr	r3, [r7, #4]
 802f05c:	32ae      	adds	r2, #174	; 0xae
 802f05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f062:	6a1b      	ldr	r3, [r3, #32]
 802f064:	78fa      	ldrb	r2, [r7, #3]
 802f066:	4611      	mov	r1, r2
 802f068:	6878      	ldr	r0, [r7, #4]
 802f06a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f06c:	2300      	movs	r3, #0
}
 802f06e:	4618      	mov	r0, r3
 802f070:	3708      	adds	r7, #8
 802f072:	46bd      	mov	sp, r7
 802f074:	bd80      	pop	{r7, pc}

0802f076 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802f076:	b580      	push	{r7, lr}
 802f078:	b082      	sub	sp, #8
 802f07a:	af00      	add	r7, sp, #0
 802f07c:	6078      	str	r0, [r7, #4]
 802f07e:	460b      	mov	r3, r1
 802f080:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f082:	687b      	ldr	r3, [r7, #4]
 802f084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f088:	687b      	ldr	r3, [r7, #4]
 802f08a:	32ae      	adds	r2, #174	; 0xae
 802f08c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f090:	2b00      	cmp	r3, #0
 802f092:	d101      	bne.n	802f098 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 802f094:	2303      	movs	r3, #3
 802f096:	e01c      	b.n	802f0d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f098:	687b      	ldr	r3, [r7, #4]
 802f09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f09e:	b2db      	uxtb	r3, r3
 802f0a0:	2b03      	cmp	r3, #3
 802f0a2:	d115      	bne.n	802f0d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 802f0a4:	687b      	ldr	r3, [r7, #4]
 802f0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0aa:	687b      	ldr	r3, [r7, #4]
 802f0ac:	32ae      	adds	r2, #174	; 0xae
 802f0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f0b4:	2b00      	cmp	r3, #0
 802f0b6:	d00b      	beq.n	802f0d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 802f0b8:	687b      	ldr	r3, [r7, #4]
 802f0ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	32ae      	adds	r2, #174	; 0xae
 802f0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f0c8:	78fa      	ldrb	r2, [r7, #3]
 802f0ca:	4611      	mov	r1, r2
 802f0cc:	6878      	ldr	r0, [r7, #4]
 802f0ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f0d0:	2300      	movs	r3, #0
}
 802f0d2:	4618      	mov	r0, r3
 802f0d4:	3708      	adds	r7, #8
 802f0d6:	46bd      	mov	sp, r7
 802f0d8:	bd80      	pop	{r7, pc}

0802f0da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802f0da:	b480      	push	{r7}
 802f0dc:	b083      	sub	sp, #12
 802f0de:	af00      	add	r7, sp, #0
 802f0e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f0e2:	2300      	movs	r3, #0
}
 802f0e4:	4618      	mov	r0, r3
 802f0e6:	370c      	adds	r7, #12
 802f0e8:	46bd      	mov	sp, r7
 802f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f0ee:	4770      	bx	lr

0802f0f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802f0f0:	b580      	push	{r7, lr}
 802f0f2:	b084      	sub	sp, #16
 802f0f4:	af00      	add	r7, sp, #0
 802f0f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 802f0f8:	2300      	movs	r3, #0
 802f0fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f0fc:	687b      	ldr	r3, [r7, #4]
 802f0fe:	2201      	movs	r2, #1
 802f100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f104:	687b      	ldr	r3, [r7, #4]
 802f106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f10a:	2b00      	cmp	r3, #0
 802f10c:	d00e      	beq.n	802f12c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802f10e:	687b      	ldr	r3, [r7, #4]
 802f110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f114:	685b      	ldr	r3, [r3, #4]
 802f116:	687a      	ldr	r2, [r7, #4]
 802f118:	6852      	ldr	r2, [r2, #4]
 802f11a:	b2d2      	uxtb	r2, r2
 802f11c:	4611      	mov	r1, r2
 802f11e:	6878      	ldr	r0, [r7, #4]
 802f120:	4798      	blx	r3
 802f122:	4603      	mov	r3, r0
 802f124:	2b00      	cmp	r3, #0
 802f126:	d001      	beq.n	802f12c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 802f128:	2303      	movs	r3, #3
 802f12a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f12c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f12e:	4618      	mov	r0, r3
 802f130:	3710      	adds	r7, #16
 802f132:	46bd      	mov	sp, r7
 802f134:	bd80      	pop	{r7, pc}

0802f136 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f136:	b480      	push	{r7}
 802f138:	b083      	sub	sp, #12
 802f13a:	af00      	add	r7, sp, #0
 802f13c:	6078      	str	r0, [r7, #4]
 802f13e:	460b      	mov	r3, r1
 802f140:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f142:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f144:	4618      	mov	r0, r3
 802f146:	370c      	adds	r7, #12
 802f148:	46bd      	mov	sp, r7
 802f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f14e:	4770      	bx	lr

0802f150 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f150:	b480      	push	{r7}
 802f152:	b083      	sub	sp, #12
 802f154:	af00      	add	r7, sp, #0
 802f156:	6078      	str	r0, [r7, #4]
 802f158:	460b      	mov	r3, r1
 802f15a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f15c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f15e:	4618      	mov	r0, r3
 802f160:	370c      	adds	r7, #12
 802f162:	46bd      	mov	sp, r7
 802f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f168:	4770      	bx	lr

0802f16a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 802f16a:	b580      	push	{r7, lr}
 802f16c:	b086      	sub	sp, #24
 802f16e:	af00      	add	r7, sp, #0
 802f170:	6078      	str	r0, [r7, #4]
 802f172:	460b      	mov	r3, r1
 802f174:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 802f176:	687b      	ldr	r3, [r7, #4]
 802f178:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 802f17a:	687b      	ldr	r3, [r7, #4]
 802f17c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 802f17e:	2300      	movs	r3, #0
 802f180:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802f182:	68fb      	ldr	r3, [r7, #12]
 802f184:	885b      	ldrh	r3, [r3, #2]
 802f186:	b29a      	uxth	r2, r3
 802f188:	68fb      	ldr	r3, [r7, #12]
 802f18a:	781b      	ldrb	r3, [r3, #0]
 802f18c:	b29b      	uxth	r3, r3
 802f18e:	429a      	cmp	r2, r3
 802f190:	d920      	bls.n	802f1d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 802f192:	68fb      	ldr	r3, [r7, #12]
 802f194:	781b      	ldrb	r3, [r3, #0]
 802f196:	b29b      	uxth	r3, r3
 802f198:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 802f19a:	e013      	b.n	802f1c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 802f19c:	f107 030a 	add.w	r3, r7, #10
 802f1a0:	4619      	mov	r1, r3
 802f1a2:	6978      	ldr	r0, [r7, #20]
 802f1a4:	f000 f81b 	bl	802f1de <USBD_GetNextDesc>
 802f1a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f1aa:	697b      	ldr	r3, [r7, #20]
 802f1ac:	785b      	ldrb	r3, [r3, #1]
 802f1ae:	2b05      	cmp	r3, #5
 802f1b0:	d108      	bne.n	802f1c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 802f1b2:	697b      	ldr	r3, [r7, #20]
 802f1b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 802f1b6:	693b      	ldr	r3, [r7, #16]
 802f1b8:	789b      	ldrb	r3, [r3, #2]
 802f1ba:	78fa      	ldrb	r2, [r7, #3]
 802f1bc:	429a      	cmp	r2, r3
 802f1be:	d008      	beq.n	802f1d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 802f1c0:	2300      	movs	r3, #0
 802f1c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 802f1c4:	68fb      	ldr	r3, [r7, #12]
 802f1c6:	885b      	ldrh	r3, [r3, #2]
 802f1c8:	b29a      	uxth	r2, r3
 802f1ca:	897b      	ldrh	r3, [r7, #10]
 802f1cc:	429a      	cmp	r2, r3
 802f1ce:	d8e5      	bhi.n	802f19c <USBD_GetEpDesc+0x32>
 802f1d0:	e000      	b.n	802f1d4 <USBD_GetEpDesc+0x6a>
          break;
 802f1d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 802f1d4:	693b      	ldr	r3, [r7, #16]
}
 802f1d6:	4618      	mov	r0, r3
 802f1d8:	3718      	adds	r7, #24
 802f1da:	46bd      	mov	sp, r7
 802f1dc:	bd80      	pop	{r7, pc}

0802f1de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 802f1de:	b480      	push	{r7}
 802f1e0:	b085      	sub	sp, #20
 802f1e2:	af00      	add	r7, sp, #0
 802f1e4:	6078      	str	r0, [r7, #4]
 802f1e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 802f1e8:	687b      	ldr	r3, [r7, #4]
 802f1ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 802f1ec:	683b      	ldr	r3, [r7, #0]
 802f1ee:	881a      	ldrh	r2, [r3, #0]
 802f1f0:	68fb      	ldr	r3, [r7, #12]
 802f1f2:	781b      	ldrb	r3, [r3, #0]
 802f1f4:	b29b      	uxth	r3, r3
 802f1f6:	4413      	add	r3, r2
 802f1f8:	b29a      	uxth	r2, r3
 802f1fa:	683b      	ldr	r3, [r7, #0]
 802f1fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 802f1fe:	68fb      	ldr	r3, [r7, #12]
 802f200:	781b      	ldrb	r3, [r3, #0]
 802f202:	461a      	mov	r2, r3
 802f204:	687b      	ldr	r3, [r7, #4]
 802f206:	4413      	add	r3, r2
 802f208:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f20a:	68fb      	ldr	r3, [r7, #12]
}
 802f20c:	4618      	mov	r0, r3
 802f20e:	3714      	adds	r7, #20
 802f210:	46bd      	mov	sp, r7
 802f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f216:	4770      	bx	lr

0802f218 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802f218:	b480      	push	{r7}
 802f21a:	b087      	sub	sp, #28
 802f21c:	af00      	add	r7, sp, #0
 802f21e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802f220:	687b      	ldr	r3, [r7, #4]
 802f222:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802f224:	697b      	ldr	r3, [r7, #20]
 802f226:	781b      	ldrb	r3, [r3, #0]
 802f228:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802f22a:	697b      	ldr	r3, [r7, #20]
 802f22c:	3301      	adds	r3, #1
 802f22e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802f230:	697b      	ldr	r3, [r7, #20]
 802f232:	781b      	ldrb	r3, [r3, #0]
 802f234:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802f236:	8a3b      	ldrh	r3, [r7, #16]
 802f238:	021b      	lsls	r3, r3, #8
 802f23a:	b21a      	sxth	r2, r3
 802f23c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802f240:	4313      	orrs	r3, r2
 802f242:	b21b      	sxth	r3, r3
 802f244:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802f246:	89fb      	ldrh	r3, [r7, #14]
}
 802f248:	4618      	mov	r0, r3
 802f24a:	371c      	adds	r7, #28
 802f24c:	46bd      	mov	sp, r7
 802f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f252:	4770      	bx	lr

0802f254 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f254:	b580      	push	{r7, lr}
 802f256:	b084      	sub	sp, #16
 802f258:	af00      	add	r7, sp, #0
 802f25a:	6078      	str	r0, [r7, #4]
 802f25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f25e:	2300      	movs	r3, #0
 802f260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f262:	683b      	ldr	r3, [r7, #0]
 802f264:	781b      	ldrb	r3, [r3, #0]
 802f266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f26a:	2b40      	cmp	r3, #64	; 0x40
 802f26c:	d005      	beq.n	802f27a <USBD_StdDevReq+0x26>
 802f26e:	2b40      	cmp	r3, #64	; 0x40
 802f270:	d857      	bhi.n	802f322 <USBD_StdDevReq+0xce>
 802f272:	2b00      	cmp	r3, #0
 802f274:	d00f      	beq.n	802f296 <USBD_StdDevReq+0x42>
 802f276:	2b20      	cmp	r3, #32
 802f278:	d153      	bne.n	802f322 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 802f27a:	687b      	ldr	r3, [r7, #4]
 802f27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f280:	687b      	ldr	r3, [r7, #4]
 802f282:	32ae      	adds	r2, #174	; 0xae
 802f284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f288:	689b      	ldr	r3, [r3, #8]
 802f28a:	6839      	ldr	r1, [r7, #0]
 802f28c:	6878      	ldr	r0, [r7, #4]
 802f28e:	4798      	blx	r3
 802f290:	4603      	mov	r3, r0
 802f292:	73fb      	strb	r3, [r7, #15]
      break;
 802f294:	e04a      	b.n	802f32c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f296:	683b      	ldr	r3, [r7, #0]
 802f298:	785b      	ldrb	r3, [r3, #1]
 802f29a:	2b09      	cmp	r3, #9
 802f29c:	d83b      	bhi.n	802f316 <USBD_StdDevReq+0xc2>
 802f29e:	a201      	add	r2, pc, #4	; (adr r2, 802f2a4 <USBD_StdDevReq+0x50>)
 802f2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f2a4:	0802f2f9 	.word	0x0802f2f9
 802f2a8:	0802f30d 	.word	0x0802f30d
 802f2ac:	0802f317 	.word	0x0802f317
 802f2b0:	0802f303 	.word	0x0802f303
 802f2b4:	0802f317 	.word	0x0802f317
 802f2b8:	0802f2d7 	.word	0x0802f2d7
 802f2bc:	0802f2cd 	.word	0x0802f2cd
 802f2c0:	0802f317 	.word	0x0802f317
 802f2c4:	0802f2ef 	.word	0x0802f2ef
 802f2c8:	0802f2e1 	.word	0x0802f2e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802f2cc:	6839      	ldr	r1, [r7, #0]
 802f2ce:	6878      	ldr	r0, [r7, #4]
 802f2d0:	f000 fa3c 	bl	802f74c <USBD_GetDescriptor>
          break;
 802f2d4:	e024      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802f2d6:	6839      	ldr	r1, [r7, #0]
 802f2d8:	6878      	ldr	r0, [r7, #4]
 802f2da:	f000 fba1 	bl	802fa20 <USBD_SetAddress>
          break;
 802f2de:	e01f      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 802f2e0:	6839      	ldr	r1, [r7, #0]
 802f2e2:	6878      	ldr	r0, [r7, #4]
 802f2e4:	f000 fbe0 	bl	802faa8 <USBD_SetConfig>
 802f2e8:	4603      	mov	r3, r0
 802f2ea:	73fb      	strb	r3, [r7, #15]
          break;
 802f2ec:	e018      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802f2ee:	6839      	ldr	r1, [r7, #0]
 802f2f0:	6878      	ldr	r0, [r7, #4]
 802f2f2:	f000 fc83 	bl	802fbfc <USBD_GetConfig>
          break;
 802f2f6:	e013      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802f2f8:	6839      	ldr	r1, [r7, #0]
 802f2fa:	6878      	ldr	r0, [r7, #4]
 802f2fc:	f000 fcb4 	bl	802fc68 <USBD_GetStatus>
          break;
 802f300:	e00e      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802f302:	6839      	ldr	r1, [r7, #0]
 802f304:	6878      	ldr	r0, [r7, #4]
 802f306:	f000 fce3 	bl	802fcd0 <USBD_SetFeature>
          break;
 802f30a:	e009      	b.n	802f320 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802f30c:	6839      	ldr	r1, [r7, #0]
 802f30e:	6878      	ldr	r0, [r7, #4]
 802f310:	f000 fd07 	bl	802fd22 <USBD_ClrFeature>
          break;
 802f314:	e004      	b.n	802f320 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 802f316:	6839      	ldr	r1, [r7, #0]
 802f318:	6878      	ldr	r0, [r7, #4]
 802f31a:	f000 fd5e 	bl	802fdda <USBD_CtlError>
          break;
 802f31e:	bf00      	nop
      }
      break;
 802f320:	e004      	b.n	802f32c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802f322:	6839      	ldr	r1, [r7, #0]
 802f324:	6878      	ldr	r0, [r7, #4]
 802f326:	f000 fd58 	bl	802fdda <USBD_CtlError>
      break;
 802f32a:	bf00      	nop
  }

  return ret;
 802f32c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f32e:	4618      	mov	r0, r3
 802f330:	3710      	adds	r7, #16
 802f332:	46bd      	mov	sp, r7
 802f334:	bd80      	pop	{r7, pc}
 802f336:	bf00      	nop

0802f338 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f338:	b580      	push	{r7, lr}
 802f33a:	b084      	sub	sp, #16
 802f33c:	af00      	add	r7, sp, #0
 802f33e:	6078      	str	r0, [r7, #4]
 802f340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f342:	2300      	movs	r3, #0
 802f344:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f346:	683b      	ldr	r3, [r7, #0]
 802f348:	781b      	ldrb	r3, [r3, #0]
 802f34a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f34e:	2b40      	cmp	r3, #64	; 0x40
 802f350:	d005      	beq.n	802f35e <USBD_StdItfReq+0x26>
 802f352:	2b40      	cmp	r3, #64	; 0x40
 802f354:	d852      	bhi.n	802f3fc <USBD_StdItfReq+0xc4>
 802f356:	2b00      	cmp	r3, #0
 802f358:	d001      	beq.n	802f35e <USBD_StdItfReq+0x26>
 802f35a:	2b20      	cmp	r3, #32
 802f35c:	d14e      	bne.n	802f3fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802f35e:	687b      	ldr	r3, [r7, #4]
 802f360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f364:	b2db      	uxtb	r3, r3
 802f366:	3b01      	subs	r3, #1
 802f368:	2b02      	cmp	r3, #2
 802f36a:	d840      	bhi.n	802f3ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802f36c:	683b      	ldr	r3, [r7, #0]
 802f36e:	889b      	ldrh	r3, [r3, #4]
 802f370:	b2db      	uxtb	r3, r3
 802f372:	2b01      	cmp	r3, #1
 802f374:	d836      	bhi.n	802f3e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 802f376:	683b      	ldr	r3, [r7, #0]
 802f378:	889b      	ldrh	r3, [r3, #4]
 802f37a:	b2db      	uxtb	r3, r3
 802f37c:	4619      	mov	r1, r3
 802f37e:	6878      	ldr	r0, [r7, #4]
 802f380:	f7ff fed9 	bl	802f136 <USBD_CoreFindIF>
 802f384:	4603      	mov	r3, r0
 802f386:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f388:	7bbb      	ldrb	r3, [r7, #14]
 802f38a:	2bff      	cmp	r3, #255	; 0xff
 802f38c:	d01d      	beq.n	802f3ca <USBD_StdItfReq+0x92>
 802f38e:	7bbb      	ldrb	r3, [r7, #14]
 802f390:	2b00      	cmp	r3, #0
 802f392:	d11a      	bne.n	802f3ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 802f394:	7bba      	ldrb	r2, [r7, #14]
 802f396:	687b      	ldr	r3, [r7, #4]
 802f398:	32ae      	adds	r2, #174	; 0xae
 802f39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f39e:	689b      	ldr	r3, [r3, #8]
 802f3a0:	2b00      	cmp	r3, #0
 802f3a2:	d00f      	beq.n	802f3c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 802f3a4:	7bba      	ldrb	r2, [r7, #14]
 802f3a6:	687b      	ldr	r3, [r7, #4]
 802f3a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802f3ac:	7bba      	ldrb	r2, [r7, #14]
 802f3ae:	687b      	ldr	r3, [r7, #4]
 802f3b0:	32ae      	adds	r2, #174	; 0xae
 802f3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f3b6:	689b      	ldr	r3, [r3, #8]
 802f3b8:	6839      	ldr	r1, [r7, #0]
 802f3ba:	6878      	ldr	r0, [r7, #4]
 802f3bc:	4798      	blx	r3
 802f3be:	4603      	mov	r3, r0
 802f3c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802f3c2:	e004      	b.n	802f3ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 802f3c4:	2303      	movs	r3, #3
 802f3c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802f3c8:	e001      	b.n	802f3ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 802f3ca:	2303      	movs	r3, #3
 802f3cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802f3ce:	683b      	ldr	r3, [r7, #0]
 802f3d0:	88db      	ldrh	r3, [r3, #6]
 802f3d2:	2b00      	cmp	r3, #0
 802f3d4:	d110      	bne.n	802f3f8 <USBD_StdItfReq+0xc0>
 802f3d6:	7bfb      	ldrb	r3, [r7, #15]
 802f3d8:	2b00      	cmp	r3, #0
 802f3da:	d10d      	bne.n	802f3f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 802f3dc:	6878      	ldr	r0, [r7, #4]
 802f3de:	f000 fdc7 	bl	802ff70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802f3e2:	e009      	b.n	802f3f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 802f3e4:	6839      	ldr	r1, [r7, #0]
 802f3e6:	6878      	ldr	r0, [r7, #4]
 802f3e8:	f000 fcf7 	bl	802fdda <USBD_CtlError>
          break;
 802f3ec:	e004      	b.n	802f3f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802f3ee:	6839      	ldr	r1, [r7, #0]
 802f3f0:	6878      	ldr	r0, [r7, #4]
 802f3f2:	f000 fcf2 	bl	802fdda <USBD_CtlError>
          break;
 802f3f6:	e000      	b.n	802f3fa <USBD_StdItfReq+0xc2>
          break;
 802f3f8:	bf00      	nop
      }
      break;
 802f3fa:	e004      	b.n	802f406 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 802f3fc:	6839      	ldr	r1, [r7, #0]
 802f3fe:	6878      	ldr	r0, [r7, #4]
 802f400:	f000 fceb 	bl	802fdda <USBD_CtlError>
      break;
 802f404:	bf00      	nop
  }

  return ret;
 802f406:	7bfb      	ldrb	r3, [r7, #15]
}
 802f408:	4618      	mov	r0, r3
 802f40a:	3710      	adds	r7, #16
 802f40c:	46bd      	mov	sp, r7
 802f40e:	bd80      	pop	{r7, pc}

0802f410 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f410:	b580      	push	{r7, lr}
 802f412:	b084      	sub	sp, #16
 802f414:	af00      	add	r7, sp, #0
 802f416:	6078      	str	r0, [r7, #4]
 802f418:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 802f41a:	2300      	movs	r3, #0
 802f41c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 802f41e:	683b      	ldr	r3, [r7, #0]
 802f420:	889b      	ldrh	r3, [r3, #4]
 802f422:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f424:	683b      	ldr	r3, [r7, #0]
 802f426:	781b      	ldrb	r3, [r3, #0]
 802f428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f42c:	2b40      	cmp	r3, #64	; 0x40
 802f42e:	d007      	beq.n	802f440 <USBD_StdEPReq+0x30>
 802f430:	2b40      	cmp	r3, #64	; 0x40
 802f432:	f200 817f 	bhi.w	802f734 <USBD_StdEPReq+0x324>
 802f436:	2b00      	cmp	r3, #0
 802f438:	d02a      	beq.n	802f490 <USBD_StdEPReq+0x80>
 802f43a:	2b20      	cmp	r3, #32
 802f43c:	f040 817a 	bne.w	802f734 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 802f440:	7bbb      	ldrb	r3, [r7, #14]
 802f442:	4619      	mov	r1, r3
 802f444:	6878      	ldr	r0, [r7, #4]
 802f446:	f7ff fe83 	bl	802f150 <USBD_CoreFindEP>
 802f44a:	4603      	mov	r3, r0
 802f44c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f44e:	7b7b      	ldrb	r3, [r7, #13]
 802f450:	2bff      	cmp	r3, #255	; 0xff
 802f452:	f000 8174 	beq.w	802f73e <USBD_StdEPReq+0x32e>
 802f456:	7b7b      	ldrb	r3, [r7, #13]
 802f458:	2b00      	cmp	r3, #0
 802f45a:	f040 8170 	bne.w	802f73e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 802f45e:	7b7a      	ldrb	r2, [r7, #13]
 802f460:	687b      	ldr	r3, [r7, #4]
 802f462:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 802f466:	7b7a      	ldrb	r2, [r7, #13]
 802f468:	687b      	ldr	r3, [r7, #4]
 802f46a:	32ae      	adds	r2, #174	; 0xae
 802f46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f470:	689b      	ldr	r3, [r3, #8]
 802f472:	2b00      	cmp	r3, #0
 802f474:	f000 8163 	beq.w	802f73e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 802f478:	7b7a      	ldrb	r2, [r7, #13]
 802f47a:	687b      	ldr	r3, [r7, #4]
 802f47c:	32ae      	adds	r2, #174	; 0xae
 802f47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f482:	689b      	ldr	r3, [r3, #8]
 802f484:	6839      	ldr	r1, [r7, #0]
 802f486:	6878      	ldr	r0, [r7, #4]
 802f488:	4798      	blx	r3
 802f48a:	4603      	mov	r3, r0
 802f48c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802f48e:	e156      	b.n	802f73e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f490:	683b      	ldr	r3, [r7, #0]
 802f492:	785b      	ldrb	r3, [r3, #1]
 802f494:	2b03      	cmp	r3, #3
 802f496:	d008      	beq.n	802f4aa <USBD_StdEPReq+0x9a>
 802f498:	2b03      	cmp	r3, #3
 802f49a:	f300 8145 	bgt.w	802f728 <USBD_StdEPReq+0x318>
 802f49e:	2b00      	cmp	r3, #0
 802f4a0:	f000 809b 	beq.w	802f5da <USBD_StdEPReq+0x1ca>
 802f4a4:	2b01      	cmp	r3, #1
 802f4a6:	d03c      	beq.n	802f522 <USBD_StdEPReq+0x112>
 802f4a8:	e13e      	b.n	802f728 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802f4aa:	687b      	ldr	r3, [r7, #4]
 802f4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f4b0:	b2db      	uxtb	r3, r3
 802f4b2:	2b02      	cmp	r3, #2
 802f4b4:	d002      	beq.n	802f4bc <USBD_StdEPReq+0xac>
 802f4b6:	2b03      	cmp	r3, #3
 802f4b8:	d016      	beq.n	802f4e8 <USBD_StdEPReq+0xd8>
 802f4ba:	e02c      	b.n	802f516 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802f4bc:	7bbb      	ldrb	r3, [r7, #14]
 802f4be:	2b00      	cmp	r3, #0
 802f4c0:	d00d      	beq.n	802f4de <USBD_StdEPReq+0xce>
 802f4c2:	7bbb      	ldrb	r3, [r7, #14]
 802f4c4:	2b80      	cmp	r3, #128	; 0x80
 802f4c6:	d00a      	beq.n	802f4de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802f4c8:	7bbb      	ldrb	r3, [r7, #14]
 802f4ca:	4619      	mov	r1, r3
 802f4cc:	6878      	ldr	r0, [r7, #4]
 802f4ce:	f001 fbcb 	bl	8030c68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802f4d2:	2180      	movs	r1, #128	; 0x80
 802f4d4:	6878      	ldr	r0, [r7, #4]
 802f4d6:	f001 fbc7 	bl	8030c68 <USBD_LL_StallEP>
 802f4da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802f4dc:	e020      	b.n	802f520 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802f4de:	6839      	ldr	r1, [r7, #0]
 802f4e0:	6878      	ldr	r0, [r7, #4]
 802f4e2:	f000 fc7a 	bl	802fdda <USBD_CtlError>
              break;
 802f4e6:	e01b      	b.n	802f520 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802f4e8:	683b      	ldr	r3, [r7, #0]
 802f4ea:	885b      	ldrh	r3, [r3, #2]
 802f4ec:	2b00      	cmp	r3, #0
 802f4ee:	d10e      	bne.n	802f50e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802f4f0:	7bbb      	ldrb	r3, [r7, #14]
 802f4f2:	2b00      	cmp	r3, #0
 802f4f4:	d00b      	beq.n	802f50e <USBD_StdEPReq+0xfe>
 802f4f6:	7bbb      	ldrb	r3, [r7, #14]
 802f4f8:	2b80      	cmp	r3, #128	; 0x80
 802f4fa:	d008      	beq.n	802f50e <USBD_StdEPReq+0xfe>
 802f4fc:	683b      	ldr	r3, [r7, #0]
 802f4fe:	88db      	ldrh	r3, [r3, #6]
 802f500:	2b00      	cmp	r3, #0
 802f502:	d104      	bne.n	802f50e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802f504:	7bbb      	ldrb	r3, [r7, #14]
 802f506:	4619      	mov	r1, r3
 802f508:	6878      	ldr	r0, [r7, #4]
 802f50a:	f001 fbad 	bl	8030c68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802f50e:	6878      	ldr	r0, [r7, #4]
 802f510:	f000 fd2e 	bl	802ff70 <USBD_CtlSendStatus>

              break;
 802f514:	e004      	b.n	802f520 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802f516:	6839      	ldr	r1, [r7, #0]
 802f518:	6878      	ldr	r0, [r7, #4]
 802f51a:	f000 fc5e 	bl	802fdda <USBD_CtlError>
              break;
 802f51e:	bf00      	nop
          }
          break;
 802f520:	e107      	b.n	802f732 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802f522:	687b      	ldr	r3, [r7, #4]
 802f524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f528:	b2db      	uxtb	r3, r3
 802f52a:	2b02      	cmp	r3, #2
 802f52c:	d002      	beq.n	802f534 <USBD_StdEPReq+0x124>
 802f52e:	2b03      	cmp	r3, #3
 802f530:	d016      	beq.n	802f560 <USBD_StdEPReq+0x150>
 802f532:	e04b      	b.n	802f5cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802f534:	7bbb      	ldrb	r3, [r7, #14]
 802f536:	2b00      	cmp	r3, #0
 802f538:	d00d      	beq.n	802f556 <USBD_StdEPReq+0x146>
 802f53a:	7bbb      	ldrb	r3, [r7, #14]
 802f53c:	2b80      	cmp	r3, #128	; 0x80
 802f53e:	d00a      	beq.n	802f556 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802f540:	7bbb      	ldrb	r3, [r7, #14]
 802f542:	4619      	mov	r1, r3
 802f544:	6878      	ldr	r0, [r7, #4]
 802f546:	f001 fb8f 	bl	8030c68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802f54a:	2180      	movs	r1, #128	; 0x80
 802f54c:	6878      	ldr	r0, [r7, #4]
 802f54e:	f001 fb8b 	bl	8030c68 <USBD_LL_StallEP>
 802f552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802f554:	e040      	b.n	802f5d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802f556:	6839      	ldr	r1, [r7, #0]
 802f558:	6878      	ldr	r0, [r7, #4]
 802f55a:	f000 fc3e 	bl	802fdda <USBD_CtlError>
              break;
 802f55e:	e03b      	b.n	802f5d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802f560:	683b      	ldr	r3, [r7, #0]
 802f562:	885b      	ldrh	r3, [r3, #2]
 802f564:	2b00      	cmp	r3, #0
 802f566:	d136      	bne.n	802f5d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802f568:	7bbb      	ldrb	r3, [r7, #14]
 802f56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f56e:	2b00      	cmp	r3, #0
 802f570:	d004      	beq.n	802f57c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802f572:	7bbb      	ldrb	r3, [r7, #14]
 802f574:	4619      	mov	r1, r3
 802f576:	6878      	ldr	r0, [r7, #4]
 802f578:	f001 fb95 	bl	8030ca6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802f57c:	6878      	ldr	r0, [r7, #4]
 802f57e:	f000 fcf7 	bl	802ff70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802f582:	7bbb      	ldrb	r3, [r7, #14]
 802f584:	4619      	mov	r1, r3
 802f586:	6878      	ldr	r0, [r7, #4]
 802f588:	f7ff fde2 	bl	802f150 <USBD_CoreFindEP>
 802f58c:	4603      	mov	r3, r0
 802f58e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f590:	7b7b      	ldrb	r3, [r7, #13]
 802f592:	2bff      	cmp	r3, #255	; 0xff
 802f594:	d01f      	beq.n	802f5d6 <USBD_StdEPReq+0x1c6>
 802f596:	7b7b      	ldrb	r3, [r7, #13]
 802f598:	2b00      	cmp	r3, #0
 802f59a:	d11c      	bne.n	802f5d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 802f59c:	7b7a      	ldrb	r2, [r7, #13]
 802f59e:	687b      	ldr	r3, [r7, #4]
 802f5a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802f5a4:	7b7a      	ldrb	r2, [r7, #13]
 802f5a6:	687b      	ldr	r3, [r7, #4]
 802f5a8:	32ae      	adds	r2, #174	; 0xae
 802f5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f5ae:	689b      	ldr	r3, [r3, #8]
 802f5b0:	2b00      	cmp	r3, #0
 802f5b2:	d010      	beq.n	802f5d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802f5b4:	7b7a      	ldrb	r2, [r7, #13]
 802f5b6:	687b      	ldr	r3, [r7, #4]
 802f5b8:	32ae      	adds	r2, #174	; 0xae
 802f5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f5be:	689b      	ldr	r3, [r3, #8]
 802f5c0:	6839      	ldr	r1, [r7, #0]
 802f5c2:	6878      	ldr	r0, [r7, #4]
 802f5c4:	4798      	blx	r3
 802f5c6:	4603      	mov	r3, r0
 802f5c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 802f5ca:	e004      	b.n	802f5d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 802f5cc:	6839      	ldr	r1, [r7, #0]
 802f5ce:	6878      	ldr	r0, [r7, #4]
 802f5d0:	f000 fc03 	bl	802fdda <USBD_CtlError>
              break;
 802f5d4:	e000      	b.n	802f5d8 <USBD_StdEPReq+0x1c8>
              break;
 802f5d6:	bf00      	nop
          }
          break;
 802f5d8:	e0ab      	b.n	802f732 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802f5da:	687b      	ldr	r3, [r7, #4]
 802f5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f5e0:	b2db      	uxtb	r3, r3
 802f5e2:	2b02      	cmp	r3, #2
 802f5e4:	d002      	beq.n	802f5ec <USBD_StdEPReq+0x1dc>
 802f5e6:	2b03      	cmp	r3, #3
 802f5e8:	d032      	beq.n	802f650 <USBD_StdEPReq+0x240>
 802f5ea:	e097      	b.n	802f71c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802f5ec:	7bbb      	ldrb	r3, [r7, #14]
 802f5ee:	2b00      	cmp	r3, #0
 802f5f0:	d007      	beq.n	802f602 <USBD_StdEPReq+0x1f2>
 802f5f2:	7bbb      	ldrb	r3, [r7, #14]
 802f5f4:	2b80      	cmp	r3, #128	; 0x80
 802f5f6:	d004      	beq.n	802f602 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 802f5f8:	6839      	ldr	r1, [r7, #0]
 802f5fa:	6878      	ldr	r0, [r7, #4]
 802f5fc:	f000 fbed 	bl	802fdda <USBD_CtlError>
                break;
 802f600:	e091      	b.n	802f726 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802f602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802f606:	2b00      	cmp	r3, #0
 802f608:	da0b      	bge.n	802f622 <USBD_StdEPReq+0x212>
 802f60a:	7bbb      	ldrb	r3, [r7, #14]
 802f60c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802f610:	4613      	mov	r3, r2
 802f612:	009b      	lsls	r3, r3, #2
 802f614:	4413      	add	r3, r2
 802f616:	009b      	lsls	r3, r3, #2
 802f618:	3310      	adds	r3, #16
 802f61a:	687a      	ldr	r2, [r7, #4]
 802f61c:	4413      	add	r3, r2
 802f61e:	3304      	adds	r3, #4
 802f620:	e00b      	b.n	802f63a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802f622:	7bbb      	ldrb	r3, [r7, #14]
 802f624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802f628:	4613      	mov	r3, r2
 802f62a:	009b      	lsls	r3, r3, #2
 802f62c:	4413      	add	r3, r2
 802f62e:	009b      	lsls	r3, r3, #2
 802f630:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802f634:	687a      	ldr	r2, [r7, #4]
 802f636:	4413      	add	r3, r2
 802f638:	3304      	adds	r3, #4
 802f63a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802f63c:	68bb      	ldr	r3, [r7, #8]
 802f63e:	2200      	movs	r2, #0
 802f640:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802f642:	68bb      	ldr	r3, [r7, #8]
 802f644:	2202      	movs	r2, #2
 802f646:	4619      	mov	r1, r3
 802f648:	6878      	ldr	r0, [r7, #4]
 802f64a:	f000 fc37 	bl	802febc <USBD_CtlSendData>
              break;
 802f64e:	e06a      	b.n	802f726 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802f650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802f654:	2b00      	cmp	r3, #0
 802f656:	da11      	bge.n	802f67c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802f658:	7bbb      	ldrb	r3, [r7, #14]
 802f65a:	f003 020f 	and.w	r2, r3, #15
 802f65e:	6879      	ldr	r1, [r7, #4]
 802f660:	4613      	mov	r3, r2
 802f662:	009b      	lsls	r3, r3, #2
 802f664:	4413      	add	r3, r2
 802f666:	009b      	lsls	r3, r3, #2
 802f668:	440b      	add	r3, r1
 802f66a:	3324      	adds	r3, #36	; 0x24
 802f66c:	881b      	ldrh	r3, [r3, #0]
 802f66e:	2b00      	cmp	r3, #0
 802f670:	d117      	bne.n	802f6a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802f672:	6839      	ldr	r1, [r7, #0]
 802f674:	6878      	ldr	r0, [r7, #4]
 802f676:	f000 fbb0 	bl	802fdda <USBD_CtlError>
                  break;
 802f67a:	e054      	b.n	802f726 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802f67c:	7bbb      	ldrb	r3, [r7, #14]
 802f67e:	f003 020f 	and.w	r2, r3, #15
 802f682:	6879      	ldr	r1, [r7, #4]
 802f684:	4613      	mov	r3, r2
 802f686:	009b      	lsls	r3, r3, #2
 802f688:	4413      	add	r3, r2
 802f68a:	009b      	lsls	r3, r3, #2
 802f68c:	440b      	add	r3, r1
 802f68e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802f692:	881b      	ldrh	r3, [r3, #0]
 802f694:	2b00      	cmp	r3, #0
 802f696:	d104      	bne.n	802f6a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802f698:	6839      	ldr	r1, [r7, #0]
 802f69a:	6878      	ldr	r0, [r7, #4]
 802f69c:	f000 fb9d 	bl	802fdda <USBD_CtlError>
                  break;
 802f6a0:	e041      	b.n	802f726 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802f6a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802f6a6:	2b00      	cmp	r3, #0
 802f6a8:	da0b      	bge.n	802f6c2 <USBD_StdEPReq+0x2b2>
 802f6aa:	7bbb      	ldrb	r3, [r7, #14]
 802f6ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802f6b0:	4613      	mov	r3, r2
 802f6b2:	009b      	lsls	r3, r3, #2
 802f6b4:	4413      	add	r3, r2
 802f6b6:	009b      	lsls	r3, r3, #2
 802f6b8:	3310      	adds	r3, #16
 802f6ba:	687a      	ldr	r2, [r7, #4]
 802f6bc:	4413      	add	r3, r2
 802f6be:	3304      	adds	r3, #4
 802f6c0:	e00b      	b.n	802f6da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802f6c2:	7bbb      	ldrb	r3, [r7, #14]
 802f6c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802f6c8:	4613      	mov	r3, r2
 802f6ca:	009b      	lsls	r3, r3, #2
 802f6cc:	4413      	add	r3, r2
 802f6ce:	009b      	lsls	r3, r3, #2
 802f6d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802f6d4:	687a      	ldr	r2, [r7, #4]
 802f6d6:	4413      	add	r3, r2
 802f6d8:	3304      	adds	r3, #4
 802f6da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802f6dc:	7bbb      	ldrb	r3, [r7, #14]
 802f6de:	2b00      	cmp	r3, #0
 802f6e0:	d002      	beq.n	802f6e8 <USBD_StdEPReq+0x2d8>
 802f6e2:	7bbb      	ldrb	r3, [r7, #14]
 802f6e4:	2b80      	cmp	r3, #128	; 0x80
 802f6e6:	d103      	bne.n	802f6f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 802f6e8:	68bb      	ldr	r3, [r7, #8]
 802f6ea:	2200      	movs	r2, #0
 802f6ec:	601a      	str	r2, [r3, #0]
 802f6ee:	e00e      	b.n	802f70e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802f6f0:	7bbb      	ldrb	r3, [r7, #14]
 802f6f2:	4619      	mov	r1, r3
 802f6f4:	6878      	ldr	r0, [r7, #4]
 802f6f6:	f001 faf5 	bl	8030ce4 <USBD_LL_IsStallEP>
 802f6fa:	4603      	mov	r3, r0
 802f6fc:	2b00      	cmp	r3, #0
 802f6fe:	d003      	beq.n	802f708 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802f700:	68bb      	ldr	r3, [r7, #8]
 802f702:	2201      	movs	r2, #1
 802f704:	601a      	str	r2, [r3, #0]
 802f706:	e002      	b.n	802f70e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 802f708:	68bb      	ldr	r3, [r7, #8]
 802f70a:	2200      	movs	r2, #0
 802f70c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802f70e:	68bb      	ldr	r3, [r7, #8]
 802f710:	2202      	movs	r2, #2
 802f712:	4619      	mov	r1, r3
 802f714:	6878      	ldr	r0, [r7, #4]
 802f716:	f000 fbd1 	bl	802febc <USBD_CtlSendData>
              break;
 802f71a:	e004      	b.n	802f726 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802f71c:	6839      	ldr	r1, [r7, #0]
 802f71e:	6878      	ldr	r0, [r7, #4]
 802f720:	f000 fb5b 	bl	802fdda <USBD_CtlError>
              break;
 802f724:	bf00      	nop
          }
          break;
 802f726:	e004      	b.n	802f732 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 802f728:	6839      	ldr	r1, [r7, #0]
 802f72a:	6878      	ldr	r0, [r7, #4]
 802f72c:	f000 fb55 	bl	802fdda <USBD_CtlError>
          break;
 802f730:	bf00      	nop
      }
      break;
 802f732:	e005      	b.n	802f740 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802f734:	6839      	ldr	r1, [r7, #0]
 802f736:	6878      	ldr	r0, [r7, #4]
 802f738:	f000 fb4f 	bl	802fdda <USBD_CtlError>
      break;
 802f73c:	e000      	b.n	802f740 <USBD_StdEPReq+0x330>
      break;
 802f73e:	bf00      	nop
  }

  return ret;
 802f740:	7bfb      	ldrb	r3, [r7, #15]
}
 802f742:	4618      	mov	r0, r3
 802f744:	3710      	adds	r7, #16
 802f746:	46bd      	mov	sp, r7
 802f748:	bd80      	pop	{r7, pc}
	...

0802f74c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f74c:	b580      	push	{r7, lr}
 802f74e:	b084      	sub	sp, #16
 802f750:	af00      	add	r7, sp, #0
 802f752:	6078      	str	r0, [r7, #4]
 802f754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f756:	2300      	movs	r3, #0
 802f758:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802f75a:	2300      	movs	r3, #0
 802f75c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802f75e:	2300      	movs	r3, #0
 802f760:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802f762:	683b      	ldr	r3, [r7, #0]
 802f764:	885b      	ldrh	r3, [r3, #2]
 802f766:	0a1b      	lsrs	r3, r3, #8
 802f768:	b29b      	uxth	r3, r3
 802f76a:	3b01      	subs	r3, #1
 802f76c:	2b06      	cmp	r3, #6
 802f76e:	f200 8128 	bhi.w	802f9c2 <USBD_GetDescriptor+0x276>
 802f772:	a201      	add	r2, pc, #4	; (adr r2, 802f778 <USBD_GetDescriptor+0x2c>)
 802f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f778:	0802f795 	.word	0x0802f795
 802f77c:	0802f7ad 	.word	0x0802f7ad
 802f780:	0802f7ed 	.word	0x0802f7ed
 802f784:	0802f9c3 	.word	0x0802f9c3
 802f788:	0802f9c3 	.word	0x0802f9c3
 802f78c:	0802f963 	.word	0x0802f963
 802f790:	0802f98f 	.word	0x0802f98f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802f794:	687b      	ldr	r3, [r7, #4]
 802f796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f79a:	681b      	ldr	r3, [r3, #0]
 802f79c:	687a      	ldr	r2, [r7, #4]
 802f79e:	7c12      	ldrb	r2, [r2, #16]
 802f7a0:	f107 0108 	add.w	r1, r7, #8
 802f7a4:	4610      	mov	r0, r2
 802f7a6:	4798      	blx	r3
 802f7a8:	60f8      	str	r0, [r7, #12]
      break;
 802f7aa:	e112      	b.n	802f9d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f7ac:	687b      	ldr	r3, [r7, #4]
 802f7ae:	7c1b      	ldrb	r3, [r3, #16]
 802f7b0:	2b00      	cmp	r3, #0
 802f7b2:	d10d      	bne.n	802f7d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 802f7b4:	687b      	ldr	r3, [r7, #4]
 802f7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f7bc:	f107 0208 	add.w	r2, r7, #8
 802f7c0:	4610      	mov	r0, r2
 802f7c2:	4798      	blx	r3
 802f7c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802f7c6:	68fb      	ldr	r3, [r7, #12]
 802f7c8:	3301      	adds	r3, #1
 802f7ca:	2202      	movs	r2, #2
 802f7cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802f7ce:	e100      	b.n	802f9d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802f7d0:	687b      	ldr	r3, [r7, #4]
 802f7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f7d8:	f107 0208 	add.w	r2, r7, #8
 802f7dc:	4610      	mov	r0, r2
 802f7de:	4798      	blx	r3
 802f7e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802f7e2:	68fb      	ldr	r3, [r7, #12]
 802f7e4:	3301      	adds	r3, #1
 802f7e6:	2202      	movs	r2, #2
 802f7e8:	701a      	strb	r2, [r3, #0]
      break;
 802f7ea:	e0f2      	b.n	802f9d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802f7ec:	683b      	ldr	r3, [r7, #0]
 802f7ee:	885b      	ldrh	r3, [r3, #2]
 802f7f0:	b2db      	uxtb	r3, r3
 802f7f2:	2b05      	cmp	r3, #5
 802f7f4:	f200 80ac 	bhi.w	802f950 <USBD_GetDescriptor+0x204>
 802f7f8:	a201      	add	r2, pc, #4	; (adr r2, 802f800 <USBD_GetDescriptor+0xb4>)
 802f7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f7fe:	bf00      	nop
 802f800:	0802f819 	.word	0x0802f819
 802f804:	0802f84d 	.word	0x0802f84d
 802f808:	0802f881 	.word	0x0802f881
 802f80c:	0802f8b5 	.word	0x0802f8b5
 802f810:	0802f8e9 	.word	0x0802f8e9
 802f814:	0802f91d 	.word	0x0802f91d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802f818:	687b      	ldr	r3, [r7, #4]
 802f81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f81e:	685b      	ldr	r3, [r3, #4]
 802f820:	2b00      	cmp	r3, #0
 802f822:	d00b      	beq.n	802f83c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802f824:	687b      	ldr	r3, [r7, #4]
 802f826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f82a:	685b      	ldr	r3, [r3, #4]
 802f82c:	687a      	ldr	r2, [r7, #4]
 802f82e:	7c12      	ldrb	r2, [r2, #16]
 802f830:	f107 0108 	add.w	r1, r7, #8
 802f834:	4610      	mov	r0, r2
 802f836:	4798      	blx	r3
 802f838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f83a:	e091      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f83c:	6839      	ldr	r1, [r7, #0]
 802f83e:	6878      	ldr	r0, [r7, #4]
 802f840:	f000 facb 	bl	802fdda <USBD_CtlError>
            err++;
 802f844:	7afb      	ldrb	r3, [r7, #11]
 802f846:	3301      	adds	r3, #1
 802f848:	72fb      	strb	r3, [r7, #11]
          break;
 802f84a:	e089      	b.n	802f960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802f84c:	687b      	ldr	r3, [r7, #4]
 802f84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f852:	689b      	ldr	r3, [r3, #8]
 802f854:	2b00      	cmp	r3, #0
 802f856:	d00b      	beq.n	802f870 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802f858:	687b      	ldr	r3, [r7, #4]
 802f85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f85e:	689b      	ldr	r3, [r3, #8]
 802f860:	687a      	ldr	r2, [r7, #4]
 802f862:	7c12      	ldrb	r2, [r2, #16]
 802f864:	f107 0108 	add.w	r1, r7, #8
 802f868:	4610      	mov	r0, r2
 802f86a:	4798      	blx	r3
 802f86c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f86e:	e077      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f870:	6839      	ldr	r1, [r7, #0]
 802f872:	6878      	ldr	r0, [r7, #4]
 802f874:	f000 fab1 	bl	802fdda <USBD_CtlError>
            err++;
 802f878:	7afb      	ldrb	r3, [r7, #11]
 802f87a:	3301      	adds	r3, #1
 802f87c:	72fb      	strb	r3, [r7, #11]
          break;
 802f87e:	e06f      	b.n	802f960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802f880:	687b      	ldr	r3, [r7, #4]
 802f882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f886:	68db      	ldr	r3, [r3, #12]
 802f888:	2b00      	cmp	r3, #0
 802f88a:	d00b      	beq.n	802f8a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f892:	68db      	ldr	r3, [r3, #12]
 802f894:	687a      	ldr	r2, [r7, #4]
 802f896:	7c12      	ldrb	r2, [r2, #16]
 802f898:	f107 0108 	add.w	r1, r7, #8
 802f89c:	4610      	mov	r0, r2
 802f89e:	4798      	blx	r3
 802f8a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f8a2:	e05d      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f8a4:	6839      	ldr	r1, [r7, #0]
 802f8a6:	6878      	ldr	r0, [r7, #4]
 802f8a8:	f000 fa97 	bl	802fdda <USBD_CtlError>
            err++;
 802f8ac:	7afb      	ldrb	r3, [r7, #11]
 802f8ae:	3301      	adds	r3, #1
 802f8b0:	72fb      	strb	r3, [r7, #11]
          break;
 802f8b2:	e055      	b.n	802f960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802f8b4:	687b      	ldr	r3, [r7, #4]
 802f8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f8ba:	691b      	ldr	r3, [r3, #16]
 802f8bc:	2b00      	cmp	r3, #0
 802f8be:	d00b      	beq.n	802f8d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802f8c0:	687b      	ldr	r3, [r7, #4]
 802f8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f8c6:	691b      	ldr	r3, [r3, #16]
 802f8c8:	687a      	ldr	r2, [r7, #4]
 802f8ca:	7c12      	ldrb	r2, [r2, #16]
 802f8cc:	f107 0108 	add.w	r1, r7, #8
 802f8d0:	4610      	mov	r0, r2
 802f8d2:	4798      	blx	r3
 802f8d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f8d6:	e043      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f8d8:	6839      	ldr	r1, [r7, #0]
 802f8da:	6878      	ldr	r0, [r7, #4]
 802f8dc:	f000 fa7d 	bl	802fdda <USBD_CtlError>
            err++;
 802f8e0:	7afb      	ldrb	r3, [r7, #11]
 802f8e2:	3301      	adds	r3, #1
 802f8e4:	72fb      	strb	r3, [r7, #11]
          break;
 802f8e6:	e03b      	b.n	802f960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802f8e8:	687b      	ldr	r3, [r7, #4]
 802f8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f8ee:	695b      	ldr	r3, [r3, #20]
 802f8f0:	2b00      	cmp	r3, #0
 802f8f2:	d00b      	beq.n	802f90c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802f8f4:	687b      	ldr	r3, [r7, #4]
 802f8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f8fa:	695b      	ldr	r3, [r3, #20]
 802f8fc:	687a      	ldr	r2, [r7, #4]
 802f8fe:	7c12      	ldrb	r2, [r2, #16]
 802f900:	f107 0108 	add.w	r1, r7, #8
 802f904:	4610      	mov	r0, r2
 802f906:	4798      	blx	r3
 802f908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f90a:	e029      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f90c:	6839      	ldr	r1, [r7, #0]
 802f90e:	6878      	ldr	r0, [r7, #4]
 802f910:	f000 fa63 	bl	802fdda <USBD_CtlError>
            err++;
 802f914:	7afb      	ldrb	r3, [r7, #11]
 802f916:	3301      	adds	r3, #1
 802f918:	72fb      	strb	r3, [r7, #11]
          break;
 802f91a:	e021      	b.n	802f960 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802f91c:	687b      	ldr	r3, [r7, #4]
 802f91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f922:	699b      	ldr	r3, [r3, #24]
 802f924:	2b00      	cmp	r3, #0
 802f926:	d00b      	beq.n	802f940 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802f928:	687b      	ldr	r3, [r7, #4]
 802f92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802f92e:	699b      	ldr	r3, [r3, #24]
 802f930:	687a      	ldr	r2, [r7, #4]
 802f932:	7c12      	ldrb	r2, [r2, #16]
 802f934:	f107 0108 	add.w	r1, r7, #8
 802f938:	4610      	mov	r0, r2
 802f93a:	4798      	blx	r3
 802f93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802f93e:	e00f      	b.n	802f960 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802f940:	6839      	ldr	r1, [r7, #0]
 802f942:	6878      	ldr	r0, [r7, #4]
 802f944:	f000 fa49 	bl	802fdda <USBD_CtlError>
            err++;
 802f948:	7afb      	ldrb	r3, [r7, #11]
 802f94a:	3301      	adds	r3, #1
 802f94c:	72fb      	strb	r3, [r7, #11]
          break;
 802f94e:	e007      	b.n	802f960 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802f950:	6839      	ldr	r1, [r7, #0]
 802f952:	6878      	ldr	r0, [r7, #4]
 802f954:	f000 fa41 	bl	802fdda <USBD_CtlError>
          err++;
 802f958:	7afb      	ldrb	r3, [r7, #11]
 802f95a:	3301      	adds	r3, #1
 802f95c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802f95e:	bf00      	nop
      }
      break;
 802f960:	e037      	b.n	802f9d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f962:	687b      	ldr	r3, [r7, #4]
 802f964:	7c1b      	ldrb	r3, [r3, #16]
 802f966:	2b00      	cmp	r3, #0
 802f968:	d109      	bne.n	802f97e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 802f96a:	687b      	ldr	r3, [r7, #4]
 802f96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802f972:	f107 0208 	add.w	r2, r7, #8
 802f976:	4610      	mov	r0, r2
 802f978:	4798      	blx	r3
 802f97a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802f97c:	e029      	b.n	802f9d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 802f97e:	6839      	ldr	r1, [r7, #0]
 802f980:	6878      	ldr	r0, [r7, #4]
 802f982:	f000 fa2a 	bl	802fdda <USBD_CtlError>
        err++;
 802f986:	7afb      	ldrb	r3, [r7, #11]
 802f988:	3301      	adds	r3, #1
 802f98a:	72fb      	strb	r3, [r7, #11]
      break;
 802f98c:	e021      	b.n	802f9d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f98e:	687b      	ldr	r3, [r7, #4]
 802f990:	7c1b      	ldrb	r3, [r3, #16]
 802f992:	2b00      	cmp	r3, #0
 802f994:	d10d      	bne.n	802f9b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 802f996:	687b      	ldr	r3, [r7, #4]
 802f998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f99e:	f107 0208 	add.w	r2, r7, #8
 802f9a2:	4610      	mov	r0, r2
 802f9a4:	4798      	blx	r3
 802f9a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 802f9a8:	68fb      	ldr	r3, [r7, #12]
 802f9aa:	3301      	adds	r3, #1
 802f9ac:	2207      	movs	r2, #7
 802f9ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802f9b0:	e00f      	b.n	802f9d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 802f9b2:	6839      	ldr	r1, [r7, #0]
 802f9b4:	6878      	ldr	r0, [r7, #4]
 802f9b6:	f000 fa10 	bl	802fdda <USBD_CtlError>
        err++;
 802f9ba:	7afb      	ldrb	r3, [r7, #11]
 802f9bc:	3301      	adds	r3, #1
 802f9be:	72fb      	strb	r3, [r7, #11]
      break;
 802f9c0:	e007      	b.n	802f9d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 802f9c2:	6839      	ldr	r1, [r7, #0]
 802f9c4:	6878      	ldr	r0, [r7, #4]
 802f9c6:	f000 fa08 	bl	802fdda <USBD_CtlError>
      err++;
 802f9ca:	7afb      	ldrb	r3, [r7, #11]
 802f9cc:	3301      	adds	r3, #1
 802f9ce:	72fb      	strb	r3, [r7, #11]
      break;
 802f9d0:	bf00      	nop
  }

  if (err != 0U)
 802f9d2:	7afb      	ldrb	r3, [r7, #11]
 802f9d4:	2b00      	cmp	r3, #0
 802f9d6:	d11e      	bne.n	802fa16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 802f9d8:	683b      	ldr	r3, [r7, #0]
 802f9da:	88db      	ldrh	r3, [r3, #6]
 802f9dc:	2b00      	cmp	r3, #0
 802f9de:	d016      	beq.n	802fa0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 802f9e0:	893b      	ldrh	r3, [r7, #8]
 802f9e2:	2b00      	cmp	r3, #0
 802f9e4:	d00e      	beq.n	802fa04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 802f9e6:	683b      	ldr	r3, [r7, #0]
 802f9e8:	88da      	ldrh	r2, [r3, #6]
 802f9ea:	893b      	ldrh	r3, [r7, #8]
 802f9ec:	4293      	cmp	r3, r2
 802f9ee:	bf28      	it	cs
 802f9f0:	4613      	movcs	r3, r2
 802f9f2:	b29b      	uxth	r3, r3
 802f9f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 802f9f6:	893b      	ldrh	r3, [r7, #8]
 802f9f8:	461a      	mov	r2, r3
 802f9fa:	68f9      	ldr	r1, [r7, #12]
 802f9fc:	6878      	ldr	r0, [r7, #4]
 802f9fe:	f000 fa5d 	bl	802febc <USBD_CtlSendData>
 802fa02:	e009      	b.n	802fa18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 802fa04:	6839      	ldr	r1, [r7, #0]
 802fa06:	6878      	ldr	r0, [r7, #4]
 802fa08:	f000 f9e7 	bl	802fdda <USBD_CtlError>
 802fa0c:	e004      	b.n	802fa18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 802fa0e:	6878      	ldr	r0, [r7, #4]
 802fa10:	f000 faae 	bl	802ff70 <USBD_CtlSendStatus>
 802fa14:	e000      	b.n	802fa18 <USBD_GetDescriptor+0x2cc>
    return;
 802fa16:	bf00      	nop
  }
}
 802fa18:	3710      	adds	r7, #16
 802fa1a:	46bd      	mov	sp, r7
 802fa1c:	bd80      	pop	{r7, pc}
 802fa1e:	bf00      	nop

0802fa20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fa20:	b580      	push	{r7, lr}
 802fa22:	b084      	sub	sp, #16
 802fa24:	af00      	add	r7, sp, #0
 802fa26:	6078      	str	r0, [r7, #4]
 802fa28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 802fa2a:	683b      	ldr	r3, [r7, #0]
 802fa2c:	889b      	ldrh	r3, [r3, #4]
 802fa2e:	2b00      	cmp	r3, #0
 802fa30:	d131      	bne.n	802fa96 <USBD_SetAddress+0x76>
 802fa32:	683b      	ldr	r3, [r7, #0]
 802fa34:	88db      	ldrh	r3, [r3, #6]
 802fa36:	2b00      	cmp	r3, #0
 802fa38:	d12d      	bne.n	802fa96 <USBD_SetAddress+0x76>
 802fa3a:	683b      	ldr	r3, [r7, #0]
 802fa3c:	885b      	ldrh	r3, [r3, #2]
 802fa3e:	2b7f      	cmp	r3, #127	; 0x7f
 802fa40:	d829      	bhi.n	802fa96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 802fa42:	683b      	ldr	r3, [r7, #0]
 802fa44:	885b      	ldrh	r3, [r3, #2]
 802fa46:	b2db      	uxtb	r3, r3
 802fa48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fa4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fa4e:	687b      	ldr	r3, [r7, #4]
 802fa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fa54:	b2db      	uxtb	r3, r3
 802fa56:	2b03      	cmp	r3, #3
 802fa58:	d104      	bne.n	802fa64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 802fa5a:	6839      	ldr	r1, [r7, #0]
 802fa5c:	6878      	ldr	r0, [r7, #4]
 802fa5e:	f000 f9bc 	bl	802fdda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fa62:	e01d      	b.n	802faa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 802fa64:	687b      	ldr	r3, [r7, #4]
 802fa66:	7bfa      	ldrb	r2, [r7, #15]
 802fa68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 802fa6c:	7bfb      	ldrb	r3, [r7, #15]
 802fa6e:	4619      	mov	r1, r3
 802fa70:	6878      	ldr	r0, [r7, #4]
 802fa72:	f001 f963 	bl	8030d3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 802fa76:	6878      	ldr	r0, [r7, #4]
 802fa78:	f000 fa7a 	bl	802ff70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 802fa7c:	7bfb      	ldrb	r3, [r7, #15]
 802fa7e:	2b00      	cmp	r3, #0
 802fa80:	d004      	beq.n	802fa8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802fa82:	687b      	ldr	r3, [r7, #4]
 802fa84:	2202      	movs	r2, #2
 802fa86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fa8a:	e009      	b.n	802faa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 802fa8c:	687b      	ldr	r3, [r7, #4]
 802fa8e:	2201      	movs	r2, #1
 802fa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802fa94:	e004      	b.n	802faa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 802fa96:	6839      	ldr	r1, [r7, #0]
 802fa98:	6878      	ldr	r0, [r7, #4]
 802fa9a:	f000 f99e 	bl	802fdda <USBD_CtlError>
  }
}
 802fa9e:	bf00      	nop
 802faa0:	bf00      	nop
 802faa2:	3710      	adds	r7, #16
 802faa4:	46bd      	mov	sp, r7
 802faa6:	bd80      	pop	{r7, pc}

0802faa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802faa8:	b580      	push	{r7, lr}
 802faaa:	b084      	sub	sp, #16
 802faac:	af00      	add	r7, sp, #0
 802faae:	6078      	str	r0, [r7, #4]
 802fab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802fab2:	2300      	movs	r3, #0
 802fab4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 802fab6:	683b      	ldr	r3, [r7, #0]
 802fab8:	885b      	ldrh	r3, [r3, #2]
 802faba:	b2da      	uxtb	r2, r3
 802fabc:	4b4e      	ldr	r3, [pc, #312]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fabe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802fac0:	4b4d      	ldr	r3, [pc, #308]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fac2:	781b      	ldrb	r3, [r3, #0]
 802fac4:	2b01      	cmp	r3, #1
 802fac6:	d905      	bls.n	802fad4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 802fac8:	6839      	ldr	r1, [r7, #0]
 802faca:	6878      	ldr	r0, [r7, #4]
 802facc:	f000 f985 	bl	802fdda <USBD_CtlError>
    return USBD_FAIL;
 802fad0:	2303      	movs	r3, #3
 802fad2:	e08c      	b.n	802fbee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 802fad4:	687b      	ldr	r3, [r7, #4]
 802fad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fada:	b2db      	uxtb	r3, r3
 802fadc:	2b02      	cmp	r3, #2
 802fade:	d002      	beq.n	802fae6 <USBD_SetConfig+0x3e>
 802fae0:	2b03      	cmp	r3, #3
 802fae2:	d029      	beq.n	802fb38 <USBD_SetConfig+0x90>
 802fae4:	e075      	b.n	802fbd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 802fae6:	4b44      	ldr	r3, [pc, #272]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fae8:	781b      	ldrb	r3, [r3, #0]
 802faea:	2b00      	cmp	r3, #0
 802faec:	d020      	beq.n	802fb30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 802faee:	4b42      	ldr	r3, [pc, #264]	; (802fbf8 <USBD_SetConfig+0x150>)
 802faf0:	781b      	ldrb	r3, [r3, #0]
 802faf2:	461a      	mov	r2, r3
 802faf4:	687b      	ldr	r3, [r7, #4]
 802faf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 802faf8:	4b3f      	ldr	r3, [pc, #252]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fafa:	781b      	ldrb	r3, [r3, #0]
 802fafc:	4619      	mov	r1, r3
 802fafe:	6878      	ldr	r0, [r7, #4]
 802fb00:	f7fe ffe7 	bl	802ead2 <USBD_SetClassConfig>
 802fb04:	4603      	mov	r3, r0
 802fb06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 802fb08:	7bfb      	ldrb	r3, [r7, #15]
 802fb0a:	2b00      	cmp	r3, #0
 802fb0c:	d008      	beq.n	802fb20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 802fb0e:	6839      	ldr	r1, [r7, #0]
 802fb10:	6878      	ldr	r0, [r7, #4]
 802fb12:	f000 f962 	bl	802fdda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802fb16:	687b      	ldr	r3, [r7, #4]
 802fb18:	2202      	movs	r2, #2
 802fb1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802fb1e:	e065      	b.n	802fbec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802fb20:	6878      	ldr	r0, [r7, #4]
 802fb22:	f000 fa25 	bl	802ff70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 802fb26:	687b      	ldr	r3, [r7, #4]
 802fb28:	2203      	movs	r2, #3
 802fb2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802fb2e:	e05d      	b.n	802fbec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802fb30:	6878      	ldr	r0, [r7, #4]
 802fb32:	f000 fa1d 	bl	802ff70 <USBD_CtlSendStatus>
      break;
 802fb36:	e059      	b.n	802fbec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 802fb38:	4b2f      	ldr	r3, [pc, #188]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb3a:	781b      	ldrb	r3, [r3, #0]
 802fb3c:	2b00      	cmp	r3, #0
 802fb3e:	d112      	bne.n	802fb66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802fb40:	687b      	ldr	r3, [r7, #4]
 802fb42:	2202      	movs	r2, #2
 802fb44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 802fb48:	4b2b      	ldr	r3, [pc, #172]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb4a:	781b      	ldrb	r3, [r3, #0]
 802fb4c:	461a      	mov	r2, r3
 802fb4e:	687b      	ldr	r3, [r7, #4]
 802fb50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 802fb52:	4b29      	ldr	r3, [pc, #164]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb54:	781b      	ldrb	r3, [r3, #0]
 802fb56:	4619      	mov	r1, r3
 802fb58:	6878      	ldr	r0, [r7, #4]
 802fb5a:	f7fe ffd6 	bl	802eb0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 802fb5e:	6878      	ldr	r0, [r7, #4]
 802fb60:	f000 fa06 	bl	802ff70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802fb64:	e042      	b.n	802fbec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 802fb66:	4b24      	ldr	r3, [pc, #144]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb68:	781b      	ldrb	r3, [r3, #0]
 802fb6a:	461a      	mov	r2, r3
 802fb6c:	687b      	ldr	r3, [r7, #4]
 802fb6e:	685b      	ldr	r3, [r3, #4]
 802fb70:	429a      	cmp	r2, r3
 802fb72:	d02a      	beq.n	802fbca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802fb74:	687b      	ldr	r3, [r7, #4]
 802fb76:	685b      	ldr	r3, [r3, #4]
 802fb78:	b2db      	uxtb	r3, r3
 802fb7a:	4619      	mov	r1, r3
 802fb7c:	6878      	ldr	r0, [r7, #4]
 802fb7e:	f7fe ffc4 	bl	802eb0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 802fb82:	4b1d      	ldr	r3, [pc, #116]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb84:	781b      	ldrb	r3, [r3, #0]
 802fb86:	461a      	mov	r2, r3
 802fb88:	687b      	ldr	r3, [r7, #4]
 802fb8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 802fb8c:	4b1a      	ldr	r3, [pc, #104]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fb8e:	781b      	ldrb	r3, [r3, #0]
 802fb90:	4619      	mov	r1, r3
 802fb92:	6878      	ldr	r0, [r7, #4]
 802fb94:	f7fe ff9d 	bl	802ead2 <USBD_SetClassConfig>
 802fb98:	4603      	mov	r3, r0
 802fb9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 802fb9c:	7bfb      	ldrb	r3, [r7, #15]
 802fb9e:	2b00      	cmp	r3, #0
 802fba0:	d00f      	beq.n	802fbc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 802fba2:	6839      	ldr	r1, [r7, #0]
 802fba4:	6878      	ldr	r0, [r7, #4]
 802fba6:	f000 f918 	bl	802fdda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 802fbaa:	687b      	ldr	r3, [r7, #4]
 802fbac:	685b      	ldr	r3, [r3, #4]
 802fbae:	b2db      	uxtb	r3, r3
 802fbb0:	4619      	mov	r1, r3
 802fbb2:	6878      	ldr	r0, [r7, #4]
 802fbb4:	f7fe ffa9 	bl	802eb0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802fbb8:	687b      	ldr	r3, [r7, #4]
 802fbba:	2202      	movs	r2, #2
 802fbbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802fbc0:	e014      	b.n	802fbec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802fbc2:	6878      	ldr	r0, [r7, #4]
 802fbc4:	f000 f9d4 	bl	802ff70 <USBD_CtlSendStatus>
      break;
 802fbc8:	e010      	b.n	802fbec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802fbca:	6878      	ldr	r0, [r7, #4]
 802fbcc:	f000 f9d0 	bl	802ff70 <USBD_CtlSendStatus>
      break;
 802fbd0:	e00c      	b.n	802fbec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 802fbd2:	6839      	ldr	r1, [r7, #0]
 802fbd4:	6878      	ldr	r0, [r7, #4]
 802fbd6:	f000 f900 	bl	802fdda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 802fbda:	4b07      	ldr	r3, [pc, #28]	; (802fbf8 <USBD_SetConfig+0x150>)
 802fbdc:	781b      	ldrb	r3, [r3, #0]
 802fbde:	4619      	mov	r1, r3
 802fbe0:	6878      	ldr	r0, [r7, #4]
 802fbe2:	f7fe ff92 	bl	802eb0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 802fbe6:	2303      	movs	r3, #3
 802fbe8:	73fb      	strb	r3, [r7, #15]
      break;
 802fbea:	bf00      	nop
  }

  return ret;
 802fbec:	7bfb      	ldrb	r3, [r7, #15]
}
 802fbee:	4618      	mov	r0, r3
 802fbf0:	3710      	adds	r7, #16
 802fbf2:	46bd      	mov	sp, r7
 802fbf4:	bd80      	pop	{r7, pc}
 802fbf6:	bf00      	nop
 802fbf8:	2000521c 	.word	0x2000521c

0802fbfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fbfc:	b580      	push	{r7, lr}
 802fbfe:	b082      	sub	sp, #8
 802fc00:	af00      	add	r7, sp, #0
 802fc02:	6078      	str	r0, [r7, #4]
 802fc04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 802fc06:	683b      	ldr	r3, [r7, #0]
 802fc08:	88db      	ldrh	r3, [r3, #6]
 802fc0a:	2b01      	cmp	r3, #1
 802fc0c:	d004      	beq.n	802fc18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 802fc0e:	6839      	ldr	r1, [r7, #0]
 802fc10:	6878      	ldr	r0, [r7, #4]
 802fc12:	f000 f8e2 	bl	802fdda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802fc16:	e023      	b.n	802fc60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc1e:	b2db      	uxtb	r3, r3
 802fc20:	2b02      	cmp	r3, #2
 802fc22:	dc02      	bgt.n	802fc2a <USBD_GetConfig+0x2e>
 802fc24:	2b00      	cmp	r3, #0
 802fc26:	dc03      	bgt.n	802fc30 <USBD_GetConfig+0x34>
 802fc28:	e015      	b.n	802fc56 <USBD_GetConfig+0x5a>
 802fc2a:	2b03      	cmp	r3, #3
 802fc2c:	d00b      	beq.n	802fc46 <USBD_GetConfig+0x4a>
 802fc2e:	e012      	b.n	802fc56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 802fc30:	687b      	ldr	r3, [r7, #4]
 802fc32:	2200      	movs	r2, #0
 802fc34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 802fc36:	687b      	ldr	r3, [r7, #4]
 802fc38:	3308      	adds	r3, #8
 802fc3a:	2201      	movs	r2, #1
 802fc3c:	4619      	mov	r1, r3
 802fc3e:	6878      	ldr	r0, [r7, #4]
 802fc40:	f000 f93c 	bl	802febc <USBD_CtlSendData>
        break;
 802fc44:	e00c      	b.n	802fc60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 802fc46:	687b      	ldr	r3, [r7, #4]
 802fc48:	3304      	adds	r3, #4
 802fc4a:	2201      	movs	r2, #1
 802fc4c:	4619      	mov	r1, r3
 802fc4e:	6878      	ldr	r0, [r7, #4]
 802fc50:	f000 f934 	bl	802febc <USBD_CtlSendData>
        break;
 802fc54:	e004      	b.n	802fc60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 802fc56:	6839      	ldr	r1, [r7, #0]
 802fc58:	6878      	ldr	r0, [r7, #4]
 802fc5a:	f000 f8be 	bl	802fdda <USBD_CtlError>
        break;
 802fc5e:	bf00      	nop
}
 802fc60:	bf00      	nop
 802fc62:	3708      	adds	r7, #8
 802fc64:	46bd      	mov	sp, r7
 802fc66:	bd80      	pop	{r7, pc}

0802fc68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fc68:	b580      	push	{r7, lr}
 802fc6a:	b082      	sub	sp, #8
 802fc6c:	af00      	add	r7, sp, #0
 802fc6e:	6078      	str	r0, [r7, #4]
 802fc70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802fc72:	687b      	ldr	r3, [r7, #4]
 802fc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc78:	b2db      	uxtb	r3, r3
 802fc7a:	3b01      	subs	r3, #1
 802fc7c:	2b02      	cmp	r3, #2
 802fc7e:	d81e      	bhi.n	802fcbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802fc80:	683b      	ldr	r3, [r7, #0]
 802fc82:	88db      	ldrh	r3, [r3, #6]
 802fc84:	2b02      	cmp	r3, #2
 802fc86:	d004      	beq.n	802fc92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 802fc88:	6839      	ldr	r1, [r7, #0]
 802fc8a:	6878      	ldr	r0, [r7, #4]
 802fc8c:	f000 f8a5 	bl	802fdda <USBD_CtlError>
        break;
 802fc90:	e01a      	b.n	802fcc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802fc92:	687b      	ldr	r3, [r7, #4]
 802fc94:	2201      	movs	r2, #1
 802fc96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 802fc98:	687b      	ldr	r3, [r7, #4]
 802fc9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 802fc9e:	2b00      	cmp	r3, #0
 802fca0:	d005      	beq.n	802fcae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 802fca2:	687b      	ldr	r3, [r7, #4]
 802fca4:	68db      	ldr	r3, [r3, #12]
 802fca6:	f043 0202 	orr.w	r2, r3, #2
 802fcaa:	687b      	ldr	r3, [r7, #4]
 802fcac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 802fcae:	687b      	ldr	r3, [r7, #4]
 802fcb0:	330c      	adds	r3, #12
 802fcb2:	2202      	movs	r2, #2
 802fcb4:	4619      	mov	r1, r3
 802fcb6:	6878      	ldr	r0, [r7, #4]
 802fcb8:	f000 f900 	bl	802febc <USBD_CtlSendData>
      break;
 802fcbc:	e004      	b.n	802fcc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 802fcbe:	6839      	ldr	r1, [r7, #0]
 802fcc0:	6878      	ldr	r0, [r7, #4]
 802fcc2:	f000 f88a 	bl	802fdda <USBD_CtlError>
      break;
 802fcc6:	bf00      	nop
  }
}
 802fcc8:	bf00      	nop
 802fcca:	3708      	adds	r7, #8
 802fccc:	46bd      	mov	sp, r7
 802fcce:	bd80      	pop	{r7, pc}

0802fcd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fcd0:	b580      	push	{r7, lr}
 802fcd2:	b082      	sub	sp, #8
 802fcd4:	af00      	add	r7, sp, #0
 802fcd6:	6078      	str	r0, [r7, #4]
 802fcd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802fcda:	683b      	ldr	r3, [r7, #0]
 802fcdc:	885b      	ldrh	r3, [r3, #2]
 802fcde:	2b01      	cmp	r3, #1
 802fce0:	d107      	bne.n	802fcf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 802fce2:	687b      	ldr	r3, [r7, #4]
 802fce4:	2201      	movs	r2, #1
 802fce6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 802fcea:	6878      	ldr	r0, [r7, #4]
 802fcec:	f000 f940 	bl	802ff70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 802fcf0:	e013      	b.n	802fd1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 802fcf2:	683b      	ldr	r3, [r7, #0]
 802fcf4:	885b      	ldrh	r3, [r3, #2]
 802fcf6:	2b02      	cmp	r3, #2
 802fcf8:	d10b      	bne.n	802fd12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 802fcfa:	683b      	ldr	r3, [r7, #0]
 802fcfc:	889b      	ldrh	r3, [r3, #4]
 802fcfe:	0a1b      	lsrs	r3, r3, #8
 802fd00:	b29b      	uxth	r3, r3
 802fd02:	b2da      	uxtb	r2, r3
 802fd04:	687b      	ldr	r3, [r7, #4]
 802fd06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 802fd0a:	6878      	ldr	r0, [r7, #4]
 802fd0c:	f000 f930 	bl	802ff70 <USBD_CtlSendStatus>
}
 802fd10:	e003      	b.n	802fd1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 802fd12:	6839      	ldr	r1, [r7, #0]
 802fd14:	6878      	ldr	r0, [r7, #4]
 802fd16:	f000 f860 	bl	802fdda <USBD_CtlError>
}
 802fd1a:	bf00      	nop
 802fd1c:	3708      	adds	r7, #8
 802fd1e:	46bd      	mov	sp, r7
 802fd20:	bd80      	pop	{r7, pc}

0802fd22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fd22:	b580      	push	{r7, lr}
 802fd24:	b082      	sub	sp, #8
 802fd26:	af00      	add	r7, sp, #0
 802fd28:	6078      	str	r0, [r7, #4]
 802fd2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802fd2c:	687b      	ldr	r3, [r7, #4]
 802fd2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fd32:	b2db      	uxtb	r3, r3
 802fd34:	3b01      	subs	r3, #1
 802fd36:	2b02      	cmp	r3, #2
 802fd38:	d80b      	bhi.n	802fd52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802fd3a:	683b      	ldr	r3, [r7, #0]
 802fd3c:	885b      	ldrh	r3, [r3, #2]
 802fd3e:	2b01      	cmp	r3, #1
 802fd40:	d10c      	bne.n	802fd5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 802fd42:	687b      	ldr	r3, [r7, #4]
 802fd44:	2200      	movs	r2, #0
 802fd46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 802fd4a:	6878      	ldr	r0, [r7, #4]
 802fd4c:	f000 f910 	bl	802ff70 <USBD_CtlSendStatus>
      }
      break;
 802fd50:	e004      	b.n	802fd5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 802fd52:	6839      	ldr	r1, [r7, #0]
 802fd54:	6878      	ldr	r0, [r7, #4]
 802fd56:	f000 f840 	bl	802fdda <USBD_CtlError>
      break;
 802fd5a:	e000      	b.n	802fd5e <USBD_ClrFeature+0x3c>
      break;
 802fd5c:	bf00      	nop
  }
}
 802fd5e:	bf00      	nop
 802fd60:	3708      	adds	r7, #8
 802fd62:	46bd      	mov	sp, r7
 802fd64:	bd80      	pop	{r7, pc}

0802fd66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802fd66:	b580      	push	{r7, lr}
 802fd68:	b084      	sub	sp, #16
 802fd6a:	af00      	add	r7, sp, #0
 802fd6c:	6078      	str	r0, [r7, #4]
 802fd6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 802fd70:	683b      	ldr	r3, [r7, #0]
 802fd72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 802fd74:	68fb      	ldr	r3, [r7, #12]
 802fd76:	781a      	ldrb	r2, [r3, #0]
 802fd78:	687b      	ldr	r3, [r7, #4]
 802fd7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 802fd7c:	68fb      	ldr	r3, [r7, #12]
 802fd7e:	3301      	adds	r3, #1
 802fd80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 802fd82:	68fb      	ldr	r3, [r7, #12]
 802fd84:	781a      	ldrb	r2, [r3, #0]
 802fd86:	687b      	ldr	r3, [r7, #4]
 802fd88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 802fd8a:	68fb      	ldr	r3, [r7, #12]
 802fd8c:	3301      	adds	r3, #1
 802fd8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 802fd90:	68f8      	ldr	r0, [r7, #12]
 802fd92:	f7ff fa41 	bl	802f218 <SWAPBYTE>
 802fd96:	4603      	mov	r3, r0
 802fd98:	461a      	mov	r2, r3
 802fd9a:	687b      	ldr	r3, [r7, #4]
 802fd9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 802fd9e:	68fb      	ldr	r3, [r7, #12]
 802fda0:	3301      	adds	r3, #1
 802fda2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802fda4:	68fb      	ldr	r3, [r7, #12]
 802fda6:	3301      	adds	r3, #1
 802fda8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 802fdaa:	68f8      	ldr	r0, [r7, #12]
 802fdac:	f7ff fa34 	bl	802f218 <SWAPBYTE>
 802fdb0:	4603      	mov	r3, r0
 802fdb2:	461a      	mov	r2, r3
 802fdb4:	687b      	ldr	r3, [r7, #4]
 802fdb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 802fdb8:	68fb      	ldr	r3, [r7, #12]
 802fdba:	3301      	adds	r3, #1
 802fdbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 802fdbe:	68fb      	ldr	r3, [r7, #12]
 802fdc0:	3301      	adds	r3, #1
 802fdc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 802fdc4:	68f8      	ldr	r0, [r7, #12]
 802fdc6:	f7ff fa27 	bl	802f218 <SWAPBYTE>
 802fdca:	4603      	mov	r3, r0
 802fdcc:	461a      	mov	r2, r3
 802fdce:	687b      	ldr	r3, [r7, #4]
 802fdd0:	80da      	strh	r2, [r3, #6]
}
 802fdd2:	bf00      	nop
 802fdd4:	3710      	adds	r7, #16
 802fdd6:	46bd      	mov	sp, r7
 802fdd8:	bd80      	pop	{r7, pc}

0802fdda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fdda:	b580      	push	{r7, lr}
 802fddc:	b082      	sub	sp, #8
 802fdde:	af00      	add	r7, sp, #0
 802fde0:	6078      	str	r0, [r7, #4]
 802fde2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 802fde4:	2180      	movs	r1, #128	; 0x80
 802fde6:	6878      	ldr	r0, [r7, #4]
 802fde8:	f000 ff3e 	bl	8030c68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 802fdec:	2100      	movs	r1, #0
 802fdee:	6878      	ldr	r0, [r7, #4]
 802fdf0:	f000 ff3a 	bl	8030c68 <USBD_LL_StallEP>
}
 802fdf4:	bf00      	nop
 802fdf6:	3708      	adds	r7, #8
 802fdf8:	46bd      	mov	sp, r7
 802fdfa:	bd80      	pop	{r7, pc}

0802fdfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 802fdfc:	b580      	push	{r7, lr}
 802fdfe:	b086      	sub	sp, #24
 802fe00:	af00      	add	r7, sp, #0
 802fe02:	60f8      	str	r0, [r7, #12]
 802fe04:	60b9      	str	r1, [r7, #8]
 802fe06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 802fe08:	2300      	movs	r3, #0
 802fe0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 802fe0c:	68fb      	ldr	r3, [r7, #12]
 802fe0e:	2b00      	cmp	r3, #0
 802fe10:	d036      	beq.n	802fe80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 802fe12:	68fb      	ldr	r3, [r7, #12]
 802fe14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 802fe16:	6938      	ldr	r0, [r7, #16]
 802fe18:	f000 f836 	bl	802fe88 <USBD_GetLen>
 802fe1c:	4603      	mov	r3, r0
 802fe1e:	3301      	adds	r3, #1
 802fe20:	b29b      	uxth	r3, r3
 802fe22:	005b      	lsls	r3, r3, #1
 802fe24:	b29a      	uxth	r2, r3
 802fe26:	687b      	ldr	r3, [r7, #4]
 802fe28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 802fe2a:	7dfb      	ldrb	r3, [r7, #23]
 802fe2c:	68ba      	ldr	r2, [r7, #8]
 802fe2e:	4413      	add	r3, r2
 802fe30:	687a      	ldr	r2, [r7, #4]
 802fe32:	7812      	ldrb	r2, [r2, #0]
 802fe34:	701a      	strb	r2, [r3, #0]
  idx++;
 802fe36:	7dfb      	ldrb	r3, [r7, #23]
 802fe38:	3301      	adds	r3, #1
 802fe3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 802fe3c:	7dfb      	ldrb	r3, [r7, #23]
 802fe3e:	68ba      	ldr	r2, [r7, #8]
 802fe40:	4413      	add	r3, r2
 802fe42:	2203      	movs	r2, #3
 802fe44:	701a      	strb	r2, [r3, #0]
  idx++;
 802fe46:	7dfb      	ldrb	r3, [r7, #23]
 802fe48:	3301      	adds	r3, #1
 802fe4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 802fe4c:	e013      	b.n	802fe76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 802fe4e:	7dfb      	ldrb	r3, [r7, #23]
 802fe50:	68ba      	ldr	r2, [r7, #8]
 802fe52:	4413      	add	r3, r2
 802fe54:	693a      	ldr	r2, [r7, #16]
 802fe56:	7812      	ldrb	r2, [r2, #0]
 802fe58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 802fe5a:	693b      	ldr	r3, [r7, #16]
 802fe5c:	3301      	adds	r3, #1
 802fe5e:	613b      	str	r3, [r7, #16]
    idx++;
 802fe60:	7dfb      	ldrb	r3, [r7, #23]
 802fe62:	3301      	adds	r3, #1
 802fe64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 802fe66:	7dfb      	ldrb	r3, [r7, #23]
 802fe68:	68ba      	ldr	r2, [r7, #8]
 802fe6a:	4413      	add	r3, r2
 802fe6c:	2200      	movs	r2, #0
 802fe6e:	701a      	strb	r2, [r3, #0]
    idx++;
 802fe70:	7dfb      	ldrb	r3, [r7, #23]
 802fe72:	3301      	adds	r3, #1
 802fe74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 802fe76:	693b      	ldr	r3, [r7, #16]
 802fe78:	781b      	ldrb	r3, [r3, #0]
 802fe7a:	2b00      	cmp	r3, #0
 802fe7c:	d1e7      	bne.n	802fe4e <USBD_GetString+0x52>
 802fe7e:	e000      	b.n	802fe82 <USBD_GetString+0x86>
    return;
 802fe80:	bf00      	nop
  }
}
 802fe82:	3718      	adds	r7, #24
 802fe84:	46bd      	mov	sp, r7
 802fe86:	bd80      	pop	{r7, pc}

0802fe88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802fe88:	b480      	push	{r7}
 802fe8a:	b085      	sub	sp, #20
 802fe8c:	af00      	add	r7, sp, #0
 802fe8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 802fe90:	2300      	movs	r3, #0
 802fe92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 802fe94:	687b      	ldr	r3, [r7, #4]
 802fe96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 802fe98:	e005      	b.n	802fea6 <USBD_GetLen+0x1e>
  {
    len++;
 802fe9a:	7bfb      	ldrb	r3, [r7, #15]
 802fe9c:	3301      	adds	r3, #1
 802fe9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 802fea0:	68bb      	ldr	r3, [r7, #8]
 802fea2:	3301      	adds	r3, #1
 802fea4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 802fea6:	68bb      	ldr	r3, [r7, #8]
 802fea8:	781b      	ldrb	r3, [r3, #0]
 802feaa:	2b00      	cmp	r3, #0
 802feac:	d1f5      	bne.n	802fe9a <USBD_GetLen+0x12>
  }

  return len;
 802feae:	7bfb      	ldrb	r3, [r7, #15]
}
 802feb0:	4618      	mov	r0, r3
 802feb2:	3714      	adds	r7, #20
 802feb4:	46bd      	mov	sp, r7
 802feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802feba:	4770      	bx	lr

0802febc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 802febc:	b580      	push	{r7, lr}
 802febe:	b084      	sub	sp, #16
 802fec0:	af00      	add	r7, sp, #0
 802fec2:	60f8      	str	r0, [r7, #12]
 802fec4:	60b9      	str	r1, [r7, #8]
 802fec6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 802fec8:	68fb      	ldr	r3, [r7, #12]
 802feca:	2202      	movs	r2, #2
 802fecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 802fed0:	68fb      	ldr	r3, [r7, #12]
 802fed2:	687a      	ldr	r2, [r7, #4]
 802fed4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 802fed6:	68fb      	ldr	r3, [r7, #12]
 802fed8:	687a      	ldr	r2, [r7, #4]
 802feda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802fedc:	687b      	ldr	r3, [r7, #4]
 802fede:	68ba      	ldr	r2, [r7, #8]
 802fee0:	2100      	movs	r1, #0
 802fee2:	68f8      	ldr	r0, [r7, #12]
 802fee4:	f000 ff49 	bl	8030d7a <USBD_LL_Transmit>

  return USBD_OK;
 802fee8:	2300      	movs	r3, #0
}
 802feea:	4618      	mov	r0, r3
 802feec:	3710      	adds	r7, #16
 802feee:	46bd      	mov	sp, r7
 802fef0:	bd80      	pop	{r7, pc}

0802fef2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 802fef2:	b580      	push	{r7, lr}
 802fef4:	b084      	sub	sp, #16
 802fef6:	af00      	add	r7, sp, #0
 802fef8:	60f8      	str	r0, [r7, #12]
 802fefa:	60b9      	str	r1, [r7, #8]
 802fefc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 802fefe:	687b      	ldr	r3, [r7, #4]
 802ff00:	68ba      	ldr	r2, [r7, #8]
 802ff02:	2100      	movs	r1, #0
 802ff04:	68f8      	ldr	r0, [r7, #12]
 802ff06:	f000 ff38 	bl	8030d7a <USBD_LL_Transmit>

  return USBD_OK;
 802ff0a:	2300      	movs	r3, #0
}
 802ff0c:	4618      	mov	r0, r3
 802ff0e:	3710      	adds	r7, #16
 802ff10:	46bd      	mov	sp, r7
 802ff12:	bd80      	pop	{r7, pc}

0802ff14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 802ff14:	b580      	push	{r7, lr}
 802ff16:	b084      	sub	sp, #16
 802ff18:	af00      	add	r7, sp, #0
 802ff1a:	60f8      	str	r0, [r7, #12]
 802ff1c:	60b9      	str	r1, [r7, #8]
 802ff1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802ff20:	68fb      	ldr	r3, [r7, #12]
 802ff22:	2203      	movs	r2, #3
 802ff24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 802ff28:	68fb      	ldr	r3, [r7, #12]
 802ff2a:	687a      	ldr	r2, [r7, #4]
 802ff2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 802ff30:	68fb      	ldr	r3, [r7, #12]
 802ff32:	687a      	ldr	r2, [r7, #4]
 802ff34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802ff38:	687b      	ldr	r3, [r7, #4]
 802ff3a:	68ba      	ldr	r2, [r7, #8]
 802ff3c:	2100      	movs	r1, #0
 802ff3e:	68f8      	ldr	r0, [r7, #12]
 802ff40:	f000 ff3c 	bl	8030dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 802ff44:	2300      	movs	r3, #0
}
 802ff46:	4618      	mov	r0, r3
 802ff48:	3710      	adds	r7, #16
 802ff4a:	46bd      	mov	sp, r7
 802ff4c:	bd80      	pop	{r7, pc}

0802ff4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 802ff4e:	b580      	push	{r7, lr}
 802ff50:	b084      	sub	sp, #16
 802ff52:	af00      	add	r7, sp, #0
 802ff54:	60f8      	str	r0, [r7, #12]
 802ff56:	60b9      	str	r1, [r7, #8]
 802ff58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802ff5a:	687b      	ldr	r3, [r7, #4]
 802ff5c:	68ba      	ldr	r2, [r7, #8]
 802ff5e:	2100      	movs	r1, #0
 802ff60:	68f8      	ldr	r0, [r7, #12]
 802ff62:	f000 ff2b 	bl	8030dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 802ff66:	2300      	movs	r3, #0
}
 802ff68:	4618      	mov	r0, r3
 802ff6a:	3710      	adds	r7, #16
 802ff6c:	46bd      	mov	sp, r7
 802ff6e:	bd80      	pop	{r7, pc}

0802ff70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802ff70:	b580      	push	{r7, lr}
 802ff72:	b082      	sub	sp, #8
 802ff74:	af00      	add	r7, sp, #0
 802ff76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802ff78:	687b      	ldr	r3, [r7, #4]
 802ff7a:	2204      	movs	r2, #4
 802ff7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802ff80:	2300      	movs	r3, #0
 802ff82:	2200      	movs	r2, #0
 802ff84:	2100      	movs	r1, #0
 802ff86:	6878      	ldr	r0, [r7, #4]
 802ff88:	f000 fef7 	bl	8030d7a <USBD_LL_Transmit>

  return USBD_OK;
 802ff8c:	2300      	movs	r3, #0
}
 802ff8e:	4618      	mov	r0, r3
 802ff90:	3708      	adds	r7, #8
 802ff92:	46bd      	mov	sp, r7
 802ff94:	bd80      	pop	{r7, pc}

0802ff96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802ff96:	b580      	push	{r7, lr}
 802ff98:	b082      	sub	sp, #8
 802ff9a:	af00      	add	r7, sp, #0
 802ff9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802ff9e:	687b      	ldr	r3, [r7, #4]
 802ffa0:	2205      	movs	r2, #5
 802ffa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802ffa6:	2300      	movs	r3, #0
 802ffa8:	2200      	movs	r2, #0
 802ffaa:	2100      	movs	r1, #0
 802ffac:	6878      	ldr	r0, [r7, #4]
 802ffae:	f000 ff05 	bl	8030dbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 802ffb2:	2300      	movs	r3, #0
}
 802ffb4:	4618      	mov	r0, r3
 802ffb6:	3708      	adds	r7, #8
 802ffb8:	46bd      	mov	sp, r7
 802ffba:	bd80      	pop	{r7, pc}

0802ffbc <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802ffbc:	b580      	push	{r7, lr}
 802ffbe:	b082      	sub	sp, #8
 802ffc0:	af00      	add	r7, sp, #0
 802ffc2:	6078      	str	r0, [r7, #4]
 802ffc4:	460b      	mov	r3, r1
 802ffc6:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 802ffc8:	78fb      	ldrb	r3, [r7, #3]
 802ffca:	4619      	mov	r1, r3
 802ffcc:	6878      	ldr	r0, [r7, #4]
 802ffce:	f000 ff16 	bl	8030dfe <USBD_LL_GetRxDataSize>
 802ffd2:	4603      	mov	r3, r0
}
 802ffd4:	4618      	mov	r0, r3
 802ffd6:	3708      	adds	r7, #8
 802ffd8:	46bd      	mov	sp, r7
 802ffda:	bd80      	pop	{r7, pc}

0802ffdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802ffdc:	b580      	push	{r7, lr}
 802ffde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 802ffe0:	2201      	movs	r2, #1
 802ffe2:	4924      	ldr	r1, [pc, #144]	; (8030074 <MX_USB_DEVICE_Init+0x98>)
 802ffe4:	4824      	ldr	r0, [pc, #144]	; (8030078 <MX_USB_DEVICE_Init+0x9c>)
 802ffe6:	f7fe fcf7 	bl	802e9d8 <USBD_Init>
 802ffea:	4603      	mov	r3, r0
 802ffec:	2b00      	cmp	r3, #0
 802ffee:	d001      	beq.n	802fff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802fff0:	f7f3 fcb8 	bl	8023964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 802fff4:	4921      	ldr	r1, [pc, #132]	; (803007c <MX_USB_DEVICE_Init+0xa0>)
 802fff6:	4820      	ldr	r0, [pc, #128]	; (8030078 <MX_USB_DEVICE_Init+0x9c>)
 802fff8:	f7fe fd1e 	bl	802ea38 <USBD_RegisterClass>
 802fffc:	4603      	mov	r3, r0
 802fffe:	2b00      	cmp	r3, #0
 8030000:	d001      	beq.n	8030006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8030002:	f7f3 fcaf 	bl	8023964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8030006:	491e      	ldr	r1, [pc, #120]	; (8030080 <MX_USB_DEVICE_Init+0xa4>)
 8030008:	481b      	ldr	r0, [pc, #108]	; (8030078 <MX_USB_DEVICE_Init+0x9c>)
 803000a:	f7fe fc0f 	bl	802e82c <USBD_CDC_RegisterInterface>
 803000e:	4603      	mov	r3, r0
 8030010:	2b00      	cmp	r3, #0
 8030012:	d001      	beq.n	8030018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8030014:	f7f3 fca6 	bl	8023964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8030018:	4817      	ldr	r0, [pc, #92]	; (8030078 <MX_USB_DEVICE_Init+0x9c>)
 803001a:	f7fe fd43 	bl	802eaa4 <USBD_Start>
 803001e:	4603      	mov	r3, r0
 8030020:	2b00      	cmp	r3, #0
 8030022:	d001      	beq.n	8030028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8030024:	f7f3 fc9e 	bl	8023964 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8030028:	2200      	movs	r2, #0
 803002a:	4916      	ldr	r1, [pc, #88]	; (8030084 <MX_USB_DEVICE_Init+0xa8>)
 803002c:	4816      	ldr	r0, [pc, #88]	; (8030088 <MX_USB_DEVICE_Init+0xac>)
 803002e:	f7fe fcd3 	bl	802e9d8 <USBD_Init>
 8030032:	4603      	mov	r3, r0
 8030034:	2b00      	cmp	r3, #0
 8030036:	d001      	beq.n	803003c <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8030038:	f7f3 fc94 	bl	8023964 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803003c:	490f      	ldr	r1, [pc, #60]	; (803007c <MX_USB_DEVICE_Init+0xa0>)
 803003e:	4812      	ldr	r0, [pc, #72]	; (8030088 <MX_USB_DEVICE_Init+0xac>)
 8030040:	f7fe fcfa 	bl	802ea38 <USBD_RegisterClass>
 8030044:	4603      	mov	r3, r0
 8030046:	2b00      	cmp	r3, #0
 8030048:	d001      	beq.n	803004e <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 803004a:	f7f3 fc8b 	bl	8023964 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803004e:	490f      	ldr	r1, [pc, #60]	; (803008c <MX_USB_DEVICE_Init+0xb0>)
 8030050:	480d      	ldr	r0, [pc, #52]	; (8030088 <MX_USB_DEVICE_Init+0xac>)
 8030052:	f7fe fbeb 	bl	802e82c <USBD_CDC_RegisterInterface>
 8030056:	4603      	mov	r3, r0
 8030058:	2b00      	cmp	r3, #0
 803005a:	d001      	beq.n	8030060 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 803005c:	f7f3 fc82 	bl	8023964 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8030060:	4809      	ldr	r0, [pc, #36]	; (8030088 <MX_USB_DEVICE_Init+0xac>)
 8030062:	f7fe fd1f 	bl	802eaa4 <USBD_Start>
 8030066:	4603      	mov	r3, r0
 8030068:	2b00      	cmp	r3, #0
 803006a:	d001      	beq.n	8030070 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 803006c:	f7f3 fc7a 	bl	8023964 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8030070:	bf00      	nop
 8030072:	bd80      	pop	{r7, pc}
 8030074:	20000228 	.word	0x20000228
 8030078:	20005220 	.word	0x20005220
 803007c:	20000150 	.word	0x20000150
 8030080:	200001e4 	.word	0x200001e4
 8030084:	200001f8 	.word	0x200001f8
 8030088:	200054fc 	.word	0x200054fc
 803008c:	200001d0 	.word	0x200001d0

08030090 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8030090:	b580      	push	{r7, lr}
 8030092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8030094:	2200      	movs	r2, #0
 8030096:	4905      	ldr	r1, [pc, #20]	; (80300ac <CDC_Init_FS+0x1c>)
 8030098:	4805      	ldr	r0, [pc, #20]	; (80300b0 <CDC_Init_FS+0x20>)
 803009a:	f7fe fbe1 	bl	802e860 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803009e:	4905      	ldr	r1, [pc, #20]	; (80300b4 <CDC_Init_FS+0x24>)
 80300a0:	4803      	ldr	r0, [pc, #12]	; (80300b0 <CDC_Init_FS+0x20>)
 80300a2:	f7fe fbff 	bl	802e8a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80300a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80300a8:	4618      	mov	r0, r3
 80300aa:	bd80      	pop	{r7, pc}
 80300ac:	20005fd8 	.word	0x20005fd8
 80300b0:	200054fc 	.word	0x200054fc
 80300b4:	200057d8 	.word	0x200057d8

080300b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80300b8:	b480      	push	{r7}
 80300ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80300bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80300be:	4618      	mov	r0, r3
 80300c0:	46bd      	mov	sp, r7
 80300c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80300c6:	4770      	bx	lr

080300c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80300c8:	b480      	push	{r7}
 80300ca:	b083      	sub	sp, #12
 80300cc:	af00      	add	r7, sp, #0
 80300ce:	4603      	mov	r3, r0
 80300d0:	6039      	str	r1, [r7, #0]
 80300d2:	71fb      	strb	r3, [r7, #7]
 80300d4:	4613      	mov	r3, r2
 80300d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80300d8:	79fb      	ldrb	r3, [r7, #7]
 80300da:	2b23      	cmp	r3, #35	; 0x23
 80300dc:	d84a      	bhi.n	8030174 <CDC_Control_FS+0xac>
 80300de:	a201      	add	r2, pc, #4	; (adr r2, 80300e4 <CDC_Control_FS+0x1c>)
 80300e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80300e4:	08030175 	.word	0x08030175
 80300e8:	08030175 	.word	0x08030175
 80300ec:	08030175 	.word	0x08030175
 80300f0:	08030175 	.word	0x08030175
 80300f4:	08030175 	.word	0x08030175
 80300f8:	08030175 	.word	0x08030175
 80300fc:	08030175 	.word	0x08030175
 8030100:	08030175 	.word	0x08030175
 8030104:	08030175 	.word	0x08030175
 8030108:	08030175 	.word	0x08030175
 803010c:	08030175 	.word	0x08030175
 8030110:	08030175 	.word	0x08030175
 8030114:	08030175 	.word	0x08030175
 8030118:	08030175 	.word	0x08030175
 803011c:	08030175 	.word	0x08030175
 8030120:	08030175 	.word	0x08030175
 8030124:	08030175 	.word	0x08030175
 8030128:	08030175 	.word	0x08030175
 803012c:	08030175 	.word	0x08030175
 8030130:	08030175 	.word	0x08030175
 8030134:	08030175 	.word	0x08030175
 8030138:	08030175 	.word	0x08030175
 803013c:	08030175 	.word	0x08030175
 8030140:	08030175 	.word	0x08030175
 8030144:	08030175 	.word	0x08030175
 8030148:	08030175 	.word	0x08030175
 803014c:	08030175 	.word	0x08030175
 8030150:	08030175 	.word	0x08030175
 8030154:	08030175 	.word	0x08030175
 8030158:	08030175 	.word	0x08030175
 803015c:	08030175 	.word	0x08030175
 8030160:	08030175 	.word	0x08030175
 8030164:	08030175 	.word	0x08030175
 8030168:	08030175 	.word	0x08030175
 803016c:	08030175 	.word	0x08030175
 8030170:	08030175 	.word	0x08030175
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8030174:	bf00      	nop
  }

  return (USBD_OK);
 8030176:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8030178:	4618      	mov	r0, r3
 803017a:	370c      	adds	r7, #12
 803017c:	46bd      	mov	sp, r7
 803017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030182:	4770      	bx	lr

08030184 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8030184:	b580      	push	{r7, lr}
 8030186:	b082      	sub	sp, #8
 8030188:	af00      	add	r7, sp, #0
 803018a:	6078      	str	r0, [r7, #4]
 803018c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803018e:	6879      	ldr	r1, [r7, #4]
 8030190:	4805      	ldr	r0, [pc, #20]	; (80301a8 <CDC_Receive_FS+0x24>)
 8030192:	f7fe fb87 	bl	802e8a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8030196:	4804      	ldr	r0, [pc, #16]	; (80301a8 <CDC_Receive_FS+0x24>)
 8030198:	f7fe fbe8 	bl	802e96c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803019c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803019e:	4618      	mov	r0, r3
 80301a0:	3708      	adds	r7, #8
 80301a2:	46bd      	mov	sp, r7
 80301a4:	bd80      	pop	{r7, pc}
 80301a6:	bf00      	nop
 80301a8:	200054fc 	.word	0x200054fc

080301ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80301ac:	b480      	push	{r7}
 80301ae:	b087      	sub	sp, #28
 80301b0:	af00      	add	r7, sp, #0
 80301b2:	60f8      	str	r0, [r7, #12]
 80301b4:	60b9      	str	r1, [r7, #8]
 80301b6:	4613      	mov	r3, r2
 80301b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80301ba:	2300      	movs	r3, #0
 80301bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80301be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80301c2:	4618      	mov	r0, r3
 80301c4:	371c      	adds	r7, #28
 80301c6:	46bd      	mov	sp, r7
 80301c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80301cc:	4770      	bx	lr
	...

080301d0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80301d0:	b580      	push	{r7, lr}
 80301d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80301d4:	2200      	movs	r2, #0
 80301d6:	4905      	ldr	r1, [pc, #20]	; (80301ec <CDC_Init_HS+0x1c>)
 80301d8:	4805      	ldr	r0, [pc, #20]	; (80301f0 <CDC_Init_HS+0x20>)
 80301da:	f7fe fb41 	bl	802e860 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80301de:	4905      	ldr	r1, [pc, #20]	; (80301f4 <CDC_Init_HS+0x24>)
 80301e0:	4803      	ldr	r0, [pc, #12]	; (80301f0 <CDC_Init_HS+0x20>)
 80301e2:	f7fe fb5f 	bl	802e8a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80301e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80301e8:	4618      	mov	r0, r3
 80301ea:	bd80      	pop	{r7, pc}
 80301ec:	20006fd8 	.word	0x20006fd8
 80301f0:	20005220 	.word	0x20005220
 80301f4:	200067d8 	.word	0x200067d8

080301f8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80301f8:	b480      	push	{r7}
 80301fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80301fc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80301fe:	4618      	mov	r0, r3
 8030200:	46bd      	mov	sp, r7
 8030202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030206:	4770      	bx	lr

08030208 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030208:	b480      	push	{r7}
 803020a:	b083      	sub	sp, #12
 803020c:	af00      	add	r7, sp, #0
 803020e:	4603      	mov	r3, r0
 8030210:	6039      	str	r1, [r7, #0]
 8030212:	71fb      	strb	r3, [r7, #7]
 8030214:	4613      	mov	r3, r2
 8030216:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8030218:	79fb      	ldrb	r3, [r7, #7]
 803021a:	2b23      	cmp	r3, #35	; 0x23
 803021c:	d84a      	bhi.n	80302b4 <CDC_Control_HS+0xac>
 803021e:	a201      	add	r2, pc, #4	; (adr r2, 8030224 <CDC_Control_HS+0x1c>)
 8030220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030224:	080302b5 	.word	0x080302b5
 8030228:	080302b5 	.word	0x080302b5
 803022c:	080302b5 	.word	0x080302b5
 8030230:	080302b5 	.word	0x080302b5
 8030234:	080302b5 	.word	0x080302b5
 8030238:	080302b5 	.word	0x080302b5
 803023c:	080302b5 	.word	0x080302b5
 8030240:	080302b5 	.word	0x080302b5
 8030244:	080302b5 	.word	0x080302b5
 8030248:	080302b5 	.word	0x080302b5
 803024c:	080302b5 	.word	0x080302b5
 8030250:	080302b5 	.word	0x080302b5
 8030254:	080302b5 	.word	0x080302b5
 8030258:	080302b5 	.word	0x080302b5
 803025c:	080302b5 	.word	0x080302b5
 8030260:	080302b5 	.word	0x080302b5
 8030264:	080302b5 	.word	0x080302b5
 8030268:	080302b5 	.word	0x080302b5
 803026c:	080302b5 	.word	0x080302b5
 8030270:	080302b5 	.word	0x080302b5
 8030274:	080302b5 	.word	0x080302b5
 8030278:	080302b5 	.word	0x080302b5
 803027c:	080302b5 	.word	0x080302b5
 8030280:	080302b5 	.word	0x080302b5
 8030284:	080302b5 	.word	0x080302b5
 8030288:	080302b5 	.word	0x080302b5
 803028c:	080302b5 	.word	0x080302b5
 8030290:	080302b5 	.word	0x080302b5
 8030294:	080302b5 	.word	0x080302b5
 8030298:	080302b5 	.word	0x080302b5
 803029c:	080302b5 	.word	0x080302b5
 80302a0:	080302b5 	.word	0x080302b5
 80302a4:	080302b5 	.word	0x080302b5
 80302a8:	080302b5 	.word	0x080302b5
 80302ac:	080302b5 	.word	0x080302b5
 80302b0:	080302b5 	.word	0x080302b5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80302b4:	bf00      	nop
  }

  return (USBD_OK);
 80302b6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80302b8:	4618      	mov	r0, r3
 80302ba:	370c      	adds	r7, #12
 80302bc:	46bd      	mov	sp, r7
 80302be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80302c2:	4770      	bx	lr

080302c4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80302c4:	b580      	push	{r7, lr}
 80302c6:	b082      	sub	sp, #8
 80302c8:	af00      	add	r7, sp, #0
 80302ca:	6078      	str	r0, [r7, #4]
 80302cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  EP3_OUT_Callback(Buf, *Len);
 80302ce:	683b      	ldr	r3, [r7, #0]
 80302d0:	681b      	ldr	r3, [r3, #0]
 80302d2:	4619      	mov	r1, r3
 80302d4:	6878      	ldr	r0, [r7, #4]
 80302d6:	f7f2 fa5b 	bl	8022790 <EP3_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80302da:	6879      	ldr	r1, [r7, #4]
 80302dc:	4805      	ldr	r0, [pc, #20]	; (80302f4 <CDC_Receive_HS+0x30>)
 80302de:	f7fe fae1 	bl	802e8a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80302e2:	4804      	ldr	r0, [pc, #16]	; (80302f4 <CDC_Receive_HS+0x30>)
 80302e4:	f7fe fb42 	bl	802e96c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80302e8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80302ea:	4618      	mov	r0, r3
 80302ec:	3708      	adds	r7, #8
 80302ee:	46bd      	mov	sp, r7
 80302f0:	bd80      	pop	{r7, pc}
 80302f2:	bf00      	nop
 80302f4:	20005220 	.word	0x20005220

080302f8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80302f8:	b580      	push	{r7, lr}
 80302fa:	b084      	sub	sp, #16
 80302fc:	af00      	add	r7, sp, #0
 80302fe:	6078      	str	r0, [r7, #4]
 8030300:	460b      	mov	r3, r1
 8030302:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8030304:	2300      	movs	r3, #0
 8030306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  uint8_t packet_sent = 1;
 8030308:	2301      	movs	r3, #1
 803030a:	73bb      	strb	r3, [r7, #14]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 803030c:	4b0e      	ldr	r3, [pc, #56]	; (8030348 <CDC_Transmit_HS+0x50>)
 803030e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8030312:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8030314:	68bb      	ldr	r3, [r7, #8]
 8030316:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 803031a:	2b00      	cmp	r3, #0
 803031c:	d001      	beq.n	8030322 <CDC_Transmit_HS+0x2a>
    return USBD_BUSY;
 803031e:	2301      	movs	r3, #1
 8030320:	e00d      	b.n	803033e <CDC_Transmit_HS+0x46>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8030322:	887b      	ldrh	r3, [r7, #2]
 8030324:	461a      	mov	r2, r3
 8030326:	6879      	ldr	r1, [r7, #4]
 8030328:	4807      	ldr	r0, [pc, #28]	; (8030348 <CDC_Transmit_HS+0x50>)
 803032a:	f7fe fa99 	bl	802e860 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 803032e:	4806      	ldr	r0, [pc, #24]	; (8030348 <CDC_Transmit_HS+0x50>)
 8030330:	f7fe fad6 	bl	802e8e0 <USBD_CDC_TransmitPacket>
 8030334:	4603      	mov	r3, r0
 8030336:	73fb      	strb	r3, [r7, #15]

  EP1_IN_Callback();
 8030338:	f7f2 f984 	bl	8022644 <EP1_IN_Callback>
  /* USER CODE END 12 */
  return result;
 803033c:	7bfb      	ldrb	r3, [r7, #15]
}
 803033e:	4618      	mov	r0, r3
 8030340:	3710      	adds	r7, #16
 8030342:	46bd      	mov	sp, r7
 8030344:	bd80      	pop	{r7, pc}
 8030346:	bf00      	nop
 8030348:	20005220 	.word	0x20005220

0803034c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803034c:	b580      	push	{r7, lr}
 803034e:	b086      	sub	sp, #24
 8030350:	af00      	add	r7, sp, #0
 8030352:	60f8      	str	r0, [r7, #12]
 8030354:	60b9      	str	r1, [r7, #8]
 8030356:	4613      	mov	r3, r2
 8030358:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803035a:	2300      	movs	r3, #0
 803035c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */

  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  EP1_IN_Callback();
 803035e:	f7f2 f971 	bl	8022644 <EP1_IN_Callback>
  /* USER CODE END 14 */
  return result;
 8030362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030366:	4618      	mov	r0, r3
 8030368:	3718      	adds	r7, #24
 803036a:	46bd      	mov	sp, r7
 803036c:	bd80      	pop	{r7, pc}
	...

08030370 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030370:	b480      	push	{r7}
 8030372:	b083      	sub	sp, #12
 8030374:	af00      	add	r7, sp, #0
 8030376:	4603      	mov	r3, r0
 8030378:	6039      	str	r1, [r7, #0]
 803037a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 803037c:	683b      	ldr	r3, [r7, #0]
 803037e:	2212      	movs	r2, #18
 8030380:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8030382:	4b03      	ldr	r3, [pc, #12]	; (8030390 <USBD_HS_DeviceDescriptor+0x20>)
}
 8030384:	4618      	mov	r0, r3
 8030386:	370c      	adds	r7, #12
 8030388:	46bd      	mov	sp, r7
 803038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803038e:	4770      	bx	lr
 8030390:	20000244 	.word	0x20000244

08030394 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030394:	b480      	push	{r7}
 8030396:	b083      	sub	sp, #12
 8030398:	af00      	add	r7, sp, #0
 803039a:	4603      	mov	r3, r0
 803039c:	6039      	str	r1, [r7, #0]
 803039e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80303a0:	683b      	ldr	r3, [r7, #0]
 80303a2:	2204      	movs	r2, #4
 80303a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80303a6:	4b03      	ldr	r3, [pc, #12]	; (80303b4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80303a8:	4618      	mov	r0, r3
 80303aa:	370c      	adds	r7, #12
 80303ac:	46bd      	mov	sp, r7
 80303ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80303b2:	4770      	bx	lr
 80303b4:	20000258 	.word	0x20000258

080303b8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80303b8:	b580      	push	{r7, lr}
 80303ba:	b082      	sub	sp, #8
 80303bc:	af00      	add	r7, sp, #0
 80303be:	4603      	mov	r3, r0
 80303c0:	6039      	str	r1, [r7, #0]
 80303c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80303c4:	79fb      	ldrb	r3, [r7, #7]
 80303c6:	2b00      	cmp	r3, #0
 80303c8:	d105      	bne.n	80303d6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80303ca:	683a      	ldr	r2, [r7, #0]
 80303cc:	4907      	ldr	r1, [pc, #28]	; (80303ec <USBD_HS_ProductStrDescriptor+0x34>)
 80303ce:	4808      	ldr	r0, [pc, #32]	; (80303f0 <USBD_HS_ProductStrDescriptor+0x38>)
 80303d0:	f7ff fd14 	bl	802fdfc <USBD_GetString>
 80303d4:	e004      	b.n	80303e0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80303d6:	683a      	ldr	r2, [r7, #0]
 80303d8:	4904      	ldr	r1, [pc, #16]	; (80303ec <USBD_HS_ProductStrDescriptor+0x34>)
 80303da:	4805      	ldr	r0, [pc, #20]	; (80303f0 <USBD_HS_ProductStrDescriptor+0x38>)
 80303dc:	f7ff fd0e 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80303e0:	4b02      	ldr	r3, [pc, #8]	; (80303ec <USBD_HS_ProductStrDescriptor+0x34>)
}
 80303e2:	4618      	mov	r0, r3
 80303e4:	3708      	adds	r7, #8
 80303e6:	46bd      	mov	sp, r7
 80303e8:	bd80      	pop	{r7, pc}
 80303ea:	bf00      	nop
 80303ec:	200077d8 	.word	0x200077d8
 80303f0:	08032cdc 	.word	0x08032cdc

080303f4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80303f4:	b580      	push	{r7, lr}
 80303f6:	b082      	sub	sp, #8
 80303f8:	af00      	add	r7, sp, #0
 80303fa:	4603      	mov	r3, r0
 80303fc:	6039      	str	r1, [r7, #0]
 80303fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030400:	683a      	ldr	r2, [r7, #0]
 8030402:	4904      	ldr	r1, [pc, #16]	; (8030414 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8030404:	4804      	ldr	r0, [pc, #16]	; (8030418 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8030406:	f7ff fcf9 	bl	802fdfc <USBD_GetString>
  return USBD_StrDesc;
 803040a:	4b02      	ldr	r3, [pc, #8]	; (8030414 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 803040c:	4618      	mov	r0, r3
 803040e:	3708      	adds	r7, #8
 8030410:	46bd      	mov	sp, r7
 8030412:	bd80      	pop	{r7, pc}
 8030414:	200077d8 	.word	0x200077d8
 8030418:	08032cf4 	.word	0x08032cf4

0803041c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803041c:	b580      	push	{r7, lr}
 803041e:	b082      	sub	sp, #8
 8030420:	af00      	add	r7, sp, #0
 8030422:	4603      	mov	r3, r0
 8030424:	6039      	str	r1, [r7, #0]
 8030426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030428:	683b      	ldr	r3, [r7, #0]
 803042a:	221a      	movs	r2, #26
 803042c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803042e:	f000 f8e7 	bl	8030600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8030432:	4b02      	ldr	r3, [pc, #8]	; (803043c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8030434:	4618      	mov	r0, r3
 8030436:	3708      	adds	r7, #8
 8030438:	46bd      	mov	sp, r7
 803043a:	bd80      	pop	{r7, pc}
 803043c:	2000025c 	.word	0x2000025c

08030440 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030440:	b580      	push	{r7, lr}
 8030442:	b082      	sub	sp, #8
 8030444:	af00      	add	r7, sp, #0
 8030446:	4603      	mov	r3, r0
 8030448:	6039      	str	r1, [r7, #0]
 803044a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803044c:	79fb      	ldrb	r3, [r7, #7]
 803044e:	2b00      	cmp	r3, #0
 8030450:	d105      	bne.n	803045e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030452:	683a      	ldr	r2, [r7, #0]
 8030454:	4907      	ldr	r1, [pc, #28]	; (8030474 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030456:	4808      	ldr	r0, [pc, #32]	; (8030478 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030458:	f7ff fcd0 	bl	802fdfc <USBD_GetString>
 803045c:	e004      	b.n	8030468 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 803045e:	683a      	ldr	r2, [r7, #0]
 8030460:	4904      	ldr	r1, [pc, #16]	; (8030474 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030462:	4805      	ldr	r0, [pc, #20]	; (8030478 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030464:	f7ff fcca 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8030468:	4b02      	ldr	r3, [pc, #8]	; (8030474 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 803046a:	4618      	mov	r0, r3
 803046c:	3708      	adds	r7, #8
 803046e:	46bd      	mov	sp, r7
 8030470:	bd80      	pop	{r7, pc}
 8030472:	bf00      	nop
 8030474:	200077d8 	.word	0x200077d8
 8030478:	08032d08 	.word	0x08032d08

0803047c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803047c:	b580      	push	{r7, lr}
 803047e:	b082      	sub	sp, #8
 8030480:	af00      	add	r7, sp, #0
 8030482:	4603      	mov	r3, r0
 8030484:	6039      	str	r1, [r7, #0]
 8030486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030488:	79fb      	ldrb	r3, [r7, #7]
 803048a:	2b00      	cmp	r3, #0
 803048c:	d105      	bne.n	803049a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 803048e:	683a      	ldr	r2, [r7, #0]
 8030490:	4907      	ldr	r1, [pc, #28]	; (80304b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030492:	4808      	ldr	r0, [pc, #32]	; (80304b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030494:	f7ff fcb2 	bl	802fdfc <USBD_GetString>
 8030498:	e004      	b.n	80304a4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 803049a:	683a      	ldr	r2, [r7, #0]
 803049c:	4904      	ldr	r1, [pc, #16]	; (80304b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 803049e:	4805      	ldr	r0, [pc, #20]	; (80304b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80304a0:	f7ff fcac 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80304a4:	4b02      	ldr	r3, [pc, #8]	; (80304b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80304a6:	4618      	mov	r0, r3
 80304a8:	3708      	adds	r7, #8
 80304aa:	46bd      	mov	sp, r7
 80304ac:	bd80      	pop	{r7, pc}
 80304ae:	bf00      	nop
 80304b0:	200077d8 	.word	0x200077d8
 80304b4:	08032d14 	.word	0x08032d14

080304b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80304b8:	b480      	push	{r7}
 80304ba:	b083      	sub	sp, #12
 80304bc:	af00      	add	r7, sp, #0
 80304be:	4603      	mov	r3, r0
 80304c0:	6039      	str	r1, [r7, #0]
 80304c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80304c4:	683b      	ldr	r3, [r7, #0]
 80304c6:	2212      	movs	r2, #18
 80304c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80304ca:	4b03      	ldr	r3, [pc, #12]	; (80304d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80304cc:	4618      	mov	r0, r3
 80304ce:	370c      	adds	r7, #12
 80304d0:	46bd      	mov	sp, r7
 80304d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304d6:	4770      	bx	lr
 80304d8:	20000214 	.word	0x20000214

080304dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80304dc:	b480      	push	{r7}
 80304de:	b083      	sub	sp, #12
 80304e0:	af00      	add	r7, sp, #0
 80304e2:	4603      	mov	r3, r0
 80304e4:	6039      	str	r1, [r7, #0]
 80304e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80304e8:	683b      	ldr	r3, [r7, #0]
 80304ea:	2204      	movs	r2, #4
 80304ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80304ee:	4b03      	ldr	r3, [pc, #12]	; (80304fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80304f0:	4618      	mov	r0, r3
 80304f2:	370c      	adds	r7, #12
 80304f4:	46bd      	mov	sp, r7
 80304f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304fa:	4770      	bx	lr
 80304fc:	20000258 	.word	0x20000258

08030500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030500:	b580      	push	{r7, lr}
 8030502:	b082      	sub	sp, #8
 8030504:	af00      	add	r7, sp, #0
 8030506:	4603      	mov	r3, r0
 8030508:	6039      	str	r1, [r7, #0]
 803050a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803050c:	79fb      	ldrb	r3, [r7, #7]
 803050e:	2b00      	cmp	r3, #0
 8030510:	d105      	bne.n	803051e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030512:	683a      	ldr	r2, [r7, #0]
 8030514:	4907      	ldr	r1, [pc, #28]	; (8030534 <USBD_FS_ProductStrDescriptor+0x34>)
 8030516:	4808      	ldr	r0, [pc, #32]	; (8030538 <USBD_FS_ProductStrDescriptor+0x38>)
 8030518:	f7ff fc70 	bl	802fdfc <USBD_GetString>
 803051c:	e004      	b.n	8030528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803051e:	683a      	ldr	r2, [r7, #0]
 8030520:	4904      	ldr	r1, [pc, #16]	; (8030534 <USBD_FS_ProductStrDescriptor+0x34>)
 8030522:	4805      	ldr	r0, [pc, #20]	; (8030538 <USBD_FS_ProductStrDescriptor+0x38>)
 8030524:	f7ff fc6a 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8030528:	4b02      	ldr	r3, [pc, #8]	; (8030534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803052a:	4618      	mov	r0, r3
 803052c:	3708      	adds	r7, #8
 803052e:	46bd      	mov	sp, r7
 8030530:	bd80      	pop	{r7, pc}
 8030532:	bf00      	nop
 8030534:	200077d8 	.word	0x200077d8
 8030538:	08032cdc 	.word	0x08032cdc

0803053c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803053c:	b580      	push	{r7, lr}
 803053e:	b082      	sub	sp, #8
 8030540:	af00      	add	r7, sp, #0
 8030542:	4603      	mov	r3, r0
 8030544:	6039      	str	r1, [r7, #0]
 8030546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030548:	683a      	ldr	r2, [r7, #0]
 803054a:	4904      	ldr	r1, [pc, #16]	; (803055c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803054c:	4804      	ldr	r0, [pc, #16]	; (8030560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803054e:	f7ff fc55 	bl	802fdfc <USBD_GetString>
  return USBD_StrDesc;
 8030552:	4b02      	ldr	r3, [pc, #8]	; (803055c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8030554:	4618      	mov	r0, r3
 8030556:	3708      	adds	r7, #8
 8030558:	46bd      	mov	sp, r7
 803055a:	bd80      	pop	{r7, pc}
 803055c:	200077d8 	.word	0x200077d8
 8030560:	08032cf4 	.word	0x08032cf4

08030564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030564:	b580      	push	{r7, lr}
 8030566:	b082      	sub	sp, #8
 8030568:	af00      	add	r7, sp, #0
 803056a:	4603      	mov	r3, r0
 803056c:	6039      	str	r1, [r7, #0]
 803056e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030570:	683b      	ldr	r3, [r7, #0]
 8030572:	221a      	movs	r2, #26
 8030574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030576:	f000 f843 	bl	8030600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803057a:	4b02      	ldr	r3, [pc, #8]	; (8030584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803057c:	4618      	mov	r0, r3
 803057e:	3708      	adds	r7, #8
 8030580:	46bd      	mov	sp, r7
 8030582:	bd80      	pop	{r7, pc}
 8030584:	2000025c 	.word	0x2000025c

08030588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030588:	b580      	push	{r7, lr}
 803058a:	b082      	sub	sp, #8
 803058c:	af00      	add	r7, sp, #0
 803058e:	4603      	mov	r3, r0
 8030590:	6039      	str	r1, [r7, #0]
 8030592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030594:	79fb      	ldrb	r3, [r7, #7]
 8030596:	2b00      	cmp	r3, #0
 8030598:	d105      	bne.n	80305a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803059a:	683a      	ldr	r2, [r7, #0]
 803059c:	4907      	ldr	r1, [pc, #28]	; (80305bc <USBD_FS_ConfigStrDescriptor+0x34>)
 803059e:	4808      	ldr	r0, [pc, #32]	; (80305c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80305a0:	f7ff fc2c 	bl	802fdfc <USBD_GetString>
 80305a4:	e004      	b.n	80305b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80305a6:	683a      	ldr	r2, [r7, #0]
 80305a8:	4904      	ldr	r1, [pc, #16]	; (80305bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80305aa:	4805      	ldr	r0, [pc, #20]	; (80305c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80305ac:	f7ff fc26 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80305b0:	4b02      	ldr	r3, [pc, #8]	; (80305bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80305b2:	4618      	mov	r0, r3
 80305b4:	3708      	adds	r7, #8
 80305b6:	46bd      	mov	sp, r7
 80305b8:	bd80      	pop	{r7, pc}
 80305ba:	bf00      	nop
 80305bc:	200077d8 	.word	0x200077d8
 80305c0:	08032d08 	.word	0x08032d08

080305c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80305c4:	b580      	push	{r7, lr}
 80305c6:	b082      	sub	sp, #8
 80305c8:	af00      	add	r7, sp, #0
 80305ca:	4603      	mov	r3, r0
 80305cc:	6039      	str	r1, [r7, #0]
 80305ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80305d0:	79fb      	ldrb	r3, [r7, #7]
 80305d2:	2b00      	cmp	r3, #0
 80305d4:	d105      	bne.n	80305e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80305d6:	683a      	ldr	r2, [r7, #0]
 80305d8:	4907      	ldr	r1, [pc, #28]	; (80305f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80305da:	4808      	ldr	r0, [pc, #32]	; (80305fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80305dc:	f7ff fc0e 	bl	802fdfc <USBD_GetString>
 80305e0:	e004      	b.n	80305ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80305e2:	683a      	ldr	r2, [r7, #0]
 80305e4:	4904      	ldr	r1, [pc, #16]	; (80305f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80305e6:	4805      	ldr	r0, [pc, #20]	; (80305fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80305e8:	f7ff fc08 	bl	802fdfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80305ec:	4b02      	ldr	r3, [pc, #8]	; (80305f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80305ee:	4618      	mov	r0, r3
 80305f0:	3708      	adds	r7, #8
 80305f2:	46bd      	mov	sp, r7
 80305f4:	bd80      	pop	{r7, pc}
 80305f6:	bf00      	nop
 80305f8:	200077d8 	.word	0x200077d8
 80305fc:	08032d14 	.word	0x08032d14

08030600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8030600:	b580      	push	{r7, lr}
 8030602:	b084      	sub	sp, #16
 8030604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8030606:	68fa      	ldr	r2, [r7, #12]
 8030608:	68bb      	ldr	r3, [r7, #8]
 803060a:	4413      	add	r3, r2
 803060c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803060e:	68fb      	ldr	r3, [r7, #12]
 8030610:	2b00      	cmp	r3, #0
 8030612:	d009      	beq.n	8030628 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8030614:	2208      	movs	r2, #8
 8030616:	4906      	ldr	r1, [pc, #24]	; (8030630 <Get_SerialNum+0x30>)
 8030618:	68f8      	ldr	r0, [r7, #12]
 803061a:	f000 f80d 	bl	8030638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803061e:	2204      	movs	r2, #4
 8030620:	4904      	ldr	r1, [pc, #16]	; (8030634 <Get_SerialNum+0x34>)
 8030622:	6878      	ldr	r0, [r7, #4]
 8030624:	f000 f808 	bl	8030638 <IntToUnicode>
  }
}
 8030628:	bf00      	nop
 803062a:	3710      	adds	r7, #16
 803062c:	46bd      	mov	sp, r7
 803062e:	bd80      	pop	{r7, pc}
 8030630:	2000025e 	.word	0x2000025e
 8030634:	2000026e 	.word	0x2000026e

08030638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8030638:	b480      	push	{r7}
 803063a:	b087      	sub	sp, #28
 803063c:	af00      	add	r7, sp, #0
 803063e:	60f8      	str	r0, [r7, #12]
 8030640:	60b9      	str	r1, [r7, #8]
 8030642:	4613      	mov	r3, r2
 8030644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8030646:	2300      	movs	r3, #0
 8030648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803064a:	2300      	movs	r3, #0
 803064c:	75fb      	strb	r3, [r7, #23]
 803064e:	e027      	b.n	80306a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8030650:	68fb      	ldr	r3, [r7, #12]
 8030652:	0f1b      	lsrs	r3, r3, #28
 8030654:	2b09      	cmp	r3, #9
 8030656:	d80b      	bhi.n	8030670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8030658:	68fb      	ldr	r3, [r7, #12]
 803065a:	0f1b      	lsrs	r3, r3, #28
 803065c:	b2da      	uxtb	r2, r3
 803065e:	7dfb      	ldrb	r3, [r7, #23]
 8030660:	005b      	lsls	r3, r3, #1
 8030662:	4619      	mov	r1, r3
 8030664:	68bb      	ldr	r3, [r7, #8]
 8030666:	440b      	add	r3, r1
 8030668:	3230      	adds	r2, #48	; 0x30
 803066a:	b2d2      	uxtb	r2, r2
 803066c:	701a      	strb	r2, [r3, #0]
 803066e:	e00a      	b.n	8030686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8030670:	68fb      	ldr	r3, [r7, #12]
 8030672:	0f1b      	lsrs	r3, r3, #28
 8030674:	b2da      	uxtb	r2, r3
 8030676:	7dfb      	ldrb	r3, [r7, #23]
 8030678:	005b      	lsls	r3, r3, #1
 803067a:	4619      	mov	r1, r3
 803067c:	68bb      	ldr	r3, [r7, #8]
 803067e:	440b      	add	r3, r1
 8030680:	3237      	adds	r2, #55	; 0x37
 8030682:	b2d2      	uxtb	r2, r2
 8030684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8030686:	68fb      	ldr	r3, [r7, #12]
 8030688:	011b      	lsls	r3, r3, #4
 803068a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803068c:	7dfb      	ldrb	r3, [r7, #23]
 803068e:	005b      	lsls	r3, r3, #1
 8030690:	3301      	adds	r3, #1
 8030692:	68ba      	ldr	r2, [r7, #8]
 8030694:	4413      	add	r3, r2
 8030696:	2200      	movs	r2, #0
 8030698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803069a:	7dfb      	ldrb	r3, [r7, #23]
 803069c:	3301      	adds	r3, #1
 803069e:	75fb      	strb	r3, [r7, #23]
 80306a0:	7dfa      	ldrb	r2, [r7, #23]
 80306a2:	79fb      	ldrb	r3, [r7, #7]
 80306a4:	429a      	cmp	r2, r3
 80306a6:	d3d3      	bcc.n	8030650 <IntToUnicode+0x18>
  }
}
 80306a8:	bf00      	nop
 80306aa:	bf00      	nop
 80306ac:	371c      	adds	r7, #28
 80306ae:	46bd      	mov	sp, r7
 80306b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80306b4:	4770      	bx	lr
	...

080306b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80306b8:	b580      	push	{r7, lr}
 80306ba:	b08e      	sub	sp, #56	; 0x38
 80306bc:	af00      	add	r7, sp, #0
 80306be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80306c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80306c4:	2200      	movs	r2, #0
 80306c6:	601a      	str	r2, [r3, #0]
 80306c8:	605a      	str	r2, [r3, #4]
 80306ca:	609a      	str	r2, [r3, #8]
 80306cc:	60da      	str	r2, [r3, #12]
 80306ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80306d0:	687b      	ldr	r3, [r7, #4]
 80306d2:	681b      	ldr	r3, [r3, #0]
 80306d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80306d8:	d13b      	bne.n	8030752 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80306da:	2300      	movs	r3, #0
 80306dc:	623b      	str	r3, [r7, #32]
 80306de:	4b69      	ldr	r3, [pc, #420]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 80306e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80306e2:	4a68      	ldr	r2, [pc, #416]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 80306e4:	f043 0301 	orr.w	r3, r3, #1
 80306e8:	6313      	str	r3, [r2, #48]	; 0x30
 80306ea:	4b66      	ldr	r3, [pc, #408]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 80306ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80306ee:	f003 0301 	and.w	r3, r3, #1
 80306f2:	623b      	str	r3, [r7, #32]
 80306f4:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80306f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80306fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80306fc:	2302      	movs	r3, #2
 80306fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030700:	2300      	movs	r3, #0
 8030702:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030704:	2303      	movs	r3, #3
 8030706:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8030708:	230a      	movs	r3, #10
 803070a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030710:	4619      	mov	r1, r3
 8030712:	485d      	ldr	r0, [pc, #372]	; (8030888 <HAL_PCD_MspInit+0x1d0>)
 8030714:	f7f7 fd60 	bl	80281d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8030718:	4b5a      	ldr	r3, [pc, #360]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803071a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803071c:	4a59      	ldr	r2, [pc, #356]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803071e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030722:	6353      	str	r3, [r2, #52]	; 0x34
 8030724:	2300      	movs	r3, #0
 8030726:	61fb      	str	r3, [r7, #28]
 8030728:	4b56      	ldr	r3, [pc, #344]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803072c:	4a55      	ldr	r2, [pc, #340]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8030732:	6453      	str	r3, [r2, #68]	; 0x44
 8030734:	4b53      	ldr	r3, [pc, #332]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803073c:	61fb      	str	r3, [r7, #28]
 803073e:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8030740:	2200      	movs	r2, #0
 8030742:	2100      	movs	r1, #0
 8030744:	2043      	movs	r0, #67	; 0x43
 8030746:	f7f7 f8e4 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803074a:	2043      	movs	r0, #67	; 0x43
 803074c:	f7f7 f8fd 	bl	802794a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8030750:	e094      	b.n	803087c <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8030752:	687b      	ldr	r3, [r7, #4]
 8030754:	681b      	ldr	r3, [r3, #0]
 8030756:	4a4d      	ldr	r2, [pc, #308]	; (803088c <HAL_PCD_MspInit+0x1d4>)
 8030758:	4293      	cmp	r3, r2
 803075a:	f040 808f 	bne.w	803087c <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 803075e:	2300      	movs	r3, #0
 8030760:	61bb      	str	r3, [r7, #24]
 8030762:	4b48      	ldr	r3, [pc, #288]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030766:	4a47      	ldr	r2, [pc, #284]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030768:	f043 0304 	orr.w	r3, r3, #4
 803076c:	6313      	str	r3, [r2, #48]	; 0x30
 803076e:	4b45      	ldr	r3, [pc, #276]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030772:	f003 0304 	and.w	r3, r3, #4
 8030776:	61bb      	str	r3, [r7, #24]
 8030778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 803077a:	2300      	movs	r3, #0
 803077c:	617b      	str	r3, [r7, #20]
 803077e:	4b41      	ldr	r3, [pc, #260]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030782:	4a40      	ldr	r2, [pc, #256]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030784:	f043 0301 	orr.w	r3, r3, #1
 8030788:	6313      	str	r3, [r2, #48]	; 0x30
 803078a:	4b3e      	ldr	r3, [pc, #248]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803078e:	f003 0301 	and.w	r3, r3, #1
 8030792:	617b      	str	r3, [r7, #20]
 8030794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8030796:	2300      	movs	r3, #0
 8030798:	613b      	str	r3, [r7, #16]
 803079a:	4b3a      	ldr	r3, [pc, #232]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803079e:	4a39      	ldr	r2, [pc, #228]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 80307a0:	f043 0302 	orr.w	r3, r3, #2
 80307a4:	6313      	str	r3, [r2, #48]	; 0x30
 80307a6:	4b37      	ldr	r3, [pc, #220]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 80307a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80307aa:	f003 0302 	and.w	r3, r3, #2
 80307ae:	613b      	str	r3, [r7, #16]
 80307b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80307b2:	230d      	movs	r3, #13
 80307b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80307b6:	2302      	movs	r3, #2
 80307b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80307ba:	2300      	movs	r3, #0
 80307bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80307be:	2303      	movs	r3, #3
 80307c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80307c2:	230a      	movs	r3, #10
 80307c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80307c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80307ca:	4619      	mov	r1, r3
 80307cc:	4830      	ldr	r0, [pc, #192]	; (8030890 <HAL_PCD_MspInit+0x1d8>)
 80307ce:	f7f7 fd03 	bl	80281d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80307d2:	2328      	movs	r3, #40	; 0x28
 80307d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80307d6:	2302      	movs	r3, #2
 80307d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80307da:	2300      	movs	r3, #0
 80307dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80307de:	2303      	movs	r3, #3
 80307e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80307e2:	230a      	movs	r3, #10
 80307e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80307e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80307ea:	4619      	mov	r1, r3
 80307ec:	4826      	ldr	r0, [pc, #152]	; (8030888 <HAL_PCD_MspInit+0x1d0>)
 80307ee:	f7f7 fcf3 	bl	80281d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80307f2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80307f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80307f8:	2302      	movs	r3, #2
 80307fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80307fc:	2300      	movs	r3, #0
 80307fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030800:	2303      	movs	r3, #3
 8030802:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030804:	230a      	movs	r3, #10
 8030806:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8030808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803080c:	4619      	mov	r1, r3
 803080e:	4821      	ldr	r0, [pc, #132]	; (8030894 <HAL_PCD_MspInit+0x1dc>)
 8030810:	f7f7 fce2 	bl	80281d8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8030814:	2300      	movs	r3, #0
 8030816:	60fb      	str	r3, [r7, #12]
 8030818:	4b1a      	ldr	r3, [pc, #104]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803081c:	4a19      	ldr	r2, [pc, #100]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803081e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8030822:	6313      	str	r3, [r2, #48]	; 0x30
 8030824:	4b17      	ldr	r3, [pc, #92]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 803082c:	60fb      	str	r3, [r7, #12]
 803082e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8030830:	2300      	movs	r3, #0
 8030832:	60bb      	str	r3, [r7, #8]
 8030834:	4b13      	ldr	r3, [pc, #76]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030838:	4a12      	ldr	r2, [pc, #72]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 803083a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803083e:	6313      	str	r3, [r2, #48]	; 0x30
 8030840:	4b10      	ldr	r3, [pc, #64]	; (8030884 <HAL_PCD_MspInit+0x1cc>)
 8030842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8030848:	60bb      	str	r3, [r7, #8]
 803084a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 803084c:	2200      	movs	r2, #0
 803084e:	2100      	movs	r1, #0
 8030850:	204a      	movs	r0, #74	; 0x4a
 8030852:	f7f7 f85e 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8030856:	204a      	movs	r0, #74	; 0x4a
 8030858:	f7f7 f877 	bl	802794a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 803085c:	2200      	movs	r2, #0
 803085e:	2100      	movs	r1, #0
 8030860:	204b      	movs	r0, #75	; 0x4b
 8030862:	f7f7 f856 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8030866:	204b      	movs	r0, #75	; 0x4b
 8030868:	f7f7 f86f 	bl	802794a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 803086c:	2200      	movs	r2, #0
 803086e:	2100      	movs	r1, #0
 8030870:	204d      	movs	r0, #77	; 0x4d
 8030872:	f7f7 f84e 	bl	8027912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8030876:	204d      	movs	r0, #77	; 0x4d
 8030878:	f7f7 f867 	bl	802794a <HAL_NVIC_EnableIRQ>
}
 803087c:	bf00      	nop
 803087e:	3738      	adds	r7, #56	; 0x38
 8030880:	46bd      	mov	sp, r7
 8030882:	bd80      	pop	{r7, pc}
 8030884:	40023800 	.word	0x40023800
 8030888:	40020000 	.word	0x40020000
 803088c:	40040000 	.word	0x40040000
 8030890:	40020800 	.word	0x40020800
 8030894:	40020400 	.word	0x40020400

08030898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030898:	b580      	push	{r7, lr}
 803089a:	b082      	sub	sp, #8
 803089c:	af00      	add	r7, sp, #0
 803089e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80308a0:	687b      	ldr	r3, [r7, #4]
 80308a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80308a6:	687b      	ldr	r3, [r7, #4]
 80308a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80308ac:	4619      	mov	r1, r3
 80308ae:	4610      	mov	r0, r2
 80308b0:	f7fe f945 	bl	802eb3e <USBD_LL_SetupStage>
}
 80308b4:	bf00      	nop
 80308b6:	3708      	adds	r7, #8
 80308b8:	46bd      	mov	sp, r7
 80308ba:	bd80      	pop	{r7, pc}

080308bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80308bc:	b580      	push	{r7, lr}
 80308be:	b082      	sub	sp, #8
 80308c0:	af00      	add	r7, sp, #0
 80308c2:	6078      	str	r0, [r7, #4]
 80308c4:	460b      	mov	r3, r1
 80308c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80308c8:	687b      	ldr	r3, [r7, #4]
 80308ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80308ce:	78fa      	ldrb	r2, [r7, #3]
 80308d0:	6879      	ldr	r1, [r7, #4]
 80308d2:	4613      	mov	r3, r2
 80308d4:	00db      	lsls	r3, r3, #3
 80308d6:	4413      	add	r3, r2
 80308d8:	009b      	lsls	r3, r3, #2
 80308da:	440b      	add	r3, r1
 80308dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80308e0:	681a      	ldr	r2, [r3, #0]
 80308e2:	78fb      	ldrb	r3, [r7, #3]
 80308e4:	4619      	mov	r1, r3
 80308e6:	f7fe f97f 	bl	802ebe8 <USBD_LL_DataOutStage>
}
 80308ea:	bf00      	nop
 80308ec:	3708      	adds	r7, #8
 80308ee:	46bd      	mov	sp, r7
 80308f0:	bd80      	pop	{r7, pc}

080308f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80308f2:	b580      	push	{r7, lr}
 80308f4:	b082      	sub	sp, #8
 80308f6:	af00      	add	r7, sp, #0
 80308f8:	6078      	str	r0, [r7, #4]
 80308fa:	460b      	mov	r3, r1
 80308fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80308fe:	687b      	ldr	r3, [r7, #4]
 8030900:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030904:	78fa      	ldrb	r2, [r7, #3]
 8030906:	6879      	ldr	r1, [r7, #4]
 8030908:	4613      	mov	r3, r2
 803090a:	00db      	lsls	r3, r3, #3
 803090c:	4413      	add	r3, r2
 803090e:	009b      	lsls	r3, r3, #2
 8030910:	440b      	add	r3, r1
 8030912:	334c      	adds	r3, #76	; 0x4c
 8030914:	681a      	ldr	r2, [r3, #0]
 8030916:	78fb      	ldrb	r3, [r7, #3]
 8030918:	4619      	mov	r1, r3
 803091a:	f7fe fa18 	bl	802ed4e <USBD_LL_DataInStage>
}
 803091e:	bf00      	nop
 8030920:	3708      	adds	r7, #8
 8030922:	46bd      	mov	sp, r7
 8030924:	bd80      	pop	{r7, pc}

08030926 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030926:	b580      	push	{r7, lr}
 8030928:	b082      	sub	sp, #8
 803092a:	af00      	add	r7, sp, #0
 803092c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803092e:	687b      	ldr	r3, [r7, #4]
 8030930:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030934:	4618      	mov	r0, r3
 8030936:	f7fe fb4c 	bl	802efd2 <USBD_LL_SOF>
}
 803093a:	bf00      	nop
 803093c:	3708      	adds	r7, #8
 803093e:	46bd      	mov	sp, r7
 8030940:	bd80      	pop	{r7, pc}

08030942 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030942:	b580      	push	{r7, lr}
 8030944:	b084      	sub	sp, #16
 8030946:	af00      	add	r7, sp, #0
 8030948:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803094a:	2301      	movs	r3, #1
 803094c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803094e:	687b      	ldr	r3, [r7, #4]
 8030950:	68db      	ldr	r3, [r3, #12]
 8030952:	2b00      	cmp	r3, #0
 8030954:	d102      	bne.n	803095c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8030956:	2300      	movs	r3, #0
 8030958:	73fb      	strb	r3, [r7, #15]
 803095a:	e008      	b.n	803096e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803095c:	687b      	ldr	r3, [r7, #4]
 803095e:	68db      	ldr	r3, [r3, #12]
 8030960:	2b02      	cmp	r3, #2
 8030962:	d102      	bne.n	803096a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8030964:	2301      	movs	r3, #1
 8030966:	73fb      	strb	r3, [r7, #15]
 8030968:	e001      	b.n	803096e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803096a:	f7f2 fffb 	bl	8023964 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803096e:	687b      	ldr	r3, [r7, #4]
 8030970:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030974:	7bfa      	ldrb	r2, [r7, #15]
 8030976:	4611      	mov	r1, r2
 8030978:	4618      	mov	r0, r3
 803097a:	f7fe faec 	bl	802ef56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803097e:	687b      	ldr	r3, [r7, #4]
 8030980:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030984:	4618      	mov	r0, r3
 8030986:	f7fe fa94 	bl	802eeb2 <USBD_LL_Reset>
}
 803098a:	bf00      	nop
 803098c:	3710      	adds	r7, #16
 803098e:	46bd      	mov	sp, r7
 8030990:	bd80      	pop	{r7, pc}
	...

08030994 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030994:	b580      	push	{r7, lr}
 8030996:	b082      	sub	sp, #8
 8030998:	af00      	add	r7, sp, #0
 803099a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803099c:	687b      	ldr	r3, [r7, #4]
 803099e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80309a2:	4618      	mov	r0, r3
 80309a4:	f7fe fae7 	bl	802ef76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80309a8:	687b      	ldr	r3, [r7, #4]
 80309aa:	681b      	ldr	r3, [r3, #0]
 80309ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80309b0:	681b      	ldr	r3, [r3, #0]
 80309b2:	687a      	ldr	r2, [r7, #4]
 80309b4:	6812      	ldr	r2, [r2, #0]
 80309b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80309ba:	f043 0301 	orr.w	r3, r3, #1
 80309be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80309c0:	687b      	ldr	r3, [r7, #4]
 80309c2:	6a1b      	ldr	r3, [r3, #32]
 80309c4:	2b00      	cmp	r3, #0
 80309c6:	d005      	beq.n	80309d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80309c8:	4b04      	ldr	r3, [pc, #16]	; (80309dc <HAL_PCD_SuspendCallback+0x48>)
 80309ca:	691b      	ldr	r3, [r3, #16]
 80309cc:	4a03      	ldr	r2, [pc, #12]	; (80309dc <HAL_PCD_SuspendCallback+0x48>)
 80309ce:	f043 0306 	orr.w	r3, r3, #6
 80309d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80309d4:	bf00      	nop
 80309d6:	3708      	adds	r7, #8
 80309d8:	46bd      	mov	sp, r7
 80309da:	bd80      	pop	{r7, pc}
 80309dc:	e000ed00 	.word	0xe000ed00

080309e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80309e0:	b580      	push	{r7, lr}
 80309e2:	b082      	sub	sp, #8
 80309e4:	af00      	add	r7, sp, #0
 80309e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80309e8:	687b      	ldr	r3, [r7, #4]
 80309ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80309ee:	4618      	mov	r0, r3
 80309f0:	f7fe fad7 	bl	802efa2 <USBD_LL_Resume>
}
 80309f4:	bf00      	nop
 80309f6:	3708      	adds	r7, #8
 80309f8:	46bd      	mov	sp, r7
 80309fa:	bd80      	pop	{r7, pc}

080309fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80309fc:	b580      	push	{r7, lr}
 80309fe:	b082      	sub	sp, #8
 8030a00:	af00      	add	r7, sp, #0
 8030a02:	6078      	str	r0, [r7, #4]
 8030a04:	460b      	mov	r3, r1
 8030a06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8030a08:	687b      	ldr	r3, [r7, #4]
 8030a0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030a0e:	78fa      	ldrb	r2, [r7, #3]
 8030a10:	4611      	mov	r1, r2
 8030a12:	4618      	mov	r0, r3
 8030a14:	f7fe fb2f 	bl	802f076 <USBD_LL_IsoOUTIncomplete>
}
 8030a18:	bf00      	nop
 8030a1a:	3708      	adds	r7, #8
 8030a1c:	46bd      	mov	sp, r7
 8030a1e:	bd80      	pop	{r7, pc}

08030a20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030a20:	b580      	push	{r7, lr}
 8030a22:	b082      	sub	sp, #8
 8030a24:	af00      	add	r7, sp, #0
 8030a26:	6078      	str	r0, [r7, #4]
 8030a28:	460b      	mov	r3, r1
 8030a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8030a2c:	687b      	ldr	r3, [r7, #4]
 8030a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030a32:	78fa      	ldrb	r2, [r7, #3]
 8030a34:	4611      	mov	r1, r2
 8030a36:	4618      	mov	r0, r3
 8030a38:	f7fe faeb 	bl	802f012 <USBD_LL_IsoINIncomplete>
}
 8030a3c:	bf00      	nop
 8030a3e:	3708      	adds	r7, #8
 8030a40:	46bd      	mov	sp, r7
 8030a42:	bd80      	pop	{r7, pc}

08030a44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030a44:	b580      	push	{r7, lr}
 8030a46:	b082      	sub	sp, #8
 8030a48:	af00      	add	r7, sp, #0
 8030a4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8030a4c:	687b      	ldr	r3, [r7, #4]
 8030a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030a52:	4618      	mov	r0, r3
 8030a54:	f7fe fb41 	bl	802f0da <USBD_LL_DevConnected>
}
 8030a58:	bf00      	nop
 8030a5a:	3708      	adds	r7, #8
 8030a5c:	46bd      	mov	sp, r7
 8030a5e:	bd80      	pop	{r7, pc}

08030a60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030a60:	b580      	push	{r7, lr}
 8030a62:	b082      	sub	sp, #8
 8030a64:	af00      	add	r7, sp, #0
 8030a66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8030a68:	687b      	ldr	r3, [r7, #4]
 8030a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030a6e:	4618      	mov	r0, r3
 8030a70:	f7fe fb3e 	bl	802f0f0 <USBD_LL_DevDisconnected>
}
 8030a74:	bf00      	nop
 8030a76:	3708      	adds	r7, #8
 8030a78:	46bd      	mov	sp, r7
 8030a7a:	bd80      	pop	{r7, pc}

08030a7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8030a7c:	b580      	push	{r7, lr}
 8030a7e:	b082      	sub	sp, #8
 8030a80:	af00      	add	r7, sp, #0
 8030a82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8030a84:	687b      	ldr	r3, [r7, #4]
 8030a86:	781b      	ldrb	r3, [r3, #0]
 8030a88:	2b00      	cmp	r3, #0
 8030a8a:	d13c      	bne.n	8030b06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8030a8c:	4a43      	ldr	r2, [pc, #268]	; (8030b9c <USBD_LL_Init+0x120>)
 8030a8e:	687b      	ldr	r3, [r7, #4]
 8030a90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8030a94:	687b      	ldr	r3, [r7, #4]
 8030a96:	4a41      	ldr	r2, [pc, #260]	; (8030b9c <USBD_LL_Init+0x120>)
 8030a98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8030a9c:	4b3f      	ldr	r3, [pc, #252]	; (8030b9c <USBD_LL_Init+0x120>)
 8030a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8030aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8030aa4:	4b3d      	ldr	r3, [pc, #244]	; (8030b9c <USBD_LL_Init+0x120>)
 8030aa6:	2204      	movs	r2, #4
 8030aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8030aaa:	4b3c      	ldr	r3, [pc, #240]	; (8030b9c <USBD_LL_Init+0x120>)
 8030aac:	2202      	movs	r2, #2
 8030aae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8030ab0:	4b3a      	ldr	r3, [pc, #232]	; (8030b9c <USBD_LL_Init+0x120>)
 8030ab2:	2200      	movs	r2, #0
 8030ab4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8030ab6:	4b39      	ldr	r3, [pc, #228]	; (8030b9c <USBD_LL_Init+0x120>)
 8030ab8:	2202      	movs	r2, #2
 8030aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8030abc:	4b37      	ldr	r3, [pc, #220]	; (8030b9c <USBD_LL_Init+0x120>)
 8030abe:	2200      	movs	r2, #0
 8030ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8030ac2:	4b36      	ldr	r3, [pc, #216]	; (8030b9c <USBD_LL_Init+0x120>)
 8030ac4:	2200      	movs	r2, #0
 8030ac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8030ac8:	4b34      	ldr	r3, [pc, #208]	; (8030b9c <USBD_LL_Init+0x120>)
 8030aca:	2200      	movs	r2, #0
 8030acc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8030ace:	4b33      	ldr	r3, [pc, #204]	; (8030b9c <USBD_LL_Init+0x120>)
 8030ad0:	2200      	movs	r2, #0
 8030ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8030ad4:	4b31      	ldr	r3, [pc, #196]	; (8030b9c <USBD_LL_Init+0x120>)
 8030ad6:	2200      	movs	r2, #0
 8030ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8030ada:	4830      	ldr	r0, [pc, #192]	; (8030b9c <USBD_LL_Init+0x120>)
 8030adc:	f7f7 ff59 	bl	8028992 <HAL_PCD_Init>
 8030ae0:	4603      	mov	r3, r0
 8030ae2:	2b00      	cmp	r3, #0
 8030ae4:	d001      	beq.n	8030aea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8030ae6:	f7f2 ff3d 	bl	8023964 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8030aea:	2180      	movs	r1, #128	; 0x80
 8030aec:	482b      	ldr	r0, [pc, #172]	; (8030b9c <USBD_LL_Init+0x120>)
 8030aee:	f7f9 f9b0 	bl	8029e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8030af2:	2240      	movs	r2, #64	; 0x40
 8030af4:	2100      	movs	r1, #0
 8030af6:	4829      	ldr	r0, [pc, #164]	; (8030b9c <USBD_LL_Init+0x120>)
 8030af8:	f7f9 f964 	bl	8029dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8030afc:	2280      	movs	r2, #128	; 0x80
 8030afe:	2101      	movs	r1, #1
 8030b00:	4826      	ldr	r0, [pc, #152]	; (8030b9c <USBD_LL_Init+0x120>)
 8030b02:	f7f9 f95f 	bl	8029dc4 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8030b06:	687b      	ldr	r3, [r7, #4]
 8030b08:	781b      	ldrb	r3, [r3, #0]
 8030b0a:	2b01      	cmp	r3, #1
 8030b0c:	d140      	bne.n	8030b90 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8030b0e:	4a24      	ldr	r2, [pc, #144]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b10:	687b      	ldr	r3, [r7, #4]
 8030b12:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8030b16:	687b      	ldr	r3, [r7, #4]
 8030b18:	4a21      	ldr	r2, [pc, #132]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b1a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8030b1e:	4b20      	ldr	r3, [pc, #128]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b20:	4a20      	ldr	r2, [pc, #128]	; (8030ba4 <USBD_LL_Init+0x128>)
 8030b22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8030b24:	4b1e      	ldr	r3, [pc, #120]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b26:	2206      	movs	r2, #6
 8030b28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8030b2a:	4b1d      	ldr	r3, [pc, #116]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b2c:	2200      	movs	r2, #0
 8030b2e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8030b30:	4b1b      	ldr	r3, [pc, #108]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b32:	2200      	movs	r2, #0
 8030b34:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8030b36:	4b1a      	ldr	r3, [pc, #104]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b38:	2201      	movs	r2, #1
 8030b3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8030b3c:	4b18      	ldr	r3, [pc, #96]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b3e:	2200      	movs	r2, #0
 8030b40:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8030b42:	4b17      	ldr	r3, [pc, #92]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b44:	2200      	movs	r2, #0
 8030b46:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8030b48:	4b15      	ldr	r3, [pc, #84]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b4a:	2200      	movs	r2, #0
 8030b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8030b4e:	4b14      	ldr	r3, [pc, #80]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b50:	2200      	movs	r2, #0
 8030b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8030b54:	4b12      	ldr	r3, [pc, #72]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b56:	2200      	movs	r2, #0
 8030b58:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8030b5a:	4b11      	ldr	r3, [pc, #68]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b5c:	2200      	movs	r2, #0
 8030b5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8030b60:	480f      	ldr	r0, [pc, #60]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b62:	f7f7 ff16 	bl	8028992 <HAL_PCD_Init>
 8030b66:	4603      	mov	r3, r0
 8030b68:	2b00      	cmp	r3, #0
 8030b6a:	d001      	beq.n	8030b70 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 8030b6c:	f7f2 fefa 	bl	8023964 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8030b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8030b74:	480a      	ldr	r0, [pc, #40]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b76:	f7f9 f96c 	bl	8029e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8030b7a:	2280      	movs	r2, #128	; 0x80
 8030b7c:	2100      	movs	r1, #0
 8030b7e:	4808      	ldr	r0, [pc, #32]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b80:	f7f9 f920 	bl	8029dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8030b84:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8030b88:	2101      	movs	r1, #1
 8030b8a:	4805      	ldr	r0, [pc, #20]	; (8030ba0 <USBD_LL_Init+0x124>)
 8030b8c:	f7f9 f91a 	bl	8029dc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8030b90:	2300      	movs	r3, #0
}
 8030b92:	4618      	mov	r0, r3
 8030b94:	3708      	adds	r7, #8
 8030b96:	46bd      	mov	sp, r7
 8030b98:	bd80      	pop	{r7, pc}
 8030b9a:	bf00      	nop
 8030b9c:	200079d8 	.word	0x200079d8
 8030ba0:	20007ee4 	.word	0x20007ee4
 8030ba4:	40040000 	.word	0x40040000

08030ba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8030ba8:	b580      	push	{r7, lr}
 8030baa:	b084      	sub	sp, #16
 8030bac:	af00      	add	r7, sp, #0
 8030bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030bb0:	2300      	movs	r3, #0
 8030bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030bb4:	2300      	movs	r3, #0
 8030bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8030bb8:	687b      	ldr	r3, [r7, #4]
 8030bba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030bbe:	4618      	mov	r0, r3
 8030bc0:	f7f8 f804 	bl	8028bcc <HAL_PCD_Start>
 8030bc4:	4603      	mov	r3, r0
 8030bc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030bc8:	7bfb      	ldrb	r3, [r7, #15]
 8030bca:	4618      	mov	r0, r3
 8030bcc:	f000 f942 	bl	8030e54 <USBD_Get_USB_Status>
 8030bd0:	4603      	mov	r3, r0
 8030bd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8030bd6:	4618      	mov	r0, r3
 8030bd8:	3710      	adds	r7, #16
 8030bda:	46bd      	mov	sp, r7
 8030bdc:	bd80      	pop	{r7, pc}

08030bde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8030bde:	b580      	push	{r7, lr}
 8030be0:	b084      	sub	sp, #16
 8030be2:	af00      	add	r7, sp, #0
 8030be4:	6078      	str	r0, [r7, #4]
 8030be6:	4608      	mov	r0, r1
 8030be8:	4611      	mov	r1, r2
 8030bea:	461a      	mov	r2, r3
 8030bec:	4603      	mov	r3, r0
 8030bee:	70fb      	strb	r3, [r7, #3]
 8030bf0:	460b      	mov	r3, r1
 8030bf2:	70bb      	strb	r3, [r7, #2]
 8030bf4:	4613      	mov	r3, r2
 8030bf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030bf8:	2300      	movs	r3, #0
 8030bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030bfc:	2300      	movs	r3, #0
 8030bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8030c00:	687b      	ldr	r3, [r7, #4]
 8030c02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8030c06:	78bb      	ldrb	r3, [r7, #2]
 8030c08:	883a      	ldrh	r2, [r7, #0]
 8030c0a:	78f9      	ldrb	r1, [r7, #3]
 8030c0c:	f7f8 fcd5 	bl	80295ba <HAL_PCD_EP_Open>
 8030c10:	4603      	mov	r3, r0
 8030c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030c14:	7bfb      	ldrb	r3, [r7, #15]
 8030c16:	4618      	mov	r0, r3
 8030c18:	f000 f91c 	bl	8030e54 <USBD_Get_USB_Status>
 8030c1c:	4603      	mov	r3, r0
 8030c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8030c22:	4618      	mov	r0, r3
 8030c24:	3710      	adds	r7, #16
 8030c26:	46bd      	mov	sp, r7
 8030c28:	bd80      	pop	{r7, pc}

08030c2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030c2a:	b580      	push	{r7, lr}
 8030c2c:	b084      	sub	sp, #16
 8030c2e:	af00      	add	r7, sp, #0
 8030c30:	6078      	str	r0, [r7, #4]
 8030c32:	460b      	mov	r3, r1
 8030c34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030c36:	2300      	movs	r3, #0
 8030c38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030c3a:	2300      	movs	r3, #0
 8030c3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8030c3e:	687b      	ldr	r3, [r7, #4]
 8030c40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030c44:	78fa      	ldrb	r2, [r7, #3]
 8030c46:	4611      	mov	r1, r2
 8030c48:	4618      	mov	r0, r3
 8030c4a:	f7f8 fd1e 	bl	802968a <HAL_PCD_EP_Close>
 8030c4e:	4603      	mov	r3, r0
 8030c50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030c52:	7bfb      	ldrb	r3, [r7, #15]
 8030c54:	4618      	mov	r0, r3
 8030c56:	f000 f8fd 	bl	8030e54 <USBD_Get_USB_Status>
 8030c5a:	4603      	mov	r3, r0
 8030c5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030c5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8030c60:	4618      	mov	r0, r3
 8030c62:	3710      	adds	r7, #16
 8030c64:	46bd      	mov	sp, r7
 8030c66:	bd80      	pop	{r7, pc}

08030c68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030c68:	b580      	push	{r7, lr}
 8030c6a:	b084      	sub	sp, #16
 8030c6c:	af00      	add	r7, sp, #0
 8030c6e:	6078      	str	r0, [r7, #4]
 8030c70:	460b      	mov	r3, r1
 8030c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030c74:	2300      	movs	r3, #0
 8030c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030c78:	2300      	movs	r3, #0
 8030c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8030c7c:	687b      	ldr	r3, [r7, #4]
 8030c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030c82:	78fa      	ldrb	r2, [r7, #3]
 8030c84:	4611      	mov	r1, r2
 8030c86:	4618      	mov	r0, r3
 8030c88:	f7f8 fdf6 	bl	8029878 <HAL_PCD_EP_SetStall>
 8030c8c:	4603      	mov	r3, r0
 8030c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030c90:	7bfb      	ldrb	r3, [r7, #15]
 8030c92:	4618      	mov	r0, r3
 8030c94:	f000 f8de 	bl	8030e54 <USBD_Get_USB_Status>
 8030c98:	4603      	mov	r3, r0
 8030c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8030c9e:	4618      	mov	r0, r3
 8030ca0:	3710      	adds	r7, #16
 8030ca2:	46bd      	mov	sp, r7
 8030ca4:	bd80      	pop	{r7, pc}

08030ca6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030ca6:	b580      	push	{r7, lr}
 8030ca8:	b084      	sub	sp, #16
 8030caa:	af00      	add	r7, sp, #0
 8030cac:	6078      	str	r0, [r7, #4]
 8030cae:	460b      	mov	r3, r1
 8030cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030cb2:	2300      	movs	r3, #0
 8030cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030cb6:	2300      	movs	r3, #0
 8030cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8030cba:	687b      	ldr	r3, [r7, #4]
 8030cbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030cc0:	78fa      	ldrb	r2, [r7, #3]
 8030cc2:	4611      	mov	r1, r2
 8030cc4:	4618      	mov	r0, r3
 8030cc6:	f7f8 fe3b 	bl	8029940 <HAL_PCD_EP_ClrStall>
 8030cca:	4603      	mov	r3, r0
 8030ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030cce:	7bfb      	ldrb	r3, [r7, #15]
 8030cd0:	4618      	mov	r0, r3
 8030cd2:	f000 f8bf 	bl	8030e54 <USBD_Get_USB_Status>
 8030cd6:	4603      	mov	r3, r0
 8030cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8030cdc:	4618      	mov	r0, r3
 8030cde:	3710      	adds	r7, #16
 8030ce0:	46bd      	mov	sp, r7
 8030ce2:	bd80      	pop	{r7, pc}

08030ce4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030ce4:	b480      	push	{r7}
 8030ce6:	b085      	sub	sp, #20
 8030ce8:	af00      	add	r7, sp, #0
 8030cea:	6078      	str	r0, [r7, #4]
 8030cec:	460b      	mov	r3, r1
 8030cee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8030cf0:	687b      	ldr	r3, [r7, #4]
 8030cf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030cf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8030cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030cfc:	2b00      	cmp	r3, #0
 8030cfe:	da0b      	bge.n	8030d18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8030d00:	78fb      	ldrb	r3, [r7, #3]
 8030d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8030d06:	68f9      	ldr	r1, [r7, #12]
 8030d08:	4613      	mov	r3, r2
 8030d0a:	00db      	lsls	r3, r3, #3
 8030d0c:	4413      	add	r3, r2
 8030d0e:	009b      	lsls	r3, r3, #2
 8030d10:	440b      	add	r3, r1
 8030d12:	333e      	adds	r3, #62	; 0x3e
 8030d14:	781b      	ldrb	r3, [r3, #0]
 8030d16:	e00b      	b.n	8030d30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8030d18:	78fb      	ldrb	r3, [r7, #3]
 8030d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8030d1e:	68f9      	ldr	r1, [r7, #12]
 8030d20:	4613      	mov	r3, r2
 8030d22:	00db      	lsls	r3, r3, #3
 8030d24:	4413      	add	r3, r2
 8030d26:	009b      	lsls	r3, r3, #2
 8030d28:	440b      	add	r3, r1
 8030d2a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8030d2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8030d30:	4618      	mov	r0, r3
 8030d32:	3714      	adds	r7, #20
 8030d34:	46bd      	mov	sp, r7
 8030d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d3a:	4770      	bx	lr

08030d3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8030d3c:	b580      	push	{r7, lr}
 8030d3e:	b084      	sub	sp, #16
 8030d40:	af00      	add	r7, sp, #0
 8030d42:	6078      	str	r0, [r7, #4]
 8030d44:	460b      	mov	r3, r1
 8030d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030d48:	2300      	movs	r3, #0
 8030d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030d4c:	2300      	movs	r3, #0
 8030d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8030d50:	687b      	ldr	r3, [r7, #4]
 8030d52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030d56:	78fa      	ldrb	r2, [r7, #3]
 8030d58:	4611      	mov	r1, r2
 8030d5a:	4618      	mov	r0, r3
 8030d5c:	f7f8 fc08 	bl	8029570 <HAL_PCD_SetAddress>
 8030d60:	4603      	mov	r3, r0
 8030d62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030d64:	7bfb      	ldrb	r3, [r7, #15]
 8030d66:	4618      	mov	r0, r3
 8030d68:	f000 f874 	bl	8030e54 <USBD_Get_USB_Status>
 8030d6c:	4603      	mov	r3, r0
 8030d6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8030d70:	7bbb      	ldrb	r3, [r7, #14]
}
 8030d72:	4618      	mov	r0, r3
 8030d74:	3710      	adds	r7, #16
 8030d76:	46bd      	mov	sp, r7
 8030d78:	bd80      	pop	{r7, pc}

08030d7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8030d7a:	b580      	push	{r7, lr}
 8030d7c:	b086      	sub	sp, #24
 8030d7e:	af00      	add	r7, sp, #0
 8030d80:	60f8      	str	r0, [r7, #12]
 8030d82:	607a      	str	r2, [r7, #4]
 8030d84:	603b      	str	r3, [r7, #0]
 8030d86:	460b      	mov	r3, r1
 8030d88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030d8a:	2300      	movs	r3, #0
 8030d8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030d8e:	2300      	movs	r3, #0
 8030d90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8030d92:	68fb      	ldr	r3, [r7, #12]
 8030d94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8030d98:	7af9      	ldrb	r1, [r7, #11]
 8030d9a:	683b      	ldr	r3, [r7, #0]
 8030d9c:	687a      	ldr	r2, [r7, #4]
 8030d9e:	f7f8 fd21 	bl	80297e4 <HAL_PCD_EP_Transmit>
 8030da2:	4603      	mov	r3, r0
 8030da4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030da6:	7dfb      	ldrb	r3, [r7, #23]
 8030da8:	4618      	mov	r0, r3
 8030daa:	f000 f853 	bl	8030e54 <USBD_Get_USB_Status>
 8030dae:	4603      	mov	r3, r0
 8030db0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8030db2:	7dbb      	ldrb	r3, [r7, #22]
}
 8030db4:	4618      	mov	r0, r3
 8030db6:	3718      	adds	r7, #24
 8030db8:	46bd      	mov	sp, r7
 8030dba:	bd80      	pop	{r7, pc}

08030dbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8030dbc:	b580      	push	{r7, lr}
 8030dbe:	b086      	sub	sp, #24
 8030dc0:	af00      	add	r7, sp, #0
 8030dc2:	60f8      	str	r0, [r7, #12]
 8030dc4:	607a      	str	r2, [r7, #4]
 8030dc6:	603b      	str	r3, [r7, #0]
 8030dc8:	460b      	mov	r3, r1
 8030dca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8030dcc:	2300      	movs	r3, #0
 8030dce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030dd0:	2300      	movs	r3, #0
 8030dd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8030dd4:	68fb      	ldr	r3, [r7, #12]
 8030dd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8030dda:	7af9      	ldrb	r1, [r7, #11]
 8030ddc:	683b      	ldr	r3, [r7, #0]
 8030dde:	687a      	ldr	r2, [r7, #4]
 8030de0:	f7f8 fc9d 	bl	802971e <HAL_PCD_EP_Receive>
 8030de4:	4603      	mov	r3, r0
 8030de6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8030de8:	7dfb      	ldrb	r3, [r7, #23]
 8030dea:	4618      	mov	r0, r3
 8030dec:	f000 f832 	bl	8030e54 <USBD_Get_USB_Status>
 8030df0:	4603      	mov	r3, r0
 8030df2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8030df4:	7dbb      	ldrb	r3, [r7, #22]
}
 8030df6:	4618      	mov	r0, r3
 8030df8:	3718      	adds	r7, #24
 8030dfa:	46bd      	mov	sp, r7
 8030dfc:	bd80      	pop	{r7, pc}

08030dfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8030dfe:	b580      	push	{r7, lr}
 8030e00:	b082      	sub	sp, #8
 8030e02:	af00      	add	r7, sp, #0
 8030e04:	6078      	str	r0, [r7, #4]
 8030e06:	460b      	mov	r3, r1
 8030e08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8030e0a:	687b      	ldr	r3, [r7, #4]
 8030e0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8030e10:	78fa      	ldrb	r2, [r7, #3]
 8030e12:	4611      	mov	r1, r2
 8030e14:	4618      	mov	r0, r3
 8030e16:	f7f8 fccd 	bl	80297b4 <HAL_PCD_EP_GetRxCount>
 8030e1a:	4603      	mov	r3, r0
}
 8030e1c:	4618      	mov	r0, r3
 8030e1e:	3708      	adds	r7, #8
 8030e20:	46bd      	mov	sp, r7
 8030e22:	bd80      	pop	{r7, pc}

08030e24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8030e24:	b480      	push	{r7}
 8030e26:	b083      	sub	sp, #12
 8030e28:	af00      	add	r7, sp, #0
 8030e2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8030e2c:	4b03      	ldr	r3, [pc, #12]	; (8030e3c <USBD_static_malloc+0x18>)
}
 8030e2e:	4618      	mov	r0, r3
 8030e30:	370c      	adds	r7, #12
 8030e32:	46bd      	mov	sp, r7
 8030e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030e38:	4770      	bx	lr
 8030e3a:	bf00      	nop
 8030e3c:	200083f0 	.word	0x200083f0

08030e40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8030e40:	b480      	push	{r7}
 8030e42:	b083      	sub	sp, #12
 8030e44:	af00      	add	r7, sp, #0
 8030e46:	6078      	str	r0, [r7, #4]

}
 8030e48:	bf00      	nop
 8030e4a:	370c      	adds	r7, #12
 8030e4c:	46bd      	mov	sp, r7
 8030e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030e52:	4770      	bx	lr

08030e54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8030e54:	b480      	push	{r7}
 8030e56:	b085      	sub	sp, #20
 8030e58:	af00      	add	r7, sp, #0
 8030e5a:	4603      	mov	r3, r0
 8030e5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8030e5e:	2300      	movs	r3, #0
 8030e60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8030e62:	79fb      	ldrb	r3, [r7, #7]
 8030e64:	2b03      	cmp	r3, #3
 8030e66:	d817      	bhi.n	8030e98 <USBD_Get_USB_Status+0x44>
 8030e68:	a201      	add	r2, pc, #4	; (adr r2, 8030e70 <USBD_Get_USB_Status+0x1c>)
 8030e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030e6e:	bf00      	nop
 8030e70:	08030e81 	.word	0x08030e81
 8030e74:	08030e87 	.word	0x08030e87
 8030e78:	08030e8d 	.word	0x08030e8d
 8030e7c:	08030e93 	.word	0x08030e93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8030e80:	2300      	movs	r3, #0
 8030e82:	73fb      	strb	r3, [r7, #15]
    break;
 8030e84:	e00b      	b.n	8030e9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8030e86:	2303      	movs	r3, #3
 8030e88:	73fb      	strb	r3, [r7, #15]
    break;
 8030e8a:	e008      	b.n	8030e9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8030e8c:	2301      	movs	r3, #1
 8030e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8030e90:	e005      	b.n	8030e9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8030e92:	2303      	movs	r3, #3
 8030e94:	73fb      	strb	r3, [r7, #15]
    break;
 8030e96:	e002      	b.n	8030e9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8030e98:	2303      	movs	r3, #3
 8030e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8030e9c:	bf00      	nop
  }
  return usb_status;
 8030e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030ea0:	4618      	mov	r0, r3
 8030ea2:	3714      	adds	r7, #20
 8030ea4:	46bd      	mov	sp, r7
 8030ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030eaa:	4770      	bx	lr

08030eac <std>:
 8030eac:	2300      	movs	r3, #0
 8030eae:	b510      	push	{r4, lr}
 8030eb0:	4604      	mov	r4, r0
 8030eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8030eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8030eba:	6083      	str	r3, [r0, #8]
 8030ebc:	8181      	strh	r1, [r0, #12]
 8030ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8030ec0:	81c2      	strh	r2, [r0, #14]
 8030ec2:	6183      	str	r3, [r0, #24]
 8030ec4:	4619      	mov	r1, r3
 8030ec6:	2208      	movs	r2, #8
 8030ec8:	305c      	adds	r0, #92	; 0x5c
 8030eca:	f000 f9f7 	bl	80312bc <memset>
 8030ece:	4b0d      	ldr	r3, [pc, #52]	; (8030f04 <std+0x58>)
 8030ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8030ed2:	4b0d      	ldr	r3, [pc, #52]	; (8030f08 <std+0x5c>)
 8030ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8030ed6:	4b0d      	ldr	r3, [pc, #52]	; (8030f0c <std+0x60>)
 8030ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8030eda:	4b0d      	ldr	r3, [pc, #52]	; (8030f10 <std+0x64>)
 8030edc:	6323      	str	r3, [r4, #48]	; 0x30
 8030ede:	4b0d      	ldr	r3, [pc, #52]	; (8030f14 <std+0x68>)
 8030ee0:	6224      	str	r4, [r4, #32]
 8030ee2:	429c      	cmp	r4, r3
 8030ee4:	d006      	beq.n	8030ef4 <std+0x48>
 8030ee6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8030eea:	4294      	cmp	r4, r2
 8030eec:	d002      	beq.n	8030ef4 <std+0x48>
 8030eee:	33d0      	adds	r3, #208	; 0xd0
 8030ef0:	429c      	cmp	r4, r3
 8030ef2:	d105      	bne.n	8030f00 <std+0x54>
 8030ef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8030ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030efc:	f000 ba56 	b.w	80313ac <__retarget_lock_init_recursive>
 8030f00:	bd10      	pop	{r4, pc}
 8030f02:	bf00      	nop
 8030f04:	0803110d 	.word	0x0803110d
 8030f08:	0803112f 	.word	0x0803112f
 8030f0c:	08031167 	.word	0x08031167
 8030f10:	0803118b 	.word	0x0803118b
 8030f14:	20008610 	.word	0x20008610

08030f18 <stdio_exit_handler>:
 8030f18:	4a02      	ldr	r2, [pc, #8]	; (8030f24 <stdio_exit_handler+0xc>)
 8030f1a:	4903      	ldr	r1, [pc, #12]	; (8030f28 <stdio_exit_handler+0x10>)
 8030f1c:	4803      	ldr	r0, [pc, #12]	; (8030f2c <stdio_exit_handler+0x14>)
 8030f1e:	f000 b869 	b.w	8030ff4 <_fwalk_sglue>
 8030f22:	bf00      	nop
 8030f24:	20000278 	.word	0x20000278
 8030f28:	08031c75 	.word	0x08031c75
 8030f2c:	20000284 	.word	0x20000284

08030f30 <cleanup_stdio>:
 8030f30:	6841      	ldr	r1, [r0, #4]
 8030f32:	4b0c      	ldr	r3, [pc, #48]	; (8030f64 <cleanup_stdio+0x34>)
 8030f34:	4299      	cmp	r1, r3
 8030f36:	b510      	push	{r4, lr}
 8030f38:	4604      	mov	r4, r0
 8030f3a:	d001      	beq.n	8030f40 <cleanup_stdio+0x10>
 8030f3c:	f000 fe9a 	bl	8031c74 <_fflush_r>
 8030f40:	68a1      	ldr	r1, [r4, #8]
 8030f42:	4b09      	ldr	r3, [pc, #36]	; (8030f68 <cleanup_stdio+0x38>)
 8030f44:	4299      	cmp	r1, r3
 8030f46:	d002      	beq.n	8030f4e <cleanup_stdio+0x1e>
 8030f48:	4620      	mov	r0, r4
 8030f4a:	f000 fe93 	bl	8031c74 <_fflush_r>
 8030f4e:	68e1      	ldr	r1, [r4, #12]
 8030f50:	4b06      	ldr	r3, [pc, #24]	; (8030f6c <cleanup_stdio+0x3c>)
 8030f52:	4299      	cmp	r1, r3
 8030f54:	d004      	beq.n	8030f60 <cleanup_stdio+0x30>
 8030f56:	4620      	mov	r0, r4
 8030f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030f5c:	f000 be8a 	b.w	8031c74 <_fflush_r>
 8030f60:	bd10      	pop	{r4, pc}
 8030f62:	bf00      	nop
 8030f64:	20008610 	.word	0x20008610
 8030f68:	20008678 	.word	0x20008678
 8030f6c:	200086e0 	.word	0x200086e0

08030f70 <global_stdio_init.part.0>:
 8030f70:	b510      	push	{r4, lr}
 8030f72:	4b0b      	ldr	r3, [pc, #44]	; (8030fa0 <global_stdio_init.part.0+0x30>)
 8030f74:	4c0b      	ldr	r4, [pc, #44]	; (8030fa4 <global_stdio_init.part.0+0x34>)
 8030f76:	4a0c      	ldr	r2, [pc, #48]	; (8030fa8 <global_stdio_init.part.0+0x38>)
 8030f78:	601a      	str	r2, [r3, #0]
 8030f7a:	4620      	mov	r0, r4
 8030f7c:	2200      	movs	r2, #0
 8030f7e:	2104      	movs	r1, #4
 8030f80:	f7ff ff94 	bl	8030eac <std>
 8030f84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8030f88:	2201      	movs	r2, #1
 8030f8a:	2109      	movs	r1, #9
 8030f8c:	f7ff ff8e 	bl	8030eac <std>
 8030f90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8030f94:	2202      	movs	r2, #2
 8030f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030f9a:	2112      	movs	r1, #18
 8030f9c:	f7ff bf86 	b.w	8030eac <std>
 8030fa0:	20008748 	.word	0x20008748
 8030fa4:	20008610 	.word	0x20008610
 8030fa8:	08030f19 	.word	0x08030f19

08030fac <__sfp_lock_acquire>:
 8030fac:	4801      	ldr	r0, [pc, #4]	; (8030fb4 <__sfp_lock_acquire+0x8>)
 8030fae:	f000 b9fe 	b.w	80313ae <__retarget_lock_acquire_recursive>
 8030fb2:	bf00      	nop
 8030fb4:	20008751 	.word	0x20008751

08030fb8 <__sfp_lock_release>:
 8030fb8:	4801      	ldr	r0, [pc, #4]	; (8030fc0 <__sfp_lock_release+0x8>)
 8030fba:	f000 b9f9 	b.w	80313b0 <__retarget_lock_release_recursive>
 8030fbe:	bf00      	nop
 8030fc0:	20008751 	.word	0x20008751

08030fc4 <__sinit>:
 8030fc4:	b510      	push	{r4, lr}
 8030fc6:	4604      	mov	r4, r0
 8030fc8:	f7ff fff0 	bl	8030fac <__sfp_lock_acquire>
 8030fcc:	6a23      	ldr	r3, [r4, #32]
 8030fce:	b11b      	cbz	r3, 8030fd8 <__sinit+0x14>
 8030fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8030fd4:	f7ff bff0 	b.w	8030fb8 <__sfp_lock_release>
 8030fd8:	4b04      	ldr	r3, [pc, #16]	; (8030fec <__sinit+0x28>)
 8030fda:	6223      	str	r3, [r4, #32]
 8030fdc:	4b04      	ldr	r3, [pc, #16]	; (8030ff0 <__sinit+0x2c>)
 8030fde:	681b      	ldr	r3, [r3, #0]
 8030fe0:	2b00      	cmp	r3, #0
 8030fe2:	d1f5      	bne.n	8030fd0 <__sinit+0xc>
 8030fe4:	f7ff ffc4 	bl	8030f70 <global_stdio_init.part.0>
 8030fe8:	e7f2      	b.n	8030fd0 <__sinit+0xc>
 8030fea:	bf00      	nop
 8030fec:	08030f31 	.word	0x08030f31
 8030ff0:	20008748 	.word	0x20008748

08030ff4 <_fwalk_sglue>:
 8030ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030ff8:	4607      	mov	r7, r0
 8030ffa:	4688      	mov	r8, r1
 8030ffc:	4614      	mov	r4, r2
 8030ffe:	2600      	movs	r6, #0
 8031000:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031004:	f1b9 0901 	subs.w	r9, r9, #1
 8031008:	d505      	bpl.n	8031016 <_fwalk_sglue+0x22>
 803100a:	6824      	ldr	r4, [r4, #0]
 803100c:	2c00      	cmp	r4, #0
 803100e:	d1f7      	bne.n	8031000 <_fwalk_sglue+0xc>
 8031010:	4630      	mov	r0, r6
 8031012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031016:	89ab      	ldrh	r3, [r5, #12]
 8031018:	2b01      	cmp	r3, #1
 803101a:	d907      	bls.n	803102c <_fwalk_sglue+0x38>
 803101c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8031020:	3301      	adds	r3, #1
 8031022:	d003      	beq.n	803102c <_fwalk_sglue+0x38>
 8031024:	4629      	mov	r1, r5
 8031026:	4638      	mov	r0, r7
 8031028:	47c0      	blx	r8
 803102a:	4306      	orrs	r6, r0
 803102c:	3568      	adds	r5, #104	; 0x68
 803102e:	e7e9      	b.n	8031004 <_fwalk_sglue+0x10>

08031030 <iprintf>:
 8031030:	b40f      	push	{r0, r1, r2, r3}
 8031032:	b507      	push	{r0, r1, r2, lr}
 8031034:	4906      	ldr	r1, [pc, #24]	; (8031050 <iprintf+0x20>)
 8031036:	ab04      	add	r3, sp, #16
 8031038:	6808      	ldr	r0, [r1, #0]
 803103a:	f853 2b04 	ldr.w	r2, [r3], #4
 803103e:	6881      	ldr	r1, [r0, #8]
 8031040:	9301      	str	r3, [sp, #4]
 8031042:	f000 fae7 	bl	8031614 <_vfiprintf_r>
 8031046:	b003      	add	sp, #12
 8031048:	f85d eb04 	ldr.w	lr, [sp], #4
 803104c:	b004      	add	sp, #16
 803104e:	4770      	bx	lr
 8031050:	200002d0 	.word	0x200002d0

08031054 <_puts_r>:
 8031054:	6a03      	ldr	r3, [r0, #32]
 8031056:	b570      	push	{r4, r5, r6, lr}
 8031058:	6884      	ldr	r4, [r0, #8]
 803105a:	4605      	mov	r5, r0
 803105c:	460e      	mov	r6, r1
 803105e:	b90b      	cbnz	r3, 8031064 <_puts_r+0x10>
 8031060:	f7ff ffb0 	bl	8030fc4 <__sinit>
 8031064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031066:	07db      	lsls	r3, r3, #31
 8031068:	d405      	bmi.n	8031076 <_puts_r+0x22>
 803106a:	89a3      	ldrh	r3, [r4, #12]
 803106c:	0598      	lsls	r0, r3, #22
 803106e:	d402      	bmi.n	8031076 <_puts_r+0x22>
 8031070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031072:	f000 f99c 	bl	80313ae <__retarget_lock_acquire_recursive>
 8031076:	89a3      	ldrh	r3, [r4, #12]
 8031078:	0719      	lsls	r1, r3, #28
 803107a:	d513      	bpl.n	80310a4 <_puts_r+0x50>
 803107c:	6923      	ldr	r3, [r4, #16]
 803107e:	b18b      	cbz	r3, 80310a4 <_puts_r+0x50>
 8031080:	3e01      	subs	r6, #1
 8031082:	68a3      	ldr	r3, [r4, #8]
 8031084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8031088:	3b01      	subs	r3, #1
 803108a:	60a3      	str	r3, [r4, #8]
 803108c:	b9e9      	cbnz	r1, 80310ca <_puts_r+0x76>
 803108e:	2b00      	cmp	r3, #0
 8031090:	da2e      	bge.n	80310f0 <_puts_r+0x9c>
 8031092:	4622      	mov	r2, r4
 8031094:	210a      	movs	r1, #10
 8031096:	4628      	mov	r0, r5
 8031098:	f000 f87b 	bl	8031192 <__swbuf_r>
 803109c:	3001      	adds	r0, #1
 803109e:	d007      	beq.n	80310b0 <_puts_r+0x5c>
 80310a0:	250a      	movs	r5, #10
 80310a2:	e007      	b.n	80310b4 <_puts_r+0x60>
 80310a4:	4621      	mov	r1, r4
 80310a6:	4628      	mov	r0, r5
 80310a8:	f000 f8b0 	bl	803120c <__swsetup_r>
 80310ac:	2800      	cmp	r0, #0
 80310ae:	d0e7      	beq.n	8031080 <_puts_r+0x2c>
 80310b0:	f04f 35ff 	mov.w	r5, #4294967295
 80310b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80310b6:	07da      	lsls	r2, r3, #31
 80310b8:	d405      	bmi.n	80310c6 <_puts_r+0x72>
 80310ba:	89a3      	ldrh	r3, [r4, #12]
 80310bc:	059b      	lsls	r3, r3, #22
 80310be:	d402      	bmi.n	80310c6 <_puts_r+0x72>
 80310c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80310c2:	f000 f975 	bl	80313b0 <__retarget_lock_release_recursive>
 80310c6:	4628      	mov	r0, r5
 80310c8:	bd70      	pop	{r4, r5, r6, pc}
 80310ca:	2b00      	cmp	r3, #0
 80310cc:	da04      	bge.n	80310d8 <_puts_r+0x84>
 80310ce:	69a2      	ldr	r2, [r4, #24]
 80310d0:	429a      	cmp	r2, r3
 80310d2:	dc06      	bgt.n	80310e2 <_puts_r+0x8e>
 80310d4:	290a      	cmp	r1, #10
 80310d6:	d004      	beq.n	80310e2 <_puts_r+0x8e>
 80310d8:	6823      	ldr	r3, [r4, #0]
 80310da:	1c5a      	adds	r2, r3, #1
 80310dc:	6022      	str	r2, [r4, #0]
 80310de:	7019      	strb	r1, [r3, #0]
 80310e0:	e7cf      	b.n	8031082 <_puts_r+0x2e>
 80310e2:	4622      	mov	r2, r4
 80310e4:	4628      	mov	r0, r5
 80310e6:	f000 f854 	bl	8031192 <__swbuf_r>
 80310ea:	3001      	adds	r0, #1
 80310ec:	d1c9      	bne.n	8031082 <_puts_r+0x2e>
 80310ee:	e7df      	b.n	80310b0 <_puts_r+0x5c>
 80310f0:	6823      	ldr	r3, [r4, #0]
 80310f2:	250a      	movs	r5, #10
 80310f4:	1c5a      	adds	r2, r3, #1
 80310f6:	6022      	str	r2, [r4, #0]
 80310f8:	701d      	strb	r5, [r3, #0]
 80310fa:	e7db      	b.n	80310b4 <_puts_r+0x60>

080310fc <puts>:
 80310fc:	4b02      	ldr	r3, [pc, #8]	; (8031108 <puts+0xc>)
 80310fe:	4601      	mov	r1, r0
 8031100:	6818      	ldr	r0, [r3, #0]
 8031102:	f7ff bfa7 	b.w	8031054 <_puts_r>
 8031106:	bf00      	nop
 8031108:	200002d0 	.word	0x200002d0

0803110c <__sread>:
 803110c:	b510      	push	{r4, lr}
 803110e:	460c      	mov	r4, r1
 8031110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031114:	f000 f8fc 	bl	8031310 <_read_r>
 8031118:	2800      	cmp	r0, #0
 803111a:	bfab      	itete	ge
 803111c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803111e:	89a3      	ldrhlt	r3, [r4, #12]
 8031120:	181b      	addge	r3, r3, r0
 8031122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8031126:	bfac      	ite	ge
 8031128:	6563      	strge	r3, [r4, #84]	; 0x54
 803112a:	81a3      	strhlt	r3, [r4, #12]
 803112c:	bd10      	pop	{r4, pc}

0803112e <__swrite>:
 803112e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031132:	461f      	mov	r7, r3
 8031134:	898b      	ldrh	r3, [r1, #12]
 8031136:	05db      	lsls	r3, r3, #23
 8031138:	4605      	mov	r5, r0
 803113a:	460c      	mov	r4, r1
 803113c:	4616      	mov	r6, r2
 803113e:	d505      	bpl.n	803114c <__swrite+0x1e>
 8031140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031144:	2302      	movs	r3, #2
 8031146:	2200      	movs	r2, #0
 8031148:	f000 f8d0 	bl	80312ec <_lseek_r>
 803114c:	89a3      	ldrh	r3, [r4, #12]
 803114e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8031156:	81a3      	strh	r3, [r4, #12]
 8031158:	4632      	mov	r2, r6
 803115a:	463b      	mov	r3, r7
 803115c:	4628      	mov	r0, r5
 803115e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031162:	f000 b8e7 	b.w	8031334 <_write_r>

08031166 <__sseek>:
 8031166:	b510      	push	{r4, lr}
 8031168:	460c      	mov	r4, r1
 803116a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803116e:	f000 f8bd 	bl	80312ec <_lseek_r>
 8031172:	1c43      	adds	r3, r0, #1
 8031174:	89a3      	ldrh	r3, [r4, #12]
 8031176:	bf15      	itete	ne
 8031178:	6560      	strne	r0, [r4, #84]	; 0x54
 803117a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803117e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031182:	81a3      	strheq	r3, [r4, #12]
 8031184:	bf18      	it	ne
 8031186:	81a3      	strhne	r3, [r4, #12]
 8031188:	bd10      	pop	{r4, pc}

0803118a <__sclose>:
 803118a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803118e:	f000 b89d 	b.w	80312cc <_close_r>

08031192 <__swbuf_r>:
 8031192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031194:	460e      	mov	r6, r1
 8031196:	4614      	mov	r4, r2
 8031198:	4605      	mov	r5, r0
 803119a:	b118      	cbz	r0, 80311a4 <__swbuf_r+0x12>
 803119c:	6a03      	ldr	r3, [r0, #32]
 803119e:	b90b      	cbnz	r3, 80311a4 <__swbuf_r+0x12>
 80311a0:	f7ff ff10 	bl	8030fc4 <__sinit>
 80311a4:	69a3      	ldr	r3, [r4, #24]
 80311a6:	60a3      	str	r3, [r4, #8]
 80311a8:	89a3      	ldrh	r3, [r4, #12]
 80311aa:	071a      	lsls	r2, r3, #28
 80311ac:	d525      	bpl.n	80311fa <__swbuf_r+0x68>
 80311ae:	6923      	ldr	r3, [r4, #16]
 80311b0:	b31b      	cbz	r3, 80311fa <__swbuf_r+0x68>
 80311b2:	6823      	ldr	r3, [r4, #0]
 80311b4:	6922      	ldr	r2, [r4, #16]
 80311b6:	1a98      	subs	r0, r3, r2
 80311b8:	6963      	ldr	r3, [r4, #20]
 80311ba:	b2f6      	uxtb	r6, r6
 80311bc:	4283      	cmp	r3, r0
 80311be:	4637      	mov	r7, r6
 80311c0:	dc04      	bgt.n	80311cc <__swbuf_r+0x3a>
 80311c2:	4621      	mov	r1, r4
 80311c4:	4628      	mov	r0, r5
 80311c6:	f000 fd55 	bl	8031c74 <_fflush_r>
 80311ca:	b9e0      	cbnz	r0, 8031206 <__swbuf_r+0x74>
 80311cc:	68a3      	ldr	r3, [r4, #8]
 80311ce:	3b01      	subs	r3, #1
 80311d0:	60a3      	str	r3, [r4, #8]
 80311d2:	6823      	ldr	r3, [r4, #0]
 80311d4:	1c5a      	adds	r2, r3, #1
 80311d6:	6022      	str	r2, [r4, #0]
 80311d8:	701e      	strb	r6, [r3, #0]
 80311da:	6962      	ldr	r2, [r4, #20]
 80311dc:	1c43      	adds	r3, r0, #1
 80311de:	429a      	cmp	r2, r3
 80311e0:	d004      	beq.n	80311ec <__swbuf_r+0x5a>
 80311e2:	89a3      	ldrh	r3, [r4, #12]
 80311e4:	07db      	lsls	r3, r3, #31
 80311e6:	d506      	bpl.n	80311f6 <__swbuf_r+0x64>
 80311e8:	2e0a      	cmp	r6, #10
 80311ea:	d104      	bne.n	80311f6 <__swbuf_r+0x64>
 80311ec:	4621      	mov	r1, r4
 80311ee:	4628      	mov	r0, r5
 80311f0:	f000 fd40 	bl	8031c74 <_fflush_r>
 80311f4:	b938      	cbnz	r0, 8031206 <__swbuf_r+0x74>
 80311f6:	4638      	mov	r0, r7
 80311f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80311fa:	4621      	mov	r1, r4
 80311fc:	4628      	mov	r0, r5
 80311fe:	f000 f805 	bl	803120c <__swsetup_r>
 8031202:	2800      	cmp	r0, #0
 8031204:	d0d5      	beq.n	80311b2 <__swbuf_r+0x20>
 8031206:	f04f 37ff 	mov.w	r7, #4294967295
 803120a:	e7f4      	b.n	80311f6 <__swbuf_r+0x64>

0803120c <__swsetup_r>:
 803120c:	b538      	push	{r3, r4, r5, lr}
 803120e:	4b2a      	ldr	r3, [pc, #168]	; (80312b8 <__swsetup_r+0xac>)
 8031210:	4605      	mov	r5, r0
 8031212:	6818      	ldr	r0, [r3, #0]
 8031214:	460c      	mov	r4, r1
 8031216:	b118      	cbz	r0, 8031220 <__swsetup_r+0x14>
 8031218:	6a03      	ldr	r3, [r0, #32]
 803121a:	b90b      	cbnz	r3, 8031220 <__swsetup_r+0x14>
 803121c:	f7ff fed2 	bl	8030fc4 <__sinit>
 8031220:	89a3      	ldrh	r3, [r4, #12]
 8031222:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8031226:	0718      	lsls	r0, r3, #28
 8031228:	d422      	bmi.n	8031270 <__swsetup_r+0x64>
 803122a:	06d9      	lsls	r1, r3, #27
 803122c:	d407      	bmi.n	803123e <__swsetup_r+0x32>
 803122e:	2309      	movs	r3, #9
 8031230:	602b      	str	r3, [r5, #0]
 8031232:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8031236:	81a3      	strh	r3, [r4, #12]
 8031238:	f04f 30ff 	mov.w	r0, #4294967295
 803123c:	e034      	b.n	80312a8 <__swsetup_r+0x9c>
 803123e:	0758      	lsls	r0, r3, #29
 8031240:	d512      	bpl.n	8031268 <__swsetup_r+0x5c>
 8031242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8031244:	b141      	cbz	r1, 8031258 <__swsetup_r+0x4c>
 8031246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803124a:	4299      	cmp	r1, r3
 803124c:	d002      	beq.n	8031254 <__swsetup_r+0x48>
 803124e:	4628      	mov	r0, r5
 8031250:	f000 f8be 	bl	80313d0 <_free_r>
 8031254:	2300      	movs	r3, #0
 8031256:	6363      	str	r3, [r4, #52]	; 0x34
 8031258:	89a3      	ldrh	r3, [r4, #12]
 803125a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803125e:	81a3      	strh	r3, [r4, #12]
 8031260:	2300      	movs	r3, #0
 8031262:	6063      	str	r3, [r4, #4]
 8031264:	6923      	ldr	r3, [r4, #16]
 8031266:	6023      	str	r3, [r4, #0]
 8031268:	89a3      	ldrh	r3, [r4, #12]
 803126a:	f043 0308 	orr.w	r3, r3, #8
 803126e:	81a3      	strh	r3, [r4, #12]
 8031270:	6923      	ldr	r3, [r4, #16]
 8031272:	b94b      	cbnz	r3, 8031288 <__swsetup_r+0x7c>
 8031274:	89a3      	ldrh	r3, [r4, #12]
 8031276:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803127a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803127e:	d003      	beq.n	8031288 <__swsetup_r+0x7c>
 8031280:	4621      	mov	r1, r4
 8031282:	4628      	mov	r0, r5
 8031284:	f000 fd44 	bl	8031d10 <__smakebuf_r>
 8031288:	89a0      	ldrh	r0, [r4, #12]
 803128a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803128e:	f010 0301 	ands.w	r3, r0, #1
 8031292:	d00a      	beq.n	80312aa <__swsetup_r+0x9e>
 8031294:	2300      	movs	r3, #0
 8031296:	60a3      	str	r3, [r4, #8]
 8031298:	6963      	ldr	r3, [r4, #20]
 803129a:	425b      	negs	r3, r3
 803129c:	61a3      	str	r3, [r4, #24]
 803129e:	6923      	ldr	r3, [r4, #16]
 80312a0:	b943      	cbnz	r3, 80312b4 <__swsetup_r+0xa8>
 80312a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80312a6:	d1c4      	bne.n	8031232 <__swsetup_r+0x26>
 80312a8:	bd38      	pop	{r3, r4, r5, pc}
 80312aa:	0781      	lsls	r1, r0, #30
 80312ac:	bf58      	it	pl
 80312ae:	6963      	ldrpl	r3, [r4, #20]
 80312b0:	60a3      	str	r3, [r4, #8]
 80312b2:	e7f4      	b.n	803129e <__swsetup_r+0x92>
 80312b4:	2000      	movs	r0, #0
 80312b6:	e7f7      	b.n	80312a8 <__swsetup_r+0x9c>
 80312b8:	200002d0 	.word	0x200002d0

080312bc <memset>:
 80312bc:	4402      	add	r2, r0
 80312be:	4603      	mov	r3, r0
 80312c0:	4293      	cmp	r3, r2
 80312c2:	d100      	bne.n	80312c6 <memset+0xa>
 80312c4:	4770      	bx	lr
 80312c6:	f803 1b01 	strb.w	r1, [r3], #1
 80312ca:	e7f9      	b.n	80312c0 <memset+0x4>

080312cc <_close_r>:
 80312cc:	b538      	push	{r3, r4, r5, lr}
 80312ce:	4d06      	ldr	r5, [pc, #24]	; (80312e8 <_close_r+0x1c>)
 80312d0:	2300      	movs	r3, #0
 80312d2:	4604      	mov	r4, r0
 80312d4:	4608      	mov	r0, r1
 80312d6:	602b      	str	r3, [r5, #0]
 80312d8:	f7f6 f832 	bl	8027340 <_close>
 80312dc:	1c43      	adds	r3, r0, #1
 80312de:	d102      	bne.n	80312e6 <_close_r+0x1a>
 80312e0:	682b      	ldr	r3, [r5, #0]
 80312e2:	b103      	cbz	r3, 80312e6 <_close_r+0x1a>
 80312e4:	6023      	str	r3, [r4, #0]
 80312e6:	bd38      	pop	{r3, r4, r5, pc}
 80312e8:	2000874c 	.word	0x2000874c

080312ec <_lseek_r>:
 80312ec:	b538      	push	{r3, r4, r5, lr}
 80312ee:	4d07      	ldr	r5, [pc, #28]	; (803130c <_lseek_r+0x20>)
 80312f0:	4604      	mov	r4, r0
 80312f2:	4608      	mov	r0, r1
 80312f4:	4611      	mov	r1, r2
 80312f6:	2200      	movs	r2, #0
 80312f8:	602a      	str	r2, [r5, #0]
 80312fa:	461a      	mov	r2, r3
 80312fc:	f7f6 f847 	bl	802738e <_lseek>
 8031300:	1c43      	adds	r3, r0, #1
 8031302:	d102      	bne.n	803130a <_lseek_r+0x1e>
 8031304:	682b      	ldr	r3, [r5, #0]
 8031306:	b103      	cbz	r3, 803130a <_lseek_r+0x1e>
 8031308:	6023      	str	r3, [r4, #0]
 803130a:	bd38      	pop	{r3, r4, r5, pc}
 803130c:	2000874c 	.word	0x2000874c

08031310 <_read_r>:
 8031310:	b538      	push	{r3, r4, r5, lr}
 8031312:	4d07      	ldr	r5, [pc, #28]	; (8031330 <_read_r+0x20>)
 8031314:	4604      	mov	r4, r0
 8031316:	4608      	mov	r0, r1
 8031318:	4611      	mov	r1, r2
 803131a:	2200      	movs	r2, #0
 803131c:	602a      	str	r2, [r5, #0]
 803131e:	461a      	mov	r2, r3
 8031320:	f7f5 fff1 	bl	8027306 <_read>
 8031324:	1c43      	adds	r3, r0, #1
 8031326:	d102      	bne.n	803132e <_read_r+0x1e>
 8031328:	682b      	ldr	r3, [r5, #0]
 803132a:	b103      	cbz	r3, 803132e <_read_r+0x1e>
 803132c:	6023      	str	r3, [r4, #0]
 803132e:	bd38      	pop	{r3, r4, r5, pc}
 8031330:	2000874c 	.word	0x2000874c

08031334 <_write_r>:
 8031334:	b538      	push	{r3, r4, r5, lr}
 8031336:	4d07      	ldr	r5, [pc, #28]	; (8031354 <_write_r+0x20>)
 8031338:	4604      	mov	r4, r0
 803133a:	4608      	mov	r0, r1
 803133c:	4611      	mov	r1, r2
 803133e:	2200      	movs	r2, #0
 8031340:	602a      	str	r2, [r5, #0]
 8031342:	461a      	mov	r2, r3
 8031344:	f7f2 fa32 	bl	80237ac <_write>
 8031348:	1c43      	adds	r3, r0, #1
 803134a:	d102      	bne.n	8031352 <_write_r+0x1e>
 803134c:	682b      	ldr	r3, [r5, #0]
 803134e:	b103      	cbz	r3, 8031352 <_write_r+0x1e>
 8031350:	6023      	str	r3, [r4, #0]
 8031352:	bd38      	pop	{r3, r4, r5, pc}
 8031354:	2000874c 	.word	0x2000874c

08031358 <__errno>:
 8031358:	4b01      	ldr	r3, [pc, #4]	; (8031360 <__errno+0x8>)
 803135a:	6818      	ldr	r0, [r3, #0]
 803135c:	4770      	bx	lr
 803135e:	bf00      	nop
 8031360:	200002d0 	.word	0x200002d0

08031364 <__libc_init_array>:
 8031364:	b570      	push	{r4, r5, r6, lr}
 8031366:	4d0d      	ldr	r5, [pc, #52]	; (803139c <__libc_init_array+0x38>)
 8031368:	4c0d      	ldr	r4, [pc, #52]	; (80313a0 <__libc_init_array+0x3c>)
 803136a:	1b64      	subs	r4, r4, r5
 803136c:	10a4      	asrs	r4, r4, #2
 803136e:	2600      	movs	r6, #0
 8031370:	42a6      	cmp	r6, r4
 8031372:	d109      	bne.n	8031388 <__libc_init_array+0x24>
 8031374:	4d0b      	ldr	r5, [pc, #44]	; (80313a4 <__libc_init_array+0x40>)
 8031376:	4c0c      	ldr	r4, [pc, #48]	; (80313a8 <__libc_init_array+0x44>)
 8031378:	f000 fd38 	bl	8031dec <_init>
 803137c:	1b64      	subs	r4, r4, r5
 803137e:	10a4      	asrs	r4, r4, #2
 8031380:	2600      	movs	r6, #0
 8031382:	42a6      	cmp	r6, r4
 8031384:	d105      	bne.n	8031392 <__libc_init_array+0x2e>
 8031386:	bd70      	pop	{r4, r5, r6, pc}
 8031388:	f855 3b04 	ldr.w	r3, [r5], #4
 803138c:	4798      	blx	r3
 803138e:	3601      	adds	r6, #1
 8031390:	e7ee      	b.n	8031370 <__libc_init_array+0xc>
 8031392:	f855 3b04 	ldr.w	r3, [r5], #4
 8031396:	4798      	blx	r3
 8031398:	3601      	adds	r6, #1
 803139a:	e7f2      	b.n	8031382 <__libc_init_array+0x1e>
 803139c:	08032d78 	.word	0x08032d78
 80313a0:	08032d78 	.word	0x08032d78
 80313a4:	08032d78 	.word	0x08032d78
 80313a8:	08032d7c 	.word	0x08032d7c

080313ac <__retarget_lock_init_recursive>:
 80313ac:	4770      	bx	lr

080313ae <__retarget_lock_acquire_recursive>:
 80313ae:	4770      	bx	lr

080313b0 <__retarget_lock_release_recursive>:
 80313b0:	4770      	bx	lr

080313b2 <memcpy>:
 80313b2:	440a      	add	r2, r1
 80313b4:	4291      	cmp	r1, r2
 80313b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80313ba:	d100      	bne.n	80313be <memcpy+0xc>
 80313bc:	4770      	bx	lr
 80313be:	b510      	push	{r4, lr}
 80313c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80313c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80313c8:	4291      	cmp	r1, r2
 80313ca:	d1f9      	bne.n	80313c0 <memcpy+0xe>
 80313cc:	bd10      	pop	{r4, pc}
	...

080313d0 <_free_r>:
 80313d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80313d2:	2900      	cmp	r1, #0
 80313d4:	d044      	beq.n	8031460 <_free_r+0x90>
 80313d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80313da:	9001      	str	r0, [sp, #4]
 80313dc:	2b00      	cmp	r3, #0
 80313de:	f1a1 0404 	sub.w	r4, r1, #4
 80313e2:	bfb8      	it	lt
 80313e4:	18e4      	addlt	r4, r4, r3
 80313e6:	f000 f8df 	bl	80315a8 <__malloc_lock>
 80313ea:	4a1e      	ldr	r2, [pc, #120]	; (8031464 <_free_r+0x94>)
 80313ec:	9801      	ldr	r0, [sp, #4]
 80313ee:	6813      	ldr	r3, [r2, #0]
 80313f0:	b933      	cbnz	r3, 8031400 <_free_r+0x30>
 80313f2:	6063      	str	r3, [r4, #4]
 80313f4:	6014      	str	r4, [r2, #0]
 80313f6:	b003      	add	sp, #12
 80313f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80313fc:	f000 b8da 	b.w	80315b4 <__malloc_unlock>
 8031400:	42a3      	cmp	r3, r4
 8031402:	d908      	bls.n	8031416 <_free_r+0x46>
 8031404:	6825      	ldr	r5, [r4, #0]
 8031406:	1961      	adds	r1, r4, r5
 8031408:	428b      	cmp	r3, r1
 803140a:	bf01      	itttt	eq
 803140c:	6819      	ldreq	r1, [r3, #0]
 803140e:	685b      	ldreq	r3, [r3, #4]
 8031410:	1949      	addeq	r1, r1, r5
 8031412:	6021      	streq	r1, [r4, #0]
 8031414:	e7ed      	b.n	80313f2 <_free_r+0x22>
 8031416:	461a      	mov	r2, r3
 8031418:	685b      	ldr	r3, [r3, #4]
 803141a:	b10b      	cbz	r3, 8031420 <_free_r+0x50>
 803141c:	42a3      	cmp	r3, r4
 803141e:	d9fa      	bls.n	8031416 <_free_r+0x46>
 8031420:	6811      	ldr	r1, [r2, #0]
 8031422:	1855      	adds	r5, r2, r1
 8031424:	42a5      	cmp	r5, r4
 8031426:	d10b      	bne.n	8031440 <_free_r+0x70>
 8031428:	6824      	ldr	r4, [r4, #0]
 803142a:	4421      	add	r1, r4
 803142c:	1854      	adds	r4, r2, r1
 803142e:	42a3      	cmp	r3, r4
 8031430:	6011      	str	r1, [r2, #0]
 8031432:	d1e0      	bne.n	80313f6 <_free_r+0x26>
 8031434:	681c      	ldr	r4, [r3, #0]
 8031436:	685b      	ldr	r3, [r3, #4]
 8031438:	6053      	str	r3, [r2, #4]
 803143a:	440c      	add	r4, r1
 803143c:	6014      	str	r4, [r2, #0]
 803143e:	e7da      	b.n	80313f6 <_free_r+0x26>
 8031440:	d902      	bls.n	8031448 <_free_r+0x78>
 8031442:	230c      	movs	r3, #12
 8031444:	6003      	str	r3, [r0, #0]
 8031446:	e7d6      	b.n	80313f6 <_free_r+0x26>
 8031448:	6825      	ldr	r5, [r4, #0]
 803144a:	1961      	adds	r1, r4, r5
 803144c:	428b      	cmp	r3, r1
 803144e:	bf04      	itt	eq
 8031450:	6819      	ldreq	r1, [r3, #0]
 8031452:	685b      	ldreq	r3, [r3, #4]
 8031454:	6063      	str	r3, [r4, #4]
 8031456:	bf04      	itt	eq
 8031458:	1949      	addeq	r1, r1, r5
 803145a:	6021      	streq	r1, [r4, #0]
 803145c:	6054      	str	r4, [r2, #4]
 803145e:	e7ca      	b.n	80313f6 <_free_r+0x26>
 8031460:	b003      	add	sp, #12
 8031462:	bd30      	pop	{r4, r5, pc}
 8031464:	20008754 	.word	0x20008754

08031468 <sbrk_aligned>:
 8031468:	b570      	push	{r4, r5, r6, lr}
 803146a:	4e0e      	ldr	r6, [pc, #56]	; (80314a4 <sbrk_aligned+0x3c>)
 803146c:	460c      	mov	r4, r1
 803146e:	6831      	ldr	r1, [r6, #0]
 8031470:	4605      	mov	r5, r0
 8031472:	b911      	cbnz	r1, 803147a <sbrk_aligned+0x12>
 8031474:	f000 fcaa 	bl	8031dcc <_sbrk_r>
 8031478:	6030      	str	r0, [r6, #0]
 803147a:	4621      	mov	r1, r4
 803147c:	4628      	mov	r0, r5
 803147e:	f000 fca5 	bl	8031dcc <_sbrk_r>
 8031482:	1c43      	adds	r3, r0, #1
 8031484:	d00a      	beq.n	803149c <sbrk_aligned+0x34>
 8031486:	1cc4      	adds	r4, r0, #3
 8031488:	f024 0403 	bic.w	r4, r4, #3
 803148c:	42a0      	cmp	r0, r4
 803148e:	d007      	beq.n	80314a0 <sbrk_aligned+0x38>
 8031490:	1a21      	subs	r1, r4, r0
 8031492:	4628      	mov	r0, r5
 8031494:	f000 fc9a 	bl	8031dcc <_sbrk_r>
 8031498:	3001      	adds	r0, #1
 803149a:	d101      	bne.n	80314a0 <sbrk_aligned+0x38>
 803149c:	f04f 34ff 	mov.w	r4, #4294967295
 80314a0:	4620      	mov	r0, r4
 80314a2:	bd70      	pop	{r4, r5, r6, pc}
 80314a4:	20008758 	.word	0x20008758

080314a8 <_malloc_r>:
 80314a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80314ac:	1ccd      	adds	r5, r1, #3
 80314ae:	f025 0503 	bic.w	r5, r5, #3
 80314b2:	3508      	adds	r5, #8
 80314b4:	2d0c      	cmp	r5, #12
 80314b6:	bf38      	it	cc
 80314b8:	250c      	movcc	r5, #12
 80314ba:	2d00      	cmp	r5, #0
 80314bc:	4607      	mov	r7, r0
 80314be:	db01      	blt.n	80314c4 <_malloc_r+0x1c>
 80314c0:	42a9      	cmp	r1, r5
 80314c2:	d905      	bls.n	80314d0 <_malloc_r+0x28>
 80314c4:	230c      	movs	r3, #12
 80314c6:	603b      	str	r3, [r7, #0]
 80314c8:	2600      	movs	r6, #0
 80314ca:	4630      	mov	r0, r6
 80314cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80314d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80315a4 <_malloc_r+0xfc>
 80314d4:	f000 f868 	bl	80315a8 <__malloc_lock>
 80314d8:	f8d8 3000 	ldr.w	r3, [r8]
 80314dc:	461c      	mov	r4, r3
 80314de:	bb5c      	cbnz	r4, 8031538 <_malloc_r+0x90>
 80314e0:	4629      	mov	r1, r5
 80314e2:	4638      	mov	r0, r7
 80314e4:	f7ff ffc0 	bl	8031468 <sbrk_aligned>
 80314e8:	1c43      	adds	r3, r0, #1
 80314ea:	4604      	mov	r4, r0
 80314ec:	d155      	bne.n	803159a <_malloc_r+0xf2>
 80314ee:	f8d8 4000 	ldr.w	r4, [r8]
 80314f2:	4626      	mov	r6, r4
 80314f4:	2e00      	cmp	r6, #0
 80314f6:	d145      	bne.n	8031584 <_malloc_r+0xdc>
 80314f8:	2c00      	cmp	r4, #0
 80314fa:	d048      	beq.n	803158e <_malloc_r+0xe6>
 80314fc:	6823      	ldr	r3, [r4, #0]
 80314fe:	4631      	mov	r1, r6
 8031500:	4638      	mov	r0, r7
 8031502:	eb04 0903 	add.w	r9, r4, r3
 8031506:	f000 fc61 	bl	8031dcc <_sbrk_r>
 803150a:	4581      	cmp	r9, r0
 803150c:	d13f      	bne.n	803158e <_malloc_r+0xe6>
 803150e:	6821      	ldr	r1, [r4, #0]
 8031510:	1a6d      	subs	r5, r5, r1
 8031512:	4629      	mov	r1, r5
 8031514:	4638      	mov	r0, r7
 8031516:	f7ff ffa7 	bl	8031468 <sbrk_aligned>
 803151a:	3001      	adds	r0, #1
 803151c:	d037      	beq.n	803158e <_malloc_r+0xe6>
 803151e:	6823      	ldr	r3, [r4, #0]
 8031520:	442b      	add	r3, r5
 8031522:	6023      	str	r3, [r4, #0]
 8031524:	f8d8 3000 	ldr.w	r3, [r8]
 8031528:	2b00      	cmp	r3, #0
 803152a:	d038      	beq.n	803159e <_malloc_r+0xf6>
 803152c:	685a      	ldr	r2, [r3, #4]
 803152e:	42a2      	cmp	r2, r4
 8031530:	d12b      	bne.n	803158a <_malloc_r+0xe2>
 8031532:	2200      	movs	r2, #0
 8031534:	605a      	str	r2, [r3, #4]
 8031536:	e00f      	b.n	8031558 <_malloc_r+0xb0>
 8031538:	6822      	ldr	r2, [r4, #0]
 803153a:	1b52      	subs	r2, r2, r5
 803153c:	d41f      	bmi.n	803157e <_malloc_r+0xd6>
 803153e:	2a0b      	cmp	r2, #11
 8031540:	d917      	bls.n	8031572 <_malloc_r+0xca>
 8031542:	1961      	adds	r1, r4, r5
 8031544:	42a3      	cmp	r3, r4
 8031546:	6025      	str	r5, [r4, #0]
 8031548:	bf18      	it	ne
 803154a:	6059      	strne	r1, [r3, #4]
 803154c:	6863      	ldr	r3, [r4, #4]
 803154e:	bf08      	it	eq
 8031550:	f8c8 1000 	streq.w	r1, [r8]
 8031554:	5162      	str	r2, [r4, r5]
 8031556:	604b      	str	r3, [r1, #4]
 8031558:	4638      	mov	r0, r7
 803155a:	f104 060b 	add.w	r6, r4, #11
 803155e:	f000 f829 	bl	80315b4 <__malloc_unlock>
 8031562:	f026 0607 	bic.w	r6, r6, #7
 8031566:	1d23      	adds	r3, r4, #4
 8031568:	1af2      	subs	r2, r6, r3
 803156a:	d0ae      	beq.n	80314ca <_malloc_r+0x22>
 803156c:	1b9b      	subs	r3, r3, r6
 803156e:	50a3      	str	r3, [r4, r2]
 8031570:	e7ab      	b.n	80314ca <_malloc_r+0x22>
 8031572:	42a3      	cmp	r3, r4
 8031574:	6862      	ldr	r2, [r4, #4]
 8031576:	d1dd      	bne.n	8031534 <_malloc_r+0x8c>
 8031578:	f8c8 2000 	str.w	r2, [r8]
 803157c:	e7ec      	b.n	8031558 <_malloc_r+0xb0>
 803157e:	4623      	mov	r3, r4
 8031580:	6864      	ldr	r4, [r4, #4]
 8031582:	e7ac      	b.n	80314de <_malloc_r+0x36>
 8031584:	4634      	mov	r4, r6
 8031586:	6876      	ldr	r6, [r6, #4]
 8031588:	e7b4      	b.n	80314f4 <_malloc_r+0x4c>
 803158a:	4613      	mov	r3, r2
 803158c:	e7cc      	b.n	8031528 <_malloc_r+0x80>
 803158e:	230c      	movs	r3, #12
 8031590:	603b      	str	r3, [r7, #0]
 8031592:	4638      	mov	r0, r7
 8031594:	f000 f80e 	bl	80315b4 <__malloc_unlock>
 8031598:	e797      	b.n	80314ca <_malloc_r+0x22>
 803159a:	6025      	str	r5, [r4, #0]
 803159c:	e7dc      	b.n	8031558 <_malloc_r+0xb0>
 803159e:	605b      	str	r3, [r3, #4]
 80315a0:	deff      	udf	#255	; 0xff
 80315a2:	bf00      	nop
 80315a4:	20008754 	.word	0x20008754

080315a8 <__malloc_lock>:
 80315a8:	4801      	ldr	r0, [pc, #4]	; (80315b0 <__malloc_lock+0x8>)
 80315aa:	f7ff bf00 	b.w	80313ae <__retarget_lock_acquire_recursive>
 80315ae:	bf00      	nop
 80315b0:	20008750 	.word	0x20008750

080315b4 <__malloc_unlock>:
 80315b4:	4801      	ldr	r0, [pc, #4]	; (80315bc <__malloc_unlock+0x8>)
 80315b6:	f7ff befb 	b.w	80313b0 <__retarget_lock_release_recursive>
 80315ba:	bf00      	nop
 80315bc:	20008750 	.word	0x20008750

080315c0 <__sfputc_r>:
 80315c0:	6893      	ldr	r3, [r2, #8]
 80315c2:	3b01      	subs	r3, #1
 80315c4:	2b00      	cmp	r3, #0
 80315c6:	b410      	push	{r4}
 80315c8:	6093      	str	r3, [r2, #8]
 80315ca:	da08      	bge.n	80315de <__sfputc_r+0x1e>
 80315cc:	6994      	ldr	r4, [r2, #24]
 80315ce:	42a3      	cmp	r3, r4
 80315d0:	db01      	blt.n	80315d6 <__sfputc_r+0x16>
 80315d2:	290a      	cmp	r1, #10
 80315d4:	d103      	bne.n	80315de <__sfputc_r+0x1e>
 80315d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80315da:	f7ff bdda 	b.w	8031192 <__swbuf_r>
 80315de:	6813      	ldr	r3, [r2, #0]
 80315e0:	1c58      	adds	r0, r3, #1
 80315e2:	6010      	str	r0, [r2, #0]
 80315e4:	7019      	strb	r1, [r3, #0]
 80315e6:	4608      	mov	r0, r1
 80315e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80315ec:	4770      	bx	lr

080315ee <__sfputs_r>:
 80315ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80315f0:	4606      	mov	r6, r0
 80315f2:	460f      	mov	r7, r1
 80315f4:	4614      	mov	r4, r2
 80315f6:	18d5      	adds	r5, r2, r3
 80315f8:	42ac      	cmp	r4, r5
 80315fa:	d101      	bne.n	8031600 <__sfputs_r+0x12>
 80315fc:	2000      	movs	r0, #0
 80315fe:	e007      	b.n	8031610 <__sfputs_r+0x22>
 8031600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031604:	463a      	mov	r2, r7
 8031606:	4630      	mov	r0, r6
 8031608:	f7ff ffda 	bl	80315c0 <__sfputc_r>
 803160c:	1c43      	adds	r3, r0, #1
 803160e:	d1f3      	bne.n	80315f8 <__sfputs_r+0xa>
 8031610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08031614 <_vfiprintf_r>:
 8031614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031618:	460d      	mov	r5, r1
 803161a:	b09d      	sub	sp, #116	; 0x74
 803161c:	4614      	mov	r4, r2
 803161e:	4698      	mov	r8, r3
 8031620:	4606      	mov	r6, r0
 8031622:	b118      	cbz	r0, 803162c <_vfiprintf_r+0x18>
 8031624:	6a03      	ldr	r3, [r0, #32]
 8031626:	b90b      	cbnz	r3, 803162c <_vfiprintf_r+0x18>
 8031628:	f7ff fccc 	bl	8030fc4 <__sinit>
 803162c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803162e:	07d9      	lsls	r1, r3, #31
 8031630:	d405      	bmi.n	803163e <_vfiprintf_r+0x2a>
 8031632:	89ab      	ldrh	r3, [r5, #12]
 8031634:	059a      	lsls	r2, r3, #22
 8031636:	d402      	bmi.n	803163e <_vfiprintf_r+0x2a>
 8031638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803163a:	f7ff feb8 	bl	80313ae <__retarget_lock_acquire_recursive>
 803163e:	89ab      	ldrh	r3, [r5, #12]
 8031640:	071b      	lsls	r3, r3, #28
 8031642:	d501      	bpl.n	8031648 <_vfiprintf_r+0x34>
 8031644:	692b      	ldr	r3, [r5, #16]
 8031646:	b99b      	cbnz	r3, 8031670 <_vfiprintf_r+0x5c>
 8031648:	4629      	mov	r1, r5
 803164a:	4630      	mov	r0, r6
 803164c:	f7ff fdde 	bl	803120c <__swsetup_r>
 8031650:	b170      	cbz	r0, 8031670 <_vfiprintf_r+0x5c>
 8031652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031654:	07dc      	lsls	r4, r3, #31
 8031656:	d504      	bpl.n	8031662 <_vfiprintf_r+0x4e>
 8031658:	f04f 30ff 	mov.w	r0, #4294967295
 803165c:	b01d      	add	sp, #116	; 0x74
 803165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031662:	89ab      	ldrh	r3, [r5, #12]
 8031664:	0598      	lsls	r0, r3, #22
 8031666:	d4f7      	bmi.n	8031658 <_vfiprintf_r+0x44>
 8031668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803166a:	f7ff fea1 	bl	80313b0 <__retarget_lock_release_recursive>
 803166e:	e7f3      	b.n	8031658 <_vfiprintf_r+0x44>
 8031670:	2300      	movs	r3, #0
 8031672:	9309      	str	r3, [sp, #36]	; 0x24
 8031674:	2320      	movs	r3, #32
 8031676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803167a:	f8cd 800c 	str.w	r8, [sp, #12]
 803167e:	2330      	movs	r3, #48	; 0x30
 8031680:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8031834 <_vfiprintf_r+0x220>
 8031684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031688:	f04f 0901 	mov.w	r9, #1
 803168c:	4623      	mov	r3, r4
 803168e:	469a      	mov	sl, r3
 8031690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031694:	b10a      	cbz	r2, 803169a <_vfiprintf_r+0x86>
 8031696:	2a25      	cmp	r2, #37	; 0x25
 8031698:	d1f9      	bne.n	803168e <_vfiprintf_r+0x7a>
 803169a:	ebba 0b04 	subs.w	fp, sl, r4
 803169e:	d00b      	beq.n	80316b8 <_vfiprintf_r+0xa4>
 80316a0:	465b      	mov	r3, fp
 80316a2:	4622      	mov	r2, r4
 80316a4:	4629      	mov	r1, r5
 80316a6:	4630      	mov	r0, r6
 80316a8:	f7ff ffa1 	bl	80315ee <__sfputs_r>
 80316ac:	3001      	adds	r0, #1
 80316ae:	f000 80a9 	beq.w	8031804 <_vfiprintf_r+0x1f0>
 80316b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80316b4:	445a      	add	r2, fp
 80316b6:	9209      	str	r2, [sp, #36]	; 0x24
 80316b8:	f89a 3000 	ldrb.w	r3, [sl]
 80316bc:	2b00      	cmp	r3, #0
 80316be:	f000 80a1 	beq.w	8031804 <_vfiprintf_r+0x1f0>
 80316c2:	2300      	movs	r3, #0
 80316c4:	f04f 32ff 	mov.w	r2, #4294967295
 80316c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80316cc:	f10a 0a01 	add.w	sl, sl, #1
 80316d0:	9304      	str	r3, [sp, #16]
 80316d2:	9307      	str	r3, [sp, #28]
 80316d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80316d8:	931a      	str	r3, [sp, #104]	; 0x68
 80316da:	4654      	mov	r4, sl
 80316dc:	2205      	movs	r2, #5
 80316de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80316e2:	4854      	ldr	r0, [pc, #336]	; (8031834 <_vfiprintf_r+0x220>)
 80316e4:	f7f0 fd74 	bl	80221d0 <memchr>
 80316e8:	9a04      	ldr	r2, [sp, #16]
 80316ea:	b9d8      	cbnz	r0, 8031724 <_vfiprintf_r+0x110>
 80316ec:	06d1      	lsls	r1, r2, #27
 80316ee:	bf44      	itt	mi
 80316f0:	2320      	movmi	r3, #32
 80316f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80316f6:	0713      	lsls	r3, r2, #28
 80316f8:	bf44      	itt	mi
 80316fa:	232b      	movmi	r3, #43	; 0x2b
 80316fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031700:	f89a 3000 	ldrb.w	r3, [sl]
 8031704:	2b2a      	cmp	r3, #42	; 0x2a
 8031706:	d015      	beq.n	8031734 <_vfiprintf_r+0x120>
 8031708:	9a07      	ldr	r2, [sp, #28]
 803170a:	4654      	mov	r4, sl
 803170c:	2000      	movs	r0, #0
 803170e:	f04f 0c0a 	mov.w	ip, #10
 8031712:	4621      	mov	r1, r4
 8031714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031718:	3b30      	subs	r3, #48	; 0x30
 803171a:	2b09      	cmp	r3, #9
 803171c:	d94d      	bls.n	80317ba <_vfiprintf_r+0x1a6>
 803171e:	b1b0      	cbz	r0, 803174e <_vfiprintf_r+0x13a>
 8031720:	9207      	str	r2, [sp, #28]
 8031722:	e014      	b.n	803174e <_vfiprintf_r+0x13a>
 8031724:	eba0 0308 	sub.w	r3, r0, r8
 8031728:	fa09 f303 	lsl.w	r3, r9, r3
 803172c:	4313      	orrs	r3, r2
 803172e:	9304      	str	r3, [sp, #16]
 8031730:	46a2      	mov	sl, r4
 8031732:	e7d2      	b.n	80316da <_vfiprintf_r+0xc6>
 8031734:	9b03      	ldr	r3, [sp, #12]
 8031736:	1d19      	adds	r1, r3, #4
 8031738:	681b      	ldr	r3, [r3, #0]
 803173a:	9103      	str	r1, [sp, #12]
 803173c:	2b00      	cmp	r3, #0
 803173e:	bfbb      	ittet	lt
 8031740:	425b      	neglt	r3, r3
 8031742:	f042 0202 	orrlt.w	r2, r2, #2
 8031746:	9307      	strge	r3, [sp, #28]
 8031748:	9307      	strlt	r3, [sp, #28]
 803174a:	bfb8      	it	lt
 803174c:	9204      	strlt	r2, [sp, #16]
 803174e:	7823      	ldrb	r3, [r4, #0]
 8031750:	2b2e      	cmp	r3, #46	; 0x2e
 8031752:	d10c      	bne.n	803176e <_vfiprintf_r+0x15a>
 8031754:	7863      	ldrb	r3, [r4, #1]
 8031756:	2b2a      	cmp	r3, #42	; 0x2a
 8031758:	d134      	bne.n	80317c4 <_vfiprintf_r+0x1b0>
 803175a:	9b03      	ldr	r3, [sp, #12]
 803175c:	1d1a      	adds	r2, r3, #4
 803175e:	681b      	ldr	r3, [r3, #0]
 8031760:	9203      	str	r2, [sp, #12]
 8031762:	2b00      	cmp	r3, #0
 8031764:	bfb8      	it	lt
 8031766:	f04f 33ff 	movlt.w	r3, #4294967295
 803176a:	3402      	adds	r4, #2
 803176c:	9305      	str	r3, [sp, #20]
 803176e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8031844 <_vfiprintf_r+0x230>
 8031772:	7821      	ldrb	r1, [r4, #0]
 8031774:	2203      	movs	r2, #3
 8031776:	4650      	mov	r0, sl
 8031778:	f7f0 fd2a 	bl	80221d0 <memchr>
 803177c:	b138      	cbz	r0, 803178e <_vfiprintf_r+0x17a>
 803177e:	9b04      	ldr	r3, [sp, #16]
 8031780:	eba0 000a 	sub.w	r0, r0, sl
 8031784:	2240      	movs	r2, #64	; 0x40
 8031786:	4082      	lsls	r2, r0
 8031788:	4313      	orrs	r3, r2
 803178a:	3401      	adds	r4, #1
 803178c:	9304      	str	r3, [sp, #16]
 803178e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031792:	4829      	ldr	r0, [pc, #164]	; (8031838 <_vfiprintf_r+0x224>)
 8031794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031798:	2206      	movs	r2, #6
 803179a:	f7f0 fd19 	bl	80221d0 <memchr>
 803179e:	2800      	cmp	r0, #0
 80317a0:	d03f      	beq.n	8031822 <_vfiprintf_r+0x20e>
 80317a2:	4b26      	ldr	r3, [pc, #152]	; (803183c <_vfiprintf_r+0x228>)
 80317a4:	bb1b      	cbnz	r3, 80317ee <_vfiprintf_r+0x1da>
 80317a6:	9b03      	ldr	r3, [sp, #12]
 80317a8:	3307      	adds	r3, #7
 80317aa:	f023 0307 	bic.w	r3, r3, #7
 80317ae:	3308      	adds	r3, #8
 80317b0:	9303      	str	r3, [sp, #12]
 80317b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80317b4:	443b      	add	r3, r7
 80317b6:	9309      	str	r3, [sp, #36]	; 0x24
 80317b8:	e768      	b.n	803168c <_vfiprintf_r+0x78>
 80317ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80317be:	460c      	mov	r4, r1
 80317c0:	2001      	movs	r0, #1
 80317c2:	e7a6      	b.n	8031712 <_vfiprintf_r+0xfe>
 80317c4:	2300      	movs	r3, #0
 80317c6:	3401      	adds	r4, #1
 80317c8:	9305      	str	r3, [sp, #20]
 80317ca:	4619      	mov	r1, r3
 80317cc:	f04f 0c0a 	mov.w	ip, #10
 80317d0:	4620      	mov	r0, r4
 80317d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80317d6:	3a30      	subs	r2, #48	; 0x30
 80317d8:	2a09      	cmp	r2, #9
 80317da:	d903      	bls.n	80317e4 <_vfiprintf_r+0x1d0>
 80317dc:	2b00      	cmp	r3, #0
 80317de:	d0c6      	beq.n	803176e <_vfiprintf_r+0x15a>
 80317e0:	9105      	str	r1, [sp, #20]
 80317e2:	e7c4      	b.n	803176e <_vfiprintf_r+0x15a>
 80317e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80317e8:	4604      	mov	r4, r0
 80317ea:	2301      	movs	r3, #1
 80317ec:	e7f0      	b.n	80317d0 <_vfiprintf_r+0x1bc>
 80317ee:	ab03      	add	r3, sp, #12
 80317f0:	9300      	str	r3, [sp, #0]
 80317f2:	462a      	mov	r2, r5
 80317f4:	4b12      	ldr	r3, [pc, #72]	; (8031840 <_vfiprintf_r+0x22c>)
 80317f6:	a904      	add	r1, sp, #16
 80317f8:	4630      	mov	r0, r6
 80317fa:	f3af 8000 	nop.w
 80317fe:	4607      	mov	r7, r0
 8031800:	1c78      	adds	r0, r7, #1
 8031802:	d1d6      	bne.n	80317b2 <_vfiprintf_r+0x19e>
 8031804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031806:	07d9      	lsls	r1, r3, #31
 8031808:	d405      	bmi.n	8031816 <_vfiprintf_r+0x202>
 803180a:	89ab      	ldrh	r3, [r5, #12]
 803180c:	059a      	lsls	r2, r3, #22
 803180e:	d402      	bmi.n	8031816 <_vfiprintf_r+0x202>
 8031810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031812:	f7ff fdcd 	bl	80313b0 <__retarget_lock_release_recursive>
 8031816:	89ab      	ldrh	r3, [r5, #12]
 8031818:	065b      	lsls	r3, r3, #25
 803181a:	f53f af1d 	bmi.w	8031658 <_vfiprintf_r+0x44>
 803181e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8031820:	e71c      	b.n	803165c <_vfiprintf_r+0x48>
 8031822:	ab03      	add	r3, sp, #12
 8031824:	9300      	str	r3, [sp, #0]
 8031826:	462a      	mov	r2, r5
 8031828:	4b05      	ldr	r3, [pc, #20]	; (8031840 <_vfiprintf_r+0x22c>)
 803182a:	a904      	add	r1, sp, #16
 803182c:	4630      	mov	r0, r6
 803182e:	f000 f879 	bl	8031924 <_printf_i>
 8031832:	e7e4      	b.n	80317fe <_vfiprintf_r+0x1ea>
 8031834:	08032d3c 	.word	0x08032d3c
 8031838:	08032d46 	.word	0x08032d46
 803183c:	00000000 	.word	0x00000000
 8031840:	080315ef 	.word	0x080315ef
 8031844:	08032d42 	.word	0x08032d42

08031848 <_printf_common>:
 8031848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803184c:	4616      	mov	r6, r2
 803184e:	4699      	mov	r9, r3
 8031850:	688a      	ldr	r2, [r1, #8]
 8031852:	690b      	ldr	r3, [r1, #16]
 8031854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031858:	4293      	cmp	r3, r2
 803185a:	bfb8      	it	lt
 803185c:	4613      	movlt	r3, r2
 803185e:	6033      	str	r3, [r6, #0]
 8031860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031864:	4607      	mov	r7, r0
 8031866:	460c      	mov	r4, r1
 8031868:	b10a      	cbz	r2, 803186e <_printf_common+0x26>
 803186a:	3301      	adds	r3, #1
 803186c:	6033      	str	r3, [r6, #0]
 803186e:	6823      	ldr	r3, [r4, #0]
 8031870:	0699      	lsls	r1, r3, #26
 8031872:	bf42      	ittt	mi
 8031874:	6833      	ldrmi	r3, [r6, #0]
 8031876:	3302      	addmi	r3, #2
 8031878:	6033      	strmi	r3, [r6, #0]
 803187a:	6825      	ldr	r5, [r4, #0]
 803187c:	f015 0506 	ands.w	r5, r5, #6
 8031880:	d106      	bne.n	8031890 <_printf_common+0x48>
 8031882:	f104 0a19 	add.w	sl, r4, #25
 8031886:	68e3      	ldr	r3, [r4, #12]
 8031888:	6832      	ldr	r2, [r6, #0]
 803188a:	1a9b      	subs	r3, r3, r2
 803188c:	42ab      	cmp	r3, r5
 803188e:	dc26      	bgt.n	80318de <_printf_common+0x96>
 8031890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031894:	1e13      	subs	r3, r2, #0
 8031896:	6822      	ldr	r2, [r4, #0]
 8031898:	bf18      	it	ne
 803189a:	2301      	movne	r3, #1
 803189c:	0692      	lsls	r2, r2, #26
 803189e:	d42b      	bmi.n	80318f8 <_printf_common+0xb0>
 80318a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80318a4:	4649      	mov	r1, r9
 80318a6:	4638      	mov	r0, r7
 80318a8:	47c0      	blx	r8
 80318aa:	3001      	adds	r0, #1
 80318ac:	d01e      	beq.n	80318ec <_printf_common+0xa4>
 80318ae:	6823      	ldr	r3, [r4, #0]
 80318b0:	6922      	ldr	r2, [r4, #16]
 80318b2:	f003 0306 	and.w	r3, r3, #6
 80318b6:	2b04      	cmp	r3, #4
 80318b8:	bf02      	ittt	eq
 80318ba:	68e5      	ldreq	r5, [r4, #12]
 80318bc:	6833      	ldreq	r3, [r6, #0]
 80318be:	1aed      	subeq	r5, r5, r3
 80318c0:	68a3      	ldr	r3, [r4, #8]
 80318c2:	bf0c      	ite	eq
 80318c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80318c8:	2500      	movne	r5, #0
 80318ca:	4293      	cmp	r3, r2
 80318cc:	bfc4      	itt	gt
 80318ce:	1a9b      	subgt	r3, r3, r2
 80318d0:	18ed      	addgt	r5, r5, r3
 80318d2:	2600      	movs	r6, #0
 80318d4:	341a      	adds	r4, #26
 80318d6:	42b5      	cmp	r5, r6
 80318d8:	d11a      	bne.n	8031910 <_printf_common+0xc8>
 80318da:	2000      	movs	r0, #0
 80318dc:	e008      	b.n	80318f0 <_printf_common+0xa8>
 80318de:	2301      	movs	r3, #1
 80318e0:	4652      	mov	r2, sl
 80318e2:	4649      	mov	r1, r9
 80318e4:	4638      	mov	r0, r7
 80318e6:	47c0      	blx	r8
 80318e8:	3001      	adds	r0, #1
 80318ea:	d103      	bne.n	80318f4 <_printf_common+0xac>
 80318ec:	f04f 30ff 	mov.w	r0, #4294967295
 80318f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80318f4:	3501      	adds	r5, #1
 80318f6:	e7c6      	b.n	8031886 <_printf_common+0x3e>
 80318f8:	18e1      	adds	r1, r4, r3
 80318fa:	1c5a      	adds	r2, r3, #1
 80318fc:	2030      	movs	r0, #48	; 0x30
 80318fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031902:	4422      	add	r2, r4
 8031904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803190c:	3302      	adds	r3, #2
 803190e:	e7c7      	b.n	80318a0 <_printf_common+0x58>
 8031910:	2301      	movs	r3, #1
 8031912:	4622      	mov	r2, r4
 8031914:	4649      	mov	r1, r9
 8031916:	4638      	mov	r0, r7
 8031918:	47c0      	blx	r8
 803191a:	3001      	adds	r0, #1
 803191c:	d0e6      	beq.n	80318ec <_printf_common+0xa4>
 803191e:	3601      	adds	r6, #1
 8031920:	e7d9      	b.n	80318d6 <_printf_common+0x8e>
	...

08031924 <_printf_i>:
 8031924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031928:	7e0f      	ldrb	r7, [r1, #24]
 803192a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803192c:	2f78      	cmp	r7, #120	; 0x78
 803192e:	4691      	mov	r9, r2
 8031930:	4680      	mov	r8, r0
 8031932:	460c      	mov	r4, r1
 8031934:	469a      	mov	sl, r3
 8031936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803193a:	d807      	bhi.n	803194c <_printf_i+0x28>
 803193c:	2f62      	cmp	r7, #98	; 0x62
 803193e:	d80a      	bhi.n	8031956 <_printf_i+0x32>
 8031940:	2f00      	cmp	r7, #0
 8031942:	f000 80d4 	beq.w	8031aee <_printf_i+0x1ca>
 8031946:	2f58      	cmp	r7, #88	; 0x58
 8031948:	f000 80c0 	beq.w	8031acc <_printf_i+0x1a8>
 803194c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031954:	e03a      	b.n	80319cc <_printf_i+0xa8>
 8031956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803195a:	2b15      	cmp	r3, #21
 803195c:	d8f6      	bhi.n	803194c <_printf_i+0x28>
 803195e:	a101      	add	r1, pc, #4	; (adr r1, 8031964 <_printf_i+0x40>)
 8031960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031964:	080319bd 	.word	0x080319bd
 8031968:	080319d1 	.word	0x080319d1
 803196c:	0803194d 	.word	0x0803194d
 8031970:	0803194d 	.word	0x0803194d
 8031974:	0803194d 	.word	0x0803194d
 8031978:	0803194d 	.word	0x0803194d
 803197c:	080319d1 	.word	0x080319d1
 8031980:	0803194d 	.word	0x0803194d
 8031984:	0803194d 	.word	0x0803194d
 8031988:	0803194d 	.word	0x0803194d
 803198c:	0803194d 	.word	0x0803194d
 8031990:	08031ad5 	.word	0x08031ad5
 8031994:	080319fd 	.word	0x080319fd
 8031998:	08031a8f 	.word	0x08031a8f
 803199c:	0803194d 	.word	0x0803194d
 80319a0:	0803194d 	.word	0x0803194d
 80319a4:	08031af7 	.word	0x08031af7
 80319a8:	0803194d 	.word	0x0803194d
 80319ac:	080319fd 	.word	0x080319fd
 80319b0:	0803194d 	.word	0x0803194d
 80319b4:	0803194d 	.word	0x0803194d
 80319b8:	08031a97 	.word	0x08031a97
 80319bc:	682b      	ldr	r3, [r5, #0]
 80319be:	1d1a      	adds	r2, r3, #4
 80319c0:	681b      	ldr	r3, [r3, #0]
 80319c2:	602a      	str	r2, [r5, #0]
 80319c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80319c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80319cc:	2301      	movs	r3, #1
 80319ce:	e09f      	b.n	8031b10 <_printf_i+0x1ec>
 80319d0:	6820      	ldr	r0, [r4, #0]
 80319d2:	682b      	ldr	r3, [r5, #0]
 80319d4:	0607      	lsls	r7, r0, #24
 80319d6:	f103 0104 	add.w	r1, r3, #4
 80319da:	6029      	str	r1, [r5, #0]
 80319dc:	d501      	bpl.n	80319e2 <_printf_i+0xbe>
 80319de:	681e      	ldr	r6, [r3, #0]
 80319e0:	e003      	b.n	80319ea <_printf_i+0xc6>
 80319e2:	0646      	lsls	r6, r0, #25
 80319e4:	d5fb      	bpl.n	80319de <_printf_i+0xba>
 80319e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80319ea:	2e00      	cmp	r6, #0
 80319ec:	da03      	bge.n	80319f6 <_printf_i+0xd2>
 80319ee:	232d      	movs	r3, #45	; 0x2d
 80319f0:	4276      	negs	r6, r6
 80319f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80319f6:	485a      	ldr	r0, [pc, #360]	; (8031b60 <_printf_i+0x23c>)
 80319f8:	230a      	movs	r3, #10
 80319fa:	e012      	b.n	8031a22 <_printf_i+0xfe>
 80319fc:	682b      	ldr	r3, [r5, #0]
 80319fe:	6820      	ldr	r0, [r4, #0]
 8031a00:	1d19      	adds	r1, r3, #4
 8031a02:	6029      	str	r1, [r5, #0]
 8031a04:	0605      	lsls	r5, r0, #24
 8031a06:	d501      	bpl.n	8031a0c <_printf_i+0xe8>
 8031a08:	681e      	ldr	r6, [r3, #0]
 8031a0a:	e002      	b.n	8031a12 <_printf_i+0xee>
 8031a0c:	0641      	lsls	r1, r0, #25
 8031a0e:	d5fb      	bpl.n	8031a08 <_printf_i+0xe4>
 8031a10:	881e      	ldrh	r6, [r3, #0]
 8031a12:	4853      	ldr	r0, [pc, #332]	; (8031b60 <_printf_i+0x23c>)
 8031a14:	2f6f      	cmp	r7, #111	; 0x6f
 8031a16:	bf0c      	ite	eq
 8031a18:	2308      	moveq	r3, #8
 8031a1a:	230a      	movne	r3, #10
 8031a1c:	2100      	movs	r1, #0
 8031a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8031a22:	6865      	ldr	r5, [r4, #4]
 8031a24:	60a5      	str	r5, [r4, #8]
 8031a26:	2d00      	cmp	r5, #0
 8031a28:	bfa2      	ittt	ge
 8031a2a:	6821      	ldrge	r1, [r4, #0]
 8031a2c:	f021 0104 	bicge.w	r1, r1, #4
 8031a30:	6021      	strge	r1, [r4, #0]
 8031a32:	b90e      	cbnz	r6, 8031a38 <_printf_i+0x114>
 8031a34:	2d00      	cmp	r5, #0
 8031a36:	d04b      	beq.n	8031ad0 <_printf_i+0x1ac>
 8031a38:	4615      	mov	r5, r2
 8031a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8031a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8031a42:	5dc7      	ldrb	r7, [r0, r7]
 8031a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8031a48:	4637      	mov	r7, r6
 8031a4a:	42bb      	cmp	r3, r7
 8031a4c:	460e      	mov	r6, r1
 8031a4e:	d9f4      	bls.n	8031a3a <_printf_i+0x116>
 8031a50:	2b08      	cmp	r3, #8
 8031a52:	d10b      	bne.n	8031a6c <_printf_i+0x148>
 8031a54:	6823      	ldr	r3, [r4, #0]
 8031a56:	07de      	lsls	r6, r3, #31
 8031a58:	d508      	bpl.n	8031a6c <_printf_i+0x148>
 8031a5a:	6923      	ldr	r3, [r4, #16]
 8031a5c:	6861      	ldr	r1, [r4, #4]
 8031a5e:	4299      	cmp	r1, r3
 8031a60:	bfde      	ittt	le
 8031a62:	2330      	movle	r3, #48	; 0x30
 8031a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8031a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8031a6c:	1b52      	subs	r2, r2, r5
 8031a6e:	6122      	str	r2, [r4, #16]
 8031a70:	f8cd a000 	str.w	sl, [sp]
 8031a74:	464b      	mov	r3, r9
 8031a76:	aa03      	add	r2, sp, #12
 8031a78:	4621      	mov	r1, r4
 8031a7a:	4640      	mov	r0, r8
 8031a7c:	f7ff fee4 	bl	8031848 <_printf_common>
 8031a80:	3001      	adds	r0, #1
 8031a82:	d14a      	bne.n	8031b1a <_printf_i+0x1f6>
 8031a84:	f04f 30ff 	mov.w	r0, #4294967295
 8031a88:	b004      	add	sp, #16
 8031a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031a8e:	6823      	ldr	r3, [r4, #0]
 8031a90:	f043 0320 	orr.w	r3, r3, #32
 8031a94:	6023      	str	r3, [r4, #0]
 8031a96:	4833      	ldr	r0, [pc, #204]	; (8031b64 <_printf_i+0x240>)
 8031a98:	2778      	movs	r7, #120	; 0x78
 8031a9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8031a9e:	6823      	ldr	r3, [r4, #0]
 8031aa0:	6829      	ldr	r1, [r5, #0]
 8031aa2:	061f      	lsls	r7, r3, #24
 8031aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8031aa8:	d402      	bmi.n	8031ab0 <_printf_i+0x18c>
 8031aaa:	065f      	lsls	r7, r3, #25
 8031aac:	bf48      	it	mi
 8031aae:	b2b6      	uxthmi	r6, r6
 8031ab0:	07df      	lsls	r7, r3, #31
 8031ab2:	bf48      	it	mi
 8031ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8031ab8:	6029      	str	r1, [r5, #0]
 8031aba:	bf48      	it	mi
 8031abc:	6023      	strmi	r3, [r4, #0]
 8031abe:	b91e      	cbnz	r6, 8031ac8 <_printf_i+0x1a4>
 8031ac0:	6823      	ldr	r3, [r4, #0]
 8031ac2:	f023 0320 	bic.w	r3, r3, #32
 8031ac6:	6023      	str	r3, [r4, #0]
 8031ac8:	2310      	movs	r3, #16
 8031aca:	e7a7      	b.n	8031a1c <_printf_i+0xf8>
 8031acc:	4824      	ldr	r0, [pc, #144]	; (8031b60 <_printf_i+0x23c>)
 8031ace:	e7e4      	b.n	8031a9a <_printf_i+0x176>
 8031ad0:	4615      	mov	r5, r2
 8031ad2:	e7bd      	b.n	8031a50 <_printf_i+0x12c>
 8031ad4:	682b      	ldr	r3, [r5, #0]
 8031ad6:	6826      	ldr	r6, [r4, #0]
 8031ad8:	6961      	ldr	r1, [r4, #20]
 8031ada:	1d18      	adds	r0, r3, #4
 8031adc:	6028      	str	r0, [r5, #0]
 8031ade:	0635      	lsls	r5, r6, #24
 8031ae0:	681b      	ldr	r3, [r3, #0]
 8031ae2:	d501      	bpl.n	8031ae8 <_printf_i+0x1c4>
 8031ae4:	6019      	str	r1, [r3, #0]
 8031ae6:	e002      	b.n	8031aee <_printf_i+0x1ca>
 8031ae8:	0670      	lsls	r0, r6, #25
 8031aea:	d5fb      	bpl.n	8031ae4 <_printf_i+0x1c0>
 8031aec:	8019      	strh	r1, [r3, #0]
 8031aee:	2300      	movs	r3, #0
 8031af0:	6123      	str	r3, [r4, #16]
 8031af2:	4615      	mov	r5, r2
 8031af4:	e7bc      	b.n	8031a70 <_printf_i+0x14c>
 8031af6:	682b      	ldr	r3, [r5, #0]
 8031af8:	1d1a      	adds	r2, r3, #4
 8031afa:	602a      	str	r2, [r5, #0]
 8031afc:	681d      	ldr	r5, [r3, #0]
 8031afe:	6862      	ldr	r2, [r4, #4]
 8031b00:	2100      	movs	r1, #0
 8031b02:	4628      	mov	r0, r5
 8031b04:	f7f0 fb64 	bl	80221d0 <memchr>
 8031b08:	b108      	cbz	r0, 8031b0e <_printf_i+0x1ea>
 8031b0a:	1b40      	subs	r0, r0, r5
 8031b0c:	6060      	str	r0, [r4, #4]
 8031b0e:	6863      	ldr	r3, [r4, #4]
 8031b10:	6123      	str	r3, [r4, #16]
 8031b12:	2300      	movs	r3, #0
 8031b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8031b18:	e7aa      	b.n	8031a70 <_printf_i+0x14c>
 8031b1a:	6923      	ldr	r3, [r4, #16]
 8031b1c:	462a      	mov	r2, r5
 8031b1e:	4649      	mov	r1, r9
 8031b20:	4640      	mov	r0, r8
 8031b22:	47d0      	blx	sl
 8031b24:	3001      	adds	r0, #1
 8031b26:	d0ad      	beq.n	8031a84 <_printf_i+0x160>
 8031b28:	6823      	ldr	r3, [r4, #0]
 8031b2a:	079b      	lsls	r3, r3, #30
 8031b2c:	d413      	bmi.n	8031b56 <_printf_i+0x232>
 8031b2e:	68e0      	ldr	r0, [r4, #12]
 8031b30:	9b03      	ldr	r3, [sp, #12]
 8031b32:	4298      	cmp	r0, r3
 8031b34:	bfb8      	it	lt
 8031b36:	4618      	movlt	r0, r3
 8031b38:	e7a6      	b.n	8031a88 <_printf_i+0x164>
 8031b3a:	2301      	movs	r3, #1
 8031b3c:	4632      	mov	r2, r6
 8031b3e:	4649      	mov	r1, r9
 8031b40:	4640      	mov	r0, r8
 8031b42:	47d0      	blx	sl
 8031b44:	3001      	adds	r0, #1
 8031b46:	d09d      	beq.n	8031a84 <_printf_i+0x160>
 8031b48:	3501      	adds	r5, #1
 8031b4a:	68e3      	ldr	r3, [r4, #12]
 8031b4c:	9903      	ldr	r1, [sp, #12]
 8031b4e:	1a5b      	subs	r3, r3, r1
 8031b50:	42ab      	cmp	r3, r5
 8031b52:	dcf2      	bgt.n	8031b3a <_printf_i+0x216>
 8031b54:	e7eb      	b.n	8031b2e <_printf_i+0x20a>
 8031b56:	2500      	movs	r5, #0
 8031b58:	f104 0619 	add.w	r6, r4, #25
 8031b5c:	e7f5      	b.n	8031b4a <_printf_i+0x226>
 8031b5e:	bf00      	nop
 8031b60:	08032d4d 	.word	0x08032d4d
 8031b64:	08032d5e 	.word	0x08032d5e

08031b68 <__sflush_r>:
 8031b68:	898a      	ldrh	r2, [r1, #12]
 8031b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031b6e:	4605      	mov	r5, r0
 8031b70:	0710      	lsls	r0, r2, #28
 8031b72:	460c      	mov	r4, r1
 8031b74:	d458      	bmi.n	8031c28 <__sflush_r+0xc0>
 8031b76:	684b      	ldr	r3, [r1, #4]
 8031b78:	2b00      	cmp	r3, #0
 8031b7a:	dc05      	bgt.n	8031b88 <__sflush_r+0x20>
 8031b7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8031b7e:	2b00      	cmp	r3, #0
 8031b80:	dc02      	bgt.n	8031b88 <__sflush_r+0x20>
 8031b82:	2000      	movs	r0, #0
 8031b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031b8a:	2e00      	cmp	r6, #0
 8031b8c:	d0f9      	beq.n	8031b82 <__sflush_r+0x1a>
 8031b8e:	2300      	movs	r3, #0
 8031b90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8031b94:	682f      	ldr	r7, [r5, #0]
 8031b96:	6a21      	ldr	r1, [r4, #32]
 8031b98:	602b      	str	r3, [r5, #0]
 8031b9a:	d032      	beq.n	8031c02 <__sflush_r+0x9a>
 8031b9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8031b9e:	89a3      	ldrh	r3, [r4, #12]
 8031ba0:	075a      	lsls	r2, r3, #29
 8031ba2:	d505      	bpl.n	8031bb0 <__sflush_r+0x48>
 8031ba4:	6863      	ldr	r3, [r4, #4]
 8031ba6:	1ac0      	subs	r0, r0, r3
 8031ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8031baa:	b10b      	cbz	r3, 8031bb0 <__sflush_r+0x48>
 8031bac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8031bae:	1ac0      	subs	r0, r0, r3
 8031bb0:	2300      	movs	r3, #0
 8031bb2:	4602      	mov	r2, r0
 8031bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8031bb6:	6a21      	ldr	r1, [r4, #32]
 8031bb8:	4628      	mov	r0, r5
 8031bba:	47b0      	blx	r6
 8031bbc:	1c43      	adds	r3, r0, #1
 8031bbe:	89a3      	ldrh	r3, [r4, #12]
 8031bc0:	d106      	bne.n	8031bd0 <__sflush_r+0x68>
 8031bc2:	6829      	ldr	r1, [r5, #0]
 8031bc4:	291d      	cmp	r1, #29
 8031bc6:	d82b      	bhi.n	8031c20 <__sflush_r+0xb8>
 8031bc8:	4a29      	ldr	r2, [pc, #164]	; (8031c70 <__sflush_r+0x108>)
 8031bca:	410a      	asrs	r2, r1
 8031bcc:	07d6      	lsls	r6, r2, #31
 8031bce:	d427      	bmi.n	8031c20 <__sflush_r+0xb8>
 8031bd0:	2200      	movs	r2, #0
 8031bd2:	6062      	str	r2, [r4, #4]
 8031bd4:	04d9      	lsls	r1, r3, #19
 8031bd6:	6922      	ldr	r2, [r4, #16]
 8031bd8:	6022      	str	r2, [r4, #0]
 8031bda:	d504      	bpl.n	8031be6 <__sflush_r+0x7e>
 8031bdc:	1c42      	adds	r2, r0, #1
 8031bde:	d101      	bne.n	8031be4 <__sflush_r+0x7c>
 8031be0:	682b      	ldr	r3, [r5, #0]
 8031be2:	b903      	cbnz	r3, 8031be6 <__sflush_r+0x7e>
 8031be4:	6560      	str	r0, [r4, #84]	; 0x54
 8031be6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8031be8:	602f      	str	r7, [r5, #0]
 8031bea:	2900      	cmp	r1, #0
 8031bec:	d0c9      	beq.n	8031b82 <__sflush_r+0x1a>
 8031bee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8031bf2:	4299      	cmp	r1, r3
 8031bf4:	d002      	beq.n	8031bfc <__sflush_r+0x94>
 8031bf6:	4628      	mov	r0, r5
 8031bf8:	f7ff fbea 	bl	80313d0 <_free_r>
 8031bfc:	2000      	movs	r0, #0
 8031bfe:	6360      	str	r0, [r4, #52]	; 0x34
 8031c00:	e7c0      	b.n	8031b84 <__sflush_r+0x1c>
 8031c02:	2301      	movs	r3, #1
 8031c04:	4628      	mov	r0, r5
 8031c06:	47b0      	blx	r6
 8031c08:	1c41      	adds	r1, r0, #1
 8031c0a:	d1c8      	bne.n	8031b9e <__sflush_r+0x36>
 8031c0c:	682b      	ldr	r3, [r5, #0]
 8031c0e:	2b00      	cmp	r3, #0
 8031c10:	d0c5      	beq.n	8031b9e <__sflush_r+0x36>
 8031c12:	2b1d      	cmp	r3, #29
 8031c14:	d001      	beq.n	8031c1a <__sflush_r+0xb2>
 8031c16:	2b16      	cmp	r3, #22
 8031c18:	d101      	bne.n	8031c1e <__sflush_r+0xb6>
 8031c1a:	602f      	str	r7, [r5, #0]
 8031c1c:	e7b1      	b.n	8031b82 <__sflush_r+0x1a>
 8031c1e:	89a3      	ldrh	r3, [r4, #12]
 8031c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031c24:	81a3      	strh	r3, [r4, #12]
 8031c26:	e7ad      	b.n	8031b84 <__sflush_r+0x1c>
 8031c28:	690f      	ldr	r7, [r1, #16]
 8031c2a:	2f00      	cmp	r7, #0
 8031c2c:	d0a9      	beq.n	8031b82 <__sflush_r+0x1a>
 8031c2e:	0793      	lsls	r3, r2, #30
 8031c30:	680e      	ldr	r6, [r1, #0]
 8031c32:	bf08      	it	eq
 8031c34:	694b      	ldreq	r3, [r1, #20]
 8031c36:	600f      	str	r7, [r1, #0]
 8031c38:	bf18      	it	ne
 8031c3a:	2300      	movne	r3, #0
 8031c3c:	eba6 0807 	sub.w	r8, r6, r7
 8031c40:	608b      	str	r3, [r1, #8]
 8031c42:	f1b8 0f00 	cmp.w	r8, #0
 8031c46:	dd9c      	ble.n	8031b82 <__sflush_r+0x1a>
 8031c48:	6a21      	ldr	r1, [r4, #32]
 8031c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8031c4c:	4643      	mov	r3, r8
 8031c4e:	463a      	mov	r2, r7
 8031c50:	4628      	mov	r0, r5
 8031c52:	47b0      	blx	r6
 8031c54:	2800      	cmp	r0, #0
 8031c56:	dc06      	bgt.n	8031c66 <__sflush_r+0xfe>
 8031c58:	89a3      	ldrh	r3, [r4, #12]
 8031c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8031c5e:	81a3      	strh	r3, [r4, #12]
 8031c60:	f04f 30ff 	mov.w	r0, #4294967295
 8031c64:	e78e      	b.n	8031b84 <__sflush_r+0x1c>
 8031c66:	4407      	add	r7, r0
 8031c68:	eba8 0800 	sub.w	r8, r8, r0
 8031c6c:	e7e9      	b.n	8031c42 <__sflush_r+0xda>
 8031c6e:	bf00      	nop
 8031c70:	dfbffffe 	.word	0xdfbffffe

08031c74 <_fflush_r>:
 8031c74:	b538      	push	{r3, r4, r5, lr}
 8031c76:	690b      	ldr	r3, [r1, #16]
 8031c78:	4605      	mov	r5, r0
 8031c7a:	460c      	mov	r4, r1
 8031c7c:	b913      	cbnz	r3, 8031c84 <_fflush_r+0x10>
 8031c7e:	2500      	movs	r5, #0
 8031c80:	4628      	mov	r0, r5
 8031c82:	bd38      	pop	{r3, r4, r5, pc}
 8031c84:	b118      	cbz	r0, 8031c8e <_fflush_r+0x1a>
 8031c86:	6a03      	ldr	r3, [r0, #32]
 8031c88:	b90b      	cbnz	r3, 8031c8e <_fflush_r+0x1a>
 8031c8a:	f7ff f99b 	bl	8030fc4 <__sinit>
 8031c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031c92:	2b00      	cmp	r3, #0
 8031c94:	d0f3      	beq.n	8031c7e <_fflush_r+0xa>
 8031c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8031c98:	07d0      	lsls	r0, r2, #31
 8031c9a:	d404      	bmi.n	8031ca6 <_fflush_r+0x32>
 8031c9c:	0599      	lsls	r1, r3, #22
 8031c9e:	d402      	bmi.n	8031ca6 <_fflush_r+0x32>
 8031ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031ca2:	f7ff fb84 	bl	80313ae <__retarget_lock_acquire_recursive>
 8031ca6:	4628      	mov	r0, r5
 8031ca8:	4621      	mov	r1, r4
 8031caa:	f7ff ff5d 	bl	8031b68 <__sflush_r>
 8031cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031cb0:	07da      	lsls	r2, r3, #31
 8031cb2:	4605      	mov	r5, r0
 8031cb4:	d4e4      	bmi.n	8031c80 <_fflush_r+0xc>
 8031cb6:	89a3      	ldrh	r3, [r4, #12]
 8031cb8:	059b      	lsls	r3, r3, #22
 8031cba:	d4e1      	bmi.n	8031c80 <_fflush_r+0xc>
 8031cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031cbe:	f7ff fb77 	bl	80313b0 <__retarget_lock_release_recursive>
 8031cc2:	e7dd      	b.n	8031c80 <_fflush_r+0xc>

08031cc4 <__swhatbuf_r>:
 8031cc4:	b570      	push	{r4, r5, r6, lr}
 8031cc6:	460c      	mov	r4, r1
 8031cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031ccc:	2900      	cmp	r1, #0
 8031cce:	b096      	sub	sp, #88	; 0x58
 8031cd0:	4615      	mov	r5, r2
 8031cd2:	461e      	mov	r6, r3
 8031cd4:	da0d      	bge.n	8031cf2 <__swhatbuf_r+0x2e>
 8031cd6:	89a3      	ldrh	r3, [r4, #12]
 8031cd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8031cdc:	f04f 0100 	mov.w	r1, #0
 8031ce0:	bf0c      	ite	eq
 8031ce2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8031ce6:	2340      	movne	r3, #64	; 0x40
 8031ce8:	2000      	movs	r0, #0
 8031cea:	6031      	str	r1, [r6, #0]
 8031cec:	602b      	str	r3, [r5, #0]
 8031cee:	b016      	add	sp, #88	; 0x58
 8031cf0:	bd70      	pop	{r4, r5, r6, pc}
 8031cf2:	466a      	mov	r2, sp
 8031cf4:	f000 f848 	bl	8031d88 <_fstat_r>
 8031cf8:	2800      	cmp	r0, #0
 8031cfa:	dbec      	blt.n	8031cd6 <__swhatbuf_r+0x12>
 8031cfc:	9901      	ldr	r1, [sp, #4]
 8031cfe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8031d02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8031d06:	4259      	negs	r1, r3
 8031d08:	4159      	adcs	r1, r3
 8031d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8031d0e:	e7eb      	b.n	8031ce8 <__swhatbuf_r+0x24>

08031d10 <__smakebuf_r>:
 8031d10:	898b      	ldrh	r3, [r1, #12]
 8031d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8031d14:	079d      	lsls	r5, r3, #30
 8031d16:	4606      	mov	r6, r0
 8031d18:	460c      	mov	r4, r1
 8031d1a:	d507      	bpl.n	8031d2c <__smakebuf_r+0x1c>
 8031d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8031d20:	6023      	str	r3, [r4, #0]
 8031d22:	6123      	str	r3, [r4, #16]
 8031d24:	2301      	movs	r3, #1
 8031d26:	6163      	str	r3, [r4, #20]
 8031d28:	b002      	add	sp, #8
 8031d2a:	bd70      	pop	{r4, r5, r6, pc}
 8031d2c:	ab01      	add	r3, sp, #4
 8031d2e:	466a      	mov	r2, sp
 8031d30:	f7ff ffc8 	bl	8031cc4 <__swhatbuf_r>
 8031d34:	9900      	ldr	r1, [sp, #0]
 8031d36:	4605      	mov	r5, r0
 8031d38:	4630      	mov	r0, r6
 8031d3a:	f7ff fbb5 	bl	80314a8 <_malloc_r>
 8031d3e:	b948      	cbnz	r0, 8031d54 <__smakebuf_r+0x44>
 8031d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031d44:	059a      	lsls	r2, r3, #22
 8031d46:	d4ef      	bmi.n	8031d28 <__smakebuf_r+0x18>
 8031d48:	f023 0303 	bic.w	r3, r3, #3
 8031d4c:	f043 0302 	orr.w	r3, r3, #2
 8031d50:	81a3      	strh	r3, [r4, #12]
 8031d52:	e7e3      	b.n	8031d1c <__smakebuf_r+0xc>
 8031d54:	89a3      	ldrh	r3, [r4, #12]
 8031d56:	6020      	str	r0, [r4, #0]
 8031d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031d5c:	81a3      	strh	r3, [r4, #12]
 8031d5e:	9b00      	ldr	r3, [sp, #0]
 8031d60:	6163      	str	r3, [r4, #20]
 8031d62:	9b01      	ldr	r3, [sp, #4]
 8031d64:	6120      	str	r0, [r4, #16]
 8031d66:	b15b      	cbz	r3, 8031d80 <__smakebuf_r+0x70>
 8031d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031d6c:	4630      	mov	r0, r6
 8031d6e:	f000 f81d 	bl	8031dac <_isatty_r>
 8031d72:	b128      	cbz	r0, 8031d80 <__smakebuf_r+0x70>
 8031d74:	89a3      	ldrh	r3, [r4, #12]
 8031d76:	f023 0303 	bic.w	r3, r3, #3
 8031d7a:	f043 0301 	orr.w	r3, r3, #1
 8031d7e:	81a3      	strh	r3, [r4, #12]
 8031d80:	89a3      	ldrh	r3, [r4, #12]
 8031d82:	431d      	orrs	r5, r3
 8031d84:	81a5      	strh	r5, [r4, #12]
 8031d86:	e7cf      	b.n	8031d28 <__smakebuf_r+0x18>

08031d88 <_fstat_r>:
 8031d88:	b538      	push	{r3, r4, r5, lr}
 8031d8a:	4d07      	ldr	r5, [pc, #28]	; (8031da8 <_fstat_r+0x20>)
 8031d8c:	2300      	movs	r3, #0
 8031d8e:	4604      	mov	r4, r0
 8031d90:	4608      	mov	r0, r1
 8031d92:	4611      	mov	r1, r2
 8031d94:	602b      	str	r3, [r5, #0]
 8031d96:	f7f5 fadf 	bl	8027358 <_fstat>
 8031d9a:	1c43      	adds	r3, r0, #1
 8031d9c:	d102      	bne.n	8031da4 <_fstat_r+0x1c>
 8031d9e:	682b      	ldr	r3, [r5, #0]
 8031da0:	b103      	cbz	r3, 8031da4 <_fstat_r+0x1c>
 8031da2:	6023      	str	r3, [r4, #0]
 8031da4:	bd38      	pop	{r3, r4, r5, pc}
 8031da6:	bf00      	nop
 8031da8:	2000874c 	.word	0x2000874c

08031dac <_isatty_r>:
 8031dac:	b538      	push	{r3, r4, r5, lr}
 8031dae:	4d06      	ldr	r5, [pc, #24]	; (8031dc8 <_isatty_r+0x1c>)
 8031db0:	2300      	movs	r3, #0
 8031db2:	4604      	mov	r4, r0
 8031db4:	4608      	mov	r0, r1
 8031db6:	602b      	str	r3, [r5, #0]
 8031db8:	f7f5 fade 	bl	8027378 <_isatty>
 8031dbc:	1c43      	adds	r3, r0, #1
 8031dbe:	d102      	bne.n	8031dc6 <_isatty_r+0x1a>
 8031dc0:	682b      	ldr	r3, [r5, #0]
 8031dc2:	b103      	cbz	r3, 8031dc6 <_isatty_r+0x1a>
 8031dc4:	6023      	str	r3, [r4, #0]
 8031dc6:	bd38      	pop	{r3, r4, r5, pc}
 8031dc8:	2000874c 	.word	0x2000874c

08031dcc <_sbrk_r>:
 8031dcc:	b538      	push	{r3, r4, r5, lr}
 8031dce:	4d06      	ldr	r5, [pc, #24]	; (8031de8 <_sbrk_r+0x1c>)
 8031dd0:	2300      	movs	r3, #0
 8031dd2:	4604      	mov	r4, r0
 8031dd4:	4608      	mov	r0, r1
 8031dd6:	602b      	str	r3, [r5, #0]
 8031dd8:	f7f5 fae6 	bl	80273a8 <_sbrk>
 8031ddc:	1c43      	adds	r3, r0, #1
 8031dde:	d102      	bne.n	8031de6 <_sbrk_r+0x1a>
 8031de0:	682b      	ldr	r3, [r5, #0]
 8031de2:	b103      	cbz	r3, 8031de6 <_sbrk_r+0x1a>
 8031de4:	6023      	str	r3, [r4, #0]
 8031de6:	bd38      	pop	{r3, r4, r5, pc}
 8031de8:	2000874c 	.word	0x2000874c

08031dec <_init>:
 8031dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031dee:	bf00      	nop
 8031df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031df2:	bc08      	pop	{r3}
 8031df4:	469e      	mov	lr, r3
 8031df6:	4770      	bx	lr

08031df8 <_fini>:
 8031df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031dfa:	bf00      	nop
 8031dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031dfe:	bc08      	pop	{r3}
 8031e00:	469e      	mov	lr, r3
 8031e02:	4770      	bx	lr
