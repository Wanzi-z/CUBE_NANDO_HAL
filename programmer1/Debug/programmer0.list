
programmer0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08022000  08022000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f4  08022190  08022190  00002190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  08032484  08032484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033388  08033388  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  08033388  08033388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033390  08033390  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033390  08033390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033394  08033394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08033398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d4  2**0
                  CONTENTS
 10 .bss          00008484  200002d8  200002d8  000202d8  2**3
                  ALLOC
 11 ._user_heap_stack 00001804  2000875c  2000875c  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY
 14 .debug_info   00021cec  00000000  00000000  00020347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006519  00000000  00000000  00042033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001bc8  00000000  00000000  00048550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014da  00000000  00000000  0004a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029840  00000000  00000000  0004b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000287a2  00000000  00000000  00074e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8075  00000000  00000000  0009d5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000075ec  00000000  00000000  0017564c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0017cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08022190 <__do_global_dtors_aux>:
 8022190:	b510      	push	{r4, lr}
 8022192:	4c05      	ldr	r4, [pc, #20]	; (80221a8 <__do_global_dtors_aux+0x18>)
 8022194:	7823      	ldrb	r3, [r4, #0]
 8022196:	b933      	cbnz	r3, 80221a6 <__do_global_dtors_aux+0x16>
 8022198:	4b04      	ldr	r3, [pc, #16]	; (80221ac <__do_global_dtors_aux+0x1c>)
 802219a:	b113      	cbz	r3, 80221a2 <__do_global_dtors_aux+0x12>
 802219c:	4804      	ldr	r0, [pc, #16]	; (80221b0 <__do_global_dtors_aux+0x20>)
 802219e:	f3af 8000 	nop.w
 80221a2:	2301      	movs	r3, #1
 80221a4:	7023      	strb	r3, [r4, #0]
 80221a6:	bd10      	pop	{r4, pc}
 80221a8:	200002d8 	.word	0x200002d8
 80221ac:	00000000 	.word	0x00000000
 80221b0:	0803246c 	.word	0x0803246c

080221b4 <frame_dummy>:
 80221b4:	b508      	push	{r3, lr}
 80221b6:	4b03      	ldr	r3, [pc, #12]	; (80221c4 <frame_dummy+0x10>)
 80221b8:	b11b      	cbz	r3, 80221c2 <frame_dummy+0xe>
 80221ba:	4903      	ldr	r1, [pc, #12]	; (80221c8 <frame_dummy+0x14>)
 80221bc:	4803      	ldr	r0, [pc, #12]	; (80221cc <frame_dummy+0x18>)
 80221be:	f3af 8000 	nop.w
 80221c2:	bd08      	pop	{r3, pc}
 80221c4:	00000000 	.word	0x00000000
 80221c8:	200002dc 	.word	0x200002dc
 80221cc:	0803246c 	.word	0x0803246c

080221d0 <memchr>:
 80221d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80221d4:	2a10      	cmp	r2, #16
 80221d6:	db2b      	blt.n	8022230 <memchr+0x60>
 80221d8:	f010 0f07 	tst.w	r0, #7
 80221dc:	d008      	beq.n	80221f0 <memchr+0x20>
 80221de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80221e2:	3a01      	subs	r2, #1
 80221e4:	428b      	cmp	r3, r1
 80221e6:	d02d      	beq.n	8022244 <memchr+0x74>
 80221e8:	f010 0f07 	tst.w	r0, #7
 80221ec:	b342      	cbz	r2, 8022240 <memchr+0x70>
 80221ee:	d1f6      	bne.n	80221de <memchr+0xe>
 80221f0:	b4f0      	push	{r4, r5, r6, r7}
 80221f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80221f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80221fa:	f022 0407 	bic.w	r4, r2, #7
 80221fe:	f07f 0700 	mvns.w	r7, #0
 8022202:	2300      	movs	r3, #0
 8022204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8022208:	3c08      	subs	r4, #8
 802220a:	ea85 0501 	eor.w	r5, r5, r1
 802220e:	ea86 0601 	eor.w	r6, r6, r1
 8022212:	fa85 f547 	uadd8	r5, r5, r7
 8022216:	faa3 f587 	sel	r5, r3, r7
 802221a:	fa86 f647 	uadd8	r6, r6, r7
 802221e:	faa5 f687 	sel	r6, r5, r7
 8022222:	b98e      	cbnz	r6, 8022248 <memchr+0x78>
 8022224:	d1ee      	bne.n	8022204 <memchr+0x34>
 8022226:	bcf0      	pop	{r4, r5, r6, r7}
 8022228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802222c:	f002 0207 	and.w	r2, r2, #7
 8022230:	b132      	cbz	r2, 8022240 <memchr+0x70>
 8022232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022236:	3a01      	subs	r2, #1
 8022238:	ea83 0301 	eor.w	r3, r3, r1
 802223c:	b113      	cbz	r3, 8022244 <memchr+0x74>
 802223e:	d1f8      	bne.n	8022232 <memchr+0x62>
 8022240:	2000      	movs	r0, #0
 8022242:	4770      	bx	lr
 8022244:	3801      	subs	r0, #1
 8022246:	4770      	bx	lr
 8022248:	2d00      	cmp	r5, #0
 802224a:	bf06      	itte	eq
 802224c:	4635      	moveq	r5, r6
 802224e:	3803      	subeq	r0, #3
 8022250:	3807      	subne	r0, #7
 8022252:	f015 0f01 	tst.w	r5, #1
 8022256:	d107      	bne.n	8022268 <memchr+0x98>
 8022258:	3001      	adds	r0, #1
 802225a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802225e:	bf02      	ittt	eq
 8022260:	3001      	addeq	r0, #1
 8022262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8022266:	3001      	addeq	r0, #1
 8022268:	bcf0      	pop	{r4, r5, r6, r7}
 802226a:	3801      	subs	r0, #1
 802226c:	4770      	bx	lr
 802226e:	bf00      	nop

08022270 <__aeabi_uldivmod>:
 8022270:	b953      	cbnz	r3, 8022288 <__aeabi_uldivmod+0x18>
 8022272:	b94a      	cbnz	r2, 8022288 <__aeabi_uldivmod+0x18>
 8022274:	2900      	cmp	r1, #0
 8022276:	bf08      	it	eq
 8022278:	2800      	cmpeq	r0, #0
 802227a:	bf1c      	itt	ne
 802227c:	f04f 31ff 	movne.w	r1, #4294967295
 8022280:	f04f 30ff 	movne.w	r0, #4294967295
 8022284:	f000 b970 	b.w	8022568 <__aeabi_idiv0>
 8022288:	f1ad 0c08 	sub.w	ip, sp, #8
 802228c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8022290:	f000 f806 	bl	80222a0 <__udivmoddi4>
 8022294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8022298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802229c:	b004      	add	sp, #16
 802229e:	4770      	bx	lr

080222a0 <__udivmoddi4>:
 80222a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222a4:	9e08      	ldr	r6, [sp, #32]
 80222a6:	460d      	mov	r5, r1
 80222a8:	4604      	mov	r4, r0
 80222aa:	460f      	mov	r7, r1
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d14a      	bne.n	8022346 <__udivmoddi4+0xa6>
 80222b0:	428a      	cmp	r2, r1
 80222b2:	4694      	mov	ip, r2
 80222b4:	d965      	bls.n	8022382 <__udivmoddi4+0xe2>
 80222b6:	fab2 f382 	clz	r3, r2
 80222ba:	b143      	cbz	r3, 80222ce <__udivmoddi4+0x2e>
 80222bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80222c0:	f1c3 0220 	rsb	r2, r3, #32
 80222c4:	409f      	lsls	r7, r3
 80222c6:	fa20 f202 	lsr.w	r2, r0, r2
 80222ca:	4317      	orrs	r7, r2
 80222cc:	409c      	lsls	r4, r3
 80222ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80222d2:	fa1f f58c 	uxth.w	r5, ip
 80222d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80222da:	0c22      	lsrs	r2, r4, #16
 80222dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80222e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80222e4:	fb01 f005 	mul.w	r0, r1, r5
 80222e8:	4290      	cmp	r0, r2
 80222ea:	d90a      	bls.n	8022302 <__udivmoddi4+0x62>
 80222ec:	eb1c 0202 	adds.w	r2, ip, r2
 80222f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80222f4:	f080 811c 	bcs.w	8022530 <__udivmoddi4+0x290>
 80222f8:	4290      	cmp	r0, r2
 80222fa:	f240 8119 	bls.w	8022530 <__udivmoddi4+0x290>
 80222fe:	3902      	subs	r1, #2
 8022300:	4462      	add	r2, ip
 8022302:	1a12      	subs	r2, r2, r0
 8022304:	b2a4      	uxth	r4, r4
 8022306:	fbb2 f0fe 	udiv	r0, r2, lr
 802230a:	fb0e 2210 	mls	r2, lr, r0, r2
 802230e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8022312:	fb00 f505 	mul.w	r5, r0, r5
 8022316:	42a5      	cmp	r5, r4
 8022318:	d90a      	bls.n	8022330 <__udivmoddi4+0x90>
 802231a:	eb1c 0404 	adds.w	r4, ip, r4
 802231e:	f100 32ff 	add.w	r2, r0, #4294967295
 8022322:	f080 8107 	bcs.w	8022534 <__udivmoddi4+0x294>
 8022326:	42a5      	cmp	r5, r4
 8022328:	f240 8104 	bls.w	8022534 <__udivmoddi4+0x294>
 802232c:	4464      	add	r4, ip
 802232e:	3802      	subs	r0, #2
 8022330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8022334:	1b64      	subs	r4, r4, r5
 8022336:	2100      	movs	r1, #0
 8022338:	b11e      	cbz	r6, 8022342 <__udivmoddi4+0xa2>
 802233a:	40dc      	lsrs	r4, r3
 802233c:	2300      	movs	r3, #0
 802233e:	e9c6 4300 	strd	r4, r3, [r6]
 8022342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022346:	428b      	cmp	r3, r1
 8022348:	d908      	bls.n	802235c <__udivmoddi4+0xbc>
 802234a:	2e00      	cmp	r6, #0
 802234c:	f000 80ed 	beq.w	802252a <__udivmoddi4+0x28a>
 8022350:	2100      	movs	r1, #0
 8022352:	e9c6 0500 	strd	r0, r5, [r6]
 8022356:	4608      	mov	r0, r1
 8022358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802235c:	fab3 f183 	clz	r1, r3
 8022360:	2900      	cmp	r1, #0
 8022362:	d149      	bne.n	80223f8 <__udivmoddi4+0x158>
 8022364:	42ab      	cmp	r3, r5
 8022366:	d302      	bcc.n	802236e <__udivmoddi4+0xce>
 8022368:	4282      	cmp	r2, r0
 802236a:	f200 80f8 	bhi.w	802255e <__udivmoddi4+0x2be>
 802236e:	1a84      	subs	r4, r0, r2
 8022370:	eb65 0203 	sbc.w	r2, r5, r3
 8022374:	2001      	movs	r0, #1
 8022376:	4617      	mov	r7, r2
 8022378:	2e00      	cmp	r6, #0
 802237a:	d0e2      	beq.n	8022342 <__udivmoddi4+0xa2>
 802237c:	e9c6 4700 	strd	r4, r7, [r6]
 8022380:	e7df      	b.n	8022342 <__udivmoddi4+0xa2>
 8022382:	b902      	cbnz	r2, 8022386 <__udivmoddi4+0xe6>
 8022384:	deff      	udf	#255	; 0xff
 8022386:	fab2 f382 	clz	r3, r2
 802238a:	2b00      	cmp	r3, #0
 802238c:	f040 8090 	bne.w	80224b0 <__udivmoddi4+0x210>
 8022390:	1a8a      	subs	r2, r1, r2
 8022392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8022396:	fa1f fe8c 	uxth.w	lr, ip
 802239a:	2101      	movs	r1, #1
 802239c:	fbb2 f5f7 	udiv	r5, r2, r7
 80223a0:	fb07 2015 	mls	r0, r7, r5, r2
 80223a4:	0c22      	lsrs	r2, r4, #16
 80223a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80223aa:	fb0e f005 	mul.w	r0, lr, r5
 80223ae:	4290      	cmp	r0, r2
 80223b0:	d908      	bls.n	80223c4 <__udivmoddi4+0x124>
 80223b2:	eb1c 0202 	adds.w	r2, ip, r2
 80223b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80223ba:	d202      	bcs.n	80223c2 <__udivmoddi4+0x122>
 80223bc:	4290      	cmp	r0, r2
 80223be:	f200 80cb 	bhi.w	8022558 <__udivmoddi4+0x2b8>
 80223c2:	4645      	mov	r5, r8
 80223c4:	1a12      	subs	r2, r2, r0
 80223c6:	b2a4      	uxth	r4, r4
 80223c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80223cc:	fb07 2210 	mls	r2, r7, r0, r2
 80223d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80223d4:	fb0e fe00 	mul.w	lr, lr, r0
 80223d8:	45a6      	cmp	lr, r4
 80223da:	d908      	bls.n	80223ee <__udivmoddi4+0x14e>
 80223dc:	eb1c 0404 	adds.w	r4, ip, r4
 80223e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80223e4:	d202      	bcs.n	80223ec <__udivmoddi4+0x14c>
 80223e6:	45a6      	cmp	lr, r4
 80223e8:	f200 80bb 	bhi.w	8022562 <__udivmoddi4+0x2c2>
 80223ec:	4610      	mov	r0, r2
 80223ee:	eba4 040e 	sub.w	r4, r4, lr
 80223f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80223f6:	e79f      	b.n	8022338 <__udivmoddi4+0x98>
 80223f8:	f1c1 0720 	rsb	r7, r1, #32
 80223fc:	408b      	lsls	r3, r1
 80223fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8022402:	ea4c 0c03 	orr.w	ip, ip, r3
 8022406:	fa05 f401 	lsl.w	r4, r5, r1
 802240a:	fa20 f307 	lsr.w	r3, r0, r7
 802240e:	40fd      	lsrs	r5, r7
 8022410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8022414:	4323      	orrs	r3, r4
 8022416:	fbb5 f8f9 	udiv	r8, r5, r9
 802241a:	fa1f fe8c 	uxth.w	lr, ip
 802241e:	fb09 5518 	mls	r5, r9, r8, r5
 8022422:	0c1c      	lsrs	r4, r3, #16
 8022424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8022428:	fb08 f50e 	mul.w	r5, r8, lr
 802242c:	42a5      	cmp	r5, r4
 802242e:	fa02 f201 	lsl.w	r2, r2, r1
 8022432:	fa00 f001 	lsl.w	r0, r0, r1
 8022436:	d90b      	bls.n	8022450 <__udivmoddi4+0x1b0>
 8022438:	eb1c 0404 	adds.w	r4, ip, r4
 802243c:	f108 3aff 	add.w	sl, r8, #4294967295
 8022440:	f080 8088 	bcs.w	8022554 <__udivmoddi4+0x2b4>
 8022444:	42a5      	cmp	r5, r4
 8022446:	f240 8085 	bls.w	8022554 <__udivmoddi4+0x2b4>
 802244a:	f1a8 0802 	sub.w	r8, r8, #2
 802244e:	4464      	add	r4, ip
 8022450:	1b64      	subs	r4, r4, r5
 8022452:	b29d      	uxth	r5, r3
 8022454:	fbb4 f3f9 	udiv	r3, r4, r9
 8022458:	fb09 4413 	mls	r4, r9, r3, r4
 802245c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8022460:	fb03 fe0e 	mul.w	lr, r3, lr
 8022464:	45a6      	cmp	lr, r4
 8022466:	d908      	bls.n	802247a <__udivmoddi4+0x1da>
 8022468:	eb1c 0404 	adds.w	r4, ip, r4
 802246c:	f103 35ff 	add.w	r5, r3, #4294967295
 8022470:	d26c      	bcs.n	802254c <__udivmoddi4+0x2ac>
 8022472:	45a6      	cmp	lr, r4
 8022474:	d96a      	bls.n	802254c <__udivmoddi4+0x2ac>
 8022476:	3b02      	subs	r3, #2
 8022478:	4464      	add	r4, ip
 802247a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 802247e:	fba3 9502 	umull	r9, r5, r3, r2
 8022482:	eba4 040e 	sub.w	r4, r4, lr
 8022486:	42ac      	cmp	r4, r5
 8022488:	46c8      	mov	r8, r9
 802248a:	46ae      	mov	lr, r5
 802248c:	d356      	bcc.n	802253c <__udivmoddi4+0x29c>
 802248e:	d053      	beq.n	8022538 <__udivmoddi4+0x298>
 8022490:	b156      	cbz	r6, 80224a8 <__udivmoddi4+0x208>
 8022492:	ebb0 0208 	subs.w	r2, r0, r8
 8022496:	eb64 040e 	sbc.w	r4, r4, lr
 802249a:	fa04 f707 	lsl.w	r7, r4, r7
 802249e:	40ca      	lsrs	r2, r1
 80224a0:	40cc      	lsrs	r4, r1
 80224a2:	4317      	orrs	r7, r2
 80224a4:	e9c6 7400 	strd	r7, r4, [r6]
 80224a8:	4618      	mov	r0, r3
 80224aa:	2100      	movs	r1, #0
 80224ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224b0:	f1c3 0120 	rsb	r1, r3, #32
 80224b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80224b8:	fa20 f201 	lsr.w	r2, r0, r1
 80224bc:	fa25 f101 	lsr.w	r1, r5, r1
 80224c0:	409d      	lsls	r5, r3
 80224c2:	432a      	orrs	r2, r5
 80224c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80224c8:	fa1f fe8c 	uxth.w	lr, ip
 80224cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80224d0:	fb07 1510 	mls	r5, r7, r0, r1
 80224d4:	0c11      	lsrs	r1, r2, #16
 80224d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80224da:	fb00 f50e 	mul.w	r5, r0, lr
 80224de:	428d      	cmp	r5, r1
 80224e0:	fa04 f403 	lsl.w	r4, r4, r3
 80224e4:	d908      	bls.n	80224f8 <__udivmoddi4+0x258>
 80224e6:	eb1c 0101 	adds.w	r1, ip, r1
 80224ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80224ee:	d22f      	bcs.n	8022550 <__udivmoddi4+0x2b0>
 80224f0:	428d      	cmp	r5, r1
 80224f2:	d92d      	bls.n	8022550 <__udivmoddi4+0x2b0>
 80224f4:	3802      	subs	r0, #2
 80224f6:	4461      	add	r1, ip
 80224f8:	1b49      	subs	r1, r1, r5
 80224fa:	b292      	uxth	r2, r2
 80224fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8022500:	fb07 1115 	mls	r1, r7, r5, r1
 8022504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8022508:	fb05 f10e 	mul.w	r1, r5, lr
 802250c:	4291      	cmp	r1, r2
 802250e:	d908      	bls.n	8022522 <__udivmoddi4+0x282>
 8022510:	eb1c 0202 	adds.w	r2, ip, r2
 8022514:	f105 38ff 	add.w	r8, r5, #4294967295
 8022518:	d216      	bcs.n	8022548 <__udivmoddi4+0x2a8>
 802251a:	4291      	cmp	r1, r2
 802251c:	d914      	bls.n	8022548 <__udivmoddi4+0x2a8>
 802251e:	3d02      	subs	r5, #2
 8022520:	4462      	add	r2, ip
 8022522:	1a52      	subs	r2, r2, r1
 8022524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8022528:	e738      	b.n	802239c <__udivmoddi4+0xfc>
 802252a:	4631      	mov	r1, r6
 802252c:	4630      	mov	r0, r6
 802252e:	e708      	b.n	8022342 <__udivmoddi4+0xa2>
 8022530:	4639      	mov	r1, r7
 8022532:	e6e6      	b.n	8022302 <__udivmoddi4+0x62>
 8022534:	4610      	mov	r0, r2
 8022536:	e6fb      	b.n	8022330 <__udivmoddi4+0x90>
 8022538:	4548      	cmp	r0, r9
 802253a:	d2a9      	bcs.n	8022490 <__udivmoddi4+0x1f0>
 802253c:	ebb9 0802 	subs.w	r8, r9, r2
 8022540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8022544:	3b01      	subs	r3, #1
 8022546:	e7a3      	b.n	8022490 <__udivmoddi4+0x1f0>
 8022548:	4645      	mov	r5, r8
 802254a:	e7ea      	b.n	8022522 <__udivmoddi4+0x282>
 802254c:	462b      	mov	r3, r5
 802254e:	e794      	b.n	802247a <__udivmoddi4+0x1da>
 8022550:	4640      	mov	r0, r8
 8022552:	e7d1      	b.n	80224f8 <__udivmoddi4+0x258>
 8022554:	46d0      	mov	r8, sl
 8022556:	e77b      	b.n	8022450 <__udivmoddi4+0x1b0>
 8022558:	3d02      	subs	r5, #2
 802255a:	4462      	add	r2, ip
 802255c:	e732      	b.n	80223c4 <__udivmoddi4+0x124>
 802255e:	4608      	mov	r0, r1
 8022560:	e70a      	b.n	8022378 <__udivmoddi4+0xd8>
 8022562:	4464      	add	r4, ip
 8022564:	3802      	subs	r0, #2
 8022566:	e742      	b.n	80223ee <__udivmoddi4+0x14e>

08022568 <__aeabi_idiv0>:
 8022568:	4770      	bx	lr
 802256a:	bf00      	nop

0802256c <cdc_send>:
#include "cdc_endp.h"

#define SEND_TIMEOUT 0x1000000          // 发送超时时间

static int cdc_send(uint8_t *data, uint32_t len)
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b084      	sub	sp, #16
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
 8022574:	6039      	str	r1, [r7, #0]
    uint32_t timeout = SEND_TIMEOUT;
 8022576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802257a:	60fb      	str	r3, [r7, #12]

    if (!CDC_IsPacketSent())              // 如果之前的CDC发送未完成
 802257c:	f000 f98e 	bl	802289c <CDC_IsPacketSent>
 8022580:	4603      	mov	r3, r0
 8022582:	2b00      	cmp	r3, #0
 8022584:	d117      	bne.n	80225b6 <cdc_send+0x4a>
    {
        DEBUG_PRINT("Wait for previous CDC TX\r\n");  // 打印调试信息，等待上一次CDC发送完成
 8022586:	4816      	ldr	r0, [pc, #88]	; (80225e0 <cdc_send+0x74>)
 8022588:	f00f f8f8 	bl	803177c <puts>
        while (!CDC_IsPacketSent() && --timeout);    // 等待CDC发送完成，或者超时
 802258c:	bf00      	nop
 802258e:	f000 f985 	bl	802289c <CDC_IsPacketSent>
 8022592:	4603      	mov	r3, r0
 8022594:	2b00      	cmp	r3, #0
 8022596:	d105      	bne.n	80225a4 <cdc_send+0x38>
 8022598:	68fb      	ldr	r3, [r7, #12]
 802259a:	3b01      	subs	r3, #1
 802259c:	60fb      	str	r3, [r7, #12]
 802259e:	68fb      	ldr	r3, [r7, #12]
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d1f4      	bne.n	802258e <cdc_send+0x22>
        if (!timeout)
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d105      	bne.n	80225b6 <cdc_send+0x4a>
        {
            ERROR_PRINT("Failed to send data, CDC is busy\r\n");   // 打印错误信息，发送超时，CDC忙碌
 80225aa:	480e      	ldr	r0, [pc, #56]	; (80225e4 <cdc_send+0x78>)
 80225ac:	f00f f8e6 	bl	803177c <puts>
            return -1;                                          // 返回错误代码
 80225b0:	f04f 33ff 	mov.w	r3, #4294967295
 80225b4:	e00f      	b.n	80225d6 <cdc_send+0x6a>
        }
    }

    if (!CDC_Send_DATA(data, len))                              // 发送数据
 80225b6:	683b      	ldr	r3, [r7, #0]
 80225b8:	b2db      	uxtb	r3, r3
 80225ba:	4619      	mov	r1, r3
 80225bc:	6878      	ldr	r0, [r7, #4]
 80225be:	f000 f947 	bl	8022850 <CDC_Send_DATA>
 80225c2:	4603      	mov	r3, r0
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d105      	bne.n	80225d4 <cdc_send+0x68>
    {
        ERROR_PRINT("Failed to send data\r\n");                  // 打印错误信息，发送数据失败
 80225c8:	4807      	ldr	r0, [pc, #28]	; (80225e8 <cdc_send+0x7c>)
 80225ca:	f00f f8d7 	bl	803177c <puts>
        return -1;                                              // 返回错误代码
 80225ce:	f04f 33ff 	mov.w	r3, #4294967295
 80225d2:	e000      	b.n	80225d6 <cdc_send+0x6a>
    }

    return 0;                                                   // 返回成功代码
 80225d4:	2300      	movs	r3, #0
}
 80225d6:	4618      	mov	r0, r3
 80225d8:	3710      	adds	r7, #16
 80225da:	46bd      	mov	sp, r7
 80225dc:	bd80      	pop	{r7, pc}
 80225de:	bf00      	nop
 80225e0:	08032484 	.word	0x08032484
 80225e4:	080324a0 	.word	0x080324a0
 80225e8:	080324cc 	.word	0x080324cc

080225ec <cdc_send_ready>:

static int cdc_send_ready()
{
 80225ec:	b580      	push	{r7, lr}
 80225ee:	af00      	add	r7, sp, #0
    return CDC_IsPacketSent();                                  // 返回CDC是否可发送数据的状态
 80225f0:	f000 f954 	bl	802289c <CDC_IsPacketSent>
 80225f4:	4603      	mov	r3, r0
}
 80225f6:	4618      	mov	r0, r3
 80225f8:	bd80      	pop	{r7, pc}

080225fa <cdc_peek>:

static uint32_t cdc_peek(uint8_t **data)
{
 80225fa:	b580      	push	{r7, lr}
 80225fc:	b082      	sub	sp, #8
 80225fe:	af00      	add	r7, sp, #0
 8022600:	6078      	str	r0, [r7, #4]
    return USB_Data_Peek(data);                                 // 查看USB数据
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f000 f82a 	bl	802265c <USB_Data_Peek>
 8022608:	4603      	mov	r3, r0
}
 802260a:	4618      	mov	r0, r3
 802260c:	3708      	adds	r7, #8
 802260e:	46bd      	mov	sp, r7
 8022610:	bd80      	pop	{r7, pc}

08022612 <cdc_consume>:

static void cdc_consume()
{
 8022612:	b580      	push	{r7, lr}
 8022614:	b082      	sub	sp, #8
 8022616:	af00      	add	r7, sp, #0
    uint8_t *data;

    USB_Data_Get(&data);                                        // 获取USB数据
 8022618:	1d3b      	adds	r3, r7, #4
 802261a:	4618      	mov	r0, r3
 802261c:	f000 f84e 	bl	80226bc <USB_Data_Get>
    USB_DataRx_Sched();                                         // 调度USB数据接收
 8022620:	f000 f8ac 	bl	802277c <USB_DataRx_Sched>
}
 8022624:	bf00      	nop
 8022626:	3708      	adds	r7, #8
 8022628:	46bd      	mov	sp, r7
 802262a:	bd80      	pop	{r7, pc}

0802262c <cdc_init>:
    .peek = cdc_peek,
    .consume = cdc_consume,
};

void cdc_init()
{
 802262c:	b580      	push	{r7, lr}
 802262e:	af00      	add	r7, sp, #0
    np_comm_register(&cdc_comm_cb);                             // 注册CDC通信回调函数
 8022630:	4803      	ldr	r0, [pc, #12]	; (8022640 <cdc_init+0x14>)
 8022632:	f003 fce5 	bl	8026000 <np_comm_register>

    /* Enable receive of data */
    CDC_Receive_DATA();                                         // 启用数据接收
 8022636:	f000 f927 	bl	8022888 <CDC_Receive_DATA>
}
 802263a:	bf00      	nop
 802263c:	bd80      	pop	{r7, pc}
 802263e:	bf00      	nop
 8022640:	20000000 	.word	0x20000000

08022644 <EP1_IN_Callback>:
* Output         : None.
* Return         : None.
*******************************************************************************/

void EP1_IN_Callback ()
{
 8022644:	b480      	push	{r7}
 8022646:	af00      	add	r7, sp, #0
  packet_sent = 1;
 8022648:	4b03      	ldr	r3, [pc, #12]	; (8022658 <EP1_IN_Callback+0x14>)
 802264a:	2201      	movs	r2, #1
 802264c:	601a      	str	r2, [r3, #0]
}
 802264e:	bf00      	nop
 8022650:	46bd      	mov	sp, r7
 8022652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022656:	4770      	bx	lr
 8022658:	20000014 	.word	0x20000014

0802265c <USB_Data_Peek>:

static packet_t circ_buf[CIRC_BUF_SIZE];
static volatile uint8_t head, size, tail = CIRC_BUF_SIZE - 1;

uint32_t USB_Data_Peek(uint8_t **data)
{
 802265c:	b480      	push	{r7}
 802265e:	b083      	sub	sp, #12
 8022660:	af00      	add	r7, sp, #0
 8022662:	6078      	str	r0, [r7, #4]
  if (!size)
 8022664:	4b12      	ldr	r3, [pc, #72]	; (80226b0 <USB_Data_Peek+0x54>)
 8022666:	781b      	ldrb	r3, [r3, #0]
 8022668:	b2db      	uxtb	r3, r3
 802266a:	2b00      	cmp	r3, #0
 802266c:	d101      	bne.n	8022672 <USB_Data_Peek+0x16>
    return 0;
 802266e:	2300      	movs	r3, #0
 8022670:	e017      	b.n	80226a2 <USB_Data_Peek+0x46>

  *data = circ_buf[head].pbuf;
 8022672:	4b10      	ldr	r3, [pc, #64]	; (80226b4 <USB_Data_Peek+0x58>)
 8022674:	781b      	ldrb	r3, [r3, #0]
 8022676:	b2db      	uxtb	r3, r3
 8022678:	461a      	mov	r2, r3
 802267a:	4613      	mov	r3, r2
 802267c:	011b      	lsls	r3, r3, #4
 802267e:	4413      	add	r3, r2
 8022680:	009b      	lsls	r3, r3, #2
 8022682:	4a0d      	ldr	r2, [pc, #52]	; (80226b8 <USB_Data_Peek+0x5c>)
 8022684:	441a      	add	r2, r3
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	601a      	str	r2, [r3, #0]

  return circ_buf[head].len;
 802268a:	4b0a      	ldr	r3, [pc, #40]	; (80226b4 <USB_Data_Peek+0x58>)
 802268c:	781b      	ldrb	r3, [r3, #0]
 802268e:	b2db      	uxtb	r3, r3
 8022690:	4619      	mov	r1, r3
 8022692:	4a09      	ldr	r2, [pc, #36]	; (80226b8 <USB_Data_Peek+0x5c>)
 8022694:	460b      	mov	r3, r1
 8022696:	011b      	lsls	r3, r3, #4
 8022698:	440b      	add	r3, r1
 802269a:	009b      	lsls	r3, r3, #2
 802269c:	4413      	add	r3, r2
 802269e:	3340      	adds	r3, #64	; 0x40
 80226a0:	681b      	ldr	r3, [r3, #0]
}
 80226a2:	4618      	mov	r0, r3
 80226a4:	370c      	adds	r7, #12
 80226a6:	46bd      	mov	sp, r7
 80226a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226ac:	4770      	bx	lr
 80226ae:	bf00      	nop
 80226b0:	20000c01 	.word	0x20000c01
 80226b4:	20000c00 	.word	0x20000c00
 80226b8:	200002f8 	.word	0x200002f8

080226bc <USB_Data_Get>:

uint32_t USB_Data_Get(uint8_t **data)
{
 80226bc:	b480      	push	{r7}
 80226be:	b085      	sub	sp, #20
 80226c0:	af00      	add	r7, sp, #0
 80226c2:	6078      	str	r0, [r7, #4]
  uint32_t len;

  if (!size)
 80226c4:	4b21      	ldr	r3, [pc, #132]	; (802274c <USB_Data_Get+0x90>)
 80226c6:	781b      	ldrb	r3, [r3, #0]
 80226c8:	b2db      	uxtb	r3, r3
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d101      	bne.n	80226d2 <USB_Data_Get+0x16>
    return 0;
 80226ce:	2300      	movs	r3, #0
 80226d0:	e036      	b.n	8022740 <USB_Data_Get+0x84>

  *data = circ_buf[head].pbuf;
 80226d2:	4b1f      	ldr	r3, [pc, #124]	; (8022750 <USB_Data_Get+0x94>)
 80226d4:	781b      	ldrb	r3, [r3, #0]
 80226d6:	b2db      	uxtb	r3, r3
 80226d8:	461a      	mov	r2, r3
 80226da:	4613      	mov	r3, r2
 80226dc:	011b      	lsls	r3, r3, #4
 80226de:	4413      	add	r3, r2
 80226e0:	009b      	lsls	r3, r3, #2
 80226e2:	4a1c      	ldr	r2, [pc, #112]	; (8022754 <USB_Data_Get+0x98>)
 80226e4:	441a      	add	r2, r3
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	601a      	str	r2, [r3, #0]
  len = circ_buf[head].len;
 80226ea:	4b19      	ldr	r3, [pc, #100]	; (8022750 <USB_Data_Get+0x94>)
 80226ec:	781b      	ldrb	r3, [r3, #0]
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	4619      	mov	r1, r3
 80226f2:	4a18      	ldr	r2, [pc, #96]	; (8022754 <USB_Data_Get+0x98>)
 80226f4:	460b      	mov	r3, r1
 80226f6:	011b      	lsls	r3, r3, #4
 80226f8:	440b      	add	r3, r1
 80226fa:	009b      	lsls	r3, r3, #2
 80226fc:	4413      	add	r3, r2
 80226fe:	3340      	adds	r3, #64	; 0x40
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	60fb      	str	r3, [r7, #12]
  head = (head + 1) % CIRC_BUF_SIZE;
 8022704:	4b12      	ldr	r3, [pc, #72]	; (8022750 <USB_Data_Get+0x94>)
 8022706:	781b      	ldrb	r3, [r3, #0]
 8022708:	b2db      	uxtb	r3, r3
 802270a:	1c5a      	adds	r2, r3, #1
 802270c:	4b12      	ldr	r3, [pc, #72]	; (8022758 <USB_Data_Get+0x9c>)
 802270e:	fb83 1302 	smull	r1, r3, r3, r2
 8022712:	1119      	asrs	r1, r3, #4
 8022714:	17d3      	asrs	r3, r2, #31
 8022716:	1ac9      	subs	r1, r1, r3
 8022718:	460b      	mov	r3, r1
 802271a:	011b      	lsls	r3, r3, #4
 802271c:	440b      	add	r3, r1
 802271e:	005b      	lsls	r3, r3, #1
 8022720:	1ad1      	subs	r1, r2, r3
 8022722:	b2ca      	uxtb	r2, r1
 8022724:	4b0a      	ldr	r3, [pc, #40]	; (8022750 <USB_Data_Get+0x94>)
 8022726:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022728:	b672      	cpsid	i
}
 802272a:	bf00      	nop
  __disable_irq();
  size--;
 802272c:	4b07      	ldr	r3, [pc, #28]	; (802274c <USB_Data_Get+0x90>)
 802272e:	781b      	ldrb	r3, [r3, #0]
 8022730:	b2db      	uxtb	r3, r3
 8022732:	3b01      	subs	r3, #1
 8022734:	b2da      	uxtb	r2, r3
 8022736:	4b05      	ldr	r3, [pc, #20]	; (802274c <USB_Data_Get+0x90>)
 8022738:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 802273a:	b662      	cpsie	i
}
 802273c:	bf00      	nop
  __enable_irq();

  return len;
 802273e:	68fb      	ldr	r3, [r7, #12]
}
 8022740:	4618      	mov	r0, r3
 8022742:	3714      	adds	r7, #20
 8022744:	46bd      	mov	sp, r7
 8022746:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274a:	4770      	bx	lr
 802274c:	20000c01 	.word	0x20000c01
 8022750:	20000c00 	.word	0x20000c00
 8022754:	200002f8 	.word	0x200002f8
 8022758:	78787879 	.word	0x78787879

0802275c <USB_DataRx_Sched_Internal>:

static inline void USB_DataRx_Sched_Internal(void)
{
 802275c:	b580      	push	{r7, lr}
 802275e:	af00      	add	r7, sp, #0
  if (size < CIRC_BUF_SIZE)
 8022760:	4b04      	ldr	r3, [pc, #16]	; (8022774 <USB_DataRx_Sched_Internal+0x18>)
 8022762:	781b      	ldrb	r3, [r3, #0]
 8022764:	b2db      	uxtb	r3, r3
 8022766:	2b21      	cmp	r3, #33	; 0x21
 8022768:	d802      	bhi.n	8022770 <USB_DataRx_Sched_Internal+0x14>
//    SetEPRxValid(ENDP3);
	  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 802276a:	4803      	ldr	r0, [pc, #12]	; (8022778 <USB_DataRx_Sched_Internal+0x1c>)
 802276c:	f00d ff4b 	bl	8030606 <USBD_CtlReceiveStatus>
}
 8022770:	bf00      	nop
 8022772:	bd80      	pop	{r7, pc}
 8022774:	20000c01 	.word	0x20000c01
 8022778:	20005220 	.word	0x20005220

0802277c <USB_DataRx_Sched>:

void USB_DataRx_Sched(void)
{
 802277c:	b580      	push	{r7, lr}
 802277e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8022780:	b672      	cpsid	i
}
 8022782:	bf00      	nop
  __disable_irq();
  USB_DataRx_Sched_Internal();
 8022784:	f7ff ffea 	bl	802275c <USB_DataRx_Sched_Internal>
  __ASM volatile ("cpsie i" : : : "memory");
 8022788:	b662      	cpsie	i
}
 802278a:	bf00      	nop
  __enable_irq();
}
 802278c:	bf00      	nop
 802278e:	bd80      	pop	{r7, pc}

08022790 <EP3_OUT_Callback>:

// CDC接收数据回调函数
/*void EP3_OUT_Callback(void)*/
void EP3_OUT_Callback(uint8_t **Buf, uint32_t *Len)
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b082      	sub	sp, #8
 8022794:	af00      	add	r7, sp, #0
 8022796:	6078      	str	r0, [r7, #4]
 8022798:	6039      	str	r1, [r7, #0]
	Receive_length = USBD_GetRxCount(&hUsbDeviceHS, CDC_OUT_EP);
 802279a:	2101      	movs	r1, #1
 802279c:	4825      	ldr	r0, [pc, #148]	; (8022834 <EP3_OUT_Callback+0xa4>)
 802279e:	f00d ff45 	bl	803062c <USBD_GetRxCount>
 80227a2:	4603      	mov	r3, r0
 80227a4:	4a24      	ldr	r2, [pc, #144]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227a6:	6013      	str	r3, [r2, #0]
    if (size < CIRC_BUF_SIZE)
 80227a8:	4b24      	ldr	r3, [pc, #144]	; (802283c <EP3_OUT_Callback+0xac>)
 80227aa:	781b      	ldrb	r3, [r3, #0]
 80227ac:	b2db      	uxtb	r3, r3
 80227ae:	2b21      	cmp	r3, #33	; 0x21
 80227b0:	d83b      	bhi.n	802282a <EP3_OUT_Callback+0x9a>
    {
    	printf("E3_OUT run \r\n");
 80227b2:	4823      	ldr	r0, [pc, #140]	; (8022840 <EP3_OUT_Callback+0xb0>)
 80227b4:	f00e ffe2 	bl	803177c <puts>
        // 循环缓冲区索引移动
        tail = (tail + 1) % CIRC_BUF_SIZE;
 80227b8:	4b22      	ldr	r3, [pc, #136]	; (8022844 <EP3_OUT_Callback+0xb4>)
 80227ba:	781b      	ldrb	r3, [r3, #0]
 80227bc:	b2db      	uxtb	r3, r3
 80227be:	1c5a      	adds	r2, r3, #1
 80227c0:	4b21      	ldr	r3, [pc, #132]	; (8022848 <EP3_OUT_Callback+0xb8>)
 80227c2:	fb83 1302 	smull	r1, r3, r3, r2
 80227c6:	1119      	asrs	r1, r3, #4
 80227c8:	17d3      	asrs	r3, r2, #31
 80227ca:	1ac9      	subs	r1, r1, r3
 80227cc:	460b      	mov	r3, r1
 80227ce:	011b      	lsls	r3, r3, #4
 80227d0:	440b      	add	r3, r1
 80227d2:	005b      	lsls	r3, r3, #1
 80227d4:	1ad1      	subs	r1, r2, r3
 80227d6:	b2ca      	uxtb	r2, r1
 80227d8:	4b1a      	ldr	r3, [pc, #104]	; (8022844 <EP3_OUT_Callback+0xb4>)
 80227da:	701a      	strb	r2, [r3, #0]
        // 将接收到的数据复制到循环缓冲区
        // 将数据从 Buf 复制到 circ_buf[tail].pbuf
        memcpy(circ_buf[tail].pbuf, Buf, Receive_length);
 80227dc:	4b19      	ldr	r3, [pc, #100]	; (8022844 <EP3_OUT_Callback+0xb4>)
 80227de:	781b      	ldrb	r3, [r3, #0]
 80227e0:	b2db      	uxtb	r3, r3
 80227e2:	461a      	mov	r2, r3
 80227e4:	4613      	mov	r3, r2
 80227e6:	011b      	lsls	r3, r3, #4
 80227e8:	4413      	add	r3, r2
 80227ea:	009b      	lsls	r3, r3, #2
 80227ec:	4a17      	ldr	r2, [pc, #92]	; (802284c <EP3_OUT_Callback+0xbc>)
 80227ee:	4413      	add	r3, r2
 80227f0:	4a11      	ldr	r2, [pc, #68]	; (8022838 <EP3_OUT_Callback+0xa8>)
 80227f2:	6812      	ldr	r2, [r2, #0]
 80227f4:	6879      	ldr	r1, [r7, #4]
 80227f6:	4618      	mov	r0, r3
 80227f8:	f00f f91b 	bl	8031a32 <memcpy>
        circ_buf[tail].len = Receive_length;
 80227fc:	4b11      	ldr	r3, [pc, #68]	; (8022844 <EP3_OUT_Callback+0xb4>)
 80227fe:	781b      	ldrb	r3, [r3, #0]
 8022800:	b2db      	uxtb	r3, r3
 8022802:	4618      	mov	r0, r3
 8022804:	4b0c      	ldr	r3, [pc, #48]	; (8022838 <EP3_OUT_Callback+0xa8>)
 8022806:	681a      	ldr	r2, [r3, #0]
 8022808:	4910      	ldr	r1, [pc, #64]	; (802284c <EP3_OUT_Callback+0xbc>)
 802280a:	4603      	mov	r3, r0
 802280c:	011b      	lsls	r3, r3, #4
 802280e:	4403      	add	r3, r0
 8022810:	009b      	lsls	r3, r3, #2
 8022812:	440b      	add	r3, r1
 8022814:	3340      	adds	r3, #64	; 0x40
 8022816:	601a      	str	r2, [r3, #0]
        size++;
 8022818:	4b08      	ldr	r3, [pc, #32]	; (802283c <EP3_OUT_Callback+0xac>)
 802281a:	781b      	ldrb	r3, [r3, #0]
 802281c:	b2db      	uxtb	r3, r3
 802281e:	3301      	adds	r3, #1
 8022820:	b2da      	uxtb	r2, r3
 8022822:	4b06      	ldr	r3, [pc, #24]	; (802283c <EP3_OUT_Callback+0xac>)
 8022824:	701a      	strb	r2, [r3, #0]
        USB_DataRx_Sched_Internal();
 8022826:	f7ff ff99 	bl	802275c <USB_DataRx_Sched_Internal>
    // 发送数据到USART1
//    HAL_UART_Transmit(&huart1, circ_buf[tail].pbuf, Receive_length, HAL_MAX_DELAY);

    // 发送数据回USB HS
//    CDC_Transmit_HS(circ_buf[tail].pbuf, Receive_length); // 假设存在一个名为USBD_CDC_Transmit_HS的函数
}
 802282a:	bf00      	nop
 802282c:	3708      	adds	r7, #8
 802282e:	46bd      	mov	sp, r7
 8022830:	bd80      	pop	{r7, pc}
 8022832:	bf00      	nop
 8022834:	20005220 	.word	0x20005220
 8022838:	200002f4 	.word	0x200002f4
 802283c:	20000c01 	.word	0x20000c01
 8022840:	080324e8 	.word	0x080324e8
 8022844:	20000010 	.word	0x20000010
 8022848:	78787879 	.word	0x78787879
 802284c:	200002f8 	.word	0x200002f8

08022850 <CDC_Send_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Send_DATA (uint8_t *ptrBuffer, uint8_t Send_length)
{
 8022850:	b580      	push	{r7, lr}
 8022852:	b082      	sub	sp, #8
 8022854:	af00      	add	r7, sp, #0
 8022856:	6078      	str	r0, [r7, #4]
 8022858:	460b      	mov	r3, r1
 802285a:	70fb      	strb	r3, [r7, #3]
  /*if max buffer is Not reached*/
  if(Send_length <= VIRTUAL_COM_PORT_DATA_SIZE)
 802285c:	78fb      	ldrb	r3, [r7, #3]
 802285e:	2b40      	cmp	r3, #64	; 0x40
 8022860:	d80a      	bhi.n	8022878 <CDC_Send_DATA+0x28>
/*packet_sent = 0;
  memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
  CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
单次发送
 */
	  packet_sent = 0;
 8022862:	4b08      	ldr	r3, [pc, #32]	; (8022884 <CDC_Send_DATA+0x34>)
 8022864:	2200      	movs	r2, #0
 8022866:	601a      	str	r2, [r3, #0]
//      memcpy(CDC_IN_EP, (unsigned char*)ptrBuffer, Send_length);
      CDC_Transmit_HS((unsigned char*)ptrBuffer, Send_length);
 8022868:	78fb      	ldrb	r3, [r7, #3]
 802286a:	b29b      	uxth	r3, r3
 802286c:	4619      	mov	r1, r3
 802286e:	6878      	ldr	r0, [r7, #4]
 8022870:	f00e f87a 	bl	8030968 <CDC_Transmit_HS>
  }
  else
  {
    return 0;
  }
  return 1;
 8022874:	2301      	movs	r3, #1
 8022876:	e000      	b.n	802287a <CDC_Send_DATA+0x2a>
    return 0;
 8022878:	2300      	movs	r3, #0
}
 802287a:	4618      	mov	r0, r3
 802287c:	3708      	adds	r7, #8
 802287e:	46bd      	mov	sp, r7
 8022880:	bd80      	pop	{r7, pc}
 8022882:	bf00      	nop
 8022884:	20000014 	.word	0x20000014

08022888 <CDC_Receive_DATA>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
uint32_t CDC_Receive_DATA(void)
{
 8022888:	b580      	push	{r7, lr}
 802288a:	af00      	add	r7, sp, #0
  USBD_CtlReceiveStatus(&hUsbDeviceHS);
 802288c:	4802      	ldr	r0, [pc, #8]	; (8022898 <CDC_Receive_DATA+0x10>)
 802288e:	f00d feba 	bl	8030606 <USBD_CtlReceiveStatus>
  return 1 ;
 8022892:	2301      	movs	r3, #1
}
 8022894:	4618      	mov	r0, r3
 8022896:	bd80      	pop	{r7, pc}
 8022898:	20005220 	.word	0x20005220

0802289c <CDC_IsPacketSent>:
* Input          : None.
* Output         : None.
* Return         : 1/0.
*******************************************************************************/
int CDC_IsPacketSent(void)
{
 802289c:	b480      	push	{r7}
 802289e:	af00      	add	r7, sp, #0
  return packet_sent;
 80228a0:	4b03      	ldr	r3, [pc, #12]	; (80228b0 <CDC_IsPacketSent+0x14>)
 80228a2:	681b      	ldr	r3, [r3, #0]
}
 80228a4:	4618      	mov	r0, r3
 80228a6:	46bd      	mov	sp, r7
 80228a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228ac:	4770      	bx	lr
 80228ae:	bf00      	nop
 80228b0:	20000014 	.word	0x20000014

080228b4 <is_external_clock_avail>:
 */

#include "clock.h"
#include <stm32f4xx.h>

bool is_external_clock_avail() {
 80228b4:	b480      	push	{r7}
 80228b6:	af00      	add	r7, sp, #0
	return (RCC->CR & RCC_CR_HSERDY) != RESET;
 80228b8:	4b06      	ldr	r3, [pc, #24]	; (80228d4 <is_external_clock_avail+0x20>)
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	bf14      	ite	ne
 80228c4:	2301      	movne	r3, #1
 80228c6:	2300      	moveq	r3, #0
 80228c8:	b2db      	uxtb	r3, r3
}
 80228ca:	4618      	mov	r0, r3
 80228cc:	46bd      	mov	sp, r7
 80228ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d2:	4770      	bx	lr
 80228d4:	40023800 	.word	0x40023800

080228d8 <flash_page_erase>:
#include "stm32f4xx_hal.h"
#include <string.h>

// 擦除指定页的Flash存储器
int flash_page_erase(uint32_t page_addr)
{
 80228d8:	b580      	push	{r7, lr}
 80228da:	b088      	sub	sp, #32
 80228dc:	af00      	add	r7, sp, #0
 80228de:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase_init;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 80228e0:	f005 fa6c 	bl	8027dbc <HAL_FLASH_Unlock>

    // 配置擦除初始化结构体
    erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 80228e4:	2300      	movs	r3, #0
 80228e6:	60bb      	str	r3, [r7, #8]
    erase_init.Sector = FLASH_SECTOR_0; // 选择要擦除的扇区，可以根据您的需求更改
 80228e8:	2300      	movs	r3, #0
 80228ea:	613b      	str	r3, [r7, #16]
    erase_init.NbSectors = 1; // 要擦除的扇区数量
 80228ec:	2301      	movs	r3, #1
 80228ee:	617b      	str	r3, [r7, #20]
    erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3; // 选择电压范围，可以根据您的需求更改
 80228f0:	2302      	movs	r3, #2
 80228f2:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&erase_init, NULL); // 擦除指定页
 80228f4:	f107 0308 	add.w	r3, r7, #8
 80228f8:	2100      	movs	r1, #0
 80228fa:	4618      	mov	r0, r3
 80228fc:	f005 fbc0 	bl	8028080 <HAL_FLASHEx_Erase>
 8022900:	4603      	mov	r3, r0
 8022902:	77fb      	strb	r3, [r7, #31]

    // 锁定Flash存储器
    HAL_FLASH_Lock();
 8022904:	f005 fa7c 	bl	8027e00 <HAL_FLASH_Lock>

    return status != HAL_OK ? -1 : 0;
 8022908:	7ffb      	ldrb	r3, [r7, #31]
 802290a:	2b00      	cmp	r3, #0
 802290c:	d002      	beq.n	8022914 <flash_page_erase+0x3c>
 802290e:	f04f 33ff 	mov.w	r3, #4294967295
 8022912:	e000      	b.n	8022916 <flash_page_erase+0x3e>
 8022914:	2300      	movs	r3, #0
}
 8022916:	4618      	mov	r0, r3
 8022918:	3720      	adds	r7, #32
 802291a:	46bd      	mov	sp, r7
 802291c:	bd80      	pop	{r7, pc}

0802291e <flash_write>:

// 向Flash存储器写入数据
int flash_write(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 802291e:	b5b0      	push	{r4, r5, r7, lr}
 8022920:	b088      	sub	sp, #32
 8022922:	af00      	add	r7, sp, #0
 8022924:	60f8      	str	r0, [r7, #12]
 8022926:	60b9      	str	r1, [r7, #8]
 8022928:	607a      	str	r2, [r7, #4]
    int ret = -1;
 802292a:	f04f 33ff 	mov.w	r3, #4294967295
 802292e:	61fb      	str	r3, [r7, #28]
    uint32_t data_word;
    uint32_t i;

    // 解锁Flash存储器
    HAL_FLASH_Unlock();
 8022930:	f005 fa44 	bl	8027dbc <HAL_FLASH_Unlock>

    for (i = 0; i < data_len; i += 4)
 8022934:	2300      	movs	r3, #0
 8022936:	61bb      	str	r3, [r7, #24]
 8022938:	e017      	b.n	802296a <flash_write+0x4c>
    {
        // 从数据缓冲区中读取32位字
        memcpy(&data_word, &data[i], 4);
 802293a:	68ba      	ldr	r2, [r7, #8]
 802293c:	69bb      	ldr	r3, [r7, #24]
 802293e:	4413      	add	r3, r2
 8022940:	681b      	ldr	r3, [r3, #0]
 8022942:	617b      	str	r3, [r7, #20]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data_word) != HAL_OK)
 8022944:	697b      	ldr	r3, [r7, #20]
 8022946:	2200      	movs	r2, #0
 8022948:	461c      	mov	r4, r3
 802294a:	4615      	mov	r5, r2
 802294c:	4622      	mov	r2, r4
 802294e:	462b      	mov	r3, r5
 8022950:	68f9      	ldr	r1, [r7, #12]
 8022952:	2002      	movs	r0, #2
 8022954:	f005 f92a 	bl	8027bac <HAL_FLASH_Program>
 8022958:	4603      	mov	r3, r0
 802295a:	2b00      	cmp	r3, #0
 802295c:	d10c      	bne.n	8022978 <flash_write+0x5a>
            goto Exit;

        addr += 4; // 更新地址，指向下一个32位字
 802295e:	68fb      	ldr	r3, [r7, #12]
 8022960:	3304      	adds	r3, #4
 8022962:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < data_len; i += 4)
 8022964:	69bb      	ldr	r3, [r7, #24]
 8022966:	3304      	adds	r3, #4
 8022968:	61bb      	str	r3, [r7, #24]
 802296a:	69ba      	ldr	r2, [r7, #24]
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	429a      	cmp	r2, r3
 8022970:	d3e3      	bcc.n	802293a <flash_write+0x1c>
    }

    ret = data_len;
 8022972:	687b      	ldr	r3, [r7, #4]
 8022974:	61fb      	str	r3, [r7, #28]
 8022976:	e000      	b.n	802297a <flash_write+0x5c>
            goto Exit;
 8022978:	bf00      	nop
Exit:
    // 锁定Flash存储器
    HAL_FLASH_Lock();
 802297a:	f005 fa41 	bl	8027e00 <HAL_FLASH_Lock>

    return ret;
 802297e:	69fb      	ldr	r3, [r7, #28]
}
 8022980:	4618      	mov	r0, r3
 8022982:	3720      	adds	r7, #32
 8022984:	46bd      	mov	sp, r7
 8022986:	bdb0      	pop	{r4, r5, r7, pc}

08022988 <flash_read>:

// 从Flash存储器读取数据
int flash_read(uint32_t addr, uint8_t *data, uint32_t data_len)
{
 8022988:	b480      	push	{r7}
 802298a:	b087      	sub	sp, #28
 802298c:	af00      	add	r7, sp, #0
 802298e:	60f8      	str	r0, [r7, #12]
 8022990:	60b9      	str	r1, [r7, #8]
 8022992:	607a      	str	r2, [r7, #4]
    uint32_t i;

    for (i = 0; i < data_len; i++)
 8022994:	2300      	movs	r3, #0
 8022996:	617b      	str	r3, [r7, #20]
 8022998:	e00c      	b.n	80229b4 <flash_read+0x2c>
    {
        data[i] = *(__IO uint8_t *)(addr + i); // 从Flash存储器中读取字节数据
 802299a:	68fa      	ldr	r2, [r7, #12]
 802299c:	697b      	ldr	r3, [r7, #20]
 802299e:	4413      	add	r3, r2
 80229a0:	4619      	mov	r1, r3
 80229a2:	68ba      	ldr	r2, [r7, #8]
 80229a4:	697b      	ldr	r3, [r7, #20]
 80229a6:	4413      	add	r3, r2
 80229a8:	780a      	ldrb	r2, [r1, #0]
 80229aa:	b2d2      	uxtb	r2, r2
 80229ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_len; i++)
 80229ae:	697b      	ldr	r3, [r7, #20]
 80229b0:	3301      	adds	r3, #1
 80229b2:	617b      	str	r3, [r7, #20]
 80229b4:	697a      	ldr	r2, [r7, #20]
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	429a      	cmp	r2, r3
 80229ba:	d3ee      	bcc.n	802299a <flash_read+0x12>
    }

    return i;
 80229bc:	697b      	ldr	r3, [r7, #20]
}
 80229be:	4618      	mov	r0, r3
 80229c0:	371c      	adds	r7, #28
 80229c2:	46bd      	mov	sp, r7
 80229c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c8:	4770      	bx	lr
	...

080229cc <MX_FSMC_Init>:

NAND_HandleTypeDef hnand1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b088      	sub	sp, #32
 80229d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80229d2:	f107 0310 	add.w	r3, r7, #16
 80229d6:	2200      	movs	r2, #0
 80229d8:	601a      	str	r2, [r3, #0]
 80229da:	605a      	str	r2, [r3, #4]
 80229dc:	609a      	str	r2, [r3, #8]
 80229de:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80229e0:	463b      	mov	r3, r7
 80229e2:	2200      	movs	r2, #0
 80229e4:	601a      	str	r2, [r3, #0]
 80229e6:	605a      	str	r2, [r3, #4]
 80229e8:	609a      	str	r2, [r3, #8]
 80229ea:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 80229ec:	4b26      	ldr	r3, [pc, #152]	; (8022a88 <MX_FSMC_Init+0xbc>)
 80229ee:	4a27      	ldr	r2, [pc, #156]	; (8022a8c <MX_FSMC_Init+0xc0>)
 80229f0:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80229f2:	4b25      	ldr	r3, [pc, #148]	; (8022a88 <MX_FSMC_Init+0xbc>)
 80229f4:	2210      	movs	r2, #16
 80229f6:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 80229f8:	4b23      	ldr	r3, [pc, #140]	; (8022a88 <MX_FSMC_Init+0xbc>)
 80229fa:	2202      	movs	r2, #2
 80229fc:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_16;
 80229fe:	4b22      	ldr	r3, [pc, #136]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a00:	2210      	movs	r2, #16
 8022a02:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8022a04:	4b20      	ldr	r3, [pc, #128]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a06:	2200      	movs	r2, #0
 8022a08:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8022a0a:	4b1f      	ldr	r3, [pc, #124]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a0c:	2200      	movs	r2, #0
 8022a0e:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 1;
 8022a10:	4b1d      	ldr	r3, [pc, #116]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a12:	2201      	movs	r2, #1
 8022a14:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 2;
 8022a16:	4b1c      	ldr	r3, [pc, #112]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a18:	2202      	movs	r2, #2
 8022a1a:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8022a1c:	4b1a      	ldr	r3, [pc, #104]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a1e:	2200      	movs	r2, #0
 8022a20:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 8022a22:	4b19      	ldr	r3, [pc, #100]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a24:	2200      	movs	r2, #0
 8022a26:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8022a28:	4b17      	ldr	r3, [pc, #92]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a2a:	2200      	movs	r2, #0
 8022a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8022a2e:	4b16      	ldr	r3, [pc, #88]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a30:	2200      	movs	r2, #0
 8022a32:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8022a34:	4b14      	ldr	r3, [pc, #80]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a36:	2200      	movs	r2, #0
 8022a38:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8022a3a:	4b13      	ldr	r3, [pc, #76]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a3c:	2200      	movs	r2, #0
 8022a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8022a40:	4b11      	ldr	r3, [pc, #68]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a42:	2200      	movs	r2, #0
 8022a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8022a48:	23fc      	movs	r3, #252	; 0xfc
 8022a4a:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8022a4c:	23fc      	movs	r3, #252	; 0xfc
 8022a4e:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8022a50:	23fc      	movs	r3, #252	; 0xfc
 8022a52:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8022a54:	23fc      	movs	r3, #252	; 0xfc
 8022a56:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8022a58:	23fc      	movs	r3, #252	; 0xfc
 8022a5a:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8022a5c:	23fc      	movs	r3, #252	; 0xfc
 8022a5e:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8022a60:	23fc      	movs	r3, #252	; 0xfc
 8022a62:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 8022a64:	23fc      	movs	r3, #252	; 0xfc
 8022a66:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8022a68:	463a      	mov	r2, r7
 8022a6a:	f107 0310 	add.w	r3, r7, #16
 8022a6e:	4619      	mov	r1, r3
 8022a70:	4805      	ldr	r0, [pc, #20]	; (8022a88 <MX_FSMC_Init+0xbc>)
 8022a72:	f005 fed8 	bl	8028826 <HAL_NAND_Init>
 8022a76:	4603      	mov	r3, r0
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d001      	beq.n	8022a80 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8022a7c:	f000 ffe8 	bl	8023a50 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8022a80:	bf00      	nop
 8022a82:	3720      	adds	r7, #32
 8022a84:	46bd      	mov	sp, r7
 8022a86:	bd80      	pop	{r7, pc}
 8022a88:	20000c04 	.word	0x20000c04
 8022a8c:	a0000060 	.word	0xa0000060

08022a90 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8022a90:	b580      	push	{r7, lr}
 8022a92:	b086      	sub	sp, #24
 8022a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022a96:	1d3b      	adds	r3, r7, #4
 8022a98:	2200      	movs	r2, #0
 8022a9a:	601a      	str	r2, [r3, #0]
 8022a9c:	605a      	str	r2, [r3, #4]
 8022a9e:	609a      	str	r2, [r3, #8]
 8022aa0:	60da      	str	r2, [r3, #12]
 8022aa2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8022aa4:	4b20      	ldr	r3, [pc, #128]	; (8022b28 <HAL_FSMC_MspInit+0x98>)
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	2b00      	cmp	r3, #0
 8022aaa:	d139      	bne.n	8022b20 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8022aac:	4b1e      	ldr	r3, [pc, #120]	; (8022b28 <HAL_FSMC_MspInit+0x98>)
 8022aae:	2201      	movs	r2, #1
 8022ab0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	603b      	str	r3, [r7, #0]
 8022ab6:	4b1d      	ldr	r3, [pc, #116]	; (8022b2c <HAL_FSMC_MspInit+0x9c>)
 8022ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022aba:	4a1c      	ldr	r2, [pc, #112]	; (8022b2c <HAL_FSMC_MspInit+0x9c>)
 8022abc:	f043 0301 	orr.w	r3, r3, #1
 8022ac0:	6393      	str	r3, [r2, #56]	; 0x38
 8022ac2:	4b1a      	ldr	r3, [pc, #104]	; (8022b2c <HAL_FSMC_MspInit+0x9c>)
 8022ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022ac6:	f003 0301 	and.w	r3, r3, #1
 8022aca:	603b      	str	r3, [r7, #0]
 8022acc:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8022ace:	f64f 7380 	movw	r3, #65408	; 0xff80
 8022ad2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022ad4:	2302      	movs	r3, #2
 8022ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022ad8:	2300      	movs	r3, #0
 8022ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022adc:	2303      	movs	r3, #3
 8022ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022ae0:	230c      	movs	r3, #12
 8022ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022ae4:	1d3b      	adds	r3, r7, #4
 8022ae6:	4619      	mov	r1, r3
 8022ae8:	4811      	ldr	r0, [pc, #68]	; (8022b30 <HAL_FSMC_MspInit+0xa0>)
 8022aea:	f005 fbeb 	bl	80282c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8022aee:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8022af2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022af4:	2302      	movs	r3, #2
 8022af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022af8:	2300      	movs	r3, #0
 8022afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022afc:	2303      	movs	r3, #3
 8022afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022b00:	230c      	movs	r3, #12
 8022b02:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022b04:	1d3b      	adds	r3, r7, #4
 8022b06:	4619      	mov	r1, r3
 8022b08:	480a      	ldr	r0, [pc, #40]	; (8022b34 <HAL_FSMC_MspInit+0xa4>)
 8022b0a:	f005 fbdb 	bl	80282c4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022b0e:	2200      	movs	r2, #0
 8022b10:	2100      	movs	r1, #0
 8022b12:	2030      	movs	r0, #48	; 0x30
 8022b14:	f004 ff73 	bl	80279fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022b18:	2030      	movs	r0, #48	; 0x30
 8022b1a:	f004 ff8c 	bl	8027a36 <HAL_NVIC_EnableIRQ>
 8022b1e:	e000      	b.n	8022b22 <HAL_FSMC_MspInit+0x92>
    return;
 8022b20:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8022b22:	3718      	adds	r7, #24
 8022b24:	46bd      	mov	sp, r7
 8022b26:	bd80      	pop	{r7, pc}
 8022b28:	20000c44 	.word	0x20000c44
 8022b2c:	40023800 	.word	0x40023800
 8022b30:	40021000 	.word	0x40021000
 8022b34:	40020c00 	.word	0x40020c00

08022b38 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* nandHandle){
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b082      	sub	sp, #8
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8022b40:	f7ff ffa6 	bl	8022a90 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8022b44:	bf00      	nop
 8022b46:	3708      	adds	r7, #8
 8022b48:	46bd      	mov	sp, r7
 8022b4a:	bd80      	pop	{r7, pc}

08022b4c <nand_gpio_init>:
static fsmc_conf_t fsmc_conf;   // FSMC NAND Flash的配置结构体

static uint32_t FSMC_Initialized = 0;

static void nand_gpio_init(void)
{
 8022b4c:	b580      	push	{r7, lr}
 8022b4e:	b086      	sub	sp, #24
 8022b50:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022b52:	1d3b      	adds	r3, r7, #4
 8022b54:	2200      	movs	r2, #0
 8022b56:	601a      	str	r2, [r3, #0]
 8022b58:	605a      	str	r2, [r3, #4]
 8022b5a:	609a      	str	r2, [r3, #8]
 8022b5c:	60da      	str	r2, [r3, #12]
 8022b5e:	611a      	str	r2, [r3, #16]
	  if (FSMC_Initialized) {
 8022b60:	4b20      	ldr	r3, [pc, #128]	; (8022be4 <nand_gpio_init+0x98>)
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	2b00      	cmp	r3, #0
 8022b66:	d139      	bne.n	8022bdc <nand_gpio_init+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8022b68:	4b1e      	ldr	r3, [pc, #120]	; (8022be4 <nand_gpio_init+0x98>)
 8022b6a:	2201      	movs	r2, #1
 8022b6c:	601a      	str	r2, [r3, #0]

	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 8022b6e:	2300      	movs	r3, #0
 8022b70:	603b      	str	r3, [r7, #0]
 8022b72:	4b1d      	ldr	r3, [pc, #116]	; (8022be8 <nand_gpio_init+0x9c>)
 8022b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b76:	4a1c      	ldr	r2, [pc, #112]	; (8022be8 <nand_gpio_init+0x9c>)
 8022b78:	f043 0301 	orr.w	r3, r3, #1
 8022b7c:	6393      	str	r3, [r2, #56]	; 0x38
 8022b7e:	4b1a      	ldr	r3, [pc, #104]	; (8022be8 <nand_gpio_init+0x9c>)
 8022b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b82:	f003 0301 	and.w	r3, r3, #1
 8022b86:	603b      	str	r3, [r7, #0]
 8022b88:	683b      	ldr	r3, [r7, #0]
	  PD5   ------> FSMC_NWE
	  PD6   ------> FSMC_NWAIT
	  PD7   ------> FSMC_NCE2
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8022b8a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8022b8e:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022b90:	2302      	movs	r3, #2
 8022b92:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022b94:	2300      	movs	r3, #0
 8022b96:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022b98:	2303      	movs	r3, #3
 8022b9a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022b9c:	230c      	movs	r3, #12
 8022b9e:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8022ba0:	1d3b      	adds	r3, r7, #4
 8022ba2:	4619      	mov	r1, r3
 8022ba4:	4811      	ldr	r0, [pc, #68]	; (8022bec <nand_gpio_init+0xa0>)
 8022ba6:	f005 fb8d 	bl	80282c4 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8022baa:	f64d 73f3 	movw	r3, #57331	; 0xdff3
 8022bae:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
	                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
	                          |GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022bb0:	2302      	movs	r3, #2
 8022bb2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022bb8:	2303      	movs	r3, #3
 8022bba:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8022bbc:	230c      	movs	r3, #12
 8022bbe:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022bc0:	1d3b      	adds	r3, r7, #4
 8022bc2:	4619      	mov	r1, r3
 8022bc4:	480a      	ldr	r0, [pc, #40]	; (8022bf0 <nand_gpio_init+0xa4>)
 8022bc6:	f005 fb7d 	bl	80282c4 <HAL_GPIO_Init>

	  /* Peripheral interrupt init */
	  HAL_NVIC_SetPriority(FSMC_IRQn, 0, 0);
 8022bca:	2200      	movs	r2, #0
 8022bcc:	2100      	movs	r1, #0
 8022bce:	2030      	movs	r0, #48	; 0x30
 8022bd0:	f004 ff15 	bl	80279fe <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8022bd4:	2030      	movs	r0, #48	; 0x30
 8022bd6:	f004 ff2e 	bl	8027a36 <HAL_NVIC_EnableIRQ>
 8022bda:	e000      	b.n	8022bde <nand_gpio_init+0x92>
	    return;
 8022bdc:	bf00      	nop
	  /* USER CODE BEGIN FSMC_MspInit 1 */

	  /* USER CODE END FSMC_MspInit 1 */
}
 8022bde:	3718      	adds	r7, #24
 8022be0:	46bd      	mov	sp, r7
 8022be2:	bd80      	pop	{r7, pc}
 8022be4:	20000c60 	.word	0x20000c60
 8022be8:	40023800 	.word	0x40023800
 8022bec:	40021000 	.word	0x40021000
 8022bf0:	40020c00 	.word	0x40020c00

08022bf4 <nand_fsmc_init>:


static void nand_fsmc_init()
{
 8022bf4:	b580      	push	{r7, lr}
 8022bf6:	b08a      	sub	sp, #40	; 0x28
 8022bf8:	af00      	add	r7, sp, #0
//    FSMC_NAND_InitTypeDef fsmc_init;

//    FSMC_NAND_PCC_TimingTypeDef timing_init;
    FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8022bfa:	f107 0318 	add.w	r3, r7, #24
 8022bfe:	2200      	movs	r2, #0
 8022c00:	601a      	str	r2, [r3, #0]
 8022c02:	605a      	str	r2, [r3, #4]
 8022c04:	609a      	str	r2, [r3, #8]
 8022c06:	60da      	str	r2, [r3, #12]
    FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8022c08:	f107 0308 	add.w	r3, r7, #8
 8022c0c:	2200      	movs	r2, #0
 8022c0e:	601a      	str	r2, [r3, #0]
 8022c10:	605a      	str	r2, [r3, #4]
 8022c12:	609a      	str	r2, [r3, #8]
 8022c14:	60da      	str	r2, [r3, #12]

//    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
//    __HAL_RCC_FSMC_CLK_ENABLE();

    hnand1.Instance = FSMC_NAND_DEVICE;
 8022c16:	4b29      	ldr	r3, [pc, #164]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c18:	4a29      	ldr	r2, [pc, #164]	; (8022cc0 <nand_fsmc_init+0xcc>)
 8022c1a:	601a      	str	r2, [r3, #0]
//    fsmc_init.FSMC_Bank = FSMC_Bank2_NAND;  // 设置FSMC NAND Flash的相关参数
    hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8022c1c:	4b27      	ldr	r3, [pc, #156]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c1e:	2210      	movs	r2, #16
 8022c20:	605a      	str	r2, [r3, #4]
//    fsmc_init.FSMC_Waitfeature = FSMC_Waitfeature_Enable;
    hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8022c22:	4b26      	ldr	r3, [pc, #152]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c24:	2202      	movs	r2, #2
 8022c26:	609a      	str	r2, [r3, #8]
//    fsmc_init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
    hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8022c28:	4b24      	ldr	r3, [pc, #144]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c2a:	2200      	movs	r2, #0
 8022c2c:	60da      	str	r2, [r3, #12]
//    fsmc_init.FSMC_ECC = FSMC_ECC_Enable;
    hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8022c2e:	4b23      	ldr	r3, [pc, #140]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c30:	2200      	movs	r2, #0
 8022c32:	611a      	str	r2, [r3, #16]
//    fsmc_init.FSMC_ECCPageSize = FSMC_ECCPageSize_2048Bytes;
    hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8022c34:	4b21      	ldr	r3, [pc, #132]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c36:	2200      	movs	r2, #0
 8022c38:	615a      	str	r2, [r3, #20]
//    fsmc_init.FSMC_TCLRSetupTime = fsmc_conf.clr_setup_time;
    hnand1.Init.TCLRSetupTime = fsmc_conf.clr_setup_time;
 8022c3a:	4b22      	ldr	r3, [pc, #136]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c3c:	791b      	ldrb	r3, [r3, #4]
 8022c3e:	461a      	mov	r2, r3
 8022c40:	4b1e      	ldr	r3, [pc, #120]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c42:	619a      	str	r2, [r3, #24]
//    fsmc_init.FSMC_TARSetupTime = fsmc_conf.ar_setup_time;
    hnand1.Init.TARSetupTime = fsmc_conf.ar_setup_time;
 8022c44:	4b1f      	ldr	r3, [pc, #124]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c46:	795b      	ldrb	r3, [r3, #5]
 8022c48:	461a      	mov	r2, r3
 8022c4a:	4b1c      	ldr	r3, [pc, #112]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c4c:	61da      	str	r2, [r3, #28]
    /* ComSpaceTiming */
//    timing_init.FSMC_SetupTime = fsmc_conf.setup_time;  // 设置时序参数
    ComSpaceTiming.SetupTime = fsmc_conf.setup_time;  // 设置时序参数
 8022c4e:	4b1d      	ldr	r3, [pc, #116]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c50:	781b      	ldrb	r3, [r3, #0]
 8022c52:	61bb      	str	r3, [r7, #24]
//    timing_init.FSMC_WaitSetupTime = fsmc_conf.wait_setup_time;
    ComSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8022c54:	4b1b      	ldr	r3, [pc, #108]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c56:	785b      	ldrb	r3, [r3, #1]
 8022c58:	61fb      	str	r3, [r7, #28]
//    timing_init.FSMC_HoldSetupTime = fsmc_conf.hold_setup_time;
    ComSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8022c5a:	4b1a      	ldr	r3, [pc, #104]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c5c:	789b      	ldrb	r3, [r3, #2]
 8022c5e:	623b      	str	r3, [r7, #32]
//    timing_init.FSMC_HiZSetupTime = fsmc_conf.hi_z_setup_time;
    ComSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8022c60:	4b18      	ldr	r3, [pc, #96]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c62:	78db      	ldrb	r3, [r3, #3]
 8022c64:	627b      	str	r3, [r7, #36]	; 0x24
    /* AttSpaceTiming */
    AttSpaceTiming.SetupTime = fsmc_conf.setup_time;
 8022c66:	4b17      	ldr	r3, [pc, #92]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c68:	781b      	ldrb	r3, [r3, #0]
 8022c6a:	60bb      	str	r3, [r7, #8]
    AttSpaceTiming.WaitSetupTime = fsmc_conf.wait_setup_time;
 8022c6c:	4b15      	ldr	r3, [pc, #84]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c6e:	785b      	ldrb	r3, [r3, #1]
 8022c70:	60fb      	str	r3, [r7, #12]
    AttSpaceTiming.HoldSetupTime = fsmc_conf.hold_setup_time;
 8022c72:	4b14      	ldr	r3, [pc, #80]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c74:	789b      	ldrb	r3, [r3, #2]
 8022c76:	613b      	str	r3, [r7, #16]
    AttSpaceTiming.HiZSetupTime = fsmc_conf.hi_z_setup_time;
 8022c78:	4b12      	ldr	r3, [pc, #72]	; (8022cc4 <nand_fsmc_init+0xd0>)
 8022c7a:	78db      	ldrb	r3, [r3, #3]
 8022c7c:	617b      	str	r3, [r7, #20]

    if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8022c7e:	f107 0208 	add.w	r2, r7, #8
 8022c82:	f107 0318 	add.w	r3, r7, #24
 8022c86:	4619      	mov	r1, r3
 8022c88:	480c      	ldr	r0, [pc, #48]	; (8022cbc <nand_fsmc_init+0xc8>)
 8022c8a:	f005 fdcc 	bl	8028826 <HAL_NAND_Init>
 8022c8e:	4603      	mov	r3, r0
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d001      	beq.n	8022c98 <nand_fsmc_init+0xa4>
    {
      Error_Handler( );
 8022c94:	f000 fedc 	bl	8023a50 <Error_Handler>
    }  // 初始化FSMC NAND Flash

//    FSMC_NANDCmd(FSMC_Bank_NAND, ENABLE);  // 使能FSMC NAND Flash
    __HAL_RCC_FSMC_CLK_ENABLE();
 8022c98:	2300      	movs	r3, #0
 8022c9a:	607b      	str	r3, [r7, #4]
 8022c9c:	4b0a      	ldr	r3, [pc, #40]	; (8022cc8 <nand_fsmc_init+0xd4>)
 8022c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022ca0:	4a09      	ldr	r2, [pc, #36]	; (8022cc8 <nand_fsmc_init+0xd4>)
 8022ca2:	f043 0301 	orr.w	r3, r3, #1
 8022ca6:	6393      	str	r3, [r2, #56]	; 0x38
 8022ca8:	4b07      	ldr	r3, [pc, #28]	; (8022cc8 <nand_fsmc_init+0xd4>)
 8022caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022cac:	f003 0301 	and.w	r3, r3, #1
 8022cb0:	607b      	str	r3, [r7, #4]
 8022cb2:	687b      	ldr	r3, [r7, #4]
}
 8022cb4:	bf00      	nop
 8022cb6:	3728      	adds	r7, #40	; 0x28
 8022cb8:	46bd      	mov	sp, r7
 8022cba:	bd80      	pop	{r7, pc}
 8022cbc:	20000c04 	.word	0x20000c04
 8022cc0:	a0000060 	.word	0xa0000060
 8022cc4:	20000c48 	.word	0x20000c48
 8022cc8:	40023800 	.word	0x40023800

08022ccc <nand_print_fsmc_info>:

static void nand_print_fsmc_info()
{
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	af00      	add	r7, sp, #0
    DEBUG_PRINT("Setup time: %d\r\n", fsmc_conf.setup_time);
 8022cd0:	4b42      	ldr	r3, [pc, #264]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	4619      	mov	r1, r3
 8022cd6:	4842      	ldr	r0, [pc, #264]	; (8022de0 <nand_print_fsmc_info+0x114>)
 8022cd8:	f00e fcea 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Wait setup time: %d\r\n", fsmc_conf.wait_setup_time);
 8022cdc:	4b3f      	ldr	r3, [pc, #252]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022cde:	785b      	ldrb	r3, [r3, #1]
 8022ce0:	4619      	mov	r1, r3
 8022ce2:	4840      	ldr	r0, [pc, #256]	; (8022de4 <nand_print_fsmc_info+0x118>)
 8022ce4:	f00e fce4 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Hold setup time: %d\r\n", fsmc_conf.hold_setup_time);
 8022ce8:	4b3c      	ldr	r3, [pc, #240]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022cea:	789b      	ldrb	r3, [r3, #2]
 8022cec:	4619      	mov	r1, r3
 8022cee:	483e      	ldr	r0, [pc, #248]	; (8022de8 <nand_print_fsmc_info+0x11c>)
 8022cf0:	f00e fcde 	bl	80316b0 <iprintf>
    DEBUG_PRINT("HiZ setup time: %d\r\n", fsmc_conf.hi_z_setup_time);
 8022cf4:	4b39      	ldr	r3, [pc, #228]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022cf6:	78db      	ldrb	r3, [r3, #3]
 8022cf8:	4619      	mov	r1, r3
 8022cfa:	483c      	ldr	r0, [pc, #240]	; (8022dec <nand_print_fsmc_info+0x120>)
 8022cfc:	f00e fcd8 	bl	80316b0 <iprintf>
    DEBUG_PRINT("CLR setup time: %d\r\n", fsmc_conf.clr_setup_time);
 8022d00:	4b36      	ldr	r3, [pc, #216]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d02:	791b      	ldrb	r3, [r3, #4]
 8022d04:	4619      	mov	r1, r3
 8022d06:	483a      	ldr	r0, [pc, #232]	; (8022df0 <nand_print_fsmc_info+0x124>)
 8022d08:	f00e fcd2 	bl	80316b0 <iprintf>
    DEBUG_PRINT("AR setup time: %d\r\n", fsmc_conf.ar_setup_time);
 8022d0c:	4b33      	ldr	r3, [pc, #204]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d0e:	795b      	ldrb	r3, [r3, #5]
 8022d10:	4619      	mov	r1, r3
 8022d12:	4838      	ldr	r0, [pc, #224]	; (8022df4 <nand_print_fsmc_info+0x128>)
 8022d14:	f00e fccc 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Row cycles: %d\r\n", fsmc_conf.row_cycles);
 8022d18:	4b30      	ldr	r3, [pc, #192]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d1a:	799b      	ldrb	r3, [r3, #6]
 8022d1c:	4619      	mov	r1, r3
 8022d1e:	4836      	ldr	r0, [pc, #216]	; (8022df8 <nand_print_fsmc_info+0x12c>)
 8022d20:	f00e fcc6 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Col. cycles: %d\r\n", fsmc_conf.col_cycles);
 8022d24:	4b2d      	ldr	r3, [pc, #180]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d26:	79db      	ldrb	r3, [r3, #7]
 8022d28:	4619      	mov	r1, r3
 8022d2a:	4834      	ldr	r0, [pc, #208]	; (8022dfc <nand_print_fsmc_info+0x130>)
 8022d2c:	f00e fcc0 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Read command 1: %d\r\n", fsmc_conf.read1_cmd);
 8022d30:	4b2a      	ldr	r3, [pc, #168]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d32:	7a1b      	ldrb	r3, [r3, #8]
 8022d34:	4619      	mov	r1, r3
 8022d36:	4832      	ldr	r0, [pc, #200]	; (8022e00 <nand_print_fsmc_info+0x134>)
 8022d38:	f00e fcba 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Read command 2: %d\r\n", fsmc_conf.read2_cmd);
 8022d3c:	4b27      	ldr	r3, [pc, #156]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d3e:	7a5b      	ldrb	r3, [r3, #9]
 8022d40:	4619      	mov	r1, r3
 8022d42:	4830      	ldr	r0, [pc, #192]	; (8022e04 <nand_print_fsmc_info+0x138>)
 8022d44:	f00e fcb4 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Read spare command: %d\r\n", fsmc_conf.read_spare_cmd);    
 8022d48:	4b24      	ldr	r3, [pc, #144]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d4a:	7a9b      	ldrb	r3, [r3, #10]
 8022d4c:	4619      	mov	r1, r3
 8022d4e:	482e      	ldr	r0, [pc, #184]	; (8022e08 <nand_print_fsmc_info+0x13c>)
 8022d50:	f00e fcae 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Read ID command: %d\r\n", fsmc_conf.read_id_cmd);
 8022d54:	4b21      	ldr	r3, [pc, #132]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d56:	7adb      	ldrb	r3, [r3, #11]
 8022d58:	4619      	mov	r1, r3
 8022d5a:	482c      	ldr	r0, [pc, #176]	; (8022e0c <nand_print_fsmc_info+0x140>)
 8022d5c:	f00e fca8 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Reset command: %d\r\n", fsmc_conf.reset_cmd);
 8022d60:	4b1e      	ldr	r3, [pc, #120]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d62:	7b1b      	ldrb	r3, [r3, #12]
 8022d64:	4619      	mov	r1, r3
 8022d66:	482a      	ldr	r0, [pc, #168]	; (8022e10 <nand_print_fsmc_info+0x144>)
 8022d68:	f00e fca2 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Write 1 command: %d\r\n", fsmc_conf.write1_cmd);
 8022d6c:	4b1b      	ldr	r3, [pc, #108]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d6e:	7b5b      	ldrb	r3, [r3, #13]
 8022d70:	4619      	mov	r1, r3
 8022d72:	4828      	ldr	r0, [pc, #160]	; (8022e14 <nand_print_fsmc_info+0x148>)
 8022d74:	f00e fc9c 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Write 2 command: %d\r\n", fsmc_conf.write2_cmd);
 8022d78:	4b18      	ldr	r3, [pc, #96]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d7a:	7b9b      	ldrb	r3, [r3, #14]
 8022d7c:	4619      	mov	r1, r3
 8022d7e:	4826      	ldr	r0, [pc, #152]	; (8022e18 <nand_print_fsmc_info+0x14c>)
 8022d80:	f00e fc96 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Erase 1 command: %d\r\n", fsmc_conf.erase1_cmd);
 8022d84:	4b15      	ldr	r3, [pc, #84]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d86:	7bdb      	ldrb	r3, [r3, #15]
 8022d88:	4619      	mov	r1, r3
 8022d8a:	4824      	ldr	r0, [pc, #144]	; (8022e1c <nand_print_fsmc_info+0x150>)
 8022d8c:	f00e fc90 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Erase 2 command: %d\r\n", fsmc_conf.erase2_cmd);
 8022d90:	4b12      	ldr	r3, [pc, #72]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d92:	7c1b      	ldrb	r3, [r3, #16]
 8022d94:	4619      	mov	r1, r3
 8022d96:	4822      	ldr	r0, [pc, #136]	; (8022e20 <nand_print_fsmc_info+0x154>)
 8022d98:	f00e fc8a 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Status command: %d\r\n", fsmc_conf.status_cmd);
 8022d9c:	4b0f      	ldr	r3, [pc, #60]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022d9e:	7c5b      	ldrb	r3, [r3, #17]
 8022da0:	4619      	mov	r1, r3
 8022da2:	4820      	ldr	r0, [pc, #128]	; (8022e24 <nand_print_fsmc_info+0x158>)
 8022da4:	f00e fc84 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Set feature command: %d\r\n", fsmc_conf.set_features_cmd);
 8022da8:	4b0c      	ldr	r3, [pc, #48]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022daa:	7c9b      	ldrb	r3, [r3, #18]
 8022dac:	4619      	mov	r1, r3
 8022dae:	481e      	ldr	r0, [pc, #120]	; (8022e28 <nand_print_fsmc_info+0x15c>)
 8022db0:	f00e fc7e 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Enable ECC address: %d\r\n", fsmc_conf.enable_ecc_addr);
 8022db4:	4b09      	ldr	r3, [pc, #36]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022db6:	7cdb      	ldrb	r3, [r3, #19]
 8022db8:	4619      	mov	r1, r3
 8022dba:	481c      	ldr	r0, [pc, #112]	; (8022e2c <nand_print_fsmc_info+0x160>)
 8022dbc:	f00e fc78 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Enable ECC value: %d\r\n", fsmc_conf.enable_ecc_value);
 8022dc0:	4b06      	ldr	r3, [pc, #24]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022dc2:	7d1b      	ldrb	r3, [r3, #20]
 8022dc4:	4619      	mov	r1, r3
 8022dc6:	481a      	ldr	r0, [pc, #104]	; (8022e30 <nand_print_fsmc_info+0x164>)
 8022dc8:	f00e fc72 	bl	80316b0 <iprintf>
    DEBUG_PRINT("Disable ECC value: %d\r\n", fsmc_conf.disable_ecc_value);
 8022dcc:	4b03      	ldr	r3, [pc, #12]	; (8022ddc <nand_print_fsmc_info+0x110>)
 8022dce:	7d5b      	ldrb	r3, [r3, #21]
 8022dd0:	4619      	mov	r1, r3
 8022dd2:	4818      	ldr	r0, [pc, #96]	; (8022e34 <nand_print_fsmc_info+0x168>)
 8022dd4:	f00e fc6c 	bl	80316b0 <iprintf>
}
 8022dd8:	bf00      	nop
 8022dda:	bd80      	pop	{r7, pc}
 8022ddc:	20000c48 	.word	0x20000c48
 8022de0:	080324f8 	.word	0x080324f8
 8022de4:	0803250c 	.word	0x0803250c
 8022de8:	08032524 	.word	0x08032524
 8022dec:	0803253c 	.word	0x0803253c
 8022df0:	08032554 	.word	0x08032554
 8022df4:	0803256c 	.word	0x0803256c
 8022df8:	08032580 	.word	0x08032580
 8022dfc:	08032594 	.word	0x08032594
 8022e00:	080325a8 	.word	0x080325a8
 8022e04:	080325c0 	.word	0x080325c0
 8022e08:	080325d8 	.word	0x080325d8
 8022e0c:	080325f4 	.word	0x080325f4
 8022e10:	0803260c 	.word	0x0803260c
 8022e14:	08032620 	.word	0x08032620
 8022e18:	08032638 	.word	0x08032638
 8022e1c:	08032650 	.word	0x08032650
 8022e20:	08032668 	.word	0x08032668
 8022e24:	08032680 	.word	0x08032680
 8022e28:	08032698 	.word	0x08032698
 8022e2c:	080326b4 	.word	0x080326b4
 8022e30:	080326d0 	.word	0x080326d0
 8022e34:	080326e8 	.word	0x080326e8

08022e38 <nand_reset>:

static void nand_reset()
{
 8022e38:	b480      	push	{r7}
 8022e3a:	af00      	add	r7, sp, #0
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.reset_cmd;  // 发送复位命令给NAND Flash
 8022e3c:	4b04      	ldr	r3, [pc, #16]	; (8022e50 <nand_reset+0x18>)
 8022e3e:	4a05      	ldr	r2, [pc, #20]	; (8022e54 <nand_reset+0x1c>)
 8022e40:	7b12      	ldrb	r2, [r2, #12]
 8022e42:	701a      	strb	r2, [r3, #0]
}
 8022e44:	bf00      	nop
 8022e46:	46bd      	mov	sp, r7
 8022e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e4c:	4770      	bx	lr
 8022e4e:	bf00      	nop
 8022e50:	70010000 	.word	0x70010000
 8022e54:	20000c48 	.word	0x20000c48

08022e58 <nand_init>:

static int nand_init(void *conf, uint32_t conf_size)
{
 8022e58:	b5b0      	push	{r4, r5, r7, lr}
 8022e5a:	b082      	sub	sp, #8
 8022e5c:	af00      	add	r7, sp, #0
 8022e5e:	6078      	str	r0, [r7, #4]
 8022e60:	6039      	str	r1, [r7, #0]
    if (conf_size < sizeof(fsmc_conf_t))
 8022e62:	683b      	ldr	r3, [r7, #0]
 8022e64:	2b15      	cmp	r3, #21
 8022e66:	d802      	bhi.n	8022e6e <nand_init+0x16>
        return -1;
 8022e68:	f04f 33ff 	mov.w	r3, #4294967295
 8022e6c:	e015      	b.n	8022e9a <nand_init+0x42>
   
    fsmc_conf = *(fsmc_conf_t *)conf;  // 从传入的配置结构体中获取配置参数
 8022e6e:	4a0d      	ldr	r2, [pc, #52]	; (8022ea4 <nand_init+0x4c>)
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	4614      	mov	r4, r2
 8022e74:	461d      	mov	r5, r3
 8022e76:	6828      	ldr	r0, [r5, #0]
 8022e78:	6869      	ldr	r1, [r5, #4]
 8022e7a:	68aa      	ldr	r2, [r5, #8]
 8022e7c:	68eb      	ldr	r3, [r5, #12]
 8022e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022e80:	6928      	ldr	r0, [r5, #16]
 8022e82:	6020      	str	r0, [r4, #0]
 8022e84:	8aab      	ldrh	r3, [r5, #20]
 8022e86:	80a3      	strh	r3, [r4, #4]

    nand_gpio_init();  // 初始化GPIO引脚
 8022e88:	f7ff fe60 	bl	8022b4c <nand_gpio_init>
    nand_fsmc_init();  // 初始化FSMC NAND Flash
 8022e8c:	f7ff feb2 	bl	8022bf4 <nand_fsmc_init>
    nand_print_fsmc_info();  // 打印FSMC的配置信息
 8022e90:	f7ff ff1c 	bl	8022ccc <nand_print_fsmc_info>
    nand_reset();  // 复位NAND Flash
 8022e94:	f7ff ffd0 	bl	8022e38 <nand_reset>

    return 0;
 8022e98:	2300      	movs	r3, #0
}
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	3708      	adds	r7, #8
 8022e9e:	46bd      	mov	sp, r7
 8022ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8022ea2:	bf00      	nop
 8022ea4:	20000c48 	.word	0x20000c48

08022ea8 <nand_uninit>:

static void nand_uninit()
{
 8022ea8:	b480      	push	{r7}
 8022eaa:	af00      	add	r7, sp, #0
    //TODO
}
 8022eac:	bf00      	nop
 8022eae:	46bd      	mov	sp, r7
 8022eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb4:	4770      	bx	lr
	...

08022eb8 <nand_read_status>:

static uint32_t nand_read_status()
{
 8022eb8:	b480      	push	{r7}
 8022eba:	b083      	sub	sp, #12
 8022ebc:	af00      	add	r7, sp, #0
    uint32_t data, status;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.status_cmd;  // 发送状态命令给NAND Flash
 8022ebe:	4b11      	ldr	r3, [pc, #68]	; (8022f04 <nand_read_status+0x4c>)
 8022ec0:	4a11      	ldr	r2, [pc, #68]	; (8022f08 <nand_read_status+0x50>)
 8022ec2:	7c52      	ldrb	r2, [r2, #17]
 8022ec4:	701a      	strb	r2, [r3, #0]
    data = *(__IO uint8_t *)(Bank_NAND_ADDR);
 8022ec6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022eca:	781b      	ldrb	r3, [r3, #0]
 8022ecc:	b2db      	uxtb	r3, r3
 8022ece:	603b      	str	r3, [r7, #0]

    if ((data & NAND_ERROR) == NAND_ERROR)
 8022ed0:	683b      	ldr	r3, [r7, #0]
 8022ed2:	f003 0301 	and.w	r3, r3, #1
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	d002      	beq.n	8022ee0 <nand_read_status+0x28>
        status = FLASH_STATUS_ERROR;
 8022eda:	2302      	movs	r3, #2
 8022edc:	607b      	str	r3, [r7, #4]
 8022ede:	e009      	b.n	8022ef4 <nand_read_status+0x3c>
    else if ((data & NAND_READY) == NAND_READY)
 8022ee0:	683b      	ldr	r3, [r7, #0]
 8022ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d002      	beq.n	8022ef0 <nand_read_status+0x38>
        status = FLASH_STATUS_READY;
 8022eea:	2300      	movs	r3, #0
 8022eec:	607b      	str	r3, [r7, #4]
 8022eee:	e001      	b.n	8022ef4 <nand_read_status+0x3c>
    else
        status = FLASH_STATUS_BUSY;
 8022ef0:	2301      	movs	r3, #1
 8022ef2:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的状态
 8022ef4:	687b      	ldr	r3, [r7, #4]
}
 8022ef6:	4618      	mov	r0, r3
 8022ef8:	370c      	adds	r7, #12
 8022efa:	46bd      	mov	sp, r7
 8022efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f00:	4770      	bx	lr
 8022f02:	bf00      	nop
 8022f04:	70010000 	.word	0x70010000
 8022f08:	20000c48 	.word	0x20000c48

08022f0c <nand_get_status>:

static uint32_t nand_get_status()
{
 8022f0c:	b580      	push	{r7, lr}
 8022f0e:	b082      	sub	sp, #8
 8022f10:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8022f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8022f16:	603b      	str	r3, [r7, #0]

    status = nand_read_status();
 8022f18:	f7ff ffce 	bl	8022eb8 <nand_read_status>
 8022f1c:	6078      	str	r0, [r7, #4]

    /* 等待NAND操作完成或超时发生 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8022f1e:	e005      	b.n	8022f2c <nand_get_status+0x20>
    {
        status = nand_read_status();
 8022f20:	f7ff ffca 	bl	8022eb8 <nand_read_status>
 8022f24:	6078      	str	r0, [r7, #4]
        timeout --;
 8022f26:	683b      	ldr	r3, [r7, #0]
 8022f28:	3b01      	subs	r3, #1
 8022f2a:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	2b01      	cmp	r3, #1
 8022f30:	d102      	bne.n	8022f38 <nand_get_status+0x2c>
 8022f32:	683b      	ldr	r3, [r7, #0]
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d1f3      	bne.n	8022f20 <nand_get_status+0x14>
    }

    if (!timeout)
 8022f38:	683b      	ldr	r3, [r7, #0]
 8022f3a:	2b00      	cmp	r3, #0
 8022f3c:	d101      	bne.n	8022f42 <nand_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8022f3e:	2303      	movs	r3, #3
 8022f40:	607b      	str	r3, [r7, #4]

    return status;  // 返回NAND Flash的最终状态
 8022f42:	687b      	ldr	r3, [r7, #4]
}
 8022f44:	4618      	mov	r0, r3
 8022f46:	3708      	adds	r7, #8
 8022f48:	46bd      	mov	sp, r7
 8022f4a:	bd80      	pop	{r7, pc}

08022f4c <nand_read_id>:

// 从NAND Flash读取ID
static void nand_read_id(chip_id_t *nand_id)
{
 8022f4c:	b480      	push	{r7}
 8022f4e:	b085      	sub	sp, #20
 8022f50:	af00      	add	r7, sp, #0
 8022f52:	6078      	str	r0, [r7, #4]
    uint32_t data = 0;
 8022f54:	2300      	movs	r3, #0
 8022f56:	60fb      	str	r3, [r7, #12]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_id_cmd;  // 发送读取ID的命令给NAND Flash
 8022f58:	4b17      	ldr	r3, [pc, #92]	; (8022fb8 <nand_read_id+0x6c>)
 8022f5a:	4a18      	ldr	r2, [pc, #96]	; (8022fbc <nand_read_id+0x70>)
 8022f5c:	7ad2      	ldrb	r2, [r2, #11]
 8022f5e:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022f60:	4b17      	ldr	r3, [pc, #92]	; (8022fc0 <nand_read_id+0x74>)
 8022f62:	2200      	movs	r2, #0
 8022f64:	701a      	strb	r2, [r3, #0]

    /* 从NAND Flash读取ID的序列 */
    data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 8022f66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	60fb      	str	r3, [r7, #12]
    nand_id->maker_id   = ADDR_1st_CYCLE(data);  // 读取制造商ID
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	b2da      	uxtb	r2, r3
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	701a      	strb	r2, [r3, #0]
    nand_id->device_id  = ADDR_2nd_CYCLE(data);  // 读取设备ID
 8022f76:	68fb      	ldr	r3, [r7, #12]
 8022f78:	0a1b      	lsrs	r3, r3, #8
 8022f7a:	b2da      	uxtb	r2, r3
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	705a      	strb	r2, [r3, #1]
    nand_id->third_id   = ADDR_3rd_CYCLE(data);  // 读取第三个ID
 8022f80:	68fb      	ldr	r3, [r7, #12]
 8022f82:	0c1b      	lsrs	r3, r3, #16
 8022f84:	b2da      	uxtb	r2, r3
 8022f86:	687b      	ldr	r3, [r7, #4]
 8022f88:	709a      	strb	r2, [r3, #2]
    nand_id->fourth_id  = ADDR_4th_CYCLE(data);  // 读取第四个ID
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	0e1b      	lsrs	r3, r3, #24
 8022f8e:	b2da      	uxtb	r2, r3
 8022f90:	687b      	ldr	r3, [r7, #4]
 8022f92:	70da      	strb	r2, [r3, #3]

    data = *((__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA) + 1);
 8022f94:	4b0b      	ldr	r3, [pc, #44]	; (8022fc4 <nand_read_id+0x78>)
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	60fb      	str	r3, [r7, #12]
    nand_id->fifth_id   = ADDR_1st_CYCLE(data);  // 读取第五个ID
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	b2da      	uxtb	r2, r3
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	711a      	strb	r2, [r3, #4]
    nand_id->sixth_id   = ADDR_2nd_CYCLE(data);  // 读取第六个ID
 8022fa2:	68fb      	ldr	r3, [r7, #12]
 8022fa4:	0a1b      	lsrs	r3, r3, #8
 8022fa6:	b2da      	uxtb	r2, r3
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	715a      	strb	r2, [r3, #5]
}
 8022fac:	bf00      	nop
 8022fae:	3714      	adds	r7, #20
 8022fb0:	46bd      	mov	sp, r7
 8022fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fb6:	4770      	bx	lr
 8022fb8:	70010000 	.word	0x70010000
 8022fbc:	20000c48 	.word	0x20000c48
 8022fc0:	70020000 	.word	0x70020000
 8022fc4:	70000004 	.word	0x70000004

08022fc8 <nand_write_page_async>:

// 异步方式写入NAND Flash的页数据
static void nand_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8022fc8:	b480      	push	{r7}
 8022fca:	b087      	sub	sp, #28
 8022fcc:	af00      	add	r7, sp, #0
 8022fce:	60f8      	str	r0, [r7, #12]
 8022fd0:	60b9      	str	r1, [r7, #8]
 8022fd2:	607a      	str	r2, [r7, #4]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write1_cmd;  // 发送写入命令给NAND Flash
 8022fd4:	4b4c      	ldr	r3, [pc, #304]	; (8023108 <nand_write_page_async+0x140>)
 8022fd6:	4a4d      	ldr	r2, [pc, #308]	; (802310c <nand_write_page_async+0x144>)
 8022fd8:	7b52      	ldrb	r2, [r2, #13]
 8022fda:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 8022fdc:	4b4b      	ldr	r3, [pc, #300]	; (802310c <nand_write_page_async+0x144>)
 8022fde:	79db      	ldrb	r3, [r3, #7]
 8022fe0:	3b01      	subs	r3, #1
 8022fe2:	2b03      	cmp	r3, #3
 8022fe4:	d82c      	bhi.n	8023040 <nand_write_page_async+0x78>
 8022fe6:	a201      	add	r2, pc, #4	; (adr r2, 8022fec <nand_write_page_async+0x24>)
 8022fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022fec:	08022ffd 	.word	0x08022ffd
 8022ff0:	08023005 	.word	0x08023005
 8022ff4:	08023013 	.word	0x08023013
 8022ff8:	08023027 	.word	0x08023027
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8022ffc:	4b44      	ldr	r3, [pc, #272]	; (8023110 <nand_write_page_async+0x148>)
 8022ffe:	2200      	movs	r2, #0
 8023000:	701a      	strb	r2, [r3, #0]
        break;
 8023002:	e01e      	b.n	8023042 <nand_write_page_async+0x7a>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023004:	4b42      	ldr	r3, [pc, #264]	; (8023110 <nand_write_page_async+0x148>)
 8023006:	2200      	movs	r2, #0
 8023008:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802300a:	4b41      	ldr	r3, [pc, #260]	; (8023110 <nand_write_page_async+0x148>)
 802300c:	2200      	movs	r2, #0
 802300e:	701a      	strb	r2, [r3, #0]
        break;
 8023010:	e017      	b.n	8023042 <nand_write_page_async+0x7a>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023012:	4b3f      	ldr	r3, [pc, #252]	; (8023110 <nand_write_page_async+0x148>)
 8023014:	2200      	movs	r2, #0
 8023016:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023018:	4b3d      	ldr	r3, [pc, #244]	; (8023110 <nand_write_page_async+0x148>)
 802301a:	2200      	movs	r2, #0
 802301c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802301e:	4b3c      	ldr	r3, [pc, #240]	; (8023110 <nand_write_page_async+0x148>)
 8023020:	2200      	movs	r2, #0
 8023022:	701a      	strb	r2, [r3, #0]
        break;
 8023024:	e00d      	b.n	8023042 <nand_write_page_async+0x7a>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023026:	4b3a      	ldr	r3, [pc, #232]	; (8023110 <nand_write_page_async+0x148>)
 8023028:	2200      	movs	r2, #0
 802302a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 802302c:	4b38      	ldr	r3, [pc, #224]	; (8023110 <nand_write_page_async+0x148>)
 802302e:	2200      	movs	r2, #0
 8023030:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023032:	4b37      	ldr	r3, [pc, #220]	; (8023110 <nand_write_page_async+0x148>)
 8023034:	2200      	movs	r2, #0
 8023036:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = 0x00;
 8023038:	4b35      	ldr	r3, [pc, #212]	; (8023110 <nand_write_page_async+0x148>)
 802303a:	2200      	movs	r2, #0
 802303c:	701a      	strb	r2, [r3, #0]
        break;
 802303e:	e000      	b.n	8023042 <nand_write_page_async+0x7a>
    default:
        break;
 8023040:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023042:	4b32      	ldr	r3, [pc, #200]	; (802310c <nand_write_page_async+0x144>)
 8023044:	799b      	ldrb	r3, [r3, #6]
 8023046:	3b01      	subs	r3, #1
 8023048:	2b03      	cmp	r3, #3
 802304a:	d83d      	bhi.n	80230c8 <nand_write_page_async+0x100>
 802304c:	a201      	add	r2, pc, #4	; (adr r2, 8023054 <nand_write_page_async+0x8c>)
 802304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023052:	bf00      	nop
 8023054:	08023065 	.word	0x08023065
 8023058:	0802306f 	.word	0x0802306f
 802305c:	08023083 	.word	0x08023083
 8023060:	080230a1 	.word	0x080230a1
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023064:	4b2a      	ldr	r3, [pc, #168]	; (8023110 <nand_write_page_async+0x148>)
 8023066:	68ba      	ldr	r2, [r7, #8]
 8023068:	b2d2      	uxtb	r2, r2
 802306a:	701a      	strb	r2, [r3, #0]
        break;
 802306c:	e02d      	b.n	80230ca <nand_write_page_async+0x102>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 802306e:	4b28      	ldr	r3, [pc, #160]	; (8023110 <nand_write_page_async+0x148>)
 8023070:	68ba      	ldr	r2, [r7, #8]
 8023072:	b2d2      	uxtb	r2, r2
 8023074:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023076:	68bb      	ldr	r3, [r7, #8]
 8023078:	0a1a      	lsrs	r2, r3, #8
 802307a:	4b25      	ldr	r3, [pc, #148]	; (8023110 <nand_write_page_async+0x148>)
 802307c:	b2d2      	uxtb	r2, r2
 802307e:	701a      	strb	r2, [r3, #0]
        break;
 8023080:	e023      	b.n	80230ca <nand_write_page_async+0x102>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 8023082:	4b23      	ldr	r3, [pc, #140]	; (8023110 <nand_write_page_async+0x148>)
 8023084:	68ba      	ldr	r2, [r7, #8]
 8023086:	b2d2      	uxtb	r2, r2
 8023088:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 802308a:	68bb      	ldr	r3, [r7, #8]
 802308c:	0a1a      	lsrs	r2, r3, #8
 802308e:	4b20      	ldr	r3, [pc, #128]	; (8023110 <nand_write_page_async+0x148>)
 8023090:	b2d2      	uxtb	r2, r2
 8023092:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023094:	68bb      	ldr	r3, [r7, #8]
 8023096:	0c1a      	lsrs	r2, r3, #16
 8023098:	4b1d      	ldr	r3, [pc, #116]	; (8023110 <nand_write_page_async+0x148>)
 802309a:	b2d2      	uxtb	r2, r2
 802309c:	701a      	strb	r2, [r3, #0]
        break;
 802309e:	e014      	b.n	80230ca <nand_write_page_async+0x102>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80230a0:	4b1b      	ldr	r3, [pc, #108]	; (8023110 <nand_write_page_async+0x148>)
 80230a2:	68ba      	ldr	r2, [r7, #8]
 80230a4:	b2d2      	uxtb	r2, r2
 80230a6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80230a8:	68bb      	ldr	r3, [r7, #8]
 80230aa:	0a1a      	lsrs	r2, r3, #8
 80230ac:	4b18      	ldr	r3, [pc, #96]	; (8023110 <nand_write_page_async+0x148>)
 80230ae:	b2d2      	uxtb	r2, r2
 80230b0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 80230b2:	68bb      	ldr	r3, [r7, #8]
 80230b4:	0c1a      	lsrs	r2, r3, #16
 80230b6:	4b16      	ldr	r3, [pc, #88]	; (8023110 <nand_write_page_async+0x148>)
 80230b8:	b2d2      	uxtb	r2, r2
 80230ba:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 80230bc:	68bb      	ldr	r3, [r7, #8]
 80230be:	0e1a      	lsrs	r2, r3, #24
 80230c0:	4b13      	ldr	r3, [pc, #76]	; (8023110 <nand_write_page_async+0x148>)
 80230c2:	b2d2      	uxtb	r2, r2
 80230c4:	701a      	strb	r2, [r3, #0]
        break;
 80230c6:	e000      	b.n	80230ca <nand_write_page_async+0x102>
    default:
        break;
 80230c8:	bf00      	nop
    }

    for(i = 0; i < page_size; i++)
 80230ca:	2300      	movs	r3, #0
 80230cc:	617b      	str	r3, [r7, #20]
 80230ce:	e009      	b.n	80230e4 <nand_write_page_async+0x11c>
        *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = buf[i];  // 逐字节写入数据到NAND Flash的数据区
 80230d0:	68fa      	ldr	r2, [r7, #12]
 80230d2:	697b      	ldr	r3, [r7, #20]
 80230d4:	4413      	add	r3, r2
 80230d6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80230da:	781b      	ldrb	r3, [r3, #0]
 80230dc:	7013      	strb	r3, [r2, #0]
    for(i = 0; i < page_size; i++)
 80230de:	697b      	ldr	r3, [r7, #20]
 80230e0:	3301      	adds	r3, #1
 80230e2:	617b      	str	r3, [r7, #20]
 80230e4:	697a      	ldr	r2, [r7, #20]
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	429a      	cmp	r2, r3
 80230ea:	d3f1      	bcc.n	80230d0 <nand_write_page_async+0x108>

    if (fsmc_conf.write2_cmd != UNDEFINED_CMD)
 80230ec:	4b07      	ldr	r3, [pc, #28]	; (802310c <nand_write_page_async+0x144>)
 80230ee:	7b9b      	ldrb	r3, [r3, #14]
 80230f0:	2bff      	cmp	r3, #255	; 0xff
 80230f2:	d003      	beq.n	80230fc <nand_write_page_async+0x134>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.write2_cmd;  // 发送写入命令2给NAND Flash
 80230f4:	4b04      	ldr	r3, [pc, #16]	; (8023108 <nand_write_page_async+0x140>)
 80230f6:	4a05      	ldr	r2, [pc, #20]	; (802310c <nand_write_page_async+0x144>)
 80230f8:	7b92      	ldrb	r2, [r2, #14]
 80230fa:	701a      	strb	r2, [r3, #0]
}
 80230fc:	bf00      	nop
 80230fe:	371c      	adds	r7, #28
 8023100:	46bd      	mov	sp, r7
 8023102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023106:	4770      	bx	lr
 8023108:	70010000 	.word	0x70010000
 802310c:	20000c48 	.word	0x20000c48
 8023110:	70020000 	.word	0x70020000

08023114 <nand_read_data>:

// 从NAND Flash读取数据
static uint32_t nand_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8023114:	b580      	push	{r7, lr}
 8023116:	b086      	sub	sp, #24
 8023118:	af00      	add	r7, sp, #0
 802311a:	60f8      	str	r0, [r7, #12]
 802311c:	60b9      	str	r1, [r7, #8]
 802311e:	607a      	str	r2, [r7, #4]
 8023120:	603b      	str	r3, [r7, #0]
    uint32_t i;

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read1_cmd;  // 发送读取命令给NAND Flash
 8023122:	4b55      	ldr	r3, [pc, #340]	; (8023278 <nand_read_data+0x164>)
 8023124:	4a55      	ldr	r2, [pc, #340]	; (802327c <nand_read_data+0x168>)
 8023126:	7a12      	ldrb	r2, [r2, #8]
 8023128:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 802312a:	4b54      	ldr	r3, [pc, #336]	; (802327c <nand_read_data+0x168>)
 802312c:	79db      	ldrb	r3, [r3, #7]
 802312e:	3b01      	subs	r3, #1
 8023130:	2b03      	cmp	r3, #3
 8023132:	d83c      	bhi.n	80231ae <nand_read_data+0x9a>
 8023134:	a201      	add	r2, pc, #4	; (adr r2, 802313c <nand_read_data+0x28>)
 8023136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802313a:	bf00      	nop
 802313c:	0802314d 	.word	0x0802314d
 8023140:	08023157 	.word	0x08023157
 8023144:	0802316b 	.word	0x0802316b
 8023148:	08023189 	.word	0x08023189
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802314c:	4b4c      	ldr	r3, [pc, #304]	; (8023280 <nand_read_data+0x16c>)
 802314e:	687a      	ldr	r2, [r7, #4]
 8023150:	b2d2      	uxtb	r2, r2
 8023152:	701a      	strb	r2, [r3, #0]
        break;
 8023154:	e02c      	b.n	80231b0 <nand_read_data+0x9c>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023156:	4b4a      	ldr	r3, [pc, #296]	; (8023280 <nand_read_data+0x16c>)
 8023158:	687a      	ldr	r2, [r7, #4]
 802315a:	b2d2      	uxtb	r2, r2
 802315c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	0a1a      	lsrs	r2, r3, #8
 8023162:	4b47      	ldr	r3, [pc, #284]	; (8023280 <nand_read_data+0x16c>)
 8023164:	b2d2      	uxtb	r2, r2
 8023166:	701a      	strb	r2, [r3, #0]
        break;
 8023168:	e022      	b.n	80231b0 <nand_read_data+0x9c>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 802316a:	4b45      	ldr	r3, [pc, #276]	; (8023280 <nand_read_data+0x16c>)
 802316c:	687a      	ldr	r2, [r7, #4]
 802316e:	b2d2      	uxtb	r2, r2
 8023170:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	0a1a      	lsrs	r2, r3, #8
 8023176:	4b42      	ldr	r3, [pc, #264]	; (8023280 <nand_read_data+0x16c>)
 8023178:	b2d2      	uxtb	r2, r2
 802317a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	0c1a      	lsrs	r2, r3, #16
 8023180:	4b3f      	ldr	r3, [pc, #252]	; (8023280 <nand_read_data+0x16c>)
 8023182:	b2d2      	uxtb	r2, r2
 8023184:	701a      	strb	r2, [r3, #0]
        break;
 8023186:	e013      	b.n	80231b0 <nand_read_data+0x9c>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page_offset);
 8023188:	4b3d      	ldr	r3, [pc, #244]	; (8023280 <nand_read_data+0x16c>)
 802318a:	687a      	ldr	r2, [r7, #4]
 802318c:	b2d2      	uxtb	r2, r2
 802318e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page_offset);
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	0a1a      	lsrs	r2, r3, #8
 8023194:	4b3a      	ldr	r3, [pc, #232]	; (8023280 <nand_read_data+0x16c>)
 8023196:	b2d2      	uxtb	r2, r2
 8023198:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page_offset);
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	0c1a      	lsrs	r2, r3, #16
 802319e:	4b38      	ldr	r3, [pc, #224]	; (8023280 <nand_read_data+0x16c>)
 80231a0:	b2d2      	uxtb	r2, r2
 80231a2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page_offset);
 80231a4:	687b      	ldr	r3, [r7, #4]
 80231a6:	0e1a      	lsrs	r2, r3, #24
 80231a8:	4b35      	ldr	r3, [pc, #212]	; (8023280 <nand_read_data+0x16c>)
 80231aa:	b2d2      	uxtb	r2, r2
 80231ac:	701a      	strb	r2, [r3, #0]
    default:
        break;
 80231ae:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 80231b0:	4b32      	ldr	r3, [pc, #200]	; (802327c <nand_read_data+0x168>)
 80231b2:	799b      	ldrb	r3, [r3, #6]
 80231b4:	3b01      	subs	r3, #1
 80231b6:	2b03      	cmp	r3, #3
 80231b8:	d83c      	bhi.n	8023234 <nand_read_data+0x120>
 80231ba:	a201      	add	r2, pc, #4	; (adr r2, 80231c0 <nand_read_data+0xac>)
 80231bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80231c0:	080231d1 	.word	0x080231d1
 80231c4:	080231db 	.word	0x080231db
 80231c8:	080231ef 	.word	0x080231ef
 80231cc:	0802320d 	.word	0x0802320d
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231d0:	4b2b      	ldr	r3, [pc, #172]	; (8023280 <nand_read_data+0x16c>)
 80231d2:	68ba      	ldr	r2, [r7, #8]
 80231d4:	b2d2      	uxtb	r2, r2
 80231d6:	701a      	strb	r2, [r3, #0]
        break;
 80231d8:	e02d      	b.n	8023236 <nand_read_data+0x122>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231da:	4b29      	ldr	r3, [pc, #164]	; (8023280 <nand_read_data+0x16c>)
 80231dc:	68ba      	ldr	r2, [r7, #8]
 80231de:	b2d2      	uxtb	r2, r2
 80231e0:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80231e2:	68bb      	ldr	r3, [r7, #8]
 80231e4:	0a1a      	lsrs	r2, r3, #8
 80231e6:	4b26      	ldr	r3, [pc, #152]	; (8023280 <nand_read_data+0x16c>)
 80231e8:	b2d2      	uxtb	r2, r2
 80231ea:	701a      	strb	r2, [r3, #0]
        break;
 80231ec:	e023      	b.n	8023236 <nand_read_data+0x122>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 80231ee:	4b24      	ldr	r3, [pc, #144]	; (8023280 <nand_read_data+0x16c>)
 80231f0:	68ba      	ldr	r2, [r7, #8]
 80231f2:	b2d2      	uxtb	r2, r2
 80231f4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 80231f6:	68bb      	ldr	r3, [r7, #8]
 80231f8:	0a1a      	lsrs	r2, r3, #8
 80231fa:	4b21      	ldr	r3, [pc, #132]	; (8023280 <nand_read_data+0x16c>)
 80231fc:	b2d2      	uxtb	r2, r2
 80231fe:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 8023200:	68bb      	ldr	r3, [r7, #8]
 8023202:	0c1a      	lsrs	r2, r3, #16
 8023204:	4b1e      	ldr	r3, [pc, #120]	; (8023280 <nand_read_data+0x16c>)
 8023206:	b2d2      	uxtb	r2, r2
 8023208:	701a      	strb	r2, [r3, #0]
        break;
 802320a:	e014      	b.n	8023236 <nand_read_data+0x122>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);
 802320c:	4b1c      	ldr	r3, [pc, #112]	; (8023280 <nand_read_data+0x16c>)
 802320e:	68ba      	ldr	r2, [r7, #8]
 8023210:	b2d2      	uxtb	r2, r2
 8023212:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);
 8023214:	68bb      	ldr	r3, [r7, #8]
 8023216:	0a1a      	lsrs	r2, r3, #8
 8023218:	4b19      	ldr	r3, [pc, #100]	; (8023280 <nand_read_data+0x16c>)
 802321a:	b2d2      	uxtb	r2, r2
 802321c:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);
 802321e:	68bb      	ldr	r3, [r7, #8]
 8023220:	0c1a      	lsrs	r2, r3, #16
 8023222:	4b17      	ldr	r3, [pc, #92]	; (8023280 <nand_read_data+0x16c>)
 8023224:	b2d2      	uxtb	r2, r2
 8023226:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);
 8023228:	68bb      	ldr	r3, [r7, #8]
 802322a:	0e1a      	lsrs	r2, r3, #24
 802322c:	4b14      	ldr	r3, [pc, #80]	; (8023280 <nand_read_data+0x16c>)
 802322e:	b2d2      	uxtb	r2, r2
 8023230:	701a      	strb	r2, [r3, #0]
        break;
 8023232:	e000      	b.n	8023236 <nand_read_data+0x122>
    default:
        break;
 8023234:	bf00      	nop
    }

    if (fsmc_conf.read2_cmd != UNDEFINED_CMD)
 8023236:	4b11      	ldr	r3, [pc, #68]	; (802327c <nand_read_data+0x168>)
 8023238:	7a5b      	ldrb	r3, [r3, #9]
 802323a:	2bff      	cmp	r3, #255	; 0xff
 802323c:	d003      	beq.n	8023246 <nand_read_data+0x132>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read2_cmd;  // 发送读取命令2给NAND Flash
 802323e:	4b0e      	ldr	r3, [pc, #56]	; (8023278 <nand_read_data+0x164>)
 8023240:	4a0e      	ldr	r2, [pc, #56]	; (802327c <nand_read_data+0x168>)
 8023242:	7a52      	ldrb	r2, [r2, #9]
 8023244:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < data_size; i++)
 8023246:	2300      	movs	r3, #0
 8023248:	617b      	str	r3, [r7, #20]
 802324a:	e00a      	b.n	8023262 <nand_read_data+0x14e>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 802324c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8023250:	68fa      	ldr	r2, [r7, #12]
 8023252:	697b      	ldr	r3, [r7, #20]
 8023254:	4413      	add	r3, r2
 8023256:	780a      	ldrb	r2, [r1, #0]
 8023258:	b2d2      	uxtb	r2, r2
 802325a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 802325c:	697b      	ldr	r3, [r7, #20]
 802325e:	3301      	adds	r3, #1
 8023260:	617b      	str	r3, [r7, #20]
 8023262:	697a      	ldr	r2, [r7, #20]
 8023264:	683b      	ldr	r3, [r7, #0]
 8023266:	429a      	cmp	r2, r3
 8023268:	d3f0      	bcc.n	802324c <nand_read_data+0x138>

    return nand_get_status();  // 获取NAND Flash的状态
 802326a:	f7ff fe4f 	bl	8022f0c <nand_get_status>
 802326e:	4603      	mov	r3, r0
}
 8023270:	4618      	mov	r0, r3
 8023272:	3718      	adds	r7, #24
 8023274:	46bd      	mov	sp, r7
 8023276:	bd80      	pop	{r7, pc}
 8023278:	70010000 	.word	0x70010000
 802327c:	20000c48 	.word	0x20000c48
 8023280:	70020000 	.word	0x70020000

08023284 <nand_read_page>:

// 从NAND Flash读取数据页
static uint32_t nand_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8023284:	b580      	push	{r7, lr}
 8023286:	b084      	sub	sp, #16
 8023288:	af00      	add	r7, sp, #0
 802328a:	60f8      	str	r0, [r7, #12]
 802328c:	60b9      	str	r1, [r7, #8]
 802328e:	607a      	str	r2, [r7, #4]
    return nand_read_data(buf, page, 0, page_size);
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	2200      	movs	r2, #0
 8023294:	68b9      	ldr	r1, [r7, #8]
 8023296:	68f8      	ldr	r0, [r7, #12]
 8023298:	f7ff ff3c 	bl	8023114 <nand_read_data>
 802329c:	4603      	mov	r3, r0
}
 802329e:	4618      	mov	r0, r3
 80232a0:	3710      	adds	r7, #16
 80232a2:	46bd      	mov	sp, r7
 80232a4:	bd80      	pop	{r7, pc}
	...

080232a8 <nand_read_spare_data>:

// 从NAND Flash读取备用数据
static uint32_t nand_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80232a8:	b580      	push	{r7, lr}
 80232aa:	b086      	sub	sp, #24
 80232ac:	af00      	add	r7, sp, #0
 80232ae:	60f8      	str	r0, [r7, #12]
 80232b0:	60b9      	str	r1, [r7, #8]
 80232b2:	607a      	str	r2, [r7, #4]
 80232b4:	603b      	str	r3, [r7, #0]
    uint32_t i;

    if (fsmc_conf.read_spare_cmd == UNDEFINED_CMD)
 80232b6:	4b54      	ldr	r3, [pc, #336]	; (8023408 <nand_read_spare_data+0x160>)
 80232b8:	7a9b      	ldrb	r3, [r3, #10]
 80232ba:	2bff      	cmp	r3, #255	; 0xff
 80232bc:	d101      	bne.n	80232c2 <nand_read_spare_data+0x1a>
        return FLASH_STATUS_INVALID_CMD;
 80232be:	2304      	movs	r3, #4
 80232c0:	e09e      	b.n	8023400 <nand_read_spare_data+0x158>

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.read_spare_cmd;  // 发送读取备用数据命令给NAND Flash
 80232c2:	4b52      	ldr	r3, [pc, #328]	; (802340c <nand_read_spare_data+0x164>)
 80232c4:	4a50      	ldr	r2, [pc, #320]	; (8023408 <nand_read_spare_data+0x160>)
 80232c6:	7a92      	ldrb	r2, [r2, #10]
 80232c8:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.col_cycles)
 80232ca:	4b4f      	ldr	r3, [pc, #316]	; (8023408 <nand_read_spare_data+0x160>)
 80232cc:	79db      	ldrb	r3, [r3, #7]
 80232ce:	3b01      	subs	r3, #1
 80232d0:	2b03      	cmp	r3, #3
 80232d2:	d83c      	bhi.n	802334e <nand_read_spare_data+0xa6>
 80232d4:	a201      	add	r2, pc, #4	; (adr r2, 80232dc <nand_read_spare_data+0x34>)
 80232d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80232da:	bf00      	nop
 80232dc:	080232ed 	.word	0x080232ed
 80232e0:	080232f7 	.word	0x080232f7
 80232e4:	0802330b 	.word	0x0802330b
 80232e8:	08023329 	.word	0x08023329
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232ec:	4b48      	ldr	r3, [pc, #288]	; (8023410 <nand_read_spare_data+0x168>)
 80232ee:	687a      	ldr	r2, [r7, #4]
 80232f0:	b2d2      	uxtb	r2, r2
 80232f2:	701a      	strb	r2, [r3, #0]
        break;
 80232f4:	e02c      	b.n	8023350 <nand_read_spare_data+0xa8>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 80232f6:	4b46      	ldr	r3, [pc, #280]	; (8023410 <nand_read_spare_data+0x168>)
 80232f8:	687a      	ldr	r2, [r7, #4]
 80232fa:	b2d2      	uxtb	r2, r2
 80232fc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	0a1a      	lsrs	r2, r3, #8
 8023302:	4b43      	ldr	r3, [pc, #268]	; (8023410 <nand_read_spare_data+0x168>)
 8023304:	b2d2      	uxtb	r2, r2
 8023306:	701a      	strb	r2, [r3, #0]
        break;
 8023308:	e022      	b.n	8023350 <nand_read_spare_data+0xa8>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 802330a:	4b41      	ldr	r3, [pc, #260]	; (8023410 <nand_read_spare_data+0x168>)
 802330c:	687a      	ldr	r2, [r7, #4]
 802330e:	b2d2      	uxtb	r2, r2
 8023310:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	0a1a      	lsrs	r2, r3, #8
 8023316:	4b3e      	ldr	r3, [pc, #248]	; (8023410 <nand_read_spare_data+0x168>)
 8023318:	b2d2      	uxtb	r2, r2
 802331a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	0c1a      	lsrs	r2, r3, #16
 8023320:	4b3b      	ldr	r3, [pc, #236]	; (8023410 <nand_read_spare_data+0x168>)
 8023322:	b2d2      	uxtb	r2, r2
 8023324:	701a      	strb	r2, [r3, #0]
        break;
 8023326:	e013      	b.n	8023350 <nand_read_spare_data+0xa8>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(offset);  // 发送列地址的第1个周期
 8023328:	4b39      	ldr	r3, [pc, #228]	; (8023410 <nand_read_spare_data+0x168>)
 802332a:	687a      	ldr	r2, [r7, #4]
 802332c:	b2d2      	uxtb	r2, r2
 802332e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(offset);  // 发送列地址的第2个周期
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	0a1a      	lsrs	r2, r3, #8
 8023334:	4b36      	ldr	r3, [pc, #216]	; (8023410 <nand_read_spare_data+0x168>)
 8023336:	b2d2      	uxtb	r2, r2
 8023338:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(offset);  // 发送列地址的第3个周期
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	0c1a      	lsrs	r2, r3, #16
 802333e:	4b34      	ldr	r3, [pc, #208]	; (8023410 <nand_read_spare_data+0x168>)
 8023340:	b2d2      	uxtb	r2, r2
 8023342:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(offset);  // 发送列地址的第4个周期
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	0e1a      	lsrs	r2, r3, #24
 8023348:	4b31      	ldr	r3, [pc, #196]	; (8023410 <nand_read_spare_data+0x168>)
 802334a:	b2d2      	uxtb	r2, r2
 802334c:	701a      	strb	r2, [r3, #0]
    default:
        break;
 802334e:	bf00      	nop
    }

    switch (fsmc_conf.row_cycles)
 8023350:	4b2d      	ldr	r3, [pc, #180]	; (8023408 <nand_read_spare_data+0x160>)
 8023352:	799b      	ldrb	r3, [r3, #6]
 8023354:	3b01      	subs	r3, #1
 8023356:	2b03      	cmp	r3, #3
 8023358:	d83c      	bhi.n	80233d4 <nand_read_spare_data+0x12c>
 802335a:	a201      	add	r2, pc, #4	; (adr r2, 8023360 <nand_read_spare_data+0xb8>)
 802335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023360:	08023371 	.word	0x08023371
 8023364:	0802337b 	.word	0x0802337b
 8023368:	0802338f 	.word	0x0802338f
 802336c:	080233ad 	.word	0x080233ad
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023370:	4b27      	ldr	r3, [pc, #156]	; (8023410 <nand_read_spare_data+0x168>)
 8023372:	68ba      	ldr	r2, [r7, #8]
 8023374:	b2d2      	uxtb	r2, r2
 8023376:	701a      	strb	r2, [r3, #0]
        break;
 8023378:	e02d      	b.n	80233d6 <nand_read_spare_data+0x12e>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802337a:	4b25      	ldr	r3, [pc, #148]	; (8023410 <nand_read_spare_data+0x168>)
 802337c:	68ba      	ldr	r2, [r7, #8]
 802337e:	b2d2      	uxtb	r2, r2
 8023380:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023382:	68bb      	ldr	r3, [r7, #8]
 8023384:	0a1a      	lsrs	r2, r3, #8
 8023386:	4b22      	ldr	r3, [pc, #136]	; (8023410 <nand_read_spare_data+0x168>)
 8023388:	b2d2      	uxtb	r2, r2
 802338a:	701a      	strb	r2, [r3, #0]
        break;
 802338c:	e023      	b.n	80233d6 <nand_read_spare_data+0x12e>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802338e:	4b20      	ldr	r3, [pc, #128]	; (8023410 <nand_read_spare_data+0x168>)
 8023390:	68ba      	ldr	r2, [r7, #8]
 8023392:	b2d2      	uxtb	r2, r2
 8023394:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023396:	68bb      	ldr	r3, [r7, #8]
 8023398:	0a1a      	lsrs	r2, r3, #8
 802339a:	4b1d      	ldr	r3, [pc, #116]	; (8023410 <nand_read_spare_data+0x168>)
 802339c:	b2d2      	uxtb	r2, r2
 802339e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80233a0:	68bb      	ldr	r3, [r7, #8]
 80233a2:	0c1a      	lsrs	r2, r3, #16
 80233a4:	4b1a      	ldr	r3, [pc, #104]	; (8023410 <nand_read_spare_data+0x168>)
 80233a6:	b2d2      	uxtb	r2, r2
 80233a8:	701a      	strb	r2, [r3, #0]
        break;
 80233aa:	e014      	b.n	80233d6 <nand_read_spare_data+0x12e>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 80233ac:	4b18      	ldr	r3, [pc, #96]	; (8023410 <nand_read_spare_data+0x168>)
 80233ae:	68ba      	ldr	r2, [r7, #8]
 80233b0:	b2d2      	uxtb	r2, r2
 80233b2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 80233b4:	68bb      	ldr	r3, [r7, #8]
 80233b6:	0a1a      	lsrs	r2, r3, #8
 80233b8:	4b15      	ldr	r3, [pc, #84]	; (8023410 <nand_read_spare_data+0x168>)
 80233ba:	b2d2      	uxtb	r2, r2
 80233bc:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 80233be:	68bb      	ldr	r3, [r7, #8]
 80233c0:	0c1a      	lsrs	r2, r3, #16
 80233c2:	4b13      	ldr	r3, [pc, #76]	; (8023410 <nand_read_spare_data+0x168>)
 80233c4:	b2d2      	uxtb	r2, r2
 80233c6:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 80233c8:	68bb      	ldr	r3, [r7, #8]
 80233ca:	0e1a      	lsrs	r2, r3, #24
 80233cc:	4b10      	ldr	r3, [pc, #64]	; (8023410 <nand_read_spare_data+0x168>)
 80233ce:	b2d2      	uxtb	r2, r2
 80233d0:	701a      	strb	r2, [r3, #0]
        break;
 80233d2:	e000      	b.n	80233d6 <nand_read_spare_data+0x12e>
    default:
        break;
 80233d4:	bf00      	nop
    }

    for (i = 0; i < data_size; i++)
 80233d6:	2300      	movs	r3, #0
 80233d8:	617b      	str	r3, [r7, #20]
 80233da:	e00a      	b.n	80233f2 <nand_read_spare_data+0x14a>
        buf[i] = *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA);  // 逐字节从NAND Flash的数据区读取数据
 80233dc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80233e0:	68fa      	ldr	r2, [r7, #12]
 80233e2:	697b      	ldr	r3, [r7, #20]
 80233e4:	4413      	add	r3, r2
 80233e6:	780a      	ldrb	r2, [r1, #0]
 80233e8:	b2d2      	uxtb	r2, r2
 80233ea:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_size; i++)
 80233ec:	697b      	ldr	r3, [r7, #20]
 80233ee:	3301      	adds	r3, #1
 80233f0:	617b      	str	r3, [r7, #20]
 80233f2:	697a      	ldr	r2, [r7, #20]
 80233f4:	683b      	ldr	r3, [r7, #0]
 80233f6:	429a      	cmp	r2, r3
 80233f8:	d3f0      	bcc.n	80233dc <nand_read_spare_data+0x134>

    return nand_get_status();  // 获取NAND Flash的状态
 80233fa:	f7ff fd87 	bl	8022f0c <nand_get_status>
 80233fe:	4603      	mov	r3, r0
}
 8023400:	4618      	mov	r0, r3
 8023402:	3718      	adds	r7, #24
 8023404:	46bd      	mov	sp, r7
 8023406:	bd80      	pop	{r7, pc}
 8023408:	20000c48 	.word	0x20000c48
 802340c:	70010000 	.word	0x70010000
 8023410:	70020000 	.word	0x70020000

08023414 <nand_erase_block>:

// 擦除NAND Flash的块
static uint32_t nand_erase_block(uint32_t page)
{
 8023414:	b580      	push	{r7, lr}
 8023416:	b082      	sub	sp, #8
 8023418:	af00      	add	r7, sp, #0
 802341a:	6078      	str	r0, [r7, #4]
    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase1_cmd;  // 发送擦除命令1给NAND Flash
 802341c:	4b2a      	ldr	r3, [pc, #168]	; (80234c8 <nand_erase_block+0xb4>)
 802341e:	4a2b      	ldr	r2, [pc, #172]	; (80234cc <nand_erase_block+0xb8>)
 8023420:	7bd2      	ldrb	r2, [r2, #15]
 8023422:	701a      	strb	r2, [r3, #0]

    switch (fsmc_conf.row_cycles)
 8023424:	4b29      	ldr	r3, [pc, #164]	; (80234cc <nand_erase_block+0xb8>)
 8023426:	799b      	ldrb	r3, [r3, #6]
 8023428:	3b01      	subs	r3, #1
 802342a:	2b03      	cmp	r3, #3
 802342c:	d83c      	bhi.n	80234a8 <nand_erase_block+0x94>
 802342e:	a201      	add	r2, pc, #4	; (adr r2, 8023434 <nand_erase_block+0x20>)
 8023430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023434:	08023445 	.word	0x08023445
 8023438:	0802344f 	.word	0x0802344f
 802343c:	08023463 	.word	0x08023463
 8023440:	08023481 	.word	0x08023481
    {
    case 1:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023444:	4b22      	ldr	r3, [pc, #136]	; (80234d0 <nand_erase_block+0xbc>)
 8023446:	687a      	ldr	r2, [r7, #4]
 8023448:	b2d2      	uxtb	r2, r2
 802344a:	701a      	strb	r2, [r3, #0]
        break;
 802344c:	e02d      	b.n	80234aa <nand_erase_block+0x96>
    case 2:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 802344e:	4b20      	ldr	r3, [pc, #128]	; (80234d0 <nand_erase_block+0xbc>)
 8023450:	687a      	ldr	r2, [r7, #4]
 8023452:	b2d2      	uxtb	r2, r2
 8023454:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023456:	687b      	ldr	r3, [r7, #4]
 8023458:	0a1a      	lsrs	r2, r3, #8
 802345a:	4b1d      	ldr	r3, [pc, #116]	; (80234d0 <nand_erase_block+0xbc>)
 802345c:	b2d2      	uxtb	r2, r2
 802345e:	701a      	strb	r2, [r3, #0]
        break;
 8023460:	e023      	b.n	80234aa <nand_erase_block+0x96>
    case 3:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023462:	4b1b      	ldr	r3, [pc, #108]	; (80234d0 <nand_erase_block+0xbc>)
 8023464:	687a      	ldr	r2, [r7, #4]
 8023466:	b2d2      	uxtb	r2, r2
 8023468:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 802346a:	687b      	ldr	r3, [r7, #4]
 802346c:	0a1a      	lsrs	r2, r3, #8
 802346e:	4b18      	ldr	r3, [pc, #96]	; (80234d0 <nand_erase_block+0xbc>)
 8023470:	b2d2      	uxtb	r2, r2
 8023472:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	0c1a      	lsrs	r2, r3, #16
 8023478:	4b15      	ldr	r3, [pc, #84]	; (80234d0 <nand_erase_block+0xbc>)
 802347a:	b2d2      	uxtb	r2, r2
 802347c:	701a      	strb	r2, [r3, #0]
        break;
 802347e:	e014      	b.n	80234aa <nand_erase_block+0x96>
    case 4:
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_1st_CYCLE(page);  // 发送行地址的第1个周期
 8023480:	4b13      	ldr	r3, [pc, #76]	; (80234d0 <nand_erase_block+0xbc>)
 8023482:	687a      	ldr	r2, [r7, #4]
 8023484:	b2d2      	uxtb	r2, r2
 8023486:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_2nd_CYCLE(page);  // 发送行地址的第2个周期
 8023488:	687b      	ldr	r3, [r7, #4]
 802348a:	0a1a      	lsrs	r2, r3, #8
 802348c:	4b10      	ldr	r3, [pc, #64]	; (80234d0 <nand_erase_block+0xbc>)
 802348e:	b2d2      	uxtb	r2, r2
 8023490:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_3rd_CYCLE(page);  // 发送行地址的第3个周期
 8023492:	687b      	ldr	r3, [r7, #4]
 8023494:	0c1a      	lsrs	r2, r3, #16
 8023496:	4b0e      	ldr	r3, [pc, #56]	; (80234d0 <nand_erase_block+0xbc>)
 8023498:	b2d2      	uxtb	r2, r2
 802349a:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = ADDR_4th_CYCLE(page);  // 发送行地址的第4个周期
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	0e1a      	lsrs	r2, r3, #24
 80234a0:	4b0b      	ldr	r3, [pc, #44]	; (80234d0 <nand_erase_block+0xbc>)
 80234a2:	b2d2      	uxtb	r2, r2
 80234a4:	701a      	strb	r2, [r3, #0]
        break;
 80234a6:	e000      	b.n	80234aa <nand_erase_block+0x96>
    default:
        break;
 80234a8:	bf00      	nop
    }

    if (fsmc_conf.erase2_cmd != UNDEFINED_CMD)
 80234aa:	4b08      	ldr	r3, [pc, #32]	; (80234cc <nand_erase_block+0xb8>)
 80234ac:	7c1b      	ldrb	r3, [r3, #16]
 80234ae:	2bff      	cmp	r3, #255	; 0xff
 80234b0:	d003      	beq.n	80234ba <nand_erase_block+0xa6>
        *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.erase2_cmd;  // 发送擦除命令2给NAND Flash
 80234b2:	4b05      	ldr	r3, [pc, #20]	; (80234c8 <nand_erase_block+0xb4>)
 80234b4:	4a05      	ldr	r2, [pc, #20]	; (80234cc <nand_erase_block+0xb8>)
 80234b6:	7c12      	ldrb	r2, [r2, #16]
 80234b8:	701a      	strb	r2, [r3, #0]

    return nand_get_status();  // 获取NAND Flash的状态
 80234ba:	f7ff fd27 	bl	8022f0c <nand_get_status>
 80234be:	4603      	mov	r3, r0
}
 80234c0:	4618      	mov	r0, r3
 80234c2:	3708      	adds	r7, #8
 80234c4:	46bd      	mov	sp, r7
 80234c6:	bd80      	pop	{r7, pc}
 80234c8:	70010000 	.word	0x70010000
 80234cc:	20000c48 	.word	0x20000c48
 80234d0:	70020000 	.word	0x70020000

080234d4 <nand_is_bb_supported>:

// 检查是否支持坏块
static inline bool nand_is_bb_supported()
{
 80234d4:	b480      	push	{r7}
 80234d6:	af00      	add	r7, sp, #0
    return true;
 80234d8:	2301      	movs	r3, #1
}
 80234da:	4618      	mov	r0, r3
 80234dc:	46bd      	mov	sp, r7
 80234de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234e2:	4770      	bx	lr

080234e4 <nand_enable_hw_ecc>:

// 启用或禁用硬件ECC
static uint32_t nand_enable_hw_ecc(bool enable)
{
 80234e4:	b480      	push	{r7}
 80234e6:	b085      	sub	sp, #20
 80234e8:	af00      	add	r7, sp, #0
 80234ea:	4603      	mov	r3, r0
 80234ec:	71fb      	strb	r3, [r7, #7]
    uint8_t enable_ecc;

    if (fsmc_conf.set_features_cmd == UNDEFINED_CMD)
 80234ee:	4b17      	ldr	r3, [pc, #92]	; (802354c <nand_enable_hw_ecc+0x68>)
 80234f0:	7c9b      	ldrb	r3, [r3, #18]
 80234f2:	2bff      	cmp	r3, #255	; 0xff
 80234f4:	d101      	bne.n	80234fa <nand_enable_hw_ecc+0x16>
        return FLASH_STATUS_INVALID_CMD;
 80234f6:	2304      	movs	r3, #4
 80234f8:	e021      	b.n	802353e <nand_enable_hw_ecc+0x5a>

    enable_ecc = enable ? fsmc_conf.enable_ecc_value : fsmc_conf.disable_ecc_value;
 80234fa:	79fb      	ldrb	r3, [r7, #7]
 80234fc:	2b00      	cmp	r3, #0
 80234fe:	d002      	beq.n	8023506 <nand_enable_hw_ecc+0x22>
 8023500:	4b12      	ldr	r3, [pc, #72]	; (802354c <nand_enable_hw_ecc+0x68>)
 8023502:	7d1b      	ldrb	r3, [r3, #20]
 8023504:	e001      	b.n	802350a <nand_enable_hw_ecc+0x26>
 8023506:	4b11      	ldr	r3, [pc, #68]	; (802354c <nand_enable_hw_ecc+0x68>)
 8023508:	7d5b      	ldrb	r3, [r3, #21]
 802350a:	73fb      	strb	r3, [r7, #15]

    *(__IO uint8_t *)(Bank_NAND_ADDR | CMD_AREA) = fsmc_conf.set_features_cmd;  // 发送设置特性命令给NAND Flash
 802350c:	4b10      	ldr	r3, [pc, #64]	; (8023550 <nand_enable_hw_ecc+0x6c>)
 802350e:	4a0f      	ldr	r2, [pc, #60]	; (802354c <nand_enable_hw_ecc+0x68>)
 8023510:	7c92      	ldrb	r2, [r2, #18]
 8023512:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | ADDR_AREA) = fsmc_conf.enable_ecc_addr;  // 发送使能ECC地址
 8023514:	4b0f      	ldr	r3, [pc, #60]	; (8023554 <nand_enable_hw_ecc+0x70>)
 8023516:	4a0d      	ldr	r2, [pc, #52]	; (802354c <nand_enable_hw_ecc+0x68>)
 8023518:	7cd2      	ldrb	r2, [r2, #19]
 802351a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = enable_ecc;  // 发送使能ECC的值
 802351c:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8023520:	7bfb      	ldrb	r3, [r7, #15]
 8023522:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023524:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023528:	2200      	movs	r2, #0
 802352a:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 802352c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023530:	2200      	movs	r2, #0
 8023532:	701a      	strb	r2, [r3, #0]
    *(__IO uint8_t *)(Bank_NAND_ADDR | DATA_AREA) = 0;
 8023534:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023538:	2200      	movs	r2, #0
 802353a:	701a      	strb	r2, [r3, #0]

    return 0;
 802353c:	2300      	movs	r3, #0
}
 802353e:	4618      	mov	r0, r3
 8023540:	3714      	adds	r7, #20
 8023542:	46bd      	mov	sp, r7
 8023544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023548:	4770      	bx	lr
 802354a:	bf00      	nop
 802354c:	20000c48 	.word	0x20000c48
 8023550:	70010000 	.word	0x70010000
 8023554:	70020000 	.word	0x70020000

08023558 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8023558:	b580      	push	{r7, lr}
 802355a:	b08c      	sub	sp, #48	; 0x30
 802355c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802355e:	f107 031c 	add.w	r3, r7, #28
 8023562:	2200      	movs	r2, #0
 8023564:	601a      	str	r2, [r3, #0]
 8023566:	605a      	str	r2, [r3, #4]
 8023568:	609a      	str	r2, [r3, #8]
 802356a:	60da      	str	r2, [r3, #12]
 802356c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802356e:	2300      	movs	r3, #0
 8023570:	61bb      	str	r3, [r7, #24]
 8023572:	4b6b      	ldr	r3, [pc, #428]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023576:	4a6a      	ldr	r2, [pc, #424]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023578:	f043 0310 	orr.w	r3, r3, #16
 802357c:	6313      	str	r3, [r2, #48]	; 0x30
 802357e:	4b68      	ldr	r3, [pc, #416]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023582:	f003 0310 	and.w	r3, r3, #16
 8023586:	61bb      	str	r3, [r7, #24]
 8023588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802358a:	2300      	movs	r3, #0
 802358c:	617b      	str	r3, [r7, #20]
 802358e:	4b64      	ldr	r3, [pc, #400]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023592:	4a63      	ldr	r2, [pc, #396]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023594:	f043 0304 	orr.w	r3, r3, #4
 8023598:	6313      	str	r3, [r2, #48]	; 0x30
 802359a:	4b61      	ldr	r3, [pc, #388]	; (8023720 <MX_GPIO_Init+0x1c8>)
 802359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802359e:	f003 0304 	and.w	r3, r3, #4
 80235a2:	617b      	str	r3, [r7, #20]
 80235a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80235a6:	2300      	movs	r3, #0
 80235a8:	613b      	str	r3, [r7, #16]
 80235aa:	4b5d      	ldr	r3, [pc, #372]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235ae:	4a5c      	ldr	r2, [pc, #368]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80235b4:	6313      	str	r3, [r2, #48]	; 0x30
 80235b6:	4b5a      	ldr	r3, [pc, #360]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235be:	613b      	str	r3, [r7, #16]
 80235c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80235c2:	2300      	movs	r3, #0
 80235c4:	60fb      	str	r3, [r7, #12]
 80235c6:	4b56      	ldr	r3, [pc, #344]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235ca:	4a55      	ldr	r2, [pc, #340]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235cc:	f043 0301 	orr.w	r3, r3, #1
 80235d0:	6313      	str	r3, [r2, #48]	; 0x30
 80235d2:	4b53      	ldr	r3, [pc, #332]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235d6:	f003 0301 	and.w	r3, r3, #1
 80235da:	60fb      	str	r3, [r7, #12]
 80235dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80235de:	2300      	movs	r3, #0
 80235e0:	60bb      	str	r3, [r7, #8]
 80235e2:	4b4f      	ldr	r3, [pc, #316]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235e6:	4a4e      	ldr	r2, [pc, #312]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235e8:	f043 0302 	orr.w	r3, r3, #2
 80235ec:	6313      	str	r3, [r2, #48]	; 0x30
 80235ee:	4b4c      	ldr	r3, [pc, #304]	; (8023720 <MX_GPIO_Init+0x1c8>)
 80235f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235f2:	f003 0302 	and.w	r3, r3, #2
 80235f6:	60bb      	str	r3, [r7, #8]
 80235f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80235fa:	2300      	movs	r3, #0
 80235fc:	607b      	str	r3, [r7, #4]
 80235fe:	4b48      	ldr	r3, [pc, #288]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023602:	4a47      	ldr	r2, [pc, #284]	; (8023720 <MX_GPIO_Init+0x1c8>)
 8023604:	f043 0308 	orr.w	r3, r3, #8
 8023608:	6313      	str	r3, [r2, #48]	; 0x30
 802360a:	4b45      	ldr	r3, [pc, #276]	; (8023720 <MX_GPIO_Init+0x1c8>)
 802360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802360e:	f003 0308 	and.w	r3, r3, #8
 8023612:	607b      	str	r3, [r7, #4]
 8023614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8023616:	2201      	movs	r2, #1
 8023618:	2140      	movs	r1, #64	; 0x40
 802361a:	4842      	ldr	r0, [pc, #264]	; (8023724 <MX_GPIO_Init+0x1cc>)
 802361c:	f005 f8ea 	bl	80287f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8023620:	2200      	movs	r2, #0
 8023622:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8023626:	4840      	ldr	r0, [pc, #256]	; (8023728 <MX_GPIO_Init+0x1d0>)
 8023628:	f005 f8e4 	bl	80287f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 802362c:	2201      	movs	r2, #1
 802362e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8023632:	483d      	ldr	r0, [pc, #244]	; (8023728 <MX_GPIO_Init+0x1d0>)
 8023634:	f005 f8de 	bl	80287f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8023638:	2200      	movs	r2, #0
 802363a:	2110      	movs	r1, #16
 802363c:	483b      	ldr	r0, [pc, #236]	; (802372c <MX_GPIO_Init+0x1d4>)
 802363e:	f005 f8d9 	bl	80287f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8023642:	233f      	movs	r3, #63	; 0x3f
 8023644:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023646:	2303      	movs	r3, #3
 8023648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802364a:	2300      	movs	r3, #0
 802364c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802364e:	f107 031c 	add.w	r3, r7, #28
 8023652:	4619      	mov	r1, r3
 8023654:	4833      	ldr	r0, [pc, #204]	; (8023724 <MX_GPIO_Init+0x1cc>)
 8023656:	f004 fe35 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 802365a:	2340      	movs	r3, #64	; 0x40
 802365c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802365e:	2301      	movs	r3, #1
 8023660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023662:	2301      	movs	r3, #1
 8023664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023666:	2300      	movs	r3, #0
 8023668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 802366a:	f107 031c 	add.w	r3, r7, #28
 802366e:	4619      	mov	r1, r3
 8023670:	482c      	ldr	r0, [pc, #176]	; (8023724 <MX_GPIO_Init+0x1cc>)
 8023672:	f004 fe27 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8023676:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 802367a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802367c:	2301      	movs	r3, #1
 802367e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023680:	2301      	movs	r3, #1
 8023682:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023684:	2300      	movs	r3, #0
 8023686:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023688:	f107 031c 	add.w	r3, r7, #28
 802368c:	4619      	mov	r1, r3
 802368e:	4826      	ldr	r0, [pc, #152]	; (8023728 <MX_GPIO_Init+0x1d0>)
 8023690:	f004 fe18 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8023694:	f641 73f2 	movw	r3, #8178	; 0x1ff2
 8023698:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802369a:	2303      	movs	r3, #3
 802369c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802369e:	2300      	movs	r3, #0
 80236a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80236a2:	f107 031c 	add.w	r3, r7, #28
 80236a6:	4619      	mov	r1, r3
 80236a8:	481f      	ldr	r0, [pc, #124]	; (8023728 <MX_GPIO_Init+0x1d0>)
 80236aa:	f004 fe0b 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 80236ae:	f248 1307 	movw	r3, #33031	; 0x8107
 80236b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80236b4:	2303      	movs	r3, #3
 80236b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236b8:	2300      	movs	r3, #0
 80236ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80236bc:	f107 031c 	add.w	r3, r7, #28
 80236c0:	4619      	mov	r1, r3
 80236c2:	481a      	ldr	r0, [pc, #104]	; (802372c <MX_GPIO_Init+0x1d4>)
 80236c4:	f004 fdfe 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80236c8:	2310      	movs	r3, #16
 80236ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80236cc:	2301      	movs	r3, #1
 80236ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236d0:	2300      	movs	r3, #0
 80236d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80236d4:	2303      	movs	r3, #3
 80236d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80236d8:	f107 031c 	add.w	r3, r7, #28
 80236dc:	4619      	mov	r1, r3
 80236de:	4813      	ldr	r0, [pc, #76]	; (802372c <MX_GPIO_Init+0x1d4>)
 80236e0:	f004 fdf0 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB14 PB15 PB4
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80236e4:	f24c 33d4 	movw	r3, #50132	; 0xc3d4
 80236e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80236ea:	2303      	movs	r3, #3
 80236ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236ee:	2300      	movs	r3, #0
 80236f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80236f2:	f107 031c 	add.w	r3, r7, #28
 80236f6:	4619      	mov	r1, r3
 80236f8:	480d      	ldr	r0, [pc, #52]	; (8023730 <MX_GPIO_Init+0x1d8>)
 80236fa:	f004 fde3 	bl	80282c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80236fe:	f242 030c 	movw	r3, #8204	; 0x200c
 8023702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023704:	2303      	movs	r3, #3
 8023706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023708:	2300      	movs	r3, #0
 802370a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802370c:	f107 031c 	add.w	r3, r7, #28
 8023710:	4619      	mov	r1, r3
 8023712:	4808      	ldr	r0, [pc, #32]	; (8023734 <MX_GPIO_Init+0x1dc>)
 8023714:	f004 fdd6 	bl	80282c4 <HAL_GPIO_Init>

}
 8023718:	bf00      	nop
 802371a:	3730      	adds	r7, #48	; 0x30
 802371c:	46bd      	mov	sp, r7
 802371e:	bd80      	pop	{r7, pc}
 8023720:	40023800 	.word	0x40023800
 8023724:	40021000 	.word	0x40021000
 8023728:	40020800 	.word	0x40020800
 802372c:	40020000 	.word	0x40020000
 8023730:	40020400 	.word	0x40020400
 8023734:	40020c00 	.word	0x40020c00

08023738 <jtag_init>:
 */

#include <stm32f4xx.h>

void jtag_init()
{
 8023738:	b580      	push	{r7, lr}
 802373a:	af00      	add	r7, sp, #0
    /* Enable JTAG in low power mode */
    HAL_DBGMCU_EnableDBGSleepMode();
 802373c:	f004 f830 	bl	80277a0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8023740:	f004 f84e 	bl	80277e0 <HAL_DBGMCU_EnableDBGStandbyMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8023744:	f004 f83c 	bl	80277c0 <HAL_DBGMCU_EnableDBGStopMode>
}
 8023748:	bf00      	nop
 802374a:	bd80      	pop	{r7, pc}

0802374c <led_init>:

#include "led.h"
#include "gpio.h"

void led_init()
{
 802374c:	b580      	push	{r7, lr}
 802374e:	b088      	sub	sp, #32
 8023750:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023752:	f107 030c 	add.w	r3, r7, #12
 8023756:	2200      	movs	r2, #0
 8023758:	601a      	str	r2, [r3, #0]
 802375a:	605a      	str	r2, [r3, #4]
 802375c:	609a      	str	r2, [r3, #8]
 802375e:	60da      	str	r2, [r3, #12]
 8023760:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE(); // 初始化GPIOE时钟
 8023762:	2300      	movs	r3, #0
 8023764:	60bb      	str	r3, [r7, #8]
 8023766:	4b26      	ldr	r3, [pc, #152]	; (8023800 <led_init+0xb4>)
 8023768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802376a:	4a25      	ldr	r2, [pc, #148]	; (8023800 <led_init+0xb4>)
 802376c:	f043 0310 	orr.w	r3, r3, #16
 8023770:	6313      	str	r3, [r2, #48]	; 0x30
 8023772:	4b23      	ldr	r3, [pc, #140]	; (8023800 <led_init+0xb4>)
 8023774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023776:	f003 0310 	and.w	r3, r3, #16
 802377a:	60bb      	str	r3, [r7, #8]
 802377c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE(); // 初始化GPIOC时钟
 802377e:	2300      	movs	r3, #0
 8023780:	607b      	str	r3, [r7, #4]
 8023782:	4b1f      	ldr	r3, [pc, #124]	; (8023800 <led_init+0xb4>)
 8023784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023786:	4a1e      	ldr	r2, [pc, #120]	; (8023800 <led_init+0xb4>)
 8023788:	f043 0304 	orr.w	r3, r3, #4
 802378c:	6313      	str	r3, [r2, #48]	; 0x30
 802378e:	4b1c      	ldr	r3, [pc, #112]	; (8023800 <led_init+0xb4>)
 8023790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023792:	f003 0304 	and.w	r3, r3, #4
 8023796:	607b      	str	r3, [r7, #4]
 8023798:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 802379a:	2201      	movs	r2, #1
 802379c:	2140      	movs	r1, #64	; 0x40
 802379e:	4819      	ldr	r0, [pc, #100]	; (8023804 <led_init+0xb8>)
 80237a0:	f005 f828 	bl	80287f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 80237a4:	2201      	movs	r2, #1
 80237a6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80237aa:	4817      	ldr	r0, [pc, #92]	; (8023808 <led_init+0xbc>)
 80237ac:	f005 f822 	bl	80287f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = LED4_Pin;
 80237b0:	2340      	movs	r3, #64	; 0x40
 80237b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80237b4:	2301      	movs	r3, #1
 80237b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80237b8:	2301      	movs	r3, #1
 80237ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80237bc:	2300      	movs	r3, #0
 80237be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80237c0:	f107 030c 	add.w	r3, r7, #12
 80237c4:	4619      	mov	r1, r3
 80237c6:	480f      	ldr	r0, [pc, #60]	; (8023804 <led_init+0xb8>)
 80237c8:	f004 fd7c 	bl	80282c4 <HAL_GPIO_Init>

    /*Configure GPIO pins : PCPin PCPin PCPin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80237cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80237d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80237d2:	2301      	movs	r3, #1
 80237d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80237d6:	2301      	movs	r3, #1
 80237d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80237da:	2300      	movs	r3, #0
 80237dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80237de:	f107 030c 	add.w	r3, r7, #12
 80237e2:	4619      	mov	r1, r3
 80237e4:	4808      	ldr	r0, [pc, #32]	; (8023808 <led_init+0xbc>)
 80237e6:	f004 fd6d 	bl	80282c4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, LED1_Pin | LED2_Pin, GPIO_PIN_RESET); // 将引脚0和引脚1的状态置为低电平
 80237ea:	2200      	movs	r2, #0
 80237ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80237f0:	4805      	ldr	r0, [pc, #20]	; (8023808 <led_init+0xbc>)
 80237f2:	f004 ffff 	bl	80287f4 <HAL_GPIO_WritePin>
}
 80237f6:	bf00      	nop
 80237f8:	3720      	adds	r7, #32
 80237fa:	46bd      	mov	sp, r7
 80237fc:	bd80      	pop	{r7, pc}
 80237fe:	bf00      	nop
 8023800:	40023800 	.word	0x40023800
 8023804:	40021000 	.word	0x40021000
 8023808:	40020800 	.word	0x40020800

0802380c <led_set>:

static void led_set(GPIO_TypeDef *gpiox, uint16_t pin, bool on)
{
 802380c:	b580      	push	{r7, lr}
 802380e:	b082      	sub	sp, #8
 8023810:	af00      	add	r7, sp, #0
 8023812:	6078      	str	r0, [r7, #4]
 8023814:	460b      	mov	r3, r1
 8023816:	807b      	strh	r3, [r7, #2]
 8023818:	4613      	mov	r3, r2
 802381a:	707b      	strb	r3, [r7, #1]
    if (on)
 802381c:	787b      	ldrb	r3, [r7, #1]
 802381e:	2b00      	cmp	r3, #0
 8023820:	d006      	beq.n	8023830 <led_set+0x24>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_SET); // 设置引脚为高电平
 8023822:	887b      	ldrh	r3, [r7, #2]
 8023824:	2201      	movs	r2, #1
 8023826:	4619      	mov	r1, r3
 8023828:	6878      	ldr	r0, [r7, #4]
 802382a:	f004 ffe3 	bl	80287f4 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
}
 802382e:	e005      	b.n	802383c <led_set+0x30>
    	HAL_GPIO_WritePin(gpiox, pin, GPIO_PIN_RESET); // 设置引脚为低电平
 8023830:	887b      	ldrh	r3, [r7, #2]
 8023832:	2200      	movs	r2, #0
 8023834:	4619      	mov	r1, r3
 8023836:	6878      	ldr	r0, [r7, #4]
 8023838:	f004 ffdc 	bl	80287f4 <HAL_GPIO_WritePin>
}
 802383c:	bf00      	nop
 802383e:	3708      	adds	r7, #8
 8023840:	46bd      	mov	sp, r7
 8023842:	bd80      	pop	{r7, pc}

08023844 <led_wr_set>:

void led_wr_set(bool on)
{
 8023844:	b580      	push	{r7, lr}
 8023846:	b082      	sub	sp, #8
 8023848:	af00      	add	r7, sp, #0
 802384a:	4603      	mov	r3, r0
 802384c:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED1_Pin, on); // 设置引脚LED1的状态
 802384e:	79fb      	ldrb	r3, [r7, #7]
 8023850:	461a      	mov	r2, r3
 8023852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8023856:	4803      	ldr	r0, [pc, #12]	; (8023864 <led_wr_set+0x20>)
 8023858:	f7ff ffd8 	bl	802380c <led_set>
}
 802385c:	bf00      	nop
 802385e:	3708      	adds	r7, #8
 8023860:	46bd      	mov	sp, r7
 8023862:	bd80      	pop	{r7, pc}
 8023864:	40020800 	.word	0x40020800

08023868 <led_rd_set>:

void led_rd_set(bool on)
{
 8023868:	b580      	push	{r7, lr}
 802386a:	b082      	sub	sp, #8
 802386c:	af00      	add	r7, sp, #0
 802386e:	4603      	mov	r3, r0
 8023870:	71fb      	strb	r3, [r7, #7]
    led_set(GPIOC, LED2_Pin, on); // 设置引脚LED2的状态
 8023872:	79fb      	ldrb	r3, [r7, #7]
 8023874:	461a      	mov	r2, r3
 8023876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802387a:	4803      	ldr	r0, [pc, #12]	; (8023888 <led_rd_set+0x20>)
 802387c:	f7ff ffc6 	bl	802380c <led_set>
}
 8023880:	bf00      	nop
 8023882:	3708      	adds	r7, #8
 8023884:	46bd      	mov	sp, r7
 8023886:	bd80      	pop	{r7, pc}
 8023888:	40020800 	.word	0x40020800

0802388c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 802388c:	b580      	push	{r7, lr}
 802388e:	b084      	sub	sp, #16
 8023890:	af00      	add	r7, sp, #0
 8023892:	60f8      	str	r0, [r7, #12]
 8023894:	60b9      	str	r1, [r7, #8]
 8023896:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	b29a      	uxth	r2, r3
 802389c:	f04f 33ff 	mov.w	r3, #4294967295
 80238a0:	68b9      	ldr	r1, [r7, #8]
 80238a2:	4804      	ldr	r0, [pc, #16]	; (80238b4 <_write+0x28>)
 80238a4:	f008 fa2f 	bl	802bd06 <HAL_UART_Transmit>
    return len;
 80238a8:	687b      	ldr	r3, [r7, #4]
}
 80238aa:	4618      	mov	r0, r3
 80238ac:	3710      	adds	r7, #16
 80238ae:	46bd      	mov	sp, r7
 80238b0:	bd80      	pop	{r7, pc}
 80238b2:	bf00      	nop
 80238b4:	200051b4 	.word	0x200051b4

080238b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80238b8:	b580      	push	{r7, lr}
 80238ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80238bc:	b662      	cpsie	i
}
 80238be:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80238c0:	f003 fed8 	bl	8027674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80238c4:	f000 f858 	bl	8023978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80238c8:	f7ff fe46 	bl	8023558 <MX_GPIO_Init>
  MX_FSMC_Init();
 80238cc:	f7ff f87e 	bl	80229cc <MX_FSMC_Init>
  MX_RTC_Init();
 80238d0:	f002 fba6 	bl	8026020 <MX_RTC_Init>
  MX_SPI1_Init();
 80238d4:	f002 fc28 	bl	8026128 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80238d8:	f003 fe28 	bl	802752c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80238dc:	f00c feb6 	bl	803064c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\nNAND programmer ver: %d.%d.%d\r\n", SW_VERSION_MAJOR,
 80238e0:	2300      	movs	r3, #0
 80238e2:	2205      	movs	r2, #5
 80238e4:	2103      	movs	r1, #3
 80238e6:	481c      	ldr	r0, [pc, #112]	; (8023958 <main+0xa0>)
 80238e8:	f00d fee2 	bl	80316b0 <iprintf>
      SW_VERSION_MINOR, SW_VERSION_BUILD);

  if (!is_external_clock_avail())
 80238ec:	f7fe ffe2 	bl	80228b4 <is_external_clock_avail>
 80238f0:	4603      	mov	r3, r0
 80238f2:	f083 0301 	eor.w	r3, r3, #1
 80238f6:	b2db      	uxtb	r3, r3
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	d002      	beq.n	8023902 <main+0x4a>
      printf("External clock not detected. Fallback to internal clock.\r\n");
 80238fc:	4817      	ldr	r0, [pc, #92]	; (802395c <main+0xa4>)
 80238fe:	f00d ff3d 	bl	803177c <puts>

  printf("JTAG init...");
 8023902:	4817      	ldr	r0, [pc, #92]	; (8023960 <main+0xa8>)
 8023904:	f00d fed4 	bl	80316b0 <iprintf>
  jtag_init();
 8023908:	f7ff ff16 	bl	8023738 <jtag_init>
  printf("done.\r\n");
 802390c:	4815      	ldr	r0, [pc, #84]	; (8023964 <main+0xac>)
 802390e:	f00d ff35 	bl	803177c <puts>

  printf("LED init...");
 8023912:	4815      	ldr	r0, [pc, #84]	; (8023968 <main+0xb0>)
 8023914:	f00d fecc 	bl	80316b0 <iprintf>
  led_init();
 8023918:	f7ff ff18 	bl	802374c <led_init>
  printf("done.\r\n");
 802391c:	4811      	ldr	r0, [pc, #68]	; (8023964 <main+0xac>)
 802391e:	f00d ff2d 	bl	803177c <puts>

  printf("USB init...");
 8023922:	4812      	ldr	r0, [pc, #72]	; (802396c <main+0xb4>)
 8023924:	f00d fec4 	bl	80316b0 <iprintf>
  MX_USB_DEVICE_Init();
 8023928:	f00c fe90 	bl	803064c <MX_USB_DEVICE_Init>
  printf("done.\r\n");
 802392c:	480d      	ldr	r0, [pc, #52]	; (8023964 <main+0xac>)
 802392e:	f00d ff25 	bl	803177c <puts>

  printf("CDC init...");
 8023932:	480f      	ldr	r0, [pc, #60]	; (8023970 <main+0xb8>)
 8023934:	f00d febc 	bl	80316b0 <iprintf>
  cdc_init();
 8023938:	f7fe fe78 	bl	802262c <cdc_init>
  printf("done.\r\n");
 802393c:	4809      	ldr	r0, [pc, #36]	; (8023964 <main+0xac>)
 802393e:	f00d ff1d 	bl	803177c <puts>

  printf("Programmer init...");
 8023942:	480c      	ldr	r0, [pc, #48]	; (8023974 <main+0xbc>)
 8023944:	f00d feb4 	bl	80316b0 <iprintf>
  np_init();
 8023948:	f002 fb3e 	bl	8025fc8 <np_init>
  printf("done.\r\n");
 802394c:	4805      	ldr	r0, [pc, #20]	; (8023964 <main+0xac>)
 802394e:	f00d ff15 	bl	803177c <puts>
	else
		printf(" W25Q256JV QuadSPI Test False\r\n");
*/

  while (1)
      np_handler();
 8023952:	f002 fb49 	bl	8025fe8 <np_handler>
 8023956:	e7fc      	b.n	8023952 <main+0x9a>
 8023958:	08032700 	.word	0x08032700
 802395c:	08032724 	.word	0x08032724
 8023960:	08032760 	.word	0x08032760
 8023964:	08032770 	.word	0x08032770
 8023968:	08032778 	.word	0x08032778
 802396c:	08032784 	.word	0x08032784
 8023970:	08032790 	.word	0x08032790
 8023974:	0803279c 	.word	0x0803279c

08023978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8023978:	b580      	push	{r7, lr}
 802397a:	b094      	sub	sp, #80	; 0x50
 802397c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802397e:	f107 0320 	add.w	r3, r7, #32
 8023982:	2230      	movs	r2, #48	; 0x30
 8023984:	2100      	movs	r1, #0
 8023986:	4618      	mov	r0, r3
 8023988:	f00d ffd8 	bl	803193c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802398c:	f107 030c 	add.w	r3, r7, #12
 8023990:	2200      	movs	r2, #0
 8023992:	601a      	str	r2, [r3, #0]
 8023994:	605a      	str	r2, [r3, #4]
 8023996:	609a      	str	r2, [r3, #8]
 8023998:	60da      	str	r2, [r3, #12]
 802399a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802399c:	2300      	movs	r3, #0
 802399e:	60bb      	str	r3, [r7, #8]
 80239a0:	4b29      	ldr	r3, [pc, #164]	; (8023a48 <SystemClock_Config+0xd0>)
 80239a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239a4:	4a28      	ldr	r2, [pc, #160]	; (8023a48 <SystemClock_Config+0xd0>)
 80239a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80239aa:	6413      	str	r3, [r2, #64]	; 0x40
 80239ac:	4b26      	ldr	r3, [pc, #152]	; (8023a48 <SystemClock_Config+0xd0>)
 80239ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80239b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80239b4:	60bb      	str	r3, [r7, #8]
 80239b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80239b8:	2300      	movs	r3, #0
 80239ba:	607b      	str	r3, [r7, #4]
 80239bc:	4b23      	ldr	r3, [pc, #140]	; (8023a4c <SystemClock_Config+0xd4>)
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	4a22      	ldr	r2, [pc, #136]	; (8023a4c <SystemClock_Config+0xd4>)
 80239c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80239c6:	6013      	str	r3, [r2, #0]
 80239c8:	4b20      	ldr	r3, [pc, #128]	; (8023a4c <SystemClock_Config+0xd4>)
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80239d0:	607b      	str	r3, [r7, #4]
 80239d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80239d4:	2309      	movs	r3, #9
 80239d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80239d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80239dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80239de:	2301      	movs	r3, #1
 80239e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80239e2:	2302      	movs	r3, #2
 80239e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80239e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80239ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80239ec:	2305      	movs	r3, #5
 80239ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80239f0:	23a8      	movs	r3, #168	; 0xa8
 80239f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80239f4:	2302      	movs	r3, #2
 80239f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80239f8:	2307      	movs	r3, #7
 80239fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80239fc:	f107 0320 	add.w	r3, r7, #32
 8023a00:	4618      	mov	r0, r3
 8023a02:	f006 fad3 	bl	8029fac <HAL_RCC_OscConfig>
 8023a06:	4603      	mov	r3, r0
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	d001      	beq.n	8023a10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8023a0c:	f000 f820 	bl	8023a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023a10:	230f      	movs	r3, #15
 8023a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023a14:	2302      	movs	r3, #2
 8023a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023a18:	2300      	movs	r3, #0
 8023a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8023a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023a28:	f107 030c 	add.w	r3, r7, #12
 8023a2c:	2105      	movs	r1, #5
 8023a2e:	4618      	mov	r0, r3
 8023a30:	f006 fd34 	bl	802a49c <HAL_RCC_ClockConfig>
 8023a34:	4603      	mov	r3, r0
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d001      	beq.n	8023a3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8023a3a:	f000 f809 	bl	8023a50 <Error_Handler>
  }
}
 8023a3e:	bf00      	nop
 8023a40:	3750      	adds	r7, #80	; 0x50
 8023a42:	46bd      	mov	sp, r7
 8023a44:	bd80      	pop	{r7, pc}
 8023a46:	bf00      	nop
 8023a48:	40023800 	.word	0x40023800
 8023a4c:	40007000 	.word	0x40007000

08023a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023a50:	b480      	push	{r7}
 8023a52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8023a54:	b672      	cpsid	i
}
 8023a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023a58:	e7fe      	b.n	8023a58 <Error_Handler+0x8>
	...

08023a5c <nand_bad_block_table_init>:

static uint32_t nand_bad_block_table_count; // NAND 坏块表中的块计数
static uint32_t nand_bad_block_table[NAND_BAD_BLOCK_TABLE_SIZE]; // NAND 坏块表

void nand_bad_block_table_init()
{
 8023a5c:	b580      	push	{r7, lr}
 8023a5e:	af00      	add	r7, sp, #0
    memset(nand_bad_block_table, 0, sizeof(nand_bad_block_table)); // 初始化 NAND 坏块表为 0
 8023a60:	2250      	movs	r2, #80	; 0x50
 8023a62:	2100      	movs	r1, #0
 8023a64:	4803      	ldr	r0, [pc, #12]	; (8023a74 <nand_bad_block_table_init+0x18>)
 8023a66:	f00d ff69 	bl	803193c <memset>
    nand_bad_block_table_count = 0; // 初始化 NAND 坏块计数为 0
 8023a6a:	4b03      	ldr	r3, [pc, #12]	; (8023a78 <nand_bad_block_table_init+0x1c>)
 8023a6c:	2200      	movs	r2, #0
 8023a6e:	601a      	str	r2, [r3, #0]
}
 8023a70:	bf00      	nop
 8023a72:	bd80      	pop	{r7, pc}
 8023a74:	20000c68 	.word	0x20000c68
 8023a78:	20000c64 	.word	0x20000c64

08023a7c <nand_bad_block_table_add>:

int nand_bad_block_table_add(uint32_t page)
{
 8023a7c:	b480      	push	{r7}
 8023a7e:	b083      	sub	sp, #12
 8023a80:	af00      	add	r7, sp, #0
 8023a82:	6078      	str	r0, [r7, #4]
    if (nand_bad_block_table_count == NAND_BAD_BLOCK_TABLE_SIZE)
 8023a84:	4b0b      	ldr	r3, [pc, #44]	; (8023ab4 <nand_bad_block_table_add+0x38>)
 8023a86:	681b      	ldr	r3, [r3, #0]
 8023a88:	2b14      	cmp	r3, #20
 8023a8a:	d102      	bne.n	8023a92 <nand_bad_block_table_add+0x16>
        return -1; // 坏块表已满，无法添加
 8023a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8023a90:	e009      	b.n	8023aa6 <nand_bad_block_table_add+0x2a>

    nand_bad_block_table[nand_bad_block_table_count++] = page; // 在坏块表末尾添加新的块
 8023a92:	4b08      	ldr	r3, [pc, #32]	; (8023ab4 <nand_bad_block_table_add+0x38>)
 8023a94:	681b      	ldr	r3, [r3, #0]
 8023a96:	1c5a      	adds	r2, r3, #1
 8023a98:	4906      	ldr	r1, [pc, #24]	; (8023ab4 <nand_bad_block_table_add+0x38>)
 8023a9a:	600a      	str	r2, [r1, #0]
 8023a9c:	4906      	ldr	r1, [pc, #24]	; (8023ab8 <nand_bad_block_table_add+0x3c>)
 8023a9e:	687a      	ldr	r2, [r7, #4]
 8023aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 0; // 添加成功
 8023aa4:	2300      	movs	r3, #0
}
 8023aa6:	4618      	mov	r0, r3
 8023aa8:	370c      	adds	r7, #12
 8023aaa:	46bd      	mov	sp, r7
 8023aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ab0:	4770      	bx	lr
 8023ab2:	bf00      	nop
 8023ab4:	20000c64 	.word	0x20000c64
 8023ab8:	20000c68 	.word	0x20000c68

08023abc <nand_bad_block_table_lookup>:

bool nand_bad_block_table_lookup(uint32_t page)
{
 8023abc:	b480      	push	{r7}
 8023abe:	b085      	sub	sp, #20
 8023ac0:	af00      	add	r7, sp, #0
 8023ac2:	6078      	str	r0, [r7, #4]
    uint32_t i;

    for (i = 0; i < nand_bad_block_table_count; i++)
 8023ac4:	2300      	movs	r3, #0
 8023ac6:	60fb      	str	r3, [r7, #12]
 8023ac8:	e00b      	b.n	8023ae2 <nand_bad_block_table_lookup+0x26>
    {
        if (nand_bad_block_table[i] == page)
 8023aca:	4a0c      	ldr	r2, [pc, #48]	; (8023afc <nand_bad_block_table_lookup+0x40>)
 8023acc:	68fb      	ldr	r3, [r7, #12]
 8023ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8023ad2:	687a      	ldr	r2, [r7, #4]
 8023ad4:	429a      	cmp	r2, r3
 8023ad6:	d101      	bne.n	8023adc <nand_bad_block_table_lookup+0x20>
            return true; // 在坏块表中找到了对应的块
 8023ad8:	2301      	movs	r3, #1
 8023ada:	e008      	b.n	8023aee <nand_bad_block_table_lookup+0x32>
    for (i = 0; i < nand_bad_block_table_count; i++)
 8023adc:	68fb      	ldr	r3, [r7, #12]
 8023ade:	3301      	adds	r3, #1
 8023ae0:	60fb      	str	r3, [r7, #12]
 8023ae2:	4b07      	ldr	r3, [pc, #28]	; (8023b00 <nand_bad_block_table_lookup+0x44>)
 8023ae4:	681b      	ldr	r3, [r3, #0]
 8023ae6:	68fa      	ldr	r2, [r7, #12]
 8023ae8:	429a      	cmp	r2, r3
 8023aea:	d3ee      	bcc.n	8023aca <nand_bad_block_table_lookup+0xe>
    }

    return false; // 在坏块表中未找到对应的块
 8023aec:	2300      	movs	r3, #0
}
 8023aee:	4618      	mov	r0, r3
 8023af0:	3714      	adds	r7, #20
 8023af2:	46bd      	mov	sp, r7
 8023af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023af8:	4770      	bx	lr
 8023afa:	bf00      	nop
 8023afc:	20000c68 	.word	0x20000c68
 8023b00:	20000c64 	.word	0x20000c64

08023b04 <nand_bad_block_table_iter_alloc>:

void *nand_bad_block_table_iter_alloc(uint32_t *page)
{
 8023b04:	b480      	push	{r7}
 8023b06:	b083      	sub	sp, #12
 8023b08:	af00      	add	r7, sp, #0
 8023b0a:	6078      	str	r0, [r7, #4]
    if (!nand_bad_block_table_count)
 8023b0c:	4b08      	ldr	r3, [pc, #32]	; (8023b30 <nand_bad_block_table_iter_alloc+0x2c>)
 8023b0e:	681b      	ldr	r3, [r3, #0]
 8023b10:	2b00      	cmp	r3, #0
 8023b12:	d101      	bne.n	8023b18 <nand_bad_block_table_iter_alloc+0x14>
        return NULL; // 坏块表为空，无法进行迭代
 8023b14:	2300      	movs	r3, #0
 8023b16:	e004      	b.n	8023b22 <nand_bad_block_table_iter_alloc+0x1e>

    *page = nand_bad_block_table[0]; // 将坏块表的第一个块赋值给 page
 8023b18:	4b06      	ldr	r3, [pc, #24]	; (8023b34 <nand_bad_block_table_iter_alloc+0x30>)
 8023b1a:	681a      	ldr	r2, [r3, #0]
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	601a      	str	r2, [r3, #0]

    return &nand_bad_block_table[0]; // 返回坏块表的第一个块的地址作为迭代器
 8023b20:	4b04      	ldr	r3, [pc, #16]	; (8023b34 <nand_bad_block_table_iter_alloc+0x30>)
}
 8023b22:	4618      	mov	r0, r3
 8023b24:	370c      	adds	r7, #12
 8023b26:	46bd      	mov	sp, r7
 8023b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b2c:	4770      	bx	lr
 8023b2e:	bf00      	nop
 8023b30:	20000c64 	.word	0x20000c64
 8023b34:	20000c68 	.word	0x20000c68

08023b38 <nand_bad_block_table_iter_next>:

void *nand_bad_block_table_iter_next(void *iter, uint32_t *page)
{
 8023b38:	b480      	push	{r7}
 8023b3a:	b085      	sub	sp, #20
 8023b3c:	af00      	add	r7, sp, #0
 8023b3e:	6078      	str	r0, [r7, #4]
 8023b40:	6039      	str	r1, [r7, #0]
    uint32_t *bbt_iter = iter;
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	60fb      	str	r3, [r7, #12]

    if (!bbt_iter)
 8023b46:	68fb      	ldr	r3, [r7, #12]
 8023b48:	2b00      	cmp	r3, #0
 8023b4a:	d101      	bne.n	8023b50 <nand_bad_block_table_iter_next+0x18>
       return NULL; // 无效的迭代器，无法进行下一次迭代
 8023b4c:	2300      	movs	r3, #0
 8023b4e:	e012      	b.n	8023b76 <nand_bad_block_table_iter_next+0x3e>

    bbt_iter++; // 迭代器指向下一个块
 8023b50:	68fb      	ldr	r3, [r7, #12]
 8023b52:	3304      	adds	r3, #4
 8023b54:	60fb      	str	r3, [r7, #12]

    if (bbt_iter - &nand_bad_block_table[0] >= nand_bad_block_table_count)
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	4a0a      	ldr	r2, [pc, #40]	; (8023b84 <nand_bad_block_table_iter_next+0x4c>)
 8023b5a:	1a9b      	subs	r3, r3, r2
 8023b5c:	109b      	asrs	r3, r3, #2
 8023b5e:	461a      	mov	r2, r3
 8023b60:	4b09      	ldr	r3, [pc, #36]	; (8023b88 <nand_bad_block_table_iter_next+0x50>)
 8023b62:	681b      	ldr	r3, [r3, #0]
 8023b64:	429a      	cmp	r2, r3
 8023b66:	d301      	bcc.n	8023b6c <nand_bad_block_table_iter_next+0x34>
        return NULL; // 已达到坏块表的末尾，无法进行下一次迭代
 8023b68:	2300      	movs	r3, #0
 8023b6a:	e004      	b.n	8023b76 <nand_bad_block_table_iter_next+0x3e>

    *page = *bbt_iter; // 将当前迭代的块赋值给 page
 8023b6c:	68fb      	ldr	r3, [r7, #12]
 8023b6e:	681a      	ldr	r2, [r3, #0]
 8023b70:	683b      	ldr	r3, [r7, #0]
 8023b72:	601a      	str	r2, [r3, #0]

    return bbt_iter; // 返回下一次迭代的迭代器
 8023b74:	68fb      	ldr	r3, [r7, #12]
}
 8023b76:	4618      	mov	r0, r3
 8023b78:	3714      	adds	r7, #20
 8023b7a:	46bd      	mov	sp, r7
 8023b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b80:	4770      	bx	lr
 8023b82:	bf00      	nop
 8023b84:	20000c68 	.word	0x20000c68
 8023b88:	20000c64 	.word	0x20000c64

08023b8c <np_send_ok_status>:
static flash_hal_t *hal[] = { &hal_fsmc, &hal_spi_nor, &hal_spi_nand };  // HAL 驱动数组

uint8_t np_packet_send_buf[NP_PACKET_BUF_SIZE];    // 发送数据包缓冲区

static int np_send_ok_status()
{
 8023b8c:	b580      	push	{r7, lr}
 8023b8e:	b082      	sub	sp, #8
 8023b90:	af00      	add	r7, sp, #0
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_OK };       // 正常状态响应
 8023b92:	2301      	movs	r3, #1
 8023b94:	703b      	strb	r3, [r7, #0]
 8023b96:	2300      	movs	r3, #0
 8023b98:	707b      	strb	r3, [r7, #1]
    size_t len = sizeof(status);
 8023b9a:	2302      	movs	r3, #2
 8023b9c:	607b      	str	r3, [r7, #4]

    if (np_comm_cb)
 8023b9e:	4b08      	ldr	r3, [pc, #32]	; (8023bc0 <np_send_ok_status+0x34>)
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	2b00      	cmp	r3, #0
 8023ba4:	d006      	beq.n	8023bb4 <np_send_ok_status+0x28>
        np_comm_cb->send((uint8_t *)&status, len);             // 发送响应数据
 8023ba6:	4b06      	ldr	r3, [pc, #24]	; (8023bc0 <np_send_ok_status+0x34>)
 8023ba8:	681b      	ldr	r3, [r3, #0]
 8023baa:	681b      	ldr	r3, [r3, #0]
 8023bac:	463a      	mov	r2, r7
 8023bae:	6879      	ldr	r1, [r7, #4]
 8023bb0:	4610      	mov	r0, r2
 8023bb2:	4798      	blx	r3

    return 0;
 8023bb4:	2300      	movs	r3, #0
}
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	3708      	adds	r7, #8
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	bd80      	pop	{r7, pc}
 8023bbe:	bf00      	nop
 8023bc0:	20000cb8 	.word	0x20000cb8

08023bc4 <np_send_error>:

static int np_send_error(uint8_t err_code)
{
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b086      	sub	sp, #24
 8023bc8:	af00      	add	r7, sp, #0
 8023bca:	4603      	mov	r3, r0
 8023bcc:	71fb      	strb	r3, [r7, #7]
    np_resp_t status = { NP_RESP_STATUS, NP_STATUS_ERROR };    // 错误状态响应
 8023bce:	4b0d      	ldr	r3, [pc, #52]	; (8023c04 <np_send_error+0x40>)
 8023bd0:	881b      	ldrh	r3, [r3, #0]
 8023bd2:	823b      	strh	r3, [r7, #16]
    np_resp_err_t err_status = { status, err_code };           // 错误状态信息
 8023bd4:	8a3b      	ldrh	r3, [r7, #16]
 8023bd6:	81bb      	strh	r3, [r7, #12]
 8023bd8:	79fb      	ldrb	r3, [r7, #7]
 8023bda:	73bb      	strb	r3, [r7, #14]
    size_t len = sizeof(err_status);
 8023bdc:	2303      	movs	r3, #3
 8023bde:	617b      	str	r3, [r7, #20]

    if (np_comm_cb)
 8023be0:	4b09      	ldr	r3, [pc, #36]	; (8023c08 <np_send_error+0x44>)
 8023be2:	681b      	ldr	r3, [r3, #0]
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	d007      	beq.n	8023bf8 <np_send_error+0x34>
        np_comm_cb->send((uint8_t *)&err_status, len);         // 发送错误响应数据
 8023be8:	4b07      	ldr	r3, [pc, #28]	; (8023c08 <np_send_error+0x44>)
 8023bea:	681b      	ldr	r3, [r3, #0]
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	f107 020c 	add.w	r2, r7, #12
 8023bf2:	6979      	ldr	r1, [r7, #20]
 8023bf4:	4610      	mov	r0, r2
 8023bf6:	4798      	blx	r3

    return 0;
 8023bf8:	2300      	movs	r3, #0
}
 8023bfa:	4618      	mov	r0, r3
 8023bfc:	3718      	adds	r7, #24
 8023bfe:	46bd      	mov	sp, r7
 8023c00:	bd80      	pop	{r7, pc}
 8023c02:	bf00      	nop
 8023c04:	080327b0 	.word	0x080327b0
 8023c08:	20000cb8 	.word	0x20000cb8

08023c0c <np_send_bad_block_info>:

// 发送坏块信息函数，参数为块地址、大小和是否跳过标志
static int np_send_bad_block_info(uint64_t addr, uint32_t size, bool is_skipped)
{
 8023c0c:	b580      	push	{r7, lr}
 8023c0e:	b08a      	sub	sp, #40	; 0x28
 8023c10:	af00      	add	r7, sp, #0
 8023c12:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8023c16:	607a      	str	r2, [r7, #4]
 8023c18:	70fb      	strb	r3, [r7, #3]
    // 根据是否跳过标志确定info的值
    uint8_t info = is_skipped ? NP_STATUS_BB_SKIP : NP_STATUS_BB;
 8023c1a:	78fb      	ldrb	r3, [r7, #3]
 8023c1c:	2b00      	cmp	r3, #0
 8023c1e:	d001      	beq.n	8023c24 <np_send_bad_block_info+0x18>
 8023c20:	2304      	movs	r3, #4
 8023c22:	e000      	b.n	8023c26 <np_send_bad_block_info+0x1a>
 8023c24:	2302      	movs	r3, #2
 8023c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, info };
 8023c2a:	2301      	movs	r3, #1
 8023c2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8023c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023c34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // 构造坏块信息
    np_resp_bad_block_t bad_block = { resp_header, addr, size };
 8023c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023c3a:	82bb      	strh	r3, [r7, #20]
 8023c3c:	f107 0318 	add.w	r3, r7, #24
 8023c40:	3b02      	subs	r3, #2
 8023c42:	68ba      	ldr	r2, [r7, #8]
 8023c44:	601a      	str	r2, [r3, #0]
 8023c46:	68fa      	ldr	r2, [r7, #12]
 8023c48:	605a      	str	r2, [r3, #4]
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	f8c7 301e 	str.w	r3, [r7, #30]

    // 调用回调函数发送坏块信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&bad_block, sizeof(bad_block)))
 8023c50:	4b09      	ldr	r3, [pc, #36]	; (8023c78 <np_send_bad_block_info+0x6c>)
 8023c52:	681b      	ldr	r3, [r3, #0]
 8023c54:	681b      	ldr	r3, [r3, #0]
 8023c56:	f107 0214 	add.w	r2, r7, #20
 8023c5a:	210e      	movs	r1, #14
 8023c5c:	4610      	mov	r0, r2
 8023c5e:	4798      	blx	r3
 8023c60:	4603      	mov	r3, r0
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d002      	beq.n	8023c6c <np_send_bad_block_info+0x60>
        return -1;
 8023c66:	f04f 33ff 	mov.w	r3, #4294967295
 8023c6a:	e000      	b.n	8023c6e <np_send_bad_block_info+0x62>

    return 0;
 8023c6c:	2300      	movs	r3, #0
}
 8023c6e:	4618      	mov	r0, r3
 8023c70:	3728      	adds	r7, #40	; 0x28
 8023c72:	46bd      	mov	sp, r7
 8023c74:	bd80      	pop	{r7, pc}
 8023c76:	bf00      	nop
 8023c78:	20000cb8 	.word	0x20000cb8

08023c7c <np_send_progress>:

// 发送进度信息函数，参数为进度值
static int np_send_progress(uint64_t progress)
{
 8023c7c:	b580      	push	{r7, lr}
 8023c7e:	b086      	sub	sp, #24
 8023c80:	af00      	add	r7, sp, #0
 8023c82:	e9c7 0100 	strd	r0, r1, [r7]
    // 构造响应头部
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_PROGRESS };
 8023c86:	4b0f      	ldr	r3, [pc, #60]	; (8023cc4 <np_send_progress+0x48>)
 8023c88:	881b      	ldrh	r3, [r3, #0]
 8023c8a:	82bb      	strh	r3, [r7, #20]

    // 构造进度信息
    np_resp_progress_t resp_progress = { resp_header, progress };
 8023c8c:	8abb      	ldrh	r3, [r7, #20]
 8023c8e:	813b      	strh	r3, [r7, #8]
 8023c90:	f107 0308 	add.w	r3, r7, #8
 8023c94:	3302      	adds	r3, #2
 8023c96:	683a      	ldr	r2, [r7, #0]
 8023c98:	601a      	str	r2, [r3, #0]
 8023c9a:	687a      	ldr	r2, [r7, #4]
 8023c9c:	605a      	str	r2, [r3, #4]

    // 调用回调函数发送进度信息，如果发送成功返回-1
    if (np_comm_cb->send((uint8_t *)&resp_progress, sizeof(resp_progress)))
 8023c9e:	4b0a      	ldr	r3, [pc, #40]	; (8023cc8 <np_send_progress+0x4c>)
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	681b      	ldr	r3, [r3, #0]
 8023ca4:	f107 0208 	add.w	r2, r7, #8
 8023ca8:	210a      	movs	r1, #10
 8023caa:	4610      	mov	r0, r2
 8023cac:	4798      	blx	r3
 8023cae:	4603      	mov	r3, r0
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d002      	beq.n	8023cba <np_send_progress+0x3e>
        return -1;
 8023cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8023cb8:	e000      	b.n	8023cbc <np_send_progress+0x40>

    return 0;
 8023cba:	2300      	movs	r3, #0
}
 8023cbc:	4618      	mov	r0, r3
 8023cbe:	3718      	adds	r7, #24
 8023cc0:	46bd      	mov	sp, r7
 8023cc2:	bd80      	pop	{r7, pc}
 8023cc4:	080327b4 	.word	0x080327b4
 8023cc8:	20000cb8 	.word	0x20000cb8

08023ccc <_np_cmd_nand_read_id>:

// 内部函数，用于执行NAND读取ID的命令
static int _np_cmd_nand_read_id(np_prog_t *prog)
{
 8023ccc:	b5b0      	push	{r4, r5, r7, lr}
 8023cce:	b08a      	sub	sp, #40	; 0x28
 8023cd0:	af04      	add	r7, sp, #16
 8023cd2:	6078      	str	r0, [r7, #4]
    np_resp_id_t resp;
    size_t resp_len = sizeof(resp);
 8023cd4:	2308      	movs	r3, #8
 8023cd6:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("Read ID command\r\n");
 8023cd8:	481d      	ldr	r0, [pc, #116]	; (8023d50 <_np_cmd_nand_read_id+0x84>)
 8023cda:	f00d fd4f 	bl	803177c <puts>

    // 设置响应头部的code和info字段
    resp.header.code = NP_RESP_DATA;
 8023cde:	2300      	movs	r3, #0
 8023ce0:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8023ce2:	697b      	ldr	r3, [r7, #20]
 8023ce4:	b2db      	uxtb	r3, r3
 8023ce6:	3b02      	subs	r3, #2
 8023ce8:	b2db      	uxtb	r3, r3
 8023cea:	737b      	strb	r3, [r7, #13]

    // 调用硬件抽象层的读取ID函数
    hal[prog->hal]->read_id(&resp.nand_id);
 8023cec:	687b      	ldr	r3, [r7, #4]
 8023cee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023cf2:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023cf6:	461a      	mov	r2, r3
 8023cf8:	4b16      	ldr	r3, [pc, #88]	; (8023d54 <_np_cmd_nand_read_id+0x88>)
 8023cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023cfe:	689b      	ldr	r3, [r3, #8]
 8023d00:	f107 020c 	add.w	r2, r7, #12
 8023d04:	3202      	adds	r2, #2
 8023d06:	4610      	mov	r0, r2
 8023d08:	4798      	blx	r3

    // 如果设置了通信回调函数，则发送响应数据
    if (np_comm_cb)
 8023d0a:	4b13      	ldr	r3, [pc, #76]	; (8023d58 <_np_cmd_nand_read_id+0x8c>)
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	2b00      	cmp	r3, #0
 8023d10:	d007      	beq.n	8023d22 <_np_cmd_nand_read_id+0x56>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8023d12:	4b11      	ldr	r3, [pc, #68]	; (8023d58 <_np_cmd_nand_read_id+0x8c>)
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	681b      	ldr	r3, [r3, #0]
 8023d18:	f107 020c 	add.w	r2, r7, #12
 8023d1c:	6979      	ldr	r1, [r7, #20]
 8023d1e:	4610      	mov	r0, r2
 8023d20:	4798      	blx	r3

    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023d22:	7bbb      	ldrb	r3, [r7, #14]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023d24:	4618      	mov	r0, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023d26:	7bfb      	ldrb	r3, [r7, #15]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023d28:	461c      	mov	r4, r3
        resp.nand_id.maker_id, resp.nand_id.device_id, resp.nand_id.third_id,
 8023d2a:	7c3b      	ldrb	r3, [r7, #16]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023d2c:	461d      	mov	r5, r3
        resp.nand_id.fourth_id, resp.nand_id.fifth_id, resp.nand_id.sixth_id);
 8023d2e:	7c7b      	ldrb	r3, [r7, #17]
 8023d30:	7cba      	ldrb	r2, [r7, #18]
 8023d32:	7cf9      	ldrb	r1, [r7, #19]
    DEBUG_PRINT("Chip ID: 0x%x 0x%x 0x%x 0x%x 0x%x 0x%x\r\n",
 8023d34:	9102      	str	r1, [sp, #8]
 8023d36:	9201      	str	r2, [sp, #4]
 8023d38:	9300      	str	r3, [sp, #0]
 8023d3a:	462b      	mov	r3, r5
 8023d3c:	4622      	mov	r2, r4
 8023d3e:	4601      	mov	r1, r0
 8023d40:	4806      	ldr	r0, [pc, #24]	; (8023d5c <_np_cmd_nand_read_id+0x90>)
 8023d42:	f00d fcb5 	bl	80316b0 <iprintf>

    return 0;
 8023d46:	2300      	movs	r3, #0
}
 8023d48:	4618      	mov	r0, r3
 8023d4a:	3718      	adds	r7, #24
 8023d4c:	46bd      	mov	sp, r7
 8023d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8023d50:	080327b8 	.word	0x080327b8
 8023d54:	20000040 	.word	0x20000040
 8023d58:	20000cb8 	.word	0x20000cb8
 8023d5c:	080327cc 	.word	0x080327cc

08023d60 <np_cmd_nand_read_id>:

// 执行NAND读取ID的命令
static int np_cmd_nand_read_id(np_prog_t *prog)
{
 8023d60:	b580      	push	{r7, lr}
 8023d62:	b084      	sub	sp, #16
 8023d64:	af00      	add	r7, sp, #0
 8023d66:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true);
 8023d68:	2001      	movs	r0, #1
 8023d6a:	f7ff fd7d 	bl	8023868 <led_rd_set>
    ret = _np_cmd_nand_read_id(prog);
 8023d6e:	6878      	ldr	r0, [r7, #4]
 8023d70:	f7ff ffac 	bl	8023ccc <_np_cmd_nand_read_id>
 8023d74:	60f8      	str	r0, [r7, #12]
    led_rd_set(false);
 8023d76:	2000      	movs	r0, #0
 8023d78:	f7ff fd76 	bl	8023868 <led_rd_set>

    return ret;
 8023d7c:	68fb      	ldr	r3, [r7, #12]
}
 8023d7e:	4618      	mov	r0, r3
 8023d80:	3710      	adds	r7, #16
 8023d82:	46bd      	mov	sp, r7
 8023d84:	bd80      	pop	{r7, pc}
	...

08023d88 <np_read_bad_block_info_from_page>:

// 从页中读取坏块信息，参数为编程器、块号、页号和坏块标志指针
static int np_read_bad_block_info_from_page(np_prog_t *prog, uint32_t block,
    uint32_t page, bool *is_bad)
{
 8023d88:	b5b0      	push	{r4, r5, r7, lr}
 8023d8a:	b08a      	sub	sp, #40	; 0x28
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	60f8      	str	r0, [r7, #12]
 8023d90:	60b9      	str	r1, [r7, #8]
 8023d92:	607a      	str	r2, [r7, #4]
 8023d94:	603b      	str	r3, [r7, #0]
    uint32_t status;
    uint64_t addr = block * prog->chip_info.block_size;
 8023d96:	68fb      	ldr	r3, [r7, #12]
 8023d98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023d9c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023da0:	68ba      	ldr	r2, [r7, #8]
 8023da2:	fb02 f303 	mul.w	r3, r2, r3
 8023da6:	2200      	movs	r2, #0
 8023da8:	461c      	mov	r4, r3
 8023daa:	4615      	mov	r5, r2
 8023dac:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023db0:	68fb      	ldr	r3, [r7, #12]
 8023db2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023db6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off];
 8023dba:	68fa      	ldr	r2, [r7, #12]
 8023dbc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023dc0:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    uint8_t *bb_mark = &prog->page.buf[prog->chip_info.page_size +
 8023dc4:	4413      	add	r3, r2
 8023dc6:	3338      	adds	r3, #56	; 0x38
 8023dc8:	68fa      	ldr	r2, [r7, #12]
 8023dca:	4413      	add	r3, r2
 8023dcc:	3304      	adds	r3, #4
 8023dce:	617b      	str	r3, [r7, #20]

    // 从页的备用区域读取坏块标志
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023dd0:	68fb      	ldr	r3, [r7, #12]
 8023dd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023dd6:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023dda:	461a      	mov	r2, r3
 8023ddc:	4b35      	ldr	r3, [pc, #212]	; (8023eb4 <np_read_bad_block_info_from_page+0x12c>)
 8023dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023de2:	695c      	ldr	r4, [r3, #20]
        prog->chip_info.bb_mark_off, 1);
 8023de4:	68fb      	ldr	r3, [r7, #12]
 8023de6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023dea:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
    status = hal[prog->hal]->read_spare_data(bb_mark, page,
 8023dee:	461a      	mov	r2, r3
 8023df0:	2301      	movs	r3, #1
 8023df2:	6879      	ldr	r1, [r7, #4]
 8023df4:	6978      	ldr	r0, [r7, #20]
 8023df6:	47a0      	blx	r4
 8023df8:	6278      	str	r0, [r7, #36]	; 0x24

    // 如果读取命令无效，则尝试读取整个页的数据
    if (status == FLASH_STATUS_INVALID_CMD)
 8023dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023dfc:	2b04      	cmp	r3, #4
 8023dfe:	d11a      	bne.n	8023e36 <np_read_bad_block_info_from_page+0xae>
    {
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023e00:	68fb      	ldr	r3, [r7, #12]
 8023e02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e06:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023e0a:	461a      	mov	r2, r3
 8023e0c:	4b29      	ldr	r3, [pc, #164]	; (8023eb4 <np_read_bad_block_info_from_page+0x12c>)
 8023e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023e12:	691b      	ldr	r3, [r3, #16]
 8023e14:	68fa      	ldr	r2, [r7, #12]
 8023e16:	f102 003c 	add.w	r0, r2, #60	; 0x3c
            prog->chip_info.page_size + prog->chip_info.spare_size);
 8023e1a:	68fa      	ldr	r2, [r7, #12]
 8023e1c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023e20:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
 8023e24:	68fa      	ldr	r2, [r7, #12]
 8023e26:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023e2a:	f8d2 2238 	ldr.w	r2, [r2, #568]	; 0x238
        status = hal[prog->hal]->read_page(prog->page.buf, page,
 8023e2e:	440a      	add	r2, r1
 8023e30:	6879      	ldr	r1, [r7, #4]
 8023e32:	4798      	blx	r3
 8023e34:	6278      	str	r0, [r7, #36]	; 0x24
    }

    switch (status)
 8023e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e38:	2b03      	cmp	r3, #3
 8023e3a:	d010      	beq.n	8023e5e <np_read_bad_block_info_from_page+0xd6>
 8023e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e3e:	2b03      	cmp	r3, #3
 8023e40:	d815      	bhi.n	8023e6e <np_read_bad_block_info_from_page+0xe6>
 8023e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d018      	beq.n	8023e7a <np_read_bad_block_info_from_page+0xf2>
 8023e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e4a:	2b02      	cmp	r3, #2
 8023e4c:	d10f      	bne.n	8023e6e <np_read_bad_block_info_from_page+0xe6>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        ERROR_PRINT("NAND read bad block info error at 0x%" PRIx64 "\r\n",
 8023e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023e52:	4819      	ldr	r0, [pc, #100]	; (8023eb8 <np_read_bad_block_info_from_page+0x130>)
 8023e54:	f00d fc2c 	bl	80316b0 <iprintf>
            addr);
        return NP_ERR_NAND_RD;
 8023e58:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e5c:	e025      	b.n	8023eaa <np_read_bad_block_info_from_page+0x122>
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND read timeout at 0x%" PRIx64 "\r\n", addr);
 8023e5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023e62:	4816      	ldr	r0, [pc, #88]	; (8023ebc <np_read_bad_block_info_from_page+0x134>)
 8023e64:	f00d fc24 	bl	80316b0 <iprintf>
        return NP_ERR_NAND_RD;
 8023e68:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e6c:	e01d      	b.n	8023eaa <np_read_bad_block_info_from_page+0x122>
    default:
        ERROR_PRINT("Unknown NAND status\r\n");
 8023e6e:	4814      	ldr	r0, [pc, #80]	; (8023ec0 <np_read_bad_block_info_from_page+0x138>)
 8023e70:	f00d fc84 	bl	803177c <puts>
        return NP_ERR_NAND_RD;
 8023e74:	f06f 0367 	mvn.w	r3, #103	; 0x67
 8023e78:	e017      	b.n	8023eaa <np_read_bad_block_info_from_page+0x122>
        break;
 8023e7a:	bf00      	nop
    }

    // 判断坏块标志是否为NP_NAND_GOOD_BLOCK_MARK
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023e7c:	68fb      	ldr	r3, [r7, #12]
 8023e7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023e82:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023e86:	68fa      	ldr	r2, [r7, #12]
 8023e88:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8023e8c:	f892 223c 	ldrb.w	r2, [r2, #572]	; 0x23c
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023e90:	4413      	add	r3, r2
 8023e92:	68fa      	ldr	r2, [r7, #12]
 8023e94:	4413      	add	r3, r2
 8023e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
        prog->chip_info.bb_mark_off] != NP_NAND_GOOD_BLOCK_MARK;
 8023e9a:	2bff      	cmp	r3, #255	; 0xff
 8023e9c:	bf14      	ite	ne
 8023e9e:	2301      	movne	r3, #1
 8023ea0:	2300      	moveq	r3, #0
 8023ea2:	b2da      	uxtb	r2, r3
    *is_bad = prog->page.buf[prog->chip_info.page_size +
 8023ea4:	683b      	ldr	r3, [r7, #0]
 8023ea6:	701a      	strb	r2, [r3, #0]

    return 0;
 8023ea8:	2300      	movs	r3, #0
}
 8023eaa:	4618      	mov	r0, r3
 8023eac:	3728      	adds	r7, #40	; 0x28
 8023eae:	46bd      	mov	sp, r7
 8023eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8023eb2:	bf00      	nop
 8023eb4:	20000040 	.word	0x20000040
 8023eb8:	080327f8 	.word	0x080327f8
 8023ebc:	0803282c 	.word	0x0803282c
 8023ec0:	08032854 	.word	0x08032854

08023ec4 <_np_cmd_read_bad_blocks>:

// 内部函数，执行读取坏块命令，并可选择发送进度信息
static int _np_cmd_read_bad_blocks(np_prog_t *prog, bool send_progress)
{
 8023ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8023ec8:	b088      	sub	sp, #32
 8023eca:	af00      	add	r7, sp, #0
 8023ecc:	6078      	str	r0, [r7, #4]
 8023ece:	460b      	mov	r3, r1
 8023ed0:	70fb      	strb	r3, [r7, #3]
    int ret;
    bool is_bad;
    uint32_t block, block_num, page_num, page;

    // 检查是否支持坏块检测
    if (!hal[prog->hal]->is_bb_supported())
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023ed8:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8023edc:	461a      	mov	r2, r3
 8023ede:	4b40      	ldr	r3, [pc, #256]	; (8023fe0 <_np_cmd_read_bad_blocks+0x11c>)
 8023ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023ee4:	6a1b      	ldr	r3, [r3, #32]
 8023ee6:	4798      	blx	r3
 8023ee8:	4603      	mov	r3, r0
 8023eea:	f083 0301 	eor.w	r3, r3, #1
 8023eee:	b2db      	uxtb	r3, r3
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d16a      	bne.n	8023fca <_np_cmd_read_bad_blocks+0x106>
        goto Exit;

    block_num = prog->chip_info.total_size / prog->chip_info.block_size;
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8023efa:	3330      	adds	r3, #48	; 0x30
 8023efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8023f00:	687b      	ldr	r3, [r7, #4]
 8023f02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023f06:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8023f0a:	2200      	movs	r2, #0
 8023f0c:	4698      	mov	r8, r3
 8023f0e:	4691      	mov	r9, r2
 8023f10:	4642      	mov	r2, r8
 8023f12:	464b      	mov	r3, r9
 8023f14:	f7fe f9ac 	bl	8022270 <__aeabi_uldivmod>
 8023f18:	4602      	mov	r2, r0
 8023f1a:	460b      	mov	r3, r1
 8023f1c:	4613      	mov	r3, r2
 8023f1e:	61bb      	str	r3, [r7, #24]
    page_num = prog->chip_info.block_size / prog->chip_info.page_size;
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023f26:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023f30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8023f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8023f38:	617b      	str	r3, [r7, #20]
    /* Bad block - not 0xFF value in the first or second page in the block at
     * some offset in the page spare area
     */

    // 遍历所有块
    for (block = 0; block < block_num; block++)
 8023f3a:	2300      	movs	r3, #0
 8023f3c:	61fb      	str	r3, [r7, #28]
 8023f3e:	e03f      	b.n	8023fc0 <_np_cmd_read_bad_blocks+0xfc>
    {
        page = block * page_num;
 8023f40:	69fb      	ldr	r3, [r7, #28]
 8023f42:	697a      	ldr	r2, [r7, #20]
 8023f44:	fb02 f303 	mul.w	r3, r2, r3
 8023f48:	613b      	str	r3, [r7, #16]

        // 如果需要发送进度信息，则调用np_send_progress函数发送
        if (send_progress)
 8023f4a:	78fb      	ldrb	r3, [r7, #3]
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d007      	beq.n	8023f60 <_np_cmd_read_bad_blocks+0x9c>
            np_send_progress(page);
 8023f50:	693b      	ldr	r3, [r7, #16]
 8023f52:	2200      	movs	r2, #0
 8023f54:	461c      	mov	r4, r3
 8023f56:	4615      	mov	r5, r2
 8023f58:	4620      	mov	r0, r4
 8023f5a:	4629      	mov	r1, r5
 8023f5c:	f7ff fe8e 	bl	8023c7c <np_send_progress>

        // 从第一个页和第二个页读取坏块信息
        if ((ret = np_read_bad_block_info_from_page(prog, block, page,
 8023f60:	f107 030b 	add.w	r3, r7, #11
 8023f64:	693a      	ldr	r2, [r7, #16]
 8023f66:	69f9      	ldr	r1, [r7, #28]
 8023f68:	6878      	ldr	r0, [r7, #4]
 8023f6a:	f7ff ff0d 	bl	8023d88 <np_read_bad_block_info_from_page>
 8023f6e:	60f8      	str	r0, [r7, #12]
 8023f70:	68fb      	ldr	r3, [r7, #12]
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d001      	beq.n	8023f7a <_np_cmd_read_bad_blocks+0xb6>
            &is_bad)))
        {
            return ret;
 8023f76:	68fb      	ldr	r3, [r7, #12]
 8023f78:	e02c      	b.n	8023fd4 <_np_cmd_read_bad_blocks+0x110>
        }

        if (!is_bad && (ret = np_read_bad_block_info_from_page(prog, block,
 8023f7a:	7afb      	ldrb	r3, [r7, #11]
 8023f7c:	f083 0301 	eor.w	r3, r3, #1
 8023f80:	b2db      	uxtb	r3, r3
 8023f82:	2b00      	cmp	r3, #0
 8023f84:	d00d      	beq.n	8023fa2 <_np_cmd_read_bad_blocks+0xde>
 8023f86:	693b      	ldr	r3, [r7, #16]
 8023f88:	1c5a      	adds	r2, r3, #1
 8023f8a:	f107 030b 	add.w	r3, r7, #11
 8023f8e:	69f9      	ldr	r1, [r7, #28]
 8023f90:	6878      	ldr	r0, [r7, #4]
 8023f92:	f7ff fef9 	bl	8023d88 <np_read_bad_block_info_from_page>
 8023f96:	60f8      	str	r0, [r7, #12]
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d001      	beq.n	8023fa2 <_np_cmd_read_bad_blocks+0xde>
            page + 1, &is_bad)))
        {
            return ret;
 8023f9e:	68fb      	ldr	r3, [r7, #12]
 8023fa0:	e018      	b.n	8023fd4 <_np_cmd_read_bad_blocks+0x110>
        }

        // 如果是坏块，则将该页添加到坏块表中
        if (is_bad && nand_bad_block_table_add(page))
 8023fa2:	7afb      	ldrb	r3, [r7, #11]
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	d008      	beq.n	8023fba <_np_cmd_read_bad_blocks+0xf6>
 8023fa8:	6938      	ldr	r0, [r7, #16]
 8023faa:	f7ff fd67 	bl	8023a7c <nand_bad_block_table_add>
 8023fae:	4603      	mov	r3, r0
 8023fb0:	2b00      	cmp	r3, #0
 8023fb2:	d002      	beq.n	8023fba <_np_cmd_read_bad_blocks+0xf6>
            return NP_ERR_BBT_OVERFLOW;
 8023fb4:	f06f 0370 	mvn.w	r3, #112	; 0x70
 8023fb8:	e00c      	b.n	8023fd4 <_np_cmd_read_bad_blocks+0x110>
    for (block = 0; block < block_num; block++)
 8023fba:	69fb      	ldr	r3, [r7, #28]
 8023fbc:	3301      	adds	r3, #1
 8023fbe:	61fb      	str	r3, [r7, #28]
 8023fc0:	69fa      	ldr	r2, [r7, #28]
 8023fc2:	69bb      	ldr	r3, [r7, #24]
 8023fc4:	429a      	cmp	r2, r3
 8023fc6:	d3bb      	bcc.n	8023f40 <_np_cmd_read_bad_blocks+0x7c>
    }

Exit:
 8023fc8:	e000      	b.n	8023fcc <_np_cmd_read_bad_blocks+0x108>
        goto Exit;
 8023fca:	bf00      	nop
    prog->bb_is_read = 1;
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	2201      	movs	r2, #1
 8023fd0:	635a      	str	r2, [r3, #52]	; 0x34

    return 0;
 8023fd2:	2300      	movs	r3, #0
}
 8023fd4:	4618      	mov	r0, r3
 8023fd6:	3720      	adds	r7, #32
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8023fde:	bf00      	nop
 8023fe0:	20000040 	.word	0x20000040

08023fe4 <np_nand_erase>:

// NAND擦除函数
static int np_nand_erase(np_prog_t *prog, uint32_t page)
{
 8023fe4:	b580      	push	{r7, lr}
 8023fe6:	b086      	sub	sp, #24
 8023fe8:	af00      	add	r7, sp, #0
 8023fea:	6078      	str	r0, [r7, #4]
 8023fec:	6039      	str	r1, [r7, #0]
    uint32_t status;
    uint64_t addr = page * prog->chip_info.page_size;
 8023fee:	6879      	ldr	r1, [r7, #4]
 8023ff0:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8023ff4:	f8d1 1228 	ldr.w	r1, [r1, #552]	; 0x228
 8023ff8:	6838      	ldr	r0, [r7, #0]
 8023ffa:	fb00 f101 	mul.w	r1, r0, r1
 8023ffe:	2000      	movs	r0, #0
 8024000:	460a      	mov	r2, r1
 8024002:	4603      	mov	r3, r0
 8024004:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    DEBUG_PRINT("NAND擦除地址：0x%" PRIx64 "\r\n", addr);
 8024008:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802400c:	481f      	ldr	r0, [pc, #124]	; (802408c <np_nand_erase+0xa8>)
 802400e:	f00d fb4f 	bl	80316b0 <iprintf>

    // 调用硬件抽象层的块擦除函数
    status = hal[prog->hal]->erase_block(page);
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024018:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802401c:	461a      	mov	r2, r3
 802401e:	4b1c      	ldr	r3, [pc, #112]	; (8024090 <np_nand_erase+0xac>)
 8024020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024024:	68db      	ldr	r3, [r3, #12]
 8024026:	6838      	ldr	r0, [r7, #0]
 8024028:	4798      	blx	r3
 802402a:	60f8      	str	r0, [r7, #12]
    switch (status)
 802402c:	68fb      	ldr	r3, [r7, #12]
 802402e:	2b03      	cmp	r3, #3
 8024030:	d018      	beq.n	8024064 <np_nand_erase+0x80>
 8024032:	68fb      	ldr	r3, [r7, #12]
 8024034:	2b03      	cmp	r3, #3
 8024036:	d81b      	bhi.n	8024070 <np_nand_erase+0x8c>
 8024038:	68fb      	ldr	r3, [r7, #12]
 802403a:	2b00      	cmp	r3, #0
 802403c:	d01e      	beq.n	802407c <np_nand_erase+0x98>
 802403e:	68fb      	ldr	r3, [r7, #12]
 8024040:	2b02      	cmp	r3, #2
 8024042:	d115      	bne.n	8024070 <np_nand_erase+0x8c>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果擦除命令失败，发送坏块信息
        if (np_send_bad_block_info(addr, prog->chip_info.block_size, false))
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802404a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 802404e:	2300      	movs	r3, #0
 8024050:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024054:	f7ff fdda 	bl	8023c0c <np_send_bad_block_info>
 8024058:	4603      	mov	r3, r0
 802405a:	2b00      	cmp	r3, #0
 802405c:	d010      	beq.n	8024080 <np_nand_erase+0x9c>
            return -1;
 802405e:	f04f 33ff 	mov.w	r3, #4294967295
 8024062:	e00f      	b.n	8024084 <np_nand_erase+0xa0>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND擦除超时，地址：0x%" PRIx64 "\r\n", addr);
 8024064:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8024068:	480a      	ldr	r0, [pc, #40]	; (8024094 <np_nand_erase+0xb0>)
 802406a:	f00d fb21 	bl	80316b0 <iprintf>
        break;
 802406e:	e008      	b.n	8024082 <np_nand_erase+0x9e>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8024070:	4809      	ldr	r0, [pc, #36]	; (8024098 <np_nand_erase+0xb4>)
 8024072:	f00d fb83 	bl	803177c <puts>
        return -1;
 8024076:	f04f 33ff 	mov.w	r3, #4294967295
 802407a:	e003      	b.n	8024084 <np_nand_erase+0xa0>
        break;
 802407c:	bf00      	nop
 802407e:	e000      	b.n	8024082 <np_nand_erase+0x9e>
        break;
 8024080:	bf00      	nop
    }

    return 0;
 8024082:	2300      	movs	r3, #0
}
 8024084:	4618      	mov	r0, r3
 8024086:	3718      	adds	r7, #24
 8024088:	46bd      	mov	sp, r7
 802408a:	bd80      	pop	{r7, pc}
 802408c:	08032870 	.word	0x08032870
 8024090:	20000040 	.word	0x20000040
 8024094:	0803288c 	.word	0x0803288c
 8024098:	080328b8 	.word	0x080328b8

0802409c <_np_cmd_nand_erase>:

// 执行NAND擦除命令的内部函数
static int _np_cmd_nand_erase(np_prog_t *prog)
{
 802409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80240a0:	b0ac      	sub	sp, #176	; 0xb0
 80240a2:	af04      	add	r7, sp, #16
 80240a4:	6578      	str	r0, [r7, #84]	; 0x54
    int ret;
    uint64_t addr, len, total_size, total_len;
    uint32_t page, pages, pages_in_block, page_size, block_size;
    np_erase_cmd_t *erase_cmd;
    bool skip_bb, inc_spare, is_bad = false;
 80240a6:	2300      	movs	r3, #0
 80240a8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_erase_cmd_t))
 80240ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240ae:	685b      	ldr	r3, [r3, #4]
 80240b0:	2b11      	cmp	r3, #17
 80240b2:	d808      	bhi.n	80240c6 <_np_cmd_nand_erase+0x2a>
    {
        ERROR_PRINT("擦除命令的缓冲区长度错误：%lu\r\n",
 80240b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240b6:	685b      	ldr	r3, [r3, #4]
 80240b8:	4619      	mov	r1, r3
 80240ba:	48b0      	ldr	r0, [pc, #704]	; (802437c <_np_cmd_nand_erase+0x2e0>)
 80240bc:	f00d faf8 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80240c0:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80240c4:	e1c0      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }
    erase_cmd = (np_erase_cmd_t *)prog->rx_buf;
 80240c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	677b      	str	r3, [r7, #116]	; 0x74
    total_len = len = erase_cmd->len;
 80240cc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80240ce:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80240d2:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80240d6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 80240da:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80240de:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    addr = erase_cmd->addr;
 80240e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80240e4:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80240e8:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80240ec:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
    skip_bb = erase_cmd->flags.skip_bb;
 80240f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80240f2:	7c5b      	ldrb	r3, [r3, #17]
 80240f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80240f8:	b2db      	uxtb	r3, r3
 80240fa:	2b00      	cmp	r3, #0
 80240fc:	bf14      	ite	ne
 80240fe:	2301      	movne	r3, #1
 8024100:	2300      	moveq	r3, #0
 8024102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    inc_spare = erase_cmd->flags.inc_spare;
 8024106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024108:	7c5b      	ldrb	r3, [r3, #17]
 802410a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 802410e:	b2db      	uxtb	r3, r3
 8024110:	2b00      	cmp	r3, #0
 8024112:	bf14      	ite	ne
 8024114:	2301      	movne	r3, #1
 8024116:	2300      	moveq	r3, #0
 8024118:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    DEBUG_PRINT("擦除地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n", addr,
 802411c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024120:	e9cd 2300 	strd	r2, r3, [sp]
 8024124:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8024128:	4895      	ldr	r0, [pc, #596]	; (8024380 <_np_cmd_nand_erase+0x2e4>)
 802412a:	f00d fac1 	bl	80316b0 <iprintf>
        len);

    pages_in_block = prog->chip_info.block_size / prog->chip_info.page_size;
 802412e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024130:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024134:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802413a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802413e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024142:	fbb2 f3f3 	udiv	r3, r2, r3
 8024146:	663b      	str	r3, [r7, #96]	; 0x60

    if (inc_spare)
 8024148:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 802414c:	2b00      	cmp	r3, #0
 802414e:	d03f      	beq.n	80241d0 <_np_cmd_nand_erase+0x134>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024152:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024156:	3330      	adds	r3, #48	; 0x30
 8024158:	e9d3 0100 	ldrd	r0, r1, [r3]
 802415c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802415e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024162:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024166:	2200      	movs	r2, #0
 8024168:	64bb      	str	r3, [r7, #72]	; 0x48
 802416a:	64fa      	str	r2, [r7, #76]	; 0x4c
 802416c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024170:	f7fe f87e 	bl	8022270 <__aeabi_uldivmod>
 8024174:	4602      	mov	r2, r0
 8024176:	460b      	mov	r3, r1
 8024178:	4613      	mov	r3, r2
 802417a:	65fb      	str	r3, [r7, #92]	; 0x5c
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 802417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802417e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024182:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024188:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802418c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8024190:	4413      	add	r3, r2
 8024192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = pages_in_block * page_size;
 8024196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8024198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802419c:	fb02 f303 	mul.w	r3, r2, r3
 80241a0:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = (uint64_t)pages * page_size;
 80241a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80241a4:	2200      	movs	r2, #0
 80241a6:	469a      	mov	sl, r3
 80241a8:	4693      	mov	fp, r2
 80241aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80241ae:	2200      	movs	r2, #0
 80241b0:	4698      	mov	r8, r3
 80241b2:	4691      	mov	r9, r2
 80241b4:	fb08 f20b 	mul.w	r2, r8, fp
 80241b8:	fb0a f309 	mul.w	r3, sl, r9
 80241bc:	4413      	add	r3, r2
 80241be:	fbaa 4508 	umull	r4, r5, sl, r8
 80241c2:	442b      	add	r3, r5
 80241c4:	461d      	mov	r5, r3
 80241c6:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80241ca:	e9c7 4522 	strd	r4, r5, [r7, #136]	; 0x88
 80241ce:	e014      	b.n	80241fa <_np_cmd_nand_erase+0x15e>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 80241d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80241d6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80241da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        block_size = prog->chip_info.block_size;
 80241de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80241e4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80241e8:	67fb      	str	r3, [r7, #124]	; 0x7c
        total_size = prog->chip_info.total_size;
 80241ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80241ec:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80241f0:	3330      	adds	r3, #48	; 0x30
 80241f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241f6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    }

    // 如果设置了跳过坏块标志，并且坏块表未读取，则调用_np_cmd_read_bad_blocks函数进行坏块表读取
    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog, false)))
 80241fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80241fe:	2b00      	cmp	r3, #0
 8024200:	d00d      	beq.n	802421e <_np_cmd_nand_erase+0x182>
 8024202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024206:	2b00      	cmp	r3, #0
 8024208:	d109      	bne.n	802421e <_np_cmd_nand_erase+0x182>
 802420a:	2100      	movs	r1, #0
 802420c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802420e:	f7ff fe59 	bl	8023ec4 <_np_cmd_read_bad_blocks>
 8024212:	65b8      	str	r0, [r7, #88]	; 0x58
 8024214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8024216:	2b00      	cmp	r3, #0
 8024218:	d001      	beq.n	802421e <_np_cmd_nand_erase+0x182>
    {
        return ret;
 802421a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802421c:	e114      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查地址是否对齐到块大小
    if (addr % block_size)
 802421e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024220:	2200      	movs	r2, #0
 8024222:	643b      	str	r3, [r7, #64]	; 0x40
 8024224:	647a      	str	r2, [r7, #68]	; 0x44
 8024226:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802422a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802422e:	f7fe f81f 	bl	8022270 <__aeabi_uldivmod>
 8024232:	4313      	orrs	r3, r2
 8024234:	d009      	beq.n	802424a <_np_cmd_nand_erase+0x1ae>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到块大小0x%lx\r\n", addr, block_size);
 8024236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024238:	9300      	str	r3, [sp, #0]
 802423a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802423e:	4851      	ldr	r0, [pc, #324]	; (8024384 <_np_cmd_nand_erase+0x2e8>)
 8024240:	f00d fa36 	bl	80316b0 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 8024244:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8024248:	e0fe      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否为零
    if (!len)
 802424a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802424e:	4313      	orrs	r3, r2
 8024250:	d105      	bne.n	802425e <_np_cmd_nand_erase+0x1c2>
    {
        ERROR_PRINT("长度为零\r\n");
 8024252:	484d      	ldr	r0, [pc, #308]	; (8024388 <_np_cmd_nand_erase+0x2ec>)
 8024254:	f00d fa92 	bl	803177c <puts>
        return NP_ERR_LEN_INVALID;
 8024258:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802425c:	e0f4      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查长度是否对齐到块大小
    if (len % block_size)
 802425e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024260:	2200      	movs	r2, #0
 8024262:	63bb      	str	r3, [r7, #56]	; 0x38
 8024264:	63fa      	str	r2, [r7, #60]	; 0x3c
 8024266:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 802426a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802426e:	f7fd ffff 	bl	8022270 <__aeabi_uldivmod>
 8024272:	4313      	orrs	r3, r2
 8024274:	d009      	beq.n	802428a <_np_cmd_nand_erase+0x1ee>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到块大小0x%lx\r\n", len, block_size);
 8024276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8024278:	9300      	str	r3, [sp, #0]
 802427a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802427e:	4843      	ldr	r0, [pc, #268]	; (802438c <_np_cmd_nand_erase+0x2f0>)
 8024280:	f00d fa16 	bl	80316b0 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 8024284:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8024288:	e0de      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }

    // 检查擦除地址是否超出芯片大小
    if (addr + len > total_size)
 802428a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802428e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024292:	1884      	adds	r4, r0, r2
 8024294:	633c      	str	r4, [r7, #48]	; 0x30
 8024296:	eb41 0303 	adc.w	r3, r1, r3
 802429a:	637b      	str	r3, [r7, #52]	; 0x34
 802429c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80242a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80242a4:	4621      	mov	r1, r4
 80242a6:	428a      	cmp	r2, r1
 80242a8:	4629      	mov	r1, r5
 80242aa:	418b      	sbcs	r3, r1
 80242ac:	d20f      	bcs.n	80242ce <_np_cmd_nand_erase+0x232>
    {
        ERROR_PRINT("擦除地址超出范围：0x%" PRIx64 "+0x%" PRIx64 "大于芯片大小0x%" PRIx64 "\r\n", addr, len, total_size);
 80242ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80242b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80242b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80242ba:	e9cd 2300 	strd	r2, r3, [sp]
 80242be:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80242c2:	4833      	ldr	r0, [pc, #204]	; (8024390 <_np_cmd_nand_erase+0x2f4>)
 80242c4:	f00d f9f4 	bl	80316b0 <iprintf>
        return NP_ERR_ADDR_EXCEEDED;
 80242c8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80242cc:	e0bc      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
    }

    page = addr / page_size;
 80242ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80242d2:	2200      	movs	r2, #0
 80242d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80242d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80242d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80242dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80242e0:	f7fd ffc6 	bl	8022270 <__aeabi_uldivmod>
 80242e4:	4602      	mov	r2, r0
 80242e6:	460b      	mov	r3, r1
 80242e8:	4613      	mov	r3, r2
 80242ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    while (len)
 80242ee:	e0a3      	b.n	8024438 <_np_cmd_nand_erase+0x39c>
    {
        if (addr >= total_size)
 80242f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80242f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80242f8:	4290      	cmp	r0, r2
 80242fa:	eb71 0303 	sbcs.w	r3, r1, r3
 80242fe:	d30b      	bcc.n	8024318 <_np_cmd_nand_erase+0x27c>
        {
            ERROR_PRINT("擦除地址0x%" PRIx64 "超出范围：0x%" PRIx64 "\r\n", addr, total_size);
 8024300:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8024304:	e9cd 2300 	strd	r2, r3, [sp]
 8024308:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802430c:	4821      	ldr	r0, [pc, #132]	; (8024394 <_np_cmd_nand_erase+0x2f8>)
 802430e:	f00d f9cf 	bl	80316b0 <iprintf>
            return NP_ERR_ADDR_EXCEEDED;
 8024312:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024316:	e097      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果设置了跳过坏块标志，并且当前块为坏块，则跳过当前块，并发送坏块信息
        if (skip_bb && (is_bad = nand_bad_block_table_lookup(page)))
 8024318:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802431c:	2b00      	cmp	r3, #0
 802431e:	d01b      	beq.n	8024358 <_np_cmd_nand_erase+0x2bc>
 8024320:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8024324:	f7ff fbca 	bl	8023abc <nand_bad_block_table_lookup>
 8024328:	4603      	mov	r3, r0
 802432a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 802432e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8024332:	2b00      	cmp	r3, #0
 8024334:	d010      	beq.n	8024358 <_np_cmd_nand_erase+0x2bc>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", addr);
 8024336:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 802433a:	4817      	ldr	r0, [pc, #92]	; (8024398 <_np_cmd_nand_erase+0x2fc>)
 802433c:	f00d f9b8 	bl	80316b0 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 8024340:	2301      	movs	r3, #1
 8024342:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8024344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024348:	f7ff fc60 	bl	8023c0c <np_send_bad_block_info>
 802434c:	4603      	mov	r3, r0
 802434e:	2b00      	cmp	r3, #0
 8024350:	d002      	beq.n	8024358 <_np_cmd_nand_erase+0x2bc>
                return -1;
 8024352:	f04f 33ff 	mov.w	r3, #4294967295
 8024356:	e077      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
        }

        // 如果不是坏块，则执行擦除操作
        if (!is_bad && np_nand_erase(prog, page))
 8024358:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 802435c:	f083 0301 	eor.w	r3, r3, #1
 8024360:	b2db      	uxtb	r3, r3
 8024362:	2b00      	cmp	r3, #0
 8024364:	d01a      	beq.n	802439c <_np_cmd_nand_erase+0x300>
 8024366:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 802436a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802436c:	f7ff fe3a 	bl	8023fe4 <np_nand_erase>
 8024370:	4603      	mov	r3, r0
 8024372:	2b00      	cmp	r3, #0
 8024374:	d012      	beq.n	802439c <_np_cmd_nand_erase+0x300>
            return NP_ERR_NAND_ERASE;
 8024376:	f06f 0368 	mvn.w	r3, #104	; 0x68
 802437a:	e065      	b.n	8024448 <_np_cmd_nand_erase+0x3ac>
 802437c:	080328d4 	.word	0x080328d4
 8024380:	08032908 	.word	0x08032908
 8024384:	08032938 	.word	0x08032938
 8024388:	08032968 	.word	0x08032968
 802438c:	08032980 	.word	0x08032980
 8024390:	080329b0 	.word	0x080329b0
 8024394:	080329fc 	.word	0x080329fc
 8024398:	08032a30 	.word	0x08032a30

        addr += block_size;
 802439c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802439e:	2200      	movs	r2, #0
 80243a0:	623b      	str	r3, [r7, #32]
 80243a2:	627a      	str	r2, [r7, #36]	; 0x24
 80243a4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80243a8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80243ac:	4621      	mov	r1, r4
 80243ae:	1851      	adds	r1, r2, r1
 80243b0:	60b9      	str	r1, [r7, #8]
 80243b2:	4629      	mov	r1, r5
 80243b4:	414b      	adcs	r3, r1
 80243b6:	60fb      	str	r3, [r7, #12]
 80243b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80243bc:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
        page += pages_in_block;
 80243c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80243c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80243c6:	4413      	add	r3, r2
 80243c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        /* 在部分擦除时不计算坏块 */
        if (!is_bad || (is_bad && erase_cmd->len == total_size))
 80243cc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80243d0:	f083 0301 	eor.w	r3, r3, #1
 80243d4:	b2db      	uxtb	r3, r3
 80243d6:	2b00      	cmp	r3, #0
 80243d8:	d10e      	bne.n	80243f8 <_np_cmd_nand_erase+0x35c>
 80243da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80243de:	2b00      	cmp	r3, #0
 80243e0:	d01d      	beq.n	802441e <_np_cmd_nand_erase+0x382>
 80243e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80243e4:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80243e8:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80243ec:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80243f0:	4299      	cmp	r1, r3
 80243f2:	bf08      	it	eq
 80243f4:	4290      	cmpeq	r0, r2
 80243f6:	d112      	bne.n	802441e <_np_cmd_nand_erase+0x382>
            len -= block_size;
 80243f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80243fa:	2200      	movs	r2, #0
 80243fc:	61bb      	str	r3, [r7, #24]
 80243fe:	61fa      	str	r2, [r7, #28]
 8024400:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024404:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8024408:	4621      	mov	r1, r4
 802440a:	1a51      	subs	r1, r2, r1
 802440c:	6039      	str	r1, [r7, #0]
 802440e:	4629      	mov	r1, r5
 8024410:	eb63 0301 	sbc.w	r3, r3, r1
 8024414:	607b      	str	r3, [r7, #4]
 8024416:	e9d7 3400 	ldrd	r3, r4, [r7]
 802441a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

        // 发送进度信息
        np_send_progress(total_len - len);
 802441e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8024422:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8024426:	1a84      	subs	r4, r0, r2
 8024428:	613c      	str	r4, [r7, #16]
 802442a:	eb61 0303 	sbc.w	r3, r1, r3
 802442e:	617b      	str	r3, [r7, #20]
 8024430:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8024434:	f7ff fc22 	bl	8023c7c <np_send_progress>
    while (len)
 8024438:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 802443c:	4313      	orrs	r3, r2
 802443e:	f47f af57 	bne.w	80242f0 <_np_cmd_nand_erase+0x254>
    }

    return np_send_ok_status();
 8024442:	f7ff fba3 	bl	8023b8c <np_send_ok_status>
 8024446:	4603      	mov	r3, r0
}
 8024448:	4618      	mov	r0, r3
 802444a:	37a0      	adds	r7, #160	; 0xa0
 802444c:	46bd      	mov	sp, r7
 802444e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024452:	bf00      	nop

08024454 <np_cmd_nand_erase>:

// 执行NAND擦除命令的函数
static int np_cmd_nand_erase(np_prog_t *prog)
{
 8024454:	b580      	push	{r7, lr}
 8024456:	b084      	sub	sp, #16
 8024458:	af00      	add	r7, sp, #0
 802445a:	6078      	str	r0, [r7, #4]
    int ret;

    // 设置写入指示灯
    led_wr_set(true);
 802445c:	2001      	movs	r0, #1
 802445e:	f7ff f9f1 	bl	8023844 <led_wr_set>
    // 调用内部的_np_cmd_nand_erase函数执行擦除命令
    ret = _np_cmd_nand_erase(prog);
 8024462:	6878      	ldr	r0, [r7, #4]
 8024464:	f7ff fe1a 	bl	802409c <_np_cmd_nand_erase>
 8024468:	60f8      	str	r0, [r7, #12]
    // 关闭写入指示灯
    led_wr_set(false);
 802446a:	2000      	movs	r0, #0
 802446c:	f7ff f9ea 	bl	8023844 <led_wr_set>

    return ret;
 8024470:	68fb      	ldr	r3, [r7, #12]
}
 8024472:	4618      	mov	r0, r3
 8024474:	3710      	adds	r7, #16
 8024476:	46bd      	mov	sp, r7
 8024478:	bd80      	pop	{r7, pc}
	...

0802447c <np_send_write_ack>:

// 发送写入确认的函数
static int np_send_write_ack(uint64_t bytes_ack)
{
 802447c:	b580      	push	{r7, lr}
 802447e:	b086      	sub	sp, #24
 8024480:	af00      	add	r7, sp, #0
 8024482:	e9c7 0100 	strd	r0, r1, [r7]
    np_resp_t resp_header = { NP_RESP_STATUS, NP_STATUS_WRITE_ACK };
 8024486:	4b0f      	ldr	r3, [pc, #60]	; (80244c4 <np_send_write_ack+0x48>)
 8024488:	881b      	ldrh	r3, [r3, #0]
 802448a:	82bb      	strh	r3, [r7, #20]
    np_resp_write_ack_t write_ack = { resp_header, bytes_ack };
 802448c:	8abb      	ldrh	r3, [r7, #20]
 802448e:	813b      	strh	r3, [r7, #8]
 8024490:	f107 0308 	add.w	r3, r7, #8
 8024494:	3302      	adds	r3, #2
 8024496:	683a      	ldr	r2, [r7, #0]
 8024498:	601a      	str	r2, [r3, #0]
 802449a:	687a      	ldr	r2, [r7, #4]
 802449c:	605a      	str	r2, [r3, #4]

    // 发送写入确认响应
    if (np_comm_cb->send((uint8_t *)&write_ack, sizeof(write_ack)))
 802449e:	4b0a      	ldr	r3, [pc, #40]	; (80244c8 <np_send_write_ack+0x4c>)
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	681b      	ldr	r3, [r3, #0]
 80244a4:	f107 0208 	add.w	r2, r7, #8
 80244a8:	210a      	movs	r1, #10
 80244aa:	4610      	mov	r0, r2
 80244ac:	4798      	blx	r3
 80244ae:	4603      	mov	r3, r0
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	d002      	beq.n	80244ba <np_send_write_ack+0x3e>
        return -1;
 80244b4:	f04f 33ff 	mov.w	r3, #4294967295
 80244b8:	e000      	b.n	80244bc <np_send_write_ack+0x40>

    return 0;
 80244ba:	2300      	movs	r3, #0
}
 80244bc:	4618      	mov	r0, r3
 80244be:	3718      	adds	r7, #24
 80244c0:	46bd      	mov	sp, r7
 80244c2:	bd80      	pop	{r7, pc}
 80244c4:	08032a54 	.word	0x08032a54
 80244c8:	20000cb8 	.word	0x20000cb8

080244cc <np_cmd_nand_write_start>:

// 执行NAND写入开始命令的函数
static int np_cmd_nand_write_start(np_prog_t *prog)
{
 80244cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80244d0:	b09a      	sub	sp, #104	; 0x68
 80244d2:	af04      	add	r7, sp, #16
 80244d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t addr, len;
    uint32_t pages, pages_in_block;
    np_write_start_cmd_t *write_start_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 80244d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244d8:	685b      	ldr	r3, [r3, #4]
 80244da:	2b11      	cmp	r3, #17
 80244dc:	d808      	bhi.n	80244f0 <np_cmd_nand_write_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误：%lu\r\n",
 80244de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244e0:	685b      	ldr	r3, [r3, #4]
 80244e2:	4619      	mov	r1, r3
 80244e4:	489d      	ldr	r0, [pc, #628]	; (802475c <np_cmd_nand_write_start+0x290>)
 80244e6:	f00d f8e3 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80244ea:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80244ee:	e184      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80244f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	657b      	str	r3, [r7, #84]	; 0x54

    // 如果硬件支持硬件ECC，启用硬件ECC
    if (hal[prog->hal]->enable_hw_ecc)
 80244f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80244f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80244fc:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024500:	461a      	mov	r2, r3
 8024502:	4b97      	ldr	r3, [pc, #604]	; (8024760 <np_cmd_nand_write_start+0x294>)
 8024504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802450a:	2b00      	cmp	r3, #0
 802450c:	d015      	beq.n	802453a <np_cmd_nand_write_start+0x6e>
        hal[prog->hal]->enable_hw_ecc(write_start_cmd->flags.enable_hw_ecc);
 802450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024510:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024514:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024518:	461a      	mov	r2, r3
 802451a:	4b91      	ldr	r3, [pc, #580]	; (8024760 <np_cmd_nand_write_start+0x294>)
 802451c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024524:	7c5b      	ldrb	r3, [r3, #17]
 8024526:	f3c3 0380 	ubfx	r3, r3, #2, #1
 802452a:	b2db      	uxtb	r3, r3
 802452c:	2b00      	cmp	r3, #0
 802452e:	bf14      	ite	ne
 8024530:	2301      	movne	r3, #1
 8024532:	2300      	moveq	r3, #0
 8024534:	b2db      	uxtb	r3, r3
 8024536:	4618      	mov	r0, r3
 8024538:	4790      	blx	r2

    addr = write_start_cmd->addr;
 802453a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802453c:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024540:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024544:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    len = write_start_cmd->len;
 8024548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802454a:	f8d1 2009 	ldr.w	r2, [r1, #9]
 802454e:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024552:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    DEBUG_PRINT("写入地址：0x%" PRIx64 "，长度：0x%" PRIx64 "字节\r\n",
 8024556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802455a:	e9cd 2300 	strd	r2, r3, [sp]
 802455e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024562:	4880      	ldr	r0, [pc, #512]	; (8024764 <np_cmd_nand_write_start+0x298>)
 8024564:	f00d f8a4 	bl	80316b0 <iprintf>
        addr, len);

    if (write_start_cmd->flags.inc_spare)
 8024568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802456a:	7c5b      	ldrb	r3, [r3, #17]
 802456c:	f003 0302 	and.w	r3, r3, #2
 8024570:	b2db      	uxtb	r3, r3
 8024572:	2b00      	cmp	r3, #0
 8024574:	d051      	beq.n	802461a <np_cmd_nand_write_start+0x14e>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024578:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802457c:	3330      	adds	r3, #48	; 0x30
 802457e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024584:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024588:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802458c:	2200      	movs	r2, #0
 802458e:	623b      	str	r3, [r7, #32]
 8024590:	627a      	str	r2, [r7, #36]	; 0x24
 8024592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024596:	f7fd fe6b 	bl	8022270 <__aeabi_uldivmod>
 802459a:	4602      	mov	r2, r0
 802459c:	460b      	mov	r3, r1
 802459e:	4613      	mov	r3, r2
 80245a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        pages_in_block = prog->chip_info.block_size /
 80245a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245a8:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 80245ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245b2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 80245b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80245ba:	63bb      	str	r3, [r7, #56]	; 0x38
        prog->page_size = prog->chip_info.page_size +
 80245bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245c2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
            prog->chip_info.spare_size;
 80245c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80245cc:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
        prog->page_size = prog->chip_info.page_size +
 80245d0:	441a      	add	r2, r3
 80245d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245d4:	621a      	str	r2, [r3, #32]
        prog->block_size = pages_in_block * prog->page_size;
 80245d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245d8:	6a1a      	ldr	r2, [r3, #32]
 80245da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80245dc:	fb03 f202 	mul.w	r2, r3, r2
 80245e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245e2:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = (uint64_t)pages * prog->page_size;
 80245e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80245e6:	2200      	movs	r2, #0
 80245e8:	469a      	mov	sl, r3
 80245ea:	4693      	mov	fp, r2
 80245ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80245ee:	6a1b      	ldr	r3, [r3, #32]
 80245f0:	2200      	movs	r2, #0
 80245f2:	61bb      	str	r3, [r7, #24]
 80245f4:	61fa      	str	r2, [r7, #28]
 80245f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80245fa:	4603      	mov	r3, r0
 80245fc:	fb03 f20b 	mul.w	r2, r3, fp
 8024600:	460b      	mov	r3, r1
 8024602:	fb0a f303 	mul.w	r3, sl, r3
 8024606:	4413      	add	r3, r2
 8024608:	4602      	mov	r2, r0
 802460a:	fbaa 4502 	umull	r4, r5, sl, r2
 802460e:	442b      	add	r3, r5
 8024610:	461d      	mov	r5, r3
 8024612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024614:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8024618:	e016      	b.n	8024648 <np_cmd_nand_write_start+0x17c>
    }
    else
    {
        prog->page_size = prog->chip_info.page_size;
 802461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802461c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024620:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024626:	621a      	str	r2, [r3, #32]
        prog->block_size = prog->chip_info.block_size;
 8024628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802462a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802462e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8024632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024634:	625a      	str	r2, [r3, #36]	; 0x24
        prog->total_size = prog->chip_info.total_size;
 8024636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024638:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802463c:	3330      	adds	r3, #48	; 0x30
 802463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024642:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024644:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    }

    // 检查写入地址是否超出芯片大小
    if (addr + len > prog->total_size)
 8024648:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 802464c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024650:	eb10 0802 	adds.w	r8, r0, r2
 8024654:	eb41 0903 	adc.w	r9, r1, r3
 8024658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802465a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802465e:	4542      	cmp	r2, r8
 8024660:	eb73 0309 	sbcs.w	r3, r3, r9
 8024664:	d210      	bcs.n	8024688 <np_cmd_nand_write_start+0x1bc>
    {
        ERROR_PRINT("写入地址0x%" PRIx64 "+0x%" PRIx64
 8024666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024668:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 802466c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8024670:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024674:	e9cd 2300 	strd	r2, r3, [sp]
 8024678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802467c:	483a      	ldr	r0, [pc, #232]	; (8024768 <np_cmd_nand_write_start+0x29c>)
 802467e:	f00d f817 	bl	80316b0 <iprintf>
            "超出芯片大小0x%" PRIx64 "\r\n", addr, len,
            prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8024682:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024686:	e0b8      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    // 检查地址是否对齐到页大小
    if (addr % prog->page_size)
 8024688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802468a:	6a1b      	ldr	r3, [r3, #32]
 802468c:	2200      	movs	r2, #0
 802468e:	613b      	str	r3, [r7, #16]
 8024690:	617a      	str	r2, [r7, #20]
 8024692:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8024696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802469a:	f7fd fde9 	bl	8022270 <__aeabi_uldivmod>
 802469e:	4313      	orrs	r3, r2
 80246a0:	d00a      	beq.n	80246b8 <np_cmd_nand_write_start+0x1ec>
    {
        ERROR_PRINT("地址0x%" PRIx64 "未对齐到页大小0x%lx\r\n", addr, prog->page_size);
 80246a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246a4:	6a1b      	ldr	r3, [r3, #32]
 80246a6:	9300      	str	r3, [sp, #0]
 80246a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80246ac:	482f      	ldr	r0, [pc, #188]	; (802476c <np_cmd_nand_write_start+0x2a0>)
 80246ae:	f00c ffff 	bl	80316b0 <iprintf>
        return NP_ERR_ADDR_NOT_ALIGN;
 80246b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80246b6:	e0a0      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否为零
    if (!len)
 80246b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80246bc:	4313      	orrs	r3, r2
 80246be:	d105      	bne.n	80246cc <np_cmd_nand_write_start+0x200>
    {
        ERROR_PRINT("长度为零\r\n");
 80246c0:	482b      	ldr	r0, [pc, #172]	; (8024770 <np_cmd_nand_write_start+0x2a4>)
 80246c2:	f00d f85b 	bl	803177c <puts>
        return NP_ERR_LEN_INVALID;
 80246c6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80246ca:	e096      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    // 检查长度是否对齐到页大小
    if (len % prog->page_size)
 80246cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246ce:	6a1b      	ldr	r3, [r3, #32]
 80246d0:	2200      	movs	r2, #0
 80246d2:	60bb      	str	r3, [r7, #8]
 80246d4:	60fa      	str	r2, [r7, #12]
 80246d6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80246da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80246de:	f7fd fdc7 	bl	8022270 <__aeabi_uldivmod>
 80246e2:	4313      	orrs	r3, r2
 80246e4:	d00a      	beq.n	80246fc <np_cmd_nand_write_start+0x230>
    {
        ERROR_PRINT("长度0x%" PRIx64 "未对齐到页大小0x%lx\r\n", len, prog->page_size);
 80246e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80246e8:	6a1b      	ldr	r3, [r3, #32]
 80246ea:	9300      	str	r3, [sp, #0]
 80246ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80246f0:	4820      	ldr	r0, [pc, #128]	; (8024774 <np_cmd_nand_write_start+0x2a8>)
 80246f2:	f00c ffdd 	bl	80316b0 <iprintf>
        return NP_ERR_LEN_NOT_ALIGN;
 80246f6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80246fa:	e07e      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    // 设置跳过坏块标志，并且读取坏块信息
    prog->skip_bb = write_start_cmd->flags.skip_bb;
 80246fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80246fe:	7c5b      	ldrb	r3, [r3, #17]
 8024700:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024704:	b2db      	uxtb	r3, r3
 8024706:	461a      	mov	r2, r3
 8024708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802470a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802470e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if (prog->skip_bb && !prog->bb_is_read &&
 8024712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024714:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024718:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 802471c:	2b00      	cmp	r3, #0
 802471e:	d00d      	beq.n	802473c <np_cmd_nand_write_start+0x270>
 8024720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024724:	2b00      	cmp	r3, #0
 8024726:	d109      	bne.n	802473c <np_cmd_nand_write_start+0x270>
        (ret = _np_cmd_read_bad_blocks(prog, false)))
 8024728:	2100      	movs	r1, #0
 802472a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802472c:	f7ff fbca 	bl	8023ec4 <_np_cmd_read_bad_blocks>
 8024730:	6378      	str	r0, [r7, #52]	; 0x34
    if (prog->skip_bb && !prog->bb_is_read &&
 8024732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024734:	2b00      	cmp	r3, #0
 8024736:	d001      	beq.n	802473c <np_cmd_nand_write_start+0x270>
    {
        return ret;
 8024738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802473a:	e05e      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
    }

    // 检查页大小是否超过缓冲区大小
    if (prog->page_size > sizeof(prog->page.buf))
 802473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802473e:	6a1b      	ldr	r3, [r3, #32]
 8024740:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
 8024744:	d91a      	bls.n	802477c <np_cmd_nand_write_start+0x2b0>
    {
        ERROR_PRINT("页大小0x%lx超过缓冲区大小0x%x\r\n", prog->page_size, sizeof(prog->page.buf));
 8024746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024748:	6a1b      	ldr	r3, [r3, #32]
 802474a:	f44f 5207 	mov.w	r2, #8640	; 0x21c0
 802474e:	4619      	mov	r1, r3
 8024750:	4809      	ldr	r0, [pc, #36]	; (8024778 <np_cmd_nand_write_start+0x2ac>)
 8024752:	f00c ffad 	bl	80316b0 <iprintf>
        return NP_ERR_BUF_OVERFLOW;
 8024756:	f06f 036c 	mvn.w	r3, #108	; 0x6c
 802475a:	e04e      	b.n	80247fa <np_cmd_nand_write_start+0x32e>
 802475c:	08032a58 	.word	0x08032a58
 8024760:	20000040 	.word	0x20000040
 8024764:	08032a94 	.word	0x08032a94
 8024768:	08032ac4 	.word	0x08032ac4
 802476c:	08032b00 	.word	0x08032b00
 8024770:	08032968 	.word	0x08032968
 8024774:	08032b30 	.word	0x08032b30
 8024778:	08032b60 	.word	0x08032b60
    }

    // 设置写入相关的参数
    prog->addr = addr;
 802477c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802477e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024782:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 8024786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802478c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 8024790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024792:	2201      	movs	r2, #1
 8024794:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 8024796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024798:	6a1b      	ldr	r3, [r3, #32]
 802479a:	2200      	movs	r2, #0
 802479c:	603b      	str	r3, [r7, #0]
 802479e:	607a      	str	r2, [r7, #4]
 80247a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80247a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80247a8:	f7fd fd62 	bl	8022270 <__aeabi_uldivmod>
 80247ac:	4602      	mov	r2, r0
 80247ae:	460b      	mov	r3, r1
 80247b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247b6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 80247ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80247c0:	461a      	mov	r2, r3
 80247c2:	2300      	movs	r3, #0
 80247c4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 80247c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247ca:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80247ce:	3310      	adds	r3, #16
 80247d0:	4619      	mov	r1, r3
 80247d2:	f04f 0200 	mov.w	r2, #0
 80247d6:	f04f 0300 	mov.w	r3, #0
 80247da:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 80247de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80247e0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 80247e4:	3310      	adds	r3, #16
 80247e6:	4619      	mov	r1, r3
 80247e8:	f04f 0200 	mov.w	r2, #0
 80247ec:	f04f 0300 	mov.w	r3, #0
 80247f0:	e9c1 2300 	strd	r2, r3, [r1]

    // 发送OK状态响应
    return np_send_ok_status();
 80247f4:	f7ff f9ca 	bl	8023b8c <np_send_ok_status>
 80247f8:	4603      	mov	r3, r0
}
 80247fa:	4618      	mov	r0, r3
 80247fc:	3758      	adds	r7, #88	; 0x58
 80247fe:	46bd      	mov	sp, r7
 8024800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08024804 <np_nand_handle_status>:

// 处理NAND状态的函数
static int np_nand_handle_status(np_prog_t *prog)
{
 8024804:	b580      	push	{r7, lr}
 8024806:	b082      	sub	sp, #8
 8024808:	af00      	add	r7, sp, #0
 802480a:	6078      	str	r0, [r7, #4]
    switch (hal[prog->hal]->read_status())
 802480c:	687b      	ldr	r3, [r7, #4]
 802480e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024812:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024816:	461a      	mov	r2, r3
 8024818:	4b37      	ldr	r3, [pc, #220]	; (80248f8 <np_nand_handle_status+0xf4>)
 802481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802481e:	69db      	ldr	r3, [r3, #28]
 8024820:	4798      	blx	r3
 8024822:	4603      	mov	r3, r0
 8024824:	2b02      	cmp	r3, #2
 8024826:	d006      	beq.n	8024836 <np_nand_handle_status+0x32>
 8024828:	2b02      	cmp	r3, #2
 802482a:	d84b      	bhi.n	80248c4 <np_nand_handle_status+0xc0>
 802482c:	2b00      	cmp	r3, #0
 802482e:	d010      	beq.n	8024852 <np_nand_handle_status+0x4e>
 8024830:	2b01      	cmp	r3, #1
 8024832:	d01d      	beq.n	8024870 <np_nand_handle_status+0x6c>
 8024834:	e046      	b.n	80248c4 <np_nand_handle_status+0xc0>
    {
    case FLASH_STATUS_ERROR:
        // 如果状态为错误，发送坏块信息
        if (np_send_bad_block_info(prog->addr, prog->block_size, false))
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024840:	2300      	movs	r3, #0
 8024842:	f7ff f9e3 	bl	8023c0c <np_send_bad_block_info>
 8024846:	4603      	mov	r3, r0
 8024848:	2b00      	cmp	r3, #0
 802484a:	d002      	beq.n	8024852 <np_nand_handle_status+0x4e>
            return -1;
 802484c:	f04f 33ff 	mov.w	r3, #4294967295
 8024850:	e04e      	b.n	80248f0 <np_nand_handle_status+0xec>
        /* 继续执行下面的代码 */
    case FLASH_STATUS_READY:
        // 如果状态为就绪，表示操作完成，将标志位和超时计数器重置
        prog->nand_wr_in_progress = 0;
 8024852:	687b      	ldr	r3, [r7, #4]
 8024854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024858:	461a      	mov	r2, r3
 802485a:	2300      	movs	r3, #0
 802485c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 8024860:	687b      	ldr	r3, [r7, #4]
 8024862:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024866:	461a      	mov	r2, r3
 8024868:	2300      	movs	r3, #0
 802486a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        break;
 802486e:	e03e      	b.n	80248ee <np_nand_handle_status+0xea>
    case FLASH_STATUS_BUSY:
        // 如果状态为繁忙，增加超时计数器，并检查是否超时
        if (++prog->nand_timeout == NP_NAND_TIMEOUT)
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024876:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 802487a:	3301      	adds	r3, #1
 802487c:	687a      	ldr	r2, [r7, #4]
 802487e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024882:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
 8024886:	687b      	ldr	r3, [r7, #4]
 8024888:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802488c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8024890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024894:	d12a      	bne.n	80248ec <np_nand_handle_status+0xe8>
        {
            ERROR_PRINT("NAND写入超时，地址：0x%" PRIx64 "\r\n", prog->addr);
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802489c:	4817      	ldr	r0, [pc, #92]	; (80248fc <np_nand_handle_status+0xf8>)
 802489e:	f00c ff07 	bl	80316b0 <iprintf>
            prog->nand_wr_in_progress = 0;
 80248a2:	687b      	ldr	r3, [r7, #4]
 80248a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248a8:	461a      	mov	r2, r3
 80248aa:	2300      	movs	r3, #0
 80248ac:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
            prog->nand_timeout = 0;
 80248b0:	687b      	ldr	r3, [r7, #4]
 80248b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248b6:	461a      	mov	r2, r3
 80248b8:	2300      	movs	r3, #0
 80248ba:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
            return -1;
 80248be:	f04f 33ff 	mov.w	r3, #4294967295
 80248c2:	e015      	b.n	80248f0 <np_nand_handle_status+0xec>
        }
        break;
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 80248c4:	480e      	ldr	r0, [pc, #56]	; (8024900 <np_nand_handle_status+0xfc>)
 80248c6:	f00c ff59 	bl	803177c <puts>
        prog->nand_wr_in_progress = 0;
 80248ca:	687b      	ldr	r3, [r7, #4]
 80248cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248d0:	461a      	mov	r2, r3
 80248d2:	2300      	movs	r3, #0
 80248d4:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
        prog->nand_timeout = 0;
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80248de:	461a      	mov	r2, r3
 80248e0:	2300      	movs	r3, #0
 80248e2:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
        return -1;
 80248e6:	f04f 33ff 	mov.w	r3, #4294967295
 80248ea:	e001      	b.n	80248f0 <np_nand_handle_status+0xec>
        break;
 80248ec:	bf00      	nop
    }

    return 0;
 80248ee:	2300      	movs	r3, #0
}
 80248f0:	4618      	mov	r0, r3
 80248f2:	3708      	adds	r7, #8
 80248f4:	46bd      	mov	sp, r7
 80248f6:	bd80      	pop	{r7, pc}
 80248f8:	20000040 	.word	0x20000040
 80248fc:	08032b94 	.word	0x08032b94
 8024900:	080328b8 	.word	0x080328b8

08024904 <np_nand_write>:

// 执行NAND写入的函数
static int np_nand_write(np_prog_t *prog)
{   
 8024904:	b580      	push	{r7, lr}
 8024906:	b084      	sub	sp, #16
 8024908:	af02      	add	r7, sp, #8
 802490a:	6078      	str	r0, [r7, #4]
    // 如果上一次的NAND写入还在进行中，等待其完成
    if (prog->nand_wr_in_progress)
 802490c:	687b      	ldr	r3, [r7, #4]
 802490e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024912:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8024916:	2b00      	cmp	r3, #0
 8024918:	d012      	beq.n	8024940 <np_nand_write+0x3c>
    {
        DEBUG_PRINT("等待上一次NAND写入完成\r\n");
 802491a:	481e      	ldr	r0, [pc, #120]	; (8024994 <np_nand_write+0x90>)
 802491c:	f00c ff2e 	bl	803177c <puts>
        do
        {
            if (np_nand_handle_status(prog))
 8024920:	6878      	ldr	r0, [r7, #4]
 8024922:	f7ff ff6f 	bl	8024804 <np_nand_handle_status>
 8024926:	4603      	mov	r3, r0
 8024928:	2b00      	cmp	r3, #0
 802492a:	d002      	beq.n	8024932 <np_nand_write+0x2e>
                return -1;
 802492c:	f04f 33ff 	mov.w	r3, #4294967295
 8024930:	e02c      	b.n	802498c <np_nand_write+0x88>
        }
        while (prog->nand_wr_in_progress);
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024938:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 802493c:	2b00      	cmp	r3, #0
 802493e:	d1ef      	bne.n	8024920 <np_nand_write+0x1c>
    }

    DEBUG_PRINT("NAND写入，地址：0x%" PRIx64 "，长度：%lu字节\r\n", prog->addr,
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024946:	6879      	ldr	r1, [r7, #4]
 8024948:	6a09      	ldr	r1, [r1, #32]
 802494a:	9100      	str	r1, [sp, #0]
 802494c:	4812      	ldr	r0, [pc, #72]	; (8024998 <np_nand_write+0x94>)
 802494e:	f00c feaf 	bl	80316b0 <iprintf>
        prog->page_size);

    // 调用硬件抽象层函数执行异步写入操作
    hal[prog->hal]->write_page_async(prog->page.buf, prog->page.page,
 8024952:	687b      	ldr	r3, [r7, #4]
 8024954:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024958:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802495c:	461a      	mov	r2, r3
 802495e:	4b0f      	ldr	r3, [pc, #60]	; (802499c <np_nand_write+0x98>)
 8024960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024964:	699b      	ldr	r3, [r3, #24]
 8024966:	687a      	ldr	r2, [r7, #4]
 8024968:	f102 003c 	add.w	r0, r2, #60	; 0x3c
 802496c:	687a      	ldr	r2, [r7, #4]
 802496e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024972:	f8d2 11fc 	ldr.w	r1, [r2, #508]	; 0x1fc
 8024976:	687a      	ldr	r2, [r7, #4]
 8024978:	6a12      	ldr	r2, [r2, #32]
 802497a:	4798      	blx	r3
        prog->page_size);

    prog->nand_wr_in_progress = 1;
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024982:	461a      	mov	r2, r3
 8024984:	2301      	movs	r3, #1
 8024986:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

    return 0;
 802498a:	2300      	movs	r3, #0
}
 802498c:	4618      	mov	r0, r3
 802498e:	3708      	adds	r7, #8
 8024990:	46bd      	mov	sp, r7
 8024992:	bd80      	pop	{r7, pc}
 8024994:	08032bc0 	.word	0x08032bc0
 8024998:	08032be4 	.word	0x08032be4
 802499c:	20000040 	.word	0x20000040

080249a0 <np_cmd_nand_write_data>:

// 执行NAND写入数据命令的函数
static int np_cmd_nand_write_data(np_prog_t *prog)
{
 80249a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80249a4:	b092      	sub	sp, #72	; 0x48
 80249a6:	af02      	add	r7, sp, #8
 80249a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t write_len, bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    // 检查缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 80249aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249ac:	685b      	ldr	r3, [r3, #4]
 80249ae:	2b01      	cmp	r3, #1
 80249b0:	d808      	bhi.n	80249c4 <np_cmd_nand_write_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误：%lu\r\n",
 80249b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249b4:	685b      	ldr	r3, [r3, #4]
 80249b6:	4619      	mov	r1, r3
 80249b8:	486e      	ldr	r0, [pc, #440]	; (8024b74 <np_cmd_nand_write_data+0x1d4>)
 80249ba:	f00c fe79 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80249be:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80249c2:	e1a1      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80249c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249c6:	681b      	ldr	r3, [r3, #0]
 80249c8:	63bb      	str	r3, [r7, #56]	; 0x38
    len = write_data_cmd->len;
 80249ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80249cc:	785b      	ldrb	r3, [r3, #1]
 80249ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80249d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249d2:	3302      	adds	r3, #2
 80249d4:	2b40      	cmp	r3, #64	; 0x40
 80249d6:	d906      	bls.n	80249e6 <np_cmd_nand_write_data+0x46>
    {
        ERROR_PRINT("数据大小错误：0x%lx\r\n", len);
 80249d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80249da:	4867      	ldr	r0, [pc, #412]	; (8024b78 <np_cmd_nand_write_data+0x1d8>)
 80249dc:	f00c fe68 	bl	80316b0 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80249e0:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80249e4:	e190      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80249e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249e8:	1c9a      	adds	r2, r3, #2
 80249ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249ec:	685b      	ldr	r3, [r3, #4]
 80249ee:	429a      	cmp	r2, r3
 80249f0:	d00a      	beq.n	8024a08 <np_cmd_nand_write_data+0x68>
    {
        ERROR_PRINT("缓冲区长度0x%lx大于命令长度0x%lx\r\n",
 80249f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80249f4:	6859      	ldr	r1, [r3, #4]
 80249f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80249f8:	3302      	adds	r3, #2
 80249fa:	461a      	mov	r2, r3
 80249fc:	485f      	ldr	r0, [pc, #380]	; (8024b7c <np_cmd_nand_write_data+0x1dc>)
 80249fe:	f00c fe57 	bl	80316b0 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8024a02:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8024a06:	e17f      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
    }

    // 检查写入地址是否已设置
    if (!prog->addr_is_set)
 8024a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	d105      	bne.n	8024a1c <np_cmd_nand_write_data+0x7c>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8024a10:	485b      	ldr	r0, [pc, #364]	; (8024b80 <np_cmd_nand_write_data+0x1e0>)
 8024a12:	f00c feb3 	bl	803177c <puts>
        return NP_ERR_ADDR_INVALID;
 8024a16:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8024a1a:	e175      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
    }

    // 计算本次写入的长度
    if (prog->page.offset + len > prog->page_size)
 8024a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024a28:	441a      	add	r2, r3
 8024a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a2c:	6a1b      	ldr	r3, [r3, #32]
 8024a2e:	429a      	cmp	r2, r3
 8024a30:	d909      	bls.n	8024a46 <np_cmd_nand_write_data+0xa6>
        write_len = prog->page_size - prog->page.offset;
 8024a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a34:	6a1a      	ldr	r2, [r3, #32]
 8024a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024a40:	1ad3      	subs	r3, r2, r3
 8024a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024a44:	e001      	b.n	8024a4a <np_cmd_nand_write_data+0xaa>
    else
        write_len = len;
 8024a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024a48:	63fb      	str	r3, [r7, #60]	; 0x3c

    // 将数据拷贝到页缓冲区
    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8024a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a4c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8024a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024a5a:	18d0      	adds	r0, r2, r3
 8024a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024a5e:	3302      	adds	r3, #2
 8024a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a62:	4619      	mov	r1, r3
 8024a64:	f00c ffe5 	bl	8031a32 <memcpy>
    prog->page.offset += write_len;
 8024a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a6a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024a74:	441a      	add	r2, r3
 8024a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a78:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    // 如果页缓冲区已满，进行页写入操作
    if (prog->page.offset == prog->page_size)
 8024a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024a86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a8c:	6a1b      	ldr	r3, [r3, #32]
 8024a8e:	429a      	cmp	r2, r3
 8024a90:	f040 80a2 	bne.w	8024bd8 <np_cmd_nand_write_data+0x238>
    {
        // 如果启用了跳过坏块，并且当前页是坏块，跳过该坏块
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024a94:	e038      	b.n	8024b08 <np_cmd_nand_write_data+0x168>
        {
            DEBUG_PRINT("跳过坏块，地址：0x%" PRIx64 "\r\n", prog->addr);
 8024a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024a98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024a9c:	4839      	ldr	r0, [pc, #228]	; (8024b84 <np_cmd_nand_write_data+0x1e4>)
 8024a9e:	f00c fe07 	bl	80316b0 <iprintf>
            if (np_send_bad_block_info(prog->addr, prog->block_size, true))
 8024aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aa4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024aac:	2301      	movs	r3, #1
 8024aae:	f7ff f8ad 	bl	8023c0c <np_send_bad_block_info>
 8024ab2:	4603      	mov	r3, r0
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	d002      	beq.n	8024abe <np_cmd_nand_write_data+0x11e>
                return -1;
 8024ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8024abc:	e124      	b.n	8024d08 <np_cmd_nand_write_data+0x368>

            prog->addr += prog->block_size;
 8024abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ac0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ac8:	2200      	movs	r2, #0
 8024aca:	623b      	str	r3, [r7, #32]
 8024acc:	627a      	str	r2, [r7, #36]	; 0x24
 8024ace:	6a3b      	ldr	r3, [r7, #32]
 8024ad0:	18c3      	adds	r3, r0, r3
 8024ad2:	613b      	str	r3, [r7, #16]
 8024ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ad6:	eb41 0303 	adc.w	r3, r1, r3
 8024ada:	617b      	str	r3, [r7, #20]
 8024adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8024ae2:	e9c3 1202 	strd	r1, r2, [r3, #8]
            prog->page.page += prog->block_size / prog->page_size;
 8024ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ae8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024aec:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8024af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024af6:	6a1b      	ldr	r3, [r3, #32]
 8024af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8024afc:	18ca      	adds	r2, r1, r3
 8024afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b04:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
        while (prog->skip_bb && nand_bad_block_table_lookup(prog->page.page))
 8024b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8024b12:	2b00      	cmp	r3, #0
 8024b14:	d00a      	beq.n	8024b2c <np_cmd_nand_write_data+0x18c>
 8024b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024b1c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024b20:	4618      	mov	r0, r3
 8024b22:	f7fe ffcb 	bl	8023abc <nand_bad_block_table_lookup>
 8024b26:	4603      	mov	r3, r0
 8024b28:	2b00      	cmp	r3, #0
 8024b2a:	d1b4      	bne.n	8024a96 <np_cmd_nand_write_data+0xf6>
        }

        // 检查写入地址是否超过芯片大小
        if (prog->addr >= prog->total_size)
 8024b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b34:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024b38:	4290      	cmp	r0, r2
 8024b3a:	eb71 0303 	sbcs.w	r3, r1, r3
 8024b3e:	d30f      	bcc.n	8024b60 <np_cmd_nand_write_data+0x1c0>
        {
            ERROR_PRINT("写入地址0x%" PRIx64 "超过芯片大小0x%" PRIx64 "\r\n", prog->addr,
 8024b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b42:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8024b4c:	e9cd 2300 	strd	r2, r3, [sp]
 8024b50:	4602      	mov	r2, r0
 8024b52:	460b      	mov	r3, r1
 8024b54:	480c      	ldr	r0, [pc, #48]	; (8024b88 <np_cmd_nand_write_data+0x1e8>)
 8024b56:	f00c fdab 	bl	80316b0 <iprintf>
                prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8024b5a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8024b5e:	e0d3      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
        }

        // 执行NAND写入操作
        if (np_nand_write(prog))
 8024b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8024b62:	f7ff fecf 	bl	8024904 <np_nand_write>
 8024b66:	4603      	mov	r3, r0
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	d00f      	beq.n	8024b8c <np_cmd_nand_write_data+0x1ec>
            return NP_ERR_NAND_WR;
 8024b6c:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024b70:	e0ca      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
 8024b72:	bf00      	nop
 8024b74:	08032c18 	.word	0x08032c18
 8024b78:	08032c54 	.word	0x08032c54
 8024b7c:	08032c78 	.word	0x08032c78
 8024b80:	08032cb0 	.word	0x08032cb0
 8024b84:	08032a30 	.word	0x08032a30
 8024b88:	08032cd0 	.word	0x08032cd0

        // 更新地址和页偏移
        prog->addr += prog->page_size;
 8024b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8024b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024b94:	6a1b      	ldr	r3, [r3, #32]
 8024b96:	2200      	movs	r2, #0
 8024b98:	61bb      	str	r3, [r7, #24]
 8024b9a:	61fa      	str	r2, [r7, #28]
 8024b9c:	69bb      	ldr	r3, [r7, #24]
 8024b9e:	18c3      	adds	r3, r0, r3
 8024ba0:	60bb      	str	r3, [r7, #8]
 8024ba2:	69fb      	ldr	r3, [r7, #28]
 8024ba4:	eb41 0303 	adc.w	r3, r1, r3
 8024ba8:	60fb      	str	r3, [r7, #12]
 8024baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8024bb0:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8024bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024bba:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8024bbe:	3301      	adds	r3, #1
 8024bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024bc2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024bc6:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8024bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024bd0:	461a      	mov	r2, r3
 8024bd2:	2300      	movs	r3, #0
 8024bd4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 处理剩余的数据
    bytes_left = len - write_len;
 8024bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bdc:	1ad3      	subs	r3, r2, r3
 8024bde:	633b      	str	r3, [r7, #48]	; 0x30
    if (bytes_left)
 8024be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024be2:	2b00      	cmp	r3, #0
 8024be4:	d016      	beq.n	8024c14 <np_cmd_nand_write_data+0x274>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8024be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024be8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8024bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024bee:	1c9a      	adds	r2, r3, #2
 8024bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024bf2:	4413      	add	r3, r2
 8024bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024bf6:	4619      	mov	r1, r3
 8024bf8:	f00c ff1b 	bl	8031a32 <memcpy>
        prog->page.offset += bytes_left;
 8024bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bfe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024c02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8024c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c08:	4413      	add	r3, r2
 8024c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024c0c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024c10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    // 更新已写入和已确认的字节数
    prog->bytes_written += len;
 8024c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c16:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c1a:	3310      	adds	r3, #16
 8024c1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024c22:	2000      	movs	r0, #0
 8024c24:	468a      	mov	sl, r1
 8024c26:	4683      	mov	fp, r0
 8024c28:	eb12 010a 	adds.w	r1, r2, sl
 8024c2c:	6039      	str	r1, [r7, #0]
 8024c2e:	eb43 030b 	adc.w	r3, r3, fp
 8024c32:	607b      	str	r3, [r7, #4]
 8024c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c36:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c3a:	3310      	adds	r3, #16
 8024c3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8024c40:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c46:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c4a:	3310      	adds	r3, #16
 8024c4c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c52:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c56:	3310      	adds	r3, #16
 8024c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c5c:	1a84      	subs	r4, r0, r2
 8024c5e:	eb61 0503 	sbc.w	r5, r1, r3
 8024c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c64:	6a1b      	ldr	r3, [r3, #32]
 8024c66:	2200      	movs	r2, #0
 8024c68:	4698      	mov	r8, r3
 8024c6a:	4691      	mov	r9, r2
 8024c6c:	4544      	cmp	r4, r8
 8024c6e:	eb75 0309 	sbcs.w	r3, r5, r9
 8024c72:	d20c      	bcs.n	8024c8e <np_cmd_nand_write_data+0x2ee>
        prog->bytes_written == prog->len)
 8024c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c76:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c7a:	3310      	adds	r3, #16
 8024c7c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8024c86:	4299      	cmp	r1, r3
 8024c88:	bf08      	it	eq
 8024c8a:	4290      	cmpeq	r0, r2
 8024c8c:	d11b      	bne.n	8024cc6 <np_cmd_nand_write_data+0x326>
    {
        // 发送写入确认响应
        if (np_send_write_ack(prog->bytes_written))
 8024c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c90:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024c94:	3310      	adds	r3, #16
 8024c96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024c9a:	4610      	mov	r0, r2
 8024c9c:	4619      	mov	r1, r3
 8024c9e:	f7ff fbed 	bl	802447c <np_send_write_ack>
 8024ca2:	4603      	mov	r3, r0
 8024ca4:	2b00      	cmp	r3, #0
 8024ca6:	d002      	beq.n	8024cae <np_cmd_nand_write_data+0x30e>
            return -1;
 8024ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8024cac:	e02c      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
        prog->bytes_ack = prog->bytes_written;
 8024cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cb0:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024cb4:	3310      	adds	r3, #16
 8024cb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cbc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024cc0:	3310      	adds	r3, #16
 8024cc2:	e9c3 0100 	strd	r0, r1, [r3]
    }

    // 检查实际写入的数据长度是否超过指定的长度
    if (prog->bytes_written > prog->len)
 8024cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cc8:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ccc:	3310      	adds	r3, #16
 8024cce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8024cd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024cd4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8024cd8:	4290      	cmp	r0, r2
 8024cda:	eb71 0303 	sbcs.w	r3, r1, r3
 8024cde:	d212      	bcs.n	8024d06 <np_cmd_nand_write_data+0x366>
    {
        ERROR_PRINT("实际写入数据长度0x%" PRIx64 "超过0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
 8024ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ce2:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024ce6:	3310      	adds	r3, #16
 8024ce8:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8024cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024cee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8024cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8024cf6:	4602      	mov	r2, r0
 8024cf8:	460b      	mov	r3, r1
 8024cfa:	4806      	ldr	r0, [pc, #24]	; (8024d14 <np_cmd_nand_write_data+0x374>)
 8024cfc:	f00c fcd8 	bl	80316b0 <iprintf>
        return NP_ERR_LEN_EXCEEDED;
 8024d00:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8024d04:	e000      	b.n	8024d08 <np_cmd_nand_write_data+0x368>
    }

    return 0;
 8024d06:	2300      	movs	r3, #0
}
 8024d08:	4618      	mov	r0, r3
 8024d0a:	3740      	adds	r7, #64	; 0x40
 8024d0c:	46bd      	mov	sp, r7
 8024d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024d12:	bf00      	nop
 8024d14:	08032d04 	.word	0x08032d04

08024d18 <np_cmd_nand_write_end>:

// 结束NAND写入命令的函数
static int np_cmd_nand_write_end(np_prog_t *prog)
{
 8024d18:	b580      	push	{r7, lr}
 8024d1a:	b082      	sub	sp, #8
 8024d1c:	af00      	add	r7, sp, #0
 8024d1e:	6078      	str	r0, [r7, #4]
    // 清除地址已设置的标志位
    prog->addr_is_set = 0;
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	2200      	movs	r2, #0
 8024d24:	631a      	str	r2, [r3, #48]	; 0x30

    // 检查是否有未写入的数据
    if (prog->page.offset)
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024d2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	d00b      	beq.n	8024d4c <np_cmd_nand_write_end+0x34>
    {
        ERROR_PRINT("未写入长度为0x%lx的数据\r\n",
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024d3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8024d3e:	4619      	mov	r1, r3
 8024d40:	4806      	ldr	r0, [pc, #24]	; (8024d5c <np_cmd_nand_write_end+0x44>)
 8024d42:	f00c fcb5 	bl	80316b0 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8024d46:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8024d4a:	e002      	b.n	8024d52 <np_cmd_nand_write_end+0x3a>
    }

    // 发送操作完成的响应
    return np_send_ok_status();
 8024d4c:	f7fe ff1e 	bl	8023b8c <np_send_ok_status>
 8024d50:	4603      	mov	r3, r0
}
 8024d52:	4618      	mov	r0, r3
 8024d54:	3708      	adds	r7, #8
 8024d56:	46bd      	mov	sp, r7
 8024d58:	bd80      	pop	{r7, pc}
 8024d5a:	bf00      	nop
 8024d5c:	08032d38 	.word	0x08032d38

08024d60 <np_cmd_nand_write>:

// 执行NAND写入命令的函数
static int np_cmd_nand_write(np_prog_t *prog)
{
 8024d60:	b580      	push	{r7, lr}
 8024d62:	b084      	sub	sp, #16
 8024d64:	af00      	add	r7, sp, #0
 8024d66:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8024d6e:	2300      	movs	r3, #0
 8024d70:	60fb      	str	r3, [r7, #12]

    // 根据命令类型执行相应的操作
    switch (cmd->code)
 8024d72:	68bb      	ldr	r3, [r7, #8]
 8024d74:	781b      	ldrb	r3, [r3, #0]
 8024d76:	2b05      	cmp	r3, #5
 8024d78:	d013      	beq.n	8024da2 <np_cmd_nand_write+0x42>
 8024d7a:	2b05      	cmp	r3, #5
 8024d7c:	dc19      	bgt.n	8024db2 <np_cmd_nand_write+0x52>
 8024d7e:	2b03      	cmp	r3, #3
 8024d80:	d002      	beq.n	8024d88 <np_cmd_nand_write+0x28>
 8024d82:	2b04      	cmp	r3, #4
 8024d84:	d008      	beq.n	8024d98 <np_cmd_nand_write+0x38>
    case NP_CMD_NAND_WRITE_E:
        ret = np_cmd_nand_write_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8024d86:	e014      	b.n	8024db2 <np_cmd_nand_write+0x52>
        led_wr_set(true);
 8024d88:	2001      	movs	r0, #1
 8024d8a:	f7fe fd5b 	bl	8023844 <led_wr_set>
        ret = np_cmd_nand_write_start(prog);
 8024d8e:	6878      	ldr	r0, [r7, #4]
 8024d90:	f7ff fb9c 	bl	80244cc <np_cmd_nand_write_start>
 8024d94:	60f8      	str	r0, [r7, #12]
        break;
 8024d96:	e00d      	b.n	8024db4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_data(prog);
 8024d98:	6878      	ldr	r0, [r7, #4]
 8024d9a:	f7ff fe01 	bl	80249a0 <np_cmd_nand_write_data>
 8024d9e:	60f8      	str	r0, [r7, #12]
        break;
 8024da0:	e008      	b.n	8024db4 <np_cmd_nand_write+0x54>
        ret = np_cmd_nand_write_end(prog);
 8024da2:	6878      	ldr	r0, [r7, #4]
 8024da4:	f7ff ffb8 	bl	8024d18 <np_cmd_nand_write_end>
 8024da8:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8024daa:	2000      	movs	r0, #0
 8024dac:	f7fe fd4a 	bl	8023844 <led_wr_set>
        break;
 8024db0:	e000      	b.n	8024db4 <np_cmd_nand_write+0x54>
        break;
 8024db2:	bf00      	nop
    }

    // 如果操作失败，关闭写入指示灯
    if (ret < 0)
 8024db4:	68fb      	ldr	r3, [r7, #12]
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	da02      	bge.n	8024dc0 <np_cmd_nand_write+0x60>
        led_wr_set(false);
 8024dba:	2000      	movs	r0, #0
 8024dbc:	f7fe fd42 	bl	8023844 <led_wr_set>

    return ret;
 8024dc0:	68fb      	ldr	r3, [r7, #12]
}
 8024dc2:	4618      	mov	r0, r3
 8024dc4:	3710      	adds	r7, #16
 8024dc6:	46bd      	mov	sp, r7
 8024dc8:	bd80      	pop	{r7, pc}
	...

08024dcc <np_nand_read>:

// 执行NAND读取操作的函数
static int np_nand_read(uint64_t addr, np_page_t *page, uint32_t page_size,
    uint32_t block_size, np_prog_t *prog)
{
 8024dcc:	b580      	push	{r7, lr}
 8024dce:	b086      	sub	sp, #24
 8024dd0:	af00      	add	r7, sp, #0
 8024dd2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8024dd6:	607a      	str	r2, [r7, #4]
 8024dd8:	603b      	str	r3, [r7, #0]
    uint32_t status;

    // 调用硬件抽象层函数执行页面读取操作
    status = hal[prog->hal]->read_page(page->buf, page->page, page_size);
 8024dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ddc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024de0:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 8024de4:	461a      	mov	r2, r3
 8024de6:	4b1c      	ldr	r3, [pc, #112]	; (8024e58 <np_nand_read+0x8c>)
 8024de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024dec:	691b      	ldr	r3, [r3, #16]
 8024dee:	6878      	ldr	r0, [r7, #4]
 8024df0:	687a      	ldr	r2, [r7, #4]
 8024df2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8024df6:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
 8024dfa:	683a      	ldr	r2, [r7, #0]
 8024dfc:	4798      	blx	r3
 8024dfe:	6178      	str	r0, [r7, #20]
    switch (status)
 8024e00:	697b      	ldr	r3, [r7, #20]
 8024e02:	2b03      	cmp	r3, #3
 8024e04:	d014      	beq.n	8024e30 <np_nand_read+0x64>
 8024e06:	697b      	ldr	r3, [r7, #20]
 8024e08:	2b03      	cmp	r3, #3
 8024e0a:	d817      	bhi.n	8024e3c <np_nand_read+0x70>
 8024e0c:	697b      	ldr	r3, [r7, #20]
 8024e0e:	2b00      	cmp	r3, #0
 8024e10:	d01a      	beq.n	8024e48 <np_nand_read+0x7c>
 8024e12:	697b      	ldr	r3, [r7, #20]
 8024e14:	2b02      	cmp	r3, #2
 8024e16:	d111      	bne.n	8024e3c <np_nand_read+0x70>
    {
    case FLASH_STATUS_READY:
        break;
    case FLASH_STATUS_ERROR:
        // 如果读取状态为错误，发送坏块信息
        if (np_send_bad_block_info(addr, block_size, false))
 8024e18:	2300      	movs	r3, #0
 8024e1a:	6a3a      	ldr	r2, [r7, #32]
 8024e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024e20:	f7fe fef4 	bl	8023c0c <np_send_bad_block_info>
 8024e24:	4603      	mov	r3, r0
 8024e26:	2b00      	cmp	r3, #0
 8024e28:	d010      	beq.n	8024e4c <np_nand_read+0x80>
            return -1;
 8024e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8024e2e:	e00f      	b.n	8024e50 <np_nand_read+0x84>
        break;
    case FLASH_STATUS_TIMEOUT:
        ERROR_PRINT("NAND读取超时，地址：0x%" PRIx64 "\r\n", addr);
 8024e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024e34:	4809      	ldr	r0, [pc, #36]	; (8024e5c <np_nand_read+0x90>)
 8024e36:	f00c fc3b 	bl	80316b0 <iprintf>
        break;
 8024e3a:	e008      	b.n	8024e4e <np_nand_read+0x82>
    default:
        ERROR_PRINT("未知的NAND状态\r\n");
 8024e3c:	4808      	ldr	r0, [pc, #32]	; (8024e60 <np_nand_read+0x94>)
 8024e3e:	f00c fc9d 	bl	803177c <puts>
        return -1;
 8024e42:	f04f 33ff 	mov.w	r3, #4294967295
 8024e46:	e003      	b.n	8024e50 <np_nand_read+0x84>
        break;
 8024e48:	bf00      	nop
 8024e4a:	e000      	b.n	8024e4e <np_nand_read+0x82>
        break;
 8024e4c:	bf00      	nop
    }

    return 0;
 8024e4e:	2300      	movs	r3, #0
}
 8024e50:	4618      	mov	r0, r3
 8024e52:	3718      	adds	r7, #24
 8024e54:	46bd      	mov	sp, r7
 8024e56:	bd80      	pop	{r7, pc}
 8024e58:	20000040 	.word	0x20000040
 8024e5c:	08032d64 	.word	0x08032d64
 8024e60:	080328b8 	.word	0x080328b8

08024e64 <_np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int _np_cmd_nand_read(np_prog_t *prog)
{
 8024e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8024e68:	b0b4      	sub	sp, #208	; 0xd0
 8024e6a:	af04      	add	r7, sp, #16
 8024e6c:	6778      	str	r0, [r7, #116]	; 0x74
    np_read_cmd_t *read_cmd;
    bool skip_bb, inc_spare;
    uint64_t addr, len, total_size;
    uint32_t send_len, block_size, page_size, pages,
        pages_in_block;
    uint32_t resp_header_size = offsetof(np_resp_t, data);
 8024e6e:	2302      	movs	r3, #2
 8024e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    uint32_t tx_data_len = sizeof(np_packet_send_buf) - resp_header_size;
 8024e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8024e78:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8024e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    np_resp_t *resp = (np_resp_t *)np_packet_send_buf;
 8024e80:	4bb9      	ldr	r3, [pc, #740]	; (8025168 <_np_cmd_nand_read+0x304>)
 8024e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_read_cmd_t))
 8024e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e88:	685b      	ldr	r3, [r3, #4]
 8024e8a:	2b11      	cmp	r3, #17
 8024e8c:	d808      	bhi.n	8024ea0 <_np_cmd_nand_read+0x3c>
    {
        ERROR_PRINT("读取命令缓冲区长度错误 %lu\r\n",
 8024e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024e90:	685b      	ldr	r3, [r3, #4]
 8024e92:	4619      	mov	r1, r3
 8024e94:	48b5      	ldr	r0, [pc, #724]	; (802516c <_np_cmd_nand_read+0x308>)
 8024e96:	f00c fc0b 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8024e9a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8024e9e:	e283      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    read_cmd = (np_read_cmd_t *)prog->rx_buf;
 8024ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024ea2:	681b      	ldr	r3, [r3, #0]
 8024ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    addr = read_cmd->addr;
 8024ea8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024eac:	f8d1 2001 	ldr.w	r2, [r1, #1]
 8024eb0:	f8d1 3005 	ldr.w	r3, [r1, #5]
 8024eb4:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
    len = read_cmd->len;
 8024eb8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8024ebc:	f8d1 2009 	ldr.w	r2, [r1, #9]
 8024ec0:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8024ec4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    skip_bb = read_cmd->flags.skip_bb;
 8024ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024ecc:	7c5b      	ldrb	r3, [r3, #17]
 8024ece:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8024ed2:	b2db      	uxtb	r3, r3
 8024ed4:	2b00      	cmp	r3, #0
 8024ed6:	bf14      	ite	ne
 8024ed8:	2301      	movne	r3, #1
 8024eda:	2300      	moveq	r3, #0
 8024edc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    inc_spare = read_cmd->flags.inc_spare;
 8024ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8024ee4:	7c5b      	ldrb	r3, [r3, #17]
 8024ee6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8024eea:	b2db      	uxtb	r3, r3
 8024eec:	2b00      	cmp	r3, #0
 8024eee:	bf14      	ite	ne
 8024ef0:	2301      	movne	r3, #1
 8024ef2:	2300      	moveq	r3, #0
 8024ef4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a

    DEBUG_PRINT("读取地址 0x%" PRIx64 " 长度为 0x%" PRIx64 " 的数据命令\r\n", addr,
 8024ef8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024efc:	e9cd 2300 	strd	r2, r3, [sp]
 8024f00:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8024f04:	489a      	ldr	r0, [pc, #616]	; (8025170 <_np_cmd_nand_read+0x30c>)
 8024f06:	f00c fbd3 	bl	80316b0 <iprintf>
        len);

    if (inc_spare)
 8024f0a:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	d056      	beq.n	8024fc0 <_np_cmd_nand_read+0x15c>
    {
        pages = prog->chip_info.total_size / prog->chip_info.page_size;
 8024f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f14:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024f18:	3330      	adds	r3, #48	; 0x30
 8024f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f24:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024f28:	2200      	movs	r2, #0
 8024f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8024f2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8024f2e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8024f32:	f7fd f99d 	bl	8022270 <__aeabi_uldivmod>
 8024f36:	4602      	mov	r2, r0
 8024f38:	460b      	mov	r3, r1
 8024f3a:	4613      	mov	r3, r2
 8024f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        pages_in_block = prog->chip_info.block_size /
 8024f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f46:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
            prog->chip_info.page_size;
 8024f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f50:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
        pages_in_block = prog->chip_info.block_size /
 8024f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8024f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        page_size = prog->chip_info.page_size + prog->chip_info.spare_size;
 8024f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f62:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8024f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024f68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024f6c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8024f70:	4413      	add	r3, r2
 8024f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = pages_in_block * page_size;
 8024f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8024f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f7e:	fb02 f303 	mul.w	r3, r2, r3
 8024f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = (uint64_t)pages * page_size;
 8024f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8024f8a:	2200      	movs	r2, #0
 8024f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8024f8e:	667a      	str	r2, [r7, #100]	; 0x64
 8024f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8024f94:	2200      	movs	r2, #0
 8024f96:	4698      	mov	r8, r3
 8024f98:	4691      	mov	r9, r2
 8024f9a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8024f9e:	460b      	mov	r3, r1
 8024fa0:	fb08 f203 	mul.w	r2, r8, r3
 8024fa4:	4603      	mov	r3, r0
 8024fa6:	fb03 f309 	mul.w	r3, r3, r9
 8024faa:	4413      	add	r3, r2
 8024fac:	4602      	mov	r2, r0
 8024fae:	fba2 4508 	umull	r4, r5, r2, r8
 8024fb2:	442b      	add	r3, r5
 8024fb4:	461d      	mov	r5, r3
 8024fb6:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024fba:	e9c7 452a 	strd	r4, r5, [r7, #168]	; 0xa8
 8024fbe:	e015      	b.n	8024fec <_np_cmd_nand_read+0x188>
    }
    else
    {
        page_size = prog->chip_info.page_size;
 8024fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024fc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024fc6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8024fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        block_size = prog->chip_info.block_size;
 8024fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024fd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8024fd4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8024fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        total_size = prog->chip_info.total_size;
 8024fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8024fde:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8024fe2:	3330      	adds	r3, #48	; 0x30
 8024fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fe8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    }

    if (addr + len > total_size)
 8024fec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8024ff0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8024ff4:	eb10 0a02 	adds.w	sl, r0, r2
 8024ff8:	eb41 0b03 	adc.w	fp, r1, r3
 8024ffc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025000:	4552      	cmp	r2, sl
 8025002:	eb73 030b 	sbcs.w	r3, r3, fp
 8025006:	d20f      	bcs.n	8025028 <_np_cmd_nand_read+0x1c4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64 "+0x%" PRIx64
 8025008:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 802500c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025010:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025014:	e9cd 2300 	strd	r2, r3, [sp]
 8025018:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802501c:	4855      	ldr	r0, [pc, #340]	; (8025174 <_np_cmd_nand_read+0x310>)
 802501e:	f00c fb47 	bl	80316b0 <iprintf>
            " 超出芯片大小 0x%" PRIx64 "\r\n", addr, len, total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8025022:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025026:	e1bf      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    if (addr % page_size)
 8025028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802502c:	2200      	movs	r2, #0
 802502e:	65bb      	str	r3, [r7, #88]	; 0x58
 8025030:	65fa      	str	r2, [r7, #92]	; 0x5c
 8025032:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802503a:	f7fd f919 	bl	8022270 <__aeabi_uldivmod>
 802503e:	4313      	orrs	r3, r2
 8025040:	d00a      	beq.n	8025058 <_np_cmd_nand_read+0x1f4>
    {
        ERROR_PRINT("读取地址 0x%" PRIx64
 8025042:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025046:	9300      	str	r3, [sp, #0]
 8025048:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 802504c:	484a      	ldr	r0, [pc, #296]	; (8025178 <_np_cmd_nand_read+0x314>)
 802504e:	f00c fb2f 	bl	80316b0 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", addr, page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8025052:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8025056:	e1a7      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    if (!len)
 8025058:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802505c:	4313      	orrs	r3, r2
 802505e:	d105      	bne.n	802506c <_np_cmd_nand_read+0x208>
    {
        ERROR_PRINT("长度为0\r\n");
 8025060:	4846      	ldr	r0, [pc, #280]	; (802517c <_np_cmd_nand_read+0x318>)
 8025062:	f00c fb8b 	bl	803177c <puts>
        return NP_ERR_LEN_INVALID;
 8025066:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802506a:	e19d      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    if (len % page_size)
 802506c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025070:	2200      	movs	r2, #0
 8025072:	653b      	str	r3, [r7, #80]	; 0x50
 8025074:	657a      	str	r2, [r7, #84]	; 0x54
 8025076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802507a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802507e:	f7fd f8f7 	bl	8022270 <__aeabi_uldivmod>
 8025082:	4313      	orrs	r3, r2
 8025084:	d00a      	beq.n	802509c <_np_cmd_nand_read+0x238>
    {
        ERROR_PRINT("读取长度 0x%" PRIx64
 8025086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802508a:	9300      	str	r3, [sp, #0]
 802508c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025090:	483b      	ldr	r0, [pc, #236]	; (8025180 <_np_cmd_nand_read+0x31c>)
 8025092:	f00c fb0d 	bl	80316b0 <iprintf>
            " 不对齐于页面大小 0x%lx\r\n", len, page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 8025096:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 802509a:	e185      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    if (skip_bb && !prog->bb_is_read && (ret = _np_cmd_read_bad_blocks(prog,
 802509c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80250a0:	2b00      	cmp	r3, #0
 80250a2:	d00d      	beq.n	80250c0 <_np_cmd_nand_read+0x25c>
 80250a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80250a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80250a8:	2b00      	cmp	r3, #0
 80250aa:	d109      	bne.n	80250c0 <_np_cmd_nand_read+0x25c>
 80250ac:	2100      	movs	r1, #0
 80250ae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80250b0:	f7fe ff08 	bl	8023ec4 <_np_cmd_read_bad_blocks>
 80250b4:	67f8      	str	r0, [r7, #124]	; 0x7c
 80250b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80250b8:	2b00      	cmp	r3, #0
 80250ba:	d001      	beq.n	80250c0 <_np_cmd_nand_read+0x25c>
        false)))
    {
        return ret;
 80250bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80250be:	e173      	b.n	80253a8 <_np_cmd_nand_read+0x544>
    }

    page.page = addr / page_size;
 80250c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80250c4:	2200      	movs	r2, #0
 80250c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80250c8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80250ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80250ce:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80250d2:	f7fd f8cd 	bl	8022270 <__aeabi_uldivmod>
 80250d6:	4602      	mov	r2, r0
 80250d8:	460b      	mov	r3, r1
 80250da:	4b2a      	ldr	r3, [pc, #168]	; (8025184 <_np_cmd_nand_read+0x320>)
 80250dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250e0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    page.offset = 0;
 80250e4:	4b27      	ldr	r3, [pc, #156]	; (8025184 <_np_cmd_nand_read+0x320>)
 80250e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80250ea:	461a      	mov	r2, r3
 80250ec:	2300      	movs	r3, #0
 80250ee:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4

    resp->code = NP_RESP_DATA;
 80250f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80250f6:	2300      	movs	r3, #0
 80250f8:	7013      	strb	r3, [r2, #0]

    while (len)
 80250fa:	e14f      	b.n	802539c <_np_cmd_nand_read+0x538>
    {
        if (addr >= total_size)
 80250fc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025100:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025104:	4290      	cmp	r0, r2
 8025106:	eb71 0303 	sbcs.w	r3, r1, r3
 802510a:	d30b      	bcc.n	8025124 <_np_cmd_nand_read+0x2c0>
        {
            ERROR_PRINT("读取地址 0x%" PRIx64
 802510c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8025110:	e9cd 2300 	strd	r2, r3, [sp]
 8025114:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025118:	481b      	ldr	r0, [pc, #108]	; (8025188 <_np_cmd_nand_read+0x324>)
 802511a:	f00c fac9 	bl	80316b0 <iprintf>
                " 超出芯片大小 0x%" PRIx64 "\r\n", addr, total_size);
            return NP_ERR_ADDR_EXCEEDED;
 802511e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025122:	e141      	b.n	80253a8 <_np_cmd_nand_read+0x544>
        }

        if (skip_bb && nand_bad_block_table_lookup(page.page))
 8025124:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8025128:	2b00      	cmp	r3, #0
 802512a:	d076      	beq.n	802521a <_np_cmd_nand_read+0x3b6>
 802512c:	4b15      	ldr	r3, [pc, #84]	; (8025184 <_np_cmd_nand_read+0x320>)
 802512e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025132:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025136:	4618      	mov	r0, r3
 8025138:	f7fe fcc0 	bl	8023abc <nand_bad_block_table_lookup>
 802513c:	4603      	mov	r3, r0
 802513e:	2b00      	cmp	r3, #0
 8025140:	d06b      	beq.n	802521a <_np_cmd_nand_read+0x3b6>
        {
            DEBUG_PRINT("跳过坏块地址 0x%" PRIx64 "\r\n", addr);
 8025142:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025146:	4811      	ldr	r0, [pc, #68]	; (802518c <_np_cmd_nand_read+0x328>)
 8025148:	f00c fab2 	bl	80316b0 <iprintf>
            if (np_send_bad_block_info(addr, block_size, true))
 802514c:	2301      	movs	r3, #1
 802514e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025152:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8025156:	f7fe fd59 	bl	8023c0c <np_send_bad_block_info>
 802515a:	4603      	mov	r3, r0
 802515c:	2b00      	cmp	r3, #0
 802515e:	d017      	beq.n	8025190 <_np_cmd_nand_read+0x32c>
                return -1;
 8025160:	f04f 33ff 	mov.w	r3, #4294967295
 8025164:	e120      	b.n	80253a8 <_np_cmd_nand_read+0x544>
 8025166:	bf00      	nop
 8025168:	20002f08 	.word	0x20002f08
 802516c:	08032d90 	.word	0x08032d90
 8025170:	08032dc0 	.word	0x08032dc0
 8025174:	08032df8 	.word	0x08032df8
 8025178:	08032e38 	.word	0x08032e38
 802517c:	08032e74 	.word	0x08032e74
 8025180:	08032e88 	.word	0x08032e88
 8025184:	20002f48 	.word	0x20002f48
 8025188:	08032ec4 	.word	0x08032ec4
 802518c:	08032efc 	.word	0x08032efc

            /* 在部分读取时不计算坏块 */
            if (read_cmd->len == total_size)
 8025190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025194:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8025198:	f8d3 100d 	ldr.w	r1, [r3, #13]
 802519c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80251a0:	428b      	cmp	r3, r1
 80251a2:	bf08      	it	eq
 80251a4:	4282      	cmpeq	r2, r0
 80251a6:	d113      	bne.n	80251d0 <_np_cmd_nand_read+0x36c>
                len -= block_size;
 80251a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80251ac:	2200      	movs	r2, #0
 80251ae:	643b      	str	r3, [r7, #64]	; 0x40
 80251b0:	647a      	str	r2, [r7, #68]	; 0x44
 80251b2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80251b6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80251ba:	4621      	mov	r1, r4
 80251bc:	1a51      	subs	r1, r2, r1
 80251be:	61b9      	str	r1, [r7, #24]
 80251c0:	4629      	mov	r1, r5
 80251c2:	eb63 0301 	sbc.w	r3, r3, r1
 80251c6:	61fb      	str	r3, [r7, #28]
 80251c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80251cc:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
            addr += block_size;
 80251d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80251d4:	2200      	movs	r2, #0
 80251d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80251d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80251da:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80251de:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80251e2:	4621      	mov	r1, r4
 80251e4:	1851      	adds	r1, r2, r1
 80251e6:	6139      	str	r1, [r7, #16]
 80251e8:	4629      	mov	r1, r5
 80251ea:	414b      	adcs	r3, r1
 80251ec:	617b      	str	r3, [r7, #20]
 80251ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80251f2:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
            page.page += block_size / page_size;
 80251f6:	4b6f      	ldr	r3, [pc, #444]	; (80253b4 <_np_cmd_nand_read+0x550>)
 80251f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80251fc:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8025200:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8025204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025208:	fbb2 f3f3 	udiv	r3, r2, r3
 802520c:	18ca      	adds	r2, r1, r3
 802520e:	4b69      	ldr	r3, [pc, #420]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025210:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025214:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            continue;
 8025218:	e0c0      	b.n	802539c <_np_cmd_nand_read+0x538>
        }

        if (np_nand_read(addr, &page, page_size, block_size, prog))
 802521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802521c:	9301      	str	r3, [sp, #4]
 802521e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8025222:	9300      	str	r3, [sp, #0]
 8025224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025228:	4a62      	ldr	r2, [pc, #392]	; (80253b4 <_np_cmd_nand_read+0x550>)
 802522a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 802522e:	f7ff fdcd 	bl	8024dcc <np_nand_read>
 8025232:	4603      	mov	r3, r0
 8025234:	2b00      	cmp	r3, #0
 8025236:	d07e      	beq.n	8025336 <_np_cmd_nand_read+0x4d2>
            return NP_ERR_NAND_RD;
 8025238:	f06f 0367 	mvn.w	r3, #103	; 0x67
 802523c:	e0b4      	b.n	80253a8 <_np_cmd_nand_read+0x544>

        while (page.offset < page_size && len)
        {
            if (page_size - page.offset >= tx_data_len)
 802523e:	4b5d      	ldr	r3, [pc, #372]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025240:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025244:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802524c:	1a9a      	subs	r2, r3, r2
 802524e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8025252:	4293      	cmp	r3, r2
 8025254:	d804      	bhi.n	8025260 <_np_cmd_nand_read+0x3fc>
                send_len = tx_data_len;
 8025256:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 802525a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802525e:	e009      	b.n	8025274 <_np_cmd_nand_read+0x410>
            else
                send_len = page_size - page.offset;
 8025260:	4b54      	ldr	r3, [pc, #336]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025262:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025266:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 802526a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802526e:	1a9b      	subs	r3, r3, r2
 8025270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            if (send_len > len)
 8025274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025278:	2200      	movs	r2, #0
 802527a:	633b      	str	r3, [r7, #48]	; 0x30
 802527c:	637a      	str	r2, [r7, #52]	; 0x34
 802527e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8025282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8025286:	4621      	mov	r1, r4
 8025288:	428a      	cmp	r2, r1
 802528a:	4629      	mov	r1, r5
 802528c:	418b      	sbcs	r3, r1
 802528e:	d203      	bcs.n	8025298 <_np_cmd_nand_read+0x434>
                send_len = len;
 8025290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8025294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            memcpy(resp->data, page.buf + page.offset, send_len);
 8025298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 802529c:	1c98      	adds	r0, r3, #2
 802529e:	4b45      	ldr	r3, [pc, #276]	; (80253b4 <_np_cmd_nand_read+0x550>)
 80252a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252a4:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80252a8:	4b42      	ldr	r3, [pc, #264]	; (80253b4 <_np_cmd_nand_read+0x550>)
 80252aa:	4413      	add	r3, r2
 80252ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80252b0:	4619      	mov	r1, r3
 80252b2:	f00c fbbe 	bl	8031a32 <memcpy>

            while (!np_comm_cb->send_ready());
 80252b6:	bf00      	nop
 80252b8:	4b3f      	ldr	r3, [pc, #252]	; (80253b8 <_np_cmd_nand_read+0x554>)
 80252ba:	681b      	ldr	r3, [r3, #0]
 80252bc:	685b      	ldr	r3, [r3, #4]
 80252be:	4798      	blx	r3
 80252c0:	4603      	mov	r3, r0
 80252c2:	2b00      	cmp	r3, #0
 80252c4:	d0f8      	beq.n	80252b8 <_np_cmd_nand_read+0x454>

            resp->info = send_len;
 80252c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80252ca:	b2db      	uxtb	r3, r3
 80252cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80252d0:	7053      	strb	r3, [r2, #1]
            if (np_comm_cb->send(np_packet_send_buf,
 80252d2:	4b39      	ldr	r3, [pc, #228]	; (80253b8 <_np_cmd_nand_read+0x554>)
 80252d4:	681b      	ldr	r3, [r3, #0]
 80252d6:	681c      	ldr	r4, [r3, #0]
 80252d8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80252dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80252e0:	4413      	add	r3, r2
 80252e2:	4619      	mov	r1, r3
 80252e4:	4835      	ldr	r0, [pc, #212]	; (80253bc <_np_cmd_nand_read+0x558>)
 80252e6:	47a0      	blx	r4
 80252e8:	4603      	mov	r3, r0
 80252ea:	2b00      	cmp	r3, #0
 80252ec:	d002      	beq.n	80252f4 <_np_cmd_nand_read+0x490>
                resp_header_size + send_len))
            {
                return -1;
 80252ee:	f04f 33ff 	mov.w	r3, #4294967295
 80252f2:	e059      	b.n	80253a8 <_np_cmd_nand_read+0x544>
            }

            page.offset += send_len;
 80252f4:	4b2f      	ldr	r3, [pc, #188]	; (80253b4 <_np_cmd_nand_read+0x550>)
 80252f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80252fa:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80252fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025302:	441a      	add	r2, r3
 8025304:	4b2b      	ldr	r3, [pc, #172]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025306:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802530a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
            len -= send_len;
 802530e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8025312:	2200      	movs	r2, #0
 8025314:	62bb      	str	r3, [r7, #40]	; 0x28
 8025316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025318:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802531c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025320:	4621      	mov	r1, r4
 8025322:	1a51      	subs	r1, r2, r1
 8025324:	60b9      	str	r1, [r7, #8]
 8025326:	4629      	mov	r1, r5
 8025328:	eb63 0301 	sbc.w	r3, r3, r1
 802532c:	60fb      	str	r3, [r7, #12]
 802532e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025332:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
        while (page.offset < page_size && len)
 8025336:	4b1f      	ldr	r3, [pc, #124]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025338:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802533c:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 8025340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025344:	4293      	cmp	r3, r2
 8025346:	d904      	bls.n	8025352 <_np_cmd_nand_read+0x4ee>
 8025348:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 802534c:	4313      	orrs	r3, r2
 802534e:	f47f af76 	bne.w	802523e <_np_cmd_nand_read+0x3da>
        }

        addr += page_size;
 8025352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8025356:	2200      	movs	r2, #0
 8025358:	623b      	str	r3, [r7, #32]
 802535a:	627a      	str	r2, [r7, #36]	; 0x24
 802535c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8025360:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8025364:	4621      	mov	r1, r4
 8025366:	1851      	adds	r1, r2, r1
 8025368:	6039      	str	r1, [r7, #0]
 802536a:	4629      	mov	r1, r5
 802536c:	414b      	adcs	r3, r1
 802536e:	607b      	str	r3, [r7, #4]
 8025370:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025374:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
        page.offset = 0;
 8025378:	4b0e      	ldr	r3, [pc, #56]	; (80253b4 <_np_cmd_nand_read+0x550>)
 802537a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802537e:	461a      	mov	r2, r3
 8025380:	2300      	movs	r3, #0
 8025382:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
        page.page++;
 8025386:	4b0b      	ldr	r3, [pc, #44]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802538c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8025390:	1c5a      	adds	r2, r3, #1
 8025392:	4b08      	ldr	r3, [pc, #32]	; (80253b4 <_np_cmd_nand_read+0x550>)
 8025394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025398:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    while (len)
 802539c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80253a0:	4313      	orrs	r3, r2
 80253a2:	f47f aeab 	bne.w	80250fc <_np_cmd_nand_read+0x298>
    }

    return 0;
 80253a6:	2300      	movs	r3, #0
}
 80253a8:	4618      	mov	r0, r3
 80253aa:	37c0      	adds	r7, #192	; 0xc0
 80253ac:	46bd      	mov	sp, r7
 80253ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80253b2:	bf00      	nop
 80253b4:	20002f48 	.word	0x20002f48
 80253b8:	20000cb8 	.word	0x20000cb8
 80253bc:	20002f08 	.word	0x20002f08

080253c0 <np_cmd_nand_read>:

// 执行NAND读取命令的函数
static int np_cmd_nand_read(np_prog_t *prog)
{
 80253c0:	b580      	push	{r7, lr}
 80253c2:	b084      	sub	sp, #16
 80253c4:	af00      	add	r7, sp, #0
 80253c6:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80253c8:	2001      	movs	r0, #1
 80253ca:	f7fe fa4d 	bl	8023868 <led_rd_set>
    ret = _np_cmd_nand_read(prog); // 执行NAND读取命令
 80253ce:	6878      	ldr	r0, [r7, #4]
 80253d0:	f7ff fd48 	bl	8024e64 <_np_cmd_nand_read>
 80253d4:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 80253d6:	2000      	movs	r0, #0
 80253d8:	f7fe fa46 	bl	8023868 <led_rd_set>

    return ret;
 80253dc:	68fb      	ldr	r3, [r7, #12]
}
 80253de:	4618      	mov	r0, r3
 80253e0:	3710      	adds	r7, #16
 80253e2:	46bd      	mov	sp, r7
 80253e4:	bd80      	pop	{r7, pc}

080253e6 <np_fill_chip_info>:

// 填充芯片信息
static void np_fill_chip_info(np_conf_cmd_t *conf_cmd, np_prog_t *prog)
{
 80253e6:	b480      	push	{r7}
 80253e8:	b083      	sub	sp, #12
 80253ea:	af00      	add	r7, sp, #0
 80253ec:	6078      	str	r0, [r7, #4]
 80253ee:	6039      	str	r1, [r7, #0]
    prog->chip_info.page_size = conf_cmd->page_size;
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80253f6:	683a      	ldr	r2, [r7, #0]
 80253f8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80253fc:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
    prog->chip_info.block_size = conf_cmd->block_size;
 8025400:	687b      	ldr	r3, [r7, #4]
 8025402:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8025406:	683a      	ldr	r2, [r7, #0]
 8025408:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 802540c:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
    prog->chip_info.total_size = conf_cmd->total_size;
 8025410:	6879      	ldr	r1, [r7, #4]
 8025412:	f8d1 200a 	ldr.w	r2, [r1, #10]
 8025416:	f8d1 300e 	ldr.w	r3, [r1, #14]
 802541a:	6839      	ldr	r1, [r7, #0]
 802541c:	f501 5108 	add.w	r1, r1, #8704	; 0x2200
 8025420:	3130      	adds	r1, #48	; 0x30
 8025422:	e9c1 2300 	strd	r2, r3, [r1]
    prog->chip_info.spare_size = conf_cmd->spare_size;
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	f8d3 3012 	ldr.w	r3, [r3, #18]
 802542c:	683a      	ldr	r2, [r7, #0]
 802542e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025432:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
    prog->chip_info.bb_mark_off = conf_cmd->bb_mark_off;
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	7d9a      	ldrb	r2, [r3, #22]
 802543a:	683b      	ldr	r3, [r7, #0]
 802543c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025440:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
    prog->chip_is_conf = 1;
 8025444:	683b      	ldr	r3, [r7, #0]
 8025446:	2201      	movs	r2, #1
 8025448:	639a      	str	r2, [r3, #56]	; 0x38
}
 802544a:	bf00      	nop
 802544c:	370c      	adds	r7, #12
 802544e:	46bd      	mov	sp, r7
 8025450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025454:	4770      	bx	lr
	...

08025458 <np_print_chip_info>:

// 打印芯片信息
static void np_print_chip_info(np_prog_t *prog)
{
 8025458:	b580      	push	{r7, lr}
 802545a:	b082      	sub	sp, #8
 802545c:	af00      	add	r7, sp, #0
 802545e:	6078      	str	r0, [r7, #4]
    DEBUG_PRINT("页面大小: %lu\r\n", prog->chip_info.page_size);
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025466:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 802546a:	4619      	mov	r1, r3
 802546c:	4815      	ldr	r0, [pc, #84]	; (80254c4 <np_print_chip_info+0x6c>)
 802546e:	f00c f91f 	bl	80316b0 <iprintf>
    DEBUG_PRINT("块大小: %lu\r\n", prog->chip_info.block_size);
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025478:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 802547c:	4619      	mov	r1, r3
 802547e:	4812      	ldr	r0, [pc, #72]	; (80254c8 <np_print_chip_info+0x70>)
 8025480:	f00c f916 	bl	80316b0 <iprintf>
    DEBUG_PRINT("总大小: 0x%" PRIx64 "\r\n", prog->chip_info.total_size);
 8025484:	687b      	ldr	r3, [r7, #4]
 8025486:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802548a:	3330      	adds	r3, #48	; 0x30
 802548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025490:	480e      	ldr	r0, [pc, #56]	; (80254cc <np_print_chip_info+0x74>)
 8025492:	f00c f90d 	bl	80316b0 <iprintf>
    DEBUG_PRINT("备用区大小: %lu\r\n", prog->chip_info.spare_size);
 8025496:	687b      	ldr	r3, [r7, #4]
 8025498:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802549c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 80254a0:	4619      	mov	r1, r3
 80254a2:	480b      	ldr	r0, [pc, #44]	; (80254d0 <np_print_chip_info+0x78>)
 80254a4:	f00c f904 	bl	80316b0 <iprintf>
    DEBUG_PRINT("坏块标记偏移量: %d\r\n", prog->chip_info.bb_mark_off);
 80254a8:	687b      	ldr	r3, [r7, #4]
 80254aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80254ae:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80254b2:	4619      	mov	r1, r3
 80254b4:	4807      	ldr	r0, [pc, #28]	; (80254d4 <np_print_chip_info+0x7c>)
 80254b6:	f00c f8fb 	bl	80316b0 <iprintf>
}
 80254ba:	bf00      	nop
 80254bc:	3708      	adds	r7, #8
 80254be:	46bd      	mov	sp, r7
 80254c0:	bd80      	pop	{r7, pc}
 80254c2:	bf00      	nop
 80254c4:	08032f18 	.word	0x08032f18
 80254c8:	08032f2c 	.word	0x08032f2c
 80254cc:	08032f40 	.word	0x08032f40
 80254d0:	08032f54 	.word	0x08032f54
 80254d4:	08032f6c 	.word	0x08032f6c

080254d8 <np_cmd_nand_conf>:

// 执行NAND配置命令
static int np_cmd_nand_conf(np_prog_t *prog)
{
 80254d8:	b580      	push	{r7, lr}
 80254da:	b084      	sub	sp, #16
 80254dc:	af00      	add	r7, sp, #0
 80254de:	6078      	str	r0, [r7, #4]
    np_conf_cmd_t *conf_cmd;

    DEBUG_PRINT("芯片配置命令\r\n");
 80254e0:	4825      	ldr	r0, [pc, #148]	; (8025578 <np_cmd_nand_conf+0xa0>)
 80254e2:	f00c f94b 	bl	803177c <puts>

    // 检查接收缓冲区长度是否正确
    if (prog->rx_buf_len < sizeof(np_conf_cmd_t))
 80254e6:	687b      	ldr	r3, [r7, #4]
 80254e8:	685b      	ldr	r3, [r3, #4]
 80254ea:	2b16      	cmp	r3, #22
 80254ec:	d808      	bhi.n	8025500 <np_cmd_nand_conf+0x28>
    {
        ERROR_PRINT("配置命令缓冲区长度错误 %lu\r\n",
 80254ee:	687b      	ldr	r3, [r7, #4]
 80254f0:	685b      	ldr	r3, [r3, #4]
 80254f2:	4619      	mov	r1, r3
 80254f4:	4821      	ldr	r0, [pc, #132]	; (802557c <np_cmd_nand_conf+0xa4>)
 80254f6:	f00c f8db 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80254fa:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80254fe:	e036      	b.n	802556e <np_cmd_nand_conf+0x96>
    }

    conf_cmd = (np_conf_cmd_t *)prog->rx_buf;
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	681b      	ldr	r3, [r3, #0]
 8025504:	60fb      	str	r3, [r7, #12]

    np_fill_chip_info(conf_cmd, prog); // 填充芯片信息
 8025506:	6879      	ldr	r1, [r7, #4]
 8025508:	68f8      	ldr	r0, [r7, #12]
 802550a:	f7ff ff6c 	bl	80253e6 <np_fill_chip_info>
    np_print_chip_info(prog); // 打印芯片信息
 802550e:	6878      	ldr	r0, [r7, #4]
 8025510:	f7ff ffa2 	bl	8025458 <np_print_chip_info>

    prog->hal = conf_cmd->hal;
 8025514:	68fb      	ldr	r3, [r7, #12]
 8025516:	785a      	ldrb	r2, [r3, #1]
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802551e:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025522:	687b      	ldr	r3, [r7, #4]
 8025524:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025528:	f893 3241 	ldrb.w	r3, [r3, #577]	; 0x241
 802552c:	461a      	mov	r2, r3
 802552e:	4b14      	ldr	r3, [pc, #80]	; (8025580 <np_cmd_nand_conf+0xa8>)
 8025530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025534:	681b      	ldr	r3, [r3, #0]
 8025536:	68fa      	ldr	r2, [r7, #12]
 8025538:	f102 0017 	add.w	r0, r2, #23
        prog->rx_buf_len - sizeof(np_conf_cmd_t)))
 802553c:	687a      	ldr	r2, [r7, #4]
 802553e:	6852      	ldr	r2, [r2, #4]
    if (hal[prog->hal]->init(conf_cmd->hal_conf,
 8025540:	3a17      	subs	r2, #23
 8025542:	4611      	mov	r1, r2
 8025544:	4798      	blx	r3
 8025546:	4603      	mov	r3, r0
 8025548:	2b00      	cmp	r3, #0
 802554a:	d008      	beq.n	802555e <np_cmd_nand_conf+0x86>
    {
        ERROR_PRINT("HAL配置命令缓冲区长度错误 %lu\r\n",
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	685b      	ldr	r3, [r3, #4]
 8025550:	4619      	mov	r1, r3
 8025552:	480c      	ldr	r0, [pc, #48]	; (8025584 <np_cmd_nand_conf+0xac>)
 8025554:	f00c f8ac 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025558:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802555c:	e007      	b.n	802556e <np_cmd_nand_conf+0x96>
    }

    nand_bad_block_table_init(); // 初始化坏块表
 802555e:	f7fe fa7d 	bl	8023a5c <nand_bad_block_table_init>
    prog->bb_is_read = 0;
 8025562:	687b      	ldr	r3, [r7, #4]
 8025564:	2200      	movs	r2, #0
 8025566:	635a      	str	r2, [r3, #52]	; 0x34

    return np_send_ok_status();
 8025568:	f7fe fb10 	bl	8023b8c <np_send_ok_status>
 802556c:	4603      	mov	r3, r0
}
 802556e:	4618      	mov	r0, r3
 8025570:	3710      	adds	r7, #16
 8025572:	46bd      	mov	sp, r7
 8025574:	bd80      	pop	{r7, pc}
 8025576:	bf00      	nop
 8025578:	08032f88 	.word	0x08032f88
 802557c:	08032f9c 	.word	0x08032f9c
 8025580:	20000040 	.word	0x20000040
 8025584:	08032fcc 	.word	0x08032fcc

08025588 <np_send_bad_blocks>:

// 发送坏块信息
static int np_send_bad_blocks(np_prog_t *prog)
{
 8025588:	b5b0      	push	{r4, r5, r7, lr}
 802558a:	b084      	sub	sp, #16
 802558c:	af00      	add	r7, sp, #0
 802558e:	6078      	str	r0, [r7, #4]
    uint32_t page;
    void *bb_iter;

    // 遍历坏块表，并发送坏块信息
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 8025590:	f107 0308 	add.w	r3, r7, #8
 8025594:	4618      	mov	r0, r3
 8025596:	f7fe fab5 	bl	8023b04 <nand_bad_block_table_iter_alloc>
 802559a:	60f8      	str	r0, [r7, #12]
 802559c:	e021      	b.n	80255e2 <np_send_bad_blocks+0x5a>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
    {
        if (np_send_bad_block_info(page * prog->chip_info.page_size,
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80255a4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80255a8:	68ba      	ldr	r2, [r7, #8]
 80255aa:	fb02 f303 	mul.w	r3, r2, r3
 80255ae:	2200      	movs	r2, #0
 80255b0:	461c      	mov	r4, r3
 80255b2:	4615      	mov	r5, r2
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80255ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80255be:	2300      	movs	r3, #0
 80255c0:	4620      	mov	r0, r4
 80255c2:	4629      	mov	r1, r5
 80255c4:	f7fe fb22 	bl	8023c0c <np_send_bad_block_info>
 80255c8:	4603      	mov	r3, r0
 80255ca:	2b00      	cmp	r3, #0
 80255cc:	d002      	beq.n	80255d4 <np_send_bad_blocks+0x4c>
            prog->chip_info.block_size, false))
        {
            return -1;
 80255ce:	f04f 33ff 	mov.w	r3, #4294967295
 80255d2:	e00a      	b.n	80255ea <np_send_bad_blocks+0x62>
        bb_iter = nand_bad_block_table_iter_next(bb_iter, &page))
 80255d4:	f107 0308 	add.w	r3, r7, #8
 80255d8:	4619      	mov	r1, r3
 80255da:	68f8      	ldr	r0, [r7, #12]
 80255dc:	f7fe faac 	bl	8023b38 <nand_bad_block_table_iter_next>
 80255e0:	60f8      	str	r0, [r7, #12]
    for (bb_iter = nand_bad_block_table_iter_alloc(&page); bb_iter;
 80255e2:	68fb      	ldr	r3, [r7, #12]
 80255e4:	2b00      	cmp	r3, #0
 80255e6:	d1da      	bne.n	802559e <np_send_bad_blocks+0x16>
        }
    }

    return 0;
 80255e8:	2300      	movs	r3, #0
}
 80255ea:	4618      	mov	r0, r3
 80255ec:	3710      	adds	r7, #16
 80255ee:	46bd      	mov	sp, r7
 80255f0:	bdb0      	pop	{r4, r5, r7, pc}

080255f2 <np_cmd_read_bad_blocks>:

// 执行读取坏块命令
int np_cmd_read_bad_blocks(np_prog_t *prog)
{
 80255f2:	b580      	push	{r7, lr}
 80255f4:	b084      	sub	sp, #16
 80255f6:	af00      	add	r7, sp, #0
 80255f8:	6078      	str	r0, [r7, #4]
    int ret;

    led_rd_set(true); // 设置读取指示灯为亮
 80255fa:	2001      	movs	r0, #1
 80255fc:	f7fe f934 	bl	8023868 <led_rd_set>
    nand_bad_block_table_init(); // 初始化坏块表
 8025600:	f7fe fa2c 	bl	8023a5c <nand_bad_block_table_init>
    ret = _np_cmd_read_bad_blocks(prog, true); // 执行读取坏块命令
 8025604:	2101      	movs	r1, #1
 8025606:	6878      	ldr	r0, [r7, #4]
 8025608:	f7fe fc5c 	bl	8023ec4 <_np_cmd_read_bad_blocks>
 802560c:	60f8      	str	r0, [r7, #12]
    led_rd_set(false); // 设置读取指示灯为灭
 802560e:	2000      	movs	r0, #0
 8025610:	f7fe f92a 	bl	8023868 <led_rd_set>

    if (ret || (ret = np_send_bad_blocks(prog))) // 发送坏块信息
 8025614:	68fb      	ldr	r3, [r7, #12]
 8025616:	2b00      	cmp	r3, #0
 8025618:	d106      	bne.n	8025628 <np_cmd_read_bad_blocks+0x36>
 802561a:	6878      	ldr	r0, [r7, #4]
 802561c:	f7ff ffb4 	bl	8025588 <np_send_bad_blocks>
 8025620:	60f8      	str	r0, [r7, #12]
 8025622:	68fb      	ldr	r3, [r7, #12]
 8025624:	2b00      	cmp	r3, #0
 8025626:	d001      	beq.n	802562c <np_cmd_read_bad_blocks+0x3a>
        return ret;
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	e002      	b.n	8025632 <np_cmd_read_bad_blocks+0x40>

    return np_send_ok_status(); // 发送成功状态
 802562c:	f7fe faae 	bl	8023b8c <np_send_ok_status>
 8025630:	4603      	mov	r3, r0
}
 8025632:	4618      	mov	r0, r3
 8025634:	3710      	adds	r7, #16
 8025636:	46bd      	mov	sp, r7
 8025638:	bd80      	pop	{r7, pc}
	...

0802563c <np_cmd_version_get>:

// 获取版本号命令
int np_cmd_version_get(np_prog_t *prog)
{
 802563c:	b580      	push	{r7, lr}
 802563e:	b086      	sub	sp, #24
 8025640:	af00      	add	r7, sp, #0
 8025642:	6078      	str	r0, [r7, #4]
    np_resp_version_t resp;
    size_t resp_len = sizeof(resp);
 8025644:	2306      	movs	r3, #6
 8025646:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("读取版本号命令\r\n");
 8025648:	4810      	ldr	r0, [pc, #64]	; (802568c <np_cmd_version_get+0x50>)
 802564a:	f00c f897 	bl	803177c <puts>

    resp.header.code = NP_RESP_DATA;
 802564e:	2300      	movs	r3, #0
 8025650:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025652:	697b      	ldr	r3, [r7, #20]
 8025654:	b2db      	uxtb	r3, r3
 8025656:	3b02      	subs	r3, #2
 8025658:	b2db      	uxtb	r3, r3
 802565a:	737b      	strb	r3, [r7, #13]
    resp.version.major = SW_VERSION_MAJOR;
 802565c:	2303      	movs	r3, #3
 802565e:	73bb      	strb	r3, [r7, #14]
    resp.version.minor = SW_VERSION_MINOR;
 8025660:	2305      	movs	r3, #5
 8025662:	73fb      	strb	r3, [r7, #15]
    resp.version.build = SW_VERSION_BUILD;
 8025664:	2300      	movs	r3, #0
 8025666:	823b      	strh	r3, [r7, #16]

    if (np_comm_cb)
 8025668:	4b09      	ldr	r3, [pc, #36]	; (8025690 <np_cmd_version_get+0x54>)
 802566a:	681b      	ldr	r3, [r3, #0]
 802566c:	2b00      	cmp	r3, #0
 802566e:	d007      	beq.n	8025680 <np_cmd_version_get+0x44>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025670:	4b07      	ldr	r3, [pc, #28]	; (8025690 <np_cmd_version_get+0x54>)
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	f107 020c 	add.w	r2, r7, #12
 802567a:	6979      	ldr	r1, [r7, #20]
 802567c:	4610      	mov	r0, r2
 802567e:	4798      	blx	r3

    return 0;
 8025680:	2300      	movs	r3, #0
}
 8025682:	4618      	mov	r0, r3
 8025684:	3718      	adds	r7, #24
 8025686:	46bd      	mov	sp, r7
 8025688:	bd80      	pop	{r7, pc}
 802568a:	bf00      	nop
 802568c:	08033000 	.word	0x08033000
 8025690:	20000cb8 	.word	0x20000cb8

08025694 <np_boot_config_read>:

// 读取引导配置
static int np_boot_config_read(boot_config_t *config)
{
 8025694:	b580      	push	{r7, lr}
 8025696:	b082      	sub	sp, #8
 8025698:	af00      	add	r7, sp, #0
 802569a:	6078      	str	r0, [r7, #4]
    if (flash_read(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 802569c:	2201      	movs	r2, #1
 802569e:	6879      	ldr	r1, [r7, #4]
 80256a0:	4806      	ldr	r0, [pc, #24]	; (80256bc <np_boot_config_read+0x28>)
 80256a2:	f7fd f971 	bl	8022988 <flash_read>
 80256a6:	4603      	mov	r3, r0
 80256a8:	2b00      	cmp	r3, #0
 80256aa:	da02      	bge.n	80256b2 <np_boot_config_read+0x1e>
        < 0)
    {
        return -1;
 80256ac:	f04f 33ff 	mov.w	r3, #4294967295
 80256b0:	e000      	b.n	80256b4 <np_boot_config_read+0x20>
    }
    
    return 0;
 80256b2:	2300      	movs	r3, #0
}
 80256b4:	4618      	mov	r0, r3
 80256b6:	3708      	adds	r7, #8
 80256b8:	46bd      	mov	sp, r7
 80256ba:	bd80      	pop	{r7, pc}
 80256bc:	08003800 	.word	0x08003800

080256c0 <np_boot_config_write>:

// 写入引导配置
static int np_boot_config_write(boot_config_t *config)
{
 80256c0:	b580      	push	{r7, lr}
 80256c2:	b082      	sub	sp, #8
 80256c4:	af00      	add	r7, sp, #0
 80256c6:	6078      	str	r0, [r7, #4]
    if (flash_page_erase(BOOT_CONFIG_ADDR) < 0)
 80256c8:	480c      	ldr	r0, [pc, #48]	; (80256fc <np_boot_config_write+0x3c>)
 80256ca:	f7fd f905 	bl	80228d8 <flash_page_erase>
 80256ce:	4603      	mov	r3, r0
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	da02      	bge.n	80256da <np_boot_config_write+0x1a>
        return -1;
 80256d4:	f04f 33ff 	mov.w	r3, #4294967295
 80256d8:	e00b      	b.n	80256f2 <np_boot_config_write+0x32>

    if (flash_write(BOOT_CONFIG_ADDR, (uint8_t *)config, sizeof(boot_config_t))
 80256da:	2201      	movs	r2, #1
 80256dc:	6879      	ldr	r1, [r7, #4]
 80256de:	4807      	ldr	r0, [pc, #28]	; (80256fc <np_boot_config_write+0x3c>)
 80256e0:	f7fd f91d 	bl	802291e <flash_write>
 80256e4:	4603      	mov	r3, r0
 80256e6:	2b00      	cmp	r3, #0
 80256e8:	da02      	bge.n	80256f0 <np_boot_config_write+0x30>
        < 0)
    {
        return -1;
 80256ea:	f04f 33ff 	mov.w	r3, #4294967295
 80256ee:	e000      	b.n	80256f2 <np_boot_config_write+0x32>
    }

    return 0;
 80256f0:	2300      	movs	r3, #0
}
 80256f2:	4618      	mov	r0, r3
 80256f4:	3708      	adds	r7, #8
 80256f6:	46bd      	mov	sp, r7
 80256f8:	bd80      	pop	{r7, pc}
 80256fa:	bf00      	nop
 80256fc:	08003800 	.word	0x08003800

08025700 <np_cmd_active_image_get>:

// 获取活动镜像命令
static int np_cmd_active_image_get(np_prog_t *prog)
{
 8025700:	b580      	push	{r7, lr}
 8025702:	b086      	sub	sp, #24
 8025704:	af00      	add	r7, sp, #0
 8025706:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;
    np_resp_active_image_t resp;
    size_t resp_len = sizeof(resp);
 8025708:	2303      	movs	r3, #3
 802570a:	617b      	str	r3, [r7, #20]

    DEBUG_PRINT("获取活动镜像命令\r\n");
 802570c:	481c      	ldr	r0, [pc, #112]	; (8025780 <np_cmd_active_image_get+0x80>)
 802570e:	f00c f835 	bl	803177c <puts>

    if (prog->active_image == 0xff)
 8025712:	687b      	ldr	r3, [r7, #4]
 8025714:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025718:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 802571c:	2bff      	cmp	r3, #255	; 0xff
 802571e:	d110      	bne.n	8025742 <np_cmd_active_image_get+0x42>
    {
        if (np_boot_config_read(&boot_config))
 8025720:	f107 0310 	add.w	r3, r7, #16
 8025724:	4618      	mov	r0, r3
 8025726:	f7ff ffb5 	bl	8025694 <np_boot_config_read>
 802572a:	4603      	mov	r3, r0
 802572c:	2b00      	cmp	r3, #0
 802572e:	d002      	beq.n	8025736 <np_cmd_active_image_get+0x36>
            return NP_ERR_INTERNAL;
 8025730:	f04f 33ff 	mov.w	r3, #4294967295
 8025734:	e01f      	b.n	8025776 <np_cmd_active_image_get+0x76>
        prog->active_image = boot_config.active_image;
 8025736:	7c3a      	ldrb	r2, [r7, #16]
 8025738:	687b      	ldr	r3, [r7, #4]
 802573a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802573e:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    }

    resp.header.code = NP_RESP_DATA;
 8025742:	2300      	movs	r3, #0
 8025744:	733b      	strb	r3, [r7, #12]
    resp.header.info = resp_len - sizeof(resp.header);
 8025746:	697b      	ldr	r3, [r7, #20]
 8025748:	b2db      	uxtb	r3, r3
 802574a:	3b02      	subs	r3, #2
 802574c:	b2db      	uxtb	r3, r3
 802574e:	737b      	strb	r3, [r7, #13]
    resp.active_image = prog->active_image;
 8025750:	687b      	ldr	r3, [r7, #4]
 8025752:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025756:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 802575a:	73bb      	strb	r3, [r7, #14]

    if (np_comm_cb)
 802575c:	4b09      	ldr	r3, [pc, #36]	; (8025784 <np_cmd_active_image_get+0x84>)
 802575e:	681b      	ldr	r3, [r3, #0]
 8025760:	2b00      	cmp	r3, #0
 8025762:	d007      	beq.n	8025774 <np_cmd_active_image_get+0x74>
        np_comm_cb->send((uint8_t *)&resp, resp_len);
 8025764:	4b07      	ldr	r3, [pc, #28]	; (8025784 <np_cmd_active_image_get+0x84>)
 8025766:	681b      	ldr	r3, [r3, #0]
 8025768:	681b      	ldr	r3, [r3, #0]
 802576a:	f107 020c 	add.w	r2, r7, #12
 802576e:	6979      	ldr	r1, [r7, #20]
 8025770:	4610      	mov	r0, r2
 8025772:	4798      	blx	r3

    return 0;
 8025774:	2300      	movs	r3, #0
}
 8025776:	4618      	mov	r0, r3
 8025778:	3718      	adds	r7, #24
 802577a:	46bd      	mov	sp, r7
 802577c:	bd80      	pop	{r7, pc}
 802577e:	bf00      	nop
 8025780:	08033018 	.word	0x08033018
 8025784:	20000cb8 	.word	0x20000cb8

08025788 <np_cmd_fw_update_start>:

// 开始固件更新命令
static int np_cmd_fw_update_start(np_prog_t *prog)
{
 8025788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802578c:	b092      	sub	sp, #72	; 0x48
 802578e:	af04      	add	r7, sp, #16
 8025790:	61f8      	str	r0, [r7, #28]
    uint64_t addr, len;
    np_write_start_cmd_t *write_start_cmd;

    if (prog->rx_buf_len < sizeof(np_write_start_cmd_t))
 8025792:	69fb      	ldr	r3, [r7, #28]
 8025794:	685b      	ldr	r3, [r3, #4]
 8025796:	2b11      	cmp	r3, #17
 8025798:	d808      	bhi.n	80257ac <np_cmd_fw_update_start+0x24>
    {
        ERROR_PRINT("写入开始命令的缓冲区长度错误 %lu\r\n",
 802579a:	69fb      	ldr	r3, [r7, #28]
 802579c:	685b      	ldr	r3, [r3, #4]
 802579e:	4619      	mov	r1, r3
 80257a0:	4870      	ldr	r0, [pc, #448]	; (8025964 <np_cmd_fw_update_start+0x1dc>)
 80257a2:	f00b ff85 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 80257a6:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80257aa:	e0d5      	b.n	8025958 <np_cmd_fw_update_start+0x1d0>
    }

    write_start_cmd = (np_write_start_cmd_t *)prog->rx_buf;
 80257ac:	69fb      	ldr	r3, [r7, #28]
 80257ae:	681b      	ldr	r3, [r3, #0]
 80257b0:	637b      	str	r3, [r7, #52]	; 0x34
    addr = write_start_cmd->addr;
 80257b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80257b4:	f8d1 2001 	ldr.w	r2, [r1, #1]
 80257b8:	f8d1 3005 	ldr.w	r3, [r1, #5]
 80257bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    len = write_start_cmd->len;
 80257c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80257c2:	f8d1 2009 	ldr.w	r2, [r1, #9]
 80257c6:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80257ca:	e9c7 2308 	strd	r2, r3, [r7, #32]

    DEBUG_PRINT("写入命令 0x%" PRIx64 " 地址 0x%" PRIx64 " 字节\r\n", addr,
 80257ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80257d2:	e9cd 2300 	strd	r2, r3, [sp]
 80257d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80257da:	4863      	ldr	r0, [pc, #396]	; (8025968 <np_cmd_fw_update_start+0x1e0>)
 80257dc:	f00b ff68 	bl	80316b0 <iprintf>
        len);

    prog->base_addr = FLASH_START_ADDR;
 80257e0:	69f9      	ldr	r1, [r7, #28]
 80257e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80257e6:	f04f 0300 	mov.w	r3, #0
 80257ea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    prog->page_size = FLASH_PAGE_SIZE;
 80257ee:	69fb      	ldr	r3, [r7, #28]
 80257f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257f4:	621a      	str	r2, [r3, #32]
    prog->block_size = FLASH_BLOCK_SIZE;
 80257f6:	69fb      	ldr	r3, [r7, #28]
 80257f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257fc:	625a      	str	r2, [r3, #36]	; 0x24
    prog->total_size = FLASH_SIZE;
 80257fe:	69f9      	ldr	r1, [r7, #28]
 8025800:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8025804:	f04f 0300 	mov.w	r3, #0
 8025808:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    if (addr + len > prog->base_addr + prog->total_size)
 802580c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025810:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025814:	1884      	adds	r4, r0, r2
 8025816:	eb41 0503 	adc.w	r5, r1, r3
 802581a:	69fb      	ldr	r3, [r7, #28]
 802581c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025820:	69fb      	ldr	r3, [r7, #28]
 8025822:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025826:	eb10 0802 	adds.w	r8, r0, r2
 802582a:	eb41 0903 	adc.w	r9, r1, r3
 802582e:	45a0      	cmp	r8, r4
 8025830:	eb79 0305 	sbcs.w	r3, r9, r5
 8025834:	d217      	bcs.n	8025866 <np_cmd_fw_update_start+0xde>
    {
        ERROR_PRINT("写入地址 0x%" PRIx64 "+0x%" PRIx64
 8025836:	69fb      	ldr	r3, [r7, #28]
 8025838:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 802583c:	69fb      	ldr	r3, [r7, #28]
 802583e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025842:	eb10 0a02 	adds.w	sl, r0, r2
 8025846:	eb41 0b03 	adc.w	fp, r1, r3
 802584a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 802584e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025852:	e9cd 2300 	strd	r2, r3, [sp]
 8025856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802585a:	4844      	ldr	r0, [pc, #272]	; (802596c <np_cmd_fw_update_start+0x1e4>)
 802585c:	f00b ff28 	bl	80316b0 <iprintf>
            " 超过闪存大小 0x%" PRIx64 "\r\n", addr, len,
            prog->base_addr + prog->total_size);
        return NP_ERR_ADDR_EXCEEDED;
 8025860:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025864:	e078      	b.n	8025958 <np_cmd_fw_update_start+0x1d0>
    }

    if (addr % prog->page_size)
 8025866:	69fb      	ldr	r3, [r7, #28]
 8025868:	6a1b      	ldr	r3, [r3, #32]
 802586a:	2200      	movs	r2, #0
 802586c:	613b      	str	r3, [r7, #16]
 802586e:	617a      	str	r2, [r7, #20]
 8025870:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8025878:	f7fc fcfa 	bl	8022270 <__aeabi_uldivmod>
 802587c:	4313      	orrs	r3, r2
 802587e:	d00a      	beq.n	8025896 <np_cmd_fw_update_start+0x10e>
    {
        ERROR_PRINT("地址 0x%" PRIx64
 8025880:	69fb      	ldr	r3, [r7, #28]
 8025882:	6a1b      	ldr	r3, [r3, #32]
 8025884:	9300      	str	r3, [sp, #0]
 8025886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802588a:	4839      	ldr	r0, [pc, #228]	; (8025970 <np_cmd_fw_update_start+0x1e8>)
 802588c:	f00b ff10 	bl	80316b0 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", addr, prog->page_size);
        return NP_ERR_ADDR_NOT_ALIGN;
 8025890:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8025894:	e060      	b.n	8025958 <np_cmd_fw_update_start+0x1d0>
    }

    if (!len)
 8025896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802589a:	4313      	orrs	r3, r2
 802589c:	d105      	bne.n	80258aa <np_cmd_fw_update_start+0x122>
    {
        ERROR_PRINT("长度为0\r\n");
 802589e:	4835      	ldr	r0, [pc, #212]	; (8025974 <np_cmd_fw_update_start+0x1ec>)
 80258a0:	f00b ff6c 	bl	803177c <puts>
        return NP_ERR_LEN_INVALID;
 80258a4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80258a8:	e056      	b.n	8025958 <np_cmd_fw_update_start+0x1d0>
    }

    if (len % prog->page_size)
 80258aa:	69fb      	ldr	r3, [r7, #28]
 80258ac:	6a1b      	ldr	r3, [r3, #32]
 80258ae:	2200      	movs	r2, #0
 80258b0:	60bb      	str	r3, [r7, #8]
 80258b2:	60fa      	str	r2, [r7, #12]
 80258b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80258b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80258bc:	f7fc fcd8 	bl	8022270 <__aeabi_uldivmod>
 80258c0:	4313      	orrs	r3, r2
 80258c2:	d00a      	beq.n	80258da <np_cmd_fw_update_start+0x152>
    {
        ERROR_PRINT("长度 0x%" PRIx64
 80258c4:	69fb      	ldr	r3, [r7, #28]
 80258c6:	6a1b      	ldr	r3, [r3, #32]
 80258c8:	9300      	str	r3, [sp, #0]
 80258ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80258ce:	482a      	ldr	r0, [pc, #168]	; (8025978 <np_cmd_fw_update_start+0x1f0>)
 80258d0:	f00b feee 	bl	80316b0 <iprintf>
            " 未对齐到页大小 0x%lx\r\n", len, prog->page_size);
        return NP_ERR_LEN_NOT_ALIGN;
 80258d4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80258d8:	e03e      	b.n	8025958 <np_cmd_fw_update_start+0x1d0>
    }

    prog->addr = addr;
 80258da:	69f9      	ldr	r1, [r7, #28]
 80258dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80258e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    prog->len = len;
 80258e4:	69f9      	ldr	r1, [r7, #28]
 80258e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80258ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
    prog->addr_is_set = 1;
 80258ee:	69fb      	ldr	r3, [r7, #28]
 80258f0:	2201      	movs	r2, #1
 80258f2:	631a      	str	r2, [r3, #48]	; 0x30

    prog->page.page = addr / prog->page_size;
 80258f4:	69fb      	ldr	r3, [r7, #28]
 80258f6:	6a1b      	ldr	r3, [r3, #32]
 80258f8:	2200      	movs	r2, #0
 80258fa:	603b      	str	r3, [r7, #0]
 80258fc:	607a      	str	r2, [r7, #4]
 80258fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025902:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8025906:	f7fc fcb3 	bl	8022270 <__aeabi_uldivmod>
 802590a:	4602      	mov	r2, r0
 802590c:	460b      	mov	r3, r1
 802590e:	69fb      	ldr	r3, [r7, #28]
 8025910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025914:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    prog->page.offset = 0;
 8025918:	69fb      	ldr	r3, [r7, #28]
 802591a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 802591e:	461a      	mov	r2, r3
 8025920:	2300      	movs	r3, #0
 8025922:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    prog->bytes_written = 0;
 8025926:	69fb      	ldr	r3, [r7, #28]
 8025928:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 802592c:	3310      	adds	r3, #16
 802592e:	4619      	mov	r1, r3
 8025930:	f04f 0200 	mov.w	r2, #0
 8025934:	f04f 0300 	mov.w	r3, #0
 8025938:	e941 2302 	strd	r2, r3, [r1, #-8]
    prog->bytes_ack = 0;
 802593c:	69fb      	ldr	r3, [r7, #28]
 802593e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025942:	3310      	adds	r3, #16
 8025944:	4619      	mov	r1, r3
 8025946:	f04f 0200 	mov.w	r2, #0
 802594a:	f04f 0300 	mov.w	r3, #0
 802594e:	e9c1 2300 	strd	r2, r3, [r1]

    return np_send_ok_status();
 8025952:	f7fe f91b 	bl	8023b8c <np_send_ok_status>
 8025956:	4603      	mov	r3, r0
}
 8025958:	4618      	mov	r0, r3
 802595a:	3738      	adds	r7, #56	; 0x38
 802595c:	46bd      	mov	sp, r7
 802595e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8025962:	bf00      	nop
 8025964:	08033034 	.word	0x08033034
 8025968:	0803306c 	.word	0x0803306c
 802596c:	08033098 	.word	0x08033098
 8025970:	080330d8 	.word	0x080330d8
 8025974:	08032e74 	.word	0x08032e74
 8025978:	0803310c 	.word	0x0803310c

0802597c <np_cmd_fw_update_data>:

// 写入固件数据命令
static int np_cmd_fw_update_data(np_prog_t *prog)
{
 802597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025980:	b0a7      	sub	sp, #156	; 0x9c
 8025982:	af02      	add	r7, sp, #8
 8025984:	6778      	str	r0, [r7, #116]	; 0x74
    uint32_t write_len;
    uint64_t bytes_left, len;
    np_write_data_cmd_t *write_data_cmd;

    if (prog->rx_buf_len < sizeof(np_write_data_cmd_t))
 8025986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025988:	685b      	ldr	r3, [r3, #4]
 802598a:	2b01      	cmp	r3, #1
 802598c:	d808      	bhi.n	80259a0 <np_cmd_fw_update_data+0x24>
    {
        ERROR_PRINT("写入数据命令的缓冲区长度错误 %lu\r\n",
 802598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025990:	685b      	ldr	r3, [r3, #4]
 8025992:	4619      	mov	r1, r3
 8025994:	487c      	ldr	r0, [pc, #496]	; (8025b88 <np_cmd_fw_update_data+0x20c>)
 8025996:	f00b fe8b 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 802599a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 802599e:	e1d6      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
    }

    write_data_cmd = (np_write_data_cmd_t *)prog->rx_buf;
 80259a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259a2:	681b      	ldr	r3, [r3, #0]
 80259a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    len = write_data_cmd->len;
 80259a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80259ac:	785b      	ldrb	r3, [r3, #1]
 80259ae:	b2db      	uxtb	r3, r3
 80259b0:	2200      	movs	r2, #0
 80259b2:	60bb      	str	r3, [r7, #8]
 80259b4:	60fa      	str	r2, [r7, #12]
 80259b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80259ba:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
    if (len + sizeof(np_write_data_cmd_t) > NP_PACKET_BUF_SIZE)
 80259be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259c2:	1c94      	adds	r4, r2, #2
 80259c4:	f143 0500 	adc.w	r5, r3, #0
 80259c8:	2c41      	cmp	r4, #65	; 0x41
 80259ca:	f175 0300 	sbcs.w	r3, r5, #0
 80259ce:	d307      	bcc.n	80259e0 <np_cmd_fw_update_data+0x64>
    {
        ERROR_PRINT("数据大小错误 0x%" PRIx64 "\r\n", len);
 80259d0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259d4:	486d      	ldr	r0, [pc, #436]	; (8025b8c <np_cmd_fw_update_data+0x210>)
 80259d6:	f00b fe6b 	bl	80316b0 <iprintf>
        return NP_ERR_CMD_DATA_SIZE;
 80259da:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80259de:	e1b6      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
    }

    if (len + sizeof(np_write_data_cmd_t) != prog->rx_buf_len)
 80259e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80259e4:	f112 0802 	adds.w	r8, r2, #2
 80259e8:	f143 0900 	adc.w	r9, r3, #0
 80259ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80259ee:	685b      	ldr	r3, [r3, #4]
 80259f0:	2200      	movs	r2, #0
 80259f2:	469a      	mov	sl, r3
 80259f4:	4693      	mov	fp, r2
 80259f6:	45d9      	cmp	r9, fp
 80259f8:	bf08      	it	eq
 80259fa:	45d0      	cmpeq	r8, sl
 80259fc:	d010      	beq.n	8025a20 <np_cmd_fw_update_data+0xa4>
    {
        ERROR_PRINT("缓冲区长度 0x%lx 大于命令长度 0x%" PRIx64 "\r\n",
 80259fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a00:	6859      	ldr	r1, [r3, #4]
 8025a02:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025a06:	1c90      	adds	r0, r2, #2
 8025a08:	66b8      	str	r0, [r7, #104]	; 0x68
 8025a0a:	f143 0300 	adc.w	r3, r3, #0
 8025a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025a10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8025a14:	485e      	ldr	r0, [pc, #376]	; (8025b90 <np_cmd_fw_update_data+0x214>)
 8025a16:	f00b fe4b 	bl	80316b0 <iprintf>
            prog->rx_buf_len, len + sizeof(np_write_data_cmd_t));
        return NP_ERR_CMD_DATA_SIZE;
 8025a1a:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 8025a1e:	e196      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
    }

    if (!prog->addr_is_set)
 8025a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d105      	bne.n	8025a34 <np_cmd_fw_update_data+0xb8>
    {
        ERROR_PRINT("写入地址未设置\r\n");
 8025a28:	485a      	ldr	r0, [pc, #360]	; (8025b94 <np_cmd_fw_update_data+0x218>)
 8025a2a:	f00b fea7 	bl	803177c <puts>
        return NP_ERR_ADDR_INVALID;
 8025a2e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8025a32:	e18c      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
    }

    if (prog->page.offset + len > prog->page_size)
 8025a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025a3e:	2200      	movs	r2, #0
 8025a40:	663b      	str	r3, [r7, #96]	; 0x60
 8025a42:	667a      	str	r2, [r7, #100]	; 0x64
 8025a44:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025a48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8025a4c:	4621      	mov	r1, r4
 8025a4e:	1889      	adds	r1, r1, r2
 8025a50:	65b9      	str	r1, [r7, #88]	; 0x58
 8025a52:	4629      	mov	r1, r5
 8025a54:	eb43 0101 	adc.w	r1, r3, r1
 8025a58:	65f9      	str	r1, [r7, #92]	; 0x5c
 8025a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a5c:	6a1b      	ldr	r3, [r3, #32]
 8025a5e:	2200      	movs	r2, #0
 8025a60:	653b      	str	r3, [r7, #80]	; 0x50
 8025a62:	657a      	str	r2, [r7, #84]	; 0x54
 8025a64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8025a68:	4623      	mov	r3, r4
 8025a6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8025a6e:	4602      	mov	r2, r0
 8025a70:	4293      	cmp	r3, r2
 8025a72:	462b      	mov	r3, r5
 8025a74:	460a      	mov	r2, r1
 8025a76:	4193      	sbcs	r3, r2
 8025a78:	d20a      	bcs.n	8025a90 <np_cmd_fw_update_data+0x114>
        write_len = prog->page_size - prog->page.offset;
 8025a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a7c:	6a1a      	ldr	r2, [r3, #32]
 8025a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025a84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025a88:	1ad3      	subs	r3, r2, r3
 8025a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025a8e:	e003      	b.n	8025a98 <np_cmd_fw_update_data+0x11c>
    else
        write_len = len;
 8025a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    memcpy(prog->page.buf + prog->page.offset, write_data_cmd->data, write_len);
 8025a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025a9a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8025a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025aa0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025aa8:	18d0      	adds	r0, r2, r3
 8025aaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025aae:	3302      	adds	r3, #2
 8025ab0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8025ab4:	4619      	mov	r1, r3
 8025ab6:	f00b ffbc 	bl	8031a32 <memcpy>
    prog->page.offset += write_len;
 8025aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025abc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ac0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025ac8:	441a      	add	r2, r3
 8025aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025acc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ad0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    if (prog->page.offset == prog->page_size)
 8025ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ad6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025ada:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ae0:	6a1b      	ldr	r3, [r3, #32]
 8025ae2:	429a      	cmp	r2, r3
 8025ae4:	f040 8082 	bne.w	8025bec <np_cmd_fw_update_data+0x270>
    {
        if (prog->addr >= prog->base_addr + prog->total_size)
 8025ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025aea:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025af0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025af6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025afa:	1886      	adds	r6, r0, r2
 8025afc:	64be      	str	r6, [r7, #72]	; 0x48
 8025afe:	eb41 0303 	adc.w	r3, r1, r3
 8025b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025b04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8025b08:	460b      	mov	r3, r1
 8025b0a:	429c      	cmp	r4, r3
 8025b0c:	4613      	mov	r3, r2
 8025b0e:	eb75 0303 	sbcs.w	r3, r5, r3
 8025b12:	d319      	bcc.n	8025b48 <np_cmd_fw_update_data+0x1cc>
        {
            ERROR_PRINT("写入地址 0x%" PRIx64
 8025b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b16:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8025b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b1c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8025b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8025b26:	1886      	adds	r6, r0, r2
 8025b28:	643e      	str	r6, [r7, #64]	; 0x40
 8025b2a:	eb41 0303 	adc.w	r3, r1, r3
 8025b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8025b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8025b34:	e9cd 2300 	strd	r2, r3, [sp]
 8025b38:	4622      	mov	r2, r4
 8025b3a:	462b      	mov	r3, r5
 8025b3c:	4816      	ldr	r0, [pc, #88]	; (8025b98 <np_cmd_fw_update_data+0x21c>)
 8025b3e:	f00b fdb7 	bl	80316b0 <iprintf>
                " 超过闪存大小 0x%" PRIx64 "\r\n",
                prog->addr, prog->base_addr + prog->total_size);
            return NP_ERR_ADDR_EXCEEDED;
 8025b42:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8025b46:	e102      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
        }

        if (flash_page_erase((uint32_t)prog->addr) < 0)
 8025b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b4a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025b4e:	4613      	mov	r3, r2
 8025b50:	4618      	mov	r0, r3
 8025b52:	f7fc fec1 	bl	80228d8 <flash_page_erase>
 8025b56:	4603      	mov	r3, r0
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	da02      	bge.n	8025b62 <np_cmd_fw_update_data+0x1e6>
            return NP_ERR_INTERNAL;
 8025b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8025b60:	e0f5      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>

        if (flash_write((uint32_t)prog->addr, prog->page.buf,
 8025b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025b68:	4610      	mov	r0, r2
 8025b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b6c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8025b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b72:	6a1b      	ldr	r3, [r3, #32]
 8025b74:	461a      	mov	r2, r3
 8025b76:	f7fc fed2 	bl	802291e <flash_write>
 8025b7a:	4603      	mov	r3, r0
 8025b7c:	2b00      	cmp	r3, #0
 8025b7e:	da0d      	bge.n	8025b9c <np_cmd_fw_update_data+0x220>
            prog->page_size) < 0)
        {
            return NP_ERR_INTERNAL;
 8025b80:	f04f 33ff 	mov.w	r3, #4294967295
 8025b84:	e0e3      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
 8025b86:	bf00      	nop
 8025b88:	08033140 	.word	0x08033140
 8025b8c:	08033178 	.word	0x08033178
 8025b90:	0803319c 	.word	0x0803319c
 8025b94:	08032cb0 	.word	0x08032cb0
 8025b98:	080331d8 	.word	0x080331d8
        }

        prog->addr += prog->page_size;
 8025b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025b9e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8025ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025ba4:	6a1b      	ldr	r3, [r3, #32]
 8025ba6:	2200      	movs	r2, #0
 8025ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8025baa:	63fa      	str	r2, [r7, #60]	; 0x3c
 8025bac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8025bb0:	4623      	mov	r3, r4
 8025bb2:	18c3      	adds	r3, r0, r3
 8025bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8025bb6:	462b      	mov	r3, r5
 8025bb8:	eb41 0303 	adc.w	r3, r1, r3
 8025bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8025bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8025bc4:	e9c3 1202 	strd	r1, r2, [r3, #8]
        prog->page.page++;
 8025bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025bca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025bce:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8025bd2:	3301      	adds	r3, #1
 8025bd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025bd6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025bda:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
        prog->page.offset = 0;
 8025bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025be0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025be4:	461a      	mov	r2, r3
 8025be6:	2300      	movs	r3, #0
 8025be8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    bytes_left = len - write_len;
 8025bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025bf0:	2200      	movs	r2, #0
 8025bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8025bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8025bf6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025bfa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8025bfe:	4621      	mov	r1, r4
 8025c00:	1a51      	subs	r1, r2, r1
 8025c02:	6039      	str	r1, [r7, #0]
 8025c04:	4629      	mov	r1, r5
 8025c06:	eb63 0301 	sbc.w	r3, r3, r1
 8025c0a:	607b      	str	r3, [r7, #4]
 8025c0c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025c10:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (bytes_left)
 8025c14:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8025c18:	4313      	orrs	r3, r2
 8025c1a:	d018      	beq.n	8025c4e <np_cmd_fw_update_data+0x2d2>
    {
        memcpy(prog->page.buf, write_data_cmd->data + write_len, bytes_left);
 8025c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c1e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8025c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8025c26:	1c9a      	adds	r2, r3, #2
 8025c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8025c2c:	4413      	add	r3, r2
 8025c2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8025c30:	4619      	mov	r1, r3
 8025c32:	f00b fefe 	bl	8031a32 <memcpy>
        prog->page.offset += bytes_left;
 8025c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c38:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025c3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8025c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025c42:	4413      	add	r3, r2
 8025c44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8025c46:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8025c4a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }

    prog->bytes_written += len;
 8025c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c50:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c54:	3310      	adds	r3, #16
 8025c56:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c5a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8025c5e:	1884      	adds	r4, r0, r2
 8025c60:	623c      	str	r4, [r7, #32]
 8025c62:	eb41 0303 	adc.w	r3, r1, r3
 8025c66:	627b      	str	r3, [r7, #36]	; 0x24
 8025c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c6a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c6e:	3310      	adds	r3, #16
 8025c70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8025c74:	e943 1202 	strd	r1, r2, [r3, #-8]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c7a:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c7e:	3310      	adds	r3, #16
 8025c80:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c86:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025c8a:	3310      	adds	r3, #16
 8025c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c90:	1a84      	subs	r4, r0, r2
 8025c92:	61bc      	str	r4, [r7, #24]
 8025c94:	eb61 0303 	sbc.w	r3, r1, r3
 8025c98:	61fb      	str	r3, [r7, #28]
 8025c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025c9c:	6a1b      	ldr	r3, [r3, #32]
 8025c9e:	2200      	movs	r2, #0
 8025ca0:	613b      	str	r3, [r7, #16]
 8025ca2:	617a      	str	r2, [r7, #20]
 8025ca4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8025ca8:	4623      	mov	r3, r4
 8025caa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8025cae:	4602      	mov	r2, r0
 8025cb0:	4293      	cmp	r3, r2
 8025cb2:	462b      	mov	r3, r5
 8025cb4:	460a      	mov	r2, r1
 8025cb6:	4193      	sbcs	r3, r2
 8025cb8:	d20c      	bcs.n	8025cd4 <np_cmd_fw_update_data+0x358>
        prog->bytes_written == prog->len)
 8025cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cbc:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cc0:	3310      	adds	r3, #16
 8025cc2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    if (prog->bytes_written - prog->bytes_ack >= prog->page_size ||
 8025ccc:	4299      	cmp	r1, r3
 8025cce:	bf08      	it	eq
 8025cd0:	4290      	cmpeq	r0, r2
 8025cd2:	d11b      	bne.n	8025d0c <np_cmd_fw_update_data+0x390>
    {
        if (np_send_write_ack(prog->bytes_written))
 8025cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cd6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cda:	3310      	adds	r3, #16
 8025cdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025ce0:	4610      	mov	r0, r2
 8025ce2:	4619      	mov	r1, r3
 8025ce4:	f7fe fbca 	bl	802447c <np_send_write_ack>
 8025ce8:	4603      	mov	r3, r0
 8025cea:	2b00      	cmp	r3, #0
 8025cec:	d002      	beq.n	8025cf4 <np_cmd_fw_update_data+0x378>
            return -1;
 8025cee:	f04f 33ff 	mov.w	r3, #4294967295
 8025cf2:	e02c      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
        prog->bytes_ack = prog->bytes_written;
 8025cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025cf6:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025cfa:	3310      	adds	r3, #16
 8025cfc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d02:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025d06:	3310      	adds	r3, #16
 8025d08:	e9c3 0100 	strd	r0, r1, [r3]
    }

    if (prog->bytes_written > prog->len)
 8025d0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d0e:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025d12:	3310      	adds	r3, #16
 8025d14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025d18:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8025d1a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8025d1e:	4290      	cmp	r0, r2
 8025d20:	eb71 0303 	sbcs.w	r3, r1, r3
 8025d24:	d212      	bcs.n	8025d4c <np_cmd_fw_update_data+0x3d0>
    {
        ERROR_PRINT("实际写入数据长度 0x%" PRIx64
 8025d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d28:	f503 5308 	add.w	r3, r3, #8704	; 0x2200
 8025d2c:	3310      	adds	r3, #16
 8025d2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8025d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8025d34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8025d38:	e9cd 2300 	strd	r2, r3, [sp]
 8025d3c:	4602      	mov	r2, r0
 8025d3e:	460b      	mov	r3, r1
 8025d40:	4805      	ldr	r0, [pc, #20]	; (8025d58 <np_cmd_fw_update_data+0x3dc>)
 8025d42:	f00b fcb5 	bl	80316b0 <iprintf>
            " 超过 0x%" PRIx64 "\r\n", prog->bytes_written, prog->len);
        return NP_ERR_LEN_EXCEEDED;
 8025d46:	f06f 036e 	mvn.w	r3, #110	; 0x6e
 8025d4a:	e000      	b.n	8025d4e <np_cmd_fw_update_data+0x3d2>
    }

    return 0;
 8025d4c:	2300      	movs	r3, #0
}
 8025d4e:	4618      	mov	r0, r3
 8025d50:	3794      	adds	r7, #148	; 0x94
 8025d52:	46bd      	mov	sp, r7
 8025d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d58:	08033210 	.word	0x08033210

08025d5c <np_cmd_fw_update_end>:


// 固件更新结束命令
static int np_cmd_fw_update_end(np_prog_t *prog)
{
 8025d5c:	b580      	push	{r7, lr}
 8025d5e:	b084      	sub	sp, #16
 8025d60:	af00      	add	r7, sp, #0
 8025d62:	6078      	str	r0, [r7, #4]
    boot_config_t boot_config;

    prog->addr_is_set = 0;
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	2200      	movs	r2, #0
 8025d68:	631a      	str	r2, [r3, #48]	; 0x30

    if (prog->page.offset)
 8025d6a:	687b      	ldr	r3, [r7, #4]
 8025d6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	d00b      	beq.n	8025d90 <np_cmd_fw_update_end+0x34>
    {
        ERROR_PRINT("未写入长度为 0x%lx 的数据\r\n",
 8025d78:	687b      	ldr	r3, [r7, #4]
 8025d7a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025d7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8025d82:	4619      	mov	r1, r3
 8025d84:	481d      	ldr	r0, [pc, #116]	; (8025dfc <np_cmd_fw_update_end+0xa0>)
 8025d86:	f00b fc93 	bl	80316b0 <iprintf>
            prog->page.offset);
        return NP_ERR_NAND_WR;
 8025d8a:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8025d8e:	e030      	b.n	8025df2 <np_cmd_fw_update_end+0x96>
    }

    if (np_boot_config_read(&boot_config))
 8025d90:	f107 030c 	add.w	r3, r7, #12
 8025d94:	4618      	mov	r0, r3
 8025d96:	f7ff fc7d 	bl	8025694 <np_boot_config_read>
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	2b00      	cmp	r3, #0
 8025d9e:	d002      	beq.n	8025da6 <np_cmd_fw_update_end+0x4a>
        return NP_ERR_INTERNAL;
 8025da0:	f04f 33ff 	mov.w	r3, #4294967295
 8025da4:	e025      	b.n	8025df2 <np_cmd_fw_update_end+0x96>

    if (prog->active_image == 0xff)
 8025da6:	687b      	ldr	r3, [r7, #4]
 8025da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025dac:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025db0:	2bff      	cmp	r3, #255	; 0xff
 8025db2:	d105      	bne.n	8025dc0 <np_cmd_fw_update_end+0x64>
        prog->active_image = boot_config.active_image;
 8025db4:	7b3a      	ldrb	r2, [r7, #12]
 8025db6:	687b      	ldr	r3, [r7, #4]
 8025db8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025dbc:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
    boot_config.active_image = prog->active_image ? 0 : 1;
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025dc6:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 8025dca:	2b00      	cmp	r3, #0
 8025dcc:	bf0c      	ite	eq
 8025dce:	2301      	moveq	r3, #1
 8025dd0:	2300      	movne	r3, #0
 8025dd2:	b2db      	uxtb	r3, r3
 8025dd4:	733b      	strb	r3, [r7, #12]
    if (np_boot_config_write(&boot_config))
 8025dd6:	f107 030c 	add.w	r3, r7, #12
 8025dda:	4618      	mov	r0, r3
 8025ddc:	f7ff fc70 	bl	80256c0 <np_boot_config_write>
 8025de0:	4603      	mov	r3, r0
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	d002      	beq.n	8025dec <np_cmd_fw_update_end+0x90>
        return NP_ERR_INTERNAL;
 8025de6:	f04f 33ff 	mov.w	r3, #4294967295
 8025dea:	e002      	b.n	8025df2 <np_cmd_fw_update_end+0x96>

    return np_send_ok_status();
 8025dec:	f7fd fece 	bl	8023b8c <np_send_ok_status>
 8025df0:	4603      	mov	r3, r0
}
 8025df2:	4618      	mov	r0, r3
 8025df4:	3710      	adds	r7, #16
 8025df6:	46bd      	mov	sp, r7
 8025df8:	bd80      	pop	{r7, pc}
 8025dfa:	bf00      	nop
 8025dfc:	08033248 	.word	0x08033248

08025e00 <np_cmd_fw_update>:

// 固件更新命令
static int np_cmd_fw_update(np_prog_t *prog)
{
 8025e00:	b580      	push	{r7, lr}
 8025e02:	b084      	sub	sp, #16
 8025e04:	af00      	add	r7, sp, #0
 8025e06:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd = (np_cmd_t *)prog->rx_buf;
 8025e08:	687b      	ldr	r3, [r7, #4]
 8025e0a:	681b      	ldr	r3, [r3, #0]
 8025e0c:	60bb      	str	r3, [r7, #8]
    int ret = 0;
 8025e0e:	2300      	movs	r3, #0
 8025e10:	60fb      	str	r3, [r7, #12]

    switch (cmd->code)
 8025e12:	68bb      	ldr	r3, [r7, #8]
 8025e14:	781b      	ldrb	r3, [r3, #0]
 8025e16:	2b0c      	cmp	r3, #12
 8025e18:	d013      	beq.n	8025e42 <np_cmd_fw_update+0x42>
 8025e1a:	2b0c      	cmp	r3, #12
 8025e1c:	dc19      	bgt.n	8025e52 <np_cmd_fw_update+0x52>
 8025e1e:	2b0a      	cmp	r3, #10
 8025e20:	d002      	beq.n	8025e28 <np_cmd_fw_update+0x28>
 8025e22:	2b0b      	cmp	r3, #11
 8025e24:	d008      	beq.n	8025e38 <np_cmd_fw_update+0x38>
    case NP_CMD_FW_UPDATE_E:
        ret = np_cmd_fw_update_end(prog);
        led_wr_set(false);
        break;
    default:
        break;
 8025e26:	e014      	b.n	8025e52 <np_cmd_fw_update+0x52>
        led_wr_set(true);
 8025e28:	2001      	movs	r0, #1
 8025e2a:	f7fd fd0b 	bl	8023844 <led_wr_set>
        ret = np_cmd_fw_update_start(prog);
 8025e2e:	6878      	ldr	r0, [r7, #4]
 8025e30:	f7ff fcaa 	bl	8025788 <np_cmd_fw_update_start>
 8025e34:	60f8      	str	r0, [r7, #12]
        break;
 8025e36:	e00d      	b.n	8025e54 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_data(prog);
 8025e38:	6878      	ldr	r0, [r7, #4]
 8025e3a:	f7ff fd9f 	bl	802597c <np_cmd_fw_update_data>
 8025e3e:	60f8      	str	r0, [r7, #12]
        break;
 8025e40:	e008      	b.n	8025e54 <np_cmd_fw_update+0x54>
        ret = np_cmd_fw_update_end(prog);
 8025e42:	6878      	ldr	r0, [r7, #4]
 8025e44:	f7ff ff8a 	bl	8025d5c <np_cmd_fw_update_end>
 8025e48:	60f8      	str	r0, [r7, #12]
        led_wr_set(false);
 8025e4a:	2000      	movs	r0, #0
 8025e4c:	f7fd fcfa 	bl	8023844 <led_wr_set>
        break;
 8025e50:	e000      	b.n	8025e54 <np_cmd_fw_update+0x54>
        break;
 8025e52:	bf00      	nop
    }

    if (ret < 0)
 8025e54:	68fb      	ldr	r3, [r7, #12]
 8025e56:	2b00      	cmp	r3, #0
 8025e58:	da02      	bge.n	8025e60 <np_cmd_fw_update+0x60>
        led_wr_set(false);
 8025e5a:	2000      	movs	r0, #0
 8025e5c:	f7fd fcf2 	bl	8023844 <led_wr_set>

    return ret;
 8025e60:	68fb      	ldr	r3, [r7, #12]
}
 8025e62:	4618      	mov	r0, r3
 8025e64:	3710      	adds	r7, #16
 8025e66:	46bd      	mov	sp, r7
 8025e68:	bd80      	pop	{r7, pc}

08025e6a <np_cmd_is_valid>:
    { NP_CMD_FW_UPDATE_E, 0, np_cmd_fw_update },                 // 固件更新结束命令
};

// 检查命令是否有效
static bool np_cmd_is_valid(np_cmd_code_t code)
{
 8025e6a:	b480      	push	{r7}
 8025e6c:	b083      	sub	sp, #12
 8025e6e:	af00      	add	r7, sp, #0
 8025e70:	4603      	mov	r3, r0
 8025e72:	71fb      	strb	r3, [r7, #7]
    return code >= 0 && code < NP_CMD_NAND_LAST;
 8025e74:	79fb      	ldrb	r3, [r7, #7]
 8025e76:	2b0c      	cmp	r3, #12
 8025e78:	bf94      	ite	ls
 8025e7a:	2301      	movls	r3, #1
 8025e7c:	2300      	movhi	r3, #0
 8025e7e:	b2db      	uxtb	r3, r3
}
 8025e80:	4618      	mov	r0, r3
 8025e82:	370c      	adds	r7, #12
 8025e84:	46bd      	mov	sp, r7
 8025e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e8a:	4770      	bx	lr

08025e8c <np_cmd_handler>:

// 命令处理函数
static int np_cmd_handler(np_prog_t *prog)
{
 8025e8c:	b580      	push	{r7, lr}
 8025e8e:	b084      	sub	sp, #16
 8025e90:	af00      	add	r7, sp, #0
 8025e92:	6078      	str	r0, [r7, #4]
    np_cmd_t *cmd;

    if (prog->rx_buf_len < sizeof(np_cmd_t))
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	685b      	ldr	r3, [r3, #4]
 8025e98:	2b00      	cmp	r3, #0
 8025e9a:	d108      	bne.n	8025eae <np_cmd_handler+0x22>
    {
        ERROR_PRINT("命令长度错误：%lu\r\n",
 8025e9c:	687b      	ldr	r3, [r7, #4]
 8025e9e:	685b      	ldr	r3, [r3, #4]
 8025ea0:	4619      	mov	r1, r3
 8025ea2:	4823      	ldr	r0, [pc, #140]	; (8025f30 <np_cmd_handler+0xa4>)
 8025ea4:	f00b fc04 	bl	80316b0 <iprintf>
            prog->rx_buf_len);
        return NP_ERR_LEN_INVALID;
 8025ea8:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 8025eac:	e03b      	b.n	8025f26 <np_cmd_handler+0x9a>
    }
    cmd = (np_cmd_t *)prog->rx_buf;
 8025eae:	687b      	ldr	r3, [r7, #4]
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	60fb      	str	r3, [r7, #12]

    if (!np_cmd_is_valid(cmd->code))
 8025eb4:	68fb      	ldr	r3, [r7, #12]
 8025eb6:	781b      	ldrb	r3, [r3, #0]
 8025eb8:	4618      	mov	r0, r3
 8025eba:	f7ff ffd6 	bl	8025e6a <np_cmd_is_valid>
 8025ebe:	4603      	mov	r3, r0
 8025ec0:	f083 0301 	eor.w	r3, r3, #1
 8025ec4:	b2db      	uxtb	r3, r3
 8025ec6:	2b00      	cmp	r3, #0
 8025ec8:	d008      	beq.n	8025edc <np_cmd_handler+0x50>
    {
        ERROR_PRINT("无效的命令码：%d\r\n", cmd->code);
 8025eca:	68fb      	ldr	r3, [r7, #12]
 8025ecc:	781b      	ldrb	r3, [r3, #0]
 8025ece:	4619      	mov	r1, r3
 8025ed0:	4818      	ldr	r0, [pc, #96]	; (8025f34 <np_cmd_handler+0xa8>)
 8025ed2:	f00b fbed 	bl	80316b0 <iprintf>
        return NP_ERR_CMD_INVALID;
 8025ed6:	f06f 036b 	mvn.w	r3, #107	; 0x6b
 8025eda:	e024      	b.n	8025f26 <np_cmd_handler+0x9a>
    }

    if (!prog->chip_is_conf && cmd_handler[cmd->code].is_chip_cmd)
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025ee0:	2b00      	cmp	r3, #0
 8025ee2:	d112      	bne.n	8025f0a <np_cmd_handler+0x7e>
 8025ee4:	68fb      	ldr	r3, [r7, #12]
 8025ee6:	781b      	ldrb	r3, [r3, #0]
 8025ee8:	4619      	mov	r1, r3
 8025eea:	4a13      	ldr	r2, [pc, #76]	; (8025f38 <np_cmd_handler+0xac>)
 8025eec:	460b      	mov	r3, r1
 8025eee:	005b      	lsls	r3, r3, #1
 8025ef0:	440b      	add	r3, r1
 8025ef2:	009b      	lsls	r3, r3, #2
 8025ef4:	4413      	add	r3, r2
 8025ef6:	3304      	adds	r3, #4
 8025ef8:	781b      	ldrb	r3, [r3, #0]
 8025efa:	2b00      	cmp	r3, #0
 8025efc:	d005      	beq.n	8025f0a <np_cmd_handler+0x7e>
    {
        ERROR_PRINT("芯片未配置\r\n");
 8025efe:	480f      	ldr	r0, [pc, #60]	; (8025f3c <np_cmd_handler+0xb0>)
 8025f00:	f00b fc3c 	bl	803177c <puts>
        return NP_ERR_CHIP_NOT_CONF;
 8025f04:	f06f 0369 	mvn.w	r3, #105	; 0x69
 8025f08:	e00d      	b.n	8025f26 <np_cmd_handler+0x9a>
    }

    return cmd_handler[cmd->code].exec(prog);
 8025f0a:	68fb      	ldr	r3, [r7, #12]
 8025f0c:	781b      	ldrb	r3, [r3, #0]
 8025f0e:	4619      	mov	r1, r3
 8025f10:	4a09      	ldr	r2, [pc, #36]	; (8025f38 <np_cmd_handler+0xac>)
 8025f12:	460b      	mov	r3, r1
 8025f14:	005b      	lsls	r3, r3, #1
 8025f16:	440b      	add	r3, r1
 8025f18:	009b      	lsls	r3, r3, #2
 8025f1a:	4413      	add	r3, r2
 8025f1c:	3308      	adds	r3, #8
 8025f1e:	681b      	ldr	r3, [r3, #0]
 8025f20:	6878      	ldr	r0, [r7, #4]
 8025f22:	4798      	blx	r3
 8025f24:	4603      	mov	r3, r0
}
 8025f26:	4618      	mov	r0, r3
 8025f28:	3710      	adds	r7, #16
 8025f2a:	46bd      	mov	sp, r7
 8025f2c:	bd80      	pop	{r7, pc}
 8025f2e:	bf00      	nop
 8025f30:	08033274 	.word	0x08033274
 8025f34:	08033298 	.word	0x08033298
 8025f38:	2000004c 	.word	0x2000004c
 8025f3c:	080332bc 	.word	0x080332bc

08025f40 <np_packet_handler>:

// 数据包处理函数
static void np_packet_handler(np_prog_t *prog)
{
 8025f40:	b580      	push	{r7, lr}
 8025f42:	b084      	sub	sp, #16
 8025f44:	af00      	add	r7, sp, #0
 8025f46:	6078      	str	r0, [r7, #4]
    int ret;

    do
    {
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025f48:	4b12      	ldr	r3, [pc, #72]	; (8025f94 <np_packet_handler+0x54>)
 8025f4a:	681b      	ldr	r3, [r3, #0]
 8025f4c:	689b      	ldr	r3, [r3, #8]
 8025f4e:	687a      	ldr	r2, [r7, #4]
 8025f50:	4610      	mov	r0, r2
 8025f52:	4798      	blx	r3
 8025f54:	4602      	mov	r2, r0
 8025f56:	687b      	ldr	r3, [r7, #4]
 8025f58:	605a      	str	r2, [r3, #4]
        if (!prog->rx_buf_len)
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	685b      	ldr	r3, [r3, #4]
 8025f5e:	2b00      	cmp	r3, #0
 8025f60:	d012      	beq.n	8025f88 <np_packet_handler+0x48>
            break;

        ret = np_cmd_handler(prog);
 8025f62:	6878      	ldr	r0, [r7, #4]
 8025f64:	f7ff ff92 	bl	8025e8c <np_cmd_handler>
 8025f68:	60f8      	str	r0, [r7, #12]

        np_comm_cb->consume();
 8025f6a:	4b0a      	ldr	r3, [pc, #40]	; (8025f94 <np_packet_handler+0x54>)
 8025f6c:	681b      	ldr	r3, [r3, #0]
 8025f6e:	68db      	ldr	r3, [r3, #12]
 8025f70:	4798      	blx	r3

        if (ret < 0)
 8025f72:	68fb      	ldr	r3, [r7, #12]
 8025f74:	2b00      	cmp	r3, #0
 8025f76:	dae7      	bge.n	8025f48 <np_packet_handler+0x8>
            np_send_error(-ret);
 8025f78:	68fb      	ldr	r3, [r7, #12]
 8025f7a:	b2db      	uxtb	r3, r3
 8025f7c:	425b      	negs	r3, r3
 8025f7e:	b2db      	uxtb	r3, r3
 8025f80:	4618      	mov	r0, r3
 8025f82:	f7fd fe1f 	bl	8023bc4 <np_send_error>
        prog->rx_buf_len = np_comm_cb->peek(&prog->rx_buf);
 8025f86:	e7df      	b.n	8025f48 <np_packet_handler+0x8>
            break;
 8025f88:	bf00      	nop
    }
    while (1);
}
 8025f8a:	bf00      	nop
 8025f8c:	3710      	adds	r7, #16
 8025f8e:	46bd      	mov	sp, r7
 8025f90:	bd80      	pop	{r7, pc}
 8025f92:	bf00      	nop
 8025f94:	20000cb8 	.word	0x20000cb8

08025f98 <np_nand_handler>:

// NAND 处理函数
static void np_nand_handler(np_prog_t *prog)
{
 8025f98:	b580      	push	{r7, lr}
 8025f9a:	b082      	sub	sp, #8
 8025f9c:	af00      	add	r7, sp, #0
 8025f9e:	6078      	str	r0, [r7, #4]
    if (prog->nand_wr_in_progress)
 8025fa0:	687b      	ldr	r3, [r7, #4]
 8025fa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025fa6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d008      	beq.n	8025fc0 <np_nand_handler+0x28>
    {
        if (np_nand_handle_status(prog))
 8025fae:	6878      	ldr	r0, [r7, #4]
 8025fb0:	f7fe fc28 	bl	8024804 <np_nand_handle_status>
 8025fb4:	4603      	mov	r3, r0
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	d002      	beq.n	8025fc0 <np_nand_handler+0x28>
            np_send_error(NP_ERR_NAND_WR);
 8025fba:	2099      	movs	r0, #153	; 0x99
 8025fbc:	f7fd fe02 	bl	8023bc4 <np_send_error>
    }
}
 8025fc0:	bf00      	nop
 8025fc2:	3708      	adds	r7, #8
 8025fc4:	46bd      	mov	sp, r7
 8025fc6:	bd80      	pop	{r7, pc}

08025fc8 <np_init>:

// NP 初始化函数
void np_init()
{
 8025fc8:	b480      	push	{r7}
 8025fca:	af00      	add	r7, sp, #0
    prog.active_image = 0xff;
 8025fcc:	4b05      	ldr	r3, [pc, #20]	; (8025fe4 <np_init+0x1c>)
 8025fce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8025fd2:	22ff      	movs	r2, #255	; 0xff
 8025fd4:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
}
 8025fd8:	bf00      	nop
 8025fda:	46bd      	mov	sp, r7
 8025fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe0:	4770      	bx	lr
 8025fe2:	bf00      	nop
 8025fe4:	20000cc0 	.word	0x20000cc0

08025fe8 <np_handler>:

// NP 处理函数
void np_handler()
{
 8025fe8:	b580      	push	{r7, lr}
 8025fea:	af00      	add	r7, sp, #0
    np_packet_handler(&prog);
 8025fec:	4803      	ldr	r0, [pc, #12]	; (8025ffc <np_handler+0x14>)
 8025fee:	f7ff ffa7 	bl	8025f40 <np_packet_handler>
    np_nand_handler(&prog);
 8025ff2:	4802      	ldr	r0, [pc, #8]	; (8025ffc <np_handler+0x14>)
 8025ff4:	f7ff ffd0 	bl	8025f98 <np_nand_handler>
}
 8025ff8:	bf00      	nop
 8025ffa:	bd80      	pop	{r7, pc}
 8025ffc:	20000cc0 	.word	0x20000cc0

08026000 <np_comm_register>:

// 注册 NP 通信回调函数
int np_comm_register(np_comm_cb_t *cb)
{
 8026000:	b480      	push	{r7}
 8026002:	b083      	sub	sp, #12
 8026004:	af00      	add	r7, sp, #0
 8026006:	6078      	str	r0, [r7, #4]
    np_comm_cb = cb;
 8026008:	4a04      	ldr	r2, [pc, #16]	; (802601c <np_comm_register+0x1c>)
 802600a:	687b      	ldr	r3, [r7, #4]
 802600c:	6013      	str	r3, [r2, #0]

    return 0;
 802600e:	2300      	movs	r3, #0
}
 8026010:	4618      	mov	r0, r3
 8026012:	370c      	adds	r7, #12
 8026014:	46bd      	mov	sp, r7
 8026016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802601a:	4770      	bx	lr
 802601c:	20000cb8 	.word	0x20000cb8

08026020 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8026020:	b580      	push	{r7, lr}
 8026022:	b086      	sub	sp, #24
 8026024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8026026:	1d3b      	adds	r3, r7, #4
 8026028:	2200      	movs	r2, #0
 802602a:	601a      	str	r2, [r3, #0]
 802602c:	605a      	str	r2, [r3, #4]
 802602e:	609a      	str	r2, [r3, #8]
 8026030:	60da      	str	r2, [r3, #12]
 8026032:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8026034:	2300      	movs	r3, #0
 8026036:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8026038:	4b24      	ldr	r3, [pc, #144]	; (80260cc <MX_RTC_Init+0xac>)
 802603a:	4a25      	ldr	r2, [pc, #148]	; (80260d0 <MX_RTC_Init+0xb0>)
 802603c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 802603e:	4b23      	ldr	r3, [pc, #140]	; (80260cc <MX_RTC_Init+0xac>)
 8026040:	2200      	movs	r2, #0
 8026042:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8026044:	4b21      	ldr	r3, [pc, #132]	; (80260cc <MX_RTC_Init+0xac>)
 8026046:	227f      	movs	r2, #127	; 0x7f
 8026048:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 802604a:	4b20      	ldr	r3, [pc, #128]	; (80260cc <MX_RTC_Init+0xac>)
 802604c:	22ff      	movs	r2, #255	; 0xff
 802604e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8026050:	4b1e      	ldr	r3, [pc, #120]	; (80260cc <MX_RTC_Init+0xac>)
 8026052:	2200      	movs	r2, #0
 8026054:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8026056:	4b1d      	ldr	r3, [pc, #116]	; (80260cc <MX_RTC_Init+0xac>)
 8026058:	2200      	movs	r2, #0
 802605a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 802605c:	4b1b      	ldr	r3, [pc, #108]	; (80260cc <MX_RTC_Init+0xac>)
 802605e:	2200      	movs	r2, #0
 8026060:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8026062:	481a      	ldr	r0, [pc, #104]	; (80260cc <MX_RTC_Init+0xac>)
 8026064:	f004 fcdc 	bl	802aa20 <HAL_RTC_Init>
 8026068:	4603      	mov	r3, r0
 802606a:	2b00      	cmp	r3, #0
 802606c:	d001      	beq.n	8026072 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 802606e:	f7fd fcef 	bl	8023a50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8026072:	2300      	movs	r3, #0
 8026074:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8026076:	2300      	movs	r3, #0
 8026078:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 802607a:	2300      	movs	r3, #0
 802607c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 802607e:	2300      	movs	r3, #0
 8026080:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8026082:	2300      	movs	r3, #0
 8026084:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8026086:	1d3b      	adds	r3, r7, #4
 8026088:	2201      	movs	r2, #1
 802608a:	4619      	mov	r1, r3
 802608c:	480f      	ldr	r0, [pc, #60]	; (80260cc <MX_RTC_Init+0xac>)
 802608e:	f004 fd3d 	bl	802ab0c <HAL_RTC_SetTime>
 8026092:	4603      	mov	r3, r0
 8026094:	2b00      	cmp	r3, #0
 8026096:	d001      	beq.n	802609c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8026098:	f7fd fcda 	bl	8023a50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 802609c:	2301      	movs	r3, #1
 802609e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80260a0:	2301      	movs	r3, #1
 80260a2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80260a4:	2301      	movs	r3, #1
 80260a6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80260a8:	2300      	movs	r3, #0
 80260aa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80260ac:	463b      	mov	r3, r7
 80260ae:	2201      	movs	r2, #1
 80260b0:	4619      	mov	r1, r3
 80260b2:	4806      	ldr	r0, [pc, #24]	; (80260cc <MX_RTC_Init+0xac>)
 80260b4:	f004 fdc4 	bl	802ac40 <HAL_RTC_SetDate>
 80260b8:	4603      	mov	r3, r0
 80260ba:	2b00      	cmp	r3, #0
 80260bc:	d001      	beq.n	80260c2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80260be:	f7fd fcc7 	bl	8023a50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80260c2:	bf00      	nop
 80260c4:	3718      	adds	r7, #24
 80260c6:	46bd      	mov	sp, r7
 80260c8:	bd80      	pop	{r7, pc}
 80260ca:	bf00      	nop
 80260cc:	20005110 	.word	0x20005110
 80260d0:	40002800 	.word	0x40002800

080260d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80260d4:	b580      	push	{r7, lr}
 80260d6:	b086      	sub	sp, #24
 80260d8:	af00      	add	r7, sp, #0
 80260da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80260dc:	f107 0308 	add.w	r3, r7, #8
 80260e0:	2200      	movs	r2, #0
 80260e2:	601a      	str	r2, [r3, #0]
 80260e4:	605a      	str	r2, [r3, #4]
 80260e6:	609a      	str	r2, [r3, #8]
 80260e8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	681b      	ldr	r3, [r3, #0]
 80260ee:	4a0c      	ldr	r2, [pc, #48]	; (8026120 <HAL_RTC_MspInit+0x4c>)
 80260f0:	4293      	cmp	r3, r2
 80260f2:	d111      	bne.n	8026118 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80260f4:	2302      	movs	r3, #2
 80260f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80260f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80260fc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80260fe:	f107 0308 	add.w	r3, r7, #8
 8026102:	4618      	mov	r0, r3
 8026104:	f004 fbaa 	bl	802a85c <HAL_RCCEx_PeriphCLKConfig>
 8026108:	4603      	mov	r3, r0
 802610a:	2b00      	cmp	r3, #0
 802610c:	d001      	beq.n	8026112 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 802610e:	f7fd fc9f 	bl	8023a50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8026112:	4b04      	ldr	r3, [pc, #16]	; (8026124 <HAL_RTC_MspInit+0x50>)
 8026114:	2201      	movs	r2, #1
 8026116:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8026118:	bf00      	nop
 802611a:	3718      	adds	r7, #24
 802611c:	46bd      	mov	sp, r7
 802611e:	bd80      	pop	{r7, pc}
 8026120:	40002800 	.word	0x40002800
 8026124:	42470e3c 	.word	0x42470e3c

08026128 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8026128:	b580      	push	{r7, lr}
 802612a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802612c:	4b17      	ldr	r3, [pc, #92]	; (802618c <MX_SPI1_Init+0x64>)
 802612e:	4a18      	ldr	r2, [pc, #96]	; (8026190 <MX_SPI1_Init+0x68>)
 8026130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8026132:	4b16      	ldr	r3, [pc, #88]	; (802618c <MX_SPI1_Init+0x64>)
 8026134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802613a:	4b14      	ldr	r3, [pc, #80]	; (802618c <MX_SPI1_Init+0x64>)
 802613c:	2200      	movs	r2, #0
 802613e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026140:	4b12      	ldr	r3, [pc, #72]	; (802618c <MX_SPI1_Init+0x64>)
 8026142:	2200      	movs	r2, #0
 8026144:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026146:	4b11      	ldr	r3, [pc, #68]	; (802618c <MX_SPI1_Init+0x64>)
 8026148:	2202      	movs	r2, #2
 802614a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802614c:	4b0f      	ldr	r3, [pc, #60]	; (802618c <MX_SPI1_Init+0x64>)
 802614e:	2201      	movs	r2, #1
 8026150:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8026152:	4b0e      	ldr	r3, [pc, #56]	; (802618c <MX_SPI1_Init+0x64>)
 8026154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026158:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802615a:	4b0c      	ldr	r3, [pc, #48]	; (802618c <MX_SPI1_Init+0x64>)
 802615c:	2200      	movs	r2, #0
 802615e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026160:	4b0a      	ldr	r3, [pc, #40]	; (802618c <MX_SPI1_Init+0x64>)
 8026162:	2200      	movs	r2, #0
 8026164:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026166:	4b09      	ldr	r3, [pc, #36]	; (802618c <MX_SPI1_Init+0x64>)
 8026168:	2200      	movs	r2, #0
 802616a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802616c:	4b07      	ldr	r3, [pc, #28]	; (802618c <MX_SPI1_Init+0x64>)
 802616e:	2200      	movs	r2, #0
 8026170:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8026172:	4b06      	ldr	r3, [pc, #24]	; (802618c <MX_SPI1_Init+0x64>)
 8026174:	220a      	movs	r2, #10
 8026176:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026178:	4804      	ldr	r0, [pc, #16]	; (802618c <MX_SPI1_Init+0x64>)
 802617a:	f004 fe86 	bl	802ae8a <HAL_SPI_Init>
 802617e:	4603      	mov	r3, r0
 8026180:	2b00      	cmp	r3, #0
 8026182:	d001      	beq.n	8026188 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8026184:	f7fd fc64 	bl	8023a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8026188:	bf00      	nop
 802618a:	bd80      	pop	{r7, pc}
 802618c:	20005130 	.word	0x20005130
 8026190:	40013000 	.word	0x40013000

08026194 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8026194:	b580      	push	{r7, lr}
 8026196:	b08a      	sub	sp, #40	; 0x28
 8026198:	af00      	add	r7, sp, #0
 802619a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802619c:	f107 0314 	add.w	r3, r7, #20
 80261a0:	2200      	movs	r2, #0
 80261a2:	601a      	str	r2, [r3, #0]
 80261a4:	605a      	str	r2, [r3, #4]
 80261a6:	609a      	str	r2, [r3, #8]
 80261a8:	60da      	str	r2, [r3, #12]
 80261aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80261ac:	687b      	ldr	r3, [r7, #4]
 80261ae:	681b      	ldr	r3, [r3, #0]
 80261b0:	4a2c      	ldr	r2, [pc, #176]	; (8026264 <HAL_SPI_MspInit+0xd0>)
 80261b2:	4293      	cmp	r3, r2
 80261b4:	d151      	bne.n	802625a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80261b6:	2300      	movs	r3, #0
 80261b8:	613b      	str	r3, [r7, #16]
 80261ba:	4b2b      	ldr	r3, [pc, #172]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80261be:	4a2a      	ldr	r2, [pc, #168]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80261c4:	6453      	str	r3, [r2, #68]	; 0x44
 80261c6:	4b28      	ldr	r3, [pc, #160]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80261ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80261ce:	613b      	str	r3, [r7, #16]
 80261d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80261d2:	2300      	movs	r3, #0
 80261d4:	60fb      	str	r3, [r7, #12]
 80261d6:	4b24      	ldr	r3, [pc, #144]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261da:	4a23      	ldr	r2, [pc, #140]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261dc:	f043 0301 	orr.w	r3, r3, #1
 80261e0:	6313      	str	r3, [r2, #48]	; 0x30
 80261e2:	4b21      	ldr	r3, [pc, #132]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261e6:	f003 0301 	and.w	r3, r3, #1
 80261ea:	60fb      	str	r3, [r7, #12]
 80261ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80261ee:	2300      	movs	r3, #0
 80261f0:	60bb      	str	r3, [r7, #8]
 80261f2:	4b1d      	ldr	r3, [pc, #116]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261f6:	4a1c      	ldr	r2, [pc, #112]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 80261f8:	f043 0302 	orr.w	r3, r3, #2
 80261fc:	6313      	str	r3, [r2, #48]	; 0x30
 80261fe:	4b1a      	ldr	r3, [pc, #104]	; (8026268 <HAL_SPI_MspInit+0xd4>)
 8026200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026202:	f003 0302 	and.w	r3, r3, #2
 8026206:	60bb      	str	r3, [r7, #8]
 8026208:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 802620a:	23c0      	movs	r3, #192	; 0xc0
 802620c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802620e:	2302      	movs	r3, #2
 8026210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026212:	2300      	movs	r3, #0
 8026214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026216:	2303      	movs	r3, #3
 8026218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802621a:	2305      	movs	r3, #5
 802621c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802621e:	f107 0314 	add.w	r3, r7, #20
 8026222:	4619      	mov	r1, r3
 8026224:	4811      	ldr	r0, [pc, #68]	; (802626c <HAL_SPI_MspInit+0xd8>)
 8026226:	f002 f84d 	bl	80282c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 802622a:	2308      	movs	r3, #8
 802622c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802622e:	2302      	movs	r3, #2
 8026230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026232:	2300      	movs	r3, #0
 8026234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026236:	2303      	movs	r3, #3
 8026238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802623a:	2305      	movs	r3, #5
 802623c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 802623e:	f107 0314 	add.w	r3, r7, #20
 8026242:	4619      	mov	r1, r3
 8026244:	480a      	ldr	r0, [pc, #40]	; (8026270 <HAL_SPI_MspInit+0xdc>)
 8026246:	f002 f83d 	bl	80282c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 802624a:	2200      	movs	r2, #0
 802624c:	2100      	movs	r1, #0
 802624e:	2023      	movs	r0, #35	; 0x23
 8026250:	f001 fbd5 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026254:	2023      	movs	r0, #35	; 0x23
 8026256:	f001 fbee 	bl	8027a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802625a:	bf00      	nop
 802625c:	3728      	adds	r7, #40	; 0x28
 802625e:	46bd      	mov	sp, r7
 8026260:	bd80      	pop	{r7, pc}
 8026262:	bf00      	nop
 8026264:	40013000 	.word	0x40013000
 8026268:	40023800 	.word	0x40023800
 802626c:	40020000 	.word	0x40020000
 8026270:	40020400 	.word	0x40020400

08026274 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8026274:	b580      	push	{r7, lr}
 8026276:	b082      	sub	sp, #8
 8026278:	af00      	add	r7, sp, #0
 802627a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 802627c:	687b      	ldr	r3, [r7, #4]
 802627e:	681b      	ldr	r3, [r3, #0]
 8026280:	4a0b      	ldr	r2, [pc, #44]	; (80262b0 <HAL_SPI_MspDeInit+0x3c>)
 8026282:	4293      	cmp	r3, r2
 8026284:	d110      	bne.n	80262a8 <HAL_SPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8026286:	4b0b      	ldr	r3, [pc, #44]	; (80262b4 <HAL_SPI_MspDeInit+0x40>)
 8026288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802628a:	4a0a      	ldr	r2, [pc, #40]	; (80262b4 <HAL_SPI_MspDeInit+0x40>)
 802628c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026290:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8026292:	21c0      	movs	r1, #192	; 0xc0
 8026294:	4808      	ldr	r0, [pc, #32]	; (80262b8 <HAL_SPI_MspDeInit+0x44>)
 8026296:	f002 f9b1 	bl	80285fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SPI1_SCK_GPIO_Port, SPI1_SCK_Pin);
 802629a:	2108      	movs	r1, #8
 802629c:	4807      	ldr	r0, [pc, #28]	; (80262bc <HAL_SPI_MspDeInit+0x48>)
 802629e:	f002 f9ad 	bl	80285fc <HAL_GPIO_DeInit>

    /* SPI1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80262a2:	2023      	movs	r0, #35	; 0x23
 80262a4:	f001 fbd5 	bl	8027a52 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80262a8:	bf00      	nop
 80262aa:	3708      	adds	r7, #8
 80262ac:	46bd      	mov	sp, r7
 80262ae:	bd80      	pop	{r7, pc}
 80262b0:	40013000 	.word	0x40013000
 80262b4:	40023800 	.word	0x40023800
 80262b8:	40020000 	.word	0x40020000
 80262bc:	40020400 	.word	0x40020400

080262c0 <spi_flash_gpio_init>:

static uint32_t flash_last_operation = FLASH_OP_EMPTY;
static uint32_t current_die = 0;

static void spi_flash_gpio_init()
{
 80262c0:	b580      	push	{r7, lr}
 80262c2:	b088      	sub	sp, #32
 80262c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80262c6:	f107 030c 	add.w	r3, r7, #12
 80262ca:	2200      	movs	r2, #0
 80262cc:	601a      	str	r2, [r3, #0]
 80262ce:	605a      	str	r2, [r3, #4]
 80262d0:	609a      	str	r2, [r3, #8]
 80262d2:	60da      	str	r2, [r3, #12]
 80262d4:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_ENABLE();
 80262d6:	2300      	movs	r3, #0
 80262d8:	60bb      	str	r3, [r7, #8]
 80262da:	4b33      	ldr	r3, [pc, #204]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 80262dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262de:	4a32      	ldr	r2, [pc, #200]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 80262e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80262e4:	6453      	str	r3, [r2, #68]	; 0x44
 80262e6:	4b30      	ldr	r3, [pc, #192]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 80262e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80262ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80262ee:	60bb      	str	r3, [r7, #8]
 80262f0:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80262f2:	2300      	movs	r3, #0
 80262f4:	607b      	str	r3, [r7, #4]
 80262f6:	4b2c      	ldr	r3, [pc, #176]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 80262f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262fa:	4a2b      	ldr	r2, [pc, #172]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 80262fc:	f043 0301 	orr.w	r3, r3, #1
 8026300:	6313      	str	r3, [r2, #48]	; 0x30
 8026302:	4b29      	ldr	r3, [pc, #164]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 8026304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026306:	f003 0301 	and.w	r3, r3, #1
 802630a:	607b      	str	r3, [r7, #4]
 802630c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802630e:	2300      	movs	r3, #0
 8026310:	603b      	str	r3, [r7, #0]
 8026312:	4b25      	ldr	r3, [pc, #148]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 8026314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026316:	4a24      	ldr	r2, [pc, #144]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 8026318:	f043 0302 	orr.w	r3, r3, #2
 802631c:	6313      	str	r3, [r2, #48]	; 0x30
 802631e:	4b22      	ldr	r3, [pc, #136]	; (80263a8 <spi_flash_gpio_init+0xe8>)
 8026320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026322:	f003 0302 	and.w	r3, r3, #2
 8026326:	603b      	str	r3, [r7, #0]
 8026328:	683b      	ldr	r3, [r7, #0]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 802632a:	2308      	movs	r3, #8
 802632c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802632e:	2302      	movs	r3, #2
 8026330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026332:	2300      	movs	r3, #0
 8026334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8026336:	2301      	movs	r3, #1
 8026338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802633a:	2305      	movs	r3, #5
 802633c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 802633e:	f107 030c 	add.w	r3, r7, #12
 8026342:	4619      	mov	r1, r3
 8026344:	4819      	ldr	r0, [pc, #100]	; (80263ac <spi_flash_gpio_init+0xec>)
 8026346:	f001 ffbd 	bl	80282c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 802634a:	2380      	movs	r3, #128	; 0x80
 802634c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802634e:	2302      	movs	r3, #2
 8026350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026352:	2300      	movs	r3, #0
 8026354:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026356:	2305      	movs	r3, #5
 8026358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802635a:	f107 030c 	add.w	r3, r7, #12
 802635e:	4619      	mov	r1, r3
 8026360:	4813      	ldr	r0, [pc, #76]	; (80263b0 <spi_flash_gpio_init+0xf0>)
 8026362:	f001 ffaf 	bl	80282c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8026366:	2340      	movs	r3, #64	; 0x40
 8026368:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802636a:	2300      	movs	r3, #0
 802636c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802636e:	2300      	movs	r3, #0
 8026370:	617b      	str	r3, [r7, #20]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026372:	2305      	movs	r3, #5
 8026374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026376:	f107 030c 	add.w	r3, r7, #12
 802637a:	4619      	mov	r1, r3
 802637c:	480c      	ldr	r0, [pc, #48]	; (80263b0 <spi_flash_gpio_init+0xf0>)
 802637e:	f001 ffa1 	bl	80282c4 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8026382:	2310      	movs	r3, #16
 8026384:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026386:	2301      	movs	r3, #1
 8026388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802638a:	2300      	movs	r3, #0
 802638c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 802638e:	2301      	movs	r3, #1
 8026390:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8026392:	f107 030c 	add.w	r3, r7, #12
 8026396:	4619      	mov	r1, r3
 8026398:	4805      	ldr	r0, [pc, #20]	; (80263b0 <spi_flash_gpio_init+0xf0>)
 802639a:	f001 ff93 	bl	80282c4 <HAL_GPIO_Init>
}
 802639e:	bf00      	nop
 80263a0:	3720      	adds	r7, #32
 80263a2:	46bd      	mov	sp, r7
 80263a4:	bd80      	pop	{r7, pc}
 80263a6:	bf00      	nop
 80263a8:	40023800 	.word	0x40023800
 80263ac:	40020400 	.word	0x40020400
 80263b0:	40020000 	.word	0x40020000

080263b4 <spi_flash_gpio_uninit>:

static void spi_flash_gpio_uninit()
{
 80263b4:	b580      	push	{r7, lr}
 80263b6:	b086      	sub	sp, #24
 80263b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80263ba:	1d3b      	adds	r3, r7, #4
 80263bc:	2200      	movs	r2, #0
 80263be:	601a      	str	r2, [r3, #0]
 80263c0:	605a      	str	r2, [r3, #4]
 80263c2:	609a      	str	r2, [r3, #8]
 80263c4:	60da      	str	r2, [r3, #12]
 80263c6:	611a      	str	r2, [r3, #16]

    __HAL_RCC_SPI1_CLK_DISABLE();
 80263c8:	4b1a      	ldr	r3, [pc, #104]	; (8026434 <spi_flash_gpio_uninit+0x80>)
 80263ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80263cc:	4a19      	ldr	r2, [pc, #100]	; (8026434 <spi_flash_gpio_uninit+0x80>)
 80263ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80263d2:	6453      	str	r3, [r2, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_CS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 80263d4:	2308      	movs	r3, #8
 80263d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80263d8:	2300      	movs	r3, #0
 80263da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263dc:	2300      	movs	r3, #0
 80263de:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80263e0:	2305      	movs	r3, #5
 80263e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80263e4:	1d3b      	adds	r3, r7, #4
 80263e6:	4619      	mov	r1, r3
 80263e8:	4813      	ldr	r0, [pc, #76]	; (8026438 <spi_flash_gpio_uninit+0x84>)
 80263ea:	f001 ff6b 	bl	80282c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80263ee:	2380      	movs	r3, #128	; 0x80
 80263f0:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263f2:	2300      	movs	r3, #0
 80263f4:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ__MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80263f6:	2305      	movs	r3, #5
 80263f8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80263fa:	1d3b      	adds	r3, r7, #4
 80263fc:	4619      	mov	r1, r3
 80263fe:	480f      	ldr	r0, [pc, #60]	; (802643c <spi_flash_gpio_uninit+0x88>)
 8026400:	f001 ff60 	bl	80282c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8026404:	2340      	movs	r3, #64	; 0x40
 8026406:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026408:	2300      	movs	r3, #0
 802640a:	60fb      	str	r3, [r7, #12]
//	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802640c:	2305      	movs	r3, #5
 802640e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026410:	1d3b      	adds	r3, r7, #4
 8026412:	4619      	mov	r1, r3
 8026414:	4809      	ldr	r0, [pc, #36]	; (802643c <spi_flash_gpio_uninit+0x88>)
 8026416:	f001 ff55 	bl	80282c4 <HAL_GPIO_Init>


    /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = SPI1_CS_Pin;
 802641a:	2310      	movs	r3, #16
 802641c:	607b      	str	r3, [r7, #4]
//    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802641e:	2300      	movs	r3, #0
 8026420:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8026422:	1d3b      	adds	r3, r7, #4
 8026424:	4619      	mov	r1, r3
 8026426:	4805      	ldr	r0, [pc, #20]	; (802643c <spi_flash_gpio_uninit+0x88>)
 8026428:	f001 ff4c 	bl	80282c4 <HAL_GPIO_Init>
}
 802642c:	bf00      	nop
 802642e:	3718      	adds	r7, #24
 8026430:	46bd      	mov	sp, r7
 8026432:	bd80      	pop	{r7, pc}
 8026434:	40023800 	.word	0x40023800
 8026438:	40020400 	.word	0x40020400
 802643c:	40020000 	.word	0x40020000

08026440 <spi_flash_select_chip>:

static inline void spi_flash_select_chip()
{
 8026440:	b580      	push	{r7, lr}
 8026442:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026444:	2200      	movs	r2, #0
 8026446:	2110      	movs	r1, #16
 8026448:	4802      	ldr	r0, [pc, #8]	; (8026454 <spi_flash_select_chip+0x14>)
 802644a:	f002 f9d3 	bl	80287f4 <HAL_GPIO_WritePin>
}
 802644e:	bf00      	nop
 8026450:	bd80      	pop	{r7, pc}
 8026452:	bf00      	nop
 8026454:	40020000 	.word	0x40020000

08026458 <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026458:	b580      	push	{r7, lr}
 802645a:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 802645c:	2201      	movs	r2, #1
 802645e:	2110      	movs	r1, #16
 8026460:	4802      	ldr	r0, [pc, #8]	; (802646c <spi_flash_deselect_chip+0x14>)
 8026462:	f002 f9c7 	bl	80287f4 <HAL_GPIO_WritePin>
}
 8026466:	bf00      	nop
 8026468:	bd80      	pop	{r7, pc}
 802646a:	bf00      	nop
 802646c:	40020000 	.word	0x40020000

08026470 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026470:	b480      	push	{r7}
 8026472:	b085      	sub	sp, #20
 8026474:	af00      	add	r7, sp, #0
 8026476:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026478:	4b1f      	ldr	r3, [pc, #124]	; (80264f8 <spi_flash_get_baud_rate_prescaler+0x88>)
 802647a:	681b      	ldr	r3, [r3, #0]
 802647c:	4a1f      	ldr	r2, [pc, #124]	; (80264fc <spi_flash_get_baud_rate_prescaler+0x8c>)
 802647e:	fba2 2303 	umull	r2, r3, r2, r3
 8026482:	099b      	lsrs	r3, r3, #6
 8026484:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026486:	68fb      	ldr	r3, [r7, #12]
 8026488:	085b      	lsrs	r3, r3, #1
 802648a:	687a      	ldr	r2, [r7, #4]
 802648c:	429a      	cmp	r2, r3
 802648e:	d301      	bcc.n	8026494 <spi_flash_get_baud_rate_prescaler+0x24>
        return SPI_BAUDRATEPRESCALER_2;
 8026490:	2300      	movs	r3, #0
 8026492:	e02a      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026494:	68fb      	ldr	r3, [r7, #12]
 8026496:	089b      	lsrs	r3, r3, #2
 8026498:	687a      	ldr	r2, [r7, #4]
 802649a:	429a      	cmp	r2, r3
 802649c:	d301      	bcc.n	80264a2 <spi_flash_get_baud_rate_prescaler+0x32>
        return SPI_BAUDRATEPRESCALER_4;
 802649e:	2308      	movs	r3, #8
 80264a0:	e023      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 80264a2:	68fb      	ldr	r3, [r7, #12]
 80264a4:	08db      	lsrs	r3, r3, #3
 80264a6:	687a      	ldr	r2, [r7, #4]
 80264a8:	429a      	cmp	r2, r3
 80264aa:	d301      	bcc.n	80264b0 <spi_flash_get_baud_rate_prescaler+0x40>
        return SPI_BAUDRATEPRESCALER_8;
 80264ac:	2310      	movs	r3, #16
 80264ae:	e01c      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 80264b0:	68fb      	ldr	r3, [r7, #12]
 80264b2:	091b      	lsrs	r3, r3, #4
 80264b4:	687a      	ldr	r2, [r7, #4]
 80264b6:	429a      	cmp	r2, r3
 80264b8:	d301      	bcc.n	80264be <spi_flash_get_baud_rate_prescaler+0x4e>
        return SPI_BAUDRATEPRESCALER_16;
 80264ba:	2318      	movs	r3, #24
 80264bc:	e015      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 80264be:	68fb      	ldr	r3, [r7, #12]
 80264c0:	095b      	lsrs	r3, r3, #5
 80264c2:	687a      	ldr	r2, [r7, #4]
 80264c4:	429a      	cmp	r2, r3
 80264c6:	d301      	bcc.n	80264cc <spi_flash_get_baud_rate_prescaler+0x5c>
        return SPI_BAUDRATEPRESCALER_32;
 80264c8:	2320      	movs	r3, #32
 80264ca:	e00e      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 80264cc:	68fb      	ldr	r3, [r7, #12]
 80264ce:	099b      	lsrs	r3, r3, #6
 80264d0:	687a      	ldr	r2, [r7, #4]
 80264d2:	429a      	cmp	r2, r3
 80264d4:	d301      	bcc.n	80264da <spi_flash_get_baud_rate_prescaler+0x6a>
        return SPI_BAUDRATEPRESCALER_64;
 80264d6:	2328      	movs	r3, #40	; 0x28
 80264d8:	e007      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	09db      	lsrs	r3, r3, #7
 80264de:	687a      	ldr	r2, [r7, #4]
 80264e0:	429a      	cmp	r2, r3
 80264e2:	d301      	bcc.n	80264e8 <spi_flash_get_baud_rate_prescaler+0x78>
        return SPI_BAUDRATEPRESCALER_128;
 80264e4:	2330      	movs	r3, #48	; 0x30
 80264e6:	e000      	b.n	80264ea <spi_flash_get_baud_rate_prescaler+0x7a>
    else
        return SPI_BAUDRATEPRESCALER_256;
 80264e8:	2338      	movs	r3, #56	; 0x38
}
 80264ea:	4618      	mov	r0, r3
 80264ec:	3714      	adds	r7, #20
 80264ee:	46bd      	mov	sp, r7
 80264f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264f4:	4770      	bx	lr
 80264f6:	bf00      	nop
 80264f8:	20000138 	.word	0x20000138
 80264fc:	10624dd3 	.word	0x10624dd3

08026500 <spi_flash_init>:

static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026500:	b590      	push	{r4, r7, lr}
 8026502:	b08f      	sub	sp, #60	; 0x3c
 8026504:	af00      	add	r7, sp, #0
 8026506:	6078      	str	r0, [r7, #4]
 8026508:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 802650a:	683b      	ldr	r3, [r7, #0]
 802650c:	2b0e      	cmp	r3, #14
 802650e:	d802      	bhi.n	8026516 <spi_flash_init+0x16>
        return -1; 
 8026510:	f04f 33ff 	mov.w	r3, #4294967295
 8026514:	e041      	b.n	802659a <spi_flash_init+0x9a>
    spi_conf = *(spi_conf_t *)conf;
 8026516:	4b23      	ldr	r3, [pc, #140]	; (80265a4 <spi_flash_init+0xa4>)
 8026518:	687a      	ldr	r2, [r7, #4]
 802651a:	4614      	mov	r4, r2
 802651c:	6820      	ldr	r0, [r4, #0]
 802651e:	6861      	ldr	r1, [r4, #4]
 8026520:	68a2      	ldr	r2, [r4, #8]
 8026522:	c307      	stmia	r3!, {r0, r1, r2}
 8026524:	89a2      	ldrh	r2, [r4, #12]
 8026526:	7ba1      	ldrb	r1, [r4, #14]
 8026528:	801a      	strh	r2, [r3, #0]
 802652a:	460a      	mov	r2, r1
 802652c:	709a      	strb	r2, [r3, #2]

    spi_flash_gpio_init();  // 初始化SPI Flash的GPIO引脚
 802652e:	f7ff fec7 	bl	80262c0 <spi_flash_gpio_init>

    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026532:	f7ff ff91 	bl	8026458 <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Init.Direction = SPI_DIRECTION_2LINES; // SPI双线全双工模式
 8026536:	4b1c      	ldr	r3, [pc, #112]	; (80265a8 <spi_flash_init+0xa8>)
 8026538:	2200      	movs	r2, #0
 802653a:	609a      	str	r2, [r3, #8]
    hspi1.Init.Mode = SPI_MODE_MASTER;           // 主模式
 802653c:	4b1a      	ldr	r3, [pc, #104]	; (80265a8 <spi_flash_init+0xa8>)
 802653e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026542:	605a      	str	r2, [r3, #4]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;     // 数据大小为8位
 8026544:	4b18      	ldr	r3, [pc, #96]	; (80265a8 <spi_flash_init+0xa8>)
 8026546:	2200      	movs	r2, #0
 8026548:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;  // 时钟极性为高电平时有效
 802654a:	4b17      	ldr	r3, [pc, #92]	; (80265a8 <spi_flash_init+0xa8>)
 802654c:	2202      	movs	r2, #2
 802654e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;       // 时钟相位为第2个边沿（上升沿）有效
 8026550:	4b15      	ldr	r3, [pc, #84]	; (80265a8 <spi_flash_init+0xa8>)
 8026552:	2201      	movs	r2, #1
 8026554:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;               // 使用软件管理片选信号
 8026556:	4b14      	ldr	r3, [pc, #80]	; (80265a8 <spi_flash_init+0xa8>)
 8026558:	f44f 7200 	mov.w	r2, #512	; 0x200
 802655c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq); // 设置波特率预分频值（假设spi_conf.freq是你的频率设置）
 802655e:	4b11      	ldr	r3, [pc, #68]	; (80265a4 <spi_flash_init+0xa4>)
 8026560:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8026564:	4618      	mov	r0, r3
 8026566:	f7ff ff83 	bl	8026470 <spi_flash_get_baud_rate_prescaler>
 802656a:	4603      	mov	r3, r0
 802656c:	461a      	mov	r2, r3
 802656e:	4b0e      	ldr	r3, [pc, #56]	; (80265a8 <spi_flash_init+0xa8>)
 8026570:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;      // 数据传输的起始位为最高有效位
 8026572:	4b0d      	ldr	r3, [pc, #52]	; (80265a8 <spi_flash_init+0xa8>)
 8026574:	2200      	movs	r2, #0
 8026576:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE; // 禁用CRC校验
 8026578:	4b0b      	ldr	r3, [pc, #44]	; (80265a8 <spi_flash_init+0xa8>)
 802657a:	2200      	movs	r2, #0
 802657c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;               // CRC校验多项式（不使用CRC时此值无关紧要）
 802657e:	4b0a      	ldr	r3, [pc, #40]	; (80265a8 <spi_flash_init+0xa8>)
 8026580:	220a      	movs	r2, #10
 8026582:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026584:	4808      	ldr	r0, [pc, #32]	; (80265a8 <spi_flash_init+0xa8>)
 8026586:	f004 fc80 	bl	802ae8a <HAL_SPI_Init>
 802658a:	4603      	mov	r3, r0
 802658c:	2b00      	cmp	r3, #0
 802658e:	d001      	beq.n	8026594 <spi_flash_init+0x94>
    {
      Error_Handler();
 8026590:	f7fd fa5e 	bl	8023a50 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    spi_flash_chip_init();  // 初始化SPI Flash芯片
 8026594:	f000 f95a 	bl	802684c <spi_flash_chip_init>

    return 0;
 8026598:	2300      	movs	r3, #0
}
 802659a:	4618      	mov	r0, r3
 802659c:	373c      	adds	r7, #60	; 0x3c
 802659e:	46bd      	mov	sp, r7
 80265a0:	bd90      	pop	{r4, r7, pc}
 80265a2:	bf00      	nop
 80265a4:	20005188 	.word	0x20005188
 80265a8:	20005130 	.word	0x20005130

080265ac <spi_flash_uninit>:

static void spi_flash_uninit()
{
 80265ac:	b580      	push	{r7, lr}
 80265ae:	af00      	add	r7, sp, #0
    spi_flash_gpio_uninit();  // 反初始化SPI Flash的GPIO引脚
 80265b0:	f7ff ff00 	bl	80263b4 <spi_flash_gpio_uninit>

    /* 禁用SPI */
//    SPI_Cmd(SPI3, DISABLE);
//    HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef* hspi);
    HAL_SPI_DeInit(&hspi1);
 80265b4:	4802      	ldr	r0, [pc, #8]	; (80265c0 <spi_flash_uninit+0x14>)
 80265b6:	f004 fcf1 	bl	802af9c <HAL_SPI_DeInit>
}
 80265ba:	bf00      	nop
 80265bc:	bd80      	pop	{r7, pc}
 80265be:	bf00      	nop
 80265c0:	20005130 	.word	0x20005130

080265c4 <spi_flash_send_byte>:

static uint8_t spi_flash_send_byte(uint8_t byte)
{
 80265c4:	b580      	push	{r7, lr}
 80265c6:	b084      	sub	sp, #16
 80265c8:	af00      	add	r7, sp, #0
 80265ca:	4603      	mov	r3, r0
 80265cc:	71fb      	strb	r3, [r7, #7]
    uint8_t rxData;

    // 等待SPI空闲
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80265ce:	bf00      	nop
 80265d0:	480c      	ldr	r0, [pc, #48]	; (8026604 <spi_flash_send_byte+0x40>)
 80265d2:	f005 f9f9 	bl	802b9c8 <HAL_SPI_GetState>
 80265d6:	4603      	mov	r3, r0
 80265d8:	2b01      	cmp	r3, #1
 80265da:	d1f9      	bne.n	80265d0 <spi_flash_send_byte+0xc>

    // 发送数据
    HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80265dc:	1df9      	adds	r1, r7, #7
 80265de:	f04f 33ff 	mov.w	r3, #4294967295
 80265e2:	2201      	movs	r2, #1
 80265e4:	4807      	ldr	r0, [pc, #28]	; (8026604 <spi_flash_send_byte+0x40>)
 80265e6:	f004 fd01 	bl	802afec <HAL_SPI_Transmit>

    // 接收数据
    HAL_SPI_Receive(&hspi1, &rxData, 1, HAL_MAX_DELAY);
 80265ea:	f107 010f 	add.w	r1, r7, #15
 80265ee:	f04f 33ff 	mov.w	r3, #4294967295
 80265f2:	2201      	movs	r2, #1
 80265f4:	4803      	ldr	r0, [pc, #12]	; (8026604 <spi_flash_send_byte+0x40>)
 80265f6:	f004 fe35 	bl	802b264 <HAL_SPI_Receive>

    return rxData;
 80265fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80265fc:	4618      	mov	r0, r3
 80265fe:	3710      	adds	r7, #16
 8026600:	46bd      	mov	sp, r7
 8026602:	bd80      	pop	{r7, pc}
 8026604:	20005130 	.word	0x20005130

08026608 <spi_flash_read_byte>:

static inline uint8_t spi_flash_read_byte()
{
 8026608:	b580      	push	{r7, lr}
 802660a:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 802660c:	20ff      	movs	r0, #255	; 0xff
 802660e:	f7ff ffd9 	bl	80265c4 <spi_flash_send_byte>
 8026612:	4603      	mov	r3, r0
}
 8026614:	4618      	mov	r0, r3
 8026616:	bd80      	pop	{r7, pc}

08026618 <spi_flash_set_feature>:

static void spi_flash_set_feature(uint8_t addr, uint8_t data)
{
 8026618:	b580      	push	{r7, lr}
 802661a:	b082      	sub	sp, #8
 802661c:	af00      	add	r7, sp, #0
 802661e:	4603      	mov	r3, r0
 8026620:	460a      	mov	r2, r1
 8026622:	71fb      	strb	r3, [r7, #7]
 8026624:	4613      	mov	r3, r2
 8026626:	71bb      	strb	r3, [r7, #6]
    spi_flash_select_chip();  // 选中SPI Flash
 8026628:	f7ff ff0a 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_SET_FEATURE);  // 发送设置特征的操作码
 802662c:	201f      	movs	r0, #31
 802662e:	f7ff ffc9 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026632:	79fb      	ldrb	r3, [r7, #7]
 8026634:	4618      	mov	r0, r3
 8026636:	f7ff ffc5 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(data);  // 发送数据
 802663a:	79bb      	ldrb	r3, [r7, #6]
 802663c:	4618      	mov	r0, r3
 802663e:	f7ff ffc1 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026642:	f7ff ff09 	bl	8026458 <spi_flash_deselect_chip>
}
 8026646:	bf00      	nop
 8026648:	3708      	adds	r7, #8
 802664a:	46bd      	mov	sp, r7
 802664c:	bd80      	pop	{r7, pc}

0802664e <spi_flash_get_feature>:

static void spi_flash_get_feature(uint8_t addr, uint8_t *data)
{
 802664e:	b580      	push	{r7, lr}
 8026650:	b082      	sub	sp, #8
 8026652:	af00      	add	r7, sp, #0
 8026654:	4603      	mov	r3, r0
 8026656:	6039      	str	r1, [r7, #0]
 8026658:	71fb      	strb	r3, [r7, #7]
    spi_flash_select_chip();  // 选中SPI Flash
 802665a:	f7ff fef1 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_GET_FEATURE);  // 发送获取特征的操作码
 802665e:	200f      	movs	r0, #15
 8026660:	f7ff ffb0 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(addr);  // 发送地址
 8026664:	79fb      	ldrb	r3, [r7, #7]
 8026666:	4618      	mov	r0, r3
 8026668:	f7ff ffac 	bl	80265c4 <spi_flash_send_byte>
    *data = spi_flash_read_byte();  // 读取一个字节的数据
 802666c:	f7ff ffcc 	bl	8026608 <spi_flash_read_byte>
 8026670:	4603      	mov	r3, r0
 8026672:	461a      	mov	r2, r3
 8026674:	683b      	ldr	r3, [r7, #0]
 8026676:	701a      	strb	r2, [r3, #0]
    spi_flash_deselect_chip();  // 取消片选信号，SPI Flash不被选中
 8026678:	f7ff feee 	bl	8026458 <spi_flash_deselect_chip>
}
 802667c:	bf00      	nop
 802667e:	3708      	adds	r7, #8
 8026680:	46bd      	mov	sp, r7
 8026682:	bd80      	pop	{r7, pc}

08026684 <spi_flash_read_status>:

static uint32_t spi_flash_read_status()
{
 8026684:	b580      	push	{r7, lr}
 8026686:	b082      	sub	sp, #8
 8026688:	af00      	add	r7, sp, #0
    uint32_t timeout = 0x1000000;  // 超时时间
 802668a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802668e:	607b      	str	r3, [r7, #4]
    uint8_t status;

    do {
        spi_flash_get_feature(_SPI_NAND_ADDR_STATUS, &status);  // 获取状态
 8026690:	1cfb      	adds	r3, r7, #3
 8026692:	4619      	mov	r1, r3
 8026694:	20c0      	movs	r0, #192	; 0xc0
 8026696:	f7ff ffda 	bl	802664e <spi_flash_get_feature>
    } while((status & _SPI_NAND_VAL_OIP) && timeout);
 802669a:	78fb      	ldrb	r3, [r7, #3]
 802669c:	f003 0301 	and.w	r3, r3, #1
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	d002      	beq.n	80266aa <spi_flash_read_status+0x26>
 80266a4:	687b      	ldr	r3, [r7, #4]
 80266a6:	2b00      	cmp	r3, #0
 80266a8:	d1f2      	bne.n	8026690 <spi_flash_read_status+0xc>

    if (!timeout)
 80266aa:	687b      	ldr	r3, [r7, #4]
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d101      	bne.n	80266b4 <spi_flash_read_status+0x30>
        return FLASH_STATUS_TIMEOUT;
 80266b0:	2303      	movs	r3, #3
 80266b2:	e02b      	b.n	802670c <spi_flash_read_status+0x88>

    switch(flash_last_operation){
 80266b4:	4b17      	ldr	r3, [pc, #92]	; (8026714 <spi_flash_read_status+0x90>)
 80266b6:	681b      	ldr	r3, [r3, #0]
 80266b8:	2b03      	cmp	r3, #3
 80266ba:	d014      	beq.n	80266e6 <spi_flash_read_status+0x62>
 80266bc:	2b03      	cmp	r3, #3
 80266be:	d81d      	bhi.n	80266fc <spi_flash_read_status+0x78>
 80266c0:	2b01      	cmp	r3, #1
 80266c2:	d002      	beq.n	80266ca <spi_flash_read_status+0x46>
 80266c4:	2b02      	cmp	r3, #2
 80266c6:	d007      	beq.n	80266d8 <spi_flash_read_status+0x54>
                return FLASH_STATUS_ERROR;
            break;
        case FLASH_OP_SPARE:
        case FLASH_OP_EMPTY:
        default:
            break;
 80266c8:	e018      	b.n	80266fc <spi_flash_read_status+0x78>
            if(status & _SPI_NAND_VAL_ERASE_FAIL)
 80266ca:	78fb      	ldrb	r3, [r7, #3]
 80266cc:	f003 0304 	and.w	r3, r3, #4
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d015      	beq.n	8026700 <spi_flash_read_status+0x7c>
                return FLASH_STATUS_ERROR;
 80266d4:	2302      	movs	r3, #2
 80266d6:	e019      	b.n	802670c <spi_flash_read_status+0x88>
            if(status & _SPI_NAND_VAL_PROGRAM_FAIL)
 80266d8:	78fb      	ldrb	r3, [r7, #3]
 80266da:	f003 0308 	and.w	r3, r3, #8
 80266de:	2b00      	cmp	r3, #0
 80266e0:	d010      	beq.n	8026704 <spi_flash_read_status+0x80>
                return FLASH_STATUS_ERROR;
 80266e2:	2302      	movs	r3, #2
 80266e4:	e012      	b.n	802670c <spi_flash_read_status+0x88>
            if((status & spi_conf.ecc_err_bits_mask) == spi_conf.ecc_err_bits_state)
 80266e6:	4b0c      	ldr	r3, [pc, #48]	; (8026718 <spi_flash_read_status+0x94>)
 80266e8:	799a      	ldrb	r2, [r3, #6]
 80266ea:	78fb      	ldrb	r3, [r7, #3]
 80266ec:	4013      	ands	r3, r2
 80266ee:	b2da      	uxtb	r2, r3
 80266f0:	4b09      	ldr	r3, [pc, #36]	; (8026718 <spi_flash_read_status+0x94>)
 80266f2:	79db      	ldrb	r3, [r3, #7]
 80266f4:	429a      	cmp	r2, r3
 80266f6:	d107      	bne.n	8026708 <spi_flash_read_status+0x84>
                return FLASH_STATUS_ERROR;
 80266f8:	2302      	movs	r3, #2
 80266fa:	e007      	b.n	802670c <spi_flash_read_status+0x88>
            break;
 80266fc:	bf00      	nop
 80266fe:	e004      	b.n	802670a <spi_flash_read_status+0x86>
            break;
 8026700:	bf00      	nop
 8026702:	e002      	b.n	802670a <spi_flash_read_status+0x86>
            break;
 8026704:	bf00      	nop
 8026706:	e000      	b.n	802670a <spi_flash_read_status+0x86>
            break;
 8026708:	bf00      	nop
    }
    return FLASH_STATUS_READY;
 802670a:	2300      	movs	r3, #0
}
 802670c:	4618      	mov	r0, r3
 802670e:	3708      	adds	r7, #8
 8026710:	46bd      	mov	sp, r7
 8026712:	bd80      	pop	{r7, pc}
 8026714:	20005198 	.word	0x20005198
 8026718:	20005188 	.word	0x20005188

0802671c <spi_flash_select_die_cmd>:

// 选择 SPI Flash 的芯片
static void spi_flash_select_die_cmd(uint32_t die)
{
 802671c:	b580      	push	{r7, lr}
 802671e:	b084      	sub	sp, #16
 8026720:	af00      	add	r7, sp, #0
 8026722:	6078      	str	r0, [r7, #4]
    switch(spi_conf.die_select_type) {
 8026724:	4b18      	ldr	r3, [pc, #96]	; (8026788 <spi_flash_select_die_cmd+0x6c>)
 8026726:	7a9b      	ldrb	r3, [r3, #10]
 8026728:	2b01      	cmp	r3, #1
 802672a:	d002      	beq.n	8026732 <spi_flash_select_die_cmd+0x16>
 802672c:	2b02      	cmp	r3, #2
 802672e:	d00d      	beq.n	802674c <spi_flash_select_die_cmd+0x30>
        }
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
        break;
    }
    default:
        break;
 8026730:	e026      	b.n	8026780 <spi_flash_select_die_cmd+0x64>
        spi_flash_select_chip();  // 选择 Flash 芯片
 8026732:	f7ff fe85 	bl	8026440 <spi_flash_select_chip>
        spi_flash_send_byte(_SPI_NAND_OP_DIE_SELECT);  // 发送选择芯片的指令
 8026736:	20c2      	movs	r0, #194	; 0xc2
 8026738:	f7ff ff44 	bl	80265c4 <spi_flash_send_byte>
        spi_flash_send_byte(die);  // 发送芯片编号
 802673c:	687b      	ldr	r3, [r7, #4]
 802673e:	b2db      	uxtb	r3, r3
 8026740:	4618      	mov	r0, r3
 8026742:	f7ff ff3f 	bl	80265c4 <spi_flash_send_byte>
        spi_flash_deselect_chip();  // 取消选择芯片
 8026746:	f7ff fe87 	bl	8026458 <spi_flash_deselect_chip>
        break;
 802674a:	e019      	b.n	8026780 <spi_flash_select_die_cmd+0x64>
        spi_flash_get_feature(_SPI_NAND_ADDR_FEATURE_4, &feature);  // 读取 Flash 的特征值
 802674c:	f107 030f 	add.w	r3, r7, #15
 8026750:	4619      	mov	r1, r3
 8026752:	20d0      	movs	r0, #208	; 0xd0
 8026754:	f7ff ff7b 	bl	802664e <spi_flash_get_feature>
        if(die == 0) {
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	2b00      	cmp	r3, #0
 802675c:	d105      	bne.n	802676a <spi_flash_select_die_cmd+0x4e>
            feature &= ~(0x40);  // 清除特征值中的某位
 802675e:	7bfb      	ldrb	r3, [r7, #15]
 8026760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026764:	b2db      	uxtb	r3, r3
 8026766:	73fb      	strb	r3, [r7, #15]
 8026768:	e004      	b.n	8026774 <spi_flash_select_die_cmd+0x58>
            feature |= 0x40;  // 设置特征值中的某位
 802676a:	7bfb      	ldrb	r3, [r7, #15]
 802676c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026770:	b2db      	uxtb	r3, r3
 8026772:	73fb      	strb	r3, [r7, #15]
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE_4, feature);  // 设置 Flash 的特征值
 8026774:	7bfb      	ldrb	r3, [r7, #15]
 8026776:	4619      	mov	r1, r3
 8026778:	20d0      	movs	r0, #208	; 0xd0
 802677a:	f7ff ff4d 	bl	8026618 <spi_flash_set_feature>
        break;
 802677e:	bf00      	nop
    }
}
 8026780:	bf00      	nop
 8026782:	3710      	adds	r7, #16
 8026784:	46bd      	mov	sp, r7
 8026786:	bd80      	pop	{r7, pc}
 8026788:	20005188 	.word	0x20005188

0802678c <spi_flash_select_die>:

// 选择 SPI Flash 的 die（芯片）（用于多芯片的情况）
static void spi_flash_select_die(uint32_t page)
{
 802678c:	b580      	push	{r7, lr}
 802678e:	b084      	sub	sp, #16
 8026790:	af00      	add	r7, sp, #0
 8026792:	6078      	str	r0, [r7, #4]
    uint32_t die = 0;
 8026794:	2300      	movs	r3, #0
 8026796:	60fb      	str	r3, [r7, #12]
    if(spi_conf.die_select_type) {
 8026798:	4b0f      	ldr	r3, [pc, #60]	; (80267d8 <spi_flash_select_die+0x4c>)
 802679a:	7a9b      	ldrb	r3, [r3, #10]
 802679c:	2b00      	cmp	r3, #0
 802679e:	d017      	beq.n	80267d0 <spi_flash_select_die+0x44>
        if(!spi_conf.plane_select_have)
 80267a0:	4b0d      	ldr	r3, [pc, #52]	; (80267d8 <spi_flash_select_die+0x4c>)
 80267a2:	7a5b      	ldrb	r3, [r3, #9]
 80267a4:	2b00      	cmp	r3, #0
 80267a6:	d104      	bne.n	80267b2 <spi_flash_select_die+0x26>
            die = ((page >> 16) & 0xff);  // 计算芯片编号
 80267a8:	687b      	ldr	r3, [r7, #4]
 80267aa:	0c1b      	lsrs	r3, r3, #16
 80267ac:	b2db      	uxtb	r3, r3
 80267ae:	60fb      	str	r3, [r7, #12]
 80267b0:	e003      	b.n	80267ba <spi_flash_select_die+0x2e>
        else
            die = ((page >> 17) & 0xff);  // 计算芯片编号
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	0c5b      	lsrs	r3, r3, #17
 80267b6:	b2db      	uxtb	r3, r3
 80267b8:	60fb      	str	r3, [r7, #12]
        if (current_die != die) {
 80267ba:	4b08      	ldr	r3, [pc, #32]	; (80267dc <spi_flash_select_die+0x50>)
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	68fa      	ldr	r2, [r7, #12]
 80267c0:	429a      	cmp	r2, r3
 80267c2:	d005      	beq.n	80267d0 <spi_flash_select_die+0x44>
            current_die = die;
 80267c4:	4a05      	ldr	r2, [pc, #20]	; (80267dc <spi_flash_select_die+0x50>)
 80267c6:	68fb      	ldr	r3, [r7, #12]
 80267c8:	6013      	str	r3, [r2, #0]
            spi_flash_select_die_cmd(die);  // 选择芯片
 80267ca:	68f8      	ldr	r0, [r7, #12]
 80267cc:	f7ff ffa6 	bl	802671c <spi_flash_select_die_cmd>
        }
    }
}
 80267d0:	bf00      	nop
 80267d2:	3710      	adds	r7, #16
 80267d4:	46bd      	mov	sp, r7
 80267d6:	bd80      	pop	{r7, pc}
 80267d8:	20005188 	.word	0x20005188
 80267dc:	2000519c 	.word	0x2000519c

080267e0 <spi_flash_read_id>:

// 读取 SPI Flash 的 ID（厂商ID和设备ID）
static void spi_flash_read_id(chip_id_t *chip_id)
{
 80267e0:	b580      	push	{r7, lr}
 80267e2:	b082      	sub	sp, #8
 80267e4:	af00      	add	r7, sp, #0
 80267e6:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80267e8:	f7ff fe2a 	bl	8026440 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_READ_ID);  // 发送读取 ID 的指令
 80267ec:	209f      	movs	r0, #159	; 0x9f
 80267ee:	f7ff fee9 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(_SPI_NAND_ADDR_MANUFACTURE_ID);  // 发送读取厂商ID的指令
 80267f2:	2000      	movs	r0, #0
 80267f4:	f7ff fee6 	bl	80265c4 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();  // 读取厂商ID
 80267f8:	f7ff ff06 	bl	8026608 <spi_flash_read_byte>
 80267fc:	4603      	mov	r3, r0
 80267fe:	461a      	mov	r2, r3
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();  // 读取设备ID
 8026804:	f7ff ff00 	bl	8026608 <spi_flash_read_byte>
 8026808:	4603      	mov	r3, r0
 802680a:	461a      	mov	r2, r3
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();  // 读取第三个ID
 8026810:	f7ff fefa 	bl	8026608 <spi_flash_read_byte>
 8026814:	4603      	mov	r3, r0
 8026816:	461a      	mov	r2, r3
 8026818:	687b      	ldr	r3, [r7, #4]
 802681a:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();  // 读取第四个ID
 802681c:	f7ff fef4 	bl	8026608 <spi_flash_read_byte>
 8026820:	4603      	mov	r3, r0
 8026822:	461a      	mov	r2, r3
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();  // 读取第五个ID
 8026828:	f7ff feee 	bl	8026608 <spi_flash_read_byte>
 802682c:	4603      	mov	r3, r0
 802682e:	461a      	mov	r2, r3
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();  // 读取第六个ID
 8026834:	f7ff fee8 	bl	8026608 <spi_flash_read_byte>
 8026838:	4603      	mov	r3, r0
 802683a:	461a      	mov	r2, r3
 802683c:	687b      	ldr	r3, [r7, #4]
 802683e:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();  // 取消选择芯片
 8026840:	f7ff fe0a 	bl	8026458 <spi_flash_deselect_chip>
}
 8026844:	bf00      	nop
 8026846:	3708      	adds	r7, #8
 8026848:	46bd      	mov	sp, r7
 802684a:	bd80      	pop	{r7, pc}

0802684c <spi_flash_chip_init>:

// SPI Flash 初始化
static void spi_flash_chip_init(void)
{
 802684c:	b580      	push	{r7, lr}
 802684e:	af00      	add	r7, sp, #0
    if(spi_conf.die_select_type) {
 8026850:	4b19      	ldr	r3, [pc, #100]	; (80268b8 <spi_flash_chip_init+0x6c>)
 8026852:	7a9b      	ldrb	r3, [r3, #10]
 8026854:	2b00      	cmp	r3, #0
 8026856:	d019      	beq.n	802688c <spi_flash_chip_init+0x40>
        spi_flash_select_die_cmd(0);  // 选择第一个芯片
 8026858:	2000      	movs	r0, #0
 802685a:	f7ff ff5f 	bl	802671c <spi_flash_select_die_cmd>
        if(spi_conf.mode_data != UNDEFINED_CMD)
 802685e:	4b16      	ldr	r3, [pc, #88]	; (80268b8 <spi_flash_chip_init+0x6c>)
 8026860:	791b      	ldrb	r3, [r3, #4]
 8026862:	2bff      	cmp	r3, #255	; 0xff
 8026864:	d005      	beq.n	8026872 <spi_flash_chip_init+0x26>
            spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8026866:	4b14      	ldr	r3, [pc, #80]	; (80268b8 <spi_flash_chip_init+0x6c>)
 8026868:	791b      	ldrb	r3, [r3, #4]
 802686a:	4619      	mov	r1, r3
 802686c:	20b0      	movs	r0, #176	; 0xb0
 802686e:	f7ff fed3 	bl	8026618 <spi_flash_set_feature>
        if(spi_conf.unlock_data != UNDEFINED_CMD)
 8026872:	4b11      	ldr	r3, [pc, #68]	; (80268b8 <spi_flash_chip_init+0x6c>)
 8026874:	795b      	ldrb	r3, [r3, #5]
 8026876:	2bff      	cmp	r3, #255	; 0xff
 8026878:	d005      	beq.n	8026886 <spi_flash_chip_init+0x3a>
            spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 802687a:	4b0f      	ldr	r3, [pc, #60]	; (80268b8 <spi_flash_chip_init+0x6c>)
 802687c:	795b      	ldrb	r3, [r3, #5]
 802687e:	4619      	mov	r1, r3
 8026880:	20a0      	movs	r0, #160	; 0xa0
 8026882:	f7ff fec9 	bl	8026618 <spi_flash_set_feature>
        spi_flash_select_die_cmd(1);  // 选择第二个芯片
 8026886:	2001      	movs	r0, #1
 8026888:	f7ff ff48 	bl	802671c <spi_flash_select_die_cmd>
    }
    if(spi_conf.mode_data != UNDEFINED_CMD)
 802688c:	4b0a      	ldr	r3, [pc, #40]	; (80268b8 <spi_flash_chip_init+0x6c>)
 802688e:	791b      	ldrb	r3, [r3, #4]
 8026890:	2bff      	cmp	r3, #255	; 0xff
 8026892:	d005      	beq.n	80268a0 <spi_flash_chip_init+0x54>
        spi_flash_set_feature(_SPI_NAND_ADDR_FEATURE, spi_conf.mode_data);  // 设置 Flash 的特征值
 8026894:	4b08      	ldr	r3, [pc, #32]	; (80268b8 <spi_flash_chip_init+0x6c>)
 8026896:	791b      	ldrb	r3, [r3, #4]
 8026898:	4619      	mov	r1, r3
 802689a:	20b0      	movs	r0, #176	; 0xb0
 802689c:	f7ff febc 	bl	8026618 <spi_flash_set_feature>
    if(spi_conf.unlock_data != UNDEFINED_CMD)
 80268a0:	4b05      	ldr	r3, [pc, #20]	; (80268b8 <spi_flash_chip_init+0x6c>)
 80268a2:	795b      	ldrb	r3, [r3, #5]
 80268a4:	2bff      	cmp	r3, #255	; 0xff
 80268a6:	d005      	beq.n	80268b4 <spi_flash_chip_init+0x68>
        spi_flash_set_feature(_SPI_NAND_ADDR_PROTECT, spi_conf.unlock_data);  // 设置 Flash 的保护值
 80268a8:	4b03      	ldr	r3, [pc, #12]	; (80268b8 <spi_flash_chip_init+0x6c>)
 80268aa:	795b      	ldrb	r3, [r3, #5]
 80268ac:	4619      	mov	r1, r3
 80268ae:	20a0      	movs	r0, #160	; 0xa0
 80268b0:	f7ff feb2 	bl	8026618 <spi_flash_set_feature>
}
 80268b4:	bf00      	nop
 80268b6:	bd80      	pop	{r7, pc}
 80268b8:	20005188 	.word	0x20005188

080268bc <spi_flash_write_enable>:

// 启用 Flash 的写入使能
static void spi_flash_write_enable()
{
 80268bc:	b580      	push	{r7, lr}
 80268be:	af00      	add	r7, sp, #0
    spi_flash_select_chip();  // 选择 Flash 芯片
 80268c0:	f7ff fdbe 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_WRITE_ENABLE);  // 发送写使能指令
 80268c4:	2006      	movs	r0, #6
 80268c6:	f7ff fe7d 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择芯片
 80268ca:	f7ff fdc5 	bl	8026458 <spi_flash_deselect_chip>
}
 80268ce:	bf00      	nop
 80268d0:	bd80      	pop	{r7, pc}
	...

080268d4 <spi_flash_program_load>:

// 向 Flash 写入数据
static void spi_flash_program_load(uint8_t *buf, uint32_t page_size, uint32_t page)
{
 80268d4:	b580      	push	{r7, lr}
 80268d6:	b086      	sub	sp, #24
 80268d8:	af00      	add	r7, sp, #0
 80268da:	60f8      	str	r0, [r7, #12]
 80268dc:	60b9      	str	r1, [r7, #8]
 80268de:	607a      	str	r2, [r7, #4]
    uint32_t i;
    uint32_t addr = 0;
 80268e0:	2300      	movs	r3, #0
 80268e2:	613b      	str	r3, [r7, #16]
    spi_flash_select_chip();  // 选择 Flash 芯片
 80268e4:	f7ff fdac 	bl	8026440 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_LOAD_SINGLE);  // 发送写入数据的指令
 80268e8:	2002      	movs	r0, #2
 80268ea:	f7ff fe6b 	bl	80265c4 <spi_flash_send_byte>

    if(spi_conf.plane_select_have) {
 80268ee:	4b1f      	ldr	r3, [pc, #124]	; (802696c <spi_flash_program_load+0x98>)
 80268f0:	7a5b      	ldrb	r3, [r3, #9]
 80268f2:	2b00      	cmp	r3, #0
 80268f4:	d018      	beq.n	8026928 <spi_flash_program_load+0x54>
        if((page >> 6)& (0x1))
 80268f6:	687b      	ldr	r3, [r7, #4]
 80268f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80268fc:	2b00      	cmp	r3, #0
 80268fe:	d009      	beq.n	8026914 <spi_flash_program_load+0x40>
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) | (0x10));  // 发送地址的第二个字节
 8026900:	693b      	ldr	r3, [r7, #16]
 8026902:	0a1b      	lsrs	r3, r3, #8
 8026904:	b2db      	uxtb	r3, r3
 8026906:	f043 0310 	orr.w	r3, r3, #16
 802690a:	b2db      	uxtb	r3, r3
 802690c:	4618      	mov	r0, r3
 802690e:	f7ff fe59 	bl	80265c4 <spi_flash_send_byte>
 8026912:	e00f      	b.n	8026934 <spi_flash_program_load+0x60>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(addr) & (0xef));  // 发送地址的第二个字节
 8026914:	693b      	ldr	r3, [r7, #16]
 8026916:	0a1b      	lsrs	r3, r3, #8
 8026918:	b2db      	uxtb	r3, r3
 802691a:	f023 0310 	bic.w	r3, r3, #16
 802691e:	b2db      	uxtb	r3, r3
 8026920:	4618      	mov	r0, r3
 8026922:	f7ff fe4f 	bl	80265c4 <spi_flash_send_byte>
 8026926:	e005      	b.n	8026934 <spi_flash_program_load+0x60>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(addr));  // 发送地址的第二个字节
 8026928:	693b      	ldr	r3, [r7, #16]
 802692a:	0a1b      	lsrs	r3, r3, #8
 802692c:	b2db      	uxtb	r3, r3
 802692e:	4618      	mov	r0, r3
 8026930:	f7ff fe48 	bl	80265c4 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(addr));  // 发送地址的第一个字节
 8026934:	693b      	ldr	r3, [r7, #16]
 8026936:	b2db      	uxtb	r3, r3
 8026938:	4618      	mov	r0, r3
 802693a:	f7ff fe43 	bl	80265c4 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 802693e:	2300      	movs	r3, #0
 8026940:	617b      	str	r3, [r7, #20]
 8026942:	e009      	b.n	8026958 <spi_flash_program_load+0x84>
        spi_flash_send_byte(buf[i]);  // 逐字节写入数据
 8026944:	68fa      	ldr	r2, [r7, #12]
 8026946:	697b      	ldr	r3, [r7, #20]
 8026948:	4413      	add	r3, r2
 802694a:	781b      	ldrb	r3, [r3, #0]
 802694c:	4618      	mov	r0, r3
 802694e:	f7ff fe39 	bl	80265c4 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 8026952:	697b      	ldr	r3, [r7, #20]
 8026954:	3301      	adds	r3, #1
 8026956:	617b      	str	r3, [r7, #20]
 8026958:	697a      	ldr	r2, [r7, #20]
 802695a:	68bb      	ldr	r3, [r7, #8]
 802695c:	429a      	cmp	r2, r3
 802695e:	d3f1      	bcc.n	8026944 <spi_flash_program_load+0x70>

    spi_flash_deselect_chip();  // 取消选择芯片
 8026960:	f7ff fd7a 	bl	8026458 <spi_flash_deselect_chip>
}
 8026964:	bf00      	nop
 8026966:	3718      	adds	r7, #24
 8026968:	46bd      	mov	sp, r7
 802696a:	bd80      	pop	{r7, pc}
 802696c:	20005188 	.word	0x20005188

08026970 <spi_flash_write_page_async>:

// 异步写入页面数据到闪存
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8026970:	b580      	push	{r7, lr}
 8026972:	b084      	sub	sp, #16
 8026974:	af00      	add	r7, sp, #0
 8026976:	60f8      	str	r0, [r7, #12]
 8026978:	60b9      	str	r1, [r7, #8]
 802697a:	607a      	str	r2, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 802697c:	68b8      	ldr	r0, [r7, #8]
 802697e:	f7ff ff05 	bl	802678c <spi_flash_select_die>

    spi_flash_program_load(buf, page_size, page);  // 加载数据到写入缓冲区
 8026982:	68ba      	ldr	r2, [r7, #8]
 8026984:	6879      	ldr	r1, [r7, #4]
 8026986:	68f8      	ldr	r0, [r7, #12]
 8026988:	f7ff ffa4 	bl	80268d4 <spi_flash_program_load>

    spi_flash_write_enable();  // 使能写入
 802698c:	f7ff ff96 	bl	80268bc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026990:	f7ff fd56 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PROGRAM_EXECUTE);  // 发送写入执行命令
 8026994:	2010      	movs	r0, #16
 8026996:	f7ff fe15 	bl	80265c4 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_WRITE;  // 记录上一次操作为写入
 802699a:	4b0d      	ldr	r3, [pc, #52]	; (80269d0 <spi_flash_write_page_async+0x60>)
 802699c:	2202      	movs	r2, #2
 802699e:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80269a0:	68bb      	ldr	r3, [r7, #8]
 80269a2:	0c1b      	lsrs	r3, r3, #16
 80269a4:	b2db      	uxtb	r3, r3
 80269a6:	4618      	mov	r0, r3
 80269a8:	f7ff fe0c 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80269ac:	68bb      	ldr	r3, [r7, #8]
 80269ae:	0a1b      	lsrs	r3, r3, #8
 80269b0:	b2db      	uxtb	r3, r3
 80269b2:	4618      	mov	r0, r3
 80269b4:	f7ff fe06 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 80269b8:	68bb      	ldr	r3, [r7, #8]
 80269ba:	b2db      	uxtb	r3, r3
 80269bc:	4618      	mov	r0, r3
 80269be:	f7ff fe01 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 80269c2:	f7ff fd49 	bl	8026458 <spi_flash_deselect_chip>
    // spi_flash_wait_operation_end();  // 等待操作结束

    // spi_flash_write_disable();  // 禁用写入
}
 80269c6:	bf00      	nop
 80269c8:	3710      	adds	r7, #16
 80269ca:	46bd      	mov	sp, r7
 80269cc:	bd80      	pop	{r7, pc}
 80269ce:	bf00      	nop
 80269d0:	20005198 	.word	0x20005198

080269d4 <spi_flash_load_page_into_cache>:

// 将页面数据加载到缓存中
static uint32_t spi_flash_load_page_into_cache(uint32_t page)
{
 80269d4:	b580      	push	{r7, lr}
 80269d6:	b082      	sub	sp, #8
 80269d8:	af00      	add	r7, sp, #0
 80269da:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 80269dc:	6878      	ldr	r0, [r7, #4]
 80269de:	f7ff fed5 	bl	802678c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 80269e2:	f7ff fd2d 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 80269e6:	2013      	movs	r0, #19
 80269e8:	f7ff fdec 	bl	80265c4 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_READ;  // 记录上一次操作为读取
 80269ec:	4b0e      	ldr	r3, [pc, #56]	; (8026a28 <spi_flash_load_page_into_cache+0x54>)
 80269ee:	2203      	movs	r2, #3
 80269f0:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	0c1b      	lsrs	r3, r3, #16
 80269f6:	b2db      	uxtb	r3, r3
 80269f8:	4618      	mov	r0, r3
 80269fa:	f7ff fde3 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 80269fe:	687b      	ldr	r3, [r7, #4]
 8026a00:	0a1b      	lsrs	r3, r3, #8
 8026a02:	b2db      	uxtb	r3, r3
 8026a04:	4618      	mov	r0, r3
 8026a06:	f7ff fddd 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	b2db      	uxtb	r3, r3
 8026a0e:	4618      	mov	r0, r3
 8026a10:	f7ff fdd8 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026a14:	f7ff fd20 	bl	8026458 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8026a18:	f7ff fe34 	bl	8026684 <spi_flash_read_status>
 8026a1c:	4603      	mov	r3, r0
}
 8026a1e:	4618      	mov	r0, r3
 8026a20:	3708      	adds	r7, #8
 8026a22:	46bd      	mov	sp, r7
 8026a24:	bd80      	pop	{r7, pc}
 8026a26:	bf00      	nop
 8026a28:	20005198 	.word	0x20005198

08026a2c <spi_flash_read_page>:

// 读取页面数据
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t data_size)
{
 8026a2c:	b590      	push	{r4, r7, lr}
 8026a2e:	b089      	sub	sp, #36	; 0x24
 8026a30:	af00      	add	r7, sp, #0
 8026a32:	60f8      	str	r0, [r7, #12]
 8026a34:	60b9      	str	r1, [r7, #8]
 8026a36:	607a      	str	r2, [r7, #4]
    uint32_t status = spi_flash_load_page_into_cache(page);  // 将页面数据加载到缓存中
 8026a38:	68b8      	ldr	r0, [r7, #8]
 8026a3a:	f7ff ffcb 	bl	80269d4 <spi_flash_load_page_into_cache>
 8026a3e:	61b8      	str	r0, [r7, #24]
    uint32_t data_offset = 0;
 8026a40:	2300      	movs	r3, #0
 8026a42:	617b      	str	r3, [r7, #20]

    spi_flash_select_chip();  // 选择闪存芯片
 8026a44:	f7ff fcfc 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8026a48:	2003      	movs	r0, #3
 8026a4a:	f7ff fdbb 	bl	80265c4 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8026a4e:	4b27      	ldr	r3, [pc, #156]	; (8026aec <spi_flash_read_page+0xc0>)
 8026a50:	7a1b      	ldrb	r3, [r3, #8]
 8026a52:	2b00      	cmp	r3, #0
 8026a54:	d002      	beq.n	8026a5c <spi_flash_read_page+0x30>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8026a56:	20ff      	movs	r0, #255	; 0xff
 8026a58:	f7ff fdb4 	bl	80265c4 <spi_flash_send_byte>

    if (spi_conf.plane_select_have) {
 8026a5c:	4b23      	ldr	r3, [pc, #140]	; (8026aec <spi_flash_read_page+0xc0>)
 8026a5e:	7a5b      	ldrb	r3, [r3, #9]
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	d018      	beq.n	8026a96 <spi_flash_read_page+0x6a>
        if ((page >> 6) & (0x1))
 8026a64:	68bb      	ldr	r3, [r7, #8]
 8026a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	d009      	beq.n	8026a82 <spi_flash_read_page+0x56>
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) | (0x10));  // 发送地址的第二个周期
 8026a6e:	697b      	ldr	r3, [r7, #20]
 8026a70:	0a1b      	lsrs	r3, r3, #8
 8026a72:	b2db      	uxtb	r3, r3
 8026a74:	f043 0310 	orr.w	r3, r3, #16
 8026a78:	b2db      	uxtb	r3, r3
 8026a7a:	4618      	mov	r0, r3
 8026a7c:	f7ff fda2 	bl	80265c4 <spi_flash_send_byte>
 8026a80:	e00f      	b.n	8026aa2 <spi_flash_read_page+0x76>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset) & (0xef));  // 发送地址的第二个周期
 8026a82:	697b      	ldr	r3, [r7, #20]
 8026a84:	0a1b      	lsrs	r3, r3, #8
 8026a86:	b2db      	uxtb	r3, r3
 8026a88:	f023 0310 	bic.w	r3, r3, #16
 8026a8c:	b2db      	uxtb	r3, r3
 8026a8e:	4618      	mov	r0, r3
 8026a90:	f7ff fd98 	bl	80265c4 <spi_flash_send_byte>
 8026a94:	e005      	b.n	8026aa2 <spi_flash_read_page+0x76>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(data_offset));  // 发送地址的第二个周期
 8026a96:	697b      	ldr	r3, [r7, #20]
 8026a98:	0a1b      	lsrs	r3, r3, #8
 8026a9a:	b2db      	uxtb	r3, r3
 8026a9c:	4618      	mov	r0, r3
 8026a9e:	f7ff fd91 	bl	80265c4 <spi_flash_send_byte>
    }

    spi_flash_send_byte(ADDR_1st_CYCLE(data_offset));  // 发送地址的第一个周期
 8026aa2:	697b      	ldr	r3, [r7, #20]
 8026aa4:	b2db      	uxtb	r3, r3
 8026aa6:	4618      	mov	r0, r3
 8026aa8:	f7ff fd8c 	bl	80265c4 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026aac:	4b0f      	ldr	r3, [pc, #60]	; (8026aec <spi_flash_read_page+0xc0>)
 8026aae:	7a1b      	ldrb	r3, [r3, #8]
 8026ab0:	2b00      	cmp	r3, #0
 8026ab2:	d102      	bne.n	8026aba <spi_flash_read_page+0x8e>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026ab4:	20ff      	movs	r0, #255	; 0xff
 8026ab6:	f7ff fd85 	bl	80265c4 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8026aba:	2300      	movs	r3, #0
 8026abc:	61fb      	str	r3, [r7, #28]
 8026abe:	e009      	b.n	8026ad4 <spi_flash_read_page+0xa8>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026ac0:	68fa      	ldr	r2, [r7, #12]
 8026ac2:	69fb      	ldr	r3, [r7, #28]
 8026ac4:	18d4      	adds	r4, r2, r3
 8026ac6:	f7ff fd9f 	bl	8026608 <spi_flash_read_byte>
 8026aca:	4603      	mov	r3, r0
 8026acc:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026ace:	69fb      	ldr	r3, [r7, #28]
 8026ad0:	3301      	adds	r3, #1
 8026ad2:	61fb      	str	r3, [r7, #28]
 8026ad4:	69fa      	ldr	r2, [r7, #28]
 8026ad6:	687b      	ldr	r3, [r7, #4]
 8026ad8:	429a      	cmp	r2, r3
 8026ada:	d3f1      	bcc.n	8026ac0 <spi_flash_read_page+0x94>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026adc:	f7ff fcbc 	bl	8026458 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026ae0:	69bb      	ldr	r3, [r7, #24]
}
 8026ae2:	4618      	mov	r0, r3
 8026ae4:	3724      	adds	r7, #36	; 0x24
 8026ae6:	46bd      	mov	sp, r7
 8026ae8:	bd90      	pop	{r4, r7, pc}
 8026aea:	bf00      	nop
 8026aec:	20005188 	.word	0x20005188

08026af0 <spi_flash_read_spare_data>:

// 读取备用数据
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 8026af0:	b590      	push	{r4, r7, lr}
 8026af2:	b087      	sub	sp, #28
 8026af4:	af00      	add	r7, sp, #0
 8026af6:	60f8      	str	r0, [r7, #12]
 8026af8:	60b9      	str	r1, [r7, #8]
 8026afa:	607a      	str	r2, [r7, #4]
 8026afc:	603b      	str	r3, [r7, #0]
    uint32_t status;

    spi_flash_select_die(page);  // 选择闪存芯片
 8026afe:	68b8      	ldr	r0, [r7, #8]
 8026b00:	f7ff fe44 	bl	802678c <spi_flash_select_die>

    spi_flash_select_chip();  // 选择闪存芯片
 8026b04:	f7ff fc9c 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_PAGE_READ);  // 发送页面读取命令
 8026b08:	2013      	movs	r0, #19
 8026b0a:	f7ff fd5b 	bl	80265c4 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_SPARE;  // 记录上一次操作为备用
 8026b0e:	4b38      	ldr	r3, [pc, #224]	; (8026bf0 <spi_flash_read_spare_data+0x100>)
 8026b10:	2204      	movs	r2, #4
 8026b12:	601a      	str	r2, [r3, #0]
    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026b14:	68bb      	ldr	r3, [r7, #8]
 8026b16:	0c1b      	lsrs	r3, r3, #16
 8026b18:	b2db      	uxtb	r3, r3
 8026b1a:	4618      	mov	r0, r3
 8026b1c:	f7ff fd52 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026b20:	68bb      	ldr	r3, [r7, #8]
 8026b22:	0a1b      	lsrs	r3, r3, #8
 8026b24:	b2db      	uxtb	r3, r3
 8026b26:	4618      	mov	r0, r3
 8026b28:	f7ff fd4c 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026b2c:	68bb      	ldr	r3, [r7, #8]
 8026b2e:	b2db      	uxtb	r3, r3
 8026b30:	4618      	mov	r0, r3
 8026b32:	f7ff fd47 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026b36:	f7ff fc8f 	bl	8026458 <spi_flash_deselect_chip>
    status = spi_flash_read_status();  // 读取状态寄存器的值
 8026b3a:	f7ff fda3 	bl	8026684 <spi_flash_read_status>
 8026b3e:	6138      	str	r0, [r7, #16]

    spi_flash_select_chip();  // 选择闪存芯片
 8026b40:	f7ff fc7e 	bl	8026440 <spi_flash_select_chip>
    spi_flash_send_byte(_SPI_NAND_OP_READ_FROM_CACHE_SINGLE);  // 发送从缓存中读取数据的命令
 8026b44:	2003      	movs	r0, #3
 8026b46:	f7ff fd3d 	bl	80265c4 <spi_flash_send_byte>

    if (spi_conf.read_dummy_prepend)
 8026b4a:	4b2a      	ldr	r3, [pc, #168]	; (8026bf4 <spi_flash_read_spare_data+0x104>)
 8026b4c:	7a1b      	ldrb	r3, [r3, #8]
 8026b4e:	2b00      	cmp	r3, #0
 8026b50:	d002      	beq.n	8026b58 <spi_flash_read_spare_data+0x68>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果有前导字节，发送一个虚拟字节
 8026b52:	20ff      	movs	r0, #255	; 0xff
 8026b54:	f7ff fd36 	bl	80265c4 <spi_flash_send_byte>

    offset += spi_conf.spare_offset;
 8026b58:	4b26      	ldr	r3, [pc, #152]	; (8026bf4 <spi_flash_read_spare_data+0x104>)
 8026b5a:	681b      	ldr	r3, [r3, #0]
 8026b5c:	687a      	ldr	r2, [r7, #4]
 8026b5e:	4413      	add	r3, r2
 8026b60:	607b      	str	r3, [r7, #4]
    if (spi_conf.plane_select_have) {
 8026b62:	4b24      	ldr	r3, [pc, #144]	; (8026bf4 <spi_flash_read_spare_data+0x104>)
 8026b64:	7a5b      	ldrb	r3, [r3, #9]
 8026b66:	2b00      	cmp	r3, #0
 8026b68:	d018      	beq.n	8026b9c <spi_flash_read_spare_data+0xac>
        if ((page >> 6) & (0x1))
 8026b6a:	68bb      	ldr	r3, [r7, #8]
 8026b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026b70:	2b00      	cmp	r3, #0
 8026b72:	d009      	beq.n	8026b88 <spi_flash_read_spare_data+0x98>
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) | (0x10));  // 发送地址的第二个周期
 8026b74:	687b      	ldr	r3, [r7, #4]
 8026b76:	0a1b      	lsrs	r3, r3, #8
 8026b78:	b2db      	uxtb	r3, r3
 8026b7a:	f043 0310 	orr.w	r3, r3, #16
 8026b7e:	b2db      	uxtb	r3, r3
 8026b80:	4618      	mov	r0, r3
 8026b82:	f7ff fd1f 	bl	80265c4 <spi_flash_send_byte>
 8026b86:	e00f      	b.n	8026ba8 <spi_flash_read_spare_data+0xb8>
        else
            spi_flash_send_byte(ADDR_2nd_CYCLE(offset) & (0xef));  // 发送地址的第二个周期
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	0a1b      	lsrs	r3, r3, #8
 8026b8c:	b2db      	uxtb	r3, r3
 8026b8e:	f023 0310 	bic.w	r3, r3, #16
 8026b92:	b2db      	uxtb	r3, r3
 8026b94:	4618      	mov	r0, r3
 8026b96:	f7ff fd15 	bl	80265c4 <spi_flash_send_byte>
 8026b9a:	e005      	b.n	8026ba8 <spi_flash_read_spare_data+0xb8>
    } else {
        spi_flash_send_byte(ADDR_2nd_CYCLE(offset));  // 发送地址的第二个周期
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	0a1b      	lsrs	r3, r3, #8
 8026ba0:	b2db      	uxtb	r3, r3
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	f7ff fd0e 	bl	80265c4 <spi_flash_send_byte>
    }
    spi_flash_send_byte(ADDR_1st_CYCLE(offset));  // 发送地址的第一个周期
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	b2db      	uxtb	r3, r3
 8026bac:	4618      	mov	r0, r3
 8026bae:	f7ff fd09 	bl	80265c4 <spi_flash_send_byte>

    if (!spi_conf.read_dummy_prepend)
 8026bb2:	4b10      	ldr	r3, [pc, #64]	; (8026bf4 <spi_flash_read_spare_data+0x104>)
 8026bb4:	7a1b      	ldrb	r3, [r3, #8]
 8026bb6:	2b00      	cmp	r3, #0
 8026bb8:	d102      	bne.n	8026bc0 <spi_flash_read_spare_data+0xd0>
        spi_flash_send_byte(FLASH_DUMMY_BYTE);  // 如果没有前导字节，发送一个虚拟字节
 8026bba:	20ff      	movs	r0, #255	; 0xff
 8026bbc:	f7ff fd02 	bl	80265c4 <spi_flash_send_byte>

    for (uint32_t i = 0; i < data_size; i++)
 8026bc0:	2300      	movs	r3, #0
 8026bc2:	617b      	str	r3, [r7, #20]
 8026bc4:	e009      	b.n	8026bda <spi_flash_read_spare_data+0xea>
        buf[i] = spi_flash_read_byte();  // 读取字节数据到缓冲区
 8026bc6:	68fa      	ldr	r2, [r7, #12]
 8026bc8:	697b      	ldr	r3, [r7, #20]
 8026bca:	18d4      	adds	r4, r2, r3
 8026bcc:	f7ff fd1c 	bl	8026608 <spi_flash_read_byte>
 8026bd0:	4603      	mov	r3, r0
 8026bd2:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < data_size; i++)
 8026bd4:	697b      	ldr	r3, [r7, #20]
 8026bd6:	3301      	adds	r3, #1
 8026bd8:	617b      	str	r3, [r7, #20]
 8026bda:	697a      	ldr	r2, [r7, #20]
 8026bdc:	683b      	ldr	r3, [r7, #0]
 8026bde:	429a      	cmp	r2, r3
 8026be0:	d3f1      	bcc.n	8026bc6 <spi_flash_read_spare_data+0xd6>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026be2:	f7ff fc39 	bl	8026458 <spi_flash_deselect_chip>
    return status;  // 返回状态寄存器的值
 8026be6:	693b      	ldr	r3, [r7, #16]
}
 8026be8:	4618      	mov	r0, r3
 8026bea:	371c      	adds	r7, #28
 8026bec:	46bd      	mov	sp, r7
 8026bee:	bd90      	pop	{r4, r7, pc}
 8026bf0:	20005198 	.word	0x20005198
 8026bf4:	20005188 	.word	0x20005188

08026bf8 <spi_flash_erase_block>:

// 擦除块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 8026bf8:	b580      	push	{r7, lr}
 8026bfa:	b082      	sub	sp, #8
 8026bfc:	af00      	add	r7, sp, #0
 8026bfe:	6078      	str	r0, [r7, #4]
    spi_flash_select_die(page);  // 选择闪存芯片
 8026c00:	6878      	ldr	r0, [r7, #4]
 8026c02:	f7ff fdc3 	bl	802678c <spi_flash_select_die>

    spi_flash_write_enable();  // 使能写入
 8026c06:	f7ff fe59 	bl	80268bc <spi_flash_write_enable>

    spi_flash_select_chip();  // 选择闪存芯片
 8026c0a:	f7ff fc19 	bl	8026440 <spi_flash_select_chip>

    spi_flash_send_byte(_SPI_NAND_OP_BLOCK_ERASE);  // 发送块擦除命令
 8026c0e:	20d8      	movs	r0, #216	; 0xd8
 8026c10:	f7ff fcd8 	bl	80265c4 <spi_flash_send_byte>
    flash_last_operation = FLASH_OP_ERASE;  // 记录上一次操作为擦除
 8026c14:	4b0e      	ldr	r3, [pc, #56]	; (8026c50 <spi_flash_erase_block+0x58>)
 8026c16:	2201      	movs	r2, #1
 8026c18:	601a      	str	r2, [r3, #0]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));  // 发送地址的第三个周期
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	0c1b      	lsrs	r3, r3, #16
 8026c1e:	b2db      	uxtb	r3, r3
 8026c20:	4618      	mov	r0, r3
 8026c22:	f7ff fccf 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));  // 发送地址的第二个周期
 8026c26:	687b      	ldr	r3, [r7, #4]
 8026c28:	0a1b      	lsrs	r3, r3, #8
 8026c2a:	b2db      	uxtb	r3, r3
 8026c2c:	4618      	mov	r0, r3
 8026c2e:	f7ff fcc9 	bl	80265c4 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));  // 发送地址的第一个周期
 8026c32:	687b      	ldr	r3, [r7, #4]
 8026c34:	b2db      	uxtb	r3, r3
 8026c36:	4618      	mov	r0, r3
 8026c38:	f7ff fcc4 	bl	80265c4 <spi_flash_send_byte>

    spi_flash_deselect_chip();  // 取消选择闪存芯片
 8026c3c:	f7ff fc0c 	bl	8026458 <spi_flash_deselect_chip>

    return spi_flash_read_status();  // 读取状态寄存器的值
 8026c40:	f7ff fd20 	bl	8026684 <spi_flash_read_status>
 8026c44:	4603      	mov	r3, r0
}
 8026c46:	4618      	mov	r0, r3
 8026c48:	3708      	adds	r7, #8
 8026c4a:	46bd      	mov	sp, r7
 8026c4c:	bd80      	pop	{r7, pc}
 8026c4e:	bf00      	nop
 8026c50:	20005198 	.word	0x20005198

08026c54 <spi_flash_is_bb_supported>:

// 检查是否支持坏块检测
static inline bool spi_flash_is_bb_supported()
{
 8026c54:	b480      	push	{r7}
 8026c56:	af00      	add	r7, sp, #0
    return true;
 8026c58:	2301      	movs	r3, #1
}
 8026c5a:	4618      	mov	r0, r3
 8026c5c:	46bd      	mov	sp, r7
 8026c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c62:	4770      	bx	lr

08026c64 <spi_flash_gpio_init>:

static spi_conf_t spi_conf;

// 初始化SPI Flash的GPIO引脚
static void spi_flash_gpio_init()
{
 8026c64:	b580      	push	{r7, lr}
 8026c66:	b088      	sub	sp, #32
 8026c68:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026c6a:	f107 030c 	add.w	r3, r7, #12
 8026c6e:	2200      	movs	r2, #0
 8026c70:	601a      	str	r2, [r3, #0]
 8026c72:	605a      	str	r2, [r3, #4]
 8026c74:	609a      	str	r2, [r3, #8]
 8026c76:	60da      	str	r2, [r3, #12]
 8026c78:	611a      	str	r2, [r3, #16]

	  /* USER CODE BEGIN SPI1_MspInit 0 */

	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 8026c7a:	2300      	movs	r3, #0
 8026c7c:	60bb      	str	r3, [r7, #8]
 8026c7e:	4b2a      	ldr	r3, [pc, #168]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c82:	4a29      	ldr	r2, [pc, #164]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8026c88:	6453      	str	r3, [r2, #68]	; 0x44
 8026c8a:	4b27      	ldr	r3, [pc, #156]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026c92:	60bb      	str	r3, [r7, #8]
 8026c94:	68bb      	ldr	r3, [r7, #8]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8026c96:	2300      	movs	r3, #0
 8026c98:	607b      	str	r3, [r7, #4]
 8026c9a:	4b23      	ldr	r3, [pc, #140]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026c9e:	4a22      	ldr	r2, [pc, #136]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026ca0:	f043 0301 	orr.w	r3, r3, #1
 8026ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8026ca6:	4b20      	ldr	r3, [pc, #128]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026caa:	f003 0301 	and.w	r3, r3, #1
 8026cae:	607b      	str	r3, [r7, #4]
 8026cb0:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026cb2:	2300      	movs	r3, #0
 8026cb4:	603b      	str	r3, [r7, #0]
 8026cb6:	4b1c      	ldr	r3, [pc, #112]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026cba:	4a1b      	ldr	r2, [pc, #108]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026cbc:	f043 0302 	orr.w	r3, r3, #2
 8026cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8026cc2:	4b19      	ldr	r3, [pc, #100]	; (8026d28 <spi_flash_gpio_init+0xc4>)
 8026cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026cc6:	f003 0302 	and.w	r3, r3, #2
 8026cca:	603b      	str	r3, [r7, #0]
 8026ccc:	683b      	ldr	r3, [r7, #0]
	    /**SPI1 GPIO Configuration
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    PB3     ------> SPI1_SCK
	    */
	    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8026cce:	23c0      	movs	r3, #192	; 0xc0
 8026cd0:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026cd2:	2302      	movs	r3, #2
 8026cd4:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026cd6:	2300      	movs	r3, #0
 8026cd8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026cda:	2303      	movs	r3, #3
 8026cdc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026cde:	2305      	movs	r3, #5
 8026ce0:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026ce2:	f107 030c 	add.w	r3, r7, #12
 8026ce6:	4619      	mov	r1, r3
 8026ce8:	4810      	ldr	r0, [pc, #64]	; (8026d2c <spi_flash_gpio_init+0xc8>)
 8026cea:	f001 faeb 	bl	80282c4 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8026cee:	2308      	movs	r3, #8
 8026cf0:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026cf2:	2302      	movs	r3, #2
 8026cf4:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026cf6:	2300      	movs	r3, #0
 8026cf8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8026cfa:	2303      	movs	r3, #3
 8026cfc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8026cfe:	2305      	movs	r3, #5
 8026d00:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8026d02:	f107 030c 	add.w	r3, r7, #12
 8026d06:	4619      	mov	r1, r3
 8026d08:	4809      	ldr	r0, [pc, #36]	; (8026d30 <spi_flash_gpio_init+0xcc>)
 8026d0a:	f001 fadb 	bl	80282c4 <HAL_GPIO_Init>

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8026d0e:	2200      	movs	r2, #0
 8026d10:	2100      	movs	r1, #0
 8026d12:	2023      	movs	r0, #35	; 0x23
 8026d14:	f000 fe73 	bl	80279fe <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8026d18:	2023      	movs	r0, #35	; 0x23
 8026d1a:	f000 fe8c 	bl	8027a36 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */

	  /* USER CODE END SPI1_MspInit 1 */
}
 8026d1e:	bf00      	nop
 8026d20:	3720      	adds	r7, #32
 8026d22:	46bd      	mov	sp, r7
 8026d24:	bd80      	pop	{r7, pc}
 8026d26:	bf00      	nop
 8026d28:	40023800 	.word	0x40023800
 8026d2c:	40020000 	.word	0x40020000
 8026d30:	40020400 	.word	0x40020400

08026d34 <spi_flash_select_chip>:

	  /* USER CODE END SPI1_MspDeInit 1 */
}

static inline void spi_flash_select_chip()
{
 8026d34:	b580      	push	{r7, lr}
 8026d36:	af00      	add	r7, sp, #0
//    GPIO_ResetBits(GPIOA, SPI_FLASH_CS_PIN);
   	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_RESET);
 8026d38:	2200      	movs	r2, #0
 8026d3a:	2110      	movs	r1, #16
 8026d3c:	4802      	ldr	r0, [pc, #8]	; (8026d48 <spi_flash_select_chip+0x14>)
 8026d3e:	f001 fd59 	bl	80287f4 <HAL_GPIO_WritePin>
}
 8026d42:	bf00      	nop
 8026d44:	bd80      	pop	{r7, pc}
 8026d46:	bf00      	nop
 8026d48:	40020000 	.word	0x40020000

08026d4c <spi_flash_deselect_chip>:

static inline void spi_flash_deselect_chip()
{
 8026d4c:	b580      	push	{r7, lr}
 8026d4e:	af00      	add	r7, sp, #0
//    GPIO_SetBits(GPIOA, SPI_FLASH_CS_PIN);
  	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI_FLASH_CS_PIN, GPIO_PIN_SET);
 8026d50:	2201      	movs	r2, #1
 8026d52:	2110      	movs	r1, #16
 8026d54:	4802      	ldr	r0, [pc, #8]	; (8026d60 <spi_flash_deselect_chip+0x14>)
 8026d56:	f001 fd4d 	bl	80287f4 <HAL_GPIO_WritePin>
}
 8026d5a:	bf00      	nop
 8026d5c:	bd80      	pop	{r7, pc}
 8026d5e:	bf00      	nop
 8026d60:	40020000 	.word	0x40020000

08026d64 <spi_flash_get_baud_rate_prescaler>:

static uint16_t spi_flash_get_baud_rate_prescaler(uint32_t spi_freq_khz)
{
 8026d64:	b480      	push	{r7}
 8026d66:	b085      	sub	sp, #20
 8026d68:	af00      	add	r7, sp, #0
 8026d6a:	6078      	str	r0, [r7, #4]
    uint32_t system_clock_khz = SystemCoreClock / 1000;
 8026d6c:	4b1f      	ldr	r3, [pc, #124]	; (8026dec <spi_flash_get_baud_rate_prescaler+0x88>)
 8026d6e:	681b      	ldr	r3, [r3, #0]
 8026d70:	4a1f      	ldr	r2, [pc, #124]	; (8026df0 <spi_flash_get_baud_rate_prescaler+0x8c>)
 8026d72:	fba2 2303 	umull	r2, r3, r2, r3
 8026d76:	099b      	lsrs	r3, r3, #6
 8026d78:	60fb      	str	r3, [r7, #12]

    if (spi_freq_khz >= system_clock_khz / 2)
 8026d7a:	68fb      	ldr	r3, [r7, #12]
 8026d7c:	085b      	lsrs	r3, r3, #1
 8026d7e:	687a      	ldr	r2, [r7, #4]
 8026d80:	429a      	cmp	r2, r3
 8026d82:	d301      	bcc.n	8026d88 <spi_flash_get_baud_rate_prescaler+0x24>
         return SPI_BAUDRATEPRESCALER_2;
 8026d84:	2300      	movs	r3, #0
 8026d86:	e02a      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 4)
 8026d88:	68fb      	ldr	r3, [r7, #12]
 8026d8a:	089b      	lsrs	r3, r3, #2
 8026d8c:	687a      	ldr	r2, [r7, #4]
 8026d8e:	429a      	cmp	r2, r3
 8026d90:	d301      	bcc.n	8026d96 <spi_flash_get_baud_rate_prescaler+0x32>
         return SPI_BAUDRATEPRESCALER_4;
 8026d92:	2308      	movs	r3, #8
 8026d94:	e023      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 8)
 8026d96:	68fb      	ldr	r3, [r7, #12]
 8026d98:	08db      	lsrs	r3, r3, #3
 8026d9a:	687a      	ldr	r2, [r7, #4]
 8026d9c:	429a      	cmp	r2, r3
 8026d9e:	d301      	bcc.n	8026da4 <spi_flash_get_baud_rate_prescaler+0x40>
         return SPI_BAUDRATEPRESCALER_8;
 8026da0:	2310      	movs	r3, #16
 8026da2:	e01c      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 16)
 8026da4:	68fb      	ldr	r3, [r7, #12]
 8026da6:	091b      	lsrs	r3, r3, #4
 8026da8:	687a      	ldr	r2, [r7, #4]
 8026daa:	429a      	cmp	r2, r3
 8026dac:	d301      	bcc.n	8026db2 <spi_flash_get_baud_rate_prescaler+0x4e>
         return SPI_BAUDRATEPRESCALER_16;
 8026dae:	2318      	movs	r3, #24
 8026db0:	e015      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 32)
 8026db2:	68fb      	ldr	r3, [r7, #12]
 8026db4:	095b      	lsrs	r3, r3, #5
 8026db6:	687a      	ldr	r2, [r7, #4]
 8026db8:	429a      	cmp	r2, r3
 8026dba:	d301      	bcc.n	8026dc0 <spi_flash_get_baud_rate_prescaler+0x5c>
         return SPI_BAUDRATEPRESCALER_32;
 8026dbc:	2320      	movs	r3, #32
 8026dbe:	e00e      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 64)
 8026dc0:	68fb      	ldr	r3, [r7, #12]
 8026dc2:	099b      	lsrs	r3, r3, #6
 8026dc4:	687a      	ldr	r2, [r7, #4]
 8026dc6:	429a      	cmp	r2, r3
 8026dc8:	d301      	bcc.n	8026dce <spi_flash_get_baud_rate_prescaler+0x6a>
          return SPI_BAUDRATEPRESCALER_64;
 8026dca:	2328      	movs	r3, #40	; 0x28
 8026dcc:	e007      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else if (spi_freq_khz >= system_clock_khz / 128)
 8026dce:	68fb      	ldr	r3, [r7, #12]
 8026dd0:	09db      	lsrs	r3, r3, #7
 8026dd2:	687a      	ldr	r2, [r7, #4]
 8026dd4:	429a      	cmp	r2, r3
 8026dd6:	d301      	bcc.n	8026ddc <spi_flash_get_baud_rate_prescaler+0x78>
          return SPI_BAUDRATEPRESCALER_128;
 8026dd8:	2330      	movs	r3, #48	; 0x30
 8026dda:	e000      	b.n	8026dde <spi_flash_get_baud_rate_prescaler+0x7a>
    else
          return SPI_BAUDRATEPRESCALER_256;
 8026ddc:	2338      	movs	r3, #56	; 0x38
}
 8026dde:	4618      	mov	r0, r3
 8026de0:	3714      	adds	r7, #20
 8026de2:	46bd      	mov	sp, r7
 8026de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026de8:	4770      	bx	lr
 8026dea:	bf00      	nop
 8026dec:	20000138 	.word	0x20000138
 8026df0:	10624dd3 	.word	0x10624dd3

08026df4 <spi_flash_init>:

// 初始化SPI Flash
static int spi_flash_init(void *conf, uint32_t conf_size)
{
 8026df4:	b590      	push	{r4, r7, lr}
 8026df6:	b08f      	sub	sp, #60	; 0x3c
 8026df8:	af00      	add	r7, sp, #0
 8026dfa:	6078      	str	r0, [r7, #4]
 8026dfc:	6039      	str	r1, [r7, #0]
    SPI_InitTypeDef spi_init;

    if (conf_size < sizeof(spi_conf_t))
 8026dfe:	683b      	ldr	r3, [r7, #0]
 8026e00:	2b0c      	cmp	r3, #12
 8026e02:	d802      	bhi.n	8026e0a <spi_flash_init+0x16>
        return -1; 
 8026e04:	f04f 33ff 	mov.w	r3, #4294967295
 8026e08:	e04a      	b.n	8026ea0 <spi_flash_init+0xac>

    spi_conf = *(spi_conf_t *)conf;
 8026e0a:	4b27      	ldr	r3, [pc, #156]	; (8026ea8 <spi_flash_init+0xb4>)
 8026e0c:	687a      	ldr	r2, [r7, #4]
 8026e0e:	4614      	mov	r4, r2
 8026e10:	6820      	ldr	r0, [r4, #0]
 8026e12:	6861      	ldr	r1, [r4, #4]
 8026e14:	68a2      	ldr	r2, [r4, #8]
 8026e16:	c307      	stmia	r3!, {r0, r1, r2}
 8026e18:	7b22      	ldrb	r2, [r4, #12]
 8026e1a:	701a      	strb	r2, [r3, #0]

    spi_flash_gpio_init();
 8026e1c:	f7ff ff22 	bl	8026c64 <spi_flash_gpio_init>

    spi_flash_deselect_chip();
 8026e20:	f7ff ff94 	bl	8026d4c <spi_flash_deselect_chip>

    /* 配置SPI */
    hspi1.Instance = SPI1;
 8026e24:	4b21      	ldr	r3, [pc, #132]	; (8026eac <spi_flash_init+0xb8>)
 8026e26:	4a22      	ldr	r2, [pc, #136]	; (8026eb0 <spi_flash_init+0xbc>)
 8026e28:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8026e2a:	4b20      	ldr	r3, [pc, #128]	; (8026eac <spi_flash_init+0xb8>)
 8026e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8026e30:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8026e32:	4b1e      	ldr	r3, [pc, #120]	; (8026eac <spi_flash_init+0xb8>)
 8026e34:	2200      	movs	r2, #0
 8026e36:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8026e38:	4b1c      	ldr	r3, [pc, #112]	; (8026eac <spi_flash_init+0xb8>)
 8026e3a:	2200      	movs	r2, #0
 8026e3c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8026e3e:	4b1b      	ldr	r3, [pc, #108]	; (8026eac <spi_flash_init+0xb8>)
 8026e40:	2202      	movs	r2, #2
 8026e42:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8026e44:	4b19      	ldr	r3, [pc, #100]	; (8026eac <spi_flash_init+0xb8>)
 8026e46:	2201      	movs	r2, #1
 8026e48:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8026e4a:	4b18      	ldr	r3, [pc, #96]	; (8026eac <spi_flash_init+0xb8>)
 8026e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026e50:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = spi_flash_get_baud_rate_prescaler(spi_conf.freq);
 8026e52:	4b15      	ldr	r3, [pc, #84]	; (8026ea8 <spi_flash_init+0xb4>)
 8026e54:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8026e58:	4618      	mov	r0, r3
 8026e5a:	f7ff ff83 	bl	8026d64 <spi_flash_get_baud_rate_prescaler>
 8026e5e:	4603      	mov	r3, r0
 8026e60:	461a      	mov	r2, r3
 8026e62:	4b12      	ldr	r3, [pc, #72]	; (8026eac <spi_flash_init+0xb8>)
 8026e64:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8026e66:	4b11      	ldr	r3, [pc, #68]	; (8026eac <spi_flash_init+0xb8>)
 8026e68:	2200      	movs	r2, #0
 8026e6a:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8026e6c:	4b0f      	ldr	r3, [pc, #60]	; (8026eac <spi_flash_init+0xb8>)
 8026e6e:	2200      	movs	r2, #0
 8026e70:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8026e72:	4b0e      	ldr	r3, [pc, #56]	; (8026eac <spi_flash_init+0xb8>)
 8026e74:	2200      	movs	r2, #0
 8026e76:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8026e78:	4b0c      	ldr	r3, [pc, #48]	; (8026eac <spi_flash_init+0xb8>)
 8026e7a:	220a      	movs	r2, #10
 8026e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8026e7e:	480b      	ldr	r0, [pc, #44]	; (8026eac <spi_flash_init+0xb8>)
 8026e80:	f004 f803 	bl	802ae8a <HAL_SPI_Init>
 8026e84:	4603      	mov	r3, r0
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	d001      	beq.n	8026e8e <spi_flash_init+0x9a>
    {
      Error_Handler();
 8026e8a:	f7fc fde1 	bl	8023a50 <Error_Handler>
    }  // 根据以上配置初始化SPI1

    /* 使能SPI */
//    SPI_Cmd(SPI1, ENABLE);
    __HAL_SPI_ENABLE(&hspi1); // 初始化SPI Flash芯片
 8026e8e:	4b07      	ldr	r3, [pc, #28]	; (8026eac <spi_flash_init+0xb8>)
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	681a      	ldr	r2, [r3, #0]
 8026e94:	4b05      	ldr	r3, [pc, #20]	; (8026eac <spi_flash_init+0xb8>)
 8026e96:	681b      	ldr	r3, [r3, #0]
 8026e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026e9c:	601a      	str	r2, [r3, #0]

    return 0;
 8026e9e:	2300      	movs	r3, #0
}
 8026ea0:	4618      	mov	r0, r3
 8026ea2:	373c      	adds	r7, #60	; 0x3c
 8026ea4:	46bd      	mov	sp, r7
 8026ea6:	bd90      	pop	{r4, r7, pc}
 8026ea8:	200051a0 	.word	0x200051a0
 8026eac:	20005130 	.word	0x20005130
 8026eb0:	40013000 	.word	0x40013000

08026eb4 <spi_flash_uninit>:

// 取消初始化SPI Flash
static void spi_flash_uninit()
{
 8026eb4:	b580      	push	{r7, lr}
 8026eb6:	af00      	add	r7, sp, #0
//    spi_flash_gpio_uninit(&hspi1);
	HAL_SPI_MspDeInit(&hspi1);
 8026eb8:	4806      	ldr	r0, [pc, #24]	; (8026ed4 <spi_flash_uninit+0x20>)
 8026eba:	f7ff f9db 	bl	8026274 <HAL_SPI_MspDeInit>
    /* 禁用SPI */
    __HAL_SPI_DISABLE(&hspi1);
 8026ebe:	4b05      	ldr	r3, [pc, #20]	; (8026ed4 <spi_flash_uninit+0x20>)
 8026ec0:	681b      	ldr	r3, [r3, #0]
 8026ec2:	681a      	ldr	r2, [r3, #0]
 8026ec4:	4b03      	ldr	r3, [pc, #12]	; (8026ed4 <spi_flash_uninit+0x20>)
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026ecc:	601a      	str	r2, [r3, #0]
}
 8026ece:	bf00      	nop
 8026ed0:	bd80      	pop	{r7, pc}
 8026ed2:	bf00      	nop
 8026ed4:	20005130 	.word	0x20005130

08026ed8 <spi_flash_send_byte>:

// 发送一个字节到SPI Flash并返回接收到的字节
static uint8_t spi_flash_send_byte(uint8_t byte)
{
 8026ed8:	b580      	push	{r7, lr}
 8026eda:	b084      	sub	sp, #16
 8026edc:	af00      	add	r7, sp, #0
 8026ede:	4603      	mov	r3, r0
 8026ee0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_byte;

    spi_flash_select_chip();
 8026ee2:	f7ff ff27 	bl	8026d34 <spi_flash_select_chip>
    // 等待TXE标志位设置，表示发送缓冲区为空
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8026ee6:	bf00      	nop
 8026ee8:	4815      	ldr	r0, [pc, #84]	; (8026f40 <spi_flash_send_byte+0x68>)
 8026eea:	f004 fd6d 	bl	802b9c8 <HAL_SPI_GetState>
 8026eee:	4603      	mov	r3, r0
 8026ef0:	2b01      	cmp	r3, #1
 8026ef2:	d1f9      	bne.n	8026ee8 <spi_flash_send_byte+0x10>

    // 发送一个字节
    if (HAL_OK == HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY))
 8026ef4:	1df9      	adds	r1, r7, #7
 8026ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8026efa:	2201      	movs	r2, #1
 8026efc:	4810      	ldr	r0, [pc, #64]	; (8026f40 <spi_flash_send_byte+0x68>)
 8026efe:	f004 f875 	bl	802afec <HAL_SPI_Transmit>
 8026f02:	4603      	mov	r3, r0
 8026f04:	2b00      	cmp	r3, #0
 8026f06:	d113      	bne.n	8026f30 <spi_flash_send_byte+0x58>
    {
        // 等待RXNE标志位设置，表示接收缓冲区非空
        while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8026f08:	bf00      	nop
 8026f0a:	480d      	ldr	r0, [pc, #52]	; (8026f40 <spi_flash_send_byte+0x68>)
 8026f0c:	f004 fd5c 	bl	802b9c8 <HAL_SPI_GetState>
 8026f10:	4603      	mov	r3, r0
 8026f12:	2b01      	cmp	r3, #1
 8026f14:	d1f9      	bne.n	8026f0a <spi_flash_send_byte+0x32>

        // 接收一个字节
        if (HAL_OK == HAL_SPI_Receive(&hspi1, &rx_byte, 1, HAL_MAX_DELAY))
 8026f16:	f107 010f 	add.w	r1, r7, #15
 8026f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8026f1e:	2201      	movs	r2, #1
 8026f20:	4807      	ldr	r0, [pc, #28]	; (8026f40 <spi_flash_send_byte+0x68>)
 8026f22:	f004 f99f 	bl	802b264 <HAL_SPI_Receive>
 8026f26:	4603      	mov	r3, r0
 8026f28:	2b00      	cmp	r3, #0
 8026f2a:	d101      	bne.n	8026f30 <spi_flash_send_byte+0x58>
        {
            return rx_byte;
 8026f2c:	7bfb      	ldrb	r3, [r7, #15]
 8026f2e:	e002      	b.n	8026f36 <spi_flash_send_byte+0x5e>
        }
    }

    spi_flash_deselect_chip();
 8026f30:	f7ff ff0c 	bl	8026d4c <spi_flash_deselect_chip>

    return 0; // 发送或接收出现问题，返回0或者根据需求返回其他错误值
 8026f34:	2300      	movs	r3, #0
}
 8026f36:	4618      	mov	r0, r3
 8026f38:	3710      	adds	r7, #16
 8026f3a:	46bd      	mov	sp, r7
 8026f3c:	bd80      	pop	{r7, pc}
 8026f3e:	bf00      	nop
 8026f40:	20005130 	.word	0x20005130

08026f44 <spi_flash_read_byte>:

// 从SPI Flash中读取一个字节
static inline uint8_t spi_flash_read_byte()
{
 8026f44:	b580      	push	{r7, lr}
 8026f46:	af00      	add	r7, sp, #0
    return spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8026f48:	20a5      	movs	r0, #165	; 0xa5
 8026f4a:	f7ff ffc5 	bl	8026ed8 <spi_flash_send_byte>
 8026f4e:	4603      	mov	r3, r0
}
 8026f50:	4618      	mov	r0, r3
 8026f52:	bd80      	pop	{r7, pc}

08026f54 <spi_flash_read_status>:

// 读取SPI Flash的状态寄存器值
static uint32_t spi_flash_read_status()
{
 8026f54:	b580      	push	{r7, lr}
 8026f56:	b082      	sub	sp, #8
 8026f58:	af00      	add	r7, sp, #0
    uint8_t status;
    uint32_t flash_status = FLASH_STATUS_READY;
 8026f5a:	2300      	movs	r3, #0
 8026f5c:	607b      	str	r3, [r7, #4]

    spi_flash_select_chip();
 8026f5e:	f7ff fee9 	bl	8026d34 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.status_cmd);
 8026f62:	4b16      	ldr	r3, [pc, #88]	; (8026fbc <spi_flash_read_status+0x68>)
 8026f64:	799b      	ldrb	r3, [r3, #6]
 8026f66:	4618      	mov	r0, r3
 8026f68:	f7ff ffb6 	bl	8026ed8 <spi_flash_send_byte>

    status = spi_flash_read_byte();
 8026f6c:	f7ff ffea 	bl	8026f44 <spi_flash_read_byte>
 8026f70:	4603      	mov	r3, r0
 8026f72:	70fb      	strb	r3, [r7, #3]

    if (spi_conf.busy_state == 1 && (status & (1 << spi_conf.busy_bit)))
 8026f74:	4b11      	ldr	r3, [pc, #68]	; (8026fbc <spi_flash_read_status+0x68>)
 8026f76:	7a1b      	ldrb	r3, [r3, #8]
 8026f78:	2b01      	cmp	r3, #1
 8026f7a:	d10a      	bne.n	8026f92 <spi_flash_read_status+0x3e>
 8026f7c:	78fb      	ldrb	r3, [r7, #3]
 8026f7e:	4a0f      	ldr	r2, [pc, #60]	; (8026fbc <spi_flash_read_status+0x68>)
 8026f80:	79d2      	ldrb	r2, [r2, #7]
 8026f82:	4113      	asrs	r3, r2
 8026f84:	f003 0301 	and.w	r3, r3, #1
 8026f88:	2b00      	cmp	r3, #0
 8026f8a:	d002      	beq.n	8026f92 <spi_flash_read_status+0x3e>
        flash_status = FLASH_STATUS_BUSY;
 8026f8c:	2301      	movs	r3, #1
 8026f8e:	607b      	str	r3, [r7, #4]
 8026f90:	e00d      	b.n	8026fae <spi_flash_read_status+0x5a>
    else if (spi_conf.busy_state == 0 && !(status & (1 << spi_conf.busy_bit)))
 8026f92:	4b0a      	ldr	r3, [pc, #40]	; (8026fbc <spi_flash_read_status+0x68>)
 8026f94:	7a1b      	ldrb	r3, [r3, #8]
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d109      	bne.n	8026fae <spi_flash_read_status+0x5a>
 8026f9a:	78fb      	ldrb	r3, [r7, #3]
 8026f9c:	4a07      	ldr	r2, [pc, #28]	; (8026fbc <spi_flash_read_status+0x68>)
 8026f9e:	79d2      	ldrb	r2, [r2, #7]
 8026fa0:	4113      	asrs	r3, r2
 8026fa2:	f003 0301 	and.w	r3, r3, #1
 8026fa6:	2b00      	cmp	r3, #0
 8026fa8:	d101      	bne.n	8026fae <spi_flash_read_status+0x5a>
        flash_status = FLASH_STATUS_BUSY;
 8026faa:	2301      	movs	r3, #1
 8026fac:	607b      	str	r3, [r7, #4]

    spi_flash_deselect_chip();
 8026fae:	f7ff fecd 	bl	8026d4c <spi_flash_deselect_chip>

    return flash_status;
 8026fb2:	687b      	ldr	r3, [r7, #4]
}
 8026fb4:	4618      	mov	r0, r3
 8026fb6:	3708      	adds	r7, #8
 8026fb8:	46bd      	mov	sp, r7
 8026fba:	bd80      	pop	{r7, pc}
 8026fbc:	200051a0 	.word	0x200051a0

08026fc0 <spi_flash_get_status>:

// 获取SPI Flash的状态，等待操作完成或超时
static uint32_t spi_flash_get_status()
{
 8026fc0:	b580      	push	{r7, lr}
 8026fc2:	b082      	sub	sp, #8
 8026fc4:	af00      	add	r7, sp, #0
    uint32_t status, timeout = 0x1000000;
 8026fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8026fca:	603b      	str	r3, [r7, #0]

    status = spi_flash_read_status();
 8026fcc:	f7ff ffc2 	bl	8026f54 <spi_flash_read_status>
 8026fd0:	6078      	str	r0, [r7, #4]

    /* 等待操作完成或超时 */
    while (status == FLASH_STATUS_BUSY && timeout)
 8026fd2:	e005      	b.n	8026fe0 <spi_flash_get_status+0x20>
    {
        status = spi_flash_read_status();
 8026fd4:	f7ff ffbe 	bl	8026f54 <spi_flash_read_status>
 8026fd8:	6078      	str	r0, [r7, #4]
        timeout --;
 8026fda:	683b      	ldr	r3, [r7, #0]
 8026fdc:	3b01      	subs	r3, #1
 8026fde:	603b      	str	r3, [r7, #0]
    while (status == FLASH_STATUS_BUSY && timeout)
 8026fe0:	687b      	ldr	r3, [r7, #4]
 8026fe2:	2b01      	cmp	r3, #1
 8026fe4:	d102      	bne.n	8026fec <spi_flash_get_status+0x2c>
 8026fe6:	683b      	ldr	r3, [r7, #0]
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	d1f3      	bne.n	8026fd4 <spi_flash_get_status+0x14>
    }

    if (!timeout)
 8026fec:	683b      	ldr	r3, [r7, #0]
 8026fee:	2b00      	cmp	r3, #0
 8026ff0:	d101      	bne.n	8026ff6 <spi_flash_get_status+0x36>
        status = FLASH_STATUS_TIMEOUT;
 8026ff2:	2303      	movs	r3, #3
 8026ff4:	607b      	str	r3, [r7, #4]

    return status;
 8026ff6:	687b      	ldr	r3, [r7, #4]
}
 8026ff8:	4618      	mov	r0, r3
 8026ffa:	3708      	adds	r7, #8
 8026ffc:	46bd      	mov	sp, r7
 8026ffe:	bd80      	pop	{r7, pc}

08027000 <spi_flash_read_id>:

// 读取SPI Flash的ID
static void spi_flash_read_id(chip_id_t *chip_id)
{
 8027000:	b580      	push	{r7, lr}
 8027002:	b082      	sub	sp, #8
 8027004:	af00      	add	r7, sp, #0
 8027006:	6078      	str	r0, [r7, #4]
    spi_flash_select_chip();
 8027008:	f7ff fe94 	bl	8026d34 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_id_cmd);
 802700c:	4b17      	ldr	r3, [pc, #92]	; (802706c <spi_flash_read_id+0x6c>)
 802700e:	789b      	ldrb	r3, [r3, #2]
 8027010:	4618      	mov	r0, r3
 8027012:	f7ff ff61 	bl	8026ed8 <spi_flash_send_byte>

    chip_id->maker_id = spi_flash_read_byte();
 8027016:	f7ff ff95 	bl	8026f44 <spi_flash_read_byte>
 802701a:	4603      	mov	r3, r0
 802701c:	461a      	mov	r2, r3
 802701e:	687b      	ldr	r3, [r7, #4]
 8027020:	701a      	strb	r2, [r3, #0]
    chip_id->device_id = spi_flash_read_byte();
 8027022:	f7ff ff8f 	bl	8026f44 <spi_flash_read_byte>
 8027026:	4603      	mov	r3, r0
 8027028:	461a      	mov	r2, r3
 802702a:	687b      	ldr	r3, [r7, #4]
 802702c:	705a      	strb	r2, [r3, #1]
    chip_id->third_id = spi_flash_read_byte();
 802702e:	f7ff ff89 	bl	8026f44 <spi_flash_read_byte>
 8027032:	4603      	mov	r3, r0
 8027034:	461a      	mov	r2, r3
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	709a      	strb	r2, [r3, #2]
    chip_id->fourth_id = spi_flash_read_byte();
 802703a:	f7ff ff83 	bl	8026f44 <spi_flash_read_byte>
 802703e:	4603      	mov	r3, r0
 8027040:	461a      	mov	r2, r3
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	70da      	strb	r2, [r3, #3]
    chip_id->fifth_id = spi_flash_read_byte();
 8027046:	f7ff ff7d 	bl	8026f44 <spi_flash_read_byte>
 802704a:	4603      	mov	r3, r0
 802704c:	461a      	mov	r2, r3
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	711a      	strb	r2, [r3, #4]
    chip_id->sixth_id = spi_flash_read_byte();
 8027052:	f7ff ff77 	bl	8026f44 <spi_flash_read_byte>
 8027056:	4603      	mov	r3, r0
 8027058:	461a      	mov	r2, r3
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	715a      	strb	r2, [r3, #5]

    spi_flash_deselect_chip();
 802705e:	f7ff fe75 	bl	8026d4c <spi_flash_deselect_chip>
}
 8027062:	bf00      	nop
 8027064:	3708      	adds	r7, #8
 8027066:	46bd      	mov	sp, r7
 8027068:	bd80      	pop	{r7, pc}
 802706a:	bf00      	nop
 802706c:	200051a0 	.word	0x200051a0

08027070 <spi_flash_write_enable>:

// 启用SPI Flash的写使能
static void spi_flash_write_enable()
{
 8027070:	b580      	push	{r7, lr}
 8027072:	af00      	add	r7, sp, #0
    if (spi_conf.write_en_cmd == UNDEFINED_CMD)
 8027074:	4b07      	ldr	r3, [pc, #28]	; (8027094 <spi_flash_write_enable+0x24>)
 8027076:	791b      	ldrb	r3, [r3, #4]
 8027078:	2bff      	cmp	r3, #255	; 0xff
 802707a:	d009      	beq.n	8027090 <spi_flash_write_enable+0x20>
        return;

    spi_flash_select_chip();
 802707c:	f7ff fe5a 	bl	8026d34 <spi_flash_select_chip>
    spi_flash_send_byte(spi_conf.write_en_cmd);
 8027080:	4b04      	ldr	r3, [pc, #16]	; (8027094 <spi_flash_write_enable+0x24>)
 8027082:	791b      	ldrb	r3, [r3, #4]
 8027084:	4618      	mov	r0, r3
 8027086:	f7ff ff27 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_deselect_chip();
 802708a:	f7ff fe5f 	bl	8026d4c <spi_flash_deselect_chip>
 802708e:	e000      	b.n	8027092 <spi_flash_write_enable+0x22>
        return;
 8027090:	bf00      	nop
}
 8027092:	bd80      	pop	{r7, pc}
 8027094:	200051a0 	.word	0x200051a0

08027098 <spi_flash_write_page_async>:

// 异步写入SPI Flash的一页数据
static void spi_flash_write_page_async(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 8027098:	b580      	push	{r7, lr}
 802709a:	b086      	sub	sp, #24
 802709c:	af00      	add	r7, sp, #0
 802709e:	60f8      	str	r0, [r7, #12]
 80270a0:	60b9      	str	r1, [r7, #8]
 80270a2:	607a      	str	r2, [r7, #4]
    uint32_t i;

    spi_flash_write_enable();
 80270a4:	f7ff ffe4 	bl	8027070 <spi_flash_write_enable>

    spi_flash_select_chip();
 80270a8:	f7ff fe44 	bl	8026d34 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.write_cmd);
 80270ac:	4b19      	ldr	r3, [pc, #100]	; (8027114 <spi_flash_write_page_async+0x7c>)
 80270ae:	78db      	ldrb	r3, [r3, #3]
 80270b0:	4618      	mov	r0, r3
 80270b2:	f7ff ff11 	bl	8026ed8 <spi_flash_send_byte>

    page = page << spi_conf.page_offset;
 80270b6:	4b17      	ldr	r3, [pc, #92]	; (8027114 <spi_flash_write_page_async+0x7c>)
 80270b8:	781b      	ldrb	r3, [r3, #0]
 80270ba:	461a      	mov	r2, r3
 80270bc:	68bb      	ldr	r3, [r7, #8]
 80270be:	4093      	lsls	r3, r2
 80270c0:	60bb      	str	r3, [r7, #8]

    spi_flash_send_byte(ADDR_3rd_CYCLE(page));
 80270c2:	68bb      	ldr	r3, [r7, #8]
 80270c4:	0c1b      	lsrs	r3, r3, #16
 80270c6:	b2db      	uxtb	r3, r3
 80270c8:	4618      	mov	r0, r3
 80270ca:	f7ff ff05 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(page));
 80270ce:	68bb      	ldr	r3, [r7, #8]
 80270d0:	0a1b      	lsrs	r3, r3, #8
 80270d2:	b2db      	uxtb	r3, r3
 80270d4:	4618      	mov	r0, r3
 80270d6:	f7ff feff 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(page));
 80270da:	68bb      	ldr	r3, [r7, #8]
 80270dc:	b2db      	uxtb	r3, r3
 80270de:	4618      	mov	r0, r3
 80270e0:	f7ff fefa 	bl	8026ed8 <spi_flash_send_byte>

    for (i = 0; i < page_size; i++)
 80270e4:	2300      	movs	r3, #0
 80270e6:	617b      	str	r3, [r7, #20]
 80270e8:	e009      	b.n	80270fe <spi_flash_write_page_async+0x66>
        spi_flash_send_byte(buf[i]);
 80270ea:	68fa      	ldr	r2, [r7, #12]
 80270ec:	697b      	ldr	r3, [r7, #20]
 80270ee:	4413      	add	r3, r2
 80270f0:	781b      	ldrb	r3, [r3, #0]
 80270f2:	4618      	mov	r0, r3
 80270f4:	f7ff fef0 	bl	8026ed8 <spi_flash_send_byte>
    for (i = 0; i < page_size; i++)
 80270f8:	697b      	ldr	r3, [r7, #20]
 80270fa:	3301      	adds	r3, #1
 80270fc:	617b      	str	r3, [r7, #20]
 80270fe:	697a      	ldr	r2, [r7, #20]
 8027100:	687b      	ldr	r3, [r7, #4]
 8027102:	429a      	cmp	r2, r3
 8027104:	d3f1      	bcc.n	80270ea <spi_flash_write_page_async+0x52>

    spi_flash_deselect_chip();
 8027106:	f7ff fe21 	bl	8026d4c <spi_flash_deselect_chip>
}
 802710a:	bf00      	nop
 802710c:	3718      	adds	r7, #24
 802710e:	46bd      	mov	sp, r7
 8027110:	bd80      	pop	{r7, pc}
 8027112:	bf00      	nop
 8027114:	200051a0 	.word	0x200051a0

08027118 <spi_flash_read_data>:

// 从指定地址读取数据到缓冲区
static uint32_t spi_flash_read_data(uint8_t *buf, uint32_t page, uint32_t page_offset, uint32_t data_size)
{
 8027118:	b590      	push	{r4, r7, lr}
 802711a:	b087      	sub	sp, #28
 802711c:	af00      	add	r7, sp, #0
 802711e:	60f8      	str	r0, [r7, #12]
 8027120:	60b9      	str	r1, [r7, #8]
 8027122:	607a      	str	r2, [r7, #4]
 8027124:	603b      	str	r3, [r7, #0]
    uint32_t i, addr = (page << spi_conf.page_offset) + page_offset;
 8027126:	4b1d      	ldr	r3, [pc, #116]	; (802719c <spi_flash_read_data+0x84>)
 8027128:	781b      	ldrb	r3, [r3, #0]
 802712a:	461a      	mov	r2, r3
 802712c:	68bb      	ldr	r3, [r7, #8]
 802712e:	4093      	lsls	r3, r2
 8027130:	687a      	ldr	r2, [r7, #4]
 8027132:	4413      	add	r3, r2
 8027134:	613b      	str	r3, [r7, #16]

    spi_flash_select_chip();
 8027136:	f7ff fdfd 	bl	8026d34 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.read_cmd);
 802713a:	4b18      	ldr	r3, [pc, #96]	; (802719c <spi_flash_read_data+0x84>)
 802713c:	785b      	ldrb	r3, [r3, #1]
 802713e:	4618      	mov	r0, r3
 8027140:	f7ff feca 	bl	8026ed8 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027144:	693b      	ldr	r3, [r7, #16]
 8027146:	0c1b      	lsrs	r3, r3, #16
 8027148:	b2db      	uxtb	r3, r3
 802714a:	4618      	mov	r0, r3
 802714c:	f7ff fec4 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8027150:	693b      	ldr	r3, [r7, #16]
 8027152:	0a1b      	lsrs	r3, r3, #8
 8027154:	b2db      	uxtb	r3, r3
 8027156:	4618      	mov	r0, r3
 8027158:	f7ff febe 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 802715c:	693b      	ldr	r3, [r7, #16]
 802715e:	b2db      	uxtb	r3, r3
 8027160:	4618      	mov	r0, r3
 8027162:	f7ff feb9 	bl	8026ed8 <spi_flash_send_byte>

    /* AT45DB要求在地址后写入虚拟字节 */
    spi_flash_send_byte(FLASH_DUMMY_BYTE);
 8027166:	20a5      	movs	r0, #165	; 0xa5
 8027168:	f7ff feb6 	bl	8026ed8 <spi_flash_send_byte>

    for (i = 0; i < data_size; i++)
 802716c:	2300      	movs	r3, #0
 802716e:	617b      	str	r3, [r7, #20]
 8027170:	e009      	b.n	8027186 <spi_flash_read_data+0x6e>
        buf[i] = spi_flash_read_byte();
 8027172:	68fa      	ldr	r2, [r7, #12]
 8027174:	697b      	ldr	r3, [r7, #20]
 8027176:	18d4      	adds	r4, r2, r3
 8027178:	f7ff fee4 	bl	8026f44 <spi_flash_read_byte>
 802717c:	4603      	mov	r3, r0
 802717e:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < data_size; i++)
 8027180:	697b      	ldr	r3, [r7, #20]
 8027182:	3301      	adds	r3, #1
 8027184:	617b      	str	r3, [r7, #20]
 8027186:	697a      	ldr	r2, [r7, #20]
 8027188:	683b      	ldr	r3, [r7, #0]
 802718a:	429a      	cmp	r2, r3
 802718c:	d3f1      	bcc.n	8027172 <spi_flash_read_data+0x5a>

    spi_flash_deselect_chip();
 802718e:	f7ff fddd 	bl	8026d4c <spi_flash_deselect_chip>

    return FLASH_STATUS_READY;
 8027192:	2300      	movs	r3, #0
}
 8027194:	4618      	mov	r0, r3
 8027196:	371c      	adds	r7, #28
 8027198:	46bd      	mov	sp, r7
 802719a:	bd90      	pop	{r4, r7, pc}
 802719c:	200051a0 	.word	0x200051a0

080271a0 <spi_flash_read_page>:

// 从指定页读取数据到缓冲区
static uint32_t spi_flash_read_page(uint8_t *buf, uint32_t page, uint32_t page_size)
{
 80271a0:	b580      	push	{r7, lr}
 80271a2:	b084      	sub	sp, #16
 80271a4:	af00      	add	r7, sp, #0
 80271a6:	60f8      	str	r0, [r7, #12]
 80271a8:	60b9      	str	r1, [r7, #8]
 80271aa:	607a      	str	r2, [r7, #4]
    return spi_flash_read_data(buf, page, 0, page_size);
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	2200      	movs	r2, #0
 80271b0:	68b9      	ldr	r1, [r7, #8]
 80271b2:	68f8      	ldr	r0, [r7, #12]
 80271b4:	f7ff ffb0 	bl	8027118 <spi_flash_read_data>
 80271b8:	4603      	mov	r3, r0
}
 80271ba:	4618      	mov	r0, r3
 80271bc:	3710      	adds	r7, #16
 80271be:	46bd      	mov	sp, r7
 80271c0:	bd80      	pop	{r7, pc}

080271c2 <spi_flash_read_spare_data>:

// 从指定页的偏移量读取备用数据到缓冲区
static uint32_t spi_flash_read_spare_data(uint8_t *buf, uint32_t page, uint32_t offset, uint32_t data_size)
{
 80271c2:	b480      	push	{r7}
 80271c4:	b085      	sub	sp, #20
 80271c6:	af00      	add	r7, sp, #0
 80271c8:	60f8      	str	r0, [r7, #12]
 80271ca:	60b9      	str	r1, [r7, #8]
 80271cc:	607a      	str	r2, [r7, #4]
 80271ce:	603b      	str	r3, [r7, #0]
    return FLASH_STATUS_INVALID_CMD;
 80271d0:	2304      	movs	r3, #4
}
 80271d2:	4618      	mov	r0, r3
 80271d4:	3714      	adds	r7, #20
 80271d6:	46bd      	mov	sp, r7
 80271d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271dc:	4770      	bx	lr
	...

080271e0 <spi_flash_erase_block>:

// 擦除指定块
static uint32_t spi_flash_erase_block(uint32_t page)
{
 80271e0:	b580      	push	{r7, lr}
 80271e2:	b084      	sub	sp, #16
 80271e4:	af00      	add	r7, sp, #0
 80271e6:	6078      	str	r0, [r7, #4]
    uint32_t addr = page << spi_conf.page_offset;
 80271e8:	4b14      	ldr	r3, [pc, #80]	; (802723c <spi_flash_erase_block+0x5c>)
 80271ea:	781b      	ldrb	r3, [r3, #0]
 80271ec:	461a      	mov	r2, r3
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	4093      	lsls	r3, r2
 80271f2:	60fb      	str	r3, [r7, #12]

    spi_flash_write_enable();
 80271f4:	f7ff ff3c 	bl	8027070 <spi_flash_write_enable>

    spi_flash_select_chip();
 80271f8:	f7ff fd9c 	bl	8026d34 <spi_flash_select_chip>

    spi_flash_send_byte(spi_conf.erase_cmd);
 80271fc:	4b0f      	ldr	r3, [pc, #60]	; (802723c <spi_flash_erase_block+0x5c>)
 80271fe:	795b      	ldrb	r3, [r3, #5]
 8027200:	4618      	mov	r0, r3
 8027202:	f7ff fe69 	bl	8026ed8 <spi_flash_send_byte>

    spi_flash_send_byte(ADDR_3rd_CYCLE(addr));
 8027206:	68fb      	ldr	r3, [r7, #12]
 8027208:	0c1b      	lsrs	r3, r3, #16
 802720a:	b2db      	uxtb	r3, r3
 802720c:	4618      	mov	r0, r3
 802720e:	f7ff fe63 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_2nd_CYCLE(addr));
 8027212:	68fb      	ldr	r3, [r7, #12]
 8027214:	0a1b      	lsrs	r3, r3, #8
 8027216:	b2db      	uxtb	r3, r3
 8027218:	4618      	mov	r0, r3
 802721a:	f7ff fe5d 	bl	8026ed8 <spi_flash_send_byte>
    spi_flash_send_byte(ADDR_1st_CYCLE(addr));
 802721e:	68fb      	ldr	r3, [r7, #12]
 8027220:	b2db      	uxtb	r3, r3
 8027222:	4618      	mov	r0, r3
 8027224:	f7ff fe58 	bl	8026ed8 <spi_flash_send_byte>

    spi_flash_deselect_chip();
 8027228:	f7ff fd90 	bl	8026d4c <spi_flash_deselect_chip>

    return spi_flash_get_status();
 802722c:	f7ff fec8 	bl	8026fc0 <spi_flash_get_status>
 8027230:	4603      	mov	r3, r0
}
 8027232:	4618      	mov	r0, r3
 8027234:	3710      	adds	r7, #16
 8027236:	46bd      	mov	sp, r7
 8027238:	bd80      	pop	{r7, pc}
 802723a:	bf00      	nop
 802723c:	200051a0 	.word	0x200051a0

08027240 <spi_flash_is_bb_supported>:

// 检查是否支持坏块管理
static inline bool spi_flash_is_bb_supported()
{
 8027240:	b480      	push	{r7}
 8027242:	af00      	add	r7, sp, #0
    return false;
 8027244:	2300      	movs	r3, #0
}
 8027246:	4618      	mov	r0, r3
 8027248:	46bd      	mov	sp, r7
 802724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802724e:	4770      	bx	lr

08027250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8027250:	b580      	push	{r7, lr}
 8027252:	b082      	sub	sp, #8
 8027254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027256:	2300      	movs	r3, #0
 8027258:	607b      	str	r3, [r7, #4]
 802725a:	4b1f      	ldr	r3, [pc, #124]	; (80272d8 <HAL_MspInit+0x88>)
 802725c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802725e:	4a1e      	ldr	r2, [pc, #120]	; (80272d8 <HAL_MspInit+0x88>)
 8027260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027264:	6453      	str	r3, [r2, #68]	; 0x44
 8027266:	4b1c      	ldr	r3, [pc, #112]	; (80272d8 <HAL_MspInit+0x88>)
 8027268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802726a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802726e:	607b      	str	r3, [r7, #4]
 8027270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8027272:	2300      	movs	r3, #0
 8027274:	603b      	str	r3, [r7, #0]
 8027276:	4b18      	ldr	r3, [pc, #96]	; (80272d8 <HAL_MspInit+0x88>)
 8027278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802727a:	4a17      	ldr	r2, [pc, #92]	; (80272d8 <HAL_MspInit+0x88>)
 802727c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027280:	6413      	str	r3, [r2, #64]	; 0x40
 8027282:	4b15      	ldr	r3, [pc, #84]	; (80272d8 <HAL_MspInit+0x88>)
 8027284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802728a:	603b      	str	r3, [r7, #0]
 802728c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 802728e:	2200      	movs	r2, #0
 8027290:	2100      	movs	r1, #0
 8027292:	2001      	movs	r0, #1
 8027294:	f000 fbb3 	bl	80279fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8027298:	2001      	movs	r0, #1
 802729a:	f000 fbcc 	bl	8027a36 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 802729e:	2200      	movs	r2, #0
 80272a0:	2100      	movs	r1, #0
 80272a2:	2004      	movs	r0, #4
 80272a4:	f000 fbab 	bl	80279fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80272a8:	2004      	movs	r0, #4
 80272aa:	f000 fbc4 	bl	8027a36 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80272ae:	2200      	movs	r2, #0
 80272b0:	2100      	movs	r1, #0
 80272b2:	2005      	movs	r0, #5
 80272b4:	f000 fba3 	bl	80279fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80272b8:	2005      	movs	r0, #5
 80272ba:	f000 fbbc 	bl	8027a36 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80272be:	2200      	movs	r2, #0
 80272c0:	2100      	movs	r1, #0
 80272c2:	2051      	movs	r0, #81	; 0x51
 80272c4:	f000 fb9b 	bl	80279fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80272c8:	2051      	movs	r0, #81	; 0x51
 80272ca:	f000 fbb4 	bl	8027a36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80272ce:	bf00      	nop
 80272d0:	3708      	adds	r7, #8
 80272d2:	46bd      	mov	sp, r7
 80272d4:	bd80      	pop	{r7, pc}
 80272d6:	bf00      	nop
 80272d8:	40023800 	.word	0x40023800

080272dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80272dc:	b480      	push	{r7}
 80272de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80272e0:	e7fe      	b.n	80272e0 <NMI_Handler+0x4>

080272e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80272e2:	b480      	push	{r7}
 80272e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80272e6:	e7fe      	b.n	80272e6 <HardFault_Handler+0x4>

080272e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80272e8:	b480      	push	{r7}
 80272ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80272ec:	e7fe      	b.n	80272ec <MemManage_Handler+0x4>

080272ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80272ee:	b480      	push	{r7}
 80272f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80272f2:	e7fe      	b.n	80272f2 <BusFault_Handler+0x4>

080272f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80272f4:	b480      	push	{r7}
 80272f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80272f8:	e7fe      	b.n	80272f8 <UsageFault_Handler+0x4>

080272fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80272fa:	b480      	push	{r7}
 80272fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80272fe:	bf00      	nop
 8027300:	46bd      	mov	sp, r7
 8027302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027306:	4770      	bx	lr

08027308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8027308:	b480      	push	{r7}
 802730a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802730c:	bf00      	nop
 802730e:	46bd      	mov	sp, r7
 8027310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027314:	4770      	bx	lr

08027316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8027316:	b480      	push	{r7}
 8027318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802731a:	bf00      	nop
 802731c:	46bd      	mov	sp, r7
 802731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027322:	4770      	bx	lr

08027324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8027324:	b580      	push	{r7, lr}
 8027326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8027328:	f000 f9f6 	bl	8027718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802732c:	bf00      	nop
 802732e:	bd80      	pop	{r7, pc}

08027330 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8027330:	b580      	push	{r7, lr}
 8027332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8027334:	f002 fe20 	bl	8029f78 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8027338:	bf00      	nop
 802733a:	bd80      	pop	{r7, pc}

0802733c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 802733c:	b580      	push	{r7, lr}
 802733e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8027340:	f000 fc88 	bl	8027c54 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8027344:	bf00      	nop
 8027346:	bd80      	pop	{r7, pc}

08027348 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8027348:	b480      	push	{r7}
 802734a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 802734c:	bf00      	nop
 802734e:	46bd      	mov	sp, r7
 8027350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027354:	4770      	bx	lr
	...

08027358 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8027358:	b580      	push	{r7, lr}
 802735a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802735c:	4802      	ldr	r0, [pc, #8]	; (8027368 <SPI1_IRQHandler+0x10>)
 802735e:	f004 fa35 	bl	802b7cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8027362:	bf00      	nop
 8027364:	bd80      	pop	{r7, pc}
 8027366:	bf00      	nop
 8027368:	20005130 	.word	0x20005130

0802736c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 802736c:	b580      	push	{r7, lr}
 802736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8027370:	4802      	ldr	r0, [pc, #8]	; (802737c <USART1_IRQHandler+0x10>)
 8027372:	f004 fd5b 	bl	802be2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8027376:	bf00      	nop
 8027378:	bd80      	pop	{r7, pc}
 802737a:	bf00      	nop
 802737c:	200051b4 	.word	0x200051b4

08027380 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8027380:	b580      	push	{r7, lr}
 8027382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8027384:	4802      	ldr	r0, [pc, #8]	; (8027390 <FSMC_IRQHandler+0x10>)
 8027386:	f001 fa9c 	bl	80288c2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 802738a:	bf00      	nop
 802738c:	bd80      	pop	{r7, pc}
 802738e:	bf00      	nop
 8027390:	20000c04 	.word	0x20000c04

08027394 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8027394:	b580      	push	{r7, lr}
 8027396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8027398:	4802      	ldr	r0, [pc, #8]	; (80273a4 <OTG_FS_IRQHandler+0x10>)
 802739a:	f001 fcc0 	bl	8028d1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802739e:	bf00      	nop
 80273a0:	bd80      	pop	{r7, pc}
 80273a2:	bf00      	nop
 80273a4:	200079d8 	.word	0x200079d8

080273a8 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 80273a8:	b580      	push	{r7, lr}
 80273aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80273ac:	4802      	ldr	r0, [pc, #8]	; (80273b8 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 80273ae:	f001 fcb6 	bl	8028d1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 80273b2:	bf00      	nop
 80273b4:	bd80      	pop	{r7, pc}
 80273b6:	bf00      	nop
 80273b8:	20007ee4 	.word	0x20007ee4

080273bc <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 80273bc:	b580      	push	{r7, lr}
 80273be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80273c0:	4802      	ldr	r0, [pc, #8]	; (80273cc <OTG_HS_EP1_IN_IRQHandler+0x10>)
 80273c2:	f001 fcac 	bl	8028d1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 80273c6:	bf00      	nop
 80273c8:	bd80      	pop	{r7, pc}
 80273ca:	bf00      	nop
 80273cc:	20007ee4 	.word	0x20007ee4

080273d0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80273d0:	b580      	push	{r7, lr}
 80273d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80273d4:	4802      	ldr	r0, [pc, #8]	; (80273e0 <OTG_HS_IRQHandler+0x10>)
 80273d6:	f001 fca2 	bl	8028d1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80273da:	bf00      	nop
 80273dc:	bd80      	pop	{r7, pc}
 80273de:	bf00      	nop
 80273e0:	20007ee4 	.word	0x20007ee4

080273e4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80273e4:	b480      	push	{r7}
 80273e6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80273e8:	bf00      	nop
 80273ea:	46bd      	mov	sp, r7
 80273ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273f0:	4770      	bx	lr

080273f2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80273f2:	b580      	push	{r7, lr}
 80273f4:	b086      	sub	sp, #24
 80273f6:	af00      	add	r7, sp, #0
 80273f8:	60f8      	str	r0, [r7, #12]
 80273fa:	60b9      	str	r1, [r7, #8]
 80273fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80273fe:	2300      	movs	r3, #0
 8027400:	617b      	str	r3, [r7, #20]
 8027402:	e00a      	b.n	802741a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8027404:	f3af 8000 	nop.w
 8027408:	4601      	mov	r1, r0
 802740a:	68bb      	ldr	r3, [r7, #8]
 802740c:	1c5a      	adds	r2, r3, #1
 802740e:	60ba      	str	r2, [r7, #8]
 8027410:	b2ca      	uxtb	r2, r1
 8027412:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8027414:	697b      	ldr	r3, [r7, #20]
 8027416:	3301      	adds	r3, #1
 8027418:	617b      	str	r3, [r7, #20]
 802741a:	697a      	ldr	r2, [r7, #20]
 802741c:	687b      	ldr	r3, [r7, #4]
 802741e:	429a      	cmp	r2, r3
 8027420:	dbf0      	blt.n	8027404 <_read+0x12>
  }

  return len;
 8027422:	687b      	ldr	r3, [r7, #4]
}
 8027424:	4618      	mov	r0, r3
 8027426:	3718      	adds	r7, #24
 8027428:	46bd      	mov	sp, r7
 802742a:	bd80      	pop	{r7, pc}

0802742c <_close>:
  }
  return len;
}

int _close(int file)
{
 802742c:	b480      	push	{r7}
 802742e:	b083      	sub	sp, #12
 8027430:	af00      	add	r7, sp, #0
 8027432:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8027434:	f04f 33ff 	mov.w	r3, #4294967295
}
 8027438:	4618      	mov	r0, r3
 802743a:	370c      	adds	r7, #12
 802743c:	46bd      	mov	sp, r7
 802743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027442:	4770      	bx	lr

08027444 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8027444:	b480      	push	{r7}
 8027446:	b083      	sub	sp, #12
 8027448:	af00      	add	r7, sp, #0
 802744a:	6078      	str	r0, [r7, #4]
 802744c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802744e:	683b      	ldr	r3, [r7, #0]
 8027450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8027454:	605a      	str	r2, [r3, #4]
  return 0;
 8027456:	2300      	movs	r3, #0
}
 8027458:	4618      	mov	r0, r3
 802745a:	370c      	adds	r7, #12
 802745c:	46bd      	mov	sp, r7
 802745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027462:	4770      	bx	lr

08027464 <_isatty>:

int _isatty(int file)
{
 8027464:	b480      	push	{r7}
 8027466:	b083      	sub	sp, #12
 8027468:	af00      	add	r7, sp, #0
 802746a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802746c:	2301      	movs	r3, #1
}
 802746e:	4618      	mov	r0, r3
 8027470:	370c      	adds	r7, #12
 8027472:	46bd      	mov	sp, r7
 8027474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027478:	4770      	bx	lr

0802747a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802747a:	b480      	push	{r7}
 802747c:	b085      	sub	sp, #20
 802747e:	af00      	add	r7, sp, #0
 8027480:	60f8      	str	r0, [r7, #12]
 8027482:	60b9      	str	r1, [r7, #8]
 8027484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8027486:	2300      	movs	r3, #0
}
 8027488:	4618      	mov	r0, r3
 802748a:	3714      	adds	r7, #20
 802748c:	46bd      	mov	sp, r7
 802748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027492:	4770      	bx	lr

08027494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8027494:	b580      	push	{r7, lr}
 8027496:	b086      	sub	sp, #24
 8027498:	af00      	add	r7, sp, #0
 802749a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802749c:	4a14      	ldr	r2, [pc, #80]	; (80274f0 <_sbrk+0x5c>)
 802749e:	4b15      	ldr	r3, [pc, #84]	; (80274f4 <_sbrk+0x60>)
 80274a0:	1ad3      	subs	r3, r2, r3
 80274a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80274a4:	697b      	ldr	r3, [r7, #20]
 80274a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80274a8:	4b13      	ldr	r3, [pc, #76]	; (80274f8 <_sbrk+0x64>)
 80274aa:	681b      	ldr	r3, [r3, #0]
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	d102      	bne.n	80274b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80274b0:	4b11      	ldr	r3, [pc, #68]	; (80274f8 <_sbrk+0x64>)
 80274b2:	4a12      	ldr	r2, [pc, #72]	; (80274fc <_sbrk+0x68>)
 80274b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80274b6:	4b10      	ldr	r3, [pc, #64]	; (80274f8 <_sbrk+0x64>)
 80274b8:	681a      	ldr	r2, [r3, #0]
 80274ba:	687b      	ldr	r3, [r7, #4]
 80274bc:	4413      	add	r3, r2
 80274be:	693a      	ldr	r2, [r7, #16]
 80274c0:	429a      	cmp	r2, r3
 80274c2:	d207      	bcs.n	80274d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80274c4:	f00a fa88 	bl	80319d8 <__errno>
 80274c8:	4603      	mov	r3, r0
 80274ca:	220c      	movs	r2, #12
 80274cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80274ce:	f04f 33ff 	mov.w	r3, #4294967295
 80274d2:	e009      	b.n	80274e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80274d4:	4b08      	ldr	r3, [pc, #32]	; (80274f8 <_sbrk+0x64>)
 80274d6:	681b      	ldr	r3, [r3, #0]
 80274d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80274da:	4b07      	ldr	r3, [pc, #28]	; (80274f8 <_sbrk+0x64>)
 80274dc:	681a      	ldr	r2, [r3, #0]
 80274de:	687b      	ldr	r3, [r7, #4]
 80274e0:	4413      	add	r3, r2
 80274e2:	4a05      	ldr	r2, [pc, #20]	; (80274f8 <_sbrk+0x64>)
 80274e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80274e6:	68fb      	ldr	r3, [r7, #12]
}
 80274e8:	4618      	mov	r0, r3
 80274ea:	3718      	adds	r7, #24
 80274ec:	46bd      	mov	sp, r7
 80274ee:	bd80      	pop	{r7, pc}
 80274f0:	2000c000 	.word	0x2000c000
 80274f4:	00001000 	.word	0x00001000
 80274f8:	200051b0 	.word	0x200051b0
 80274fc:	20008760 	.word	0x20008760

08027500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8027500:	b480      	push	{r7}
 8027502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8027504:	4b07      	ldr	r3, [pc, #28]	; (8027524 <SystemInit+0x24>)
 8027506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802750a:	4a06      	ldr	r2, [pc, #24]	; (8027524 <SystemInit+0x24>)
 802750c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8027510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8027514:	4b03      	ldr	r3, [pc, #12]	; (8027524 <SystemInit+0x24>)
 8027516:	4a04      	ldr	r2, [pc, #16]	; (8027528 <SystemInit+0x28>)
 8027518:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 802751a:	bf00      	nop
 802751c:	46bd      	mov	sp, r7
 802751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027522:	4770      	bx	lr
 8027524:	e000ed00 	.word	0xe000ed00
 8027528:	08022000 	.word	0x08022000

0802752c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 802752c:	b580      	push	{r7, lr}
 802752e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8027530:	4b11      	ldr	r3, [pc, #68]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027532:	4a12      	ldr	r2, [pc, #72]	; (802757c <MX_USART1_UART_Init+0x50>)
 8027534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8027536:	4b10      	ldr	r3, [pc, #64]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802753c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 802753e:	4b0e      	ldr	r3, [pc, #56]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027540:	2200      	movs	r2, #0
 8027542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8027544:	4b0c      	ldr	r3, [pc, #48]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027546:	2200      	movs	r2, #0
 8027548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 802754a:	4b0b      	ldr	r3, [pc, #44]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 802754c:	2200      	movs	r2, #0
 802754e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8027550:	4b09      	ldr	r3, [pc, #36]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027552:	220c      	movs	r2, #12
 8027554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8027556:	4b08      	ldr	r3, [pc, #32]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027558:	2200      	movs	r2, #0
 802755a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 802755c:	4b06      	ldr	r3, [pc, #24]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 802755e:	2200      	movs	r2, #0
 8027560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8027562:	4805      	ldr	r0, [pc, #20]	; (8027578 <MX_USART1_UART_Init+0x4c>)
 8027564:	f004 fb82 	bl	802bc6c <HAL_UART_Init>
 8027568:	4603      	mov	r3, r0
 802756a:	2b00      	cmp	r3, #0
 802756c:	d001      	beq.n	8027572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 802756e:	f7fc fa6f 	bl	8023a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8027572:	bf00      	nop
 8027574:	bd80      	pop	{r7, pc}
 8027576:	bf00      	nop
 8027578:	200051b4 	.word	0x200051b4
 802757c:	40011000 	.word	0x40011000

08027580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8027580:	b580      	push	{r7, lr}
 8027582:	b08a      	sub	sp, #40	; 0x28
 8027584:	af00      	add	r7, sp, #0
 8027586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027588:	f107 0314 	add.w	r3, r7, #20
 802758c:	2200      	movs	r2, #0
 802758e:	601a      	str	r2, [r3, #0]
 8027590:	605a      	str	r2, [r3, #4]
 8027592:	609a      	str	r2, [r3, #8]
 8027594:	60da      	str	r2, [r3, #12]
 8027596:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8027598:	687b      	ldr	r3, [r7, #4]
 802759a:	681b      	ldr	r3, [r3, #0]
 802759c:	4a1d      	ldr	r2, [pc, #116]	; (8027614 <HAL_UART_MspInit+0x94>)
 802759e:	4293      	cmp	r3, r2
 80275a0:	d134      	bne.n	802760c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80275a2:	2300      	movs	r3, #0
 80275a4:	613b      	str	r3, [r7, #16]
 80275a6:	4b1c      	ldr	r3, [pc, #112]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80275aa:	4a1b      	ldr	r2, [pc, #108]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275ac:	f043 0310 	orr.w	r3, r3, #16
 80275b0:	6453      	str	r3, [r2, #68]	; 0x44
 80275b2:	4b19      	ldr	r3, [pc, #100]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80275b6:	f003 0310 	and.w	r3, r3, #16
 80275ba:	613b      	str	r3, [r7, #16]
 80275bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80275be:	2300      	movs	r3, #0
 80275c0:	60fb      	str	r3, [r7, #12]
 80275c2:	4b15      	ldr	r3, [pc, #84]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80275c6:	4a14      	ldr	r2, [pc, #80]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275c8:	f043 0301 	orr.w	r3, r3, #1
 80275cc:	6313      	str	r3, [r2, #48]	; 0x30
 80275ce:	4b12      	ldr	r3, [pc, #72]	; (8027618 <HAL_UART_MspInit+0x98>)
 80275d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80275d2:	f003 0301 	and.w	r3, r3, #1
 80275d6:	60fb      	str	r3, [r7, #12]
 80275d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80275da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80275de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80275e0:	2302      	movs	r3, #2
 80275e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80275e4:	2300      	movs	r3, #0
 80275e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80275e8:	2303      	movs	r3, #3
 80275ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80275ec:	2307      	movs	r3, #7
 80275ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80275f0:	f107 0314 	add.w	r3, r7, #20
 80275f4:	4619      	mov	r1, r3
 80275f6:	4809      	ldr	r0, [pc, #36]	; (802761c <HAL_UART_MspInit+0x9c>)
 80275f8:	f000 fe64 	bl	80282c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80275fc:	2200      	movs	r2, #0
 80275fe:	2100      	movs	r1, #0
 8027600:	2025      	movs	r0, #37	; 0x25
 8027602:	f000 f9fc 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8027606:	2025      	movs	r0, #37	; 0x25
 8027608:	f000 fa15 	bl	8027a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 802760c:	bf00      	nop
 802760e:	3728      	adds	r7, #40	; 0x28
 8027610:	46bd      	mov	sp, r7
 8027612:	bd80      	pop	{r7, pc}
 8027614:	40011000 	.word	0x40011000
 8027618:	40023800 	.word	0x40023800
 802761c:	40020000 	.word	0x40020000

08027620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8027620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8027658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8027624:	480d      	ldr	r0, [pc, #52]	; (802765c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8027626:	490e      	ldr	r1, [pc, #56]	; (8027660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8027628:	4a0e      	ldr	r2, [pc, #56]	; (8027664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802762a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802762c:	e002      	b.n	8027634 <LoopCopyDataInit>

0802762e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802762e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8027630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8027632:	3304      	adds	r3, #4

08027634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8027634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8027636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8027638:	d3f9      	bcc.n	802762e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802763a:	4a0b      	ldr	r2, [pc, #44]	; (8027668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 802763c:	4c0b      	ldr	r4, [pc, #44]	; (802766c <LoopFillZerobss+0x26>)
  movs r3, #0
 802763e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027640:	e001      	b.n	8027646 <LoopFillZerobss>

08027642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027644:	3204      	adds	r2, #4

08027646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8027646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8027648:	d3fb      	bcc.n	8027642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802764a:	f7ff ff59 	bl	8027500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802764e:	f00a f9c9 	bl	80319e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027652:	f7fc f931 	bl	80238b8 <main>
  bx  lr    
 8027656:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8027658:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 802765c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8027660:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8027664:	08033398 	.word	0x08033398
  ldr r2, =_sbss
 8027668:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 802766c:	2000875c 	.word	0x2000875c

08027670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027670:	e7fe      	b.n	8027670 <ADC_IRQHandler>
	...

08027674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8027674:	b580      	push	{r7, lr}
 8027676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027678:	4b0e      	ldr	r3, [pc, #56]	; (80276b4 <HAL_Init+0x40>)
 802767a:	681b      	ldr	r3, [r3, #0]
 802767c:	4a0d      	ldr	r2, [pc, #52]	; (80276b4 <HAL_Init+0x40>)
 802767e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8027684:	4b0b      	ldr	r3, [pc, #44]	; (80276b4 <HAL_Init+0x40>)
 8027686:	681b      	ldr	r3, [r3, #0]
 8027688:	4a0a      	ldr	r2, [pc, #40]	; (80276b4 <HAL_Init+0x40>)
 802768a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802768e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8027690:	4b08      	ldr	r3, [pc, #32]	; (80276b4 <HAL_Init+0x40>)
 8027692:	681b      	ldr	r3, [r3, #0]
 8027694:	4a07      	ldr	r2, [pc, #28]	; (80276b4 <HAL_Init+0x40>)
 8027696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802769a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802769c:	2003      	movs	r0, #3
 802769e:	f000 f9a3 	bl	80279e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80276a2:	200f      	movs	r0, #15
 80276a4:	f000 f808 	bl	80276b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80276a8:	f7ff fdd2 	bl	8027250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80276ac:	2300      	movs	r3, #0
}
 80276ae:	4618      	mov	r0, r3
 80276b0:	bd80      	pop	{r7, pc}
 80276b2:	bf00      	nop
 80276b4:	40023c00 	.word	0x40023c00

080276b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80276b8:	b580      	push	{r7, lr}
 80276ba:	b082      	sub	sp, #8
 80276bc:	af00      	add	r7, sp, #0
 80276be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80276c0:	4b12      	ldr	r3, [pc, #72]	; (802770c <HAL_InitTick+0x54>)
 80276c2:	681a      	ldr	r2, [r3, #0]
 80276c4:	4b12      	ldr	r3, [pc, #72]	; (8027710 <HAL_InitTick+0x58>)
 80276c6:	781b      	ldrb	r3, [r3, #0]
 80276c8:	4619      	mov	r1, r3
 80276ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80276ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80276d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80276d6:	4618      	mov	r0, r3
 80276d8:	f000 f9c9 	bl	8027a6e <HAL_SYSTICK_Config>
 80276dc:	4603      	mov	r3, r0
 80276de:	2b00      	cmp	r3, #0
 80276e0:	d001      	beq.n	80276e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80276e2:	2301      	movs	r3, #1
 80276e4:	e00e      	b.n	8027704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80276e6:	687b      	ldr	r3, [r7, #4]
 80276e8:	2b0f      	cmp	r3, #15
 80276ea:	d80a      	bhi.n	8027702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80276ec:	2200      	movs	r2, #0
 80276ee:	6879      	ldr	r1, [r7, #4]
 80276f0:	f04f 30ff 	mov.w	r0, #4294967295
 80276f4:	f000 f983 	bl	80279fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80276f8:	4a06      	ldr	r2, [pc, #24]	; (8027714 <HAL_InitTick+0x5c>)
 80276fa:	687b      	ldr	r3, [r7, #4]
 80276fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80276fe:	2300      	movs	r3, #0
 8027700:	e000      	b.n	8027704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8027702:	2301      	movs	r3, #1
}
 8027704:	4618      	mov	r0, r3
 8027706:	3708      	adds	r7, #8
 8027708:	46bd      	mov	sp, r7
 802770a:	bd80      	pop	{r7, pc}
 802770c:	20000138 	.word	0x20000138
 8027710:	20000140 	.word	0x20000140
 8027714:	2000013c 	.word	0x2000013c

08027718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8027718:	b480      	push	{r7}
 802771a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802771c:	4b06      	ldr	r3, [pc, #24]	; (8027738 <HAL_IncTick+0x20>)
 802771e:	781b      	ldrb	r3, [r3, #0]
 8027720:	461a      	mov	r2, r3
 8027722:	4b06      	ldr	r3, [pc, #24]	; (802773c <HAL_IncTick+0x24>)
 8027724:	681b      	ldr	r3, [r3, #0]
 8027726:	4413      	add	r3, r2
 8027728:	4a04      	ldr	r2, [pc, #16]	; (802773c <HAL_IncTick+0x24>)
 802772a:	6013      	str	r3, [r2, #0]
}
 802772c:	bf00      	nop
 802772e:	46bd      	mov	sp, r7
 8027730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027734:	4770      	bx	lr
 8027736:	bf00      	nop
 8027738:	20000140 	.word	0x20000140
 802773c:	200051f8 	.word	0x200051f8

08027740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8027740:	b480      	push	{r7}
 8027742:	af00      	add	r7, sp, #0
  return uwTick;
 8027744:	4b03      	ldr	r3, [pc, #12]	; (8027754 <HAL_GetTick+0x14>)
 8027746:	681b      	ldr	r3, [r3, #0]
}
 8027748:	4618      	mov	r0, r3
 802774a:	46bd      	mov	sp, r7
 802774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027750:	4770      	bx	lr
 8027752:	bf00      	nop
 8027754:	200051f8 	.word	0x200051f8

08027758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8027758:	b580      	push	{r7, lr}
 802775a:	b084      	sub	sp, #16
 802775c:	af00      	add	r7, sp, #0
 802775e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8027760:	f7ff ffee 	bl	8027740 <HAL_GetTick>
 8027764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8027766:	687b      	ldr	r3, [r7, #4]
 8027768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802776a:	68fb      	ldr	r3, [r7, #12]
 802776c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027770:	d005      	beq.n	802777e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8027772:	4b0a      	ldr	r3, [pc, #40]	; (802779c <HAL_Delay+0x44>)
 8027774:	781b      	ldrb	r3, [r3, #0]
 8027776:	461a      	mov	r2, r3
 8027778:	68fb      	ldr	r3, [r7, #12]
 802777a:	4413      	add	r3, r2
 802777c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802777e:	bf00      	nop
 8027780:	f7ff ffde 	bl	8027740 <HAL_GetTick>
 8027784:	4602      	mov	r2, r0
 8027786:	68bb      	ldr	r3, [r7, #8]
 8027788:	1ad3      	subs	r3, r2, r3
 802778a:	68fa      	ldr	r2, [r7, #12]
 802778c:	429a      	cmp	r2, r3
 802778e:	d8f7      	bhi.n	8027780 <HAL_Delay+0x28>
  {
  }
}
 8027790:	bf00      	nop
 8027792:	bf00      	nop
 8027794:	3710      	adds	r7, #16
 8027796:	46bd      	mov	sp, r7
 8027798:	bd80      	pop	{r7, pc}
 802779a:	bf00      	nop
 802779c:	20000140 	.word	0x20000140

080277a0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80277a0:	b480      	push	{r7}
 80277a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80277a4:	4b05      	ldr	r3, [pc, #20]	; (80277bc <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80277a6:	685b      	ldr	r3, [r3, #4]
 80277a8:	4a04      	ldr	r2, [pc, #16]	; (80277bc <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80277aa:	f043 0301 	orr.w	r3, r3, #1
 80277ae:	6053      	str	r3, [r2, #4]
}
 80277b0:	bf00      	nop
 80277b2:	46bd      	mov	sp, r7
 80277b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277b8:	4770      	bx	lr
 80277ba:	bf00      	nop
 80277bc:	e0042000 	.word	0xe0042000

080277c0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80277c0:	b480      	push	{r7}
 80277c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80277c4:	4b05      	ldr	r3, [pc, #20]	; (80277dc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80277c6:	685b      	ldr	r3, [r3, #4]
 80277c8:	4a04      	ldr	r2, [pc, #16]	; (80277dc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80277ca:	f043 0302 	orr.w	r3, r3, #2
 80277ce:	6053      	str	r3, [r2, #4]
}
 80277d0:	bf00      	nop
 80277d2:	46bd      	mov	sp, r7
 80277d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277d8:	4770      	bx	lr
 80277da:	bf00      	nop
 80277dc:	e0042000 	.word	0xe0042000

080277e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80277e0:	b480      	push	{r7}
 80277e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80277e4:	4b05      	ldr	r3, [pc, #20]	; (80277fc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80277e6:	685b      	ldr	r3, [r3, #4]
 80277e8:	4a04      	ldr	r2, [pc, #16]	; (80277fc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80277ea:	f043 0304 	orr.w	r3, r3, #4
 80277ee:	6053      	str	r3, [r2, #4]
}
 80277f0:	bf00      	nop
 80277f2:	46bd      	mov	sp, r7
 80277f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277f8:	4770      	bx	lr
 80277fa:	bf00      	nop
 80277fc:	e0042000 	.word	0xe0042000

08027800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027800:	b480      	push	{r7}
 8027802:	b085      	sub	sp, #20
 8027804:	af00      	add	r7, sp, #0
 8027806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	f003 0307 	and.w	r3, r3, #7
 802780e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8027810:	4b0c      	ldr	r3, [pc, #48]	; (8027844 <__NVIC_SetPriorityGrouping+0x44>)
 8027812:	68db      	ldr	r3, [r3, #12]
 8027814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8027816:	68ba      	ldr	r2, [r7, #8]
 8027818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802781c:	4013      	ands	r3, r2
 802781e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8027820:	68fb      	ldr	r3, [r7, #12]
 8027822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8027824:	68bb      	ldr	r3, [r7, #8]
 8027826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8027828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 802782c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8027830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8027832:	4a04      	ldr	r2, [pc, #16]	; (8027844 <__NVIC_SetPriorityGrouping+0x44>)
 8027834:	68bb      	ldr	r3, [r7, #8]
 8027836:	60d3      	str	r3, [r2, #12]
}
 8027838:	bf00      	nop
 802783a:	3714      	adds	r7, #20
 802783c:	46bd      	mov	sp, r7
 802783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027842:	4770      	bx	lr
 8027844:	e000ed00 	.word	0xe000ed00

08027848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8027848:	b480      	push	{r7}
 802784a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802784c:	4b04      	ldr	r3, [pc, #16]	; (8027860 <__NVIC_GetPriorityGrouping+0x18>)
 802784e:	68db      	ldr	r3, [r3, #12]
 8027850:	0a1b      	lsrs	r3, r3, #8
 8027852:	f003 0307 	and.w	r3, r3, #7
}
 8027856:	4618      	mov	r0, r3
 8027858:	46bd      	mov	sp, r7
 802785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802785e:	4770      	bx	lr
 8027860:	e000ed00 	.word	0xe000ed00

08027864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027864:	b480      	push	{r7}
 8027866:	b083      	sub	sp, #12
 8027868:	af00      	add	r7, sp, #0
 802786a:	4603      	mov	r3, r0
 802786c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802786e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027872:	2b00      	cmp	r3, #0
 8027874:	db0b      	blt.n	802788e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027876:	79fb      	ldrb	r3, [r7, #7]
 8027878:	f003 021f 	and.w	r2, r3, #31
 802787c:	4907      	ldr	r1, [pc, #28]	; (802789c <__NVIC_EnableIRQ+0x38>)
 802787e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027882:	095b      	lsrs	r3, r3, #5
 8027884:	2001      	movs	r0, #1
 8027886:	fa00 f202 	lsl.w	r2, r0, r2
 802788a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802788e:	bf00      	nop
 8027890:	370c      	adds	r7, #12
 8027892:	46bd      	mov	sp, r7
 8027894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027898:	4770      	bx	lr
 802789a:	bf00      	nop
 802789c:	e000e100 	.word	0xe000e100

080278a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80278a0:	b480      	push	{r7}
 80278a2:	b083      	sub	sp, #12
 80278a4:	af00      	add	r7, sp, #0
 80278a6:	4603      	mov	r3, r0
 80278a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80278aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	db12      	blt.n	80278d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80278b2:	79fb      	ldrb	r3, [r7, #7]
 80278b4:	f003 021f 	and.w	r2, r3, #31
 80278b8:	490a      	ldr	r1, [pc, #40]	; (80278e4 <__NVIC_DisableIRQ+0x44>)
 80278ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278be:	095b      	lsrs	r3, r3, #5
 80278c0:	2001      	movs	r0, #1
 80278c2:	fa00 f202 	lsl.w	r2, r0, r2
 80278c6:	3320      	adds	r3, #32
 80278c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80278cc:	f3bf 8f4f 	dsb	sy
}
 80278d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80278d2:	f3bf 8f6f 	isb	sy
}
 80278d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80278d8:	bf00      	nop
 80278da:	370c      	adds	r7, #12
 80278dc:	46bd      	mov	sp, r7
 80278de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278e2:	4770      	bx	lr
 80278e4:	e000e100 	.word	0xe000e100

080278e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80278e8:	b480      	push	{r7}
 80278ea:	b083      	sub	sp, #12
 80278ec:	af00      	add	r7, sp, #0
 80278ee:	4603      	mov	r3, r0
 80278f0:	6039      	str	r1, [r7, #0]
 80278f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80278f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80278f8:	2b00      	cmp	r3, #0
 80278fa:	db0a      	blt.n	8027912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80278fc:	683b      	ldr	r3, [r7, #0]
 80278fe:	b2da      	uxtb	r2, r3
 8027900:	490c      	ldr	r1, [pc, #48]	; (8027934 <__NVIC_SetPriority+0x4c>)
 8027902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027906:	0112      	lsls	r2, r2, #4
 8027908:	b2d2      	uxtb	r2, r2
 802790a:	440b      	add	r3, r1
 802790c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8027910:	e00a      	b.n	8027928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027912:	683b      	ldr	r3, [r7, #0]
 8027914:	b2da      	uxtb	r2, r3
 8027916:	4908      	ldr	r1, [pc, #32]	; (8027938 <__NVIC_SetPriority+0x50>)
 8027918:	79fb      	ldrb	r3, [r7, #7]
 802791a:	f003 030f 	and.w	r3, r3, #15
 802791e:	3b04      	subs	r3, #4
 8027920:	0112      	lsls	r2, r2, #4
 8027922:	b2d2      	uxtb	r2, r2
 8027924:	440b      	add	r3, r1
 8027926:	761a      	strb	r2, [r3, #24]
}
 8027928:	bf00      	nop
 802792a:	370c      	adds	r7, #12
 802792c:	46bd      	mov	sp, r7
 802792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027932:	4770      	bx	lr
 8027934:	e000e100 	.word	0xe000e100
 8027938:	e000ed00 	.word	0xe000ed00

0802793c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802793c:	b480      	push	{r7}
 802793e:	b089      	sub	sp, #36	; 0x24
 8027940:	af00      	add	r7, sp, #0
 8027942:	60f8      	str	r0, [r7, #12]
 8027944:	60b9      	str	r1, [r7, #8]
 8027946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8027948:	68fb      	ldr	r3, [r7, #12]
 802794a:	f003 0307 	and.w	r3, r3, #7
 802794e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8027950:	69fb      	ldr	r3, [r7, #28]
 8027952:	f1c3 0307 	rsb	r3, r3, #7
 8027956:	2b04      	cmp	r3, #4
 8027958:	bf28      	it	cs
 802795a:	2304      	movcs	r3, #4
 802795c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802795e:	69fb      	ldr	r3, [r7, #28]
 8027960:	3304      	adds	r3, #4
 8027962:	2b06      	cmp	r3, #6
 8027964:	d902      	bls.n	802796c <NVIC_EncodePriority+0x30>
 8027966:	69fb      	ldr	r3, [r7, #28]
 8027968:	3b03      	subs	r3, #3
 802796a:	e000      	b.n	802796e <NVIC_EncodePriority+0x32>
 802796c:	2300      	movs	r3, #0
 802796e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027970:	f04f 32ff 	mov.w	r2, #4294967295
 8027974:	69bb      	ldr	r3, [r7, #24]
 8027976:	fa02 f303 	lsl.w	r3, r2, r3
 802797a:	43da      	mvns	r2, r3
 802797c:	68bb      	ldr	r3, [r7, #8]
 802797e:	401a      	ands	r2, r3
 8027980:	697b      	ldr	r3, [r7, #20]
 8027982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027984:	f04f 31ff 	mov.w	r1, #4294967295
 8027988:	697b      	ldr	r3, [r7, #20]
 802798a:	fa01 f303 	lsl.w	r3, r1, r3
 802798e:	43d9      	mvns	r1, r3
 8027990:	687b      	ldr	r3, [r7, #4]
 8027992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027994:	4313      	orrs	r3, r2
         );
}
 8027996:	4618      	mov	r0, r3
 8027998:	3724      	adds	r7, #36	; 0x24
 802799a:	46bd      	mov	sp, r7
 802799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279a0:	4770      	bx	lr
	...

080279a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80279a4:	b580      	push	{r7, lr}
 80279a6:	b082      	sub	sp, #8
 80279a8:	af00      	add	r7, sp, #0
 80279aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	3b01      	subs	r3, #1
 80279b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80279b4:	d301      	bcc.n	80279ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80279b6:	2301      	movs	r3, #1
 80279b8:	e00f      	b.n	80279da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80279ba:	4a0a      	ldr	r2, [pc, #40]	; (80279e4 <SysTick_Config+0x40>)
 80279bc:	687b      	ldr	r3, [r7, #4]
 80279be:	3b01      	subs	r3, #1
 80279c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80279c2:	210f      	movs	r1, #15
 80279c4:	f04f 30ff 	mov.w	r0, #4294967295
 80279c8:	f7ff ff8e 	bl	80278e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80279cc:	4b05      	ldr	r3, [pc, #20]	; (80279e4 <SysTick_Config+0x40>)
 80279ce:	2200      	movs	r2, #0
 80279d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80279d2:	4b04      	ldr	r3, [pc, #16]	; (80279e4 <SysTick_Config+0x40>)
 80279d4:	2207      	movs	r2, #7
 80279d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80279d8:	2300      	movs	r3, #0
}
 80279da:	4618      	mov	r0, r3
 80279dc:	3708      	adds	r7, #8
 80279de:	46bd      	mov	sp, r7
 80279e0:	bd80      	pop	{r7, pc}
 80279e2:	bf00      	nop
 80279e4:	e000e010 	.word	0xe000e010

080279e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80279e8:	b580      	push	{r7, lr}
 80279ea:	b082      	sub	sp, #8
 80279ec:	af00      	add	r7, sp, #0
 80279ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80279f0:	6878      	ldr	r0, [r7, #4]
 80279f2:	f7ff ff05 	bl	8027800 <__NVIC_SetPriorityGrouping>
}
 80279f6:	bf00      	nop
 80279f8:	3708      	adds	r7, #8
 80279fa:	46bd      	mov	sp, r7
 80279fc:	bd80      	pop	{r7, pc}

080279fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80279fe:	b580      	push	{r7, lr}
 8027a00:	b086      	sub	sp, #24
 8027a02:	af00      	add	r7, sp, #0
 8027a04:	4603      	mov	r3, r0
 8027a06:	60b9      	str	r1, [r7, #8]
 8027a08:	607a      	str	r2, [r7, #4]
 8027a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8027a0c:	2300      	movs	r3, #0
 8027a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027a10:	f7ff ff1a 	bl	8027848 <__NVIC_GetPriorityGrouping>
 8027a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8027a16:	687a      	ldr	r2, [r7, #4]
 8027a18:	68b9      	ldr	r1, [r7, #8]
 8027a1a:	6978      	ldr	r0, [r7, #20]
 8027a1c:	f7ff ff8e 	bl	802793c <NVIC_EncodePriority>
 8027a20:	4602      	mov	r2, r0
 8027a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8027a26:	4611      	mov	r1, r2
 8027a28:	4618      	mov	r0, r3
 8027a2a:	f7ff ff5d 	bl	80278e8 <__NVIC_SetPriority>
}
 8027a2e:	bf00      	nop
 8027a30:	3718      	adds	r7, #24
 8027a32:	46bd      	mov	sp, r7
 8027a34:	bd80      	pop	{r7, pc}

08027a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8027a36:	b580      	push	{r7, lr}
 8027a38:	b082      	sub	sp, #8
 8027a3a:	af00      	add	r7, sp, #0
 8027a3c:	4603      	mov	r3, r0
 8027a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8027a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027a44:	4618      	mov	r0, r3
 8027a46:	f7ff ff0d 	bl	8027864 <__NVIC_EnableIRQ>
}
 8027a4a:	bf00      	nop
 8027a4c:	3708      	adds	r7, #8
 8027a4e:	46bd      	mov	sp, r7
 8027a50:	bd80      	pop	{r7, pc}

08027a52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8027a52:	b580      	push	{r7, lr}
 8027a54:	b082      	sub	sp, #8
 8027a56:	af00      	add	r7, sp, #0
 8027a58:	4603      	mov	r3, r0
 8027a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8027a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027a60:	4618      	mov	r0, r3
 8027a62:	f7ff ff1d 	bl	80278a0 <__NVIC_DisableIRQ>
}
 8027a66:	bf00      	nop
 8027a68:	3708      	adds	r7, #8
 8027a6a:	46bd      	mov	sp, r7
 8027a6c:	bd80      	pop	{r7, pc}

08027a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8027a6e:	b580      	push	{r7, lr}
 8027a70:	b082      	sub	sp, #8
 8027a72:	af00      	add	r7, sp, #0
 8027a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8027a76:	6878      	ldr	r0, [r7, #4]
 8027a78:	f7ff ff94 	bl	80279a4 <SysTick_Config>
 8027a7c:	4603      	mov	r3, r0
}
 8027a7e:	4618      	mov	r0, r3
 8027a80:	3708      	adds	r7, #8
 8027a82:	46bd      	mov	sp, r7
 8027a84:	bd80      	pop	{r7, pc}

08027a86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8027a86:	b580      	push	{r7, lr}
 8027a88:	b084      	sub	sp, #16
 8027a8a:	af00      	add	r7, sp, #0
 8027a8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027a8e:	687b      	ldr	r3, [r7, #4]
 8027a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027a92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8027a94:	f7ff fe54 	bl	8027740 <HAL_GetTick>
 8027a98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8027a9a:	687b      	ldr	r3, [r7, #4]
 8027a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027aa0:	b2db      	uxtb	r3, r3
 8027aa2:	2b02      	cmp	r3, #2
 8027aa4:	d008      	beq.n	8027ab8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8027aa6:	687b      	ldr	r3, [r7, #4]
 8027aa8:	2280      	movs	r2, #128	; 0x80
 8027aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	2200      	movs	r2, #0
 8027ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8027ab4:	2301      	movs	r3, #1
 8027ab6:	e052      	b.n	8027b5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8027ab8:	687b      	ldr	r3, [r7, #4]
 8027aba:	681b      	ldr	r3, [r3, #0]
 8027abc:	681a      	ldr	r2, [r3, #0]
 8027abe:	687b      	ldr	r3, [r7, #4]
 8027ac0:	681b      	ldr	r3, [r3, #0]
 8027ac2:	f022 0216 	bic.w	r2, r2, #22
 8027ac6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8027ac8:	687b      	ldr	r3, [r7, #4]
 8027aca:	681b      	ldr	r3, [r3, #0]
 8027acc:	695a      	ldr	r2, [r3, #20]
 8027ace:	687b      	ldr	r3, [r7, #4]
 8027ad0:	681b      	ldr	r3, [r3, #0]
 8027ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8027ad6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8027ad8:	687b      	ldr	r3, [r7, #4]
 8027ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	d103      	bne.n	8027ae8 <HAL_DMA_Abort+0x62>
 8027ae0:	687b      	ldr	r3, [r7, #4]
 8027ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	d007      	beq.n	8027af8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027ae8:	687b      	ldr	r3, [r7, #4]
 8027aea:	681b      	ldr	r3, [r3, #0]
 8027aec:	681a      	ldr	r2, [r3, #0]
 8027aee:	687b      	ldr	r3, [r7, #4]
 8027af0:	681b      	ldr	r3, [r3, #0]
 8027af2:	f022 0208 	bic.w	r2, r2, #8
 8027af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027af8:	687b      	ldr	r3, [r7, #4]
 8027afa:	681b      	ldr	r3, [r3, #0]
 8027afc:	681a      	ldr	r2, [r3, #0]
 8027afe:	687b      	ldr	r3, [r7, #4]
 8027b00:	681b      	ldr	r3, [r3, #0]
 8027b02:	f022 0201 	bic.w	r2, r2, #1
 8027b06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027b08:	e013      	b.n	8027b32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8027b0a:	f7ff fe19 	bl	8027740 <HAL_GetTick>
 8027b0e:	4602      	mov	r2, r0
 8027b10:	68bb      	ldr	r3, [r7, #8]
 8027b12:	1ad3      	subs	r3, r2, r3
 8027b14:	2b05      	cmp	r3, #5
 8027b16:	d90c      	bls.n	8027b32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	2220      	movs	r2, #32
 8027b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	2203      	movs	r2, #3
 8027b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027b26:	687b      	ldr	r3, [r7, #4]
 8027b28:	2200      	movs	r2, #0
 8027b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8027b2e:	2303      	movs	r3, #3
 8027b30:	e015      	b.n	8027b5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027b32:	687b      	ldr	r3, [r7, #4]
 8027b34:	681b      	ldr	r3, [r3, #0]
 8027b36:	681b      	ldr	r3, [r3, #0]
 8027b38:	f003 0301 	and.w	r3, r3, #1
 8027b3c:	2b00      	cmp	r3, #0
 8027b3e:	d1e4      	bne.n	8027b0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027b40:	687b      	ldr	r3, [r7, #4]
 8027b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027b44:	223f      	movs	r2, #63	; 0x3f
 8027b46:	409a      	lsls	r2, r3
 8027b48:	68fb      	ldr	r3, [r7, #12]
 8027b4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8027b4c:	687b      	ldr	r3, [r7, #4]
 8027b4e:	2201      	movs	r2, #1
 8027b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8027b54:	687b      	ldr	r3, [r7, #4]
 8027b56:	2200      	movs	r2, #0
 8027b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8027b5c:	2300      	movs	r3, #0
}
 8027b5e:	4618      	mov	r0, r3
 8027b60:	3710      	adds	r7, #16
 8027b62:	46bd      	mov	sp, r7
 8027b64:	bd80      	pop	{r7, pc}

08027b66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8027b66:	b480      	push	{r7}
 8027b68:	b083      	sub	sp, #12
 8027b6a:	af00      	add	r7, sp, #0
 8027b6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8027b6e:	687b      	ldr	r3, [r7, #4]
 8027b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027b74:	b2db      	uxtb	r3, r3
 8027b76:	2b02      	cmp	r3, #2
 8027b78:	d004      	beq.n	8027b84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8027b7a:	687b      	ldr	r3, [r7, #4]
 8027b7c:	2280      	movs	r2, #128	; 0x80
 8027b7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8027b80:	2301      	movs	r3, #1
 8027b82:	e00c      	b.n	8027b9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8027b84:	687b      	ldr	r3, [r7, #4]
 8027b86:	2205      	movs	r2, #5
 8027b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8027b8c:	687b      	ldr	r3, [r7, #4]
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	681a      	ldr	r2, [r3, #0]
 8027b92:	687b      	ldr	r3, [r7, #4]
 8027b94:	681b      	ldr	r3, [r3, #0]
 8027b96:	f022 0201 	bic.w	r2, r2, #1
 8027b9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8027b9c:	2300      	movs	r3, #0
}
 8027b9e:	4618      	mov	r0, r3
 8027ba0:	370c      	adds	r7, #12
 8027ba2:	46bd      	mov	sp, r7
 8027ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ba8:	4770      	bx	lr
	...

08027bac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027bac:	b580      	push	{r7, lr}
 8027bae:	b086      	sub	sp, #24
 8027bb0:	af00      	add	r7, sp, #0
 8027bb2:	60f8      	str	r0, [r7, #12]
 8027bb4:	60b9      	str	r1, [r7, #8]
 8027bb6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027bba:	2301      	movs	r3, #1
 8027bbc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027bbe:	4b23      	ldr	r3, [pc, #140]	; (8027c4c <HAL_FLASH_Program+0xa0>)
 8027bc0:	7e1b      	ldrb	r3, [r3, #24]
 8027bc2:	2b01      	cmp	r3, #1
 8027bc4:	d101      	bne.n	8027bca <HAL_FLASH_Program+0x1e>
 8027bc6:	2302      	movs	r3, #2
 8027bc8:	e03b      	b.n	8027c42 <HAL_FLASH_Program+0x96>
 8027bca:	4b20      	ldr	r3, [pc, #128]	; (8027c4c <HAL_FLASH_Program+0xa0>)
 8027bcc:	2201      	movs	r2, #1
 8027bce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027bd4:	f000 f924 	bl	8027e20 <FLASH_WaitForLastOperation>
 8027bd8:	4603      	mov	r3, r0
 8027bda:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027bdc:	7dfb      	ldrb	r3, [r7, #23]
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d12b      	bne.n	8027c3a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027be2:	68fb      	ldr	r3, [r7, #12]
 8027be4:	2b00      	cmp	r3, #0
 8027be6:	d105      	bne.n	8027bf4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027be8:	783b      	ldrb	r3, [r7, #0]
 8027bea:	4619      	mov	r1, r3
 8027bec:	68b8      	ldr	r0, [r7, #8]
 8027bee:	f000 f9cf 	bl	8027f90 <FLASH_Program_Byte>
 8027bf2:	e016      	b.n	8027c22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027bf4:	68fb      	ldr	r3, [r7, #12]
 8027bf6:	2b01      	cmp	r3, #1
 8027bf8:	d105      	bne.n	8027c06 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8027bfa:	883b      	ldrh	r3, [r7, #0]
 8027bfc:	4619      	mov	r1, r3
 8027bfe:	68b8      	ldr	r0, [r7, #8]
 8027c00:	f000 f9a2 	bl	8027f48 <FLASH_Program_HalfWord>
 8027c04:	e00d      	b.n	8027c22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027c06:	68fb      	ldr	r3, [r7, #12]
 8027c08:	2b02      	cmp	r3, #2
 8027c0a:	d105      	bne.n	8027c18 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027c0c:	683b      	ldr	r3, [r7, #0]
 8027c0e:	4619      	mov	r1, r3
 8027c10:	68b8      	ldr	r0, [r7, #8]
 8027c12:	f000 f977 	bl	8027f04 <FLASH_Program_Word>
 8027c16:	e004      	b.n	8027c22 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027c1c:	68b8      	ldr	r0, [r7, #8]
 8027c1e:	f000 f93f 	bl	8027ea0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027c22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027c26:	f000 f8fb 	bl	8027e20 <FLASH_WaitForLastOperation>
 8027c2a:	4603      	mov	r3, r0
 8027c2c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027c2e:	4b08      	ldr	r3, [pc, #32]	; (8027c50 <HAL_FLASH_Program+0xa4>)
 8027c30:	691b      	ldr	r3, [r3, #16]
 8027c32:	4a07      	ldr	r2, [pc, #28]	; (8027c50 <HAL_FLASH_Program+0xa4>)
 8027c34:	f023 0301 	bic.w	r3, r3, #1
 8027c38:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027c3a:	4b04      	ldr	r3, [pc, #16]	; (8027c4c <HAL_FLASH_Program+0xa0>)
 8027c3c:	2200      	movs	r2, #0
 8027c3e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8027c42:	4618      	mov	r0, r3
 8027c44:	3718      	adds	r7, #24
 8027c46:	46bd      	mov	sp, r7
 8027c48:	bd80      	pop	{r7, pc}
 8027c4a:	bf00      	nop
 8027c4c:	200051fc 	.word	0x200051fc
 8027c50:	40023c00 	.word	0x40023c00

08027c54 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8027c54:	b580      	push	{r7, lr}
 8027c56:	b082      	sub	sp, #8
 8027c58:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8027c5a:	2300      	movs	r3, #0
 8027c5c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027c5e:	4b4b      	ldr	r3, [pc, #300]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027c60:	68db      	ldr	r3, [r3, #12]
 8027c62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027c66:	2b00      	cmp	r3, #0
 8027c68:	d020      	beq.n	8027cac <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027c6a:	4b49      	ldr	r3, [pc, #292]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c6c:	781b      	ldrb	r3, [r3, #0]
 8027c6e:	b2db      	uxtb	r3, r3
 8027c70:	2b01      	cmp	r3, #1
 8027c72:	d107      	bne.n	8027c84 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8027c74:	4b46      	ldr	r3, [pc, #280]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c76:	68db      	ldr	r3, [r3, #12]
 8027c78:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8027c7a:	4b45      	ldr	r3, [pc, #276]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8027c80:	60da      	str	r2, [r3, #12]
 8027c82:	e00b      	b.n	8027c9c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8027c84:	4b42      	ldr	r3, [pc, #264]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c86:	781b      	ldrb	r3, [r3, #0]
 8027c88:	b2db      	uxtb	r3, r3
 8027c8a:	2b02      	cmp	r3, #2
 8027c8c:	d103      	bne.n	8027c96 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8027c8e:	4b40      	ldr	r3, [pc, #256]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c90:	691b      	ldr	r3, [r3, #16]
 8027c92:	607b      	str	r3, [r7, #4]
 8027c94:	e002      	b.n	8027c9c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8027c96:	4b3e      	ldr	r3, [pc, #248]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027c98:	695b      	ldr	r3, [r3, #20]
 8027c9a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8027c9c:	f000 f99a 	bl	8027fd4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8027ca0:	6878      	ldr	r0, [r7, #4]
 8027ca2:	f000 f881 	bl	8027da8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027ca6:	4b3a      	ldr	r3, [pc, #232]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027ca8:	2200      	movs	r2, #0
 8027caa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027cac:	4b37      	ldr	r3, [pc, #220]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027cae:	68db      	ldr	r3, [r3, #12]
 8027cb0:	f003 0301 	and.w	r3, r3, #1
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d04a      	beq.n	8027d4e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027cb8:	4b34      	ldr	r3, [pc, #208]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027cba:	2201      	movs	r2, #1
 8027cbc:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8027cbe:	4b34      	ldr	r3, [pc, #208]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cc0:	781b      	ldrb	r3, [r3, #0]
 8027cc2:	b2db      	uxtb	r3, r3
 8027cc4:	2b01      	cmp	r3, #1
 8027cc6:	d12d      	bne.n	8027d24 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8027cc8:	4b31      	ldr	r3, [pc, #196]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cca:	685b      	ldr	r3, [r3, #4]
 8027ccc:	3b01      	subs	r3, #1
 8027cce:	4a30      	ldr	r2, [pc, #192]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cd0:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8027cd2:	4b2f      	ldr	r3, [pc, #188]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cd4:	685b      	ldr	r3, [r3, #4]
 8027cd6:	2b00      	cmp	r3, #0
 8027cd8:	d015      	beq.n	8027d06 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8027cda:	4b2d      	ldr	r3, [pc, #180]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cdc:	68db      	ldr	r3, [r3, #12]
 8027cde:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027ce0:	6878      	ldr	r0, [r7, #4]
 8027ce2:	f000 f857 	bl	8027d94 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8027ce6:	4b2a      	ldr	r3, [pc, #168]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027ce8:	68db      	ldr	r3, [r3, #12]
 8027cea:	3301      	adds	r3, #1
 8027cec:	4a28      	ldr	r2, [pc, #160]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cee:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8027cf0:	4b27      	ldr	r3, [pc, #156]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cf2:	68db      	ldr	r3, [r3, #12]
 8027cf4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8027cf6:	4b26      	ldr	r3, [pc, #152]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027cf8:	7a1b      	ldrb	r3, [r3, #8]
 8027cfa:	b2db      	uxtb	r3, r3
 8027cfc:	4619      	mov	r1, r3
 8027cfe:	6878      	ldr	r0, [r7, #4]
 8027d00:	f000 fa52 	bl	80281a8 <FLASH_Erase_Sector>
 8027d04:	e023      	b.n	8027d4e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8027d06:	f04f 33ff 	mov.w	r3, #4294967295
 8027d0a:	607b      	str	r3, [r7, #4]
 8027d0c:	4a20      	ldr	r2, [pc, #128]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027d12:	4b1f      	ldr	r3, [pc, #124]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d14:	2200      	movs	r2, #0
 8027d16:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027d18:	f000 fa8e 	bl	8028238 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8027d1c:	6878      	ldr	r0, [r7, #4]
 8027d1e:	f000 f839 	bl	8027d94 <HAL_FLASH_EndOfOperationCallback>
 8027d22:	e014      	b.n	8027d4e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8027d24:	4b1a      	ldr	r3, [pc, #104]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d26:	781b      	ldrb	r3, [r3, #0]
 8027d28:	b2db      	uxtb	r3, r3
 8027d2a:	2b02      	cmp	r3, #2
 8027d2c:	d107      	bne.n	8027d3e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8027d2e:	f000 fa83 	bl	8028238 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8027d32:	4b17      	ldr	r3, [pc, #92]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d34:	691b      	ldr	r3, [r3, #16]
 8027d36:	4618      	mov	r0, r3
 8027d38:	f000 f82c 	bl	8027d94 <HAL_FLASH_EndOfOperationCallback>
 8027d3c:	e004      	b.n	8027d48 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8027d3e:	4b14      	ldr	r3, [pc, #80]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d40:	695b      	ldr	r3, [r3, #20]
 8027d42:	4618      	mov	r0, r3
 8027d44:	f000 f826 	bl	8027d94 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8027d48:	4b11      	ldr	r3, [pc, #68]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d4a:	2200      	movs	r2, #0
 8027d4c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8027d4e:	4b10      	ldr	r3, [pc, #64]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d50:	781b      	ldrb	r3, [r3, #0]
 8027d52:	b2db      	uxtb	r3, r3
 8027d54:	2b00      	cmp	r3, #0
 8027d56:	d114      	bne.n	8027d82 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8027d58:	4b0c      	ldr	r3, [pc, #48]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d5a:	691b      	ldr	r3, [r3, #16]
 8027d5c:	4a0b      	ldr	r2, [pc, #44]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027d62:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8027d64:	4b09      	ldr	r3, [pc, #36]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d66:	691b      	ldr	r3, [r3, #16]
 8027d68:	4a08      	ldr	r2, [pc, #32]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8027d6e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8027d70:	4b06      	ldr	r3, [pc, #24]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d72:	691b      	ldr	r3, [r3, #16]
 8027d74:	4a05      	ldr	r2, [pc, #20]	; (8027d8c <HAL_FLASH_IRQHandler+0x138>)
 8027d76:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8027d7a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8027d7c:	4b04      	ldr	r3, [pc, #16]	; (8027d90 <HAL_FLASH_IRQHandler+0x13c>)
 8027d7e:	2200      	movs	r2, #0
 8027d80:	761a      	strb	r2, [r3, #24]
  }
}
 8027d82:	bf00      	nop
 8027d84:	3708      	adds	r7, #8
 8027d86:	46bd      	mov	sp, r7
 8027d88:	bd80      	pop	{r7, pc}
 8027d8a:	bf00      	nop
 8027d8c:	40023c00 	.word	0x40023c00
 8027d90:	200051fc 	.word	0x200051fc

08027d94 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8027d94:	b480      	push	{r7}
 8027d96:	b083      	sub	sp, #12
 8027d98:	af00      	add	r7, sp, #0
 8027d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8027d9c:	bf00      	nop
 8027d9e:	370c      	adds	r7, #12
 8027da0:	46bd      	mov	sp, r7
 8027da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027da6:	4770      	bx	lr

08027da8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8027da8:	b480      	push	{r7}
 8027daa:	b083      	sub	sp, #12
 8027dac:	af00      	add	r7, sp, #0
 8027dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8027db0:	bf00      	nop
 8027db2:	370c      	adds	r7, #12
 8027db4:	46bd      	mov	sp, r7
 8027db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dba:	4770      	bx	lr

08027dbc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027dbc:	b480      	push	{r7}
 8027dbe:	b083      	sub	sp, #12
 8027dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027dc2:	2300      	movs	r3, #0
 8027dc4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027dc6:	4b0b      	ldr	r3, [pc, #44]	; (8027df4 <HAL_FLASH_Unlock+0x38>)
 8027dc8:	691b      	ldr	r3, [r3, #16]
 8027dca:	2b00      	cmp	r3, #0
 8027dcc:	da0b      	bge.n	8027de6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027dce:	4b09      	ldr	r3, [pc, #36]	; (8027df4 <HAL_FLASH_Unlock+0x38>)
 8027dd0:	4a09      	ldr	r2, [pc, #36]	; (8027df8 <HAL_FLASH_Unlock+0x3c>)
 8027dd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027dd4:	4b07      	ldr	r3, [pc, #28]	; (8027df4 <HAL_FLASH_Unlock+0x38>)
 8027dd6:	4a09      	ldr	r2, [pc, #36]	; (8027dfc <HAL_FLASH_Unlock+0x40>)
 8027dd8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027dda:	4b06      	ldr	r3, [pc, #24]	; (8027df4 <HAL_FLASH_Unlock+0x38>)
 8027ddc:	691b      	ldr	r3, [r3, #16]
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	da01      	bge.n	8027de6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027de2:	2301      	movs	r3, #1
 8027de4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027de6:	79fb      	ldrb	r3, [r7, #7]
}
 8027de8:	4618      	mov	r0, r3
 8027dea:	370c      	adds	r7, #12
 8027dec:	46bd      	mov	sp, r7
 8027dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df2:	4770      	bx	lr
 8027df4:	40023c00 	.word	0x40023c00
 8027df8:	45670123 	.word	0x45670123
 8027dfc:	cdef89ab 	.word	0xcdef89ab

08027e00 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027e00:	b480      	push	{r7}
 8027e02:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027e04:	4b05      	ldr	r3, [pc, #20]	; (8027e1c <HAL_FLASH_Lock+0x1c>)
 8027e06:	691b      	ldr	r3, [r3, #16]
 8027e08:	4a04      	ldr	r2, [pc, #16]	; (8027e1c <HAL_FLASH_Lock+0x1c>)
 8027e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027e0e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027e10:	2300      	movs	r3, #0
}
 8027e12:	4618      	mov	r0, r3
 8027e14:	46bd      	mov	sp, r7
 8027e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e1a:	4770      	bx	lr
 8027e1c:	40023c00 	.word	0x40023c00

08027e20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027e20:	b580      	push	{r7, lr}
 8027e22:	b084      	sub	sp, #16
 8027e24:	af00      	add	r7, sp, #0
 8027e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027e28:	2300      	movs	r3, #0
 8027e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027e2c:	4b1a      	ldr	r3, [pc, #104]	; (8027e98 <FLASH_WaitForLastOperation+0x78>)
 8027e2e:	2200      	movs	r2, #0
 8027e30:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027e32:	f7ff fc85 	bl	8027740 <HAL_GetTick>
 8027e36:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027e38:	e010      	b.n	8027e5c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027e3a:	687b      	ldr	r3, [r7, #4]
 8027e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027e40:	d00c      	beq.n	8027e5c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8027e42:	687b      	ldr	r3, [r7, #4]
 8027e44:	2b00      	cmp	r3, #0
 8027e46:	d007      	beq.n	8027e58 <FLASH_WaitForLastOperation+0x38>
 8027e48:	f7ff fc7a 	bl	8027740 <HAL_GetTick>
 8027e4c:	4602      	mov	r2, r0
 8027e4e:	68fb      	ldr	r3, [r7, #12]
 8027e50:	1ad3      	subs	r3, r2, r3
 8027e52:	687a      	ldr	r2, [r7, #4]
 8027e54:	429a      	cmp	r2, r3
 8027e56:	d201      	bcs.n	8027e5c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027e58:	2303      	movs	r3, #3
 8027e5a:	e019      	b.n	8027e90 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027e5c:	4b0f      	ldr	r3, [pc, #60]	; (8027e9c <FLASH_WaitForLastOperation+0x7c>)
 8027e5e:	68db      	ldr	r3, [r3, #12]
 8027e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027e64:	2b00      	cmp	r3, #0
 8027e66:	d1e8      	bne.n	8027e3a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027e68:	4b0c      	ldr	r3, [pc, #48]	; (8027e9c <FLASH_WaitForLastOperation+0x7c>)
 8027e6a:	68db      	ldr	r3, [r3, #12]
 8027e6c:	f003 0301 	and.w	r3, r3, #1
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d002      	beq.n	8027e7a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027e74:	4b09      	ldr	r3, [pc, #36]	; (8027e9c <FLASH_WaitForLastOperation+0x7c>)
 8027e76:	2201      	movs	r2, #1
 8027e78:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027e7a:	4b08      	ldr	r3, [pc, #32]	; (8027e9c <FLASH_WaitForLastOperation+0x7c>)
 8027e7c:	68db      	ldr	r3, [r3, #12]
 8027e7e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027e82:	2b00      	cmp	r3, #0
 8027e84:	d003      	beq.n	8027e8e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027e86:	f000 f8a5 	bl	8027fd4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027e8a:	2301      	movs	r3, #1
 8027e8c:	e000      	b.n	8027e90 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027e8e:	2300      	movs	r3, #0
  
}  
 8027e90:	4618      	mov	r0, r3
 8027e92:	3710      	adds	r7, #16
 8027e94:	46bd      	mov	sp, r7
 8027e96:	bd80      	pop	{r7, pc}
 8027e98:	200051fc 	.word	0x200051fc
 8027e9c:	40023c00 	.word	0x40023c00

08027ea0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027ea0:	b480      	push	{r7}
 8027ea2:	b085      	sub	sp, #20
 8027ea4:	af00      	add	r7, sp, #0
 8027ea6:	60f8      	str	r0, [r7, #12]
 8027ea8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027eac:	4b14      	ldr	r3, [pc, #80]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027eae:	691b      	ldr	r3, [r3, #16]
 8027eb0:	4a13      	ldr	r2, [pc, #76]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027eb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027eb8:	4b11      	ldr	r3, [pc, #68]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027eba:	691b      	ldr	r3, [r3, #16]
 8027ebc:	4a10      	ldr	r2, [pc, #64]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027ebe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027ec4:	4b0e      	ldr	r3, [pc, #56]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027ec6:	691b      	ldr	r3, [r3, #16]
 8027ec8:	4a0d      	ldr	r2, [pc, #52]	; (8027f00 <FLASH_Program_DoubleWord+0x60>)
 8027eca:	f043 0301 	orr.w	r3, r3, #1
 8027ece:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027ed0:	68fb      	ldr	r3, [r7, #12]
 8027ed2:	683a      	ldr	r2, [r7, #0]
 8027ed4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8027ed6:	f3bf 8f6f 	isb	sy
}
 8027eda:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8027ee0:	f04f 0200 	mov.w	r2, #0
 8027ee4:	f04f 0300 	mov.w	r3, #0
 8027ee8:	000a      	movs	r2, r1
 8027eea:	2300      	movs	r3, #0
 8027eec:	68f9      	ldr	r1, [r7, #12]
 8027eee:	3104      	adds	r1, #4
 8027ef0:	4613      	mov	r3, r2
 8027ef2:	600b      	str	r3, [r1, #0]
}
 8027ef4:	bf00      	nop
 8027ef6:	3714      	adds	r7, #20
 8027ef8:	46bd      	mov	sp, r7
 8027efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027efe:	4770      	bx	lr
 8027f00:	40023c00 	.word	0x40023c00

08027f04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027f04:	b480      	push	{r7}
 8027f06:	b083      	sub	sp, #12
 8027f08:	af00      	add	r7, sp, #0
 8027f0a:	6078      	str	r0, [r7, #4]
 8027f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027f0e:	4b0d      	ldr	r3, [pc, #52]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f10:	691b      	ldr	r3, [r3, #16]
 8027f12:	4a0c      	ldr	r2, [pc, #48]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027f1a:	4b0a      	ldr	r3, [pc, #40]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f1c:	691b      	ldr	r3, [r3, #16]
 8027f1e:	4a09      	ldr	r2, [pc, #36]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027f24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027f26:	4b07      	ldr	r3, [pc, #28]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f28:	691b      	ldr	r3, [r3, #16]
 8027f2a:	4a06      	ldr	r2, [pc, #24]	; (8027f44 <FLASH_Program_Word+0x40>)
 8027f2c:	f043 0301 	orr.w	r3, r3, #1
 8027f30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	683a      	ldr	r2, [r7, #0]
 8027f36:	601a      	str	r2, [r3, #0]
}
 8027f38:	bf00      	nop
 8027f3a:	370c      	adds	r7, #12
 8027f3c:	46bd      	mov	sp, r7
 8027f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f42:	4770      	bx	lr
 8027f44:	40023c00 	.word	0x40023c00

08027f48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027f48:	b480      	push	{r7}
 8027f4a:	b083      	sub	sp, #12
 8027f4c:	af00      	add	r7, sp, #0
 8027f4e:	6078      	str	r0, [r7, #4]
 8027f50:	460b      	mov	r3, r1
 8027f52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027f54:	4b0d      	ldr	r3, [pc, #52]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f56:	691b      	ldr	r3, [r3, #16]
 8027f58:	4a0c      	ldr	r2, [pc, #48]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027f60:	4b0a      	ldr	r3, [pc, #40]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f62:	691b      	ldr	r3, [r3, #16]
 8027f64:	4a09      	ldr	r2, [pc, #36]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027f6c:	4b07      	ldr	r3, [pc, #28]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f6e:	691b      	ldr	r3, [r3, #16]
 8027f70:	4a06      	ldr	r2, [pc, #24]	; (8027f8c <FLASH_Program_HalfWord+0x44>)
 8027f72:	f043 0301 	orr.w	r3, r3, #1
 8027f76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027f78:	687b      	ldr	r3, [r7, #4]
 8027f7a:	887a      	ldrh	r2, [r7, #2]
 8027f7c:	801a      	strh	r2, [r3, #0]
}
 8027f7e:	bf00      	nop
 8027f80:	370c      	adds	r7, #12
 8027f82:	46bd      	mov	sp, r7
 8027f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f88:	4770      	bx	lr
 8027f8a:	bf00      	nop
 8027f8c:	40023c00 	.word	0x40023c00

08027f90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027f90:	b480      	push	{r7}
 8027f92:	b083      	sub	sp, #12
 8027f94:	af00      	add	r7, sp, #0
 8027f96:	6078      	str	r0, [r7, #4]
 8027f98:	460b      	mov	r3, r1
 8027f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027f9c:	4b0c      	ldr	r3, [pc, #48]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027f9e:	691b      	ldr	r3, [r3, #16]
 8027fa0:	4a0b      	ldr	r2, [pc, #44]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027fa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027fa8:	4b09      	ldr	r3, [pc, #36]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027faa:	4a09      	ldr	r2, [pc, #36]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027fac:	691b      	ldr	r3, [r3, #16]
 8027fae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027fb0:	4b07      	ldr	r3, [pc, #28]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027fb2:	691b      	ldr	r3, [r3, #16]
 8027fb4:	4a06      	ldr	r2, [pc, #24]	; (8027fd0 <FLASH_Program_Byte+0x40>)
 8027fb6:	f043 0301 	orr.w	r3, r3, #1
 8027fba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027fbc:	687b      	ldr	r3, [r7, #4]
 8027fbe:	78fa      	ldrb	r2, [r7, #3]
 8027fc0:	701a      	strb	r2, [r3, #0]
}
 8027fc2:	bf00      	nop
 8027fc4:	370c      	adds	r7, #12
 8027fc6:	46bd      	mov	sp, r7
 8027fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fcc:	4770      	bx	lr
 8027fce:	bf00      	nop
 8027fd0:	40023c00 	.word	0x40023c00

08027fd4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027fd4:	b480      	push	{r7}
 8027fd6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027fd8:	4b27      	ldr	r3, [pc, #156]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8027fda:	68db      	ldr	r3, [r3, #12]
 8027fdc:	f003 0310 	and.w	r3, r3, #16
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d008      	beq.n	8027ff6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027fe4:	4b25      	ldr	r3, [pc, #148]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8027fe6:	69db      	ldr	r3, [r3, #28]
 8027fe8:	f043 0310 	orr.w	r3, r3, #16
 8027fec:	4a23      	ldr	r2, [pc, #140]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8027fee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027ff0:	4b21      	ldr	r3, [pc, #132]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8027ff2:	2210      	movs	r2, #16
 8027ff4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027ff6:	4b20      	ldr	r3, [pc, #128]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8027ff8:	68db      	ldr	r3, [r3, #12]
 8027ffa:	f003 0320 	and.w	r3, r3, #32
 8027ffe:	2b00      	cmp	r3, #0
 8028000:	d008      	beq.n	8028014 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8028002:	4b1e      	ldr	r3, [pc, #120]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8028004:	69db      	ldr	r3, [r3, #28]
 8028006:	f043 0308 	orr.w	r3, r3, #8
 802800a:	4a1c      	ldr	r2, [pc, #112]	; (802807c <FLASH_SetErrorCode+0xa8>)
 802800c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802800e:	4b1a      	ldr	r3, [pc, #104]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8028010:	2220      	movs	r2, #32
 8028012:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8028014:	4b18      	ldr	r3, [pc, #96]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8028016:	68db      	ldr	r3, [r3, #12]
 8028018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802801c:	2b00      	cmp	r3, #0
 802801e:	d008      	beq.n	8028032 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8028020:	4b16      	ldr	r3, [pc, #88]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8028022:	69db      	ldr	r3, [r3, #28]
 8028024:	f043 0304 	orr.w	r3, r3, #4
 8028028:	4a14      	ldr	r2, [pc, #80]	; (802807c <FLASH_SetErrorCode+0xa8>)
 802802a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 802802c:	4b12      	ldr	r3, [pc, #72]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 802802e:	2240      	movs	r2, #64	; 0x40
 8028030:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8028032:	4b11      	ldr	r3, [pc, #68]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8028034:	68db      	ldr	r3, [r3, #12]
 8028036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802803a:	2b00      	cmp	r3, #0
 802803c:	d008      	beq.n	8028050 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802803e:	4b0f      	ldr	r3, [pc, #60]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8028040:	69db      	ldr	r3, [r3, #28]
 8028042:	f043 0302 	orr.w	r3, r3, #2
 8028046:	4a0d      	ldr	r2, [pc, #52]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8028048:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802804a:	4b0b      	ldr	r3, [pc, #44]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 802804c:	2280      	movs	r2, #128	; 0x80
 802804e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8028050:	4b09      	ldr	r3, [pc, #36]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 8028052:	68db      	ldr	r3, [r3, #12]
 8028054:	f003 0302 	and.w	r3, r3, #2
 8028058:	2b00      	cmp	r3, #0
 802805a:	d008      	beq.n	802806e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 802805c:	4b07      	ldr	r3, [pc, #28]	; (802807c <FLASH_SetErrorCode+0xa8>)
 802805e:	69db      	ldr	r3, [r3, #28]
 8028060:	f043 0320 	orr.w	r3, r3, #32
 8028064:	4a05      	ldr	r2, [pc, #20]	; (802807c <FLASH_SetErrorCode+0xa8>)
 8028066:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8028068:	4b03      	ldr	r3, [pc, #12]	; (8028078 <FLASH_SetErrorCode+0xa4>)
 802806a:	2202      	movs	r2, #2
 802806c:	60da      	str	r2, [r3, #12]
  }
}
 802806e:	bf00      	nop
 8028070:	46bd      	mov	sp, r7
 8028072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028076:	4770      	bx	lr
 8028078:	40023c00 	.word	0x40023c00
 802807c:	200051fc 	.word	0x200051fc

08028080 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8028080:	b580      	push	{r7, lr}
 8028082:	b084      	sub	sp, #16
 8028084:	af00      	add	r7, sp, #0
 8028086:	6078      	str	r0, [r7, #4]
 8028088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802808a:	2301      	movs	r3, #1
 802808c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802808e:	2300      	movs	r3, #0
 8028090:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8028092:	4b31      	ldr	r3, [pc, #196]	; (8028158 <HAL_FLASHEx_Erase+0xd8>)
 8028094:	7e1b      	ldrb	r3, [r3, #24]
 8028096:	2b01      	cmp	r3, #1
 8028098:	d101      	bne.n	802809e <HAL_FLASHEx_Erase+0x1e>
 802809a:	2302      	movs	r3, #2
 802809c:	e058      	b.n	8028150 <HAL_FLASHEx_Erase+0xd0>
 802809e:	4b2e      	ldr	r3, [pc, #184]	; (8028158 <HAL_FLASHEx_Erase+0xd8>)
 80280a0:	2201      	movs	r2, #1
 80280a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80280a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80280a8:	f7ff feba 	bl	8027e20 <FLASH_WaitForLastOperation>
 80280ac:	4603      	mov	r3, r0
 80280ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80280b0:	7bfb      	ldrb	r3, [r7, #15]
 80280b2:	2b00      	cmp	r3, #0
 80280b4:	d148      	bne.n	8028148 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80280b6:	683b      	ldr	r3, [r7, #0]
 80280b8:	f04f 32ff 	mov.w	r2, #4294967295
 80280bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80280be:	687b      	ldr	r3, [r7, #4]
 80280c0:	681b      	ldr	r3, [r3, #0]
 80280c2:	2b01      	cmp	r3, #1
 80280c4:	d115      	bne.n	80280f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80280c6:	687b      	ldr	r3, [r7, #4]
 80280c8:	691b      	ldr	r3, [r3, #16]
 80280ca:	b2da      	uxtb	r2, r3
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	685b      	ldr	r3, [r3, #4]
 80280d0:	4619      	mov	r1, r3
 80280d2:	4610      	mov	r0, r2
 80280d4:	f000 f844 	bl	8028160 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80280d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80280dc:	f7ff fea0 	bl	8027e20 <FLASH_WaitForLastOperation>
 80280e0:	4603      	mov	r3, r0
 80280e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80280e4:	4b1d      	ldr	r3, [pc, #116]	; (802815c <HAL_FLASHEx_Erase+0xdc>)
 80280e6:	691b      	ldr	r3, [r3, #16]
 80280e8:	4a1c      	ldr	r2, [pc, #112]	; (802815c <HAL_FLASHEx_Erase+0xdc>)
 80280ea:	f023 0304 	bic.w	r3, r3, #4
 80280ee:	6113      	str	r3, [r2, #16]
 80280f0:	e028      	b.n	8028144 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80280f2:	687b      	ldr	r3, [r7, #4]
 80280f4:	689b      	ldr	r3, [r3, #8]
 80280f6:	60bb      	str	r3, [r7, #8]
 80280f8:	e01c      	b.n	8028134 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80280fa:	687b      	ldr	r3, [r7, #4]
 80280fc:	691b      	ldr	r3, [r3, #16]
 80280fe:	b2db      	uxtb	r3, r3
 8028100:	4619      	mov	r1, r3
 8028102:	68b8      	ldr	r0, [r7, #8]
 8028104:	f000 f850 	bl	80281a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8028108:	f24c 3050 	movw	r0, #50000	; 0xc350
 802810c:	f7ff fe88 	bl	8027e20 <FLASH_WaitForLastOperation>
 8028110:	4603      	mov	r3, r0
 8028112:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8028114:	4b11      	ldr	r3, [pc, #68]	; (802815c <HAL_FLASHEx_Erase+0xdc>)
 8028116:	691b      	ldr	r3, [r3, #16]
 8028118:	4a10      	ldr	r2, [pc, #64]	; (802815c <HAL_FLASHEx_Erase+0xdc>)
 802811a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802811e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8028120:	7bfb      	ldrb	r3, [r7, #15]
 8028122:	2b00      	cmp	r3, #0
 8028124:	d003      	beq.n	802812e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8028126:	683b      	ldr	r3, [r7, #0]
 8028128:	68ba      	ldr	r2, [r7, #8]
 802812a:	601a      	str	r2, [r3, #0]
          break;
 802812c:	e00a      	b.n	8028144 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802812e:	68bb      	ldr	r3, [r7, #8]
 8028130:	3301      	adds	r3, #1
 8028132:	60bb      	str	r3, [r7, #8]
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	68da      	ldr	r2, [r3, #12]
 8028138:	687b      	ldr	r3, [r7, #4]
 802813a:	689b      	ldr	r3, [r3, #8]
 802813c:	4413      	add	r3, r2
 802813e:	68ba      	ldr	r2, [r7, #8]
 8028140:	429a      	cmp	r2, r3
 8028142:	d3da      	bcc.n	80280fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8028144:	f000 f878 	bl	8028238 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8028148:	4b03      	ldr	r3, [pc, #12]	; (8028158 <HAL_FLASHEx_Erase+0xd8>)
 802814a:	2200      	movs	r2, #0
 802814c:	761a      	strb	r2, [r3, #24]

  return status;
 802814e:	7bfb      	ldrb	r3, [r7, #15]
}
 8028150:	4618      	mov	r0, r3
 8028152:	3710      	adds	r7, #16
 8028154:	46bd      	mov	sp, r7
 8028156:	bd80      	pop	{r7, pc}
 8028158:	200051fc 	.word	0x200051fc
 802815c:	40023c00 	.word	0x40023c00

08028160 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8028160:	b480      	push	{r7}
 8028162:	b083      	sub	sp, #12
 8028164:	af00      	add	r7, sp, #0
 8028166:	4603      	mov	r3, r0
 8028168:	6039      	str	r1, [r7, #0]
 802816a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802816c:	4b0d      	ldr	r3, [pc, #52]	; (80281a4 <FLASH_MassErase+0x44>)
 802816e:	691b      	ldr	r3, [r3, #16]
 8028170:	4a0c      	ldr	r2, [pc, #48]	; (80281a4 <FLASH_MassErase+0x44>)
 8028172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028176:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8028178:	4b0a      	ldr	r3, [pc, #40]	; (80281a4 <FLASH_MassErase+0x44>)
 802817a:	691b      	ldr	r3, [r3, #16]
 802817c:	4a09      	ldr	r2, [pc, #36]	; (80281a4 <FLASH_MassErase+0x44>)
 802817e:	f043 0304 	orr.w	r3, r3, #4
 8028182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8028184:	4b07      	ldr	r3, [pc, #28]	; (80281a4 <FLASH_MassErase+0x44>)
 8028186:	691a      	ldr	r2, [r3, #16]
 8028188:	79fb      	ldrb	r3, [r7, #7]
 802818a:	021b      	lsls	r3, r3, #8
 802818c:	4313      	orrs	r3, r2
 802818e:	4a05      	ldr	r2, [pc, #20]	; (80281a4 <FLASH_MassErase+0x44>)
 8028190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028194:	6113      	str	r3, [r2, #16]
}
 8028196:	bf00      	nop
 8028198:	370c      	adds	r7, #12
 802819a:	46bd      	mov	sp, r7
 802819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281a0:	4770      	bx	lr
 80281a2:	bf00      	nop
 80281a4:	40023c00 	.word	0x40023c00

080281a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80281a8:	b480      	push	{r7}
 80281aa:	b085      	sub	sp, #20
 80281ac:	af00      	add	r7, sp, #0
 80281ae:	6078      	str	r0, [r7, #4]
 80281b0:	460b      	mov	r3, r1
 80281b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80281b4:	2300      	movs	r3, #0
 80281b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80281b8:	78fb      	ldrb	r3, [r7, #3]
 80281ba:	2b00      	cmp	r3, #0
 80281bc:	d102      	bne.n	80281c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80281be:	2300      	movs	r3, #0
 80281c0:	60fb      	str	r3, [r7, #12]
 80281c2:	e010      	b.n	80281e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80281c4:	78fb      	ldrb	r3, [r7, #3]
 80281c6:	2b01      	cmp	r3, #1
 80281c8:	d103      	bne.n	80281d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80281ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80281ce:	60fb      	str	r3, [r7, #12]
 80281d0:	e009      	b.n	80281e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80281d2:	78fb      	ldrb	r3, [r7, #3]
 80281d4:	2b02      	cmp	r3, #2
 80281d6:	d103      	bne.n	80281e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80281d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80281dc:	60fb      	str	r3, [r7, #12]
 80281de:	e002      	b.n	80281e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80281e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80281e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80281e6:	4b13      	ldr	r3, [pc, #76]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 80281e8:	691b      	ldr	r3, [r3, #16]
 80281ea:	4a12      	ldr	r2, [pc, #72]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 80281ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80281f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80281f2:	4b10      	ldr	r3, [pc, #64]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 80281f4:	691a      	ldr	r2, [r3, #16]
 80281f6:	490f      	ldr	r1, [pc, #60]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 80281f8:	68fb      	ldr	r3, [r7, #12]
 80281fa:	4313      	orrs	r3, r2
 80281fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80281fe:	4b0d      	ldr	r3, [pc, #52]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 8028200:	691b      	ldr	r3, [r3, #16]
 8028202:	4a0c      	ldr	r2, [pc, #48]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 8028204:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8028208:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802820a:	4b0a      	ldr	r3, [pc, #40]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 802820c:	691a      	ldr	r2, [r3, #16]
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	00db      	lsls	r3, r3, #3
 8028212:	4313      	orrs	r3, r2
 8028214:	4a07      	ldr	r2, [pc, #28]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 8028216:	f043 0302 	orr.w	r3, r3, #2
 802821a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802821c:	4b05      	ldr	r3, [pc, #20]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 802821e:	691b      	ldr	r3, [r3, #16]
 8028220:	4a04      	ldr	r2, [pc, #16]	; (8028234 <FLASH_Erase_Sector+0x8c>)
 8028222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028226:	6113      	str	r3, [r2, #16]
}
 8028228:	bf00      	nop
 802822a:	3714      	adds	r7, #20
 802822c:	46bd      	mov	sp, r7
 802822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028232:	4770      	bx	lr
 8028234:	40023c00 	.word	0x40023c00

08028238 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8028238:	b480      	push	{r7}
 802823a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 802823c:	4b20      	ldr	r3, [pc, #128]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802823e:	681b      	ldr	r3, [r3, #0]
 8028240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028244:	2b00      	cmp	r3, #0
 8028246:	d017      	beq.n	8028278 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8028248:	4b1d      	ldr	r3, [pc, #116]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802824a:	681b      	ldr	r3, [r3, #0]
 802824c:	4a1c      	ldr	r2, [pc, #112]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802824e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8028252:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8028254:	4b1a      	ldr	r3, [pc, #104]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028256:	681b      	ldr	r3, [r3, #0]
 8028258:	4a19      	ldr	r2, [pc, #100]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802825a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802825e:	6013      	str	r3, [r2, #0]
 8028260:	4b17      	ldr	r3, [pc, #92]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028262:	681b      	ldr	r3, [r3, #0]
 8028264:	4a16      	ldr	r2, [pc, #88]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802826a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802826c:	4b14      	ldr	r3, [pc, #80]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802826e:	681b      	ldr	r3, [r3, #0]
 8028270:	4a13      	ldr	r2, [pc, #76]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028276:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8028278:	4b11      	ldr	r3, [pc, #68]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802827a:	681b      	ldr	r3, [r3, #0]
 802827c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028280:	2b00      	cmp	r3, #0
 8028282:	d017      	beq.n	80282b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8028284:	4b0e      	ldr	r3, [pc, #56]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028286:	681b      	ldr	r3, [r3, #0]
 8028288:	4a0d      	ldr	r2, [pc, #52]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802828a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802828e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028290:	4b0b      	ldr	r3, [pc, #44]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028292:	681b      	ldr	r3, [r3, #0]
 8028294:	4a0a      	ldr	r2, [pc, #40]	; (80282c0 <FLASH_FlushCaches+0x88>)
 8028296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802829a:	6013      	str	r3, [r2, #0]
 802829c:	4b08      	ldr	r3, [pc, #32]	; (80282c0 <FLASH_FlushCaches+0x88>)
 802829e:	681b      	ldr	r3, [r3, #0]
 80282a0:	4a07      	ldr	r2, [pc, #28]	; (80282c0 <FLASH_FlushCaches+0x88>)
 80282a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80282a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80282a8:	4b05      	ldr	r3, [pc, #20]	; (80282c0 <FLASH_FlushCaches+0x88>)
 80282aa:	681b      	ldr	r3, [r3, #0]
 80282ac:	4a04      	ldr	r2, [pc, #16]	; (80282c0 <FLASH_FlushCaches+0x88>)
 80282ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80282b2:	6013      	str	r3, [r2, #0]
  }
}
 80282b4:	bf00      	nop
 80282b6:	46bd      	mov	sp, r7
 80282b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282bc:	4770      	bx	lr
 80282be:	bf00      	nop
 80282c0:	40023c00 	.word	0x40023c00

080282c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80282c4:	b480      	push	{r7}
 80282c6:	b089      	sub	sp, #36	; 0x24
 80282c8:	af00      	add	r7, sp, #0
 80282ca:	6078      	str	r0, [r7, #4]
 80282cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80282ce:	2300      	movs	r3, #0
 80282d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80282d2:	2300      	movs	r3, #0
 80282d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80282d6:	2300      	movs	r3, #0
 80282d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80282da:	2300      	movs	r3, #0
 80282dc:	61fb      	str	r3, [r7, #28]
 80282de:	e16b      	b.n	80285b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80282e0:	2201      	movs	r2, #1
 80282e2:	69fb      	ldr	r3, [r7, #28]
 80282e4:	fa02 f303 	lsl.w	r3, r2, r3
 80282e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80282ea:	683b      	ldr	r3, [r7, #0]
 80282ec:	681b      	ldr	r3, [r3, #0]
 80282ee:	697a      	ldr	r2, [r7, #20]
 80282f0:	4013      	ands	r3, r2
 80282f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80282f4:	693a      	ldr	r2, [r7, #16]
 80282f6:	697b      	ldr	r3, [r7, #20]
 80282f8:	429a      	cmp	r2, r3
 80282fa:	f040 815a 	bne.w	80285b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80282fe:	683b      	ldr	r3, [r7, #0]
 8028300:	685b      	ldr	r3, [r3, #4]
 8028302:	f003 0303 	and.w	r3, r3, #3
 8028306:	2b01      	cmp	r3, #1
 8028308:	d005      	beq.n	8028316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802830a:	683b      	ldr	r3, [r7, #0]
 802830c:	685b      	ldr	r3, [r3, #4]
 802830e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8028312:	2b02      	cmp	r3, #2
 8028314:	d130      	bne.n	8028378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8028316:	687b      	ldr	r3, [r7, #4]
 8028318:	689b      	ldr	r3, [r3, #8]
 802831a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802831c:	69fb      	ldr	r3, [r7, #28]
 802831e:	005b      	lsls	r3, r3, #1
 8028320:	2203      	movs	r2, #3
 8028322:	fa02 f303 	lsl.w	r3, r2, r3
 8028326:	43db      	mvns	r3, r3
 8028328:	69ba      	ldr	r2, [r7, #24]
 802832a:	4013      	ands	r3, r2
 802832c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802832e:	683b      	ldr	r3, [r7, #0]
 8028330:	68da      	ldr	r2, [r3, #12]
 8028332:	69fb      	ldr	r3, [r7, #28]
 8028334:	005b      	lsls	r3, r3, #1
 8028336:	fa02 f303 	lsl.w	r3, r2, r3
 802833a:	69ba      	ldr	r2, [r7, #24]
 802833c:	4313      	orrs	r3, r2
 802833e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	69ba      	ldr	r2, [r7, #24]
 8028344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8028346:	687b      	ldr	r3, [r7, #4]
 8028348:	685b      	ldr	r3, [r3, #4]
 802834a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802834c:	2201      	movs	r2, #1
 802834e:	69fb      	ldr	r3, [r7, #28]
 8028350:	fa02 f303 	lsl.w	r3, r2, r3
 8028354:	43db      	mvns	r3, r3
 8028356:	69ba      	ldr	r2, [r7, #24]
 8028358:	4013      	ands	r3, r2
 802835a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802835c:	683b      	ldr	r3, [r7, #0]
 802835e:	685b      	ldr	r3, [r3, #4]
 8028360:	091b      	lsrs	r3, r3, #4
 8028362:	f003 0201 	and.w	r2, r3, #1
 8028366:	69fb      	ldr	r3, [r7, #28]
 8028368:	fa02 f303 	lsl.w	r3, r2, r3
 802836c:	69ba      	ldr	r2, [r7, #24]
 802836e:	4313      	orrs	r3, r2
 8028370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8028372:	687b      	ldr	r3, [r7, #4]
 8028374:	69ba      	ldr	r2, [r7, #24]
 8028376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8028378:	683b      	ldr	r3, [r7, #0]
 802837a:	685b      	ldr	r3, [r3, #4]
 802837c:	f003 0303 	and.w	r3, r3, #3
 8028380:	2b03      	cmp	r3, #3
 8028382:	d017      	beq.n	80283b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	68db      	ldr	r3, [r3, #12]
 8028388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802838a:	69fb      	ldr	r3, [r7, #28]
 802838c:	005b      	lsls	r3, r3, #1
 802838e:	2203      	movs	r2, #3
 8028390:	fa02 f303 	lsl.w	r3, r2, r3
 8028394:	43db      	mvns	r3, r3
 8028396:	69ba      	ldr	r2, [r7, #24]
 8028398:	4013      	ands	r3, r2
 802839a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802839c:	683b      	ldr	r3, [r7, #0]
 802839e:	689a      	ldr	r2, [r3, #8]
 80283a0:	69fb      	ldr	r3, [r7, #28]
 80283a2:	005b      	lsls	r3, r3, #1
 80283a4:	fa02 f303 	lsl.w	r3, r2, r3
 80283a8:	69ba      	ldr	r2, [r7, #24]
 80283aa:	4313      	orrs	r3, r2
 80283ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	69ba      	ldr	r2, [r7, #24]
 80283b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80283b4:	683b      	ldr	r3, [r7, #0]
 80283b6:	685b      	ldr	r3, [r3, #4]
 80283b8:	f003 0303 	and.w	r3, r3, #3
 80283bc:	2b02      	cmp	r3, #2
 80283be:	d123      	bne.n	8028408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80283c0:	69fb      	ldr	r3, [r7, #28]
 80283c2:	08da      	lsrs	r2, r3, #3
 80283c4:	687b      	ldr	r3, [r7, #4]
 80283c6:	3208      	adds	r2, #8
 80283c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80283cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80283ce:	69fb      	ldr	r3, [r7, #28]
 80283d0:	f003 0307 	and.w	r3, r3, #7
 80283d4:	009b      	lsls	r3, r3, #2
 80283d6:	220f      	movs	r2, #15
 80283d8:	fa02 f303 	lsl.w	r3, r2, r3
 80283dc:	43db      	mvns	r3, r3
 80283de:	69ba      	ldr	r2, [r7, #24]
 80283e0:	4013      	ands	r3, r2
 80283e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80283e4:	683b      	ldr	r3, [r7, #0]
 80283e6:	691a      	ldr	r2, [r3, #16]
 80283e8:	69fb      	ldr	r3, [r7, #28]
 80283ea:	f003 0307 	and.w	r3, r3, #7
 80283ee:	009b      	lsls	r3, r3, #2
 80283f0:	fa02 f303 	lsl.w	r3, r2, r3
 80283f4:	69ba      	ldr	r2, [r7, #24]
 80283f6:	4313      	orrs	r3, r2
 80283f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80283fa:	69fb      	ldr	r3, [r7, #28]
 80283fc:	08da      	lsrs	r2, r3, #3
 80283fe:	687b      	ldr	r3, [r7, #4]
 8028400:	3208      	adds	r2, #8
 8028402:	69b9      	ldr	r1, [r7, #24]
 8028404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8028408:	687b      	ldr	r3, [r7, #4]
 802840a:	681b      	ldr	r3, [r3, #0]
 802840c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802840e:	69fb      	ldr	r3, [r7, #28]
 8028410:	005b      	lsls	r3, r3, #1
 8028412:	2203      	movs	r2, #3
 8028414:	fa02 f303 	lsl.w	r3, r2, r3
 8028418:	43db      	mvns	r3, r3
 802841a:	69ba      	ldr	r2, [r7, #24]
 802841c:	4013      	ands	r3, r2
 802841e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8028420:	683b      	ldr	r3, [r7, #0]
 8028422:	685b      	ldr	r3, [r3, #4]
 8028424:	f003 0203 	and.w	r2, r3, #3
 8028428:	69fb      	ldr	r3, [r7, #28]
 802842a:	005b      	lsls	r3, r3, #1
 802842c:	fa02 f303 	lsl.w	r3, r2, r3
 8028430:	69ba      	ldr	r2, [r7, #24]
 8028432:	4313      	orrs	r3, r2
 8028434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8028436:	687b      	ldr	r3, [r7, #4]
 8028438:	69ba      	ldr	r2, [r7, #24]
 802843a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802843c:	683b      	ldr	r3, [r7, #0]
 802843e:	685b      	ldr	r3, [r3, #4]
 8028440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8028444:	2b00      	cmp	r3, #0
 8028446:	f000 80b4 	beq.w	80285b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802844a:	2300      	movs	r3, #0
 802844c:	60fb      	str	r3, [r7, #12]
 802844e:	4b60      	ldr	r3, [pc, #384]	; (80285d0 <HAL_GPIO_Init+0x30c>)
 8028450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028452:	4a5f      	ldr	r2, [pc, #380]	; (80285d0 <HAL_GPIO_Init+0x30c>)
 8028454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028458:	6453      	str	r3, [r2, #68]	; 0x44
 802845a:	4b5d      	ldr	r3, [pc, #372]	; (80285d0 <HAL_GPIO_Init+0x30c>)
 802845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802845e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028462:	60fb      	str	r3, [r7, #12]
 8028464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8028466:	4a5b      	ldr	r2, [pc, #364]	; (80285d4 <HAL_GPIO_Init+0x310>)
 8028468:	69fb      	ldr	r3, [r7, #28]
 802846a:	089b      	lsrs	r3, r3, #2
 802846c:	3302      	adds	r3, #2
 802846e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028474:	69fb      	ldr	r3, [r7, #28]
 8028476:	f003 0303 	and.w	r3, r3, #3
 802847a:	009b      	lsls	r3, r3, #2
 802847c:	220f      	movs	r2, #15
 802847e:	fa02 f303 	lsl.w	r3, r2, r3
 8028482:	43db      	mvns	r3, r3
 8028484:	69ba      	ldr	r2, [r7, #24]
 8028486:	4013      	ands	r3, r2
 8028488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	4a52      	ldr	r2, [pc, #328]	; (80285d8 <HAL_GPIO_Init+0x314>)
 802848e:	4293      	cmp	r3, r2
 8028490:	d02b      	beq.n	80284ea <HAL_GPIO_Init+0x226>
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	4a51      	ldr	r2, [pc, #324]	; (80285dc <HAL_GPIO_Init+0x318>)
 8028496:	4293      	cmp	r3, r2
 8028498:	d025      	beq.n	80284e6 <HAL_GPIO_Init+0x222>
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	4a50      	ldr	r2, [pc, #320]	; (80285e0 <HAL_GPIO_Init+0x31c>)
 802849e:	4293      	cmp	r3, r2
 80284a0:	d01f      	beq.n	80284e2 <HAL_GPIO_Init+0x21e>
 80284a2:	687b      	ldr	r3, [r7, #4]
 80284a4:	4a4f      	ldr	r2, [pc, #316]	; (80285e4 <HAL_GPIO_Init+0x320>)
 80284a6:	4293      	cmp	r3, r2
 80284a8:	d019      	beq.n	80284de <HAL_GPIO_Init+0x21a>
 80284aa:	687b      	ldr	r3, [r7, #4]
 80284ac:	4a4e      	ldr	r2, [pc, #312]	; (80285e8 <HAL_GPIO_Init+0x324>)
 80284ae:	4293      	cmp	r3, r2
 80284b0:	d013      	beq.n	80284da <HAL_GPIO_Init+0x216>
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	4a4d      	ldr	r2, [pc, #308]	; (80285ec <HAL_GPIO_Init+0x328>)
 80284b6:	4293      	cmp	r3, r2
 80284b8:	d00d      	beq.n	80284d6 <HAL_GPIO_Init+0x212>
 80284ba:	687b      	ldr	r3, [r7, #4]
 80284bc:	4a4c      	ldr	r2, [pc, #304]	; (80285f0 <HAL_GPIO_Init+0x32c>)
 80284be:	4293      	cmp	r3, r2
 80284c0:	d007      	beq.n	80284d2 <HAL_GPIO_Init+0x20e>
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	4a4b      	ldr	r2, [pc, #300]	; (80285f4 <HAL_GPIO_Init+0x330>)
 80284c6:	4293      	cmp	r3, r2
 80284c8:	d101      	bne.n	80284ce <HAL_GPIO_Init+0x20a>
 80284ca:	2307      	movs	r3, #7
 80284cc:	e00e      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284ce:	2308      	movs	r3, #8
 80284d0:	e00c      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284d2:	2306      	movs	r3, #6
 80284d4:	e00a      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284d6:	2305      	movs	r3, #5
 80284d8:	e008      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284da:	2304      	movs	r3, #4
 80284dc:	e006      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284de:	2303      	movs	r3, #3
 80284e0:	e004      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284e2:	2302      	movs	r3, #2
 80284e4:	e002      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284e6:	2301      	movs	r3, #1
 80284e8:	e000      	b.n	80284ec <HAL_GPIO_Init+0x228>
 80284ea:	2300      	movs	r3, #0
 80284ec:	69fa      	ldr	r2, [r7, #28]
 80284ee:	f002 0203 	and.w	r2, r2, #3
 80284f2:	0092      	lsls	r2, r2, #2
 80284f4:	4093      	lsls	r3, r2
 80284f6:	69ba      	ldr	r2, [r7, #24]
 80284f8:	4313      	orrs	r3, r2
 80284fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80284fc:	4935      	ldr	r1, [pc, #212]	; (80285d4 <HAL_GPIO_Init+0x310>)
 80284fe:	69fb      	ldr	r3, [r7, #28]
 8028500:	089b      	lsrs	r3, r3, #2
 8028502:	3302      	adds	r3, #2
 8028504:	69ba      	ldr	r2, [r7, #24]
 8028506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802850a:	4b3b      	ldr	r3, [pc, #236]	; (80285f8 <HAL_GPIO_Init+0x334>)
 802850c:	689b      	ldr	r3, [r3, #8]
 802850e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028510:	693b      	ldr	r3, [r7, #16]
 8028512:	43db      	mvns	r3, r3
 8028514:	69ba      	ldr	r2, [r7, #24]
 8028516:	4013      	ands	r3, r2
 8028518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802851a:	683b      	ldr	r3, [r7, #0]
 802851c:	685b      	ldr	r3, [r3, #4]
 802851e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028522:	2b00      	cmp	r3, #0
 8028524:	d003      	beq.n	802852e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8028526:	69ba      	ldr	r2, [r7, #24]
 8028528:	693b      	ldr	r3, [r7, #16]
 802852a:	4313      	orrs	r3, r2
 802852c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802852e:	4a32      	ldr	r2, [pc, #200]	; (80285f8 <HAL_GPIO_Init+0x334>)
 8028530:	69bb      	ldr	r3, [r7, #24]
 8028532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028534:	4b30      	ldr	r3, [pc, #192]	; (80285f8 <HAL_GPIO_Init+0x334>)
 8028536:	68db      	ldr	r3, [r3, #12]
 8028538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802853a:	693b      	ldr	r3, [r7, #16]
 802853c:	43db      	mvns	r3, r3
 802853e:	69ba      	ldr	r2, [r7, #24]
 8028540:	4013      	ands	r3, r2
 8028542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8028544:	683b      	ldr	r3, [r7, #0]
 8028546:	685b      	ldr	r3, [r3, #4]
 8028548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802854c:	2b00      	cmp	r3, #0
 802854e:	d003      	beq.n	8028558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028550:	69ba      	ldr	r2, [r7, #24]
 8028552:	693b      	ldr	r3, [r7, #16]
 8028554:	4313      	orrs	r3, r2
 8028556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8028558:	4a27      	ldr	r2, [pc, #156]	; (80285f8 <HAL_GPIO_Init+0x334>)
 802855a:	69bb      	ldr	r3, [r7, #24]
 802855c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802855e:	4b26      	ldr	r3, [pc, #152]	; (80285f8 <HAL_GPIO_Init+0x334>)
 8028560:	685b      	ldr	r3, [r3, #4]
 8028562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028564:	693b      	ldr	r3, [r7, #16]
 8028566:	43db      	mvns	r3, r3
 8028568:	69ba      	ldr	r2, [r7, #24]
 802856a:	4013      	ands	r3, r2
 802856c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802856e:	683b      	ldr	r3, [r7, #0]
 8028570:	685b      	ldr	r3, [r3, #4]
 8028572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028576:	2b00      	cmp	r3, #0
 8028578:	d003      	beq.n	8028582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802857a:	69ba      	ldr	r2, [r7, #24]
 802857c:	693b      	ldr	r3, [r7, #16]
 802857e:	4313      	orrs	r3, r2
 8028580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028582:	4a1d      	ldr	r2, [pc, #116]	; (80285f8 <HAL_GPIO_Init+0x334>)
 8028584:	69bb      	ldr	r3, [r7, #24]
 8028586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8028588:	4b1b      	ldr	r3, [pc, #108]	; (80285f8 <HAL_GPIO_Init+0x334>)
 802858a:	681b      	ldr	r3, [r3, #0]
 802858c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802858e:	693b      	ldr	r3, [r7, #16]
 8028590:	43db      	mvns	r3, r3
 8028592:	69ba      	ldr	r2, [r7, #24]
 8028594:	4013      	ands	r3, r2
 8028596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8028598:	683b      	ldr	r3, [r7, #0]
 802859a:	685b      	ldr	r3, [r3, #4]
 802859c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80285a0:	2b00      	cmp	r3, #0
 80285a2:	d003      	beq.n	80285ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80285a4:	69ba      	ldr	r2, [r7, #24]
 80285a6:	693b      	ldr	r3, [r7, #16]
 80285a8:	4313      	orrs	r3, r2
 80285aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80285ac:	4a12      	ldr	r2, [pc, #72]	; (80285f8 <HAL_GPIO_Init+0x334>)
 80285ae:	69bb      	ldr	r3, [r7, #24]
 80285b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80285b2:	69fb      	ldr	r3, [r7, #28]
 80285b4:	3301      	adds	r3, #1
 80285b6:	61fb      	str	r3, [r7, #28]
 80285b8:	69fb      	ldr	r3, [r7, #28]
 80285ba:	2b0f      	cmp	r3, #15
 80285bc:	f67f ae90 	bls.w	80282e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80285c0:	bf00      	nop
 80285c2:	bf00      	nop
 80285c4:	3724      	adds	r7, #36	; 0x24
 80285c6:	46bd      	mov	sp, r7
 80285c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285cc:	4770      	bx	lr
 80285ce:	bf00      	nop
 80285d0:	40023800 	.word	0x40023800
 80285d4:	40013800 	.word	0x40013800
 80285d8:	40020000 	.word	0x40020000
 80285dc:	40020400 	.word	0x40020400
 80285e0:	40020800 	.word	0x40020800
 80285e4:	40020c00 	.word	0x40020c00
 80285e8:	40021000 	.word	0x40021000
 80285ec:	40021400 	.word	0x40021400
 80285f0:	40021800 	.word	0x40021800
 80285f4:	40021c00 	.word	0x40021c00
 80285f8:	40013c00 	.word	0x40013c00

080285fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80285fc:	b480      	push	{r7}
 80285fe:	b087      	sub	sp, #28
 8028600:	af00      	add	r7, sp, #0
 8028602:	6078      	str	r0, [r7, #4]
 8028604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8028606:	2300      	movs	r3, #0
 8028608:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 802860a:	2300      	movs	r3, #0
 802860c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 802860e:	2300      	movs	r3, #0
 8028610:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028612:	2300      	movs	r3, #0
 8028614:	617b      	str	r3, [r7, #20]
 8028616:	e0cd      	b.n	80287b4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028618:	2201      	movs	r2, #1
 802861a:	697b      	ldr	r3, [r7, #20]
 802861c:	fa02 f303 	lsl.w	r3, r2, r3
 8028620:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8028622:	683a      	ldr	r2, [r7, #0]
 8028624:	693b      	ldr	r3, [r7, #16]
 8028626:	4013      	ands	r3, r2
 8028628:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 802862a:	68fa      	ldr	r2, [r7, #12]
 802862c:	693b      	ldr	r3, [r7, #16]
 802862e:	429a      	cmp	r2, r3
 8028630:	f040 80bd 	bne.w	80287ae <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8028634:	4a65      	ldr	r2, [pc, #404]	; (80287cc <HAL_GPIO_DeInit+0x1d0>)
 8028636:	697b      	ldr	r3, [r7, #20]
 8028638:	089b      	lsrs	r3, r3, #2
 802863a:	3302      	adds	r3, #2
 802863c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028640:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8028642:	697b      	ldr	r3, [r7, #20]
 8028644:	f003 0303 	and.w	r3, r3, #3
 8028648:	009b      	lsls	r3, r3, #2
 802864a:	220f      	movs	r2, #15
 802864c:	fa02 f303 	lsl.w	r3, r2, r3
 8028650:	68ba      	ldr	r2, [r7, #8]
 8028652:	4013      	ands	r3, r2
 8028654:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8028656:	687b      	ldr	r3, [r7, #4]
 8028658:	4a5d      	ldr	r2, [pc, #372]	; (80287d0 <HAL_GPIO_DeInit+0x1d4>)
 802865a:	4293      	cmp	r3, r2
 802865c:	d02b      	beq.n	80286b6 <HAL_GPIO_DeInit+0xba>
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	4a5c      	ldr	r2, [pc, #368]	; (80287d4 <HAL_GPIO_DeInit+0x1d8>)
 8028662:	4293      	cmp	r3, r2
 8028664:	d025      	beq.n	80286b2 <HAL_GPIO_DeInit+0xb6>
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	4a5b      	ldr	r2, [pc, #364]	; (80287d8 <HAL_GPIO_DeInit+0x1dc>)
 802866a:	4293      	cmp	r3, r2
 802866c:	d01f      	beq.n	80286ae <HAL_GPIO_DeInit+0xb2>
 802866e:	687b      	ldr	r3, [r7, #4]
 8028670:	4a5a      	ldr	r2, [pc, #360]	; (80287dc <HAL_GPIO_DeInit+0x1e0>)
 8028672:	4293      	cmp	r3, r2
 8028674:	d019      	beq.n	80286aa <HAL_GPIO_DeInit+0xae>
 8028676:	687b      	ldr	r3, [r7, #4]
 8028678:	4a59      	ldr	r2, [pc, #356]	; (80287e0 <HAL_GPIO_DeInit+0x1e4>)
 802867a:	4293      	cmp	r3, r2
 802867c:	d013      	beq.n	80286a6 <HAL_GPIO_DeInit+0xaa>
 802867e:	687b      	ldr	r3, [r7, #4]
 8028680:	4a58      	ldr	r2, [pc, #352]	; (80287e4 <HAL_GPIO_DeInit+0x1e8>)
 8028682:	4293      	cmp	r3, r2
 8028684:	d00d      	beq.n	80286a2 <HAL_GPIO_DeInit+0xa6>
 8028686:	687b      	ldr	r3, [r7, #4]
 8028688:	4a57      	ldr	r2, [pc, #348]	; (80287e8 <HAL_GPIO_DeInit+0x1ec>)
 802868a:	4293      	cmp	r3, r2
 802868c:	d007      	beq.n	802869e <HAL_GPIO_DeInit+0xa2>
 802868e:	687b      	ldr	r3, [r7, #4]
 8028690:	4a56      	ldr	r2, [pc, #344]	; (80287ec <HAL_GPIO_DeInit+0x1f0>)
 8028692:	4293      	cmp	r3, r2
 8028694:	d101      	bne.n	802869a <HAL_GPIO_DeInit+0x9e>
 8028696:	2307      	movs	r3, #7
 8028698:	e00e      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 802869a:	2308      	movs	r3, #8
 802869c:	e00c      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 802869e:	2306      	movs	r3, #6
 80286a0:	e00a      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286a2:	2305      	movs	r3, #5
 80286a4:	e008      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286a6:	2304      	movs	r3, #4
 80286a8:	e006      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286aa:	2303      	movs	r3, #3
 80286ac:	e004      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286ae:	2302      	movs	r3, #2
 80286b0:	e002      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286b2:	2301      	movs	r3, #1
 80286b4:	e000      	b.n	80286b8 <HAL_GPIO_DeInit+0xbc>
 80286b6:	2300      	movs	r3, #0
 80286b8:	697a      	ldr	r2, [r7, #20]
 80286ba:	f002 0203 	and.w	r2, r2, #3
 80286be:	0092      	lsls	r2, r2, #2
 80286c0:	4093      	lsls	r3, r2
 80286c2:	68ba      	ldr	r2, [r7, #8]
 80286c4:	429a      	cmp	r2, r3
 80286c6:	d132      	bne.n	802872e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80286c8:	4b49      	ldr	r3, [pc, #292]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286ca:	681a      	ldr	r2, [r3, #0]
 80286cc:	68fb      	ldr	r3, [r7, #12]
 80286ce:	43db      	mvns	r3, r3
 80286d0:	4947      	ldr	r1, [pc, #284]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286d2:	4013      	ands	r3, r2
 80286d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80286d6:	4b46      	ldr	r3, [pc, #280]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286d8:	685a      	ldr	r2, [r3, #4]
 80286da:	68fb      	ldr	r3, [r7, #12]
 80286dc:	43db      	mvns	r3, r3
 80286de:	4944      	ldr	r1, [pc, #272]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286e0:	4013      	ands	r3, r2
 80286e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80286e4:	4b42      	ldr	r3, [pc, #264]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286e6:	68da      	ldr	r2, [r3, #12]
 80286e8:	68fb      	ldr	r3, [r7, #12]
 80286ea:	43db      	mvns	r3, r3
 80286ec:	4940      	ldr	r1, [pc, #256]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286ee:	4013      	ands	r3, r2
 80286f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80286f2:	4b3f      	ldr	r3, [pc, #252]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286f4:	689a      	ldr	r2, [r3, #8]
 80286f6:	68fb      	ldr	r3, [r7, #12]
 80286f8:	43db      	mvns	r3, r3
 80286fa:	493d      	ldr	r1, [pc, #244]	; (80287f0 <HAL_GPIO_DeInit+0x1f4>)
 80286fc:	4013      	ands	r3, r2
 80286fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8028700:	697b      	ldr	r3, [r7, #20]
 8028702:	f003 0303 	and.w	r3, r3, #3
 8028706:	009b      	lsls	r3, r3, #2
 8028708:	220f      	movs	r2, #15
 802870a:	fa02 f303 	lsl.w	r3, r2, r3
 802870e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8028710:	4a2e      	ldr	r2, [pc, #184]	; (80287cc <HAL_GPIO_DeInit+0x1d0>)
 8028712:	697b      	ldr	r3, [r7, #20]
 8028714:	089b      	lsrs	r3, r3, #2
 8028716:	3302      	adds	r3, #2
 8028718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 802871c:	68bb      	ldr	r3, [r7, #8]
 802871e:	43da      	mvns	r2, r3
 8028720:	482a      	ldr	r0, [pc, #168]	; (80287cc <HAL_GPIO_DeInit+0x1d0>)
 8028722:	697b      	ldr	r3, [r7, #20]
 8028724:	089b      	lsrs	r3, r3, #2
 8028726:	400a      	ands	r2, r1
 8028728:	3302      	adds	r3, #2
 802872a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802872e:	687b      	ldr	r3, [r7, #4]
 8028730:	681a      	ldr	r2, [r3, #0]
 8028732:	697b      	ldr	r3, [r7, #20]
 8028734:	005b      	lsls	r3, r3, #1
 8028736:	2103      	movs	r1, #3
 8028738:	fa01 f303 	lsl.w	r3, r1, r3
 802873c:	43db      	mvns	r3, r3
 802873e:	401a      	ands	r2, r3
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028744:	697b      	ldr	r3, [r7, #20]
 8028746:	08da      	lsrs	r2, r3, #3
 8028748:	687b      	ldr	r3, [r7, #4]
 802874a:	3208      	adds	r2, #8
 802874c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028750:	697b      	ldr	r3, [r7, #20]
 8028752:	f003 0307 	and.w	r3, r3, #7
 8028756:	009b      	lsls	r3, r3, #2
 8028758:	220f      	movs	r2, #15
 802875a:	fa02 f303 	lsl.w	r3, r2, r3
 802875e:	43db      	mvns	r3, r3
 8028760:	697a      	ldr	r2, [r7, #20]
 8028762:	08d2      	lsrs	r2, r2, #3
 8028764:	4019      	ands	r1, r3
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	3208      	adds	r2, #8
 802876a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802876e:	687b      	ldr	r3, [r7, #4]
 8028770:	68da      	ldr	r2, [r3, #12]
 8028772:	697b      	ldr	r3, [r7, #20]
 8028774:	005b      	lsls	r3, r3, #1
 8028776:	2103      	movs	r1, #3
 8028778:	fa01 f303 	lsl.w	r3, r1, r3
 802877c:	43db      	mvns	r3, r3
 802877e:	401a      	ands	r2, r3
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028784:	687b      	ldr	r3, [r7, #4]
 8028786:	685a      	ldr	r2, [r3, #4]
 8028788:	2101      	movs	r1, #1
 802878a:	697b      	ldr	r3, [r7, #20]
 802878c:	fa01 f303 	lsl.w	r3, r1, r3
 8028790:	43db      	mvns	r3, r3
 8028792:	401a      	ands	r2, r3
 8028794:	687b      	ldr	r3, [r7, #4]
 8028796:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028798:	687b      	ldr	r3, [r7, #4]
 802879a:	689a      	ldr	r2, [r3, #8]
 802879c:	697b      	ldr	r3, [r7, #20]
 802879e:	005b      	lsls	r3, r3, #1
 80287a0:	2103      	movs	r1, #3
 80287a2:	fa01 f303 	lsl.w	r3, r1, r3
 80287a6:	43db      	mvns	r3, r3
 80287a8:	401a      	ands	r2, r3
 80287aa:	687b      	ldr	r3, [r7, #4]
 80287ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80287ae:	697b      	ldr	r3, [r7, #20]
 80287b0:	3301      	adds	r3, #1
 80287b2:	617b      	str	r3, [r7, #20]
 80287b4:	697b      	ldr	r3, [r7, #20]
 80287b6:	2b0f      	cmp	r3, #15
 80287b8:	f67f af2e 	bls.w	8028618 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80287bc:	bf00      	nop
 80287be:	bf00      	nop
 80287c0:	371c      	adds	r7, #28
 80287c2:	46bd      	mov	sp, r7
 80287c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c8:	4770      	bx	lr
 80287ca:	bf00      	nop
 80287cc:	40013800 	.word	0x40013800
 80287d0:	40020000 	.word	0x40020000
 80287d4:	40020400 	.word	0x40020400
 80287d8:	40020800 	.word	0x40020800
 80287dc:	40020c00 	.word	0x40020c00
 80287e0:	40021000 	.word	0x40021000
 80287e4:	40021400 	.word	0x40021400
 80287e8:	40021800 	.word	0x40021800
 80287ec:	40021c00 	.word	0x40021c00
 80287f0:	40013c00 	.word	0x40013c00

080287f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80287f4:	b480      	push	{r7}
 80287f6:	b083      	sub	sp, #12
 80287f8:	af00      	add	r7, sp, #0
 80287fa:	6078      	str	r0, [r7, #4]
 80287fc:	460b      	mov	r3, r1
 80287fe:	807b      	strh	r3, [r7, #2]
 8028800:	4613      	mov	r3, r2
 8028802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8028804:	787b      	ldrb	r3, [r7, #1]
 8028806:	2b00      	cmp	r3, #0
 8028808:	d003      	beq.n	8028812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802880a:	887a      	ldrh	r2, [r7, #2]
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8028810:	e003      	b.n	802881a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8028812:	887b      	ldrh	r3, [r7, #2]
 8028814:	041a      	lsls	r2, r3, #16
 8028816:	687b      	ldr	r3, [r7, #4]
 8028818:	619a      	str	r2, [r3, #24]
}
 802881a:	bf00      	nop
 802881c:	370c      	adds	r7, #12
 802881e:	46bd      	mov	sp, r7
 8028820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028824:	4770      	bx	lr

08028826 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8028826:	b580      	push	{r7, lr}
 8028828:	b084      	sub	sp, #16
 802882a:	af00      	add	r7, sp, #0
 802882c:	60f8      	str	r0, [r7, #12]
 802882e:	60b9      	str	r1, [r7, #8]
 8028830:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8028832:	68fb      	ldr	r3, [r7, #12]
 8028834:	2b00      	cmp	r3, #0
 8028836:	d101      	bne.n	802883c <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8028838:	2301      	movs	r3, #1
 802883a:	e03e      	b.n	80288ba <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 802883c:	68fb      	ldr	r3, [r7, #12]
 802883e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8028842:	b2db      	uxtb	r3, r3
 8028844:	2b00      	cmp	r3, #0
 8028846:	d106      	bne.n	8028856 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8028848:	68fb      	ldr	r3, [r7, #12]
 802884a:	2200      	movs	r2, #0
 802884c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8028850:	68f8      	ldr	r0, [r7, #12]
 8028852:	f7fa f971 	bl	8022b38 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8028856:	68fb      	ldr	r3, [r7, #12]
 8028858:	681a      	ldr	r2, [r3, #0]
 802885a:	68fb      	ldr	r3, [r7, #12]
 802885c:	3304      	adds	r3, #4
 802885e:	4619      	mov	r1, r3
 8028860:	4610      	mov	r0, r2
 8028862:	f004 fa17 	bl	802cc94 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8028866:	68fb      	ldr	r3, [r7, #12]
 8028868:	6818      	ldr	r0, [r3, #0]
 802886a:	68fb      	ldr	r3, [r7, #12]
 802886c:	685b      	ldr	r3, [r3, #4]
 802886e:	461a      	mov	r2, r3
 8028870:	68b9      	ldr	r1, [r7, #8]
 8028872:	f004 fa5b 	bl	802cd2c <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8028876:	68fb      	ldr	r3, [r7, #12]
 8028878:	6818      	ldr	r0, [r3, #0]
 802887a:	68fb      	ldr	r3, [r7, #12]
 802887c:	685b      	ldr	r3, [r3, #4]
 802887e:	461a      	mov	r2, r3
 8028880:	6879      	ldr	r1, [r7, #4]
 8028882:	f004 fa88 	bl	802cd96 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8028886:	68fb      	ldr	r3, [r7, #12]
 8028888:	685b      	ldr	r3, [r3, #4]
 802888a:	2b10      	cmp	r3, #16
 802888c:	d108      	bne.n	80288a0 <HAL_NAND_Init+0x7a>
 802888e:	68fb      	ldr	r3, [r7, #12]
 8028890:	681b      	ldr	r3, [r3, #0]
 8028892:	681a      	ldr	r2, [r3, #0]
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	681b      	ldr	r3, [r3, #0]
 8028898:	f042 0204 	orr.w	r2, r2, #4
 802889c:	601a      	str	r2, [r3, #0]
 802889e:	e007      	b.n	80288b0 <HAL_NAND_Init+0x8a>
 80288a0:	68fb      	ldr	r3, [r7, #12]
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	6a1a      	ldr	r2, [r3, #32]
 80288a6:	68fb      	ldr	r3, [r7, #12]
 80288a8:	681b      	ldr	r3, [r3, #0]
 80288aa:	f042 0204 	orr.w	r2, r2, #4
 80288ae:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80288b0:	68fb      	ldr	r3, [r7, #12]
 80288b2:	2201      	movs	r2, #1
 80288b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80288b8:	2300      	movs	r3, #0
}
 80288ba:	4618      	mov	r0, r3
 80288bc:	3710      	adds	r7, #16
 80288be:	46bd      	mov	sp, r7
 80288c0:	bd80      	pop	{r7, pc}

080288c2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80288c2:	b580      	push	{r7, lr}
 80288c4:	b082      	sub	sp, #8
 80288c6:	af00      	add	r7, sp, #0
 80288c8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80288ca:	687b      	ldr	r3, [r7, #4]
 80288cc:	685b      	ldr	r3, [r3, #4]
 80288ce:	2b10      	cmp	r3, #16
 80288d0:	d10a      	bne.n	80288e8 <HAL_NAND_IRQHandler+0x26>
 80288d2:	687b      	ldr	r3, [r7, #4]
 80288d4:	681b      	ldr	r3, [r3, #0]
 80288d6:	685b      	ldr	r3, [r3, #4]
 80288d8:	f003 0301 	and.w	r3, r3, #1
 80288dc:	2b01      	cmp	r3, #1
 80288de:	bf0c      	ite	eq
 80288e0:	2301      	moveq	r3, #1
 80288e2:	2300      	movne	r3, #0
 80288e4:	b2db      	uxtb	r3, r3
 80288e6:	e009      	b.n	80288fc <HAL_NAND_IRQHandler+0x3a>
 80288e8:	687b      	ldr	r3, [r7, #4]
 80288ea:	681b      	ldr	r3, [r3, #0]
 80288ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80288ee:	f003 0301 	and.w	r3, r3, #1
 80288f2:	2b01      	cmp	r3, #1
 80288f4:	bf0c      	ite	eq
 80288f6:	2301      	moveq	r3, #1
 80288f8:	2300      	movne	r3, #0
 80288fa:	b2db      	uxtb	r3, r3
 80288fc:	2b00      	cmp	r3, #0
 80288fe:	d017      	beq.n	8028930 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028900:	6878      	ldr	r0, [r7, #4]
 8028902:	f000 f8b2 	bl	8028a6a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8028906:	687b      	ldr	r3, [r7, #4]
 8028908:	685b      	ldr	r3, [r3, #4]
 802890a:	2b10      	cmp	r3, #16
 802890c:	d108      	bne.n	8028920 <HAL_NAND_IRQHandler+0x5e>
 802890e:	687b      	ldr	r3, [r7, #4]
 8028910:	681b      	ldr	r3, [r3, #0]
 8028912:	685a      	ldr	r2, [r3, #4]
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	681b      	ldr	r3, [r3, #0]
 8028918:	f022 0201 	bic.w	r2, r2, #1
 802891c:	605a      	str	r2, [r3, #4]
 802891e:	e007      	b.n	8028930 <HAL_NAND_IRQHandler+0x6e>
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	681b      	ldr	r3, [r3, #0]
 8028924:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028926:	687b      	ldr	r3, [r7, #4]
 8028928:	681b      	ldr	r3, [r3, #0]
 802892a:	f022 0201 	bic.w	r2, r2, #1
 802892e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	685b      	ldr	r3, [r3, #4]
 8028934:	2b10      	cmp	r3, #16
 8028936:	d10a      	bne.n	802894e <HAL_NAND_IRQHandler+0x8c>
 8028938:	687b      	ldr	r3, [r7, #4]
 802893a:	681b      	ldr	r3, [r3, #0]
 802893c:	685b      	ldr	r3, [r3, #4]
 802893e:	f003 0302 	and.w	r3, r3, #2
 8028942:	2b02      	cmp	r3, #2
 8028944:	bf0c      	ite	eq
 8028946:	2301      	moveq	r3, #1
 8028948:	2300      	movne	r3, #0
 802894a:	b2db      	uxtb	r3, r3
 802894c:	e009      	b.n	8028962 <HAL_NAND_IRQHandler+0xa0>
 802894e:	687b      	ldr	r3, [r7, #4]
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028954:	f003 0302 	and.w	r3, r3, #2
 8028958:	2b02      	cmp	r3, #2
 802895a:	bf0c      	ite	eq
 802895c:	2301      	moveq	r3, #1
 802895e:	2300      	movne	r3, #0
 8028960:	b2db      	uxtb	r3, r3
 8028962:	2b00      	cmp	r3, #0
 8028964:	d017      	beq.n	8028996 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028966:	6878      	ldr	r0, [r7, #4]
 8028968:	f000 f87f 	bl	8028a6a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 802896c:	687b      	ldr	r3, [r7, #4]
 802896e:	685b      	ldr	r3, [r3, #4]
 8028970:	2b10      	cmp	r3, #16
 8028972:	d108      	bne.n	8028986 <HAL_NAND_IRQHandler+0xc4>
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	681b      	ldr	r3, [r3, #0]
 8028978:	685a      	ldr	r2, [r3, #4]
 802897a:	687b      	ldr	r3, [r7, #4]
 802897c:	681b      	ldr	r3, [r3, #0]
 802897e:	f022 0202 	bic.w	r2, r2, #2
 8028982:	605a      	str	r2, [r3, #4]
 8028984:	e007      	b.n	8028996 <HAL_NAND_IRQHandler+0xd4>
 8028986:	687b      	ldr	r3, [r7, #4]
 8028988:	681b      	ldr	r3, [r3, #0]
 802898a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	f022 0202 	bic.w	r2, r2, #2
 8028994:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	685b      	ldr	r3, [r3, #4]
 802899a:	2b10      	cmp	r3, #16
 802899c:	d10a      	bne.n	80289b4 <HAL_NAND_IRQHandler+0xf2>
 802899e:	687b      	ldr	r3, [r7, #4]
 80289a0:	681b      	ldr	r3, [r3, #0]
 80289a2:	685b      	ldr	r3, [r3, #4]
 80289a4:	f003 0304 	and.w	r3, r3, #4
 80289a8:	2b04      	cmp	r3, #4
 80289aa:	bf0c      	ite	eq
 80289ac:	2301      	moveq	r3, #1
 80289ae:	2300      	movne	r3, #0
 80289b0:	b2db      	uxtb	r3, r3
 80289b2:	e009      	b.n	80289c8 <HAL_NAND_IRQHandler+0x106>
 80289b4:	687b      	ldr	r3, [r7, #4]
 80289b6:	681b      	ldr	r3, [r3, #0]
 80289b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80289ba:	f003 0304 	and.w	r3, r3, #4
 80289be:	2b04      	cmp	r3, #4
 80289c0:	bf0c      	ite	eq
 80289c2:	2301      	moveq	r3, #1
 80289c4:	2300      	movne	r3, #0
 80289c6:	b2db      	uxtb	r3, r3
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d017      	beq.n	80289fc <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80289cc:	6878      	ldr	r0, [r7, #4]
 80289ce:	f000 f84c 	bl	8028a6a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80289d2:	687b      	ldr	r3, [r7, #4]
 80289d4:	685b      	ldr	r3, [r3, #4]
 80289d6:	2b10      	cmp	r3, #16
 80289d8:	d108      	bne.n	80289ec <HAL_NAND_IRQHandler+0x12a>
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	681b      	ldr	r3, [r3, #0]
 80289de:	685a      	ldr	r2, [r3, #4]
 80289e0:	687b      	ldr	r3, [r7, #4]
 80289e2:	681b      	ldr	r3, [r3, #0]
 80289e4:	f022 0204 	bic.w	r2, r2, #4
 80289e8:	605a      	str	r2, [r3, #4]
 80289ea:	e007      	b.n	80289fc <HAL_NAND_IRQHandler+0x13a>
 80289ec:	687b      	ldr	r3, [r7, #4]
 80289ee:	681b      	ldr	r3, [r3, #0]
 80289f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80289f2:	687b      	ldr	r3, [r7, #4]
 80289f4:	681b      	ldr	r3, [r3, #0]
 80289f6:	f022 0204 	bic.w	r2, r2, #4
 80289fa:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 80289fc:	687b      	ldr	r3, [r7, #4]
 80289fe:	685b      	ldr	r3, [r3, #4]
 8028a00:	2b10      	cmp	r3, #16
 8028a02:	d10a      	bne.n	8028a1a <HAL_NAND_IRQHandler+0x158>
 8028a04:	687b      	ldr	r3, [r7, #4]
 8028a06:	681b      	ldr	r3, [r3, #0]
 8028a08:	685b      	ldr	r3, [r3, #4]
 8028a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a0e:	2b40      	cmp	r3, #64	; 0x40
 8028a10:	bf0c      	ite	eq
 8028a12:	2301      	moveq	r3, #1
 8028a14:	2300      	movne	r3, #0
 8028a16:	b2db      	uxtb	r3, r3
 8028a18:	e009      	b.n	8028a2e <HAL_NAND_IRQHandler+0x16c>
 8028a1a:	687b      	ldr	r3, [r7, #4]
 8028a1c:	681b      	ldr	r3, [r3, #0]
 8028a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a24:	2b40      	cmp	r3, #64	; 0x40
 8028a26:	bf0c      	ite	eq
 8028a28:	2301      	moveq	r3, #1
 8028a2a:	2300      	movne	r3, #0
 8028a2c:	b2db      	uxtb	r3, r3
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	d017      	beq.n	8028a62 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8028a32:	6878      	ldr	r0, [r7, #4]
 8028a34:	f000 f819 	bl	8028a6a <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028a38:	687b      	ldr	r3, [r7, #4]
 8028a3a:	685b      	ldr	r3, [r3, #4]
 8028a3c:	2b10      	cmp	r3, #16
 8028a3e:	d108      	bne.n	8028a52 <HAL_NAND_IRQHandler+0x190>
 8028a40:	687b      	ldr	r3, [r7, #4]
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	685a      	ldr	r2, [r3, #4]
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	681b      	ldr	r3, [r3, #0]
 8028a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028a4e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8028a50:	e007      	b.n	8028a62 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	681b      	ldr	r3, [r3, #0]
 8028a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028a58:	687b      	ldr	r3, [r7, #4]
 8028a5a:	681b      	ldr	r3, [r3, #0]
 8028a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028a60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8028a62:	bf00      	nop
 8028a64:	3708      	adds	r7, #8
 8028a66:	46bd      	mov	sp, r7
 8028a68:	bd80      	pop	{r7, pc}

08028a6a <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8028a6a:	b480      	push	{r7}
 8028a6c:	b083      	sub	sp, #12
 8028a6e:	af00      	add	r7, sp, #0
 8028a70:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8028a72:	bf00      	nop
 8028a74:	370c      	adds	r7, #12
 8028a76:	46bd      	mov	sp, r7
 8028a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a7c:	4770      	bx	lr

08028a7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8028a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a80:	b08f      	sub	sp, #60	; 0x3c
 8028a82:	af0a      	add	r7, sp, #40	; 0x28
 8028a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	2b00      	cmp	r3, #0
 8028a8a:	d101      	bne.n	8028a90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8028a8c:	2301      	movs	r3, #1
 8028a8e:	e10f      	b.n	8028cb0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8028a90:	687b      	ldr	r3, [r7, #4]
 8028a92:	681b      	ldr	r3, [r3, #0]
 8028a94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8028a96:	687b      	ldr	r3, [r7, #4]
 8028a98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8028a9c:	b2db      	uxtb	r3, r3
 8028a9e:	2b00      	cmp	r3, #0
 8028aa0:	d106      	bne.n	8028ab0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8028aa2:	687b      	ldr	r3, [r7, #4]
 8028aa4:	2200      	movs	r2, #0
 8028aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8028aaa:	6878      	ldr	r0, [r7, #4]
 8028aac:	f008 f944 	bl	8030d38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8028ab0:	687b      	ldr	r3, [r7, #4]
 8028ab2:	2203      	movs	r2, #3
 8028ab4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8028ab8:	68bb      	ldr	r3, [r7, #8]
 8028aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d102      	bne.n	8028aca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8028ac4:	687b      	ldr	r3, [r7, #4]
 8028ac6:	2200      	movs	r2, #0
 8028ac8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8028aca:	687b      	ldr	r3, [r7, #4]
 8028acc:	681b      	ldr	r3, [r3, #0]
 8028ace:	4618      	mov	r0, r3
 8028ad0:	f004 faab 	bl	802d02a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	681b      	ldr	r3, [r3, #0]
 8028ad8:	603b      	str	r3, [r7, #0]
 8028ada:	687e      	ldr	r6, [r7, #4]
 8028adc:	466d      	mov	r5, sp
 8028ade:	f106 0410 	add.w	r4, r6, #16
 8028ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028aea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028aee:	e885 0003 	stmia.w	r5, {r0, r1}
 8028af2:	1d33      	adds	r3, r6, #4
 8028af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028af6:	6838      	ldr	r0, [r7, #0]
 8028af8:	f004 f982 	bl	802ce00 <USB_CoreInit>
 8028afc:	4603      	mov	r3, r0
 8028afe:	2b00      	cmp	r3, #0
 8028b00:	d005      	beq.n	8028b0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028b02:	687b      	ldr	r3, [r7, #4]
 8028b04:	2202      	movs	r2, #2
 8028b06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028b0a:	2301      	movs	r3, #1
 8028b0c:	e0d0      	b.n	8028cb0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8028b0e:	687b      	ldr	r3, [r7, #4]
 8028b10:	681b      	ldr	r3, [r3, #0]
 8028b12:	2100      	movs	r1, #0
 8028b14:	4618      	mov	r0, r3
 8028b16:	f004 fa99 	bl	802d04c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028b1a:	2300      	movs	r3, #0
 8028b1c:	73fb      	strb	r3, [r7, #15]
 8028b1e:	e04a      	b.n	8028bb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8028b20:	7bfa      	ldrb	r2, [r7, #15]
 8028b22:	6879      	ldr	r1, [r7, #4]
 8028b24:	4613      	mov	r3, r2
 8028b26:	00db      	lsls	r3, r3, #3
 8028b28:	4413      	add	r3, r2
 8028b2a:	009b      	lsls	r3, r3, #2
 8028b2c:	440b      	add	r3, r1
 8028b2e:	333d      	adds	r3, #61	; 0x3d
 8028b30:	2201      	movs	r2, #1
 8028b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8028b34:	7bfa      	ldrb	r2, [r7, #15]
 8028b36:	6879      	ldr	r1, [r7, #4]
 8028b38:	4613      	mov	r3, r2
 8028b3a:	00db      	lsls	r3, r3, #3
 8028b3c:	4413      	add	r3, r2
 8028b3e:	009b      	lsls	r3, r3, #2
 8028b40:	440b      	add	r3, r1
 8028b42:	333c      	adds	r3, #60	; 0x3c
 8028b44:	7bfa      	ldrb	r2, [r7, #15]
 8028b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8028b48:	7bfa      	ldrb	r2, [r7, #15]
 8028b4a:	7bfb      	ldrb	r3, [r7, #15]
 8028b4c:	b298      	uxth	r0, r3
 8028b4e:	6879      	ldr	r1, [r7, #4]
 8028b50:	4613      	mov	r3, r2
 8028b52:	00db      	lsls	r3, r3, #3
 8028b54:	4413      	add	r3, r2
 8028b56:	009b      	lsls	r3, r3, #2
 8028b58:	440b      	add	r3, r1
 8028b5a:	3344      	adds	r3, #68	; 0x44
 8028b5c:	4602      	mov	r2, r0
 8028b5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8028b60:	7bfa      	ldrb	r2, [r7, #15]
 8028b62:	6879      	ldr	r1, [r7, #4]
 8028b64:	4613      	mov	r3, r2
 8028b66:	00db      	lsls	r3, r3, #3
 8028b68:	4413      	add	r3, r2
 8028b6a:	009b      	lsls	r3, r3, #2
 8028b6c:	440b      	add	r3, r1
 8028b6e:	3340      	adds	r3, #64	; 0x40
 8028b70:	2200      	movs	r2, #0
 8028b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8028b74:	7bfa      	ldrb	r2, [r7, #15]
 8028b76:	6879      	ldr	r1, [r7, #4]
 8028b78:	4613      	mov	r3, r2
 8028b7a:	00db      	lsls	r3, r3, #3
 8028b7c:	4413      	add	r3, r2
 8028b7e:	009b      	lsls	r3, r3, #2
 8028b80:	440b      	add	r3, r1
 8028b82:	3348      	adds	r3, #72	; 0x48
 8028b84:	2200      	movs	r2, #0
 8028b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8028b88:	7bfa      	ldrb	r2, [r7, #15]
 8028b8a:	6879      	ldr	r1, [r7, #4]
 8028b8c:	4613      	mov	r3, r2
 8028b8e:	00db      	lsls	r3, r3, #3
 8028b90:	4413      	add	r3, r2
 8028b92:	009b      	lsls	r3, r3, #2
 8028b94:	440b      	add	r3, r1
 8028b96:	334c      	adds	r3, #76	; 0x4c
 8028b98:	2200      	movs	r2, #0
 8028b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8028b9c:	7bfa      	ldrb	r2, [r7, #15]
 8028b9e:	6879      	ldr	r1, [r7, #4]
 8028ba0:	4613      	mov	r3, r2
 8028ba2:	00db      	lsls	r3, r3, #3
 8028ba4:	4413      	add	r3, r2
 8028ba6:	009b      	lsls	r3, r3, #2
 8028ba8:	440b      	add	r3, r1
 8028baa:	3354      	adds	r3, #84	; 0x54
 8028bac:	2200      	movs	r2, #0
 8028bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028bb0:	7bfb      	ldrb	r3, [r7, #15]
 8028bb2:	3301      	adds	r3, #1
 8028bb4:	73fb      	strb	r3, [r7, #15]
 8028bb6:	7bfa      	ldrb	r2, [r7, #15]
 8028bb8:	687b      	ldr	r3, [r7, #4]
 8028bba:	685b      	ldr	r3, [r3, #4]
 8028bbc:	429a      	cmp	r2, r3
 8028bbe:	d3af      	bcc.n	8028b20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028bc0:	2300      	movs	r3, #0
 8028bc2:	73fb      	strb	r3, [r7, #15]
 8028bc4:	e044      	b.n	8028c50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8028bc6:	7bfa      	ldrb	r2, [r7, #15]
 8028bc8:	6879      	ldr	r1, [r7, #4]
 8028bca:	4613      	mov	r3, r2
 8028bcc:	00db      	lsls	r3, r3, #3
 8028bce:	4413      	add	r3, r2
 8028bd0:	009b      	lsls	r3, r3, #2
 8028bd2:	440b      	add	r3, r1
 8028bd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8028bd8:	2200      	movs	r2, #0
 8028bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8028bdc:	7bfa      	ldrb	r2, [r7, #15]
 8028bde:	6879      	ldr	r1, [r7, #4]
 8028be0:	4613      	mov	r3, r2
 8028be2:	00db      	lsls	r3, r3, #3
 8028be4:	4413      	add	r3, r2
 8028be6:	009b      	lsls	r3, r3, #2
 8028be8:	440b      	add	r3, r1
 8028bea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8028bee:	7bfa      	ldrb	r2, [r7, #15]
 8028bf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8028bf2:	7bfa      	ldrb	r2, [r7, #15]
 8028bf4:	6879      	ldr	r1, [r7, #4]
 8028bf6:	4613      	mov	r3, r2
 8028bf8:	00db      	lsls	r3, r3, #3
 8028bfa:	4413      	add	r3, r2
 8028bfc:	009b      	lsls	r3, r3, #2
 8028bfe:	440b      	add	r3, r1
 8028c00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8028c04:	2200      	movs	r2, #0
 8028c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8028c08:	7bfa      	ldrb	r2, [r7, #15]
 8028c0a:	6879      	ldr	r1, [r7, #4]
 8028c0c:	4613      	mov	r3, r2
 8028c0e:	00db      	lsls	r3, r3, #3
 8028c10:	4413      	add	r3, r2
 8028c12:	009b      	lsls	r3, r3, #2
 8028c14:	440b      	add	r3, r1
 8028c16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8028c1a:	2200      	movs	r2, #0
 8028c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8028c1e:	7bfa      	ldrb	r2, [r7, #15]
 8028c20:	6879      	ldr	r1, [r7, #4]
 8028c22:	4613      	mov	r3, r2
 8028c24:	00db      	lsls	r3, r3, #3
 8028c26:	4413      	add	r3, r2
 8028c28:	009b      	lsls	r3, r3, #2
 8028c2a:	440b      	add	r3, r1
 8028c2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8028c30:	2200      	movs	r2, #0
 8028c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8028c34:	7bfa      	ldrb	r2, [r7, #15]
 8028c36:	6879      	ldr	r1, [r7, #4]
 8028c38:	4613      	mov	r3, r2
 8028c3a:	00db      	lsls	r3, r3, #3
 8028c3c:	4413      	add	r3, r2
 8028c3e:	009b      	lsls	r3, r3, #2
 8028c40:	440b      	add	r3, r1
 8028c42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8028c46:	2200      	movs	r2, #0
 8028c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8028c4a:	7bfb      	ldrb	r3, [r7, #15]
 8028c4c:	3301      	adds	r3, #1
 8028c4e:	73fb      	strb	r3, [r7, #15]
 8028c50:	7bfa      	ldrb	r2, [r7, #15]
 8028c52:	687b      	ldr	r3, [r7, #4]
 8028c54:	685b      	ldr	r3, [r3, #4]
 8028c56:	429a      	cmp	r2, r3
 8028c58:	d3b5      	bcc.n	8028bc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8028c5a:	687b      	ldr	r3, [r7, #4]
 8028c5c:	681b      	ldr	r3, [r3, #0]
 8028c5e:	603b      	str	r3, [r7, #0]
 8028c60:	687e      	ldr	r6, [r7, #4]
 8028c62:	466d      	mov	r5, sp
 8028c64:	f106 0410 	add.w	r4, r6, #16
 8028c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8028c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8028c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8028c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8028c78:	1d33      	adds	r3, r6, #4
 8028c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8028c7c:	6838      	ldr	r0, [r7, #0]
 8028c7e:	f004 fa31 	bl	802d0e4 <USB_DevInit>
 8028c82:	4603      	mov	r3, r0
 8028c84:	2b00      	cmp	r3, #0
 8028c86:	d005      	beq.n	8028c94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8028c88:	687b      	ldr	r3, [r7, #4]
 8028c8a:	2202      	movs	r2, #2
 8028c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8028c90:	2301      	movs	r3, #1
 8028c92:	e00d      	b.n	8028cb0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8028c94:	687b      	ldr	r3, [r7, #4]
 8028c96:	2200      	movs	r2, #0
 8028c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8028c9c:	687b      	ldr	r3, [r7, #4]
 8028c9e:	2201      	movs	r2, #1
 8028ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	4618      	mov	r0, r3
 8028caa:	f005 fb80 	bl	802e3ae <USB_DevDisconnect>

  return HAL_OK;
 8028cae:	2300      	movs	r3, #0
}
 8028cb0:	4618      	mov	r0, r3
 8028cb2:	3714      	adds	r7, #20
 8028cb4:	46bd      	mov	sp, r7
 8028cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028cb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8028cb8:	b580      	push	{r7, lr}
 8028cba:	b084      	sub	sp, #16
 8028cbc:	af00      	add	r7, sp, #0
 8028cbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028cc0:	687b      	ldr	r3, [r7, #4]
 8028cc2:	681b      	ldr	r3, [r3, #0]
 8028cc4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8028cc6:	687b      	ldr	r3, [r7, #4]
 8028cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8028ccc:	2b01      	cmp	r3, #1
 8028cce:	d101      	bne.n	8028cd4 <HAL_PCD_Start+0x1c>
 8028cd0:	2302      	movs	r3, #2
 8028cd2:	e020      	b.n	8028d16 <HAL_PCD_Start+0x5e>
 8028cd4:	687b      	ldr	r3, [r7, #4]
 8028cd6:	2201      	movs	r2, #1
 8028cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028cdc:	687b      	ldr	r3, [r7, #4]
 8028cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ce0:	2b01      	cmp	r3, #1
 8028ce2:	d109      	bne.n	8028cf8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8028ce4:	687b      	ldr	r3, [r7, #4]
 8028ce6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8028ce8:	2b01      	cmp	r3, #1
 8028cea:	d005      	beq.n	8028cf8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028cf0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028cf4:	68fb      	ldr	r3, [r7, #12]
 8028cf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8028cf8:	687b      	ldr	r3, [r7, #4]
 8028cfa:	681b      	ldr	r3, [r3, #0]
 8028cfc:	4618      	mov	r0, r3
 8028cfe:	f004 f983 	bl	802d008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8028d02:	687b      	ldr	r3, [r7, #4]
 8028d04:	681b      	ldr	r3, [r3, #0]
 8028d06:	4618      	mov	r0, r3
 8028d08:	f005 fb30 	bl	802e36c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8028d0c:	687b      	ldr	r3, [r7, #4]
 8028d0e:	2200      	movs	r2, #0
 8028d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8028d14:	2300      	movs	r3, #0
}
 8028d16:	4618      	mov	r0, r3
 8028d18:	3710      	adds	r7, #16
 8028d1a:	46bd      	mov	sp, r7
 8028d1c:	bd80      	pop	{r7, pc}

08028d1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8028d1e:	b590      	push	{r4, r7, lr}
 8028d20:	b08d      	sub	sp, #52	; 0x34
 8028d22:	af00      	add	r7, sp, #0
 8028d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8028d26:	687b      	ldr	r3, [r7, #4]
 8028d28:	681b      	ldr	r3, [r3, #0]
 8028d2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8028d2c:	6a3b      	ldr	r3, [r7, #32]
 8028d2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8028d30:	687b      	ldr	r3, [r7, #4]
 8028d32:	681b      	ldr	r3, [r3, #0]
 8028d34:	4618      	mov	r0, r3
 8028d36:	f005 fbee 	bl	802e516 <USB_GetMode>
 8028d3a:	4603      	mov	r3, r0
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	f040 848a 	bne.w	8029656 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8028d42:	687b      	ldr	r3, [r7, #4]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	4618      	mov	r0, r3
 8028d48:	f005 fb52 	bl	802e3f0 <USB_ReadInterrupts>
 8028d4c:	4603      	mov	r3, r0
 8028d4e:	2b00      	cmp	r3, #0
 8028d50:	f000 8480 	beq.w	8029654 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8028d54:	69fb      	ldr	r3, [r7, #28]
 8028d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028d5a:	689b      	ldr	r3, [r3, #8]
 8028d5c:	0a1b      	lsrs	r3, r3, #8
 8028d5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8028d68:	687b      	ldr	r3, [r7, #4]
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	4618      	mov	r0, r3
 8028d6e:	f005 fb3f 	bl	802e3f0 <USB_ReadInterrupts>
 8028d72:	4603      	mov	r3, r0
 8028d74:	f003 0302 	and.w	r3, r3, #2
 8028d78:	2b02      	cmp	r3, #2
 8028d7a:	d107      	bne.n	8028d8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8028d7c:	687b      	ldr	r3, [r7, #4]
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	695a      	ldr	r2, [r3, #20]
 8028d82:	687b      	ldr	r3, [r7, #4]
 8028d84:	681b      	ldr	r3, [r3, #0]
 8028d86:	f002 0202 	and.w	r2, r2, #2
 8028d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8028d8c:	687b      	ldr	r3, [r7, #4]
 8028d8e:	681b      	ldr	r3, [r3, #0]
 8028d90:	4618      	mov	r0, r3
 8028d92:	f005 fb2d 	bl	802e3f0 <USB_ReadInterrupts>
 8028d96:	4603      	mov	r3, r0
 8028d98:	f003 0310 	and.w	r3, r3, #16
 8028d9c:	2b10      	cmp	r3, #16
 8028d9e:	d161      	bne.n	8028e64 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028da0:	687b      	ldr	r3, [r7, #4]
 8028da2:	681b      	ldr	r3, [r3, #0]
 8028da4:	699a      	ldr	r2, [r3, #24]
 8028da6:	687b      	ldr	r3, [r7, #4]
 8028da8:	681b      	ldr	r3, [r3, #0]
 8028daa:	f022 0210 	bic.w	r2, r2, #16
 8028dae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8028db0:	6a3b      	ldr	r3, [r7, #32]
 8028db2:	6a1b      	ldr	r3, [r3, #32]
 8028db4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8028db6:	69bb      	ldr	r3, [r7, #24]
 8028db8:	f003 020f 	and.w	r2, r3, #15
 8028dbc:	4613      	mov	r3, r2
 8028dbe:	00db      	lsls	r3, r3, #3
 8028dc0:	4413      	add	r3, r2
 8028dc2:	009b      	lsls	r3, r3, #2
 8028dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028dc8:	687a      	ldr	r2, [r7, #4]
 8028dca:	4413      	add	r3, r2
 8028dcc:	3304      	adds	r3, #4
 8028dce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8028dd0:	69bb      	ldr	r3, [r7, #24]
 8028dd2:	0c5b      	lsrs	r3, r3, #17
 8028dd4:	f003 030f 	and.w	r3, r3, #15
 8028dd8:	2b02      	cmp	r3, #2
 8028dda:	d124      	bne.n	8028e26 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8028ddc:	69ba      	ldr	r2, [r7, #24]
 8028dde:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8028de2:	4013      	ands	r3, r2
 8028de4:	2b00      	cmp	r3, #0
 8028de6:	d035      	beq.n	8028e54 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028de8:	697b      	ldr	r3, [r7, #20]
 8028dea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8028dec:	69bb      	ldr	r3, [r7, #24]
 8028dee:	091b      	lsrs	r3, r3, #4
 8028df0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8028df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028df6:	b29b      	uxth	r3, r3
 8028df8:	461a      	mov	r2, r3
 8028dfa:	6a38      	ldr	r0, [r7, #32]
 8028dfc:	f005 f964 	bl	802e0c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028e00:	697b      	ldr	r3, [r7, #20]
 8028e02:	691a      	ldr	r2, [r3, #16]
 8028e04:	69bb      	ldr	r3, [r7, #24]
 8028e06:	091b      	lsrs	r3, r3, #4
 8028e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028e0c:	441a      	add	r2, r3
 8028e0e:	697b      	ldr	r3, [r7, #20]
 8028e10:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028e12:	697b      	ldr	r3, [r7, #20]
 8028e14:	6a1a      	ldr	r2, [r3, #32]
 8028e16:	69bb      	ldr	r3, [r7, #24]
 8028e18:	091b      	lsrs	r3, r3, #4
 8028e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028e1e:	441a      	add	r2, r3
 8028e20:	697b      	ldr	r3, [r7, #20]
 8028e22:	621a      	str	r2, [r3, #32]
 8028e24:	e016      	b.n	8028e54 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8028e26:	69bb      	ldr	r3, [r7, #24]
 8028e28:	0c5b      	lsrs	r3, r3, #17
 8028e2a:	f003 030f 	and.w	r3, r3, #15
 8028e2e:	2b06      	cmp	r3, #6
 8028e30:	d110      	bne.n	8028e54 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8028e32:	687b      	ldr	r3, [r7, #4]
 8028e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8028e38:	2208      	movs	r2, #8
 8028e3a:	4619      	mov	r1, r3
 8028e3c:	6a38      	ldr	r0, [r7, #32]
 8028e3e:	f005 f943 	bl	802e0c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8028e42:	697b      	ldr	r3, [r7, #20]
 8028e44:	6a1a      	ldr	r2, [r3, #32]
 8028e46:	69bb      	ldr	r3, [r7, #24]
 8028e48:	091b      	lsrs	r3, r3, #4
 8028e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8028e4e:	441a      	add	r2, r3
 8028e50:	697b      	ldr	r3, [r7, #20]
 8028e52:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	699a      	ldr	r2, [r3, #24]
 8028e5a:	687b      	ldr	r3, [r7, #4]
 8028e5c:	681b      	ldr	r3, [r3, #0]
 8028e5e:	f042 0210 	orr.w	r2, r2, #16
 8028e62:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8028e64:	687b      	ldr	r3, [r7, #4]
 8028e66:	681b      	ldr	r3, [r3, #0]
 8028e68:	4618      	mov	r0, r3
 8028e6a:	f005 fac1 	bl	802e3f0 <USB_ReadInterrupts>
 8028e6e:	4603      	mov	r3, r0
 8028e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8028e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8028e78:	f040 80a7 	bne.w	8028fca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8028e7c:	2300      	movs	r3, #0
 8028e7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8028e80:	687b      	ldr	r3, [r7, #4]
 8028e82:	681b      	ldr	r3, [r3, #0]
 8028e84:	4618      	mov	r0, r3
 8028e86:	f005 fac6 	bl	802e416 <USB_ReadDevAllOutEpInterrupt>
 8028e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8028e8c:	e099      	b.n	8028fc2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8028e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e90:	f003 0301 	and.w	r3, r3, #1
 8028e94:	2b00      	cmp	r3, #0
 8028e96:	f000 808e 	beq.w	8028fb6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ea0:	b2d2      	uxtb	r2, r2
 8028ea2:	4611      	mov	r1, r2
 8028ea4:	4618      	mov	r0, r3
 8028ea6:	f005 faea 	bl	802e47e <USB_ReadDevOutEPInterrupt>
 8028eaa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8028eac:	693b      	ldr	r3, [r7, #16]
 8028eae:	f003 0301 	and.w	r3, r3, #1
 8028eb2:	2b00      	cmp	r3, #0
 8028eb4:	d00c      	beq.n	8028ed0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8028eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028eb8:	015a      	lsls	r2, r3, #5
 8028eba:	69fb      	ldr	r3, [r7, #28]
 8028ebc:	4413      	add	r3, r2
 8028ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028ec2:	461a      	mov	r2, r3
 8028ec4:	2301      	movs	r3, #1
 8028ec6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8028ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028eca:	6878      	ldr	r0, [r7, #4]
 8028ecc:	f000 fec2 	bl	8029c54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8028ed0:	693b      	ldr	r3, [r7, #16]
 8028ed2:	f003 0308 	and.w	r3, r3, #8
 8028ed6:	2b00      	cmp	r3, #0
 8028ed8:	d00c      	beq.n	8028ef4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8028eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028edc:	015a      	lsls	r2, r3, #5
 8028ede:	69fb      	ldr	r3, [r7, #28]
 8028ee0:	4413      	add	r3, r2
 8028ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028ee6:	461a      	mov	r2, r3
 8028ee8:	2308      	movs	r3, #8
 8028eea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8028eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028eee:	6878      	ldr	r0, [r7, #4]
 8028ef0:	f000 ff98 	bl	8029e24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8028ef4:	693b      	ldr	r3, [r7, #16]
 8028ef6:	f003 0310 	and.w	r3, r3, #16
 8028efa:	2b00      	cmp	r3, #0
 8028efc:	d008      	beq.n	8028f10 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8028efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f00:	015a      	lsls	r2, r3, #5
 8028f02:	69fb      	ldr	r3, [r7, #28]
 8028f04:	4413      	add	r3, r2
 8028f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f0a:	461a      	mov	r2, r3
 8028f0c:	2310      	movs	r3, #16
 8028f0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8028f10:	693b      	ldr	r3, [r7, #16]
 8028f12:	f003 0302 	and.w	r3, r3, #2
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d030      	beq.n	8028f7c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8028f1a:	6a3b      	ldr	r3, [r7, #32]
 8028f1c:	695b      	ldr	r3, [r3, #20]
 8028f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028f22:	2b80      	cmp	r3, #128	; 0x80
 8028f24:	d109      	bne.n	8028f3a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8028f26:	69fb      	ldr	r3, [r7, #28]
 8028f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8028f2c:	685b      	ldr	r3, [r3, #4]
 8028f2e:	69fa      	ldr	r2, [r7, #28]
 8028f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8028f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028f38:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8028f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028f3c:	4613      	mov	r3, r2
 8028f3e:	00db      	lsls	r3, r3, #3
 8028f40:	4413      	add	r3, r2
 8028f42:	009b      	lsls	r3, r3, #2
 8028f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8028f48:	687a      	ldr	r2, [r7, #4]
 8028f4a:	4413      	add	r3, r2
 8028f4c:	3304      	adds	r3, #4
 8028f4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8028f50:	697b      	ldr	r3, [r7, #20]
 8028f52:	78db      	ldrb	r3, [r3, #3]
 8028f54:	2b01      	cmp	r3, #1
 8028f56:	d108      	bne.n	8028f6a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8028f58:	697b      	ldr	r3, [r7, #20]
 8028f5a:	2200      	movs	r2, #0
 8028f5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8028f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f60:	b2db      	uxtb	r3, r3
 8028f62:	4619      	mov	r1, r3
 8028f64:	6878      	ldr	r0, [r7, #4]
 8028f66:	f008 f889 	bl	803107c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8028f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f6c:	015a      	lsls	r2, r3, #5
 8028f6e:	69fb      	ldr	r3, [r7, #28]
 8028f70:	4413      	add	r3, r2
 8028f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f76:	461a      	mov	r2, r3
 8028f78:	2302      	movs	r3, #2
 8028f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8028f7c:	693b      	ldr	r3, [r7, #16]
 8028f7e:	f003 0320 	and.w	r3, r3, #32
 8028f82:	2b00      	cmp	r3, #0
 8028f84:	d008      	beq.n	8028f98 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8028f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028f88:	015a      	lsls	r2, r3, #5
 8028f8a:	69fb      	ldr	r3, [r7, #28]
 8028f8c:	4413      	add	r3, r2
 8028f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028f92:	461a      	mov	r2, r3
 8028f94:	2320      	movs	r3, #32
 8028f96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8028f98:	693b      	ldr	r3, [r7, #16]
 8028f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	d009      	beq.n	8028fb6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8028fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fa4:	015a      	lsls	r2, r3, #5
 8028fa6:	69fb      	ldr	r3, [r7, #28]
 8028fa8:	4413      	add	r3, r2
 8028faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8028fae:	461a      	mov	r2, r3
 8028fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8028fb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8028fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028fb8:	3301      	adds	r3, #1
 8028fba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8028fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fbe:	085b      	lsrs	r3, r3, #1
 8028fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8028fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fc4:	2b00      	cmp	r3, #0
 8028fc6:	f47f af62 	bne.w	8028e8e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8028fca:	687b      	ldr	r3, [r7, #4]
 8028fcc:	681b      	ldr	r3, [r3, #0]
 8028fce:	4618      	mov	r0, r3
 8028fd0:	f005 fa0e 	bl	802e3f0 <USB_ReadInterrupts>
 8028fd4:	4603      	mov	r3, r0
 8028fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8028fde:	f040 80db 	bne.w	8029198 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8028fe2:	687b      	ldr	r3, [r7, #4]
 8028fe4:	681b      	ldr	r3, [r3, #0]
 8028fe6:	4618      	mov	r0, r3
 8028fe8:	f005 fa2f 	bl	802e44a <USB_ReadDevAllInEpInterrupt>
 8028fec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8028fee:	2300      	movs	r3, #0
 8028ff0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8028ff2:	e0cd      	b.n	8029190 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8028ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028ff6:	f003 0301 	and.w	r3, r3, #1
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	f000 80c2 	beq.w	8029184 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8029000:	687b      	ldr	r3, [r7, #4]
 8029002:	681b      	ldr	r3, [r3, #0]
 8029004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029006:	b2d2      	uxtb	r2, r2
 8029008:	4611      	mov	r1, r2
 802900a:	4618      	mov	r0, r3
 802900c:	f005 fa55 	bl	802e4ba <USB_ReadDevInEPInterrupt>
 8029010:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8029012:	693b      	ldr	r3, [r7, #16]
 8029014:	f003 0301 	and.w	r3, r3, #1
 8029018:	2b00      	cmp	r3, #0
 802901a:	d057      	beq.n	80290cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802901e:	f003 030f 	and.w	r3, r3, #15
 8029022:	2201      	movs	r2, #1
 8029024:	fa02 f303 	lsl.w	r3, r2, r3
 8029028:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802902a:	69fb      	ldr	r3, [r7, #28]
 802902c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029032:	68fb      	ldr	r3, [r7, #12]
 8029034:	43db      	mvns	r3, r3
 8029036:	69f9      	ldr	r1, [r7, #28]
 8029038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802903c:	4013      	ands	r3, r2
 802903e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8029040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029042:	015a      	lsls	r2, r3, #5
 8029044:	69fb      	ldr	r3, [r7, #28]
 8029046:	4413      	add	r3, r2
 8029048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802904c:	461a      	mov	r2, r3
 802904e:	2301      	movs	r3, #1
 8029050:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8029052:	687b      	ldr	r3, [r7, #4]
 8029054:	691b      	ldr	r3, [r3, #16]
 8029056:	2b01      	cmp	r3, #1
 8029058:	d132      	bne.n	80290c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802905a:	6879      	ldr	r1, [r7, #4]
 802905c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802905e:	4613      	mov	r3, r2
 8029060:	00db      	lsls	r3, r3, #3
 8029062:	4413      	add	r3, r2
 8029064:	009b      	lsls	r3, r3, #2
 8029066:	440b      	add	r3, r1
 8029068:	334c      	adds	r3, #76	; 0x4c
 802906a:	6819      	ldr	r1, [r3, #0]
 802906c:	6878      	ldr	r0, [r7, #4]
 802906e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029070:	4613      	mov	r3, r2
 8029072:	00db      	lsls	r3, r3, #3
 8029074:	4413      	add	r3, r2
 8029076:	009b      	lsls	r3, r3, #2
 8029078:	4403      	add	r3, r0
 802907a:	3348      	adds	r3, #72	; 0x48
 802907c:	681b      	ldr	r3, [r3, #0]
 802907e:	4419      	add	r1, r3
 8029080:	6878      	ldr	r0, [r7, #4]
 8029082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029084:	4613      	mov	r3, r2
 8029086:	00db      	lsls	r3, r3, #3
 8029088:	4413      	add	r3, r2
 802908a:	009b      	lsls	r3, r3, #2
 802908c:	4403      	add	r3, r0
 802908e:	334c      	adds	r3, #76	; 0x4c
 8029090:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8029092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029094:	2b00      	cmp	r3, #0
 8029096:	d113      	bne.n	80290c0 <HAL_PCD_IRQHandler+0x3a2>
 8029098:	6879      	ldr	r1, [r7, #4]
 802909a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802909c:	4613      	mov	r3, r2
 802909e:	00db      	lsls	r3, r3, #3
 80290a0:	4413      	add	r3, r2
 80290a2:	009b      	lsls	r3, r3, #2
 80290a4:	440b      	add	r3, r1
 80290a6:	3354      	adds	r3, #84	; 0x54
 80290a8:	681b      	ldr	r3, [r3, #0]
 80290aa:	2b00      	cmp	r3, #0
 80290ac:	d108      	bne.n	80290c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80290ae:	687b      	ldr	r3, [r7, #4]
 80290b0:	6818      	ldr	r0, [r3, #0]
 80290b2:	687b      	ldr	r3, [r7, #4]
 80290b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80290b8:	461a      	mov	r2, r3
 80290ba:	2101      	movs	r1, #1
 80290bc:	f005 fa5c 	bl	802e578 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80290c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290c2:	b2db      	uxtb	r3, r3
 80290c4:	4619      	mov	r1, r3
 80290c6:	6878      	ldr	r0, [r7, #4]
 80290c8:	f007 ff53 	bl	8030f72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80290cc:	693b      	ldr	r3, [r7, #16]
 80290ce:	f003 0308 	and.w	r3, r3, #8
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	d008      	beq.n	80290e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80290d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290d8:	015a      	lsls	r2, r3, #5
 80290da:	69fb      	ldr	r3, [r7, #28]
 80290dc:	4413      	add	r3, r2
 80290de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80290e2:	461a      	mov	r2, r3
 80290e4:	2308      	movs	r3, #8
 80290e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80290e8:	693b      	ldr	r3, [r7, #16]
 80290ea:	f003 0310 	and.w	r3, r3, #16
 80290ee:	2b00      	cmp	r3, #0
 80290f0:	d008      	beq.n	8029104 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80290f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290f4:	015a      	lsls	r2, r3, #5
 80290f6:	69fb      	ldr	r3, [r7, #28]
 80290f8:	4413      	add	r3, r2
 80290fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80290fe:	461a      	mov	r2, r3
 8029100:	2310      	movs	r3, #16
 8029102:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8029104:	693b      	ldr	r3, [r7, #16]
 8029106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802910a:	2b00      	cmp	r3, #0
 802910c:	d008      	beq.n	8029120 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029110:	015a      	lsls	r2, r3, #5
 8029112:	69fb      	ldr	r3, [r7, #28]
 8029114:	4413      	add	r3, r2
 8029116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802911a:	461a      	mov	r2, r3
 802911c:	2340      	movs	r3, #64	; 0x40
 802911e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8029120:	693b      	ldr	r3, [r7, #16]
 8029122:	f003 0302 	and.w	r3, r3, #2
 8029126:	2b00      	cmp	r3, #0
 8029128:	d023      	beq.n	8029172 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802912a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802912c:	6a38      	ldr	r0, [r7, #32]
 802912e:	f004 f93d 	bl	802d3ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8029132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029134:	4613      	mov	r3, r2
 8029136:	00db      	lsls	r3, r3, #3
 8029138:	4413      	add	r3, r2
 802913a:	009b      	lsls	r3, r3, #2
 802913c:	3338      	adds	r3, #56	; 0x38
 802913e:	687a      	ldr	r2, [r7, #4]
 8029140:	4413      	add	r3, r2
 8029142:	3304      	adds	r3, #4
 8029144:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8029146:	697b      	ldr	r3, [r7, #20]
 8029148:	78db      	ldrb	r3, [r3, #3]
 802914a:	2b01      	cmp	r3, #1
 802914c:	d108      	bne.n	8029160 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802914e:	697b      	ldr	r3, [r7, #20]
 8029150:	2200      	movs	r2, #0
 8029152:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8029154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029156:	b2db      	uxtb	r3, r3
 8029158:	4619      	mov	r1, r3
 802915a:	6878      	ldr	r0, [r7, #4]
 802915c:	f007 ffa0 	bl	80310a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8029160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029162:	015a      	lsls	r2, r3, #5
 8029164:	69fb      	ldr	r3, [r7, #28]
 8029166:	4413      	add	r3, r2
 8029168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802916c:	461a      	mov	r2, r3
 802916e:	2302      	movs	r3, #2
 8029170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8029172:	693b      	ldr	r3, [r7, #16]
 8029174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029178:	2b00      	cmp	r3, #0
 802917a:	d003      	beq.n	8029184 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802917c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802917e:	6878      	ldr	r0, [r7, #4]
 8029180:	f000 fcdb 	bl	8029b3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8029184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029186:	3301      	adds	r3, #1
 8029188:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802918c:	085b      	lsrs	r3, r3, #1
 802918e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8029190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029192:	2b00      	cmp	r3, #0
 8029194:	f47f af2e 	bne.w	8028ff4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8029198:	687b      	ldr	r3, [r7, #4]
 802919a:	681b      	ldr	r3, [r3, #0]
 802919c:	4618      	mov	r0, r3
 802919e:	f005 f927 	bl	802e3f0 <USB_ReadInterrupts>
 80291a2:	4603      	mov	r3, r0
 80291a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80291a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80291ac:	d122      	bne.n	80291f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80291ae:	69fb      	ldr	r3, [r7, #28]
 80291b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80291b4:	685b      	ldr	r3, [r3, #4]
 80291b6:	69fa      	ldr	r2, [r7, #28]
 80291b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80291bc:	f023 0301 	bic.w	r3, r3, #1
 80291c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80291c8:	2b01      	cmp	r3, #1
 80291ca:	d108      	bne.n	80291de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	2200      	movs	r2, #0
 80291d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80291d4:	2100      	movs	r1, #0
 80291d6:	6878      	ldr	r0, [r7, #4]
 80291d8:	f000 fec2 	bl	8029f60 <HAL_PCDEx_LPM_Callback>
 80291dc:	e002      	b.n	80291e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80291de:	6878      	ldr	r0, [r7, #4]
 80291e0:	f007 ff3e 	bl	8031060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80291e4:	687b      	ldr	r3, [r7, #4]
 80291e6:	681b      	ldr	r3, [r3, #0]
 80291e8:	695a      	ldr	r2, [r3, #20]
 80291ea:	687b      	ldr	r3, [r7, #4]
 80291ec:	681b      	ldr	r3, [r3, #0]
 80291ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80291f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	4618      	mov	r0, r3
 80291fa:	f005 f8f9 	bl	802e3f0 <USB_ReadInterrupts>
 80291fe:	4603      	mov	r3, r0
 8029200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8029204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029208:	d112      	bne.n	8029230 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802920a:	69fb      	ldr	r3, [r7, #28]
 802920c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029210:	689b      	ldr	r3, [r3, #8]
 8029212:	f003 0301 	and.w	r3, r3, #1
 8029216:	2b01      	cmp	r3, #1
 8029218:	d102      	bne.n	8029220 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802921a:	6878      	ldr	r0, [r7, #4]
 802921c:	f007 fefa 	bl	8031014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8029220:	687b      	ldr	r3, [r7, #4]
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	695a      	ldr	r2, [r3, #20]
 8029226:	687b      	ldr	r3, [r7, #4]
 8029228:	681b      	ldr	r3, [r3, #0]
 802922a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802922e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8029230:	687b      	ldr	r3, [r7, #4]
 8029232:	681b      	ldr	r3, [r3, #0]
 8029234:	4618      	mov	r0, r3
 8029236:	f005 f8db 	bl	802e3f0 <USB_ReadInterrupts>
 802923a:	4603      	mov	r3, r0
 802923c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029244:	f040 80b7 	bne.w	80293b6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8029248:	69fb      	ldr	r3, [r7, #28]
 802924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802924e:	685b      	ldr	r3, [r3, #4]
 8029250:	69fa      	ldr	r2, [r7, #28]
 8029252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029256:	f023 0301 	bic.w	r3, r3, #1
 802925a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802925c:	687b      	ldr	r3, [r7, #4]
 802925e:	681b      	ldr	r3, [r3, #0]
 8029260:	2110      	movs	r1, #16
 8029262:	4618      	mov	r0, r3
 8029264:	f004 f8a2 	bl	802d3ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8029268:	2300      	movs	r3, #0
 802926a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802926c:	e046      	b.n	80292fc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029270:	015a      	lsls	r2, r3, #5
 8029272:	69fb      	ldr	r3, [r7, #28]
 8029274:	4413      	add	r3, r2
 8029276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802927a:	461a      	mov	r2, r3
 802927c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8029280:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8029282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029284:	015a      	lsls	r2, r3, #5
 8029286:	69fb      	ldr	r3, [r7, #28]
 8029288:	4413      	add	r3, r2
 802928a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802928e:	681b      	ldr	r3, [r3, #0]
 8029290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029292:	0151      	lsls	r1, r2, #5
 8029294:	69fa      	ldr	r2, [r7, #28]
 8029296:	440a      	add	r2, r1
 8029298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802929c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80292a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80292a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292a4:	015a      	lsls	r2, r3, #5
 80292a6:	69fb      	ldr	r3, [r7, #28]
 80292a8:	4413      	add	r3, r2
 80292aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80292ae:	461a      	mov	r2, r3
 80292b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80292b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80292b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292b8:	015a      	lsls	r2, r3, #5
 80292ba:	69fb      	ldr	r3, [r7, #28]
 80292bc:	4413      	add	r3, r2
 80292be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80292c2:	681b      	ldr	r3, [r3, #0]
 80292c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292c6:	0151      	lsls	r1, r2, #5
 80292c8:	69fa      	ldr	r2, [r7, #28]
 80292ca:	440a      	add	r2, r1
 80292cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80292d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80292d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80292d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292d8:	015a      	lsls	r2, r3, #5
 80292da:	69fb      	ldr	r3, [r7, #28]
 80292dc:	4413      	add	r3, r2
 80292de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80292e2:	681b      	ldr	r3, [r3, #0]
 80292e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80292e6:	0151      	lsls	r1, r2, #5
 80292e8:	69fa      	ldr	r2, [r7, #28]
 80292ea:	440a      	add	r2, r1
 80292ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80292f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80292f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80292f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80292f8:	3301      	adds	r3, #1
 80292fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80292fc:	687b      	ldr	r3, [r7, #4]
 80292fe:	685b      	ldr	r3, [r3, #4]
 8029300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029302:	429a      	cmp	r2, r3
 8029304:	d3b3      	bcc.n	802926e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8029306:	69fb      	ldr	r3, [r7, #28]
 8029308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802930c:	69db      	ldr	r3, [r3, #28]
 802930e:	69fa      	ldr	r2, [r7, #28]
 8029310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029314:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8029318:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802931a:	687b      	ldr	r3, [r7, #4]
 802931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802931e:	2b00      	cmp	r3, #0
 8029320:	d016      	beq.n	8029350 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8029322:	69fb      	ldr	r3, [r7, #28]
 8029324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802932c:	69fa      	ldr	r2, [r7, #28]
 802932e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029332:	f043 030b 	orr.w	r3, r3, #11
 8029336:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802933a:	69fb      	ldr	r3, [r7, #28]
 802933c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029342:	69fa      	ldr	r2, [r7, #28]
 8029344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029348:	f043 030b 	orr.w	r3, r3, #11
 802934c:	6453      	str	r3, [r2, #68]	; 0x44
 802934e:	e015      	b.n	802937c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8029350:	69fb      	ldr	r3, [r7, #28]
 8029352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029356:	695b      	ldr	r3, [r3, #20]
 8029358:	69fa      	ldr	r2, [r7, #28]
 802935a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802935e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8029362:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8029366:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8029368:	69fb      	ldr	r3, [r7, #28]
 802936a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802936e:	691b      	ldr	r3, [r3, #16]
 8029370:	69fa      	ldr	r2, [r7, #28]
 8029372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8029376:	f043 030b 	orr.w	r3, r3, #11
 802937a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802937c:	69fb      	ldr	r3, [r7, #28]
 802937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	69fa      	ldr	r2, [r7, #28]
 8029386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802938a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802938e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	6818      	ldr	r0, [r3, #0]
 8029394:	687b      	ldr	r3, [r7, #4]
 8029396:	691b      	ldr	r3, [r3, #16]
 8029398:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802939a:	687b      	ldr	r3, [r7, #4]
 802939c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80293a0:	461a      	mov	r2, r3
 80293a2:	f005 f8e9 	bl	802e578 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80293a6:	687b      	ldr	r3, [r7, #4]
 80293a8:	681b      	ldr	r3, [r3, #0]
 80293aa:	695a      	ldr	r2, [r3, #20]
 80293ac:	687b      	ldr	r3, [r7, #4]
 80293ae:	681b      	ldr	r3, [r3, #0]
 80293b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80293b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80293b6:	687b      	ldr	r3, [r7, #4]
 80293b8:	681b      	ldr	r3, [r3, #0]
 80293ba:	4618      	mov	r0, r3
 80293bc:	f005 f818 	bl	802e3f0 <USB_ReadInterrupts>
 80293c0:	4603      	mov	r3, r0
 80293c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80293c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80293ca:	d124      	bne.n	8029416 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80293cc:	687b      	ldr	r3, [r7, #4]
 80293ce:	681b      	ldr	r3, [r3, #0]
 80293d0:	4618      	mov	r0, r3
 80293d2:	f005 f8ae 	bl	802e532 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80293d6:	687b      	ldr	r3, [r7, #4]
 80293d8:	681b      	ldr	r3, [r3, #0]
 80293da:	4618      	mov	r0, r3
 80293dc:	f004 f863 	bl	802d4a6 <USB_GetDevSpeed>
 80293e0:	4603      	mov	r3, r0
 80293e2:	461a      	mov	r2, r3
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	681c      	ldr	r4, [r3, #0]
 80293ec:	f001 fa02 	bl	802a7f4 <HAL_RCC_GetHCLKFreq>
 80293f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80293f2:	687b      	ldr	r3, [r7, #4]
 80293f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80293f6:	b2db      	uxtb	r3, r3
 80293f8:	461a      	mov	r2, r3
 80293fa:	4620      	mov	r0, r4
 80293fc:	f003 fd62 	bl	802cec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8029400:	6878      	ldr	r0, [r7, #4]
 8029402:	f007 fdde 	bl	8030fc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8029406:	687b      	ldr	r3, [r7, #4]
 8029408:	681b      	ldr	r3, [r3, #0]
 802940a:	695a      	ldr	r2, [r3, #20]
 802940c:	687b      	ldr	r3, [r7, #4]
 802940e:	681b      	ldr	r3, [r3, #0]
 8029410:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8029414:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8029416:	687b      	ldr	r3, [r7, #4]
 8029418:	681b      	ldr	r3, [r3, #0]
 802941a:	4618      	mov	r0, r3
 802941c:	f004 ffe8 	bl	802e3f0 <USB_ReadInterrupts>
 8029420:	4603      	mov	r3, r0
 8029422:	f003 0308 	and.w	r3, r3, #8
 8029426:	2b08      	cmp	r3, #8
 8029428:	d10a      	bne.n	8029440 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 802942a:	6878      	ldr	r0, [r7, #4]
 802942c:	f007 fdbb 	bl	8030fa6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8029430:	687b      	ldr	r3, [r7, #4]
 8029432:	681b      	ldr	r3, [r3, #0]
 8029434:	695a      	ldr	r2, [r3, #20]
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	681b      	ldr	r3, [r3, #0]
 802943a:	f002 0208 	and.w	r2, r2, #8
 802943e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	681b      	ldr	r3, [r3, #0]
 8029444:	4618      	mov	r0, r3
 8029446:	f004 ffd3 	bl	802e3f0 <USB_ReadInterrupts>
 802944a:	4603      	mov	r3, r0
 802944c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029450:	2b80      	cmp	r3, #128	; 0x80
 8029452:	d122      	bne.n	802949a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8029454:	6a3b      	ldr	r3, [r7, #32]
 8029456:	699b      	ldr	r3, [r3, #24]
 8029458:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802945c:	6a3b      	ldr	r3, [r7, #32]
 802945e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029460:	2301      	movs	r3, #1
 8029462:	627b      	str	r3, [r7, #36]	; 0x24
 8029464:	e014      	b.n	8029490 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8029466:	6879      	ldr	r1, [r7, #4]
 8029468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802946a:	4613      	mov	r3, r2
 802946c:	00db      	lsls	r3, r3, #3
 802946e:	4413      	add	r3, r2
 8029470:	009b      	lsls	r3, r3, #2
 8029472:	440b      	add	r3, r1
 8029474:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029478:	781b      	ldrb	r3, [r3, #0]
 802947a:	2b01      	cmp	r3, #1
 802947c:	d105      	bne.n	802948a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 802947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029480:	b2db      	uxtb	r3, r3
 8029482:	4619      	mov	r1, r3
 8029484:	6878      	ldr	r0, [r7, #4]
 8029486:	f000 fb27 	bl	8029ad8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802948c:	3301      	adds	r3, #1
 802948e:	627b      	str	r3, [r7, #36]	; 0x24
 8029490:	687b      	ldr	r3, [r7, #4]
 8029492:	685b      	ldr	r3, [r3, #4]
 8029494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029496:	429a      	cmp	r2, r3
 8029498:	d3e5      	bcc.n	8029466 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	681b      	ldr	r3, [r3, #0]
 802949e:	4618      	mov	r0, r3
 80294a0:	f004 ffa6 	bl	802e3f0 <USB_ReadInterrupts>
 80294a4:	4603      	mov	r3, r0
 80294a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80294aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80294ae:	d13b      	bne.n	8029528 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80294b0:	2301      	movs	r3, #1
 80294b2:	627b      	str	r3, [r7, #36]	; 0x24
 80294b4:	e02b      	b.n	802950e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80294b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294b8:	015a      	lsls	r2, r3, #5
 80294ba:	69fb      	ldr	r3, [r7, #28]
 80294bc:	4413      	add	r3, r2
 80294be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80294c2:	681b      	ldr	r3, [r3, #0]
 80294c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80294c6:	6879      	ldr	r1, [r7, #4]
 80294c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294ca:	4613      	mov	r3, r2
 80294cc:	00db      	lsls	r3, r3, #3
 80294ce:	4413      	add	r3, r2
 80294d0:	009b      	lsls	r3, r3, #2
 80294d2:	440b      	add	r3, r1
 80294d4:	3340      	adds	r3, #64	; 0x40
 80294d6:	781b      	ldrb	r3, [r3, #0]
 80294d8:	2b01      	cmp	r3, #1
 80294da:	d115      	bne.n	8029508 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80294dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80294de:	2b00      	cmp	r3, #0
 80294e0:	da12      	bge.n	8029508 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80294e2:	6879      	ldr	r1, [r7, #4]
 80294e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80294e6:	4613      	mov	r3, r2
 80294e8:	00db      	lsls	r3, r3, #3
 80294ea:	4413      	add	r3, r2
 80294ec:	009b      	lsls	r3, r3, #2
 80294ee:	440b      	add	r3, r1
 80294f0:	333f      	adds	r3, #63	; 0x3f
 80294f2:	2201      	movs	r2, #1
 80294f4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80294f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294f8:	b2db      	uxtb	r3, r3
 80294fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80294fe:	b2db      	uxtb	r3, r3
 8029500:	4619      	mov	r1, r3
 8029502:	6878      	ldr	r0, [r7, #4]
 8029504:	f000 fae8 	bl	8029ad8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8029508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802950a:	3301      	adds	r3, #1
 802950c:	627b      	str	r3, [r7, #36]	; 0x24
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	685b      	ldr	r3, [r3, #4]
 8029512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029514:	429a      	cmp	r2, r3
 8029516:	d3ce      	bcc.n	80294b6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8029518:	687b      	ldr	r3, [r7, #4]
 802951a:	681b      	ldr	r3, [r3, #0]
 802951c:	695a      	ldr	r2, [r3, #20]
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	681b      	ldr	r3, [r3, #0]
 8029522:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8029526:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	681b      	ldr	r3, [r3, #0]
 802952c:	4618      	mov	r0, r3
 802952e:	f004 ff5f 	bl	802e3f0 <USB_ReadInterrupts>
 8029532:	4603      	mov	r3, r0
 8029534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8029538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802953c:	d155      	bne.n	80295ea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 802953e:	2301      	movs	r3, #1
 8029540:	627b      	str	r3, [r7, #36]	; 0x24
 8029542:	e045      	b.n	80295d0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8029544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029546:	015a      	lsls	r2, r3, #5
 8029548:	69fb      	ldr	r3, [r7, #28]
 802954a:	4413      	add	r3, r2
 802954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8029554:	6879      	ldr	r1, [r7, #4]
 8029556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029558:	4613      	mov	r3, r2
 802955a:	00db      	lsls	r3, r3, #3
 802955c:	4413      	add	r3, r2
 802955e:	009b      	lsls	r3, r3, #2
 8029560:	440b      	add	r3, r1
 8029562:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8029566:	781b      	ldrb	r3, [r3, #0]
 8029568:	2b01      	cmp	r3, #1
 802956a:	d12e      	bne.n	80295ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 802956c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 802956e:	2b00      	cmp	r3, #0
 8029570:	da2b      	bge.n	80295ca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8029572:	69bb      	ldr	r3, [r7, #24]
 8029574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8029578:	687b      	ldr	r3, [r7, #4]
 802957a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 802957e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8029582:	429a      	cmp	r2, r3
 8029584:	d121      	bne.n	80295ca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8029586:	6879      	ldr	r1, [r7, #4]
 8029588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802958a:	4613      	mov	r3, r2
 802958c:	00db      	lsls	r3, r3, #3
 802958e:	4413      	add	r3, r2
 8029590:	009b      	lsls	r3, r3, #2
 8029592:	440b      	add	r3, r1
 8029594:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8029598:	2201      	movs	r2, #1
 802959a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 802959c:	6a3b      	ldr	r3, [r7, #32]
 802959e:	699b      	ldr	r3, [r3, #24]
 80295a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80295a4:	6a3b      	ldr	r3, [r7, #32]
 80295a6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80295a8:	6a3b      	ldr	r3, [r7, #32]
 80295aa:	695b      	ldr	r3, [r3, #20]
 80295ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80295b0:	2b00      	cmp	r3, #0
 80295b2:	d10a      	bne.n	80295ca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80295b4:	69fb      	ldr	r3, [r7, #28]
 80295b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80295ba:	685b      	ldr	r3, [r3, #4]
 80295bc:	69fa      	ldr	r2, [r7, #28]
 80295be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80295c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80295c6:	6053      	str	r3, [r2, #4]
            break;
 80295c8:	e007      	b.n	80295da <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80295ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80295cc:	3301      	adds	r3, #1
 80295ce:	627b      	str	r3, [r7, #36]	; 0x24
 80295d0:	687b      	ldr	r3, [r7, #4]
 80295d2:	685b      	ldr	r3, [r3, #4]
 80295d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80295d6:	429a      	cmp	r2, r3
 80295d8:	d3b4      	bcc.n	8029544 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	681b      	ldr	r3, [r3, #0]
 80295de:	695a      	ldr	r2, [r3, #20]
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	681b      	ldr	r3, [r3, #0]
 80295e4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80295e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	681b      	ldr	r3, [r3, #0]
 80295ee:	4618      	mov	r0, r3
 80295f0:	f004 fefe 	bl	802e3f0 <USB_ReadInterrupts>
 80295f4:	4603      	mov	r3, r0
 80295f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80295fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80295fe:	d10a      	bne.n	8029616 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8029600:	6878      	ldr	r0, [r7, #4]
 8029602:	f007 fd5f 	bl	80310c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8029606:	687b      	ldr	r3, [r7, #4]
 8029608:	681b      	ldr	r3, [r3, #0]
 802960a:	695a      	ldr	r2, [r3, #20]
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8029614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	4618      	mov	r0, r3
 802961c:	f004 fee8 	bl	802e3f0 <USB_ReadInterrupts>
 8029620:	4603      	mov	r3, r0
 8029622:	f003 0304 	and.w	r3, r3, #4
 8029626:	2b04      	cmp	r3, #4
 8029628:	d115      	bne.n	8029656 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	685b      	ldr	r3, [r3, #4]
 8029630:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8029632:	69bb      	ldr	r3, [r7, #24]
 8029634:	f003 0304 	and.w	r3, r3, #4
 8029638:	2b00      	cmp	r3, #0
 802963a:	d002      	beq.n	8029642 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 802963c:	6878      	ldr	r0, [r7, #4]
 802963e:	f007 fd4f 	bl	80310e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	6859      	ldr	r1, [r3, #4]
 8029648:	687b      	ldr	r3, [r7, #4]
 802964a:	681b      	ldr	r3, [r3, #0]
 802964c:	69ba      	ldr	r2, [r7, #24]
 802964e:	430a      	orrs	r2, r1
 8029650:	605a      	str	r2, [r3, #4]
 8029652:	e000      	b.n	8029656 <HAL_PCD_IRQHandler+0x938>
      return;
 8029654:	bf00      	nop
    }
  }
}
 8029656:	3734      	adds	r7, #52	; 0x34
 8029658:	46bd      	mov	sp, r7
 802965a:	bd90      	pop	{r4, r7, pc}

0802965c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 802965c:	b580      	push	{r7, lr}
 802965e:	b082      	sub	sp, #8
 8029660:	af00      	add	r7, sp, #0
 8029662:	6078      	str	r0, [r7, #4]
 8029664:	460b      	mov	r3, r1
 8029666:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802966e:	2b01      	cmp	r3, #1
 8029670:	d101      	bne.n	8029676 <HAL_PCD_SetAddress+0x1a>
 8029672:	2302      	movs	r3, #2
 8029674:	e013      	b.n	802969e <HAL_PCD_SetAddress+0x42>
 8029676:	687b      	ldr	r3, [r7, #4]
 8029678:	2201      	movs	r2, #1
 802967a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	78fa      	ldrb	r2, [r7, #3]
 8029682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8029686:	687b      	ldr	r3, [r7, #4]
 8029688:	681b      	ldr	r3, [r3, #0]
 802968a:	78fa      	ldrb	r2, [r7, #3]
 802968c:	4611      	mov	r1, r2
 802968e:	4618      	mov	r0, r3
 8029690:	f004 fe46 	bl	802e320 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8029694:	687b      	ldr	r3, [r7, #4]
 8029696:	2200      	movs	r2, #0
 8029698:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802969c:	2300      	movs	r3, #0
}
 802969e:	4618      	mov	r0, r3
 80296a0:	3708      	adds	r7, #8
 80296a2:	46bd      	mov	sp, r7
 80296a4:	bd80      	pop	{r7, pc}

080296a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80296a6:	b580      	push	{r7, lr}
 80296a8:	b084      	sub	sp, #16
 80296aa:	af00      	add	r7, sp, #0
 80296ac:	6078      	str	r0, [r7, #4]
 80296ae:	4608      	mov	r0, r1
 80296b0:	4611      	mov	r1, r2
 80296b2:	461a      	mov	r2, r3
 80296b4:	4603      	mov	r3, r0
 80296b6:	70fb      	strb	r3, [r7, #3]
 80296b8:	460b      	mov	r3, r1
 80296ba:	803b      	strh	r3, [r7, #0]
 80296bc:	4613      	mov	r3, r2
 80296be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80296c0:	2300      	movs	r3, #0
 80296c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80296c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80296c8:	2b00      	cmp	r3, #0
 80296ca:	da0f      	bge.n	80296ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80296cc:	78fb      	ldrb	r3, [r7, #3]
 80296ce:	f003 020f 	and.w	r2, r3, #15
 80296d2:	4613      	mov	r3, r2
 80296d4:	00db      	lsls	r3, r3, #3
 80296d6:	4413      	add	r3, r2
 80296d8:	009b      	lsls	r3, r3, #2
 80296da:	3338      	adds	r3, #56	; 0x38
 80296dc:	687a      	ldr	r2, [r7, #4]
 80296de:	4413      	add	r3, r2
 80296e0:	3304      	adds	r3, #4
 80296e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80296e4:	68fb      	ldr	r3, [r7, #12]
 80296e6:	2201      	movs	r2, #1
 80296e8:	705a      	strb	r2, [r3, #1]
 80296ea:	e00f      	b.n	802970c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80296ec:	78fb      	ldrb	r3, [r7, #3]
 80296ee:	f003 020f 	and.w	r2, r3, #15
 80296f2:	4613      	mov	r3, r2
 80296f4:	00db      	lsls	r3, r3, #3
 80296f6:	4413      	add	r3, r2
 80296f8:	009b      	lsls	r3, r3, #2
 80296fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80296fe:	687a      	ldr	r2, [r7, #4]
 8029700:	4413      	add	r3, r2
 8029702:	3304      	adds	r3, #4
 8029704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029706:	68fb      	ldr	r3, [r7, #12]
 8029708:	2200      	movs	r2, #0
 802970a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 802970c:	78fb      	ldrb	r3, [r7, #3]
 802970e:	f003 030f 	and.w	r3, r3, #15
 8029712:	b2da      	uxtb	r2, r3
 8029714:	68fb      	ldr	r3, [r7, #12]
 8029716:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8029718:	883a      	ldrh	r2, [r7, #0]
 802971a:	68fb      	ldr	r3, [r7, #12]
 802971c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 802971e:	68fb      	ldr	r3, [r7, #12]
 8029720:	78ba      	ldrb	r2, [r7, #2]
 8029722:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8029724:	68fb      	ldr	r3, [r7, #12]
 8029726:	785b      	ldrb	r3, [r3, #1]
 8029728:	2b00      	cmp	r3, #0
 802972a:	d004      	beq.n	8029736 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 802972c:	68fb      	ldr	r3, [r7, #12]
 802972e:	781b      	ldrb	r3, [r3, #0]
 8029730:	b29a      	uxth	r2, r3
 8029732:	68fb      	ldr	r3, [r7, #12]
 8029734:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8029736:	78bb      	ldrb	r3, [r7, #2]
 8029738:	2b02      	cmp	r3, #2
 802973a:	d102      	bne.n	8029742 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 802973c:	68fb      	ldr	r3, [r7, #12]
 802973e:	2200      	movs	r2, #0
 8029740:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8029742:	687b      	ldr	r3, [r7, #4]
 8029744:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029748:	2b01      	cmp	r3, #1
 802974a:	d101      	bne.n	8029750 <HAL_PCD_EP_Open+0xaa>
 802974c:	2302      	movs	r3, #2
 802974e:	e00e      	b.n	802976e <HAL_PCD_EP_Open+0xc8>
 8029750:	687b      	ldr	r3, [r7, #4]
 8029752:	2201      	movs	r2, #1
 8029754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	681b      	ldr	r3, [r3, #0]
 802975c:	68f9      	ldr	r1, [r7, #12]
 802975e:	4618      	mov	r0, r3
 8029760:	f003 fec6 	bl	802d4f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8029764:	687b      	ldr	r3, [r7, #4]
 8029766:	2200      	movs	r2, #0
 8029768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 802976c:	7afb      	ldrb	r3, [r7, #11]
}
 802976e:	4618      	mov	r0, r3
 8029770:	3710      	adds	r7, #16
 8029772:	46bd      	mov	sp, r7
 8029774:	bd80      	pop	{r7, pc}

08029776 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029776:	b580      	push	{r7, lr}
 8029778:	b084      	sub	sp, #16
 802977a:	af00      	add	r7, sp, #0
 802977c:	6078      	str	r0, [r7, #4]
 802977e:	460b      	mov	r3, r1
 8029780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8029782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029786:	2b00      	cmp	r3, #0
 8029788:	da0f      	bge.n	80297aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802978a:	78fb      	ldrb	r3, [r7, #3]
 802978c:	f003 020f 	and.w	r2, r3, #15
 8029790:	4613      	mov	r3, r2
 8029792:	00db      	lsls	r3, r3, #3
 8029794:	4413      	add	r3, r2
 8029796:	009b      	lsls	r3, r3, #2
 8029798:	3338      	adds	r3, #56	; 0x38
 802979a:	687a      	ldr	r2, [r7, #4]
 802979c:	4413      	add	r3, r2
 802979e:	3304      	adds	r3, #4
 80297a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80297a2:	68fb      	ldr	r3, [r7, #12]
 80297a4:	2201      	movs	r2, #1
 80297a6:	705a      	strb	r2, [r3, #1]
 80297a8:	e00f      	b.n	80297ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80297aa:	78fb      	ldrb	r3, [r7, #3]
 80297ac:	f003 020f 	and.w	r2, r3, #15
 80297b0:	4613      	mov	r3, r2
 80297b2:	00db      	lsls	r3, r3, #3
 80297b4:	4413      	add	r3, r2
 80297b6:	009b      	lsls	r3, r3, #2
 80297b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80297bc:	687a      	ldr	r2, [r7, #4]
 80297be:	4413      	add	r3, r2
 80297c0:	3304      	adds	r3, #4
 80297c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80297c4:	68fb      	ldr	r3, [r7, #12]
 80297c6:	2200      	movs	r2, #0
 80297c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80297ca:	78fb      	ldrb	r3, [r7, #3]
 80297cc:	f003 030f 	and.w	r3, r3, #15
 80297d0:	b2da      	uxtb	r2, r3
 80297d2:	68fb      	ldr	r3, [r7, #12]
 80297d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80297d6:	687b      	ldr	r3, [r7, #4]
 80297d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80297dc:	2b01      	cmp	r3, #1
 80297de:	d101      	bne.n	80297e4 <HAL_PCD_EP_Close+0x6e>
 80297e0:	2302      	movs	r3, #2
 80297e2:	e00e      	b.n	8029802 <HAL_PCD_EP_Close+0x8c>
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	2201      	movs	r2, #1
 80297e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	681b      	ldr	r3, [r3, #0]
 80297f0:	68f9      	ldr	r1, [r7, #12]
 80297f2:	4618      	mov	r0, r3
 80297f4:	f003 ff04 	bl	802d600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80297f8:	687b      	ldr	r3, [r7, #4]
 80297fa:	2200      	movs	r2, #0
 80297fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8029800:	2300      	movs	r3, #0
}
 8029802:	4618      	mov	r0, r3
 8029804:	3710      	adds	r7, #16
 8029806:	46bd      	mov	sp, r7
 8029808:	bd80      	pop	{r7, pc}

0802980a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 802980a:	b580      	push	{r7, lr}
 802980c:	b086      	sub	sp, #24
 802980e:	af00      	add	r7, sp, #0
 8029810:	60f8      	str	r0, [r7, #12]
 8029812:	607a      	str	r2, [r7, #4]
 8029814:	603b      	str	r3, [r7, #0]
 8029816:	460b      	mov	r3, r1
 8029818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 802981a:	7afb      	ldrb	r3, [r7, #11]
 802981c:	f003 020f 	and.w	r2, r3, #15
 8029820:	4613      	mov	r3, r2
 8029822:	00db      	lsls	r3, r3, #3
 8029824:	4413      	add	r3, r2
 8029826:	009b      	lsls	r3, r3, #2
 8029828:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802982c:	68fa      	ldr	r2, [r7, #12]
 802982e:	4413      	add	r3, r2
 8029830:	3304      	adds	r3, #4
 8029832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8029834:	697b      	ldr	r3, [r7, #20]
 8029836:	687a      	ldr	r2, [r7, #4]
 8029838:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 802983a:	697b      	ldr	r3, [r7, #20]
 802983c:	683a      	ldr	r2, [r7, #0]
 802983e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029840:	697b      	ldr	r3, [r7, #20]
 8029842:	2200      	movs	r2, #0
 8029844:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8029846:	697b      	ldr	r3, [r7, #20]
 8029848:	2200      	movs	r2, #0
 802984a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 802984c:	7afb      	ldrb	r3, [r7, #11]
 802984e:	f003 030f 	and.w	r3, r3, #15
 8029852:	b2da      	uxtb	r2, r3
 8029854:	697b      	ldr	r3, [r7, #20]
 8029856:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	691b      	ldr	r3, [r3, #16]
 802985c:	2b01      	cmp	r3, #1
 802985e:	d102      	bne.n	8029866 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029860:	687a      	ldr	r2, [r7, #4]
 8029862:	697b      	ldr	r3, [r7, #20]
 8029864:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8029866:	7afb      	ldrb	r3, [r7, #11]
 8029868:	f003 030f 	and.w	r3, r3, #15
 802986c:	2b00      	cmp	r3, #0
 802986e:	d109      	bne.n	8029884 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029870:	68fb      	ldr	r3, [r7, #12]
 8029872:	6818      	ldr	r0, [r3, #0]
 8029874:	68fb      	ldr	r3, [r7, #12]
 8029876:	691b      	ldr	r3, [r3, #16]
 8029878:	b2db      	uxtb	r3, r3
 802987a:	461a      	mov	r2, r3
 802987c:	6979      	ldr	r1, [r7, #20]
 802987e:	f004 f9e3 	bl	802dc48 <USB_EP0StartXfer>
 8029882:	e008      	b.n	8029896 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029884:	68fb      	ldr	r3, [r7, #12]
 8029886:	6818      	ldr	r0, [r3, #0]
 8029888:	68fb      	ldr	r3, [r7, #12]
 802988a:	691b      	ldr	r3, [r3, #16]
 802988c:	b2db      	uxtb	r3, r3
 802988e:	461a      	mov	r2, r3
 8029890:	6979      	ldr	r1, [r7, #20]
 8029892:	f003 ff91 	bl	802d7b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8029896:	2300      	movs	r3, #0
}
 8029898:	4618      	mov	r0, r3
 802989a:	3718      	adds	r7, #24
 802989c:	46bd      	mov	sp, r7
 802989e:	bd80      	pop	{r7, pc}

080298a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80298a0:	b480      	push	{r7}
 80298a2:	b083      	sub	sp, #12
 80298a4:	af00      	add	r7, sp, #0
 80298a6:	6078      	str	r0, [r7, #4]
 80298a8:	460b      	mov	r3, r1
 80298aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80298ac:	78fb      	ldrb	r3, [r7, #3]
 80298ae:	f003 020f 	and.w	r2, r3, #15
 80298b2:	6879      	ldr	r1, [r7, #4]
 80298b4:	4613      	mov	r3, r2
 80298b6:	00db      	lsls	r3, r3, #3
 80298b8:	4413      	add	r3, r2
 80298ba:	009b      	lsls	r3, r3, #2
 80298bc:	440b      	add	r3, r1
 80298be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80298c2:	681b      	ldr	r3, [r3, #0]
}
 80298c4:	4618      	mov	r0, r3
 80298c6:	370c      	adds	r7, #12
 80298c8:	46bd      	mov	sp, r7
 80298ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298ce:	4770      	bx	lr

080298d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80298d0:	b580      	push	{r7, lr}
 80298d2:	b086      	sub	sp, #24
 80298d4:	af00      	add	r7, sp, #0
 80298d6:	60f8      	str	r0, [r7, #12]
 80298d8:	607a      	str	r2, [r7, #4]
 80298da:	603b      	str	r3, [r7, #0]
 80298dc:	460b      	mov	r3, r1
 80298de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80298e0:	7afb      	ldrb	r3, [r7, #11]
 80298e2:	f003 020f 	and.w	r2, r3, #15
 80298e6:	4613      	mov	r3, r2
 80298e8:	00db      	lsls	r3, r3, #3
 80298ea:	4413      	add	r3, r2
 80298ec:	009b      	lsls	r3, r3, #2
 80298ee:	3338      	adds	r3, #56	; 0x38
 80298f0:	68fa      	ldr	r2, [r7, #12]
 80298f2:	4413      	add	r3, r2
 80298f4:	3304      	adds	r3, #4
 80298f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80298f8:	697b      	ldr	r3, [r7, #20]
 80298fa:	687a      	ldr	r2, [r7, #4]
 80298fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80298fe:	697b      	ldr	r3, [r7, #20]
 8029900:	683a      	ldr	r2, [r7, #0]
 8029902:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8029904:	697b      	ldr	r3, [r7, #20]
 8029906:	2200      	movs	r2, #0
 8029908:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 802990a:	697b      	ldr	r3, [r7, #20]
 802990c:	2201      	movs	r2, #1
 802990e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029910:	7afb      	ldrb	r3, [r7, #11]
 8029912:	f003 030f 	and.w	r3, r3, #15
 8029916:	b2da      	uxtb	r2, r3
 8029918:	697b      	ldr	r3, [r7, #20]
 802991a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 802991c:	68fb      	ldr	r3, [r7, #12]
 802991e:	691b      	ldr	r3, [r3, #16]
 8029920:	2b01      	cmp	r3, #1
 8029922:	d102      	bne.n	802992a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8029924:	687a      	ldr	r2, [r7, #4]
 8029926:	697b      	ldr	r3, [r7, #20]
 8029928:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 802992a:	7afb      	ldrb	r3, [r7, #11]
 802992c:	f003 030f 	and.w	r3, r3, #15
 8029930:	2b00      	cmp	r3, #0
 8029932:	d109      	bne.n	8029948 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029934:	68fb      	ldr	r3, [r7, #12]
 8029936:	6818      	ldr	r0, [r3, #0]
 8029938:	68fb      	ldr	r3, [r7, #12]
 802993a:	691b      	ldr	r3, [r3, #16]
 802993c:	b2db      	uxtb	r3, r3
 802993e:	461a      	mov	r2, r3
 8029940:	6979      	ldr	r1, [r7, #20]
 8029942:	f004 f981 	bl	802dc48 <USB_EP0StartXfer>
 8029946:	e008      	b.n	802995a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8029948:	68fb      	ldr	r3, [r7, #12]
 802994a:	6818      	ldr	r0, [r3, #0]
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	691b      	ldr	r3, [r3, #16]
 8029950:	b2db      	uxtb	r3, r3
 8029952:	461a      	mov	r2, r3
 8029954:	6979      	ldr	r1, [r7, #20]
 8029956:	f003 ff2f 	bl	802d7b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 802995a:	2300      	movs	r3, #0
}
 802995c:	4618      	mov	r0, r3
 802995e:	3718      	adds	r7, #24
 8029960:	46bd      	mov	sp, r7
 8029962:	bd80      	pop	{r7, pc}

08029964 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029964:	b580      	push	{r7, lr}
 8029966:	b084      	sub	sp, #16
 8029968:	af00      	add	r7, sp, #0
 802996a:	6078      	str	r0, [r7, #4]
 802996c:	460b      	mov	r3, r1
 802996e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8029970:	78fb      	ldrb	r3, [r7, #3]
 8029972:	f003 020f 	and.w	r2, r3, #15
 8029976:	687b      	ldr	r3, [r7, #4]
 8029978:	685b      	ldr	r3, [r3, #4]
 802997a:	429a      	cmp	r2, r3
 802997c:	d901      	bls.n	8029982 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 802997e:	2301      	movs	r3, #1
 8029980:	e050      	b.n	8029a24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029986:	2b00      	cmp	r3, #0
 8029988:	da0f      	bge.n	80299aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 802998a:	78fb      	ldrb	r3, [r7, #3]
 802998c:	f003 020f 	and.w	r2, r3, #15
 8029990:	4613      	mov	r3, r2
 8029992:	00db      	lsls	r3, r3, #3
 8029994:	4413      	add	r3, r2
 8029996:	009b      	lsls	r3, r3, #2
 8029998:	3338      	adds	r3, #56	; 0x38
 802999a:	687a      	ldr	r2, [r7, #4]
 802999c:	4413      	add	r3, r2
 802999e:	3304      	adds	r3, #4
 80299a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	2201      	movs	r2, #1
 80299a6:	705a      	strb	r2, [r3, #1]
 80299a8:	e00d      	b.n	80299c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80299aa:	78fa      	ldrb	r2, [r7, #3]
 80299ac:	4613      	mov	r3, r2
 80299ae:	00db      	lsls	r3, r3, #3
 80299b0:	4413      	add	r3, r2
 80299b2:	009b      	lsls	r3, r3, #2
 80299b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80299b8:	687a      	ldr	r2, [r7, #4]
 80299ba:	4413      	add	r3, r2
 80299bc:	3304      	adds	r3, #4
 80299be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80299c0:	68fb      	ldr	r3, [r7, #12]
 80299c2:	2200      	movs	r2, #0
 80299c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80299c6:	68fb      	ldr	r3, [r7, #12]
 80299c8:	2201      	movs	r2, #1
 80299ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80299cc:	78fb      	ldrb	r3, [r7, #3]
 80299ce:	f003 030f 	and.w	r3, r3, #15
 80299d2:	b2da      	uxtb	r2, r3
 80299d4:	68fb      	ldr	r3, [r7, #12]
 80299d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80299d8:	687b      	ldr	r3, [r7, #4]
 80299da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80299de:	2b01      	cmp	r3, #1
 80299e0:	d101      	bne.n	80299e6 <HAL_PCD_EP_SetStall+0x82>
 80299e2:	2302      	movs	r3, #2
 80299e4:	e01e      	b.n	8029a24 <HAL_PCD_EP_SetStall+0xc0>
 80299e6:	687b      	ldr	r3, [r7, #4]
 80299e8:	2201      	movs	r2, #1
 80299ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80299ee:	687b      	ldr	r3, [r7, #4]
 80299f0:	681b      	ldr	r3, [r3, #0]
 80299f2:	68f9      	ldr	r1, [r7, #12]
 80299f4:	4618      	mov	r0, r3
 80299f6:	f004 fbbf 	bl	802e178 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80299fa:	78fb      	ldrb	r3, [r7, #3]
 80299fc:	f003 030f 	and.w	r3, r3, #15
 8029a00:	2b00      	cmp	r3, #0
 8029a02:	d10a      	bne.n	8029a1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8029a04:	687b      	ldr	r3, [r7, #4]
 8029a06:	6818      	ldr	r0, [r3, #0]
 8029a08:	687b      	ldr	r3, [r7, #4]
 8029a0a:	691b      	ldr	r3, [r3, #16]
 8029a0c:	b2d9      	uxtb	r1, r3
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029a14:	461a      	mov	r2, r3
 8029a16:	f004 fdaf 	bl	802e578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8029a1a:	687b      	ldr	r3, [r7, #4]
 8029a1c:	2200      	movs	r2, #0
 8029a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029a22:	2300      	movs	r3, #0
}
 8029a24:	4618      	mov	r0, r3
 8029a26:	3710      	adds	r7, #16
 8029a28:	46bd      	mov	sp, r7
 8029a2a:	bd80      	pop	{r7, pc}

08029a2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029a2c:	b580      	push	{r7, lr}
 8029a2e:	b084      	sub	sp, #16
 8029a30:	af00      	add	r7, sp, #0
 8029a32:	6078      	str	r0, [r7, #4]
 8029a34:	460b      	mov	r3, r1
 8029a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8029a38:	78fb      	ldrb	r3, [r7, #3]
 8029a3a:	f003 020f 	and.w	r2, r3, #15
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	685b      	ldr	r3, [r3, #4]
 8029a42:	429a      	cmp	r2, r3
 8029a44:	d901      	bls.n	8029a4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8029a46:	2301      	movs	r3, #1
 8029a48:	e042      	b.n	8029ad0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8029a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	da0f      	bge.n	8029a72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029a52:	78fb      	ldrb	r3, [r7, #3]
 8029a54:	f003 020f 	and.w	r2, r3, #15
 8029a58:	4613      	mov	r3, r2
 8029a5a:	00db      	lsls	r3, r3, #3
 8029a5c:	4413      	add	r3, r2
 8029a5e:	009b      	lsls	r3, r3, #2
 8029a60:	3338      	adds	r3, #56	; 0x38
 8029a62:	687a      	ldr	r2, [r7, #4]
 8029a64:	4413      	add	r3, r2
 8029a66:	3304      	adds	r3, #4
 8029a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8029a6a:	68fb      	ldr	r3, [r7, #12]
 8029a6c:	2201      	movs	r2, #1
 8029a6e:	705a      	strb	r2, [r3, #1]
 8029a70:	e00f      	b.n	8029a92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029a72:	78fb      	ldrb	r3, [r7, #3]
 8029a74:	f003 020f 	and.w	r2, r3, #15
 8029a78:	4613      	mov	r3, r2
 8029a7a:	00db      	lsls	r3, r3, #3
 8029a7c:	4413      	add	r3, r2
 8029a7e:	009b      	lsls	r3, r3, #2
 8029a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029a84:	687a      	ldr	r2, [r7, #4]
 8029a86:	4413      	add	r3, r2
 8029a88:	3304      	adds	r3, #4
 8029a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8029a8c:	68fb      	ldr	r3, [r7, #12]
 8029a8e:	2200      	movs	r2, #0
 8029a90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8029a92:	68fb      	ldr	r3, [r7, #12]
 8029a94:	2200      	movs	r2, #0
 8029a96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8029a98:	78fb      	ldrb	r3, [r7, #3]
 8029a9a:	f003 030f 	and.w	r3, r3, #15
 8029a9e:	b2da      	uxtb	r2, r3
 8029aa0:	68fb      	ldr	r3, [r7, #12]
 8029aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8029aa4:	687b      	ldr	r3, [r7, #4]
 8029aa6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8029aaa:	2b01      	cmp	r3, #1
 8029aac:	d101      	bne.n	8029ab2 <HAL_PCD_EP_ClrStall+0x86>
 8029aae:	2302      	movs	r3, #2
 8029ab0:	e00e      	b.n	8029ad0 <HAL_PCD_EP_ClrStall+0xa4>
 8029ab2:	687b      	ldr	r3, [r7, #4]
 8029ab4:	2201      	movs	r2, #1
 8029ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	681b      	ldr	r3, [r3, #0]
 8029abe:	68f9      	ldr	r1, [r7, #12]
 8029ac0:	4618      	mov	r0, r3
 8029ac2:	f004 fbc7 	bl	802e254 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8029ac6:	687b      	ldr	r3, [r7, #4]
 8029ac8:	2200      	movs	r2, #0
 8029aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8029ace:	2300      	movs	r3, #0
}
 8029ad0:	4618      	mov	r0, r3
 8029ad2:	3710      	adds	r7, #16
 8029ad4:	46bd      	mov	sp, r7
 8029ad6:	bd80      	pop	{r7, pc}

08029ad8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8029ad8:	b580      	push	{r7, lr}
 8029ada:	b084      	sub	sp, #16
 8029adc:	af00      	add	r7, sp, #0
 8029ade:	6078      	str	r0, [r7, #4]
 8029ae0:	460b      	mov	r3, r1
 8029ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8029ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029ae8:	2b00      	cmp	r3, #0
 8029aea:	da0c      	bge.n	8029b06 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8029aec:	78fb      	ldrb	r3, [r7, #3]
 8029aee:	f003 020f 	and.w	r2, r3, #15
 8029af2:	4613      	mov	r3, r2
 8029af4:	00db      	lsls	r3, r3, #3
 8029af6:	4413      	add	r3, r2
 8029af8:	009b      	lsls	r3, r3, #2
 8029afa:	3338      	adds	r3, #56	; 0x38
 8029afc:	687a      	ldr	r2, [r7, #4]
 8029afe:	4413      	add	r3, r2
 8029b00:	3304      	adds	r3, #4
 8029b02:	60fb      	str	r3, [r7, #12]
 8029b04:	e00c      	b.n	8029b20 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8029b06:	78fb      	ldrb	r3, [r7, #3]
 8029b08:	f003 020f 	and.w	r2, r3, #15
 8029b0c:	4613      	mov	r3, r2
 8029b0e:	00db      	lsls	r3, r3, #3
 8029b10:	4413      	add	r3, r2
 8029b12:	009b      	lsls	r3, r3, #2
 8029b14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029b18:	687a      	ldr	r2, [r7, #4]
 8029b1a:	4413      	add	r3, r2
 8029b1c:	3304      	adds	r3, #4
 8029b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8029b20:	687b      	ldr	r3, [r7, #4]
 8029b22:	681b      	ldr	r3, [r3, #0]
 8029b24:	68f9      	ldr	r1, [r7, #12]
 8029b26:	4618      	mov	r0, r3
 8029b28:	f004 f9e6 	bl	802def8 <USB_EPStopXfer>
 8029b2c:	4603      	mov	r3, r0
 8029b2e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8029b30:	7afb      	ldrb	r3, [r7, #11]
}
 8029b32:	4618      	mov	r0, r3
 8029b34:	3710      	adds	r7, #16
 8029b36:	46bd      	mov	sp, r7
 8029b38:	bd80      	pop	{r7, pc}

08029b3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029b3a:	b580      	push	{r7, lr}
 8029b3c:	b08a      	sub	sp, #40	; 0x28
 8029b3e:	af02      	add	r7, sp, #8
 8029b40:	6078      	str	r0, [r7, #4]
 8029b42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029b44:	687b      	ldr	r3, [r7, #4]
 8029b46:	681b      	ldr	r3, [r3, #0]
 8029b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029b4a:	697b      	ldr	r3, [r7, #20]
 8029b4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8029b4e:	683a      	ldr	r2, [r7, #0]
 8029b50:	4613      	mov	r3, r2
 8029b52:	00db      	lsls	r3, r3, #3
 8029b54:	4413      	add	r3, r2
 8029b56:	009b      	lsls	r3, r3, #2
 8029b58:	3338      	adds	r3, #56	; 0x38
 8029b5a:	687a      	ldr	r2, [r7, #4]
 8029b5c:	4413      	add	r3, r2
 8029b5e:	3304      	adds	r3, #4
 8029b60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8029b62:	68fb      	ldr	r3, [r7, #12]
 8029b64:	6a1a      	ldr	r2, [r3, #32]
 8029b66:	68fb      	ldr	r3, [r7, #12]
 8029b68:	699b      	ldr	r3, [r3, #24]
 8029b6a:	429a      	cmp	r2, r3
 8029b6c:	d901      	bls.n	8029b72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8029b6e:	2301      	movs	r3, #1
 8029b70:	e06c      	b.n	8029c4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8029b72:	68fb      	ldr	r3, [r7, #12]
 8029b74:	699a      	ldr	r2, [r3, #24]
 8029b76:	68fb      	ldr	r3, [r7, #12]
 8029b78:	6a1b      	ldr	r3, [r3, #32]
 8029b7a:	1ad3      	subs	r3, r2, r3
 8029b7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8029b7e:	68fb      	ldr	r3, [r7, #12]
 8029b80:	68db      	ldr	r3, [r3, #12]
 8029b82:	69fa      	ldr	r2, [r7, #28]
 8029b84:	429a      	cmp	r2, r3
 8029b86:	d902      	bls.n	8029b8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8029b88:	68fb      	ldr	r3, [r7, #12]
 8029b8a:	68db      	ldr	r3, [r3, #12]
 8029b8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8029b8e:	69fb      	ldr	r3, [r7, #28]
 8029b90:	3303      	adds	r3, #3
 8029b92:	089b      	lsrs	r3, r3, #2
 8029b94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029b96:	e02b      	b.n	8029bf0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8029b98:	68fb      	ldr	r3, [r7, #12]
 8029b9a:	699a      	ldr	r2, [r3, #24]
 8029b9c:	68fb      	ldr	r3, [r7, #12]
 8029b9e:	6a1b      	ldr	r3, [r3, #32]
 8029ba0:	1ad3      	subs	r3, r2, r3
 8029ba2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8029ba4:	68fb      	ldr	r3, [r7, #12]
 8029ba6:	68db      	ldr	r3, [r3, #12]
 8029ba8:	69fa      	ldr	r2, [r7, #28]
 8029baa:	429a      	cmp	r2, r3
 8029bac:	d902      	bls.n	8029bb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8029bae:	68fb      	ldr	r3, [r7, #12]
 8029bb0:	68db      	ldr	r3, [r3, #12]
 8029bb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8029bb4:	69fb      	ldr	r3, [r7, #28]
 8029bb6:	3303      	adds	r3, #3
 8029bb8:	089b      	lsrs	r3, r3, #2
 8029bba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029bbc:	68fb      	ldr	r3, [r7, #12]
 8029bbe:	6919      	ldr	r1, [r3, #16]
 8029bc0:	683b      	ldr	r3, [r7, #0]
 8029bc2:	b2da      	uxtb	r2, r3
 8029bc4:	69fb      	ldr	r3, [r7, #28]
 8029bc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8029bc8:	687b      	ldr	r3, [r7, #4]
 8029bca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8029bcc:	b2db      	uxtb	r3, r3
 8029bce:	9300      	str	r3, [sp, #0]
 8029bd0:	4603      	mov	r3, r0
 8029bd2:	6978      	ldr	r0, [r7, #20]
 8029bd4:	f004 fa3a 	bl	802e04c <USB_WritePacket>

    ep->xfer_buff  += len;
 8029bd8:	68fb      	ldr	r3, [r7, #12]
 8029bda:	691a      	ldr	r2, [r3, #16]
 8029bdc:	69fb      	ldr	r3, [r7, #28]
 8029bde:	441a      	add	r2, r3
 8029be0:	68fb      	ldr	r3, [r7, #12]
 8029be2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8029be4:	68fb      	ldr	r3, [r7, #12]
 8029be6:	6a1a      	ldr	r2, [r3, #32]
 8029be8:	69fb      	ldr	r3, [r7, #28]
 8029bea:	441a      	add	r2, r3
 8029bec:	68fb      	ldr	r3, [r7, #12]
 8029bee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029bf0:	683b      	ldr	r3, [r7, #0]
 8029bf2:	015a      	lsls	r2, r3, #5
 8029bf4:	693b      	ldr	r3, [r7, #16]
 8029bf6:	4413      	add	r3, r2
 8029bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8029bfc:	699b      	ldr	r3, [r3, #24]
 8029bfe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029c00:	69ba      	ldr	r2, [r7, #24]
 8029c02:	429a      	cmp	r2, r3
 8029c04:	d809      	bhi.n	8029c1a <PCD_WriteEmptyTxFifo+0xe0>
 8029c06:	68fb      	ldr	r3, [r7, #12]
 8029c08:	6a1a      	ldr	r2, [r3, #32]
 8029c0a:	68fb      	ldr	r3, [r7, #12]
 8029c0c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8029c0e:	429a      	cmp	r2, r3
 8029c10:	d203      	bcs.n	8029c1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8029c12:	68fb      	ldr	r3, [r7, #12]
 8029c14:	699b      	ldr	r3, [r3, #24]
 8029c16:	2b00      	cmp	r3, #0
 8029c18:	d1be      	bne.n	8029b98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8029c1a:	68fb      	ldr	r3, [r7, #12]
 8029c1c:	699a      	ldr	r2, [r3, #24]
 8029c1e:	68fb      	ldr	r3, [r7, #12]
 8029c20:	6a1b      	ldr	r3, [r3, #32]
 8029c22:	429a      	cmp	r2, r3
 8029c24:	d811      	bhi.n	8029c4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8029c26:	683b      	ldr	r3, [r7, #0]
 8029c28:	f003 030f 	and.w	r3, r3, #15
 8029c2c:	2201      	movs	r2, #1
 8029c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8029c32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8029c34:	693b      	ldr	r3, [r7, #16]
 8029c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8029c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029c3c:	68bb      	ldr	r3, [r7, #8]
 8029c3e:	43db      	mvns	r3, r3
 8029c40:	6939      	ldr	r1, [r7, #16]
 8029c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8029c46:	4013      	ands	r3, r2
 8029c48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8029c4a:	2300      	movs	r3, #0
}
 8029c4c:	4618      	mov	r0, r3
 8029c4e:	3720      	adds	r7, #32
 8029c50:	46bd      	mov	sp, r7
 8029c52:	bd80      	pop	{r7, pc}

08029c54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029c54:	b580      	push	{r7, lr}
 8029c56:	b088      	sub	sp, #32
 8029c58:	af00      	add	r7, sp, #0
 8029c5a:	6078      	str	r0, [r7, #4]
 8029c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029c5e:	687b      	ldr	r3, [r7, #4]
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029c64:	69fb      	ldr	r3, [r7, #28]
 8029c66:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029c68:	69fb      	ldr	r3, [r7, #28]
 8029c6a:	333c      	adds	r3, #60	; 0x3c
 8029c6c:	3304      	adds	r3, #4
 8029c6e:	681b      	ldr	r3, [r3, #0]
 8029c70:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029c72:	683b      	ldr	r3, [r7, #0]
 8029c74:	015a      	lsls	r2, r3, #5
 8029c76:	69bb      	ldr	r3, [r7, #24]
 8029c78:	4413      	add	r3, r2
 8029c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029c7e:	689b      	ldr	r3, [r3, #8]
 8029c80:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8029c82:	687b      	ldr	r3, [r7, #4]
 8029c84:	691b      	ldr	r3, [r3, #16]
 8029c86:	2b01      	cmp	r3, #1
 8029c88:	d17b      	bne.n	8029d82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8029c8a:	693b      	ldr	r3, [r7, #16]
 8029c8c:	f003 0308 	and.w	r3, r3, #8
 8029c90:	2b00      	cmp	r3, #0
 8029c92:	d015      	beq.n	8029cc0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029c94:	697b      	ldr	r3, [r7, #20]
 8029c96:	4a61      	ldr	r2, [pc, #388]	; (8029e1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029c98:	4293      	cmp	r3, r2
 8029c9a:	f240 80b9 	bls.w	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029c9e:	693b      	ldr	r3, [r7, #16]
 8029ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029ca4:	2b00      	cmp	r3, #0
 8029ca6:	f000 80b3 	beq.w	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029caa:	683b      	ldr	r3, [r7, #0]
 8029cac:	015a      	lsls	r2, r3, #5
 8029cae:	69bb      	ldr	r3, [r7, #24]
 8029cb0:	4413      	add	r3, r2
 8029cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cb6:	461a      	mov	r2, r3
 8029cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029cbc:	6093      	str	r3, [r2, #8]
 8029cbe:	e0a7      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8029cc0:	693b      	ldr	r3, [r7, #16]
 8029cc2:	f003 0320 	and.w	r3, r3, #32
 8029cc6:	2b00      	cmp	r3, #0
 8029cc8:	d009      	beq.n	8029cde <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029cca:	683b      	ldr	r3, [r7, #0]
 8029ccc:	015a      	lsls	r2, r3, #5
 8029cce:	69bb      	ldr	r3, [r7, #24]
 8029cd0:	4413      	add	r3, r2
 8029cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029cd6:	461a      	mov	r2, r3
 8029cd8:	2320      	movs	r3, #32
 8029cda:	6093      	str	r3, [r2, #8]
 8029cdc:	e098      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8029cde:	693b      	ldr	r3, [r7, #16]
 8029ce0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8029ce4:	2b00      	cmp	r3, #0
 8029ce6:	f040 8093 	bne.w	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029cea:	697b      	ldr	r3, [r7, #20]
 8029cec:	4a4b      	ldr	r2, [pc, #300]	; (8029e1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8029cee:	4293      	cmp	r3, r2
 8029cf0:	d90f      	bls.n	8029d12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029cf2:	693b      	ldr	r3, [r7, #16]
 8029cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029cf8:	2b00      	cmp	r3, #0
 8029cfa:	d00a      	beq.n	8029d12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029cfc:	683b      	ldr	r3, [r7, #0]
 8029cfe:	015a      	lsls	r2, r3, #5
 8029d00:	69bb      	ldr	r3, [r7, #24]
 8029d02:	4413      	add	r3, r2
 8029d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d08:	461a      	mov	r2, r3
 8029d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029d0e:	6093      	str	r3, [r2, #8]
 8029d10:	e07e      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8029d12:	683a      	ldr	r2, [r7, #0]
 8029d14:	4613      	mov	r3, r2
 8029d16:	00db      	lsls	r3, r3, #3
 8029d18:	4413      	add	r3, r2
 8029d1a:	009b      	lsls	r3, r3, #2
 8029d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8029d20:	687a      	ldr	r2, [r7, #4]
 8029d22:	4413      	add	r3, r2
 8029d24:	3304      	adds	r3, #4
 8029d26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8029d28:	68fb      	ldr	r3, [r7, #12]
 8029d2a:	69da      	ldr	r2, [r3, #28]
 8029d2c:	683b      	ldr	r3, [r7, #0]
 8029d2e:	0159      	lsls	r1, r3, #5
 8029d30:	69bb      	ldr	r3, [r7, #24]
 8029d32:	440b      	add	r3, r1
 8029d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029d38:	691b      	ldr	r3, [r3, #16]
 8029d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8029d3e:	1ad2      	subs	r2, r2, r3
 8029d40:	68fb      	ldr	r3, [r7, #12]
 8029d42:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8029d44:	683b      	ldr	r3, [r7, #0]
 8029d46:	2b00      	cmp	r3, #0
 8029d48:	d114      	bne.n	8029d74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8029d4a:	68fb      	ldr	r3, [r7, #12]
 8029d4c:	699b      	ldr	r3, [r3, #24]
 8029d4e:	2b00      	cmp	r3, #0
 8029d50:	d109      	bne.n	8029d66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	6818      	ldr	r0, [r3, #0]
 8029d56:	687b      	ldr	r3, [r7, #4]
 8029d58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029d5c:	461a      	mov	r2, r3
 8029d5e:	2101      	movs	r1, #1
 8029d60:	f004 fc0a 	bl	802e578 <USB_EP0_OutStart>
 8029d64:	e006      	b.n	8029d74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8029d66:	68fb      	ldr	r3, [r7, #12]
 8029d68:	691a      	ldr	r2, [r3, #16]
 8029d6a:	68fb      	ldr	r3, [r7, #12]
 8029d6c:	6a1b      	ldr	r3, [r3, #32]
 8029d6e:	441a      	add	r2, r3
 8029d70:	68fb      	ldr	r3, [r7, #12]
 8029d72:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029d74:	683b      	ldr	r3, [r7, #0]
 8029d76:	b2db      	uxtb	r3, r3
 8029d78:	4619      	mov	r1, r3
 8029d7a:	6878      	ldr	r0, [r7, #4]
 8029d7c:	f007 f8de 	bl	8030f3c <HAL_PCD_DataOutStageCallback>
 8029d80:	e046      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8029d82:	697b      	ldr	r3, [r7, #20]
 8029d84:	4a26      	ldr	r2, [pc, #152]	; (8029e20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8029d86:	4293      	cmp	r3, r2
 8029d88:	d124      	bne.n	8029dd4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8029d8a:	693b      	ldr	r3, [r7, #16]
 8029d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8029d90:	2b00      	cmp	r3, #0
 8029d92:	d00a      	beq.n	8029daa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029d94:	683b      	ldr	r3, [r7, #0]
 8029d96:	015a      	lsls	r2, r3, #5
 8029d98:	69bb      	ldr	r3, [r7, #24]
 8029d9a:	4413      	add	r3, r2
 8029d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029da0:	461a      	mov	r2, r3
 8029da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029da6:	6093      	str	r3, [r2, #8]
 8029da8:	e032      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8029daa:	693b      	ldr	r3, [r7, #16]
 8029dac:	f003 0320 	and.w	r3, r3, #32
 8029db0:	2b00      	cmp	r3, #0
 8029db2:	d008      	beq.n	8029dc6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8029db4:	683b      	ldr	r3, [r7, #0]
 8029db6:	015a      	lsls	r2, r3, #5
 8029db8:	69bb      	ldr	r3, [r7, #24]
 8029dba:	4413      	add	r3, r2
 8029dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029dc0:	461a      	mov	r2, r3
 8029dc2:	2320      	movs	r3, #32
 8029dc4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029dc6:	683b      	ldr	r3, [r7, #0]
 8029dc8:	b2db      	uxtb	r3, r3
 8029dca:	4619      	mov	r1, r3
 8029dcc:	6878      	ldr	r0, [r7, #4]
 8029dce:	f007 f8b5 	bl	8030f3c <HAL_PCD_DataOutStageCallback>
 8029dd2:	e01d      	b.n	8029e10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8029dd4:	683b      	ldr	r3, [r7, #0]
 8029dd6:	2b00      	cmp	r3, #0
 8029dd8:	d114      	bne.n	8029e04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8029dda:	6879      	ldr	r1, [r7, #4]
 8029ddc:	683a      	ldr	r2, [r7, #0]
 8029dde:	4613      	mov	r3, r2
 8029de0:	00db      	lsls	r3, r3, #3
 8029de2:	4413      	add	r3, r2
 8029de4:	009b      	lsls	r3, r3, #2
 8029de6:	440b      	add	r3, r1
 8029de8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8029dec:	681b      	ldr	r3, [r3, #0]
 8029dee:	2b00      	cmp	r3, #0
 8029df0:	d108      	bne.n	8029e04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	6818      	ldr	r0, [r3, #0]
 8029df6:	687b      	ldr	r3, [r7, #4]
 8029df8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029dfc:	461a      	mov	r2, r3
 8029dfe:	2100      	movs	r1, #0
 8029e00:	f004 fbba 	bl	802e578 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8029e04:	683b      	ldr	r3, [r7, #0]
 8029e06:	b2db      	uxtb	r3, r3
 8029e08:	4619      	mov	r1, r3
 8029e0a:	6878      	ldr	r0, [r7, #4]
 8029e0c:	f007 f896 	bl	8030f3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8029e10:	2300      	movs	r3, #0
}
 8029e12:	4618      	mov	r0, r3
 8029e14:	3720      	adds	r7, #32
 8029e16:	46bd      	mov	sp, r7
 8029e18:	bd80      	pop	{r7, pc}
 8029e1a:	bf00      	nop
 8029e1c:	4f54300a 	.word	0x4f54300a
 8029e20:	4f54310a 	.word	0x4f54310a

08029e24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8029e24:	b580      	push	{r7, lr}
 8029e26:	b086      	sub	sp, #24
 8029e28:	af00      	add	r7, sp, #0
 8029e2a:	6078      	str	r0, [r7, #4]
 8029e2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8029e2e:	687b      	ldr	r3, [r7, #4]
 8029e30:	681b      	ldr	r3, [r3, #0]
 8029e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8029e34:	697b      	ldr	r3, [r7, #20]
 8029e36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8029e38:	697b      	ldr	r3, [r7, #20]
 8029e3a:	333c      	adds	r3, #60	; 0x3c
 8029e3c:	3304      	adds	r3, #4
 8029e3e:	681b      	ldr	r3, [r3, #0]
 8029e40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8029e42:	683b      	ldr	r3, [r7, #0]
 8029e44:	015a      	lsls	r2, r3, #5
 8029e46:	693b      	ldr	r3, [r7, #16]
 8029e48:	4413      	add	r3, r2
 8029e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029e4e:	689b      	ldr	r3, [r3, #8]
 8029e50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029e52:	68fb      	ldr	r3, [r7, #12]
 8029e54:	4a15      	ldr	r2, [pc, #84]	; (8029eac <PCD_EP_OutSetupPacket_int+0x88>)
 8029e56:	4293      	cmp	r3, r2
 8029e58:	d90e      	bls.n	8029e78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8029e5a:	68bb      	ldr	r3, [r7, #8]
 8029e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8029e60:	2b00      	cmp	r3, #0
 8029e62:	d009      	beq.n	8029e78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8029e64:	683b      	ldr	r3, [r7, #0]
 8029e66:	015a      	lsls	r2, r3, #5
 8029e68:	693b      	ldr	r3, [r7, #16]
 8029e6a:	4413      	add	r3, r2
 8029e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8029e70:	461a      	mov	r2, r3
 8029e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8029e76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8029e78:	6878      	ldr	r0, [r7, #4]
 8029e7a:	f007 f84d 	bl	8030f18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8029e7e:	68fb      	ldr	r3, [r7, #12]
 8029e80:	4a0a      	ldr	r2, [pc, #40]	; (8029eac <PCD_EP_OutSetupPacket_int+0x88>)
 8029e82:	4293      	cmp	r3, r2
 8029e84:	d90c      	bls.n	8029ea0 <PCD_EP_OutSetupPacket_int+0x7c>
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	691b      	ldr	r3, [r3, #16]
 8029e8a:	2b01      	cmp	r3, #1
 8029e8c:	d108      	bne.n	8029ea0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8029e8e:	687b      	ldr	r3, [r7, #4]
 8029e90:	6818      	ldr	r0, [r3, #0]
 8029e92:	687b      	ldr	r3, [r7, #4]
 8029e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8029e98:	461a      	mov	r2, r3
 8029e9a:	2101      	movs	r1, #1
 8029e9c:	f004 fb6c 	bl	802e578 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8029ea0:	2300      	movs	r3, #0
}
 8029ea2:	4618      	mov	r0, r3
 8029ea4:	3718      	adds	r7, #24
 8029ea6:	46bd      	mov	sp, r7
 8029ea8:	bd80      	pop	{r7, pc}
 8029eaa:	bf00      	nop
 8029eac:	4f54300a 	.word	0x4f54300a

08029eb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8029eb0:	b480      	push	{r7}
 8029eb2:	b085      	sub	sp, #20
 8029eb4:	af00      	add	r7, sp, #0
 8029eb6:	6078      	str	r0, [r7, #4]
 8029eb8:	460b      	mov	r3, r1
 8029eba:	70fb      	strb	r3, [r7, #3]
 8029ebc:	4613      	mov	r3, r2
 8029ebe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	681b      	ldr	r3, [r3, #0]
 8029ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029ec6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8029ec8:	78fb      	ldrb	r3, [r7, #3]
 8029eca:	2b00      	cmp	r3, #0
 8029ecc:	d107      	bne.n	8029ede <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8029ece:	883b      	ldrh	r3, [r7, #0]
 8029ed0:	0419      	lsls	r1, r3, #16
 8029ed2:	687b      	ldr	r3, [r7, #4]
 8029ed4:	681b      	ldr	r3, [r3, #0]
 8029ed6:	68ba      	ldr	r2, [r7, #8]
 8029ed8:	430a      	orrs	r2, r1
 8029eda:	629a      	str	r2, [r3, #40]	; 0x28
 8029edc:	e028      	b.n	8029f30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8029ede:	687b      	ldr	r3, [r7, #4]
 8029ee0:	681b      	ldr	r3, [r3, #0]
 8029ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029ee4:	0c1b      	lsrs	r3, r3, #16
 8029ee6:	68ba      	ldr	r2, [r7, #8]
 8029ee8:	4413      	add	r3, r2
 8029eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029eec:	2300      	movs	r3, #0
 8029eee:	73fb      	strb	r3, [r7, #15]
 8029ef0:	e00d      	b.n	8029f0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8029ef2:	687b      	ldr	r3, [r7, #4]
 8029ef4:	681a      	ldr	r2, [r3, #0]
 8029ef6:	7bfb      	ldrb	r3, [r7, #15]
 8029ef8:	3340      	adds	r3, #64	; 0x40
 8029efa:	009b      	lsls	r3, r3, #2
 8029efc:	4413      	add	r3, r2
 8029efe:	685b      	ldr	r3, [r3, #4]
 8029f00:	0c1b      	lsrs	r3, r3, #16
 8029f02:	68ba      	ldr	r2, [r7, #8]
 8029f04:	4413      	add	r3, r2
 8029f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8029f08:	7bfb      	ldrb	r3, [r7, #15]
 8029f0a:	3301      	adds	r3, #1
 8029f0c:	73fb      	strb	r3, [r7, #15]
 8029f0e:	7bfa      	ldrb	r2, [r7, #15]
 8029f10:	78fb      	ldrb	r3, [r7, #3]
 8029f12:	3b01      	subs	r3, #1
 8029f14:	429a      	cmp	r2, r3
 8029f16:	d3ec      	bcc.n	8029ef2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8029f18:	883b      	ldrh	r3, [r7, #0]
 8029f1a:	0418      	lsls	r0, r3, #16
 8029f1c:	687b      	ldr	r3, [r7, #4]
 8029f1e:	6819      	ldr	r1, [r3, #0]
 8029f20:	78fb      	ldrb	r3, [r7, #3]
 8029f22:	3b01      	subs	r3, #1
 8029f24:	68ba      	ldr	r2, [r7, #8]
 8029f26:	4302      	orrs	r2, r0
 8029f28:	3340      	adds	r3, #64	; 0x40
 8029f2a:	009b      	lsls	r3, r3, #2
 8029f2c:	440b      	add	r3, r1
 8029f2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8029f30:	2300      	movs	r3, #0
}
 8029f32:	4618      	mov	r0, r3
 8029f34:	3714      	adds	r7, #20
 8029f36:	46bd      	mov	sp, r7
 8029f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f3c:	4770      	bx	lr

08029f3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8029f3e:	b480      	push	{r7}
 8029f40:	b083      	sub	sp, #12
 8029f42:	af00      	add	r7, sp, #0
 8029f44:	6078      	str	r0, [r7, #4]
 8029f46:	460b      	mov	r3, r1
 8029f48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8029f4a:	687b      	ldr	r3, [r7, #4]
 8029f4c:	681b      	ldr	r3, [r3, #0]
 8029f4e:	887a      	ldrh	r2, [r7, #2]
 8029f50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8029f52:	2300      	movs	r3, #0
}
 8029f54:	4618      	mov	r0, r3
 8029f56:	370c      	adds	r7, #12
 8029f58:	46bd      	mov	sp, r7
 8029f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f5e:	4770      	bx	lr

08029f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8029f60:	b480      	push	{r7}
 8029f62:	b083      	sub	sp, #12
 8029f64:	af00      	add	r7, sp, #0
 8029f66:	6078      	str	r0, [r7, #4]
 8029f68:	460b      	mov	r3, r1
 8029f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8029f6c:	bf00      	nop
 8029f6e:	370c      	adds	r7, #12
 8029f70:	46bd      	mov	sp, r7
 8029f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f76:	4770      	bx	lr

08029f78 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8029f78:	b580      	push	{r7, lr}
 8029f7a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8029f7c:	4b06      	ldr	r3, [pc, #24]	; (8029f98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8029f7e:	695b      	ldr	r3, [r3, #20]
 8029f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029f84:	2b00      	cmp	r3, #0
 8029f86:	d005      	beq.n	8029f94 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8029f88:	f000 f808 	bl	8029f9c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8029f8c:	4b02      	ldr	r3, [pc, #8]	; (8029f98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8029f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029f92:	615a      	str	r2, [r3, #20]
  }
}
 8029f94:	bf00      	nop
 8029f96:	bd80      	pop	{r7, pc}
 8029f98:	40013c00 	.word	0x40013c00

08029f9c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8029f9c:	b480      	push	{r7}
 8029f9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8029fa0:	bf00      	nop
 8029fa2:	46bd      	mov	sp, r7
 8029fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fa8:	4770      	bx	lr
	...

08029fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8029fac:	b580      	push	{r7, lr}
 8029fae:	b086      	sub	sp, #24
 8029fb0:	af00      	add	r7, sp, #0
 8029fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8029fb4:	687b      	ldr	r3, [r7, #4]
 8029fb6:	2b00      	cmp	r3, #0
 8029fb8:	d101      	bne.n	8029fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8029fba:	2301      	movs	r3, #1
 8029fbc:	e267      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8029fbe:	687b      	ldr	r3, [r7, #4]
 8029fc0:	681b      	ldr	r3, [r3, #0]
 8029fc2:	f003 0301 	and.w	r3, r3, #1
 8029fc6:	2b00      	cmp	r3, #0
 8029fc8:	d075      	beq.n	802a0b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029fca:	4b88      	ldr	r3, [pc, #544]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 8029fcc:	689b      	ldr	r3, [r3, #8]
 8029fce:	f003 030c 	and.w	r3, r3, #12
 8029fd2:	2b04      	cmp	r3, #4
 8029fd4:	d00c      	beq.n	8029ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029fd6:	4b85      	ldr	r3, [pc, #532]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 8029fd8:	689b      	ldr	r3, [r3, #8]
 8029fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8029fde:	2b08      	cmp	r3, #8
 8029fe0:	d112      	bne.n	802a008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8029fe2:	4b82      	ldr	r3, [pc, #520]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 8029fe4:	685b      	ldr	r3, [r3, #4]
 8029fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8029fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8029fee:	d10b      	bne.n	802a008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8029ff0:	4b7e      	ldr	r3, [pc, #504]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 8029ff2:	681b      	ldr	r3, [r3, #0]
 8029ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029ff8:	2b00      	cmp	r3, #0
 8029ffa:	d05b      	beq.n	802a0b4 <HAL_RCC_OscConfig+0x108>
 8029ffc:	687b      	ldr	r3, [r7, #4]
 8029ffe:	685b      	ldr	r3, [r3, #4]
 802a000:	2b00      	cmp	r3, #0
 802a002:	d157      	bne.n	802a0b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 802a004:	2301      	movs	r3, #1
 802a006:	e242      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802a008:	687b      	ldr	r3, [r7, #4]
 802a00a:	685b      	ldr	r3, [r3, #4]
 802a00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802a010:	d106      	bne.n	802a020 <HAL_RCC_OscConfig+0x74>
 802a012:	4b76      	ldr	r3, [pc, #472]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a014:	681b      	ldr	r3, [r3, #0]
 802a016:	4a75      	ldr	r2, [pc, #468]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a01c:	6013      	str	r3, [r2, #0]
 802a01e:	e01d      	b.n	802a05c <HAL_RCC_OscConfig+0xb0>
 802a020:	687b      	ldr	r3, [r7, #4]
 802a022:	685b      	ldr	r3, [r3, #4]
 802a024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802a028:	d10c      	bne.n	802a044 <HAL_RCC_OscConfig+0x98>
 802a02a:	4b70      	ldr	r3, [pc, #448]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a02c:	681b      	ldr	r3, [r3, #0]
 802a02e:	4a6f      	ldr	r2, [pc, #444]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802a034:	6013      	str	r3, [r2, #0]
 802a036:	4b6d      	ldr	r3, [pc, #436]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a038:	681b      	ldr	r3, [r3, #0]
 802a03a:	4a6c      	ldr	r2, [pc, #432]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a040:	6013      	str	r3, [r2, #0]
 802a042:	e00b      	b.n	802a05c <HAL_RCC_OscConfig+0xb0>
 802a044:	4b69      	ldr	r3, [pc, #420]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a046:	681b      	ldr	r3, [r3, #0]
 802a048:	4a68      	ldr	r2, [pc, #416]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802a04e:	6013      	str	r3, [r2, #0]
 802a050:	4b66      	ldr	r3, [pc, #408]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a052:	681b      	ldr	r3, [r3, #0]
 802a054:	4a65      	ldr	r2, [pc, #404]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a05a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802a05c:	687b      	ldr	r3, [r7, #4]
 802a05e:	685b      	ldr	r3, [r3, #4]
 802a060:	2b00      	cmp	r3, #0
 802a062:	d013      	beq.n	802a08c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a064:	f7fd fb6c 	bl	8027740 <HAL_GetTick>
 802a068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a06a:	e008      	b.n	802a07e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a06c:	f7fd fb68 	bl	8027740 <HAL_GetTick>
 802a070:	4602      	mov	r2, r0
 802a072:	693b      	ldr	r3, [r7, #16]
 802a074:	1ad3      	subs	r3, r2, r3
 802a076:	2b64      	cmp	r3, #100	; 0x64
 802a078:	d901      	bls.n	802a07e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802a07a:	2303      	movs	r3, #3
 802a07c:	e207      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a07e:	4b5b      	ldr	r3, [pc, #364]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a080:	681b      	ldr	r3, [r3, #0]
 802a082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a086:	2b00      	cmp	r3, #0
 802a088:	d0f0      	beq.n	802a06c <HAL_RCC_OscConfig+0xc0>
 802a08a:	e014      	b.n	802a0b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a08c:	f7fd fb58 	bl	8027740 <HAL_GetTick>
 802a090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a092:	e008      	b.n	802a0a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802a094:	f7fd fb54 	bl	8027740 <HAL_GetTick>
 802a098:	4602      	mov	r2, r0
 802a09a:	693b      	ldr	r3, [r7, #16]
 802a09c:	1ad3      	subs	r3, r2, r3
 802a09e:	2b64      	cmp	r3, #100	; 0x64
 802a0a0:	d901      	bls.n	802a0a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802a0a2:	2303      	movs	r3, #3
 802a0a4:	e1f3      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802a0a6:	4b51      	ldr	r3, [pc, #324]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a0a8:	681b      	ldr	r3, [r3, #0]
 802a0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a0ae:	2b00      	cmp	r3, #0
 802a0b0:	d1f0      	bne.n	802a094 <HAL_RCC_OscConfig+0xe8>
 802a0b2:	e000      	b.n	802a0b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802a0b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802a0b6:	687b      	ldr	r3, [r7, #4]
 802a0b8:	681b      	ldr	r3, [r3, #0]
 802a0ba:	f003 0302 	and.w	r3, r3, #2
 802a0be:	2b00      	cmp	r3, #0
 802a0c0:	d063      	beq.n	802a18a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a0c2:	4b4a      	ldr	r3, [pc, #296]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a0c4:	689b      	ldr	r3, [r3, #8]
 802a0c6:	f003 030c 	and.w	r3, r3, #12
 802a0ca:	2b00      	cmp	r3, #0
 802a0cc:	d00b      	beq.n	802a0e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a0ce:	4b47      	ldr	r3, [pc, #284]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a0d0:	689b      	ldr	r3, [r3, #8]
 802a0d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802a0d6:	2b08      	cmp	r3, #8
 802a0d8:	d11c      	bne.n	802a114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802a0da:	4b44      	ldr	r3, [pc, #272]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a0dc:	685b      	ldr	r3, [r3, #4]
 802a0de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a0e2:	2b00      	cmp	r3, #0
 802a0e4:	d116      	bne.n	802a114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a0e6:	4b41      	ldr	r3, [pc, #260]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a0e8:	681b      	ldr	r3, [r3, #0]
 802a0ea:	f003 0302 	and.w	r3, r3, #2
 802a0ee:	2b00      	cmp	r3, #0
 802a0f0:	d005      	beq.n	802a0fe <HAL_RCC_OscConfig+0x152>
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	68db      	ldr	r3, [r3, #12]
 802a0f6:	2b01      	cmp	r3, #1
 802a0f8:	d001      	beq.n	802a0fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802a0fa:	2301      	movs	r3, #1
 802a0fc:	e1c7      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a0fe:	4b3b      	ldr	r3, [pc, #236]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a100:	681b      	ldr	r3, [r3, #0]
 802a102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	691b      	ldr	r3, [r3, #16]
 802a10a:	00db      	lsls	r3, r3, #3
 802a10c:	4937      	ldr	r1, [pc, #220]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a10e:	4313      	orrs	r3, r2
 802a110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802a112:	e03a      	b.n	802a18a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802a114:	687b      	ldr	r3, [r7, #4]
 802a116:	68db      	ldr	r3, [r3, #12]
 802a118:	2b00      	cmp	r3, #0
 802a11a:	d020      	beq.n	802a15e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802a11c:	4b34      	ldr	r3, [pc, #208]	; (802a1f0 <HAL_RCC_OscConfig+0x244>)
 802a11e:	2201      	movs	r2, #1
 802a120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a122:	f7fd fb0d 	bl	8027740 <HAL_GetTick>
 802a126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a128:	e008      	b.n	802a13c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a12a:	f7fd fb09 	bl	8027740 <HAL_GetTick>
 802a12e:	4602      	mov	r2, r0
 802a130:	693b      	ldr	r3, [r7, #16]
 802a132:	1ad3      	subs	r3, r2, r3
 802a134:	2b02      	cmp	r3, #2
 802a136:	d901      	bls.n	802a13c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802a138:	2303      	movs	r3, #3
 802a13a:	e1a8      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a13c:	4b2b      	ldr	r3, [pc, #172]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a13e:	681b      	ldr	r3, [r3, #0]
 802a140:	f003 0302 	and.w	r3, r3, #2
 802a144:	2b00      	cmp	r3, #0
 802a146:	d0f0      	beq.n	802a12a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802a148:	4b28      	ldr	r3, [pc, #160]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a14a:	681b      	ldr	r3, [r3, #0]
 802a14c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	691b      	ldr	r3, [r3, #16]
 802a154:	00db      	lsls	r3, r3, #3
 802a156:	4925      	ldr	r1, [pc, #148]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a158:	4313      	orrs	r3, r2
 802a15a:	600b      	str	r3, [r1, #0]
 802a15c:	e015      	b.n	802a18a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802a15e:	4b24      	ldr	r3, [pc, #144]	; (802a1f0 <HAL_RCC_OscConfig+0x244>)
 802a160:	2200      	movs	r2, #0
 802a162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802a164:	f7fd faec 	bl	8027740 <HAL_GetTick>
 802a168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a16a:	e008      	b.n	802a17e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802a16c:	f7fd fae8 	bl	8027740 <HAL_GetTick>
 802a170:	4602      	mov	r2, r0
 802a172:	693b      	ldr	r3, [r7, #16]
 802a174:	1ad3      	subs	r3, r2, r3
 802a176:	2b02      	cmp	r3, #2
 802a178:	d901      	bls.n	802a17e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802a17a:	2303      	movs	r3, #3
 802a17c:	e187      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802a17e:	4b1b      	ldr	r3, [pc, #108]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a180:	681b      	ldr	r3, [r3, #0]
 802a182:	f003 0302 	and.w	r3, r3, #2
 802a186:	2b00      	cmp	r3, #0
 802a188:	d1f0      	bne.n	802a16c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802a18a:	687b      	ldr	r3, [r7, #4]
 802a18c:	681b      	ldr	r3, [r3, #0]
 802a18e:	f003 0308 	and.w	r3, r3, #8
 802a192:	2b00      	cmp	r3, #0
 802a194:	d036      	beq.n	802a204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802a196:	687b      	ldr	r3, [r7, #4]
 802a198:	695b      	ldr	r3, [r3, #20]
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	d016      	beq.n	802a1cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802a19e:	4b15      	ldr	r3, [pc, #84]	; (802a1f4 <HAL_RCC_OscConfig+0x248>)
 802a1a0:	2201      	movs	r2, #1
 802a1a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a1a4:	f7fd facc 	bl	8027740 <HAL_GetTick>
 802a1a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a1aa:	e008      	b.n	802a1be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a1ac:	f7fd fac8 	bl	8027740 <HAL_GetTick>
 802a1b0:	4602      	mov	r2, r0
 802a1b2:	693b      	ldr	r3, [r7, #16]
 802a1b4:	1ad3      	subs	r3, r2, r3
 802a1b6:	2b02      	cmp	r3, #2
 802a1b8:	d901      	bls.n	802a1be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802a1ba:	2303      	movs	r3, #3
 802a1bc:	e167      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802a1be:	4b0b      	ldr	r3, [pc, #44]	; (802a1ec <HAL_RCC_OscConfig+0x240>)
 802a1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a1c2:	f003 0302 	and.w	r3, r3, #2
 802a1c6:	2b00      	cmp	r3, #0
 802a1c8:	d0f0      	beq.n	802a1ac <HAL_RCC_OscConfig+0x200>
 802a1ca:	e01b      	b.n	802a204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802a1cc:	4b09      	ldr	r3, [pc, #36]	; (802a1f4 <HAL_RCC_OscConfig+0x248>)
 802a1ce:	2200      	movs	r2, #0
 802a1d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a1d2:	f7fd fab5 	bl	8027740 <HAL_GetTick>
 802a1d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a1d8:	e00e      	b.n	802a1f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802a1da:	f7fd fab1 	bl	8027740 <HAL_GetTick>
 802a1de:	4602      	mov	r2, r0
 802a1e0:	693b      	ldr	r3, [r7, #16]
 802a1e2:	1ad3      	subs	r3, r2, r3
 802a1e4:	2b02      	cmp	r3, #2
 802a1e6:	d907      	bls.n	802a1f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802a1e8:	2303      	movs	r3, #3
 802a1ea:	e150      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
 802a1ec:	40023800 	.word	0x40023800
 802a1f0:	42470000 	.word	0x42470000
 802a1f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802a1f8:	4b88      	ldr	r3, [pc, #544]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802a1fc:	f003 0302 	and.w	r3, r3, #2
 802a200:	2b00      	cmp	r3, #0
 802a202:	d1ea      	bne.n	802a1da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802a204:	687b      	ldr	r3, [r7, #4]
 802a206:	681b      	ldr	r3, [r3, #0]
 802a208:	f003 0304 	and.w	r3, r3, #4
 802a20c:	2b00      	cmp	r3, #0
 802a20e:	f000 8097 	beq.w	802a340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802a212:	2300      	movs	r3, #0
 802a214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802a216:	4b81      	ldr	r3, [pc, #516]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a21a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d10f      	bne.n	802a242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802a222:	2300      	movs	r3, #0
 802a224:	60bb      	str	r3, [r7, #8]
 802a226:	4b7d      	ldr	r3, [pc, #500]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a22a:	4a7c      	ldr	r2, [pc, #496]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a230:	6413      	str	r3, [r2, #64]	; 0x40
 802a232:	4b7a      	ldr	r3, [pc, #488]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a23a:	60bb      	str	r3, [r7, #8]
 802a23c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802a23e:	2301      	movs	r3, #1
 802a240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a242:	4b77      	ldr	r3, [pc, #476]	; (802a420 <HAL_RCC_OscConfig+0x474>)
 802a244:	681b      	ldr	r3, [r3, #0]
 802a246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a24a:	2b00      	cmp	r3, #0
 802a24c:	d118      	bne.n	802a280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802a24e:	4b74      	ldr	r3, [pc, #464]	; (802a420 <HAL_RCC_OscConfig+0x474>)
 802a250:	681b      	ldr	r3, [r3, #0]
 802a252:	4a73      	ldr	r2, [pc, #460]	; (802a420 <HAL_RCC_OscConfig+0x474>)
 802a254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802a25a:	f7fd fa71 	bl	8027740 <HAL_GetTick>
 802a25e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a260:	e008      	b.n	802a274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802a262:	f7fd fa6d 	bl	8027740 <HAL_GetTick>
 802a266:	4602      	mov	r2, r0
 802a268:	693b      	ldr	r3, [r7, #16]
 802a26a:	1ad3      	subs	r3, r2, r3
 802a26c:	2b02      	cmp	r3, #2
 802a26e:	d901      	bls.n	802a274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 802a270:	2303      	movs	r3, #3
 802a272:	e10c      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802a274:	4b6a      	ldr	r3, [pc, #424]	; (802a420 <HAL_RCC_OscConfig+0x474>)
 802a276:	681b      	ldr	r3, [r3, #0]
 802a278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a27c:	2b00      	cmp	r3, #0
 802a27e:	d0f0      	beq.n	802a262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802a280:	687b      	ldr	r3, [r7, #4]
 802a282:	689b      	ldr	r3, [r3, #8]
 802a284:	2b01      	cmp	r3, #1
 802a286:	d106      	bne.n	802a296 <HAL_RCC_OscConfig+0x2ea>
 802a288:	4b64      	ldr	r3, [pc, #400]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a28c:	4a63      	ldr	r2, [pc, #396]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a28e:	f043 0301 	orr.w	r3, r3, #1
 802a292:	6713      	str	r3, [r2, #112]	; 0x70
 802a294:	e01c      	b.n	802a2d0 <HAL_RCC_OscConfig+0x324>
 802a296:	687b      	ldr	r3, [r7, #4]
 802a298:	689b      	ldr	r3, [r3, #8]
 802a29a:	2b05      	cmp	r3, #5
 802a29c:	d10c      	bne.n	802a2b8 <HAL_RCC_OscConfig+0x30c>
 802a29e:	4b5f      	ldr	r3, [pc, #380]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2a2:	4a5e      	ldr	r2, [pc, #376]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2a4:	f043 0304 	orr.w	r3, r3, #4
 802a2a8:	6713      	str	r3, [r2, #112]	; 0x70
 802a2aa:	4b5c      	ldr	r3, [pc, #368]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2ae:	4a5b      	ldr	r2, [pc, #364]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2b0:	f043 0301 	orr.w	r3, r3, #1
 802a2b4:	6713      	str	r3, [r2, #112]	; 0x70
 802a2b6:	e00b      	b.n	802a2d0 <HAL_RCC_OscConfig+0x324>
 802a2b8:	4b58      	ldr	r3, [pc, #352]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2bc:	4a57      	ldr	r2, [pc, #348]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2be:	f023 0301 	bic.w	r3, r3, #1
 802a2c2:	6713      	str	r3, [r2, #112]	; 0x70
 802a2c4:	4b55      	ldr	r3, [pc, #340]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2c8:	4a54      	ldr	r2, [pc, #336]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2ca:	f023 0304 	bic.w	r3, r3, #4
 802a2ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802a2d0:	687b      	ldr	r3, [r7, #4]
 802a2d2:	689b      	ldr	r3, [r3, #8]
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	d015      	beq.n	802a304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802a2d8:	f7fd fa32 	bl	8027740 <HAL_GetTick>
 802a2dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a2de:	e00a      	b.n	802a2f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a2e0:	f7fd fa2e 	bl	8027740 <HAL_GetTick>
 802a2e4:	4602      	mov	r2, r0
 802a2e6:	693b      	ldr	r3, [r7, #16]
 802a2e8:	1ad3      	subs	r3, r2, r3
 802a2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 802a2ee:	4293      	cmp	r3, r2
 802a2f0:	d901      	bls.n	802a2f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802a2f2:	2303      	movs	r3, #3
 802a2f4:	e0cb      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a2f6:	4b49      	ldr	r3, [pc, #292]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a2fa:	f003 0302 	and.w	r3, r3, #2
 802a2fe:	2b00      	cmp	r3, #0
 802a300:	d0ee      	beq.n	802a2e0 <HAL_RCC_OscConfig+0x334>
 802a302:	e014      	b.n	802a32e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802a304:	f7fd fa1c 	bl	8027740 <HAL_GetTick>
 802a308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a30a:	e00a      	b.n	802a322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a30c:	f7fd fa18 	bl	8027740 <HAL_GetTick>
 802a310:	4602      	mov	r2, r0
 802a312:	693b      	ldr	r3, [r7, #16]
 802a314:	1ad3      	subs	r3, r2, r3
 802a316:	f241 3288 	movw	r2, #5000	; 0x1388
 802a31a:	4293      	cmp	r3, r2
 802a31c:	d901      	bls.n	802a322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802a31e:	2303      	movs	r3, #3
 802a320:	e0b5      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802a322:	4b3e      	ldr	r3, [pc, #248]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a326:	f003 0302 	and.w	r3, r3, #2
 802a32a:	2b00      	cmp	r3, #0
 802a32c:	d1ee      	bne.n	802a30c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802a32e:	7dfb      	ldrb	r3, [r7, #23]
 802a330:	2b01      	cmp	r3, #1
 802a332:	d105      	bne.n	802a340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802a334:	4b39      	ldr	r3, [pc, #228]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a338:	4a38      	ldr	r2, [pc, #224]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a33a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802a33e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802a340:	687b      	ldr	r3, [r7, #4]
 802a342:	699b      	ldr	r3, [r3, #24]
 802a344:	2b00      	cmp	r3, #0
 802a346:	f000 80a1 	beq.w	802a48c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802a34a:	4b34      	ldr	r3, [pc, #208]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a34c:	689b      	ldr	r3, [r3, #8]
 802a34e:	f003 030c 	and.w	r3, r3, #12
 802a352:	2b08      	cmp	r3, #8
 802a354:	d05c      	beq.n	802a410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802a356:	687b      	ldr	r3, [r7, #4]
 802a358:	699b      	ldr	r3, [r3, #24]
 802a35a:	2b02      	cmp	r3, #2
 802a35c:	d141      	bne.n	802a3e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a35e:	4b31      	ldr	r3, [pc, #196]	; (802a424 <HAL_RCC_OscConfig+0x478>)
 802a360:	2200      	movs	r2, #0
 802a362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a364:	f7fd f9ec 	bl	8027740 <HAL_GetTick>
 802a368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a36a:	e008      	b.n	802a37e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a36c:	f7fd f9e8 	bl	8027740 <HAL_GetTick>
 802a370:	4602      	mov	r2, r0
 802a372:	693b      	ldr	r3, [r7, #16]
 802a374:	1ad3      	subs	r3, r2, r3
 802a376:	2b02      	cmp	r3, #2
 802a378:	d901      	bls.n	802a37e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802a37a:	2303      	movs	r3, #3
 802a37c:	e087      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a37e:	4b27      	ldr	r3, [pc, #156]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a380:	681b      	ldr	r3, [r3, #0]
 802a382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a386:	2b00      	cmp	r3, #0
 802a388:	d1f0      	bne.n	802a36c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802a38a:	687b      	ldr	r3, [r7, #4]
 802a38c:	69da      	ldr	r2, [r3, #28]
 802a38e:	687b      	ldr	r3, [r7, #4]
 802a390:	6a1b      	ldr	r3, [r3, #32]
 802a392:	431a      	orrs	r2, r3
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a398:	019b      	lsls	r3, r3, #6
 802a39a:	431a      	orrs	r2, r3
 802a39c:	687b      	ldr	r3, [r7, #4]
 802a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a3a0:	085b      	lsrs	r3, r3, #1
 802a3a2:	3b01      	subs	r3, #1
 802a3a4:	041b      	lsls	r3, r3, #16
 802a3a6:	431a      	orrs	r2, r3
 802a3a8:	687b      	ldr	r3, [r7, #4]
 802a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a3ac:	061b      	lsls	r3, r3, #24
 802a3ae:	491b      	ldr	r1, [pc, #108]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a3b0:	4313      	orrs	r3, r2
 802a3b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802a3b4:	4b1b      	ldr	r3, [pc, #108]	; (802a424 <HAL_RCC_OscConfig+0x478>)
 802a3b6:	2201      	movs	r2, #1
 802a3b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a3ba:	f7fd f9c1 	bl	8027740 <HAL_GetTick>
 802a3be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a3c0:	e008      	b.n	802a3d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a3c2:	f7fd f9bd 	bl	8027740 <HAL_GetTick>
 802a3c6:	4602      	mov	r2, r0
 802a3c8:	693b      	ldr	r3, [r7, #16]
 802a3ca:	1ad3      	subs	r3, r2, r3
 802a3cc:	2b02      	cmp	r3, #2
 802a3ce:	d901      	bls.n	802a3d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802a3d0:	2303      	movs	r3, #3
 802a3d2:	e05c      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a3d4:	4b11      	ldr	r3, [pc, #68]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a3d6:	681b      	ldr	r3, [r3, #0]
 802a3d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a3dc:	2b00      	cmp	r3, #0
 802a3de:	d0f0      	beq.n	802a3c2 <HAL_RCC_OscConfig+0x416>
 802a3e0:	e054      	b.n	802a48c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802a3e2:	4b10      	ldr	r3, [pc, #64]	; (802a424 <HAL_RCC_OscConfig+0x478>)
 802a3e4:	2200      	movs	r2, #0
 802a3e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802a3e8:	f7fd f9aa 	bl	8027740 <HAL_GetTick>
 802a3ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a3ee:	e008      	b.n	802a402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802a3f0:	f7fd f9a6 	bl	8027740 <HAL_GetTick>
 802a3f4:	4602      	mov	r2, r0
 802a3f6:	693b      	ldr	r3, [r7, #16]
 802a3f8:	1ad3      	subs	r3, r2, r3
 802a3fa:	2b02      	cmp	r3, #2
 802a3fc:	d901      	bls.n	802a402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802a3fe:	2303      	movs	r3, #3
 802a400:	e045      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802a402:	4b06      	ldr	r3, [pc, #24]	; (802a41c <HAL_RCC_OscConfig+0x470>)
 802a404:	681b      	ldr	r3, [r3, #0]
 802a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a40a:	2b00      	cmp	r3, #0
 802a40c:	d1f0      	bne.n	802a3f0 <HAL_RCC_OscConfig+0x444>
 802a40e:	e03d      	b.n	802a48c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802a410:	687b      	ldr	r3, [r7, #4]
 802a412:	699b      	ldr	r3, [r3, #24]
 802a414:	2b01      	cmp	r3, #1
 802a416:	d107      	bne.n	802a428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802a418:	2301      	movs	r3, #1
 802a41a:	e038      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
 802a41c:	40023800 	.word	0x40023800
 802a420:	40007000 	.word	0x40007000
 802a424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802a428:	4b1b      	ldr	r3, [pc, #108]	; (802a498 <HAL_RCC_OscConfig+0x4ec>)
 802a42a:	685b      	ldr	r3, [r3, #4]
 802a42c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a42e:	687b      	ldr	r3, [r7, #4]
 802a430:	699b      	ldr	r3, [r3, #24]
 802a432:	2b01      	cmp	r3, #1
 802a434:	d028      	beq.n	802a488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a436:	68fb      	ldr	r3, [r7, #12]
 802a438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802a43c:	687b      	ldr	r3, [r7, #4]
 802a43e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802a440:	429a      	cmp	r2, r3
 802a442:	d121      	bne.n	802a488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a444:	68fb      	ldr	r3, [r7, #12]
 802a446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802a44a:	687b      	ldr	r3, [r7, #4]
 802a44c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802a44e:	429a      	cmp	r2, r3
 802a450:	d11a      	bne.n	802a488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a452:	68fa      	ldr	r2, [r7, #12]
 802a454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802a458:	4013      	ands	r3, r2
 802a45a:	687a      	ldr	r2, [r7, #4]
 802a45c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a45e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802a460:	4293      	cmp	r3, r2
 802a462:	d111      	bne.n	802a488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a464:	68fb      	ldr	r3, [r7, #12]
 802a466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802a46a:	687b      	ldr	r3, [r7, #4]
 802a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a46e:	085b      	lsrs	r3, r3, #1
 802a470:	3b01      	subs	r3, #1
 802a472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802a474:	429a      	cmp	r2, r3
 802a476:	d107      	bne.n	802a488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802a478:	68fb      	ldr	r3, [r7, #12]
 802a47a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802a47e:	687b      	ldr	r3, [r7, #4]
 802a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802a484:	429a      	cmp	r2, r3
 802a486:	d001      	beq.n	802a48c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802a488:	2301      	movs	r3, #1
 802a48a:	e000      	b.n	802a48e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 802a48c:	2300      	movs	r3, #0
}
 802a48e:	4618      	mov	r0, r3
 802a490:	3718      	adds	r7, #24
 802a492:	46bd      	mov	sp, r7
 802a494:	bd80      	pop	{r7, pc}
 802a496:	bf00      	nop
 802a498:	40023800 	.word	0x40023800

0802a49c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802a49c:	b580      	push	{r7, lr}
 802a49e:	b084      	sub	sp, #16
 802a4a0:	af00      	add	r7, sp, #0
 802a4a2:	6078      	str	r0, [r7, #4]
 802a4a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802a4a6:	687b      	ldr	r3, [r7, #4]
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	d101      	bne.n	802a4b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802a4ac:	2301      	movs	r3, #1
 802a4ae:	e0cc      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802a4b0:	4b68      	ldr	r3, [pc, #416]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a4b2:	681b      	ldr	r3, [r3, #0]
 802a4b4:	f003 0307 	and.w	r3, r3, #7
 802a4b8:	683a      	ldr	r2, [r7, #0]
 802a4ba:	429a      	cmp	r2, r3
 802a4bc:	d90c      	bls.n	802a4d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a4be:	4b65      	ldr	r3, [pc, #404]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a4c0:	683a      	ldr	r2, [r7, #0]
 802a4c2:	b2d2      	uxtb	r2, r2
 802a4c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a4c6:	4b63      	ldr	r3, [pc, #396]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a4c8:	681b      	ldr	r3, [r3, #0]
 802a4ca:	f003 0307 	and.w	r3, r3, #7
 802a4ce:	683a      	ldr	r2, [r7, #0]
 802a4d0:	429a      	cmp	r2, r3
 802a4d2:	d001      	beq.n	802a4d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802a4d4:	2301      	movs	r3, #1
 802a4d6:	e0b8      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802a4d8:	687b      	ldr	r3, [r7, #4]
 802a4da:	681b      	ldr	r3, [r3, #0]
 802a4dc:	f003 0302 	and.w	r3, r3, #2
 802a4e0:	2b00      	cmp	r3, #0
 802a4e2:	d020      	beq.n	802a526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a4e4:	687b      	ldr	r3, [r7, #4]
 802a4e6:	681b      	ldr	r3, [r3, #0]
 802a4e8:	f003 0304 	and.w	r3, r3, #4
 802a4ec:	2b00      	cmp	r3, #0
 802a4ee:	d005      	beq.n	802a4fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802a4f0:	4b59      	ldr	r3, [pc, #356]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a4f2:	689b      	ldr	r3, [r3, #8]
 802a4f4:	4a58      	ldr	r2, [pc, #352]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a4f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802a4fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a4fc:	687b      	ldr	r3, [r7, #4]
 802a4fe:	681b      	ldr	r3, [r3, #0]
 802a500:	f003 0308 	and.w	r3, r3, #8
 802a504:	2b00      	cmp	r3, #0
 802a506:	d005      	beq.n	802a514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802a508:	4b53      	ldr	r3, [pc, #332]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a50a:	689b      	ldr	r3, [r3, #8]
 802a50c:	4a52      	ldr	r2, [pc, #328]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a50e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802a512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802a514:	4b50      	ldr	r3, [pc, #320]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a516:	689b      	ldr	r3, [r3, #8]
 802a518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802a51c:	687b      	ldr	r3, [r7, #4]
 802a51e:	689b      	ldr	r3, [r3, #8]
 802a520:	494d      	ldr	r1, [pc, #308]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a522:	4313      	orrs	r3, r2
 802a524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802a526:	687b      	ldr	r3, [r7, #4]
 802a528:	681b      	ldr	r3, [r3, #0]
 802a52a:	f003 0301 	and.w	r3, r3, #1
 802a52e:	2b00      	cmp	r3, #0
 802a530:	d044      	beq.n	802a5bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	685b      	ldr	r3, [r3, #4]
 802a536:	2b01      	cmp	r3, #1
 802a538:	d107      	bne.n	802a54a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802a53a:	4b47      	ldr	r3, [pc, #284]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a53c:	681b      	ldr	r3, [r3, #0]
 802a53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a542:	2b00      	cmp	r3, #0
 802a544:	d119      	bne.n	802a57a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a546:	2301      	movs	r3, #1
 802a548:	e07f      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a54a:	687b      	ldr	r3, [r7, #4]
 802a54c:	685b      	ldr	r3, [r3, #4]
 802a54e:	2b02      	cmp	r3, #2
 802a550:	d003      	beq.n	802a55a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802a552:	687b      	ldr	r3, [r7, #4]
 802a554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802a556:	2b03      	cmp	r3, #3
 802a558:	d107      	bne.n	802a56a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802a55a:	4b3f      	ldr	r3, [pc, #252]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a55c:	681b      	ldr	r3, [r3, #0]
 802a55e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802a562:	2b00      	cmp	r3, #0
 802a564:	d109      	bne.n	802a57a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a566:	2301      	movs	r3, #1
 802a568:	e06f      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802a56a:	4b3b      	ldr	r3, [pc, #236]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a56c:	681b      	ldr	r3, [r3, #0]
 802a56e:	f003 0302 	and.w	r3, r3, #2
 802a572:	2b00      	cmp	r3, #0
 802a574:	d101      	bne.n	802a57a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802a576:	2301      	movs	r3, #1
 802a578:	e067      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802a57a:	4b37      	ldr	r3, [pc, #220]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a57c:	689b      	ldr	r3, [r3, #8]
 802a57e:	f023 0203 	bic.w	r2, r3, #3
 802a582:	687b      	ldr	r3, [r7, #4]
 802a584:	685b      	ldr	r3, [r3, #4]
 802a586:	4934      	ldr	r1, [pc, #208]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a588:	4313      	orrs	r3, r2
 802a58a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802a58c:	f7fd f8d8 	bl	8027740 <HAL_GetTick>
 802a590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a592:	e00a      	b.n	802a5aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802a594:	f7fd f8d4 	bl	8027740 <HAL_GetTick>
 802a598:	4602      	mov	r2, r0
 802a59a:	68fb      	ldr	r3, [r7, #12]
 802a59c:	1ad3      	subs	r3, r2, r3
 802a59e:	f241 3288 	movw	r2, #5000	; 0x1388
 802a5a2:	4293      	cmp	r3, r2
 802a5a4:	d901      	bls.n	802a5aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802a5a6:	2303      	movs	r3, #3
 802a5a8:	e04f      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802a5aa:	4b2b      	ldr	r3, [pc, #172]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a5ac:	689b      	ldr	r3, [r3, #8]
 802a5ae:	f003 020c 	and.w	r2, r3, #12
 802a5b2:	687b      	ldr	r3, [r7, #4]
 802a5b4:	685b      	ldr	r3, [r3, #4]
 802a5b6:	009b      	lsls	r3, r3, #2
 802a5b8:	429a      	cmp	r2, r3
 802a5ba:	d1eb      	bne.n	802a594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802a5bc:	4b25      	ldr	r3, [pc, #148]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a5be:	681b      	ldr	r3, [r3, #0]
 802a5c0:	f003 0307 	and.w	r3, r3, #7
 802a5c4:	683a      	ldr	r2, [r7, #0]
 802a5c6:	429a      	cmp	r2, r3
 802a5c8:	d20c      	bcs.n	802a5e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802a5ca:	4b22      	ldr	r3, [pc, #136]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a5cc:	683a      	ldr	r2, [r7, #0]
 802a5ce:	b2d2      	uxtb	r2, r2
 802a5d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802a5d2:	4b20      	ldr	r3, [pc, #128]	; (802a654 <HAL_RCC_ClockConfig+0x1b8>)
 802a5d4:	681b      	ldr	r3, [r3, #0]
 802a5d6:	f003 0307 	and.w	r3, r3, #7
 802a5da:	683a      	ldr	r2, [r7, #0]
 802a5dc:	429a      	cmp	r2, r3
 802a5de:	d001      	beq.n	802a5e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802a5e0:	2301      	movs	r3, #1
 802a5e2:	e032      	b.n	802a64a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802a5e4:	687b      	ldr	r3, [r7, #4]
 802a5e6:	681b      	ldr	r3, [r3, #0]
 802a5e8:	f003 0304 	and.w	r3, r3, #4
 802a5ec:	2b00      	cmp	r3, #0
 802a5ee:	d008      	beq.n	802a602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802a5f0:	4b19      	ldr	r3, [pc, #100]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a5f2:	689b      	ldr	r3, [r3, #8]
 802a5f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802a5f8:	687b      	ldr	r3, [r7, #4]
 802a5fa:	68db      	ldr	r3, [r3, #12]
 802a5fc:	4916      	ldr	r1, [pc, #88]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a5fe:	4313      	orrs	r3, r2
 802a600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802a602:	687b      	ldr	r3, [r7, #4]
 802a604:	681b      	ldr	r3, [r3, #0]
 802a606:	f003 0308 	and.w	r3, r3, #8
 802a60a:	2b00      	cmp	r3, #0
 802a60c:	d009      	beq.n	802a622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802a60e:	4b12      	ldr	r3, [pc, #72]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a610:	689b      	ldr	r3, [r3, #8]
 802a612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802a616:	687b      	ldr	r3, [r7, #4]
 802a618:	691b      	ldr	r3, [r3, #16]
 802a61a:	00db      	lsls	r3, r3, #3
 802a61c:	490e      	ldr	r1, [pc, #56]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a61e:	4313      	orrs	r3, r2
 802a620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802a622:	f000 f821 	bl	802a668 <HAL_RCC_GetSysClockFreq>
 802a626:	4602      	mov	r2, r0
 802a628:	4b0b      	ldr	r3, [pc, #44]	; (802a658 <HAL_RCC_ClockConfig+0x1bc>)
 802a62a:	689b      	ldr	r3, [r3, #8]
 802a62c:	091b      	lsrs	r3, r3, #4
 802a62e:	f003 030f 	and.w	r3, r3, #15
 802a632:	490a      	ldr	r1, [pc, #40]	; (802a65c <HAL_RCC_ClockConfig+0x1c0>)
 802a634:	5ccb      	ldrb	r3, [r1, r3]
 802a636:	fa22 f303 	lsr.w	r3, r2, r3
 802a63a:	4a09      	ldr	r2, [pc, #36]	; (802a660 <HAL_RCC_ClockConfig+0x1c4>)
 802a63c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802a63e:	4b09      	ldr	r3, [pc, #36]	; (802a664 <HAL_RCC_ClockConfig+0x1c8>)
 802a640:	681b      	ldr	r3, [r3, #0]
 802a642:	4618      	mov	r0, r3
 802a644:	f7fd f838 	bl	80276b8 <HAL_InitTick>

  return HAL_OK;
 802a648:	2300      	movs	r3, #0
}
 802a64a:	4618      	mov	r0, r3
 802a64c:	3710      	adds	r7, #16
 802a64e:	46bd      	mov	sp, r7
 802a650:	bd80      	pop	{r7, pc}
 802a652:	bf00      	nop
 802a654:	40023c00 	.word	0x40023c00
 802a658:	40023800 	.word	0x40023800
 802a65c:	0803333c 	.word	0x0803333c
 802a660:	20000138 	.word	0x20000138
 802a664:	2000013c 	.word	0x2000013c

0802a668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802a668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a66c:	b090      	sub	sp, #64	; 0x40
 802a66e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802a670:	2300      	movs	r3, #0
 802a672:	637b      	str	r3, [r7, #52]	; 0x34
 802a674:	2300      	movs	r3, #0
 802a676:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a678:	2300      	movs	r3, #0
 802a67a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 802a67c:	2300      	movs	r3, #0
 802a67e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802a680:	4b59      	ldr	r3, [pc, #356]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a682:	689b      	ldr	r3, [r3, #8]
 802a684:	f003 030c 	and.w	r3, r3, #12
 802a688:	2b08      	cmp	r3, #8
 802a68a:	d00d      	beq.n	802a6a8 <HAL_RCC_GetSysClockFreq+0x40>
 802a68c:	2b08      	cmp	r3, #8
 802a68e:	f200 80a1 	bhi.w	802a7d4 <HAL_RCC_GetSysClockFreq+0x16c>
 802a692:	2b00      	cmp	r3, #0
 802a694:	d002      	beq.n	802a69c <HAL_RCC_GetSysClockFreq+0x34>
 802a696:	2b04      	cmp	r3, #4
 802a698:	d003      	beq.n	802a6a2 <HAL_RCC_GetSysClockFreq+0x3a>
 802a69a:	e09b      	b.n	802a7d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802a69c:	4b53      	ldr	r3, [pc, #332]	; (802a7ec <HAL_RCC_GetSysClockFreq+0x184>)
 802a69e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 802a6a0:	e09b      	b.n	802a7da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802a6a2:	4b53      	ldr	r3, [pc, #332]	; (802a7f0 <HAL_RCC_GetSysClockFreq+0x188>)
 802a6a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a6a6:	e098      	b.n	802a7da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802a6a8:	4b4f      	ldr	r3, [pc, #316]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a6aa:	685b      	ldr	r3, [r3, #4]
 802a6ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802a6b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802a6b2:	4b4d      	ldr	r3, [pc, #308]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a6b4:	685b      	ldr	r3, [r3, #4]
 802a6b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802a6ba:	2b00      	cmp	r3, #0
 802a6bc:	d028      	beq.n	802a710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a6be:	4b4a      	ldr	r3, [pc, #296]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a6c0:	685b      	ldr	r3, [r3, #4]
 802a6c2:	099b      	lsrs	r3, r3, #6
 802a6c4:	2200      	movs	r2, #0
 802a6c6:	623b      	str	r3, [r7, #32]
 802a6c8:	627a      	str	r2, [r7, #36]	; 0x24
 802a6ca:	6a3b      	ldr	r3, [r7, #32]
 802a6cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 802a6d0:	2100      	movs	r1, #0
 802a6d2:	4b47      	ldr	r3, [pc, #284]	; (802a7f0 <HAL_RCC_GetSysClockFreq+0x188>)
 802a6d4:	fb03 f201 	mul.w	r2, r3, r1
 802a6d8:	2300      	movs	r3, #0
 802a6da:	fb00 f303 	mul.w	r3, r0, r3
 802a6de:	4413      	add	r3, r2
 802a6e0:	4a43      	ldr	r2, [pc, #268]	; (802a7f0 <HAL_RCC_GetSysClockFreq+0x188>)
 802a6e2:	fba0 1202 	umull	r1, r2, r0, r2
 802a6e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a6e8:	460a      	mov	r2, r1
 802a6ea:	62ba      	str	r2, [r7, #40]	; 0x28
 802a6ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a6ee:	4413      	add	r3, r2
 802a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a6f4:	2200      	movs	r2, #0
 802a6f6:	61bb      	str	r3, [r7, #24]
 802a6f8:	61fa      	str	r2, [r7, #28]
 802a6fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a6fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 802a702:	f7f7 fdb5 	bl	8022270 <__aeabi_uldivmod>
 802a706:	4602      	mov	r2, r0
 802a708:	460b      	mov	r3, r1
 802a70a:	4613      	mov	r3, r2
 802a70c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a70e:	e053      	b.n	802a7b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802a710:	4b35      	ldr	r3, [pc, #212]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a712:	685b      	ldr	r3, [r3, #4]
 802a714:	099b      	lsrs	r3, r3, #6
 802a716:	2200      	movs	r2, #0
 802a718:	613b      	str	r3, [r7, #16]
 802a71a:	617a      	str	r2, [r7, #20]
 802a71c:	693b      	ldr	r3, [r7, #16]
 802a71e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 802a722:	f04f 0b00 	mov.w	fp, #0
 802a726:	4652      	mov	r2, sl
 802a728:	465b      	mov	r3, fp
 802a72a:	f04f 0000 	mov.w	r0, #0
 802a72e:	f04f 0100 	mov.w	r1, #0
 802a732:	0159      	lsls	r1, r3, #5
 802a734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802a738:	0150      	lsls	r0, r2, #5
 802a73a:	4602      	mov	r2, r0
 802a73c:	460b      	mov	r3, r1
 802a73e:	ebb2 080a 	subs.w	r8, r2, sl
 802a742:	eb63 090b 	sbc.w	r9, r3, fp
 802a746:	f04f 0200 	mov.w	r2, #0
 802a74a:	f04f 0300 	mov.w	r3, #0
 802a74e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 802a752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 802a756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 802a75a:	ebb2 0408 	subs.w	r4, r2, r8
 802a75e:	eb63 0509 	sbc.w	r5, r3, r9
 802a762:	f04f 0200 	mov.w	r2, #0
 802a766:	f04f 0300 	mov.w	r3, #0
 802a76a:	00eb      	lsls	r3, r5, #3
 802a76c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a770:	00e2      	lsls	r2, r4, #3
 802a772:	4614      	mov	r4, r2
 802a774:	461d      	mov	r5, r3
 802a776:	eb14 030a 	adds.w	r3, r4, sl
 802a77a:	603b      	str	r3, [r7, #0]
 802a77c:	eb45 030b 	adc.w	r3, r5, fp
 802a780:	607b      	str	r3, [r7, #4]
 802a782:	f04f 0200 	mov.w	r2, #0
 802a786:	f04f 0300 	mov.w	r3, #0
 802a78a:	e9d7 4500 	ldrd	r4, r5, [r7]
 802a78e:	4629      	mov	r1, r5
 802a790:	028b      	lsls	r3, r1, #10
 802a792:	4621      	mov	r1, r4
 802a794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802a798:	4621      	mov	r1, r4
 802a79a:	028a      	lsls	r2, r1, #10
 802a79c:	4610      	mov	r0, r2
 802a79e:	4619      	mov	r1, r3
 802a7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a7a2:	2200      	movs	r2, #0
 802a7a4:	60bb      	str	r3, [r7, #8]
 802a7a6:	60fa      	str	r2, [r7, #12]
 802a7a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a7ac:	f7f7 fd60 	bl	8022270 <__aeabi_uldivmod>
 802a7b0:	4602      	mov	r2, r0
 802a7b2:	460b      	mov	r3, r1
 802a7b4:	4613      	mov	r3, r2
 802a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802a7b8:	4b0b      	ldr	r3, [pc, #44]	; (802a7e8 <HAL_RCC_GetSysClockFreq+0x180>)
 802a7ba:	685b      	ldr	r3, [r3, #4]
 802a7bc:	0c1b      	lsrs	r3, r3, #16
 802a7be:	f003 0303 	and.w	r3, r3, #3
 802a7c2:	3301      	adds	r3, #1
 802a7c4:	005b      	lsls	r3, r3, #1
 802a7c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 802a7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 802a7d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a7d2:	e002      	b.n	802a7da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802a7d4:	4b05      	ldr	r3, [pc, #20]	; (802a7ec <HAL_RCC_GetSysClockFreq+0x184>)
 802a7d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 802a7d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 802a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 802a7dc:	4618      	mov	r0, r3
 802a7de:	3740      	adds	r7, #64	; 0x40
 802a7e0:	46bd      	mov	sp, r7
 802a7e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a7e6:	bf00      	nop
 802a7e8:	40023800 	.word	0x40023800
 802a7ec:	00f42400 	.word	0x00f42400
 802a7f0:	00989680 	.word	0x00989680

0802a7f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802a7f4:	b480      	push	{r7}
 802a7f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802a7f8:	4b03      	ldr	r3, [pc, #12]	; (802a808 <HAL_RCC_GetHCLKFreq+0x14>)
 802a7fa:	681b      	ldr	r3, [r3, #0]
}
 802a7fc:	4618      	mov	r0, r3
 802a7fe:	46bd      	mov	sp, r7
 802a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a804:	4770      	bx	lr
 802a806:	bf00      	nop
 802a808:	20000138 	.word	0x20000138

0802a80c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802a80c:	b580      	push	{r7, lr}
 802a80e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802a810:	f7ff fff0 	bl	802a7f4 <HAL_RCC_GetHCLKFreq>
 802a814:	4602      	mov	r2, r0
 802a816:	4b05      	ldr	r3, [pc, #20]	; (802a82c <HAL_RCC_GetPCLK1Freq+0x20>)
 802a818:	689b      	ldr	r3, [r3, #8]
 802a81a:	0a9b      	lsrs	r3, r3, #10
 802a81c:	f003 0307 	and.w	r3, r3, #7
 802a820:	4903      	ldr	r1, [pc, #12]	; (802a830 <HAL_RCC_GetPCLK1Freq+0x24>)
 802a822:	5ccb      	ldrb	r3, [r1, r3]
 802a824:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a828:	4618      	mov	r0, r3
 802a82a:	bd80      	pop	{r7, pc}
 802a82c:	40023800 	.word	0x40023800
 802a830:	0803334c 	.word	0x0803334c

0802a834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802a834:	b580      	push	{r7, lr}
 802a836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802a838:	f7ff ffdc 	bl	802a7f4 <HAL_RCC_GetHCLKFreq>
 802a83c:	4602      	mov	r2, r0
 802a83e:	4b05      	ldr	r3, [pc, #20]	; (802a854 <HAL_RCC_GetPCLK2Freq+0x20>)
 802a840:	689b      	ldr	r3, [r3, #8]
 802a842:	0b5b      	lsrs	r3, r3, #13
 802a844:	f003 0307 	and.w	r3, r3, #7
 802a848:	4903      	ldr	r1, [pc, #12]	; (802a858 <HAL_RCC_GetPCLK2Freq+0x24>)
 802a84a:	5ccb      	ldrb	r3, [r1, r3]
 802a84c:	fa22 f303 	lsr.w	r3, r2, r3
}
 802a850:	4618      	mov	r0, r3
 802a852:	bd80      	pop	{r7, pc}
 802a854:	40023800 	.word	0x40023800
 802a858:	0803334c 	.word	0x0803334c

0802a85c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 802a85c:	b580      	push	{r7, lr}
 802a85e:	b086      	sub	sp, #24
 802a860:	af00      	add	r7, sp, #0
 802a862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802a864:	2300      	movs	r3, #0
 802a866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 802a868:	2300      	movs	r3, #0
 802a86a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a86c:	687b      	ldr	r3, [r7, #4]
 802a86e:	681b      	ldr	r3, [r3, #0]
 802a870:	f003 0301 	and.w	r3, r3, #1
 802a874:	2b00      	cmp	r3, #0
 802a876:	d105      	bne.n	802a884 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 802a878:	687b      	ldr	r3, [r7, #4]
 802a87a:	681b      	ldr	r3, [r3, #0]
 802a87c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802a880:	2b00      	cmp	r3, #0
 802a882:	d035      	beq.n	802a8f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802a884:	4b62      	ldr	r3, [pc, #392]	; (802aa10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a886:	2200      	movs	r2, #0
 802a888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a88a:	f7fc ff59 	bl	8027740 <HAL_GetTick>
 802a88e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a890:	e008      	b.n	802a8a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a892:	f7fc ff55 	bl	8027740 <HAL_GetTick>
 802a896:	4602      	mov	r2, r0
 802a898:	697b      	ldr	r3, [r7, #20]
 802a89a:	1ad3      	subs	r3, r2, r3
 802a89c:	2b02      	cmp	r3, #2
 802a89e:	d901      	bls.n	802a8a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a8a0:	2303      	movs	r3, #3
 802a8a2:	e0b0      	b.n	802aa06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802a8a4:	4b5b      	ldr	r3, [pc, #364]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8a6:	681b      	ldr	r3, [r3, #0]
 802a8a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a8ac:	2b00      	cmp	r3, #0
 802a8ae:	d1f0      	bne.n	802a892 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 802a8b0:	687b      	ldr	r3, [r7, #4]
 802a8b2:	685b      	ldr	r3, [r3, #4]
 802a8b4:	019a      	lsls	r2, r3, #6
 802a8b6:	687b      	ldr	r3, [r7, #4]
 802a8b8:	689b      	ldr	r3, [r3, #8]
 802a8ba:	071b      	lsls	r3, r3, #28
 802a8bc:	4955      	ldr	r1, [pc, #340]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8be:	4313      	orrs	r3, r2
 802a8c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802a8c4:	4b52      	ldr	r3, [pc, #328]	; (802aa10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 802a8c6:	2201      	movs	r2, #1
 802a8c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802a8ca:	f7fc ff39 	bl	8027740 <HAL_GetTick>
 802a8ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a8d0:	e008      	b.n	802a8e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802a8d2:	f7fc ff35 	bl	8027740 <HAL_GetTick>
 802a8d6:	4602      	mov	r2, r0
 802a8d8:	697b      	ldr	r3, [r7, #20]
 802a8da:	1ad3      	subs	r3, r2, r3
 802a8dc:	2b02      	cmp	r3, #2
 802a8de:	d901      	bls.n	802a8e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802a8e0:	2303      	movs	r3, #3
 802a8e2:	e090      	b.n	802aa06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802a8e4:	4b4b      	ldr	r3, [pc, #300]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a8e6:	681b      	ldr	r3, [r3, #0]
 802a8e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802a8ec:	2b00      	cmp	r3, #0
 802a8ee:	d0f0      	beq.n	802a8d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 802a8f0:	687b      	ldr	r3, [r7, #4]
 802a8f2:	681b      	ldr	r3, [r3, #0]
 802a8f4:	f003 0302 	and.w	r3, r3, #2
 802a8f8:	2b00      	cmp	r3, #0
 802a8fa:	f000 8083 	beq.w	802aa04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802a8fe:	2300      	movs	r3, #0
 802a900:	60fb      	str	r3, [r7, #12]
 802a902:	4b44      	ldr	r3, [pc, #272]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a906:	4a43      	ldr	r2, [pc, #268]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802a90c:	6413      	str	r3, [r2, #64]	; 0x40
 802a90e:	4b41      	ldr	r3, [pc, #260]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802a912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a916:	60fb      	str	r3, [r7, #12]
 802a918:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802a91a:	4b3f      	ldr	r3, [pc, #252]	; (802aa18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a91c:	681b      	ldr	r3, [r3, #0]
 802a91e:	4a3e      	ldr	r2, [pc, #248]	; (802aa18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802a926:	f7fc ff0b 	bl	8027740 <HAL_GetTick>
 802a92a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a92c:	e008      	b.n	802a940 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802a92e:	f7fc ff07 	bl	8027740 <HAL_GetTick>
 802a932:	4602      	mov	r2, r0
 802a934:	697b      	ldr	r3, [r7, #20]
 802a936:	1ad3      	subs	r3, r2, r3
 802a938:	2b02      	cmp	r3, #2
 802a93a:	d901      	bls.n	802a940 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 802a93c:	2303      	movs	r3, #3
 802a93e:	e062      	b.n	802aa06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 802a940:	4b35      	ldr	r3, [pc, #212]	; (802aa18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 802a942:	681b      	ldr	r3, [r3, #0]
 802a944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a948:	2b00      	cmp	r3, #0
 802a94a:	d0f0      	beq.n	802a92e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802a94c:	4b31      	ldr	r3, [pc, #196]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a954:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 802a956:	693b      	ldr	r3, [r7, #16]
 802a958:	2b00      	cmp	r3, #0
 802a95a:	d02f      	beq.n	802a9bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 802a95c:	687b      	ldr	r3, [r7, #4]
 802a95e:	68db      	ldr	r3, [r3, #12]
 802a960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a964:	693a      	ldr	r2, [r7, #16]
 802a966:	429a      	cmp	r2, r3
 802a968:	d028      	beq.n	802a9bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802a96a:	4b2a      	ldr	r3, [pc, #168]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a96e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a972:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 802a974:	4b29      	ldr	r3, [pc, #164]	; (802aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a976:	2201      	movs	r2, #1
 802a978:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 802a97a:	4b28      	ldr	r3, [pc, #160]	; (802aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 802a97c:	2200      	movs	r2, #0
 802a97e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 802a980:	4a24      	ldr	r2, [pc, #144]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a982:	693b      	ldr	r3, [r7, #16]
 802a984:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802a986:	4b23      	ldr	r3, [pc, #140]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a98a:	f003 0301 	and.w	r3, r3, #1
 802a98e:	2b01      	cmp	r3, #1
 802a990:	d114      	bne.n	802a9bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 802a992:	f7fc fed5 	bl	8027740 <HAL_GetTick>
 802a996:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a998:	e00a      	b.n	802a9b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802a99a:	f7fc fed1 	bl	8027740 <HAL_GetTick>
 802a99e:	4602      	mov	r2, r0
 802a9a0:	697b      	ldr	r3, [r7, #20]
 802a9a2:	1ad3      	subs	r3, r2, r3
 802a9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 802a9a8:	4293      	cmp	r3, r2
 802a9aa:	d901      	bls.n	802a9b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 802a9ac:	2303      	movs	r3, #3
 802a9ae:	e02a      	b.n	802aa06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802a9b0:	4b18      	ldr	r3, [pc, #96]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802a9b4:	f003 0302 	and.w	r3, r3, #2
 802a9b8:	2b00      	cmp	r3, #0
 802a9ba:	d0ee      	beq.n	802a99a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802a9bc:	687b      	ldr	r3, [r7, #4]
 802a9be:	68db      	ldr	r3, [r3, #12]
 802a9c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802a9c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802a9c8:	d10d      	bne.n	802a9e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 802a9ca:	4b12      	ldr	r3, [pc, #72]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9cc:	689b      	ldr	r3, [r3, #8]
 802a9ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 802a9d2:	687b      	ldr	r3, [r7, #4]
 802a9d4:	68db      	ldr	r3, [r3, #12]
 802a9d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802a9da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a9de:	490d      	ldr	r1, [pc, #52]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9e0:	4313      	orrs	r3, r2
 802a9e2:	608b      	str	r3, [r1, #8]
 802a9e4:	e005      	b.n	802a9f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 802a9e6:	4b0b      	ldr	r3, [pc, #44]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9e8:	689b      	ldr	r3, [r3, #8]
 802a9ea:	4a0a      	ldr	r2, [pc, #40]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 802a9f0:	6093      	str	r3, [r2, #8]
 802a9f2:	4b08      	ldr	r3, [pc, #32]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802a9f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802a9f6:	687b      	ldr	r3, [r7, #4]
 802a9f8:	68db      	ldr	r3, [r3, #12]
 802a9fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a9fe:	4905      	ldr	r1, [pc, #20]	; (802aa14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 802aa00:	4313      	orrs	r3, r2
 802aa02:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802aa04:	2300      	movs	r3, #0
}
 802aa06:	4618      	mov	r0, r3
 802aa08:	3718      	adds	r7, #24
 802aa0a:	46bd      	mov	sp, r7
 802aa0c:	bd80      	pop	{r7, pc}
 802aa0e:	bf00      	nop
 802aa10:	42470068 	.word	0x42470068
 802aa14:	40023800 	.word	0x40023800
 802aa18:	40007000 	.word	0x40007000
 802aa1c:	42470e40 	.word	0x42470e40

0802aa20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 802aa20:	b580      	push	{r7, lr}
 802aa22:	b084      	sub	sp, #16
 802aa24:	af00      	add	r7, sp, #0
 802aa26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 802aa28:	2301      	movs	r3, #1
 802aa2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 802aa2c:	687b      	ldr	r3, [r7, #4]
 802aa2e:	2b00      	cmp	r3, #0
 802aa30:	d101      	bne.n	802aa36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 802aa32:	2301      	movs	r3, #1
 802aa34:	e066      	b.n	802ab04 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 802aa36:	687b      	ldr	r3, [r7, #4]
 802aa38:	7f5b      	ldrb	r3, [r3, #29]
 802aa3a:	b2db      	uxtb	r3, r3
 802aa3c:	2b00      	cmp	r3, #0
 802aa3e:	d105      	bne.n	802aa4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 802aa40:	687b      	ldr	r3, [r7, #4]
 802aa42:	2200      	movs	r2, #0
 802aa44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802aa46:	6878      	ldr	r0, [r7, #4]
 802aa48:	f7fb fb44 	bl	80260d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 802aa4c:	687b      	ldr	r3, [r7, #4]
 802aa4e:	2202      	movs	r2, #2
 802aa50:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802aa52:	687b      	ldr	r3, [r7, #4]
 802aa54:	681b      	ldr	r3, [r3, #0]
 802aa56:	22ca      	movs	r2, #202	; 0xca
 802aa58:	625a      	str	r2, [r3, #36]	; 0x24
 802aa5a:	687b      	ldr	r3, [r7, #4]
 802aa5c:	681b      	ldr	r3, [r3, #0]
 802aa5e:	2253      	movs	r2, #83	; 0x53
 802aa60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802aa62:	6878      	ldr	r0, [r7, #4]
 802aa64:	f000 f998 	bl	802ad98 <RTC_EnterInitMode>
 802aa68:	4603      	mov	r3, r0
 802aa6a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802aa6c:	7bfb      	ldrb	r3, [r7, #15]
 802aa6e:	2b00      	cmp	r3, #0
 802aa70:	d12c      	bne.n	802aacc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 802aa72:	687b      	ldr	r3, [r7, #4]
 802aa74:	681b      	ldr	r3, [r3, #0]
 802aa76:	689b      	ldr	r3, [r3, #8]
 802aa78:	687a      	ldr	r2, [r7, #4]
 802aa7a:	6812      	ldr	r2, [r2, #0]
 802aa7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802aa80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802aa84:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 802aa86:	687b      	ldr	r3, [r7, #4]
 802aa88:	681b      	ldr	r3, [r3, #0]
 802aa8a:	6899      	ldr	r1, [r3, #8]
 802aa8c:	687b      	ldr	r3, [r7, #4]
 802aa8e:	685a      	ldr	r2, [r3, #4]
 802aa90:	687b      	ldr	r3, [r7, #4]
 802aa92:	691b      	ldr	r3, [r3, #16]
 802aa94:	431a      	orrs	r2, r3
 802aa96:	687b      	ldr	r3, [r7, #4]
 802aa98:	695b      	ldr	r3, [r3, #20]
 802aa9a:	431a      	orrs	r2, r3
 802aa9c:	687b      	ldr	r3, [r7, #4]
 802aa9e:	681b      	ldr	r3, [r3, #0]
 802aaa0:	430a      	orrs	r2, r1
 802aaa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 802aaa4:	687b      	ldr	r3, [r7, #4]
 802aaa6:	681b      	ldr	r3, [r3, #0]
 802aaa8:	687a      	ldr	r2, [r7, #4]
 802aaaa:	68d2      	ldr	r2, [r2, #12]
 802aaac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 802aaae:	687b      	ldr	r3, [r7, #4]
 802aab0:	681b      	ldr	r3, [r3, #0]
 802aab2:	6919      	ldr	r1, [r3, #16]
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	689b      	ldr	r3, [r3, #8]
 802aab8:	041a      	lsls	r2, r3, #16
 802aaba:	687b      	ldr	r3, [r7, #4]
 802aabc:	681b      	ldr	r3, [r3, #0]
 802aabe:	430a      	orrs	r2, r1
 802aac0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802aac2:	6878      	ldr	r0, [r7, #4]
 802aac4:	f000 f99f 	bl	802ae06 <RTC_ExitInitMode>
 802aac8:	4603      	mov	r3, r0
 802aaca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 802aacc:	7bfb      	ldrb	r3, [r7, #15]
 802aace:	2b00      	cmp	r3, #0
 802aad0:	d113      	bne.n	802aafa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 802aad2:	687b      	ldr	r3, [r7, #4]
 802aad4:	681b      	ldr	r3, [r3, #0]
 802aad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802aad8:	687b      	ldr	r3, [r7, #4]
 802aada:	681b      	ldr	r3, [r3, #0]
 802aadc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802aae0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 802aae2:	687b      	ldr	r3, [r7, #4]
 802aae4:	681b      	ldr	r3, [r3, #0]
 802aae6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 802aae8:	687b      	ldr	r3, [r7, #4]
 802aaea:	699a      	ldr	r2, [r3, #24]
 802aaec:	687b      	ldr	r3, [r7, #4]
 802aaee:	681b      	ldr	r3, [r3, #0]
 802aaf0:	430a      	orrs	r2, r1
 802aaf2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 802aaf4:	687b      	ldr	r3, [r7, #4]
 802aaf6:	2201      	movs	r2, #1
 802aaf8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802aafa:	687b      	ldr	r3, [r7, #4]
 802aafc:	681b      	ldr	r3, [r3, #0]
 802aafe:	22ff      	movs	r2, #255	; 0xff
 802ab00:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 802ab02:	7bfb      	ldrb	r3, [r7, #15]
}
 802ab04:	4618      	mov	r0, r3
 802ab06:	3710      	adds	r7, #16
 802ab08:	46bd      	mov	sp, r7
 802ab0a:	bd80      	pop	{r7, pc}

0802ab0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 802ab0c:	b590      	push	{r4, r7, lr}
 802ab0e:	b087      	sub	sp, #28
 802ab10:	af00      	add	r7, sp, #0
 802ab12:	60f8      	str	r0, [r7, #12]
 802ab14:	60b9      	str	r1, [r7, #8]
 802ab16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 802ab18:	2300      	movs	r3, #0
 802ab1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802ab1c:	68fb      	ldr	r3, [r7, #12]
 802ab1e:	7f1b      	ldrb	r3, [r3, #28]
 802ab20:	2b01      	cmp	r3, #1
 802ab22:	d101      	bne.n	802ab28 <HAL_RTC_SetTime+0x1c>
 802ab24:	2302      	movs	r3, #2
 802ab26:	e087      	b.n	802ac38 <HAL_RTC_SetTime+0x12c>
 802ab28:	68fb      	ldr	r3, [r7, #12]
 802ab2a:	2201      	movs	r2, #1
 802ab2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802ab2e:	68fb      	ldr	r3, [r7, #12]
 802ab30:	2202      	movs	r2, #2
 802ab32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 802ab34:	687b      	ldr	r3, [r7, #4]
 802ab36:	2b00      	cmp	r3, #0
 802ab38:	d126      	bne.n	802ab88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802ab3a:	68fb      	ldr	r3, [r7, #12]
 802ab3c:	681b      	ldr	r3, [r3, #0]
 802ab3e:	689b      	ldr	r3, [r3, #8]
 802ab40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ab44:	2b00      	cmp	r3, #0
 802ab46:	d102      	bne.n	802ab4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802ab48:	68bb      	ldr	r3, [r7, #8]
 802ab4a:	2200      	movs	r2, #0
 802ab4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab4e:	68bb      	ldr	r3, [r7, #8]
 802ab50:	781b      	ldrb	r3, [r3, #0]
 802ab52:	4618      	mov	r0, r3
 802ab54:	f000 f97c 	bl	802ae50 <RTC_ByteToBcd2>
 802ab58:	4603      	mov	r3, r0
 802ab5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802ab5c:	68bb      	ldr	r3, [r7, #8]
 802ab5e:	785b      	ldrb	r3, [r3, #1]
 802ab60:	4618      	mov	r0, r3
 802ab62:	f000 f975 	bl	802ae50 <RTC_ByteToBcd2>
 802ab66:	4603      	mov	r3, r0
 802ab68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 802ab6c:	68bb      	ldr	r3, [r7, #8]
 802ab6e:	789b      	ldrb	r3, [r3, #2]
 802ab70:	4618      	mov	r0, r3
 802ab72:	f000 f96d 	bl	802ae50 <RTC_ByteToBcd2>
 802ab76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802ab78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 802ab7c:	68bb      	ldr	r3, [r7, #8]
 802ab7e:	78db      	ldrb	r3, [r3, #3]
 802ab80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 802ab82:	4313      	orrs	r3, r2
 802ab84:	617b      	str	r3, [r7, #20]
 802ab86:	e018      	b.n	802abba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 802ab88:	68fb      	ldr	r3, [r7, #12]
 802ab8a:	681b      	ldr	r3, [r3, #0]
 802ab8c:	689b      	ldr	r3, [r3, #8]
 802ab8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802ab92:	2b00      	cmp	r3, #0
 802ab94:	d102      	bne.n	802ab9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 802ab96:	68bb      	ldr	r3, [r7, #8]
 802ab98:	2200      	movs	r2, #0
 802ab9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802ab9c:	68bb      	ldr	r3, [r7, #8]
 802ab9e:	781b      	ldrb	r3, [r3, #0]
 802aba0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802aba2:	68bb      	ldr	r3, [r7, #8]
 802aba4:	785b      	ldrb	r3, [r3, #1]
 802aba6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802aba8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 802abaa:	68ba      	ldr	r2, [r7, #8]
 802abac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 802abae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 802abb0:	68bb      	ldr	r3, [r7, #8]
 802abb2:	78db      	ldrb	r3, [r3, #3]
 802abb4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 802abb6:	4313      	orrs	r3, r2
 802abb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802abba:	68fb      	ldr	r3, [r7, #12]
 802abbc:	681b      	ldr	r3, [r3, #0]
 802abbe:	22ca      	movs	r2, #202	; 0xca
 802abc0:	625a      	str	r2, [r3, #36]	; 0x24
 802abc2:	68fb      	ldr	r3, [r7, #12]
 802abc4:	681b      	ldr	r3, [r3, #0]
 802abc6:	2253      	movs	r2, #83	; 0x53
 802abc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802abca:	68f8      	ldr	r0, [r7, #12]
 802abcc:	f000 f8e4 	bl	802ad98 <RTC_EnterInitMode>
 802abd0:	4603      	mov	r3, r0
 802abd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802abd4:	7cfb      	ldrb	r3, [r7, #19]
 802abd6:	2b00      	cmp	r3, #0
 802abd8:	d120      	bne.n	802ac1c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 802abda:	68fb      	ldr	r3, [r7, #12]
 802abdc:	681a      	ldr	r2, [r3, #0]
 802abde:	697b      	ldr	r3, [r7, #20]
 802abe0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 802abe4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 802abe8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 802abea:	68fb      	ldr	r3, [r7, #12]
 802abec:	681b      	ldr	r3, [r3, #0]
 802abee:	689a      	ldr	r2, [r3, #8]
 802abf0:	68fb      	ldr	r3, [r7, #12]
 802abf2:	681b      	ldr	r3, [r3, #0]
 802abf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802abf8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 802abfa:	68fb      	ldr	r3, [r7, #12]
 802abfc:	681b      	ldr	r3, [r3, #0]
 802abfe:	6899      	ldr	r1, [r3, #8]
 802ac00:	68bb      	ldr	r3, [r7, #8]
 802ac02:	68da      	ldr	r2, [r3, #12]
 802ac04:	68bb      	ldr	r3, [r7, #8]
 802ac06:	691b      	ldr	r3, [r3, #16]
 802ac08:	431a      	orrs	r2, r3
 802ac0a:	68fb      	ldr	r3, [r7, #12]
 802ac0c:	681b      	ldr	r3, [r3, #0]
 802ac0e:	430a      	orrs	r2, r1
 802ac10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ac12:	68f8      	ldr	r0, [r7, #12]
 802ac14:	f000 f8f7 	bl	802ae06 <RTC_ExitInitMode>
 802ac18:	4603      	mov	r3, r0
 802ac1a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ac1c:	7cfb      	ldrb	r3, [r7, #19]
 802ac1e:	2b00      	cmp	r3, #0
 802ac20:	d102      	bne.n	802ac28 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ac22:	68fb      	ldr	r3, [r7, #12]
 802ac24:	2201      	movs	r2, #1
 802ac26:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ac28:	68fb      	ldr	r3, [r7, #12]
 802ac2a:	681b      	ldr	r3, [r3, #0]
 802ac2c:	22ff      	movs	r2, #255	; 0xff
 802ac2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ac30:	68fb      	ldr	r3, [r7, #12]
 802ac32:	2200      	movs	r2, #0
 802ac34:	771a      	strb	r2, [r3, #28]

  return status;
 802ac36:	7cfb      	ldrb	r3, [r7, #19]
}
 802ac38:	4618      	mov	r0, r3
 802ac3a:	371c      	adds	r7, #28
 802ac3c:	46bd      	mov	sp, r7
 802ac3e:	bd90      	pop	{r4, r7, pc}

0802ac40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 802ac40:	b590      	push	{r4, r7, lr}
 802ac42:	b087      	sub	sp, #28
 802ac44:	af00      	add	r7, sp, #0
 802ac46:	60f8      	str	r0, [r7, #12]
 802ac48:	60b9      	str	r1, [r7, #8]
 802ac4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 802ac4c:	2300      	movs	r3, #0
 802ac4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	7f1b      	ldrb	r3, [r3, #28]
 802ac54:	2b01      	cmp	r3, #1
 802ac56:	d101      	bne.n	802ac5c <HAL_RTC_SetDate+0x1c>
 802ac58:	2302      	movs	r3, #2
 802ac5a:	e071      	b.n	802ad40 <HAL_RTC_SetDate+0x100>
 802ac5c:	68fb      	ldr	r3, [r7, #12]
 802ac5e:	2201      	movs	r2, #1
 802ac60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 802ac62:	68fb      	ldr	r3, [r7, #12]
 802ac64:	2202      	movs	r2, #2
 802ac66:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802ac68:	687b      	ldr	r3, [r7, #4]
 802ac6a:	2b00      	cmp	r3, #0
 802ac6c:	d10e      	bne.n	802ac8c <HAL_RTC_SetDate+0x4c>
 802ac6e:	68bb      	ldr	r3, [r7, #8]
 802ac70:	785b      	ldrb	r3, [r3, #1]
 802ac72:	f003 0310 	and.w	r3, r3, #16
 802ac76:	2b00      	cmp	r3, #0
 802ac78:	d008      	beq.n	802ac8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 802ac7a:	68bb      	ldr	r3, [r7, #8]
 802ac7c:	785b      	ldrb	r3, [r3, #1]
 802ac7e:	f023 0310 	bic.w	r3, r3, #16
 802ac82:	b2db      	uxtb	r3, r3
 802ac84:	330a      	adds	r3, #10
 802ac86:	b2da      	uxtb	r2, r3
 802ac88:	68bb      	ldr	r3, [r7, #8]
 802ac8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 802ac8c:	687b      	ldr	r3, [r7, #4]
 802ac8e:	2b00      	cmp	r3, #0
 802ac90:	d11c      	bne.n	802accc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802ac92:	68bb      	ldr	r3, [r7, #8]
 802ac94:	78db      	ldrb	r3, [r3, #3]
 802ac96:	4618      	mov	r0, r3
 802ac98:	f000 f8da 	bl	802ae50 <RTC_ByteToBcd2>
 802ac9c:	4603      	mov	r3, r0
 802ac9e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802aca0:	68bb      	ldr	r3, [r7, #8]
 802aca2:	785b      	ldrb	r3, [r3, #1]
 802aca4:	4618      	mov	r0, r3
 802aca6:	f000 f8d3 	bl	802ae50 <RTC_ByteToBcd2>
 802acaa:	4603      	mov	r3, r0
 802acac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802acae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 802acb0:	68bb      	ldr	r3, [r7, #8]
 802acb2:	789b      	ldrb	r3, [r3, #2]
 802acb4:	4618      	mov	r0, r3
 802acb6:	f000 f8cb 	bl	802ae50 <RTC_ByteToBcd2>
 802acba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 802acbc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 802acc0:	68bb      	ldr	r3, [r7, #8]
 802acc2:	781b      	ldrb	r3, [r3, #0]
 802acc4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 802acc6:	4313      	orrs	r3, r2
 802acc8:	617b      	str	r3, [r7, #20]
 802acca:	e00e      	b.n	802acea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802accc:	68bb      	ldr	r3, [r7, #8]
 802acce:	78db      	ldrb	r3, [r3, #3]
 802acd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802acd2:	68bb      	ldr	r3, [r7, #8]
 802acd4:	785b      	ldrb	r3, [r3, #1]
 802acd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802acd8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 802acda:	68ba      	ldr	r2, [r7, #8]
 802acdc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 802acde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 802ace0:	68bb      	ldr	r3, [r7, #8]
 802ace2:	781b      	ldrb	r3, [r3, #0]
 802ace4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 802ace6:	4313      	orrs	r3, r2
 802ace8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802acea:	68fb      	ldr	r3, [r7, #12]
 802acec:	681b      	ldr	r3, [r3, #0]
 802acee:	22ca      	movs	r2, #202	; 0xca
 802acf0:	625a      	str	r2, [r3, #36]	; 0x24
 802acf2:	68fb      	ldr	r3, [r7, #12]
 802acf4:	681b      	ldr	r3, [r3, #0]
 802acf6:	2253      	movs	r2, #83	; 0x53
 802acf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802acfa:	68f8      	ldr	r0, [r7, #12]
 802acfc:	f000 f84c 	bl	802ad98 <RTC_EnterInitMode>
 802ad00:	4603      	mov	r3, r0
 802ad02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 802ad04:	7cfb      	ldrb	r3, [r7, #19]
 802ad06:	2b00      	cmp	r3, #0
 802ad08:	d10c      	bne.n	802ad24 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 802ad0a:	68fb      	ldr	r3, [r7, #12]
 802ad0c:	681a      	ldr	r2, [r3, #0]
 802ad0e:	697b      	ldr	r3, [r7, #20]
 802ad10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802ad14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 802ad18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 802ad1a:	68f8      	ldr	r0, [r7, #12]
 802ad1c:	f000 f873 	bl	802ae06 <RTC_ExitInitMode>
 802ad20:	4603      	mov	r3, r0
 802ad22:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 802ad24:	7cfb      	ldrb	r3, [r7, #19]
 802ad26:	2b00      	cmp	r3, #0
 802ad28:	d102      	bne.n	802ad30 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 802ad2a:	68fb      	ldr	r3, [r7, #12]
 802ad2c:	2201      	movs	r2, #1
 802ad2e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802ad30:	68fb      	ldr	r3, [r7, #12]
 802ad32:	681b      	ldr	r3, [r3, #0]
 802ad34:	22ff      	movs	r2, #255	; 0xff
 802ad36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802ad38:	68fb      	ldr	r3, [r7, #12]
 802ad3a:	2200      	movs	r2, #0
 802ad3c:	771a      	strb	r2, [r3, #28]

  return status;
 802ad3e:	7cfb      	ldrb	r3, [r7, #19]
}
 802ad40:	4618      	mov	r0, r3
 802ad42:	371c      	adds	r7, #28
 802ad44:	46bd      	mov	sp, r7
 802ad46:	bd90      	pop	{r4, r7, pc}

0802ad48 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 802ad48:	b580      	push	{r7, lr}
 802ad4a:	b084      	sub	sp, #16
 802ad4c:	af00      	add	r7, sp, #0
 802ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802ad50:	2300      	movs	r3, #0
 802ad52:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 802ad54:	687b      	ldr	r3, [r7, #4]
 802ad56:	681b      	ldr	r3, [r3, #0]
 802ad58:	68da      	ldr	r2, [r3, #12]
 802ad5a:	687b      	ldr	r3, [r7, #4]
 802ad5c:	681b      	ldr	r3, [r3, #0]
 802ad5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802ad62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 802ad64:	f7fc fcec 	bl	8027740 <HAL_GetTick>
 802ad68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ad6a:	e009      	b.n	802ad80 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802ad6c:	f7fc fce8 	bl	8027740 <HAL_GetTick>
 802ad70:	4602      	mov	r2, r0
 802ad72:	68fb      	ldr	r3, [r7, #12]
 802ad74:	1ad3      	subs	r3, r2, r3
 802ad76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ad7a:	d901      	bls.n	802ad80 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 802ad7c:	2303      	movs	r3, #3
 802ad7e:	e007      	b.n	802ad90 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 802ad80:	687b      	ldr	r3, [r7, #4]
 802ad82:	681b      	ldr	r3, [r3, #0]
 802ad84:	68db      	ldr	r3, [r3, #12]
 802ad86:	f003 0320 	and.w	r3, r3, #32
 802ad8a:	2b00      	cmp	r3, #0
 802ad8c:	d0ee      	beq.n	802ad6c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 802ad8e:	2300      	movs	r3, #0
}
 802ad90:	4618      	mov	r0, r3
 802ad92:	3710      	adds	r7, #16
 802ad94:	46bd      	mov	sp, r7
 802ad96:	bd80      	pop	{r7, pc}

0802ad98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 802ad98:	b580      	push	{r7, lr}
 802ad9a:	b084      	sub	sp, #16
 802ad9c:	af00      	add	r7, sp, #0
 802ad9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802ada0:	2300      	movs	r3, #0
 802ada2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 802ada4:	2300      	movs	r3, #0
 802ada6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 802ada8:	687b      	ldr	r3, [r7, #4]
 802adaa:	681b      	ldr	r3, [r3, #0]
 802adac:	68db      	ldr	r3, [r3, #12]
 802adae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802adb2:	2b00      	cmp	r3, #0
 802adb4:	d122      	bne.n	802adfc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	681b      	ldr	r3, [r3, #0]
 802adba:	68da      	ldr	r2, [r3, #12]
 802adbc:	687b      	ldr	r3, [r7, #4]
 802adbe:	681b      	ldr	r3, [r3, #0]
 802adc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802adc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802adc6:	f7fc fcbb 	bl	8027740 <HAL_GetTick>
 802adca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802adcc:	e00c      	b.n	802ade8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 802adce:	f7fc fcb7 	bl	8027740 <HAL_GetTick>
 802add2:	4602      	mov	r2, r0
 802add4:	68bb      	ldr	r3, [r7, #8]
 802add6:	1ad3      	subs	r3, r2, r3
 802add8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802addc:	d904      	bls.n	802ade8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 802adde:	687b      	ldr	r3, [r7, #4]
 802ade0:	2204      	movs	r2, #4
 802ade2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 802ade4:	2301      	movs	r3, #1
 802ade6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 802ade8:	687b      	ldr	r3, [r7, #4]
 802adea:	681b      	ldr	r3, [r3, #0]
 802adec:	68db      	ldr	r3, [r3, #12]
 802adee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802adf2:	2b00      	cmp	r3, #0
 802adf4:	d102      	bne.n	802adfc <RTC_EnterInitMode+0x64>
 802adf6:	7bfb      	ldrb	r3, [r7, #15]
 802adf8:	2b01      	cmp	r3, #1
 802adfa:	d1e8      	bne.n	802adce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 802adfc:	7bfb      	ldrb	r3, [r7, #15]
}
 802adfe:	4618      	mov	r0, r3
 802ae00:	3710      	adds	r7, #16
 802ae02:	46bd      	mov	sp, r7
 802ae04:	bd80      	pop	{r7, pc}

0802ae06 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802ae06:	b580      	push	{r7, lr}
 802ae08:	b084      	sub	sp, #16
 802ae0a:	af00      	add	r7, sp, #0
 802ae0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802ae0e:	2300      	movs	r3, #0
 802ae10:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 802ae12:	687b      	ldr	r3, [r7, #4]
 802ae14:	681b      	ldr	r3, [r3, #0]
 802ae16:	68da      	ldr	r2, [r3, #12]
 802ae18:	687b      	ldr	r3, [r7, #4]
 802ae1a:	681b      	ldr	r3, [r3, #0]
 802ae1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802ae20:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 802ae22:	687b      	ldr	r3, [r7, #4]
 802ae24:	681b      	ldr	r3, [r3, #0]
 802ae26:	689b      	ldr	r3, [r3, #8]
 802ae28:	f003 0320 	and.w	r3, r3, #32
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	d10a      	bne.n	802ae46 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 802ae30:	6878      	ldr	r0, [r7, #4]
 802ae32:	f7ff ff89 	bl	802ad48 <HAL_RTC_WaitForSynchro>
 802ae36:	4603      	mov	r3, r0
 802ae38:	2b00      	cmp	r3, #0
 802ae3a:	d004      	beq.n	802ae46 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 802ae3c:	687b      	ldr	r3, [r7, #4]
 802ae3e:	2204      	movs	r2, #4
 802ae40:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 802ae42:	2301      	movs	r3, #1
 802ae44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 802ae48:	4618      	mov	r0, r3
 802ae4a:	3710      	adds	r7, #16
 802ae4c:	46bd      	mov	sp, r7
 802ae4e:	bd80      	pop	{r7, pc}

0802ae50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 802ae50:	b480      	push	{r7}
 802ae52:	b085      	sub	sp, #20
 802ae54:	af00      	add	r7, sp, #0
 802ae56:	4603      	mov	r3, r0
 802ae58:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 802ae5a:	2300      	movs	r3, #0
 802ae5c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 802ae5e:	e005      	b.n	802ae6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 802ae60:	7bfb      	ldrb	r3, [r7, #15]
 802ae62:	3301      	adds	r3, #1
 802ae64:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 802ae66:	79fb      	ldrb	r3, [r7, #7]
 802ae68:	3b0a      	subs	r3, #10
 802ae6a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 802ae6c:	79fb      	ldrb	r3, [r7, #7]
 802ae6e:	2b09      	cmp	r3, #9
 802ae70:	d8f6      	bhi.n	802ae60 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 802ae72:	7bfb      	ldrb	r3, [r7, #15]
 802ae74:	011b      	lsls	r3, r3, #4
 802ae76:	b2da      	uxtb	r2, r3
 802ae78:	79fb      	ldrb	r3, [r7, #7]
 802ae7a:	4313      	orrs	r3, r2
 802ae7c:	b2db      	uxtb	r3, r3
}
 802ae7e:	4618      	mov	r0, r3
 802ae80:	3714      	adds	r7, #20
 802ae82:	46bd      	mov	sp, r7
 802ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae88:	4770      	bx	lr

0802ae8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802ae8a:	b580      	push	{r7, lr}
 802ae8c:	b082      	sub	sp, #8
 802ae8e:	af00      	add	r7, sp, #0
 802ae90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802ae92:	687b      	ldr	r3, [r7, #4]
 802ae94:	2b00      	cmp	r3, #0
 802ae96:	d101      	bne.n	802ae9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802ae98:	2301      	movs	r3, #1
 802ae9a:	e07b      	b.n	802af94 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 802ae9c:	687b      	ldr	r3, [r7, #4]
 802ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aea0:	2b00      	cmp	r3, #0
 802aea2:	d108      	bne.n	802aeb6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 802aea4:	687b      	ldr	r3, [r7, #4]
 802aea6:	685b      	ldr	r3, [r3, #4]
 802aea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802aeac:	d009      	beq.n	802aec2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802aeae:	687b      	ldr	r3, [r7, #4]
 802aeb0:	2200      	movs	r2, #0
 802aeb2:	61da      	str	r2, [r3, #28]
 802aeb4:	e005      	b.n	802aec2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 802aeb6:	687b      	ldr	r3, [r7, #4]
 802aeb8:	2200      	movs	r2, #0
 802aeba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802aebc:	687b      	ldr	r3, [r7, #4]
 802aebe:	2200      	movs	r2, #0
 802aec0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802aec2:	687b      	ldr	r3, [r7, #4]
 802aec4:	2200      	movs	r2, #0
 802aec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802aec8:	687b      	ldr	r3, [r7, #4]
 802aeca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802aece:	b2db      	uxtb	r3, r3
 802aed0:	2b00      	cmp	r3, #0
 802aed2:	d106      	bne.n	802aee2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802aed4:	687b      	ldr	r3, [r7, #4]
 802aed6:	2200      	movs	r2, #0
 802aed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802aedc:	6878      	ldr	r0, [r7, #4]
 802aede:	f7fb f959 	bl	8026194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802aee2:	687b      	ldr	r3, [r7, #4]
 802aee4:	2202      	movs	r2, #2
 802aee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802aeea:	687b      	ldr	r3, [r7, #4]
 802aeec:	681b      	ldr	r3, [r3, #0]
 802aeee:	681a      	ldr	r2, [r3, #0]
 802aef0:	687b      	ldr	r3, [r7, #4]
 802aef2:	681b      	ldr	r3, [r3, #0]
 802aef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802aef8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802aefa:	687b      	ldr	r3, [r7, #4]
 802aefc:	685b      	ldr	r3, [r3, #4]
 802aefe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802af02:	687b      	ldr	r3, [r7, #4]
 802af04:	689b      	ldr	r3, [r3, #8]
 802af06:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802af0a:	431a      	orrs	r2, r3
 802af0c:	687b      	ldr	r3, [r7, #4]
 802af0e:	68db      	ldr	r3, [r3, #12]
 802af10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802af14:	431a      	orrs	r2, r3
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	691b      	ldr	r3, [r3, #16]
 802af1a:	f003 0302 	and.w	r3, r3, #2
 802af1e:	431a      	orrs	r2, r3
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	695b      	ldr	r3, [r3, #20]
 802af24:	f003 0301 	and.w	r3, r3, #1
 802af28:	431a      	orrs	r2, r3
 802af2a:	687b      	ldr	r3, [r7, #4]
 802af2c:	699b      	ldr	r3, [r3, #24]
 802af2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802af32:	431a      	orrs	r2, r3
 802af34:	687b      	ldr	r3, [r7, #4]
 802af36:	69db      	ldr	r3, [r3, #28]
 802af38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802af3c:	431a      	orrs	r2, r3
 802af3e:	687b      	ldr	r3, [r7, #4]
 802af40:	6a1b      	ldr	r3, [r3, #32]
 802af42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802af46:	ea42 0103 	orr.w	r1, r2, r3
 802af4a:	687b      	ldr	r3, [r7, #4]
 802af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802af4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802af52:	687b      	ldr	r3, [r7, #4]
 802af54:	681b      	ldr	r3, [r3, #0]
 802af56:	430a      	orrs	r2, r1
 802af58:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802af5a:	687b      	ldr	r3, [r7, #4]
 802af5c:	699b      	ldr	r3, [r3, #24]
 802af5e:	0c1b      	lsrs	r3, r3, #16
 802af60:	f003 0104 	and.w	r1, r3, #4
 802af64:	687b      	ldr	r3, [r7, #4]
 802af66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802af68:	f003 0210 	and.w	r2, r3, #16
 802af6c:	687b      	ldr	r3, [r7, #4]
 802af6e:	681b      	ldr	r3, [r3, #0]
 802af70:	430a      	orrs	r2, r1
 802af72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802af74:	687b      	ldr	r3, [r7, #4]
 802af76:	681b      	ldr	r3, [r3, #0]
 802af78:	69da      	ldr	r2, [r3, #28]
 802af7a:	687b      	ldr	r3, [r7, #4]
 802af7c:	681b      	ldr	r3, [r3, #0]
 802af7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802af82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802af84:	687b      	ldr	r3, [r7, #4]
 802af86:	2200      	movs	r2, #0
 802af88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802af8a:	687b      	ldr	r3, [r7, #4]
 802af8c:	2201      	movs	r2, #1
 802af8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802af92:	2300      	movs	r3, #0
}
 802af94:	4618      	mov	r0, r3
 802af96:	3708      	adds	r7, #8
 802af98:	46bd      	mov	sp, r7
 802af9a:	bd80      	pop	{r7, pc}

0802af9c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 802af9c:	b580      	push	{r7, lr}
 802af9e:	b082      	sub	sp, #8
 802afa0:	af00      	add	r7, sp, #0
 802afa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802afa4:	687b      	ldr	r3, [r7, #4]
 802afa6:	2b00      	cmp	r3, #0
 802afa8:	d101      	bne.n	802afae <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 802afaa:	2301      	movs	r3, #1
 802afac:	e01a      	b.n	802afe4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802afae:	687b      	ldr	r3, [r7, #4]
 802afb0:	2202      	movs	r2, #2
 802afb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 802afb6:	687b      	ldr	r3, [r7, #4]
 802afb8:	681b      	ldr	r3, [r3, #0]
 802afba:	681a      	ldr	r2, [r3, #0]
 802afbc:	687b      	ldr	r3, [r7, #4]
 802afbe:	681b      	ldr	r3, [r3, #0]
 802afc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802afc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 802afc6:	6878      	ldr	r0, [r7, #4]
 802afc8:	f7fb f954 	bl	8026274 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802afcc:	687b      	ldr	r3, [r7, #4]
 802afce:	2200      	movs	r2, #0
 802afd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802afd2:	687b      	ldr	r3, [r7, #4]
 802afd4:	2200      	movs	r2, #0
 802afd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 802afda:	687b      	ldr	r3, [r7, #4]
 802afdc:	2200      	movs	r2, #0
 802afde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802afe2:	2300      	movs	r3, #0
}
 802afe4:	4618      	mov	r0, r3
 802afe6:	3708      	adds	r7, #8
 802afe8:	46bd      	mov	sp, r7
 802afea:	bd80      	pop	{r7, pc}

0802afec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802afec:	b580      	push	{r7, lr}
 802afee:	b088      	sub	sp, #32
 802aff0:	af00      	add	r7, sp, #0
 802aff2:	60f8      	str	r0, [r7, #12]
 802aff4:	60b9      	str	r1, [r7, #8]
 802aff6:	603b      	str	r3, [r7, #0]
 802aff8:	4613      	mov	r3, r2
 802affa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802affc:	2300      	movs	r3, #0
 802affe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b000:	68fb      	ldr	r3, [r7, #12]
 802b002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b006:	2b01      	cmp	r3, #1
 802b008:	d101      	bne.n	802b00e <HAL_SPI_Transmit+0x22>
 802b00a:	2302      	movs	r3, #2
 802b00c:	e126      	b.n	802b25c <HAL_SPI_Transmit+0x270>
 802b00e:	68fb      	ldr	r3, [r7, #12]
 802b010:	2201      	movs	r2, #1
 802b012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b016:	f7fc fb93 	bl	8027740 <HAL_GetTick>
 802b01a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802b01c:	88fb      	ldrh	r3, [r7, #6]
 802b01e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802b020:	68fb      	ldr	r3, [r7, #12]
 802b022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b026:	b2db      	uxtb	r3, r3
 802b028:	2b01      	cmp	r3, #1
 802b02a:	d002      	beq.n	802b032 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802b02c:	2302      	movs	r3, #2
 802b02e:	77fb      	strb	r3, [r7, #31]
    goto error;
 802b030:	e10b      	b.n	802b24a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802b032:	68bb      	ldr	r3, [r7, #8]
 802b034:	2b00      	cmp	r3, #0
 802b036:	d002      	beq.n	802b03e <HAL_SPI_Transmit+0x52>
 802b038:	88fb      	ldrh	r3, [r7, #6]
 802b03a:	2b00      	cmp	r3, #0
 802b03c:	d102      	bne.n	802b044 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802b03e:	2301      	movs	r3, #1
 802b040:	77fb      	strb	r3, [r7, #31]
    goto error;
 802b042:	e102      	b.n	802b24a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802b044:	68fb      	ldr	r3, [r7, #12]
 802b046:	2203      	movs	r2, #3
 802b048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b04c:	68fb      	ldr	r3, [r7, #12]
 802b04e:	2200      	movs	r2, #0
 802b050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802b052:	68fb      	ldr	r3, [r7, #12]
 802b054:	68ba      	ldr	r2, [r7, #8]
 802b056:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802b058:	68fb      	ldr	r3, [r7, #12]
 802b05a:	88fa      	ldrh	r2, [r7, #6]
 802b05c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802b05e:	68fb      	ldr	r3, [r7, #12]
 802b060:	88fa      	ldrh	r2, [r7, #6]
 802b062:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802b064:	68fb      	ldr	r3, [r7, #12]
 802b066:	2200      	movs	r2, #0
 802b068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802b06a:	68fb      	ldr	r3, [r7, #12]
 802b06c:	2200      	movs	r2, #0
 802b06e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802b070:	68fb      	ldr	r3, [r7, #12]
 802b072:	2200      	movs	r2, #0
 802b074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	2200      	movs	r2, #0
 802b07a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802b07c:	68fb      	ldr	r3, [r7, #12]
 802b07e:	2200      	movs	r2, #0
 802b080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802b082:	68fb      	ldr	r3, [r7, #12]
 802b084:	689b      	ldr	r3, [r3, #8]
 802b086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b08a:	d10f      	bne.n	802b0ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802b08c:	68fb      	ldr	r3, [r7, #12]
 802b08e:	681b      	ldr	r3, [r3, #0]
 802b090:	681a      	ldr	r2, [r3, #0]
 802b092:	68fb      	ldr	r3, [r7, #12]
 802b094:	681b      	ldr	r3, [r3, #0]
 802b096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b09a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 802b09c:	68fb      	ldr	r3, [r7, #12]
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	681a      	ldr	r2, [r3, #0]
 802b0a2:	68fb      	ldr	r3, [r7, #12]
 802b0a4:	681b      	ldr	r3, [r3, #0]
 802b0a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802b0aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b0ac:	68fb      	ldr	r3, [r7, #12]
 802b0ae:	681b      	ldr	r3, [r3, #0]
 802b0b0:	681b      	ldr	r3, [r3, #0]
 802b0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b0b6:	2b40      	cmp	r3, #64	; 0x40
 802b0b8:	d007      	beq.n	802b0ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b0ba:	68fb      	ldr	r3, [r7, #12]
 802b0bc:	681b      	ldr	r3, [r3, #0]
 802b0be:	681a      	ldr	r2, [r3, #0]
 802b0c0:	68fb      	ldr	r3, [r7, #12]
 802b0c2:	681b      	ldr	r3, [r3, #0]
 802b0c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b0c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802b0ca:	68fb      	ldr	r3, [r7, #12]
 802b0cc:	68db      	ldr	r3, [r3, #12]
 802b0ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b0d2:	d14b      	bne.n	802b16c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b0d4:	68fb      	ldr	r3, [r7, #12]
 802b0d6:	685b      	ldr	r3, [r3, #4]
 802b0d8:	2b00      	cmp	r3, #0
 802b0da:	d002      	beq.n	802b0e2 <HAL_SPI_Transmit+0xf6>
 802b0dc:	8afb      	ldrh	r3, [r7, #22]
 802b0de:	2b01      	cmp	r3, #1
 802b0e0:	d13e      	bne.n	802b160 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b0e2:	68fb      	ldr	r3, [r7, #12]
 802b0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b0e6:	881a      	ldrh	r2, [r3, #0]
 802b0e8:	68fb      	ldr	r3, [r7, #12]
 802b0ea:	681b      	ldr	r3, [r3, #0]
 802b0ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802b0ee:	68fb      	ldr	r3, [r7, #12]
 802b0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b0f2:	1c9a      	adds	r2, r3, #2
 802b0f4:	68fb      	ldr	r3, [r7, #12]
 802b0f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b0f8:	68fb      	ldr	r3, [r7, #12]
 802b0fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b0fc:	b29b      	uxth	r3, r3
 802b0fe:	3b01      	subs	r3, #1
 802b100:	b29a      	uxth	r2, r3
 802b102:	68fb      	ldr	r3, [r7, #12]
 802b104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802b106:	e02b      	b.n	802b160 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802b108:	68fb      	ldr	r3, [r7, #12]
 802b10a:	681b      	ldr	r3, [r3, #0]
 802b10c:	689b      	ldr	r3, [r3, #8]
 802b10e:	f003 0302 	and.w	r3, r3, #2
 802b112:	2b02      	cmp	r3, #2
 802b114:	d112      	bne.n	802b13c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b116:	68fb      	ldr	r3, [r7, #12]
 802b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b11a:	881a      	ldrh	r2, [r3, #0]
 802b11c:	68fb      	ldr	r3, [r7, #12]
 802b11e:	681b      	ldr	r3, [r3, #0]
 802b120:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802b122:	68fb      	ldr	r3, [r7, #12]
 802b124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b126:	1c9a      	adds	r2, r3, #2
 802b128:	68fb      	ldr	r3, [r7, #12]
 802b12a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b12c:	68fb      	ldr	r3, [r7, #12]
 802b12e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b130:	b29b      	uxth	r3, r3
 802b132:	3b01      	subs	r3, #1
 802b134:	b29a      	uxth	r2, r3
 802b136:	68fb      	ldr	r3, [r7, #12]
 802b138:	86da      	strh	r2, [r3, #54]	; 0x36
 802b13a:	e011      	b.n	802b160 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b13c:	f7fc fb00 	bl	8027740 <HAL_GetTick>
 802b140:	4602      	mov	r2, r0
 802b142:	69bb      	ldr	r3, [r7, #24]
 802b144:	1ad3      	subs	r3, r2, r3
 802b146:	683a      	ldr	r2, [r7, #0]
 802b148:	429a      	cmp	r2, r3
 802b14a:	d803      	bhi.n	802b154 <HAL_SPI_Transmit+0x168>
 802b14c:	683b      	ldr	r3, [r7, #0]
 802b14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b152:	d102      	bne.n	802b15a <HAL_SPI_Transmit+0x16e>
 802b154:	683b      	ldr	r3, [r7, #0]
 802b156:	2b00      	cmp	r3, #0
 802b158:	d102      	bne.n	802b160 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 802b15a:	2303      	movs	r3, #3
 802b15c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802b15e:	e074      	b.n	802b24a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802b160:	68fb      	ldr	r3, [r7, #12]
 802b162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b164:	b29b      	uxth	r3, r3
 802b166:	2b00      	cmp	r3, #0
 802b168:	d1ce      	bne.n	802b108 <HAL_SPI_Transmit+0x11c>
 802b16a:	e04c      	b.n	802b206 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b16c:	68fb      	ldr	r3, [r7, #12]
 802b16e:	685b      	ldr	r3, [r3, #4]
 802b170:	2b00      	cmp	r3, #0
 802b172:	d002      	beq.n	802b17a <HAL_SPI_Transmit+0x18e>
 802b174:	8afb      	ldrh	r3, [r7, #22]
 802b176:	2b01      	cmp	r3, #1
 802b178:	d140      	bne.n	802b1fc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b17a:	68fb      	ldr	r3, [r7, #12]
 802b17c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b17e:	68fb      	ldr	r3, [r7, #12]
 802b180:	681b      	ldr	r3, [r3, #0]
 802b182:	330c      	adds	r3, #12
 802b184:	7812      	ldrb	r2, [r2, #0]
 802b186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802b188:	68fb      	ldr	r3, [r7, #12]
 802b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b18c:	1c5a      	adds	r2, r3, #1
 802b18e:	68fb      	ldr	r3, [r7, #12]
 802b190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b192:	68fb      	ldr	r3, [r7, #12]
 802b194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b196:	b29b      	uxth	r3, r3
 802b198:	3b01      	subs	r3, #1
 802b19a:	b29a      	uxth	r2, r3
 802b19c:	68fb      	ldr	r3, [r7, #12]
 802b19e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 802b1a0:	e02c      	b.n	802b1fc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802b1a2:	68fb      	ldr	r3, [r7, #12]
 802b1a4:	681b      	ldr	r3, [r3, #0]
 802b1a6:	689b      	ldr	r3, [r3, #8]
 802b1a8:	f003 0302 	and.w	r3, r3, #2
 802b1ac:	2b02      	cmp	r3, #2
 802b1ae:	d113      	bne.n	802b1d8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b1b0:	68fb      	ldr	r3, [r7, #12]
 802b1b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b1b4:	68fb      	ldr	r3, [r7, #12]
 802b1b6:	681b      	ldr	r3, [r3, #0]
 802b1b8:	330c      	adds	r3, #12
 802b1ba:	7812      	ldrb	r2, [r2, #0]
 802b1bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802b1be:	68fb      	ldr	r3, [r7, #12]
 802b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b1c2:	1c5a      	adds	r2, r3, #1
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b1c8:	68fb      	ldr	r3, [r7, #12]
 802b1ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b1cc:	b29b      	uxth	r3, r3
 802b1ce:	3b01      	subs	r3, #1
 802b1d0:	b29a      	uxth	r2, r3
 802b1d2:	68fb      	ldr	r3, [r7, #12]
 802b1d4:	86da      	strh	r2, [r3, #54]	; 0x36
 802b1d6:	e011      	b.n	802b1fc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b1d8:	f7fc fab2 	bl	8027740 <HAL_GetTick>
 802b1dc:	4602      	mov	r2, r0
 802b1de:	69bb      	ldr	r3, [r7, #24]
 802b1e0:	1ad3      	subs	r3, r2, r3
 802b1e2:	683a      	ldr	r2, [r7, #0]
 802b1e4:	429a      	cmp	r2, r3
 802b1e6:	d803      	bhi.n	802b1f0 <HAL_SPI_Transmit+0x204>
 802b1e8:	683b      	ldr	r3, [r7, #0]
 802b1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b1ee:	d102      	bne.n	802b1f6 <HAL_SPI_Transmit+0x20a>
 802b1f0:	683b      	ldr	r3, [r7, #0]
 802b1f2:	2b00      	cmp	r3, #0
 802b1f4:	d102      	bne.n	802b1fc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 802b1f6:	2303      	movs	r3, #3
 802b1f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 802b1fa:	e026      	b.n	802b24a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802b1fc:	68fb      	ldr	r3, [r7, #12]
 802b1fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b200:	b29b      	uxth	r3, r3
 802b202:	2b00      	cmp	r3, #0
 802b204:	d1cd      	bne.n	802b1a2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b206:	69ba      	ldr	r2, [r7, #24]
 802b208:	6839      	ldr	r1, [r7, #0]
 802b20a:	68f8      	ldr	r0, [r7, #12]
 802b20c:	f000 fcec 	bl	802bbe8 <SPI_EndRxTxTransaction>
 802b210:	4603      	mov	r3, r0
 802b212:	2b00      	cmp	r3, #0
 802b214:	d002      	beq.n	802b21c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b216:	68fb      	ldr	r3, [r7, #12]
 802b218:	2220      	movs	r2, #32
 802b21a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802b21c:	68fb      	ldr	r3, [r7, #12]
 802b21e:	689b      	ldr	r3, [r3, #8]
 802b220:	2b00      	cmp	r3, #0
 802b222:	d10a      	bne.n	802b23a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b224:	2300      	movs	r3, #0
 802b226:	613b      	str	r3, [r7, #16]
 802b228:	68fb      	ldr	r3, [r7, #12]
 802b22a:	681b      	ldr	r3, [r3, #0]
 802b22c:	68db      	ldr	r3, [r3, #12]
 802b22e:	613b      	str	r3, [r7, #16]
 802b230:	68fb      	ldr	r3, [r7, #12]
 802b232:	681b      	ldr	r3, [r3, #0]
 802b234:	689b      	ldr	r3, [r3, #8]
 802b236:	613b      	str	r3, [r7, #16]
 802b238:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b23a:	68fb      	ldr	r3, [r7, #12]
 802b23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b23e:	2b00      	cmp	r3, #0
 802b240:	d002      	beq.n	802b248 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802b242:	2301      	movs	r3, #1
 802b244:	77fb      	strb	r3, [r7, #31]
 802b246:	e000      	b.n	802b24a <HAL_SPI_Transmit+0x25e>
  }

error:
 802b248:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b24a:	68fb      	ldr	r3, [r7, #12]
 802b24c:	2201      	movs	r2, #1
 802b24e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802b252:	68fb      	ldr	r3, [r7, #12]
 802b254:	2200      	movs	r2, #0
 802b256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b25a:	7ffb      	ldrb	r3, [r7, #31]
}
 802b25c:	4618      	mov	r0, r3
 802b25e:	3720      	adds	r7, #32
 802b260:	46bd      	mov	sp, r7
 802b262:	bd80      	pop	{r7, pc}

0802b264 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802b264:	b580      	push	{r7, lr}
 802b266:	b088      	sub	sp, #32
 802b268:	af02      	add	r7, sp, #8
 802b26a:	60f8      	str	r0, [r7, #12]
 802b26c:	60b9      	str	r1, [r7, #8]
 802b26e:	603b      	str	r3, [r7, #0]
 802b270:	4613      	mov	r3, r2
 802b272:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802b274:	2300      	movs	r3, #0
 802b276:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 802b278:	68fb      	ldr	r3, [r7, #12]
 802b27a:	685b      	ldr	r3, [r3, #4]
 802b27c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b280:	d112      	bne.n	802b2a8 <HAL_SPI_Receive+0x44>
 802b282:	68fb      	ldr	r3, [r7, #12]
 802b284:	689b      	ldr	r3, [r3, #8]
 802b286:	2b00      	cmp	r3, #0
 802b288:	d10e      	bne.n	802b2a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 802b28a:	68fb      	ldr	r3, [r7, #12]
 802b28c:	2204      	movs	r2, #4
 802b28e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802b292:	88fa      	ldrh	r2, [r7, #6]
 802b294:	683b      	ldr	r3, [r7, #0]
 802b296:	9300      	str	r3, [sp, #0]
 802b298:	4613      	mov	r3, r2
 802b29a:	68ba      	ldr	r2, [r7, #8]
 802b29c:	68b9      	ldr	r1, [r7, #8]
 802b29e:	68f8      	ldr	r0, [r7, #12]
 802b2a0:	f000 f8f1 	bl	802b486 <HAL_SPI_TransmitReceive>
 802b2a4:	4603      	mov	r3, r0
 802b2a6:	e0ea      	b.n	802b47e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b2a8:	68fb      	ldr	r3, [r7, #12]
 802b2aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b2ae:	2b01      	cmp	r3, #1
 802b2b0:	d101      	bne.n	802b2b6 <HAL_SPI_Receive+0x52>
 802b2b2:	2302      	movs	r3, #2
 802b2b4:	e0e3      	b.n	802b47e <HAL_SPI_Receive+0x21a>
 802b2b6:	68fb      	ldr	r3, [r7, #12]
 802b2b8:	2201      	movs	r2, #1
 802b2ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b2be:	f7fc fa3f 	bl	8027740 <HAL_GetTick>
 802b2c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 802b2c4:	68fb      	ldr	r3, [r7, #12]
 802b2c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b2ca:	b2db      	uxtb	r3, r3
 802b2cc:	2b01      	cmp	r3, #1
 802b2ce:	d002      	beq.n	802b2d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 802b2d0:	2302      	movs	r3, #2
 802b2d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b2d4:	e0ca      	b.n	802b46c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 802b2d6:	68bb      	ldr	r3, [r7, #8]
 802b2d8:	2b00      	cmp	r3, #0
 802b2da:	d002      	beq.n	802b2e2 <HAL_SPI_Receive+0x7e>
 802b2dc:	88fb      	ldrh	r3, [r7, #6]
 802b2de:	2b00      	cmp	r3, #0
 802b2e0:	d102      	bne.n	802b2e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802b2e2:	2301      	movs	r3, #1
 802b2e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 802b2e6:	e0c1      	b.n	802b46c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 802b2e8:	68fb      	ldr	r3, [r7, #12]
 802b2ea:	2204      	movs	r2, #4
 802b2ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b2f0:	68fb      	ldr	r3, [r7, #12]
 802b2f2:	2200      	movs	r2, #0
 802b2f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802b2f6:	68fb      	ldr	r3, [r7, #12]
 802b2f8:	68ba      	ldr	r2, [r7, #8]
 802b2fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802b2fc:	68fb      	ldr	r3, [r7, #12]
 802b2fe:	88fa      	ldrh	r2, [r7, #6]
 802b300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802b302:	68fb      	ldr	r3, [r7, #12]
 802b304:	88fa      	ldrh	r2, [r7, #6]
 802b306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 802b308:	68fb      	ldr	r3, [r7, #12]
 802b30a:	2200      	movs	r2, #0
 802b30c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802b30e:	68fb      	ldr	r3, [r7, #12]
 802b310:	2200      	movs	r2, #0
 802b312:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 802b314:	68fb      	ldr	r3, [r7, #12]
 802b316:	2200      	movs	r2, #0
 802b318:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 802b31a:	68fb      	ldr	r3, [r7, #12]
 802b31c:	2200      	movs	r2, #0
 802b31e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802b320:	68fb      	ldr	r3, [r7, #12]
 802b322:	2200      	movs	r2, #0
 802b324:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802b326:	68fb      	ldr	r3, [r7, #12]
 802b328:	689b      	ldr	r3, [r3, #8]
 802b32a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802b32e:	d10f      	bne.n	802b350 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802b330:	68fb      	ldr	r3, [r7, #12]
 802b332:	681b      	ldr	r3, [r3, #0]
 802b334:	681a      	ldr	r2, [r3, #0]
 802b336:	68fb      	ldr	r3, [r7, #12]
 802b338:	681b      	ldr	r3, [r3, #0]
 802b33a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b33e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802b340:	68fb      	ldr	r3, [r7, #12]
 802b342:	681b      	ldr	r3, [r3, #0]
 802b344:	681a      	ldr	r2, [r3, #0]
 802b346:	68fb      	ldr	r3, [r7, #12]
 802b348:	681b      	ldr	r3, [r3, #0]
 802b34a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802b34e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b350:	68fb      	ldr	r3, [r7, #12]
 802b352:	681b      	ldr	r3, [r3, #0]
 802b354:	681b      	ldr	r3, [r3, #0]
 802b356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b35a:	2b40      	cmp	r3, #64	; 0x40
 802b35c:	d007      	beq.n	802b36e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b35e:	68fb      	ldr	r3, [r7, #12]
 802b360:	681b      	ldr	r3, [r3, #0]
 802b362:	681a      	ldr	r2, [r3, #0]
 802b364:	68fb      	ldr	r3, [r7, #12]
 802b366:	681b      	ldr	r3, [r3, #0]
 802b368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b36c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802b36e:	68fb      	ldr	r3, [r7, #12]
 802b370:	68db      	ldr	r3, [r3, #12]
 802b372:	2b00      	cmp	r3, #0
 802b374:	d162      	bne.n	802b43c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 802b376:	e02e      	b.n	802b3d6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802b378:	68fb      	ldr	r3, [r7, #12]
 802b37a:	681b      	ldr	r3, [r3, #0]
 802b37c:	689b      	ldr	r3, [r3, #8]
 802b37e:	f003 0301 	and.w	r3, r3, #1
 802b382:	2b01      	cmp	r3, #1
 802b384:	d115      	bne.n	802b3b2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802b386:	68fb      	ldr	r3, [r7, #12]
 802b388:	681b      	ldr	r3, [r3, #0]
 802b38a:	f103 020c 	add.w	r2, r3, #12
 802b38e:	68fb      	ldr	r3, [r7, #12]
 802b390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b392:	7812      	ldrb	r2, [r2, #0]
 802b394:	b2d2      	uxtb	r2, r2
 802b396:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802b398:	68fb      	ldr	r3, [r7, #12]
 802b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b39c:	1c5a      	adds	r2, r3, #1
 802b39e:	68fb      	ldr	r3, [r7, #12]
 802b3a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b3a2:	68fb      	ldr	r3, [r7, #12]
 802b3a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b3a6:	b29b      	uxth	r3, r3
 802b3a8:	3b01      	subs	r3, #1
 802b3aa:	b29a      	uxth	r2, r3
 802b3ac:	68fb      	ldr	r3, [r7, #12]
 802b3ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 802b3b0:	e011      	b.n	802b3d6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b3b2:	f7fc f9c5 	bl	8027740 <HAL_GetTick>
 802b3b6:	4602      	mov	r2, r0
 802b3b8:	693b      	ldr	r3, [r7, #16]
 802b3ba:	1ad3      	subs	r3, r2, r3
 802b3bc:	683a      	ldr	r2, [r7, #0]
 802b3be:	429a      	cmp	r2, r3
 802b3c0:	d803      	bhi.n	802b3ca <HAL_SPI_Receive+0x166>
 802b3c2:	683b      	ldr	r3, [r7, #0]
 802b3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b3c8:	d102      	bne.n	802b3d0 <HAL_SPI_Receive+0x16c>
 802b3ca:	683b      	ldr	r3, [r7, #0]
 802b3cc:	2b00      	cmp	r3, #0
 802b3ce:	d102      	bne.n	802b3d6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 802b3d0:	2303      	movs	r3, #3
 802b3d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 802b3d4:	e04a      	b.n	802b46c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802b3d6:	68fb      	ldr	r3, [r7, #12]
 802b3d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b3da:	b29b      	uxth	r3, r3
 802b3dc:	2b00      	cmp	r3, #0
 802b3de:	d1cb      	bne.n	802b378 <HAL_SPI_Receive+0x114>
 802b3e0:	e031      	b.n	802b446 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802b3e2:	68fb      	ldr	r3, [r7, #12]
 802b3e4:	681b      	ldr	r3, [r3, #0]
 802b3e6:	689b      	ldr	r3, [r3, #8]
 802b3e8:	f003 0301 	and.w	r3, r3, #1
 802b3ec:	2b01      	cmp	r3, #1
 802b3ee:	d113      	bne.n	802b418 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802b3f0:	68fb      	ldr	r3, [r7, #12]
 802b3f2:	681b      	ldr	r3, [r3, #0]
 802b3f4:	68da      	ldr	r2, [r3, #12]
 802b3f6:	68fb      	ldr	r3, [r7, #12]
 802b3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b3fa:	b292      	uxth	r2, r2
 802b3fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802b3fe:	68fb      	ldr	r3, [r7, #12]
 802b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b402:	1c9a      	adds	r2, r3, #2
 802b404:	68fb      	ldr	r3, [r7, #12]
 802b406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b408:	68fb      	ldr	r3, [r7, #12]
 802b40a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b40c:	b29b      	uxth	r3, r3
 802b40e:	3b01      	subs	r3, #1
 802b410:	b29a      	uxth	r2, r3
 802b412:	68fb      	ldr	r3, [r7, #12]
 802b414:	87da      	strh	r2, [r3, #62]	; 0x3e
 802b416:	e011      	b.n	802b43c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802b418:	f7fc f992 	bl	8027740 <HAL_GetTick>
 802b41c:	4602      	mov	r2, r0
 802b41e:	693b      	ldr	r3, [r7, #16]
 802b420:	1ad3      	subs	r3, r2, r3
 802b422:	683a      	ldr	r2, [r7, #0]
 802b424:	429a      	cmp	r2, r3
 802b426:	d803      	bhi.n	802b430 <HAL_SPI_Receive+0x1cc>
 802b428:	683b      	ldr	r3, [r7, #0]
 802b42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b42e:	d102      	bne.n	802b436 <HAL_SPI_Receive+0x1d2>
 802b430:	683b      	ldr	r3, [r7, #0]
 802b432:	2b00      	cmp	r3, #0
 802b434:	d102      	bne.n	802b43c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 802b436:	2303      	movs	r3, #3
 802b438:	75fb      	strb	r3, [r7, #23]
          goto error;
 802b43a:	e017      	b.n	802b46c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802b43c:	68fb      	ldr	r3, [r7, #12]
 802b43e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b440:	b29b      	uxth	r3, r3
 802b442:	2b00      	cmp	r3, #0
 802b444:	d1cd      	bne.n	802b3e2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b446:	693a      	ldr	r2, [r7, #16]
 802b448:	6839      	ldr	r1, [r7, #0]
 802b44a:	68f8      	ldr	r0, [r7, #12]
 802b44c:	f000 fb66 	bl	802bb1c <SPI_EndRxTransaction>
 802b450:	4603      	mov	r3, r0
 802b452:	2b00      	cmp	r3, #0
 802b454:	d002      	beq.n	802b45c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b456:	68fb      	ldr	r3, [r7, #12]
 802b458:	2220      	movs	r2, #32
 802b45a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b45c:	68fb      	ldr	r3, [r7, #12]
 802b45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b460:	2b00      	cmp	r3, #0
 802b462:	d002      	beq.n	802b46a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 802b464:	2301      	movs	r3, #1
 802b466:	75fb      	strb	r3, [r7, #23]
 802b468:	e000      	b.n	802b46c <HAL_SPI_Receive+0x208>
  }

error :
 802b46a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b46c:	68fb      	ldr	r3, [r7, #12]
 802b46e:	2201      	movs	r2, #1
 802b470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802b474:	68fb      	ldr	r3, [r7, #12]
 802b476:	2200      	movs	r2, #0
 802b478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b47c:	7dfb      	ldrb	r3, [r7, #23]
}
 802b47e:	4618      	mov	r0, r3
 802b480:	3718      	adds	r7, #24
 802b482:	46bd      	mov	sp, r7
 802b484:	bd80      	pop	{r7, pc}

0802b486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 802b486:	b580      	push	{r7, lr}
 802b488:	b08c      	sub	sp, #48	; 0x30
 802b48a:	af00      	add	r7, sp, #0
 802b48c:	60f8      	str	r0, [r7, #12]
 802b48e:	60b9      	str	r1, [r7, #8]
 802b490:	607a      	str	r2, [r7, #4]
 802b492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802b494:	2301      	movs	r3, #1
 802b496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802b498:	2300      	movs	r3, #0
 802b49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802b49e:	68fb      	ldr	r3, [r7, #12]
 802b4a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802b4a4:	2b01      	cmp	r3, #1
 802b4a6:	d101      	bne.n	802b4ac <HAL_SPI_TransmitReceive+0x26>
 802b4a8:	2302      	movs	r3, #2
 802b4aa:	e18a      	b.n	802b7c2 <HAL_SPI_TransmitReceive+0x33c>
 802b4ac:	68fb      	ldr	r3, [r7, #12]
 802b4ae:	2201      	movs	r2, #1
 802b4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802b4b4:	f7fc f944 	bl	8027740 <HAL_GetTick>
 802b4b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802b4ba:	68fb      	ldr	r3, [r7, #12]
 802b4bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b4c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 802b4c4:	68fb      	ldr	r3, [r7, #12]
 802b4c6:	685b      	ldr	r3, [r3, #4]
 802b4c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802b4ca:	887b      	ldrh	r3, [r7, #2]
 802b4cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802b4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802b4d2:	2b01      	cmp	r3, #1
 802b4d4:	d00f      	beq.n	802b4f6 <HAL_SPI_TransmitReceive+0x70>
 802b4d6:	69fb      	ldr	r3, [r7, #28]
 802b4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802b4dc:	d107      	bne.n	802b4ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802b4de:	68fb      	ldr	r3, [r7, #12]
 802b4e0:	689b      	ldr	r3, [r3, #8]
 802b4e2:	2b00      	cmp	r3, #0
 802b4e4:	d103      	bne.n	802b4ee <HAL_SPI_TransmitReceive+0x68>
 802b4e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802b4ea:	2b04      	cmp	r3, #4
 802b4ec:	d003      	beq.n	802b4f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802b4ee:	2302      	movs	r3, #2
 802b4f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802b4f4:	e15b      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802b4f6:	68bb      	ldr	r3, [r7, #8]
 802b4f8:	2b00      	cmp	r3, #0
 802b4fa:	d005      	beq.n	802b508 <HAL_SPI_TransmitReceive+0x82>
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	2b00      	cmp	r3, #0
 802b500:	d002      	beq.n	802b508 <HAL_SPI_TransmitReceive+0x82>
 802b502:	887b      	ldrh	r3, [r7, #2]
 802b504:	2b00      	cmp	r3, #0
 802b506:	d103      	bne.n	802b510 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 802b508:	2301      	movs	r3, #1
 802b50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802b50e:	e14e      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802b510:	68fb      	ldr	r3, [r7, #12]
 802b512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b516:	b2db      	uxtb	r3, r3
 802b518:	2b04      	cmp	r3, #4
 802b51a:	d003      	beq.n	802b524 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802b51c:	68fb      	ldr	r3, [r7, #12]
 802b51e:	2205      	movs	r2, #5
 802b520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802b524:	68fb      	ldr	r3, [r7, #12]
 802b526:	2200      	movs	r2, #0
 802b528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802b52a:	68fb      	ldr	r3, [r7, #12]
 802b52c:	687a      	ldr	r2, [r7, #4]
 802b52e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802b530:	68fb      	ldr	r3, [r7, #12]
 802b532:	887a      	ldrh	r2, [r7, #2]
 802b534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 802b536:	68fb      	ldr	r3, [r7, #12]
 802b538:	887a      	ldrh	r2, [r7, #2]
 802b53a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802b53c:	68fb      	ldr	r3, [r7, #12]
 802b53e:	68ba      	ldr	r2, [r7, #8]
 802b540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802b542:	68fb      	ldr	r3, [r7, #12]
 802b544:	887a      	ldrh	r2, [r7, #2]
 802b546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 802b548:	68fb      	ldr	r3, [r7, #12]
 802b54a:	887a      	ldrh	r2, [r7, #2]
 802b54c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802b54e:	68fb      	ldr	r3, [r7, #12]
 802b550:	2200      	movs	r2, #0
 802b552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802b554:	68fb      	ldr	r3, [r7, #12]
 802b556:	2200      	movs	r2, #0
 802b558:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802b55a:	68fb      	ldr	r3, [r7, #12]
 802b55c:	681b      	ldr	r3, [r3, #0]
 802b55e:	681b      	ldr	r3, [r3, #0]
 802b560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b564:	2b40      	cmp	r3, #64	; 0x40
 802b566:	d007      	beq.n	802b578 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802b568:	68fb      	ldr	r3, [r7, #12]
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	681a      	ldr	r2, [r3, #0]
 802b56e:	68fb      	ldr	r3, [r7, #12]
 802b570:	681b      	ldr	r3, [r3, #0]
 802b572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802b576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802b578:	68fb      	ldr	r3, [r7, #12]
 802b57a:	68db      	ldr	r3, [r3, #12]
 802b57c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b580:	d178      	bne.n	802b674 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b582:	68fb      	ldr	r3, [r7, #12]
 802b584:	685b      	ldr	r3, [r3, #4]
 802b586:	2b00      	cmp	r3, #0
 802b588:	d002      	beq.n	802b590 <HAL_SPI_TransmitReceive+0x10a>
 802b58a:	8b7b      	ldrh	r3, [r7, #26]
 802b58c:	2b01      	cmp	r3, #1
 802b58e:	d166      	bne.n	802b65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b590:	68fb      	ldr	r3, [r7, #12]
 802b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b594:	881a      	ldrh	r2, [r3, #0]
 802b596:	68fb      	ldr	r3, [r7, #12]
 802b598:	681b      	ldr	r3, [r3, #0]
 802b59a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802b59c:	68fb      	ldr	r3, [r7, #12]
 802b59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5a0:	1c9a      	adds	r2, r3, #2
 802b5a2:	68fb      	ldr	r3, [r7, #12]
 802b5a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b5a6:	68fb      	ldr	r3, [r7, #12]
 802b5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5aa:	b29b      	uxth	r3, r3
 802b5ac:	3b01      	subs	r3, #1
 802b5ae:	b29a      	uxth	r2, r3
 802b5b0:	68fb      	ldr	r3, [r7, #12]
 802b5b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b5b4:	e053      	b.n	802b65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b5b6:	68fb      	ldr	r3, [r7, #12]
 802b5b8:	681b      	ldr	r3, [r3, #0]
 802b5ba:	689b      	ldr	r3, [r3, #8]
 802b5bc:	f003 0302 	and.w	r3, r3, #2
 802b5c0:	2b02      	cmp	r3, #2
 802b5c2:	d11b      	bne.n	802b5fc <HAL_SPI_TransmitReceive+0x176>
 802b5c4:	68fb      	ldr	r3, [r7, #12]
 802b5c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5c8:	b29b      	uxth	r3, r3
 802b5ca:	2b00      	cmp	r3, #0
 802b5cc:	d016      	beq.n	802b5fc <HAL_SPI_TransmitReceive+0x176>
 802b5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b5d0:	2b01      	cmp	r3, #1
 802b5d2:	d113      	bne.n	802b5fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802b5d4:	68fb      	ldr	r3, [r7, #12]
 802b5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5d8:	881a      	ldrh	r2, [r3, #0]
 802b5da:	68fb      	ldr	r3, [r7, #12]
 802b5dc:	681b      	ldr	r3, [r3, #0]
 802b5de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802b5e0:	68fb      	ldr	r3, [r7, #12]
 802b5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b5e4:	1c9a      	adds	r2, r3, #2
 802b5e6:	68fb      	ldr	r3, [r7, #12]
 802b5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b5ea:	68fb      	ldr	r3, [r7, #12]
 802b5ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b5ee:	b29b      	uxth	r3, r3
 802b5f0:	3b01      	subs	r3, #1
 802b5f2:	b29a      	uxth	r2, r3
 802b5f4:	68fb      	ldr	r3, [r7, #12]
 802b5f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b5f8:	2300      	movs	r3, #0
 802b5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b5fc:	68fb      	ldr	r3, [r7, #12]
 802b5fe:	681b      	ldr	r3, [r3, #0]
 802b600:	689b      	ldr	r3, [r3, #8]
 802b602:	f003 0301 	and.w	r3, r3, #1
 802b606:	2b01      	cmp	r3, #1
 802b608:	d119      	bne.n	802b63e <HAL_SPI_TransmitReceive+0x1b8>
 802b60a:	68fb      	ldr	r3, [r7, #12]
 802b60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b60e:	b29b      	uxth	r3, r3
 802b610:	2b00      	cmp	r3, #0
 802b612:	d014      	beq.n	802b63e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802b614:	68fb      	ldr	r3, [r7, #12]
 802b616:	681b      	ldr	r3, [r3, #0]
 802b618:	68da      	ldr	r2, [r3, #12]
 802b61a:	68fb      	ldr	r3, [r7, #12]
 802b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b61e:	b292      	uxth	r2, r2
 802b620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802b622:	68fb      	ldr	r3, [r7, #12]
 802b624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b626:	1c9a      	adds	r2, r3, #2
 802b628:	68fb      	ldr	r3, [r7, #12]
 802b62a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b62c:	68fb      	ldr	r3, [r7, #12]
 802b62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b630:	b29b      	uxth	r3, r3
 802b632:	3b01      	subs	r3, #1
 802b634:	b29a      	uxth	r2, r3
 802b636:	68fb      	ldr	r3, [r7, #12]
 802b638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b63a:	2301      	movs	r3, #1
 802b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802b63e:	f7fc f87f 	bl	8027740 <HAL_GetTick>
 802b642:	4602      	mov	r2, r0
 802b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b646:	1ad3      	subs	r3, r2, r3
 802b648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b64a:	429a      	cmp	r2, r3
 802b64c:	d807      	bhi.n	802b65e <HAL_SPI_TransmitReceive+0x1d8>
 802b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b650:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b654:	d003      	beq.n	802b65e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 802b656:	2303      	movs	r3, #3
 802b658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b65c:	e0a7      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b65e:	68fb      	ldr	r3, [r7, #12]
 802b660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b662:	b29b      	uxth	r3, r3
 802b664:	2b00      	cmp	r3, #0
 802b666:	d1a6      	bne.n	802b5b6 <HAL_SPI_TransmitReceive+0x130>
 802b668:	68fb      	ldr	r3, [r7, #12]
 802b66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b66c:	b29b      	uxth	r3, r3
 802b66e:	2b00      	cmp	r3, #0
 802b670:	d1a1      	bne.n	802b5b6 <HAL_SPI_TransmitReceive+0x130>
 802b672:	e07c      	b.n	802b76e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802b674:	68fb      	ldr	r3, [r7, #12]
 802b676:	685b      	ldr	r3, [r3, #4]
 802b678:	2b00      	cmp	r3, #0
 802b67a:	d002      	beq.n	802b682 <HAL_SPI_TransmitReceive+0x1fc>
 802b67c:	8b7b      	ldrh	r3, [r7, #26]
 802b67e:	2b01      	cmp	r3, #1
 802b680:	d16b      	bne.n	802b75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802b682:	68fb      	ldr	r3, [r7, #12]
 802b684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b686:	68fb      	ldr	r3, [r7, #12]
 802b688:	681b      	ldr	r3, [r3, #0]
 802b68a:	330c      	adds	r3, #12
 802b68c:	7812      	ldrb	r2, [r2, #0]
 802b68e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802b690:	68fb      	ldr	r3, [r7, #12]
 802b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b694:	1c5a      	adds	r2, r3, #1
 802b696:	68fb      	ldr	r3, [r7, #12]
 802b698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802b69a:	68fb      	ldr	r3, [r7, #12]
 802b69c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b69e:	b29b      	uxth	r3, r3
 802b6a0:	3b01      	subs	r3, #1
 802b6a2:	b29a      	uxth	r2, r3
 802b6a4:	68fb      	ldr	r3, [r7, #12]
 802b6a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b6a8:	e057      	b.n	802b75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802b6aa:	68fb      	ldr	r3, [r7, #12]
 802b6ac:	681b      	ldr	r3, [r3, #0]
 802b6ae:	689b      	ldr	r3, [r3, #8]
 802b6b0:	f003 0302 	and.w	r3, r3, #2
 802b6b4:	2b02      	cmp	r3, #2
 802b6b6:	d11c      	bne.n	802b6f2 <HAL_SPI_TransmitReceive+0x26c>
 802b6b8:	68fb      	ldr	r3, [r7, #12]
 802b6ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b6bc:	b29b      	uxth	r3, r3
 802b6be:	2b00      	cmp	r3, #0
 802b6c0:	d017      	beq.n	802b6f2 <HAL_SPI_TransmitReceive+0x26c>
 802b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b6c4:	2b01      	cmp	r3, #1
 802b6c6:	d114      	bne.n	802b6f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802b6c8:	68fb      	ldr	r3, [r7, #12]
 802b6ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802b6cc:	68fb      	ldr	r3, [r7, #12]
 802b6ce:	681b      	ldr	r3, [r3, #0]
 802b6d0:	330c      	adds	r3, #12
 802b6d2:	7812      	ldrb	r2, [r2, #0]
 802b6d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802b6d6:	68fb      	ldr	r3, [r7, #12]
 802b6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b6da:	1c5a      	adds	r2, r3, #1
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802b6e0:	68fb      	ldr	r3, [r7, #12]
 802b6e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b6e4:	b29b      	uxth	r3, r3
 802b6e6:	3b01      	subs	r3, #1
 802b6e8:	b29a      	uxth	r2, r3
 802b6ea:	68fb      	ldr	r3, [r7, #12]
 802b6ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802b6ee:	2300      	movs	r3, #0
 802b6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802b6f2:	68fb      	ldr	r3, [r7, #12]
 802b6f4:	681b      	ldr	r3, [r3, #0]
 802b6f6:	689b      	ldr	r3, [r3, #8]
 802b6f8:	f003 0301 	and.w	r3, r3, #1
 802b6fc:	2b01      	cmp	r3, #1
 802b6fe:	d119      	bne.n	802b734 <HAL_SPI_TransmitReceive+0x2ae>
 802b700:	68fb      	ldr	r3, [r7, #12]
 802b702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b704:	b29b      	uxth	r3, r3
 802b706:	2b00      	cmp	r3, #0
 802b708:	d014      	beq.n	802b734 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802b70a:	68fb      	ldr	r3, [r7, #12]
 802b70c:	681b      	ldr	r3, [r3, #0]
 802b70e:	68da      	ldr	r2, [r3, #12]
 802b710:	68fb      	ldr	r3, [r7, #12]
 802b712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b714:	b2d2      	uxtb	r2, r2
 802b716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 802b718:	68fb      	ldr	r3, [r7, #12]
 802b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b71c:	1c5a      	adds	r2, r3, #1
 802b71e:	68fb      	ldr	r3, [r7, #12]
 802b720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802b722:	68fb      	ldr	r3, [r7, #12]
 802b724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b726:	b29b      	uxth	r3, r3
 802b728:	3b01      	subs	r3, #1
 802b72a:	b29a      	uxth	r2, r3
 802b72c:	68fb      	ldr	r3, [r7, #12]
 802b72e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802b730:	2301      	movs	r3, #1
 802b732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 802b734:	f7fc f804 	bl	8027740 <HAL_GetTick>
 802b738:	4602      	mov	r2, r0
 802b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b73c:	1ad3      	subs	r3, r2, r3
 802b73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802b740:	429a      	cmp	r2, r3
 802b742:	d803      	bhi.n	802b74c <HAL_SPI_TransmitReceive+0x2c6>
 802b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b746:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b74a:	d102      	bne.n	802b752 <HAL_SPI_TransmitReceive+0x2cc>
 802b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b74e:	2b00      	cmp	r3, #0
 802b750:	d103      	bne.n	802b75a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 802b752:	2303      	movs	r3, #3
 802b754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802b758:	e029      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802b75a:	68fb      	ldr	r3, [r7, #12]
 802b75c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802b75e:	b29b      	uxth	r3, r3
 802b760:	2b00      	cmp	r3, #0
 802b762:	d1a2      	bne.n	802b6aa <HAL_SPI_TransmitReceive+0x224>
 802b764:	68fb      	ldr	r3, [r7, #12]
 802b766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802b768:	b29b      	uxth	r3, r3
 802b76a:	2b00      	cmp	r3, #0
 802b76c:	d19d      	bne.n	802b6aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802b76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802b772:	68f8      	ldr	r0, [r7, #12]
 802b774:	f000 fa38 	bl	802bbe8 <SPI_EndRxTxTransaction>
 802b778:	4603      	mov	r3, r0
 802b77a:	2b00      	cmp	r3, #0
 802b77c:	d006      	beq.n	802b78c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802b77e:	2301      	movs	r3, #1
 802b780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802b784:	68fb      	ldr	r3, [r7, #12]
 802b786:	2220      	movs	r2, #32
 802b788:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802b78a:	e010      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802b78c:	68fb      	ldr	r3, [r7, #12]
 802b78e:	689b      	ldr	r3, [r3, #8]
 802b790:	2b00      	cmp	r3, #0
 802b792:	d10b      	bne.n	802b7ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b794:	2300      	movs	r3, #0
 802b796:	617b      	str	r3, [r7, #20]
 802b798:	68fb      	ldr	r3, [r7, #12]
 802b79a:	681b      	ldr	r3, [r3, #0]
 802b79c:	68db      	ldr	r3, [r3, #12]
 802b79e:	617b      	str	r3, [r7, #20]
 802b7a0:	68fb      	ldr	r3, [r7, #12]
 802b7a2:	681b      	ldr	r3, [r3, #0]
 802b7a4:	689b      	ldr	r3, [r3, #8]
 802b7a6:	617b      	str	r3, [r7, #20]
 802b7a8:	697b      	ldr	r3, [r7, #20]
 802b7aa:	e000      	b.n	802b7ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 802b7ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802b7ae:	68fb      	ldr	r3, [r7, #12]
 802b7b0:	2201      	movs	r2, #1
 802b7b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802b7b6:	68fb      	ldr	r3, [r7, #12]
 802b7b8:	2200      	movs	r2, #0
 802b7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802b7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802b7c2:	4618      	mov	r0, r3
 802b7c4:	3730      	adds	r7, #48	; 0x30
 802b7c6:	46bd      	mov	sp, r7
 802b7c8:	bd80      	pop	{r7, pc}
	...

0802b7cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802b7cc:	b580      	push	{r7, lr}
 802b7ce:	b088      	sub	sp, #32
 802b7d0:	af00      	add	r7, sp, #0
 802b7d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802b7d4:	687b      	ldr	r3, [r7, #4]
 802b7d6:	681b      	ldr	r3, [r3, #0]
 802b7d8:	685b      	ldr	r3, [r3, #4]
 802b7da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802b7dc:	687b      	ldr	r3, [r7, #4]
 802b7de:	681b      	ldr	r3, [r3, #0]
 802b7e0:	689b      	ldr	r3, [r3, #8]
 802b7e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b7e4:	69bb      	ldr	r3, [r7, #24]
 802b7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7ea:	2b00      	cmp	r3, #0
 802b7ec:	d10e      	bne.n	802b80c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b7ee:	69bb      	ldr	r3, [r7, #24]
 802b7f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802b7f4:	2b00      	cmp	r3, #0
 802b7f6:	d009      	beq.n	802b80c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802b7f8:	69fb      	ldr	r3, [r7, #28]
 802b7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7fe:	2b00      	cmp	r3, #0
 802b800:	d004      	beq.n	802b80c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802b802:	687b      	ldr	r3, [r7, #4]
 802b804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b806:	6878      	ldr	r0, [r7, #4]
 802b808:	4798      	blx	r3
    return;
 802b80a:	e0ce      	b.n	802b9aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802b80c:	69bb      	ldr	r3, [r7, #24]
 802b80e:	f003 0302 	and.w	r3, r3, #2
 802b812:	2b00      	cmp	r3, #0
 802b814:	d009      	beq.n	802b82a <HAL_SPI_IRQHandler+0x5e>
 802b816:	69fb      	ldr	r3, [r7, #28]
 802b818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	d004      	beq.n	802b82a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802b820:	687b      	ldr	r3, [r7, #4]
 802b822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802b824:	6878      	ldr	r0, [r7, #4]
 802b826:	4798      	blx	r3
    return;
 802b828:	e0bf      	b.n	802b9aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b82a:	69bb      	ldr	r3, [r7, #24]
 802b82c:	f003 0320 	and.w	r3, r3, #32
 802b830:	2b00      	cmp	r3, #0
 802b832:	d10a      	bne.n	802b84a <HAL_SPI_IRQHandler+0x7e>
 802b834:	69bb      	ldr	r3, [r7, #24]
 802b836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b83a:	2b00      	cmp	r3, #0
 802b83c:	d105      	bne.n	802b84a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802b83e:	69bb      	ldr	r3, [r7, #24]
 802b840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b844:	2b00      	cmp	r3, #0
 802b846:	f000 80b0 	beq.w	802b9aa <HAL_SPI_IRQHandler+0x1de>
 802b84a:	69fb      	ldr	r3, [r7, #28]
 802b84c:	f003 0320 	and.w	r3, r3, #32
 802b850:	2b00      	cmp	r3, #0
 802b852:	f000 80aa 	beq.w	802b9aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802b856:	69bb      	ldr	r3, [r7, #24]
 802b858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b85c:	2b00      	cmp	r3, #0
 802b85e:	d023      	beq.n	802b8a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802b860:	687b      	ldr	r3, [r7, #4]
 802b862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b866:	b2db      	uxtb	r3, r3
 802b868:	2b03      	cmp	r3, #3
 802b86a:	d011      	beq.n	802b890 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802b86c:	687b      	ldr	r3, [r7, #4]
 802b86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b870:	f043 0204 	orr.w	r2, r3, #4
 802b874:	687b      	ldr	r3, [r7, #4]
 802b876:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b878:	2300      	movs	r3, #0
 802b87a:	617b      	str	r3, [r7, #20]
 802b87c:	687b      	ldr	r3, [r7, #4]
 802b87e:	681b      	ldr	r3, [r3, #0]
 802b880:	68db      	ldr	r3, [r3, #12]
 802b882:	617b      	str	r3, [r7, #20]
 802b884:	687b      	ldr	r3, [r7, #4]
 802b886:	681b      	ldr	r3, [r3, #0]
 802b888:	689b      	ldr	r3, [r3, #8]
 802b88a:	617b      	str	r3, [r7, #20]
 802b88c:	697b      	ldr	r3, [r7, #20]
 802b88e:	e00b      	b.n	802b8a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802b890:	2300      	movs	r3, #0
 802b892:	613b      	str	r3, [r7, #16]
 802b894:	687b      	ldr	r3, [r7, #4]
 802b896:	681b      	ldr	r3, [r3, #0]
 802b898:	68db      	ldr	r3, [r3, #12]
 802b89a:	613b      	str	r3, [r7, #16]
 802b89c:	687b      	ldr	r3, [r7, #4]
 802b89e:	681b      	ldr	r3, [r3, #0]
 802b8a0:	689b      	ldr	r3, [r3, #8]
 802b8a2:	613b      	str	r3, [r7, #16]
 802b8a4:	693b      	ldr	r3, [r7, #16]
        return;
 802b8a6:	e080      	b.n	802b9aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802b8a8:	69bb      	ldr	r3, [r7, #24]
 802b8aa:	f003 0320 	and.w	r3, r3, #32
 802b8ae:	2b00      	cmp	r3, #0
 802b8b0:	d014      	beq.n	802b8dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802b8b2:	687b      	ldr	r3, [r7, #4]
 802b8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b8b6:	f043 0201 	orr.w	r2, r3, #1
 802b8ba:	687b      	ldr	r3, [r7, #4]
 802b8bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802b8be:	2300      	movs	r3, #0
 802b8c0:	60fb      	str	r3, [r7, #12]
 802b8c2:	687b      	ldr	r3, [r7, #4]
 802b8c4:	681b      	ldr	r3, [r3, #0]
 802b8c6:	689b      	ldr	r3, [r3, #8]
 802b8c8:	60fb      	str	r3, [r7, #12]
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	681b      	ldr	r3, [r3, #0]
 802b8ce:	681a      	ldr	r2, [r3, #0]
 802b8d0:	687b      	ldr	r3, [r7, #4]
 802b8d2:	681b      	ldr	r3, [r3, #0]
 802b8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b8d8:	601a      	str	r2, [r3, #0]
 802b8da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802b8dc:	69bb      	ldr	r3, [r7, #24]
 802b8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b8e2:	2b00      	cmp	r3, #0
 802b8e4:	d00c      	beq.n	802b900 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802b8e6:	687b      	ldr	r3, [r7, #4]
 802b8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b8ea:	f043 0208 	orr.w	r2, r3, #8
 802b8ee:	687b      	ldr	r3, [r7, #4]
 802b8f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802b8f2:	2300      	movs	r3, #0
 802b8f4:	60bb      	str	r3, [r7, #8]
 802b8f6:	687b      	ldr	r3, [r7, #4]
 802b8f8:	681b      	ldr	r3, [r3, #0]
 802b8fa:	689b      	ldr	r3, [r3, #8]
 802b8fc:	60bb      	str	r3, [r7, #8]
 802b8fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802b900:	687b      	ldr	r3, [r7, #4]
 802b902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b904:	2b00      	cmp	r3, #0
 802b906:	d04f      	beq.n	802b9a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	681b      	ldr	r3, [r3, #0]
 802b90c:	685a      	ldr	r2, [r3, #4]
 802b90e:	687b      	ldr	r3, [r7, #4]
 802b910:	681b      	ldr	r3, [r3, #0]
 802b912:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802b916:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802b918:	687b      	ldr	r3, [r7, #4]
 802b91a:	2201      	movs	r2, #1
 802b91c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802b920:	69fb      	ldr	r3, [r7, #28]
 802b922:	f003 0302 	and.w	r3, r3, #2
 802b926:	2b00      	cmp	r3, #0
 802b928:	d104      	bne.n	802b934 <HAL_SPI_IRQHandler+0x168>
 802b92a:	69fb      	ldr	r3, [r7, #28]
 802b92c:	f003 0301 	and.w	r3, r3, #1
 802b930:	2b00      	cmp	r3, #0
 802b932:	d034      	beq.n	802b99e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802b934:	687b      	ldr	r3, [r7, #4]
 802b936:	681b      	ldr	r3, [r3, #0]
 802b938:	685a      	ldr	r2, [r3, #4]
 802b93a:	687b      	ldr	r3, [r7, #4]
 802b93c:	681b      	ldr	r3, [r3, #0]
 802b93e:	f022 0203 	bic.w	r2, r2, #3
 802b942:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b948:	2b00      	cmp	r3, #0
 802b94a:	d011      	beq.n	802b970 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802b94c:	687b      	ldr	r3, [r7, #4]
 802b94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b950:	4a17      	ldr	r2, [pc, #92]	; (802b9b0 <HAL_SPI_IRQHandler+0x1e4>)
 802b952:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802b958:	4618      	mov	r0, r3
 802b95a:	f7fc f904 	bl	8027b66 <HAL_DMA_Abort_IT>
 802b95e:	4603      	mov	r3, r0
 802b960:	2b00      	cmp	r3, #0
 802b962:	d005      	beq.n	802b970 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802b970:	687b      	ldr	r3, [r7, #4]
 802b972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b974:	2b00      	cmp	r3, #0
 802b976:	d016      	beq.n	802b9a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802b978:	687b      	ldr	r3, [r7, #4]
 802b97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b97c:	4a0c      	ldr	r2, [pc, #48]	; (802b9b0 <HAL_SPI_IRQHandler+0x1e4>)
 802b97e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802b980:	687b      	ldr	r3, [r7, #4]
 802b982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b984:	4618      	mov	r0, r3
 802b986:	f7fc f8ee 	bl	8027b66 <HAL_DMA_Abort_IT>
 802b98a:	4603      	mov	r3, r0
 802b98c:	2b00      	cmp	r3, #0
 802b98e:	d00a      	beq.n	802b9a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802b994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802b998:	687b      	ldr	r3, [r7, #4]
 802b99a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802b99c:	e003      	b.n	802b9a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802b99e:	6878      	ldr	r0, [r7, #4]
 802b9a0:	f000 f808 	bl	802b9b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802b9a4:	e000      	b.n	802b9a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802b9a6:	bf00      	nop
    return;
 802b9a8:	bf00      	nop
  }
}
 802b9aa:	3720      	adds	r7, #32
 802b9ac:	46bd      	mov	sp, r7
 802b9ae:	bd80      	pop	{r7, pc}
 802b9b0:	0802b9e5 	.word	0x0802b9e5

0802b9b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802b9b4:	b480      	push	{r7}
 802b9b6:	b083      	sub	sp, #12
 802b9b8:	af00      	add	r7, sp, #0
 802b9ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802b9bc:	bf00      	nop
 802b9be:	370c      	adds	r7, #12
 802b9c0:	46bd      	mov	sp, r7
 802b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9c6:	4770      	bx	lr

0802b9c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 802b9c8:	b480      	push	{r7}
 802b9ca:	b083      	sub	sp, #12
 802b9cc:	af00      	add	r7, sp, #0
 802b9ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 802b9d0:	687b      	ldr	r3, [r7, #4]
 802b9d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802b9d6:	b2db      	uxtb	r3, r3
}
 802b9d8:	4618      	mov	r0, r3
 802b9da:	370c      	adds	r7, #12
 802b9dc:	46bd      	mov	sp, r7
 802b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9e2:	4770      	bx	lr

0802b9e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802b9e4:	b580      	push	{r7, lr}
 802b9e6:	b084      	sub	sp, #16
 802b9e8:	af00      	add	r7, sp, #0
 802b9ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b9f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802b9f2:	68fb      	ldr	r3, [r7, #12]
 802b9f4:	2200      	movs	r2, #0
 802b9f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802b9f8:	68fb      	ldr	r3, [r7, #12]
 802b9fa:	2200      	movs	r2, #0
 802b9fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802b9fe:	68f8      	ldr	r0, [r7, #12]
 802ba00:	f7ff ffd8 	bl	802b9b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802ba04:	bf00      	nop
 802ba06:	3710      	adds	r7, #16
 802ba08:	46bd      	mov	sp, r7
 802ba0a:	bd80      	pop	{r7, pc}

0802ba0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802ba0c:	b580      	push	{r7, lr}
 802ba0e:	b088      	sub	sp, #32
 802ba10:	af00      	add	r7, sp, #0
 802ba12:	60f8      	str	r0, [r7, #12]
 802ba14:	60b9      	str	r1, [r7, #8]
 802ba16:	603b      	str	r3, [r7, #0]
 802ba18:	4613      	mov	r3, r2
 802ba1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 802ba1c:	f7fb fe90 	bl	8027740 <HAL_GetTick>
 802ba20:	4602      	mov	r2, r0
 802ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba24:	1a9b      	subs	r3, r3, r2
 802ba26:	683a      	ldr	r2, [r7, #0]
 802ba28:	4413      	add	r3, r2
 802ba2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 802ba2c:	f7fb fe88 	bl	8027740 <HAL_GetTick>
 802ba30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802ba32:	4b39      	ldr	r3, [pc, #228]	; (802bb18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 802ba34:	681b      	ldr	r3, [r3, #0]
 802ba36:	015b      	lsls	r3, r3, #5
 802ba38:	0d1b      	lsrs	r3, r3, #20
 802ba3a:	69fa      	ldr	r2, [r7, #28]
 802ba3c:	fb02 f303 	mul.w	r3, r2, r3
 802ba40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802ba42:	e054      	b.n	802baee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 802ba44:	683b      	ldr	r3, [r7, #0]
 802ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ba4a:	d050      	beq.n	802baee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 802ba4c:	f7fb fe78 	bl	8027740 <HAL_GetTick>
 802ba50:	4602      	mov	r2, r0
 802ba52:	69bb      	ldr	r3, [r7, #24]
 802ba54:	1ad3      	subs	r3, r2, r3
 802ba56:	69fa      	ldr	r2, [r7, #28]
 802ba58:	429a      	cmp	r2, r3
 802ba5a:	d902      	bls.n	802ba62 <SPI_WaitFlagStateUntilTimeout+0x56>
 802ba5c:	69fb      	ldr	r3, [r7, #28]
 802ba5e:	2b00      	cmp	r3, #0
 802ba60:	d13d      	bne.n	802bade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802ba62:	68fb      	ldr	r3, [r7, #12]
 802ba64:	681b      	ldr	r3, [r3, #0]
 802ba66:	685a      	ldr	r2, [r3, #4]
 802ba68:	68fb      	ldr	r3, [r7, #12]
 802ba6a:	681b      	ldr	r3, [r3, #0]
 802ba6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802ba70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802ba72:	68fb      	ldr	r3, [r7, #12]
 802ba74:	685b      	ldr	r3, [r3, #4]
 802ba76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802ba7a:	d111      	bne.n	802baa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 802ba7c:	68fb      	ldr	r3, [r7, #12]
 802ba7e:	689b      	ldr	r3, [r3, #8]
 802ba80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802ba84:	d004      	beq.n	802ba90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802ba86:	68fb      	ldr	r3, [r7, #12]
 802ba88:	689b      	ldr	r3, [r3, #8]
 802ba8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802ba8e:	d107      	bne.n	802baa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802ba90:	68fb      	ldr	r3, [r7, #12]
 802ba92:	681b      	ldr	r3, [r3, #0]
 802ba94:	681a      	ldr	r2, [r3, #0]
 802ba96:	68fb      	ldr	r3, [r7, #12]
 802ba98:	681b      	ldr	r3, [r3, #0]
 802ba9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ba9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802baa0:	68fb      	ldr	r3, [r7, #12]
 802baa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802baa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802baa8:	d10f      	bne.n	802baca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 802baaa:	68fb      	ldr	r3, [r7, #12]
 802baac:	681b      	ldr	r3, [r3, #0]
 802baae:	681a      	ldr	r2, [r3, #0]
 802bab0:	68fb      	ldr	r3, [r7, #12]
 802bab2:	681b      	ldr	r3, [r3, #0]
 802bab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bab8:	601a      	str	r2, [r3, #0]
 802baba:	68fb      	ldr	r3, [r7, #12]
 802babc:	681b      	ldr	r3, [r3, #0]
 802babe:	681a      	ldr	r2, [r3, #0]
 802bac0:	68fb      	ldr	r3, [r7, #12]
 802bac2:	681b      	ldr	r3, [r3, #0]
 802bac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802baca:	68fb      	ldr	r3, [r7, #12]
 802bacc:	2201      	movs	r2, #1
 802bace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802bad2:	68fb      	ldr	r3, [r7, #12]
 802bad4:	2200      	movs	r2, #0
 802bad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802bada:	2303      	movs	r3, #3
 802badc:	e017      	b.n	802bb0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802bade:	697b      	ldr	r3, [r7, #20]
 802bae0:	2b00      	cmp	r3, #0
 802bae2:	d101      	bne.n	802bae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 802bae4:	2300      	movs	r3, #0
 802bae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 802bae8:	697b      	ldr	r3, [r7, #20]
 802baea:	3b01      	subs	r3, #1
 802baec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802baee:	68fb      	ldr	r3, [r7, #12]
 802baf0:	681b      	ldr	r3, [r3, #0]
 802baf2:	689a      	ldr	r2, [r3, #8]
 802baf4:	68bb      	ldr	r3, [r7, #8]
 802baf6:	4013      	ands	r3, r2
 802baf8:	68ba      	ldr	r2, [r7, #8]
 802bafa:	429a      	cmp	r2, r3
 802bafc:	bf0c      	ite	eq
 802bafe:	2301      	moveq	r3, #1
 802bb00:	2300      	movne	r3, #0
 802bb02:	b2db      	uxtb	r3, r3
 802bb04:	461a      	mov	r2, r3
 802bb06:	79fb      	ldrb	r3, [r7, #7]
 802bb08:	429a      	cmp	r2, r3
 802bb0a:	d19b      	bne.n	802ba44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 802bb0c:	2300      	movs	r3, #0
}
 802bb0e:	4618      	mov	r0, r3
 802bb10:	3720      	adds	r7, #32
 802bb12:	46bd      	mov	sp, r7
 802bb14:	bd80      	pop	{r7, pc}
 802bb16:	bf00      	nop
 802bb18:	20000138 	.word	0x20000138

0802bb1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802bb1c:	b580      	push	{r7, lr}
 802bb1e:	b086      	sub	sp, #24
 802bb20:	af02      	add	r7, sp, #8
 802bb22:	60f8      	str	r0, [r7, #12]
 802bb24:	60b9      	str	r1, [r7, #8]
 802bb26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802bb28:	68fb      	ldr	r3, [r7, #12]
 802bb2a:	685b      	ldr	r3, [r3, #4]
 802bb2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bb30:	d111      	bne.n	802bb56 <SPI_EndRxTransaction+0x3a>
 802bb32:	68fb      	ldr	r3, [r7, #12]
 802bb34:	689b      	ldr	r3, [r3, #8]
 802bb36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802bb3a:	d004      	beq.n	802bb46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802bb3c:	68fb      	ldr	r3, [r7, #12]
 802bb3e:	689b      	ldr	r3, [r3, #8]
 802bb40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bb44:	d107      	bne.n	802bb56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802bb46:	68fb      	ldr	r3, [r7, #12]
 802bb48:	681b      	ldr	r3, [r3, #0]
 802bb4a:	681a      	ldr	r2, [r3, #0]
 802bb4c:	68fb      	ldr	r3, [r7, #12]
 802bb4e:	681b      	ldr	r3, [r3, #0]
 802bb50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802bb54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bb56:	68fb      	ldr	r3, [r7, #12]
 802bb58:	685b      	ldr	r3, [r3, #4]
 802bb5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bb5e:	d12a      	bne.n	802bbb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802bb60:	68fb      	ldr	r3, [r7, #12]
 802bb62:	689b      	ldr	r3, [r3, #8]
 802bb64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802bb68:	d012      	beq.n	802bb90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bb6a:	687b      	ldr	r3, [r7, #4]
 802bb6c:	9300      	str	r3, [sp, #0]
 802bb6e:	68bb      	ldr	r3, [r7, #8]
 802bb70:	2200      	movs	r2, #0
 802bb72:	2180      	movs	r1, #128	; 0x80
 802bb74:	68f8      	ldr	r0, [r7, #12]
 802bb76:	f7ff ff49 	bl	802ba0c <SPI_WaitFlagStateUntilTimeout>
 802bb7a:	4603      	mov	r3, r0
 802bb7c:	2b00      	cmp	r3, #0
 802bb7e:	d02d      	beq.n	802bbdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bb80:	68fb      	ldr	r3, [r7, #12]
 802bb82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bb84:	f043 0220 	orr.w	r2, r3, #32
 802bb88:	68fb      	ldr	r3, [r7, #12]
 802bb8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802bb8c:	2303      	movs	r3, #3
 802bb8e:	e026      	b.n	802bbde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802bb90:	687b      	ldr	r3, [r7, #4]
 802bb92:	9300      	str	r3, [sp, #0]
 802bb94:	68bb      	ldr	r3, [r7, #8]
 802bb96:	2200      	movs	r2, #0
 802bb98:	2101      	movs	r1, #1
 802bb9a:	68f8      	ldr	r0, [r7, #12]
 802bb9c:	f7ff ff36 	bl	802ba0c <SPI_WaitFlagStateUntilTimeout>
 802bba0:	4603      	mov	r3, r0
 802bba2:	2b00      	cmp	r3, #0
 802bba4:	d01a      	beq.n	802bbdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bba6:	68fb      	ldr	r3, [r7, #12]
 802bba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bbaa:	f043 0220 	orr.w	r2, r3, #32
 802bbae:	68fb      	ldr	r3, [r7, #12]
 802bbb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 802bbb2:	2303      	movs	r3, #3
 802bbb4:	e013      	b.n	802bbde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802bbb6:	687b      	ldr	r3, [r7, #4]
 802bbb8:	9300      	str	r3, [sp, #0]
 802bbba:	68bb      	ldr	r3, [r7, #8]
 802bbbc:	2200      	movs	r2, #0
 802bbbe:	2101      	movs	r1, #1
 802bbc0:	68f8      	ldr	r0, [r7, #12]
 802bbc2:	f7ff ff23 	bl	802ba0c <SPI_WaitFlagStateUntilTimeout>
 802bbc6:	4603      	mov	r3, r0
 802bbc8:	2b00      	cmp	r3, #0
 802bbca:	d007      	beq.n	802bbdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bbcc:	68fb      	ldr	r3, [r7, #12]
 802bbce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bbd0:	f043 0220 	orr.w	r2, r3, #32
 802bbd4:	68fb      	ldr	r3, [r7, #12]
 802bbd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bbd8:	2303      	movs	r3, #3
 802bbda:	e000      	b.n	802bbde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802bbdc:	2300      	movs	r3, #0
}
 802bbde:	4618      	mov	r0, r3
 802bbe0:	3710      	adds	r7, #16
 802bbe2:	46bd      	mov	sp, r7
 802bbe4:	bd80      	pop	{r7, pc}
	...

0802bbe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802bbe8:	b580      	push	{r7, lr}
 802bbea:	b088      	sub	sp, #32
 802bbec:	af02      	add	r7, sp, #8
 802bbee:	60f8      	str	r0, [r7, #12]
 802bbf0:	60b9      	str	r1, [r7, #8]
 802bbf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802bbf4:	4b1b      	ldr	r3, [pc, #108]	; (802bc64 <SPI_EndRxTxTransaction+0x7c>)
 802bbf6:	681b      	ldr	r3, [r3, #0]
 802bbf8:	4a1b      	ldr	r2, [pc, #108]	; (802bc68 <SPI_EndRxTxTransaction+0x80>)
 802bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 802bbfe:	0d5b      	lsrs	r3, r3, #21
 802bc00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802bc04:	fb02 f303 	mul.w	r3, r2, r3
 802bc08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802bc0a:	68fb      	ldr	r3, [r7, #12]
 802bc0c:	685b      	ldr	r3, [r3, #4]
 802bc0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802bc12:	d112      	bne.n	802bc3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	9300      	str	r3, [sp, #0]
 802bc18:	68bb      	ldr	r3, [r7, #8]
 802bc1a:	2200      	movs	r2, #0
 802bc1c:	2180      	movs	r1, #128	; 0x80
 802bc1e:	68f8      	ldr	r0, [r7, #12]
 802bc20:	f7ff fef4 	bl	802ba0c <SPI_WaitFlagStateUntilTimeout>
 802bc24:	4603      	mov	r3, r0
 802bc26:	2b00      	cmp	r3, #0
 802bc28:	d016      	beq.n	802bc58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802bc2a:	68fb      	ldr	r3, [r7, #12]
 802bc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802bc2e:	f043 0220 	orr.w	r2, r3, #32
 802bc32:	68fb      	ldr	r3, [r7, #12]
 802bc34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802bc36:	2303      	movs	r3, #3
 802bc38:	e00f      	b.n	802bc5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802bc3a:	697b      	ldr	r3, [r7, #20]
 802bc3c:	2b00      	cmp	r3, #0
 802bc3e:	d00a      	beq.n	802bc56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802bc40:	697b      	ldr	r3, [r7, #20]
 802bc42:	3b01      	subs	r3, #1
 802bc44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802bc46:	68fb      	ldr	r3, [r7, #12]
 802bc48:	681b      	ldr	r3, [r3, #0]
 802bc4a:	689b      	ldr	r3, [r3, #8]
 802bc4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802bc50:	2b80      	cmp	r3, #128	; 0x80
 802bc52:	d0f2      	beq.n	802bc3a <SPI_EndRxTxTransaction+0x52>
 802bc54:	e000      	b.n	802bc58 <SPI_EndRxTxTransaction+0x70>
        break;
 802bc56:	bf00      	nop
  }

  return HAL_OK;
 802bc58:	2300      	movs	r3, #0
}
 802bc5a:	4618      	mov	r0, r3
 802bc5c:	3718      	adds	r7, #24
 802bc5e:	46bd      	mov	sp, r7
 802bc60:	bd80      	pop	{r7, pc}
 802bc62:	bf00      	nop
 802bc64:	20000138 	.word	0x20000138
 802bc68:	165e9f81 	.word	0x165e9f81

0802bc6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802bc6c:	b580      	push	{r7, lr}
 802bc6e:	b082      	sub	sp, #8
 802bc70:	af00      	add	r7, sp, #0
 802bc72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802bc74:	687b      	ldr	r3, [r7, #4]
 802bc76:	2b00      	cmp	r3, #0
 802bc78:	d101      	bne.n	802bc7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802bc7a:	2301      	movs	r3, #1
 802bc7c:	e03f      	b.n	802bcfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802bc7e:	687b      	ldr	r3, [r7, #4]
 802bc80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bc84:	b2db      	uxtb	r3, r3
 802bc86:	2b00      	cmp	r3, #0
 802bc88:	d106      	bne.n	802bc98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802bc8a:	687b      	ldr	r3, [r7, #4]
 802bc8c:	2200      	movs	r2, #0
 802bc8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802bc92:	6878      	ldr	r0, [r7, #4]
 802bc94:	f7fb fc74 	bl	8027580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802bc98:	687b      	ldr	r3, [r7, #4]
 802bc9a:	2224      	movs	r2, #36	; 0x24
 802bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802bca0:	687b      	ldr	r3, [r7, #4]
 802bca2:	681b      	ldr	r3, [r3, #0]
 802bca4:	68da      	ldr	r2, [r3, #12]
 802bca6:	687b      	ldr	r3, [r7, #4]
 802bca8:	681b      	ldr	r3, [r3, #0]
 802bcaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802bcae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802bcb0:	6878      	ldr	r0, [r7, #4]
 802bcb2:	f000 fd7b 	bl	802c7ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802bcb6:	687b      	ldr	r3, [r7, #4]
 802bcb8:	681b      	ldr	r3, [r3, #0]
 802bcba:	691a      	ldr	r2, [r3, #16]
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	681b      	ldr	r3, [r3, #0]
 802bcc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802bcc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802bcc6:	687b      	ldr	r3, [r7, #4]
 802bcc8:	681b      	ldr	r3, [r3, #0]
 802bcca:	695a      	ldr	r2, [r3, #20]
 802bccc:	687b      	ldr	r3, [r7, #4]
 802bcce:	681b      	ldr	r3, [r3, #0]
 802bcd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802bcd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	681b      	ldr	r3, [r3, #0]
 802bcda:	68da      	ldr	r2, [r3, #12]
 802bcdc:	687b      	ldr	r3, [r7, #4]
 802bcde:	681b      	ldr	r3, [r3, #0]
 802bce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802bce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	2200      	movs	r2, #0
 802bcea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802bcec:	687b      	ldr	r3, [r7, #4]
 802bcee:	2220      	movs	r2, #32
 802bcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802bcf4:	687b      	ldr	r3, [r7, #4]
 802bcf6:	2220      	movs	r2, #32
 802bcf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802bcfc:	2300      	movs	r3, #0
}
 802bcfe:	4618      	mov	r0, r3
 802bd00:	3708      	adds	r7, #8
 802bd02:	46bd      	mov	sp, r7
 802bd04:	bd80      	pop	{r7, pc}

0802bd06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802bd06:	b580      	push	{r7, lr}
 802bd08:	b08a      	sub	sp, #40	; 0x28
 802bd0a:	af02      	add	r7, sp, #8
 802bd0c:	60f8      	str	r0, [r7, #12]
 802bd0e:	60b9      	str	r1, [r7, #8]
 802bd10:	603b      	str	r3, [r7, #0]
 802bd12:	4613      	mov	r3, r2
 802bd14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802bd16:	2300      	movs	r3, #0
 802bd18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802bd1a:	68fb      	ldr	r3, [r7, #12]
 802bd1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bd20:	b2db      	uxtb	r3, r3
 802bd22:	2b20      	cmp	r3, #32
 802bd24:	d17c      	bne.n	802be20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802bd26:	68bb      	ldr	r3, [r7, #8]
 802bd28:	2b00      	cmp	r3, #0
 802bd2a:	d002      	beq.n	802bd32 <HAL_UART_Transmit+0x2c>
 802bd2c:	88fb      	ldrh	r3, [r7, #6]
 802bd2e:	2b00      	cmp	r3, #0
 802bd30:	d101      	bne.n	802bd36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802bd32:	2301      	movs	r3, #1
 802bd34:	e075      	b.n	802be22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802bd36:	68fb      	ldr	r3, [r7, #12]
 802bd38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802bd3c:	2b01      	cmp	r3, #1
 802bd3e:	d101      	bne.n	802bd44 <HAL_UART_Transmit+0x3e>
 802bd40:	2302      	movs	r3, #2
 802bd42:	e06e      	b.n	802be22 <HAL_UART_Transmit+0x11c>
 802bd44:	68fb      	ldr	r3, [r7, #12]
 802bd46:	2201      	movs	r2, #1
 802bd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802bd4c:	68fb      	ldr	r3, [r7, #12]
 802bd4e:	2200      	movs	r2, #0
 802bd50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802bd52:	68fb      	ldr	r3, [r7, #12]
 802bd54:	2221      	movs	r2, #33	; 0x21
 802bd56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802bd5a:	f7fb fcf1 	bl	8027740 <HAL_GetTick>
 802bd5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802bd60:	68fb      	ldr	r3, [r7, #12]
 802bd62:	88fa      	ldrh	r2, [r7, #6]
 802bd64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802bd66:	68fb      	ldr	r3, [r7, #12]
 802bd68:	88fa      	ldrh	r2, [r7, #6]
 802bd6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802bd6c:	68fb      	ldr	r3, [r7, #12]
 802bd6e:	689b      	ldr	r3, [r3, #8]
 802bd70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802bd74:	d108      	bne.n	802bd88 <HAL_UART_Transmit+0x82>
 802bd76:	68fb      	ldr	r3, [r7, #12]
 802bd78:	691b      	ldr	r3, [r3, #16]
 802bd7a:	2b00      	cmp	r3, #0
 802bd7c:	d104      	bne.n	802bd88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802bd7e:	2300      	movs	r3, #0
 802bd80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802bd82:	68bb      	ldr	r3, [r7, #8]
 802bd84:	61bb      	str	r3, [r7, #24]
 802bd86:	e003      	b.n	802bd90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802bd88:	68bb      	ldr	r3, [r7, #8]
 802bd8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802bd8c:	2300      	movs	r3, #0
 802bd8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802bd90:	68fb      	ldr	r3, [r7, #12]
 802bd92:	2200      	movs	r2, #0
 802bd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802bd98:	e02a      	b.n	802bdf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802bd9a:	683b      	ldr	r3, [r7, #0]
 802bd9c:	9300      	str	r3, [sp, #0]
 802bd9e:	697b      	ldr	r3, [r7, #20]
 802bda0:	2200      	movs	r2, #0
 802bda2:	2180      	movs	r1, #128	; 0x80
 802bda4:	68f8      	ldr	r0, [r7, #12]
 802bda6:	f000 faf9 	bl	802c39c <UART_WaitOnFlagUntilTimeout>
 802bdaa:	4603      	mov	r3, r0
 802bdac:	2b00      	cmp	r3, #0
 802bdae:	d001      	beq.n	802bdb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802bdb0:	2303      	movs	r3, #3
 802bdb2:	e036      	b.n	802be22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802bdb4:	69fb      	ldr	r3, [r7, #28]
 802bdb6:	2b00      	cmp	r3, #0
 802bdb8:	d10b      	bne.n	802bdd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802bdba:	69bb      	ldr	r3, [r7, #24]
 802bdbc:	881b      	ldrh	r3, [r3, #0]
 802bdbe:	461a      	mov	r2, r3
 802bdc0:	68fb      	ldr	r3, [r7, #12]
 802bdc2:	681b      	ldr	r3, [r3, #0]
 802bdc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802bdc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802bdca:	69bb      	ldr	r3, [r7, #24]
 802bdcc:	3302      	adds	r3, #2
 802bdce:	61bb      	str	r3, [r7, #24]
 802bdd0:	e007      	b.n	802bde2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802bdd2:	69fb      	ldr	r3, [r7, #28]
 802bdd4:	781a      	ldrb	r2, [r3, #0]
 802bdd6:	68fb      	ldr	r3, [r7, #12]
 802bdd8:	681b      	ldr	r3, [r3, #0]
 802bdda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802bddc:	69fb      	ldr	r3, [r7, #28]
 802bdde:	3301      	adds	r3, #1
 802bde0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802bde2:	68fb      	ldr	r3, [r7, #12]
 802bde4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802bde6:	b29b      	uxth	r3, r3
 802bde8:	3b01      	subs	r3, #1
 802bdea:	b29a      	uxth	r2, r3
 802bdec:	68fb      	ldr	r3, [r7, #12]
 802bdee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802bdf0:	68fb      	ldr	r3, [r7, #12]
 802bdf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802bdf4:	b29b      	uxth	r3, r3
 802bdf6:	2b00      	cmp	r3, #0
 802bdf8:	d1cf      	bne.n	802bd9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802bdfa:	683b      	ldr	r3, [r7, #0]
 802bdfc:	9300      	str	r3, [sp, #0]
 802bdfe:	697b      	ldr	r3, [r7, #20]
 802be00:	2200      	movs	r2, #0
 802be02:	2140      	movs	r1, #64	; 0x40
 802be04:	68f8      	ldr	r0, [r7, #12]
 802be06:	f000 fac9 	bl	802c39c <UART_WaitOnFlagUntilTimeout>
 802be0a:	4603      	mov	r3, r0
 802be0c:	2b00      	cmp	r3, #0
 802be0e:	d001      	beq.n	802be14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802be10:	2303      	movs	r3, #3
 802be12:	e006      	b.n	802be22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802be14:	68fb      	ldr	r3, [r7, #12]
 802be16:	2220      	movs	r2, #32
 802be18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802be1c:	2300      	movs	r3, #0
 802be1e:	e000      	b.n	802be22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802be20:	2302      	movs	r3, #2
  }
}
 802be22:	4618      	mov	r0, r3
 802be24:	3720      	adds	r7, #32
 802be26:	46bd      	mov	sp, r7
 802be28:	bd80      	pop	{r7, pc}
	...

0802be2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802be2c:	b580      	push	{r7, lr}
 802be2e:	b0ba      	sub	sp, #232	; 0xe8
 802be30:	af00      	add	r7, sp, #0
 802be32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 802be34:	687b      	ldr	r3, [r7, #4]
 802be36:	681b      	ldr	r3, [r3, #0]
 802be38:	681b      	ldr	r3, [r3, #0]
 802be3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802be3e:	687b      	ldr	r3, [r7, #4]
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	68db      	ldr	r3, [r3, #12]
 802be44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802be48:	687b      	ldr	r3, [r7, #4]
 802be4a:	681b      	ldr	r3, [r3, #0]
 802be4c:	695b      	ldr	r3, [r3, #20]
 802be4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 802be52:	2300      	movs	r3, #0
 802be54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 802be58:	2300      	movs	r3, #0
 802be5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 802be5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802be62:	f003 030f 	and.w	r3, r3, #15
 802be66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 802be6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802be6e:	2b00      	cmp	r3, #0
 802be70:	d10f      	bne.n	802be92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802be72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802be76:	f003 0320 	and.w	r3, r3, #32
 802be7a:	2b00      	cmp	r3, #0
 802be7c:	d009      	beq.n	802be92 <HAL_UART_IRQHandler+0x66>
 802be7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802be82:	f003 0320 	and.w	r3, r3, #32
 802be86:	2b00      	cmp	r3, #0
 802be88:	d003      	beq.n	802be92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802be8a:	6878      	ldr	r0, [r7, #4]
 802be8c:	f000 fbd3 	bl	802c636 <UART_Receive_IT>
      return;
 802be90:	e256      	b.n	802c340 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 802be92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802be96:	2b00      	cmp	r3, #0
 802be98:	f000 80de 	beq.w	802c058 <HAL_UART_IRQHandler+0x22c>
 802be9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bea0:	f003 0301 	and.w	r3, r3, #1
 802bea4:	2b00      	cmp	r3, #0
 802bea6:	d106      	bne.n	802beb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802bea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802beac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802beb0:	2b00      	cmp	r3, #0
 802beb2:	f000 80d1 	beq.w	802c058 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802beb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802beba:	f003 0301 	and.w	r3, r3, #1
 802bebe:	2b00      	cmp	r3, #0
 802bec0:	d00b      	beq.n	802beda <HAL_UART_IRQHandler+0xae>
 802bec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802beca:	2b00      	cmp	r3, #0
 802becc:	d005      	beq.n	802beda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802bece:	687b      	ldr	r3, [r7, #4]
 802bed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bed2:	f043 0201 	orr.w	r2, r3, #1
 802bed6:	687b      	ldr	r3, [r7, #4]
 802bed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802beda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bede:	f003 0304 	and.w	r3, r3, #4
 802bee2:	2b00      	cmp	r3, #0
 802bee4:	d00b      	beq.n	802befe <HAL_UART_IRQHandler+0xd2>
 802bee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802beea:	f003 0301 	and.w	r3, r3, #1
 802beee:	2b00      	cmp	r3, #0
 802bef0:	d005      	beq.n	802befe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802bef2:	687b      	ldr	r3, [r7, #4]
 802bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bef6:	f043 0202 	orr.w	r2, r3, #2
 802befa:	687b      	ldr	r3, [r7, #4]
 802befc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf02:	f003 0302 	and.w	r3, r3, #2
 802bf06:	2b00      	cmp	r3, #0
 802bf08:	d00b      	beq.n	802bf22 <HAL_UART_IRQHandler+0xf6>
 802bf0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf0e:	f003 0301 	and.w	r3, r3, #1
 802bf12:	2b00      	cmp	r3, #0
 802bf14:	d005      	beq.n	802bf22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802bf16:	687b      	ldr	r3, [r7, #4]
 802bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf1a:	f043 0204 	orr.w	r2, r3, #4
 802bf1e:	687b      	ldr	r3, [r7, #4]
 802bf20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf26:	f003 0308 	and.w	r3, r3, #8
 802bf2a:	2b00      	cmp	r3, #0
 802bf2c:	d011      	beq.n	802bf52 <HAL_UART_IRQHandler+0x126>
 802bf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf32:	f003 0320 	and.w	r3, r3, #32
 802bf36:	2b00      	cmp	r3, #0
 802bf38:	d105      	bne.n	802bf46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 802bf3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802bf3e:	f003 0301 	and.w	r3, r3, #1
 802bf42:	2b00      	cmp	r3, #0
 802bf44:	d005      	beq.n	802bf52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802bf46:	687b      	ldr	r3, [r7, #4]
 802bf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf4a:	f043 0208 	orr.w	r2, r3, #8
 802bf4e:	687b      	ldr	r3, [r7, #4]
 802bf50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802bf52:	687b      	ldr	r3, [r7, #4]
 802bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf56:	2b00      	cmp	r3, #0
 802bf58:	f000 81ed 	beq.w	802c336 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802bf5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802bf60:	f003 0320 	and.w	r3, r3, #32
 802bf64:	2b00      	cmp	r3, #0
 802bf66:	d008      	beq.n	802bf7a <HAL_UART_IRQHandler+0x14e>
 802bf68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802bf6c:	f003 0320 	and.w	r3, r3, #32
 802bf70:	2b00      	cmp	r3, #0
 802bf72:	d002      	beq.n	802bf7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 802bf74:	6878      	ldr	r0, [r7, #4]
 802bf76:	f000 fb5e 	bl	802c636 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802bf7a:	687b      	ldr	r3, [r7, #4]
 802bf7c:	681b      	ldr	r3, [r3, #0]
 802bf7e:	695b      	ldr	r3, [r3, #20]
 802bf80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bf84:	2b40      	cmp	r3, #64	; 0x40
 802bf86:	bf0c      	ite	eq
 802bf88:	2301      	moveq	r3, #1
 802bf8a:	2300      	movne	r3, #0
 802bf8c:	b2db      	uxtb	r3, r3
 802bf8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802bf92:	687b      	ldr	r3, [r7, #4]
 802bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf96:	f003 0308 	and.w	r3, r3, #8
 802bf9a:	2b00      	cmp	r3, #0
 802bf9c:	d103      	bne.n	802bfa6 <HAL_UART_IRQHandler+0x17a>
 802bf9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802bfa2:	2b00      	cmp	r3, #0
 802bfa4:	d04f      	beq.n	802c046 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802bfa6:	6878      	ldr	r0, [r7, #4]
 802bfa8:	f000 fa66 	bl	802c478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802bfac:	687b      	ldr	r3, [r7, #4]
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	695b      	ldr	r3, [r3, #20]
 802bfb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802bfb6:	2b40      	cmp	r3, #64	; 0x40
 802bfb8:	d141      	bne.n	802c03e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802bfba:	687b      	ldr	r3, [r7, #4]
 802bfbc:	681b      	ldr	r3, [r3, #0]
 802bfbe:	3314      	adds	r3, #20
 802bfc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802bfc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 802bfc8:	e853 3f00 	ldrex	r3, [r3]
 802bfcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802bfd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802bfd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802bfd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	681b      	ldr	r3, [r3, #0]
 802bfe0:	3314      	adds	r3, #20
 802bfe2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 802bfe6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 802bfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802bfee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802bff2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 802bff6:	e841 2300 	strex	r3, r2, [r1]
 802bffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802bffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802c002:	2b00      	cmp	r3, #0
 802c004:	d1d9      	bne.n	802bfba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 802c006:	687b      	ldr	r3, [r7, #4]
 802c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c00a:	2b00      	cmp	r3, #0
 802c00c:	d013      	beq.n	802c036 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802c00e:	687b      	ldr	r3, [r7, #4]
 802c010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c012:	4a7d      	ldr	r2, [pc, #500]	; (802c208 <HAL_UART_IRQHandler+0x3dc>)
 802c014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c01a:	4618      	mov	r0, r3
 802c01c:	f7fb fda3 	bl	8027b66 <HAL_DMA_Abort_IT>
 802c020:	4603      	mov	r3, r0
 802c022:	2b00      	cmp	r3, #0
 802c024:	d016      	beq.n	802c054 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802c026:	687b      	ldr	r3, [r7, #4]
 802c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c02c:	687a      	ldr	r2, [r7, #4]
 802c02e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c030:	4610      	mov	r0, r2
 802c032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c034:	e00e      	b.n	802c054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 802c036:	6878      	ldr	r0, [r7, #4]
 802c038:	f000 f99a 	bl	802c370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c03c:	e00a      	b.n	802c054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802c03e:	6878      	ldr	r0, [r7, #4]
 802c040:	f000 f996 	bl	802c370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c044:	e006      	b.n	802c054 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 802c046:	6878      	ldr	r0, [r7, #4]
 802c048:	f000 f992 	bl	802c370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	2200      	movs	r2, #0
 802c050:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 802c052:	e170      	b.n	802c336 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c054:	bf00      	nop
    return;
 802c056:	e16e      	b.n	802c336 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c058:	687b      	ldr	r3, [r7, #4]
 802c05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c05c:	2b01      	cmp	r3, #1
 802c05e:	f040 814a 	bne.w	802c2f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 802c062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c066:	f003 0310 	and.w	r3, r3, #16
 802c06a:	2b00      	cmp	r3, #0
 802c06c:	f000 8143 	beq.w	802c2f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802c070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c074:	f003 0310 	and.w	r3, r3, #16
 802c078:	2b00      	cmp	r3, #0
 802c07a:	f000 813c 	beq.w	802c2f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c07e:	2300      	movs	r3, #0
 802c080:	60bb      	str	r3, [r7, #8]
 802c082:	687b      	ldr	r3, [r7, #4]
 802c084:	681b      	ldr	r3, [r3, #0]
 802c086:	681b      	ldr	r3, [r3, #0]
 802c088:	60bb      	str	r3, [r7, #8]
 802c08a:	687b      	ldr	r3, [r7, #4]
 802c08c:	681b      	ldr	r3, [r3, #0]
 802c08e:	685b      	ldr	r3, [r3, #4]
 802c090:	60bb      	str	r3, [r7, #8]
 802c092:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802c094:	687b      	ldr	r3, [r7, #4]
 802c096:	681b      	ldr	r3, [r3, #0]
 802c098:	695b      	ldr	r3, [r3, #20]
 802c09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c09e:	2b40      	cmp	r3, #64	; 0x40
 802c0a0:	f040 80b4 	bne.w	802c20c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 802c0a4:	687b      	ldr	r3, [r7, #4]
 802c0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c0a8:	681b      	ldr	r3, [r3, #0]
 802c0aa:	685b      	ldr	r3, [r3, #4]
 802c0ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802c0b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 802c0b4:	2b00      	cmp	r3, #0
 802c0b6:	f000 8140 	beq.w	802c33a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802c0ba:	687b      	ldr	r3, [r7, #4]
 802c0bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c0be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c0c2:	429a      	cmp	r2, r3
 802c0c4:	f080 8139 	bcs.w	802c33a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802c0c8:	687b      	ldr	r3, [r7, #4]
 802c0ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802c0ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802c0d0:	687b      	ldr	r3, [r7, #4]
 802c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c0d4:	69db      	ldr	r3, [r3, #28]
 802c0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c0da:	f000 8088 	beq.w	802c1ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802c0de:	687b      	ldr	r3, [r7, #4]
 802c0e0:	681b      	ldr	r3, [r3, #0]
 802c0e2:	330c      	adds	r3, #12
 802c0e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c0e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802c0ec:	e853 3f00 	ldrex	r3, [r3]
 802c0f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 802c0f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802c0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802c0fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c100:	687b      	ldr	r3, [r7, #4]
 802c102:	681b      	ldr	r3, [r3, #0]
 802c104:	330c      	adds	r3, #12
 802c106:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802c10a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802c10e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c112:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802c116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 802c11a:	e841 2300 	strex	r3, r2, [r1]
 802c11e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802c122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802c126:	2b00      	cmp	r3, #0
 802c128:	d1d9      	bne.n	802c0de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c12a:	687b      	ldr	r3, [r7, #4]
 802c12c:	681b      	ldr	r3, [r3, #0]
 802c12e:	3314      	adds	r3, #20
 802c130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802c134:	e853 3f00 	ldrex	r3, [r3]
 802c138:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 802c13a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802c13c:	f023 0301 	bic.w	r3, r3, #1
 802c140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802c144:	687b      	ldr	r3, [r7, #4]
 802c146:	681b      	ldr	r3, [r3, #0]
 802c148:	3314      	adds	r3, #20
 802c14a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802c14e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 802c152:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c154:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 802c156:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 802c15a:	e841 2300 	strex	r3, r2, [r1]
 802c15e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 802c160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802c162:	2b00      	cmp	r3, #0
 802c164:	d1e1      	bne.n	802c12a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	681b      	ldr	r3, [r3, #0]
 802c16a:	3314      	adds	r3, #20
 802c16c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c16e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802c170:	e853 3f00 	ldrex	r3, [r3]
 802c174:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 802c176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802c178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802c17c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802c180:	687b      	ldr	r3, [r7, #4]
 802c182:	681b      	ldr	r3, [r3, #0]
 802c184:	3314      	adds	r3, #20
 802c186:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802c18a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802c18c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c18e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 802c190:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802c192:	e841 2300 	strex	r3, r2, [r1]
 802c196:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 802c198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802c19a:	2b00      	cmp	r3, #0
 802c19c:	d1e3      	bne.n	802c166 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802c19e:	687b      	ldr	r3, [r7, #4]
 802c1a0:	2220      	movs	r2, #32
 802c1a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c1a6:	687b      	ldr	r3, [r7, #4]
 802c1a8:	2200      	movs	r2, #0
 802c1aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	681b      	ldr	r3, [r3, #0]
 802c1b0:	330c      	adds	r3, #12
 802c1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1b6:	e853 3f00 	ldrex	r3, [r3]
 802c1ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802c1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1be:	f023 0310 	bic.w	r3, r3, #16
 802c1c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802c1c6:	687b      	ldr	r3, [r7, #4]
 802c1c8:	681b      	ldr	r3, [r3, #0]
 802c1ca:	330c      	adds	r3, #12
 802c1cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802c1d0:	65ba      	str	r2, [r7, #88]	; 0x58
 802c1d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c1d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 802c1d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802c1d8:	e841 2300 	strex	r3, r2, [r1]
 802c1dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802c1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1e0:	2b00      	cmp	r3, #0
 802c1e2:	d1e3      	bne.n	802c1ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 802c1e4:	687b      	ldr	r3, [r7, #4]
 802c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c1e8:	4618      	mov	r0, r3
 802c1ea:	f7fb fc4c 	bl	8027a86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802c1ee:	687b      	ldr	r3, [r7, #4]
 802c1f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c1f2:	687b      	ldr	r3, [r7, #4]
 802c1f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c1f6:	b29b      	uxth	r3, r3
 802c1f8:	1ad3      	subs	r3, r2, r3
 802c1fa:	b29b      	uxth	r3, r3
 802c1fc:	4619      	mov	r1, r3
 802c1fe:	6878      	ldr	r0, [r7, #4]
 802c200:	f000 f8c0 	bl	802c384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c204:	e099      	b.n	802c33a <HAL_UART_IRQHandler+0x50e>
 802c206:	bf00      	nop
 802c208:	0802c53f 	.word	0x0802c53f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802c20c:	687b      	ldr	r3, [r7, #4]
 802c20e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802c210:	687b      	ldr	r3, [r7, #4]
 802c212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c214:	b29b      	uxth	r3, r3
 802c216:	1ad3      	subs	r3, r2, r3
 802c218:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 802c21c:	687b      	ldr	r3, [r7, #4]
 802c21e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c220:	b29b      	uxth	r3, r3
 802c222:	2b00      	cmp	r3, #0
 802c224:	f000 808b 	beq.w	802c33e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 802c228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c22c:	2b00      	cmp	r3, #0
 802c22e:	f000 8086 	beq.w	802c33e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c232:	687b      	ldr	r3, [r7, #4]
 802c234:	681b      	ldr	r3, [r3, #0]
 802c236:	330c      	adds	r3, #12
 802c238:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c23c:	e853 3f00 	ldrex	r3, [r3]
 802c240:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802c242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c248:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	681b      	ldr	r3, [r3, #0]
 802c250:	330c      	adds	r3, #12
 802c252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 802c256:	647a      	str	r2, [r7, #68]	; 0x44
 802c258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c25a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802c25c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c25e:	e841 2300 	strex	r3, r2, [r1]
 802c262:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 802c264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c266:	2b00      	cmp	r3, #0
 802c268:	d1e3      	bne.n	802c232 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c26a:	687b      	ldr	r3, [r7, #4]
 802c26c:	681b      	ldr	r3, [r3, #0]
 802c26e:	3314      	adds	r3, #20
 802c270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c274:	e853 3f00 	ldrex	r3, [r3]
 802c278:	623b      	str	r3, [r7, #32]
   return(result);
 802c27a:	6a3b      	ldr	r3, [r7, #32]
 802c27c:	f023 0301 	bic.w	r3, r3, #1
 802c280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	681b      	ldr	r3, [r3, #0]
 802c288:	3314      	adds	r3, #20
 802c28a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802c28e:	633a      	str	r2, [r7, #48]	; 0x30
 802c290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802c294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802c296:	e841 2300 	strex	r3, r2, [r1]
 802c29a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c29e:	2b00      	cmp	r3, #0
 802c2a0:	d1e3      	bne.n	802c26a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802c2a2:	687b      	ldr	r3, [r7, #4]
 802c2a4:	2220      	movs	r2, #32
 802c2a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c2aa:	687b      	ldr	r3, [r7, #4]
 802c2ac:	2200      	movs	r2, #0
 802c2ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c2b0:	687b      	ldr	r3, [r7, #4]
 802c2b2:	681b      	ldr	r3, [r3, #0]
 802c2b4:	330c      	adds	r3, #12
 802c2b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c2b8:	693b      	ldr	r3, [r7, #16]
 802c2ba:	e853 3f00 	ldrex	r3, [r3]
 802c2be:	60fb      	str	r3, [r7, #12]
   return(result);
 802c2c0:	68fb      	ldr	r3, [r7, #12]
 802c2c2:	f023 0310 	bic.w	r3, r3, #16
 802c2c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c2ca:	687b      	ldr	r3, [r7, #4]
 802c2cc:	681b      	ldr	r3, [r3, #0]
 802c2ce:	330c      	adds	r3, #12
 802c2d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 802c2d4:	61fa      	str	r2, [r7, #28]
 802c2d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c2d8:	69b9      	ldr	r1, [r7, #24]
 802c2da:	69fa      	ldr	r2, [r7, #28]
 802c2dc:	e841 2300 	strex	r3, r2, [r1]
 802c2e0:	617b      	str	r3, [r7, #20]
   return(result);
 802c2e2:	697b      	ldr	r3, [r7, #20]
 802c2e4:	2b00      	cmp	r3, #0
 802c2e6:	d1e3      	bne.n	802c2b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802c2e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802c2ec:	4619      	mov	r1, r3
 802c2ee:	6878      	ldr	r0, [r7, #4]
 802c2f0:	f000 f848 	bl	802c384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 802c2f4:	e023      	b.n	802c33e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 802c2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c2fe:	2b00      	cmp	r3, #0
 802c300:	d009      	beq.n	802c316 <HAL_UART_IRQHandler+0x4ea>
 802c302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c30a:	2b00      	cmp	r3, #0
 802c30c:	d003      	beq.n	802c316 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802c30e:	6878      	ldr	r0, [r7, #4]
 802c310:	f000 f929 	bl	802c566 <UART_Transmit_IT>
    return;
 802c314:	e014      	b.n	802c340 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802c316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c31e:	2b00      	cmp	r3, #0
 802c320:	d00e      	beq.n	802c340 <HAL_UART_IRQHandler+0x514>
 802c322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802c326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c32a:	2b00      	cmp	r3, #0
 802c32c:	d008      	beq.n	802c340 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802c32e:	6878      	ldr	r0, [r7, #4]
 802c330:	f000 f969 	bl	802c606 <UART_EndTransmit_IT>
    return;
 802c334:	e004      	b.n	802c340 <HAL_UART_IRQHandler+0x514>
    return;
 802c336:	bf00      	nop
 802c338:	e002      	b.n	802c340 <HAL_UART_IRQHandler+0x514>
      return;
 802c33a:	bf00      	nop
 802c33c:	e000      	b.n	802c340 <HAL_UART_IRQHandler+0x514>
      return;
 802c33e:	bf00      	nop
  }
}
 802c340:	37e8      	adds	r7, #232	; 0xe8
 802c342:	46bd      	mov	sp, r7
 802c344:	bd80      	pop	{r7, pc}
 802c346:	bf00      	nop

0802c348 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 802c348:	b480      	push	{r7}
 802c34a:	b083      	sub	sp, #12
 802c34c:	af00      	add	r7, sp, #0
 802c34e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 802c350:	bf00      	nop
 802c352:	370c      	adds	r7, #12
 802c354:	46bd      	mov	sp, r7
 802c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c35a:	4770      	bx	lr

0802c35c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 802c35c:	b480      	push	{r7}
 802c35e:	b083      	sub	sp, #12
 802c360:	af00      	add	r7, sp, #0
 802c362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 802c364:	bf00      	nop
 802c366:	370c      	adds	r7, #12
 802c368:	46bd      	mov	sp, r7
 802c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c36e:	4770      	bx	lr

0802c370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802c370:	b480      	push	{r7}
 802c372:	b083      	sub	sp, #12
 802c374:	af00      	add	r7, sp, #0
 802c376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 802c378:	bf00      	nop
 802c37a:	370c      	adds	r7, #12
 802c37c:	46bd      	mov	sp, r7
 802c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c382:	4770      	bx	lr

0802c384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802c384:	b480      	push	{r7}
 802c386:	b083      	sub	sp, #12
 802c388:	af00      	add	r7, sp, #0
 802c38a:	6078      	str	r0, [r7, #4]
 802c38c:	460b      	mov	r3, r1
 802c38e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802c390:	bf00      	nop
 802c392:	370c      	adds	r7, #12
 802c394:	46bd      	mov	sp, r7
 802c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c39a:	4770      	bx	lr

0802c39c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802c39c:	b580      	push	{r7, lr}
 802c39e:	b090      	sub	sp, #64	; 0x40
 802c3a0:	af00      	add	r7, sp, #0
 802c3a2:	60f8      	str	r0, [r7, #12]
 802c3a4:	60b9      	str	r1, [r7, #8]
 802c3a6:	603b      	str	r3, [r7, #0]
 802c3a8:	4613      	mov	r3, r2
 802c3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c3ac:	e050      	b.n	802c450 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802c3ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802c3b4:	d04c      	beq.n	802c450 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802c3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3b8:	2b00      	cmp	r3, #0
 802c3ba:	d007      	beq.n	802c3cc <UART_WaitOnFlagUntilTimeout+0x30>
 802c3bc:	f7fb f9c0 	bl	8027740 <HAL_GetTick>
 802c3c0:	4602      	mov	r2, r0
 802c3c2:	683b      	ldr	r3, [r7, #0]
 802c3c4:	1ad3      	subs	r3, r2, r3
 802c3c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c3c8:	429a      	cmp	r2, r3
 802c3ca:	d241      	bcs.n	802c450 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802c3cc:	68fb      	ldr	r3, [r7, #12]
 802c3ce:	681b      	ldr	r3, [r3, #0]
 802c3d0:	330c      	adds	r3, #12
 802c3d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c3d6:	e853 3f00 	ldrex	r3, [r3]
 802c3da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c3de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c3e4:	68fb      	ldr	r3, [r7, #12]
 802c3e6:	681b      	ldr	r3, [r3, #0]
 802c3e8:	330c      	adds	r3, #12
 802c3ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802c3ec:	637a      	str	r2, [r7, #52]	; 0x34
 802c3ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c3f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802c3f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802c3f4:	e841 2300 	strex	r3, r2, [r1]
 802c3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c3fc:	2b00      	cmp	r3, #0
 802c3fe:	d1e5      	bne.n	802c3cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c400:	68fb      	ldr	r3, [r7, #12]
 802c402:	681b      	ldr	r3, [r3, #0]
 802c404:	3314      	adds	r3, #20
 802c406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c408:	697b      	ldr	r3, [r7, #20]
 802c40a:	e853 3f00 	ldrex	r3, [r3]
 802c40e:	613b      	str	r3, [r7, #16]
   return(result);
 802c410:	693b      	ldr	r3, [r7, #16]
 802c412:	f023 0301 	bic.w	r3, r3, #1
 802c416:	63bb      	str	r3, [r7, #56]	; 0x38
 802c418:	68fb      	ldr	r3, [r7, #12]
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	3314      	adds	r3, #20
 802c41e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802c420:	623a      	str	r2, [r7, #32]
 802c422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c424:	69f9      	ldr	r1, [r7, #28]
 802c426:	6a3a      	ldr	r2, [r7, #32]
 802c428:	e841 2300 	strex	r3, r2, [r1]
 802c42c:	61bb      	str	r3, [r7, #24]
   return(result);
 802c42e:	69bb      	ldr	r3, [r7, #24]
 802c430:	2b00      	cmp	r3, #0
 802c432:	d1e5      	bne.n	802c400 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 802c434:	68fb      	ldr	r3, [r7, #12]
 802c436:	2220      	movs	r2, #32
 802c438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802c43c:	68fb      	ldr	r3, [r7, #12]
 802c43e:	2220      	movs	r2, #32
 802c440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 802c444:	68fb      	ldr	r3, [r7, #12]
 802c446:	2200      	movs	r2, #0
 802c448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802c44c:	2303      	movs	r3, #3
 802c44e:	e00f      	b.n	802c470 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802c450:	68fb      	ldr	r3, [r7, #12]
 802c452:	681b      	ldr	r3, [r3, #0]
 802c454:	681a      	ldr	r2, [r3, #0]
 802c456:	68bb      	ldr	r3, [r7, #8]
 802c458:	4013      	ands	r3, r2
 802c45a:	68ba      	ldr	r2, [r7, #8]
 802c45c:	429a      	cmp	r2, r3
 802c45e:	bf0c      	ite	eq
 802c460:	2301      	moveq	r3, #1
 802c462:	2300      	movne	r3, #0
 802c464:	b2db      	uxtb	r3, r3
 802c466:	461a      	mov	r2, r3
 802c468:	79fb      	ldrb	r3, [r7, #7]
 802c46a:	429a      	cmp	r2, r3
 802c46c:	d09f      	beq.n	802c3ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802c46e:	2300      	movs	r3, #0
}
 802c470:	4618      	mov	r0, r3
 802c472:	3740      	adds	r7, #64	; 0x40
 802c474:	46bd      	mov	sp, r7
 802c476:	bd80      	pop	{r7, pc}

0802c478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802c478:	b480      	push	{r7}
 802c47a:	b095      	sub	sp, #84	; 0x54
 802c47c:	af00      	add	r7, sp, #0
 802c47e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802c480:	687b      	ldr	r3, [r7, #4]
 802c482:	681b      	ldr	r3, [r3, #0]
 802c484:	330c      	adds	r3, #12
 802c486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c48a:	e853 3f00 	ldrex	r3, [r3]
 802c48e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802c490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802c496:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	681b      	ldr	r3, [r3, #0]
 802c49c:	330c      	adds	r3, #12
 802c49e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c4a0:	643a      	str	r2, [r7, #64]	; 0x40
 802c4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802c4a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802c4a8:	e841 2300 	strex	r3, r2, [r1]
 802c4ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802c4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c4b0:	2b00      	cmp	r3, #0
 802c4b2:	d1e5      	bne.n	802c480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802c4b4:	687b      	ldr	r3, [r7, #4]
 802c4b6:	681b      	ldr	r3, [r3, #0]
 802c4b8:	3314      	adds	r3, #20
 802c4ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c4bc:	6a3b      	ldr	r3, [r7, #32]
 802c4be:	e853 3f00 	ldrex	r3, [r3]
 802c4c2:	61fb      	str	r3, [r7, #28]
   return(result);
 802c4c4:	69fb      	ldr	r3, [r7, #28]
 802c4c6:	f023 0301 	bic.w	r3, r3, #1
 802c4ca:	64bb      	str	r3, [r7, #72]	; 0x48
 802c4cc:	687b      	ldr	r3, [r7, #4]
 802c4ce:	681b      	ldr	r3, [r3, #0]
 802c4d0:	3314      	adds	r3, #20
 802c4d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c4d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 802c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c4d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c4da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802c4dc:	e841 2300 	strex	r3, r2, [r1]
 802c4e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c4e4:	2b00      	cmp	r3, #0
 802c4e6:	d1e5      	bne.n	802c4b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c4ec:	2b01      	cmp	r3, #1
 802c4ee:	d119      	bne.n	802c524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	681b      	ldr	r3, [r3, #0]
 802c4f4:	330c      	adds	r3, #12
 802c4f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c4f8:	68fb      	ldr	r3, [r7, #12]
 802c4fa:	e853 3f00 	ldrex	r3, [r3]
 802c4fe:	60bb      	str	r3, [r7, #8]
   return(result);
 802c500:	68bb      	ldr	r3, [r7, #8]
 802c502:	f023 0310 	bic.w	r3, r3, #16
 802c506:	647b      	str	r3, [r7, #68]	; 0x44
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	681b      	ldr	r3, [r3, #0]
 802c50c:	330c      	adds	r3, #12
 802c50e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802c510:	61ba      	str	r2, [r7, #24]
 802c512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c514:	6979      	ldr	r1, [r7, #20]
 802c516:	69ba      	ldr	r2, [r7, #24]
 802c518:	e841 2300 	strex	r3, r2, [r1]
 802c51c:	613b      	str	r3, [r7, #16]
   return(result);
 802c51e:	693b      	ldr	r3, [r7, #16]
 802c520:	2b00      	cmp	r3, #0
 802c522:	d1e5      	bne.n	802c4f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	2220      	movs	r2, #32
 802c528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c52c:	687b      	ldr	r3, [r7, #4]
 802c52e:	2200      	movs	r2, #0
 802c530:	631a      	str	r2, [r3, #48]	; 0x30
}
 802c532:	bf00      	nop
 802c534:	3754      	adds	r7, #84	; 0x54
 802c536:	46bd      	mov	sp, r7
 802c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c53c:	4770      	bx	lr

0802c53e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802c53e:	b580      	push	{r7, lr}
 802c540:	b084      	sub	sp, #16
 802c542:	af00      	add	r7, sp, #0
 802c544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802c546:	687b      	ldr	r3, [r7, #4]
 802c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c54a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802c54c:	68fb      	ldr	r3, [r7, #12]
 802c54e:	2200      	movs	r2, #0
 802c550:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802c552:	68fb      	ldr	r3, [r7, #12]
 802c554:	2200      	movs	r2, #0
 802c556:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802c558:	68f8      	ldr	r0, [r7, #12]
 802c55a:	f7ff ff09 	bl	802c370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802c55e:	bf00      	nop
 802c560:	3710      	adds	r7, #16
 802c562:	46bd      	mov	sp, r7
 802c564:	bd80      	pop	{r7, pc}

0802c566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802c566:	b480      	push	{r7}
 802c568:	b085      	sub	sp, #20
 802c56a:	af00      	add	r7, sp, #0
 802c56c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c574:	b2db      	uxtb	r3, r3
 802c576:	2b21      	cmp	r3, #33	; 0x21
 802c578:	d13e      	bne.n	802c5f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c57a:	687b      	ldr	r3, [r7, #4]
 802c57c:	689b      	ldr	r3, [r3, #8]
 802c57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c582:	d114      	bne.n	802c5ae <UART_Transmit_IT+0x48>
 802c584:	687b      	ldr	r3, [r7, #4]
 802c586:	691b      	ldr	r3, [r3, #16]
 802c588:	2b00      	cmp	r3, #0
 802c58a:	d110      	bne.n	802c5ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802c58c:	687b      	ldr	r3, [r7, #4]
 802c58e:	6a1b      	ldr	r3, [r3, #32]
 802c590:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802c592:	68fb      	ldr	r3, [r7, #12]
 802c594:	881b      	ldrh	r3, [r3, #0]
 802c596:	461a      	mov	r2, r3
 802c598:	687b      	ldr	r3, [r7, #4]
 802c59a:	681b      	ldr	r3, [r3, #0]
 802c59c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802c5a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	6a1b      	ldr	r3, [r3, #32]
 802c5a6:	1c9a      	adds	r2, r3, #2
 802c5a8:	687b      	ldr	r3, [r7, #4]
 802c5aa:	621a      	str	r2, [r3, #32]
 802c5ac:	e008      	b.n	802c5c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802c5ae:	687b      	ldr	r3, [r7, #4]
 802c5b0:	6a1b      	ldr	r3, [r3, #32]
 802c5b2:	1c59      	adds	r1, r3, #1
 802c5b4:	687a      	ldr	r2, [r7, #4]
 802c5b6:	6211      	str	r1, [r2, #32]
 802c5b8:	781a      	ldrb	r2, [r3, #0]
 802c5ba:	687b      	ldr	r3, [r7, #4]
 802c5bc:	681b      	ldr	r3, [r3, #0]
 802c5be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802c5c0:	687b      	ldr	r3, [r7, #4]
 802c5c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802c5c4:	b29b      	uxth	r3, r3
 802c5c6:	3b01      	subs	r3, #1
 802c5c8:	b29b      	uxth	r3, r3
 802c5ca:	687a      	ldr	r2, [r7, #4]
 802c5cc:	4619      	mov	r1, r3
 802c5ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 802c5d0:	2b00      	cmp	r3, #0
 802c5d2:	d10f      	bne.n	802c5f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	681b      	ldr	r3, [r3, #0]
 802c5d8:	68da      	ldr	r2, [r3, #12]
 802c5da:	687b      	ldr	r3, [r7, #4]
 802c5dc:	681b      	ldr	r3, [r3, #0]
 802c5de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c5e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802c5e4:	687b      	ldr	r3, [r7, #4]
 802c5e6:	681b      	ldr	r3, [r3, #0]
 802c5e8:	68da      	ldr	r2, [r3, #12]
 802c5ea:	687b      	ldr	r3, [r7, #4]
 802c5ec:	681b      	ldr	r3, [r3, #0]
 802c5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802c5f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802c5f4:	2300      	movs	r3, #0
 802c5f6:	e000      	b.n	802c5fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802c5f8:	2302      	movs	r3, #2
  }
}
 802c5fa:	4618      	mov	r0, r3
 802c5fc:	3714      	adds	r7, #20
 802c5fe:	46bd      	mov	sp, r7
 802c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c604:	4770      	bx	lr

0802c606 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802c606:	b580      	push	{r7, lr}
 802c608:	b082      	sub	sp, #8
 802c60a:	af00      	add	r7, sp, #0
 802c60c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802c60e:	687b      	ldr	r3, [r7, #4]
 802c610:	681b      	ldr	r3, [r3, #0]
 802c612:	68da      	ldr	r2, [r3, #12]
 802c614:	687b      	ldr	r3, [r7, #4]
 802c616:	681b      	ldr	r3, [r3, #0]
 802c618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802c61c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	2220      	movs	r2, #32
 802c622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802c626:	6878      	ldr	r0, [r7, #4]
 802c628:	f7ff fe8e 	bl	802c348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802c62c:	2300      	movs	r3, #0
}
 802c62e:	4618      	mov	r0, r3
 802c630:	3708      	adds	r7, #8
 802c632:	46bd      	mov	sp, r7
 802c634:	bd80      	pop	{r7, pc}

0802c636 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802c636:	b580      	push	{r7, lr}
 802c638:	b08c      	sub	sp, #48	; 0x30
 802c63a:	af00      	add	r7, sp, #0
 802c63c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802c63e:	687b      	ldr	r3, [r7, #4]
 802c640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c644:	b2db      	uxtb	r3, r3
 802c646:	2b22      	cmp	r3, #34	; 0x22
 802c648:	f040 80ab 	bne.w	802c7a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802c64c:	687b      	ldr	r3, [r7, #4]
 802c64e:	689b      	ldr	r3, [r3, #8]
 802c650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c654:	d117      	bne.n	802c686 <UART_Receive_IT+0x50>
 802c656:	687b      	ldr	r3, [r7, #4]
 802c658:	691b      	ldr	r3, [r3, #16]
 802c65a:	2b00      	cmp	r3, #0
 802c65c:	d113      	bne.n	802c686 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802c65e:	2300      	movs	r3, #0
 802c660:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c666:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802c668:	687b      	ldr	r3, [r7, #4]
 802c66a:	681b      	ldr	r3, [r3, #0]
 802c66c:	685b      	ldr	r3, [r3, #4]
 802c66e:	b29b      	uxth	r3, r3
 802c670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802c674:	b29a      	uxth	r2, r3
 802c676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c678:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c67e:	1c9a      	adds	r2, r3, #2
 802c680:	687b      	ldr	r3, [r7, #4]
 802c682:	629a      	str	r2, [r3, #40]	; 0x28
 802c684:	e026      	b.n	802c6d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802c68c:	2300      	movs	r3, #0
 802c68e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802c690:	687b      	ldr	r3, [r7, #4]
 802c692:	689b      	ldr	r3, [r3, #8]
 802c694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802c698:	d007      	beq.n	802c6aa <UART_Receive_IT+0x74>
 802c69a:	687b      	ldr	r3, [r7, #4]
 802c69c:	689b      	ldr	r3, [r3, #8]
 802c69e:	2b00      	cmp	r3, #0
 802c6a0:	d10a      	bne.n	802c6b8 <UART_Receive_IT+0x82>
 802c6a2:	687b      	ldr	r3, [r7, #4]
 802c6a4:	691b      	ldr	r3, [r3, #16]
 802c6a6:	2b00      	cmp	r3, #0
 802c6a8:	d106      	bne.n	802c6b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	681b      	ldr	r3, [r3, #0]
 802c6ae:	685b      	ldr	r3, [r3, #4]
 802c6b0:	b2da      	uxtb	r2, r3
 802c6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6b4:	701a      	strb	r2, [r3, #0]
 802c6b6:	e008      	b.n	802c6ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802c6b8:	687b      	ldr	r3, [r7, #4]
 802c6ba:	681b      	ldr	r3, [r3, #0]
 802c6bc:	685b      	ldr	r3, [r3, #4]
 802c6be:	b2db      	uxtb	r3, r3
 802c6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c6c4:	b2da      	uxtb	r2, r3
 802c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c6c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c6ce:	1c5a      	adds	r2, r3, #1
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802c6d4:	687b      	ldr	r3, [r7, #4]
 802c6d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802c6d8:	b29b      	uxth	r3, r3
 802c6da:	3b01      	subs	r3, #1
 802c6dc:	b29b      	uxth	r3, r3
 802c6de:	687a      	ldr	r2, [r7, #4]
 802c6e0:	4619      	mov	r1, r3
 802c6e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802c6e4:	2b00      	cmp	r3, #0
 802c6e6:	d15a      	bne.n	802c79e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	681b      	ldr	r3, [r3, #0]
 802c6ec:	68da      	ldr	r2, [r3, #12]
 802c6ee:	687b      	ldr	r3, [r7, #4]
 802c6f0:	681b      	ldr	r3, [r3, #0]
 802c6f2:	f022 0220 	bic.w	r2, r2, #32
 802c6f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802c6f8:	687b      	ldr	r3, [r7, #4]
 802c6fa:	681b      	ldr	r3, [r3, #0]
 802c6fc:	68da      	ldr	r2, [r3, #12]
 802c6fe:	687b      	ldr	r3, [r7, #4]
 802c700:	681b      	ldr	r3, [r3, #0]
 802c702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802c708:	687b      	ldr	r3, [r7, #4]
 802c70a:	681b      	ldr	r3, [r3, #0]
 802c70c:	695a      	ldr	r2, [r3, #20]
 802c70e:	687b      	ldr	r3, [r7, #4]
 802c710:	681b      	ldr	r3, [r3, #0]
 802c712:	f022 0201 	bic.w	r2, r2, #1
 802c716:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802c718:	687b      	ldr	r3, [r7, #4]
 802c71a:	2220      	movs	r2, #32
 802c71c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802c720:	687b      	ldr	r3, [r7, #4]
 802c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c724:	2b01      	cmp	r3, #1
 802c726:	d135      	bne.n	802c794 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	2200      	movs	r2, #0
 802c72c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802c72e:	687b      	ldr	r3, [r7, #4]
 802c730:	681b      	ldr	r3, [r3, #0]
 802c732:	330c      	adds	r3, #12
 802c734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802c736:	697b      	ldr	r3, [r7, #20]
 802c738:	e853 3f00 	ldrex	r3, [r3]
 802c73c:	613b      	str	r3, [r7, #16]
   return(result);
 802c73e:	693b      	ldr	r3, [r7, #16]
 802c740:	f023 0310 	bic.w	r3, r3, #16
 802c744:	627b      	str	r3, [r7, #36]	; 0x24
 802c746:	687b      	ldr	r3, [r7, #4]
 802c748:	681b      	ldr	r3, [r3, #0]
 802c74a:	330c      	adds	r3, #12
 802c74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c74e:	623a      	str	r2, [r7, #32]
 802c750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802c752:	69f9      	ldr	r1, [r7, #28]
 802c754:	6a3a      	ldr	r2, [r7, #32]
 802c756:	e841 2300 	strex	r3, r2, [r1]
 802c75a:	61bb      	str	r3, [r7, #24]
   return(result);
 802c75c:	69bb      	ldr	r3, [r7, #24]
 802c75e:	2b00      	cmp	r3, #0
 802c760:	d1e5      	bne.n	802c72e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802c762:	687b      	ldr	r3, [r7, #4]
 802c764:	681b      	ldr	r3, [r3, #0]
 802c766:	681b      	ldr	r3, [r3, #0]
 802c768:	f003 0310 	and.w	r3, r3, #16
 802c76c:	2b10      	cmp	r3, #16
 802c76e:	d10a      	bne.n	802c786 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802c770:	2300      	movs	r3, #0
 802c772:	60fb      	str	r3, [r7, #12]
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	681b      	ldr	r3, [r3, #0]
 802c778:	681b      	ldr	r3, [r3, #0]
 802c77a:	60fb      	str	r3, [r7, #12]
 802c77c:	687b      	ldr	r3, [r7, #4]
 802c77e:	681b      	ldr	r3, [r3, #0]
 802c780:	685b      	ldr	r3, [r3, #4]
 802c782:	60fb      	str	r3, [r7, #12]
 802c784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802c786:	687b      	ldr	r3, [r7, #4]
 802c788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802c78a:	4619      	mov	r1, r3
 802c78c:	6878      	ldr	r0, [r7, #4]
 802c78e:	f7ff fdf9 	bl	802c384 <HAL_UARTEx_RxEventCallback>
 802c792:	e002      	b.n	802c79a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802c794:	6878      	ldr	r0, [r7, #4]
 802c796:	f7ff fde1 	bl	802c35c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802c79a:	2300      	movs	r3, #0
 802c79c:	e002      	b.n	802c7a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802c79e:	2300      	movs	r3, #0
 802c7a0:	e000      	b.n	802c7a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802c7a2:	2302      	movs	r3, #2
  }
}
 802c7a4:	4618      	mov	r0, r3
 802c7a6:	3730      	adds	r7, #48	; 0x30
 802c7a8:	46bd      	mov	sp, r7
 802c7aa:	bd80      	pop	{r7, pc}

0802c7ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802c7ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802c7b0:	b0c0      	sub	sp, #256	; 0x100
 802c7b2:	af00      	add	r7, sp, #0
 802c7b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802c7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7bc:	681b      	ldr	r3, [r3, #0]
 802c7be:	691b      	ldr	r3, [r3, #16]
 802c7c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802c7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7c8:	68d9      	ldr	r1, [r3, #12]
 802c7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7ce:	681a      	ldr	r2, [r3, #0]
 802c7d0:	ea40 0301 	orr.w	r3, r0, r1
 802c7d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802c7d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7da:	689a      	ldr	r2, [r3, #8]
 802c7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7e0:	691b      	ldr	r3, [r3, #16]
 802c7e2:	431a      	orrs	r2, r3
 802c7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7e8:	695b      	ldr	r3, [r3, #20]
 802c7ea:	431a      	orrs	r2, r3
 802c7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7f0:	69db      	ldr	r3, [r3, #28]
 802c7f2:	4313      	orrs	r3, r2
 802c7f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802c7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c7fc:	681b      	ldr	r3, [r3, #0]
 802c7fe:	68db      	ldr	r3, [r3, #12]
 802c800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802c804:	f021 010c 	bic.w	r1, r1, #12
 802c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c80c:	681a      	ldr	r2, [r3, #0]
 802c80e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802c812:	430b      	orrs	r3, r1
 802c814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802c816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c81a:	681b      	ldr	r3, [r3, #0]
 802c81c:	695b      	ldr	r3, [r3, #20]
 802c81e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802c822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c826:	6999      	ldr	r1, [r3, #24]
 802c828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c82c:	681a      	ldr	r2, [r3, #0]
 802c82e:	ea40 0301 	orr.w	r3, r0, r1
 802c832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802c834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c838:	681a      	ldr	r2, [r3, #0]
 802c83a:	4b8f      	ldr	r3, [pc, #572]	; (802ca78 <UART_SetConfig+0x2cc>)
 802c83c:	429a      	cmp	r2, r3
 802c83e:	d005      	beq.n	802c84c <UART_SetConfig+0xa0>
 802c840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c844:	681a      	ldr	r2, [r3, #0]
 802c846:	4b8d      	ldr	r3, [pc, #564]	; (802ca7c <UART_SetConfig+0x2d0>)
 802c848:	429a      	cmp	r2, r3
 802c84a:	d104      	bne.n	802c856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802c84c:	f7fd fff2 	bl	802a834 <HAL_RCC_GetPCLK2Freq>
 802c850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802c854:	e003      	b.n	802c85e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802c856:	f7fd ffd9 	bl	802a80c <HAL_RCC_GetPCLK1Freq>
 802c85a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802c85e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c862:	69db      	ldr	r3, [r3, #28]
 802c864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802c868:	f040 810c 	bne.w	802ca84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802c86c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c870:	2200      	movs	r2, #0
 802c872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802c876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802c87a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802c87e:	4622      	mov	r2, r4
 802c880:	462b      	mov	r3, r5
 802c882:	1891      	adds	r1, r2, r2
 802c884:	65b9      	str	r1, [r7, #88]	; 0x58
 802c886:	415b      	adcs	r3, r3
 802c888:	65fb      	str	r3, [r7, #92]	; 0x5c
 802c88a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802c88e:	4621      	mov	r1, r4
 802c890:	eb12 0801 	adds.w	r8, r2, r1
 802c894:	4629      	mov	r1, r5
 802c896:	eb43 0901 	adc.w	r9, r3, r1
 802c89a:	f04f 0200 	mov.w	r2, #0
 802c89e:	f04f 0300 	mov.w	r3, #0
 802c8a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802c8a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802c8aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802c8ae:	4690      	mov	r8, r2
 802c8b0:	4699      	mov	r9, r3
 802c8b2:	4623      	mov	r3, r4
 802c8b4:	eb18 0303 	adds.w	r3, r8, r3
 802c8b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802c8bc:	462b      	mov	r3, r5
 802c8be:	eb49 0303 	adc.w	r3, r9, r3
 802c8c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802c8c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c8ca:	685b      	ldr	r3, [r3, #4]
 802c8cc:	2200      	movs	r2, #0
 802c8ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802c8d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802c8d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802c8da:	460b      	mov	r3, r1
 802c8dc:	18db      	adds	r3, r3, r3
 802c8de:	653b      	str	r3, [r7, #80]	; 0x50
 802c8e0:	4613      	mov	r3, r2
 802c8e2:	eb42 0303 	adc.w	r3, r2, r3
 802c8e6:	657b      	str	r3, [r7, #84]	; 0x54
 802c8e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802c8ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802c8f0:	f7f5 fcbe 	bl	8022270 <__aeabi_uldivmod>
 802c8f4:	4602      	mov	r2, r0
 802c8f6:	460b      	mov	r3, r1
 802c8f8:	4b61      	ldr	r3, [pc, #388]	; (802ca80 <UART_SetConfig+0x2d4>)
 802c8fa:	fba3 2302 	umull	r2, r3, r3, r2
 802c8fe:	095b      	lsrs	r3, r3, #5
 802c900:	011c      	lsls	r4, r3, #4
 802c902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c906:	2200      	movs	r2, #0
 802c908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802c90c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802c910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802c914:	4642      	mov	r2, r8
 802c916:	464b      	mov	r3, r9
 802c918:	1891      	adds	r1, r2, r2
 802c91a:	64b9      	str	r1, [r7, #72]	; 0x48
 802c91c:	415b      	adcs	r3, r3
 802c91e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802c924:	4641      	mov	r1, r8
 802c926:	eb12 0a01 	adds.w	sl, r2, r1
 802c92a:	4649      	mov	r1, r9
 802c92c:	eb43 0b01 	adc.w	fp, r3, r1
 802c930:	f04f 0200 	mov.w	r2, #0
 802c934:	f04f 0300 	mov.w	r3, #0
 802c938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802c93c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802c940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802c944:	4692      	mov	sl, r2
 802c946:	469b      	mov	fp, r3
 802c948:	4643      	mov	r3, r8
 802c94a:	eb1a 0303 	adds.w	r3, sl, r3
 802c94e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802c952:	464b      	mov	r3, r9
 802c954:	eb4b 0303 	adc.w	r3, fp, r3
 802c958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802c95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802c960:	685b      	ldr	r3, [r3, #4]
 802c962:	2200      	movs	r2, #0
 802c964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802c968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802c96c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802c970:	460b      	mov	r3, r1
 802c972:	18db      	adds	r3, r3, r3
 802c974:	643b      	str	r3, [r7, #64]	; 0x40
 802c976:	4613      	mov	r3, r2
 802c978:	eb42 0303 	adc.w	r3, r2, r3
 802c97c:	647b      	str	r3, [r7, #68]	; 0x44
 802c97e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802c982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802c986:	f7f5 fc73 	bl	8022270 <__aeabi_uldivmod>
 802c98a:	4602      	mov	r2, r0
 802c98c:	460b      	mov	r3, r1
 802c98e:	4611      	mov	r1, r2
 802c990:	4b3b      	ldr	r3, [pc, #236]	; (802ca80 <UART_SetConfig+0x2d4>)
 802c992:	fba3 2301 	umull	r2, r3, r3, r1
 802c996:	095b      	lsrs	r3, r3, #5
 802c998:	2264      	movs	r2, #100	; 0x64
 802c99a:	fb02 f303 	mul.w	r3, r2, r3
 802c99e:	1acb      	subs	r3, r1, r3
 802c9a0:	00db      	lsls	r3, r3, #3
 802c9a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802c9a6:	4b36      	ldr	r3, [pc, #216]	; (802ca80 <UART_SetConfig+0x2d4>)
 802c9a8:	fba3 2302 	umull	r2, r3, r3, r2
 802c9ac:	095b      	lsrs	r3, r3, #5
 802c9ae:	005b      	lsls	r3, r3, #1
 802c9b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802c9b4:	441c      	add	r4, r3
 802c9b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802c9ba:	2200      	movs	r2, #0
 802c9bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802c9c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802c9c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802c9c8:	4642      	mov	r2, r8
 802c9ca:	464b      	mov	r3, r9
 802c9cc:	1891      	adds	r1, r2, r2
 802c9ce:	63b9      	str	r1, [r7, #56]	; 0x38
 802c9d0:	415b      	adcs	r3, r3
 802c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802c9d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802c9d8:	4641      	mov	r1, r8
 802c9da:	1851      	adds	r1, r2, r1
 802c9dc:	6339      	str	r1, [r7, #48]	; 0x30
 802c9de:	4649      	mov	r1, r9
 802c9e0:	414b      	adcs	r3, r1
 802c9e2:	637b      	str	r3, [r7, #52]	; 0x34
 802c9e4:	f04f 0200 	mov.w	r2, #0
 802c9e8:	f04f 0300 	mov.w	r3, #0
 802c9ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802c9f0:	4659      	mov	r1, fp
 802c9f2:	00cb      	lsls	r3, r1, #3
 802c9f4:	4651      	mov	r1, sl
 802c9f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802c9fa:	4651      	mov	r1, sl
 802c9fc:	00ca      	lsls	r2, r1, #3
 802c9fe:	4610      	mov	r0, r2
 802ca00:	4619      	mov	r1, r3
 802ca02:	4603      	mov	r3, r0
 802ca04:	4642      	mov	r2, r8
 802ca06:	189b      	adds	r3, r3, r2
 802ca08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802ca0c:	464b      	mov	r3, r9
 802ca0e:	460a      	mov	r2, r1
 802ca10:	eb42 0303 	adc.w	r3, r2, r3
 802ca14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802ca18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802ca1c:	685b      	ldr	r3, [r3, #4]
 802ca1e:	2200      	movs	r2, #0
 802ca20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802ca24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802ca28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802ca2c:	460b      	mov	r3, r1
 802ca2e:	18db      	adds	r3, r3, r3
 802ca30:	62bb      	str	r3, [r7, #40]	; 0x28
 802ca32:	4613      	mov	r3, r2
 802ca34:	eb42 0303 	adc.w	r3, r2, r3
 802ca38:	62fb      	str	r3, [r7, #44]	; 0x2c
 802ca3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802ca3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802ca42:	f7f5 fc15 	bl	8022270 <__aeabi_uldivmod>
 802ca46:	4602      	mov	r2, r0
 802ca48:	460b      	mov	r3, r1
 802ca4a:	4b0d      	ldr	r3, [pc, #52]	; (802ca80 <UART_SetConfig+0x2d4>)
 802ca4c:	fba3 1302 	umull	r1, r3, r3, r2
 802ca50:	095b      	lsrs	r3, r3, #5
 802ca52:	2164      	movs	r1, #100	; 0x64
 802ca54:	fb01 f303 	mul.w	r3, r1, r3
 802ca58:	1ad3      	subs	r3, r2, r3
 802ca5a:	00db      	lsls	r3, r3, #3
 802ca5c:	3332      	adds	r3, #50	; 0x32
 802ca5e:	4a08      	ldr	r2, [pc, #32]	; (802ca80 <UART_SetConfig+0x2d4>)
 802ca60:	fba2 2303 	umull	r2, r3, r2, r3
 802ca64:	095b      	lsrs	r3, r3, #5
 802ca66:	f003 0207 	and.w	r2, r3, #7
 802ca6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802ca6e:	681b      	ldr	r3, [r3, #0]
 802ca70:	4422      	add	r2, r4
 802ca72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802ca74:	e106      	b.n	802cc84 <UART_SetConfig+0x4d8>
 802ca76:	bf00      	nop
 802ca78:	40011000 	.word	0x40011000
 802ca7c:	40011400 	.word	0x40011400
 802ca80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802ca84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802ca88:	2200      	movs	r2, #0
 802ca8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802ca8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802ca92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802ca96:	4642      	mov	r2, r8
 802ca98:	464b      	mov	r3, r9
 802ca9a:	1891      	adds	r1, r2, r2
 802ca9c:	6239      	str	r1, [r7, #32]
 802ca9e:	415b      	adcs	r3, r3
 802caa0:	627b      	str	r3, [r7, #36]	; 0x24
 802caa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802caa6:	4641      	mov	r1, r8
 802caa8:	1854      	adds	r4, r2, r1
 802caaa:	4649      	mov	r1, r9
 802caac:	eb43 0501 	adc.w	r5, r3, r1
 802cab0:	f04f 0200 	mov.w	r2, #0
 802cab4:	f04f 0300 	mov.w	r3, #0
 802cab8:	00eb      	lsls	r3, r5, #3
 802caba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802cabe:	00e2      	lsls	r2, r4, #3
 802cac0:	4614      	mov	r4, r2
 802cac2:	461d      	mov	r5, r3
 802cac4:	4643      	mov	r3, r8
 802cac6:	18e3      	adds	r3, r4, r3
 802cac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802cacc:	464b      	mov	r3, r9
 802cace:	eb45 0303 	adc.w	r3, r5, r3
 802cad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802cad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cada:	685b      	ldr	r3, [r3, #4]
 802cadc:	2200      	movs	r2, #0
 802cade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802cae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802cae6:	f04f 0200 	mov.w	r2, #0
 802caea:	f04f 0300 	mov.w	r3, #0
 802caee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802caf2:	4629      	mov	r1, r5
 802caf4:	008b      	lsls	r3, r1, #2
 802caf6:	4621      	mov	r1, r4
 802caf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cafc:	4621      	mov	r1, r4
 802cafe:	008a      	lsls	r2, r1, #2
 802cb00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802cb04:	f7f5 fbb4 	bl	8022270 <__aeabi_uldivmod>
 802cb08:	4602      	mov	r2, r0
 802cb0a:	460b      	mov	r3, r1
 802cb0c:	4b60      	ldr	r3, [pc, #384]	; (802cc90 <UART_SetConfig+0x4e4>)
 802cb0e:	fba3 2302 	umull	r2, r3, r3, r2
 802cb12:	095b      	lsrs	r3, r3, #5
 802cb14:	011c      	lsls	r4, r3, #4
 802cb16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cb1a:	2200      	movs	r2, #0
 802cb1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802cb20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802cb24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802cb28:	4642      	mov	r2, r8
 802cb2a:	464b      	mov	r3, r9
 802cb2c:	1891      	adds	r1, r2, r2
 802cb2e:	61b9      	str	r1, [r7, #24]
 802cb30:	415b      	adcs	r3, r3
 802cb32:	61fb      	str	r3, [r7, #28]
 802cb34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802cb38:	4641      	mov	r1, r8
 802cb3a:	1851      	adds	r1, r2, r1
 802cb3c:	6139      	str	r1, [r7, #16]
 802cb3e:	4649      	mov	r1, r9
 802cb40:	414b      	adcs	r3, r1
 802cb42:	617b      	str	r3, [r7, #20]
 802cb44:	f04f 0200 	mov.w	r2, #0
 802cb48:	f04f 0300 	mov.w	r3, #0
 802cb4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802cb50:	4659      	mov	r1, fp
 802cb52:	00cb      	lsls	r3, r1, #3
 802cb54:	4651      	mov	r1, sl
 802cb56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cb5a:	4651      	mov	r1, sl
 802cb5c:	00ca      	lsls	r2, r1, #3
 802cb5e:	4610      	mov	r0, r2
 802cb60:	4619      	mov	r1, r3
 802cb62:	4603      	mov	r3, r0
 802cb64:	4642      	mov	r2, r8
 802cb66:	189b      	adds	r3, r3, r2
 802cb68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802cb6c:	464b      	mov	r3, r9
 802cb6e:	460a      	mov	r2, r1
 802cb70:	eb42 0303 	adc.w	r3, r2, r3
 802cb74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802cb78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cb7c:	685b      	ldr	r3, [r3, #4]
 802cb7e:	2200      	movs	r2, #0
 802cb80:	67bb      	str	r3, [r7, #120]	; 0x78
 802cb82:	67fa      	str	r2, [r7, #124]	; 0x7c
 802cb84:	f04f 0200 	mov.w	r2, #0
 802cb88:	f04f 0300 	mov.w	r3, #0
 802cb8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802cb90:	4649      	mov	r1, r9
 802cb92:	008b      	lsls	r3, r1, #2
 802cb94:	4641      	mov	r1, r8
 802cb96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cb9a:	4641      	mov	r1, r8
 802cb9c:	008a      	lsls	r2, r1, #2
 802cb9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802cba2:	f7f5 fb65 	bl	8022270 <__aeabi_uldivmod>
 802cba6:	4602      	mov	r2, r0
 802cba8:	460b      	mov	r3, r1
 802cbaa:	4611      	mov	r1, r2
 802cbac:	4b38      	ldr	r3, [pc, #224]	; (802cc90 <UART_SetConfig+0x4e4>)
 802cbae:	fba3 2301 	umull	r2, r3, r3, r1
 802cbb2:	095b      	lsrs	r3, r3, #5
 802cbb4:	2264      	movs	r2, #100	; 0x64
 802cbb6:	fb02 f303 	mul.w	r3, r2, r3
 802cbba:	1acb      	subs	r3, r1, r3
 802cbbc:	011b      	lsls	r3, r3, #4
 802cbbe:	3332      	adds	r3, #50	; 0x32
 802cbc0:	4a33      	ldr	r2, [pc, #204]	; (802cc90 <UART_SetConfig+0x4e4>)
 802cbc2:	fba2 2303 	umull	r2, r3, r2, r3
 802cbc6:	095b      	lsrs	r3, r3, #5
 802cbc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802cbcc:	441c      	add	r4, r3
 802cbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802cbd2:	2200      	movs	r2, #0
 802cbd4:	673b      	str	r3, [r7, #112]	; 0x70
 802cbd6:	677a      	str	r2, [r7, #116]	; 0x74
 802cbd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802cbdc:	4642      	mov	r2, r8
 802cbde:	464b      	mov	r3, r9
 802cbe0:	1891      	adds	r1, r2, r2
 802cbe2:	60b9      	str	r1, [r7, #8]
 802cbe4:	415b      	adcs	r3, r3
 802cbe6:	60fb      	str	r3, [r7, #12]
 802cbe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802cbec:	4641      	mov	r1, r8
 802cbee:	1851      	adds	r1, r2, r1
 802cbf0:	6039      	str	r1, [r7, #0]
 802cbf2:	4649      	mov	r1, r9
 802cbf4:	414b      	adcs	r3, r1
 802cbf6:	607b      	str	r3, [r7, #4]
 802cbf8:	f04f 0200 	mov.w	r2, #0
 802cbfc:	f04f 0300 	mov.w	r3, #0
 802cc00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802cc04:	4659      	mov	r1, fp
 802cc06:	00cb      	lsls	r3, r1, #3
 802cc08:	4651      	mov	r1, sl
 802cc0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802cc0e:	4651      	mov	r1, sl
 802cc10:	00ca      	lsls	r2, r1, #3
 802cc12:	4610      	mov	r0, r2
 802cc14:	4619      	mov	r1, r3
 802cc16:	4603      	mov	r3, r0
 802cc18:	4642      	mov	r2, r8
 802cc1a:	189b      	adds	r3, r3, r2
 802cc1c:	66bb      	str	r3, [r7, #104]	; 0x68
 802cc1e:	464b      	mov	r3, r9
 802cc20:	460a      	mov	r2, r1
 802cc22:	eb42 0303 	adc.w	r3, r2, r3
 802cc26:	66fb      	str	r3, [r7, #108]	; 0x6c
 802cc28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cc2c:	685b      	ldr	r3, [r3, #4]
 802cc2e:	2200      	movs	r2, #0
 802cc30:	663b      	str	r3, [r7, #96]	; 0x60
 802cc32:	667a      	str	r2, [r7, #100]	; 0x64
 802cc34:	f04f 0200 	mov.w	r2, #0
 802cc38:	f04f 0300 	mov.w	r3, #0
 802cc3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802cc40:	4649      	mov	r1, r9
 802cc42:	008b      	lsls	r3, r1, #2
 802cc44:	4641      	mov	r1, r8
 802cc46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802cc4a:	4641      	mov	r1, r8
 802cc4c:	008a      	lsls	r2, r1, #2
 802cc4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802cc52:	f7f5 fb0d 	bl	8022270 <__aeabi_uldivmod>
 802cc56:	4602      	mov	r2, r0
 802cc58:	460b      	mov	r3, r1
 802cc5a:	4b0d      	ldr	r3, [pc, #52]	; (802cc90 <UART_SetConfig+0x4e4>)
 802cc5c:	fba3 1302 	umull	r1, r3, r3, r2
 802cc60:	095b      	lsrs	r3, r3, #5
 802cc62:	2164      	movs	r1, #100	; 0x64
 802cc64:	fb01 f303 	mul.w	r3, r1, r3
 802cc68:	1ad3      	subs	r3, r2, r3
 802cc6a:	011b      	lsls	r3, r3, #4
 802cc6c:	3332      	adds	r3, #50	; 0x32
 802cc6e:	4a08      	ldr	r2, [pc, #32]	; (802cc90 <UART_SetConfig+0x4e4>)
 802cc70:	fba2 2303 	umull	r2, r3, r2, r3
 802cc74:	095b      	lsrs	r3, r3, #5
 802cc76:	f003 020f 	and.w	r2, r3, #15
 802cc7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802cc7e:	681b      	ldr	r3, [r3, #0]
 802cc80:	4422      	add	r2, r4
 802cc82:	609a      	str	r2, [r3, #8]
}
 802cc84:	bf00      	nop
 802cc86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802cc8a:	46bd      	mov	sp, r7
 802cc8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802cc90:	51eb851f 	.word	0x51eb851f

0802cc94 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 802cc94:	b480      	push	{r7}
 802cc96:	b083      	sub	sp, #12
 802cc98:	af00      	add	r7, sp, #0
 802cc9a:	6078      	str	r0, [r7, #4]
 802cc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 802cc9e:	683b      	ldr	r3, [r7, #0]
 802cca0:	681b      	ldr	r3, [r3, #0]
 802cca2:	2b10      	cmp	r3, #16
 802cca4:	d11c      	bne.n	802cce0 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802cca6:	687b      	ldr	r3, [r7, #4]
 802cca8:	681a      	ldr	r2, [r3, #0]
 802ccaa:	4b1f      	ldr	r3, [pc, #124]	; (802cd28 <FSMC_NAND_Init+0x94>)
 802ccac:	4013      	ands	r3, r2
 802ccae:	683a      	ldr	r2, [r7, #0]
 802ccb0:	6851      	ldr	r1, [r2, #4]
 802ccb2:	683a      	ldr	r2, [r7, #0]
 802ccb4:	6892      	ldr	r2, [r2, #8]
 802ccb6:	4311      	orrs	r1, r2
 802ccb8:	683a      	ldr	r2, [r7, #0]
 802ccba:	68d2      	ldr	r2, [r2, #12]
 802ccbc:	4311      	orrs	r1, r2
 802ccbe:	683a      	ldr	r2, [r7, #0]
 802ccc0:	6912      	ldr	r2, [r2, #16]
 802ccc2:	4311      	orrs	r1, r2
 802ccc4:	683a      	ldr	r2, [r7, #0]
 802ccc6:	6952      	ldr	r2, [r2, #20]
 802ccc8:	0252      	lsls	r2, r2, #9
 802ccca:	4311      	orrs	r1, r2
 802cccc:	683a      	ldr	r2, [r7, #0]
 802ccce:	6992      	ldr	r2, [r2, #24]
 802ccd0:	0352      	lsls	r2, r2, #13
 802ccd2:	430a      	orrs	r2, r1
 802ccd4:	4313      	orrs	r3, r2
 802ccd6:	f043 0208 	orr.w	r2, r3, #8
 802ccda:	687b      	ldr	r3, [r7, #4]
 802ccdc:	601a      	str	r2, [r3, #0]
 802ccde:	e01b      	b.n	802cd18 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 802cce0:	687b      	ldr	r3, [r7, #4]
 802cce2:	6a1a      	ldr	r2, [r3, #32]
 802cce4:	4b10      	ldr	r3, [pc, #64]	; (802cd28 <FSMC_NAND_Init+0x94>)
 802cce6:	4013      	ands	r3, r2
 802cce8:	683a      	ldr	r2, [r7, #0]
 802ccea:	6851      	ldr	r1, [r2, #4]
 802ccec:	683a      	ldr	r2, [r7, #0]
 802ccee:	6892      	ldr	r2, [r2, #8]
 802ccf0:	4311      	orrs	r1, r2
 802ccf2:	683a      	ldr	r2, [r7, #0]
 802ccf4:	68d2      	ldr	r2, [r2, #12]
 802ccf6:	4311      	orrs	r1, r2
 802ccf8:	683a      	ldr	r2, [r7, #0]
 802ccfa:	6912      	ldr	r2, [r2, #16]
 802ccfc:	4311      	orrs	r1, r2
 802ccfe:	683a      	ldr	r2, [r7, #0]
 802cd00:	6952      	ldr	r2, [r2, #20]
 802cd02:	0252      	lsls	r2, r2, #9
 802cd04:	4311      	orrs	r1, r2
 802cd06:	683a      	ldr	r2, [r7, #0]
 802cd08:	6992      	ldr	r2, [r2, #24]
 802cd0a:	0352      	lsls	r2, r2, #13
 802cd0c:	430a      	orrs	r2, r1
 802cd0e:	4313      	orrs	r3, r2
 802cd10:	f043 0208 	orr.w	r2, r3, #8
 802cd14:	687b      	ldr	r3, [r7, #4]
 802cd16:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 802cd18:	2300      	movs	r3, #0
}
 802cd1a:	4618      	mov	r0, r3
 802cd1c:	370c      	adds	r7, #12
 802cd1e:	46bd      	mov	sp, r7
 802cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd24:	4770      	bx	lr
 802cd26:	bf00      	nop
 802cd28:	fff00181 	.word	0xfff00181

0802cd2c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cd2c:	b480      	push	{r7}
 802cd2e:	b085      	sub	sp, #20
 802cd30:	af00      	add	r7, sp, #0
 802cd32:	60f8      	str	r0, [r7, #12]
 802cd34:	60b9      	str	r1, [r7, #8]
 802cd36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802cd38:	687b      	ldr	r3, [r7, #4]
 802cd3a:	2b10      	cmp	r3, #16
 802cd3c:	d112      	bne.n	802cd64 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cd3e:	68fb      	ldr	r3, [r7, #12]
 802cd40:	689b      	ldr	r3, [r3, #8]
 802cd42:	68bb      	ldr	r3, [r7, #8]
 802cd44:	681a      	ldr	r2, [r3, #0]
 802cd46:	68bb      	ldr	r3, [r7, #8]
 802cd48:	685b      	ldr	r3, [r3, #4]
 802cd4a:	021b      	lsls	r3, r3, #8
 802cd4c:	431a      	orrs	r2, r3
 802cd4e:	68bb      	ldr	r3, [r7, #8]
 802cd50:	689b      	ldr	r3, [r3, #8]
 802cd52:	041b      	lsls	r3, r3, #16
 802cd54:	431a      	orrs	r2, r3
 802cd56:	68bb      	ldr	r3, [r7, #8]
 802cd58:	68db      	ldr	r3, [r3, #12]
 802cd5a:	061b      	lsls	r3, r3, #24
 802cd5c:	431a      	orrs	r2, r3
 802cd5e:	68fb      	ldr	r3, [r7, #12]
 802cd60:	609a      	str	r2, [r3, #8]
 802cd62:	e011      	b.n	802cd88 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 802cd64:	68fb      	ldr	r3, [r7, #12]
 802cd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cd68:	68bb      	ldr	r3, [r7, #8]
 802cd6a:	681a      	ldr	r2, [r3, #0]
 802cd6c:	68bb      	ldr	r3, [r7, #8]
 802cd6e:	685b      	ldr	r3, [r3, #4]
 802cd70:	021b      	lsls	r3, r3, #8
 802cd72:	431a      	orrs	r2, r3
 802cd74:	68bb      	ldr	r3, [r7, #8]
 802cd76:	689b      	ldr	r3, [r3, #8]
 802cd78:	041b      	lsls	r3, r3, #16
 802cd7a:	431a      	orrs	r2, r3
 802cd7c:	68bb      	ldr	r3, [r7, #8]
 802cd7e:	68db      	ldr	r3, [r3, #12]
 802cd80:	061b      	lsls	r3, r3, #24
 802cd82:	431a      	orrs	r2, r3
 802cd84:	68fb      	ldr	r3, [r7, #12]
 802cd86:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 802cd88:	2300      	movs	r3, #0
}
 802cd8a:	4618      	mov	r0, r3
 802cd8c:	3714      	adds	r7, #20
 802cd8e:	46bd      	mov	sp, r7
 802cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cd94:	4770      	bx	lr

0802cd96 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 802cd96:	b480      	push	{r7}
 802cd98:	b085      	sub	sp, #20
 802cd9a:	af00      	add	r7, sp, #0
 802cd9c:	60f8      	str	r0, [r7, #12]
 802cd9e:	60b9      	str	r1, [r7, #8]
 802cda0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 802cda2:	687b      	ldr	r3, [r7, #4]
 802cda4:	2b10      	cmp	r3, #16
 802cda6:	d112      	bne.n	802cdce <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802cda8:	68fb      	ldr	r3, [r7, #12]
 802cdaa:	68db      	ldr	r3, [r3, #12]
 802cdac:	68bb      	ldr	r3, [r7, #8]
 802cdae:	681a      	ldr	r2, [r3, #0]
 802cdb0:	68bb      	ldr	r3, [r7, #8]
 802cdb2:	685b      	ldr	r3, [r3, #4]
 802cdb4:	021b      	lsls	r3, r3, #8
 802cdb6:	431a      	orrs	r2, r3
 802cdb8:	68bb      	ldr	r3, [r7, #8]
 802cdba:	689b      	ldr	r3, [r3, #8]
 802cdbc:	041b      	lsls	r3, r3, #16
 802cdbe:	431a      	orrs	r2, r3
 802cdc0:	68bb      	ldr	r3, [r7, #8]
 802cdc2:	68db      	ldr	r3, [r3, #12]
 802cdc4:	061b      	lsls	r3, r3, #24
 802cdc6:	431a      	orrs	r2, r3
 802cdc8:	68fb      	ldr	r3, [r7, #12]
 802cdca:	60da      	str	r2, [r3, #12]
 802cdcc:	e011      	b.n	802cdf2 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 802cdce:	68fb      	ldr	r3, [r7, #12]
 802cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cdd2:	68bb      	ldr	r3, [r7, #8]
 802cdd4:	681a      	ldr	r2, [r3, #0]
 802cdd6:	68bb      	ldr	r3, [r7, #8]
 802cdd8:	685b      	ldr	r3, [r3, #4]
 802cdda:	021b      	lsls	r3, r3, #8
 802cddc:	431a      	orrs	r2, r3
 802cdde:	68bb      	ldr	r3, [r7, #8]
 802cde0:	689b      	ldr	r3, [r3, #8]
 802cde2:	041b      	lsls	r3, r3, #16
 802cde4:	431a      	orrs	r2, r3
 802cde6:	68bb      	ldr	r3, [r7, #8]
 802cde8:	68db      	ldr	r3, [r3, #12]
 802cdea:	061b      	lsls	r3, r3, #24
 802cdec:	431a      	orrs	r2, r3
 802cdee:	68fb      	ldr	r3, [r7, #12]
 802cdf0:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 802cdf2:	2300      	movs	r3, #0
}
 802cdf4:	4618      	mov	r0, r3
 802cdf6:	3714      	adds	r7, #20
 802cdf8:	46bd      	mov	sp, r7
 802cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cdfe:	4770      	bx	lr

0802ce00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802ce00:	b084      	sub	sp, #16
 802ce02:	b580      	push	{r7, lr}
 802ce04:	b084      	sub	sp, #16
 802ce06:	af00      	add	r7, sp, #0
 802ce08:	6078      	str	r0, [r7, #4]
 802ce0a:	f107 001c 	add.w	r0, r7, #28
 802ce0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ce14:	2b01      	cmp	r3, #1
 802ce16:	d122      	bne.n	802ce5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ce18:	687b      	ldr	r3, [r7, #4]
 802ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802ce24:	687b      	ldr	r3, [r7, #4]
 802ce26:	68db      	ldr	r3, [r3, #12]
 802ce28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802ce2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802ce30:	687a      	ldr	r2, [r7, #4]
 802ce32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	68db      	ldr	r3, [r3, #12]
 802ce38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802ce3c:	687b      	ldr	r3, [r7, #4]
 802ce3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802ce40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ce42:	2b01      	cmp	r3, #1
 802ce44:	d105      	bne.n	802ce52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802ce46:	687b      	ldr	r3, [r7, #4]
 802ce48:	68db      	ldr	r3, [r3, #12]
 802ce4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802ce4e:	687b      	ldr	r3, [r7, #4]
 802ce50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ce52:	6878      	ldr	r0, [r7, #4]
 802ce54:	f001 fbee 	bl	802e634 <USB_CoreReset>
 802ce58:	4603      	mov	r3, r0
 802ce5a:	73fb      	strb	r3, [r7, #15]
 802ce5c:	e01a      	b.n	802ce94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802ce5e:	687b      	ldr	r3, [r7, #4]
 802ce60:	68db      	ldr	r3, [r3, #12]
 802ce62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802ce66:	687b      	ldr	r3, [r7, #4]
 802ce68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802ce6a:	6878      	ldr	r0, [r7, #4]
 802ce6c:	f001 fbe2 	bl	802e634 <USB_CoreReset>
 802ce70:	4603      	mov	r3, r0
 802ce72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802ce74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ce76:	2b00      	cmp	r3, #0
 802ce78:	d106      	bne.n	802ce88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802ce7a:	687b      	ldr	r3, [r7, #4]
 802ce7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ce82:	687b      	ldr	r3, [r7, #4]
 802ce84:	639a      	str	r2, [r3, #56]	; 0x38
 802ce86:	e005      	b.n	802ce94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ce88:	687b      	ldr	r3, [r7, #4]
 802ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ce8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ce90:	687b      	ldr	r3, [r7, #4]
 802ce92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ce96:	2b01      	cmp	r3, #1
 802ce98:	d10b      	bne.n	802ceb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802ce9a:	687b      	ldr	r3, [r7, #4]
 802ce9c:	689b      	ldr	r3, [r3, #8]
 802ce9e:	f043 0206 	orr.w	r2, r3, #6
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802cea6:	687b      	ldr	r3, [r7, #4]
 802cea8:	689b      	ldr	r3, [r3, #8]
 802ceaa:	f043 0220 	orr.w	r2, r3, #32
 802ceae:	687b      	ldr	r3, [r7, #4]
 802ceb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 802ceb4:	4618      	mov	r0, r3
 802ceb6:	3710      	adds	r7, #16
 802ceb8:	46bd      	mov	sp, r7
 802ceba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802cebe:	b004      	add	sp, #16
 802cec0:	4770      	bx	lr
	...

0802cec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 802cec4:	b480      	push	{r7}
 802cec6:	b087      	sub	sp, #28
 802cec8:	af00      	add	r7, sp, #0
 802ceca:	60f8      	str	r0, [r7, #12]
 802cecc:	60b9      	str	r1, [r7, #8]
 802cece:	4613      	mov	r3, r2
 802ced0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 802ced2:	79fb      	ldrb	r3, [r7, #7]
 802ced4:	2b02      	cmp	r3, #2
 802ced6:	d165      	bne.n	802cfa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 802ced8:	68bb      	ldr	r3, [r7, #8]
 802ceda:	4a41      	ldr	r2, [pc, #260]	; (802cfe0 <USB_SetTurnaroundTime+0x11c>)
 802cedc:	4293      	cmp	r3, r2
 802cede:	d906      	bls.n	802ceee <USB_SetTurnaroundTime+0x2a>
 802cee0:	68bb      	ldr	r3, [r7, #8]
 802cee2:	4a40      	ldr	r2, [pc, #256]	; (802cfe4 <USB_SetTurnaroundTime+0x120>)
 802cee4:	4293      	cmp	r3, r2
 802cee6:	d202      	bcs.n	802ceee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 802cee8:	230f      	movs	r3, #15
 802ceea:	617b      	str	r3, [r7, #20]
 802ceec:	e062      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 802ceee:	68bb      	ldr	r3, [r7, #8]
 802cef0:	4a3c      	ldr	r2, [pc, #240]	; (802cfe4 <USB_SetTurnaroundTime+0x120>)
 802cef2:	4293      	cmp	r3, r2
 802cef4:	d306      	bcc.n	802cf04 <USB_SetTurnaroundTime+0x40>
 802cef6:	68bb      	ldr	r3, [r7, #8]
 802cef8:	4a3b      	ldr	r2, [pc, #236]	; (802cfe8 <USB_SetTurnaroundTime+0x124>)
 802cefa:	4293      	cmp	r3, r2
 802cefc:	d202      	bcs.n	802cf04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 802cefe:	230e      	movs	r3, #14
 802cf00:	617b      	str	r3, [r7, #20]
 802cf02:	e057      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 802cf04:	68bb      	ldr	r3, [r7, #8]
 802cf06:	4a38      	ldr	r2, [pc, #224]	; (802cfe8 <USB_SetTurnaroundTime+0x124>)
 802cf08:	4293      	cmp	r3, r2
 802cf0a:	d306      	bcc.n	802cf1a <USB_SetTurnaroundTime+0x56>
 802cf0c:	68bb      	ldr	r3, [r7, #8]
 802cf0e:	4a37      	ldr	r2, [pc, #220]	; (802cfec <USB_SetTurnaroundTime+0x128>)
 802cf10:	4293      	cmp	r3, r2
 802cf12:	d202      	bcs.n	802cf1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 802cf14:	230d      	movs	r3, #13
 802cf16:	617b      	str	r3, [r7, #20]
 802cf18:	e04c      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 802cf1a:	68bb      	ldr	r3, [r7, #8]
 802cf1c:	4a33      	ldr	r2, [pc, #204]	; (802cfec <USB_SetTurnaroundTime+0x128>)
 802cf1e:	4293      	cmp	r3, r2
 802cf20:	d306      	bcc.n	802cf30 <USB_SetTurnaroundTime+0x6c>
 802cf22:	68bb      	ldr	r3, [r7, #8]
 802cf24:	4a32      	ldr	r2, [pc, #200]	; (802cff0 <USB_SetTurnaroundTime+0x12c>)
 802cf26:	4293      	cmp	r3, r2
 802cf28:	d802      	bhi.n	802cf30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 802cf2a:	230c      	movs	r3, #12
 802cf2c:	617b      	str	r3, [r7, #20]
 802cf2e:	e041      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 802cf30:	68bb      	ldr	r3, [r7, #8]
 802cf32:	4a2f      	ldr	r2, [pc, #188]	; (802cff0 <USB_SetTurnaroundTime+0x12c>)
 802cf34:	4293      	cmp	r3, r2
 802cf36:	d906      	bls.n	802cf46 <USB_SetTurnaroundTime+0x82>
 802cf38:	68bb      	ldr	r3, [r7, #8]
 802cf3a:	4a2e      	ldr	r2, [pc, #184]	; (802cff4 <USB_SetTurnaroundTime+0x130>)
 802cf3c:	4293      	cmp	r3, r2
 802cf3e:	d802      	bhi.n	802cf46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 802cf40:	230b      	movs	r3, #11
 802cf42:	617b      	str	r3, [r7, #20]
 802cf44:	e036      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 802cf46:	68bb      	ldr	r3, [r7, #8]
 802cf48:	4a2a      	ldr	r2, [pc, #168]	; (802cff4 <USB_SetTurnaroundTime+0x130>)
 802cf4a:	4293      	cmp	r3, r2
 802cf4c:	d906      	bls.n	802cf5c <USB_SetTurnaroundTime+0x98>
 802cf4e:	68bb      	ldr	r3, [r7, #8]
 802cf50:	4a29      	ldr	r2, [pc, #164]	; (802cff8 <USB_SetTurnaroundTime+0x134>)
 802cf52:	4293      	cmp	r3, r2
 802cf54:	d802      	bhi.n	802cf5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 802cf56:	230a      	movs	r3, #10
 802cf58:	617b      	str	r3, [r7, #20]
 802cf5a:	e02b      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 802cf5c:	68bb      	ldr	r3, [r7, #8]
 802cf5e:	4a26      	ldr	r2, [pc, #152]	; (802cff8 <USB_SetTurnaroundTime+0x134>)
 802cf60:	4293      	cmp	r3, r2
 802cf62:	d906      	bls.n	802cf72 <USB_SetTurnaroundTime+0xae>
 802cf64:	68bb      	ldr	r3, [r7, #8]
 802cf66:	4a25      	ldr	r2, [pc, #148]	; (802cffc <USB_SetTurnaroundTime+0x138>)
 802cf68:	4293      	cmp	r3, r2
 802cf6a:	d202      	bcs.n	802cf72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 802cf6c:	2309      	movs	r3, #9
 802cf6e:	617b      	str	r3, [r7, #20]
 802cf70:	e020      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 802cf72:	68bb      	ldr	r3, [r7, #8]
 802cf74:	4a21      	ldr	r2, [pc, #132]	; (802cffc <USB_SetTurnaroundTime+0x138>)
 802cf76:	4293      	cmp	r3, r2
 802cf78:	d306      	bcc.n	802cf88 <USB_SetTurnaroundTime+0xc4>
 802cf7a:	68bb      	ldr	r3, [r7, #8]
 802cf7c:	4a20      	ldr	r2, [pc, #128]	; (802d000 <USB_SetTurnaroundTime+0x13c>)
 802cf7e:	4293      	cmp	r3, r2
 802cf80:	d802      	bhi.n	802cf88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 802cf82:	2308      	movs	r3, #8
 802cf84:	617b      	str	r3, [r7, #20]
 802cf86:	e015      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 802cf88:	68bb      	ldr	r3, [r7, #8]
 802cf8a:	4a1d      	ldr	r2, [pc, #116]	; (802d000 <USB_SetTurnaroundTime+0x13c>)
 802cf8c:	4293      	cmp	r3, r2
 802cf8e:	d906      	bls.n	802cf9e <USB_SetTurnaroundTime+0xda>
 802cf90:	68bb      	ldr	r3, [r7, #8]
 802cf92:	4a1c      	ldr	r2, [pc, #112]	; (802d004 <USB_SetTurnaroundTime+0x140>)
 802cf94:	4293      	cmp	r3, r2
 802cf96:	d202      	bcs.n	802cf9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 802cf98:	2307      	movs	r3, #7
 802cf9a:	617b      	str	r3, [r7, #20]
 802cf9c:	e00a      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 802cf9e:	2306      	movs	r3, #6
 802cfa0:	617b      	str	r3, [r7, #20]
 802cfa2:	e007      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 802cfa4:	79fb      	ldrb	r3, [r7, #7]
 802cfa6:	2b00      	cmp	r3, #0
 802cfa8:	d102      	bne.n	802cfb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 802cfaa:	2309      	movs	r3, #9
 802cfac:	617b      	str	r3, [r7, #20]
 802cfae:	e001      	b.n	802cfb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 802cfb0:	2309      	movs	r3, #9
 802cfb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 802cfb4:	68fb      	ldr	r3, [r7, #12]
 802cfb6:	68db      	ldr	r3, [r3, #12]
 802cfb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 802cfbc:	68fb      	ldr	r3, [r7, #12]
 802cfbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 802cfc0:	68fb      	ldr	r3, [r7, #12]
 802cfc2:	68da      	ldr	r2, [r3, #12]
 802cfc4:	697b      	ldr	r3, [r7, #20]
 802cfc6:	029b      	lsls	r3, r3, #10
 802cfc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 802cfcc:	431a      	orrs	r2, r3
 802cfce:	68fb      	ldr	r3, [r7, #12]
 802cfd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802cfd2:	2300      	movs	r3, #0
}
 802cfd4:	4618      	mov	r0, r3
 802cfd6:	371c      	adds	r7, #28
 802cfd8:	46bd      	mov	sp, r7
 802cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cfde:	4770      	bx	lr
 802cfe0:	00d8acbf 	.word	0x00d8acbf
 802cfe4:	00e4e1c0 	.word	0x00e4e1c0
 802cfe8:	00f42400 	.word	0x00f42400
 802cfec:	01067380 	.word	0x01067380
 802cff0:	011a499f 	.word	0x011a499f
 802cff4:	01312cff 	.word	0x01312cff
 802cff8:	014ca43f 	.word	0x014ca43f
 802cffc:	016e3600 	.word	0x016e3600
 802d000:	01a6ab1f 	.word	0x01a6ab1f
 802d004:	01e84800 	.word	0x01e84800

0802d008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d008:	b480      	push	{r7}
 802d00a:	b083      	sub	sp, #12
 802d00c:	af00      	add	r7, sp, #0
 802d00e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802d010:	687b      	ldr	r3, [r7, #4]
 802d012:	689b      	ldr	r3, [r3, #8]
 802d014:	f043 0201 	orr.w	r2, r3, #1
 802d018:	687b      	ldr	r3, [r7, #4]
 802d01a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d01c:	2300      	movs	r3, #0
}
 802d01e:	4618      	mov	r0, r3
 802d020:	370c      	adds	r7, #12
 802d022:	46bd      	mov	sp, r7
 802d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d028:	4770      	bx	lr

0802d02a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802d02a:	b480      	push	{r7}
 802d02c:	b083      	sub	sp, #12
 802d02e:	af00      	add	r7, sp, #0
 802d030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802d032:	687b      	ldr	r3, [r7, #4]
 802d034:	689b      	ldr	r3, [r3, #8]
 802d036:	f023 0201 	bic.w	r2, r3, #1
 802d03a:	687b      	ldr	r3, [r7, #4]
 802d03c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802d03e:	2300      	movs	r3, #0
}
 802d040:	4618      	mov	r0, r3
 802d042:	370c      	adds	r7, #12
 802d044:	46bd      	mov	sp, r7
 802d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d04a:	4770      	bx	lr

0802d04c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802d04c:	b580      	push	{r7, lr}
 802d04e:	b084      	sub	sp, #16
 802d050:	af00      	add	r7, sp, #0
 802d052:	6078      	str	r0, [r7, #4]
 802d054:	460b      	mov	r3, r1
 802d056:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802d058:	2300      	movs	r3, #0
 802d05a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802d05c:	687b      	ldr	r3, [r7, #4]
 802d05e:	68db      	ldr	r3, [r3, #12]
 802d060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802d064:	687b      	ldr	r3, [r7, #4]
 802d066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802d068:	78fb      	ldrb	r3, [r7, #3]
 802d06a:	2b01      	cmp	r3, #1
 802d06c:	d115      	bne.n	802d09a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802d06e:	687b      	ldr	r3, [r7, #4]
 802d070:	68db      	ldr	r3, [r3, #12]
 802d072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802d076:	687b      	ldr	r3, [r7, #4]
 802d078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d07a:	2001      	movs	r0, #1
 802d07c:	f7fa fb6c 	bl	8027758 <HAL_Delay>
      ms++;
 802d080:	68fb      	ldr	r3, [r7, #12]
 802d082:	3301      	adds	r3, #1
 802d084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802d086:	6878      	ldr	r0, [r7, #4]
 802d088:	f001 fa45 	bl	802e516 <USB_GetMode>
 802d08c:	4603      	mov	r3, r0
 802d08e:	2b01      	cmp	r3, #1
 802d090:	d01e      	beq.n	802d0d0 <USB_SetCurrentMode+0x84>
 802d092:	68fb      	ldr	r3, [r7, #12]
 802d094:	2b31      	cmp	r3, #49	; 0x31
 802d096:	d9f0      	bls.n	802d07a <USB_SetCurrentMode+0x2e>
 802d098:	e01a      	b.n	802d0d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802d09a:	78fb      	ldrb	r3, [r7, #3]
 802d09c:	2b00      	cmp	r3, #0
 802d09e:	d115      	bne.n	802d0cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802d0a0:	687b      	ldr	r3, [r7, #4]
 802d0a2:	68db      	ldr	r3, [r3, #12]
 802d0a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802d0a8:	687b      	ldr	r3, [r7, #4]
 802d0aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802d0ac:	2001      	movs	r0, #1
 802d0ae:	f7fa fb53 	bl	8027758 <HAL_Delay>
      ms++;
 802d0b2:	68fb      	ldr	r3, [r7, #12]
 802d0b4:	3301      	adds	r3, #1
 802d0b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802d0b8:	6878      	ldr	r0, [r7, #4]
 802d0ba:	f001 fa2c 	bl	802e516 <USB_GetMode>
 802d0be:	4603      	mov	r3, r0
 802d0c0:	2b00      	cmp	r3, #0
 802d0c2:	d005      	beq.n	802d0d0 <USB_SetCurrentMode+0x84>
 802d0c4:	68fb      	ldr	r3, [r7, #12]
 802d0c6:	2b31      	cmp	r3, #49	; 0x31
 802d0c8:	d9f0      	bls.n	802d0ac <USB_SetCurrentMode+0x60>
 802d0ca:	e001      	b.n	802d0d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802d0cc:	2301      	movs	r3, #1
 802d0ce:	e005      	b.n	802d0dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802d0d0:	68fb      	ldr	r3, [r7, #12]
 802d0d2:	2b32      	cmp	r3, #50	; 0x32
 802d0d4:	d101      	bne.n	802d0da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802d0d6:	2301      	movs	r3, #1
 802d0d8:	e000      	b.n	802d0dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802d0da:	2300      	movs	r3, #0
}
 802d0dc:	4618      	mov	r0, r3
 802d0de:	3710      	adds	r7, #16
 802d0e0:	46bd      	mov	sp, r7
 802d0e2:	bd80      	pop	{r7, pc}

0802d0e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802d0e4:	b084      	sub	sp, #16
 802d0e6:	b580      	push	{r7, lr}
 802d0e8:	b086      	sub	sp, #24
 802d0ea:	af00      	add	r7, sp, #0
 802d0ec:	6078      	str	r0, [r7, #4]
 802d0ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802d0f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802d0f6:	2300      	movs	r3, #0
 802d0f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d0fa:	687b      	ldr	r3, [r7, #4]
 802d0fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 802d0fe:	2300      	movs	r3, #0
 802d100:	613b      	str	r3, [r7, #16]
 802d102:	e009      	b.n	802d118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 802d104:	687a      	ldr	r2, [r7, #4]
 802d106:	693b      	ldr	r3, [r7, #16]
 802d108:	3340      	adds	r3, #64	; 0x40
 802d10a:	009b      	lsls	r3, r3, #2
 802d10c:	4413      	add	r3, r2
 802d10e:	2200      	movs	r2, #0
 802d110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 802d112:	693b      	ldr	r3, [r7, #16]
 802d114:	3301      	adds	r3, #1
 802d116:	613b      	str	r3, [r7, #16]
 802d118:	693b      	ldr	r3, [r7, #16]
 802d11a:	2b0e      	cmp	r3, #14
 802d11c:	d9f2      	bls.n	802d104 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 802d11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d120:	2b00      	cmp	r3, #0
 802d122:	d11c      	bne.n	802d15e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802d124:	68fb      	ldr	r3, [r7, #12]
 802d126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d12a:	685b      	ldr	r3, [r3, #4]
 802d12c:	68fa      	ldr	r2, [r7, #12]
 802d12e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d132:	f043 0302 	orr.w	r3, r3, #2
 802d136:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802d138:	687b      	ldr	r3, [r7, #4]
 802d13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d13c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802d140:	687b      	ldr	r3, [r7, #4]
 802d142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802d144:	687b      	ldr	r3, [r7, #4]
 802d146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d148:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802d150:	687b      	ldr	r3, [r7, #4]
 802d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d154:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802d158:	687b      	ldr	r3, [r7, #4]
 802d15a:	639a      	str	r2, [r3, #56]	; 0x38
 802d15c:	e00b      	b.n	802d176 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802d15e:	687b      	ldr	r3, [r7, #4]
 802d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d162:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 802d166:	687b      	ldr	r3, [r7, #4]
 802d168:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802d16a:	687b      	ldr	r3, [r7, #4]
 802d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802d16e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802d172:	687b      	ldr	r3, [r7, #4]
 802d174:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802d176:	68fb      	ldr	r3, [r7, #12]
 802d178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802d17c:	461a      	mov	r2, r3
 802d17e:	2300      	movs	r3, #0
 802d180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 802d182:	68fb      	ldr	r3, [r7, #12]
 802d184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d188:	4619      	mov	r1, r3
 802d18a:	68fb      	ldr	r3, [r7, #12]
 802d18c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d190:	461a      	mov	r2, r3
 802d192:	680b      	ldr	r3, [r1, #0]
 802d194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802d198:	2b01      	cmp	r3, #1
 802d19a:	d10c      	bne.n	802d1b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802d19e:	2b00      	cmp	r3, #0
 802d1a0:	d104      	bne.n	802d1ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 802d1a2:	2100      	movs	r1, #0
 802d1a4:	6878      	ldr	r0, [r7, #4]
 802d1a6:	f000 f965 	bl	802d474 <USB_SetDevSpeed>
 802d1aa:	e008      	b.n	802d1be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802d1ac:	2101      	movs	r1, #1
 802d1ae:	6878      	ldr	r0, [r7, #4]
 802d1b0:	f000 f960 	bl	802d474 <USB_SetDevSpeed>
 802d1b4:	e003      	b.n	802d1be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 802d1b6:	2103      	movs	r1, #3
 802d1b8:	6878      	ldr	r0, [r7, #4]
 802d1ba:	f000 f95b 	bl	802d474 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802d1be:	2110      	movs	r1, #16
 802d1c0:	6878      	ldr	r0, [r7, #4]
 802d1c2:	f000 f8f3 	bl	802d3ac <USB_FlushTxFifo>
 802d1c6:	4603      	mov	r3, r0
 802d1c8:	2b00      	cmp	r3, #0
 802d1ca:	d001      	beq.n	802d1d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802d1cc:	2301      	movs	r3, #1
 802d1ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802d1d0:	6878      	ldr	r0, [r7, #4]
 802d1d2:	f000 f91f 	bl	802d414 <USB_FlushRxFifo>
 802d1d6:	4603      	mov	r3, r0
 802d1d8:	2b00      	cmp	r3, #0
 802d1da:	d001      	beq.n	802d1e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802d1dc:	2301      	movs	r3, #1
 802d1de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 802d1e0:	68fb      	ldr	r3, [r7, #12]
 802d1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1e6:	461a      	mov	r2, r3
 802d1e8:	2300      	movs	r3, #0
 802d1ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802d1ec:	68fb      	ldr	r3, [r7, #12]
 802d1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1f2:	461a      	mov	r2, r3
 802d1f4:	2300      	movs	r3, #0
 802d1f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 802d1f8:	68fb      	ldr	r3, [r7, #12]
 802d1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d1fe:	461a      	mov	r2, r3
 802d200:	2300      	movs	r3, #0
 802d202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d204:	2300      	movs	r3, #0
 802d206:	613b      	str	r3, [r7, #16]
 802d208:	e043      	b.n	802d292 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d20a:	693b      	ldr	r3, [r7, #16]
 802d20c:	015a      	lsls	r2, r3, #5
 802d20e:	68fb      	ldr	r3, [r7, #12]
 802d210:	4413      	add	r3, r2
 802d212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d216:	681b      	ldr	r3, [r3, #0]
 802d218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d220:	d118      	bne.n	802d254 <USB_DevInit+0x170>
    {
      if (i == 0U)
 802d222:	693b      	ldr	r3, [r7, #16]
 802d224:	2b00      	cmp	r3, #0
 802d226:	d10a      	bne.n	802d23e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 802d228:	693b      	ldr	r3, [r7, #16]
 802d22a:	015a      	lsls	r2, r3, #5
 802d22c:	68fb      	ldr	r3, [r7, #12]
 802d22e:	4413      	add	r3, r2
 802d230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d234:	461a      	mov	r2, r3
 802d236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d23a:	6013      	str	r3, [r2, #0]
 802d23c:	e013      	b.n	802d266 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 802d23e:	693b      	ldr	r3, [r7, #16]
 802d240:	015a      	lsls	r2, r3, #5
 802d242:	68fb      	ldr	r3, [r7, #12]
 802d244:	4413      	add	r3, r2
 802d246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d24a:	461a      	mov	r2, r3
 802d24c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d250:	6013      	str	r3, [r2, #0]
 802d252:	e008      	b.n	802d266 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 802d254:	693b      	ldr	r3, [r7, #16]
 802d256:	015a      	lsls	r2, r3, #5
 802d258:	68fb      	ldr	r3, [r7, #12]
 802d25a:	4413      	add	r3, r2
 802d25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d260:	461a      	mov	r2, r3
 802d262:	2300      	movs	r3, #0
 802d264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 802d266:	693b      	ldr	r3, [r7, #16]
 802d268:	015a      	lsls	r2, r3, #5
 802d26a:	68fb      	ldr	r3, [r7, #12]
 802d26c:	4413      	add	r3, r2
 802d26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d272:	461a      	mov	r2, r3
 802d274:	2300      	movs	r3, #0
 802d276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 802d278:	693b      	ldr	r3, [r7, #16]
 802d27a:	015a      	lsls	r2, r3, #5
 802d27c:	68fb      	ldr	r3, [r7, #12]
 802d27e:	4413      	add	r3, r2
 802d280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d284:	461a      	mov	r2, r3
 802d286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d28a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d28c:	693b      	ldr	r3, [r7, #16]
 802d28e:	3301      	adds	r3, #1
 802d290:	613b      	str	r3, [r7, #16]
 802d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d294:	693a      	ldr	r2, [r7, #16]
 802d296:	429a      	cmp	r2, r3
 802d298:	d3b7      	bcc.n	802d20a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d29a:	2300      	movs	r3, #0
 802d29c:	613b      	str	r3, [r7, #16]
 802d29e:	e043      	b.n	802d328 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d2a0:	693b      	ldr	r3, [r7, #16]
 802d2a2:	015a      	lsls	r2, r3, #5
 802d2a4:	68fb      	ldr	r3, [r7, #12]
 802d2a6:	4413      	add	r3, r2
 802d2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2ac:	681b      	ldr	r3, [r3, #0]
 802d2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d2b6:	d118      	bne.n	802d2ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 802d2b8:	693b      	ldr	r3, [r7, #16]
 802d2ba:	2b00      	cmp	r3, #0
 802d2bc:	d10a      	bne.n	802d2d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802d2be:	693b      	ldr	r3, [r7, #16]
 802d2c0:	015a      	lsls	r2, r3, #5
 802d2c2:	68fb      	ldr	r3, [r7, #12]
 802d2c4:	4413      	add	r3, r2
 802d2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2ca:	461a      	mov	r2, r3
 802d2cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802d2d0:	6013      	str	r3, [r2, #0]
 802d2d2:	e013      	b.n	802d2fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 802d2d4:	693b      	ldr	r3, [r7, #16]
 802d2d6:	015a      	lsls	r2, r3, #5
 802d2d8:	68fb      	ldr	r3, [r7, #12]
 802d2da:	4413      	add	r3, r2
 802d2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2e0:	461a      	mov	r2, r3
 802d2e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 802d2e6:	6013      	str	r3, [r2, #0]
 802d2e8:	e008      	b.n	802d2fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802d2ea:	693b      	ldr	r3, [r7, #16]
 802d2ec:	015a      	lsls	r2, r3, #5
 802d2ee:	68fb      	ldr	r3, [r7, #12]
 802d2f0:	4413      	add	r3, r2
 802d2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d2f6:	461a      	mov	r2, r3
 802d2f8:	2300      	movs	r3, #0
 802d2fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 802d2fc:	693b      	ldr	r3, [r7, #16]
 802d2fe:	015a      	lsls	r2, r3, #5
 802d300:	68fb      	ldr	r3, [r7, #12]
 802d302:	4413      	add	r3, r2
 802d304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d308:	461a      	mov	r2, r3
 802d30a:	2300      	movs	r3, #0
 802d30c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 802d30e:	693b      	ldr	r3, [r7, #16]
 802d310:	015a      	lsls	r2, r3, #5
 802d312:	68fb      	ldr	r3, [r7, #12]
 802d314:	4413      	add	r3, r2
 802d316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d31a:	461a      	mov	r2, r3
 802d31c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802d320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802d322:	693b      	ldr	r3, [r7, #16]
 802d324:	3301      	adds	r3, #1
 802d326:	613b      	str	r3, [r7, #16]
 802d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d32a:	693a      	ldr	r2, [r7, #16]
 802d32c:	429a      	cmp	r2, r3
 802d32e:	d3b7      	bcc.n	802d2a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 802d330:	68fb      	ldr	r3, [r7, #12]
 802d332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d336:	691b      	ldr	r3, [r3, #16]
 802d338:	68fa      	ldr	r2, [r7, #12]
 802d33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802d33e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802d344:	687b      	ldr	r3, [r7, #4]
 802d346:	2200      	movs	r2, #0
 802d348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 802d34a:	687b      	ldr	r3, [r7, #4]
 802d34c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 802d350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802d354:	2b00      	cmp	r3, #0
 802d356:	d105      	bne.n	802d364 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802d358:	687b      	ldr	r3, [r7, #4]
 802d35a:	699b      	ldr	r3, [r3, #24]
 802d35c:	f043 0210 	orr.w	r2, r3, #16
 802d360:	687b      	ldr	r3, [r7, #4]
 802d362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 802d364:	687b      	ldr	r3, [r7, #4]
 802d366:	699a      	ldr	r2, [r3, #24]
 802d368:	4b0f      	ldr	r3, [pc, #60]	; (802d3a8 <USB_DevInit+0x2c4>)
 802d36a:	4313      	orrs	r3, r2
 802d36c:	687a      	ldr	r2, [r7, #4]
 802d36e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 802d370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802d372:	2b00      	cmp	r3, #0
 802d374:	d005      	beq.n	802d382 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 802d376:	687b      	ldr	r3, [r7, #4]
 802d378:	699b      	ldr	r3, [r3, #24]
 802d37a:	f043 0208 	orr.w	r2, r3, #8
 802d37e:	687b      	ldr	r3, [r7, #4]
 802d380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 802d382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802d384:	2b01      	cmp	r3, #1
 802d386:	d107      	bne.n	802d398 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 802d388:	687b      	ldr	r3, [r7, #4]
 802d38a:	699b      	ldr	r3, [r3, #24]
 802d38c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d390:	f043 0304 	orr.w	r3, r3, #4
 802d394:	687a      	ldr	r2, [r7, #4]
 802d396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 802d398:	7dfb      	ldrb	r3, [r7, #23]
}
 802d39a:	4618      	mov	r0, r3
 802d39c:	3718      	adds	r7, #24
 802d39e:	46bd      	mov	sp, r7
 802d3a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802d3a4:	b004      	add	sp, #16
 802d3a6:	4770      	bx	lr
 802d3a8:	803c3800 	.word	0x803c3800

0802d3ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802d3ac:	b480      	push	{r7}
 802d3ae:	b085      	sub	sp, #20
 802d3b0:	af00      	add	r7, sp, #0
 802d3b2:	6078      	str	r0, [r7, #4]
 802d3b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802d3b6:	2300      	movs	r3, #0
 802d3b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d3ba:	68fb      	ldr	r3, [r7, #12]
 802d3bc:	3301      	adds	r3, #1
 802d3be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d3c0:	68fb      	ldr	r3, [r7, #12]
 802d3c2:	4a13      	ldr	r2, [pc, #76]	; (802d410 <USB_FlushTxFifo+0x64>)
 802d3c4:	4293      	cmp	r3, r2
 802d3c6:	d901      	bls.n	802d3cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802d3c8:	2303      	movs	r3, #3
 802d3ca:	e01b      	b.n	802d404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d3cc:	687b      	ldr	r3, [r7, #4]
 802d3ce:	691b      	ldr	r3, [r3, #16]
 802d3d0:	2b00      	cmp	r3, #0
 802d3d2:	daf2      	bge.n	802d3ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802d3d4:	2300      	movs	r3, #0
 802d3d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802d3d8:	683b      	ldr	r3, [r7, #0]
 802d3da:	019b      	lsls	r3, r3, #6
 802d3dc:	f043 0220 	orr.w	r2, r3, #32
 802d3e0:	687b      	ldr	r3, [r7, #4]
 802d3e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d3e4:	68fb      	ldr	r3, [r7, #12]
 802d3e6:	3301      	adds	r3, #1
 802d3e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d3ea:	68fb      	ldr	r3, [r7, #12]
 802d3ec:	4a08      	ldr	r2, [pc, #32]	; (802d410 <USB_FlushTxFifo+0x64>)
 802d3ee:	4293      	cmp	r3, r2
 802d3f0:	d901      	bls.n	802d3f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802d3f2:	2303      	movs	r3, #3
 802d3f4:	e006      	b.n	802d404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802d3f6:	687b      	ldr	r3, [r7, #4]
 802d3f8:	691b      	ldr	r3, [r3, #16]
 802d3fa:	f003 0320 	and.w	r3, r3, #32
 802d3fe:	2b20      	cmp	r3, #32
 802d400:	d0f0      	beq.n	802d3e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802d402:	2300      	movs	r3, #0
}
 802d404:	4618      	mov	r0, r3
 802d406:	3714      	adds	r7, #20
 802d408:	46bd      	mov	sp, r7
 802d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d40e:	4770      	bx	lr
 802d410:	00030d40 	.word	0x00030d40

0802d414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802d414:	b480      	push	{r7}
 802d416:	b085      	sub	sp, #20
 802d418:	af00      	add	r7, sp, #0
 802d41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802d41c:	2300      	movs	r3, #0
 802d41e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802d420:	68fb      	ldr	r3, [r7, #12]
 802d422:	3301      	adds	r3, #1
 802d424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d426:	68fb      	ldr	r3, [r7, #12]
 802d428:	4a11      	ldr	r2, [pc, #68]	; (802d470 <USB_FlushRxFifo+0x5c>)
 802d42a:	4293      	cmp	r3, r2
 802d42c:	d901      	bls.n	802d432 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802d42e:	2303      	movs	r3, #3
 802d430:	e018      	b.n	802d464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802d432:	687b      	ldr	r3, [r7, #4]
 802d434:	691b      	ldr	r3, [r3, #16]
 802d436:	2b00      	cmp	r3, #0
 802d438:	daf2      	bge.n	802d420 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802d43a:	2300      	movs	r3, #0
 802d43c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802d43e:	687b      	ldr	r3, [r7, #4]
 802d440:	2210      	movs	r2, #16
 802d442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802d444:	68fb      	ldr	r3, [r7, #12]
 802d446:	3301      	adds	r3, #1
 802d448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802d44a:	68fb      	ldr	r3, [r7, #12]
 802d44c:	4a08      	ldr	r2, [pc, #32]	; (802d470 <USB_FlushRxFifo+0x5c>)
 802d44e:	4293      	cmp	r3, r2
 802d450:	d901      	bls.n	802d456 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802d452:	2303      	movs	r3, #3
 802d454:	e006      	b.n	802d464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802d456:	687b      	ldr	r3, [r7, #4]
 802d458:	691b      	ldr	r3, [r3, #16]
 802d45a:	f003 0310 	and.w	r3, r3, #16
 802d45e:	2b10      	cmp	r3, #16
 802d460:	d0f0      	beq.n	802d444 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802d462:	2300      	movs	r3, #0
}
 802d464:	4618      	mov	r0, r3
 802d466:	3714      	adds	r7, #20
 802d468:	46bd      	mov	sp, r7
 802d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d46e:	4770      	bx	lr
 802d470:	00030d40 	.word	0x00030d40

0802d474 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 802d474:	b480      	push	{r7}
 802d476:	b085      	sub	sp, #20
 802d478:	af00      	add	r7, sp, #0
 802d47a:	6078      	str	r0, [r7, #4]
 802d47c:	460b      	mov	r3, r1
 802d47e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d480:	687b      	ldr	r3, [r7, #4]
 802d482:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 802d484:	68fb      	ldr	r3, [r7, #12]
 802d486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d48a:	681a      	ldr	r2, [r3, #0]
 802d48c:	78fb      	ldrb	r3, [r7, #3]
 802d48e:	68f9      	ldr	r1, [r7, #12]
 802d490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d494:	4313      	orrs	r3, r2
 802d496:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 802d498:	2300      	movs	r3, #0
}
 802d49a:	4618      	mov	r0, r3
 802d49c:	3714      	adds	r7, #20
 802d49e:	46bd      	mov	sp, r7
 802d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4a4:	4770      	bx	lr

0802d4a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802d4a6:	b480      	push	{r7}
 802d4a8:	b087      	sub	sp, #28
 802d4aa:	af00      	add	r7, sp, #0
 802d4ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4ae:	687b      	ldr	r3, [r7, #4]
 802d4b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 802d4b2:	693b      	ldr	r3, [r7, #16]
 802d4b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d4b8:	689b      	ldr	r3, [r3, #8]
 802d4ba:	f003 0306 	and.w	r3, r3, #6
 802d4be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 802d4c0:	68fb      	ldr	r3, [r7, #12]
 802d4c2:	2b00      	cmp	r3, #0
 802d4c4:	d102      	bne.n	802d4cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 802d4c6:	2300      	movs	r3, #0
 802d4c8:	75fb      	strb	r3, [r7, #23]
 802d4ca:	e00a      	b.n	802d4e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 802d4cc:	68fb      	ldr	r3, [r7, #12]
 802d4ce:	2b02      	cmp	r3, #2
 802d4d0:	d002      	beq.n	802d4d8 <USB_GetDevSpeed+0x32>
 802d4d2:	68fb      	ldr	r3, [r7, #12]
 802d4d4:	2b06      	cmp	r3, #6
 802d4d6:	d102      	bne.n	802d4de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 802d4d8:	2302      	movs	r3, #2
 802d4da:	75fb      	strb	r3, [r7, #23]
 802d4dc:	e001      	b.n	802d4e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 802d4de:	230f      	movs	r3, #15
 802d4e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 802d4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 802d4e4:	4618      	mov	r0, r3
 802d4e6:	371c      	adds	r7, #28
 802d4e8:	46bd      	mov	sp, r7
 802d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d4ee:	4770      	bx	lr

0802d4f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d4f0:	b480      	push	{r7}
 802d4f2:	b085      	sub	sp, #20
 802d4f4:	af00      	add	r7, sp, #0
 802d4f6:	6078      	str	r0, [r7, #4]
 802d4f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d4fa:	687b      	ldr	r3, [r7, #4]
 802d4fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d4fe:	683b      	ldr	r3, [r7, #0]
 802d500:	781b      	ldrb	r3, [r3, #0]
 802d502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802d504:	683b      	ldr	r3, [r7, #0]
 802d506:	785b      	ldrb	r3, [r3, #1]
 802d508:	2b01      	cmp	r3, #1
 802d50a:	d13a      	bne.n	802d582 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 802d50c:	68fb      	ldr	r3, [r7, #12]
 802d50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d512:	69da      	ldr	r2, [r3, #28]
 802d514:	683b      	ldr	r3, [r7, #0]
 802d516:	781b      	ldrb	r3, [r3, #0]
 802d518:	f003 030f 	and.w	r3, r3, #15
 802d51c:	2101      	movs	r1, #1
 802d51e:	fa01 f303 	lsl.w	r3, r1, r3
 802d522:	b29b      	uxth	r3, r3
 802d524:	68f9      	ldr	r1, [r7, #12]
 802d526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d52a:	4313      	orrs	r3, r2
 802d52c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 802d52e:	68bb      	ldr	r3, [r7, #8]
 802d530:	015a      	lsls	r2, r3, #5
 802d532:	68fb      	ldr	r3, [r7, #12]
 802d534:	4413      	add	r3, r2
 802d536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d53a:	681b      	ldr	r3, [r3, #0]
 802d53c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d540:	2b00      	cmp	r3, #0
 802d542:	d155      	bne.n	802d5f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d544:	68bb      	ldr	r3, [r7, #8]
 802d546:	015a      	lsls	r2, r3, #5
 802d548:	68fb      	ldr	r3, [r7, #12]
 802d54a:	4413      	add	r3, r2
 802d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d550:	681a      	ldr	r2, [r3, #0]
 802d552:	683b      	ldr	r3, [r7, #0]
 802d554:	68db      	ldr	r3, [r3, #12]
 802d556:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d55a:	683b      	ldr	r3, [r7, #0]
 802d55c:	791b      	ldrb	r3, [r3, #4]
 802d55e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d560:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 802d562:	68bb      	ldr	r3, [r7, #8]
 802d564:	059b      	lsls	r3, r3, #22
 802d566:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 802d568:	4313      	orrs	r3, r2
 802d56a:	68ba      	ldr	r2, [r7, #8]
 802d56c:	0151      	lsls	r1, r2, #5
 802d56e:	68fa      	ldr	r2, [r7, #12]
 802d570:	440a      	add	r2, r1
 802d572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d57a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d57e:	6013      	str	r3, [r2, #0]
 802d580:	e036      	b.n	802d5f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 802d582:	68fb      	ldr	r3, [r7, #12]
 802d584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d588:	69da      	ldr	r2, [r3, #28]
 802d58a:	683b      	ldr	r3, [r7, #0]
 802d58c:	781b      	ldrb	r3, [r3, #0]
 802d58e:	f003 030f 	and.w	r3, r3, #15
 802d592:	2101      	movs	r1, #1
 802d594:	fa01 f303 	lsl.w	r3, r1, r3
 802d598:	041b      	lsls	r3, r3, #16
 802d59a:	68f9      	ldr	r1, [r7, #12]
 802d59c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d5a0:	4313      	orrs	r3, r2
 802d5a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 802d5a4:	68bb      	ldr	r3, [r7, #8]
 802d5a6:	015a      	lsls	r2, r3, #5
 802d5a8:	68fb      	ldr	r3, [r7, #12]
 802d5aa:	4413      	add	r3, r2
 802d5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5b0:	681b      	ldr	r3, [r3, #0]
 802d5b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d5b6:	2b00      	cmp	r3, #0
 802d5b8:	d11a      	bne.n	802d5f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d5ba:	68bb      	ldr	r3, [r7, #8]
 802d5bc:	015a      	lsls	r2, r3, #5
 802d5be:	68fb      	ldr	r3, [r7, #12]
 802d5c0:	4413      	add	r3, r2
 802d5c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d5c6:	681a      	ldr	r2, [r3, #0]
 802d5c8:	683b      	ldr	r3, [r7, #0]
 802d5ca:	68db      	ldr	r3, [r3, #12]
 802d5cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 802d5d0:	683b      	ldr	r3, [r7, #0]
 802d5d2:	791b      	ldrb	r3, [r3, #4]
 802d5d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 802d5d6:	430b      	orrs	r3, r1
 802d5d8:	4313      	orrs	r3, r2
 802d5da:	68ba      	ldr	r2, [r7, #8]
 802d5dc:	0151      	lsls	r1, r2, #5
 802d5de:	68fa      	ldr	r2, [r7, #12]
 802d5e0:	440a      	add	r2, r1
 802d5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d5e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d5ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802d5ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 802d5f0:	2300      	movs	r3, #0
}
 802d5f2:	4618      	mov	r0, r3
 802d5f4:	3714      	adds	r7, #20
 802d5f6:	46bd      	mov	sp, r7
 802d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5fc:	4770      	bx	lr
	...

0802d600 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802d600:	b480      	push	{r7}
 802d602:	b085      	sub	sp, #20
 802d604:	af00      	add	r7, sp, #0
 802d606:	6078      	str	r0, [r7, #4]
 802d608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d60a:	687b      	ldr	r3, [r7, #4]
 802d60c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802d60e:	683b      	ldr	r3, [r7, #0]
 802d610:	781b      	ldrb	r3, [r3, #0]
 802d612:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 802d614:	683b      	ldr	r3, [r7, #0]
 802d616:	785b      	ldrb	r3, [r3, #1]
 802d618:	2b01      	cmp	r3, #1
 802d61a:	d161      	bne.n	802d6e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802d61c:	68bb      	ldr	r3, [r7, #8]
 802d61e:	015a      	lsls	r2, r3, #5
 802d620:	68fb      	ldr	r3, [r7, #12]
 802d622:	4413      	add	r3, r2
 802d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d628:	681b      	ldr	r3, [r3, #0]
 802d62a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d62e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d632:	d11f      	bne.n	802d674 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 802d634:	68bb      	ldr	r3, [r7, #8]
 802d636:	015a      	lsls	r2, r3, #5
 802d638:	68fb      	ldr	r3, [r7, #12]
 802d63a:	4413      	add	r3, r2
 802d63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d640:	681b      	ldr	r3, [r3, #0]
 802d642:	68ba      	ldr	r2, [r7, #8]
 802d644:	0151      	lsls	r1, r2, #5
 802d646:	68fa      	ldr	r2, [r7, #12]
 802d648:	440a      	add	r2, r1
 802d64a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d64e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d652:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 802d654:	68bb      	ldr	r3, [r7, #8]
 802d656:	015a      	lsls	r2, r3, #5
 802d658:	68fb      	ldr	r3, [r7, #12]
 802d65a:	4413      	add	r3, r2
 802d65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d660:	681b      	ldr	r3, [r3, #0]
 802d662:	68ba      	ldr	r2, [r7, #8]
 802d664:	0151      	lsls	r1, r2, #5
 802d666:	68fa      	ldr	r2, [r7, #12]
 802d668:	440a      	add	r2, r1
 802d66a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d66e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d674:	68fb      	ldr	r3, [r7, #12]
 802d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d67c:	683b      	ldr	r3, [r7, #0]
 802d67e:	781b      	ldrb	r3, [r3, #0]
 802d680:	f003 030f 	and.w	r3, r3, #15
 802d684:	2101      	movs	r1, #1
 802d686:	fa01 f303 	lsl.w	r3, r1, r3
 802d68a:	b29b      	uxth	r3, r3
 802d68c:	43db      	mvns	r3, r3
 802d68e:	68f9      	ldr	r1, [r7, #12]
 802d690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d694:	4013      	ands	r3, r2
 802d696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 802d698:	68fb      	ldr	r3, [r7, #12]
 802d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d69e:	69da      	ldr	r2, [r3, #28]
 802d6a0:	683b      	ldr	r3, [r7, #0]
 802d6a2:	781b      	ldrb	r3, [r3, #0]
 802d6a4:	f003 030f 	and.w	r3, r3, #15
 802d6a8:	2101      	movs	r1, #1
 802d6aa:	fa01 f303 	lsl.w	r3, r1, r3
 802d6ae:	b29b      	uxth	r3, r3
 802d6b0:	43db      	mvns	r3, r3
 802d6b2:	68f9      	ldr	r1, [r7, #12]
 802d6b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d6b8:	4013      	ands	r3, r2
 802d6ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 802d6bc:	68bb      	ldr	r3, [r7, #8]
 802d6be:	015a      	lsls	r2, r3, #5
 802d6c0:	68fb      	ldr	r3, [r7, #12]
 802d6c2:	4413      	add	r3, r2
 802d6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6c8:	681a      	ldr	r2, [r3, #0]
 802d6ca:	68bb      	ldr	r3, [r7, #8]
 802d6cc:	0159      	lsls	r1, r3, #5
 802d6ce:	68fb      	ldr	r3, [r7, #12]
 802d6d0:	440b      	add	r3, r1
 802d6d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d6d6:	4619      	mov	r1, r3
 802d6d8:	4b35      	ldr	r3, [pc, #212]	; (802d7b0 <USB_DeactivateEndpoint+0x1b0>)
 802d6da:	4013      	ands	r3, r2
 802d6dc:	600b      	str	r3, [r1, #0]
 802d6de:	e060      	b.n	802d7a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802d6e0:	68bb      	ldr	r3, [r7, #8]
 802d6e2:	015a      	lsls	r2, r3, #5
 802d6e4:	68fb      	ldr	r3, [r7, #12]
 802d6e6:	4413      	add	r3, r2
 802d6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d6ec:	681b      	ldr	r3, [r3, #0]
 802d6ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802d6f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802d6f6:	d11f      	bne.n	802d738 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802d6f8:	68bb      	ldr	r3, [r7, #8]
 802d6fa:	015a      	lsls	r2, r3, #5
 802d6fc:	68fb      	ldr	r3, [r7, #12]
 802d6fe:	4413      	add	r3, r2
 802d700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d704:	681b      	ldr	r3, [r3, #0]
 802d706:	68ba      	ldr	r2, [r7, #8]
 802d708:	0151      	lsls	r1, r2, #5
 802d70a:	68fa      	ldr	r2, [r7, #12]
 802d70c:	440a      	add	r2, r1
 802d70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802d716:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 802d718:	68bb      	ldr	r3, [r7, #8]
 802d71a:	015a      	lsls	r2, r3, #5
 802d71c:	68fb      	ldr	r3, [r7, #12]
 802d71e:	4413      	add	r3, r2
 802d720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d724:	681b      	ldr	r3, [r3, #0]
 802d726:	68ba      	ldr	r2, [r7, #8]
 802d728:	0151      	lsls	r1, r2, #5
 802d72a:	68fa      	ldr	r2, [r7, #12]
 802d72c:	440a      	add	r2, r1
 802d72e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802d732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802d736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d738:	68fb      	ldr	r3, [r7, #12]
 802d73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d73e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802d740:	683b      	ldr	r3, [r7, #0]
 802d742:	781b      	ldrb	r3, [r3, #0]
 802d744:	f003 030f 	and.w	r3, r3, #15
 802d748:	2101      	movs	r1, #1
 802d74a:	fa01 f303 	lsl.w	r3, r1, r3
 802d74e:	041b      	lsls	r3, r3, #16
 802d750:	43db      	mvns	r3, r3
 802d752:	68f9      	ldr	r1, [r7, #12]
 802d754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d758:	4013      	ands	r3, r2
 802d75a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 802d75c:	68fb      	ldr	r3, [r7, #12]
 802d75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d762:	69da      	ldr	r2, [r3, #28]
 802d764:	683b      	ldr	r3, [r7, #0]
 802d766:	781b      	ldrb	r3, [r3, #0]
 802d768:	f003 030f 	and.w	r3, r3, #15
 802d76c:	2101      	movs	r1, #1
 802d76e:	fa01 f303 	lsl.w	r3, r1, r3
 802d772:	041b      	lsls	r3, r3, #16
 802d774:	43db      	mvns	r3, r3
 802d776:	68f9      	ldr	r1, [r7, #12]
 802d778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802d77c:	4013      	ands	r3, r2
 802d77e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 802d780:	68bb      	ldr	r3, [r7, #8]
 802d782:	015a      	lsls	r2, r3, #5
 802d784:	68fb      	ldr	r3, [r7, #12]
 802d786:	4413      	add	r3, r2
 802d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d78c:	681a      	ldr	r2, [r3, #0]
 802d78e:	68bb      	ldr	r3, [r7, #8]
 802d790:	0159      	lsls	r1, r3, #5
 802d792:	68fb      	ldr	r3, [r7, #12]
 802d794:	440b      	add	r3, r1
 802d796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802d79a:	4619      	mov	r1, r3
 802d79c:	4b05      	ldr	r3, [pc, #20]	; (802d7b4 <USB_DeactivateEndpoint+0x1b4>)
 802d79e:	4013      	ands	r3, r2
 802d7a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 802d7a2:	2300      	movs	r3, #0
}
 802d7a4:	4618      	mov	r0, r3
 802d7a6:	3714      	adds	r7, #20
 802d7a8:	46bd      	mov	sp, r7
 802d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d7ae:	4770      	bx	lr
 802d7b0:	ec337800 	.word	0xec337800
 802d7b4:	eff37800 	.word	0xeff37800

0802d7b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802d7b8:	b580      	push	{r7, lr}
 802d7ba:	b08a      	sub	sp, #40	; 0x28
 802d7bc:	af02      	add	r7, sp, #8
 802d7be:	60f8      	str	r0, [r7, #12]
 802d7c0:	60b9      	str	r1, [r7, #8]
 802d7c2:	4613      	mov	r3, r2
 802d7c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802d7c6:	68fb      	ldr	r3, [r7, #12]
 802d7c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 802d7ca:	68bb      	ldr	r3, [r7, #8]
 802d7cc:	781b      	ldrb	r3, [r3, #0]
 802d7ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 802d7d0:	68bb      	ldr	r3, [r7, #8]
 802d7d2:	785b      	ldrb	r3, [r3, #1]
 802d7d4:	2b01      	cmp	r3, #1
 802d7d6:	f040 815c 	bne.w	802da92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802d7da:	68bb      	ldr	r3, [r7, #8]
 802d7dc:	699b      	ldr	r3, [r3, #24]
 802d7de:	2b00      	cmp	r3, #0
 802d7e0:	d132      	bne.n	802d848 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d7e2:	69bb      	ldr	r3, [r7, #24]
 802d7e4:	015a      	lsls	r2, r3, #5
 802d7e6:	69fb      	ldr	r3, [r7, #28]
 802d7e8:	4413      	add	r3, r2
 802d7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d7ee:	691b      	ldr	r3, [r3, #16]
 802d7f0:	69ba      	ldr	r2, [r7, #24]
 802d7f2:	0151      	lsls	r1, r2, #5
 802d7f4:	69fa      	ldr	r2, [r7, #28]
 802d7f6:	440a      	add	r2, r1
 802d7f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d7fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802d806:	69bb      	ldr	r3, [r7, #24]
 802d808:	015a      	lsls	r2, r3, #5
 802d80a:	69fb      	ldr	r3, [r7, #28]
 802d80c:	4413      	add	r3, r2
 802d80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d812:	691b      	ldr	r3, [r3, #16]
 802d814:	69ba      	ldr	r2, [r7, #24]
 802d816:	0151      	lsls	r1, r2, #5
 802d818:	69fa      	ldr	r2, [r7, #28]
 802d81a:	440a      	add	r2, r1
 802d81c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802d824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d826:	69bb      	ldr	r3, [r7, #24]
 802d828:	015a      	lsls	r2, r3, #5
 802d82a:	69fb      	ldr	r3, [r7, #28]
 802d82c:	4413      	add	r3, r2
 802d82e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d832:	691b      	ldr	r3, [r3, #16]
 802d834:	69ba      	ldr	r2, [r7, #24]
 802d836:	0151      	lsls	r1, r2, #5
 802d838:	69fa      	ldr	r2, [r7, #28]
 802d83a:	440a      	add	r2, r1
 802d83c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d840:	0cdb      	lsrs	r3, r3, #19
 802d842:	04db      	lsls	r3, r3, #19
 802d844:	6113      	str	r3, [r2, #16]
 802d846:	e074      	b.n	802d932 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802d848:	69bb      	ldr	r3, [r7, #24]
 802d84a:	015a      	lsls	r2, r3, #5
 802d84c:	69fb      	ldr	r3, [r7, #28]
 802d84e:	4413      	add	r3, r2
 802d850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d854:	691b      	ldr	r3, [r3, #16]
 802d856:	69ba      	ldr	r2, [r7, #24]
 802d858:	0151      	lsls	r1, r2, #5
 802d85a:	69fa      	ldr	r2, [r7, #28]
 802d85c:	440a      	add	r2, r1
 802d85e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d862:	0cdb      	lsrs	r3, r3, #19
 802d864:	04db      	lsls	r3, r3, #19
 802d866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802d868:	69bb      	ldr	r3, [r7, #24]
 802d86a:	015a      	lsls	r2, r3, #5
 802d86c:	69fb      	ldr	r3, [r7, #28]
 802d86e:	4413      	add	r3, r2
 802d870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d874:	691b      	ldr	r3, [r3, #16]
 802d876:	69ba      	ldr	r2, [r7, #24]
 802d878:	0151      	lsls	r1, r2, #5
 802d87a:	69fa      	ldr	r2, [r7, #28]
 802d87c:	440a      	add	r2, r1
 802d87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d882:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802d886:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802d88a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d88c:	69bb      	ldr	r3, [r7, #24]
 802d88e:	015a      	lsls	r2, r3, #5
 802d890:	69fb      	ldr	r3, [r7, #28]
 802d892:	4413      	add	r3, r2
 802d894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d898:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 802d89a:	68bb      	ldr	r3, [r7, #8]
 802d89c:	6999      	ldr	r1, [r3, #24]
 802d89e:	68bb      	ldr	r3, [r7, #8]
 802d8a0:	68db      	ldr	r3, [r3, #12]
 802d8a2:	440b      	add	r3, r1
 802d8a4:	1e59      	subs	r1, r3, #1
 802d8a6:	68bb      	ldr	r3, [r7, #8]
 802d8a8:	68db      	ldr	r3, [r3, #12]
 802d8aa:	fbb1 f3f3 	udiv	r3, r1, r3
 802d8ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 802d8b0:	4b9d      	ldr	r3, [pc, #628]	; (802db28 <USB_EPStartXfer+0x370>)
 802d8b2:	400b      	ands	r3, r1
 802d8b4:	69b9      	ldr	r1, [r7, #24]
 802d8b6:	0148      	lsls	r0, r1, #5
 802d8b8:	69f9      	ldr	r1, [r7, #28]
 802d8ba:	4401      	add	r1, r0
 802d8bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d8c0:	4313      	orrs	r3, r2
 802d8c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802d8c4:	69bb      	ldr	r3, [r7, #24]
 802d8c6:	015a      	lsls	r2, r3, #5
 802d8c8:	69fb      	ldr	r3, [r7, #28]
 802d8ca:	4413      	add	r3, r2
 802d8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8d0:	691a      	ldr	r2, [r3, #16]
 802d8d2:	68bb      	ldr	r3, [r7, #8]
 802d8d4:	699b      	ldr	r3, [r3, #24]
 802d8d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802d8da:	69b9      	ldr	r1, [r7, #24]
 802d8dc:	0148      	lsls	r0, r1, #5
 802d8de:	69f9      	ldr	r1, [r7, #28]
 802d8e0:	4401      	add	r1, r0
 802d8e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802d8e6:	4313      	orrs	r3, r2
 802d8e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 802d8ea:	68bb      	ldr	r3, [r7, #8]
 802d8ec:	791b      	ldrb	r3, [r3, #4]
 802d8ee:	2b01      	cmp	r3, #1
 802d8f0:	d11f      	bne.n	802d932 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 802d8f2:	69bb      	ldr	r3, [r7, #24]
 802d8f4:	015a      	lsls	r2, r3, #5
 802d8f6:	69fb      	ldr	r3, [r7, #28]
 802d8f8:	4413      	add	r3, r2
 802d8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d8fe:	691b      	ldr	r3, [r3, #16]
 802d900:	69ba      	ldr	r2, [r7, #24]
 802d902:	0151      	lsls	r1, r2, #5
 802d904:	69fa      	ldr	r2, [r7, #28]
 802d906:	440a      	add	r2, r1
 802d908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d90c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 802d910:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 802d912:	69bb      	ldr	r3, [r7, #24]
 802d914:	015a      	lsls	r2, r3, #5
 802d916:	69fb      	ldr	r3, [r7, #28]
 802d918:	4413      	add	r3, r2
 802d91a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d91e:	691b      	ldr	r3, [r3, #16]
 802d920:	69ba      	ldr	r2, [r7, #24]
 802d922:	0151      	lsls	r1, r2, #5
 802d924:	69fa      	ldr	r2, [r7, #28]
 802d926:	440a      	add	r2, r1
 802d928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d92c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d930:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 802d932:	79fb      	ldrb	r3, [r7, #7]
 802d934:	2b01      	cmp	r3, #1
 802d936:	d14b      	bne.n	802d9d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802d938:	68bb      	ldr	r3, [r7, #8]
 802d93a:	695b      	ldr	r3, [r3, #20]
 802d93c:	2b00      	cmp	r3, #0
 802d93e:	d009      	beq.n	802d954 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802d940:	69bb      	ldr	r3, [r7, #24]
 802d942:	015a      	lsls	r2, r3, #5
 802d944:	69fb      	ldr	r3, [r7, #28]
 802d946:	4413      	add	r3, r2
 802d948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d94c:	461a      	mov	r2, r3
 802d94e:	68bb      	ldr	r3, [r7, #8]
 802d950:	695b      	ldr	r3, [r3, #20]
 802d952:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 802d954:	68bb      	ldr	r3, [r7, #8]
 802d956:	791b      	ldrb	r3, [r3, #4]
 802d958:	2b01      	cmp	r3, #1
 802d95a:	d128      	bne.n	802d9ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802d95c:	69fb      	ldr	r3, [r7, #28]
 802d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802d962:	689b      	ldr	r3, [r3, #8]
 802d964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d968:	2b00      	cmp	r3, #0
 802d96a:	d110      	bne.n	802d98e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802d96c:	69bb      	ldr	r3, [r7, #24]
 802d96e:	015a      	lsls	r2, r3, #5
 802d970:	69fb      	ldr	r3, [r7, #28]
 802d972:	4413      	add	r3, r2
 802d974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d978:	681b      	ldr	r3, [r3, #0]
 802d97a:	69ba      	ldr	r2, [r7, #24]
 802d97c:	0151      	lsls	r1, r2, #5
 802d97e:	69fa      	ldr	r2, [r7, #28]
 802d980:	440a      	add	r2, r1
 802d982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d986:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d98a:	6013      	str	r3, [r2, #0]
 802d98c:	e00f      	b.n	802d9ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802d98e:	69bb      	ldr	r3, [r7, #24]
 802d990:	015a      	lsls	r2, r3, #5
 802d992:	69fb      	ldr	r3, [r7, #28]
 802d994:	4413      	add	r3, r2
 802d996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d99a:	681b      	ldr	r3, [r3, #0]
 802d99c:	69ba      	ldr	r2, [r7, #24]
 802d99e:	0151      	lsls	r1, r2, #5
 802d9a0:	69fa      	ldr	r2, [r7, #28]
 802d9a2:	440a      	add	r2, r1
 802d9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802d9ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d9ae:	69bb      	ldr	r3, [r7, #24]
 802d9b0:	015a      	lsls	r2, r3, #5
 802d9b2:	69fb      	ldr	r3, [r7, #28]
 802d9b4:	4413      	add	r3, r2
 802d9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9ba:	681b      	ldr	r3, [r3, #0]
 802d9bc:	69ba      	ldr	r2, [r7, #24]
 802d9be:	0151      	lsls	r1, r2, #5
 802d9c0:	69fa      	ldr	r2, [r7, #28]
 802d9c2:	440a      	add	r2, r1
 802d9c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d9cc:	6013      	str	r3, [r2, #0]
 802d9ce:	e133      	b.n	802dc38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802d9d0:	69bb      	ldr	r3, [r7, #24]
 802d9d2:	015a      	lsls	r2, r3, #5
 802d9d4:	69fb      	ldr	r3, [r7, #28]
 802d9d6:	4413      	add	r3, r2
 802d9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802d9dc:	681b      	ldr	r3, [r3, #0]
 802d9de:	69ba      	ldr	r2, [r7, #24]
 802d9e0:	0151      	lsls	r1, r2, #5
 802d9e2:	69fa      	ldr	r2, [r7, #28]
 802d9e4:	440a      	add	r2, r1
 802d9e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802d9ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802d9ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 802d9f0:	68bb      	ldr	r3, [r7, #8]
 802d9f2:	791b      	ldrb	r3, [r3, #4]
 802d9f4:	2b01      	cmp	r3, #1
 802d9f6:	d015      	beq.n	802da24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 802d9f8:	68bb      	ldr	r3, [r7, #8]
 802d9fa:	699b      	ldr	r3, [r3, #24]
 802d9fc:	2b00      	cmp	r3, #0
 802d9fe:	f000 811b 	beq.w	802dc38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802da02:	69fb      	ldr	r3, [r7, #28]
 802da04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802da0a:	68bb      	ldr	r3, [r7, #8]
 802da0c:	781b      	ldrb	r3, [r3, #0]
 802da0e:	f003 030f 	and.w	r3, r3, #15
 802da12:	2101      	movs	r1, #1
 802da14:	fa01 f303 	lsl.w	r3, r1, r3
 802da18:	69f9      	ldr	r1, [r7, #28]
 802da1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802da1e:	4313      	orrs	r3, r2
 802da20:	634b      	str	r3, [r1, #52]	; 0x34
 802da22:	e109      	b.n	802dc38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802da24:	69fb      	ldr	r3, [r7, #28]
 802da26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802da2a:	689b      	ldr	r3, [r3, #8]
 802da2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802da30:	2b00      	cmp	r3, #0
 802da32:	d110      	bne.n	802da56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 802da34:	69bb      	ldr	r3, [r7, #24]
 802da36:	015a      	lsls	r2, r3, #5
 802da38:	69fb      	ldr	r3, [r7, #28]
 802da3a:	4413      	add	r3, r2
 802da3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da40:	681b      	ldr	r3, [r3, #0]
 802da42:	69ba      	ldr	r2, [r7, #24]
 802da44:	0151      	lsls	r1, r2, #5
 802da46:	69fa      	ldr	r2, [r7, #28]
 802da48:	440a      	add	r2, r1
 802da4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802da52:	6013      	str	r3, [r2, #0]
 802da54:	e00f      	b.n	802da76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 802da56:	69bb      	ldr	r3, [r7, #24]
 802da58:	015a      	lsls	r2, r3, #5
 802da5a:	69fb      	ldr	r3, [r7, #28]
 802da5c:	4413      	add	r3, r2
 802da5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802da62:	681b      	ldr	r3, [r3, #0]
 802da64:	69ba      	ldr	r2, [r7, #24]
 802da66:	0151      	lsls	r1, r2, #5
 802da68:	69fa      	ldr	r2, [r7, #28]
 802da6a:	440a      	add	r2, r1
 802da6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802da70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802da74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 802da76:	68bb      	ldr	r3, [r7, #8]
 802da78:	6919      	ldr	r1, [r3, #16]
 802da7a:	68bb      	ldr	r3, [r7, #8]
 802da7c:	781a      	ldrb	r2, [r3, #0]
 802da7e:	68bb      	ldr	r3, [r7, #8]
 802da80:	699b      	ldr	r3, [r3, #24]
 802da82:	b298      	uxth	r0, r3
 802da84:	79fb      	ldrb	r3, [r7, #7]
 802da86:	9300      	str	r3, [sp, #0]
 802da88:	4603      	mov	r3, r0
 802da8a:	68f8      	ldr	r0, [r7, #12]
 802da8c:	f000 fade 	bl	802e04c <USB_WritePacket>
 802da90:	e0d2      	b.n	802dc38 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802da92:	69bb      	ldr	r3, [r7, #24]
 802da94:	015a      	lsls	r2, r3, #5
 802da96:	69fb      	ldr	r3, [r7, #28]
 802da98:	4413      	add	r3, r2
 802da9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802da9e:	691b      	ldr	r3, [r3, #16]
 802daa0:	69ba      	ldr	r2, [r7, #24]
 802daa2:	0151      	lsls	r1, r2, #5
 802daa4:	69fa      	ldr	r2, [r7, #28]
 802daa6:	440a      	add	r2, r1
 802daa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802daac:	0cdb      	lsrs	r3, r3, #19
 802daae:	04db      	lsls	r3, r3, #19
 802dab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802dab2:	69bb      	ldr	r3, [r7, #24]
 802dab4:	015a      	lsls	r2, r3, #5
 802dab6:	69fb      	ldr	r3, [r7, #28]
 802dab8:	4413      	add	r3, r2
 802daba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dabe:	691b      	ldr	r3, [r3, #16]
 802dac0:	69ba      	ldr	r2, [r7, #24]
 802dac2:	0151      	lsls	r1, r2, #5
 802dac4:	69fa      	ldr	r2, [r7, #28]
 802dac6:	440a      	add	r2, r1
 802dac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dacc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dad4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 802dad6:	68bb      	ldr	r3, [r7, #8]
 802dad8:	699b      	ldr	r3, [r3, #24]
 802dada:	2b00      	cmp	r3, #0
 802dadc:	d126      	bne.n	802db2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 802dade:	69bb      	ldr	r3, [r7, #24]
 802dae0:	015a      	lsls	r2, r3, #5
 802dae2:	69fb      	ldr	r3, [r7, #28]
 802dae4:	4413      	add	r3, r2
 802dae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802daea:	691a      	ldr	r2, [r3, #16]
 802daec:	68bb      	ldr	r3, [r7, #8]
 802daee:	68db      	ldr	r3, [r3, #12]
 802daf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802daf4:	69b9      	ldr	r1, [r7, #24]
 802daf6:	0148      	lsls	r0, r1, #5
 802daf8:	69f9      	ldr	r1, [r7, #28]
 802dafa:	4401      	add	r1, r0
 802dafc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db00:	4313      	orrs	r3, r2
 802db02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802db04:	69bb      	ldr	r3, [r7, #24]
 802db06:	015a      	lsls	r2, r3, #5
 802db08:	69fb      	ldr	r3, [r7, #28]
 802db0a:	4413      	add	r3, r2
 802db0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db10:	691b      	ldr	r3, [r3, #16]
 802db12:	69ba      	ldr	r2, [r7, #24]
 802db14:	0151      	lsls	r1, r2, #5
 802db16:	69fa      	ldr	r2, [r7, #28]
 802db18:	440a      	add	r2, r1
 802db1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802db1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802db22:	6113      	str	r3, [r2, #16]
 802db24:	e03a      	b.n	802db9c <USB_EPStartXfer+0x3e4>
 802db26:	bf00      	nop
 802db28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 802db2c:	68bb      	ldr	r3, [r7, #8]
 802db2e:	699a      	ldr	r2, [r3, #24]
 802db30:	68bb      	ldr	r3, [r7, #8]
 802db32:	68db      	ldr	r3, [r3, #12]
 802db34:	4413      	add	r3, r2
 802db36:	1e5a      	subs	r2, r3, #1
 802db38:	68bb      	ldr	r3, [r7, #8]
 802db3a:	68db      	ldr	r3, [r3, #12]
 802db3c:	fbb2 f3f3 	udiv	r3, r2, r3
 802db40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 802db42:	68bb      	ldr	r3, [r7, #8]
 802db44:	68db      	ldr	r3, [r3, #12]
 802db46:	8afa      	ldrh	r2, [r7, #22]
 802db48:	fb03 f202 	mul.w	r2, r3, r2
 802db4c:	68bb      	ldr	r3, [r7, #8]
 802db4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 802db50:	69bb      	ldr	r3, [r7, #24]
 802db52:	015a      	lsls	r2, r3, #5
 802db54:	69fb      	ldr	r3, [r7, #28]
 802db56:	4413      	add	r3, r2
 802db58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db5c:	691a      	ldr	r2, [r3, #16]
 802db5e:	8afb      	ldrh	r3, [r7, #22]
 802db60:	04d9      	lsls	r1, r3, #19
 802db62:	4b38      	ldr	r3, [pc, #224]	; (802dc44 <USB_EPStartXfer+0x48c>)
 802db64:	400b      	ands	r3, r1
 802db66:	69b9      	ldr	r1, [r7, #24]
 802db68:	0148      	lsls	r0, r1, #5
 802db6a:	69f9      	ldr	r1, [r7, #28]
 802db6c:	4401      	add	r1, r0
 802db6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db72:	4313      	orrs	r3, r2
 802db74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 802db76:	69bb      	ldr	r3, [r7, #24]
 802db78:	015a      	lsls	r2, r3, #5
 802db7a:	69fb      	ldr	r3, [r7, #28]
 802db7c:	4413      	add	r3, r2
 802db7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802db82:	691a      	ldr	r2, [r3, #16]
 802db84:	68bb      	ldr	r3, [r7, #8]
 802db86:	69db      	ldr	r3, [r3, #28]
 802db88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802db8c:	69b9      	ldr	r1, [r7, #24]
 802db8e:	0148      	lsls	r0, r1, #5
 802db90:	69f9      	ldr	r1, [r7, #28]
 802db92:	4401      	add	r1, r0
 802db94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802db98:	4313      	orrs	r3, r2
 802db9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802db9c:	79fb      	ldrb	r3, [r7, #7]
 802db9e:	2b01      	cmp	r3, #1
 802dba0:	d10d      	bne.n	802dbbe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802dba2:	68bb      	ldr	r3, [r7, #8]
 802dba4:	691b      	ldr	r3, [r3, #16]
 802dba6:	2b00      	cmp	r3, #0
 802dba8:	d009      	beq.n	802dbbe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802dbaa:	68bb      	ldr	r3, [r7, #8]
 802dbac:	6919      	ldr	r1, [r3, #16]
 802dbae:	69bb      	ldr	r3, [r7, #24]
 802dbb0:	015a      	lsls	r2, r3, #5
 802dbb2:	69fb      	ldr	r3, [r7, #28]
 802dbb4:	4413      	add	r3, r2
 802dbb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbba:	460a      	mov	r2, r1
 802dbbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 802dbbe:	68bb      	ldr	r3, [r7, #8]
 802dbc0:	791b      	ldrb	r3, [r3, #4]
 802dbc2:	2b01      	cmp	r3, #1
 802dbc4:	d128      	bne.n	802dc18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 802dbc6:	69fb      	ldr	r3, [r7, #28]
 802dbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802dbcc:	689b      	ldr	r3, [r3, #8]
 802dbce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802dbd2:	2b00      	cmp	r3, #0
 802dbd4:	d110      	bne.n	802dbf8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 802dbd6:	69bb      	ldr	r3, [r7, #24]
 802dbd8:	015a      	lsls	r2, r3, #5
 802dbda:	69fb      	ldr	r3, [r7, #28]
 802dbdc:	4413      	add	r3, r2
 802dbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dbe2:	681b      	ldr	r3, [r3, #0]
 802dbe4:	69ba      	ldr	r2, [r7, #24]
 802dbe6:	0151      	lsls	r1, r2, #5
 802dbe8:	69fa      	ldr	r2, [r7, #28]
 802dbea:	440a      	add	r2, r1
 802dbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dbf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802dbf4:	6013      	str	r3, [r2, #0]
 802dbf6:	e00f      	b.n	802dc18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 802dbf8:	69bb      	ldr	r3, [r7, #24]
 802dbfa:	015a      	lsls	r2, r3, #5
 802dbfc:	69fb      	ldr	r3, [r7, #28]
 802dbfe:	4413      	add	r3, r2
 802dc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc04:	681b      	ldr	r3, [r3, #0]
 802dc06:	69ba      	ldr	r2, [r7, #24]
 802dc08:	0151      	lsls	r1, r2, #5
 802dc0a:	69fa      	ldr	r2, [r7, #28]
 802dc0c:	440a      	add	r2, r1
 802dc0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dc16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802dc18:	69bb      	ldr	r3, [r7, #24]
 802dc1a:	015a      	lsls	r2, r3, #5
 802dc1c:	69fb      	ldr	r3, [r7, #28]
 802dc1e:	4413      	add	r3, r2
 802dc20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dc24:	681b      	ldr	r3, [r3, #0]
 802dc26:	69ba      	ldr	r2, [r7, #24]
 802dc28:	0151      	lsls	r1, r2, #5
 802dc2a:	69fa      	ldr	r2, [r7, #28]
 802dc2c:	440a      	add	r2, r1
 802dc2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dc32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802dc36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802dc38:	2300      	movs	r3, #0
}
 802dc3a:	4618      	mov	r0, r3
 802dc3c:	3720      	adds	r7, #32
 802dc3e:	46bd      	mov	sp, r7
 802dc40:	bd80      	pop	{r7, pc}
 802dc42:	bf00      	nop
 802dc44:	1ff80000 	.word	0x1ff80000

0802dc48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 802dc48:	b480      	push	{r7}
 802dc4a:	b087      	sub	sp, #28
 802dc4c:	af00      	add	r7, sp, #0
 802dc4e:	60f8      	str	r0, [r7, #12]
 802dc50:	60b9      	str	r1, [r7, #8]
 802dc52:	4613      	mov	r3, r2
 802dc54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802dc56:	68fb      	ldr	r3, [r7, #12]
 802dc58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 802dc5a:	68bb      	ldr	r3, [r7, #8]
 802dc5c:	781b      	ldrb	r3, [r3, #0]
 802dc5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802dc60:	68bb      	ldr	r3, [r7, #8]
 802dc62:	785b      	ldrb	r3, [r3, #1]
 802dc64:	2b01      	cmp	r3, #1
 802dc66:	f040 80ce 	bne.w	802de06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 802dc6a:	68bb      	ldr	r3, [r7, #8]
 802dc6c:	699b      	ldr	r3, [r3, #24]
 802dc6e:	2b00      	cmp	r3, #0
 802dc70:	d132      	bne.n	802dcd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dc72:	693b      	ldr	r3, [r7, #16]
 802dc74:	015a      	lsls	r2, r3, #5
 802dc76:	697b      	ldr	r3, [r7, #20]
 802dc78:	4413      	add	r3, r2
 802dc7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dc7e:	691b      	ldr	r3, [r3, #16]
 802dc80:	693a      	ldr	r2, [r7, #16]
 802dc82:	0151      	lsls	r1, r2, #5
 802dc84:	697a      	ldr	r2, [r7, #20]
 802dc86:	440a      	add	r2, r1
 802dc88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dc8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dc90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dc94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dc96:	693b      	ldr	r3, [r7, #16]
 802dc98:	015a      	lsls	r2, r3, #5
 802dc9a:	697b      	ldr	r3, [r7, #20]
 802dc9c:	4413      	add	r3, r2
 802dc9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dca2:	691b      	ldr	r3, [r3, #16]
 802dca4:	693a      	ldr	r2, [r7, #16]
 802dca6:	0151      	lsls	r1, r2, #5
 802dca8:	697a      	ldr	r2, [r7, #20]
 802dcaa:	440a      	add	r2, r1
 802dcac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dcb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dcb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dcb6:	693b      	ldr	r3, [r7, #16]
 802dcb8:	015a      	lsls	r2, r3, #5
 802dcba:	697b      	ldr	r3, [r7, #20]
 802dcbc:	4413      	add	r3, r2
 802dcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dcc2:	691b      	ldr	r3, [r3, #16]
 802dcc4:	693a      	ldr	r2, [r7, #16]
 802dcc6:	0151      	lsls	r1, r2, #5
 802dcc8:	697a      	ldr	r2, [r7, #20]
 802dcca:	440a      	add	r2, r1
 802dccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dcd0:	0cdb      	lsrs	r3, r3, #19
 802dcd2:	04db      	lsls	r3, r3, #19
 802dcd4:	6113      	str	r3, [r2, #16]
 802dcd6:	e04e      	b.n	802dd76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 802dcd8:	693b      	ldr	r3, [r7, #16]
 802dcda:	015a      	lsls	r2, r3, #5
 802dcdc:	697b      	ldr	r3, [r7, #20]
 802dcde:	4413      	add	r3, r2
 802dce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dce4:	691b      	ldr	r3, [r3, #16]
 802dce6:	693a      	ldr	r2, [r7, #16]
 802dce8:	0151      	lsls	r1, r2, #5
 802dcea:	697a      	ldr	r2, [r7, #20]
 802dcec:	440a      	add	r2, r1
 802dcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dcf2:	0cdb      	lsrs	r3, r3, #19
 802dcf4:	04db      	lsls	r3, r3, #19
 802dcf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 802dcf8:	693b      	ldr	r3, [r7, #16]
 802dcfa:	015a      	lsls	r2, r3, #5
 802dcfc:	697b      	ldr	r3, [r7, #20]
 802dcfe:	4413      	add	r3, r2
 802dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd04:	691b      	ldr	r3, [r3, #16]
 802dd06:	693a      	ldr	r2, [r7, #16]
 802dd08:	0151      	lsls	r1, r2, #5
 802dd0a:	697a      	ldr	r2, [r7, #20]
 802dd0c:	440a      	add	r2, r1
 802dd0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802dd16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802dd1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 802dd1c:	68bb      	ldr	r3, [r7, #8]
 802dd1e:	699a      	ldr	r2, [r3, #24]
 802dd20:	68bb      	ldr	r3, [r7, #8]
 802dd22:	68db      	ldr	r3, [r3, #12]
 802dd24:	429a      	cmp	r2, r3
 802dd26:	d903      	bls.n	802dd30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 802dd28:	68bb      	ldr	r3, [r7, #8]
 802dd2a:	68da      	ldr	r2, [r3, #12]
 802dd2c:	68bb      	ldr	r3, [r7, #8]
 802dd2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 802dd30:	693b      	ldr	r3, [r7, #16]
 802dd32:	015a      	lsls	r2, r3, #5
 802dd34:	697b      	ldr	r3, [r7, #20]
 802dd36:	4413      	add	r3, r2
 802dd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd3c:	691b      	ldr	r3, [r3, #16]
 802dd3e:	693a      	ldr	r2, [r7, #16]
 802dd40:	0151      	lsls	r1, r2, #5
 802dd42:	697a      	ldr	r2, [r7, #20]
 802dd44:	440a      	add	r2, r1
 802dd46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802dd4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802dd4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 802dd50:	693b      	ldr	r3, [r7, #16]
 802dd52:	015a      	lsls	r2, r3, #5
 802dd54:	697b      	ldr	r3, [r7, #20]
 802dd56:	4413      	add	r3, r2
 802dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd5c:	691a      	ldr	r2, [r3, #16]
 802dd5e:	68bb      	ldr	r3, [r7, #8]
 802dd60:	699b      	ldr	r3, [r3, #24]
 802dd62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802dd66:	6939      	ldr	r1, [r7, #16]
 802dd68:	0148      	lsls	r0, r1, #5
 802dd6a:	6979      	ldr	r1, [r7, #20]
 802dd6c:	4401      	add	r1, r0
 802dd6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 802dd72:	4313      	orrs	r3, r2
 802dd74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 802dd76:	79fb      	ldrb	r3, [r7, #7]
 802dd78:	2b01      	cmp	r3, #1
 802dd7a:	d11e      	bne.n	802ddba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 802dd7c:	68bb      	ldr	r3, [r7, #8]
 802dd7e:	695b      	ldr	r3, [r3, #20]
 802dd80:	2b00      	cmp	r3, #0
 802dd82:	d009      	beq.n	802dd98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 802dd84:	693b      	ldr	r3, [r7, #16]
 802dd86:	015a      	lsls	r2, r3, #5
 802dd88:	697b      	ldr	r3, [r7, #20]
 802dd8a:	4413      	add	r3, r2
 802dd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dd90:	461a      	mov	r2, r3
 802dd92:	68bb      	ldr	r3, [r7, #8]
 802dd94:	695b      	ldr	r3, [r3, #20]
 802dd96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802dd98:	693b      	ldr	r3, [r7, #16]
 802dd9a:	015a      	lsls	r2, r3, #5
 802dd9c:	697b      	ldr	r3, [r7, #20]
 802dd9e:	4413      	add	r3, r2
 802dda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802dda4:	681b      	ldr	r3, [r3, #0]
 802dda6:	693a      	ldr	r2, [r7, #16]
 802dda8:	0151      	lsls	r1, r2, #5
 802ddaa:	697a      	ldr	r2, [r7, #20]
 802ddac:	440a      	add	r2, r1
 802ddae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ddb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ddb6:	6013      	str	r3, [r2, #0]
 802ddb8:	e097      	b.n	802deea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 802ddba:	693b      	ldr	r3, [r7, #16]
 802ddbc:	015a      	lsls	r2, r3, #5
 802ddbe:	697b      	ldr	r3, [r7, #20]
 802ddc0:	4413      	add	r3, r2
 802ddc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802ddc6:	681b      	ldr	r3, [r3, #0]
 802ddc8:	693a      	ldr	r2, [r7, #16]
 802ddca:	0151      	lsls	r1, r2, #5
 802ddcc:	697a      	ldr	r2, [r7, #20]
 802ddce:	440a      	add	r2, r1
 802ddd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802ddd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802ddd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 802ddda:	68bb      	ldr	r3, [r7, #8]
 802dddc:	699b      	ldr	r3, [r3, #24]
 802ddde:	2b00      	cmp	r3, #0
 802dde0:	f000 8083 	beq.w	802deea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 802dde4:	697b      	ldr	r3, [r7, #20]
 802dde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ddea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802ddec:	68bb      	ldr	r3, [r7, #8]
 802ddee:	781b      	ldrb	r3, [r3, #0]
 802ddf0:	f003 030f 	and.w	r3, r3, #15
 802ddf4:	2101      	movs	r1, #1
 802ddf6:	fa01 f303 	lsl.w	r3, r1, r3
 802ddfa:	6979      	ldr	r1, [r7, #20]
 802ddfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802de00:	4313      	orrs	r3, r2
 802de02:	634b      	str	r3, [r1, #52]	; 0x34
 802de04:	e071      	b.n	802deea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 802de06:	693b      	ldr	r3, [r7, #16]
 802de08:	015a      	lsls	r2, r3, #5
 802de0a:	697b      	ldr	r3, [r7, #20]
 802de0c:	4413      	add	r3, r2
 802de0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de12:	691b      	ldr	r3, [r3, #16]
 802de14:	693a      	ldr	r2, [r7, #16]
 802de16:	0151      	lsls	r1, r2, #5
 802de18:	697a      	ldr	r2, [r7, #20]
 802de1a:	440a      	add	r2, r1
 802de1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de20:	0cdb      	lsrs	r3, r3, #19
 802de22:	04db      	lsls	r3, r3, #19
 802de24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 802de26:	693b      	ldr	r3, [r7, #16]
 802de28:	015a      	lsls	r2, r3, #5
 802de2a:	697b      	ldr	r3, [r7, #20]
 802de2c:	4413      	add	r3, r2
 802de2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de32:	691b      	ldr	r3, [r3, #16]
 802de34:	693a      	ldr	r2, [r7, #16]
 802de36:	0151      	lsls	r1, r2, #5
 802de38:	697a      	ldr	r2, [r7, #20]
 802de3a:	440a      	add	r2, r1
 802de3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 802de44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 802de48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 802de4a:	68bb      	ldr	r3, [r7, #8]
 802de4c:	699b      	ldr	r3, [r3, #24]
 802de4e:	2b00      	cmp	r3, #0
 802de50:	d003      	beq.n	802de5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 802de52:	68bb      	ldr	r3, [r7, #8]
 802de54:	68da      	ldr	r2, [r3, #12]
 802de56:	68bb      	ldr	r3, [r7, #8]
 802de58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 802de5a:	68bb      	ldr	r3, [r7, #8]
 802de5c:	68da      	ldr	r2, [r3, #12]
 802de5e:	68bb      	ldr	r3, [r7, #8]
 802de60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802de62:	693b      	ldr	r3, [r7, #16]
 802de64:	015a      	lsls	r2, r3, #5
 802de66:	697b      	ldr	r3, [r7, #20]
 802de68:	4413      	add	r3, r2
 802de6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de6e:	691b      	ldr	r3, [r3, #16]
 802de70:	693a      	ldr	r2, [r7, #16]
 802de72:	0151      	lsls	r1, r2, #5
 802de74:	697a      	ldr	r2, [r7, #20]
 802de76:	440a      	add	r2, r1
 802de78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802de7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802de80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 802de82:	693b      	ldr	r3, [r7, #16]
 802de84:	015a      	lsls	r2, r3, #5
 802de86:	697b      	ldr	r3, [r7, #20]
 802de88:	4413      	add	r3, r2
 802de8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802de8e:	691a      	ldr	r2, [r3, #16]
 802de90:	68bb      	ldr	r3, [r7, #8]
 802de92:	69db      	ldr	r3, [r3, #28]
 802de94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 802de98:	6939      	ldr	r1, [r7, #16]
 802de9a:	0148      	lsls	r0, r1, #5
 802de9c:	6979      	ldr	r1, [r7, #20]
 802de9e:	4401      	add	r1, r0
 802dea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 802dea4:	4313      	orrs	r3, r2
 802dea6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 802dea8:	79fb      	ldrb	r3, [r7, #7]
 802deaa:	2b01      	cmp	r3, #1
 802deac:	d10d      	bne.n	802deca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 802deae:	68bb      	ldr	r3, [r7, #8]
 802deb0:	691b      	ldr	r3, [r3, #16]
 802deb2:	2b00      	cmp	r3, #0
 802deb4:	d009      	beq.n	802deca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 802deb6:	68bb      	ldr	r3, [r7, #8]
 802deb8:	6919      	ldr	r1, [r3, #16]
 802deba:	693b      	ldr	r3, [r7, #16]
 802debc:	015a      	lsls	r2, r3, #5
 802debe:	697b      	ldr	r3, [r7, #20]
 802dec0:	4413      	add	r3, r2
 802dec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dec6:	460a      	mov	r2, r1
 802dec8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 802deca:	693b      	ldr	r3, [r7, #16]
 802decc:	015a      	lsls	r2, r3, #5
 802dece:	697b      	ldr	r3, [r7, #20]
 802ded0:	4413      	add	r3, r2
 802ded2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802ded6:	681b      	ldr	r3, [r3, #0]
 802ded8:	693a      	ldr	r2, [r7, #16]
 802deda:	0151      	lsls	r1, r2, #5
 802dedc:	697a      	ldr	r2, [r7, #20]
 802dede:	440a      	add	r2, r1
 802dee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dee4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 802dee8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802deea:	2300      	movs	r3, #0
}
 802deec:	4618      	mov	r0, r3
 802deee:	371c      	adds	r7, #28
 802def0:	46bd      	mov	sp, r7
 802def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802def6:	4770      	bx	lr

0802def8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802def8:	b480      	push	{r7}
 802defa:	b087      	sub	sp, #28
 802defc:	af00      	add	r7, sp, #0
 802defe:	6078      	str	r0, [r7, #4]
 802df00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802df02:	2300      	movs	r3, #0
 802df04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 802df06:	2300      	movs	r3, #0
 802df08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802df0a:	687b      	ldr	r3, [r7, #4]
 802df0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 802df0e:	683b      	ldr	r3, [r7, #0]
 802df10:	785b      	ldrb	r3, [r3, #1]
 802df12:	2b01      	cmp	r3, #1
 802df14:	d14a      	bne.n	802dfac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 802df16:	683b      	ldr	r3, [r7, #0]
 802df18:	781b      	ldrb	r3, [r3, #0]
 802df1a:	015a      	lsls	r2, r3, #5
 802df1c:	693b      	ldr	r3, [r7, #16]
 802df1e:	4413      	add	r3, r2
 802df20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df24:	681b      	ldr	r3, [r3, #0]
 802df26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802df2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802df2e:	f040 8086 	bne.w	802e03e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 802df32:	683b      	ldr	r3, [r7, #0]
 802df34:	781b      	ldrb	r3, [r3, #0]
 802df36:	015a      	lsls	r2, r3, #5
 802df38:	693b      	ldr	r3, [r7, #16]
 802df3a:	4413      	add	r3, r2
 802df3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df40:	681b      	ldr	r3, [r3, #0]
 802df42:	683a      	ldr	r2, [r7, #0]
 802df44:	7812      	ldrb	r2, [r2, #0]
 802df46:	0151      	lsls	r1, r2, #5
 802df48:	693a      	ldr	r2, [r7, #16]
 802df4a:	440a      	add	r2, r1
 802df4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802df50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802df54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 802df56:	683b      	ldr	r3, [r7, #0]
 802df58:	781b      	ldrb	r3, [r3, #0]
 802df5a:	015a      	lsls	r2, r3, #5
 802df5c:	693b      	ldr	r3, [r7, #16]
 802df5e:	4413      	add	r3, r2
 802df60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	683a      	ldr	r2, [r7, #0]
 802df68:	7812      	ldrb	r2, [r2, #0]
 802df6a:	0151      	lsls	r1, r2, #5
 802df6c:	693a      	ldr	r2, [r7, #16]
 802df6e:	440a      	add	r2, r1
 802df70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802df74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802df78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802df7a:	68fb      	ldr	r3, [r7, #12]
 802df7c:	3301      	adds	r3, #1
 802df7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802df80:	68fb      	ldr	r3, [r7, #12]
 802df82:	f242 7210 	movw	r2, #10000	; 0x2710
 802df86:	4293      	cmp	r3, r2
 802df88:	d902      	bls.n	802df90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 802df8a:	2301      	movs	r3, #1
 802df8c:	75fb      	strb	r3, [r7, #23]
          break;
 802df8e:	e056      	b.n	802e03e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 802df90:	683b      	ldr	r3, [r7, #0]
 802df92:	781b      	ldrb	r3, [r3, #0]
 802df94:	015a      	lsls	r2, r3, #5
 802df96:	693b      	ldr	r3, [r7, #16]
 802df98:	4413      	add	r3, r2
 802df9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802df9e:	681b      	ldr	r3, [r3, #0]
 802dfa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dfa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802dfa8:	d0e7      	beq.n	802df7a <USB_EPStopXfer+0x82>
 802dfaa:	e048      	b.n	802e03e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802dfac:	683b      	ldr	r3, [r7, #0]
 802dfae:	781b      	ldrb	r3, [r3, #0]
 802dfb0:	015a      	lsls	r2, r3, #5
 802dfb2:	693b      	ldr	r3, [r7, #16]
 802dfb4:	4413      	add	r3, r2
 802dfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dfba:	681b      	ldr	r3, [r3, #0]
 802dfbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dfc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802dfc4:	d13b      	bne.n	802e03e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 802dfc6:	683b      	ldr	r3, [r7, #0]
 802dfc8:	781b      	ldrb	r3, [r3, #0]
 802dfca:	015a      	lsls	r2, r3, #5
 802dfcc:	693b      	ldr	r3, [r7, #16]
 802dfce:	4413      	add	r3, r2
 802dfd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dfd4:	681b      	ldr	r3, [r3, #0]
 802dfd6:	683a      	ldr	r2, [r7, #0]
 802dfd8:	7812      	ldrb	r2, [r2, #0]
 802dfda:	0151      	lsls	r1, r2, #5
 802dfdc:	693a      	ldr	r2, [r7, #16]
 802dfde:	440a      	add	r2, r1
 802dfe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802dfe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802dfe8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 802dfea:	683b      	ldr	r3, [r7, #0]
 802dfec:	781b      	ldrb	r3, [r3, #0]
 802dfee:	015a      	lsls	r2, r3, #5
 802dff0:	693b      	ldr	r3, [r7, #16]
 802dff2:	4413      	add	r3, r2
 802dff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802dff8:	681b      	ldr	r3, [r3, #0]
 802dffa:	683a      	ldr	r2, [r7, #0]
 802dffc:	7812      	ldrb	r2, [r2, #0]
 802dffe:	0151      	lsls	r1, r2, #5
 802e000:	693a      	ldr	r2, [r7, #16]
 802e002:	440a      	add	r2, r1
 802e004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802e00c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 802e00e:	68fb      	ldr	r3, [r7, #12]
 802e010:	3301      	adds	r3, #1
 802e012:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 802e014:	68fb      	ldr	r3, [r7, #12]
 802e016:	f242 7210 	movw	r2, #10000	; 0x2710
 802e01a:	4293      	cmp	r3, r2
 802e01c:	d902      	bls.n	802e024 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 802e01e:	2301      	movs	r3, #1
 802e020:	75fb      	strb	r3, [r7, #23]
          break;
 802e022:	e00c      	b.n	802e03e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 802e024:	683b      	ldr	r3, [r7, #0]
 802e026:	781b      	ldrb	r3, [r3, #0]
 802e028:	015a      	lsls	r2, r3, #5
 802e02a:	693b      	ldr	r3, [r7, #16]
 802e02c:	4413      	add	r3, r2
 802e02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e032:	681b      	ldr	r3, [r3, #0]
 802e034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e03c:	d0e7      	beq.n	802e00e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 802e03e:	7dfb      	ldrb	r3, [r7, #23]
}
 802e040:	4618      	mov	r0, r3
 802e042:	371c      	adds	r7, #28
 802e044:	46bd      	mov	sp, r7
 802e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e04a:	4770      	bx	lr

0802e04c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802e04c:	b480      	push	{r7}
 802e04e:	b089      	sub	sp, #36	; 0x24
 802e050:	af00      	add	r7, sp, #0
 802e052:	60f8      	str	r0, [r7, #12]
 802e054:	60b9      	str	r1, [r7, #8]
 802e056:	4611      	mov	r1, r2
 802e058:	461a      	mov	r2, r3
 802e05a:	460b      	mov	r3, r1
 802e05c:	71fb      	strb	r3, [r7, #7]
 802e05e:	4613      	mov	r3, r2
 802e060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e062:	68fb      	ldr	r3, [r7, #12]
 802e064:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802e066:	68bb      	ldr	r3, [r7, #8]
 802e068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802e06a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802e06e:	2b00      	cmp	r3, #0
 802e070:	d123      	bne.n	802e0ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802e072:	88bb      	ldrh	r3, [r7, #4]
 802e074:	3303      	adds	r3, #3
 802e076:	089b      	lsrs	r3, r3, #2
 802e078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802e07a:	2300      	movs	r3, #0
 802e07c:	61bb      	str	r3, [r7, #24]
 802e07e:	e018      	b.n	802e0b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802e080:	79fb      	ldrb	r3, [r7, #7]
 802e082:	031a      	lsls	r2, r3, #12
 802e084:	697b      	ldr	r3, [r7, #20]
 802e086:	4413      	add	r3, r2
 802e088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e08c:	461a      	mov	r2, r3
 802e08e:	69fb      	ldr	r3, [r7, #28]
 802e090:	681b      	ldr	r3, [r3, #0]
 802e092:	6013      	str	r3, [r2, #0]
      pSrc++;
 802e094:	69fb      	ldr	r3, [r7, #28]
 802e096:	3301      	adds	r3, #1
 802e098:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e09a:	69fb      	ldr	r3, [r7, #28]
 802e09c:	3301      	adds	r3, #1
 802e09e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e0a0:	69fb      	ldr	r3, [r7, #28]
 802e0a2:	3301      	adds	r3, #1
 802e0a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802e0a6:	69fb      	ldr	r3, [r7, #28]
 802e0a8:	3301      	adds	r3, #1
 802e0aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802e0ac:	69bb      	ldr	r3, [r7, #24]
 802e0ae:	3301      	adds	r3, #1
 802e0b0:	61bb      	str	r3, [r7, #24]
 802e0b2:	69ba      	ldr	r2, [r7, #24]
 802e0b4:	693b      	ldr	r3, [r7, #16]
 802e0b6:	429a      	cmp	r2, r3
 802e0b8:	d3e2      	bcc.n	802e080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802e0ba:	2300      	movs	r3, #0
}
 802e0bc:	4618      	mov	r0, r3
 802e0be:	3724      	adds	r7, #36	; 0x24
 802e0c0:	46bd      	mov	sp, r7
 802e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e0c6:	4770      	bx	lr

0802e0c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802e0c8:	b480      	push	{r7}
 802e0ca:	b08b      	sub	sp, #44	; 0x2c
 802e0cc:	af00      	add	r7, sp, #0
 802e0ce:	60f8      	str	r0, [r7, #12]
 802e0d0:	60b9      	str	r1, [r7, #8]
 802e0d2:	4613      	mov	r3, r2
 802e0d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e0d6:	68fb      	ldr	r3, [r7, #12]
 802e0d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802e0da:	68bb      	ldr	r3, [r7, #8]
 802e0dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802e0de:	88fb      	ldrh	r3, [r7, #6]
 802e0e0:	089b      	lsrs	r3, r3, #2
 802e0e2:	b29b      	uxth	r3, r3
 802e0e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802e0e6:	88fb      	ldrh	r3, [r7, #6]
 802e0e8:	f003 0303 	and.w	r3, r3, #3
 802e0ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802e0ee:	2300      	movs	r3, #0
 802e0f0:	623b      	str	r3, [r7, #32]
 802e0f2:	e014      	b.n	802e11e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802e0f4:	69bb      	ldr	r3, [r7, #24]
 802e0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e0fa:	681a      	ldr	r2, [r3, #0]
 802e0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e0fe:	601a      	str	r2, [r3, #0]
    pDest++;
 802e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e102:	3301      	adds	r3, #1
 802e104:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e108:	3301      	adds	r3, #1
 802e10a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e10e:	3301      	adds	r3, #1
 802e110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e114:	3301      	adds	r3, #1
 802e116:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802e118:	6a3b      	ldr	r3, [r7, #32]
 802e11a:	3301      	adds	r3, #1
 802e11c:	623b      	str	r3, [r7, #32]
 802e11e:	6a3a      	ldr	r2, [r7, #32]
 802e120:	697b      	ldr	r3, [r7, #20]
 802e122:	429a      	cmp	r2, r3
 802e124:	d3e6      	bcc.n	802e0f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802e126:	8bfb      	ldrh	r3, [r7, #30]
 802e128:	2b00      	cmp	r3, #0
 802e12a:	d01e      	beq.n	802e16a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802e12c:	2300      	movs	r3, #0
 802e12e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802e130:	69bb      	ldr	r3, [r7, #24]
 802e132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802e136:	461a      	mov	r2, r3
 802e138:	f107 0310 	add.w	r3, r7, #16
 802e13c:	6812      	ldr	r2, [r2, #0]
 802e13e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802e140:	693a      	ldr	r2, [r7, #16]
 802e142:	6a3b      	ldr	r3, [r7, #32]
 802e144:	b2db      	uxtb	r3, r3
 802e146:	00db      	lsls	r3, r3, #3
 802e148:	fa22 f303 	lsr.w	r3, r2, r3
 802e14c:	b2da      	uxtb	r2, r3
 802e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e150:	701a      	strb	r2, [r3, #0]
      i++;
 802e152:	6a3b      	ldr	r3, [r7, #32]
 802e154:	3301      	adds	r3, #1
 802e156:	623b      	str	r3, [r7, #32]
      pDest++;
 802e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802e15a:	3301      	adds	r3, #1
 802e15c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802e15e:	8bfb      	ldrh	r3, [r7, #30]
 802e160:	3b01      	subs	r3, #1
 802e162:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802e164:	8bfb      	ldrh	r3, [r7, #30]
 802e166:	2b00      	cmp	r3, #0
 802e168:	d1ea      	bne.n	802e140 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802e16c:	4618      	mov	r0, r3
 802e16e:	372c      	adds	r7, #44	; 0x2c
 802e170:	46bd      	mov	sp, r7
 802e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e176:	4770      	bx	lr

0802e178 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e178:	b480      	push	{r7}
 802e17a:	b085      	sub	sp, #20
 802e17c:	af00      	add	r7, sp, #0
 802e17e:	6078      	str	r0, [r7, #4]
 802e180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e182:	687b      	ldr	r3, [r7, #4]
 802e184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e186:	683b      	ldr	r3, [r7, #0]
 802e188:	781b      	ldrb	r3, [r3, #0]
 802e18a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e18c:	683b      	ldr	r3, [r7, #0]
 802e18e:	785b      	ldrb	r3, [r3, #1]
 802e190:	2b01      	cmp	r3, #1
 802e192:	d12c      	bne.n	802e1ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e194:	68bb      	ldr	r3, [r7, #8]
 802e196:	015a      	lsls	r2, r3, #5
 802e198:	68fb      	ldr	r3, [r7, #12]
 802e19a:	4413      	add	r3, r2
 802e19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1a0:	681b      	ldr	r3, [r3, #0]
 802e1a2:	2b00      	cmp	r3, #0
 802e1a4:	db12      	blt.n	802e1cc <USB_EPSetStall+0x54>
 802e1a6:	68bb      	ldr	r3, [r7, #8]
 802e1a8:	2b00      	cmp	r3, #0
 802e1aa:	d00f      	beq.n	802e1cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 802e1ac:	68bb      	ldr	r3, [r7, #8]
 802e1ae:	015a      	lsls	r2, r3, #5
 802e1b0:	68fb      	ldr	r3, [r7, #12]
 802e1b2:	4413      	add	r3, r2
 802e1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1b8:	681b      	ldr	r3, [r3, #0]
 802e1ba:	68ba      	ldr	r2, [r7, #8]
 802e1bc:	0151      	lsls	r1, r2, #5
 802e1be:	68fa      	ldr	r2, [r7, #12]
 802e1c0:	440a      	add	r2, r1
 802e1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e1ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 802e1cc:	68bb      	ldr	r3, [r7, #8]
 802e1ce:	015a      	lsls	r2, r3, #5
 802e1d0:	68fb      	ldr	r3, [r7, #12]
 802e1d2:	4413      	add	r3, r2
 802e1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e1d8:	681b      	ldr	r3, [r3, #0]
 802e1da:	68ba      	ldr	r2, [r7, #8]
 802e1dc:	0151      	lsls	r1, r2, #5
 802e1de:	68fa      	ldr	r2, [r7, #12]
 802e1e0:	440a      	add	r2, r1
 802e1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e1e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e1ea:	6013      	str	r3, [r2, #0]
 802e1ec:	e02b      	b.n	802e246 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 802e1ee:	68bb      	ldr	r3, [r7, #8]
 802e1f0:	015a      	lsls	r2, r3, #5
 802e1f2:	68fb      	ldr	r3, [r7, #12]
 802e1f4:	4413      	add	r3, r2
 802e1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e1fa:	681b      	ldr	r3, [r3, #0]
 802e1fc:	2b00      	cmp	r3, #0
 802e1fe:	db12      	blt.n	802e226 <USB_EPSetStall+0xae>
 802e200:	68bb      	ldr	r3, [r7, #8]
 802e202:	2b00      	cmp	r3, #0
 802e204:	d00f      	beq.n	802e226 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 802e206:	68bb      	ldr	r3, [r7, #8]
 802e208:	015a      	lsls	r2, r3, #5
 802e20a:	68fb      	ldr	r3, [r7, #12]
 802e20c:	4413      	add	r3, r2
 802e20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e212:	681b      	ldr	r3, [r3, #0]
 802e214:	68ba      	ldr	r2, [r7, #8]
 802e216:	0151      	lsls	r1, r2, #5
 802e218:	68fa      	ldr	r2, [r7, #12]
 802e21a:	440a      	add	r2, r1
 802e21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802e224:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 802e226:	68bb      	ldr	r3, [r7, #8]
 802e228:	015a      	lsls	r2, r3, #5
 802e22a:	68fb      	ldr	r3, [r7, #12]
 802e22c:	4413      	add	r3, r2
 802e22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e232:	681b      	ldr	r3, [r3, #0]
 802e234:	68ba      	ldr	r2, [r7, #8]
 802e236:	0151      	lsls	r1, r2, #5
 802e238:	68fa      	ldr	r2, [r7, #12]
 802e23a:	440a      	add	r2, r1
 802e23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802e244:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e246:	2300      	movs	r3, #0
}
 802e248:	4618      	mov	r0, r3
 802e24a:	3714      	adds	r7, #20
 802e24c:	46bd      	mov	sp, r7
 802e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e252:	4770      	bx	lr

0802e254 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 802e254:	b480      	push	{r7}
 802e256:	b085      	sub	sp, #20
 802e258:	af00      	add	r7, sp, #0
 802e25a:	6078      	str	r0, [r7, #4]
 802e25c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e25e:	687b      	ldr	r3, [r7, #4]
 802e260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 802e262:	683b      	ldr	r3, [r7, #0]
 802e264:	781b      	ldrb	r3, [r3, #0]
 802e266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 802e268:	683b      	ldr	r3, [r7, #0]
 802e26a:	785b      	ldrb	r3, [r3, #1]
 802e26c:	2b01      	cmp	r3, #1
 802e26e:	d128      	bne.n	802e2c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802e270:	68bb      	ldr	r3, [r7, #8]
 802e272:	015a      	lsls	r2, r3, #5
 802e274:	68fb      	ldr	r3, [r7, #12]
 802e276:	4413      	add	r3, r2
 802e278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e27c:	681b      	ldr	r3, [r3, #0]
 802e27e:	68ba      	ldr	r2, [r7, #8]
 802e280:	0151      	lsls	r1, r2, #5
 802e282:	68fa      	ldr	r2, [r7, #12]
 802e284:	440a      	add	r2, r1
 802e286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e28a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e28e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e290:	683b      	ldr	r3, [r7, #0]
 802e292:	791b      	ldrb	r3, [r3, #4]
 802e294:	2b03      	cmp	r3, #3
 802e296:	d003      	beq.n	802e2a0 <USB_EPClearStall+0x4c>
 802e298:	683b      	ldr	r3, [r7, #0]
 802e29a:	791b      	ldrb	r3, [r3, #4]
 802e29c:	2b02      	cmp	r3, #2
 802e29e:	d138      	bne.n	802e312 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e2a0:	68bb      	ldr	r3, [r7, #8]
 802e2a2:	015a      	lsls	r2, r3, #5
 802e2a4:	68fb      	ldr	r3, [r7, #12]
 802e2a6:	4413      	add	r3, r2
 802e2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e2ac:	681b      	ldr	r3, [r3, #0]
 802e2ae:	68ba      	ldr	r2, [r7, #8]
 802e2b0:	0151      	lsls	r1, r2, #5
 802e2b2:	68fa      	ldr	r2, [r7, #12]
 802e2b4:	440a      	add	r2, r1
 802e2b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e2ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e2be:	6013      	str	r3, [r2, #0]
 802e2c0:	e027      	b.n	802e312 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802e2c2:	68bb      	ldr	r3, [r7, #8]
 802e2c4:	015a      	lsls	r2, r3, #5
 802e2c6:	68fb      	ldr	r3, [r7, #12]
 802e2c8:	4413      	add	r3, r2
 802e2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e2ce:	681b      	ldr	r3, [r3, #0]
 802e2d0:	68ba      	ldr	r2, [r7, #8]
 802e2d2:	0151      	lsls	r1, r2, #5
 802e2d4:	68fa      	ldr	r2, [r7, #12]
 802e2d6:	440a      	add	r2, r1
 802e2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e2dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802e2e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 802e2e2:	683b      	ldr	r3, [r7, #0]
 802e2e4:	791b      	ldrb	r3, [r3, #4]
 802e2e6:	2b03      	cmp	r3, #3
 802e2e8:	d003      	beq.n	802e2f2 <USB_EPClearStall+0x9e>
 802e2ea:	683b      	ldr	r3, [r7, #0]
 802e2ec:	791b      	ldrb	r3, [r3, #4]
 802e2ee:	2b02      	cmp	r3, #2
 802e2f0:	d10f      	bne.n	802e312 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 802e2f2:	68bb      	ldr	r3, [r7, #8]
 802e2f4:	015a      	lsls	r2, r3, #5
 802e2f6:	68fb      	ldr	r3, [r7, #12]
 802e2f8:	4413      	add	r3, r2
 802e2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e2fe:	681b      	ldr	r3, [r3, #0]
 802e300:	68ba      	ldr	r2, [r7, #8]
 802e302:	0151      	lsls	r1, r2, #5
 802e304:	68fa      	ldr	r2, [r7, #12]
 802e306:	440a      	add	r2, r1
 802e308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e30c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802e310:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 802e312:	2300      	movs	r3, #0
}
 802e314:	4618      	mov	r0, r3
 802e316:	3714      	adds	r7, #20
 802e318:	46bd      	mov	sp, r7
 802e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e31e:	4770      	bx	lr

0802e320 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 802e320:	b480      	push	{r7}
 802e322:	b085      	sub	sp, #20
 802e324:	af00      	add	r7, sp, #0
 802e326:	6078      	str	r0, [r7, #4]
 802e328:	460b      	mov	r3, r1
 802e32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e32c:	687b      	ldr	r3, [r7, #4]
 802e32e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 802e330:	68fb      	ldr	r3, [r7, #12]
 802e332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e336:	681b      	ldr	r3, [r3, #0]
 802e338:	68fa      	ldr	r2, [r7, #12]
 802e33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e33e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802e342:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 802e344:	68fb      	ldr	r3, [r7, #12]
 802e346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e34a:	681a      	ldr	r2, [r3, #0]
 802e34c:	78fb      	ldrb	r3, [r7, #3]
 802e34e:	011b      	lsls	r3, r3, #4
 802e350:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 802e354:	68f9      	ldr	r1, [r7, #12]
 802e356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802e35a:	4313      	orrs	r3, r2
 802e35c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 802e35e:	2300      	movs	r3, #0
}
 802e360:	4618      	mov	r0, r3
 802e362:	3714      	adds	r7, #20
 802e364:	46bd      	mov	sp, r7
 802e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e36a:	4770      	bx	lr

0802e36c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e36c:	b480      	push	{r7}
 802e36e:	b085      	sub	sp, #20
 802e370:	af00      	add	r7, sp, #0
 802e372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e374:	687b      	ldr	r3, [r7, #4]
 802e376:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e378:	68fb      	ldr	r3, [r7, #12]
 802e37a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e37e:	681b      	ldr	r3, [r3, #0]
 802e380:	68fa      	ldr	r2, [r7, #12]
 802e382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e386:	f023 0303 	bic.w	r3, r3, #3
 802e38a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 802e38c:	68fb      	ldr	r3, [r7, #12]
 802e38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e392:	685b      	ldr	r3, [r3, #4]
 802e394:	68fa      	ldr	r2, [r7, #12]
 802e396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e39a:	f023 0302 	bic.w	r3, r3, #2
 802e39e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e3a0:	2300      	movs	r3, #0
}
 802e3a2:	4618      	mov	r0, r3
 802e3a4:	3714      	adds	r7, #20
 802e3a6:	46bd      	mov	sp, r7
 802e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3ac:	4770      	bx	lr

0802e3ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 802e3ae:	b480      	push	{r7}
 802e3b0:	b085      	sub	sp, #20
 802e3b2:	af00      	add	r7, sp, #0
 802e3b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e3b6:	687b      	ldr	r3, [r7, #4]
 802e3b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 802e3ba:	68fb      	ldr	r3, [r7, #12]
 802e3bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802e3c0:	681b      	ldr	r3, [r3, #0]
 802e3c2:	68fa      	ldr	r2, [r7, #12]
 802e3c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802e3c8:	f023 0303 	bic.w	r3, r3, #3
 802e3cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 802e3ce:	68fb      	ldr	r3, [r7, #12]
 802e3d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e3d4:	685b      	ldr	r3, [r3, #4]
 802e3d6:	68fa      	ldr	r2, [r7, #12]
 802e3d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e3dc:	f043 0302 	orr.w	r3, r3, #2
 802e3e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e3e2:	2300      	movs	r3, #0
}
 802e3e4:	4618      	mov	r0, r3
 802e3e6:	3714      	adds	r7, #20
 802e3e8:	46bd      	mov	sp, r7
 802e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e3ee:	4770      	bx	lr

0802e3f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802e3f0:	b480      	push	{r7}
 802e3f2:	b085      	sub	sp, #20
 802e3f4:	af00      	add	r7, sp, #0
 802e3f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802e3f8:	687b      	ldr	r3, [r7, #4]
 802e3fa:	695b      	ldr	r3, [r3, #20]
 802e3fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802e3fe:	687b      	ldr	r3, [r7, #4]
 802e400:	699b      	ldr	r3, [r3, #24]
 802e402:	68fa      	ldr	r2, [r7, #12]
 802e404:	4013      	ands	r3, r2
 802e406:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802e408:	68fb      	ldr	r3, [r7, #12]
}
 802e40a:	4618      	mov	r0, r3
 802e40c:	3714      	adds	r7, #20
 802e40e:	46bd      	mov	sp, r7
 802e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e414:	4770      	bx	lr

0802e416 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e416:	b480      	push	{r7}
 802e418:	b085      	sub	sp, #20
 802e41a:	af00      	add	r7, sp, #0
 802e41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e41e:	687b      	ldr	r3, [r7, #4]
 802e420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e422:	68fb      	ldr	r3, [r7, #12]
 802e424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e428:	699b      	ldr	r3, [r3, #24]
 802e42a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e42c:	68fb      	ldr	r3, [r7, #12]
 802e42e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e432:	69db      	ldr	r3, [r3, #28]
 802e434:	68ba      	ldr	r2, [r7, #8]
 802e436:	4013      	ands	r3, r2
 802e438:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 802e43a:	68bb      	ldr	r3, [r7, #8]
 802e43c:	0c1b      	lsrs	r3, r3, #16
}
 802e43e:	4618      	mov	r0, r3
 802e440:	3714      	adds	r7, #20
 802e442:	46bd      	mov	sp, r7
 802e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e448:	4770      	bx	lr

0802e44a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802e44a:	b480      	push	{r7}
 802e44c:	b085      	sub	sp, #20
 802e44e:	af00      	add	r7, sp, #0
 802e450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e452:	687b      	ldr	r3, [r7, #4]
 802e454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 802e456:	68fb      	ldr	r3, [r7, #12]
 802e458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e45c:	699b      	ldr	r3, [r3, #24]
 802e45e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 802e460:	68fb      	ldr	r3, [r7, #12]
 802e462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e466:	69db      	ldr	r3, [r3, #28]
 802e468:	68ba      	ldr	r2, [r7, #8]
 802e46a:	4013      	ands	r3, r2
 802e46c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 802e46e:	68bb      	ldr	r3, [r7, #8]
 802e470:	b29b      	uxth	r3, r3
}
 802e472:	4618      	mov	r0, r3
 802e474:	3714      	adds	r7, #20
 802e476:	46bd      	mov	sp, r7
 802e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e47c:	4770      	bx	lr

0802e47e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e47e:	b480      	push	{r7}
 802e480:	b085      	sub	sp, #20
 802e482:	af00      	add	r7, sp, #0
 802e484:	6078      	str	r0, [r7, #4]
 802e486:	460b      	mov	r3, r1
 802e488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e48a:	687b      	ldr	r3, [r7, #4]
 802e48c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 802e48e:	78fb      	ldrb	r3, [r7, #3]
 802e490:	015a      	lsls	r2, r3, #5
 802e492:	68fb      	ldr	r3, [r7, #12]
 802e494:	4413      	add	r3, r2
 802e496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e49a:	689b      	ldr	r3, [r3, #8]
 802e49c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 802e49e:	68fb      	ldr	r3, [r7, #12]
 802e4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4a4:	695b      	ldr	r3, [r3, #20]
 802e4a6:	68ba      	ldr	r2, [r7, #8]
 802e4a8:	4013      	ands	r3, r2
 802e4aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e4ac:	68bb      	ldr	r3, [r7, #8]
}
 802e4ae:	4618      	mov	r0, r3
 802e4b0:	3714      	adds	r7, #20
 802e4b2:	46bd      	mov	sp, r7
 802e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e4b8:	4770      	bx	lr

0802e4ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 802e4ba:	b480      	push	{r7}
 802e4bc:	b087      	sub	sp, #28
 802e4be:	af00      	add	r7, sp, #0
 802e4c0:	6078      	str	r0, [r7, #4]
 802e4c2:	460b      	mov	r3, r1
 802e4c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e4c6:	687b      	ldr	r3, [r7, #4]
 802e4c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 802e4ca:	697b      	ldr	r3, [r7, #20]
 802e4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4d0:	691b      	ldr	r3, [r3, #16]
 802e4d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 802e4d4:	697b      	ldr	r3, [r7, #20]
 802e4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e4dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 802e4de:	78fb      	ldrb	r3, [r7, #3]
 802e4e0:	f003 030f 	and.w	r3, r3, #15
 802e4e4:	68fa      	ldr	r2, [r7, #12]
 802e4e6:	fa22 f303 	lsr.w	r3, r2, r3
 802e4ea:	01db      	lsls	r3, r3, #7
 802e4ec:	b2db      	uxtb	r3, r3
 802e4ee:	693a      	ldr	r2, [r7, #16]
 802e4f0:	4313      	orrs	r3, r2
 802e4f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 802e4f4:	78fb      	ldrb	r3, [r7, #3]
 802e4f6:	015a      	lsls	r2, r3, #5
 802e4f8:	697b      	ldr	r3, [r7, #20]
 802e4fa:	4413      	add	r3, r2
 802e4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e500:	689b      	ldr	r3, [r3, #8]
 802e502:	693a      	ldr	r2, [r7, #16]
 802e504:	4013      	ands	r3, r2
 802e506:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 802e508:	68bb      	ldr	r3, [r7, #8]
}
 802e50a:	4618      	mov	r0, r3
 802e50c:	371c      	adds	r7, #28
 802e50e:	46bd      	mov	sp, r7
 802e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e514:	4770      	bx	lr

0802e516 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802e516:	b480      	push	{r7}
 802e518:	b083      	sub	sp, #12
 802e51a:	af00      	add	r7, sp, #0
 802e51c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802e51e:	687b      	ldr	r3, [r7, #4]
 802e520:	695b      	ldr	r3, [r3, #20]
 802e522:	f003 0301 	and.w	r3, r3, #1
}
 802e526:	4618      	mov	r0, r3
 802e528:	370c      	adds	r7, #12
 802e52a:	46bd      	mov	sp, r7
 802e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e530:	4770      	bx	lr

0802e532 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 802e532:	b480      	push	{r7}
 802e534:	b085      	sub	sp, #20
 802e536:	af00      	add	r7, sp, #0
 802e538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e53a:	687b      	ldr	r3, [r7, #4]
 802e53c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 802e53e:	68fb      	ldr	r3, [r7, #12]
 802e540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802e544:	681b      	ldr	r3, [r3, #0]
 802e546:	68fa      	ldr	r2, [r7, #12]
 802e548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802e54c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802e550:	f023 0307 	bic.w	r3, r3, #7
 802e554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 802e556:	68fb      	ldr	r3, [r7, #12]
 802e558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802e55c:	685b      	ldr	r3, [r3, #4]
 802e55e:	68fa      	ldr	r2, [r7, #12]
 802e560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802e564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802e568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 802e56a:	2300      	movs	r3, #0
}
 802e56c:	4618      	mov	r0, r3
 802e56e:	3714      	adds	r7, #20
 802e570:	46bd      	mov	sp, r7
 802e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e576:	4770      	bx	lr

0802e578 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 802e578:	b480      	push	{r7}
 802e57a:	b087      	sub	sp, #28
 802e57c:	af00      	add	r7, sp, #0
 802e57e:	60f8      	str	r0, [r7, #12]
 802e580:	460b      	mov	r3, r1
 802e582:	607a      	str	r2, [r7, #4]
 802e584:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802e586:	68fb      	ldr	r3, [r7, #12]
 802e588:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 802e58a:	68fb      	ldr	r3, [r7, #12]
 802e58c:	333c      	adds	r3, #60	; 0x3c
 802e58e:	3304      	adds	r3, #4
 802e590:	681b      	ldr	r3, [r3, #0]
 802e592:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 802e594:	693b      	ldr	r3, [r7, #16]
 802e596:	4a26      	ldr	r2, [pc, #152]	; (802e630 <USB_EP0_OutStart+0xb8>)
 802e598:	4293      	cmp	r3, r2
 802e59a:	d90a      	bls.n	802e5b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 802e59c:	697b      	ldr	r3, [r7, #20]
 802e59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5a2:	681b      	ldr	r3, [r3, #0]
 802e5a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e5a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e5ac:	d101      	bne.n	802e5b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 802e5ae:	2300      	movs	r3, #0
 802e5b0:	e037      	b.n	802e622 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 802e5b2:	697b      	ldr	r3, [r7, #20]
 802e5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5b8:	461a      	mov	r2, r3
 802e5ba:	2300      	movs	r3, #0
 802e5bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 802e5be:	697b      	ldr	r3, [r7, #20]
 802e5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5c4:	691b      	ldr	r3, [r3, #16]
 802e5c6:	697a      	ldr	r2, [r7, #20]
 802e5c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e5cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802e5d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 802e5d2:	697b      	ldr	r3, [r7, #20]
 802e5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5d8:	691b      	ldr	r3, [r3, #16]
 802e5da:	697a      	ldr	r2, [r7, #20]
 802e5dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e5e0:	f043 0318 	orr.w	r3, r3, #24
 802e5e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 802e5e6:	697b      	ldr	r3, [r7, #20]
 802e5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e5ec:	691b      	ldr	r3, [r3, #16]
 802e5ee:	697a      	ldr	r2, [r7, #20]
 802e5f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e5f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 802e5f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 802e5fa:	7afb      	ldrb	r3, [r7, #11]
 802e5fc:	2b01      	cmp	r3, #1
 802e5fe:	d10f      	bne.n	802e620 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 802e600:	697b      	ldr	r3, [r7, #20]
 802e602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e606:	461a      	mov	r2, r3
 802e608:	687b      	ldr	r3, [r7, #4]
 802e60a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 802e60c:	697b      	ldr	r3, [r7, #20]
 802e60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802e612:	681b      	ldr	r3, [r3, #0]
 802e614:	697a      	ldr	r2, [r7, #20]
 802e616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802e61a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 802e61e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 802e620:	2300      	movs	r3, #0
}
 802e622:	4618      	mov	r0, r3
 802e624:	371c      	adds	r7, #28
 802e626:	46bd      	mov	sp, r7
 802e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e62c:	4770      	bx	lr
 802e62e:	bf00      	nop
 802e630:	4f54300a 	.word	0x4f54300a

0802e634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802e634:	b480      	push	{r7}
 802e636:	b085      	sub	sp, #20
 802e638:	af00      	add	r7, sp, #0
 802e63a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802e63c:	2300      	movs	r3, #0
 802e63e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802e640:	68fb      	ldr	r3, [r7, #12]
 802e642:	3301      	adds	r3, #1
 802e644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e646:	68fb      	ldr	r3, [r7, #12]
 802e648:	4a13      	ldr	r2, [pc, #76]	; (802e698 <USB_CoreReset+0x64>)
 802e64a:	4293      	cmp	r3, r2
 802e64c:	d901      	bls.n	802e652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802e64e:	2303      	movs	r3, #3
 802e650:	e01b      	b.n	802e68a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802e652:	687b      	ldr	r3, [r7, #4]
 802e654:	691b      	ldr	r3, [r3, #16]
 802e656:	2b00      	cmp	r3, #0
 802e658:	daf2      	bge.n	802e640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802e65a:	2300      	movs	r3, #0
 802e65c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802e65e:	687b      	ldr	r3, [r7, #4]
 802e660:	691b      	ldr	r3, [r3, #16]
 802e662:	f043 0201 	orr.w	r2, r3, #1
 802e666:	687b      	ldr	r3, [r7, #4]
 802e668:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802e66a:	68fb      	ldr	r3, [r7, #12]
 802e66c:	3301      	adds	r3, #1
 802e66e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802e670:	68fb      	ldr	r3, [r7, #12]
 802e672:	4a09      	ldr	r2, [pc, #36]	; (802e698 <USB_CoreReset+0x64>)
 802e674:	4293      	cmp	r3, r2
 802e676:	d901      	bls.n	802e67c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802e678:	2303      	movs	r3, #3
 802e67a:	e006      	b.n	802e68a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802e67c:	687b      	ldr	r3, [r7, #4]
 802e67e:	691b      	ldr	r3, [r3, #16]
 802e680:	f003 0301 	and.w	r3, r3, #1
 802e684:	2b01      	cmp	r3, #1
 802e686:	d0f0      	beq.n	802e66a <USB_CoreReset+0x36>

  return HAL_OK;
 802e688:	2300      	movs	r3, #0
}
 802e68a:	4618      	mov	r0, r3
 802e68c:	3714      	adds	r7, #20
 802e68e:	46bd      	mov	sp, r7
 802e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e694:	4770      	bx	lr
 802e696:	bf00      	nop
 802e698:	00030d40 	.word	0x00030d40

0802e69c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e69c:	b580      	push	{r7, lr}
 802e69e:	b084      	sub	sp, #16
 802e6a0:	af00      	add	r7, sp, #0
 802e6a2:	6078      	str	r0, [r7, #4]
 802e6a4:	460b      	mov	r3, r1
 802e6a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 802e6a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 802e6ac:	f002 fefa 	bl	80314a4 <USBD_static_malloc>
 802e6b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 802e6b2:	68fb      	ldr	r3, [r7, #12]
 802e6b4:	2b00      	cmp	r3, #0
 802e6b6:	d109      	bne.n	802e6cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e6b8:	687b      	ldr	r3, [r7, #4]
 802e6ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6be:	687b      	ldr	r3, [r7, #4]
 802e6c0:	32b0      	adds	r2, #176	; 0xb0
 802e6c2:	2100      	movs	r1, #0
 802e6c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 802e6c8:	2302      	movs	r3, #2
 802e6ca:	e0d4      	b.n	802e876 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 802e6cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 802e6d0:	2100      	movs	r1, #0
 802e6d2:	68f8      	ldr	r0, [r7, #12]
 802e6d4:	f003 f932 	bl	803193c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 802e6d8:	687b      	ldr	r3, [r7, #4]
 802e6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6de:	687b      	ldr	r3, [r7, #4]
 802e6e0:	32b0      	adds	r2, #176	; 0xb0
 802e6e2:	68f9      	ldr	r1, [r7, #12]
 802e6e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 802e6e8:	687b      	ldr	r3, [r7, #4]
 802e6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e6ee:	687b      	ldr	r3, [r7, #4]
 802e6f0:	32b0      	adds	r2, #176	; 0xb0
 802e6f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802e6f6:	687b      	ldr	r3, [r7, #4]
 802e6f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e6fc:	687b      	ldr	r3, [r7, #4]
 802e6fe:	7c1b      	ldrb	r3, [r3, #16]
 802e700:	2b00      	cmp	r3, #0
 802e702:	d138      	bne.n	802e776 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e704:	4b5e      	ldr	r3, [pc, #376]	; (802e880 <USBD_CDC_Init+0x1e4>)
 802e706:	7819      	ldrb	r1, [r3, #0]
 802e708:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e70c:	2202      	movs	r2, #2
 802e70e:	6878      	ldr	r0, [r7, #4]
 802e710:	f002 fda5 	bl	803125e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e714:	4b5a      	ldr	r3, [pc, #360]	; (802e880 <USBD_CDC_Init+0x1e4>)
 802e716:	781b      	ldrb	r3, [r3, #0]
 802e718:	f003 020f 	and.w	r2, r3, #15
 802e71c:	6879      	ldr	r1, [r7, #4]
 802e71e:	4613      	mov	r3, r2
 802e720:	009b      	lsls	r3, r3, #2
 802e722:	4413      	add	r3, r2
 802e724:	009b      	lsls	r3, r3, #2
 802e726:	440b      	add	r3, r1
 802e728:	3324      	adds	r3, #36	; 0x24
 802e72a:	2201      	movs	r2, #1
 802e72c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e72e:	4b55      	ldr	r3, [pc, #340]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e730:	7819      	ldrb	r1, [r3, #0]
 802e732:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e736:	2202      	movs	r2, #2
 802e738:	6878      	ldr	r0, [r7, #4]
 802e73a:	f002 fd90 	bl	803125e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e73e:	4b51      	ldr	r3, [pc, #324]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e740:	781b      	ldrb	r3, [r3, #0]
 802e742:	f003 020f 	and.w	r2, r3, #15
 802e746:	6879      	ldr	r1, [r7, #4]
 802e748:	4613      	mov	r3, r2
 802e74a:	009b      	lsls	r3, r3, #2
 802e74c:	4413      	add	r3, r2
 802e74e:	009b      	lsls	r3, r3, #2
 802e750:	440b      	add	r3, r1
 802e752:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e756:	2201      	movs	r2, #1
 802e758:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 802e75a:	4b4b      	ldr	r3, [pc, #300]	; (802e888 <USBD_CDC_Init+0x1ec>)
 802e75c:	781b      	ldrb	r3, [r3, #0]
 802e75e:	f003 020f 	and.w	r2, r3, #15
 802e762:	6879      	ldr	r1, [r7, #4]
 802e764:	4613      	mov	r3, r2
 802e766:	009b      	lsls	r3, r3, #2
 802e768:	4413      	add	r3, r2
 802e76a:	009b      	lsls	r3, r3, #2
 802e76c:	440b      	add	r3, r1
 802e76e:	3326      	adds	r3, #38	; 0x26
 802e770:	2210      	movs	r2, #16
 802e772:	801a      	strh	r2, [r3, #0]
 802e774:	e035      	b.n	802e7e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 802e776:	4b42      	ldr	r3, [pc, #264]	; (802e880 <USBD_CDC_Init+0x1e4>)
 802e778:	7819      	ldrb	r1, [r3, #0]
 802e77a:	2340      	movs	r3, #64	; 0x40
 802e77c:	2202      	movs	r2, #2
 802e77e:	6878      	ldr	r0, [r7, #4]
 802e780:	f002 fd6d 	bl	803125e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 802e784:	4b3e      	ldr	r3, [pc, #248]	; (802e880 <USBD_CDC_Init+0x1e4>)
 802e786:	781b      	ldrb	r3, [r3, #0]
 802e788:	f003 020f 	and.w	r2, r3, #15
 802e78c:	6879      	ldr	r1, [r7, #4]
 802e78e:	4613      	mov	r3, r2
 802e790:	009b      	lsls	r3, r3, #2
 802e792:	4413      	add	r3, r2
 802e794:	009b      	lsls	r3, r3, #2
 802e796:	440b      	add	r3, r1
 802e798:	3324      	adds	r3, #36	; 0x24
 802e79a:	2201      	movs	r2, #1
 802e79c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 802e79e:	4b39      	ldr	r3, [pc, #228]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e7a0:	7819      	ldrb	r1, [r3, #0]
 802e7a2:	2340      	movs	r3, #64	; 0x40
 802e7a4:	2202      	movs	r2, #2
 802e7a6:	6878      	ldr	r0, [r7, #4]
 802e7a8:	f002 fd59 	bl	803125e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 802e7ac:	4b35      	ldr	r3, [pc, #212]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e7ae:	781b      	ldrb	r3, [r3, #0]
 802e7b0:	f003 020f 	and.w	r2, r3, #15
 802e7b4:	6879      	ldr	r1, [r7, #4]
 802e7b6:	4613      	mov	r3, r2
 802e7b8:	009b      	lsls	r3, r3, #2
 802e7ba:	4413      	add	r3, r2
 802e7bc:	009b      	lsls	r3, r3, #2
 802e7be:	440b      	add	r3, r1
 802e7c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e7c4:	2201      	movs	r2, #1
 802e7c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 802e7c8:	4b2f      	ldr	r3, [pc, #188]	; (802e888 <USBD_CDC_Init+0x1ec>)
 802e7ca:	781b      	ldrb	r3, [r3, #0]
 802e7cc:	f003 020f 	and.w	r2, r3, #15
 802e7d0:	6879      	ldr	r1, [r7, #4]
 802e7d2:	4613      	mov	r3, r2
 802e7d4:	009b      	lsls	r3, r3, #2
 802e7d6:	4413      	add	r3, r2
 802e7d8:	009b      	lsls	r3, r3, #2
 802e7da:	440b      	add	r3, r1
 802e7dc:	3326      	adds	r3, #38	; 0x26
 802e7de:	2210      	movs	r2, #16
 802e7e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 802e7e2:	4b29      	ldr	r3, [pc, #164]	; (802e888 <USBD_CDC_Init+0x1ec>)
 802e7e4:	7819      	ldrb	r1, [r3, #0]
 802e7e6:	2308      	movs	r3, #8
 802e7e8:	2203      	movs	r2, #3
 802e7ea:	6878      	ldr	r0, [r7, #4]
 802e7ec:	f002 fd37 	bl	803125e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 802e7f0:	4b25      	ldr	r3, [pc, #148]	; (802e888 <USBD_CDC_Init+0x1ec>)
 802e7f2:	781b      	ldrb	r3, [r3, #0]
 802e7f4:	f003 020f 	and.w	r2, r3, #15
 802e7f8:	6879      	ldr	r1, [r7, #4]
 802e7fa:	4613      	mov	r3, r2
 802e7fc:	009b      	lsls	r3, r3, #2
 802e7fe:	4413      	add	r3, r2
 802e800:	009b      	lsls	r3, r3, #2
 802e802:	440b      	add	r3, r1
 802e804:	3324      	adds	r3, #36	; 0x24
 802e806:	2201      	movs	r2, #1
 802e808:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 802e80a:	68fb      	ldr	r3, [r7, #12]
 802e80c:	2200      	movs	r2, #0
 802e80e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 802e812:	687b      	ldr	r3, [r7, #4]
 802e814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e818:	687a      	ldr	r2, [r7, #4]
 802e81a:	33b0      	adds	r3, #176	; 0xb0
 802e81c:	009b      	lsls	r3, r3, #2
 802e81e:	4413      	add	r3, r2
 802e820:	685b      	ldr	r3, [r3, #4]
 802e822:	681b      	ldr	r3, [r3, #0]
 802e824:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 802e826:	68fb      	ldr	r3, [r7, #12]
 802e828:	2200      	movs	r2, #0
 802e82a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 802e82e:	68fb      	ldr	r3, [r7, #12]
 802e830:	2200      	movs	r2, #0
 802e832:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 802e836:	68fb      	ldr	r3, [r7, #12]
 802e838:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 802e83c:	2b00      	cmp	r3, #0
 802e83e:	d101      	bne.n	802e844 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 802e840:	2302      	movs	r3, #2
 802e842:	e018      	b.n	802e876 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802e844:	687b      	ldr	r3, [r7, #4]
 802e846:	7c1b      	ldrb	r3, [r3, #16]
 802e848:	2b00      	cmp	r3, #0
 802e84a:	d10a      	bne.n	802e862 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e84c:	4b0d      	ldr	r3, [pc, #52]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e84e:	7819      	ldrb	r1, [r3, #0]
 802e850:	68fb      	ldr	r3, [r7, #12]
 802e852:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e856:	f44f 7300 	mov.w	r3, #512	; 0x200
 802e85a:	6878      	ldr	r0, [r7, #4]
 802e85c:	f002 fdee 	bl	803143c <USBD_LL_PrepareReceive>
 802e860:	e008      	b.n	802e874 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802e862:	4b08      	ldr	r3, [pc, #32]	; (802e884 <USBD_CDC_Init+0x1e8>)
 802e864:	7819      	ldrb	r1, [r3, #0]
 802e866:	68fb      	ldr	r3, [r7, #12]
 802e868:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802e86c:	2340      	movs	r3, #64	; 0x40
 802e86e:	6878      	ldr	r0, [r7, #4]
 802e870:	f002 fde4 	bl	803143c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802e874:	2300      	movs	r3, #0
}
 802e876:	4618      	mov	r0, r3
 802e878:	3710      	adds	r7, #16
 802e87a:	46bd      	mov	sp, r7
 802e87c:	bd80      	pop	{r7, pc}
 802e87e:	bf00      	nop
 802e880:	200001cb 	.word	0x200001cb
 802e884:	200001cc 	.word	0x200001cc
 802e888:	200001cd 	.word	0x200001cd

0802e88c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802e88c:	b580      	push	{r7, lr}
 802e88e:	b082      	sub	sp, #8
 802e890:	af00      	add	r7, sp, #0
 802e892:	6078      	str	r0, [r7, #4]
 802e894:	460b      	mov	r3, r1
 802e896:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802e898:	4b3a      	ldr	r3, [pc, #232]	; (802e984 <USBD_CDC_DeInit+0xf8>)
 802e89a:	781b      	ldrb	r3, [r3, #0]
 802e89c:	4619      	mov	r1, r3
 802e89e:	6878      	ldr	r0, [r7, #4]
 802e8a0:	f002 fd03 	bl	80312aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 802e8a4:	4b37      	ldr	r3, [pc, #220]	; (802e984 <USBD_CDC_DeInit+0xf8>)
 802e8a6:	781b      	ldrb	r3, [r3, #0]
 802e8a8:	f003 020f 	and.w	r2, r3, #15
 802e8ac:	6879      	ldr	r1, [r7, #4]
 802e8ae:	4613      	mov	r3, r2
 802e8b0:	009b      	lsls	r3, r3, #2
 802e8b2:	4413      	add	r3, r2
 802e8b4:	009b      	lsls	r3, r3, #2
 802e8b6:	440b      	add	r3, r1
 802e8b8:	3324      	adds	r3, #36	; 0x24
 802e8ba:	2200      	movs	r2, #0
 802e8bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 802e8be:	4b32      	ldr	r3, [pc, #200]	; (802e988 <USBD_CDC_DeInit+0xfc>)
 802e8c0:	781b      	ldrb	r3, [r3, #0]
 802e8c2:	4619      	mov	r1, r3
 802e8c4:	6878      	ldr	r0, [r7, #4]
 802e8c6:	f002 fcf0 	bl	80312aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802e8ca:	4b2f      	ldr	r3, [pc, #188]	; (802e988 <USBD_CDC_DeInit+0xfc>)
 802e8cc:	781b      	ldrb	r3, [r3, #0]
 802e8ce:	f003 020f 	and.w	r2, r3, #15
 802e8d2:	6879      	ldr	r1, [r7, #4]
 802e8d4:	4613      	mov	r3, r2
 802e8d6:	009b      	lsls	r3, r3, #2
 802e8d8:	4413      	add	r3, r2
 802e8da:	009b      	lsls	r3, r3, #2
 802e8dc:	440b      	add	r3, r1
 802e8de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802e8e2:	2200      	movs	r2, #0
 802e8e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802e8e6:	4b29      	ldr	r3, [pc, #164]	; (802e98c <USBD_CDC_DeInit+0x100>)
 802e8e8:	781b      	ldrb	r3, [r3, #0]
 802e8ea:	4619      	mov	r1, r3
 802e8ec:	6878      	ldr	r0, [r7, #4]
 802e8ee:	f002 fcdc 	bl	80312aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 802e8f2:	4b26      	ldr	r3, [pc, #152]	; (802e98c <USBD_CDC_DeInit+0x100>)
 802e8f4:	781b      	ldrb	r3, [r3, #0]
 802e8f6:	f003 020f 	and.w	r2, r3, #15
 802e8fa:	6879      	ldr	r1, [r7, #4]
 802e8fc:	4613      	mov	r3, r2
 802e8fe:	009b      	lsls	r3, r3, #2
 802e900:	4413      	add	r3, r2
 802e902:	009b      	lsls	r3, r3, #2
 802e904:	440b      	add	r3, r1
 802e906:	3324      	adds	r3, #36	; 0x24
 802e908:	2200      	movs	r2, #0
 802e90a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 802e90c:	4b1f      	ldr	r3, [pc, #124]	; (802e98c <USBD_CDC_DeInit+0x100>)
 802e90e:	781b      	ldrb	r3, [r3, #0]
 802e910:	f003 020f 	and.w	r2, r3, #15
 802e914:	6879      	ldr	r1, [r7, #4]
 802e916:	4613      	mov	r3, r2
 802e918:	009b      	lsls	r3, r3, #2
 802e91a:	4413      	add	r3, r2
 802e91c:	009b      	lsls	r3, r3, #2
 802e91e:	440b      	add	r3, r1
 802e920:	3326      	adds	r3, #38	; 0x26
 802e922:	2200      	movs	r2, #0
 802e924:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 802e926:	687b      	ldr	r3, [r7, #4]
 802e928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e92c:	687b      	ldr	r3, [r7, #4]
 802e92e:	32b0      	adds	r2, #176	; 0xb0
 802e930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e934:	2b00      	cmp	r3, #0
 802e936:	d01f      	beq.n	802e978 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 802e938:	687b      	ldr	r3, [r7, #4]
 802e93a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e93e:	687a      	ldr	r2, [r7, #4]
 802e940:	33b0      	adds	r3, #176	; 0xb0
 802e942:	009b      	lsls	r3, r3, #2
 802e944:	4413      	add	r3, r2
 802e946:	685b      	ldr	r3, [r3, #4]
 802e948:	685b      	ldr	r3, [r3, #4]
 802e94a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 802e94c:	687b      	ldr	r3, [r7, #4]
 802e94e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e952:	687b      	ldr	r3, [r7, #4]
 802e954:	32b0      	adds	r2, #176	; 0xb0
 802e956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e95a:	4618      	mov	r0, r3
 802e95c:	f002 fdb0 	bl	80314c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 802e960:	687b      	ldr	r3, [r7, #4]
 802e962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e966:	687b      	ldr	r3, [r7, #4]
 802e968:	32b0      	adds	r2, #176	; 0xb0
 802e96a:	2100      	movs	r1, #0
 802e96c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 802e970:	687b      	ldr	r3, [r7, #4]
 802e972:	2200      	movs	r2, #0
 802e974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802e978:	2300      	movs	r3, #0
}
 802e97a:	4618      	mov	r0, r3
 802e97c:	3708      	adds	r7, #8
 802e97e:	46bd      	mov	sp, r7
 802e980:	bd80      	pop	{r7, pc}
 802e982:	bf00      	nop
 802e984:	200001cb 	.word	0x200001cb
 802e988:	200001cc 	.word	0x200001cc
 802e98c:	200001cd 	.word	0x200001cd

0802e990 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 802e990:	b580      	push	{r7, lr}
 802e992:	b086      	sub	sp, #24
 802e994:	af00      	add	r7, sp, #0
 802e996:	6078      	str	r0, [r7, #4]
 802e998:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802e99a:	687b      	ldr	r3, [r7, #4]
 802e99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802e9a0:	687b      	ldr	r3, [r7, #4]
 802e9a2:	32b0      	adds	r2, #176	; 0xb0
 802e9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e9a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802e9aa:	2300      	movs	r3, #0
 802e9ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 802e9ae:	2300      	movs	r3, #0
 802e9b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 802e9b2:	2300      	movs	r3, #0
 802e9b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802e9b6:	693b      	ldr	r3, [r7, #16]
 802e9b8:	2b00      	cmp	r3, #0
 802e9ba:	d101      	bne.n	802e9c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 802e9bc:	2303      	movs	r3, #3
 802e9be:	e0bf      	b.n	802eb40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802e9c0:	683b      	ldr	r3, [r7, #0]
 802e9c2:	781b      	ldrb	r3, [r3, #0]
 802e9c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802e9c8:	2b00      	cmp	r3, #0
 802e9ca:	d050      	beq.n	802ea6e <USBD_CDC_Setup+0xde>
 802e9cc:	2b20      	cmp	r3, #32
 802e9ce:	f040 80af 	bne.w	802eb30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 802e9d2:	683b      	ldr	r3, [r7, #0]
 802e9d4:	88db      	ldrh	r3, [r3, #6]
 802e9d6:	2b00      	cmp	r3, #0
 802e9d8:	d03a      	beq.n	802ea50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802e9da:	683b      	ldr	r3, [r7, #0]
 802e9dc:	781b      	ldrb	r3, [r3, #0]
 802e9de:	b25b      	sxtb	r3, r3
 802e9e0:	2b00      	cmp	r3, #0
 802e9e2:	da1b      	bge.n	802ea1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e9e4:	687b      	ldr	r3, [r7, #4]
 802e9e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802e9ea:	687a      	ldr	r2, [r7, #4]
 802e9ec:	33b0      	adds	r3, #176	; 0xb0
 802e9ee:	009b      	lsls	r3, r3, #2
 802e9f0:	4413      	add	r3, r2
 802e9f2:	685b      	ldr	r3, [r3, #4]
 802e9f4:	689b      	ldr	r3, [r3, #8]
 802e9f6:	683a      	ldr	r2, [r7, #0]
 802e9f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802e9fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802e9fc:	683a      	ldr	r2, [r7, #0]
 802e9fe:	88d2      	ldrh	r2, [r2, #6]
 802ea00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 802ea02:	683b      	ldr	r3, [r7, #0]
 802ea04:	88db      	ldrh	r3, [r3, #6]
 802ea06:	2b07      	cmp	r3, #7
 802ea08:	bf28      	it	cs
 802ea0a:	2307      	movcs	r3, #7
 802ea0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 802ea0e:	693b      	ldr	r3, [r7, #16]
 802ea10:	89fa      	ldrh	r2, [r7, #14]
 802ea12:	4619      	mov	r1, r3
 802ea14:	6878      	ldr	r0, [r7, #4]
 802ea16:	f001 fd89 	bl	803052c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 802ea1a:	e090      	b.n	802eb3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 802ea1c:	683b      	ldr	r3, [r7, #0]
 802ea1e:	785a      	ldrb	r2, [r3, #1]
 802ea20:	693b      	ldr	r3, [r7, #16]
 802ea22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 802ea26:	683b      	ldr	r3, [r7, #0]
 802ea28:	88db      	ldrh	r3, [r3, #6]
 802ea2a:	2b3f      	cmp	r3, #63	; 0x3f
 802ea2c:	d803      	bhi.n	802ea36 <USBD_CDC_Setup+0xa6>
 802ea2e:	683b      	ldr	r3, [r7, #0]
 802ea30:	88db      	ldrh	r3, [r3, #6]
 802ea32:	b2da      	uxtb	r2, r3
 802ea34:	e000      	b.n	802ea38 <USBD_CDC_Setup+0xa8>
 802ea36:	2240      	movs	r2, #64	; 0x40
 802ea38:	693b      	ldr	r3, [r7, #16]
 802ea3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 802ea3e:	6939      	ldr	r1, [r7, #16]
 802ea40:	693b      	ldr	r3, [r7, #16]
 802ea42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 802ea46:	461a      	mov	r2, r3
 802ea48:	6878      	ldr	r0, [r7, #4]
 802ea4a:	f001 fd9b 	bl	8030584 <USBD_CtlPrepareRx>
      break;
 802ea4e:	e076      	b.n	802eb3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 802ea50:	687b      	ldr	r3, [r7, #4]
 802ea52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ea56:	687a      	ldr	r2, [r7, #4]
 802ea58:	33b0      	adds	r3, #176	; 0xb0
 802ea5a:	009b      	lsls	r3, r3, #2
 802ea5c:	4413      	add	r3, r2
 802ea5e:	685b      	ldr	r3, [r3, #4]
 802ea60:	689b      	ldr	r3, [r3, #8]
 802ea62:	683a      	ldr	r2, [r7, #0]
 802ea64:	7850      	ldrb	r0, [r2, #1]
 802ea66:	2200      	movs	r2, #0
 802ea68:	6839      	ldr	r1, [r7, #0]
 802ea6a:	4798      	blx	r3
      break;
 802ea6c:	e067      	b.n	802eb3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802ea6e:	683b      	ldr	r3, [r7, #0]
 802ea70:	785b      	ldrb	r3, [r3, #1]
 802ea72:	2b0b      	cmp	r3, #11
 802ea74:	d851      	bhi.n	802eb1a <USBD_CDC_Setup+0x18a>
 802ea76:	a201      	add	r2, pc, #4	; (adr r2, 802ea7c <USBD_CDC_Setup+0xec>)
 802ea78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ea7c:	0802eaad 	.word	0x0802eaad
 802ea80:	0802eb29 	.word	0x0802eb29
 802ea84:	0802eb1b 	.word	0x0802eb1b
 802ea88:	0802eb1b 	.word	0x0802eb1b
 802ea8c:	0802eb1b 	.word	0x0802eb1b
 802ea90:	0802eb1b 	.word	0x0802eb1b
 802ea94:	0802eb1b 	.word	0x0802eb1b
 802ea98:	0802eb1b 	.word	0x0802eb1b
 802ea9c:	0802eb1b 	.word	0x0802eb1b
 802eaa0:	0802eb1b 	.word	0x0802eb1b
 802eaa4:	0802ead7 	.word	0x0802ead7
 802eaa8:	0802eb01 	.word	0x0802eb01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802eaac:	687b      	ldr	r3, [r7, #4]
 802eaae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eab2:	b2db      	uxtb	r3, r3
 802eab4:	2b03      	cmp	r3, #3
 802eab6:	d107      	bne.n	802eac8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802eab8:	f107 030a 	add.w	r3, r7, #10
 802eabc:	2202      	movs	r2, #2
 802eabe:	4619      	mov	r1, r3
 802eac0:	6878      	ldr	r0, [r7, #4]
 802eac2:	f001 fd33 	bl	803052c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802eac6:	e032      	b.n	802eb2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802eac8:	6839      	ldr	r1, [r7, #0]
 802eaca:	6878      	ldr	r0, [r7, #4]
 802eacc:	f001 fcbd 	bl	803044a <USBD_CtlError>
            ret = USBD_FAIL;
 802ead0:	2303      	movs	r3, #3
 802ead2:	75fb      	strb	r3, [r7, #23]
          break;
 802ead4:	e02b      	b.n	802eb2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802ead6:	687b      	ldr	r3, [r7, #4]
 802ead8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eadc:	b2db      	uxtb	r3, r3
 802eade:	2b03      	cmp	r3, #3
 802eae0:	d107      	bne.n	802eaf2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 802eae2:	f107 030d 	add.w	r3, r7, #13
 802eae6:	2201      	movs	r2, #1
 802eae8:	4619      	mov	r1, r3
 802eaea:	6878      	ldr	r0, [r7, #4]
 802eaec:	f001 fd1e 	bl	803052c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802eaf0:	e01d      	b.n	802eb2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802eaf2:	6839      	ldr	r1, [r7, #0]
 802eaf4:	6878      	ldr	r0, [r7, #4]
 802eaf6:	f001 fca8 	bl	803044a <USBD_CtlError>
            ret = USBD_FAIL;
 802eafa:	2303      	movs	r3, #3
 802eafc:	75fb      	strb	r3, [r7, #23]
          break;
 802eafe:	e016      	b.n	802eb2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802eb00:	687b      	ldr	r3, [r7, #4]
 802eb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802eb06:	b2db      	uxtb	r3, r3
 802eb08:	2b03      	cmp	r3, #3
 802eb0a:	d00f      	beq.n	802eb2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 802eb0c:	6839      	ldr	r1, [r7, #0]
 802eb0e:	6878      	ldr	r0, [r7, #4]
 802eb10:	f001 fc9b 	bl	803044a <USBD_CtlError>
            ret = USBD_FAIL;
 802eb14:	2303      	movs	r3, #3
 802eb16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 802eb18:	e008      	b.n	802eb2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 802eb1a:	6839      	ldr	r1, [r7, #0]
 802eb1c:	6878      	ldr	r0, [r7, #4]
 802eb1e:	f001 fc94 	bl	803044a <USBD_CtlError>
          ret = USBD_FAIL;
 802eb22:	2303      	movs	r3, #3
 802eb24:	75fb      	strb	r3, [r7, #23]
          break;
 802eb26:	e002      	b.n	802eb2e <USBD_CDC_Setup+0x19e>
          break;
 802eb28:	bf00      	nop
 802eb2a:	e008      	b.n	802eb3e <USBD_CDC_Setup+0x1ae>
          break;
 802eb2c:	bf00      	nop
      }
      break;
 802eb2e:	e006      	b.n	802eb3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 802eb30:	6839      	ldr	r1, [r7, #0]
 802eb32:	6878      	ldr	r0, [r7, #4]
 802eb34:	f001 fc89 	bl	803044a <USBD_CtlError>
      ret = USBD_FAIL;
 802eb38:	2303      	movs	r3, #3
 802eb3a:	75fb      	strb	r3, [r7, #23]
      break;
 802eb3c:	bf00      	nop
  }

  return (uint8_t)ret;
 802eb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 802eb40:	4618      	mov	r0, r3
 802eb42:	3718      	adds	r7, #24
 802eb44:	46bd      	mov	sp, r7
 802eb46:	bd80      	pop	{r7, pc}

0802eb48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802eb48:	b580      	push	{r7, lr}
 802eb4a:	b084      	sub	sp, #16
 802eb4c:	af00      	add	r7, sp, #0
 802eb4e:	6078      	str	r0, [r7, #4]
 802eb50:	460b      	mov	r3, r1
 802eb52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 802eb54:	687b      	ldr	r3, [r7, #4]
 802eb56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802eb5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eb62:	687b      	ldr	r3, [r7, #4]
 802eb64:	32b0      	adds	r2, #176	; 0xb0
 802eb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eb6a:	2b00      	cmp	r3, #0
 802eb6c:	d101      	bne.n	802eb72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 802eb6e:	2303      	movs	r3, #3
 802eb70:	e065      	b.n	802ec3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802eb72:	687b      	ldr	r3, [r7, #4]
 802eb74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eb78:	687b      	ldr	r3, [r7, #4]
 802eb7a:	32b0      	adds	r2, #176	; 0xb0
 802eb7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eb80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802eb82:	78fb      	ldrb	r3, [r7, #3]
 802eb84:	f003 020f 	and.w	r2, r3, #15
 802eb88:	6879      	ldr	r1, [r7, #4]
 802eb8a:	4613      	mov	r3, r2
 802eb8c:	009b      	lsls	r3, r3, #2
 802eb8e:	4413      	add	r3, r2
 802eb90:	009b      	lsls	r3, r3, #2
 802eb92:	440b      	add	r3, r1
 802eb94:	3318      	adds	r3, #24
 802eb96:	681b      	ldr	r3, [r3, #0]
 802eb98:	2b00      	cmp	r3, #0
 802eb9a:	d02f      	beq.n	802ebfc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 802eb9c:	78fb      	ldrb	r3, [r7, #3]
 802eb9e:	f003 020f 	and.w	r2, r3, #15
 802eba2:	6879      	ldr	r1, [r7, #4]
 802eba4:	4613      	mov	r3, r2
 802eba6:	009b      	lsls	r3, r3, #2
 802eba8:	4413      	add	r3, r2
 802ebaa:	009b      	lsls	r3, r3, #2
 802ebac:	440b      	add	r3, r1
 802ebae:	3318      	adds	r3, #24
 802ebb0:	681a      	ldr	r2, [r3, #0]
 802ebb2:	78fb      	ldrb	r3, [r7, #3]
 802ebb4:	f003 010f 	and.w	r1, r3, #15
 802ebb8:	68f8      	ldr	r0, [r7, #12]
 802ebba:	460b      	mov	r3, r1
 802ebbc:	00db      	lsls	r3, r3, #3
 802ebbe:	440b      	add	r3, r1
 802ebc0:	009b      	lsls	r3, r3, #2
 802ebc2:	4403      	add	r3, r0
 802ebc4:	3348      	adds	r3, #72	; 0x48
 802ebc6:	681b      	ldr	r3, [r3, #0]
 802ebc8:	fbb2 f1f3 	udiv	r1, r2, r3
 802ebcc:	fb01 f303 	mul.w	r3, r1, r3
 802ebd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 802ebd2:	2b00      	cmp	r3, #0
 802ebd4:	d112      	bne.n	802ebfc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802ebd6:	78fb      	ldrb	r3, [r7, #3]
 802ebd8:	f003 020f 	and.w	r2, r3, #15
 802ebdc:	6879      	ldr	r1, [r7, #4]
 802ebde:	4613      	mov	r3, r2
 802ebe0:	009b      	lsls	r3, r3, #2
 802ebe2:	4413      	add	r3, r2
 802ebe4:	009b      	lsls	r3, r3, #2
 802ebe6:	440b      	add	r3, r1
 802ebe8:	3318      	adds	r3, #24
 802ebea:	2200      	movs	r2, #0
 802ebec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802ebee:	78f9      	ldrb	r1, [r7, #3]
 802ebf0:	2300      	movs	r3, #0
 802ebf2:	2200      	movs	r2, #0
 802ebf4:	6878      	ldr	r0, [r7, #4]
 802ebf6:	f002 fc00 	bl	80313fa <USBD_LL_Transmit>
 802ebfa:	e01f      	b.n	802ec3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 802ebfc:	68bb      	ldr	r3, [r7, #8]
 802ebfe:	2200      	movs	r2, #0
 802ec00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 802ec04:	687b      	ldr	r3, [r7, #4]
 802ec06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec0a:	687a      	ldr	r2, [r7, #4]
 802ec0c:	33b0      	adds	r3, #176	; 0xb0
 802ec0e:	009b      	lsls	r3, r3, #2
 802ec10:	4413      	add	r3, r2
 802ec12:	685b      	ldr	r3, [r3, #4]
 802ec14:	691b      	ldr	r3, [r3, #16]
 802ec16:	2b00      	cmp	r3, #0
 802ec18:	d010      	beq.n	802ec3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 802ec1a:	687b      	ldr	r3, [r7, #4]
 802ec1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec20:	687a      	ldr	r2, [r7, #4]
 802ec22:	33b0      	adds	r3, #176	; 0xb0
 802ec24:	009b      	lsls	r3, r3, #2
 802ec26:	4413      	add	r3, r2
 802ec28:	685b      	ldr	r3, [r3, #4]
 802ec2a:	691b      	ldr	r3, [r3, #16]
 802ec2c:	68ba      	ldr	r2, [r7, #8]
 802ec2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 802ec32:	68ba      	ldr	r2, [r7, #8]
 802ec34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 802ec38:	78fa      	ldrb	r2, [r7, #3]
 802ec3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 802ec3c:	2300      	movs	r3, #0
}
 802ec3e:	4618      	mov	r0, r3
 802ec40:	3710      	adds	r7, #16
 802ec42:	46bd      	mov	sp, r7
 802ec44:	bd80      	pop	{r7, pc}

0802ec46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802ec46:	b580      	push	{r7, lr}
 802ec48:	b084      	sub	sp, #16
 802ec4a:	af00      	add	r7, sp, #0
 802ec4c:	6078      	str	r0, [r7, #4]
 802ec4e:	460b      	mov	r3, r1
 802ec50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ec52:	687b      	ldr	r3, [r7, #4]
 802ec54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ec58:	687b      	ldr	r3, [r7, #4]
 802ec5a:	32b0      	adds	r2, #176	; 0xb0
 802ec5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ec60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ec62:	687b      	ldr	r3, [r7, #4]
 802ec64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ec68:	687b      	ldr	r3, [r7, #4]
 802ec6a:	32b0      	adds	r2, #176	; 0xb0
 802ec6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ec70:	2b00      	cmp	r3, #0
 802ec72:	d101      	bne.n	802ec78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802ec74:	2303      	movs	r3, #3
 802ec76:	e01a      	b.n	802ecae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802ec78:	78fb      	ldrb	r3, [r7, #3]
 802ec7a:	4619      	mov	r1, r3
 802ec7c:	6878      	ldr	r0, [r7, #4]
 802ec7e:	f002 fbfe 	bl	803147e <USBD_LL_GetRxDataSize>
 802ec82:	4602      	mov	r2, r0
 802ec84:	68fb      	ldr	r3, [r7, #12]
 802ec86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802ec8a:	687b      	ldr	r3, [r7, #4]
 802ec8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ec90:	687a      	ldr	r2, [r7, #4]
 802ec92:	33b0      	adds	r3, #176	; 0xb0
 802ec94:	009b      	lsls	r3, r3, #2
 802ec96:	4413      	add	r3, r2
 802ec98:	685b      	ldr	r3, [r3, #4]
 802ec9a:	68db      	ldr	r3, [r3, #12]
 802ec9c:	68fa      	ldr	r2, [r7, #12]
 802ec9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 802eca2:	68fa      	ldr	r2, [r7, #12]
 802eca4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802eca8:	4611      	mov	r1, r2
 802ecaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 802ecac:	2300      	movs	r3, #0
}
 802ecae:	4618      	mov	r0, r3
 802ecb0:	3710      	adds	r7, #16
 802ecb2:	46bd      	mov	sp, r7
 802ecb4:	bd80      	pop	{r7, pc}

0802ecb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802ecb6:	b580      	push	{r7, lr}
 802ecb8:	b084      	sub	sp, #16
 802ecba:	af00      	add	r7, sp, #0
 802ecbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ecbe:	687b      	ldr	r3, [r7, #4]
 802ecc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ecc4:	687b      	ldr	r3, [r7, #4]
 802ecc6:	32b0      	adds	r2, #176	; 0xb0
 802ecc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eccc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ecce:	68fb      	ldr	r3, [r7, #12]
 802ecd0:	2b00      	cmp	r3, #0
 802ecd2:	d101      	bne.n	802ecd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 802ecd4:	2303      	movs	r3, #3
 802ecd6:	e025      	b.n	802ed24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802ecd8:	687b      	ldr	r3, [r7, #4]
 802ecda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ecde:	687a      	ldr	r2, [r7, #4]
 802ece0:	33b0      	adds	r3, #176	; 0xb0
 802ece2:	009b      	lsls	r3, r3, #2
 802ece4:	4413      	add	r3, r2
 802ece6:	685b      	ldr	r3, [r3, #4]
 802ece8:	2b00      	cmp	r3, #0
 802ecea:	d01a      	beq.n	802ed22 <USBD_CDC_EP0_RxReady+0x6c>
 802ecec:	68fb      	ldr	r3, [r7, #12]
 802ecee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 802ecf2:	2bff      	cmp	r3, #255	; 0xff
 802ecf4:	d015      	beq.n	802ed22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ecf6:	687b      	ldr	r3, [r7, #4]
 802ecf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802ecfc:	687a      	ldr	r2, [r7, #4]
 802ecfe:	33b0      	adds	r3, #176	; 0xb0
 802ed00:	009b      	lsls	r3, r3, #2
 802ed02:	4413      	add	r3, r2
 802ed04:	685b      	ldr	r3, [r3, #4]
 802ed06:	689b      	ldr	r3, [r3, #8]
 802ed08:	68fa      	ldr	r2, [r7, #12]
 802ed0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 802ed0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 802ed10:	68fa      	ldr	r2, [r7, #12]
 802ed12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802ed16:	b292      	uxth	r2, r2
 802ed18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 802ed1a:	68fb      	ldr	r3, [r7, #12]
 802ed1c:	22ff      	movs	r2, #255	; 0xff
 802ed1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 802ed22:	2300      	movs	r3, #0
}
 802ed24:	4618      	mov	r0, r3
 802ed26:	3710      	adds	r7, #16
 802ed28:	46bd      	mov	sp, r7
 802ed2a:	bd80      	pop	{r7, pc}

0802ed2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 802ed2c:	b580      	push	{r7, lr}
 802ed2e:	b086      	sub	sp, #24
 802ed30:	af00      	add	r7, sp, #0
 802ed32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ed34:	2182      	movs	r1, #130	; 0x82
 802ed36:	4818      	ldr	r0, [pc, #96]	; (802ed98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed38:	f000 fd4f 	bl	802f7da <USBD_GetEpDesc>
 802ed3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ed3e:	2101      	movs	r1, #1
 802ed40:	4815      	ldr	r0, [pc, #84]	; (802ed98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed42:	f000 fd4a 	bl	802f7da <USBD_GetEpDesc>
 802ed46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ed48:	2181      	movs	r1, #129	; 0x81
 802ed4a:	4813      	ldr	r0, [pc, #76]	; (802ed98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 802ed4c:	f000 fd45 	bl	802f7da <USBD_GetEpDesc>
 802ed50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ed52:	697b      	ldr	r3, [r7, #20]
 802ed54:	2b00      	cmp	r3, #0
 802ed56:	d002      	beq.n	802ed5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802ed58:	697b      	ldr	r3, [r7, #20]
 802ed5a:	2210      	movs	r2, #16
 802ed5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ed5e:	693b      	ldr	r3, [r7, #16]
 802ed60:	2b00      	cmp	r3, #0
 802ed62:	d006      	beq.n	802ed72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ed64:	693b      	ldr	r3, [r7, #16]
 802ed66:	2200      	movs	r2, #0
 802ed68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed6c:	711a      	strb	r2, [r3, #4]
 802ed6e:	2200      	movs	r2, #0
 802ed70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ed72:	68fb      	ldr	r3, [r7, #12]
 802ed74:	2b00      	cmp	r3, #0
 802ed76:	d006      	beq.n	802ed86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ed78:	68fb      	ldr	r3, [r7, #12]
 802ed7a:	2200      	movs	r2, #0
 802ed7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ed80:	711a      	strb	r2, [r3, #4]
 802ed82:	2200      	movs	r2, #0
 802ed84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ed86:	687b      	ldr	r3, [r7, #4]
 802ed88:	2243      	movs	r2, #67	; 0x43
 802ed8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ed8c:	4b02      	ldr	r3, [pc, #8]	; (802ed98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 802ed8e:	4618      	mov	r0, r3
 802ed90:	3718      	adds	r7, #24
 802ed92:	46bd      	mov	sp, r7
 802ed94:	bd80      	pop	{r7, pc}
 802ed96:	bf00      	nop
 802ed98:	20000188 	.word	0x20000188

0802ed9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 802ed9c:	b580      	push	{r7, lr}
 802ed9e:	b086      	sub	sp, #24
 802eda0:	af00      	add	r7, sp, #0
 802eda2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802eda4:	2182      	movs	r1, #130	; 0x82
 802eda6:	4818      	ldr	r0, [pc, #96]	; (802ee08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802eda8:	f000 fd17 	bl	802f7da <USBD_GetEpDesc>
 802edac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802edae:	2101      	movs	r1, #1
 802edb0:	4815      	ldr	r0, [pc, #84]	; (802ee08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edb2:	f000 fd12 	bl	802f7da <USBD_GetEpDesc>
 802edb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802edb8:	2181      	movs	r1, #129	; 0x81
 802edba:	4813      	ldr	r0, [pc, #76]	; (802ee08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 802edbc:	f000 fd0d 	bl	802f7da <USBD_GetEpDesc>
 802edc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802edc2:	697b      	ldr	r3, [r7, #20]
 802edc4:	2b00      	cmp	r3, #0
 802edc6:	d002      	beq.n	802edce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802edc8:	697b      	ldr	r3, [r7, #20]
 802edca:	2210      	movs	r2, #16
 802edcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802edce:	693b      	ldr	r3, [r7, #16]
 802edd0:	2b00      	cmp	r3, #0
 802edd2:	d006      	beq.n	802ede2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802edd4:	693b      	ldr	r3, [r7, #16]
 802edd6:	2200      	movs	r2, #0
 802edd8:	711a      	strb	r2, [r3, #4]
 802edda:	2200      	movs	r2, #0
 802eddc:	f042 0202 	orr.w	r2, r2, #2
 802ede0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ede2:	68fb      	ldr	r3, [r7, #12]
 802ede4:	2b00      	cmp	r3, #0
 802ede6:	d006      	beq.n	802edf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802ede8:	68fb      	ldr	r3, [r7, #12]
 802edea:	2200      	movs	r2, #0
 802edec:	711a      	strb	r2, [r3, #4]
 802edee:	2200      	movs	r2, #0
 802edf0:	f042 0202 	orr.w	r2, r2, #2
 802edf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802edf6:	687b      	ldr	r3, [r7, #4]
 802edf8:	2243      	movs	r2, #67	; 0x43
 802edfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802edfc:	4b02      	ldr	r3, [pc, #8]	; (802ee08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 802edfe:	4618      	mov	r0, r3
 802ee00:	3718      	adds	r7, #24
 802ee02:	46bd      	mov	sp, r7
 802ee04:	bd80      	pop	{r7, pc}
 802ee06:	bf00      	nop
 802ee08:	20000188 	.word	0x20000188

0802ee0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 802ee0c:	b580      	push	{r7, lr}
 802ee0e:	b086      	sub	sp, #24
 802ee10:	af00      	add	r7, sp, #0
 802ee12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 802ee14:	2182      	movs	r1, #130	; 0x82
 802ee16:	4818      	ldr	r0, [pc, #96]	; (802ee78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee18:	f000 fcdf 	bl	802f7da <USBD_GetEpDesc>
 802ee1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 802ee1e:	2101      	movs	r1, #1
 802ee20:	4815      	ldr	r0, [pc, #84]	; (802ee78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee22:	f000 fcda 	bl	802f7da <USBD_GetEpDesc>
 802ee26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802ee28:	2181      	movs	r1, #129	; 0x81
 802ee2a:	4813      	ldr	r0, [pc, #76]	; (802ee78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 802ee2c:	f000 fcd5 	bl	802f7da <USBD_GetEpDesc>
 802ee30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 802ee32:	697b      	ldr	r3, [r7, #20]
 802ee34:	2b00      	cmp	r3, #0
 802ee36:	d002      	beq.n	802ee3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 802ee38:	697b      	ldr	r3, [r7, #20]
 802ee3a:	2210      	movs	r2, #16
 802ee3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 802ee3e:	693b      	ldr	r3, [r7, #16]
 802ee40:	2b00      	cmp	r3, #0
 802ee42:	d006      	beq.n	802ee52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ee44:	693b      	ldr	r3, [r7, #16]
 802ee46:	2200      	movs	r2, #0
 802ee48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee4c:	711a      	strb	r2, [r3, #4]
 802ee4e:	2200      	movs	r2, #0
 802ee50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 802ee52:	68fb      	ldr	r3, [r7, #12]
 802ee54:	2b00      	cmp	r3, #0
 802ee56:	d006      	beq.n	802ee66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802ee58:	68fb      	ldr	r3, [r7, #12]
 802ee5a:	2200      	movs	r2, #0
 802ee5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802ee60:	711a      	strb	r2, [r3, #4]
 802ee62:	2200      	movs	r2, #0
 802ee64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802ee66:	687b      	ldr	r3, [r7, #4]
 802ee68:	2243      	movs	r2, #67	; 0x43
 802ee6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 802ee6c:	4b02      	ldr	r3, [pc, #8]	; (802ee78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 802ee6e:	4618      	mov	r0, r3
 802ee70:	3718      	adds	r7, #24
 802ee72:	46bd      	mov	sp, r7
 802ee74:	bd80      	pop	{r7, pc}
 802ee76:	bf00      	nop
 802ee78:	20000188 	.word	0x20000188

0802ee7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 802ee7c:	b480      	push	{r7}
 802ee7e:	b083      	sub	sp, #12
 802ee80:	af00      	add	r7, sp, #0
 802ee82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	220a      	movs	r2, #10
 802ee88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802ee8a:	4b03      	ldr	r3, [pc, #12]	; (802ee98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 802ee8c:	4618      	mov	r0, r3
 802ee8e:	370c      	adds	r7, #12
 802ee90:	46bd      	mov	sp, r7
 802ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ee96:	4770      	bx	lr
 802ee98:	20000144 	.word	0x20000144

0802ee9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 802ee9c:	b480      	push	{r7}
 802ee9e:	b083      	sub	sp, #12
 802eea0:	af00      	add	r7, sp, #0
 802eea2:	6078      	str	r0, [r7, #4]
 802eea4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802eea6:	683b      	ldr	r3, [r7, #0]
 802eea8:	2b00      	cmp	r3, #0
 802eeaa:	d101      	bne.n	802eeb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 802eeac:	2303      	movs	r3, #3
 802eeae:	e009      	b.n	802eec4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 802eeb0:	687b      	ldr	r3, [r7, #4]
 802eeb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802eeb6:	687a      	ldr	r2, [r7, #4]
 802eeb8:	33b0      	adds	r3, #176	; 0xb0
 802eeba:	009b      	lsls	r3, r3, #2
 802eebc:	4413      	add	r3, r2
 802eebe:	683a      	ldr	r2, [r7, #0]
 802eec0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 802eec2:	2300      	movs	r3, #0
}
 802eec4:	4618      	mov	r0, r3
 802eec6:	370c      	adds	r7, #12
 802eec8:	46bd      	mov	sp, r7
 802eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802eece:	4770      	bx	lr

0802eed0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 802eed0:	b480      	push	{r7}
 802eed2:	b087      	sub	sp, #28
 802eed4:	af00      	add	r7, sp, #0
 802eed6:	60f8      	str	r0, [r7, #12]
 802eed8:	60b9      	str	r1, [r7, #8]
 802eeda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802eedc:	68fb      	ldr	r3, [r7, #12]
 802eede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802eee2:	68fb      	ldr	r3, [r7, #12]
 802eee4:	32b0      	adds	r2, #176	; 0xb0
 802eee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eeea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 802eeec:	697b      	ldr	r3, [r7, #20]
 802eeee:	2b00      	cmp	r3, #0
 802eef0:	d101      	bne.n	802eef6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 802eef2:	2303      	movs	r3, #3
 802eef4:	e008      	b.n	802ef08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802eef6:	697b      	ldr	r3, [r7, #20]
 802eef8:	68ba      	ldr	r2, [r7, #8]
 802eefa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 802eefe:	697b      	ldr	r3, [r7, #20]
 802ef00:	687a      	ldr	r2, [r7, #4]
 802ef02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802ef06:	2300      	movs	r3, #0
}
 802ef08:	4618      	mov	r0, r3
 802ef0a:	371c      	adds	r7, #28
 802ef0c:	46bd      	mov	sp, r7
 802ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef12:	4770      	bx	lr

0802ef14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 802ef14:	b480      	push	{r7}
 802ef16:	b085      	sub	sp, #20
 802ef18:	af00      	add	r7, sp, #0
 802ef1a:	6078      	str	r0, [r7, #4]
 802ef1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef1e:	687b      	ldr	r3, [r7, #4]
 802ef20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef24:	687b      	ldr	r3, [r7, #4]
 802ef26:	32b0      	adds	r2, #176	; 0xb0
 802ef28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 802ef2e:	68fb      	ldr	r3, [r7, #12]
 802ef30:	2b00      	cmp	r3, #0
 802ef32:	d101      	bne.n	802ef38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 802ef34:	2303      	movs	r3, #3
 802ef36:	e004      	b.n	802ef42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 802ef38:	68fb      	ldr	r3, [r7, #12]
 802ef3a:	683a      	ldr	r2, [r7, #0]
 802ef3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 802ef40:	2300      	movs	r3, #0
}
 802ef42:	4618      	mov	r0, r3
 802ef44:	3714      	adds	r7, #20
 802ef46:	46bd      	mov	sp, r7
 802ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ef4c:	4770      	bx	lr
	...

0802ef50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 802ef50:	b580      	push	{r7, lr}
 802ef52:	b084      	sub	sp, #16
 802ef54:	af00      	add	r7, sp, #0
 802ef56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802ef58:	687b      	ldr	r3, [r7, #4]
 802ef5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef5e:	687b      	ldr	r3, [r7, #4]
 802ef60:	32b0      	adds	r2, #176	; 0xb0
 802ef62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 802ef68:	2301      	movs	r3, #1
 802ef6a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802ef72:	687b      	ldr	r3, [r7, #4]
 802ef74:	32b0      	adds	r2, #176	; 0xb0
 802ef76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ef7a:	2b00      	cmp	r3, #0
 802ef7c:	d101      	bne.n	802ef82 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 802ef7e:	2303      	movs	r3, #3
 802ef80:	e025      	b.n	802efce <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 802ef82:	68bb      	ldr	r3, [r7, #8]
 802ef84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802ef88:	2b00      	cmp	r3, #0
 802ef8a:	d11f      	bne.n	802efcc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 802ef8c:	68bb      	ldr	r3, [r7, #8]
 802ef8e:	2201      	movs	r2, #1
 802ef90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802ef94:	4b10      	ldr	r3, [pc, #64]	; (802efd8 <USBD_CDC_TransmitPacket+0x88>)
 802ef96:	781b      	ldrb	r3, [r3, #0]
 802ef98:	f003 020f 	and.w	r2, r3, #15
 802ef9c:	68bb      	ldr	r3, [r7, #8]
 802ef9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 802efa2:	6878      	ldr	r0, [r7, #4]
 802efa4:	4613      	mov	r3, r2
 802efa6:	009b      	lsls	r3, r3, #2
 802efa8:	4413      	add	r3, r2
 802efaa:	009b      	lsls	r3, r3, #2
 802efac:	4403      	add	r3, r0
 802efae:	3318      	adds	r3, #24
 802efb0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802efb2:	4b09      	ldr	r3, [pc, #36]	; (802efd8 <USBD_CDC_TransmitPacket+0x88>)
 802efb4:	7819      	ldrb	r1, [r3, #0]
 802efb6:	68bb      	ldr	r3, [r7, #8]
 802efb8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802efbc:	68bb      	ldr	r3, [r7, #8]
 802efbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 802efc2:	6878      	ldr	r0, [r7, #4]
 802efc4:	f002 fa19 	bl	80313fa <USBD_LL_Transmit>

    ret = USBD_OK;
 802efc8:	2300      	movs	r3, #0
 802efca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 802efcc:	7bfb      	ldrb	r3, [r7, #15]
}
 802efce:	4618      	mov	r0, r3
 802efd0:	3710      	adds	r7, #16
 802efd2:	46bd      	mov	sp, r7
 802efd4:	bd80      	pop	{r7, pc}
 802efd6:	bf00      	nop
 802efd8:	200001cb 	.word	0x200001cb

0802efdc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 802efdc:	b580      	push	{r7, lr}
 802efde:	b084      	sub	sp, #16
 802efe0:	af00      	add	r7, sp, #0
 802efe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802efe4:	687b      	ldr	r3, [r7, #4]
 802efe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802efea:	687b      	ldr	r3, [r7, #4]
 802efec:	32b0      	adds	r2, #176	; 0xb0
 802efee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802eff2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802eff4:	687b      	ldr	r3, [r7, #4]
 802eff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802effa:	687b      	ldr	r3, [r7, #4]
 802effc:	32b0      	adds	r2, #176	; 0xb0
 802effe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f002:	2b00      	cmp	r3, #0
 802f004:	d101      	bne.n	802f00a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802f006:	2303      	movs	r3, #3
 802f008:	e018      	b.n	802f03c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802f00a:	687b      	ldr	r3, [r7, #4]
 802f00c:	7c1b      	ldrb	r3, [r3, #16]
 802f00e:	2b00      	cmp	r3, #0
 802f010:	d10a      	bne.n	802f028 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f012:	4b0c      	ldr	r3, [pc, #48]	; (802f044 <USBD_CDC_ReceivePacket+0x68>)
 802f014:	7819      	ldrb	r1, [r3, #0]
 802f016:	68fb      	ldr	r3, [r7, #12]
 802f018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f01c:	f44f 7300 	mov.w	r3, #512	; 0x200
 802f020:	6878      	ldr	r0, [r7, #4]
 802f022:	f002 fa0b 	bl	803143c <USBD_LL_PrepareReceive>
 802f026:	e008      	b.n	802f03a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802f028:	4b06      	ldr	r3, [pc, #24]	; (802f044 <USBD_CDC_ReceivePacket+0x68>)
 802f02a:	7819      	ldrb	r1, [r3, #0]
 802f02c:	68fb      	ldr	r3, [r7, #12]
 802f02e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 802f032:	2340      	movs	r3, #64	; 0x40
 802f034:	6878      	ldr	r0, [r7, #4]
 802f036:	f002 fa01 	bl	803143c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802f03a:	2300      	movs	r3, #0
}
 802f03c:	4618      	mov	r0, r3
 802f03e:	3710      	adds	r7, #16
 802f040:	46bd      	mov	sp, r7
 802f042:	bd80      	pop	{r7, pc}
 802f044:	200001cc 	.word	0x200001cc

0802f048 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 802f048:	b580      	push	{r7, lr}
 802f04a:	b086      	sub	sp, #24
 802f04c:	af00      	add	r7, sp, #0
 802f04e:	60f8      	str	r0, [r7, #12]
 802f050:	60b9      	str	r1, [r7, #8]
 802f052:	4613      	mov	r3, r2
 802f054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 802f056:	68fb      	ldr	r3, [r7, #12]
 802f058:	2b00      	cmp	r3, #0
 802f05a:	d101      	bne.n	802f060 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f05c:	2303      	movs	r3, #3
 802f05e:	e01f      	b.n	802f0a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 802f060:	68fb      	ldr	r3, [r7, #12]
 802f062:	2200      	movs	r2, #0
 802f064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 802f068:	68fb      	ldr	r3, [r7, #12]
 802f06a:	2200      	movs	r2, #0
 802f06c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 802f070:	68fb      	ldr	r3, [r7, #12]
 802f072:	2200      	movs	r2, #0
 802f074:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 802f078:	68bb      	ldr	r3, [r7, #8]
 802f07a:	2b00      	cmp	r3, #0
 802f07c:	d003      	beq.n	802f086 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 802f07e:	68fb      	ldr	r3, [r7, #12]
 802f080:	68ba      	ldr	r2, [r7, #8]
 802f082:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f086:	68fb      	ldr	r3, [r7, #12]
 802f088:	2201      	movs	r2, #1
 802f08a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 802f08e:	68fb      	ldr	r3, [r7, #12]
 802f090:	79fa      	ldrb	r2, [r7, #7]
 802f092:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802f094:	68f8      	ldr	r0, [r7, #12]
 802f096:	f002 f831 	bl	80310fc <USBD_LL_Init>
 802f09a:	4603      	mov	r3, r0
 802f09c:	75fb      	strb	r3, [r7, #23]

  return ret;
 802f09e:	7dfb      	ldrb	r3, [r7, #23]
}
 802f0a0:	4618      	mov	r0, r3
 802f0a2:	3718      	adds	r7, #24
 802f0a4:	46bd      	mov	sp, r7
 802f0a6:	bd80      	pop	{r7, pc}

0802f0a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802f0a8:	b580      	push	{r7, lr}
 802f0aa:	b084      	sub	sp, #16
 802f0ac:	af00      	add	r7, sp, #0
 802f0ae:	6078      	str	r0, [r7, #4]
 802f0b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802f0b2:	2300      	movs	r3, #0
 802f0b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802f0b6:	683b      	ldr	r3, [r7, #0]
 802f0b8:	2b00      	cmp	r3, #0
 802f0ba:	d101      	bne.n	802f0c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 802f0bc:	2303      	movs	r3, #3
 802f0be:	e025      	b.n	802f10c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 802f0c0:	687b      	ldr	r3, [r7, #4]
 802f0c2:	683a      	ldr	r2, [r7, #0]
 802f0c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802f0c8:	687b      	ldr	r3, [r7, #4]
 802f0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	32ae      	adds	r2, #174	; 0xae
 802f0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f0d8:	2b00      	cmp	r3, #0
 802f0da:	d00f      	beq.n	802f0fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802f0dc:	687b      	ldr	r3, [r7, #4]
 802f0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f0e2:	687b      	ldr	r3, [r7, #4]
 802f0e4:	32ae      	adds	r2, #174	; 0xae
 802f0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f0ec:	f107 020e 	add.w	r2, r7, #14
 802f0f0:	4610      	mov	r0, r2
 802f0f2:	4798      	blx	r3
 802f0f4:	4602      	mov	r2, r0
 802f0f6:	687b      	ldr	r3, [r7, #4]
 802f0f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 802f0fc:	687b      	ldr	r3, [r7, #4]
 802f0fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802f102:	1c5a      	adds	r2, r3, #1
 802f104:	687b      	ldr	r3, [r7, #4]
 802f106:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 802f10a:	2300      	movs	r3, #0
}
 802f10c:	4618      	mov	r0, r3
 802f10e:	3710      	adds	r7, #16
 802f110:	46bd      	mov	sp, r7
 802f112:	bd80      	pop	{r7, pc}

0802f114 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802f114:	b580      	push	{r7, lr}
 802f116:	b082      	sub	sp, #8
 802f118:	af00      	add	r7, sp, #0
 802f11a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802f11c:	6878      	ldr	r0, [r7, #4]
 802f11e:	f002 f883 	bl	8031228 <USBD_LL_Start>
 802f122:	4603      	mov	r3, r0
}
 802f124:	4618      	mov	r0, r3
 802f126:	3708      	adds	r7, #8
 802f128:	46bd      	mov	sp, r7
 802f12a:	bd80      	pop	{r7, pc}

0802f12c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 802f12c:	b480      	push	{r7}
 802f12e:	b083      	sub	sp, #12
 802f130:	af00      	add	r7, sp, #0
 802f132:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f134:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 802f136:	4618      	mov	r0, r3
 802f138:	370c      	adds	r7, #12
 802f13a:	46bd      	mov	sp, r7
 802f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f140:	4770      	bx	lr

0802f142 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f142:	b580      	push	{r7, lr}
 802f144:	b084      	sub	sp, #16
 802f146:	af00      	add	r7, sp, #0
 802f148:	6078      	str	r0, [r7, #4]
 802f14a:	460b      	mov	r3, r1
 802f14c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f14e:	2300      	movs	r3, #0
 802f150:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f158:	2b00      	cmp	r3, #0
 802f15a:	d009      	beq.n	802f170 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 802f15c:	687b      	ldr	r3, [r7, #4]
 802f15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f162:	681b      	ldr	r3, [r3, #0]
 802f164:	78fa      	ldrb	r2, [r7, #3]
 802f166:	4611      	mov	r1, r2
 802f168:	6878      	ldr	r0, [r7, #4]
 802f16a:	4798      	blx	r3
 802f16c:	4603      	mov	r3, r0
 802f16e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f170:	7bfb      	ldrb	r3, [r7, #15]
}
 802f172:	4618      	mov	r0, r3
 802f174:	3710      	adds	r7, #16
 802f176:	46bd      	mov	sp, r7
 802f178:	bd80      	pop	{r7, pc}

0802f17a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802f17a:	b580      	push	{r7, lr}
 802f17c:	b084      	sub	sp, #16
 802f17e:	af00      	add	r7, sp, #0
 802f180:	6078      	str	r0, [r7, #4]
 802f182:	460b      	mov	r3, r1
 802f184:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802f186:	2300      	movs	r3, #0
 802f188:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 802f18a:	687b      	ldr	r3, [r7, #4]
 802f18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f190:	685b      	ldr	r3, [r3, #4]
 802f192:	78fa      	ldrb	r2, [r7, #3]
 802f194:	4611      	mov	r1, r2
 802f196:	6878      	ldr	r0, [r7, #4]
 802f198:	4798      	blx	r3
 802f19a:	4603      	mov	r3, r0
 802f19c:	2b00      	cmp	r3, #0
 802f19e:	d001      	beq.n	802f1a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 802f1a0:	2303      	movs	r3, #3
 802f1a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 802f1a6:	4618      	mov	r0, r3
 802f1a8:	3710      	adds	r7, #16
 802f1aa:	46bd      	mov	sp, r7
 802f1ac:	bd80      	pop	{r7, pc}

0802f1ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 802f1ae:	b580      	push	{r7, lr}
 802f1b0:	b084      	sub	sp, #16
 802f1b2:	af00      	add	r7, sp, #0
 802f1b4:	6078      	str	r0, [r7, #4]
 802f1b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 802f1b8:	687b      	ldr	r3, [r7, #4]
 802f1ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f1be:	6839      	ldr	r1, [r7, #0]
 802f1c0:	4618      	mov	r0, r3
 802f1c2:	f001 f908 	bl	80303d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802f1c6:	687b      	ldr	r3, [r7, #4]
 802f1c8:	2201      	movs	r2, #1
 802f1ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 802f1ce:	687b      	ldr	r3, [r7, #4]
 802f1d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802f1d4:	461a      	mov	r2, r3
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 802f1dc:	687b      	ldr	r3, [r7, #4]
 802f1de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f1e2:	f003 031f 	and.w	r3, r3, #31
 802f1e6:	2b02      	cmp	r3, #2
 802f1e8:	d01a      	beq.n	802f220 <USBD_LL_SetupStage+0x72>
 802f1ea:	2b02      	cmp	r3, #2
 802f1ec:	d822      	bhi.n	802f234 <USBD_LL_SetupStage+0x86>
 802f1ee:	2b00      	cmp	r3, #0
 802f1f0:	d002      	beq.n	802f1f8 <USBD_LL_SetupStage+0x4a>
 802f1f2:	2b01      	cmp	r3, #1
 802f1f4:	d00a      	beq.n	802f20c <USBD_LL_SetupStage+0x5e>
 802f1f6:	e01d      	b.n	802f234 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 802f1f8:	687b      	ldr	r3, [r7, #4]
 802f1fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f1fe:	4619      	mov	r1, r3
 802f200:	6878      	ldr	r0, [r7, #4]
 802f202:	f000 fb5f 	bl	802f8c4 <USBD_StdDevReq>
 802f206:	4603      	mov	r3, r0
 802f208:	73fb      	strb	r3, [r7, #15]
      break;
 802f20a:	e020      	b.n	802f24e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 802f20c:	687b      	ldr	r3, [r7, #4]
 802f20e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f212:	4619      	mov	r1, r3
 802f214:	6878      	ldr	r0, [r7, #4]
 802f216:	f000 fbc7 	bl	802f9a8 <USBD_StdItfReq>
 802f21a:	4603      	mov	r3, r0
 802f21c:	73fb      	strb	r3, [r7, #15]
      break;
 802f21e:	e016      	b.n	802f24e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 802f220:	687b      	ldr	r3, [r7, #4]
 802f222:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802f226:	4619      	mov	r1, r3
 802f228:	6878      	ldr	r0, [r7, #4]
 802f22a:	f000 fc29 	bl	802fa80 <USBD_StdEPReq>
 802f22e:	4603      	mov	r3, r0
 802f230:	73fb      	strb	r3, [r7, #15]
      break;
 802f232:	e00c      	b.n	802f24e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 802f234:	687b      	ldr	r3, [r7, #4]
 802f236:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f23a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802f23e:	b2db      	uxtb	r3, r3
 802f240:	4619      	mov	r1, r3
 802f242:	6878      	ldr	r0, [r7, #4]
 802f244:	f002 f850 	bl	80312e8 <USBD_LL_StallEP>
 802f248:	4603      	mov	r3, r0
 802f24a:	73fb      	strb	r3, [r7, #15]
      break;
 802f24c:	bf00      	nop
  }

  return ret;
 802f24e:	7bfb      	ldrb	r3, [r7, #15]
}
 802f250:	4618      	mov	r0, r3
 802f252:	3710      	adds	r7, #16
 802f254:	46bd      	mov	sp, r7
 802f256:	bd80      	pop	{r7, pc}

0802f258 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 802f258:	b580      	push	{r7, lr}
 802f25a:	b086      	sub	sp, #24
 802f25c:	af00      	add	r7, sp, #0
 802f25e:	60f8      	str	r0, [r7, #12]
 802f260:	460b      	mov	r3, r1
 802f262:	607a      	str	r2, [r7, #4]
 802f264:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 802f266:	2300      	movs	r3, #0
 802f268:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 802f26a:	7afb      	ldrb	r3, [r7, #11]
 802f26c:	2b00      	cmp	r3, #0
 802f26e:	d16e      	bne.n	802f34e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 802f270:	68fb      	ldr	r3, [r7, #12]
 802f272:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 802f276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 802f278:	68fb      	ldr	r3, [r7, #12]
 802f27a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f27e:	2b03      	cmp	r3, #3
 802f280:	f040 8098 	bne.w	802f3b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 802f284:	693b      	ldr	r3, [r7, #16]
 802f286:	689a      	ldr	r2, [r3, #8]
 802f288:	693b      	ldr	r3, [r7, #16]
 802f28a:	68db      	ldr	r3, [r3, #12]
 802f28c:	429a      	cmp	r2, r3
 802f28e:	d913      	bls.n	802f2b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 802f290:	693b      	ldr	r3, [r7, #16]
 802f292:	689a      	ldr	r2, [r3, #8]
 802f294:	693b      	ldr	r3, [r7, #16]
 802f296:	68db      	ldr	r3, [r3, #12]
 802f298:	1ad2      	subs	r2, r2, r3
 802f29a:	693b      	ldr	r3, [r7, #16]
 802f29c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802f29e:	693b      	ldr	r3, [r7, #16]
 802f2a0:	68da      	ldr	r2, [r3, #12]
 802f2a2:	693b      	ldr	r3, [r7, #16]
 802f2a4:	689b      	ldr	r3, [r3, #8]
 802f2a6:	4293      	cmp	r3, r2
 802f2a8:	bf28      	it	cs
 802f2aa:	4613      	movcs	r3, r2
 802f2ac:	461a      	mov	r2, r3
 802f2ae:	6879      	ldr	r1, [r7, #4]
 802f2b0:	68f8      	ldr	r0, [r7, #12]
 802f2b2:	f001 f984 	bl	80305be <USBD_CtlContinueRx>
 802f2b6:	e07d      	b.n	802f3b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 802f2b8:	68fb      	ldr	r3, [r7, #12]
 802f2ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802f2be:	f003 031f 	and.w	r3, r3, #31
 802f2c2:	2b02      	cmp	r3, #2
 802f2c4:	d014      	beq.n	802f2f0 <USBD_LL_DataOutStage+0x98>
 802f2c6:	2b02      	cmp	r3, #2
 802f2c8:	d81d      	bhi.n	802f306 <USBD_LL_DataOutStage+0xae>
 802f2ca:	2b00      	cmp	r3, #0
 802f2cc:	d002      	beq.n	802f2d4 <USBD_LL_DataOutStage+0x7c>
 802f2ce:	2b01      	cmp	r3, #1
 802f2d0:	d003      	beq.n	802f2da <USBD_LL_DataOutStage+0x82>
 802f2d2:	e018      	b.n	802f306 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 802f2d4:	2300      	movs	r3, #0
 802f2d6:	75bb      	strb	r3, [r7, #22]
            break;
 802f2d8:	e018      	b.n	802f30c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 802f2da:	68fb      	ldr	r3, [r7, #12]
 802f2dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f2e0:	b2db      	uxtb	r3, r3
 802f2e2:	4619      	mov	r1, r3
 802f2e4:	68f8      	ldr	r0, [r7, #12]
 802f2e6:	f000 fa5e 	bl	802f7a6 <USBD_CoreFindIF>
 802f2ea:	4603      	mov	r3, r0
 802f2ec:	75bb      	strb	r3, [r7, #22]
            break;
 802f2ee:	e00d      	b.n	802f30c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 802f2f0:	68fb      	ldr	r3, [r7, #12]
 802f2f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 802f2f6:	b2db      	uxtb	r3, r3
 802f2f8:	4619      	mov	r1, r3
 802f2fa:	68f8      	ldr	r0, [r7, #12]
 802f2fc:	f000 fa60 	bl	802f7c0 <USBD_CoreFindEP>
 802f300:	4603      	mov	r3, r0
 802f302:	75bb      	strb	r3, [r7, #22]
            break;
 802f304:	e002      	b.n	802f30c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 802f306:	2300      	movs	r3, #0
 802f308:	75bb      	strb	r3, [r7, #22]
            break;
 802f30a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 802f30c:	7dbb      	ldrb	r3, [r7, #22]
 802f30e:	2b00      	cmp	r3, #0
 802f310:	d119      	bne.n	802f346 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f312:	68fb      	ldr	r3, [r7, #12]
 802f314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f318:	b2db      	uxtb	r3, r3
 802f31a:	2b03      	cmp	r3, #3
 802f31c:	d113      	bne.n	802f346 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 802f31e:	7dba      	ldrb	r2, [r7, #22]
 802f320:	68fb      	ldr	r3, [r7, #12]
 802f322:	32ae      	adds	r2, #174	; 0xae
 802f324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f328:	691b      	ldr	r3, [r3, #16]
 802f32a:	2b00      	cmp	r3, #0
 802f32c:	d00b      	beq.n	802f346 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 802f32e:	7dba      	ldrb	r2, [r7, #22]
 802f330:	68fb      	ldr	r3, [r7, #12]
 802f332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 802f336:	7dba      	ldrb	r2, [r7, #22]
 802f338:	68fb      	ldr	r3, [r7, #12]
 802f33a:	32ae      	adds	r2, #174	; 0xae
 802f33c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f340:	691b      	ldr	r3, [r3, #16]
 802f342:	68f8      	ldr	r0, [r7, #12]
 802f344:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 802f346:	68f8      	ldr	r0, [r7, #12]
 802f348:	f001 f94a 	bl	80305e0 <USBD_CtlSendStatus>
 802f34c:	e032      	b.n	802f3b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 802f34e:	7afb      	ldrb	r3, [r7, #11]
 802f350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802f354:	b2db      	uxtb	r3, r3
 802f356:	4619      	mov	r1, r3
 802f358:	68f8      	ldr	r0, [r7, #12]
 802f35a:	f000 fa31 	bl	802f7c0 <USBD_CoreFindEP>
 802f35e:	4603      	mov	r3, r0
 802f360:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f362:	7dbb      	ldrb	r3, [r7, #22]
 802f364:	2bff      	cmp	r3, #255	; 0xff
 802f366:	d025      	beq.n	802f3b4 <USBD_LL_DataOutStage+0x15c>
 802f368:	7dbb      	ldrb	r3, [r7, #22]
 802f36a:	2b00      	cmp	r3, #0
 802f36c:	d122      	bne.n	802f3b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f36e:	68fb      	ldr	r3, [r7, #12]
 802f370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f374:	b2db      	uxtb	r3, r3
 802f376:	2b03      	cmp	r3, #3
 802f378:	d117      	bne.n	802f3aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 802f37a:	7dba      	ldrb	r2, [r7, #22]
 802f37c:	68fb      	ldr	r3, [r7, #12]
 802f37e:	32ae      	adds	r2, #174	; 0xae
 802f380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f384:	699b      	ldr	r3, [r3, #24]
 802f386:	2b00      	cmp	r3, #0
 802f388:	d00f      	beq.n	802f3aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 802f38a:	7dba      	ldrb	r2, [r7, #22]
 802f38c:	68fb      	ldr	r3, [r7, #12]
 802f38e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 802f392:	7dba      	ldrb	r2, [r7, #22]
 802f394:	68fb      	ldr	r3, [r7, #12]
 802f396:	32ae      	adds	r2, #174	; 0xae
 802f398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f39c:	699b      	ldr	r3, [r3, #24]
 802f39e:	7afa      	ldrb	r2, [r7, #11]
 802f3a0:	4611      	mov	r1, r2
 802f3a2:	68f8      	ldr	r0, [r7, #12]
 802f3a4:	4798      	blx	r3
 802f3a6:	4603      	mov	r3, r0
 802f3a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 802f3aa:	7dfb      	ldrb	r3, [r7, #23]
 802f3ac:	2b00      	cmp	r3, #0
 802f3ae:	d001      	beq.n	802f3b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 802f3b0:	7dfb      	ldrb	r3, [r7, #23]
 802f3b2:	e000      	b.n	802f3b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 802f3b4:	2300      	movs	r3, #0
}
 802f3b6:	4618      	mov	r0, r3
 802f3b8:	3718      	adds	r7, #24
 802f3ba:	46bd      	mov	sp, r7
 802f3bc:	bd80      	pop	{r7, pc}

0802f3be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802f3be:	b580      	push	{r7, lr}
 802f3c0:	b086      	sub	sp, #24
 802f3c2:	af00      	add	r7, sp, #0
 802f3c4:	60f8      	str	r0, [r7, #12]
 802f3c6:	460b      	mov	r3, r1
 802f3c8:	607a      	str	r2, [r7, #4]
 802f3ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 802f3cc:	7afb      	ldrb	r3, [r7, #11]
 802f3ce:	2b00      	cmp	r3, #0
 802f3d0:	d16f      	bne.n	802f4b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 802f3d2:	68fb      	ldr	r3, [r7, #12]
 802f3d4:	3314      	adds	r3, #20
 802f3d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 802f3d8:	68fb      	ldr	r3, [r7, #12]
 802f3da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 802f3de:	2b02      	cmp	r3, #2
 802f3e0:	d15a      	bne.n	802f498 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 802f3e2:	693b      	ldr	r3, [r7, #16]
 802f3e4:	689a      	ldr	r2, [r3, #8]
 802f3e6:	693b      	ldr	r3, [r7, #16]
 802f3e8:	68db      	ldr	r3, [r3, #12]
 802f3ea:	429a      	cmp	r2, r3
 802f3ec:	d914      	bls.n	802f418 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 802f3ee:	693b      	ldr	r3, [r7, #16]
 802f3f0:	689a      	ldr	r2, [r3, #8]
 802f3f2:	693b      	ldr	r3, [r7, #16]
 802f3f4:	68db      	ldr	r3, [r3, #12]
 802f3f6:	1ad2      	subs	r2, r2, r3
 802f3f8:	693b      	ldr	r3, [r7, #16]
 802f3fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802f3fc:	693b      	ldr	r3, [r7, #16]
 802f3fe:	689b      	ldr	r3, [r3, #8]
 802f400:	461a      	mov	r2, r3
 802f402:	6879      	ldr	r1, [r7, #4]
 802f404:	68f8      	ldr	r0, [r7, #12]
 802f406:	f001 f8ac 	bl	8030562 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f40a:	2300      	movs	r3, #0
 802f40c:	2200      	movs	r2, #0
 802f40e:	2100      	movs	r1, #0
 802f410:	68f8      	ldr	r0, [r7, #12]
 802f412:	f002 f813 	bl	803143c <USBD_LL_PrepareReceive>
 802f416:	e03f      	b.n	802f498 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 802f418:	693b      	ldr	r3, [r7, #16]
 802f41a:	68da      	ldr	r2, [r3, #12]
 802f41c:	693b      	ldr	r3, [r7, #16]
 802f41e:	689b      	ldr	r3, [r3, #8]
 802f420:	429a      	cmp	r2, r3
 802f422:	d11c      	bne.n	802f45e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 802f424:	693b      	ldr	r3, [r7, #16]
 802f426:	685a      	ldr	r2, [r3, #4]
 802f428:	693b      	ldr	r3, [r7, #16]
 802f42a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 802f42c:	429a      	cmp	r2, r3
 802f42e:	d316      	bcc.n	802f45e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 802f430:	693b      	ldr	r3, [r7, #16]
 802f432:	685a      	ldr	r2, [r3, #4]
 802f434:	68fb      	ldr	r3, [r7, #12]
 802f436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 802f43a:	429a      	cmp	r2, r3
 802f43c:	d20f      	bcs.n	802f45e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 802f43e:	2200      	movs	r2, #0
 802f440:	2100      	movs	r1, #0
 802f442:	68f8      	ldr	r0, [r7, #12]
 802f444:	f001 f88d 	bl	8030562 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802f448:	68fb      	ldr	r3, [r7, #12]
 802f44a:	2200      	movs	r2, #0
 802f44c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 802f450:	2300      	movs	r3, #0
 802f452:	2200      	movs	r2, #0
 802f454:	2100      	movs	r1, #0
 802f456:	68f8      	ldr	r0, [r7, #12]
 802f458:	f001 fff0 	bl	803143c <USBD_LL_PrepareReceive>
 802f45c:	e01c      	b.n	802f498 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f45e:	68fb      	ldr	r3, [r7, #12]
 802f460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f464:	b2db      	uxtb	r3, r3
 802f466:	2b03      	cmp	r3, #3
 802f468:	d10f      	bne.n	802f48a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 802f46a:	68fb      	ldr	r3, [r7, #12]
 802f46c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f470:	68db      	ldr	r3, [r3, #12]
 802f472:	2b00      	cmp	r3, #0
 802f474:	d009      	beq.n	802f48a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 802f476:	68fb      	ldr	r3, [r7, #12]
 802f478:	2200      	movs	r2, #0
 802f47a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 802f47e:	68fb      	ldr	r3, [r7, #12]
 802f480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f484:	68db      	ldr	r3, [r3, #12]
 802f486:	68f8      	ldr	r0, [r7, #12]
 802f488:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 802f48a:	2180      	movs	r1, #128	; 0x80
 802f48c:	68f8      	ldr	r0, [r7, #12]
 802f48e:	f001 ff2b 	bl	80312e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 802f492:	68f8      	ldr	r0, [r7, #12]
 802f494:	f001 f8b7 	bl	8030606 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 802f498:	68fb      	ldr	r3, [r7, #12]
 802f49a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 802f49e:	2b00      	cmp	r3, #0
 802f4a0:	d03a      	beq.n	802f518 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 802f4a2:	68f8      	ldr	r0, [r7, #12]
 802f4a4:	f7ff fe42 	bl	802f12c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802f4a8:	68fb      	ldr	r3, [r7, #12]
 802f4aa:	2200      	movs	r2, #0
 802f4ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 802f4b0:	e032      	b.n	802f518 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 802f4b2:	7afb      	ldrb	r3, [r7, #11]
 802f4b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802f4b8:	b2db      	uxtb	r3, r3
 802f4ba:	4619      	mov	r1, r3
 802f4bc:	68f8      	ldr	r0, [r7, #12]
 802f4be:	f000 f97f 	bl	802f7c0 <USBD_CoreFindEP>
 802f4c2:	4603      	mov	r3, r0
 802f4c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f4c6:	7dfb      	ldrb	r3, [r7, #23]
 802f4c8:	2bff      	cmp	r3, #255	; 0xff
 802f4ca:	d025      	beq.n	802f518 <USBD_LL_DataInStage+0x15a>
 802f4cc:	7dfb      	ldrb	r3, [r7, #23]
 802f4ce:	2b00      	cmp	r3, #0
 802f4d0:	d122      	bne.n	802f518 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f4d2:	68fb      	ldr	r3, [r7, #12]
 802f4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f4d8:	b2db      	uxtb	r3, r3
 802f4da:	2b03      	cmp	r3, #3
 802f4dc:	d11c      	bne.n	802f518 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 802f4de:	7dfa      	ldrb	r2, [r7, #23]
 802f4e0:	68fb      	ldr	r3, [r7, #12]
 802f4e2:	32ae      	adds	r2, #174	; 0xae
 802f4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f4e8:	695b      	ldr	r3, [r3, #20]
 802f4ea:	2b00      	cmp	r3, #0
 802f4ec:	d014      	beq.n	802f518 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 802f4ee:	7dfa      	ldrb	r2, [r7, #23]
 802f4f0:	68fb      	ldr	r3, [r7, #12]
 802f4f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 802f4f6:	7dfa      	ldrb	r2, [r7, #23]
 802f4f8:	68fb      	ldr	r3, [r7, #12]
 802f4fa:	32ae      	adds	r2, #174	; 0xae
 802f4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f500:	695b      	ldr	r3, [r3, #20]
 802f502:	7afa      	ldrb	r2, [r7, #11]
 802f504:	4611      	mov	r1, r2
 802f506:	68f8      	ldr	r0, [r7, #12]
 802f508:	4798      	blx	r3
 802f50a:	4603      	mov	r3, r0
 802f50c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 802f50e:	7dbb      	ldrb	r3, [r7, #22]
 802f510:	2b00      	cmp	r3, #0
 802f512:	d001      	beq.n	802f518 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 802f514:	7dbb      	ldrb	r3, [r7, #22]
 802f516:	e000      	b.n	802f51a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 802f518:	2300      	movs	r3, #0
}
 802f51a:	4618      	mov	r0, r3
 802f51c:	3718      	adds	r7, #24
 802f51e:	46bd      	mov	sp, r7
 802f520:	bd80      	pop	{r7, pc}

0802f522 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802f522:	b580      	push	{r7, lr}
 802f524:	b084      	sub	sp, #16
 802f526:	af00      	add	r7, sp, #0
 802f528:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 802f52a:	2300      	movs	r3, #0
 802f52c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f52e:	687b      	ldr	r3, [r7, #4]
 802f530:	2201      	movs	r2, #1
 802f532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 802f536:	687b      	ldr	r3, [r7, #4]
 802f538:	2200      	movs	r2, #0
 802f53a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 802f53e:	687b      	ldr	r3, [r7, #4]
 802f540:	2200      	movs	r2, #0
 802f542:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802f544:	687b      	ldr	r3, [r7, #4]
 802f546:	2200      	movs	r2, #0
 802f548:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 802f54c:	687b      	ldr	r3, [r7, #4]
 802f54e:	2200      	movs	r2, #0
 802f550:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 802f554:	687b      	ldr	r3, [r7, #4]
 802f556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f55a:	2b00      	cmp	r3, #0
 802f55c:	d014      	beq.n	802f588 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 802f55e:	687b      	ldr	r3, [r7, #4]
 802f560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f564:	685b      	ldr	r3, [r3, #4]
 802f566:	2b00      	cmp	r3, #0
 802f568:	d00e      	beq.n	802f588 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 802f56a:	687b      	ldr	r3, [r7, #4]
 802f56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f570:	685b      	ldr	r3, [r3, #4]
 802f572:	687a      	ldr	r2, [r7, #4]
 802f574:	6852      	ldr	r2, [r2, #4]
 802f576:	b2d2      	uxtb	r2, r2
 802f578:	4611      	mov	r1, r2
 802f57a:	6878      	ldr	r0, [r7, #4]
 802f57c:	4798      	blx	r3
 802f57e:	4603      	mov	r3, r0
 802f580:	2b00      	cmp	r3, #0
 802f582:	d001      	beq.n	802f588 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 802f584:	2303      	movs	r3, #3
 802f586:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f588:	2340      	movs	r3, #64	; 0x40
 802f58a:	2200      	movs	r2, #0
 802f58c:	2100      	movs	r1, #0
 802f58e:	6878      	ldr	r0, [r7, #4]
 802f590:	f001 fe65 	bl	803125e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802f594:	687b      	ldr	r3, [r7, #4]
 802f596:	2201      	movs	r2, #1
 802f598:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 802f59c:	687b      	ldr	r3, [r7, #4]
 802f59e:	2240      	movs	r2, #64	; 0x40
 802f5a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802f5a4:	2340      	movs	r3, #64	; 0x40
 802f5a6:	2200      	movs	r2, #0
 802f5a8:	2180      	movs	r1, #128	; 0x80
 802f5aa:	6878      	ldr	r0, [r7, #4]
 802f5ac:	f001 fe57 	bl	803125e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802f5b0:	687b      	ldr	r3, [r7, #4]
 802f5b2:	2201      	movs	r2, #1
 802f5b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802f5b6:	687b      	ldr	r3, [r7, #4]
 802f5b8:	2240      	movs	r2, #64	; 0x40
 802f5ba:	621a      	str	r2, [r3, #32]

  return ret;
 802f5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 802f5be:	4618      	mov	r0, r3
 802f5c0:	3710      	adds	r7, #16
 802f5c2:	46bd      	mov	sp, r7
 802f5c4:	bd80      	pop	{r7, pc}

0802f5c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802f5c6:	b480      	push	{r7}
 802f5c8:	b083      	sub	sp, #12
 802f5ca:	af00      	add	r7, sp, #0
 802f5cc:	6078      	str	r0, [r7, #4]
 802f5ce:	460b      	mov	r3, r1
 802f5d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 802f5d2:	687b      	ldr	r3, [r7, #4]
 802f5d4:	78fa      	ldrb	r2, [r7, #3]
 802f5d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802f5d8:	2300      	movs	r3, #0
}
 802f5da:	4618      	mov	r0, r3
 802f5dc:	370c      	adds	r7, #12
 802f5de:	46bd      	mov	sp, r7
 802f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f5e4:	4770      	bx	lr

0802f5e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802f5e6:	b480      	push	{r7}
 802f5e8:	b083      	sub	sp, #12
 802f5ea:	af00      	add	r7, sp, #0
 802f5ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 802f5ee:	687b      	ldr	r3, [r7, #4]
 802f5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f5f4:	b2da      	uxtb	r2, r3
 802f5f6:	687b      	ldr	r3, [r7, #4]
 802f5f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 802f5fc:	687b      	ldr	r3, [r7, #4]
 802f5fe:	2204      	movs	r2, #4
 802f600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 802f604:	2300      	movs	r3, #0
}
 802f606:	4618      	mov	r0, r3
 802f608:	370c      	adds	r7, #12
 802f60a:	46bd      	mov	sp, r7
 802f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f610:	4770      	bx	lr

0802f612 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802f612:	b480      	push	{r7}
 802f614:	b083      	sub	sp, #12
 802f616:	af00      	add	r7, sp, #0
 802f618:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 802f61a:	687b      	ldr	r3, [r7, #4]
 802f61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f620:	b2db      	uxtb	r3, r3
 802f622:	2b04      	cmp	r3, #4
 802f624:	d106      	bne.n	802f634 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 802f626:	687b      	ldr	r3, [r7, #4]
 802f628:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 802f62c:	b2da      	uxtb	r2, r3
 802f62e:	687b      	ldr	r3, [r7, #4]
 802f630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 802f634:	2300      	movs	r3, #0
}
 802f636:	4618      	mov	r0, r3
 802f638:	370c      	adds	r7, #12
 802f63a:	46bd      	mov	sp, r7
 802f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f640:	4770      	bx	lr

0802f642 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802f642:	b580      	push	{r7, lr}
 802f644:	b082      	sub	sp, #8
 802f646:	af00      	add	r7, sp, #0
 802f648:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f650:	b2db      	uxtb	r3, r3
 802f652:	2b03      	cmp	r3, #3
 802f654:	d110      	bne.n	802f678 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 802f656:	687b      	ldr	r3, [r7, #4]
 802f658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f65c:	2b00      	cmp	r3, #0
 802f65e:	d00b      	beq.n	802f678 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 802f660:	687b      	ldr	r3, [r7, #4]
 802f662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f666:	69db      	ldr	r3, [r3, #28]
 802f668:	2b00      	cmp	r3, #0
 802f66a:	d005      	beq.n	802f678 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 802f66c:	687b      	ldr	r3, [r7, #4]
 802f66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f672:	69db      	ldr	r3, [r3, #28]
 802f674:	6878      	ldr	r0, [r7, #4]
 802f676:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 802f678:	2300      	movs	r3, #0
}
 802f67a:	4618      	mov	r0, r3
 802f67c:	3708      	adds	r7, #8
 802f67e:	46bd      	mov	sp, r7
 802f680:	bd80      	pop	{r7, pc}

0802f682 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 802f682:	b580      	push	{r7, lr}
 802f684:	b082      	sub	sp, #8
 802f686:	af00      	add	r7, sp, #0
 802f688:	6078      	str	r0, [r7, #4]
 802f68a:	460b      	mov	r3, r1
 802f68c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f68e:	687b      	ldr	r3, [r7, #4]
 802f690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f694:	687b      	ldr	r3, [r7, #4]
 802f696:	32ae      	adds	r2, #174	; 0xae
 802f698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f69c:	2b00      	cmp	r3, #0
 802f69e:	d101      	bne.n	802f6a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 802f6a0:	2303      	movs	r3, #3
 802f6a2:	e01c      	b.n	802f6de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f6a4:	687b      	ldr	r3, [r7, #4]
 802f6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f6aa:	b2db      	uxtb	r3, r3
 802f6ac:	2b03      	cmp	r3, #3
 802f6ae:	d115      	bne.n	802f6dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 802f6b0:	687b      	ldr	r3, [r7, #4]
 802f6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6b6:	687b      	ldr	r3, [r7, #4]
 802f6b8:	32ae      	adds	r2, #174	; 0xae
 802f6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6be:	6a1b      	ldr	r3, [r3, #32]
 802f6c0:	2b00      	cmp	r3, #0
 802f6c2:	d00b      	beq.n	802f6dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 802f6c4:	687b      	ldr	r3, [r7, #4]
 802f6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6ca:	687b      	ldr	r3, [r7, #4]
 802f6cc:	32ae      	adds	r2, #174	; 0xae
 802f6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f6d2:	6a1b      	ldr	r3, [r3, #32]
 802f6d4:	78fa      	ldrb	r2, [r7, #3]
 802f6d6:	4611      	mov	r1, r2
 802f6d8:	6878      	ldr	r0, [r7, #4]
 802f6da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f6dc:	2300      	movs	r3, #0
}
 802f6de:	4618      	mov	r0, r3
 802f6e0:	3708      	adds	r7, #8
 802f6e2:	46bd      	mov	sp, r7
 802f6e4:	bd80      	pop	{r7, pc}

0802f6e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 802f6e6:	b580      	push	{r7, lr}
 802f6e8:	b082      	sub	sp, #8
 802f6ea:	af00      	add	r7, sp, #0
 802f6ec:	6078      	str	r0, [r7, #4]
 802f6ee:	460b      	mov	r3, r1
 802f6f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 802f6f2:	687b      	ldr	r3, [r7, #4]
 802f6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f6f8:	687b      	ldr	r3, [r7, #4]
 802f6fa:	32ae      	adds	r2, #174	; 0xae
 802f6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f700:	2b00      	cmp	r3, #0
 802f702:	d101      	bne.n	802f708 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 802f704:	2303      	movs	r3, #3
 802f706:	e01c      	b.n	802f742 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802f708:	687b      	ldr	r3, [r7, #4]
 802f70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f70e:	b2db      	uxtb	r3, r3
 802f710:	2b03      	cmp	r3, #3
 802f712:	d115      	bne.n	802f740 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 802f714:	687b      	ldr	r3, [r7, #4]
 802f716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f71a:	687b      	ldr	r3, [r7, #4]
 802f71c:	32ae      	adds	r2, #174	; 0xae
 802f71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f724:	2b00      	cmp	r3, #0
 802f726:	d00b      	beq.n	802f740 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 802f728:	687b      	ldr	r3, [r7, #4]
 802f72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f72e:	687b      	ldr	r3, [r7, #4]
 802f730:	32ae      	adds	r2, #174	; 0xae
 802f732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f738:	78fa      	ldrb	r2, [r7, #3]
 802f73a:	4611      	mov	r1, r2
 802f73c:	6878      	ldr	r0, [r7, #4]
 802f73e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802f740:	2300      	movs	r3, #0
}
 802f742:	4618      	mov	r0, r3
 802f744:	3708      	adds	r7, #8
 802f746:	46bd      	mov	sp, r7
 802f748:	bd80      	pop	{r7, pc}

0802f74a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 802f74a:	b480      	push	{r7}
 802f74c:	b083      	sub	sp, #12
 802f74e:	af00      	add	r7, sp, #0
 802f750:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 802f752:	2300      	movs	r3, #0
}
 802f754:	4618      	mov	r0, r3
 802f756:	370c      	adds	r7, #12
 802f758:	46bd      	mov	sp, r7
 802f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f75e:	4770      	bx	lr

0802f760 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 802f760:	b580      	push	{r7, lr}
 802f762:	b084      	sub	sp, #16
 802f764:	af00      	add	r7, sp, #0
 802f766:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 802f768:	2300      	movs	r3, #0
 802f76a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802f76c:	687b      	ldr	r3, [r7, #4]
 802f76e:	2201      	movs	r2, #1
 802f770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 802f774:	687b      	ldr	r3, [r7, #4]
 802f776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f77a:	2b00      	cmp	r3, #0
 802f77c:	d00e      	beq.n	802f79c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 802f77e:	687b      	ldr	r3, [r7, #4]
 802f780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802f784:	685b      	ldr	r3, [r3, #4]
 802f786:	687a      	ldr	r2, [r7, #4]
 802f788:	6852      	ldr	r2, [r2, #4]
 802f78a:	b2d2      	uxtb	r2, r2
 802f78c:	4611      	mov	r1, r2
 802f78e:	6878      	ldr	r0, [r7, #4]
 802f790:	4798      	blx	r3
 802f792:	4603      	mov	r3, r0
 802f794:	2b00      	cmp	r3, #0
 802f796:	d001      	beq.n	802f79c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 802f798:	2303      	movs	r3, #3
 802f79a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802f79c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f79e:	4618      	mov	r0, r3
 802f7a0:	3710      	adds	r7, #16
 802f7a2:	46bd      	mov	sp, r7
 802f7a4:	bd80      	pop	{r7, pc}

0802f7a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7a6:	b480      	push	{r7}
 802f7a8:	b083      	sub	sp, #12
 802f7aa:	af00      	add	r7, sp, #0
 802f7ac:	6078      	str	r0, [r7, #4]
 802f7ae:	460b      	mov	r3, r1
 802f7b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7b4:	4618      	mov	r0, r3
 802f7b6:	370c      	adds	r7, #12
 802f7b8:	46bd      	mov	sp, r7
 802f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7be:	4770      	bx	lr

0802f7c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 802f7c0:	b480      	push	{r7}
 802f7c2:	b083      	sub	sp, #12
 802f7c4:	af00      	add	r7, sp, #0
 802f7c6:	6078      	str	r0, [r7, #4]
 802f7c8:	460b      	mov	r3, r1
 802f7ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 802f7cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 802f7ce:	4618      	mov	r0, r3
 802f7d0:	370c      	adds	r7, #12
 802f7d2:	46bd      	mov	sp, r7
 802f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7d8:	4770      	bx	lr

0802f7da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 802f7da:	b580      	push	{r7, lr}
 802f7dc:	b086      	sub	sp, #24
 802f7de:	af00      	add	r7, sp, #0
 802f7e0:	6078      	str	r0, [r7, #4]
 802f7e2:	460b      	mov	r3, r1
 802f7e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 802f7e6:	687b      	ldr	r3, [r7, #4]
 802f7e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 802f7ea:	687b      	ldr	r3, [r7, #4]
 802f7ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 802f7ee:	2300      	movs	r3, #0
 802f7f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802f7f2:	68fb      	ldr	r3, [r7, #12]
 802f7f4:	885b      	ldrh	r3, [r3, #2]
 802f7f6:	b29a      	uxth	r2, r3
 802f7f8:	68fb      	ldr	r3, [r7, #12]
 802f7fa:	781b      	ldrb	r3, [r3, #0]
 802f7fc:	b29b      	uxth	r3, r3
 802f7fe:	429a      	cmp	r2, r3
 802f800:	d920      	bls.n	802f844 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 802f802:	68fb      	ldr	r3, [r7, #12]
 802f804:	781b      	ldrb	r3, [r3, #0]
 802f806:	b29b      	uxth	r3, r3
 802f808:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 802f80a:	e013      	b.n	802f834 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 802f80c:	f107 030a 	add.w	r3, r7, #10
 802f810:	4619      	mov	r1, r3
 802f812:	6978      	ldr	r0, [r7, #20]
 802f814:	f000 f81b 	bl	802f84e <USBD_GetNextDesc>
 802f818:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802f81a:	697b      	ldr	r3, [r7, #20]
 802f81c:	785b      	ldrb	r3, [r3, #1]
 802f81e:	2b05      	cmp	r3, #5
 802f820:	d108      	bne.n	802f834 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 802f822:	697b      	ldr	r3, [r7, #20]
 802f824:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 802f826:	693b      	ldr	r3, [r7, #16]
 802f828:	789b      	ldrb	r3, [r3, #2]
 802f82a:	78fa      	ldrb	r2, [r7, #3]
 802f82c:	429a      	cmp	r2, r3
 802f82e:	d008      	beq.n	802f842 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 802f830:	2300      	movs	r3, #0
 802f832:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 802f834:	68fb      	ldr	r3, [r7, #12]
 802f836:	885b      	ldrh	r3, [r3, #2]
 802f838:	b29a      	uxth	r2, r3
 802f83a:	897b      	ldrh	r3, [r7, #10]
 802f83c:	429a      	cmp	r2, r3
 802f83e:	d8e5      	bhi.n	802f80c <USBD_GetEpDesc+0x32>
 802f840:	e000      	b.n	802f844 <USBD_GetEpDesc+0x6a>
          break;
 802f842:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 802f844:	693b      	ldr	r3, [r7, #16]
}
 802f846:	4618      	mov	r0, r3
 802f848:	3718      	adds	r7, #24
 802f84a:	46bd      	mov	sp, r7
 802f84c:	bd80      	pop	{r7, pc}

0802f84e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 802f84e:	b480      	push	{r7}
 802f850:	b085      	sub	sp, #20
 802f852:	af00      	add	r7, sp, #0
 802f854:	6078      	str	r0, [r7, #4]
 802f856:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 802f858:	687b      	ldr	r3, [r7, #4]
 802f85a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 802f85c:	683b      	ldr	r3, [r7, #0]
 802f85e:	881a      	ldrh	r2, [r3, #0]
 802f860:	68fb      	ldr	r3, [r7, #12]
 802f862:	781b      	ldrb	r3, [r3, #0]
 802f864:	b29b      	uxth	r3, r3
 802f866:	4413      	add	r3, r2
 802f868:	b29a      	uxth	r2, r3
 802f86a:	683b      	ldr	r3, [r7, #0]
 802f86c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 802f86e:	68fb      	ldr	r3, [r7, #12]
 802f870:	781b      	ldrb	r3, [r3, #0]
 802f872:	461a      	mov	r2, r3
 802f874:	687b      	ldr	r3, [r7, #4]
 802f876:	4413      	add	r3, r2
 802f878:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802f87a:	68fb      	ldr	r3, [r7, #12]
}
 802f87c:	4618      	mov	r0, r3
 802f87e:	3714      	adds	r7, #20
 802f880:	46bd      	mov	sp, r7
 802f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f886:	4770      	bx	lr

0802f888 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 802f888:	b480      	push	{r7}
 802f88a:	b087      	sub	sp, #28
 802f88c:	af00      	add	r7, sp, #0
 802f88e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 802f890:	687b      	ldr	r3, [r7, #4]
 802f892:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802f894:	697b      	ldr	r3, [r7, #20]
 802f896:	781b      	ldrb	r3, [r3, #0]
 802f898:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 802f89a:	697b      	ldr	r3, [r7, #20]
 802f89c:	3301      	adds	r3, #1
 802f89e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 802f8a0:	697b      	ldr	r3, [r7, #20]
 802f8a2:	781b      	ldrb	r3, [r3, #0]
 802f8a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802f8a6:	8a3b      	ldrh	r3, [r7, #16]
 802f8a8:	021b      	lsls	r3, r3, #8
 802f8aa:	b21a      	sxth	r2, r3
 802f8ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802f8b0:	4313      	orrs	r3, r2
 802f8b2:	b21b      	sxth	r3, r3
 802f8b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802f8b6:	89fb      	ldrh	r3, [r7, #14]
}
 802f8b8:	4618      	mov	r0, r3
 802f8ba:	371c      	adds	r7, #28
 802f8bc:	46bd      	mov	sp, r7
 802f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8c2:	4770      	bx	lr

0802f8c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f8c4:	b580      	push	{r7, lr}
 802f8c6:	b084      	sub	sp, #16
 802f8c8:	af00      	add	r7, sp, #0
 802f8ca:	6078      	str	r0, [r7, #4]
 802f8cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f8ce:	2300      	movs	r3, #0
 802f8d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f8d2:	683b      	ldr	r3, [r7, #0]
 802f8d4:	781b      	ldrb	r3, [r3, #0]
 802f8d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f8da:	2b40      	cmp	r3, #64	; 0x40
 802f8dc:	d005      	beq.n	802f8ea <USBD_StdDevReq+0x26>
 802f8de:	2b40      	cmp	r3, #64	; 0x40
 802f8e0:	d857      	bhi.n	802f992 <USBD_StdDevReq+0xce>
 802f8e2:	2b00      	cmp	r3, #0
 802f8e4:	d00f      	beq.n	802f906 <USBD_StdDevReq+0x42>
 802f8e6:	2b20      	cmp	r3, #32
 802f8e8:	d153      	bne.n	802f992 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 802f8ea:	687b      	ldr	r3, [r7, #4]
 802f8ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802f8f0:	687b      	ldr	r3, [r7, #4]
 802f8f2:	32ae      	adds	r2, #174	; 0xae
 802f8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802f8f8:	689b      	ldr	r3, [r3, #8]
 802f8fa:	6839      	ldr	r1, [r7, #0]
 802f8fc:	6878      	ldr	r0, [r7, #4]
 802f8fe:	4798      	blx	r3
 802f900:	4603      	mov	r3, r0
 802f902:	73fb      	strb	r3, [r7, #15]
      break;
 802f904:	e04a      	b.n	802f99c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802f906:	683b      	ldr	r3, [r7, #0]
 802f908:	785b      	ldrb	r3, [r3, #1]
 802f90a:	2b09      	cmp	r3, #9
 802f90c:	d83b      	bhi.n	802f986 <USBD_StdDevReq+0xc2>
 802f90e:	a201      	add	r2, pc, #4	; (adr r2, 802f914 <USBD_StdDevReq+0x50>)
 802f910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f914:	0802f969 	.word	0x0802f969
 802f918:	0802f97d 	.word	0x0802f97d
 802f91c:	0802f987 	.word	0x0802f987
 802f920:	0802f973 	.word	0x0802f973
 802f924:	0802f987 	.word	0x0802f987
 802f928:	0802f947 	.word	0x0802f947
 802f92c:	0802f93d 	.word	0x0802f93d
 802f930:	0802f987 	.word	0x0802f987
 802f934:	0802f95f 	.word	0x0802f95f
 802f938:	0802f951 	.word	0x0802f951
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 802f93c:	6839      	ldr	r1, [r7, #0]
 802f93e:	6878      	ldr	r0, [r7, #4]
 802f940:	f000 fa3c 	bl	802fdbc <USBD_GetDescriptor>
          break;
 802f944:	e024      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802f946:	6839      	ldr	r1, [r7, #0]
 802f948:	6878      	ldr	r0, [r7, #4]
 802f94a:	f000 fba1 	bl	8030090 <USBD_SetAddress>
          break;
 802f94e:	e01f      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 802f950:	6839      	ldr	r1, [r7, #0]
 802f952:	6878      	ldr	r0, [r7, #4]
 802f954:	f000 fbe0 	bl	8030118 <USBD_SetConfig>
 802f958:	4603      	mov	r3, r0
 802f95a:	73fb      	strb	r3, [r7, #15]
          break;
 802f95c:	e018      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802f95e:	6839      	ldr	r1, [r7, #0]
 802f960:	6878      	ldr	r0, [r7, #4]
 802f962:	f000 fc83 	bl	803026c <USBD_GetConfig>
          break;
 802f966:	e013      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 802f968:	6839      	ldr	r1, [r7, #0]
 802f96a:	6878      	ldr	r0, [r7, #4]
 802f96c:	f000 fcb4 	bl	80302d8 <USBD_GetStatus>
          break;
 802f970:	e00e      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802f972:	6839      	ldr	r1, [r7, #0]
 802f974:	6878      	ldr	r0, [r7, #4]
 802f976:	f000 fce3 	bl	8030340 <USBD_SetFeature>
          break;
 802f97a:	e009      	b.n	802f990 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802f97c:	6839      	ldr	r1, [r7, #0]
 802f97e:	6878      	ldr	r0, [r7, #4]
 802f980:	f000 fd07 	bl	8030392 <USBD_ClrFeature>
          break;
 802f984:	e004      	b.n	802f990 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 802f986:	6839      	ldr	r1, [r7, #0]
 802f988:	6878      	ldr	r0, [r7, #4]
 802f98a:	f000 fd5e 	bl	803044a <USBD_CtlError>
          break;
 802f98e:	bf00      	nop
      }
      break;
 802f990:	e004      	b.n	802f99c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802f992:	6839      	ldr	r1, [r7, #0]
 802f994:	6878      	ldr	r0, [r7, #4]
 802f996:	f000 fd58 	bl	803044a <USBD_CtlError>
      break;
 802f99a:	bf00      	nop
  }

  return ret;
 802f99c:	7bfb      	ldrb	r3, [r7, #15]
}
 802f99e:	4618      	mov	r0, r3
 802f9a0:	3710      	adds	r7, #16
 802f9a2:	46bd      	mov	sp, r7
 802f9a4:	bd80      	pop	{r7, pc}
 802f9a6:	bf00      	nop

0802f9a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802f9a8:	b580      	push	{r7, lr}
 802f9aa:	b084      	sub	sp, #16
 802f9ac:	af00      	add	r7, sp, #0
 802f9ae:	6078      	str	r0, [r7, #4]
 802f9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802f9b2:	2300      	movs	r3, #0
 802f9b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802f9b6:	683b      	ldr	r3, [r7, #0]
 802f9b8:	781b      	ldrb	r3, [r3, #0]
 802f9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802f9be:	2b40      	cmp	r3, #64	; 0x40
 802f9c0:	d005      	beq.n	802f9ce <USBD_StdItfReq+0x26>
 802f9c2:	2b40      	cmp	r3, #64	; 0x40
 802f9c4:	d852      	bhi.n	802fa6c <USBD_StdItfReq+0xc4>
 802f9c6:	2b00      	cmp	r3, #0
 802f9c8:	d001      	beq.n	802f9ce <USBD_StdItfReq+0x26>
 802f9ca:	2b20      	cmp	r3, #32
 802f9cc:	d14e      	bne.n	802fa6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802f9ce:	687b      	ldr	r3, [r7, #4]
 802f9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802f9d4:	b2db      	uxtb	r3, r3
 802f9d6:	3b01      	subs	r3, #1
 802f9d8:	2b02      	cmp	r3, #2
 802f9da:	d840      	bhi.n	802fa5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802f9dc:	683b      	ldr	r3, [r7, #0]
 802f9de:	889b      	ldrh	r3, [r3, #4]
 802f9e0:	b2db      	uxtb	r3, r3
 802f9e2:	2b01      	cmp	r3, #1
 802f9e4:	d836      	bhi.n	802fa54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 802f9e6:	683b      	ldr	r3, [r7, #0]
 802f9e8:	889b      	ldrh	r3, [r3, #4]
 802f9ea:	b2db      	uxtb	r3, r3
 802f9ec:	4619      	mov	r1, r3
 802f9ee:	6878      	ldr	r0, [r7, #4]
 802f9f0:	f7ff fed9 	bl	802f7a6 <USBD_CoreFindIF>
 802f9f4:	4603      	mov	r3, r0
 802f9f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802f9f8:	7bbb      	ldrb	r3, [r7, #14]
 802f9fa:	2bff      	cmp	r3, #255	; 0xff
 802f9fc:	d01d      	beq.n	802fa3a <USBD_StdItfReq+0x92>
 802f9fe:	7bbb      	ldrb	r3, [r7, #14]
 802fa00:	2b00      	cmp	r3, #0
 802fa02:	d11a      	bne.n	802fa3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 802fa04:	7bba      	ldrb	r2, [r7, #14]
 802fa06:	687b      	ldr	r3, [r7, #4]
 802fa08:	32ae      	adds	r2, #174	; 0xae
 802fa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa0e:	689b      	ldr	r3, [r3, #8]
 802fa10:	2b00      	cmp	r3, #0
 802fa12:	d00f      	beq.n	802fa34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 802fa14:	7bba      	ldrb	r2, [r7, #14]
 802fa16:	687b      	ldr	r3, [r7, #4]
 802fa18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fa1c:	7bba      	ldrb	r2, [r7, #14]
 802fa1e:	687b      	ldr	r3, [r7, #4]
 802fa20:	32ae      	adds	r2, #174	; 0xae
 802fa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fa26:	689b      	ldr	r3, [r3, #8]
 802fa28:	6839      	ldr	r1, [r7, #0]
 802fa2a:	6878      	ldr	r0, [r7, #4]
 802fa2c:	4798      	blx	r3
 802fa2e:	4603      	mov	r3, r0
 802fa30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa32:	e004      	b.n	802fa3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 802fa34:	2303      	movs	r3, #3
 802fa36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 802fa38:	e001      	b.n	802fa3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 802fa3a:	2303      	movs	r3, #3
 802fa3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 802fa3e:	683b      	ldr	r3, [r7, #0]
 802fa40:	88db      	ldrh	r3, [r3, #6]
 802fa42:	2b00      	cmp	r3, #0
 802fa44:	d110      	bne.n	802fa68 <USBD_StdItfReq+0xc0>
 802fa46:	7bfb      	ldrb	r3, [r7, #15]
 802fa48:	2b00      	cmp	r3, #0
 802fa4a:	d10d      	bne.n	802fa68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 802fa4c:	6878      	ldr	r0, [r7, #4]
 802fa4e:	f000 fdc7 	bl	80305e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802fa52:	e009      	b.n	802fa68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 802fa54:	6839      	ldr	r1, [r7, #0]
 802fa56:	6878      	ldr	r0, [r7, #4]
 802fa58:	f000 fcf7 	bl	803044a <USBD_CtlError>
          break;
 802fa5c:	e004      	b.n	802fa68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802fa5e:	6839      	ldr	r1, [r7, #0]
 802fa60:	6878      	ldr	r0, [r7, #4]
 802fa62:	f000 fcf2 	bl	803044a <USBD_CtlError>
          break;
 802fa66:	e000      	b.n	802fa6a <USBD_StdItfReq+0xc2>
          break;
 802fa68:	bf00      	nop
      }
      break;
 802fa6a:	e004      	b.n	802fa76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 802fa6c:	6839      	ldr	r1, [r7, #0]
 802fa6e:	6878      	ldr	r0, [r7, #4]
 802fa70:	f000 fceb 	bl	803044a <USBD_CtlError>
      break;
 802fa74:	bf00      	nop
  }

  return ret;
 802fa76:	7bfb      	ldrb	r3, [r7, #15]
}
 802fa78:	4618      	mov	r0, r3
 802fa7a:	3710      	adds	r7, #16
 802fa7c:	46bd      	mov	sp, r7
 802fa7e:	bd80      	pop	{r7, pc}

0802fa80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fa80:	b580      	push	{r7, lr}
 802fa82:	b084      	sub	sp, #16
 802fa84:	af00      	add	r7, sp, #0
 802fa86:	6078      	str	r0, [r7, #4]
 802fa88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 802fa8a:	2300      	movs	r3, #0
 802fa8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 802fa8e:	683b      	ldr	r3, [r7, #0]
 802fa90:	889b      	ldrh	r3, [r3, #4]
 802fa92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802fa94:	683b      	ldr	r3, [r7, #0]
 802fa96:	781b      	ldrb	r3, [r3, #0]
 802fa98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802fa9c:	2b40      	cmp	r3, #64	; 0x40
 802fa9e:	d007      	beq.n	802fab0 <USBD_StdEPReq+0x30>
 802faa0:	2b40      	cmp	r3, #64	; 0x40
 802faa2:	f200 817f 	bhi.w	802fda4 <USBD_StdEPReq+0x324>
 802faa6:	2b00      	cmp	r3, #0
 802faa8:	d02a      	beq.n	802fb00 <USBD_StdEPReq+0x80>
 802faaa:	2b20      	cmp	r3, #32
 802faac:	f040 817a 	bne.w	802fda4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 802fab0:	7bbb      	ldrb	r3, [r7, #14]
 802fab2:	4619      	mov	r1, r3
 802fab4:	6878      	ldr	r0, [r7, #4]
 802fab6:	f7ff fe83 	bl	802f7c0 <USBD_CoreFindEP>
 802faba:	4603      	mov	r3, r0
 802fabc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fabe:	7b7b      	ldrb	r3, [r7, #13]
 802fac0:	2bff      	cmp	r3, #255	; 0xff
 802fac2:	f000 8174 	beq.w	802fdae <USBD_StdEPReq+0x32e>
 802fac6:	7b7b      	ldrb	r3, [r7, #13]
 802fac8:	2b00      	cmp	r3, #0
 802faca:	f040 8170 	bne.w	802fdae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 802face:	7b7a      	ldrb	r2, [r7, #13]
 802fad0:	687b      	ldr	r3, [r7, #4]
 802fad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 802fad6:	7b7a      	ldrb	r2, [r7, #13]
 802fad8:	687b      	ldr	r3, [r7, #4]
 802fada:	32ae      	adds	r2, #174	; 0xae
 802fadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fae0:	689b      	ldr	r3, [r3, #8]
 802fae2:	2b00      	cmp	r3, #0
 802fae4:	f000 8163 	beq.w	802fdae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 802fae8:	7b7a      	ldrb	r2, [r7, #13]
 802faea:	687b      	ldr	r3, [r7, #4]
 802faec:	32ae      	adds	r2, #174	; 0xae
 802faee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802faf2:	689b      	ldr	r3, [r3, #8]
 802faf4:	6839      	ldr	r1, [r7, #0]
 802faf6:	6878      	ldr	r0, [r7, #4]
 802faf8:	4798      	blx	r3
 802fafa:	4603      	mov	r3, r0
 802fafc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 802fafe:	e156      	b.n	802fdae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802fb00:	683b      	ldr	r3, [r7, #0]
 802fb02:	785b      	ldrb	r3, [r3, #1]
 802fb04:	2b03      	cmp	r3, #3
 802fb06:	d008      	beq.n	802fb1a <USBD_StdEPReq+0x9a>
 802fb08:	2b03      	cmp	r3, #3
 802fb0a:	f300 8145 	bgt.w	802fd98 <USBD_StdEPReq+0x318>
 802fb0e:	2b00      	cmp	r3, #0
 802fb10:	f000 809b 	beq.w	802fc4a <USBD_StdEPReq+0x1ca>
 802fb14:	2b01      	cmp	r3, #1
 802fb16:	d03c      	beq.n	802fb92 <USBD_StdEPReq+0x112>
 802fb18:	e13e      	b.n	802fd98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 802fb1a:	687b      	ldr	r3, [r7, #4]
 802fb1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb20:	b2db      	uxtb	r3, r3
 802fb22:	2b02      	cmp	r3, #2
 802fb24:	d002      	beq.n	802fb2c <USBD_StdEPReq+0xac>
 802fb26:	2b03      	cmp	r3, #3
 802fb28:	d016      	beq.n	802fb58 <USBD_StdEPReq+0xd8>
 802fb2a:	e02c      	b.n	802fb86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fb2c:	7bbb      	ldrb	r3, [r7, #14]
 802fb2e:	2b00      	cmp	r3, #0
 802fb30:	d00d      	beq.n	802fb4e <USBD_StdEPReq+0xce>
 802fb32:	7bbb      	ldrb	r3, [r7, #14]
 802fb34:	2b80      	cmp	r3, #128	; 0x80
 802fb36:	d00a      	beq.n	802fb4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb38:	7bbb      	ldrb	r3, [r7, #14]
 802fb3a:	4619      	mov	r1, r3
 802fb3c:	6878      	ldr	r0, [r7, #4]
 802fb3e:	f001 fbd3 	bl	80312e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fb42:	2180      	movs	r1, #128	; 0x80
 802fb44:	6878      	ldr	r0, [r7, #4]
 802fb46:	f001 fbcf 	bl	80312e8 <USBD_LL_StallEP>
 802fb4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fb4c:	e020      	b.n	802fb90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 802fb4e:	6839      	ldr	r1, [r7, #0]
 802fb50:	6878      	ldr	r0, [r7, #4]
 802fb52:	f000 fc7a 	bl	803044a <USBD_CtlError>
              break;
 802fb56:	e01b      	b.n	802fb90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fb58:	683b      	ldr	r3, [r7, #0]
 802fb5a:	885b      	ldrh	r3, [r3, #2]
 802fb5c:	2b00      	cmp	r3, #0
 802fb5e:	d10e      	bne.n	802fb7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 802fb60:	7bbb      	ldrb	r3, [r7, #14]
 802fb62:	2b00      	cmp	r3, #0
 802fb64:	d00b      	beq.n	802fb7e <USBD_StdEPReq+0xfe>
 802fb66:	7bbb      	ldrb	r3, [r7, #14]
 802fb68:	2b80      	cmp	r3, #128	; 0x80
 802fb6a:	d008      	beq.n	802fb7e <USBD_StdEPReq+0xfe>
 802fb6c:	683b      	ldr	r3, [r7, #0]
 802fb6e:	88db      	ldrh	r3, [r3, #6]
 802fb70:	2b00      	cmp	r3, #0
 802fb72:	d104      	bne.n	802fb7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 802fb74:	7bbb      	ldrb	r3, [r7, #14]
 802fb76:	4619      	mov	r1, r3
 802fb78:	6878      	ldr	r0, [r7, #4]
 802fb7a:	f001 fbb5 	bl	80312e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 802fb7e:	6878      	ldr	r0, [r7, #4]
 802fb80:	f000 fd2e 	bl	80305e0 <USBD_CtlSendStatus>

              break;
 802fb84:	e004      	b.n	802fb90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802fb86:	6839      	ldr	r1, [r7, #0]
 802fb88:	6878      	ldr	r0, [r7, #4]
 802fb8a:	f000 fc5e 	bl	803044a <USBD_CtlError>
              break;
 802fb8e:	bf00      	nop
          }
          break;
 802fb90:	e107      	b.n	802fda2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802fb92:	687b      	ldr	r3, [r7, #4]
 802fb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fb98:	b2db      	uxtb	r3, r3
 802fb9a:	2b02      	cmp	r3, #2
 802fb9c:	d002      	beq.n	802fba4 <USBD_StdEPReq+0x124>
 802fb9e:	2b03      	cmp	r3, #3
 802fba0:	d016      	beq.n	802fbd0 <USBD_StdEPReq+0x150>
 802fba2:	e04b      	b.n	802fc3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fba4:	7bbb      	ldrb	r3, [r7, #14]
 802fba6:	2b00      	cmp	r3, #0
 802fba8:	d00d      	beq.n	802fbc6 <USBD_StdEPReq+0x146>
 802fbaa:	7bbb      	ldrb	r3, [r7, #14]
 802fbac:	2b80      	cmp	r3, #128	; 0x80
 802fbae:	d00a      	beq.n	802fbc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 802fbb0:	7bbb      	ldrb	r3, [r7, #14]
 802fbb2:	4619      	mov	r1, r3
 802fbb4:	6878      	ldr	r0, [r7, #4]
 802fbb6:	f001 fb97 	bl	80312e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 802fbba:	2180      	movs	r1, #128	; 0x80
 802fbbc:	6878      	ldr	r0, [r7, #4]
 802fbbe:	f001 fb93 	bl	80312e8 <USBD_LL_StallEP>
 802fbc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802fbc4:	e040      	b.n	802fc48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802fbc6:	6839      	ldr	r1, [r7, #0]
 802fbc8:	6878      	ldr	r0, [r7, #4]
 802fbca:	f000 fc3e 	bl	803044a <USBD_CtlError>
              break;
 802fbce:	e03b      	b.n	802fc48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802fbd0:	683b      	ldr	r3, [r7, #0]
 802fbd2:	885b      	ldrh	r3, [r3, #2]
 802fbd4:	2b00      	cmp	r3, #0
 802fbd6:	d136      	bne.n	802fc46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802fbd8:	7bbb      	ldrb	r3, [r7, #14]
 802fbda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802fbde:	2b00      	cmp	r3, #0
 802fbe0:	d004      	beq.n	802fbec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802fbe2:	7bbb      	ldrb	r3, [r7, #14]
 802fbe4:	4619      	mov	r1, r3
 802fbe6:	6878      	ldr	r0, [r7, #4]
 802fbe8:	f001 fb9d 	bl	8031326 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 802fbec:	6878      	ldr	r0, [r7, #4]
 802fbee:	f000 fcf7 	bl	80305e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802fbf2:	7bbb      	ldrb	r3, [r7, #14]
 802fbf4:	4619      	mov	r1, r3
 802fbf6:	6878      	ldr	r0, [r7, #4]
 802fbf8:	f7ff fde2 	bl	802f7c0 <USBD_CoreFindEP>
 802fbfc:	4603      	mov	r3, r0
 802fbfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 802fc00:	7b7b      	ldrb	r3, [r7, #13]
 802fc02:	2bff      	cmp	r3, #255	; 0xff
 802fc04:	d01f      	beq.n	802fc46 <USBD_StdEPReq+0x1c6>
 802fc06:	7b7b      	ldrb	r3, [r7, #13]
 802fc08:	2b00      	cmp	r3, #0
 802fc0a:	d11c      	bne.n	802fc46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 802fc0c:	7b7a      	ldrb	r2, [r7, #13]
 802fc0e:	687b      	ldr	r3, [r7, #4]
 802fc10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802fc14:	7b7a      	ldrb	r2, [r7, #13]
 802fc16:	687b      	ldr	r3, [r7, #4]
 802fc18:	32ae      	adds	r2, #174	; 0xae
 802fc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc1e:	689b      	ldr	r3, [r3, #8]
 802fc20:	2b00      	cmp	r3, #0
 802fc22:	d010      	beq.n	802fc46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 802fc24:	7b7a      	ldrb	r2, [r7, #13]
 802fc26:	687b      	ldr	r3, [r7, #4]
 802fc28:	32ae      	adds	r2, #174	; 0xae
 802fc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802fc2e:	689b      	ldr	r3, [r3, #8]
 802fc30:	6839      	ldr	r1, [r7, #0]
 802fc32:	6878      	ldr	r0, [r7, #4]
 802fc34:	4798      	blx	r3
 802fc36:	4603      	mov	r3, r0
 802fc38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 802fc3a:	e004      	b.n	802fc46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 802fc3c:	6839      	ldr	r1, [r7, #0]
 802fc3e:	6878      	ldr	r0, [r7, #4]
 802fc40:	f000 fc03 	bl	803044a <USBD_CtlError>
              break;
 802fc44:	e000      	b.n	802fc48 <USBD_StdEPReq+0x1c8>
              break;
 802fc46:	bf00      	nop
          }
          break;
 802fc48:	e0ab      	b.n	802fda2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802fc4a:	687b      	ldr	r3, [r7, #4]
 802fc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802fc50:	b2db      	uxtb	r3, r3
 802fc52:	2b02      	cmp	r3, #2
 802fc54:	d002      	beq.n	802fc5c <USBD_StdEPReq+0x1dc>
 802fc56:	2b03      	cmp	r3, #3
 802fc58:	d032      	beq.n	802fcc0 <USBD_StdEPReq+0x240>
 802fc5a:	e097      	b.n	802fd8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802fc5c:	7bbb      	ldrb	r3, [r7, #14]
 802fc5e:	2b00      	cmp	r3, #0
 802fc60:	d007      	beq.n	802fc72 <USBD_StdEPReq+0x1f2>
 802fc62:	7bbb      	ldrb	r3, [r7, #14]
 802fc64:	2b80      	cmp	r3, #128	; 0x80
 802fc66:	d004      	beq.n	802fc72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 802fc68:	6839      	ldr	r1, [r7, #0]
 802fc6a:	6878      	ldr	r0, [r7, #4]
 802fc6c:	f000 fbed 	bl	803044a <USBD_CtlError>
                break;
 802fc70:	e091      	b.n	802fd96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fc72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fc76:	2b00      	cmp	r3, #0
 802fc78:	da0b      	bge.n	802fc92 <USBD_StdEPReq+0x212>
 802fc7a:	7bbb      	ldrb	r3, [r7, #14]
 802fc7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fc80:	4613      	mov	r3, r2
 802fc82:	009b      	lsls	r3, r3, #2
 802fc84:	4413      	add	r3, r2
 802fc86:	009b      	lsls	r3, r3, #2
 802fc88:	3310      	adds	r3, #16
 802fc8a:	687a      	ldr	r2, [r7, #4]
 802fc8c:	4413      	add	r3, r2
 802fc8e:	3304      	adds	r3, #4
 802fc90:	e00b      	b.n	802fcaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fc92:	7bbb      	ldrb	r3, [r7, #14]
 802fc94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fc98:	4613      	mov	r3, r2
 802fc9a:	009b      	lsls	r3, r3, #2
 802fc9c:	4413      	add	r3, r2
 802fc9e:	009b      	lsls	r3, r3, #2
 802fca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fca4:	687a      	ldr	r2, [r7, #4]
 802fca6:	4413      	add	r3, r2
 802fca8:	3304      	adds	r3, #4
 802fcaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 802fcac:	68bb      	ldr	r3, [r7, #8]
 802fcae:	2200      	movs	r2, #0
 802fcb0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fcb2:	68bb      	ldr	r3, [r7, #8]
 802fcb4:	2202      	movs	r2, #2
 802fcb6:	4619      	mov	r1, r3
 802fcb8:	6878      	ldr	r0, [r7, #4]
 802fcba:	f000 fc37 	bl	803052c <USBD_CtlSendData>
              break;
 802fcbe:	e06a      	b.n	802fd96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 802fcc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fcc4:	2b00      	cmp	r3, #0
 802fcc6:	da11      	bge.n	802fcec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802fcc8:	7bbb      	ldrb	r3, [r7, #14]
 802fcca:	f003 020f 	and.w	r2, r3, #15
 802fcce:	6879      	ldr	r1, [r7, #4]
 802fcd0:	4613      	mov	r3, r2
 802fcd2:	009b      	lsls	r3, r3, #2
 802fcd4:	4413      	add	r3, r2
 802fcd6:	009b      	lsls	r3, r3, #2
 802fcd8:	440b      	add	r3, r1
 802fcda:	3324      	adds	r3, #36	; 0x24
 802fcdc:	881b      	ldrh	r3, [r3, #0]
 802fcde:	2b00      	cmp	r3, #0
 802fce0:	d117      	bne.n	802fd12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fce2:	6839      	ldr	r1, [r7, #0]
 802fce4:	6878      	ldr	r0, [r7, #4]
 802fce6:	f000 fbb0 	bl	803044a <USBD_CtlError>
                  break;
 802fcea:	e054      	b.n	802fd96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 802fcec:	7bbb      	ldrb	r3, [r7, #14]
 802fcee:	f003 020f 	and.w	r2, r3, #15
 802fcf2:	6879      	ldr	r1, [r7, #4]
 802fcf4:	4613      	mov	r3, r2
 802fcf6:	009b      	lsls	r3, r3, #2
 802fcf8:	4413      	add	r3, r2
 802fcfa:	009b      	lsls	r3, r3, #2
 802fcfc:	440b      	add	r3, r1
 802fcfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802fd02:	881b      	ldrh	r3, [r3, #0]
 802fd04:	2b00      	cmp	r3, #0
 802fd06:	d104      	bne.n	802fd12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802fd08:	6839      	ldr	r1, [r7, #0]
 802fd0a:	6878      	ldr	r0, [r7, #4]
 802fd0c:	f000 fb9d 	bl	803044a <USBD_CtlError>
                  break;
 802fd10:	e041      	b.n	802fd96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802fd16:	2b00      	cmp	r3, #0
 802fd18:	da0b      	bge.n	802fd32 <USBD_StdEPReq+0x2b2>
 802fd1a:	7bbb      	ldrb	r3, [r7, #14]
 802fd1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802fd20:	4613      	mov	r3, r2
 802fd22:	009b      	lsls	r3, r3, #2
 802fd24:	4413      	add	r3, r2
 802fd26:	009b      	lsls	r3, r3, #2
 802fd28:	3310      	adds	r3, #16
 802fd2a:	687a      	ldr	r2, [r7, #4]
 802fd2c:	4413      	add	r3, r2
 802fd2e:	3304      	adds	r3, #4
 802fd30:	e00b      	b.n	802fd4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802fd32:	7bbb      	ldrb	r3, [r7, #14]
 802fd34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802fd38:	4613      	mov	r3, r2
 802fd3a:	009b      	lsls	r3, r3, #2
 802fd3c:	4413      	add	r3, r2
 802fd3e:	009b      	lsls	r3, r3, #2
 802fd40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802fd44:	687a      	ldr	r2, [r7, #4]
 802fd46:	4413      	add	r3, r2
 802fd48:	3304      	adds	r3, #4
 802fd4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 802fd4c:	7bbb      	ldrb	r3, [r7, #14]
 802fd4e:	2b00      	cmp	r3, #0
 802fd50:	d002      	beq.n	802fd58 <USBD_StdEPReq+0x2d8>
 802fd52:	7bbb      	ldrb	r3, [r7, #14]
 802fd54:	2b80      	cmp	r3, #128	; 0x80
 802fd56:	d103      	bne.n	802fd60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 802fd58:	68bb      	ldr	r3, [r7, #8]
 802fd5a:	2200      	movs	r2, #0
 802fd5c:	601a      	str	r2, [r3, #0]
 802fd5e:	e00e      	b.n	802fd7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 802fd60:	7bbb      	ldrb	r3, [r7, #14]
 802fd62:	4619      	mov	r1, r3
 802fd64:	6878      	ldr	r0, [r7, #4]
 802fd66:	f001 fafd 	bl	8031364 <USBD_LL_IsStallEP>
 802fd6a:	4603      	mov	r3, r0
 802fd6c:	2b00      	cmp	r3, #0
 802fd6e:	d003      	beq.n	802fd78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 802fd70:	68bb      	ldr	r3, [r7, #8]
 802fd72:	2201      	movs	r2, #1
 802fd74:	601a      	str	r2, [r3, #0]
 802fd76:	e002      	b.n	802fd7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 802fd78:	68bb      	ldr	r3, [r7, #8]
 802fd7a:	2200      	movs	r2, #0
 802fd7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802fd7e:	68bb      	ldr	r3, [r7, #8]
 802fd80:	2202      	movs	r2, #2
 802fd82:	4619      	mov	r1, r3
 802fd84:	6878      	ldr	r0, [r7, #4]
 802fd86:	f000 fbd1 	bl	803052c <USBD_CtlSendData>
              break;
 802fd8a:	e004      	b.n	802fd96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 802fd8c:	6839      	ldr	r1, [r7, #0]
 802fd8e:	6878      	ldr	r0, [r7, #4]
 802fd90:	f000 fb5b 	bl	803044a <USBD_CtlError>
              break;
 802fd94:	bf00      	nop
          }
          break;
 802fd96:	e004      	b.n	802fda2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 802fd98:	6839      	ldr	r1, [r7, #0]
 802fd9a:	6878      	ldr	r0, [r7, #4]
 802fd9c:	f000 fb55 	bl	803044a <USBD_CtlError>
          break;
 802fda0:	bf00      	nop
      }
      break;
 802fda2:	e005      	b.n	802fdb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802fda4:	6839      	ldr	r1, [r7, #0]
 802fda6:	6878      	ldr	r0, [r7, #4]
 802fda8:	f000 fb4f 	bl	803044a <USBD_CtlError>
      break;
 802fdac:	e000      	b.n	802fdb0 <USBD_StdEPReq+0x330>
      break;
 802fdae:	bf00      	nop
  }

  return ret;
 802fdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 802fdb2:	4618      	mov	r0, r3
 802fdb4:	3710      	adds	r7, #16
 802fdb6:	46bd      	mov	sp, r7
 802fdb8:	bd80      	pop	{r7, pc}
	...

0802fdbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802fdbc:	b580      	push	{r7, lr}
 802fdbe:	b084      	sub	sp, #16
 802fdc0:	af00      	add	r7, sp, #0
 802fdc2:	6078      	str	r0, [r7, #4]
 802fdc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802fdc6:	2300      	movs	r3, #0
 802fdc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 802fdca:	2300      	movs	r3, #0
 802fdcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802fdce:	2300      	movs	r3, #0
 802fdd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802fdd2:	683b      	ldr	r3, [r7, #0]
 802fdd4:	885b      	ldrh	r3, [r3, #2]
 802fdd6:	0a1b      	lsrs	r3, r3, #8
 802fdd8:	b29b      	uxth	r3, r3
 802fdda:	3b01      	subs	r3, #1
 802fddc:	2b06      	cmp	r3, #6
 802fdde:	f200 8128 	bhi.w	8030032 <USBD_GetDescriptor+0x276>
 802fde2:	a201      	add	r2, pc, #4	; (adr r2, 802fde8 <USBD_GetDescriptor+0x2c>)
 802fde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fde8:	0802fe05 	.word	0x0802fe05
 802fdec:	0802fe1d 	.word	0x0802fe1d
 802fdf0:	0802fe5d 	.word	0x0802fe5d
 802fdf4:	08030033 	.word	0x08030033
 802fdf8:	08030033 	.word	0x08030033
 802fdfc:	0802ffd3 	.word	0x0802ffd3
 802fe00:	0802ffff 	.word	0x0802ffff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802fe04:	687b      	ldr	r3, [r7, #4]
 802fe06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe0a:	681b      	ldr	r3, [r3, #0]
 802fe0c:	687a      	ldr	r2, [r7, #4]
 802fe0e:	7c12      	ldrb	r2, [r2, #16]
 802fe10:	f107 0108 	add.w	r1, r7, #8
 802fe14:	4610      	mov	r0, r2
 802fe16:	4798      	blx	r3
 802fe18:	60f8      	str	r0, [r7, #12]
      break;
 802fe1a:	e112      	b.n	8030042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fe1c:	687b      	ldr	r3, [r7, #4]
 802fe1e:	7c1b      	ldrb	r3, [r3, #16]
 802fe20:	2b00      	cmp	r3, #0
 802fe22:	d10d      	bne.n	802fe40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802fe2c:	f107 0208 	add.w	r2, r7, #8
 802fe30:	4610      	mov	r0, r2
 802fe32:	4798      	blx	r3
 802fe34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe36:	68fb      	ldr	r3, [r7, #12]
 802fe38:	3301      	adds	r3, #1
 802fe3a:	2202      	movs	r2, #2
 802fe3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802fe3e:	e100      	b.n	8030042 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802fe40:	687b      	ldr	r3, [r7, #4]
 802fe42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802fe46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802fe48:	f107 0208 	add.w	r2, r7, #8
 802fe4c:	4610      	mov	r0, r2
 802fe4e:	4798      	blx	r3
 802fe50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802fe52:	68fb      	ldr	r3, [r7, #12]
 802fe54:	3301      	adds	r3, #1
 802fe56:	2202      	movs	r2, #2
 802fe58:	701a      	strb	r2, [r3, #0]
      break;
 802fe5a:	e0f2      	b.n	8030042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 802fe5c:	683b      	ldr	r3, [r7, #0]
 802fe5e:	885b      	ldrh	r3, [r3, #2]
 802fe60:	b2db      	uxtb	r3, r3
 802fe62:	2b05      	cmp	r3, #5
 802fe64:	f200 80ac 	bhi.w	802ffc0 <USBD_GetDescriptor+0x204>
 802fe68:	a201      	add	r2, pc, #4	; (adr r2, 802fe70 <USBD_GetDescriptor+0xb4>)
 802fe6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802fe6e:	bf00      	nop
 802fe70:	0802fe89 	.word	0x0802fe89
 802fe74:	0802febd 	.word	0x0802febd
 802fe78:	0802fef1 	.word	0x0802fef1
 802fe7c:	0802ff25 	.word	0x0802ff25
 802fe80:	0802ff59 	.word	0x0802ff59
 802fe84:	0802ff8d 	.word	0x0802ff8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 802fe88:	687b      	ldr	r3, [r7, #4]
 802fe8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe8e:	685b      	ldr	r3, [r3, #4]
 802fe90:	2b00      	cmp	r3, #0
 802fe92:	d00b      	beq.n	802feac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 802fe94:	687b      	ldr	r3, [r7, #4]
 802fe96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fe9a:	685b      	ldr	r3, [r3, #4]
 802fe9c:	687a      	ldr	r2, [r7, #4]
 802fe9e:	7c12      	ldrb	r2, [r2, #16]
 802fea0:	f107 0108 	add.w	r1, r7, #8
 802fea4:	4610      	mov	r0, r2
 802fea6:	4798      	blx	r3
 802fea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802feaa:	e091      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802feac:	6839      	ldr	r1, [r7, #0]
 802feae:	6878      	ldr	r0, [r7, #4]
 802feb0:	f000 facb 	bl	803044a <USBD_CtlError>
            err++;
 802feb4:	7afb      	ldrb	r3, [r7, #11]
 802feb6:	3301      	adds	r3, #1
 802feb8:	72fb      	strb	r3, [r7, #11]
          break;
 802feba:	e089      	b.n	802ffd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 802febc:	687b      	ldr	r3, [r7, #4]
 802febe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fec2:	689b      	ldr	r3, [r3, #8]
 802fec4:	2b00      	cmp	r3, #0
 802fec6:	d00b      	beq.n	802fee0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 802fec8:	687b      	ldr	r3, [r7, #4]
 802feca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fece:	689b      	ldr	r3, [r3, #8]
 802fed0:	687a      	ldr	r2, [r7, #4]
 802fed2:	7c12      	ldrb	r2, [r2, #16]
 802fed4:	f107 0108 	add.w	r1, r7, #8
 802fed8:	4610      	mov	r0, r2
 802feda:	4798      	blx	r3
 802fedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802fede:	e077      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802fee0:	6839      	ldr	r1, [r7, #0]
 802fee2:	6878      	ldr	r0, [r7, #4]
 802fee4:	f000 fab1 	bl	803044a <USBD_CtlError>
            err++;
 802fee8:	7afb      	ldrb	r3, [r7, #11]
 802feea:	3301      	adds	r3, #1
 802feec:	72fb      	strb	r3, [r7, #11]
          break;
 802feee:	e06f      	b.n	802ffd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802fef0:	687b      	ldr	r3, [r7, #4]
 802fef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802fef6:	68db      	ldr	r3, [r3, #12]
 802fef8:	2b00      	cmp	r3, #0
 802fefa:	d00b      	beq.n	802ff14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802fefc:	687b      	ldr	r3, [r7, #4]
 802fefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff02:	68db      	ldr	r3, [r3, #12]
 802ff04:	687a      	ldr	r2, [r7, #4]
 802ff06:	7c12      	ldrb	r2, [r2, #16]
 802ff08:	f107 0108 	add.w	r1, r7, #8
 802ff0c:	4610      	mov	r0, r2
 802ff0e:	4798      	blx	r3
 802ff10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff12:	e05d      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff14:	6839      	ldr	r1, [r7, #0]
 802ff16:	6878      	ldr	r0, [r7, #4]
 802ff18:	f000 fa97 	bl	803044a <USBD_CtlError>
            err++;
 802ff1c:	7afb      	ldrb	r3, [r7, #11]
 802ff1e:	3301      	adds	r3, #1
 802ff20:	72fb      	strb	r3, [r7, #11]
          break;
 802ff22:	e055      	b.n	802ffd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802ff24:	687b      	ldr	r3, [r7, #4]
 802ff26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff2a:	691b      	ldr	r3, [r3, #16]
 802ff2c:	2b00      	cmp	r3, #0
 802ff2e:	d00b      	beq.n	802ff48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802ff30:	687b      	ldr	r3, [r7, #4]
 802ff32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff36:	691b      	ldr	r3, [r3, #16]
 802ff38:	687a      	ldr	r2, [r7, #4]
 802ff3a:	7c12      	ldrb	r2, [r2, #16]
 802ff3c:	f107 0108 	add.w	r1, r7, #8
 802ff40:	4610      	mov	r0, r2
 802ff42:	4798      	blx	r3
 802ff44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff46:	e043      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff48:	6839      	ldr	r1, [r7, #0]
 802ff4a:	6878      	ldr	r0, [r7, #4]
 802ff4c:	f000 fa7d 	bl	803044a <USBD_CtlError>
            err++;
 802ff50:	7afb      	ldrb	r3, [r7, #11]
 802ff52:	3301      	adds	r3, #1
 802ff54:	72fb      	strb	r3, [r7, #11]
          break;
 802ff56:	e03b      	b.n	802ffd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 802ff58:	687b      	ldr	r3, [r7, #4]
 802ff5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff5e:	695b      	ldr	r3, [r3, #20]
 802ff60:	2b00      	cmp	r3, #0
 802ff62:	d00b      	beq.n	802ff7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 802ff64:	687b      	ldr	r3, [r7, #4]
 802ff66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff6a:	695b      	ldr	r3, [r3, #20]
 802ff6c:	687a      	ldr	r2, [r7, #4]
 802ff6e:	7c12      	ldrb	r2, [r2, #16]
 802ff70:	f107 0108 	add.w	r1, r7, #8
 802ff74:	4610      	mov	r0, r2
 802ff76:	4798      	blx	r3
 802ff78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ff7a:	e029      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ff7c:	6839      	ldr	r1, [r7, #0]
 802ff7e:	6878      	ldr	r0, [r7, #4]
 802ff80:	f000 fa63 	bl	803044a <USBD_CtlError>
            err++;
 802ff84:	7afb      	ldrb	r3, [r7, #11]
 802ff86:	3301      	adds	r3, #1
 802ff88:	72fb      	strb	r3, [r7, #11]
          break;
 802ff8a:	e021      	b.n	802ffd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 802ff8c:	687b      	ldr	r3, [r7, #4]
 802ff8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff92:	699b      	ldr	r3, [r3, #24]
 802ff94:	2b00      	cmp	r3, #0
 802ff96:	d00b      	beq.n	802ffb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 802ff98:	687b      	ldr	r3, [r7, #4]
 802ff9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802ff9e:	699b      	ldr	r3, [r3, #24]
 802ffa0:	687a      	ldr	r2, [r7, #4]
 802ffa2:	7c12      	ldrb	r2, [r2, #16]
 802ffa4:	f107 0108 	add.w	r1, r7, #8
 802ffa8:	4610      	mov	r0, r2
 802ffaa:	4798      	blx	r3
 802ffac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802ffae:	e00f      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 802ffb0:	6839      	ldr	r1, [r7, #0]
 802ffb2:	6878      	ldr	r0, [r7, #4]
 802ffb4:	f000 fa49 	bl	803044a <USBD_CtlError>
            err++;
 802ffb8:	7afb      	ldrb	r3, [r7, #11]
 802ffba:	3301      	adds	r3, #1
 802ffbc:	72fb      	strb	r3, [r7, #11]
          break;
 802ffbe:	e007      	b.n	802ffd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802ffc0:	6839      	ldr	r1, [r7, #0]
 802ffc2:	6878      	ldr	r0, [r7, #4]
 802ffc4:	f000 fa41 	bl	803044a <USBD_CtlError>
          err++;
 802ffc8:	7afb      	ldrb	r3, [r7, #11]
 802ffca:	3301      	adds	r3, #1
 802ffcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 802ffce:	bf00      	nop
      }
      break;
 802ffd0:	e037      	b.n	8030042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802ffd2:	687b      	ldr	r3, [r7, #4]
 802ffd4:	7c1b      	ldrb	r3, [r3, #16]
 802ffd6:	2b00      	cmp	r3, #0
 802ffd8:	d109      	bne.n	802ffee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 802ffda:	687b      	ldr	r3, [r7, #4]
 802ffdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 802ffe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802ffe2:	f107 0208 	add.w	r2, r7, #8
 802ffe6:	4610      	mov	r0, r2
 802ffe8:	4798      	blx	r3
 802ffea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802ffec:	e029      	b.n	8030042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 802ffee:	6839      	ldr	r1, [r7, #0]
 802fff0:	6878      	ldr	r0, [r7, #4]
 802fff2:	f000 fa2a 	bl	803044a <USBD_CtlError>
        err++;
 802fff6:	7afb      	ldrb	r3, [r7, #11]
 802fff8:	3301      	adds	r3, #1
 802fffa:	72fb      	strb	r3, [r7, #11]
      break;
 802fffc:	e021      	b.n	8030042 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802fffe:	687b      	ldr	r3, [r7, #4]
 8030000:	7c1b      	ldrb	r3, [r3, #16]
 8030002:	2b00      	cmp	r3, #0
 8030004:	d10d      	bne.n	8030022 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8030006:	687b      	ldr	r3, [r7, #4]
 8030008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803000c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803000e:	f107 0208 	add.w	r2, r7, #8
 8030012:	4610      	mov	r0, r2
 8030014:	4798      	blx	r3
 8030016:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8030018:	68fb      	ldr	r3, [r7, #12]
 803001a:	3301      	adds	r3, #1
 803001c:	2207      	movs	r2, #7
 803001e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8030020:	e00f      	b.n	8030042 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8030022:	6839      	ldr	r1, [r7, #0]
 8030024:	6878      	ldr	r0, [r7, #4]
 8030026:	f000 fa10 	bl	803044a <USBD_CtlError>
        err++;
 803002a:	7afb      	ldrb	r3, [r7, #11]
 803002c:	3301      	adds	r3, #1
 803002e:	72fb      	strb	r3, [r7, #11]
      break;
 8030030:	e007      	b.n	8030042 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8030032:	6839      	ldr	r1, [r7, #0]
 8030034:	6878      	ldr	r0, [r7, #4]
 8030036:	f000 fa08 	bl	803044a <USBD_CtlError>
      err++;
 803003a:	7afb      	ldrb	r3, [r7, #11]
 803003c:	3301      	adds	r3, #1
 803003e:	72fb      	strb	r3, [r7, #11]
      break;
 8030040:	bf00      	nop
  }

  if (err != 0U)
 8030042:	7afb      	ldrb	r3, [r7, #11]
 8030044:	2b00      	cmp	r3, #0
 8030046:	d11e      	bne.n	8030086 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8030048:	683b      	ldr	r3, [r7, #0]
 803004a:	88db      	ldrh	r3, [r3, #6]
 803004c:	2b00      	cmp	r3, #0
 803004e:	d016      	beq.n	803007e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8030050:	893b      	ldrh	r3, [r7, #8]
 8030052:	2b00      	cmp	r3, #0
 8030054:	d00e      	beq.n	8030074 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8030056:	683b      	ldr	r3, [r7, #0]
 8030058:	88da      	ldrh	r2, [r3, #6]
 803005a:	893b      	ldrh	r3, [r7, #8]
 803005c:	4293      	cmp	r3, r2
 803005e:	bf28      	it	cs
 8030060:	4613      	movcs	r3, r2
 8030062:	b29b      	uxth	r3, r3
 8030064:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8030066:	893b      	ldrh	r3, [r7, #8]
 8030068:	461a      	mov	r2, r3
 803006a:	68f9      	ldr	r1, [r7, #12]
 803006c:	6878      	ldr	r0, [r7, #4]
 803006e:	f000 fa5d 	bl	803052c <USBD_CtlSendData>
 8030072:	e009      	b.n	8030088 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8030074:	6839      	ldr	r1, [r7, #0]
 8030076:	6878      	ldr	r0, [r7, #4]
 8030078:	f000 f9e7 	bl	803044a <USBD_CtlError>
 803007c:	e004      	b.n	8030088 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803007e:	6878      	ldr	r0, [r7, #4]
 8030080:	f000 faae 	bl	80305e0 <USBD_CtlSendStatus>
 8030084:	e000      	b.n	8030088 <USBD_GetDescriptor+0x2cc>
    return;
 8030086:	bf00      	nop
  }
}
 8030088:	3710      	adds	r7, #16
 803008a:	46bd      	mov	sp, r7
 803008c:	bd80      	pop	{r7, pc}
 803008e:	bf00      	nop

08030090 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030090:	b580      	push	{r7, lr}
 8030092:	b084      	sub	sp, #16
 8030094:	af00      	add	r7, sp, #0
 8030096:	6078      	str	r0, [r7, #4]
 8030098:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803009a:	683b      	ldr	r3, [r7, #0]
 803009c:	889b      	ldrh	r3, [r3, #4]
 803009e:	2b00      	cmp	r3, #0
 80300a0:	d131      	bne.n	8030106 <USBD_SetAddress+0x76>
 80300a2:	683b      	ldr	r3, [r7, #0]
 80300a4:	88db      	ldrh	r3, [r3, #6]
 80300a6:	2b00      	cmp	r3, #0
 80300a8:	d12d      	bne.n	8030106 <USBD_SetAddress+0x76>
 80300aa:	683b      	ldr	r3, [r7, #0]
 80300ac:	885b      	ldrh	r3, [r3, #2]
 80300ae:	2b7f      	cmp	r3, #127	; 0x7f
 80300b0:	d829      	bhi.n	8030106 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80300b2:	683b      	ldr	r3, [r7, #0]
 80300b4:	885b      	ldrh	r3, [r3, #2]
 80300b6:	b2db      	uxtb	r3, r3
 80300b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80300bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300be:	687b      	ldr	r3, [r7, #4]
 80300c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80300c4:	b2db      	uxtb	r3, r3
 80300c6:	2b03      	cmp	r3, #3
 80300c8:	d104      	bne.n	80300d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80300ca:	6839      	ldr	r1, [r7, #0]
 80300cc:	6878      	ldr	r0, [r7, #4]
 80300ce:	f000 f9bc 	bl	803044a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300d2:	e01d      	b.n	8030110 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80300d4:	687b      	ldr	r3, [r7, #4]
 80300d6:	7bfa      	ldrb	r2, [r7, #15]
 80300d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80300dc:	7bfb      	ldrb	r3, [r7, #15]
 80300de:	4619      	mov	r1, r3
 80300e0:	6878      	ldr	r0, [r7, #4]
 80300e2:	f001 f96b 	bl	80313bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80300e6:	6878      	ldr	r0, [r7, #4]
 80300e8:	f000 fa7a 	bl	80305e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80300ec:	7bfb      	ldrb	r3, [r7, #15]
 80300ee:	2b00      	cmp	r3, #0
 80300f0:	d004      	beq.n	80300fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80300f2:	687b      	ldr	r3, [r7, #4]
 80300f4:	2202      	movs	r2, #2
 80300f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80300fa:	e009      	b.n	8030110 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80300fc:	687b      	ldr	r3, [r7, #4]
 80300fe:	2201      	movs	r2, #1
 8030100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8030104:	e004      	b.n	8030110 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8030106:	6839      	ldr	r1, [r7, #0]
 8030108:	6878      	ldr	r0, [r7, #4]
 803010a:	f000 f99e 	bl	803044a <USBD_CtlError>
  }
}
 803010e:	bf00      	nop
 8030110:	bf00      	nop
 8030112:	3710      	adds	r7, #16
 8030114:	46bd      	mov	sp, r7
 8030116:	bd80      	pop	{r7, pc}

08030118 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030118:	b580      	push	{r7, lr}
 803011a:	b084      	sub	sp, #16
 803011c:	af00      	add	r7, sp, #0
 803011e:	6078      	str	r0, [r7, #4]
 8030120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8030122:	2300      	movs	r3, #0
 8030124:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8030126:	683b      	ldr	r3, [r7, #0]
 8030128:	885b      	ldrh	r3, [r3, #2]
 803012a:	b2da      	uxtb	r2, r3
 803012c:	4b4e      	ldr	r3, [pc, #312]	; (8030268 <USBD_SetConfig+0x150>)
 803012e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8030130:	4b4d      	ldr	r3, [pc, #308]	; (8030268 <USBD_SetConfig+0x150>)
 8030132:	781b      	ldrb	r3, [r3, #0]
 8030134:	2b01      	cmp	r3, #1
 8030136:	d905      	bls.n	8030144 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8030138:	6839      	ldr	r1, [r7, #0]
 803013a:	6878      	ldr	r0, [r7, #4]
 803013c:	f000 f985 	bl	803044a <USBD_CtlError>
    return USBD_FAIL;
 8030140:	2303      	movs	r3, #3
 8030142:	e08c      	b.n	803025e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8030144:	687b      	ldr	r3, [r7, #4]
 8030146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803014a:	b2db      	uxtb	r3, r3
 803014c:	2b02      	cmp	r3, #2
 803014e:	d002      	beq.n	8030156 <USBD_SetConfig+0x3e>
 8030150:	2b03      	cmp	r3, #3
 8030152:	d029      	beq.n	80301a8 <USBD_SetConfig+0x90>
 8030154:	e075      	b.n	8030242 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8030156:	4b44      	ldr	r3, [pc, #272]	; (8030268 <USBD_SetConfig+0x150>)
 8030158:	781b      	ldrb	r3, [r3, #0]
 803015a:	2b00      	cmp	r3, #0
 803015c:	d020      	beq.n	80301a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803015e:	4b42      	ldr	r3, [pc, #264]	; (8030268 <USBD_SetConfig+0x150>)
 8030160:	781b      	ldrb	r3, [r3, #0]
 8030162:	461a      	mov	r2, r3
 8030164:	687b      	ldr	r3, [r7, #4]
 8030166:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8030168:	4b3f      	ldr	r3, [pc, #252]	; (8030268 <USBD_SetConfig+0x150>)
 803016a:	781b      	ldrb	r3, [r3, #0]
 803016c:	4619      	mov	r1, r3
 803016e:	6878      	ldr	r0, [r7, #4]
 8030170:	f7fe ffe7 	bl	802f142 <USBD_SetClassConfig>
 8030174:	4603      	mov	r3, r0
 8030176:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8030178:	7bfb      	ldrb	r3, [r7, #15]
 803017a:	2b00      	cmp	r3, #0
 803017c:	d008      	beq.n	8030190 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803017e:	6839      	ldr	r1, [r7, #0]
 8030180:	6878      	ldr	r0, [r7, #4]
 8030182:	f000 f962 	bl	803044a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030186:	687b      	ldr	r3, [r7, #4]
 8030188:	2202      	movs	r2, #2
 803018a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803018e:	e065      	b.n	803025c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030190:	6878      	ldr	r0, [r7, #4]
 8030192:	f000 fa25 	bl	80305e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8030196:	687b      	ldr	r3, [r7, #4]
 8030198:	2203      	movs	r2, #3
 803019a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803019e:	e05d      	b.n	803025c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80301a0:	6878      	ldr	r0, [r7, #4]
 80301a2:	f000 fa1d 	bl	80305e0 <USBD_CtlSendStatus>
      break;
 80301a6:	e059      	b.n	803025c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80301a8:	4b2f      	ldr	r3, [pc, #188]	; (8030268 <USBD_SetConfig+0x150>)
 80301aa:	781b      	ldrb	r3, [r3, #0]
 80301ac:	2b00      	cmp	r3, #0
 80301ae:	d112      	bne.n	80301d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80301b0:	687b      	ldr	r3, [r7, #4]
 80301b2:	2202      	movs	r2, #2
 80301b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80301b8:	4b2b      	ldr	r3, [pc, #172]	; (8030268 <USBD_SetConfig+0x150>)
 80301ba:	781b      	ldrb	r3, [r3, #0]
 80301bc:	461a      	mov	r2, r3
 80301be:	687b      	ldr	r3, [r7, #4]
 80301c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80301c2:	4b29      	ldr	r3, [pc, #164]	; (8030268 <USBD_SetConfig+0x150>)
 80301c4:	781b      	ldrb	r3, [r3, #0]
 80301c6:	4619      	mov	r1, r3
 80301c8:	6878      	ldr	r0, [r7, #4]
 80301ca:	f7fe ffd6 	bl	802f17a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80301ce:	6878      	ldr	r0, [r7, #4]
 80301d0:	f000 fa06 	bl	80305e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80301d4:	e042      	b.n	803025c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80301d6:	4b24      	ldr	r3, [pc, #144]	; (8030268 <USBD_SetConfig+0x150>)
 80301d8:	781b      	ldrb	r3, [r3, #0]
 80301da:	461a      	mov	r2, r3
 80301dc:	687b      	ldr	r3, [r7, #4]
 80301de:	685b      	ldr	r3, [r3, #4]
 80301e0:	429a      	cmp	r2, r3
 80301e2:	d02a      	beq.n	803023a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80301e4:	687b      	ldr	r3, [r7, #4]
 80301e6:	685b      	ldr	r3, [r3, #4]
 80301e8:	b2db      	uxtb	r3, r3
 80301ea:	4619      	mov	r1, r3
 80301ec:	6878      	ldr	r0, [r7, #4]
 80301ee:	f7fe ffc4 	bl	802f17a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80301f2:	4b1d      	ldr	r3, [pc, #116]	; (8030268 <USBD_SetConfig+0x150>)
 80301f4:	781b      	ldrb	r3, [r3, #0]
 80301f6:	461a      	mov	r2, r3
 80301f8:	687b      	ldr	r3, [r7, #4]
 80301fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80301fc:	4b1a      	ldr	r3, [pc, #104]	; (8030268 <USBD_SetConfig+0x150>)
 80301fe:	781b      	ldrb	r3, [r3, #0]
 8030200:	4619      	mov	r1, r3
 8030202:	6878      	ldr	r0, [r7, #4]
 8030204:	f7fe ff9d 	bl	802f142 <USBD_SetClassConfig>
 8030208:	4603      	mov	r3, r0
 803020a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803020c:	7bfb      	ldrb	r3, [r7, #15]
 803020e:	2b00      	cmp	r3, #0
 8030210:	d00f      	beq.n	8030232 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8030212:	6839      	ldr	r1, [r7, #0]
 8030214:	6878      	ldr	r0, [r7, #4]
 8030216:	f000 f918 	bl	803044a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803021a:	687b      	ldr	r3, [r7, #4]
 803021c:	685b      	ldr	r3, [r3, #4]
 803021e:	b2db      	uxtb	r3, r3
 8030220:	4619      	mov	r1, r3
 8030222:	6878      	ldr	r0, [r7, #4]
 8030224:	f7fe ffa9 	bl	802f17a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8030228:	687b      	ldr	r3, [r7, #4]
 803022a:	2202      	movs	r2, #2
 803022c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8030230:	e014      	b.n	803025c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8030232:	6878      	ldr	r0, [r7, #4]
 8030234:	f000 f9d4 	bl	80305e0 <USBD_CtlSendStatus>
      break;
 8030238:	e010      	b.n	803025c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803023a:	6878      	ldr	r0, [r7, #4]
 803023c:	f000 f9d0 	bl	80305e0 <USBD_CtlSendStatus>
      break;
 8030240:	e00c      	b.n	803025c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8030242:	6839      	ldr	r1, [r7, #0]
 8030244:	6878      	ldr	r0, [r7, #4]
 8030246:	f000 f900 	bl	803044a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803024a:	4b07      	ldr	r3, [pc, #28]	; (8030268 <USBD_SetConfig+0x150>)
 803024c:	781b      	ldrb	r3, [r3, #0]
 803024e:	4619      	mov	r1, r3
 8030250:	6878      	ldr	r0, [r7, #4]
 8030252:	f7fe ff92 	bl	802f17a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8030256:	2303      	movs	r3, #3
 8030258:	73fb      	strb	r3, [r7, #15]
      break;
 803025a:	bf00      	nop
  }

  return ret;
 803025c:	7bfb      	ldrb	r3, [r7, #15]
}
 803025e:	4618      	mov	r0, r3
 8030260:	3710      	adds	r7, #16
 8030262:	46bd      	mov	sp, r7
 8030264:	bd80      	pop	{r7, pc}
 8030266:	bf00      	nop
 8030268:	2000521c 	.word	0x2000521c

0803026c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803026c:	b580      	push	{r7, lr}
 803026e:	b082      	sub	sp, #8
 8030270:	af00      	add	r7, sp, #0
 8030272:	6078      	str	r0, [r7, #4]
 8030274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8030276:	683b      	ldr	r3, [r7, #0]
 8030278:	88db      	ldrh	r3, [r3, #6]
 803027a:	2b01      	cmp	r3, #1
 803027c:	d004      	beq.n	8030288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803027e:	6839      	ldr	r1, [r7, #0]
 8030280:	6878      	ldr	r0, [r7, #4]
 8030282:	f000 f8e2 	bl	803044a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8030286:	e023      	b.n	80302d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8030288:	687b      	ldr	r3, [r7, #4]
 803028a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803028e:	b2db      	uxtb	r3, r3
 8030290:	2b02      	cmp	r3, #2
 8030292:	dc02      	bgt.n	803029a <USBD_GetConfig+0x2e>
 8030294:	2b00      	cmp	r3, #0
 8030296:	dc03      	bgt.n	80302a0 <USBD_GetConfig+0x34>
 8030298:	e015      	b.n	80302c6 <USBD_GetConfig+0x5a>
 803029a:	2b03      	cmp	r3, #3
 803029c:	d00b      	beq.n	80302b6 <USBD_GetConfig+0x4a>
 803029e:	e012      	b.n	80302c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80302a0:	687b      	ldr	r3, [r7, #4]
 80302a2:	2200      	movs	r2, #0
 80302a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80302a6:	687b      	ldr	r3, [r7, #4]
 80302a8:	3308      	adds	r3, #8
 80302aa:	2201      	movs	r2, #1
 80302ac:	4619      	mov	r1, r3
 80302ae:	6878      	ldr	r0, [r7, #4]
 80302b0:	f000 f93c 	bl	803052c <USBD_CtlSendData>
        break;
 80302b4:	e00c      	b.n	80302d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80302b6:	687b      	ldr	r3, [r7, #4]
 80302b8:	3304      	adds	r3, #4
 80302ba:	2201      	movs	r2, #1
 80302bc:	4619      	mov	r1, r3
 80302be:	6878      	ldr	r0, [r7, #4]
 80302c0:	f000 f934 	bl	803052c <USBD_CtlSendData>
        break;
 80302c4:	e004      	b.n	80302d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80302c6:	6839      	ldr	r1, [r7, #0]
 80302c8:	6878      	ldr	r0, [r7, #4]
 80302ca:	f000 f8be 	bl	803044a <USBD_CtlError>
        break;
 80302ce:	bf00      	nop
}
 80302d0:	bf00      	nop
 80302d2:	3708      	adds	r7, #8
 80302d4:	46bd      	mov	sp, r7
 80302d6:	bd80      	pop	{r7, pc}

080302d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80302d8:	b580      	push	{r7, lr}
 80302da:	b082      	sub	sp, #8
 80302dc:	af00      	add	r7, sp, #0
 80302de:	6078      	str	r0, [r7, #4]
 80302e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80302e2:	687b      	ldr	r3, [r7, #4]
 80302e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80302e8:	b2db      	uxtb	r3, r3
 80302ea:	3b01      	subs	r3, #1
 80302ec:	2b02      	cmp	r3, #2
 80302ee:	d81e      	bhi.n	803032e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80302f0:	683b      	ldr	r3, [r7, #0]
 80302f2:	88db      	ldrh	r3, [r3, #6]
 80302f4:	2b02      	cmp	r3, #2
 80302f6:	d004      	beq.n	8030302 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80302f8:	6839      	ldr	r1, [r7, #0]
 80302fa:	6878      	ldr	r0, [r7, #4]
 80302fc:	f000 f8a5 	bl	803044a <USBD_CtlError>
        break;
 8030300:	e01a      	b.n	8030338 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8030302:	687b      	ldr	r3, [r7, #4]
 8030304:	2201      	movs	r2, #1
 8030306:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8030308:	687b      	ldr	r3, [r7, #4]
 803030a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803030e:	2b00      	cmp	r3, #0
 8030310:	d005      	beq.n	803031e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	68db      	ldr	r3, [r3, #12]
 8030316:	f043 0202 	orr.w	r2, r3, #2
 803031a:	687b      	ldr	r3, [r7, #4]
 803031c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803031e:	687b      	ldr	r3, [r7, #4]
 8030320:	330c      	adds	r3, #12
 8030322:	2202      	movs	r2, #2
 8030324:	4619      	mov	r1, r3
 8030326:	6878      	ldr	r0, [r7, #4]
 8030328:	f000 f900 	bl	803052c <USBD_CtlSendData>
      break;
 803032c:	e004      	b.n	8030338 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803032e:	6839      	ldr	r1, [r7, #0]
 8030330:	6878      	ldr	r0, [r7, #4]
 8030332:	f000 f88a 	bl	803044a <USBD_CtlError>
      break;
 8030336:	bf00      	nop
  }
}
 8030338:	bf00      	nop
 803033a:	3708      	adds	r7, #8
 803033c:	46bd      	mov	sp, r7
 803033e:	bd80      	pop	{r7, pc}

08030340 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030340:	b580      	push	{r7, lr}
 8030342:	b082      	sub	sp, #8
 8030344:	af00      	add	r7, sp, #0
 8030346:	6078      	str	r0, [r7, #4]
 8030348:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803034a:	683b      	ldr	r3, [r7, #0]
 803034c:	885b      	ldrh	r3, [r3, #2]
 803034e:	2b01      	cmp	r3, #1
 8030350:	d107      	bne.n	8030362 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8030352:	687b      	ldr	r3, [r7, #4]
 8030354:	2201      	movs	r2, #1
 8030356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803035a:	6878      	ldr	r0, [r7, #4]
 803035c:	f000 f940 	bl	80305e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8030360:	e013      	b.n	803038a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8030362:	683b      	ldr	r3, [r7, #0]
 8030364:	885b      	ldrh	r3, [r3, #2]
 8030366:	2b02      	cmp	r3, #2
 8030368:	d10b      	bne.n	8030382 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803036a:	683b      	ldr	r3, [r7, #0]
 803036c:	889b      	ldrh	r3, [r3, #4]
 803036e:	0a1b      	lsrs	r3, r3, #8
 8030370:	b29b      	uxth	r3, r3
 8030372:	b2da      	uxtb	r2, r3
 8030374:	687b      	ldr	r3, [r7, #4]
 8030376:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803037a:	6878      	ldr	r0, [r7, #4]
 803037c:	f000 f930 	bl	80305e0 <USBD_CtlSendStatus>
}
 8030380:	e003      	b.n	803038a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8030382:	6839      	ldr	r1, [r7, #0]
 8030384:	6878      	ldr	r0, [r7, #4]
 8030386:	f000 f860 	bl	803044a <USBD_CtlError>
}
 803038a:	bf00      	nop
 803038c:	3708      	adds	r7, #8
 803038e:	46bd      	mov	sp, r7
 8030390:	bd80      	pop	{r7, pc}

08030392 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8030392:	b580      	push	{r7, lr}
 8030394:	b082      	sub	sp, #8
 8030396:	af00      	add	r7, sp, #0
 8030398:	6078      	str	r0, [r7, #4]
 803039a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803039c:	687b      	ldr	r3, [r7, #4]
 803039e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80303a2:	b2db      	uxtb	r3, r3
 80303a4:	3b01      	subs	r3, #1
 80303a6:	2b02      	cmp	r3, #2
 80303a8:	d80b      	bhi.n	80303c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80303aa:	683b      	ldr	r3, [r7, #0]
 80303ac:	885b      	ldrh	r3, [r3, #2]
 80303ae:	2b01      	cmp	r3, #1
 80303b0:	d10c      	bne.n	80303cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80303b2:	687b      	ldr	r3, [r7, #4]
 80303b4:	2200      	movs	r2, #0
 80303b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80303ba:	6878      	ldr	r0, [r7, #4]
 80303bc:	f000 f910 	bl	80305e0 <USBD_CtlSendStatus>
      }
      break;
 80303c0:	e004      	b.n	80303cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80303c2:	6839      	ldr	r1, [r7, #0]
 80303c4:	6878      	ldr	r0, [r7, #4]
 80303c6:	f000 f840 	bl	803044a <USBD_CtlError>
      break;
 80303ca:	e000      	b.n	80303ce <USBD_ClrFeature+0x3c>
      break;
 80303cc:	bf00      	nop
  }
}
 80303ce:	bf00      	nop
 80303d0:	3708      	adds	r7, #8
 80303d2:	46bd      	mov	sp, r7
 80303d4:	bd80      	pop	{r7, pc}

080303d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80303d6:	b580      	push	{r7, lr}
 80303d8:	b084      	sub	sp, #16
 80303da:	af00      	add	r7, sp, #0
 80303dc:	6078      	str	r0, [r7, #4]
 80303de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80303e0:	683b      	ldr	r3, [r7, #0]
 80303e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80303e4:	68fb      	ldr	r3, [r7, #12]
 80303e6:	781a      	ldrb	r2, [r3, #0]
 80303e8:	687b      	ldr	r3, [r7, #4]
 80303ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80303ec:	68fb      	ldr	r3, [r7, #12]
 80303ee:	3301      	adds	r3, #1
 80303f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80303f2:	68fb      	ldr	r3, [r7, #12]
 80303f4:	781a      	ldrb	r2, [r3, #0]
 80303f6:	687b      	ldr	r3, [r7, #4]
 80303f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80303fa:	68fb      	ldr	r3, [r7, #12]
 80303fc:	3301      	adds	r3, #1
 80303fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8030400:	68f8      	ldr	r0, [r7, #12]
 8030402:	f7ff fa41 	bl	802f888 <SWAPBYTE>
 8030406:	4603      	mov	r3, r0
 8030408:	461a      	mov	r2, r3
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803040e:	68fb      	ldr	r3, [r7, #12]
 8030410:	3301      	adds	r3, #1
 8030412:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8030414:	68fb      	ldr	r3, [r7, #12]
 8030416:	3301      	adds	r3, #1
 8030418:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803041a:	68f8      	ldr	r0, [r7, #12]
 803041c:	f7ff fa34 	bl	802f888 <SWAPBYTE>
 8030420:	4603      	mov	r3, r0
 8030422:	461a      	mov	r2, r3
 8030424:	687b      	ldr	r3, [r7, #4]
 8030426:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8030428:	68fb      	ldr	r3, [r7, #12]
 803042a:	3301      	adds	r3, #1
 803042c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803042e:	68fb      	ldr	r3, [r7, #12]
 8030430:	3301      	adds	r3, #1
 8030432:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8030434:	68f8      	ldr	r0, [r7, #12]
 8030436:	f7ff fa27 	bl	802f888 <SWAPBYTE>
 803043a:	4603      	mov	r3, r0
 803043c:	461a      	mov	r2, r3
 803043e:	687b      	ldr	r3, [r7, #4]
 8030440:	80da      	strh	r2, [r3, #6]
}
 8030442:	bf00      	nop
 8030444:	3710      	adds	r7, #16
 8030446:	46bd      	mov	sp, r7
 8030448:	bd80      	pop	{r7, pc}

0803044a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803044a:	b580      	push	{r7, lr}
 803044c:	b082      	sub	sp, #8
 803044e:	af00      	add	r7, sp, #0
 8030450:	6078      	str	r0, [r7, #4]
 8030452:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8030454:	2180      	movs	r1, #128	; 0x80
 8030456:	6878      	ldr	r0, [r7, #4]
 8030458:	f000 ff46 	bl	80312e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803045c:	2100      	movs	r1, #0
 803045e:	6878      	ldr	r0, [r7, #4]
 8030460:	f000 ff42 	bl	80312e8 <USBD_LL_StallEP>
}
 8030464:	bf00      	nop
 8030466:	3708      	adds	r7, #8
 8030468:	46bd      	mov	sp, r7
 803046a:	bd80      	pop	{r7, pc}

0803046c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803046c:	b580      	push	{r7, lr}
 803046e:	b086      	sub	sp, #24
 8030470:	af00      	add	r7, sp, #0
 8030472:	60f8      	str	r0, [r7, #12]
 8030474:	60b9      	str	r1, [r7, #8]
 8030476:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8030478:	2300      	movs	r3, #0
 803047a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803047c:	68fb      	ldr	r3, [r7, #12]
 803047e:	2b00      	cmp	r3, #0
 8030480:	d036      	beq.n	80304f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8030482:	68fb      	ldr	r3, [r7, #12]
 8030484:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8030486:	6938      	ldr	r0, [r7, #16]
 8030488:	f000 f836 	bl	80304f8 <USBD_GetLen>
 803048c:	4603      	mov	r3, r0
 803048e:	3301      	adds	r3, #1
 8030490:	b29b      	uxth	r3, r3
 8030492:	005b      	lsls	r3, r3, #1
 8030494:	b29a      	uxth	r2, r3
 8030496:	687b      	ldr	r3, [r7, #4]
 8030498:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803049a:	7dfb      	ldrb	r3, [r7, #23]
 803049c:	68ba      	ldr	r2, [r7, #8]
 803049e:	4413      	add	r3, r2
 80304a0:	687a      	ldr	r2, [r7, #4]
 80304a2:	7812      	ldrb	r2, [r2, #0]
 80304a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304a6:	7dfb      	ldrb	r3, [r7, #23]
 80304a8:	3301      	adds	r3, #1
 80304aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80304ac:	7dfb      	ldrb	r3, [r7, #23]
 80304ae:	68ba      	ldr	r2, [r7, #8]
 80304b0:	4413      	add	r3, r2
 80304b2:	2203      	movs	r2, #3
 80304b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80304b6:	7dfb      	ldrb	r3, [r7, #23]
 80304b8:	3301      	adds	r3, #1
 80304ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80304bc:	e013      	b.n	80304e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80304be:	7dfb      	ldrb	r3, [r7, #23]
 80304c0:	68ba      	ldr	r2, [r7, #8]
 80304c2:	4413      	add	r3, r2
 80304c4:	693a      	ldr	r2, [r7, #16]
 80304c6:	7812      	ldrb	r2, [r2, #0]
 80304c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80304ca:	693b      	ldr	r3, [r7, #16]
 80304cc:	3301      	adds	r3, #1
 80304ce:	613b      	str	r3, [r7, #16]
    idx++;
 80304d0:	7dfb      	ldrb	r3, [r7, #23]
 80304d2:	3301      	adds	r3, #1
 80304d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80304d6:	7dfb      	ldrb	r3, [r7, #23]
 80304d8:	68ba      	ldr	r2, [r7, #8]
 80304da:	4413      	add	r3, r2
 80304dc:	2200      	movs	r2, #0
 80304de:	701a      	strb	r2, [r3, #0]
    idx++;
 80304e0:	7dfb      	ldrb	r3, [r7, #23]
 80304e2:	3301      	adds	r3, #1
 80304e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80304e6:	693b      	ldr	r3, [r7, #16]
 80304e8:	781b      	ldrb	r3, [r3, #0]
 80304ea:	2b00      	cmp	r3, #0
 80304ec:	d1e7      	bne.n	80304be <USBD_GetString+0x52>
 80304ee:	e000      	b.n	80304f2 <USBD_GetString+0x86>
    return;
 80304f0:	bf00      	nop
  }
}
 80304f2:	3718      	adds	r7, #24
 80304f4:	46bd      	mov	sp, r7
 80304f6:	bd80      	pop	{r7, pc}

080304f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80304f8:	b480      	push	{r7}
 80304fa:	b085      	sub	sp, #20
 80304fc:	af00      	add	r7, sp, #0
 80304fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8030500:	2300      	movs	r3, #0
 8030502:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8030504:	687b      	ldr	r3, [r7, #4]
 8030506:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8030508:	e005      	b.n	8030516 <USBD_GetLen+0x1e>
  {
    len++;
 803050a:	7bfb      	ldrb	r3, [r7, #15]
 803050c:	3301      	adds	r3, #1
 803050e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8030510:	68bb      	ldr	r3, [r7, #8]
 8030512:	3301      	adds	r3, #1
 8030514:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8030516:	68bb      	ldr	r3, [r7, #8]
 8030518:	781b      	ldrb	r3, [r3, #0]
 803051a:	2b00      	cmp	r3, #0
 803051c:	d1f5      	bne.n	803050a <USBD_GetLen+0x12>
  }

  return len;
 803051e:	7bfb      	ldrb	r3, [r7, #15]
}
 8030520:	4618      	mov	r0, r3
 8030522:	3714      	adds	r7, #20
 8030524:	46bd      	mov	sp, r7
 8030526:	f85d 7b04 	ldr.w	r7, [sp], #4
 803052a:	4770      	bx	lr

0803052c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803052c:	b580      	push	{r7, lr}
 803052e:	b084      	sub	sp, #16
 8030530:	af00      	add	r7, sp, #0
 8030532:	60f8      	str	r0, [r7, #12]
 8030534:	60b9      	str	r1, [r7, #8]
 8030536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8030538:	68fb      	ldr	r3, [r7, #12]
 803053a:	2202      	movs	r2, #2
 803053c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8030540:	68fb      	ldr	r3, [r7, #12]
 8030542:	687a      	ldr	r2, [r7, #4]
 8030544:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8030546:	68fb      	ldr	r3, [r7, #12]
 8030548:	687a      	ldr	r2, [r7, #4]
 803054a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803054c:	687b      	ldr	r3, [r7, #4]
 803054e:	68ba      	ldr	r2, [r7, #8]
 8030550:	2100      	movs	r1, #0
 8030552:	68f8      	ldr	r0, [r7, #12]
 8030554:	f000 ff51 	bl	80313fa <USBD_LL_Transmit>

  return USBD_OK;
 8030558:	2300      	movs	r3, #0
}
 803055a:	4618      	mov	r0, r3
 803055c:	3710      	adds	r7, #16
 803055e:	46bd      	mov	sp, r7
 8030560:	bd80      	pop	{r7, pc}

08030562 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8030562:	b580      	push	{r7, lr}
 8030564:	b084      	sub	sp, #16
 8030566:	af00      	add	r7, sp, #0
 8030568:	60f8      	str	r0, [r7, #12]
 803056a:	60b9      	str	r1, [r7, #8]
 803056c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803056e:	687b      	ldr	r3, [r7, #4]
 8030570:	68ba      	ldr	r2, [r7, #8]
 8030572:	2100      	movs	r1, #0
 8030574:	68f8      	ldr	r0, [r7, #12]
 8030576:	f000 ff40 	bl	80313fa <USBD_LL_Transmit>

  return USBD_OK;
 803057a:	2300      	movs	r3, #0
}
 803057c:	4618      	mov	r0, r3
 803057e:	3710      	adds	r7, #16
 8030580:	46bd      	mov	sp, r7
 8030582:	bd80      	pop	{r7, pc}

08030584 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8030584:	b580      	push	{r7, lr}
 8030586:	b084      	sub	sp, #16
 8030588:	af00      	add	r7, sp, #0
 803058a:	60f8      	str	r0, [r7, #12]
 803058c:	60b9      	str	r1, [r7, #8]
 803058e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8030590:	68fb      	ldr	r3, [r7, #12]
 8030592:	2203      	movs	r2, #3
 8030594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8030598:	68fb      	ldr	r3, [r7, #12]
 803059a:	687a      	ldr	r2, [r7, #4]
 803059c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80305a0:	68fb      	ldr	r3, [r7, #12]
 80305a2:	687a      	ldr	r2, [r7, #4]
 80305a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305a8:	687b      	ldr	r3, [r7, #4]
 80305aa:	68ba      	ldr	r2, [r7, #8]
 80305ac:	2100      	movs	r1, #0
 80305ae:	68f8      	ldr	r0, [r7, #12]
 80305b0:	f000 ff44 	bl	803143c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305b4:	2300      	movs	r3, #0
}
 80305b6:	4618      	mov	r0, r3
 80305b8:	3710      	adds	r7, #16
 80305ba:	46bd      	mov	sp, r7
 80305bc:	bd80      	pop	{r7, pc}

080305be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80305be:	b580      	push	{r7, lr}
 80305c0:	b084      	sub	sp, #16
 80305c2:	af00      	add	r7, sp, #0
 80305c4:	60f8      	str	r0, [r7, #12]
 80305c6:	60b9      	str	r1, [r7, #8]
 80305c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80305ca:	687b      	ldr	r3, [r7, #4]
 80305cc:	68ba      	ldr	r2, [r7, #8]
 80305ce:	2100      	movs	r1, #0
 80305d0:	68f8      	ldr	r0, [r7, #12]
 80305d2:	f000 ff33 	bl	803143c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80305d6:	2300      	movs	r3, #0
}
 80305d8:	4618      	mov	r0, r3
 80305da:	3710      	adds	r7, #16
 80305dc:	46bd      	mov	sp, r7
 80305de:	bd80      	pop	{r7, pc}

080305e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80305e0:	b580      	push	{r7, lr}
 80305e2:	b082      	sub	sp, #8
 80305e4:	af00      	add	r7, sp, #0
 80305e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	2204      	movs	r2, #4
 80305ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80305f0:	2300      	movs	r3, #0
 80305f2:	2200      	movs	r2, #0
 80305f4:	2100      	movs	r1, #0
 80305f6:	6878      	ldr	r0, [r7, #4]
 80305f8:	f000 feff 	bl	80313fa <USBD_LL_Transmit>

  return USBD_OK;
 80305fc:	2300      	movs	r3, #0
}
 80305fe:	4618      	mov	r0, r3
 8030600:	3708      	adds	r7, #8
 8030602:	46bd      	mov	sp, r7
 8030604:	bd80      	pop	{r7, pc}

08030606 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8030606:	b580      	push	{r7, lr}
 8030608:	b082      	sub	sp, #8
 803060a:	af00      	add	r7, sp, #0
 803060c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803060e:	687b      	ldr	r3, [r7, #4]
 8030610:	2205      	movs	r2, #5
 8030612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8030616:	2300      	movs	r3, #0
 8030618:	2200      	movs	r2, #0
 803061a:	2100      	movs	r1, #0
 803061c:	6878      	ldr	r0, [r7, #4]
 803061e:	f000 ff0d 	bl	803143c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8030622:	2300      	movs	r3, #0
}
 8030624:	4618      	mov	r0, r3
 8030626:	3708      	adds	r7, #8
 8030628:	46bd      	mov	sp, r7
 803062a:	bd80      	pop	{r7, pc}

0803062c <USBD_GetRxCount>:
  * @param  pdev: device instance
  * @param  ep_addr: endpoint address
  * @retval Rx Data blength
  */
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803062c:	b580      	push	{r7, lr}
 803062e:	b082      	sub	sp, #8
 8030630:	af00      	add	r7, sp, #0
 8030632:	6078      	str	r0, [r7, #4]
 8030634:	460b      	mov	r3, r1
 8030636:	70fb      	strb	r3, [r7, #3]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8030638:	78fb      	ldrb	r3, [r7, #3]
 803063a:	4619      	mov	r1, r3
 803063c:	6878      	ldr	r0, [r7, #4]
 803063e:	f000 ff1e 	bl	803147e <USBD_LL_GetRxDataSize>
 8030642:	4603      	mov	r3, r0
}
 8030644:	4618      	mov	r0, r3
 8030646:	3708      	adds	r7, #8
 8030648:	46bd      	mov	sp, r7
 803064a:	bd80      	pop	{r7, pc}

0803064c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803064c:	b580      	push	{r7, lr}
 803064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8030650:	2201      	movs	r2, #1
 8030652:	4924      	ldr	r1, [pc, #144]	; (80306e4 <MX_USB_DEVICE_Init+0x98>)
 8030654:	4824      	ldr	r0, [pc, #144]	; (80306e8 <MX_USB_DEVICE_Init+0x9c>)
 8030656:	f7fe fcf7 	bl	802f048 <USBD_Init>
 803065a:	4603      	mov	r3, r0
 803065c:	2b00      	cmp	r3, #0
 803065e:	d001      	beq.n	8030664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8030660:	f7f3 f9f6 	bl	8023a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8030664:	4921      	ldr	r1, [pc, #132]	; (80306ec <MX_USB_DEVICE_Init+0xa0>)
 8030666:	4820      	ldr	r0, [pc, #128]	; (80306e8 <MX_USB_DEVICE_Init+0x9c>)
 8030668:	f7fe fd1e 	bl	802f0a8 <USBD_RegisterClass>
 803066c:	4603      	mov	r3, r0
 803066e:	2b00      	cmp	r3, #0
 8030670:	d001      	beq.n	8030676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8030672:	f7f3 f9ed 	bl	8023a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8030676:	491e      	ldr	r1, [pc, #120]	; (80306f0 <MX_USB_DEVICE_Init+0xa4>)
 8030678:	481b      	ldr	r0, [pc, #108]	; (80306e8 <MX_USB_DEVICE_Init+0x9c>)
 803067a:	f7fe fc0f 	bl	802ee9c <USBD_CDC_RegisterInterface>
 803067e:	4603      	mov	r3, r0
 8030680:	2b00      	cmp	r3, #0
 8030682:	d001      	beq.n	8030688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8030684:	f7f3 f9e4 	bl	8023a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8030688:	4817      	ldr	r0, [pc, #92]	; (80306e8 <MX_USB_DEVICE_Init+0x9c>)
 803068a:	f7fe fd43 	bl	802f114 <USBD_Start>
 803068e:	4603      	mov	r3, r0
 8030690:	2b00      	cmp	r3, #0
 8030692:	d001      	beq.n	8030698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8030694:	f7f3 f9dc 	bl	8023a50 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8030698:	2200      	movs	r2, #0
 803069a:	4916      	ldr	r1, [pc, #88]	; (80306f4 <MX_USB_DEVICE_Init+0xa8>)
 803069c:	4816      	ldr	r0, [pc, #88]	; (80306f8 <MX_USB_DEVICE_Init+0xac>)
 803069e:	f7fe fcd3 	bl	802f048 <USBD_Init>
 80306a2:	4603      	mov	r3, r0
 80306a4:	2b00      	cmp	r3, #0
 80306a6:	d001      	beq.n	80306ac <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 80306a8:	f7f3 f9d2 	bl	8023a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80306ac:	490f      	ldr	r1, [pc, #60]	; (80306ec <MX_USB_DEVICE_Init+0xa0>)
 80306ae:	4812      	ldr	r0, [pc, #72]	; (80306f8 <MX_USB_DEVICE_Init+0xac>)
 80306b0:	f7fe fcfa 	bl	802f0a8 <USBD_RegisterClass>
 80306b4:	4603      	mov	r3, r0
 80306b6:	2b00      	cmp	r3, #0
 80306b8:	d001      	beq.n	80306be <MX_USB_DEVICE_Init+0x72>
  {
    Error_Handler();
 80306ba:	f7f3 f9c9 	bl	8023a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80306be:	490f      	ldr	r1, [pc, #60]	; (80306fc <MX_USB_DEVICE_Init+0xb0>)
 80306c0:	480d      	ldr	r0, [pc, #52]	; (80306f8 <MX_USB_DEVICE_Init+0xac>)
 80306c2:	f7fe fbeb 	bl	802ee9c <USBD_CDC_RegisterInterface>
 80306c6:	4603      	mov	r3, r0
 80306c8:	2b00      	cmp	r3, #0
 80306ca:	d001      	beq.n	80306d0 <MX_USB_DEVICE_Init+0x84>
  {
    Error_Handler();
 80306cc:	f7f3 f9c0 	bl	8023a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80306d0:	4809      	ldr	r0, [pc, #36]	; (80306f8 <MX_USB_DEVICE_Init+0xac>)
 80306d2:	f7fe fd1f 	bl	802f114 <USBD_Start>
 80306d6:	4603      	mov	r3, r0
 80306d8:	2b00      	cmp	r3, #0
 80306da:	d001      	beq.n	80306e0 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 80306dc:	f7f3 f9b8 	bl	8023a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80306e0:	bf00      	nop
 80306e2:	bd80      	pop	{r7, pc}
 80306e4:	20000228 	.word	0x20000228
 80306e8:	20005220 	.word	0x20005220
 80306ec:	20000150 	.word	0x20000150
 80306f0:	200001e4 	.word	0x200001e4
 80306f4:	200001f8 	.word	0x200001f8
 80306f8:	200054fc 	.word	0x200054fc
 80306fc:	200001d0 	.word	0x200001d0

08030700 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8030700:	b580      	push	{r7, lr}
 8030702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8030704:	2200      	movs	r2, #0
 8030706:	4905      	ldr	r1, [pc, #20]	; (803071c <CDC_Init_FS+0x1c>)
 8030708:	4805      	ldr	r0, [pc, #20]	; (8030720 <CDC_Init_FS+0x20>)
 803070a:	f7fe fbe1 	bl	802eed0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803070e:	4905      	ldr	r1, [pc, #20]	; (8030724 <CDC_Init_FS+0x24>)
 8030710:	4803      	ldr	r0, [pc, #12]	; (8030720 <CDC_Init_FS+0x20>)
 8030712:	f7fe fbff 	bl	802ef14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030716:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8030718:	4618      	mov	r0, r3
 803071a:	bd80      	pop	{r7, pc}
 803071c:	20005fd8 	.word	0x20005fd8
 8030720:	200054fc 	.word	0x200054fc
 8030724:	200057d8 	.word	0x200057d8

08030728 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8030728:	b480      	push	{r7}
 803072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803072c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803072e:	4618      	mov	r0, r3
 8030730:	46bd      	mov	sp, r7
 8030732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030736:	4770      	bx	lr

08030738 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030738:	b480      	push	{r7}
 803073a:	b083      	sub	sp, #12
 803073c:	af00      	add	r7, sp, #0
 803073e:	4603      	mov	r3, r0
 8030740:	6039      	str	r1, [r7, #0]
 8030742:	71fb      	strb	r3, [r7, #7]
 8030744:	4613      	mov	r3, r2
 8030746:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8030748:	79fb      	ldrb	r3, [r7, #7]
 803074a:	2b23      	cmp	r3, #35	; 0x23
 803074c:	d84a      	bhi.n	80307e4 <CDC_Control_FS+0xac>
 803074e:	a201      	add	r2, pc, #4	; (adr r2, 8030754 <CDC_Control_FS+0x1c>)
 8030750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030754:	080307e5 	.word	0x080307e5
 8030758:	080307e5 	.word	0x080307e5
 803075c:	080307e5 	.word	0x080307e5
 8030760:	080307e5 	.word	0x080307e5
 8030764:	080307e5 	.word	0x080307e5
 8030768:	080307e5 	.word	0x080307e5
 803076c:	080307e5 	.word	0x080307e5
 8030770:	080307e5 	.word	0x080307e5
 8030774:	080307e5 	.word	0x080307e5
 8030778:	080307e5 	.word	0x080307e5
 803077c:	080307e5 	.word	0x080307e5
 8030780:	080307e5 	.word	0x080307e5
 8030784:	080307e5 	.word	0x080307e5
 8030788:	080307e5 	.word	0x080307e5
 803078c:	080307e5 	.word	0x080307e5
 8030790:	080307e5 	.word	0x080307e5
 8030794:	080307e5 	.word	0x080307e5
 8030798:	080307e5 	.word	0x080307e5
 803079c:	080307e5 	.word	0x080307e5
 80307a0:	080307e5 	.word	0x080307e5
 80307a4:	080307e5 	.word	0x080307e5
 80307a8:	080307e5 	.word	0x080307e5
 80307ac:	080307e5 	.word	0x080307e5
 80307b0:	080307e5 	.word	0x080307e5
 80307b4:	080307e5 	.word	0x080307e5
 80307b8:	080307e5 	.word	0x080307e5
 80307bc:	080307e5 	.word	0x080307e5
 80307c0:	080307e5 	.word	0x080307e5
 80307c4:	080307e5 	.word	0x080307e5
 80307c8:	080307e5 	.word	0x080307e5
 80307cc:	080307e5 	.word	0x080307e5
 80307d0:	080307e5 	.word	0x080307e5
 80307d4:	080307e5 	.word	0x080307e5
 80307d8:	080307e5 	.word	0x080307e5
 80307dc:	080307e5 	.word	0x080307e5
 80307e0:	080307e5 	.word	0x080307e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80307e4:	bf00      	nop
  }

  return (USBD_OK);
 80307e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80307e8:	4618      	mov	r0, r3
 80307ea:	370c      	adds	r7, #12
 80307ec:	46bd      	mov	sp, r7
 80307ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80307f2:	4770      	bx	lr

080307f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80307f4:	b580      	push	{r7, lr}
 80307f6:	b082      	sub	sp, #8
 80307f8:	af00      	add	r7, sp, #0
 80307fa:	6078      	str	r0, [r7, #4]
 80307fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80307fe:	6879      	ldr	r1, [r7, #4]
 8030800:	4805      	ldr	r0, [pc, #20]	; (8030818 <CDC_Receive_FS+0x24>)
 8030802:	f7fe fb87 	bl	802ef14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8030806:	4804      	ldr	r0, [pc, #16]	; (8030818 <CDC_Receive_FS+0x24>)
 8030808:	f7fe fbe8 	bl	802efdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803080c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803080e:	4618      	mov	r0, r3
 8030810:	3708      	adds	r7, #8
 8030812:	46bd      	mov	sp, r7
 8030814:	bd80      	pop	{r7, pc}
 8030816:	bf00      	nop
 8030818:	200054fc 	.word	0x200054fc

0803081c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803081c:	b480      	push	{r7}
 803081e:	b087      	sub	sp, #28
 8030820:	af00      	add	r7, sp, #0
 8030822:	60f8      	str	r0, [r7, #12]
 8030824:	60b9      	str	r1, [r7, #8]
 8030826:	4613      	mov	r3, r2
 8030828:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803082a:	2300      	movs	r3, #0
 803082c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803082e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8030832:	4618      	mov	r0, r3
 8030834:	371c      	adds	r7, #28
 8030836:	46bd      	mov	sp, r7
 8030838:	f85d 7b04 	ldr.w	r7, [sp], #4
 803083c:	4770      	bx	lr
	...

08030840 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8030840:	b580      	push	{r7, lr}
 8030842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8030844:	2200      	movs	r2, #0
 8030846:	4905      	ldr	r1, [pc, #20]	; (803085c <CDC_Init_HS+0x1c>)
 8030848:	4805      	ldr	r0, [pc, #20]	; (8030860 <CDC_Init_HS+0x20>)
 803084a:	f7fe fb41 	bl	802eed0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 803084e:	4905      	ldr	r1, [pc, #20]	; (8030864 <CDC_Init_HS+0x24>)
 8030850:	4803      	ldr	r0, [pc, #12]	; (8030860 <CDC_Init_HS+0x20>)
 8030852:	f7fe fb5f 	bl	802ef14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8030856:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8030858:	4618      	mov	r0, r3
 803085a:	bd80      	pop	{r7, pc}
 803085c:	20006fd8 	.word	0x20006fd8
 8030860:	20005220 	.word	0x20005220
 8030864:	200067d8 	.word	0x200067d8

08030868 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8030868:	b480      	push	{r7}
 803086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 803086c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 803086e:	4618      	mov	r0, r3
 8030870:	46bd      	mov	sp, r7
 8030872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030876:	4770      	bx	lr

08030878 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8030878:	b480      	push	{r7}
 803087a:	b083      	sub	sp, #12
 803087c:	af00      	add	r7, sp, #0
 803087e:	4603      	mov	r3, r0
 8030880:	6039      	str	r1, [r7, #0]
 8030882:	71fb      	strb	r3, [r7, #7]
 8030884:	4613      	mov	r3, r2
 8030886:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8030888:	79fb      	ldrb	r3, [r7, #7]
 803088a:	2b23      	cmp	r3, #35	; 0x23
 803088c:	d84a      	bhi.n	8030924 <CDC_Control_HS+0xac>
 803088e:	a201      	add	r2, pc, #4	; (adr r2, 8030894 <CDC_Control_HS+0x1c>)
 8030890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8030894:	08030925 	.word	0x08030925
 8030898:	08030925 	.word	0x08030925
 803089c:	08030925 	.word	0x08030925
 80308a0:	08030925 	.word	0x08030925
 80308a4:	08030925 	.word	0x08030925
 80308a8:	08030925 	.word	0x08030925
 80308ac:	08030925 	.word	0x08030925
 80308b0:	08030925 	.word	0x08030925
 80308b4:	08030925 	.word	0x08030925
 80308b8:	08030925 	.word	0x08030925
 80308bc:	08030925 	.word	0x08030925
 80308c0:	08030925 	.word	0x08030925
 80308c4:	08030925 	.word	0x08030925
 80308c8:	08030925 	.word	0x08030925
 80308cc:	08030925 	.word	0x08030925
 80308d0:	08030925 	.word	0x08030925
 80308d4:	08030925 	.word	0x08030925
 80308d8:	08030925 	.word	0x08030925
 80308dc:	08030925 	.word	0x08030925
 80308e0:	08030925 	.word	0x08030925
 80308e4:	08030925 	.word	0x08030925
 80308e8:	08030925 	.word	0x08030925
 80308ec:	08030925 	.word	0x08030925
 80308f0:	08030925 	.word	0x08030925
 80308f4:	08030925 	.word	0x08030925
 80308f8:	08030925 	.word	0x08030925
 80308fc:	08030925 	.word	0x08030925
 8030900:	08030925 	.word	0x08030925
 8030904:	08030925 	.word	0x08030925
 8030908:	08030925 	.word	0x08030925
 803090c:	08030925 	.word	0x08030925
 8030910:	08030925 	.word	0x08030925
 8030914:	08030925 	.word	0x08030925
 8030918:	08030925 	.word	0x08030925
 803091c:	08030925 	.word	0x08030925
 8030920:	08030925 	.word	0x08030925
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8030924:	bf00      	nop
  }

  return (USBD_OK);
 8030926:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8030928:	4618      	mov	r0, r3
 803092a:	370c      	adds	r7, #12
 803092c:	46bd      	mov	sp, r7
 803092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030932:	4770      	bx	lr

08030934 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8030934:	b580      	push	{r7, lr}
 8030936:	b082      	sub	sp, #8
 8030938:	af00      	add	r7, sp, #0
 803093a:	6078      	str	r0, [r7, #4]
 803093c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  EP3_OUT_Callback(Buf, *Len);
 803093e:	683b      	ldr	r3, [r7, #0]
 8030940:	681b      	ldr	r3, [r3, #0]
 8030942:	4619      	mov	r1, r3
 8030944:	6878      	ldr	r0, [r7, #4]
 8030946:	f7f1 ff23 	bl	8022790 <EP3_OUT_Callback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 803094a:	6879      	ldr	r1, [r7, #4]
 803094c:	4805      	ldr	r0, [pc, #20]	; (8030964 <CDC_Receive_HS+0x30>)
 803094e:	f7fe fae1 	bl	802ef14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8030952:	4804      	ldr	r0, [pc, #16]	; (8030964 <CDC_Receive_HS+0x30>)
 8030954:	f7fe fb42 	bl	802efdc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8030958:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 803095a:	4618      	mov	r0, r3
 803095c:	3708      	adds	r7, #8
 803095e:	46bd      	mov	sp, r7
 8030960:	bd80      	pop	{r7, pc}
 8030962:	bf00      	nop
 8030964:	20005220 	.word	0x20005220

08030968 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8030968:	b580      	push	{r7, lr}
 803096a:	b084      	sub	sp, #16
 803096c:	af00      	add	r7, sp, #0
 803096e:	6078      	str	r0, [r7, #4]
 8030970:	460b      	mov	r3, r1
 8030972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8030974:	2300      	movs	r3, #0
 8030976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8030978:	4b10      	ldr	r3, [pc, #64]	; (80309bc <CDC_Transmit_HS+0x54>)
 803097a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 803097e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8030980:	68bb      	ldr	r3, [r7, #8]
 8030982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8030986:	2b00      	cmp	r3, #0
 8030988:	d001      	beq.n	803098e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 803098a:	2301      	movs	r3, #1
 803098c:	e012      	b.n	80309b4 <CDC_Transmit_HS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 803098e:	887b      	ldrh	r3, [r7, #2]
 8030990:	461a      	mov	r2, r3
 8030992:	6879      	ldr	r1, [r7, #4]
 8030994:	4809      	ldr	r0, [pc, #36]	; (80309bc <CDC_Transmit_HS+0x54>)
 8030996:	f7fe fa9b 	bl	802eed0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 803099a:	4808      	ldr	r0, [pc, #32]	; (80309bc <CDC_Transmit_HS+0x54>)
 803099c:	f7fe fad8 	bl	802ef50 <USBD_CDC_TransmitPacket>
 80309a0:	4603      	mov	r3, r0
 80309a2:	73fb      	strb	r3, [r7, #15]
  HAL_Delay(500);
 80309a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80309a8:	f7f6 fed6 	bl	8027758 <HAL_Delay>
  printf("CDC_Transmit_HS \r\n");
 80309ac:	4804      	ldr	r0, [pc, #16]	; (80309c0 <CDC_Transmit_HS+0x58>)
 80309ae:	f000 fee5 	bl	803177c <puts>
  /* USER CODE END 12 */
  return result;
 80309b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80309b4:	4618      	mov	r0, r3
 80309b6:	3710      	adds	r7, #16
 80309b8:	46bd      	mov	sp, r7
 80309ba:	bd80      	pop	{r7, pc}
 80309bc:	20005220 	.word	0x20005220
 80309c0:	080332d4 	.word	0x080332d4

080309c4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80309c4:	b580      	push	{r7, lr}
 80309c6:	b086      	sub	sp, #24
 80309c8:	af00      	add	r7, sp, #0
 80309ca:	60f8      	str	r0, [r7, #12]
 80309cc:	60b9      	str	r1, [r7, #8]
 80309ce:	4613      	mov	r3, r2
 80309d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80309d2:	2300      	movs	r3, #0
 80309d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  EP1_IN_Callback();
 80309d6:	f7f1 fe35 	bl	8022644 <EP1_IN_Callback>
  printf("EP1_IN \r\n");
 80309da:	4804      	ldr	r0, [pc, #16]	; (80309ec <CDC_TransmitCplt_HS+0x28>)
 80309dc:	f000 fece 	bl	803177c <puts>
  /* USER CODE END 14 */
  return result;
 80309e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80309e4:	4618      	mov	r0, r3
 80309e6:	3718      	adds	r7, #24
 80309e8:	46bd      	mov	sp, r7
 80309ea:	bd80      	pop	{r7, pc}
 80309ec:	080332e8 	.word	0x080332e8

080309f0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80309f0:	b480      	push	{r7}
 80309f2:	b083      	sub	sp, #12
 80309f4:	af00      	add	r7, sp, #0
 80309f6:	4603      	mov	r3, r0
 80309f8:	6039      	str	r1, [r7, #0]
 80309fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80309fc:	683b      	ldr	r3, [r7, #0]
 80309fe:	2212      	movs	r2, #18
 8030a00:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8030a02:	4b03      	ldr	r3, [pc, #12]	; (8030a10 <USBD_HS_DeviceDescriptor+0x20>)
}
 8030a04:	4618      	mov	r0, r3
 8030a06:	370c      	adds	r7, #12
 8030a08:	46bd      	mov	sp, r7
 8030a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a0e:	4770      	bx	lr
 8030a10:	20000244 	.word	0x20000244

08030a14 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a14:	b480      	push	{r7}
 8030a16:	b083      	sub	sp, #12
 8030a18:	af00      	add	r7, sp, #0
 8030a1a:	4603      	mov	r3, r0
 8030a1c:	6039      	str	r1, [r7, #0]
 8030a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030a20:	683b      	ldr	r3, [r7, #0]
 8030a22:	2204      	movs	r2, #4
 8030a24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030a26:	4b03      	ldr	r3, [pc, #12]	; (8030a34 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8030a28:	4618      	mov	r0, r3
 8030a2a:	370c      	adds	r7, #12
 8030a2c:	46bd      	mov	sp, r7
 8030a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030a32:	4770      	bx	lr
 8030a34:	20000258 	.word	0x20000258

08030a38 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a38:	b580      	push	{r7, lr}
 8030a3a:	b082      	sub	sp, #8
 8030a3c:	af00      	add	r7, sp, #0
 8030a3e:	4603      	mov	r3, r0
 8030a40:	6039      	str	r1, [r7, #0]
 8030a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030a44:	79fb      	ldrb	r3, [r7, #7]
 8030a46:	2b00      	cmp	r3, #0
 8030a48:	d105      	bne.n	8030a56 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a4a:	683a      	ldr	r2, [r7, #0]
 8030a4c:	4907      	ldr	r1, [pc, #28]	; (8030a6c <USBD_HS_ProductStrDescriptor+0x34>)
 8030a4e:	4808      	ldr	r0, [pc, #32]	; (8030a70 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a50:	f7ff fd0c 	bl	803046c <USBD_GetString>
 8030a54:	e004      	b.n	8030a60 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8030a56:	683a      	ldr	r2, [r7, #0]
 8030a58:	4904      	ldr	r1, [pc, #16]	; (8030a6c <USBD_HS_ProductStrDescriptor+0x34>)
 8030a5a:	4805      	ldr	r0, [pc, #20]	; (8030a70 <USBD_HS_ProductStrDescriptor+0x38>)
 8030a5c:	f7ff fd06 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030a60:	4b02      	ldr	r3, [pc, #8]	; (8030a6c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8030a62:	4618      	mov	r0, r3
 8030a64:	3708      	adds	r7, #8
 8030a66:	46bd      	mov	sp, r7
 8030a68:	bd80      	pop	{r7, pc}
 8030a6a:	bf00      	nop
 8030a6c:	200077d8 	.word	0x200077d8
 8030a70:	080332f4 	.word	0x080332f4

08030a74 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a74:	b580      	push	{r7, lr}
 8030a76:	b082      	sub	sp, #8
 8030a78:	af00      	add	r7, sp, #0
 8030a7a:	4603      	mov	r3, r0
 8030a7c:	6039      	str	r1, [r7, #0]
 8030a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030a80:	683a      	ldr	r2, [r7, #0]
 8030a82:	4904      	ldr	r1, [pc, #16]	; (8030a94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8030a84:	4804      	ldr	r0, [pc, #16]	; (8030a98 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8030a86:	f7ff fcf1 	bl	803046c <USBD_GetString>
  return USBD_StrDesc;
 8030a8a:	4b02      	ldr	r3, [pc, #8]	; (8030a94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8030a8c:	4618      	mov	r0, r3
 8030a8e:	3708      	adds	r7, #8
 8030a90:	46bd      	mov	sp, r7
 8030a92:	bd80      	pop	{r7, pc}
 8030a94:	200077d8 	.word	0x200077d8
 8030a98:	0803330c 	.word	0x0803330c

08030a9c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030a9c:	b580      	push	{r7, lr}
 8030a9e:	b082      	sub	sp, #8
 8030aa0:	af00      	add	r7, sp, #0
 8030aa2:	4603      	mov	r3, r0
 8030aa4:	6039      	str	r1, [r7, #0]
 8030aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030aa8:	683b      	ldr	r3, [r7, #0]
 8030aaa:	221a      	movs	r2, #26
 8030aac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030aae:	f000 f8e7 	bl	8030c80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8030ab2:	4b02      	ldr	r3, [pc, #8]	; (8030abc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8030ab4:	4618      	mov	r0, r3
 8030ab6:	3708      	adds	r7, #8
 8030ab8:	46bd      	mov	sp, r7
 8030aba:	bd80      	pop	{r7, pc}
 8030abc:	2000025c 	.word	0x2000025c

08030ac0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030ac0:	b580      	push	{r7, lr}
 8030ac2:	b082      	sub	sp, #8
 8030ac4:	af00      	add	r7, sp, #0
 8030ac6:	4603      	mov	r3, r0
 8030ac8:	6039      	str	r1, [r7, #0]
 8030aca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030acc:	79fb      	ldrb	r3, [r7, #7]
 8030ace:	2b00      	cmp	r3, #0
 8030ad0:	d105      	bne.n	8030ade <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030ad2:	683a      	ldr	r2, [r7, #0]
 8030ad4:	4907      	ldr	r1, [pc, #28]	; (8030af4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030ad6:	4808      	ldr	r0, [pc, #32]	; (8030af8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030ad8:	f7ff fcc8 	bl	803046c <USBD_GetString>
 8030adc:	e004      	b.n	8030ae8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8030ade:	683a      	ldr	r2, [r7, #0]
 8030ae0:	4904      	ldr	r1, [pc, #16]	; (8030af4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8030ae2:	4805      	ldr	r0, [pc, #20]	; (8030af8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8030ae4:	f7ff fcc2 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030ae8:	4b02      	ldr	r3, [pc, #8]	; (8030af4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8030aea:	4618      	mov	r0, r3
 8030aec:	3708      	adds	r7, #8
 8030aee:	46bd      	mov	sp, r7
 8030af0:	bd80      	pop	{r7, pc}
 8030af2:	bf00      	nop
 8030af4:	200077d8 	.word	0x200077d8
 8030af8:	08033320 	.word	0x08033320

08030afc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030afc:	b580      	push	{r7, lr}
 8030afe:	b082      	sub	sp, #8
 8030b00:	af00      	add	r7, sp, #0
 8030b02:	4603      	mov	r3, r0
 8030b04:	6039      	str	r1, [r7, #0]
 8030b06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030b08:	79fb      	ldrb	r3, [r7, #7]
 8030b0a:	2b00      	cmp	r3, #0
 8030b0c:	d105      	bne.n	8030b1a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b0e:	683a      	ldr	r2, [r7, #0]
 8030b10:	4907      	ldr	r1, [pc, #28]	; (8030b30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b12:	4808      	ldr	r0, [pc, #32]	; (8030b34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b14:	f7ff fcaa 	bl	803046c <USBD_GetString>
 8030b18:	e004      	b.n	8030b24 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8030b1a:	683a      	ldr	r2, [r7, #0]
 8030b1c:	4904      	ldr	r1, [pc, #16]	; (8030b30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8030b1e:	4805      	ldr	r0, [pc, #20]	; (8030b34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8030b20:	f7ff fca4 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030b24:	4b02      	ldr	r3, [pc, #8]	; (8030b30 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8030b26:	4618      	mov	r0, r3
 8030b28:	3708      	adds	r7, #8
 8030b2a:	46bd      	mov	sp, r7
 8030b2c:	bd80      	pop	{r7, pc}
 8030b2e:	bf00      	nop
 8030b30:	200077d8 	.word	0x200077d8
 8030b34:	0803332c 	.word	0x0803332c

08030b38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b38:	b480      	push	{r7}
 8030b3a:	b083      	sub	sp, #12
 8030b3c:	af00      	add	r7, sp, #0
 8030b3e:	4603      	mov	r3, r0
 8030b40:	6039      	str	r1, [r7, #0]
 8030b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8030b44:	683b      	ldr	r3, [r7, #0]
 8030b46:	2212      	movs	r2, #18
 8030b48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8030b4a:	4b03      	ldr	r3, [pc, #12]	; (8030b58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8030b4c:	4618      	mov	r0, r3
 8030b4e:	370c      	adds	r7, #12
 8030b50:	46bd      	mov	sp, r7
 8030b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b56:	4770      	bx	lr
 8030b58:	20000214 	.word	0x20000214

08030b5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b5c:	b480      	push	{r7}
 8030b5e:	b083      	sub	sp, #12
 8030b60:	af00      	add	r7, sp, #0
 8030b62:	4603      	mov	r3, r0
 8030b64:	6039      	str	r1, [r7, #0]
 8030b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8030b68:	683b      	ldr	r3, [r7, #0]
 8030b6a:	2204      	movs	r2, #4
 8030b6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8030b6e:	4b03      	ldr	r3, [pc, #12]	; (8030b7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8030b70:	4618      	mov	r0, r3
 8030b72:	370c      	adds	r7, #12
 8030b74:	46bd      	mov	sp, r7
 8030b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b7a:	4770      	bx	lr
 8030b7c:	20000258 	.word	0x20000258

08030b80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030b80:	b580      	push	{r7, lr}
 8030b82:	b082      	sub	sp, #8
 8030b84:	af00      	add	r7, sp, #0
 8030b86:	4603      	mov	r3, r0
 8030b88:	6039      	str	r1, [r7, #0]
 8030b8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030b8c:	79fb      	ldrb	r3, [r7, #7]
 8030b8e:	2b00      	cmp	r3, #0
 8030b90:	d105      	bne.n	8030b9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030b92:	683a      	ldr	r2, [r7, #0]
 8030b94:	4907      	ldr	r1, [pc, #28]	; (8030bb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8030b96:	4808      	ldr	r0, [pc, #32]	; (8030bb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8030b98:	f7ff fc68 	bl	803046c <USBD_GetString>
 8030b9c:	e004      	b.n	8030ba8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8030b9e:	683a      	ldr	r2, [r7, #0]
 8030ba0:	4904      	ldr	r1, [pc, #16]	; (8030bb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8030ba2:	4805      	ldr	r0, [pc, #20]	; (8030bb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8030ba4:	f7ff fc62 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030ba8:	4b02      	ldr	r3, [pc, #8]	; (8030bb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8030baa:	4618      	mov	r0, r3
 8030bac:	3708      	adds	r7, #8
 8030bae:	46bd      	mov	sp, r7
 8030bb0:	bd80      	pop	{r7, pc}
 8030bb2:	bf00      	nop
 8030bb4:	200077d8 	.word	0x200077d8
 8030bb8:	080332f4 	.word	0x080332f4

08030bbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030bbc:	b580      	push	{r7, lr}
 8030bbe:	b082      	sub	sp, #8
 8030bc0:	af00      	add	r7, sp, #0
 8030bc2:	4603      	mov	r3, r0
 8030bc4:	6039      	str	r1, [r7, #0]
 8030bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8030bc8:	683a      	ldr	r2, [r7, #0]
 8030bca:	4904      	ldr	r1, [pc, #16]	; (8030bdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8030bcc:	4804      	ldr	r0, [pc, #16]	; (8030be0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8030bce:	f7ff fc4d 	bl	803046c <USBD_GetString>
  return USBD_StrDesc;
 8030bd2:	4b02      	ldr	r3, [pc, #8]	; (8030bdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8030bd4:	4618      	mov	r0, r3
 8030bd6:	3708      	adds	r7, #8
 8030bd8:	46bd      	mov	sp, r7
 8030bda:	bd80      	pop	{r7, pc}
 8030bdc:	200077d8 	.word	0x200077d8
 8030be0:	0803330c 	.word	0x0803330c

08030be4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030be4:	b580      	push	{r7, lr}
 8030be6:	b082      	sub	sp, #8
 8030be8:	af00      	add	r7, sp, #0
 8030bea:	4603      	mov	r3, r0
 8030bec:	6039      	str	r1, [r7, #0]
 8030bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8030bf0:	683b      	ldr	r3, [r7, #0]
 8030bf2:	221a      	movs	r2, #26
 8030bf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8030bf6:	f000 f843 	bl	8030c80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8030bfa:	4b02      	ldr	r3, [pc, #8]	; (8030c04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8030bfc:	4618      	mov	r0, r3
 8030bfe:	3708      	adds	r7, #8
 8030c00:	46bd      	mov	sp, r7
 8030c02:	bd80      	pop	{r7, pc}
 8030c04:	2000025c 	.word	0x2000025c

08030c08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c08:	b580      	push	{r7, lr}
 8030c0a:	b082      	sub	sp, #8
 8030c0c:	af00      	add	r7, sp, #0
 8030c0e:	4603      	mov	r3, r0
 8030c10:	6039      	str	r1, [r7, #0]
 8030c12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8030c14:	79fb      	ldrb	r3, [r7, #7]
 8030c16:	2b00      	cmp	r3, #0
 8030c18:	d105      	bne.n	8030c26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c1a:	683a      	ldr	r2, [r7, #0]
 8030c1c:	4907      	ldr	r1, [pc, #28]	; (8030c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c1e:	4808      	ldr	r0, [pc, #32]	; (8030c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c20:	f7ff fc24 	bl	803046c <USBD_GetString>
 8030c24:	e004      	b.n	8030c30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8030c26:	683a      	ldr	r2, [r7, #0]
 8030c28:	4904      	ldr	r1, [pc, #16]	; (8030c3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8030c2a:	4805      	ldr	r0, [pc, #20]	; (8030c40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8030c2c:	f7ff fc1e 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c30:	4b02      	ldr	r3, [pc, #8]	; (8030c3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8030c32:	4618      	mov	r0, r3
 8030c34:	3708      	adds	r7, #8
 8030c36:	46bd      	mov	sp, r7
 8030c38:	bd80      	pop	{r7, pc}
 8030c3a:	bf00      	nop
 8030c3c:	200077d8 	.word	0x200077d8
 8030c40:	08033320 	.word	0x08033320

08030c44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8030c44:	b580      	push	{r7, lr}
 8030c46:	b082      	sub	sp, #8
 8030c48:	af00      	add	r7, sp, #0
 8030c4a:	4603      	mov	r3, r0
 8030c4c:	6039      	str	r1, [r7, #0]
 8030c4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8030c50:	79fb      	ldrb	r3, [r7, #7]
 8030c52:	2b00      	cmp	r3, #0
 8030c54:	d105      	bne.n	8030c62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c56:	683a      	ldr	r2, [r7, #0]
 8030c58:	4907      	ldr	r1, [pc, #28]	; (8030c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c5a:	4808      	ldr	r0, [pc, #32]	; (8030c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c5c:	f7ff fc06 	bl	803046c <USBD_GetString>
 8030c60:	e004      	b.n	8030c6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8030c62:	683a      	ldr	r2, [r7, #0]
 8030c64:	4904      	ldr	r1, [pc, #16]	; (8030c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8030c66:	4805      	ldr	r0, [pc, #20]	; (8030c7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8030c68:	f7ff fc00 	bl	803046c <USBD_GetString>
  }
  return USBD_StrDesc;
 8030c6c:	4b02      	ldr	r3, [pc, #8]	; (8030c78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8030c6e:	4618      	mov	r0, r3
 8030c70:	3708      	adds	r7, #8
 8030c72:	46bd      	mov	sp, r7
 8030c74:	bd80      	pop	{r7, pc}
 8030c76:	bf00      	nop
 8030c78:	200077d8 	.word	0x200077d8
 8030c7c:	0803332c 	.word	0x0803332c

08030c80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8030c80:	b580      	push	{r7, lr}
 8030c82:	b084      	sub	sp, #16
 8030c84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8030c86:	68fa      	ldr	r2, [r7, #12]
 8030c88:	68bb      	ldr	r3, [r7, #8]
 8030c8a:	4413      	add	r3, r2
 8030c8c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8030c8e:	68fb      	ldr	r3, [r7, #12]
 8030c90:	2b00      	cmp	r3, #0
 8030c92:	d009      	beq.n	8030ca8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8030c94:	2208      	movs	r2, #8
 8030c96:	4906      	ldr	r1, [pc, #24]	; (8030cb0 <Get_SerialNum+0x30>)
 8030c98:	68f8      	ldr	r0, [r7, #12]
 8030c9a:	f000 f80d 	bl	8030cb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8030c9e:	2204      	movs	r2, #4
 8030ca0:	4904      	ldr	r1, [pc, #16]	; (8030cb4 <Get_SerialNum+0x34>)
 8030ca2:	6878      	ldr	r0, [r7, #4]
 8030ca4:	f000 f808 	bl	8030cb8 <IntToUnicode>
  }
}
 8030ca8:	bf00      	nop
 8030caa:	3710      	adds	r7, #16
 8030cac:	46bd      	mov	sp, r7
 8030cae:	bd80      	pop	{r7, pc}
 8030cb0:	2000025e 	.word	0x2000025e
 8030cb4:	2000026e 	.word	0x2000026e

08030cb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8030cb8:	b480      	push	{r7}
 8030cba:	b087      	sub	sp, #28
 8030cbc:	af00      	add	r7, sp, #0
 8030cbe:	60f8      	str	r0, [r7, #12]
 8030cc0:	60b9      	str	r1, [r7, #8]
 8030cc2:	4613      	mov	r3, r2
 8030cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8030cc6:	2300      	movs	r3, #0
 8030cc8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8030cca:	2300      	movs	r3, #0
 8030ccc:	75fb      	strb	r3, [r7, #23]
 8030cce:	e027      	b.n	8030d20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8030cd0:	68fb      	ldr	r3, [r7, #12]
 8030cd2:	0f1b      	lsrs	r3, r3, #28
 8030cd4:	2b09      	cmp	r3, #9
 8030cd6:	d80b      	bhi.n	8030cf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8030cd8:	68fb      	ldr	r3, [r7, #12]
 8030cda:	0f1b      	lsrs	r3, r3, #28
 8030cdc:	b2da      	uxtb	r2, r3
 8030cde:	7dfb      	ldrb	r3, [r7, #23]
 8030ce0:	005b      	lsls	r3, r3, #1
 8030ce2:	4619      	mov	r1, r3
 8030ce4:	68bb      	ldr	r3, [r7, #8]
 8030ce6:	440b      	add	r3, r1
 8030ce8:	3230      	adds	r2, #48	; 0x30
 8030cea:	b2d2      	uxtb	r2, r2
 8030cec:	701a      	strb	r2, [r3, #0]
 8030cee:	e00a      	b.n	8030d06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8030cf0:	68fb      	ldr	r3, [r7, #12]
 8030cf2:	0f1b      	lsrs	r3, r3, #28
 8030cf4:	b2da      	uxtb	r2, r3
 8030cf6:	7dfb      	ldrb	r3, [r7, #23]
 8030cf8:	005b      	lsls	r3, r3, #1
 8030cfa:	4619      	mov	r1, r3
 8030cfc:	68bb      	ldr	r3, [r7, #8]
 8030cfe:	440b      	add	r3, r1
 8030d00:	3237      	adds	r2, #55	; 0x37
 8030d02:	b2d2      	uxtb	r2, r2
 8030d04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8030d06:	68fb      	ldr	r3, [r7, #12]
 8030d08:	011b      	lsls	r3, r3, #4
 8030d0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8030d0c:	7dfb      	ldrb	r3, [r7, #23]
 8030d0e:	005b      	lsls	r3, r3, #1
 8030d10:	3301      	adds	r3, #1
 8030d12:	68ba      	ldr	r2, [r7, #8]
 8030d14:	4413      	add	r3, r2
 8030d16:	2200      	movs	r2, #0
 8030d18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8030d1a:	7dfb      	ldrb	r3, [r7, #23]
 8030d1c:	3301      	adds	r3, #1
 8030d1e:	75fb      	strb	r3, [r7, #23]
 8030d20:	7dfa      	ldrb	r2, [r7, #23]
 8030d22:	79fb      	ldrb	r3, [r7, #7]
 8030d24:	429a      	cmp	r2, r3
 8030d26:	d3d3      	bcc.n	8030cd0 <IntToUnicode+0x18>
  }
}
 8030d28:	bf00      	nop
 8030d2a:	bf00      	nop
 8030d2c:	371c      	adds	r7, #28
 8030d2e:	46bd      	mov	sp, r7
 8030d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030d34:	4770      	bx	lr
	...

08030d38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8030d38:	b580      	push	{r7, lr}
 8030d3a:	b08e      	sub	sp, #56	; 0x38
 8030d3c:	af00      	add	r7, sp, #0
 8030d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8030d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030d44:	2200      	movs	r2, #0
 8030d46:	601a      	str	r2, [r3, #0]
 8030d48:	605a      	str	r2, [r3, #4]
 8030d4a:	609a      	str	r2, [r3, #8]
 8030d4c:	60da      	str	r2, [r3, #12]
 8030d4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8030d50:	687b      	ldr	r3, [r7, #4]
 8030d52:	681b      	ldr	r3, [r3, #0]
 8030d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8030d58:	d13b      	bne.n	8030dd2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030d5a:	2300      	movs	r3, #0
 8030d5c:	623b      	str	r3, [r7, #32]
 8030d5e:	4b69      	ldr	r3, [pc, #420]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d62:	4a68      	ldr	r2, [pc, #416]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030d64:	f043 0301 	orr.w	r3, r3, #1
 8030d68:	6313      	str	r3, [r2, #48]	; 0x30
 8030d6a:	4b66      	ldr	r3, [pc, #408]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030d6e:	f003 0301 	and.w	r3, r3, #1
 8030d72:	623b      	str	r3, [r7, #32]
 8030d74:	6a3b      	ldr	r3, [r7, #32]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8030d76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8030d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030d7c:	2302      	movs	r3, #2
 8030d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030d80:	2300      	movs	r3, #0
 8030d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030d84:	2303      	movs	r3, #3
 8030d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8030d88:	230a      	movs	r3, #10
 8030d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030d90:	4619      	mov	r1, r3
 8030d92:	485d      	ldr	r0, [pc, #372]	; (8030f08 <HAL_PCD_MspInit+0x1d0>)
 8030d94:	f7f7 fa96 	bl	80282c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8030d98:	4b5a      	ldr	r3, [pc, #360]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030d9c:	4a59      	ldr	r2, [pc, #356]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030da2:	6353      	str	r3, [r2, #52]	; 0x34
 8030da4:	2300      	movs	r3, #0
 8030da6:	61fb      	str	r3, [r7, #28]
 8030da8:	4b56      	ldr	r3, [pc, #344]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030dac:	4a55      	ldr	r2, [pc, #340]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8030db2:	6453      	str	r3, [r2, #68]	; 0x44
 8030db4:	4b53      	ldr	r3, [pc, #332]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8030dbc:	61fb      	str	r3, [r7, #28]
 8030dbe:	69fb      	ldr	r3, [r7, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8030dc0:	2200      	movs	r2, #0
 8030dc2:	2100      	movs	r1, #0
 8030dc4:	2043      	movs	r0, #67	; 0x43
 8030dc6:	f7f6 fe1a 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8030dca:	2043      	movs	r0, #67	; 0x43
 8030dcc:	f7f6 fe33 	bl	8027a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8030dd0:	e094      	b.n	8030efc <HAL_PCD_MspInit+0x1c4>
  else if(pcdHandle->Instance==USB_OTG_HS)
 8030dd2:	687b      	ldr	r3, [r7, #4]
 8030dd4:	681b      	ldr	r3, [r3, #0]
 8030dd6:	4a4d      	ldr	r2, [pc, #308]	; (8030f0c <HAL_PCD_MspInit+0x1d4>)
 8030dd8:	4293      	cmp	r3, r2
 8030dda:	f040 808f 	bne.w	8030efc <HAL_PCD_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8030dde:	2300      	movs	r3, #0
 8030de0:	61bb      	str	r3, [r7, #24]
 8030de2:	4b48      	ldr	r3, [pc, #288]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030de6:	4a47      	ldr	r2, [pc, #284]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030de8:	f043 0304 	orr.w	r3, r3, #4
 8030dec:	6313      	str	r3, [r2, #48]	; 0x30
 8030dee:	4b45      	ldr	r3, [pc, #276]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030df2:	f003 0304 	and.w	r3, r3, #4
 8030df6:	61bb      	str	r3, [r7, #24]
 8030df8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8030dfa:	2300      	movs	r3, #0
 8030dfc:	617b      	str	r3, [r7, #20]
 8030dfe:	4b41      	ldr	r3, [pc, #260]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e02:	4a40      	ldr	r2, [pc, #256]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e04:	f043 0301 	orr.w	r3, r3, #1
 8030e08:	6313      	str	r3, [r2, #48]	; 0x30
 8030e0a:	4b3e      	ldr	r3, [pc, #248]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e0e:	f003 0301 	and.w	r3, r3, #1
 8030e12:	617b      	str	r3, [r7, #20]
 8030e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8030e16:	2300      	movs	r3, #0
 8030e18:	613b      	str	r3, [r7, #16]
 8030e1a:	4b3a      	ldr	r3, [pc, #232]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e1e:	4a39      	ldr	r2, [pc, #228]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e20:	f043 0302 	orr.w	r3, r3, #2
 8030e24:	6313      	str	r3, [r2, #48]	; 0x30
 8030e26:	4b37      	ldr	r3, [pc, #220]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e2a:	f003 0302 	and.w	r3, r3, #2
 8030e2e:	613b      	str	r3, [r7, #16]
 8030e30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8030e32:	230d      	movs	r3, #13
 8030e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e36:	2302      	movs	r3, #2
 8030e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e3a:	2300      	movs	r3, #0
 8030e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e3e:	2303      	movs	r3, #3
 8030e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e42:	230a      	movs	r3, #10
 8030e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8030e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e4a:	4619      	mov	r1, r3
 8030e4c:	4830      	ldr	r0, [pc, #192]	; (8030f10 <HAL_PCD_MspInit+0x1d8>)
 8030e4e:	f7f7 fa39 	bl	80282c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8030e52:	2328      	movs	r3, #40	; 0x28
 8030e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e56:	2302      	movs	r3, #2
 8030e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e5a:	2300      	movs	r3, #0
 8030e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e5e:	2303      	movs	r3, #3
 8030e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e62:	230a      	movs	r3, #10
 8030e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8030e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e6a:	4619      	mov	r1, r3
 8030e6c:	4826      	ldr	r0, [pc, #152]	; (8030f08 <HAL_PCD_MspInit+0x1d0>)
 8030e6e:	f7f7 fa29 	bl	80282c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8030e72:	f643 4323 	movw	r3, #15395	; 0x3c23
 8030e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8030e78:	2302      	movs	r3, #2
 8030e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8030e7c:	2300      	movs	r3, #0
 8030e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8030e80:	2303      	movs	r3, #3
 8030e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8030e84:	230a      	movs	r3, #10
 8030e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8030e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8030e8c:	4619      	mov	r1, r3
 8030e8e:	4821      	ldr	r0, [pc, #132]	; (8030f14 <HAL_PCD_MspInit+0x1dc>)
 8030e90:	f7f7 fa18 	bl	80282c4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8030e94:	2300      	movs	r3, #0
 8030e96:	60fb      	str	r3, [r7, #12]
 8030e98:	4b1a      	ldr	r3, [pc, #104]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030e9c:	4a19      	ldr	r2, [pc, #100]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030e9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8030ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8030ea4:	4b17      	ldr	r3, [pc, #92]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8030eac:	60fb      	str	r3, [r7, #12]
 8030eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8030eb0:	2300      	movs	r3, #0
 8030eb2:	60bb      	str	r3, [r7, #8]
 8030eb4:	4b13      	ldr	r3, [pc, #76]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030eb8:	4a12      	ldr	r2, [pc, #72]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8030ec0:	4b10      	ldr	r3, [pc, #64]	; (8030f04 <HAL_PCD_MspInit+0x1cc>)
 8030ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030ec4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8030ec8:	60bb      	str	r3, [r7, #8]
 8030eca:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8030ecc:	2200      	movs	r2, #0
 8030ece:	2100      	movs	r1, #0
 8030ed0:	204a      	movs	r0, #74	; 0x4a
 8030ed2:	f7f6 fd94 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8030ed6:	204a      	movs	r0, #74	; 0x4a
 8030ed8:	f7f6 fdad 	bl	8027a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8030edc:	2200      	movs	r2, #0
 8030ede:	2100      	movs	r1, #0
 8030ee0:	204b      	movs	r0, #75	; 0x4b
 8030ee2:	f7f6 fd8c 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8030ee6:	204b      	movs	r0, #75	; 0x4b
 8030ee8:	f7f6 fda5 	bl	8027a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8030eec:	2200      	movs	r2, #0
 8030eee:	2100      	movs	r1, #0
 8030ef0:	204d      	movs	r0, #77	; 0x4d
 8030ef2:	f7f6 fd84 	bl	80279fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8030ef6:	204d      	movs	r0, #77	; 0x4d
 8030ef8:	f7f6 fd9d 	bl	8027a36 <HAL_NVIC_EnableIRQ>
}
 8030efc:	bf00      	nop
 8030efe:	3738      	adds	r7, #56	; 0x38
 8030f00:	46bd      	mov	sp, r7
 8030f02:	bd80      	pop	{r7, pc}
 8030f04:	40023800 	.word	0x40023800
 8030f08:	40020000 	.word	0x40020000
 8030f0c:	40040000 	.word	0x40040000
 8030f10:	40020800 	.word	0x40020800
 8030f14:	40020400 	.word	0x40020400

08030f18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f18:	b580      	push	{r7, lr}
 8030f1a:	b082      	sub	sp, #8
 8030f1c:	af00      	add	r7, sp, #0
 8030f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8030f20:	687b      	ldr	r3, [r7, #4]
 8030f22:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8030f26:	687b      	ldr	r3, [r7, #4]
 8030f28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030f2c:	4619      	mov	r1, r3
 8030f2e:	4610      	mov	r0, r2
 8030f30:	f7fe f93d 	bl	802f1ae <USBD_LL_SetupStage>
}
 8030f34:	bf00      	nop
 8030f36:	3708      	adds	r7, #8
 8030f38:	46bd      	mov	sp, r7
 8030f3a:	bd80      	pop	{r7, pc}

08030f3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f3c:	b580      	push	{r7, lr}
 8030f3e:	b082      	sub	sp, #8
 8030f40:	af00      	add	r7, sp, #0
 8030f42:	6078      	str	r0, [r7, #4]
 8030f44:	460b      	mov	r3, r1
 8030f46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8030f48:	687b      	ldr	r3, [r7, #4]
 8030f4a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030f4e:	78fa      	ldrb	r2, [r7, #3]
 8030f50:	6879      	ldr	r1, [r7, #4]
 8030f52:	4613      	mov	r3, r2
 8030f54:	00db      	lsls	r3, r3, #3
 8030f56:	4413      	add	r3, r2
 8030f58:	009b      	lsls	r3, r3, #2
 8030f5a:	440b      	add	r3, r1
 8030f5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8030f60:	681a      	ldr	r2, [r3, #0]
 8030f62:	78fb      	ldrb	r3, [r7, #3]
 8030f64:	4619      	mov	r1, r3
 8030f66:	f7fe f977 	bl	802f258 <USBD_LL_DataOutStage>
}
 8030f6a:	bf00      	nop
 8030f6c:	3708      	adds	r7, #8
 8030f6e:	46bd      	mov	sp, r7
 8030f70:	bd80      	pop	{r7, pc}

08030f72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030f72:	b580      	push	{r7, lr}
 8030f74:	b082      	sub	sp, #8
 8030f76:	af00      	add	r7, sp, #0
 8030f78:	6078      	str	r0, [r7, #4]
 8030f7a:	460b      	mov	r3, r1
 8030f7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8030f7e:	687b      	ldr	r3, [r7, #4]
 8030f80:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8030f84:	78fa      	ldrb	r2, [r7, #3]
 8030f86:	6879      	ldr	r1, [r7, #4]
 8030f88:	4613      	mov	r3, r2
 8030f8a:	00db      	lsls	r3, r3, #3
 8030f8c:	4413      	add	r3, r2
 8030f8e:	009b      	lsls	r3, r3, #2
 8030f90:	440b      	add	r3, r1
 8030f92:	334c      	adds	r3, #76	; 0x4c
 8030f94:	681a      	ldr	r2, [r3, #0]
 8030f96:	78fb      	ldrb	r3, [r7, #3]
 8030f98:	4619      	mov	r1, r3
 8030f9a:	f7fe fa10 	bl	802f3be <USBD_LL_DataInStage>
}
 8030f9e:	bf00      	nop
 8030fa0:	3708      	adds	r7, #8
 8030fa2:	46bd      	mov	sp, r7
 8030fa4:	bd80      	pop	{r7, pc}

08030fa6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030fa6:	b580      	push	{r7, lr}
 8030fa8:	b082      	sub	sp, #8
 8030faa:	af00      	add	r7, sp, #0
 8030fac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8030fae:	687b      	ldr	r3, [r7, #4]
 8030fb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030fb4:	4618      	mov	r0, r3
 8030fb6:	f7fe fb44 	bl	802f642 <USBD_LL_SOF>
}
 8030fba:	bf00      	nop
 8030fbc:	3708      	adds	r7, #8
 8030fbe:	46bd      	mov	sp, r7
 8030fc0:	bd80      	pop	{r7, pc}

08030fc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8030fc2:	b580      	push	{r7, lr}
 8030fc4:	b084      	sub	sp, #16
 8030fc6:	af00      	add	r7, sp, #0
 8030fc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8030fca:	2301      	movs	r3, #1
 8030fcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8030fce:	687b      	ldr	r3, [r7, #4]
 8030fd0:	68db      	ldr	r3, [r3, #12]
 8030fd2:	2b00      	cmp	r3, #0
 8030fd4:	d102      	bne.n	8030fdc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8030fd6:	2300      	movs	r3, #0
 8030fd8:	73fb      	strb	r3, [r7, #15]
 8030fda:	e008      	b.n	8030fee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8030fdc:	687b      	ldr	r3, [r7, #4]
 8030fde:	68db      	ldr	r3, [r3, #12]
 8030fe0:	2b02      	cmp	r3, #2
 8030fe2:	d102      	bne.n	8030fea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8030fe4:	2301      	movs	r3, #1
 8030fe6:	73fb      	strb	r3, [r7, #15]
 8030fe8:	e001      	b.n	8030fee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8030fea:	f7f2 fd31 	bl	8023a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8030fee:	687b      	ldr	r3, [r7, #4]
 8030ff0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8030ff4:	7bfa      	ldrb	r2, [r7, #15]
 8030ff6:	4611      	mov	r1, r2
 8030ff8:	4618      	mov	r0, r3
 8030ffa:	f7fe fae4 	bl	802f5c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8030ffe:	687b      	ldr	r3, [r7, #4]
 8031000:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031004:	4618      	mov	r0, r3
 8031006:	f7fe fa8c 	bl	802f522 <USBD_LL_Reset>
}
 803100a:	bf00      	nop
 803100c:	3710      	adds	r7, #16
 803100e:	46bd      	mov	sp, r7
 8031010:	bd80      	pop	{r7, pc}
	...

08031014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031014:	b580      	push	{r7, lr}
 8031016:	b082      	sub	sp, #8
 8031018:	af00      	add	r7, sp, #0
 803101a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803101c:	687b      	ldr	r3, [r7, #4]
 803101e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8031022:	4618      	mov	r0, r3
 8031024:	f7fe fadf 	bl	802f5e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8031028:	687b      	ldr	r3, [r7, #4]
 803102a:	681b      	ldr	r3, [r3, #0]
 803102c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8031030:	681b      	ldr	r3, [r3, #0]
 8031032:	687a      	ldr	r2, [r7, #4]
 8031034:	6812      	ldr	r2, [r2, #0]
 8031036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803103a:	f043 0301 	orr.w	r3, r3, #1
 803103e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8031040:	687b      	ldr	r3, [r7, #4]
 8031042:	6a1b      	ldr	r3, [r3, #32]
 8031044:	2b00      	cmp	r3, #0
 8031046:	d005      	beq.n	8031054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8031048:	4b04      	ldr	r3, [pc, #16]	; (803105c <HAL_PCD_SuspendCallback+0x48>)
 803104a:	691b      	ldr	r3, [r3, #16]
 803104c:	4a03      	ldr	r2, [pc, #12]	; (803105c <HAL_PCD_SuspendCallback+0x48>)
 803104e:	f043 0306 	orr.w	r3, r3, #6
 8031052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8031054:	bf00      	nop
 8031056:	3708      	adds	r7, #8
 8031058:	46bd      	mov	sp, r7
 803105a:	bd80      	pop	{r7, pc}
 803105c:	e000ed00 	.word	0xe000ed00

08031060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8031060:	b580      	push	{r7, lr}
 8031062:	b082      	sub	sp, #8
 8031064:	af00      	add	r7, sp, #0
 8031066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8031068:	687b      	ldr	r3, [r7, #4]
 803106a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803106e:	4618      	mov	r0, r3
 8031070:	f7fe facf 	bl	802f612 <USBD_LL_Resume>
}
 8031074:	bf00      	nop
 8031076:	3708      	adds	r7, #8
 8031078:	46bd      	mov	sp, r7
 803107a:	bd80      	pop	{r7, pc}

0803107c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803107c:	b580      	push	{r7, lr}
 803107e:	b082      	sub	sp, #8
 8031080:	af00      	add	r7, sp, #0
 8031082:	6078      	str	r0, [r7, #4]
 8031084:	460b      	mov	r3, r1
 8031086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8031088:	687b      	ldr	r3, [r7, #4]
 803108a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803108e:	78fa      	ldrb	r2, [r7, #3]
 8031090:	4611      	mov	r1, r2
 8031092:	4618      	mov	r0, r3
 8031094:	f7fe fb27 	bl	802f6e6 <USBD_LL_IsoOUTIncomplete>
}
 8031098:	bf00      	nop
 803109a:	3708      	adds	r7, #8
 803109c:	46bd      	mov	sp, r7
 803109e:	bd80      	pop	{r7, pc}

080310a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310a0:	b580      	push	{r7, lr}
 80310a2:	b082      	sub	sp, #8
 80310a4:	af00      	add	r7, sp, #0
 80310a6:	6078      	str	r0, [r7, #4]
 80310a8:	460b      	mov	r3, r1
 80310aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80310ac:	687b      	ldr	r3, [r7, #4]
 80310ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310b2:	78fa      	ldrb	r2, [r7, #3]
 80310b4:	4611      	mov	r1, r2
 80310b6:	4618      	mov	r0, r3
 80310b8:	f7fe fae3 	bl	802f682 <USBD_LL_IsoINIncomplete>
}
 80310bc:	bf00      	nop
 80310be:	3708      	adds	r7, #8
 80310c0:	46bd      	mov	sp, r7
 80310c2:	bd80      	pop	{r7, pc}

080310c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310c4:	b580      	push	{r7, lr}
 80310c6:	b082      	sub	sp, #8
 80310c8:	af00      	add	r7, sp, #0
 80310ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80310cc:	687b      	ldr	r3, [r7, #4]
 80310ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310d2:	4618      	mov	r0, r3
 80310d4:	f7fe fb39 	bl	802f74a <USBD_LL_DevConnected>
}
 80310d8:	bf00      	nop
 80310da:	3708      	adds	r7, #8
 80310dc:	46bd      	mov	sp, r7
 80310de:	bd80      	pop	{r7, pc}

080310e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80310e0:	b580      	push	{r7, lr}
 80310e2:	b082      	sub	sp, #8
 80310e4:	af00      	add	r7, sp, #0
 80310e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80310e8:	687b      	ldr	r3, [r7, #4]
 80310ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80310ee:	4618      	mov	r0, r3
 80310f0:	f7fe fb36 	bl	802f760 <USBD_LL_DevDisconnected>
}
 80310f4:	bf00      	nop
 80310f6:	3708      	adds	r7, #8
 80310f8:	46bd      	mov	sp, r7
 80310fa:	bd80      	pop	{r7, pc}

080310fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80310fc:	b580      	push	{r7, lr}
 80310fe:	b082      	sub	sp, #8
 8031100:	af00      	add	r7, sp, #0
 8031102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8031104:	687b      	ldr	r3, [r7, #4]
 8031106:	781b      	ldrb	r3, [r3, #0]
 8031108:	2b00      	cmp	r3, #0
 803110a:	d13c      	bne.n	8031186 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803110c:	4a43      	ldr	r2, [pc, #268]	; (803121c <USBD_LL_Init+0x120>)
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8031114:	687b      	ldr	r3, [r7, #4]
 8031116:	4a41      	ldr	r2, [pc, #260]	; (803121c <USBD_LL_Init+0x120>)
 8031118:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803111c:	4b3f      	ldr	r3, [pc, #252]	; (803121c <USBD_LL_Init+0x120>)
 803111e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8031122:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8031124:	4b3d      	ldr	r3, [pc, #244]	; (803121c <USBD_LL_Init+0x120>)
 8031126:	2204      	movs	r2, #4
 8031128:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803112a:	4b3c      	ldr	r3, [pc, #240]	; (803121c <USBD_LL_Init+0x120>)
 803112c:	2202      	movs	r2, #2
 803112e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8031130:	4b3a      	ldr	r3, [pc, #232]	; (803121c <USBD_LL_Init+0x120>)
 8031132:	2200      	movs	r2, #0
 8031134:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8031136:	4b39      	ldr	r3, [pc, #228]	; (803121c <USBD_LL_Init+0x120>)
 8031138:	2202      	movs	r2, #2
 803113a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803113c:	4b37      	ldr	r3, [pc, #220]	; (803121c <USBD_LL_Init+0x120>)
 803113e:	2200      	movs	r2, #0
 8031140:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8031142:	4b36      	ldr	r3, [pc, #216]	; (803121c <USBD_LL_Init+0x120>)
 8031144:	2200      	movs	r2, #0
 8031146:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8031148:	4b34      	ldr	r3, [pc, #208]	; (803121c <USBD_LL_Init+0x120>)
 803114a:	2200      	movs	r2, #0
 803114c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803114e:	4b33      	ldr	r3, [pc, #204]	; (803121c <USBD_LL_Init+0x120>)
 8031150:	2200      	movs	r2, #0
 8031152:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8031154:	4b31      	ldr	r3, [pc, #196]	; (803121c <USBD_LL_Init+0x120>)
 8031156:	2200      	movs	r2, #0
 8031158:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803115a:	4830      	ldr	r0, [pc, #192]	; (803121c <USBD_LL_Init+0x120>)
 803115c:	f7f7 fc8f 	bl	8028a7e <HAL_PCD_Init>
 8031160:	4603      	mov	r3, r0
 8031162:	2b00      	cmp	r3, #0
 8031164:	d001      	beq.n	803116a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8031166:	f7f2 fc73 	bl	8023a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803116a:	2180      	movs	r1, #128	; 0x80
 803116c:	482b      	ldr	r0, [pc, #172]	; (803121c <USBD_LL_Init+0x120>)
 803116e:	f7f8 fee6 	bl	8029f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8031172:	2240      	movs	r2, #64	; 0x40
 8031174:	2100      	movs	r1, #0
 8031176:	4829      	ldr	r0, [pc, #164]	; (803121c <USBD_LL_Init+0x120>)
 8031178:	f7f8 fe9a 	bl	8029eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803117c:	2280      	movs	r2, #128	; 0x80
 803117e:	2101      	movs	r1, #1
 8031180:	4826      	ldr	r0, [pc, #152]	; (803121c <USBD_LL_Init+0x120>)
 8031182:	f7f8 fe95 	bl	8029eb0 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8031186:	687b      	ldr	r3, [r7, #4]
 8031188:	781b      	ldrb	r3, [r3, #0]
 803118a:	2b01      	cmp	r3, #1
 803118c:	d140      	bne.n	8031210 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 803118e:	4a24      	ldr	r2, [pc, #144]	; (8031220 <USBD_LL_Init+0x124>)
 8031190:	687b      	ldr	r3, [r7, #4]
 8031192:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8031196:	687b      	ldr	r3, [r7, #4]
 8031198:	4a21      	ldr	r2, [pc, #132]	; (8031220 <USBD_LL_Init+0x124>)
 803119a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 803119e:	4b20      	ldr	r3, [pc, #128]	; (8031220 <USBD_LL_Init+0x124>)
 80311a0:	4a20      	ldr	r2, [pc, #128]	; (8031224 <USBD_LL_Init+0x128>)
 80311a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80311a4:	4b1e      	ldr	r3, [pc, #120]	; (8031220 <USBD_LL_Init+0x124>)
 80311a6:	2206      	movs	r2, #6
 80311a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80311aa:	4b1d      	ldr	r3, [pc, #116]	; (8031220 <USBD_LL_Init+0x124>)
 80311ac:	2200      	movs	r2, #0
 80311ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80311b0:	4b1b      	ldr	r3, [pc, #108]	; (8031220 <USBD_LL_Init+0x124>)
 80311b2:	2200      	movs	r2, #0
 80311b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 80311b6:	4b1a      	ldr	r3, [pc, #104]	; (8031220 <USBD_LL_Init+0x124>)
 80311b8:	2201      	movs	r2, #1
 80311ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80311bc:	4b18      	ldr	r3, [pc, #96]	; (8031220 <USBD_LL_Init+0x124>)
 80311be:	2200      	movs	r2, #0
 80311c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80311c2:	4b17      	ldr	r3, [pc, #92]	; (8031220 <USBD_LL_Init+0x124>)
 80311c4:	2200      	movs	r2, #0
 80311c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80311c8:	4b15      	ldr	r3, [pc, #84]	; (8031220 <USBD_LL_Init+0x124>)
 80311ca:	2200      	movs	r2, #0
 80311cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80311ce:	4b14      	ldr	r3, [pc, #80]	; (8031220 <USBD_LL_Init+0x124>)
 80311d0:	2200      	movs	r2, #0
 80311d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80311d4:	4b12      	ldr	r3, [pc, #72]	; (8031220 <USBD_LL_Init+0x124>)
 80311d6:	2200      	movs	r2, #0
 80311d8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80311da:	4b11      	ldr	r3, [pc, #68]	; (8031220 <USBD_LL_Init+0x124>)
 80311dc:	2200      	movs	r2, #0
 80311de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80311e0:	480f      	ldr	r0, [pc, #60]	; (8031220 <USBD_LL_Init+0x124>)
 80311e2:	f7f7 fc4c 	bl	8028a7e <HAL_PCD_Init>
 80311e6:	4603      	mov	r3, r0
 80311e8:	2b00      	cmp	r3, #0
 80311ea:	d001      	beq.n	80311f0 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80311ec:	f7f2 fc30 	bl	8023a50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80311f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80311f4:	480a      	ldr	r0, [pc, #40]	; (8031220 <USBD_LL_Init+0x124>)
 80311f6:	f7f8 fea2 	bl	8029f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80311fa:	2280      	movs	r2, #128	; 0x80
 80311fc:	2100      	movs	r1, #0
 80311fe:	4808      	ldr	r0, [pc, #32]	; (8031220 <USBD_LL_Init+0x124>)
 8031200:	f7f8 fe56 	bl	8029eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8031204:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8031208:	2101      	movs	r1, #1
 803120a:	4805      	ldr	r0, [pc, #20]	; (8031220 <USBD_LL_Init+0x124>)
 803120c:	f7f8 fe50 	bl	8029eb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8031210:	2300      	movs	r3, #0
}
 8031212:	4618      	mov	r0, r3
 8031214:	3708      	adds	r7, #8
 8031216:	46bd      	mov	sp, r7
 8031218:	bd80      	pop	{r7, pc}
 803121a:	bf00      	nop
 803121c:	200079d8 	.word	0x200079d8
 8031220:	20007ee4 	.word	0x20007ee4
 8031224:	40040000 	.word	0x40040000

08031228 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8031228:	b580      	push	{r7, lr}
 803122a:	b084      	sub	sp, #16
 803122c:	af00      	add	r7, sp, #0
 803122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031230:	2300      	movs	r3, #0
 8031232:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031234:	2300      	movs	r3, #0
 8031236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8031238:	687b      	ldr	r3, [r7, #4]
 803123a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803123e:	4618      	mov	r0, r3
 8031240:	f7f7 fd3a 	bl	8028cb8 <HAL_PCD_Start>
 8031244:	4603      	mov	r3, r0
 8031246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031248:	7bfb      	ldrb	r3, [r7, #15]
 803124a:	4618      	mov	r0, r3
 803124c:	f000 f942 	bl	80314d4 <USBD_Get_USB_Status>
 8031250:	4603      	mov	r3, r0
 8031252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8031254:	7bbb      	ldrb	r3, [r7, #14]
}
 8031256:	4618      	mov	r0, r3
 8031258:	3710      	adds	r7, #16
 803125a:	46bd      	mov	sp, r7
 803125c:	bd80      	pop	{r7, pc}

0803125e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803125e:	b580      	push	{r7, lr}
 8031260:	b084      	sub	sp, #16
 8031262:	af00      	add	r7, sp, #0
 8031264:	6078      	str	r0, [r7, #4]
 8031266:	4608      	mov	r0, r1
 8031268:	4611      	mov	r1, r2
 803126a:	461a      	mov	r2, r3
 803126c:	4603      	mov	r3, r0
 803126e:	70fb      	strb	r3, [r7, #3]
 8031270:	460b      	mov	r3, r1
 8031272:	70bb      	strb	r3, [r7, #2]
 8031274:	4613      	mov	r3, r2
 8031276:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031278:	2300      	movs	r3, #0
 803127a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803127c:	2300      	movs	r3, #0
 803127e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8031280:	687b      	ldr	r3, [r7, #4]
 8031282:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031286:	78bb      	ldrb	r3, [r7, #2]
 8031288:	883a      	ldrh	r2, [r7, #0]
 803128a:	78f9      	ldrb	r1, [r7, #3]
 803128c:	f7f8 fa0b 	bl	80296a6 <HAL_PCD_EP_Open>
 8031290:	4603      	mov	r3, r0
 8031292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031294:	7bfb      	ldrb	r3, [r7, #15]
 8031296:	4618      	mov	r0, r3
 8031298:	f000 f91c 	bl	80314d4 <USBD_Get_USB_Status>
 803129c:	4603      	mov	r3, r0
 803129e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80312a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80312a2:	4618      	mov	r0, r3
 80312a4:	3710      	adds	r7, #16
 80312a6:	46bd      	mov	sp, r7
 80312a8:	bd80      	pop	{r7, pc}

080312aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80312aa:	b580      	push	{r7, lr}
 80312ac:	b084      	sub	sp, #16
 80312ae:	af00      	add	r7, sp, #0
 80312b0:	6078      	str	r0, [r7, #4]
 80312b2:	460b      	mov	r3, r1
 80312b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312b6:	2300      	movs	r3, #0
 80312b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312ba:	2300      	movs	r3, #0
 80312bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80312be:	687b      	ldr	r3, [r7, #4]
 80312c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80312c4:	78fa      	ldrb	r2, [r7, #3]
 80312c6:	4611      	mov	r1, r2
 80312c8:	4618      	mov	r0, r3
 80312ca:	f7f8 fa54 	bl	8029776 <HAL_PCD_EP_Close>
 80312ce:	4603      	mov	r3, r0
 80312d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80312d2:	7bfb      	ldrb	r3, [r7, #15]
 80312d4:	4618      	mov	r0, r3
 80312d6:	f000 f8fd 	bl	80314d4 <USBD_Get_USB_Status>
 80312da:	4603      	mov	r3, r0
 80312dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80312de:	7bbb      	ldrb	r3, [r7, #14]
}
 80312e0:	4618      	mov	r0, r3
 80312e2:	3710      	adds	r7, #16
 80312e4:	46bd      	mov	sp, r7
 80312e6:	bd80      	pop	{r7, pc}

080312e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80312e8:	b580      	push	{r7, lr}
 80312ea:	b084      	sub	sp, #16
 80312ec:	af00      	add	r7, sp, #0
 80312ee:	6078      	str	r0, [r7, #4]
 80312f0:	460b      	mov	r3, r1
 80312f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80312f4:	2300      	movs	r3, #0
 80312f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80312f8:	2300      	movs	r3, #0
 80312fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80312fc:	687b      	ldr	r3, [r7, #4]
 80312fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031302:	78fa      	ldrb	r2, [r7, #3]
 8031304:	4611      	mov	r1, r2
 8031306:	4618      	mov	r0, r3
 8031308:	f7f8 fb2c 	bl	8029964 <HAL_PCD_EP_SetStall>
 803130c:	4603      	mov	r3, r0
 803130e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031310:	7bfb      	ldrb	r3, [r7, #15]
 8031312:	4618      	mov	r0, r3
 8031314:	f000 f8de 	bl	80314d4 <USBD_Get_USB_Status>
 8031318:	4603      	mov	r3, r0
 803131a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803131c:	7bbb      	ldrb	r3, [r7, #14]
}
 803131e:	4618      	mov	r0, r3
 8031320:	3710      	adds	r7, #16
 8031322:	46bd      	mov	sp, r7
 8031324:	bd80      	pop	{r7, pc}

08031326 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031326:	b580      	push	{r7, lr}
 8031328:	b084      	sub	sp, #16
 803132a:	af00      	add	r7, sp, #0
 803132c:	6078      	str	r0, [r7, #4]
 803132e:	460b      	mov	r3, r1
 8031330:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8031332:	2300      	movs	r3, #0
 8031334:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031336:	2300      	movs	r3, #0
 8031338:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803133a:	687b      	ldr	r3, [r7, #4]
 803133c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031340:	78fa      	ldrb	r2, [r7, #3]
 8031342:	4611      	mov	r1, r2
 8031344:	4618      	mov	r0, r3
 8031346:	f7f8 fb71 	bl	8029a2c <HAL_PCD_EP_ClrStall>
 803134a:	4603      	mov	r3, r0
 803134c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803134e:	7bfb      	ldrb	r3, [r7, #15]
 8031350:	4618      	mov	r0, r3
 8031352:	f000 f8bf 	bl	80314d4 <USBD_Get_USB_Status>
 8031356:	4603      	mov	r3, r0
 8031358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803135a:	7bbb      	ldrb	r3, [r7, #14]
}
 803135c:	4618      	mov	r0, r3
 803135e:	3710      	adds	r7, #16
 8031360:	46bd      	mov	sp, r7
 8031362:	bd80      	pop	{r7, pc}

08031364 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8031364:	b480      	push	{r7}
 8031366:	b085      	sub	sp, #20
 8031368:	af00      	add	r7, sp, #0
 803136a:	6078      	str	r0, [r7, #4]
 803136c:	460b      	mov	r3, r1
 803136e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8031370:	687b      	ldr	r3, [r7, #4]
 8031372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031376:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8031378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803137c:	2b00      	cmp	r3, #0
 803137e:	da0b      	bge.n	8031398 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8031380:	78fb      	ldrb	r3, [r7, #3]
 8031382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031386:	68f9      	ldr	r1, [r7, #12]
 8031388:	4613      	mov	r3, r2
 803138a:	00db      	lsls	r3, r3, #3
 803138c:	4413      	add	r3, r2
 803138e:	009b      	lsls	r3, r3, #2
 8031390:	440b      	add	r3, r1
 8031392:	333e      	adds	r3, #62	; 0x3e
 8031394:	781b      	ldrb	r3, [r3, #0]
 8031396:	e00b      	b.n	80313b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8031398:	78fb      	ldrb	r3, [r7, #3]
 803139a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803139e:	68f9      	ldr	r1, [r7, #12]
 80313a0:	4613      	mov	r3, r2
 80313a2:	00db      	lsls	r3, r3, #3
 80313a4:	4413      	add	r3, r2
 80313a6:	009b      	lsls	r3, r3, #2
 80313a8:	440b      	add	r3, r1
 80313aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80313ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80313b0:	4618      	mov	r0, r3
 80313b2:	3714      	adds	r7, #20
 80313b4:	46bd      	mov	sp, r7
 80313b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80313ba:	4770      	bx	lr

080313bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80313bc:	b580      	push	{r7, lr}
 80313be:	b084      	sub	sp, #16
 80313c0:	af00      	add	r7, sp, #0
 80313c2:	6078      	str	r0, [r7, #4]
 80313c4:	460b      	mov	r3, r1
 80313c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80313c8:	2300      	movs	r3, #0
 80313ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80313cc:	2300      	movs	r3, #0
 80313ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80313d0:	687b      	ldr	r3, [r7, #4]
 80313d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80313d6:	78fa      	ldrb	r2, [r7, #3]
 80313d8:	4611      	mov	r1, r2
 80313da:	4618      	mov	r0, r3
 80313dc:	f7f8 f93e 	bl	802965c <HAL_PCD_SetAddress>
 80313e0:	4603      	mov	r3, r0
 80313e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80313e4:	7bfb      	ldrb	r3, [r7, #15]
 80313e6:	4618      	mov	r0, r3
 80313e8:	f000 f874 	bl	80314d4 <USBD_Get_USB_Status>
 80313ec:	4603      	mov	r3, r0
 80313ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80313f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80313f2:	4618      	mov	r0, r3
 80313f4:	3710      	adds	r7, #16
 80313f6:	46bd      	mov	sp, r7
 80313f8:	bd80      	pop	{r7, pc}

080313fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80313fa:	b580      	push	{r7, lr}
 80313fc:	b086      	sub	sp, #24
 80313fe:	af00      	add	r7, sp, #0
 8031400:	60f8      	str	r0, [r7, #12]
 8031402:	607a      	str	r2, [r7, #4]
 8031404:	603b      	str	r3, [r7, #0]
 8031406:	460b      	mov	r3, r1
 8031408:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803140a:	2300      	movs	r3, #0
 803140c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803140e:	2300      	movs	r3, #0
 8031410:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8031412:	68fb      	ldr	r3, [r7, #12]
 8031414:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8031418:	7af9      	ldrb	r1, [r7, #11]
 803141a:	683b      	ldr	r3, [r7, #0]
 803141c:	687a      	ldr	r2, [r7, #4]
 803141e:	f7f8 fa57 	bl	80298d0 <HAL_PCD_EP_Transmit>
 8031422:	4603      	mov	r3, r0
 8031424:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031426:	7dfb      	ldrb	r3, [r7, #23]
 8031428:	4618      	mov	r0, r3
 803142a:	f000 f853 	bl	80314d4 <USBD_Get_USB_Status>
 803142e:	4603      	mov	r3, r0
 8031430:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031432:	7dbb      	ldrb	r3, [r7, #22]
}
 8031434:	4618      	mov	r0, r3
 8031436:	3718      	adds	r7, #24
 8031438:	46bd      	mov	sp, r7
 803143a:	bd80      	pop	{r7, pc}

0803143c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803143c:	b580      	push	{r7, lr}
 803143e:	b086      	sub	sp, #24
 8031440:	af00      	add	r7, sp, #0
 8031442:	60f8      	str	r0, [r7, #12]
 8031444:	607a      	str	r2, [r7, #4]
 8031446:	603b      	str	r3, [r7, #0]
 8031448:	460b      	mov	r3, r1
 803144a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803144c:	2300      	movs	r3, #0
 803144e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8031450:	2300      	movs	r3, #0
 8031452:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8031454:	68fb      	ldr	r3, [r7, #12]
 8031456:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803145a:	7af9      	ldrb	r1, [r7, #11]
 803145c:	683b      	ldr	r3, [r7, #0]
 803145e:	687a      	ldr	r2, [r7, #4]
 8031460:	f7f8 f9d3 	bl	802980a <HAL_PCD_EP_Receive>
 8031464:	4603      	mov	r3, r0
 8031466:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8031468:	7dfb      	ldrb	r3, [r7, #23]
 803146a:	4618      	mov	r0, r3
 803146c:	f000 f832 	bl	80314d4 <USBD_Get_USB_Status>
 8031470:	4603      	mov	r3, r0
 8031472:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8031474:	7dbb      	ldrb	r3, [r7, #22]
}
 8031476:	4618      	mov	r0, r3
 8031478:	3718      	adds	r7, #24
 803147a:	46bd      	mov	sp, r7
 803147c:	bd80      	pop	{r7, pc}

0803147e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803147e:	b580      	push	{r7, lr}
 8031480:	b082      	sub	sp, #8
 8031482:	af00      	add	r7, sp, #0
 8031484:	6078      	str	r0, [r7, #4]
 8031486:	460b      	mov	r3, r1
 8031488:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803148a:	687b      	ldr	r3, [r7, #4]
 803148c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8031490:	78fa      	ldrb	r2, [r7, #3]
 8031492:	4611      	mov	r1, r2
 8031494:	4618      	mov	r0, r3
 8031496:	f7f8 fa03 	bl	80298a0 <HAL_PCD_EP_GetRxCount>
 803149a:	4603      	mov	r3, r0
}
 803149c:	4618      	mov	r0, r3
 803149e:	3708      	adds	r7, #8
 80314a0:	46bd      	mov	sp, r7
 80314a2:	bd80      	pop	{r7, pc}

080314a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80314a4:	b480      	push	{r7}
 80314a6:	b083      	sub	sp, #12
 80314a8:	af00      	add	r7, sp, #0
 80314aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80314ac:	4b03      	ldr	r3, [pc, #12]	; (80314bc <USBD_static_malloc+0x18>)
}
 80314ae:	4618      	mov	r0, r3
 80314b0:	370c      	adds	r7, #12
 80314b2:	46bd      	mov	sp, r7
 80314b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314b8:	4770      	bx	lr
 80314ba:	bf00      	nop
 80314bc:	200083f0 	.word	0x200083f0

080314c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80314c0:	b480      	push	{r7}
 80314c2:	b083      	sub	sp, #12
 80314c4:	af00      	add	r7, sp, #0
 80314c6:	6078      	str	r0, [r7, #4]

}
 80314c8:	bf00      	nop
 80314ca:	370c      	adds	r7, #12
 80314cc:	46bd      	mov	sp, r7
 80314ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314d2:	4770      	bx	lr

080314d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80314d4:	b480      	push	{r7}
 80314d6:	b085      	sub	sp, #20
 80314d8:	af00      	add	r7, sp, #0
 80314da:	4603      	mov	r3, r0
 80314dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80314de:	2300      	movs	r3, #0
 80314e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80314e2:	79fb      	ldrb	r3, [r7, #7]
 80314e4:	2b03      	cmp	r3, #3
 80314e6:	d817      	bhi.n	8031518 <USBD_Get_USB_Status+0x44>
 80314e8:	a201      	add	r2, pc, #4	; (adr r2, 80314f0 <USBD_Get_USB_Status+0x1c>)
 80314ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80314ee:	bf00      	nop
 80314f0:	08031501 	.word	0x08031501
 80314f4:	08031507 	.word	0x08031507
 80314f8:	0803150d 	.word	0x0803150d
 80314fc:	08031513 	.word	0x08031513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8031500:	2300      	movs	r3, #0
 8031502:	73fb      	strb	r3, [r7, #15]
    break;
 8031504:	e00b      	b.n	803151e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8031506:	2303      	movs	r3, #3
 8031508:	73fb      	strb	r3, [r7, #15]
    break;
 803150a:	e008      	b.n	803151e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803150c:	2301      	movs	r3, #1
 803150e:	73fb      	strb	r3, [r7, #15]
    break;
 8031510:	e005      	b.n	803151e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8031512:	2303      	movs	r3, #3
 8031514:	73fb      	strb	r3, [r7, #15]
    break;
 8031516:	e002      	b.n	803151e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8031518:	2303      	movs	r3, #3
 803151a:	73fb      	strb	r3, [r7, #15]
    break;
 803151c:	bf00      	nop
  }
  return usb_status;
 803151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8031520:	4618      	mov	r0, r3
 8031522:	3714      	adds	r7, #20
 8031524:	46bd      	mov	sp, r7
 8031526:	f85d 7b04 	ldr.w	r7, [sp], #4
 803152a:	4770      	bx	lr

0803152c <std>:
 803152c:	2300      	movs	r3, #0
 803152e:	b510      	push	{r4, lr}
 8031530:	4604      	mov	r4, r0
 8031532:	e9c0 3300 	strd	r3, r3, [r0]
 8031536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803153a:	6083      	str	r3, [r0, #8]
 803153c:	8181      	strh	r1, [r0, #12]
 803153e:	6643      	str	r3, [r0, #100]	; 0x64
 8031540:	81c2      	strh	r2, [r0, #14]
 8031542:	6183      	str	r3, [r0, #24]
 8031544:	4619      	mov	r1, r3
 8031546:	2208      	movs	r2, #8
 8031548:	305c      	adds	r0, #92	; 0x5c
 803154a:	f000 f9f7 	bl	803193c <memset>
 803154e:	4b0d      	ldr	r3, [pc, #52]	; (8031584 <std+0x58>)
 8031550:	6263      	str	r3, [r4, #36]	; 0x24
 8031552:	4b0d      	ldr	r3, [pc, #52]	; (8031588 <std+0x5c>)
 8031554:	62a3      	str	r3, [r4, #40]	; 0x28
 8031556:	4b0d      	ldr	r3, [pc, #52]	; (803158c <std+0x60>)
 8031558:	62e3      	str	r3, [r4, #44]	; 0x2c
 803155a:	4b0d      	ldr	r3, [pc, #52]	; (8031590 <std+0x64>)
 803155c:	6323      	str	r3, [r4, #48]	; 0x30
 803155e:	4b0d      	ldr	r3, [pc, #52]	; (8031594 <std+0x68>)
 8031560:	6224      	str	r4, [r4, #32]
 8031562:	429c      	cmp	r4, r3
 8031564:	d006      	beq.n	8031574 <std+0x48>
 8031566:	f103 0268 	add.w	r2, r3, #104	; 0x68
 803156a:	4294      	cmp	r4, r2
 803156c:	d002      	beq.n	8031574 <std+0x48>
 803156e:	33d0      	adds	r3, #208	; 0xd0
 8031570:	429c      	cmp	r4, r3
 8031572:	d105      	bne.n	8031580 <std+0x54>
 8031574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8031578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803157c:	f000 ba56 	b.w	8031a2c <__retarget_lock_init_recursive>
 8031580:	bd10      	pop	{r4, pc}
 8031582:	bf00      	nop
 8031584:	0803178d 	.word	0x0803178d
 8031588:	080317af 	.word	0x080317af
 803158c:	080317e7 	.word	0x080317e7
 8031590:	0803180b 	.word	0x0803180b
 8031594:	20008610 	.word	0x20008610

08031598 <stdio_exit_handler>:
 8031598:	4a02      	ldr	r2, [pc, #8]	; (80315a4 <stdio_exit_handler+0xc>)
 803159a:	4903      	ldr	r1, [pc, #12]	; (80315a8 <stdio_exit_handler+0x10>)
 803159c:	4803      	ldr	r0, [pc, #12]	; (80315ac <stdio_exit_handler+0x14>)
 803159e:	f000 b869 	b.w	8031674 <_fwalk_sglue>
 80315a2:	bf00      	nop
 80315a4:	20000278 	.word	0x20000278
 80315a8:	080322f5 	.word	0x080322f5
 80315ac:	20000284 	.word	0x20000284

080315b0 <cleanup_stdio>:
 80315b0:	6841      	ldr	r1, [r0, #4]
 80315b2:	4b0c      	ldr	r3, [pc, #48]	; (80315e4 <cleanup_stdio+0x34>)
 80315b4:	4299      	cmp	r1, r3
 80315b6:	b510      	push	{r4, lr}
 80315b8:	4604      	mov	r4, r0
 80315ba:	d001      	beq.n	80315c0 <cleanup_stdio+0x10>
 80315bc:	f000 fe9a 	bl	80322f4 <_fflush_r>
 80315c0:	68a1      	ldr	r1, [r4, #8]
 80315c2:	4b09      	ldr	r3, [pc, #36]	; (80315e8 <cleanup_stdio+0x38>)
 80315c4:	4299      	cmp	r1, r3
 80315c6:	d002      	beq.n	80315ce <cleanup_stdio+0x1e>
 80315c8:	4620      	mov	r0, r4
 80315ca:	f000 fe93 	bl	80322f4 <_fflush_r>
 80315ce:	68e1      	ldr	r1, [r4, #12]
 80315d0:	4b06      	ldr	r3, [pc, #24]	; (80315ec <cleanup_stdio+0x3c>)
 80315d2:	4299      	cmp	r1, r3
 80315d4:	d004      	beq.n	80315e0 <cleanup_stdio+0x30>
 80315d6:	4620      	mov	r0, r4
 80315d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80315dc:	f000 be8a 	b.w	80322f4 <_fflush_r>
 80315e0:	bd10      	pop	{r4, pc}
 80315e2:	bf00      	nop
 80315e4:	20008610 	.word	0x20008610
 80315e8:	20008678 	.word	0x20008678
 80315ec:	200086e0 	.word	0x200086e0

080315f0 <global_stdio_init.part.0>:
 80315f0:	b510      	push	{r4, lr}
 80315f2:	4b0b      	ldr	r3, [pc, #44]	; (8031620 <global_stdio_init.part.0+0x30>)
 80315f4:	4c0b      	ldr	r4, [pc, #44]	; (8031624 <global_stdio_init.part.0+0x34>)
 80315f6:	4a0c      	ldr	r2, [pc, #48]	; (8031628 <global_stdio_init.part.0+0x38>)
 80315f8:	601a      	str	r2, [r3, #0]
 80315fa:	4620      	mov	r0, r4
 80315fc:	2200      	movs	r2, #0
 80315fe:	2104      	movs	r1, #4
 8031600:	f7ff ff94 	bl	803152c <std>
 8031604:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8031608:	2201      	movs	r2, #1
 803160a:	2109      	movs	r1, #9
 803160c:	f7ff ff8e 	bl	803152c <std>
 8031610:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8031614:	2202      	movs	r2, #2
 8031616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803161a:	2112      	movs	r1, #18
 803161c:	f7ff bf86 	b.w	803152c <std>
 8031620:	20008748 	.word	0x20008748
 8031624:	20008610 	.word	0x20008610
 8031628:	08031599 	.word	0x08031599

0803162c <__sfp_lock_acquire>:
 803162c:	4801      	ldr	r0, [pc, #4]	; (8031634 <__sfp_lock_acquire+0x8>)
 803162e:	f000 b9fe 	b.w	8031a2e <__retarget_lock_acquire_recursive>
 8031632:	bf00      	nop
 8031634:	20008751 	.word	0x20008751

08031638 <__sfp_lock_release>:
 8031638:	4801      	ldr	r0, [pc, #4]	; (8031640 <__sfp_lock_release+0x8>)
 803163a:	f000 b9f9 	b.w	8031a30 <__retarget_lock_release_recursive>
 803163e:	bf00      	nop
 8031640:	20008751 	.word	0x20008751

08031644 <__sinit>:
 8031644:	b510      	push	{r4, lr}
 8031646:	4604      	mov	r4, r0
 8031648:	f7ff fff0 	bl	803162c <__sfp_lock_acquire>
 803164c:	6a23      	ldr	r3, [r4, #32]
 803164e:	b11b      	cbz	r3, 8031658 <__sinit+0x14>
 8031650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8031654:	f7ff bff0 	b.w	8031638 <__sfp_lock_release>
 8031658:	4b04      	ldr	r3, [pc, #16]	; (803166c <__sinit+0x28>)
 803165a:	6223      	str	r3, [r4, #32]
 803165c:	4b04      	ldr	r3, [pc, #16]	; (8031670 <__sinit+0x2c>)
 803165e:	681b      	ldr	r3, [r3, #0]
 8031660:	2b00      	cmp	r3, #0
 8031662:	d1f5      	bne.n	8031650 <__sinit+0xc>
 8031664:	f7ff ffc4 	bl	80315f0 <global_stdio_init.part.0>
 8031668:	e7f2      	b.n	8031650 <__sinit+0xc>
 803166a:	bf00      	nop
 803166c:	080315b1 	.word	0x080315b1
 8031670:	20008748 	.word	0x20008748

08031674 <_fwalk_sglue>:
 8031674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031678:	4607      	mov	r7, r0
 803167a:	4688      	mov	r8, r1
 803167c:	4614      	mov	r4, r2
 803167e:	2600      	movs	r6, #0
 8031680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8031684:	f1b9 0901 	subs.w	r9, r9, #1
 8031688:	d505      	bpl.n	8031696 <_fwalk_sglue+0x22>
 803168a:	6824      	ldr	r4, [r4, #0]
 803168c:	2c00      	cmp	r4, #0
 803168e:	d1f7      	bne.n	8031680 <_fwalk_sglue+0xc>
 8031690:	4630      	mov	r0, r6
 8031692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031696:	89ab      	ldrh	r3, [r5, #12]
 8031698:	2b01      	cmp	r3, #1
 803169a:	d907      	bls.n	80316ac <_fwalk_sglue+0x38>
 803169c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80316a0:	3301      	adds	r3, #1
 80316a2:	d003      	beq.n	80316ac <_fwalk_sglue+0x38>
 80316a4:	4629      	mov	r1, r5
 80316a6:	4638      	mov	r0, r7
 80316a8:	47c0      	blx	r8
 80316aa:	4306      	orrs	r6, r0
 80316ac:	3568      	adds	r5, #104	; 0x68
 80316ae:	e7e9      	b.n	8031684 <_fwalk_sglue+0x10>

080316b0 <iprintf>:
 80316b0:	b40f      	push	{r0, r1, r2, r3}
 80316b2:	b507      	push	{r0, r1, r2, lr}
 80316b4:	4906      	ldr	r1, [pc, #24]	; (80316d0 <iprintf+0x20>)
 80316b6:	ab04      	add	r3, sp, #16
 80316b8:	6808      	ldr	r0, [r1, #0]
 80316ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80316be:	6881      	ldr	r1, [r0, #8]
 80316c0:	9301      	str	r3, [sp, #4]
 80316c2:	f000 fae7 	bl	8031c94 <_vfiprintf_r>
 80316c6:	b003      	add	sp, #12
 80316c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80316cc:	b004      	add	sp, #16
 80316ce:	4770      	bx	lr
 80316d0:	200002d0 	.word	0x200002d0

080316d4 <_puts_r>:
 80316d4:	6a03      	ldr	r3, [r0, #32]
 80316d6:	b570      	push	{r4, r5, r6, lr}
 80316d8:	6884      	ldr	r4, [r0, #8]
 80316da:	4605      	mov	r5, r0
 80316dc:	460e      	mov	r6, r1
 80316de:	b90b      	cbnz	r3, 80316e4 <_puts_r+0x10>
 80316e0:	f7ff ffb0 	bl	8031644 <__sinit>
 80316e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80316e6:	07db      	lsls	r3, r3, #31
 80316e8:	d405      	bmi.n	80316f6 <_puts_r+0x22>
 80316ea:	89a3      	ldrh	r3, [r4, #12]
 80316ec:	0598      	lsls	r0, r3, #22
 80316ee:	d402      	bmi.n	80316f6 <_puts_r+0x22>
 80316f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80316f2:	f000 f99c 	bl	8031a2e <__retarget_lock_acquire_recursive>
 80316f6:	89a3      	ldrh	r3, [r4, #12]
 80316f8:	0719      	lsls	r1, r3, #28
 80316fa:	d513      	bpl.n	8031724 <_puts_r+0x50>
 80316fc:	6923      	ldr	r3, [r4, #16]
 80316fe:	b18b      	cbz	r3, 8031724 <_puts_r+0x50>
 8031700:	3e01      	subs	r6, #1
 8031702:	68a3      	ldr	r3, [r4, #8]
 8031704:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8031708:	3b01      	subs	r3, #1
 803170a:	60a3      	str	r3, [r4, #8]
 803170c:	b9e9      	cbnz	r1, 803174a <_puts_r+0x76>
 803170e:	2b00      	cmp	r3, #0
 8031710:	da2e      	bge.n	8031770 <_puts_r+0x9c>
 8031712:	4622      	mov	r2, r4
 8031714:	210a      	movs	r1, #10
 8031716:	4628      	mov	r0, r5
 8031718:	f000 f87b 	bl	8031812 <__swbuf_r>
 803171c:	3001      	adds	r0, #1
 803171e:	d007      	beq.n	8031730 <_puts_r+0x5c>
 8031720:	250a      	movs	r5, #10
 8031722:	e007      	b.n	8031734 <_puts_r+0x60>
 8031724:	4621      	mov	r1, r4
 8031726:	4628      	mov	r0, r5
 8031728:	f000 f8b0 	bl	803188c <__swsetup_r>
 803172c:	2800      	cmp	r0, #0
 803172e:	d0e7      	beq.n	8031700 <_puts_r+0x2c>
 8031730:	f04f 35ff 	mov.w	r5, #4294967295
 8031734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8031736:	07da      	lsls	r2, r3, #31
 8031738:	d405      	bmi.n	8031746 <_puts_r+0x72>
 803173a:	89a3      	ldrh	r3, [r4, #12]
 803173c:	059b      	lsls	r3, r3, #22
 803173e:	d402      	bmi.n	8031746 <_puts_r+0x72>
 8031740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8031742:	f000 f975 	bl	8031a30 <__retarget_lock_release_recursive>
 8031746:	4628      	mov	r0, r5
 8031748:	bd70      	pop	{r4, r5, r6, pc}
 803174a:	2b00      	cmp	r3, #0
 803174c:	da04      	bge.n	8031758 <_puts_r+0x84>
 803174e:	69a2      	ldr	r2, [r4, #24]
 8031750:	429a      	cmp	r2, r3
 8031752:	dc06      	bgt.n	8031762 <_puts_r+0x8e>
 8031754:	290a      	cmp	r1, #10
 8031756:	d004      	beq.n	8031762 <_puts_r+0x8e>
 8031758:	6823      	ldr	r3, [r4, #0]
 803175a:	1c5a      	adds	r2, r3, #1
 803175c:	6022      	str	r2, [r4, #0]
 803175e:	7019      	strb	r1, [r3, #0]
 8031760:	e7cf      	b.n	8031702 <_puts_r+0x2e>
 8031762:	4622      	mov	r2, r4
 8031764:	4628      	mov	r0, r5
 8031766:	f000 f854 	bl	8031812 <__swbuf_r>
 803176a:	3001      	adds	r0, #1
 803176c:	d1c9      	bne.n	8031702 <_puts_r+0x2e>
 803176e:	e7df      	b.n	8031730 <_puts_r+0x5c>
 8031770:	6823      	ldr	r3, [r4, #0]
 8031772:	250a      	movs	r5, #10
 8031774:	1c5a      	adds	r2, r3, #1
 8031776:	6022      	str	r2, [r4, #0]
 8031778:	701d      	strb	r5, [r3, #0]
 803177a:	e7db      	b.n	8031734 <_puts_r+0x60>

0803177c <puts>:
 803177c:	4b02      	ldr	r3, [pc, #8]	; (8031788 <puts+0xc>)
 803177e:	4601      	mov	r1, r0
 8031780:	6818      	ldr	r0, [r3, #0]
 8031782:	f7ff bfa7 	b.w	80316d4 <_puts_r>
 8031786:	bf00      	nop
 8031788:	200002d0 	.word	0x200002d0

0803178c <__sread>:
 803178c:	b510      	push	{r4, lr}
 803178e:	460c      	mov	r4, r1
 8031790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8031794:	f000 f8fc 	bl	8031990 <_read_r>
 8031798:	2800      	cmp	r0, #0
 803179a:	bfab      	itete	ge
 803179c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803179e:	89a3      	ldrhlt	r3, [r4, #12]
 80317a0:	181b      	addge	r3, r3, r0
 80317a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80317a6:	bfac      	ite	ge
 80317a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80317aa:	81a3      	strhlt	r3, [r4, #12]
 80317ac:	bd10      	pop	{r4, pc}

080317ae <__swrite>:
 80317ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80317b2:	461f      	mov	r7, r3
 80317b4:	898b      	ldrh	r3, [r1, #12]
 80317b6:	05db      	lsls	r3, r3, #23
 80317b8:	4605      	mov	r5, r0
 80317ba:	460c      	mov	r4, r1
 80317bc:	4616      	mov	r6, r2
 80317be:	d505      	bpl.n	80317cc <__swrite+0x1e>
 80317c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317c4:	2302      	movs	r3, #2
 80317c6:	2200      	movs	r2, #0
 80317c8:	f000 f8d0 	bl	803196c <_lseek_r>
 80317cc:	89a3      	ldrh	r3, [r4, #12]
 80317ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80317d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80317d6:	81a3      	strh	r3, [r4, #12]
 80317d8:	4632      	mov	r2, r6
 80317da:	463b      	mov	r3, r7
 80317dc:	4628      	mov	r0, r5
 80317de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80317e2:	f000 b8e7 	b.w	80319b4 <_write_r>

080317e6 <__sseek>:
 80317e6:	b510      	push	{r4, lr}
 80317e8:	460c      	mov	r4, r1
 80317ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80317ee:	f000 f8bd 	bl	803196c <_lseek_r>
 80317f2:	1c43      	adds	r3, r0, #1
 80317f4:	89a3      	ldrh	r3, [r4, #12]
 80317f6:	bf15      	itete	ne
 80317f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80317fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80317fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8031802:	81a3      	strheq	r3, [r4, #12]
 8031804:	bf18      	it	ne
 8031806:	81a3      	strhne	r3, [r4, #12]
 8031808:	bd10      	pop	{r4, pc}

0803180a <__sclose>:
 803180a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803180e:	f000 b89d 	b.w	803194c <_close_r>

08031812 <__swbuf_r>:
 8031812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031814:	460e      	mov	r6, r1
 8031816:	4614      	mov	r4, r2
 8031818:	4605      	mov	r5, r0
 803181a:	b118      	cbz	r0, 8031824 <__swbuf_r+0x12>
 803181c:	6a03      	ldr	r3, [r0, #32]
 803181e:	b90b      	cbnz	r3, 8031824 <__swbuf_r+0x12>
 8031820:	f7ff ff10 	bl	8031644 <__sinit>
 8031824:	69a3      	ldr	r3, [r4, #24]
 8031826:	60a3      	str	r3, [r4, #8]
 8031828:	89a3      	ldrh	r3, [r4, #12]
 803182a:	071a      	lsls	r2, r3, #28
 803182c:	d525      	bpl.n	803187a <__swbuf_r+0x68>
 803182e:	6923      	ldr	r3, [r4, #16]
 8031830:	b31b      	cbz	r3, 803187a <__swbuf_r+0x68>
 8031832:	6823      	ldr	r3, [r4, #0]
 8031834:	6922      	ldr	r2, [r4, #16]
 8031836:	1a98      	subs	r0, r3, r2
 8031838:	6963      	ldr	r3, [r4, #20]
 803183a:	b2f6      	uxtb	r6, r6
 803183c:	4283      	cmp	r3, r0
 803183e:	4637      	mov	r7, r6
 8031840:	dc04      	bgt.n	803184c <__swbuf_r+0x3a>
 8031842:	4621      	mov	r1, r4
 8031844:	4628      	mov	r0, r5
 8031846:	f000 fd55 	bl	80322f4 <_fflush_r>
 803184a:	b9e0      	cbnz	r0, 8031886 <__swbuf_r+0x74>
 803184c:	68a3      	ldr	r3, [r4, #8]
 803184e:	3b01      	subs	r3, #1
 8031850:	60a3      	str	r3, [r4, #8]
 8031852:	6823      	ldr	r3, [r4, #0]
 8031854:	1c5a      	adds	r2, r3, #1
 8031856:	6022      	str	r2, [r4, #0]
 8031858:	701e      	strb	r6, [r3, #0]
 803185a:	6962      	ldr	r2, [r4, #20]
 803185c:	1c43      	adds	r3, r0, #1
 803185e:	429a      	cmp	r2, r3
 8031860:	d004      	beq.n	803186c <__swbuf_r+0x5a>
 8031862:	89a3      	ldrh	r3, [r4, #12]
 8031864:	07db      	lsls	r3, r3, #31
 8031866:	d506      	bpl.n	8031876 <__swbuf_r+0x64>
 8031868:	2e0a      	cmp	r6, #10
 803186a:	d104      	bne.n	8031876 <__swbuf_r+0x64>
 803186c:	4621      	mov	r1, r4
 803186e:	4628      	mov	r0, r5
 8031870:	f000 fd40 	bl	80322f4 <_fflush_r>
 8031874:	b938      	cbnz	r0, 8031886 <__swbuf_r+0x74>
 8031876:	4638      	mov	r0, r7
 8031878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803187a:	4621      	mov	r1, r4
 803187c:	4628      	mov	r0, r5
 803187e:	f000 f805 	bl	803188c <__swsetup_r>
 8031882:	2800      	cmp	r0, #0
 8031884:	d0d5      	beq.n	8031832 <__swbuf_r+0x20>
 8031886:	f04f 37ff 	mov.w	r7, #4294967295
 803188a:	e7f4      	b.n	8031876 <__swbuf_r+0x64>

0803188c <__swsetup_r>:
 803188c:	b538      	push	{r3, r4, r5, lr}
 803188e:	4b2a      	ldr	r3, [pc, #168]	; (8031938 <__swsetup_r+0xac>)
 8031890:	4605      	mov	r5, r0
 8031892:	6818      	ldr	r0, [r3, #0]
 8031894:	460c      	mov	r4, r1
 8031896:	b118      	cbz	r0, 80318a0 <__swsetup_r+0x14>
 8031898:	6a03      	ldr	r3, [r0, #32]
 803189a:	b90b      	cbnz	r3, 80318a0 <__swsetup_r+0x14>
 803189c:	f7ff fed2 	bl	8031644 <__sinit>
 80318a0:	89a3      	ldrh	r3, [r4, #12]
 80318a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80318a6:	0718      	lsls	r0, r3, #28
 80318a8:	d422      	bmi.n	80318f0 <__swsetup_r+0x64>
 80318aa:	06d9      	lsls	r1, r3, #27
 80318ac:	d407      	bmi.n	80318be <__swsetup_r+0x32>
 80318ae:	2309      	movs	r3, #9
 80318b0:	602b      	str	r3, [r5, #0]
 80318b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80318b6:	81a3      	strh	r3, [r4, #12]
 80318b8:	f04f 30ff 	mov.w	r0, #4294967295
 80318bc:	e034      	b.n	8031928 <__swsetup_r+0x9c>
 80318be:	0758      	lsls	r0, r3, #29
 80318c0:	d512      	bpl.n	80318e8 <__swsetup_r+0x5c>
 80318c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80318c4:	b141      	cbz	r1, 80318d8 <__swsetup_r+0x4c>
 80318c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80318ca:	4299      	cmp	r1, r3
 80318cc:	d002      	beq.n	80318d4 <__swsetup_r+0x48>
 80318ce:	4628      	mov	r0, r5
 80318d0:	f000 f8be 	bl	8031a50 <_free_r>
 80318d4:	2300      	movs	r3, #0
 80318d6:	6363      	str	r3, [r4, #52]	; 0x34
 80318d8:	89a3      	ldrh	r3, [r4, #12]
 80318da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80318de:	81a3      	strh	r3, [r4, #12]
 80318e0:	2300      	movs	r3, #0
 80318e2:	6063      	str	r3, [r4, #4]
 80318e4:	6923      	ldr	r3, [r4, #16]
 80318e6:	6023      	str	r3, [r4, #0]
 80318e8:	89a3      	ldrh	r3, [r4, #12]
 80318ea:	f043 0308 	orr.w	r3, r3, #8
 80318ee:	81a3      	strh	r3, [r4, #12]
 80318f0:	6923      	ldr	r3, [r4, #16]
 80318f2:	b94b      	cbnz	r3, 8031908 <__swsetup_r+0x7c>
 80318f4:	89a3      	ldrh	r3, [r4, #12]
 80318f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80318fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80318fe:	d003      	beq.n	8031908 <__swsetup_r+0x7c>
 8031900:	4621      	mov	r1, r4
 8031902:	4628      	mov	r0, r5
 8031904:	f000 fd44 	bl	8032390 <__smakebuf_r>
 8031908:	89a0      	ldrh	r0, [r4, #12]
 803190a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803190e:	f010 0301 	ands.w	r3, r0, #1
 8031912:	d00a      	beq.n	803192a <__swsetup_r+0x9e>
 8031914:	2300      	movs	r3, #0
 8031916:	60a3      	str	r3, [r4, #8]
 8031918:	6963      	ldr	r3, [r4, #20]
 803191a:	425b      	negs	r3, r3
 803191c:	61a3      	str	r3, [r4, #24]
 803191e:	6923      	ldr	r3, [r4, #16]
 8031920:	b943      	cbnz	r3, 8031934 <__swsetup_r+0xa8>
 8031922:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8031926:	d1c4      	bne.n	80318b2 <__swsetup_r+0x26>
 8031928:	bd38      	pop	{r3, r4, r5, pc}
 803192a:	0781      	lsls	r1, r0, #30
 803192c:	bf58      	it	pl
 803192e:	6963      	ldrpl	r3, [r4, #20]
 8031930:	60a3      	str	r3, [r4, #8]
 8031932:	e7f4      	b.n	803191e <__swsetup_r+0x92>
 8031934:	2000      	movs	r0, #0
 8031936:	e7f7      	b.n	8031928 <__swsetup_r+0x9c>
 8031938:	200002d0 	.word	0x200002d0

0803193c <memset>:
 803193c:	4402      	add	r2, r0
 803193e:	4603      	mov	r3, r0
 8031940:	4293      	cmp	r3, r2
 8031942:	d100      	bne.n	8031946 <memset+0xa>
 8031944:	4770      	bx	lr
 8031946:	f803 1b01 	strb.w	r1, [r3], #1
 803194a:	e7f9      	b.n	8031940 <memset+0x4>

0803194c <_close_r>:
 803194c:	b538      	push	{r3, r4, r5, lr}
 803194e:	4d06      	ldr	r5, [pc, #24]	; (8031968 <_close_r+0x1c>)
 8031950:	2300      	movs	r3, #0
 8031952:	4604      	mov	r4, r0
 8031954:	4608      	mov	r0, r1
 8031956:	602b      	str	r3, [r5, #0]
 8031958:	f7f5 fd68 	bl	802742c <_close>
 803195c:	1c43      	adds	r3, r0, #1
 803195e:	d102      	bne.n	8031966 <_close_r+0x1a>
 8031960:	682b      	ldr	r3, [r5, #0]
 8031962:	b103      	cbz	r3, 8031966 <_close_r+0x1a>
 8031964:	6023      	str	r3, [r4, #0]
 8031966:	bd38      	pop	{r3, r4, r5, pc}
 8031968:	2000874c 	.word	0x2000874c

0803196c <_lseek_r>:
 803196c:	b538      	push	{r3, r4, r5, lr}
 803196e:	4d07      	ldr	r5, [pc, #28]	; (803198c <_lseek_r+0x20>)
 8031970:	4604      	mov	r4, r0
 8031972:	4608      	mov	r0, r1
 8031974:	4611      	mov	r1, r2
 8031976:	2200      	movs	r2, #0
 8031978:	602a      	str	r2, [r5, #0]
 803197a:	461a      	mov	r2, r3
 803197c:	f7f5 fd7d 	bl	802747a <_lseek>
 8031980:	1c43      	adds	r3, r0, #1
 8031982:	d102      	bne.n	803198a <_lseek_r+0x1e>
 8031984:	682b      	ldr	r3, [r5, #0]
 8031986:	b103      	cbz	r3, 803198a <_lseek_r+0x1e>
 8031988:	6023      	str	r3, [r4, #0]
 803198a:	bd38      	pop	{r3, r4, r5, pc}
 803198c:	2000874c 	.word	0x2000874c

08031990 <_read_r>:
 8031990:	b538      	push	{r3, r4, r5, lr}
 8031992:	4d07      	ldr	r5, [pc, #28]	; (80319b0 <_read_r+0x20>)
 8031994:	4604      	mov	r4, r0
 8031996:	4608      	mov	r0, r1
 8031998:	4611      	mov	r1, r2
 803199a:	2200      	movs	r2, #0
 803199c:	602a      	str	r2, [r5, #0]
 803199e:	461a      	mov	r2, r3
 80319a0:	f7f5 fd27 	bl	80273f2 <_read>
 80319a4:	1c43      	adds	r3, r0, #1
 80319a6:	d102      	bne.n	80319ae <_read_r+0x1e>
 80319a8:	682b      	ldr	r3, [r5, #0]
 80319aa:	b103      	cbz	r3, 80319ae <_read_r+0x1e>
 80319ac:	6023      	str	r3, [r4, #0]
 80319ae:	bd38      	pop	{r3, r4, r5, pc}
 80319b0:	2000874c 	.word	0x2000874c

080319b4 <_write_r>:
 80319b4:	b538      	push	{r3, r4, r5, lr}
 80319b6:	4d07      	ldr	r5, [pc, #28]	; (80319d4 <_write_r+0x20>)
 80319b8:	4604      	mov	r4, r0
 80319ba:	4608      	mov	r0, r1
 80319bc:	4611      	mov	r1, r2
 80319be:	2200      	movs	r2, #0
 80319c0:	602a      	str	r2, [r5, #0]
 80319c2:	461a      	mov	r2, r3
 80319c4:	f7f1 ff62 	bl	802388c <_write>
 80319c8:	1c43      	adds	r3, r0, #1
 80319ca:	d102      	bne.n	80319d2 <_write_r+0x1e>
 80319cc:	682b      	ldr	r3, [r5, #0]
 80319ce:	b103      	cbz	r3, 80319d2 <_write_r+0x1e>
 80319d0:	6023      	str	r3, [r4, #0]
 80319d2:	bd38      	pop	{r3, r4, r5, pc}
 80319d4:	2000874c 	.word	0x2000874c

080319d8 <__errno>:
 80319d8:	4b01      	ldr	r3, [pc, #4]	; (80319e0 <__errno+0x8>)
 80319da:	6818      	ldr	r0, [r3, #0]
 80319dc:	4770      	bx	lr
 80319de:	bf00      	nop
 80319e0:	200002d0 	.word	0x200002d0

080319e4 <__libc_init_array>:
 80319e4:	b570      	push	{r4, r5, r6, lr}
 80319e6:	4d0d      	ldr	r5, [pc, #52]	; (8031a1c <__libc_init_array+0x38>)
 80319e8:	4c0d      	ldr	r4, [pc, #52]	; (8031a20 <__libc_init_array+0x3c>)
 80319ea:	1b64      	subs	r4, r4, r5
 80319ec:	10a4      	asrs	r4, r4, #2
 80319ee:	2600      	movs	r6, #0
 80319f0:	42a6      	cmp	r6, r4
 80319f2:	d109      	bne.n	8031a08 <__libc_init_array+0x24>
 80319f4:	4d0b      	ldr	r5, [pc, #44]	; (8031a24 <__libc_init_array+0x40>)
 80319f6:	4c0c      	ldr	r4, [pc, #48]	; (8031a28 <__libc_init_array+0x44>)
 80319f8:	f000 fd38 	bl	803246c <_init>
 80319fc:	1b64      	subs	r4, r4, r5
 80319fe:	10a4      	asrs	r4, r4, #2
 8031a00:	2600      	movs	r6, #0
 8031a02:	42a6      	cmp	r6, r4
 8031a04:	d105      	bne.n	8031a12 <__libc_init_array+0x2e>
 8031a06:	bd70      	pop	{r4, r5, r6, pc}
 8031a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a0c:	4798      	blx	r3
 8031a0e:	3601      	adds	r6, #1
 8031a10:	e7ee      	b.n	80319f0 <__libc_init_array+0xc>
 8031a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a16:	4798      	blx	r3
 8031a18:	3601      	adds	r6, #1
 8031a1a:	e7f2      	b.n	8031a02 <__libc_init_array+0x1e>
 8031a1c:	08033390 	.word	0x08033390
 8031a20:	08033390 	.word	0x08033390
 8031a24:	08033390 	.word	0x08033390
 8031a28:	08033394 	.word	0x08033394

08031a2c <__retarget_lock_init_recursive>:
 8031a2c:	4770      	bx	lr

08031a2e <__retarget_lock_acquire_recursive>:
 8031a2e:	4770      	bx	lr

08031a30 <__retarget_lock_release_recursive>:
 8031a30:	4770      	bx	lr

08031a32 <memcpy>:
 8031a32:	440a      	add	r2, r1
 8031a34:	4291      	cmp	r1, r2
 8031a36:	f100 33ff 	add.w	r3, r0, #4294967295
 8031a3a:	d100      	bne.n	8031a3e <memcpy+0xc>
 8031a3c:	4770      	bx	lr
 8031a3e:	b510      	push	{r4, lr}
 8031a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8031a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8031a48:	4291      	cmp	r1, r2
 8031a4a:	d1f9      	bne.n	8031a40 <memcpy+0xe>
 8031a4c:	bd10      	pop	{r4, pc}
	...

08031a50 <_free_r>:
 8031a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8031a52:	2900      	cmp	r1, #0
 8031a54:	d044      	beq.n	8031ae0 <_free_r+0x90>
 8031a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a5a:	9001      	str	r0, [sp, #4]
 8031a5c:	2b00      	cmp	r3, #0
 8031a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8031a62:	bfb8      	it	lt
 8031a64:	18e4      	addlt	r4, r4, r3
 8031a66:	f000 f8df 	bl	8031c28 <__malloc_lock>
 8031a6a:	4a1e      	ldr	r2, [pc, #120]	; (8031ae4 <_free_r+0x94>)
 8031a6c:	9801      	ldr	r0, [sp, #4]
 8031a6e:	6813      	ldr	r3, [r2, #0]
 8031a70:	b933      	cbnz	r3, 8031a80 <_free_r+0x30>
 8031a72:	6063      	str	r3, [r4, #4]
 8031a74:	6014      	str	r4, [r2, #0]
 8031a76:	b003      	add	sp, #12
 8031a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8031a7c:	f000 b8da 	b.w	8031c34 <__malloc_unlock>
 8031a80:	42a3      	cmp	r3, r4
 8031a82:	d908      	bls.n	8031a96 <_free_r+0x46>
 8031a84:	6825      	ldr	r5, [r4, #0]
 8031a86:	1961      	adds	r1, r4, r5
 8031a88:	428b      	cmp	r3, r1
 8031a8a:	bf01      	itttt	eq
 8031a8c:	6819      	ldreq	r1, [r3, #0]
 8031a8e:	685b      	ldreq	r3, [r3, #4]
 8031a90:	1949      	addeq	r1, r1, r5
 8031a92:	6021      	streq	r1, [r4, #0]
 8031a94:	e7ed      	b.n	8031a72 <_free_r+0x22>
 8031a96:	461a      	mov	r2, r3
 8031a98:	685b      	ldr	r3, [r3, #4]
 8031a9a:	b10b      	cbz	r3, 8031aa0 <_free_r+0x50>
 8031a9c:	42a3      	cmp	r3, r4
 8031a9e:	d9fa      	bls.n	8031a96 <_free_r+0x46>
 8031aa0:	6811      	ldr	r1, [r2, #0]
 8031aa2:	1855      	adds	r5, r2, r1
 8031aa4:	42a5      	cmp	r5, r4
 8031aa6:	d10b      	bne.n	8031ac0 <_free_r+0x70>
 8031aa8:	6824      	ldr	r4, [r4, #0]
 8031aaa:	4421      	add	r1, r4
 8031aac:	1854      	adds	r4, r2, r1
 8031aae:	42a3      	cmp	r3, r4
 8031ab0:	6011      	str	r1, [r2, #0]
 8031ab2:	d1e0      	bne.n	8031a76 <_free_r+0x26>
 8031ab4:	681c      	ldr	r4, [r3, #0]
 8031ab6:	685b      	ldr	r3, [r3, #4]
 8031ab8:	6053      	str	r3, [r2, #4]
 8031aba:	440c      	add	r4, r1
 8031abc:	6014      	str	r4, [r2, #0]
 8031abe:	e7da      	b.n	8031a76 <_free_r+0x26>
 8031ac0:	d902      	bls.n	8031ac8 <_free_r+0x78>
 8031ac2:	230c      	movs	r3, #12
 8031ac4:	6003      	str	r3, [r0, #0]
 8031ac6:	e7d6      	b.n	8031a76 <_free_r+0x26>
 8031ac8:	6825      	ldr	r5, [r4, #0]
 8031aca:	1961      	adds	r1, r4, r5
 8031acc:	428b      	cmp	r3, r1
 8031ace:	bf04      	itt	eq
 8031ad0:	6819      	ldreq	r1, [r3, #0]
 8031ad2:	685b      	ldreq	r3, [r3, #4]
 8031ad4:	6063      	str	r3, [r4, #4]
 8031ad6:	bf04      	itt	eq
 8031ad8:	1949      	addeq	r1, r1, r5
 8031ada:	6021      	streq	r1, [r4, #0]
 8031adc:	6054      	str	r4, [r2, #4]
 8031ade:	e7ca      	b.n	8031a76 <_free_r+0x26>
 8031ae0:	b003      	add	sp, #12
 8031ae2:	bd30      	pop	{r4, r5, pc}
 8031ae4:	20008754 	.word	0x20008754

08031ae8 <sbrk_aligned>:
 8031ae8:	b570      	push	{r4, r5, r6, lr}
 8031aea:	4e0e      	ldr	r6, [pc, #56]	; (8031b24 <sbrk_aligned+0x3c>)
 8031aec:	460c      	mov	r4, r1
 8031aee:	6831      	ldr	r1, [r6, #0]
 8031af0:	4605      	mov	r5, r0
 8031af2:	b911      	cbnz	r1, 8031afa <sbrk_aligned+0x12>
 8031af4:	f000 fcaa 	bl	803244c <_sbrk_r>
 8031af8:	6030      	str	r0, [r6, #0]
 8031afa:	4621      	mov	r1, r4
 8031afc:	4628      	mov	r0, r5
 8031afe:	f000 fca5 	bl	803244c <_sbrk_r>
 8031b02:	1c43      	adds	r3, r0, #1
 8031b04:	d00a      	beq.n	8031b1c <sbrk_aligned+0x34>
 8031b06:	1cc4      	adds	r4, r0, #3
 8031b08:	f024 0403 	bic.w	r4, r4, #3
 8031b0c:	42a0      	cmp	r0, r4
 8031b0e:	d007      	beq.n	8031b20 <sbrk_aligned+0x38>
 8031b10:	1a21      	subs	r1, r4, r0
 8031b12:	4628      	mov	r0, r5
 8031b14:	f000 fc9a 	bl	803244c <_sbrk_r>
 8031b18:	3001      	adds	r0, #1
 8031b1a:	d101      	bne.n	8031b20 <sbrk_aligned+0x38>
 8031b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8031b20:	4620      	mov	r0, r4
 8031b22:	bd70      	pop	{r4, r5, r6, pc}
 8031b24:	20008758 	.word	0x20008758

08031b28 <_malloc_r>:
 8031b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8031b2c:	1ccd      	adds	r5, r1, #3
 8031b2e:	f025 0503 	bic.w	r5, r5, #3
 8031b32:	3508      	adds	r5, #8
 8031b34:	2d0c      	cmp	r5, #12
 8031b36:	bf38      	it	cc
 8031b38:	250c      	movcc	r5, #12
 8031b3a:	2d00      	cmp	r5, #0
 8031b3c:	4607      	mov	r7, r0
 8031b3e:	db01      	blt.n	8031b44 <_malloc_r+0x1c>
 8031b40:	42a9      	cmp	r1, r5
 8031b42:	d905      	bls.n	8031b50 <_malloc_r+0x28>
 8031b44:	230c      	movs	r3, #12
 8031b46:	603b      	str	r3, [r7, #0]
 8031b48:	2600      	movs	r6, #0
 8031b4a:	4630      	mov	r0, r6
 8031b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8031b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8031c24 <_malloc_r+0xfc>
 8031b54:	f000 f868 	bl	8031c28 <__malloc_lock>
 8031b58:	f8d8 3000 	ldr.w	r3, [r8]
 8031b5c:	461c      	mov	r4, r3
 8031b5e:	bb5c      	cbnz	r4, 8031bb8 <_malloc_r+0x90>
 8031b60:	4629      	mov	r1, r5
 8031b62:	4638      	mov	r0, r7
 8031b64:	f7ff ffc0 	bl	8031ae8 <sbrk_aligned>
 8031b68:	1c43      	adds	r3, r0, #1
 8031b6a:	4604      	mov	r4, r0
 8031b6c:	d155      	bne.n	8031c1a <_malloc_r+0xf2>
 8031b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8031b72:	4626      	mov	r6, r4
 8031b74:	2e00      	cmp	r6, #0
 8031b76:	d145      	bne.n	8031c04 <_malloc_r+0xdc>
 8031b78:	2c00      	cmp	r4, #0
 8031b7a:	d048      	beq.n	8031c0e <_malloc_r+0xe6>
 8031b7c:	6823      	ldr	r3, [r4, #0]
 8031b7e:	4631      	mov	r1, r6
 8031b80:	4638      	mov	r0, r7
 8031b82:	eb04 0903 	add.w	r9, r4, r3
 8031b86:	f000 fc61 	bl	803244c <_sbrk_r>
 8031b8a:	4581      	cmp	r9, r0
 8031b8c:	d13f      	bne.n	8031c0e <_malloc_r+0xe6>
 8031b8e:	6821      	ldr	r1, [r4, #0]
 8031b90:	1a6d      	subs	r5, r5, r1
 8031b92:	4629      	mov	r1, r5
 8031b94:	4638      	mov	r0, r7
 8031b96:	f7ff ffa7 	bl	8031ae8 <sbrk_aligned>
 8031b9a:	3001      	adds	r0, #1
 8031b9c:	d037      	beq.n	8031c0e <_malloc_r+0xe6>
 8031b9e:	6823      	ldr	r3, [r4, #0]
 8031ba0:	442b      	add	r3, r5
 8031ba2:	6023      	str	r3, [r4, #0]
 8031ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8031ba8:	2b00      	cmp	r3, #0
 8031baa:	d038      	beq.n	8031c1e <_malloc_r+0xf6>
 8031bac:	685a      	ldr	r2, [r3, #4]
 8031bae:	42a2      	cmp	r2, r4
 8031bb0:	d12b      	bne.n	8031c0a <_malloc_r+0xe2>
 8031bb2:	2200      	movs	r2, #0
 8031bb4:	605a      	str	r2, [r3, #4]
 8031bb6:	e00f      	b.n	8031bd8 <_malloc_r+0xb0>
 8031bb8:	6822      	ldr	r2, [r4, #0]
 8031bba:	1b52      	subs	r2, r2, r5
 8031bbc:	d41f      	bmi.n	8031bfe <_malloc_r+0xd6>
 8031bbe:	2a0b      	cmp	r2, #11
 8031bc0:	d917      	bls.n	8031bf2 <_malloc_r+0xca>
 8031bc2:	1961      	adds	r1, r4, r5
 8031bc4:	42a3      	cmp	r3, r4
 8031bc6:	6025      	str	r5, [r4, #0]
 8031bc8:	bf18      	it	ne
 8031bca:	6059      	strne	r1, [r3, #4]
 8031bcc:	6863      	ldr	r3, [r4, #4]
 8031bce:	bf08      	it	eq
 8031bd0:	f8c8 1000 	streq.w	r1, [r8]
 8031bd4:	5162      	str	r2, [r4, r5]
 8031bd6:	604b      	str	r3, [r1, #4]
 8031bd8:	4638      	mov	r0, r7
 8031bda:	f104 060b 	add.w	r6, r4, #11
 8031bde:	f000 f829 	bl	8031c34 <__malloc_unlock>
 8031be2:	f026 0607 	bic.w	r6, r6, #7
 8031be6:	1d23      	adds	r3, r4, #4
 8031be8:	1af2      	subs	r2, r6, r3
 8031bea:	d0ae      	beq.n	8031b4a <_malloc_r+0x22>
 8031bec:	1b9b      	subs	r3, r3, r6
 8031bee:	50a3      	str	r3, [r4, r2]
 8031bf0:	e7ab      	b.n	8031b4a <_malloc_r+0x22>
 8031bf2:	42a3      	cmp	r3, r4
 8031bf4:	6862      	ldr	r2, [r4, #4]
 8031bf6:	d1dd      	bne.n	8031bb4 <_malloc_r+0x8c>
 8031bf8:	f8c8 2000 	str.w	r2, [r8]
 8031bfc:	e7ec      	b.n	8031bd8 <_malloc_r+0xb0>
 8031bfe:	4623      	mov	r3, r4
 8031c00:	6864      	ldr	r4, [r4, #4]
 8031c02:	e7ac      	b.n	8031b5e <_malloc_r+0x36>
 8031c04:	4634      	mov	r4, r6
 8031c06:	6876      	ldr	r6, [r6, #4]
 8031c08:	e7b4      	b.n	8031b74 <_malloc_r+0x4c>
 8031c0a:	4613      	mov	r3, r2
 8031c0c:	e7cc      	b.n	8031ba8 <_malloc_r+0x80>
 8031c0e:	230c      	movs	r3, #12
 8031c10:	603b      	str	r3, [r7, #0]
 8031c12:	4638      	mov	r0, r7
 8031c14:	f000 f80e 	bl	8031c34 <__malloc_unlock>
 8031c18:	e797      	b.n	8031b4a <_malloc_r+0x22>
 8031c1a:	6025      	str	r5, [r4, #0]
 8031c1c:	e7dc      	b.n	8031bd8 <_malloc_r+0xb0>
 8031c1e:	605b      	str	r3, [r3, #4]
 8031c20:	deff      	udf	#255	; 0xff
 8031c22:	bf00      	nop
 8031c24:	20008754 	.word	0x20008754

08031c28 <__malloc_lock>:
 8031c28:	4801      	ldr	r0, [pc, #4]	; (8031c30 <__malloc_lock+0x8>)
 8031c2a:	f7ff bf00 	b.w	8031a2e <__retarget_lock_acquire_recursive>
 8031c2e:	bf00      	nop
 8031c30:	20008750 	.word	0x20008750

08031c34 <__malloc_unlock>:
 8031c34:	4801      	ldr	r0, [pc, #4]	; (8031c3c <__malloc_unlock+0x8>)
 8031c36:	f7ff befb 	b.w	8031a30 <__retarget_lock_release_recursive>
 8031c3a:	bf00      	nop
 8031c3c:	20008750 	.word	0x20008750

08031c40 <__sfputc_r>:
 8031c40:	6893      	ldr	r3, [r2, #8]
 8031c42:	3b01      	subs	r3, #1
 8031c44:	2b00      	cmp	r3, #0
 8031c46:	b410      	push	{r4}
 8031c48:	6093      	str	r3, [r2, #8]
 8031c4a:	da08      	bge.n	8031c5e <__sfputc_r+0x1e>
 8031c4c:	6994      	ldr	r4, [r2, #24]
 8031c4e:	42a3      	cmp	r3, r4
 8031c50:	db01      	blt.n	8031c56 <__sfputc_r+0x16>
 8031c52:	290a      	cmp	r1, #10
 8031c54:	d103      	bne.n	8031c5e <__sfputc_r+0x1e>
 8031c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031c5a:	f7ff bdda 	b.w	8031812 <__swbuf_r>
 8031c5e:	6813      	ldr	r3, [r2, #0]
 8031c60:	1c58      	adds	r0, r3, #1
 8031c62:	6010      	str	r0, [r2, #0]
 8031c64:	7019      	strb	r1, [r3, #0]
 8031c66:	4608      	mov	r0, r1
 8031c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8031c6c:	4770      	bx	lr

08031c6e <__sfputs_r>:
 8031c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031c70:	4606      	mov	r6, r0
 8031c72:	460f      	mov	r7, r1
 8031c74:	4614      	mov	r4, r2
 8031c76:	18d5      	adds	r5, r2, r3
 8031c78:	42ac      	cmp	r4, r5
 8031c7a:	d101      	bne.n	8031c80 <__sfputs_r+0x12>
 8031c7c:	2000      	movs	r0, #0
 8031c7e:	e007      	b.n	8031c90 <__sfputs_r+0x22>
 8031c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031c84:	463a      	mov	r2, r7
 8031c86:	4630      	mov	r0, r6
 8031c88:	f7ff ffda 	bl	8031c40 <__sfputc_r>
 8031c8c:	1c43      	adds	r3, r0, #1
 8031c8e:	d1f3      	bne.n	8031c78 <__sfputs_r+0xa>
 8031c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08031c94 <_vfiprintf_r>:
 8031c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031c98:	460d      	mov	r5, r1
 8031c9a:	b09d      	sub	sp, #116	; 0x74
 8031c9c:	4614      	mov	r4, r2
 8031c9e:	4698      	mov	r8, r3
 8031ca0:	4606      	mov	r6, r0
 8031ca2:	b118      	cbz	r0, 8031cac <_vfiprintf_r+0x18>
 8031ca4:	6a03      	ldr	r3, [r0, #32]
 8031ca6:	b90b      	cbnz	r3, 8031cac <_vfiprintf_r+0x18>
 8031ca8:	f7ff fccc 	bl	8031644 <__sinit>
 8031cac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031cae:	07d9      	lsls	r1, r3, #31
 8031cb0:	d405      	bmi.n	8031cbe <_vfiprintf_r+0x2a>
 8031cb2:	89ab      	ldrh	r3, [r5, #12]
 8031cb4:	059a      	lsls	r2, r3, #22
 8031cb6:	d402      	bmi.n	8031cbe <_vfiprintf_r+0x2a>
 8031cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031cba:	f7ff feb8 	bl	8031a2e <__retarget_lock_acquire_recursive>
 8031cbe:	89ab      	ldrh	r3, [r5, #12]
 8031cc0:	071b      	lsls	r3, r3, #28
 8031cc2:	d501      	bpl.n	8031cc8 <_vfiprintf_r+0x34>
 8031cc4:	692b      	ldr	r3, [r5, #16]
 8031cc6:	b99b      	cbnz	r3, 8031cf0 <_vfiprintf_r+0x5c>
 8031cc8:	4629      	mov	r1, r5
 8031cca:	4630      	mov	r0, r6
 8031ccc:	f7ff fdde 	bl	803188c <__swsetup_r>
 8031cd0:	b170      	cbz	r0, 8031cf0 <_vfiprintf_r+0x5c>
 8031cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031cd4:	07dc      	lsls	r4, r3, #31
 8031cd6:	d504      	bpl.n	8031ce2 <_vfiprintf_r+0x4e>
 8031cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8031cdc:	b01d      	add	sp, #116	; 0x74
 8031cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031ce2:	89ab      	ldrh	r3, [r5, #12]
 8031ce4:	0598      	lsls	r0, r3, #22
 8031ce6:	d4f7      	bmi.n	8031cd8 <_vfiprintf_r+0x44>
 8031ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031cea:	f7ff fea1 	bl	8031a30 <__retarget_lock_release_recursive>
 8031cee:	e7f3      	b.n	8031cd8 <_vfiprintf_r+0x44>
 8031cf0:	2300      	movs	r3, #0
 8031cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8031cf4:	2320      	movs	r3, #32
 8031cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8031cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8031cfe:	2330      	movs	r3, #48	; 0x30
 8031d00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8031eb4 <_vfiprintf_r+0x220>
 8031d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8031d08:	f04f 0901 	mov.w	r9, #1
 8031d0c:	4623      	mov	r3, r4
 8031d0e:	469a      	mov	sl, r3
 8031d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031d14:	b10a      	cbz	r2, 8031d1a <_vfiprintf_r+0x86>
 8031d16:	2a25      	cmp	r2, #37	; 0x25
 8031d18:	d1f9      	bne.n	8031d0e <_vfiprintf_r+0x7a>
 8031d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8031d1e:	d00b      	beq.n	8031d38 <_vfiprintf_r+0xa4>
 8031d20:	465b      	mov	r3, fp
 8031d22:	4622      	mov	r2, r4
 8031d24:	4629      	mov	r1, r5
 8031d26:	4630      	mov	r0, r6
 8031d28:	f7ff ffa1 	bl	8031c6e <__sfputs_r>
 8031d2c:	3001      	adds	r0, #1
 8031d2e:	f000 80a9 	beq.w	8031e84 <_vfiprintf_r+0x1f0>
 8031d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8031d34:	445a      	add	r2, fp
 8031d36:	9209      	str	r2, [sp, #36]	; 0x24
 8031d38:	f89a 3000 	ldrb.w	r3, [sl]
 8031d3c:	2b00      	cmp	r3, #0
 8031d3e:	f000 80a1 	beq.w	8031e84 <_vfiprintf_r+0x1f0>
 8031d42:	2300      	movs	r3, #0
 8031d44:	f04f 32ff 	mov.w	r2, #4294967295
 8031d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8031d4c:	f10a 0a01 	add.w	sl, sl, #1
 8031d50:	9304      	str	r3, [sp, #16]
 8031d52:	9307      	str	r3, [sp, #28]
 8031d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8031d58:	931a      	str	r3, [sp, #104]	; 0x68
 8031d5a:	4654      	mov	r4, sl
 8031d5c:	2205      	movs	r2, #5
 8031d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031d62:	4854      	ldr	r0, [pc, #336]	; (8031eb4 <_vfiprintf_r+0x220>)
 8031d64:	f7f0 fa34 	bl	80221d0 <memchr>
 8031d68:	9a04      	ldr	r2, [sp, #16]
 8031d6a:	b9d8      	cbnz	r0, 8031da4 <_vfiprintf_r+0x110>
 8031d6c:	06d1      	lsls	r1, r2, #27
 8031d6e:	bf44      	itt	mi
 8031d70:	2320      	movmi	r3, #32
 8031d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031d76:	0713      	lsls	r3, r2, #28
 8031d78:	bf44      	itt	mi
 8031d7a:	232b      	movmi	r3, #43	; 0x2b
 8031d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8031d80:	f89a 3000 	ldrb.w	r3, [sl]
 8031d84:	2b2a      	cmp	r3, #42	; 0x2a
 8031d86:	d015      	beq.n	8031db4 <_vfiprintf_r+0x120>
 8031d88:	9a07      	ldr	r2, [sp, #28]
 8031d8a:	4654      	mov	r4, sl
 8031d8c:	2000      	movs	r0, #0
 8031d8e:	f04f 0c0a 	mov.w	ip, #10
 8031d92:	4621      	mov	r1, r4
 8031d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8031d98:	3b30      	subs	r3, #48	; 0x30
 8031d9a:	2b09      	cmp	r3, #9
 8031d9c:	d94d      	bls.n	8031e3a <_vfiprintf_r+0x1a6>
 8031d9e:	b1b0      	cbz	r0, 8031dce <_vfiprintf_r+0x13a>
 8031da0:	9207      	str	r2, [sp, #28]
 8031da2:	e014      	b.n	8031dce <_vfiprintf_r+0x13a>
 8031da4:	eba0 0308 	sub.w	r3, r0, r8
 8031da8:	fa09 f303 	lsl.w	r3, r9, r3
 8031dac:	4313      	orrs	r3, r2
 8031dae:	9304      	str	r3, [sp, #16]
 8031db0:	46a2      	mov	sl, r4
 8031db2:	e7d2      	b.n	8031d5a <_vfiprintf_r+0xc6>
 8031db4:	9b03      	ldr	r3, [sp, #12]
 8031db6:	1d19      	adds	r1, r3, #4
 8031db8:	681b      	ldr	r3, [r3, #0]
 8031dba:	9103      	str	r1, [sp, #12]
 8031dbc:	2b00      	cmp	r3, #0
 8031dbe:	bfbb      	ittet	lt
 8031dc0:	425b      	neglt	r3, r3
 8031dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8031dc6:	9307      	strge	r3, [sp, #28]
 8031dc8:	9307      	strlt	r3, [sp, #28]
 8031dca:	bfb8      	it	lt
 8031dcc:	9204      	strlt	r2, [sp, #16]
 8031dce:	7823      	ldrb	r3, [r4, #0]
 8031dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8031dd2:	d10c      	bne.n	8031dee <_vfiprintf_r+0x15a>
 8031dd4:	7863      	ldrb	r3, [r4, #1]
 8031dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8031dd8:	d134      	bne.n	8031e44 <_vfiprintf_r+0x1b0>
 8031dda:	9b03      	ldr	r3, [sp, #12]
 8031ddc:	1d1a      	adds	r2, r3, #4
 8031dde:	681b      	ldr	r3, [r3, #0]
 8031de0:	9203      	str	r2, [sp, #12]
 8031de2:	2b00      	cmp	r3, #0
 8031de4:	bfb8      	it	lt
 8031de6:	f04f 33ff 	movlt.w	r3, #4294967295
 8031dea:	3402      	adds	r4, #2
 8031dec:	9305      	str	r3, [sp, #20]
 8031dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8031ec4 <_vfiprintf_r+0x230>
 8031df2:	7821      	ldrb	r1, [r4, #0]
 8031df4:	2203      	movs	r2, #3
 8031df6:	4650      	mov	r0, sl
 8031df8:	f7f0 f9ea 	bl	80221d0 <memchr>
 8031dfc:	b138      	cbz	r0, 8031e0e <_vfiprintf_r+0x17a>
 8031dfe:	9b04      	ldr	r3, [sp, #16]
 8031e00:	eba0 000a 	sub.w	r0, r0, sl
 8031e04:	2240      	movs	r2, #64	; 0x40
 8031e06:	4082      	lsls	r2, r0
 8031e08:	4313      	orrs	r3, r2
 8031e0a:	3401      	adds	r4, #1
 8031e0c:	9304      	str	r3, [sp, #16]
 8031e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8031e12:	4829      	ldr	r0, [pc, #164]	; (8031eb8 <_vfiprintf_r+0x224>)
 8031e14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8031e18:	2206      	movs	r2, #6
 8031e1a:	f7f0 f9d9 	bl	80221d0 <memchr>
 8031e1e:	2800      	cmp	r0, #0
 8031e20:	d03f      	beq.n	8031ea2 <_vfiprintf_r+0x20e>
 8031e22:	4b26      	ldr	r3, [pc, #152]	; (8031ebc <_vfiprintf_r+0x228>)
 8031e24:	bb1b      	cbnz	r3, 8031e6e <_vfiprintf_r+0x1da>
 8031e26:	9b03      	ldr	r3, [sp, #12]
 8031e28:	3307      	adds	r3, #7
 8031e2a:	f023 0307 	bic.w	r3, r3, #7
 8031e2e:	3308      	adds	r3, #8
 8031e30:	9303      	str	r3, [sp, #12]
 8031e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8031e34:	443b      	add	r3, r7
 8031e36:	9309      	str	r3, [sp, #36]	; 0x24
 8031e38:	e768      	b.n	8031d0c <_vfiprintf_r+0x78>
 8031e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8031e3e:	460c      	mov	r4, r1
 8031e40:	2001      	movs	r0, #1
 8031e42:	e7a6      	b.n	8031d92 <_vfiprintf_r+0xfe>
 8031e44:	2300      	movs	r3, #0
 8031e46:	3401      	adds	r4, #1
 8031e48:	9305      	str	r3, [sp, #20]
 8031e4a:	4619      	mov	r1, r3
 8031e4c:	f04f 0c0a 	mov.w	ip, #10
 8031e50:	4620      	mov	r0, r4
 8031e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8031e56:	3a30      	subs	r2, #48	; 0x30
 8031e58:	2a09      	cmp	r2, #9
 8031e5a:	d903      	bls.n	8031e64 <_vfiprintf_r+0x1d0>
 8031e5c:	2b00      	cmp	r3, #0
 8031e5e:	d0c6      	beq.n	8031dee <_vfiprintf_r+0x15a>
 8031e60:	9105      	str	r1, [sp, #20]
 8031e62:	e7c4      	b.n	8031dee <_vfiprintf_r+0x15a>
 8031e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8031e68:	4604      	mov	r4, r0
 8031e6a:	2301      	movs	r3, #1
 8031e6c:	e7f0      	b.n	8031e50 <_vfiprintf_r+0x1bc>
 8031e6e:	ab03      	add	r3, sp, #12
 8031e70:	9300      	str	r3, [sp, #0]
 8031e72:	462a      	mov	r2, r5
 8031e74:	4b12      	ldr	r3, [pc, #72]	; (8031ec0 <_vfiprintf_r+0x22c>)
 8031e76:	a904      	add	r1, sp, #16
 8031e78:	4630      	mov	r0, r6
 8031e7a:	f3af 8000 	nop.w
 8031e7e:	4607      	mov	r7, r0
 8031e80:	1c78      	adds	r0, r7, #1
 8031e82:	d1d6      	bne.n	8031e32 <_vfiprintf_r+0x19e>
 8031e84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8031e86:	07d9      	lsls	r1, r3, #31
 8031e88:	d405      	bmi.n	8031e96 <_vfiprintf_r+0x202>
 8031e8a:	89ab      	ldrh	r3, [r5, #12]
 8031e8c:	059a      	lsls	r2, r3, #22
 8031e8e:	d402      	bmi.n	8031e96 <_vfiprintf_r+0x202>
 8031e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8031e92:	f7ff fdcd 	bl	8031a30 <__retarget_lock_release_recursive>
 8031e96:	89ab      	ldrh	r3, [r5, #12]
 8031e98:	065b      	lsls	r3, r3, #25
 8031e9a:	f53f af1d 	bmi.w	8031cd8 <_vfiprintf_r+0x44>
 8031e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8031ea0:	e71c      	b.n	8031cdc <_vfiprintf_r+0x48>
 8031ea2:	ab03      	add	r3, sp, #12
 8031ea4:	9300      	str	r3, [sp, #0]
 8031ea6:	462a      	mov	r2, r5
 8031ea8:	4b05      	ldr	r3, [pc, #20]	; (8031ec0 <_vfiprintf_r+0x22c>)
 8031eaa:	a904      	add	r1, sp, #16
 8031eac:	4630      	mov	r0, r6
 8031eae:	f000 f879 	bl	8031fa4 <_printf_i>
 8031eb2:	e7e4      	b.n	8031e7e <_vfiprintf_r+0x1ea>
 8031eb4:	08033354 	.word	0x08033354
 8031eb8:	0803335e 	.word	0x0803335e
 8031ebc:	00000000 	.word	0x00000000
 8031ec0:	08031c6f 	.word	0x08031c6f
 8031ec4:	0803335a 	.word	0x0803335a

08031ec8 <_printf_common>:
 8031ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8031ecc:	4616      	mov	r6, r2
 8031ece:	4699      	mov	r9, r3
 8031ed0:	688a      	ldr	r2, [r1, #8]
 8031ed2:	690b      	ldr	r3, [r1, #16]
 8031ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8031ed8:	4293      	cmp	r3, r2
 8031eda:	bfb8      	it	lt
 8031edc:	4613      	movlt	r3, r2
 8031ede:	6033      	str	r3, [r6, #0]
 8031ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8031ee4:	4607      	mov	r7, r0
 8031ee6:	460c      	mov	r4, r1
 8031ee8:	b10a      	cbz	r2, 8031eee <_printf_common+0x26>
 8031eea:	3301      	adds	r3, #1
 8031eec:	6033      	str	r3, [r6, #0]
 8031eee:	6823      	ldr	r3, [r4, #0]
 8031ef0:	0699      	lsls	r1, r3, #26
 8031ef2:	bf42      	ittt	mi
 8031ef4:	6833      	ldrmi	r3, [r6, #0]
 8031ef6:	3302      	addmi	r3, #2
 8031ef8:	6033      	strmi	r3, [r6, #0]
 8031efa:	6825      	ldr	r5, [r4, #0]
 8031efc:	f015 0506 	ands.w	r5, r5, #6
 8031f00:	d106      	bne.n	8031f10 <_printf_common+0x48>
 8031f02:	f104 0a19 	add.w	sl, r4, #25
 8031f06:	68e3      	ldr	r3, [r4, #12]
 8031f08:	6832      	ldr	r2, [r6, #0]
 8031f0a:	1a9b      	subs	r3, r3, r2
 8031f0c:	42ab      	cmp	r3, r5
 8031f0e:	dc26      	bgt.n	8031f5e <_printf_common+0x96>
 8031f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8031f14:	1e13      	subs	r3, r2, #0
 8031f16:	6822      	ldr	r2, [r4, #0]
 8031f18:	bf18      	it	ne
 8031f1a:	2301      	movne	r3, #1
 8031f1c:	0692      	lsls	r2, r2, #26
 8031f1e:	d42b      	bmi.n	8031f78 <_printf_common+0xb0>
 8031f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8031f24:	4649      	mov	r1, r9
 8031f26:	4638      	mov	r0, r7
 8031f28:	47c0      	blx	r8
 8031f2a:	3001      	adds	r0, #1
 8031f2c:	d01e      	beq.n	8031f6c <_printf_common+0xa4>
 8031f2e:	6823      	ldr	r3, [r4, #0]
 8031f30:	6922      	ldr	r2, [r4, #16]
 8031f32:	f003 0306 	and.w	r3, r3, #6
 8031f36:	2b04      	cmp	r3, #4
 8031f38:	bf02      	ittt	eq
 8031f3a:	68e5      	ldreq	r5, [r4, #12]
 8031f3c:	6833      	ldreq	r3, [r6, #0]
 8031f3e:	1aed      	subeq	r5, r5, r3
 8031f40:	68a3      	ldr	r3, [r4, #8]
 8031f42:	bf0c      	ite	eq
 8031f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8031f48:	2500      	movne	r5, #0
 8031f4a:	4293      	cmp	r3, r2
 8031f4c:	bfc4      	itt	gt
 8031f4e:	1a9b      	subgt	r3, r3, r2
 8031f50:	18ed      	addgt	r5, r5, r3
 8031f52:	2600      	movs	r6, #0
 8031f54:	341a      	adds	r4, #26
 8031f56:	42b5      	cmp	r5, r6
 8031f58:	d11a      	bne.n	8031f90 <_printf_common+0xc8>
 8031f5a:	2000      	movs	r0, #0
 8031f5c:	e008      	b.n	8031f70 <_printf_common+0xa8>
 8031f5e:	2301      	movs	r3, #1
 8031f60:	4652      	mov	r2, sl
 8031f62:	4649      	mov	r1, r9
 8031f64:	4638      	mov	r0, r7
 8031f66:	47c0      	blx	r8
 8031f68:	3001      	adds	r0, #1
 8031f6a:	d103      	bne.n	8031f74 <_printf_common+0xac>
 8031f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8031f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031f74:	3501      	adds	r5, #1
 8031f76:	e7c6      	b.n	8031f06 <_printf_common+0x3e>
 8031f78:	18e1      	adds	r1, r4, r3
 8031f7a:	1c5a      	adds	r2, r3, #1
 8031f7c:	2030      	movs	r0, #48	; 0x30
 8031f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8031f82:	4422      	add	r2, r4
 8031f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8031f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8031f8c:	3302      	adds	r3, #2
 8031f8e:	e7c7      	b.n	8031f20 <_printf_common+0x58>
 8031f90:	2301      	movs	r3, #1
 8031f92:	4622      	mov	r2, r4
 8031f94:	4649      	mov	r1, r9
 8031f96:	4638      	mov	r0, r7
 8031f98:	47c0      	blx	r8
 8031f9a:	3001      	adds	r0, #1
 8031f9c:	d0e6      	beq.n	8031f6c <_printf_common+0xa4>
 8031f9e:	3601      	adds	r6, #1
 8031fa0:	e7d9      	b.n	8031f56 <_printf_common+0x8e>
	...

08031fa4 <_printf_i>:
 8031fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8031fa8:	7e0f      	ldrb	r7, [r1, #24]
 8031faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8031fac:	2f78      	cmp	r7, #120	; 0x78
 8031fae:	4691      	mov	r9, r2
 8031fb0:	4680      	mov	r8, r0
 8031fb2:	460c      	mov	r4, r1
 8031fb4:	469a      	mov	sl, r3
 8031fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8031fba:	d807      	bhi.n	8031fcc <_printf_i+0x28>
 8031fbc:	2f62      	cmp	r7, #98	; 0x62
 8031fbe:	d80a      	bhi.n	8031fd6 <_printf_i+0x32>
 8031fc0:	2f00      	cmp	r7, #0
 8031fc2:	f000 80d4 	beq.w	803216e <_printf_i+0x1ca>
 8031fc6:	2f58      	cmp	r7, #88	; 0x58
 8031fc8:	f000 80c0 	beq.w	803214c <_printf_i+0x1a8>
 8031fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8031fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8031fd4:	e03a      	b.n	803204c <_printf_i+0xa8>
 8031fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8031fda:	2b15      	cmp	r3, #21
 8031fdc:	d8f6      	bhi.n	8031fcc <_printf_i+0x28>
 8031fde:	a101      	add	r1, pc, #4	; (adr r1, 8031fe4 <_printf_i+0x40>)
 8031fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8031fe4:	0803203d 	.word	0x0803203d
 8031fe8:	08032051 	.word	0x08032051
 8031fec:	08031fcd 	.word	0x08031fcd
 8031ff0:	08031fcd 	.word	0x08031fcd
 8031ff4:	08031fcd 	.word	0x08031fcd
 8031ff8:	08031fcd 	.word	0x08031fcd
 8031ffc:	08032051 	.word	0x08032051
 8032000:	08031fcd 	.word	0x08031fcd
 8032004:	08031fcd 	.word	0x08031fcd
 8032008:	08031fcd 	.word	0x08031fcd
 803200c:	08031fcd 	.word	0x08031fcd
 8032010:	08032155 	.word	0x08032155
 8032014:	0803207d 	.word	0x0803207d
 8032018:	0803210f 	.word	0x0803210f
 803201c:	08031fcd 	.word	0x08031fcd
 8032020:	08031fcd 	.word	0x08031fcd
 8032024:	08032177 	.word	0x08032177
 8032028:	08031fcd 	.word	0x08031fcd
 803202c:	0803207d 	.word	0x0803207d
 8032030:	08031fcd 	.word	0x08031fcd
 8032034:	08031fcd 	.word	0x08031fcd
 8032038:	08032117 	.word	0x08032117
 803203c:	682b      	ldr	r3, [r5, #0]
 803203e:	1d1a      	adds	r2, r3, #4
 8032040:	681b      	ldr	r3, [r3, #0]
 8032042:	602a      	str	r2, [r5, #0]
 8032044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8032048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803204c:	2301      	movs	r3, #1
 803204e:	e09f      	b.n	8032190 <_printf_i+0x1ec>
 8032050:	6820      	ldr	r0, [r4, #0]
 8032052:	682b      	ldr	r3, [r5, #0]
 8032054:	0607      	lsls	r7, r0, #24
 8032056:	f103 0104 	add.w	r1, r3, #4
 803205a:	6029      	str	r1, [r5, #0]
 803205c:	d501      	bpl.n	8032062 <_printf_i+0xbe>
 803205e:	681e      	ldr	r6, [r3, #0]
 8032060:	e003      	b.n	803206a <_printf_i+0xc6>
 8032062:	0646      	lsls	r6, r0, #25
 8032064:	d5fb      	bpl.n	803205e <_printf_i+0xba>
 8032066:	f9b3 6000 	ldrsh.w	r6, [r3]
 803206a:	2e00      	cmp	r6, #0
 803206c:	da03      	bge.n	8032076 <_printf_i+0xd2>
 803206e:	232d      	movs	r3, #45	; 0x2d
 8032070:	4276      	negs	r6, r6
 8032072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8032076:	485a      	ldr	r0, [pc, #360]	; (80321e0 <_printf_i+0x23c>)
 8032078:	230a      	movs	r3, #10
 803207a:	e012      	b.n	80320a2 <_printf_i+0xfe>
 803207c:	682b      	ldr	r3, [r5, #0]
 803207e:	6820      	ldr	r0, [r4, #0]
 8032080:	1d19      	adds	r1, r3, #4
 8032082:	6029      	str	r1, [r5, #0]
 8032084:	0605      	lsls	r5, r0, #24
 8032086:	d501      	bpl.n	803208c <_printf_i+0xe8>
 8032088:	681e      	ldr	r6, [r3, #0]
 803208a:	e002      	b.n	8032092 <_printf_i+0xee>
 803208c:	0641      	lsls	r1, r0, #25
 803208e:	d5fb      	bpl.n	8032088 <_printf_i+0xe4>
 8032090:	881e      	ldrh	r6, [r3, #0]
 8032092:	4853      	ldr	r0, [pc, #332]	; (80321e0 <_printf_i+0x23c>)
 8032094:	2f6f      	cmp	r7, #111	; 0x6f
 8032096:	bf0c      	ite	eq
 8032098:	2308      	moveq	r3, #8
 803209a:	230a      	movne	r3, #10
 803209c:	2100      	movs	r1, #0
 803209e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80320a2:	6865      	ldr	r5, [r4, #4]
 80320a4:	60a5      	str	r5, [r4, #8]
 80320a6:	2d00      	cmp	r5, #0
 80320a8:	bfa2      	ittt	ge
 80320aa:	6821      	ldrge	r1, [r4, #0]
 80320ac:	f021 0104 	bicge.w	r1, r1, #4
 80320b0:	6021      	strge	r1, [r4, #0]
 80320b2:	b90e      	cbnz	r6, 80320b8 <_printf_i+0x114>
 80320b4:	2d00      	cmp	r5, #0
 80320b6:	d04b      	beq.n	8032150 <_printf_i+0x1ac>
 80320b8:	4615      	mov	r5, r2
 80320ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80320be:	fb03 6711 	mls	r7, r3, r1, r6
 80320c2:	5dc7      	ldrb	r7, [r0, r7]
 80320c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80320c8:	4637      	mov	r7, r6
 80320ca:	42bb      	cmp	r3, r7
 80320cc:	460e      	mov	r6, r1
 80320ce:	d9f4      	bls.n	80320ba <_printf_i+0x116>
 80320d0:	2b08      	cmp	r3, #8
 80320d2:	d10b      	bne.n	80320ec <_printf_i+0x148>
 80320d4:	6823      	ldr	r3, [r4, #0]
 80320d6:	07de      	lsls	r6, r3, #31
 80320d8:	d508      	bpl.n	80320ec <_printf_i+0x148>
 80320da:	6923      	ldr	r3, [r4, #16]
 80320dc:	6861      	ldr	r1, [r4, #4]
 80320de:	4299      	cmp	r1, r3
 80320e0:	bfde      	ittt	le
 80320e2:	2330      	movle	r3, #48	; 0x30
 80320e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80320e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80320ec:	1b52      	subs	r2, r2, r5
 80320ee:	6122      	str	r2, [r4, #16]
 80320f0:	f8cd a000 	str.w	sl, [sp]
 80320f4:	464b      	mov	r3, r9
 80320f6:	aa03      	add	r2, sp, #12
 80320f8:	4621      	mov	r1, r4
 80320fa:	4640      	mov	r0, r8
 80320fc:	f7ff fee4 	bl	8031ec8 <_printf_common>
 8032100:	3001      	adds	r0, #1
 8032102:	d14a      	bne.n	803219a <_printf_i+0x1f6>
 8032104:	f04f 30ff 	mov.w	r0, #4294967295
 8032108:	b004      	add	sp, #16
 803210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803210e:	6823      	ldr	r3, [r4, #0]
 8032110:	f043 0320 	orr.w	r3, r3, #32
 8032114:	6023      	str	r3, [r4, #0]
 8032116:	4833      	ldr	r0, [pc, #204]	; (80321e4 <_printf_i+0x240>)
 8032118:	2778      	movs	r7, #120	; 0x78
 803211a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 803211e:	6823      	ldr	r3, [r4, #0]
 8032120:	6829      	ldr	r1, [r5, #0]
 8032122:	061f      	lsls	r7, r3, #24
 8032124:	f851 6b04 	ldr.w	r6, [r1], #4
 8032128:	d402      	bmi.n	8032130 <_printf_i+0x18c>
 803212a:	065f      	lsls	r7, r3, #25
 803212c:	bf48      	it	mi
 803212e:	b2b6      	uxthmi	r6, r6
 8032130:	07df      	lsls	r7, r3, #31
 8032132:	bf48      	it	mi
 8032134:	f043 0320 	orrmi.w	r3, r3, #32
 8032138:	6029      	str	r1, [r5, #0]
 803213a:	bf48      	it	mi
 803213c:	6023      	strmi	r3, [r4, #0]
 803213e:	b91e      	cbnz	r6, 8032148 <_printf_i+0x1a4>
 8032140:	6823      	ldr	r3, [r4, #0]
 8032142:	f023 0320 	bic.w	r3, r3, #32
 8032146:	6023      	str	r3, [r4, #0]
 8032148:	2310      	movs	r3, #16
 803214a:	e7a7      	b.n	803209c <_printf_i+0xf8>
 803214c:	4824      	ldr	r0, [pc, #144]	; (80321e0 <_printf_i+0x23c>)
 803214e:	e7e4      	b.n	803211a <_printf_i+0x176>
 8032150:	4615      	mov	r5, r2
 8032152:	e7bd      	b.n	80320d0 <_printf_i+0x12c>
 8032154:	682b      	ldr	r3, [r5, #0]
 8032156:	6826      	ldr	r6, [r4, #0]
 8032158:	6961      	ldr	r1, [r4, #20]
 803215a:	1d18      	adds	r0, r3, #4
 803215c:	6028      	str	r0, [r5, #0]
 803215e:	0635      	lsls	r5, r6, #24
 8032160:	681b      	ldr	r3, [r3, #0]
 8032162:	d501      	bpl.n	8032168 <_printf_i+0x1c4>
 8032164:	6019      	str	r1, [r3, #0]
 8032166:	e002      	b.n	803216e <_printf_i+0x1ca>
 8032168:	0670      	lsls	r0, r6, #25
 803216a:	d5fb      	bpl.n	8032164 <_printf_i+0x1c0>
 803216c:	8019      	strh	r1, [r3, #0]
 803216e:	2300      	movs	r3, #0
 8032170:	6123      	str	r3, [r4, #16]
 8032172:	4615      	mov	r5, r2
 8032174:	e7bc      	b.n	80320f0 <_printf_i+0x14c>
 8032176:	682b      	ldr	r3, [r5, #0]
 8032178:	1d1a      	adds	r2, r3, #4
 803217a:	602a      	str	r2, [r5, #0]
 803217c:	681d      	ldr	r5, [r3, #0]
 803217e:	6862      	ldr	r2, [r4, #4]
 8032180:	2100      	movs	r1, #0
 8032182:	4628      	mov	r0, r5
 8032184:	f7f0 f824 	bl	80221d0 <memchr>
 8032188:	b108      	cbz	r0, 803218e <_printf_i+0x1ea>
 803218a:	1b40      	subs	r0, r0, r5
 803218c:	6060      	str	r0, [r4, #4]
 803218e:	6863      	ldr	r3, [r4, #4]
 8032190:	6123      	str	r3, [r4, #16]
 8032192:	2300      	movs	r3, #0
 8032194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8032198:	e7aa      	b.n	80320f0 <_printf_i+0x14c>
 803219a:	6923      	ldr	r3, [r4, #16]
 803219c:	462a      	mov	r2, r5
 803219e:	4649      	mov	r1, r9
 80321a0:	4640      	mov	r0, r8
 80321a2:	47d0      	blx	sl
 80321a4:	3001      	adds	r0, #1
 80321a6:	d0ad      	beq.n	8032104 <_printf_i+0x160>
 80321a8:	6823      	ldr	r3, [r4, #0]
 80321aa:	079b      	lsls	r3, r3, #30
 80321ac:	d413      	bmi.n	80321d6 <_printf_i+0x232>
 80321ae:	68e0      	ldr	r0, [r4, #12]
 80321b0:	9b03      	ldr	r3, [sp, #12]
 80321b2:	4298      	cmp	r0, r3
 80321b4:	bfb8      	it	lt
 80321b6:	4618      	movlt	r0, r3
 80321b8:	e7a6      	b.n	8032108 <_printf_i+0x164>
 80321ba:	2301      	movs	r3, #1
 80321bc:	4632      	mov	r2, r6
 80321be:	4649      	mov	r1, r9
 80321c0:	4640      	mov	r0, r8
 80321c2:	47d0      	blx	sl
 80321c4:	3001      	adds	r0, #1
 80321c6:	d09d      	beq.n	8032104 <_printf_i+0x160>
 80321c8:	3501      	adds	r5, #1
 80321ca:	68e3      	ldr	r3, [r4, #12]
 80321cc:	9903      	ldr	r1, [sp, #12]
 80321ce:	1a5b      	subs	r3, r3, r1
 80321d0:	42ab      	cmp	r3, r5
 80321d2:	dcf2      	bgt.n	80321ba <_printf_i+0x216>
 80321d4:	e7eb      	b.n	80321ae <_printf_i+0x20a>
 80321d6:	2500      	movs	r5, #0
 80321d8:	f104 0619 	add.w	r6, r4, #25
 80321dc:	e7f5      	b.n	80321ca <_printf_i+0x226>
 80321de:	bf00      	nop
 80321e0:	08033365 	.word	0x08033365
 80321e4:	08033376 	.word	0x08033376

080321e8 <__sflush_r>:
 80321e8:	898a      	ldrh	r2, [r1, #12]
 80321ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80321ee:	4605      	mov	r5, r0
 80321f0:	0710      	lsls	r0, r2, #28
 80321f2:	460c      	mov	r4, r1
 80321f4:	d458      	bmi.n	80322a8 <__sflush_r+0xc0>
 80321f6:	684b      	ldr	r3, [r1, #4]
 80321f8:	2b00      	cmp	r3, #0
 80321fa:	dc05      	bgt.n	8032208 <__sflush_r+0x20>
 80321fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80321fe:	2b00      	cmp	r3, #0
 8032200:	dc02      	bgt.n	8032208 <__sflush_r+0x20>
 8032202:	2000      	movs	r0, #0
 8032204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803220a:	2e00      	cmp	r6, #0
 803220c:	d0f9      	beq.n	8032202 <__sflush_r+0x1a>
 803220e:	2300      	movs	r3, #0
 8032210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8032214:	682f      	ldr	r7, [r5, #0]
 8032216:	6a21      	ldr	r1, [r4, #32]
 8032218:	602b      	str	r3, [r5, #0]
 803221a:	d032      	beq.n	8032282 <__sflush_r+0x9a>
 803221c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803221e:	89a3      	ldrh	r3, [r4, #12]
 8032220:	075a      	lsls	r2, r3, #29
 8032222:	d505      	bpl.n	8032230 <__sflush_r+0x48>
 8032224:	6863      	ldr	r3, [r4, #4]
 8032226:	1ac0      	subs	r0, r0, r3
 8032228:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803222a:	b10b      	cbz	r3, 8032230 <__sflush_r+0x48>
 803222c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803222e:	1ac0      	subs	r0, r0, r3
 8032230:	2300      	movs	r3, #0
 8032232:	4602      	mov	r2, r0
 8032234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8032236:	6a21      	ldr	r1, [r4, #32]
 8032238:	4628      	mov	r0, r5
 803223a:	47b0      	blx	r6
 803223c:	1c43      	adds	r3, r0, #1
 803223e:	89a3      	ldrh	r3, [r4, #12]
 8032240:	d106      	bne.n	8032250 <__sflush_r+0x68>
 8032242:	6829      	ldr	r1, [r5, #0]
 8032244:	291d      	cmp	r1, #29
 8032246:	d82b      	bhi.n	80322a0 <__sflush_r+0xb8>
 8032248:	4a29      	ldr	r2, [pc, #164]	; (80322f0 <__sflush_r+0x108>)
 803224a:	410a      	asrs	r2, r1
 803224c:	07d6      	lsls	r6, r2, #31
 803224e:	d427      	bmi.n	80322a0 <__sflush_r+0xb8>
 8032250:	2200      	movs	r2, #0
 8032252:	6062      	str	r2, [r4, #4]
 8032254:	04d9      	lsls	r1, r3, #19
 8032256:	6922      	ldr	r2, [r4, #16]
 8032258:	6022      	str	r2, [r4, #0]
 803225a:	d504      	bpl.n	8032266 <__sflush_r+0x7e>
 803225c:	1c42      	adds	r2, r0, #1
 803225e:	d101      	bne.n	8032264 <__sflush_r+0x7c>
 8032260:	682b      	ldr	r3, [r5, #0]
 8032262:	b903      	cbnz	r3, 8032266 <__sflush_r+0x7e>
 8032264:	6560      	str	r0, [r4, #84]	; 0x54
 8032266:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8032268:	602f      	str	r7, [r5, #0]
 803226a:	2900      	cmp	r1, #0
 803226c:	d0c9      	beq.n	8032202 <__sflush_r+0x1a>
 803226e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8032272:	4299      	cmp	r1, r3
 8032274:	d002      	beq.n	803227c <__sflush_r+0x94>
 8032276:	4628      	mov	r0, r5
 8032278:	f7ff fbea 	bl	8031a50 <_free_r>
 803227c:	2000      	movs	r0, #0
 803227e:	6360      	str	r0, [r4, #52]	; 0x34
 8032280:	e7c0      	b.n	8032204 <__sflush_r+0x1c>
 8032282:	2301      	movs	r3, #1
 8032284:	4628      	mov	r0, r5
 8032286:	47b0      	blx	r6
 8032288:	1c41      	adds	r1, r0, #1
 803228a:	d1c8      	bne.n	803221e <__sflush_r+0x36>
 803228c:	682b      	ldr	r3, [r5, #0]
 803228e:	2b00      	cmp	r3, #0
 8032290:	d0c5      	beq.n	803221e <__sflush_r+0x36>
 8032292:	2b1d      	cmp	r3, #29
 8032294:	d001      	beq.n	803229a <__sflush_r+0xb2>
 8032296:	2b16      	cmp	r3, #22
 8032298:	d101      	bne.n	803229e <__sflush_r+0xb6>
 803229a:	602f      	str	r7, [r5, #0]
 803229c:	e7b1      	b.n	8032202 <__sflush_r+0x1a>
 803229e:	89a3      	ldrh	r3, [r4, #12]
 80322a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80322a4:	81a3      	strh	r3, [r4, #12]
 80322a6:	e7ad      	b.n	8032204 <__sflush_r+0x1c>
 80322a8:	690f      	ldr	r7, [r1, #16]
 80322aa:	2f00      	cmp	r7, #0
 80322ac:	d0a9      	beq.n	8032202 <__sflush_r+0x1a>
 80322ae:	0793      	lsls	r3, r2, #30
 80322b0:	680e      	ldr	r6, [r1, #0]
 80322b2:	bf08      	it	eq
 80322b4:	694b      	ldreq	r3, [r1, #20]
 80322b6:	600f      	str	r7, [r1, #0]
 80322b8:	bf18      	it	ne
 80322ba:	2300      	movne	r3, #0
 80322bc:	eba6 0807 	sub.w	r8, r6, r7
 80322c0:	608b      	str	r3, [r1, #8]
 80322c2:	f1b8 0f00 	cmp.w	r8, #0
 80322c6:	dd9c      	ble.n	8032202 <__sflush_r+0x1a>
 80322c8:	6a21      	ldr	r1, [r4, #32]
 80322ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80322cc:	4643      	mov	r3, r8
 80322ce:	463a      	mov	r2, r7
 80322d0:	4628      	mov	r0, r5
 80322d2:	47b0      	blx	r6
 80322d4:	2800      	cmp	r0, #0
 80322d6:	dc06      	bgt.n	80322e6 <__sflush_r+0xfe>
 80322d8:	89a3      	ldrh	r3, [r4, #12]
 80322da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80322de:	81a3      	strh	r3, [r4, #12]
 80322e0:	f04f 30ff 	mov.w	r0, #4294967295
 80322e4:	e78e      	b.n	8032204 <__sflush_r+0x1c>
 80322e6:	4407      	add	r7, r0
 80322e8:	eba8 0800 	sub.w	r8, r8, r0
 80322ec:	e7e9      	b.n	80322c2 <__sflush_r+0xda>
 80322ee:	bf00      	nop
 80322f0:	dfbffffe 	.word	0xdfbffffe

080322f4 <_fflush_r>:
 80322f4:	b538      	push	{r3, r4, r5, lr}
 80322f6:	690b      	ldr	r3, [r1, #16]
 80322f8:	4605      	mov	r5, r0
 80322fa:	460c      	mov	r4, r1
 80322fc:	b913      	cbnz	r3, 8032304 <_fflush_r+0x10>
 80322fe:	2500      	movs	r5, #0
 8032300:	4628      	mov	r0, r5
 8032302:	bd38      	pop	{r3, r4, r5, pc}
 8032304:	b118      	cbz	r0, 803230e <_fflush_r+0x1a>
 8032306:	6a03      	ldr	r3, [r0, #32]
 8032308:	b90b      	cbnz	r3, 803230e <_fflush_r+0x1a>
 803230a:	f7ff f99b 	bl	8031644 <__sinit>
 803230e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8032312:	2b00      	cmp	r3, #0
 8032314:	d0f3      	beq.n	80322fe <_fflush_r+0xa>
 8032316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8032318:	07d0      	lsls	r0, r2, #31
 803231a:	d404      	bmi.n	8032326 <_fflush_r+0x32>
 803231c:	0599      	lsls	r1, r3, #22
 803231e:	d402      	bmi.n	8032326 <_fflush_r+0x32>
 8032320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8032322:	f7ff fb84 	bl	8031a2e <__retarget_lock_acquire_recursive>
 8032326:	4628      	mov	r0, r5
 8032328:	4621      	mov	r1, r4
 803232a:	f7ff ff5d 	bl	80321e8 <__sflush_r>
 803232e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8032330:	07da      	lsls	r2, r3, #31
 8032332:	4605      	mov	r5, r0
 8032334:	d4e4      	bmi.n	8032300 <_fflush_r+0xc>
 8032336:	89a3      	ldrh	r3, [r4, #12]
 8032338:	059b      	lsls	r3, r3, #22
 803233a:	d4e1      	bmi.n	8032300 <_fflush_r+0xc>
 803233c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803233e:	f7ff fb77 	bl	8031a30 <__retarget_lock_release_recursive>
 8032342:	e7dd      	b.n	8032300 <_fflush_r+0xc>

08032344 <__swhatbuf_r>:
 8032344:	b570      	push	{r4, r5, r6, lr}
 8032346:	460c      	mov	r4, r1
 8032348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803234c:	2900      	cmp	r1, #0
 803234e:	b096      	sub	sp, #88	; 0x58
 8032350:	4615      	mov	r5, r2
 8032352:	461e      	mov	r6, r3
 8032354:	da0d      	bge.n	8032372 <__swhatbuf_r+0x2e>
 8032356:	89a3      	ldrh	r3, [r4, #12]
 8032358:	f013 0f80 	tst.w	r3, #128	; 0x80
 803235c:	f04f 0100 	mov.w	r1, #0
 8032360:	bf0c      	ite	eq
 8032362:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8032366:	2340      	movne	r3, #64	; 0x40
 8032368:	2000      	movs	r0, #0
 803236a:	6031      	str	r1, [r6, #0]
 803236c:	602b      	str	r3, [r5, #0]
 803236e:	b016      	add	sp, #88	; 0x58
 8032370:	bd70      	pop	{r4, r5, r6, pc}
 8032372:	466a      	mov	r2, sp
 8032374:	f000 f848 	bl	8032408 <_fstat_r>
 8032378:	2800      	cmp	r0, #0
 803237a:	dbec      	blt.n	8032356 <__swhatbuf_r+0x12>
 803237c:	9901      	ldr	r1, [sp, #4]
 803237e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8032382:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8032386:	4259      	negs	r1, r3
 8032388:	4159      	adcs	r1, r3
 803238a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803238e:	e7eb      	b.n	8032368 <__swhatbuf_r+0x24>

08032390 <__smakebuf_r>:
 8032390:	898b      	ldrh	r3, [r1, #12]
 8032392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8032394:	079d      	lsls	r5, r3, #30
 8032396:	4606      	mov	r6, r0
 8032398:	460c      	mov	r4, r1
 803239a:	d507      	bpl.n	80323ac <__smakebuf_r+0x1c>
 803239c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80323a0:	6023      	str	r3, [r4, #0]
 80323a2:	6123      	str	r3, [r4, #16]
 80323a4:	2301      	movs	r3, #1
 80323a6:	6163      	str	r3, [r4, #20]
 80323a8:	b002      	add	sp, #8
 80323aa:	bd70      	pop	{r4, r5, r6, pc}
 80323ac:	ab01      	add	r3, sp, #4
 80323ae:	466a      	mov	r2, sp
 80323b0:	f7ff ffc8 	bl	8032344 <__swhatbuf_r>
 80323b4:	9900      	ldr	r1, [sp, #0]
 80323b6:	4605      	mov	r5, r0
 80323b8:	4630      	mov	r0, r6
 80323ba:	f7ff fbb5 	bl	8031b28 <_malloc_r>
 80323be:	b948      	cbnz	r0, 80323d4 <__smakebuf_r+0x44>
 80323c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80323c4:	059a      	lsls	r2, r3, #22
 80323c6:	d4ef      	bmi.n	80323a8 <__smakebuf_r+0x18>
 80323c8:	f023 0303 	bic.w	r3, r3, #3
 80323cc:	f043 0302 	orr.w	r3, r3, #2
 80323d0:	81a3      	strh	r3, [r4, #12]
 80323d2:	e7e3      	b.n	803239c <__smakebuf_r+0xc>
 80323d4:	89a3      	ldrh	r3, [r4, #12]
 80323d6:	6020      	str	r0, [r4, #0]
 80323d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80323dc:	81a3      	strh	r3, [r4, #12]
 80323de:	9b00      	ldr	r3, [sp, #0]
 80323e0:	6163      	str	r3, [r4, #20]
 80323e2:	9b01      	ldr	r3, [sp, #4]
 80323e4:	6120      	str	r0, [r4, #16]
 80323e6:	b15b      	cbz	r3, 8032400 <__smakebuf_r+0x70>
 80323e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80323ec:	4630      	mov	r0, r6
 80323ee:	f000 f81d 	bl	803242c <_isatty_r>
 80323f2:	b128      	cbz	r0, 8032400 <__smakebuf_r+0x70>
 80323f4:	89a3      	ldrh	r3, [r4, #12]
 80323f6:	f023 0303 	bic.w	r3, r3, #3
 80323fa:	f043 0301 	orr.w	r3, r3, #1
 80323fe:	81a3      	strh	r3, [r4, #12]
 8032400:	89a3      	ldrh	r3, [r4, #12]
 8032402:	431d      	orrs	r5, r3
 8032404:	81a5      	strh	r5, [r4, #12]
 8032406:	e7cf      	b.n	80323a8 <__smakebuf_r+0x18>

08032408 <_fstat_r>:
 8032408:	b538      	push	{r3, r4, r5, lr}
 803240a:	4d07      	ldr	r5, [pc, #28]	; (8032428 <_fstat_r+0x20>)
 803240c:	2300      	movs	r3, #0
 803240e:	4604      	mov	r4, r0
 8032410:	4608      	mov	r0, r1
 8032412:	4611      	mov	r1, r2
 8032414:	602b      	str	r3, [r5, #0]
 8032416:	f7f5 f815 	bl	8027444 <_fstat>
 803241a:	1c43      	adds	r3, r0, #1
 803241c:	d102      	bne.n	8032424 <_fstat_r+0x1c>
 803241e:	682b      	ldr	r3, [r5, #0]
 8032420:	b103      	cbz	r3, 8032424 <_fstat_r+0x1c>
 8032422:	6023      	str	r3, [r4, #0]
 8032424:	bd38      	pop	{r3, r4, r5, pc}
 8032426:	bf00      	nop
 8032428:	2000874c 	.word	0x2000874c

0803242c <_isatty_r>:
 803242c:	b538      	push	{r3, r4, r5, lr}
 803242e:	4d06      	ldr	r5, [pc, #24]	; (8032448 <_isatty_r+0x1c>)
 8032430:	2300      	movs	r3, #0
 8032432:	4604      	mov	r4, r0
 8032434:	4608      	mov	r0, r1
 8032436:	602b      	str	r3, [r5, #0]
 8032438:	f7f5 f814 	bl	8027464 <_isatty>
 803243c:	1c43      	adds	r3, r0, #1
 803243e:	d102      	bne.n	8032446 <_isatty_r+0x1a>
 8032440:	682b      	ldr	r3, [r5, #0]
 8032442:	b103      	cbz	r3, 8032446 <_isatty_r+0x1a>
 8032444:	6023      	str	r3, [r4, #0]
 8032446:	bd38      	pop	{r3, r4, r5, pc}
 8032448:	2000874c 	.word	0x2000874c

0803244c <_sbrk_r>:
 803244c:	b538      	push	{r3, r4, r5, lr}
 803244e:	4d06      	ldr	r5, [pc, #24]	; (8032468 <_sbrk_r+0x1c>)
 8032450:	2300      	movs	r3, #0
 8032452:	4604      	mov	r4, r0
 8032454:	4608      	mov	r0, r1
 8032456:	602b      	str	r3, [r5, #0]
 8032458:	f7f5 f81c 	bl	8027494 <_sbrk>
 803245c:	1c43      	adds	r3, r0, #1
 803245e:	d102      	bne.n	8032466 <_sbrk_r+0x1a>
 8032460:	682b      	ldr	r3, [r5, #0]
 8032462:	b103      	cbz	r3, 8032466 <_sbrk_r+0x1a>
 8032464:	6023      	str	r3, [r4, #0]
 8032466:	bd38      	pop	{r3, r4, r5, pc}
 8032468:	2000874c 	.word	0x2000874c

0803246c <_init>:
 803246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803246e:	bf00      	nop
 8032470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8032472:	bc08      	pop	{r3}
 8032474:	469e      	mov	lr, r3
 8032476:	4770      	bx	lr

08032478 <_fini>:
 8032478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803247a:	bf00      	nop
 803247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803247e:	bc08      	pop	{r3}
 8032480:	469e      	mov	lr, r3
 8032482:	4770      	bx	lr
